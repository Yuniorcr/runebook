<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="64cae70b8c8e04f6da7e831db99ec507f348f875" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="a248926c6b485e7bdf457cef68908b25e6424544" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="f7126bf63fb5d55e1c50142f74a7b009caaa3932" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="cdeb90d2bf8275eab3d7be4b67ef9fc0daf55588" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="ada71c462f447f364b1bef5bd3a8a122f56a0419" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="5392b6e8328be7dbc507002914b8bba08c37aa0b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="07044a36276f4964e52fafbc8637339a15d059de" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="a1975a7e0702c566212e09d231a8af09e6a1b135" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="3be352690fa0fa3ef54f830f6e18283eb2997c42" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="221b5ad4be94c64345f9330c5ca699ef1683ff3f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="48366385041714313264f54f6f227c09ebc2c7ee" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="d49c134fd4f615c3c993361a8da61f1a575788d0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="ca85efafcb00b8938ace22dacd3162276f9dbb77" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">値が始まる蓄積&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値と印加&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;動作を&lt;/a&gt;左から現在のアキュムレータ値と元のコレクション内のそのインデックスを持つ各要素の右に。</target>
        </trans-unit>
        <trans-unit id="ae6cc016ad96d05f14db6d26d3e9c67b9c278b43" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="8eac016d4931189efe3e233318b3463880b2d17e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="9f2498e1175a66d3f2389f3f5921bf8126b53fb9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="e50922f4549b58c5a41f4cf28105893a59305638" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="14f5ed33ef7891e166ad6e304078e43739c45bc7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="5139ef4a6259c496fbcce364929ff9ff8be89983" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="b49e75d806989ef99f1beb1be6a4b244231b50d1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="a66e47e81114b98157386b3156e1c6e019b21e30" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="1860473b45ca6882ee50e8fc058cabcc69b53299" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="1236dd9e958f14c9955c6fc59a9dff8371be2208" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="114999fa69ed69c44be540f63dd7169cde2827e2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="71c5baccce3c10735674e26504c50fda45346776" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="307dbd50ef858e8dd9ac380f56dcd3ea242e9c69" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="559903b0545a6ff2ddf045918701294a7c40e5f1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="07f8f7b78f6653489928dd51903cf81e38031927" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="d3fe8f77d1761b2159dd0a75b53fe9aa0515f8bc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="22b0c89d0ddfc9b3c0c98e129e8fa11e86ab2de8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="4763b5f05cc1de476bf552672dbcbb850b49a6d7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="5490bfd5ee3160eb75e3b9df1af0ca84a879002c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="53ab8c70c22ed9e8981524d6420d7ea8be35ecef" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="2c330dcfb397db5116ee3c9e8a7eee7b0d708a1b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="7b0a20798d8373358bb3a3797ef59a87c79565ca" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="bee9d1b23c3e538f15f8d302c0e70f8c2340b934" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="c64a2ceafa143c2d00870e79ffaa421ed31bb3c2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="6c9310a3890c5f55eaab8539e48c3da7ed2fa926" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="9d33d409b3f36b499f1d34f91d4b3182df3ec086" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="d3d3794fa1bf1fbf34130e8b10da77cfba7e488a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と各文字に&lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="f6ebe0fcc76170dca6287b3f16c75c11ecfa36bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積&lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、左から右に現在のアキュムレータ値と元の文字シーケンスのインデックスを持つ各文字に操作を適用します。</target>
        </trans-unit>
        <trans-unit id="4440b3cb5a7f1603bbe877327a81f5352b0390b7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、右から左に各文字と現在のアキュムレータ値に&lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="f35c912bb54aa8f86dcf3a5c943ac79a80a38d2b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して、元の文字シーケンスのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各文字に演算を適用して値を累積します。</target>
        </trans-unit>
        <trans-unit id="df4a20aafe1816d4ae3bb50e8ef26f714550b7c4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="3ded979556ec66b86263cc50672189853cbe6df2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="cc0f972f641e5a2958364d9d3120433aa963a4c4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と各文字に&lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="599f559b3f09f9bcfec817a225274a775388058f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、&lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を左から右に現在のアキュムレータ値と元のコレクションのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="d19f219e0cdc3d3bfb63791d08887446ac9e9a3a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積&lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、左から右に現在のアキュムレータ値と元のシーケンスのインデックスを持つ各要素に操作を適用します。</target>
        </trans-unit>
        <trans-unit id="d21e8fc90a5dc8f5129b14758d5b65d9a4f1019f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積&lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、左から右に現在のアキュムレータ値と元の文字シーケンスのインデックスを持つ各文字に操作を適用します。</target>
        </trans-unit>
        <trans-unit id="cc59d217ef46636ebec636581de2c64d53fd6514" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="49c3a042cfe5d9fbd613245cd10c42287d5f2f96" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、右から左に各文字と現在のアキュムレータ値に&lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="b3480aecd4e02dae9fdc44b037fd6c90511098f7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して、元のリストのインデックスと現在のアキュムレータ値を持つ各要素に右から左に&lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して値を累積します。</target>
        </trans-unit>
        <trans-unit id="1f40297465a1c70fea90559353010ccf0d716e92" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して、元の文字シーケンスのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各文字に演算を適用して値を累積します。</target>
        </trans-unit>
        <trans-unit id="c9d596822e681a3837ffb6cce00cbd5f3c6aa782" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="3ed0c34fd7cc0387bbec6ce7d54ecd3bbe945f34" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="a8bc0dbab446ffeba6039fbd1efcaf6b15572044" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と各文字に&lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="558d3b021fe93e0c86ef56c10f1c47533f05af36" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列内のインデックスを持つ各要素に&lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="27b9ff8a68e274df1997048c56efc68cf30adb24" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、&lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を左から右に現在のアキュムレータ値と元のコレクションのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="6df77d16f11c1223c1baac77b5602ac9c665f3bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">&lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積&lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、左から右に現在のアキュムレータ値と元のシーケンスのインデックスを持つ各要素に操作を適用します。</target>
        </trans-unit>
        <trans-unit id="807de1643c2b2b78925794072b148c727be9bb94" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">&lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積&lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、左から右に現在のアキュムレータ値と元の文字シーケンスのインデックスを持つ各文字に操作を適用します。</target>
        </trans-unit>
        <trans-unit id="562528ad5090a03163aa85431ff993dfe1cb34e2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、右から左に各要素と現在のアキュムレータ値に&lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="7e5a18d18b6ea106e7fd022ca36a9ea98316b99f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、右から左に各文字と現在のアキュムレータ値に&lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
        <trans-unit id="49cdab75e1058943e45554f79f33d888b8fda138" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="93233d3611e78a9e986ee2cc42b9b79bf10abcad" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して、元のリストのインデックスと現在のアキュムレータ値を持つ各要素に右から左に&lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して値を累積します。</target>
        </trans-unit>
        <trans-unit id="c75fd7bfdba2e7fb6834bddbe9102e47a431193b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から開始して、元の文字シーケンスのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各文字に演算を適用して値を累積します。</target>
        </trans-unit>
        <trans-unit id="76cebd54f3993385cab7df9720180dcada6841c3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">最後の文字から開始して値を累積&lt;a href=&quot;../../kotlin.text/reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各文字と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="fcee490d18f29798a286f9eb64ead73ec1d9cbac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">最後の文字で始まる値を累積し、元の文字シーケンスのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.text/reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各文字に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="2ba228748be0f7ad05257cd1b4591e5fb65cfe28" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">最後の文字から開始して値を累積&lt;a href=&quot;../reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各文字と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="c8cd5e24b597d34dae44b5517a503c6428f412cf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">最後の文字で始まる値を累積し、元の文字シーケンスのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各文字に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="43e1de5a32bc29e6a55a4a24e77691602c443664" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">最後の文字から開始して値を累積&lt;a href=&quot;reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各文字と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="cc4c383a0404d1510a550018f8de671d271f45d6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">最後の文字で始まる値を累積し、元の文字シーケンスのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各文字に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="223c39faad57245886372909fb3b0ce01c92d2dd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="48851eb90c20347a03972a9a9e35c8cd3b589b3b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="46e4689cdbb586043b372f3453f08d8f51fb154f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="e5b6181c2921dfa05b3146653ce0cc5b6b301ba6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="c7cd9b56bd10b7bd6516b2b7b4ad7617e6835a03" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="12885dbd6c83cb1b1a7c3d506ef25875ed5be671" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="3de3aba8ca54d790d2f37db9960ca7323ba8f4ac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="53cf28f2a03ea4181dc3350b7a72096e73ada697" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="832c4420f9686e9927042f61458e7ee2ddfa6f27" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="af7bba8f9b8307752737300129d46ece87232546" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="e4cad344038108c09ca7ad4406e8be3d188c3394" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="9dc03fad9cbac41123c9a7c003fd4a21e490c88e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="7a2fa4d14d51bc631ce79857775e4c38d7b106fd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="aa469ac172e6fa06453c647b2171f985ff9499bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="b91754d3d3390b73be55f880cff10140f2b2eb3d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="9482d2e8b61a34d1169ed74bf5ef532dc3678646" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="0cdd6ab1b96481e5b9e5faec0f59200545a0583d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="bb4be3dadb51b259b90fa3e16601e786dadde5db" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="4e6aeecb581b8796488bd12830cb92b454a25279" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="b346a358b9cc81cf7bed06a3a7466a59f86ec080" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="b9d203c3dffef1adcde02394cfc4efde49b40380" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="337922140b8a253067f59472f19f517511a3f4a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="331d4761ce20df159ba62a8e9746a8cebeb173b6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="137b5314821e08bf3963257c7403b690b4b9607e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="cc16c3cee50083b832c4e37b5924ac9b35b3084d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="aba298431edc67384f78a10b5ce74bbbb6af3247" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="0139f4a1f67f7082aa70211b80880c7b76df1b11" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../reduce-right#kotlin.collections%24reduceRight%28kotlin.collections.List%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;../reduce-right#kotlin.collections%24reduceRight%28kotlin.collections.List%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="13d4cde2b0764f59c3e88214f212e3dcf2495f47" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元のリストのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;../reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="a7cad93f2d7657b71b1d78b959688fcd46621896" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積&lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;し&lt;/a&gt;、右から左に各要素と現在のアキュムレータ値に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="e4b2bfd35ae32b86b9fd8a69c03c326767cf16d0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元の配列のインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="54f9ed71424b9157ecadee215713e9bba526a331" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">最後の要素から開始して値を累積し、元のリストのインデックスと現在のアキュムレータ値を使用&lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、右から左に各要素に演算を適用します。</target>
        </trans-unit>
        <trans-unit id="f0f4545ce33a5c4bc28654e601d594691299813a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">最初の文字から開始して値を累積し、左から右に現在のアキュムレータ値と各文字に&lt;a href=&quot;../../kotlin.text/reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="d1e0db235636dd8bb2f8a74a566cbfde6bf945ce" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">値は、最初の文字で始まり、適用蓄積&lt;a href=&quot;../../kotlin.text/reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;動作を&lt;/a&gt;左から現在のアキュムレータ値と元の文字列にそのインデックスを有する各文字の右側に。</target>
        </trans-unit>
        <trans-unit id="a96ad9cc61101b2b7800aca999bbdf68a03f2a3d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">最初の文字から開始して値を累積し、左から右に現在のアキュムレータ値と各文字に&lt;a href=&quot;../reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="5cc21ef80924866c007302783e6bfaf7e29e81d4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">値は、最初の文字で始まり、適用蓄積&lt;a href=&quot;../reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;動作を&lt;/a&gt;左から現在のアキュムレータ値と元の文字列にそのインデックスを有する各文字の右側に。</target>
        </trans-unit>
        <trans-unit id="8fe48cfc9e1bd1ca157c0a6c6103e2e4bd299e3c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">最初の文字から開始して値を累積し、左から右に現在のアキュムレータ値と各文字に&lt;a href=&quot;reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="1fd5a5c17254540a0a21d13b9ed3b9e260d5b94d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">値は、最初の文字で始まり、適用蓄積&lt;a href=&quot;reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;動作を&lt;/a&gt;左から現在のアキュムレータ値と元の文字列にそのインデックスを有する各文字の右側に。</target>
        </trans-unit>
        <trans-unit id="248c747349a0abb2c62f78eec67ddc43054780f1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="433e22b4c2f7a2d64ee39ca3df4c0c9b0c759f8d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="5e839074c33254c2b9328706dbe7eb467c30a7f2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="be53d8c59c25598af497f6c28d054c0353b4058c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="980faf52b90229ab2b41d747c2c34ec73bd1ee8e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="89cf401abd535473627a54facfb31a73c40d7a46" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="1ef97fdd684dafe7a04e83394a029258ced21f7f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="70e0d67338be3316f715cceb636f8c318e79e2a0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="640a2c513ddb26790db4a44197518c4eee1b475f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;演算&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="fd355c987cd5cf722ee437c8650391005c0a03e0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="2ba47de8f57c517e779e125c79e73b3d3403be13" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="c1094a345408563a982bdb6b6a65f5fc49b76fa1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="d82d305dda7e3351f9b396a18c339994d26dfa61" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="e8c9ca24e546d0048d49537f26734fc78f7effcc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="185b9a4216c226201933f3ee6dec1a5ce1270b7a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="bea213869ae97ab3d674d855b3157c1b44a2d65d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="16217ed73b4713c683baf5e06e9b14f8bb6e67a8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="dce7e490c924306eda3757d316fb0d193cb60187" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="0f054fd13a8f4ee1aa0591d38cbd3c12444ae022" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="7bd0832fc207e0ea62c5474e12a4176bf3dd43a9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="fa7c923fbbbaaef404e0b62d0888f57596d98464" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="11021c4609780d51c1928be97edcebd99208f72f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="b9815ab7af7fe519f35c46260122076f54f67554" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="12f704b9aab625a609b5de332989f6107f5b8384" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="d5c477f32fa63050b48671fa15b2aabbf9dc1cf5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="11fa318e81b97d98c5129af5124f86c62b278a93" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="4ea2e63ce674d60d45a9ceb636c2ca95ec0ae22d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="1e6ca49c3c7709eea512fa3e7e8bf7eb294179c8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右への&lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を現在のアキュムレータ値と元のコレクションのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="8069e0bf6f3be77c4c2cdbdbb3c95e8a511bba0e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="bba502c1cf16bf6ff7fbd37a059d89a103114204" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;../reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="5c703a169727e73cc34a682104a0167613ad9c2d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右への&lt;a href=&quot;../reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を現在のアキュムレータ値と元のコレクションのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="15fec208bed0d4e7edb677a5ad408449e040432f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右への&lt;a href=&quot;../reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を現在のアキュムレータ値と元のシーケンスのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="25e83006176ff984b56e59fec928e14f4211c9d6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="cc59b8404f372ae06aa53daff9abe7578f8f70a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と各要素に&lt;a href=&quot;reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="adb2c2d6121c4c1f6eb3baba127dc934958bcd09" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用します。</target>
        </trans-unit>
        <trans-unit id="3e4ecc74ed413a6276db8d2f68b99f485f63d327" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右への&lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を現在のアキュムレータ値と元のコレクションのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="d79a429177e33420c991393045fdb6fad80077b4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">最初の要素から開始して値を累積し、左から右への&lt;a href=&quot;reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を現在のアキュムレータ値と元のシーケンスのインデックスを持つ各要素に適用します。</target>
        </trans-unit>
        <trans-unit id="f4c5ffba0be9c51825ab2529954ee8a0a0ced05b" translate="yes" xml:space="preserve">
          <source>Active coroutines that were launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; do not keep the process alive. They are like daemon threads.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScopeで&lt;/a&gt;起動されたアクティブなコルーチンは、プロセスを存続させません。それらはデーモンスレッドのようなものです。</target>
        </trans-unit>
        <trans-unit id="3abb8b0e9f35e7145cfe58f15f4108a25b21c21c" translate="yes" xml:space="preserve">
          <source>Actively maintained code bases can benefit from getting bug fixes ASAP, without waiting for a full deprecation cycle to complete. Currently such project can enable the -progressive flag and get such fixes enabled even in incremental releases.</source>
          <target state="translated">アクティブにメンテナンスされているコードベースは、完全な非推奨化サイクルの完了を待たずに、バグフィックスを早急に取得することで利益を得ることができます。現在、このようなプロジェクトは -progressive フラグを有効にして、インクリメンタルリリースでもそのような修正を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="00adac1f2daf70a02054ff78cff9687a55edf4ad" translate="yes" xml:space="preserve">
          <source>Actor is more efficient than locking under load, because in this case it always has work to do and it does not have to switch to a different context at all.</source>
          <target state="translated">Actorは負荷時にロックするよりも効率的で、この場合は常にやるべきことがあり、別のコンテキストに切り替える必要が全くないからです。</target>
        </trans-unit>
        <trans-unit id="a70d36e754fb82756c6d5927519109a37d91e98d" translate="yes" xml:space="preserve">
          <source>Actors</source>
          <target state="translated">Actors</target>
        </trans-unit>
        <trans-unit id="04592fb8dca5734167a395e1dd811c37905424a8" translate="yes" xml:space="preserve">
          <source>Actual number of bits available in the set. All bits with indices &amp;gt;= size assumed to be 0</source>
          <target state="translated">セットで使用可能な実際のビット数。サイズが&amp;gt;&amp;gt;のすべてのビットは0と見なされます</target>
        </trans-unit>
        <trans-unit id="4369b83bee66c2a1bd8100251217d1329ea41122" translate="yes" xml:space="preserve">
          <source>Actually these two functions do just the same thing, so we can have a generic version, &lt;code&gt;initTag&lt;/code&gt;:</source>
          <target state="translated">実際、これら2つの関数はまったく同じことを行うため、汎用バージョン &lt;code&gt;initTag&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="c0f89f582667229635ae4f7e695b5af22484d989" translate="yes" xml:space="preserve">
          <source>Add &lt;strong&gt;kotlin.code.style official&lt;/strong&gt; property to root &lt;strong&gt;pom.xml&lt;/strong&gt; project file.</source>
          <target state="translated">ルート&lt;strong&gt;pom.xml&lt;/strong&gt;プロジェクトファイルに&lt;strong&gt;kotlin.code.style公式&lt;/strong&gt;プロパティを追加します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ba959e083cc8770cbebce17d0147a253f783896" translate="yes" xml:space="preserve">
          <source>Add &lt;strong&gt;kotlin.code.style&lt;/strong&gt;=&lt;strong&gt;official&lt;/strong&gt; property to the &lt;strong&gt;gradle.properties&lt;/strong&gt; file at the project root and commit the file to VCS.</source>
          <target state="translated">&lt;strong&gt;kotlin.code.style&lt;/strong&gt; = &lt;strong&gt;official&lt;/strong&gt; propertyをプロジェクトルートの&lt;strong&gt;gradle.properties&lt;/strong&gt;ファイルに追加し、ファイルをVCSにコミットします。</target>
        </trans-unit>
        <trans-unit id="02f678e43ea3bd3e0206c7ebf3764d22ff84c53c" translate="yes" xml:space="preserve">
          <source>Add a line of code to print out 'Hello, World!'.</source>
          <target state="translated">Hello,World!」を印刷するコードの行を追加します。</target>
        </trans-unit>
        <trans-unit id="dd0d2c2da242124bf0f6ff7cd9aafab69fbf3e4e" translate="yes" xml:space="preserve">
          <source>Add a reference to the generated podspec in a Podfile of the Xcode project.</source>
          <target state="translated">XcodeプロジェクトのPodfileに生成されたPodspecへの参照を追加します。</target>
        </trans-unit>
        <trans-unit id="471785d1ac7e05248780d4e8eb1ea99374b5e20c" translate="yes" xml:space="preserve">
          <source>Add a simple line of Kotlin code to print a message:</source>
          <target state="translated">Kotlinのコードの簡単な行を追加して、メッセージを印刷します。</target>
        </trans-unit>
        <trans-unit id="7346415052094bb10f7701a068e5d194a8353c5f" translate="yes" xml:space="preserve">
          <source>Add an execution of the &lt;code&gt;kapt&lt;/code&gt; goal from kotlin-maven-plugin before &lt;code&gt;compile&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;compile&lt;/code&gt; 前に、kotlin-maven-pluginから &lt;code&gt;kapt&lt;/code&gt; ゴールの実行を追加します。</target>
        </trans-unit>
        <trans-unit id="f4921b3b94f4ec68631dffd9671cc6f32f996f2d" translate="yes" xml:space="preserve">
          <source>Add more lessons and tasks via the &lt;strong&gt;File Menu -&amp;gt; New&lt;/strong&gt;, drag-n-drop items to reorder them, or to rename items right-click them then in the menu use &lt;strong&gt;Refactor -&amp;gt; Rename&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;[ファイル]メニュー-&amp;gt; [新規]&lt;/strong&gt;からレッスンとタスクを追加し、アイテムをドラッグアンドドロップして並べ替えるか、アイテムの名前を変更するには、右クリックしてメニューで[ &lt;strong&gt;リファクタリング&lt;/strong&gt; ] &lt;strong&gt;-&amp;gt; [名前の変更&lt;/strong&gt; ]を使用します。</target>
        </trans-unit>
        <trans-unit id="f33af832a54532da16a0ec6647df0fe4497a8e9c" translate="yes" xml:space="preserve">
          <source>Add the annotation processor dependencies to the &lt;code&gt;kapt*&lt;/code&gt; configurations manually as described &lt;a href=&quot;#using-in-gradle&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">注釈プロセッサの依存関係を追加します &lt;code&gt;kapt*&lt;/code&gt; 説明するように手動で設定&lt;a href=&quot;#using-in-gradle&quot;&gt;上記&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1e38921f3eb8c27ece2cd44e577a73147c7f662a" translate="yes" xml:space="preserve">
          <source>Add the plugin and specify the list of annotations that must lead to generating a no-arg constructor for the annotated classes.</source>
          <target state="translated">プラグインを追加し、アノテーションされたクラスのための no-arg コンストラクタの生成につながる必要があるアノテーションのリストを指定します。</target>
        </trans-unit>
        <trans-unit id="738ee18db4d771d438e3c8008687b5c70e0ea168" translate="yes" xml:space="preserve">
          <source>Add the plugin artifact to the buildscript dependencies and apply the plugin:</source>
          <target state="translated">buildscript の依存関係にプラグインのアーティファクトを追加し、プラグインを適用します。</target>
        </trans-unit>
        <trans-unit id="429bd79e4d7afcdb7a582ba668f3a049845bba70" translate="yes" xml:space="preserve">
          <source>AddEventListenerOptions</source>
          <target state="translated">AddEventListenerOptions</target>
        </trans-unit>
        <trans-unit id="48a693c488b52c7622e71649b73d13071bdd0d6c" translate="yes" xml:space="preserve">
          <source>Adding</source>
          <target state="translated">Adding</target>
        </trans-unit>
        <trans-unit id="9cc810226959370d16a93633227e1104c8d32e9a" translate="yes" xml:space="preserve">
          <source>Adding Dependencies</source>
          <target state="translated">依存関係の追加</target>
        </trans-unit>
        <trans-unit id="57a338dc4313cdd504cf1c98b5c4e748094f2676" translate="yes" xml:space="preserve">
          <source>Adding Java classes to a Kotlin project is pretty straightforward. All you need to do is create a new Java file (&lt;strong&gt;Alt + Insert&lt;/strong&gt;/&lt;strong&gt;Cmd + N&lt;/strong&gt;) in the correct directory or package.</source>
          <target state="translated">KotlinプロジェクトへのJavaクラスの追加は非常に簡単です。必要なのは、適切なディレクトリまたはパッケージに新しいJavaファイル（&lt;strong&gt;Alt + Insert&lt;/strong&gt; / &lt;strong&gt;Cmd + N&lt;/strong&gt;）を作成することだけです。</target>
        </trans-unit>
        <trans-unit id="d08aabec8aefc55b447b7b51ddee0688b8ce235c" translate="yes" xml:space="preserve">
          <source>Adding Java source code to an existing Kotlin project</source>
          <target state="translated">既存のKotlinプロジェクトにJavaソースコードを追加する</target>
        </trans-unit>
        <trans-unit id="0519c648909c184e89e4974045e273095b2e5c16" translate="yes" xml:space="preserve">
          <source>Adding Kotlin Sources</source>
          <target state="translated">Kotlinソースの追加</target>
        </trans-unit>
        <trans-unit id="5d6f0fb8b07defeee90c4cdda730e4458c912a87" translate="yes" xml:space="preserve">
          <source>Adding Kotlin source code to an existing Java project</source>
          <target state="translated">既存のJavaプロジェクトにKotlinのソースコードを追加する</target>
        </trans-unit>
        <trans-unit id="f955ff61343bd8ffc8899cb7cc2853f9acda8f6b" translate="yes" xml:space="preserve">
          <source>Adding a Kotlin file to an existing Java project is pretty much the same process.</source>
          <target state="translated">既存のJavaプロジェクトにKotlinファイルを追加するのは、ほとんど同じプロセスです。</target>
        </trans-unit>
        <trans-unit id="a278e4cebb3761c84aff87b367c1ca68040289ee" translate="yes" xml:space="preserve">
          <source>Adding and updating entries</source>
          <target state="translated">エントリーの追加と更新</target>
        </trans-unit>
        <trans-unit id="49c977c763dc71842e07fc7ff077e0cf56f0cb91" translate="yes" xml:space="preserve">
          <source>Adding attributes is done symmetrically, to both the library and the consumer projects. For example, consider a testing library that supports both JUnit and TestNG in the two targets. The library author needs to add an attribute to both targets as follows:</source>
          <target state="translated">属性の追加は、ライブラリとコンシューマプロジェクトの両方に対して対称的に行われます。例えば、JUnit と TestNG の両方をサポートしているテスト用ライブラリを考えてみましょう。ライブラリの作者は、以下のように両方のターゲットに属性を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="f1542ac2399ec9bacdfe372cc0c60f0b976750d8" translate="yes" xml:space="preserve">
          <source>Adding custom declarations</source>
          <target state="translated">カスタム宣言の追加</target>
        </trans-unit>
        <trans-unit id="4f9517274a1469e28c5c98183ae9f9ad230e00f6" translate="yes" xml:space="preserve">
          <source>Adding dependencies</source>
          <target state="translated">依存関係の追加</target>
        </trans-unit>
        <trans-unit id="d79c304e6e11cc13b07c741e106d20cc8c17e52b" translate="yes" xml:space="preserve">
          <source>Adding elements</source>
          <target state="translated">要素の追加</target>
        </trans-unit>
        <trans-unit id="9b1cb23b7fa35c61b8dba1b19ab6657eb9938b67" translate="yes" xml:space="preserve">
          <source>Adding new warnings.</source>
          <target state="translated">新しい警告を追加しました。</target>
        </trans-unit>
        <trans-unit id="47a8d0d2adc6e05db8f76205ef450cad2a924e83" translate="yes" xml:space="preserve">
          <source>Additional attributes of the annotation can be specified by annotating the annotation class with meta-annotations:</source>
          <target state="translated">アノテーションの追加属性は、メタアノテーションでアノテーションクラスをアノテーションすることで指定することができます。</target>
        </trans-unit>
        <trans-unit id="eca85007a2790adbf09e0632e333804a680a6ec3" translate="yes" xml:space="preserve">
          <source>Additional compiler arguments</source>
          <target state="translated">追加のコンパイラ引数</target>
        </trans-unit>
        <trans-unit id="8a4596a526216397db95b37505ef813871a5e89f" translate="yes" xml:space="preserve">
          <source>Additional effects: &lt;code&gt;also&lt;/code&gt;</source>
          <target state="translated">追加効果： &lt;code&gt;also&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a6dc64de0bb5de47fc27a67225d4459754dd531" translate="yes" xml:space="preserve">
          <source>Additional options and arguments for the compiler can be specified as tags under the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; element of the Maven plugin node:</source>
          <target state="translated">コンパイラーの追加のオプションと引数は、Mavenプラグインノードの &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; 要素の下のタグとして指定できます。</target>
        </trans-unit>
        <trans-unit id="a929fb9227249cecceb27e2eb2fb9ec269e3975a" translate="yes" xml:space="preserve">
          <source>Additional packages are imported depending on the target platform:</source>
          <target state="translated">ターゲットプラットフォームに応じて、追加パッケージをインポートします。</target>
        </trans-unit>
        <trans-unit id="b3a1072bb52afbe0d5e64edc701aed4aa28398e4" translate="yes" xml:space="preserve">
          <source>Additional references</source>
          <target state="translated">その他の参考文献</target>
        </trans-unit>
        <trans-unit id="d210d368d99ba057a86b468711ad4906226aba77" translate="yes" xml:space="preserve">
          <source>Additionally, the members generation follows these rules with regard to the members inheritance:</source>
          <target state="translated">さらに、メンバーの世代は、メンバーの継承に関して、これらのルールに従います。</target>
        </trans-unit>
        <trans-unit id="46f43d23ca2e5c6253ce970266969226371b97e9" translate="yes" xml:space="preserve">
          <source>Additionally, there are advanced summation functions that take a function and return the sum of its return values on all elements:</source>
          <target state="translated">さらに、関数を受け取り、その戻り値の合計をすべての要素に返す高度な合計関数があります。</target>
        </trans-unit>
        <trans-unit id="8d1411a17019a4362541b4f1d1de4cdff92cbc07" translate="yes" xml:space="preserve">
          <source>Additionally, when you pass the context object as an argument, you can provide a custom name for the context object inside the scope.</source>
          <target state="translated">さらに、コンテキストオブジェクトを引数として渡す場合は、スコープ内のコンテキストオブジェクトにカスタム名を指定することができます。</target>
        </trans-unit>
        <trans-unit id="e4307719b1222dc48b265e4903fd4a9d62612412" translate="yes" xml:space="preserve">
          <source>Additionally, you can check if the collection contains any elements by calling &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-empty&quot;&gt;&lt;code&gt;isEmpty()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-not-empty&quot;&gt;&lt;code&gt;isNotEmpty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さらに、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-empty&quot;&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-not-empty&quot;&gt; &lt;code&gt;isNotEmpty()&lt;/code&gt; を&lt;/a&gt;呼び出して、コレクションに要素が含まれているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="11700d7e1d24d0f1399d6559cb017767b1c6e056" translate="yes" xml:space="preserve">
          <source>Additionally, you can ignore the return value and use a scope function to create a temporary scope for variables.</source>
          <target state="translated">さらに、戻り値を無視してスコープ関数を使用して変数の一時的なスコープを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="f5d299df4ac0870b310c5b93124b7da5b3fa17cf" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; file to this, considering this as a directory. If &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root, &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(File(&quot;gav&quot;))&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt;. This function is complementary with &lt;a href=&quot;relative-to&quot;&gt;relativeTo&lt;/a&gt;, so &lt;code&gt;f.resolve(g.relativeTo(f)) == g&lt;/code&gt; should be always &lt;code&gt;true&lt;/code&gt; except for different roots case.</source>
          <target state="translated">これをディレクトリと見なして、&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対&lt;/a&gt;ファイルをこれに追加します。&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対&lt;/a&gt;にルートがある場合、&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対&lt;/a&gt;が返されます。たとえば、 &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(File(&quot;gav&quot;))&lt;/code&gt; は &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt; です。この関数は&lt;a href=&quot;relative-to&quot;&gt;relativeToを&lt;/a&gt;補完するため、 &lt;code&gt;f.resolve(g.relativeTo(f)) == g&lt;/code&gt; は、異なるルートの場合を除いて常に &lt;code&gt;true&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ed010e865c2ef1c9ec89bc15490d8865ad3580b3" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; name to this, considering this as a directory. If &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root, &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(&quot;gav&quot;)&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">これをディレクトリと見なして、&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対&lt;/a&gt;名をこれに追加します。&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対&lt;/a&gt;にルートがある場合、&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対&lt;/a&gt;が返されます。たとえば、 &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(&quot;gav&quot;)&lt;/code&gt; は &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0e4c043913881551e2a516d63dae837240320667" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; file to this parent directory. If &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root or this has no parent directory, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(File(&quot;gav&quot;))&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">この親ディレクトリに&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対&lt;/a&gt;ファイルを追加します。&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対&lt;/a&gt;パスにルートがあるか、親ディレクトリがない場合、&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対パス&lt;/a&gt;が返されます。たとえば、 &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(File(&quot;gav&quot;))&lt;/code&gt; は &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="da2de53c7afe7aa13400504254ede95513f8eefb" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; name to this parent directory. If &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root or this has no parent directory, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(&quot;gav&quot;)&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">この親ディレクトリに&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対&lt;/a&gt;名を追加します。&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対&lt;/a&gt;パスにルートがあるか、親ディレクトリがない場合、&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対パス&lt;/a&gt;が返されます。たとえば、 &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(&quot;gav&quot;)&lt;/code&gt; は &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8c9254f00997519aadf87b0f0486efab66266961" translate="yes" xml:space="preserve">
          <source>Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element</source>
          <target state="translated">要素にCSSクラスを追加します。指定された全てのクラスが既に要素の class 属性に存在する場合は効果がありません。</target>
        </trans-unit>
        <trans-unit id="7a5775b87126801affcac516f2646d9c76d2d530" translate="yes" xml:space="preserve">
          <source>Adds a link to the specified class or method to the &lt;strong&gt;See Also&lt;/strong&gt; block of the documentation.</source>
          <target state="translated">ドキュメントの&lt;strong&gt;関連項目&lt;/strong&gt;ブロックに、指定されたクラスまたはメソッドへのリンクを追加します。</target>
        </trans-unit>
        <trans-unit id="87445eb32f9821019b145eea7e9695ab7d28eb15" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;配列のすべての要素をこの&lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="10537ae3754a69606c92ace3688807afaf94d61f" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;配列のすべての要素をこの&lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="23d9c65a16a24f104b22a6505cba03e89d23571c" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションのすべての要素をこの&lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3b0a58538b43be1a6c9392fa61c2bbcc804758cd" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションのすべての要素をこの&lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4810151dcfece43730056e0f8f892cfe248bdbb4" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;シーケンスのすべての要素をこの&lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2b719b563988a867cd5ccc3f4297396a353af8c5" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;シーケンスのすべての要素をこの&lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d691c921dd146f4507d4976745052b064980c6f9" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;配列のすべての要素をこの可変コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="9964256f02efab85f6a59e4668c7b2dca42aabe9" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションのすべての要素をこの変更可能なコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="29c7bc328b63224ec69231bf9bdd99ff151ff9ba" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;シーケンスのすべての要素をこの変更可能なコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="e19c5ce2ad72fe061e0bbeb62e7e443fd106a628" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;配列のすべての要素をこの&lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b22b16451373efc5d5b9fc621880b90a6064e63d" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションのすべての要素をこの&lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3ba0907c63140160ab067c1e6f8b4dbca297a6ba" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;シーケンスのすべての要素をこの&lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollectionに追加し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="84a0113a3c5d40d266ec4b6ad1717c6fb75675a6" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;配列のすべての要素をこの可変コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="91af3506daf7495894c10f644b66eac6aff1255e" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;コレクションのすべての要素をこの変更可能なコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="24ad7f8d0e6fb7a5d9e3c2883edd309f87333f9b" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;要素&lt;/a&gt;シーケンスのすべての要素をこの変更可能なコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="312bdbfea889d07249db9102f1afc95c9f13b234" translate="yes" xml:space="preserve">
          <source>Adds all of the elements of the specified collection to the end of this list.</source>
          <target state="translated">指定されたコレクションのすべての要素をこのリストの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="85070eb82fd1c1a8b130341b834cf6d10970d93f" translate="yes" xml:space="preserve">
          <source>Adds all of the elements of the specified collection to this collection.</source>
          <target state="translated">指定されたコレクションのすべての要素をこのコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="bfb7e428674f6edc1f69ae0086ef3f3ecd465825" translate="yes" xml:space="preserve">
          <source>Adds both &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; frameworks as output binaries for all iOS and macOS targets.</source>
          <target state="translated">すべてのiOSおよびmacOSターゲットの出力バイナリとして、 &lt;code&gt;debug&lt;/code&gt; フレームワークと &lt;code&gt;release&lt;/code&gt; フレームワークの両方を追加します。</target>
        </trans-unit>
        <trans-unit id="ca2b793ba21a4273d262747b913ea84119720fae" translate="yes" xml:space="preserve">
          <source>Adds key-value pairs from &lt;a href=&quot;../add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;other&lt;/a&gt; to &lt;a href=&quot;../add/-this-&quot;&gt;this&lt;/a&gt;. Returns the original receiver.</source>
          <target state="translated">&lt;a href=&quot;../add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;他の&lt;/a&gt;キーと値のペアを&lt;a href=&quot;../add/-this-&quot;&gt;thisに&lt;/a&gt;追加します。元のレシーバーを返します。</target>
        </trans-unit>
        <trans-unit id="4b7d8fef88cb33713dab84360b69259a7ab629f5" translate="yes" xml:space="preserve">
          <source>Adds key-value pairs from &lt;a href=&quot;add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;other&lt;/a&gt; to &lt;a href=&quot;add/-this-&quot;&gt;this&lt;/a&gt;. Returns the original receiver.</source>
          <target state="translated">&lt;a href=&quot;add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;他の&lt;/a&gt;キーと値のペアを&lt;a href=&quot;add/-this-&quot;&gt;thisに&lt;/a&gt;追加します。元のレシーバーを返します。</target>
        </trans-unit>
        <trans-unit id="e91254e93a826cbb761243cb8f3e49ae3276f26c" translate="yes" xml:space="preserve">
          <source>Adds prefix to &lt;code&gt;external&lt;/code&gt; declarations in a source file.</source>
          <target state="translated">ソースファイルの &lt;code&gt;external&lt;/code&gt; 宣言に接頭辞を追加します。</target>
        </trans-unit>
        <trans-unit id="eff6598f06f155433e53282e71c90b7a3a2aeb6e" translate="yes" xml:space="preserve">
          <source>Adds the other Int value to this value resulting a Char.</source>
          <target state="translated">他のInt値をこの値に追加してCharにします。</target>
        </trans-unit>
        <trans-unit id="276ad7992696ff81567a3824031f5a66cea74753" translate="yes" xml:space="preserve">
          <source>Adds the other value to this value.</source>
          <target state="translated">この値に他の値を追加します。</target>
        </trans-unit>
        <trans-unit id="8d024c2e2402b39ef2c90f0c9a147f2a5d65101a" translate="yes" xml:space="preserve">
          <source>Adds the specified &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;element&lt;/a&gt; to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;要素&lt;/a&gt;をこの変更可能なコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="0510d463445710aa5c4945694cfe3e697e384a92" translate="yes" xml:space="preserve">
          <source>Adds the specified &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;element&lt;/a&gt; to this mutable collection.</source>
          <target state="translated">指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;要素&lt;/a&gt;をこの変更可能なコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="885caa10ce08576cabcdf41cdce5089d4e5b32e6" translate="yes" xml:space="preserve">
          <source>Adds the specified element &lt;a href=&quot;add#kotlin.collections.MutableListIterator%24add%28kotlin.collections.MutableListIterator.T%29%2Felement&quot;&gt;element&lt;/a&gt; into the underlying collection immediately before the element that would be returned by &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;next&lt;/a&gt;, if any, and after the element that would be returned by &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;previous&lt;/a&gt;, if any. (If the collection contains no elements, the new element becomes the sole element in the collection.) The new element is inserted before the implicit cursor: a subsequent call to &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;next&lt;/a&gt; would be unaffected, and a subsequent call to &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;previous&lt;/a&gt; would return the new element. (This call increases by one the value that would be returned by a call to &lt;a href=&quot;../-list-iterator/next-index#kotlin.collections.ListIterator%24nextIndex%28%29&quot;&gt;nextIndex&lt;/a&gt; or &lt;a href=&quot;../-list-iterator/previous-index#kotlin.collections.ListIterator%24previousIndex%28%29&quot;&gt;previousIndex&lt;/a&gt;.)</source>
          <target state="translated">指定された要素&lt;a href=&quot;add#kotlin.collections.MutableListIterator%24add%28kotlin.collections.MutableListIterator.T%29%2Felement&quot;&gt;要素&lt;/a&gt;を、&lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;next&lt;/a&gt;が返す要素がある場合はその&lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;直前&lt;/a&gt;、previousが返す要素がある場合はその直後に、基礎となるコレクションに追加します。 （コレクションに要素が含まれていない場合、新しい要素はコレクション内の唯一の要素になります。）新しい要素は暗黙カーソルの前に挿入されます。&lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;次のnextの&lt;/a&gt;呼び出しは影響を受けず、&lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;previousの&lt;/a&gt;後続の呼び出しは新しい要素を返します。 （この呼び出しは、&lt;a href=&quot;../-list-iterator/next-index#kotlin.collections.ListIterator%24nextIndex%28%29&quot;&gt;nextIndex&lt;/a&gt;または&lt;a href=&quot;../-list-iterator/previous-index#kotlin.collections.ListIterator%24previousIndex%28%29&quot;&gt;previousIndexの&lt;/a&gt;呼び出しによって返される値を1つ増やします。）</target>
        </trans-unit>
        <trans-unit id="185b6edaa0a681bb52d9aba9790ac6541765c18c" translate="yes" xml:space="preserve">
          <source>Adds the specified element to the collection.</source>
          <target state="translated">指定した要素をコレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="21411e5ee58b28117d4b414fda5988514a36e781" translate="yes" xml:space="preserve">
          <source>Adds the specified element to the end of this list.</source>
          <target state="translated">指定した要素をリストの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="e512e3e82755d9240a37dc510417ddd4c4b200e5" translate="yes" xml:space="preserve">
          <source>Adds the specified element to the set.</source>
          <target state="translated">指定した要素をセットに追加します。</target>
        </trans-unit>
        <trans-unit id="0e8e01dbdf63e8af2d15ba2d24e669c9385586bc" translate="yes" xml:space="preserve">
          <source>Advanced Kotlin Programming</source>
          <target state="translated">先進のKotlinプログラミング</target>
        </trans-unit>
        <trans-unit id="99b0021e8fdff5ec6edaa329da8ecb296223d390" translate="yes" xml:space="preserve">
          <source>Advanced topics</source>
          <target state="translated">高度なトピック</target>
        </trans-unit>
        <trans-unit id="e14b5404ce2f83b044293ca6b45d41458322bd99" translate="yes" xml:space="preserve">
          <source>After compilation we have two new files:</source>
          <target state="translated">コンパイル後、2つの新しいファイルができました。</target>
        </trans-unit>
        <trans-unit id="55962a9c0dc0857e2081c43a4138c36cc93690dd" translate="yes" xml:space="preserve">
          <source>After completing these steps, you can open the generated workspace (see &lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html#installation&quot;&gt;CocoaPods documentation&lt;/a&gt;) and run an Xcode build.</source>
          <target state="translated">これらの手順を完了すると、生成されたワークスペースを開き（&lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html#installation&quot;&gt;CocoaPodsのドキュメントを&lt;/a&gt;参照）、Xcodeビルドを実行できます。</target>
        </trans-unit>
        <trans-unit id="be7a4a52bfc3750ff86b330696474ee450a1ae21" translate="yes" xml:space="preserve">
          <source>After running the cinterop tool it can share Kotlin data in a versionized global structure, and interact with it from Kotlin transparently via autogenerated Kotlin like this:</source>
          <target state="translated">cinteropツールを実行すると、Kotlinのデータをバージョン化されたグローバル構造で共有することができ、このように自動生成されたKotlinを介してKotlinから透過的に対話することができます。</target>
        </trans-unit>
        <trans-unit id="a00552b5f6e554046b8df2e640c80b0142150ea5" translate="yes" xml:space="preserve">
          <source>After some long and extensive battle testing, coroutines are now released! It means that from Kotlin 1.3 the language support and the API are &lt;a href=&quot;evolution/components-stability&quot;&gt;fully stable&lt;/a&gt;. Check out the new &lt;a href=&quot;coroutines-overview&quot;&gt;coroutines overview&lt;/a&gt; page.</source>
          <target state="translated">長期にわたる広範囲にわたる戦闘テストの後、コルーチンがリリースされました！つまり、Kotlin 1.3以降、言語サポートとAPIは&lt;a href=&quot;evolution/components-stability&quot;&gt;完全に安定してい&lt;/a&gt;ます。新しい&lt;a href=&quot;coroutines-overview&quot;&gt;コルーチンの概要&lt;/a&gt;ページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b20aae618189a43b8bb6ab35517407d6fd71b453" translate="yes" xml:space="preserve">
          <source>After that it becomes invalid, so &lt;code&gt;voidPtr&lt;/code&gt; can't be unwrapped anymore.</source>
          <target state="translated">その後は無効になるため、 &lt;code&gt;voidPtr&lt;/code&gt; をラップ解除できなくなります。</target>
        </trans-unit>
        <trans-unit id="8044569fdd9a271a173948e76c357bc88dbea4f7" translate="yes" xml:space="preserve">
          <source>After the generation of bindings, they can be used by the IDE as a proxy view of the native library.</source>
          <target state="translated">バインディングを生成した後は、ネイティブライブラリのプロキシビューとしてIDEで使用することができます。</target>
        </trans-unit>
        <trans-unit id="894a459a8f6927b27ab4d08af34781d0013b03e6" translate="yes" xml:space="preserve">
          <source>After the rituals in the &lt;code&gt;libnative_api.h&lt;/code&gt;, we have a block with the common type definitions:</source>
          <target state="translated">&lt;code&gt;libnative_api.h&lt;/code&gt; の儀式の後に、共通の型定義を持つブロックがあります：</target>
        </trans-unit>
        <trans-unit id="a23b6ae7f5b6fb2ce5fd4d1750d163329bd4198f" translate="yes" xml:space="preserve">
          <source>After updating your code style settings, activate &amp;ldquo;Reformat Code&amp;rdquo; in the project view on the desired scope.</source>
          <target state="translated">コードスタイル設定を更新したら、目的のスコープのプロジェクトビューで[コードの再フォーマット]をアクティブにします。</target>
        </trans-unit>
        <trans-unit id="14f1c98193b0dca0c2dc1740114e9c7af6874272" translate="yes" xml:space="preserve">
          <source>After we've added this annotation, the Kotlin compiler knows which implicit receivers are part of the same DSL and allows to call members of the nearest receivers only:</source>
          <target state="translated">このアノテーションを追加した後、Kotlinコンパイラはどの暗黙の受信機が同じDSLの一部であるかを知っており、最も近い受信機のメンバーのみを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1acdb4a2271f371856970f88d2de4cc945e37003" translate="yes" xml:space="preserve">
          <source>Afterwards, this disconnected object graph and &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;job&lt;/a&gt; function pointer is being added to jobs queue of the selected worker. Note that &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;job&lt;/a&gt; must not capture any state itself, so that whole state is explicitly stored in object produced by &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fproducer&quot;&gt;producer&lt;/a&gt;. Scheduled job is being executed by the worker, and result of such a execution is being disconnected from worker's object graph. Whoever will consume the future, can use result of worker's computations.</source>
          <target state="translated">その後、この切断されたオブジェクトグラフと&lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;ジョブ&lt;/a&gt;関数ポインターは、選択されたワーカーのジョブキューに追加されます。&lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;ジョブ&lt;/a&gt;は状態自体をキャプチャしてはならないので、状態全体が&lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fproducer&quot;&gt;プロデューサ&lt;/a&gt;によって生成されたオブジェクトに明示的に格納されることに注意してください。スケジュールされたジョブがワーカーによって実行されており、そのような実行の結果はワーカーのオブジェクトグラフから切断されています。将来を消費する人はだれでも、ワーカーの計算結果を使用できます。</target>
        </trans-unit>
        <trans-unit id="83666cc6c6e19ac4aa2b03fb8a1118a3b0008487" translate="yes" xml:space="preserve">
          <source>Aggregate operations</source>
          <target state="translated">集計業務</target>
        </trans-unit>
        <trans-unit id="ddd9b8a34e3b9741c6278aefa3c08203e45cbab0" translate="yes" xml:space="preserve">
          <source>All Kotlin aspects are well covered in &lt;a href=&quot;https://kotlinlang.org/docs/books.html&quot;&gt;Books&lt;/a&gt;, check out these books to start:</source>
          <target state="translated">Kotlinのすべての側面は&lt;a href=&quot;https://kotlinlang.org/docs/books.html&quot;&gt;Books&lt;/a&gt;で十分にカバーされています。開始するには、以下のブックをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="7b61d21566ceeced4a6fff63e00b0180f9ec77ba" translate="yes" xml:space="preserve">
          <source>All Materials</source>
          <target state="translated">すべての材料</target>
        </trans-unit>
        <trans-unit id="eb672cb3ba0260b3fa331d03b60ad16e2811381d" translate="yes" xml:space="preserve">
          <source>All Types</source>
          <target state="translated">すべてのタイプ</target>
        </trans-unit>
        <trans-unit id="b18c46732ceb88912f85edefc65d7150c5ebce67" translate="yes" xml:space="preserve">
          <source>All actual declarations that match any part of an expected declaration need to be marked as &lt;code&gt;actual&lt;/code&gt;.</source>
          <target state="translated">予想される宣言のいずれかの部分に一致するすべての実際の宣言は、 &lt;code&gt;actual&lt;/code&gt; としてマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="a3db0bc5ea67b5faab7be4f3c9c4535cb19110ee" translate="yes" xml:space="preserve">
          <source>All binaries are backwards compatible, i.e. a newer compiler can read older binaries (e.g. 1.3 understands 1.0 through 1.2),</source>
          <target state="translated">すべてのバイナリは下位互換性があります。つまり、新しいコンパイラは古いバイナリを読むことができます (例:1.3 は 1.0 から 1.2 を理解します)。</target>
        </trans-unit>
        <trans-unit id="ee8c2bb4398e6832c461f5fcd40299761a628bfb" translate="yes" xml:space="preserve">
          <source>All changes to the Kotlin Programming Language are overseen by the &lt;a href=&quot;https://kotlinlang.org/foundation/kotlin-foundation.html#lead-designer&quot;&gt;Lead Language Designer&lt;/a&gt; (currently Andrey Breslav). The Lead Designer has the final say in all matters related to language evolution. Additionally, incompatible changes to fully stable components have to be approved to by the &lt;a href=&quot;https://kotlinlang.org/foundation/kotlin-foundation.html#language-committee&quot;&gt;Language Committee&lt;/a&gt; designated under the &lt;a href=&quot;https://kotlinlang.org/foundation/kotlin-foundation.html&quot;&gt;Kotlin Foundation&lt;/a&gt; (currently comprised of Jeffrey van Gogh, William R. Cook and Andrey Breslav).</source>
          <target state="translated">Kotlinプログラミング言語に対するすべての変更は、&lt;a href=&quot;https://kotlinlang.org/foundation/kotlin-foundation.html#lead-designer&quot;&gt;リード言語デザイナー&lt;/a&gt;（現在はAndrey Breslav）が監督しています。設計者リーダーは、言語の進化に関連するすべての問題において最終的な決定権を持っています。さらに、完全に安定したコンポーネントに対する互換性のない変更は、&lt;a href=&quot;https://kotlinlang.org/foundation/kotlin-foundation.html&quot;&gt;Kotlin Foundationの&lt;/a&gt;下で指定された&lt;a href=&quot;https://kotlinlang.org/foundation/kotlin-foundation.html#language-committee&quot;&gt;言語委員会&lt;/a&gt;（現在はJeffrey van Gogh、William R. CookおよびAndrey Breslavで構成されています）による承認が必要です。</target>
        </trans-unit>
        <trans-unit id="41931426f2cdd18d55272978febc720120469f16" translate="yes" xml:space="preserve">
          <source>All classes declared inside this class. This includes both inner and static nested classes.</source>
          <target state="translated">このクラスの内部で宣言されたすべてのクラス。これには、内部クラスと静的ネストされたクラスの両方が含まれます。</target>
        </trans-unit>
        <trans-unit id="e9659839d47536b2aaa49f475deaf38d27468e29" translate="yes" xml:space="preserve">
          <source>All classes in Kotlin have a common superclass &lt;code&gt;Any&lt;/code&gt;, that is the default superclass for a class with no supertypes declared:</source>
          <target state="translated">Kotlinのすべてのクラスには、共通のスーパークラス &lt;code&gt;Any&lt;/code&gt; があります。これは、スーパータイプが宣言されていないクラスのデフォルトのスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="7d33ae6257329ce11f8852b704e4df5a3b496622" translate="yes" xml:space="preserve">
          <source>All comparisons are translated into calls to &lt;code&gt;compareTo&lt;/code&gt;, that is required to return &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">すべての比較は、 &lt;code&gt;Int&lt;/code&gt; を返すために必要な &lt;code&gt;compareTo&lt;/code&gt; の呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="5cadbac06b896c3152a68a5f51de6ed17d7d631c" translate="yes" xml:space="preserve">
          <source>All constants used here are available inside a component configuration script block. The plugin supports producing binaries of the following kinds:</source>
          <target state="translated">ここで使用されるすべての定数は、コンポーネント設定スクリプトブロック内で利用可能です。このプラグインは以下の種類のバイナリの作成をサポートしています。</target>
        </trans-unit>
        <trans-unit id="cff39426822700f19e0aab945e9fcf2a092b95af" translate="yes" xml:space="preserve">
          <source>All constructors declared in this class.</source>
          <target state="translated">このクラスで宣言されたすべてのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="c356336eeb815c265a9b7db10824dc836ba7b924" translate="yes" xml:space="preserve">
          <source>All coroutine builders like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; accept an optional &lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; parameter that can be used to explicitly specify the dispatcher for new coroutine and other context elements.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt;や&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt;などのすべてのコルーチンビルダーは、新しいコルーチンおよび他のコンテキスト要素のディスパッチャーを明示的に指定するために使用できるオプションの&lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;パラメーターを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5837d5f68b44027e7db8a1a37c95bd2b8a87082a" translate="yes" xml:space="preserve">
          <source>All exception classes in Kotlin are descendants of the class &lt;code&gt;Throwable&lt;/code&gt;. Every exception has a message, stack trace and an optional cause.</source>
          <target state="translated">Kotlinのすべての例外クラスは、クラス &lt;code&gt;Throwable&lt;/code&gt; の子孫です。すべての例外には、メッセージ、スタックトレース、およびオプションの原因があります。</target>
        </trans-unit>
        <trans-unit id="f25ca945d243c9760035484e479e784d4df4b7bc" translate="yes" xml:space="preserve">
          <source>All flags are available on the command line as well as &lt;a href=&quot;../using-gradle#compiler-options&quot;&gt;Gradle&lt;/a&gt; and &lt;a href=&quot;../using-maven#specifying-compiler-options&quot;&gt;Maven&lt;/a&gt;.</source>
          <target state="translated">すべてのフラグは、コマンドラインと&lt;a href=&quot;../using-gradle#compiler-options&quot;&gt;Gradle&lt;/a&gt;および&lt;a href=&quot;../using-maven#specifying-compiler-options&quot;&gt;Mavenで&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="6d9d440bcdbc5fe8789527cf4955d05cb8a586f0" translate="yes" xml:space="preserve">
          <source>All function types have a parenthesized parameter types list and a return type: &lt;code&gt;(A, B) -&amp;gt; C&lt;/code&gt; denotes a type that represents functions taking two arguments of types &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; and returning a value of type &lt;code&gt;C&lt;/code&gt;. The parameter types list may be empty, as in &lt;code&gt;() -&amp;gt; A&lt;/code&gt;. The &lt;a href=&quot;functions#unit-returning-functions&quot;&gt;&lt;code&gt;Unit&lt;/code&gt; return type&lt;/a&gt; cannot be omitted.</source>
          <target state="translated">すべての関数型には、括弧で囲まれたパラメーター型リストと戻り型があります。 &lt;code&gt;(A, B) -&amp;gt; C&lt;/code&gt; は、型 &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; の 2つの引数を取り、型 &lt;code&gt;C&lt;/code&gt; の値を返す関数を表す型を示します。 &lt;code&gt;() -&amp;gt; A&lt;/code&gt; ように、パラメータタイプリストは空の場合があります。&lt;a href=&quot;functions#unit-returning-functions&quot;&gt; &lt;code&gt;Unit&lt;/code&gt; 戻り値の型は&lt;/a&gt;省略することができません。</target>
        </trans-unit>
        <trans-unit id="fac62d2e4147c21c0ab527f3ad29dd9a985e0362" translate="yes" xml:space="preserve">
          <source>All functions and properties accessible in this class, including those declared in this class and all of its superclasses. Does not include constructors.</source>
          <target state="translated">このクラスとそのすべてのスーパークラスで宣言されたものを含む、このクラスでアクセス可能なすべての関数とプロパティ。コンストラクタは含まれません。</target>
        </trans-unit>
        <trans-unit id="b0bf651b4f6391698ff5d81fcc428df9ce455e49" translate="yes" xml:space="preserve">
          <source>All functions and properties accessible in this container.</source>
          <target state="translated">このコンテナ内でアクセス可能なすべての関数とプロパティ。</target>
        </trans-unit>
        <trans-unit id="a88f9047a3691f4efc12b5d9e86641993d97b9d0" translate="yes" xml:space="preserve">
          <source>All functions that create coroutines are defined as extensions on &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;, so that we can rely on &lt;a href=&quot;composing-suspending-functions#structured-concurrency-with-async&quot;&gt;structured concurrency&lt;/a&gt; to make sure that we don't have lingering global coroutines in our application.</source>
          <target state="translated">コルーチンを作成するすべての関数は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScopeの&lt;/a&gt;拡張として定義されているため、&lt;a href=&quot;composing-suspending-functions#structured-concurrency-with-async&quot;&gt;構造化された同時実行性&lt;/a&gt;に依存して、アプリケーションにグローバルコルーチンが残っていないことを確認できます。</target>
        </trans-unit>
        <trans-unit id="99099f034c7f1f1686d08748608dee36aa87d8f3" translate="yes" xml:space="preserve">
          <source>All global functions from Kotlin are turned into &lt;code&gt;DemoLibKt&lt;/code&gt; in Objective-C and into &lt;code&gt;LibKt&lt;/code&gt; in Swift, where &lt;code&gt;Demo&lt;/code&gt; is the framework name and set by the &lt;code&gt;-output&lt;/code&gt; parameter of &lt;code&gt;kotlinc-native&lt;/code&gt;.</source>
          <target state="translated">Kotlinからすべてのグローバル関数は、に変換され &lt;code&gt;DemoLibKt&lt;/code&gt; Objective-Cで且つに &lt;code&gt;LibKt&lt;/code&gt; スウィフトに、 &lt;code&gt;Demo&lt;/code&gt; によってフレームワーク名とセットである &lt;code&gt;-output&lt;/code&gt; のパラメータ &lt;code&gt;kotlinc-native&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="591fd9cd3a4ad8686a993d837b6030260dac115f" translate="yes" xml:space="preserve">
          <source>All infix functions have the same &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#precedence&quot;&gt;precedence&lt;/a&gt; (which is shared with all the built-in infix functions, such as the bitwise functions &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;inv&lt;/code&gt;, etc.): lower than the arithmetic operators and the &lt;code&gt;..&lt;/code&gt; range operator, but higher than the Elvis operator &lt;code&gt;?:&lt;/code&gt;, comparisons, logic operators, and assignments.</source>
          <target state="translated">すべての中置関数の&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#precedence&quot;&gt;優先順位&lt;/a&gt;は同じです（これは、ビットごとの関数 &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、or、 &lt;code&gt;inv&lt;/code&gt; などのすべての組み込み中置関数と共有されます）。算術演算子と &lt;code&gt;..&lt;/code&gt; 範囲演算子よりは低いが、より高いエルビス演算子 &lt;code&gt;?:&lt;/code&gt; 、比較、論理演算子、および割り当て。</target>
        </trans-unit>
        <trans-unit id="0debb60466789165e826f6968e51bd0dafe146ca" translate="yes" xml:space="preserve">
          <source>All of the above commands accept an additional &lt;code&gt;-repository &amp;lt;directory&amp;gt;&lt;/code&gt; argument for specifying a repository different to the default one.</source>
          <target state="translated">上記のすべてのコマンドは、デフォルトとは異なるリポジトリを指定するための追加の &lt;code&gt;-repository &amp;lt;directory&amp;gt;&lt;/code&gt; 引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="479818b418e943c640e085ab5f936060c4723c28" translate="yes" xml:space="preserve">
          <source>All of the targets may share some of the sources and may have platform-specific sources as well.</source>
          <target state="translated">すべてのターゲットは、いくつかのソースを共有している可能性があり、プラットフォーム固有のソースを持っている可能性もあります。</target>
        </trans-unit>
        <trans-unit id="0443f40eda56dff1f26c17d4a03369ba7de063dd" translate="yes" xml:space="preserve">
          <source>All of these expressions can be used as part of larger expressions:</source>
          <target state="translated">これらの表現はすべて、より大きな表現の一部として使用することができます。</target>
        </trans-unit>
        <trans-unit id="066dccc20aef799cdb72377dffe924ac4e0f1802" translate="yes" xml:space="preserve">
          <source>All of these three functions need to be marked as &lt;code&gt;operator&lt;/code&gt;.</source>
          <target state="translated">これら3つの関数はすべて、 &lt;code&gt;operator&lt;/code&gt; としてマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="f4f0584eafaddb71e9c049d852263993a2ee51a5" translate="yes" xml:space="preserve">
          <source>All online competitive programming events allow the use of pre-written code, so you can define your own library of utility functions that are geared towards competitive programming to make your actual solution code somewhat easier to read and write. You would then use this code as a template for your solutions. For example, you can define the following helper functions for reading inputs in competitive programming:</source>
          <target state="translated">すべてのオンライン競争型プログラミングイベントでは、あらかじめ書かれたコードの使用が許可されているので、実際のソリューションコードを読み書きしやすくするために、競争型プログラミング向けのユーティリティ関数のライブラリを定義することができます。そして、このコードをソリューションのテンプレートとして使用します。例えば、競争力のあるプログラミングで入力を読み取るための以下のヘルパー関数を定義することができます。</target>
        </trans-unit>
        <trans-unit id="b294b6e70d85add6e5c2f7604600510337637936" translate="yes" xml:space="preserve">
          <source>All primary constructor parameters need to be marked as &lt;code&gt;val&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;;</source>
          <target state="translated">すべてのプライマリコンストラクタパラメータは、 &lt;code&gt;val&lt;/code&gt; または &lt;code&gt;var&lt;/code&gt; としてマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="d46681f81618c821bba5ff4dc88c1d80234f92d2" translate="yes" xml:space="preserve">
          <source>All superclasses of this class, including indirect ones, in no particular order. Includes superclasses and superinterfaces of the class, but does not include the class itself. The returned collection does not contain more than one instance of any given class.</source>
          <target state="translated">このクラスのすべてのスーパークラス(間接的なものを含む)を順不同に含む。このクラスのスーパークラスとスーパーインターフェースを含みますが、クラス自体は含みません。返されるコレクションは、与えられたクラスの複数のインスタンスを含みません。</target>
        </trans-unit>
        <trans-unit id="28ecc885d1d4575b1e700f3cda32488e4a8d4da5" translate="yes" xml:space="preserve">
          <source>All supertypes of this class, including indirect ones, in no particular order. There is not more than one type in the returned collection that has any given classifier.</source>
          <target state="translated">このクラスのすべてのスーパータイプ(間接的なものを含む)は,順不同である。返されたコレクションの中には、与えられた分類器を持つ型が1つ以上存在しません。</target>
        </trans-unit>
        <trans-unit id="686439211e5566db00effad08f8fe8d6e808b419" translate="yes" xml:space="preserve">
          <source>All the contents (such as classes and functions) of the source file are contained by the package declared. So, in the example above, the full name of &lt;code&gt;baz()&lt;/code&gt; is &lt;code&gt;foo.bar.baz&lt;/code&gt;, and the full name of &lt;code&gt;Goo&lt;/code&gt; is &lt;code&gt;foo.bar.Goo&lt;/code&gt;.</source>
          <target state="translated">ソースファイルのすべてのコンテンツ（クラスや関数など）は、宣言されたパッケージに含まれています。したがって、上記の例では、 &lt;code&gt;baz()&lt;/code&gt; のフルネームは &lt;code&gt;foo.bar.baz&lt;/code&gt; であり、 &lt;code&gt;Goo&lt;/code&gt; のフルネームは &lt;code&gt;foo.bar.Goo&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4fb15ae9939cbf860fb3fe9591b18a517004fc6c" translate="yes" xml:space="preserve">
          <source>All the functions and properties declared in a file &lt;code&gt;app.kt&lt;/code&gt; inside a package &lt;code&gt;org.example&lt;/code&gt;, including extension functions, are compiled into static methods of a Java class named &lt;code&gt;org.example.AppKt&lt;/code&gt;.</source>
          <target state="translated">すべての機能とファイルに宣言されたプロパティ &lt;code&gt;app.kt&lt;/code&gt; パッケージ内部の &lt;code&gt;org.example&lt;/code&gt; 拡張機能を含むが、名前のJavaクラスの静的メソッドにコンパイルされている &lt;code&gt;org.example.AppKt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb2fb73ebcfc720b2f830320720967698f1a2707" translate="yes" xml:space="preserve">
          <source>All the supported C types have corresponding representations in Kotlin:</source>
          <target state="translated">サポートされているC言語の型はすべてKotlinで対応する表現を持っています。</target>
        </trans-unit>
        <trans-unit id="05ccba11950623f945849ebb7ff958fbec1b1946" translate="yes" xml:space="preserve">
          <source>All these have already started, all we need is collect the results:</source>
          <target state="translated">これらはすでに始まっていて、あとは結果を集めるだけです。</target>
        </trans-unit>
        <trans-unit id="123f143631f161c8189372ec4f593564d9c88075" translate="yes" xml:space="preserve">
          <source>All this is defined in a package &lt;code&gt;com.example.html&lt;/code&gt; that is imported at the top of the builder example above. In the last section you can read through the full definition of this package.</source>
          <target state="translated">これらはすべて、上記のビルダーの例の一番上にインポートされたパッケージ &lt;code&gt;com.example.html&lt;/code&gt; で定義されています。最後のセクションでは、このパッケージの完全な定義を読むことができます。</target>
        </trans-unit>
        <trans-unit id="e99803f25b0e1d79d6243026225257e3fa5b0ff7" translate="yes" xml:space="preserve">
          <source>All you need is to enable the Android Extensions Gradle plugin in your module's &lt;code&gt;build.gradle&lt;/code&gt; file:</source>
          <target state="translated">必要なのは、モジュールの &lt;code&gt;build.gradle&lt;/code&gt; ファイルでAndroid Extensions Gradleプラグインを有効にすることだけです。</target>
        </trans-unit>
        <trans-unit id="883670e6d11ef404523181d5252432cd1ecdde9f" translate="yes" xml:space="preserve">
          <source>All-open compiler plugin</source>
          <target state="translated">オールオープンコンパイラプラグイン</target>
        </trans-unit>
        <trans-unit id="7850905b8cc83bebd986ba2bdba5bf013b329956" translate="yes" xml:space="preserve">
          <source>All-open compiler plugin JAR is available in the binary distribution of the Kotlin compiler. You can attach the plugin by providing the path to its JAR file using the &lt;code&gt;Xplugin&lt;/code&gt; kotlinc option:</source>
          <target state="translated">オールオープンコンパイラプラグインJARは、Kotlinコンパイラのバイナリディストリビューションで利用できます。 &lt;code&gt;Xplugin&lt;/code&gt; kotlincオプションを使用してJARファイルへのパスを指定することにより、プラグインを添付できます。</target>
        </trans-unit>
        <trans-unit id="128eaf46411c5b5e2154f9b3a550e851191bf28e" translate="yes" xml:space="preserve">
          <source>Allocates C array of given elements type and length, and initializes its elements applying given block.</source>
          <target state="translated">指定された要素の型と長さのC配列を確保し、指定されたブロックを適用して要素を初期化します。</target>
        </trans-unit>
        <trans-unit id="76b244f15508bcab1b7260f5bb5918e78bb71150" translate="yes" xml:space="preserve">
          <source>Allocates C array of given elements type and length.</source>
          <target state="translated">指定された要素の型と長さのC配列を確保します。</target>
        </trans-unit>
        <trans-unit id="0998f9afb1d4df22e27096250aeacda0804ace6c" translate="yes" xml:space="preserve">
          <source>Allocates C array of given values.</source>
          <target state="translated">与えられた値のC配列を確保します。</target>
        </trans-unit>
        <trans-unit id="abe3ee2423e74ddf6f81c9554b9963babf13602a" translate="yes" xml:space="preserve">
          <source>Allocates C array of pointers to given elements.</source>
          <target state="translated">与えられた要素へのポインタのC配列を割り当てます。</target>
        </trans-unit>
        <trans-unit id="bbc1c2b8b5f48a7ae60aa8d16d13d00f7ee7c555" translate="yes" xml:space="preserve">
          <source>Allocates an array of runtime type &lt;code&gt;T&lt;/code&gt; having its size equal to the size of this collection and populates the array with the elements of this collection.</source>
          <target state="translated">このコレクションのサイズに等しいサイズを持つランタイムタイプ &lt;code&gt;T&lt;/code&gt; の配列を割り当て、このコレクションの要素を配列に追加します。</target>
        </trans-unit>
        <trans-unit id="c1195fdbc6554fa20b7252f9a560cada451c76a1" translate="yes" xml:space="preserve">
          <source>Allocates variable of given type and initializes it applying given block.</source>
          <target state="translated">指定された型の変数を確保し、指定されたブロックを適用して初期化します。</target>
        </trans-unit>
        <trans-unit id="6705fc8610b57b42cd0914fc2703ec41effca440" translate="yes" xml:space="preserve">
          <source>Allocates variable of given type.</source>
          <target state="translated">指定された型の変数を割り当てます。</target>
        </trans-unit>
        <trans-unit id="ad67b38b5b3e489a83a9d86cb512058c1c28cd42" translate="yes" xml:space="preserve">
          <source>Allow to use declarations only from the specified version of bundled libraries</source>
          <target state="translated">バンドルされたライブラリの指定されたバージョンの宣言のみを使用できるようにする</target>
        </trans-unit>
        <trans-unit id="8007b3e9075d1170dc667b832cf47d7c308bfc68" translate="yes" xml:space="preserve">
          <source>Allowed parameter types are:</source>
          <target state="translated">許可されているパラメータの種類は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="61fc3cf911e0b8cfbfd1fae755f04d3b8530e26f" translate="yes" xml:space="preserve">
          <source>Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function.</source>
          <target state="translated">関数の注釈付き関数パラメータの呼び出しから、関数の汎用型引数を推論できるようにします。</target>
        </trans-unit>
        <trans-unit id="2ca17ab1b543fffe9d760d6483367b7110e674a4" translate="yes" xml:space="preserve">
          <source>Allows to iterate this &lt;code&gt;dynamic&lt;/code&gt; object in the following cases:</source>
          <target state="translated">次の場合に、この &lt;code&gt;dynamic&lt;/code&gt; オブジェクトを反復できます。</target>
        </trans-unit>
        <trans-unit id="4e1f60d734c555f26f9e5320cb63e9073563da73" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;containsAll&lt;/code&gt; that requires to pass a collection of type &lt;code&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt; 型のコレクションを渡す必要がある &lt;code&gt;containsAll&lt;/code&gt; の型安全性の制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="5551952e0681d4554c4b7492043f5c4387e9b065" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;containsKey&lt;/code&gt; that requires to pass a key of type &lt;code&gt;K&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;K&lt;/code&gt; のキーを渡す必要がある &lt;code&gt;containsKey&lt;/code&gt; のタイプセーフ制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="ca964fc0695dc3842f9bbb3861bcab3571931e2f" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;containsValue&lt;/code&gt; that requires to pass a value of type &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;V&lt;/code&gt; の値を渡す必要がある &lt;code&gt;containsValue&lt;/code&gt; のタイプセーフティ制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="d9368cf4b430620fcad518dcf4491f67bb8e0357" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;remove&lt;/code&gt; that requires to pass a key of type &lt;code&gt;K&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;K&lt;/code&gt; のキーを渡す必要がある &lt;code&gt;remove&lt;/code&gt; タイプセーフ制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="6055b3878691548b2562b0c1a44bf3e670332d6d" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;remove&lt;/code&gt; that requires to pass an element of type &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;E&lt;/code&gt; の要素を渡す必要がある &lt;code&gt;remove&lt;/code&gt; タイプセーフティ制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="e7e85fd0bf827dad1a8aadfbc821d26c83739f8d" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;removeAll&lt;/code&gt; that requires to pass a collection of type &lt;code&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt; 型のコレクションを渡す必要がある &lt;code&gt;removeAll&lt;/code&gt; の型安全性の制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="1120ff7e828996efaf225e8e6ff50c37478d441d" translate="yes" xml:space="preserve">
          <source>Allows to overcome type-safety restriction of &lt;code&gt;retainAll&lt;/code&gt; that requires to pass a collection of type &lt;code&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt; 型のコレクションを渡すことを必要とする、 &lt;code&gt;retainAll&lt;/code&gt; の型安全性制限を克服できます。</target>
        </trans-unit>
        <trans-unit id="9aef1b3a8cdfb6586617903fec54b6b961bfb58e" translate="yes" xml:space="preserve">
          <source>Allows to use experimental API denoted by the given markers in the annotated file, declaration, or expression. If a declaration is annotated with &lt;a href=&quot;-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;, its usages are &lt;strong&gt;not&lt;/strong&gt; required to opt-in to that experimental API.</source>
          <target state="translated">注釈付きファイル、宣言、または式で指定されたマーカーによって示される実験的なAPIを使用できます。宣言に&lt;a href=&quot;-use-experimental/index&quot;&gt;UseExperimentalの&lt;/a&gt;注釈が付けられている場合、その使用方法は、実験的なAPIにオプトインする必要はあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="767aca618b65e97c744c4ba1148d8dd3f55aa87c" translate="yes" xml:space="preserve">
          <source>Allows to use experimental API denoted by the given markers in the annotated file, declaration, or expression. If a declaration is annotated with &lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;, its usages are &lt;strong&gt;not&lt;/strong&gt; required to opt-in to that experimental API.</source>
          <target state="translated">注釈付きファイル、宣言、または式で指定されたマーカーによって示される実験的なAPIを使用できます。宣言に&lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimentalの&lt;/a&gt;注釈が付けられている場合、その使用方法は、実験的なAPIにオプトインする必要はあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7f7fd4da8005b24c4668e48ab832af06bfdfc176" translate="yes" xml:space="preserve">
          <source>Allows to use experimental API denoted by the given markers in the annotated file, declaration, or expression. If a declaration is annotated with &lt;a href=&quot;index&quot;&gt;UseExperimental&lt;/a&gt;, its usages are &lt;strong&gt;not&lt;/strong&gt; required to opt-in to that experimental API.</source>
          <target state="translated">注釈付きファイル、宣言、または式で指定されたマーカーによって示される実験的なAPIを使用できます。宣言に&lt;a href=&quot;index&quot;&gt;UseExperimentalの&lt;/a&gt;注釈が付けられている場合、その使用方法は、実験的なAPIにオプトインする必要はあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="02b394debd2bfd76133dada0c07215fab1bf7d86" translate="yes" xml:space="preserve">
          <source>Allows to use the index operator for storing values in a mutable map.</source>
          <target state="translated">インデックス演算子を使用して、ミュータブルマップに値を格納できるようにします。</target>
        </trans-unit>
        <trans-unit id="ae2f23dc14f8b8ae70194799df9fe2faf6084689" translate="yes" xml:space="preserve">
          <source>Along with &lt;code&gt;macOS X64&lt;/code&gt;, Kotlin/Native supports iOS &lt;code&gt;arm32&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;X64&lt;/code&gt; targets. We may replace the &lt;code&gt;macosX64&lt;/code&gt; with respective functions as shown in the table:</source>
          <target state="translated">&lt;code&gt;macOS X64&lt;/code&gt; 、Kotlin /ネイティブサポートのiOS &lt;code&gt;arm32&lt;/code&gt; 、 &lt;code&gt;arm64&lt;/code&gt; と &lt;code&gt;X64&lt;/code&gt; の目標。次の表に示すように、 &lt;code&gt;macosX64&lt;/code&gt; をそれぞれの関数に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="6c9c0d1c45ed81d94eecd9c2cbef0cedfb482462" translate="yes" xml:space="preserve">
          <source>Along with collections, the Kotlin standard library contains another container type &amp;ndash; &lt;em&gt;sequences&lt;/em&gt; (&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.sequences/-sequence/index&quot;&gt;&lt;code&gt;Sequence&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;). Sequences offer the same functions as &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-iterable/index&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt; but implement another approach to multi-step collection processing.</source>
          <target state="translated">コレクションに加えて、Kotlin標準ライブラリには、&lt;em&gt;シーケンス&lt;/em&gt;（&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.sequences/-sequence/index&quot;&gt; &lt;code&gt;Sequence&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;）という別のコンテナタイプが含まれています。シーケンスは&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-iterable/index&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; &lt;/a&gt;と同じ機能を提供しますが、マルチステップコレクション処理への別のアプローチを実装します。</target>
        </trans-unit>
        <trans-unit id="da910a00c1b0d18d567bea7439afacc7e383fb07" translate="yes" xml:space="preserve">
          <source>Along with the complete &lt;em&gt;if&lt;/em&gt;-expression, this can be expressed with the Elvis operator, written &lt;code&gt;?:&lt;/code&gt;:</source>
          <target state="translated">完全な&lt;em&gt;if式&lt;/em&gt;に加えて、これは &lt;code&gt;?:&lt;/code&gt; と書かれたElvis演算子で表すことができます。</target>
        </trans-unit>
        <trans-unit id="ae20345f1088edb0d1f3ee088bea0c592966a156" translate="yes" xml:space="preserve">
          <source>Also a number of concrete implementations: &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;LinkedList&lt;/code&gt;, &lt;code&gt;SortedSet&lt;/code&gt;, &lt;code&gt;NavigableSet&lt;/code&gt;, &lt;code&gt;HashSet&lt;/code&gt;, &lt;code&gt;LinkedHashSet&lt;/code&gt;, &lt;code&gt;TreeSet&lt;/code&gt;, &lt;code&gt;SortedMap&lt;/code&gt;, &lt;code&gt;NavigableMap&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;LinkedHashMap&lt;/code&gt;, &lt;code&gt;TreeMap&lt;/code&gt;, &lt;code&gt;ConcurrentHashMap&lt;/code&gt;;</source>
          <target state="translated">また、多くの具体的な実装： &lt;code&gt;ArrayList&lt;/code&gt; 、 &lt;code&gt;LinkedList&lt;/code&gt; 、 &lt;code&gt;SortedSet&lt;/code&gt; 、 &lt;code&gt;NavigableSet&lt;/code&gt; 、 &lt;code&gt;HashSet&lt;/code&gt; 、 &lt;code&gt;LinkedHashSet&lt;/code&gt; 、 &lt;code&gt;TreeSet&lt;/code&gt; 、 &lt;code&gt;SortedMap&lt;/code&gt; 、 &lt;code&gt;NavigableMap&lt;/code&gt; 、 &lt;code&gt;HashMap&lt;/code&gt; 、 &lt;code&gt;LinkedHashMap&lt;/code&gt; 、 &lt;code&gt;TreeMap&lt;/code&gt; 、 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="a4bc657ab3f0c3c73dcee0ee8cba2295b9953602" translate="yes" xml:space="preserve">
          <source>Also each native binary is built in two variants (build types): &lt;code&gt;debug&lt;/code&gt; (debuggable, not optimized) and &lt;code&gt;release&lt;/code&gt; (not debuggable, optimized). Note that Kotlin/Native libraries have only &lt;code&gt;debug&lt;/code&gt; variant because optimizations are preformed only during compilation of a final binary (executable, static lib etc) and affect all libraries used to build it.</source>
          <target state="translated">また、各ネイティブバイナリは、 &lt;code&gt;debug&lt;/code&gt; （デバッグ可能、最適化されていない）と &lt;code&gt;release&lt;/code&gt; （デバッグ可能、最適化されていない）の2つのバリアント（ビルドタイプ）でビルドされます。最適化は最終的なバイナリ（実行可能ファイル、静的ライブラリなど）のコンパイル中にのみ実行され、ビルドに使用されるすべてのライブラリに影響を与えるため、Kotlin /ネイティブライブラリには &lt;code&gt;debug&lt;/code&gt; バリアントのみがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f6b68b5611010936700ead51fe4567f533d53b12" translate="yes" xml:space="preserve">
          <source>Also integer conversion functions, like &lt;code&gt;Int.toString()&lt;/code&gt;, &lt;code&gt;String.toInt()&lt;/code&gt;, &lt;code&gt;String.toIntOrNull()&lt;/code&gt;, each got an overload with &lt;code&gt;radix&lt;/code&gt; parameter, which allows to specify the base of conversion (2 to 36).</source>
          <target state="translated">また、 &lt;code&gt;Int.toString()&lt;/code&gt; 、 &lt;code&gt;String.toInt()&lt;/code&gt; 、 &lt;code&gt;String.toIntOrNull()&lt;/code&gt; などの整数変換関数は、それぞれ &lt;code&gt;radix&lt;/code&gt; パラメーターを持つオーバーロードを取得しました。これにより、変換のベース（2〜36）を指定できます。</target>
        </trans-unit>
        <trans-unit id="3d5ea7766cb4c7e8582f3e2907b124e86550c40c" translate="yes" xml:space="preserve">
          <source>Also it's possible to get a certain element of the collection. There are two ways to do this. First, each binary has a unique name. This name is based on the name prefix (if it's specified), build type and binary kind according to the following pattern: &lt;code&gt;&amp;lt;optional-name-prefix&amp;gt;&amp;lt;build-type&amp;gt;&amp;lt;binary-kind&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;releaseFramework&lt;/code&gt; or &lt;code&gt;testDebugExecutable&lt;/code&gt;.</source>
          <target state="translated">また、コレクションの特定の要素を取得することもできます。これを行うには2つの方法があります。まず、各バイナリには一意の名前があります。この名前は、名前のプレフィックス（指定されている場合）、ビルドタイプ、バイナリの種類に基づいて、次のパターンに基づいています： &lt;code&gt;&amp;lt;optional-name-prefix&amp;gt;&amp;lt;build-type&amp;gt;&amp;lt;binary-kind&amp;gt;&lt;/code&gt; 、たとえば &lt;code&gt;releaseFramework&lt;/code&gt; または &lt;code&gt;testDebugExecutable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="adbcd0e5fb01bdd6714f06aaa6ce22400079bdc6" translate="yes" xml:space="preserve">
          <source>Also migrating can be harder for larger teams because committing a lot of files in several subsystems may produce merging conflicts in personal branches. And while each conflict resolution is usually trivial, it's still wise to know if there are large feature branches currently in work.</source>
          <target state="translated">また、複数のサブシステムで多くのファイルをコミットすると、個人ブランチでのマージコンフリクトが発生する可能性があるため、大規模なチームでは移行が困難になることもあります。そして、それぞれの競合の解決は通常は些細なことですが、現在作業中の大規模な機能ブランチがあるかどうかを知っておくのが賢明です。</target>
        </trans-unit>
        <trans-unit id="d23bb96ba588a43fd49df962e1a5e12cbdc4035f" translate="yes" xml:space="preserve">
          <source>Also note that the default source set of a custom compilation depends on neither &lt;code&gt;commonMain&lt;/code&gt; nor &lt;code&gt;commonTest&lt;/code&gt; by default.</source>
          <target state="translated">また、カスタムコンパイルのデフォルトのソースセットは、デフォルトでは &lt;code&gt;commonMain&lt;/code&gt; にも &lt;code&gt;commonTest&lt;/code&gt; にも依存しません。</target>
        </trans-unit>
        <trans-unit id="4c45d230c10f7a9c5876bdc48154cba20229e782" translate="yes" xml:space="preserve">
          <source>Also note that this feature works only for Java interop; since Kotlin has proper function types, automatic conversion of functions into implementations of Kotlin interfaces is unnecessary and therefore unsupported.</source>
          <target state="translated">また、この機能はJava interopでのみ動作することに注意してください。Kotlinは適切な関数型を持っているので、関数をKotlinインターフェースの実装に自動的に変換する必要はなく、サポートされていません。</target>
        </trans-unit>
        <trans-unit id="0d16d355315015f6ad8c2286b3c3361209f05539" translate="yes" xml:space="preserve">
          <source>Also the &lt;code&gt;allTargets&lt;/code&gt; block is available.</source>
          <target state="translated">また &lt;code&gt;allTargets&lt;/code&gt; のブロックが可能です。</target>
        </trans-unit>
        <trans-unit id="d6738a00e5ebb6b8274e21dc9861225728c796b3" translate="yes" xml:space="preserve">
          <source>Also the plugin creates a number of aggregate tasks allowing you to build all the binaries for a build type (e.g. &lt;code&gt;assembleAllDebug&lt;/code&gt;) or all the binaries for a particular target (e.g. &lt;code&gt;assembleAllWasm32&lt;/code&gt;).</source>
          <target state="translated">また、プラグインは、集約ビルドタイプのすべてのバイナリをビルドできるようにするタスク（例えば数作成 &lt;code&gt;assembleAllDebug&lt;/code&gt; ）または特定のターゲット（例えばのためのすべてのバイナリ &lt;code&gt;assembleAllWasm32&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="82f3ffc6f95463f4d24c84e349253c3edd52258a" translate="yes" xml:space="preserve">
          <source>Also there are unsafe casts between &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; and &lt;code&gt;Long&lt;/code&gt; available, provided by the &lt;code&gt;.toLong()&lt;/code&gt; and &lt;code&gt;.toCPointer&amp;lt;T&amp;gt;()&lt;/code&gt; extension methods:</source>
          <target state="translated">また、 &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; 間に安全でないキャストがありますか？そして &lt;code&gt;Long&lt;/code&gt; によって提供される利用可能な、 &lt;code&gt;.toLong()&lt;/code&gt; と &lt;code&gt;.toCPointer&amp;lt;T&amp;gt;()&lt;/code&gt; 拡張メソッド：</target>
        </trans-unit>
        <trans-unit id="b53f5c026b61a62fa9f3573e7842d685a68496ea" translate="yes" xml:space="preserve">
          <source>Also you can create an archive, which can be distributed as a library:</source>
          <target state="translated">また、アーカイブを作成し、ライブラリとして配布することもできます。</target>
        </trans-unit>
        <trans-unit id="8ec79bba723b0b5d4a3efbc73d75054b78d5eece" translate="yes" xml:space="preserve">
          <source>Also, &lt;a href=&quot;ranges&quot;&gt;ranges and progressions&lt;/a&gt; supported for &lt;code&gt;UInt&lt;/code&gt; and &lt;code&gt;ULong&lt;/code&gt; by classes &lt;code&gt;kotlin.ranges.UIntRange&lt;/code&gt;, &lt;code&gt;kotlin.ranges.UIntProgression&lt;/code&gt;, &lt;code&gt;kotlin.ranges.ULongRange&lt;/code&gt;, &lt;code&gt;kotlin.ranges.ULongProgression&lt;/code&gt;</source>
          <target state="translated">また、クラス &lt;code&gt;kotlin.ranges.UIntRange&lt;/code&gt; 、 &lt;code&gt;kotlin.ranges.UIntProgression&lt;/code&gt; 、 &lt;code&gt;kotlin.ranges.ULongRange&lt;/code&gt; 、 &lt;code&gt;kotlin.ranges.ULongProgression&lt;/code&gt; によって &lt;code&gt;UInt&lt;/code&gt; と &lt;code&gt;ULong&lt;/code&gt; でサポートされる&lt;a href=&quot;ranges&quot;&gt;範囲と&lt;/a&gt;プログレッション</target>
        </trans-unit>
        <trans-unit id="c6beaf8ba0895659e29532d40fef68f02704bc43" translate="yes" xml:space="preserve">
          <source>Also, an additional publication under the name &lt;code&gt;metadata&lt;/code&gt; is added by default which contains serialized Kotlin declarations and is used by the IDE to analyze multiplatform libraries. The default artifact ID of this publication is formed as &lt;code&gt;&amp;lt;projectName&amp;gt;-metadata&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;metadata&lt;/code&gt; という名前の追加のパブリケーションがデフォルトで追加され、シリアル化されたKotlin宣言が含まれ、IDEがマルチプラットフォームライブラリを分析するために使用されます。このパブリケーションのデフォルトのアーティファクトIDは、 &lt;code&gt;&amp;lt;projectName&amp;gt;-metadata&lt;/code&gt; として形成されます。</target>
        </trans-unit>
        <trans-unit id="588e0dd064a23ceb816db9d5f24007fd586d7383" translate="yes" xml:space="preserve">
          <source>Also, any C type has the Kotlin type representing the lvalue of this type, i.e., the value located in memory rather than a simple immutable self-contained value. Think C++ references, as a similar concept. For structs (and &lt;code&gt;typedef&lt;/code&gt;s to structs) this representation is the main one and has the same name as the struct itself, for Kotlin enums it is named &lt;code&gt;${type}Var&lt;/code&gt;, for &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; it is &lt;code&gt;CPointerVar&amp;lt;T&amp;gt;&lt;/code&gt;, and for most other types it is &lt;code&gt;${type}Var&lt;/code&gt;.</source>
          <target state="translated">また、すべてのC型には、この型の左辺値を表すKotlin型があります。つまり、単純な不変の自己完結型の値ではなく、メモリに配置された値です。同様の概念として、C ++参照を考えてください。構造体（および構造体への &lt;code&gt;typedef&lt;/code&gt; ）の場合、この表現はメインの表現であり、構造体自体と同じ名前を持ちます &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; 列挙型の場合は &lt;code&gt;${type}Var&lt;/code&gt; という名前で、CPointer &amp;lt;T&amp;gt;の場合は &lt;code&gt;CPointerVar&amp;lt;T&amp;gt;&lt;/code&gt; 。他のほとんどのタイプの場合は &lt;code&gt;${type}Var&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7be67d265be36281b8f63a095ad19c81ece671ce" translate="yes" xml:space="preserve">
          <source>Also, by convention, packages named &quot;internal&quot; are not considered public API. All API residing in packages named &quot;experimental&quot; is considered experimental and can change at any moment.</source>
          <target state="translated">また、慣習上、&quot;internal &quot;という名前のパッケージは公開APIとはみなされません。experimental&quot; と名付けられたパッケージに存在するすべての API は実験的なものとみなされ、いつでも変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c9bd10bab922c731b87de4eb96a20c19fe5a43b2" translate="yes" xml:space="preserve">
          <source>Also, pay attention to how we explicitly iterate over channel with &lt;code&gt;for&lt;/code&gt; loop to perform fan-out in &lt;code&gt;launchProcessor&lt;/code&gt; code. Unlike &lt;code&gt;consumeEach&lt;/code&gt;, this &lt;code&gt;for&lt;/code&gt; loop pattern is perfectly safe to use from multiple coroutines. If one of the processor coroutines fails, then others would still be processing the channel, while a processor that is written via &lt;code&gt;consumeEach&lt;/code&gt; always consumes (cancels) the underlying channel on its normal or abnormal completion.</source>
          <target state="translated">また、 &lt;code&gt;launchProcessor&lt;/code&gt; コードでファンアウトを実行する &lt;code&gt;for&lt;/code&gt; ループでチャネルを明示的に反復する方法にも注意してください。 &lt;code&gt;consumeEach&lt;/code&gt; とは異なり、この &lt;code&gt;for&lt;/code&gt; ループパターンは、複数のコルーチンから使用しても完全に安全です。プロセッサコルーチンの1つに障害が発生した場合でも、他のプロセッサはチャネルを処理し続けますが、 &lt;code&gt;consumeEach&lt;/code&gt; を介して書き込まれたプロセッサは常に、正常または異常な完了時に基礎となるチャネルを消費（キャンセル）します。</target>
        </trans-unit>
        <trans-unit id="7f35cf4ee032c7c93d5589781533e0a4bc1b444e" translate="yes" xml:space="preserve">
          <source>Also, smart casts in a lambda are now allowed for local variables that are only modified before the lambda:</source>
          <target state="translated">また、ラムダ内のスマートキャストは、ラムダの前にのみ変更されるローカル変数に対して許可されるようになりました。</target>
        </trans-unit>
        <trans-unit id="f596cff2e69a2769ce39b785d33a165b1ca7707e" translate="yes" xml:space="preserve">
          <source>Also, the type parameter can be inferred automatically and so may be omitted in some cases.</source>
          <target state="translated">また、typeパラメータは自動的に推測されるため、場合によっては省略されることもあります。</target>
        </trans-unit>
        <trans-unit id="670a02e8b02deab6318124d808e1311bf75e73e1" translate="yes" xml:space="preserve">
          <source>Also, you can annotate a container with &lt;code&gt;@ContainerOptions&lt;/code&gt; to change its caching strategy:</source>
          <target state="translated">また、 &lt;code&gt;@ContainerOptions&lt;/code&gt; コンテナに注釈を付けて、そのキャッシュ戦略を変更できます。</target>
        </trans-unit>
        <trans-unit id="94305ddda8d8c2ded67654e8d004a4be24086b0b" translate="yes" xml:space="preserve">
          <source>Alternatively, a value can be stored in a mutable box like &lt;code&gt;class Counter(var i: Int)&lt;/code&gt;, which is, in turn, stored in a thread-local variable. However, in this case you are fully responsible to synchronize potentially concurrent modifications to the variable in this mutable box.</source>
          <target state="translated">または、値を &lt;code&gt;class Counter(var i: Int)&lt;/code&gt; ような可変ボックスに格納することもできます。このボックスは、スレッドローカル変数に格納されます。ただし、この場合は、この可変ボックス内の変数に対する潜在的に同時に発生する変更を同期する必要があります。</target>
        </trans-unit>
        <trans-unit id="4036e39e5fea9aa815bee2841527fac40599dee0" translate="yes" xml:space="preserve">
          <source>Alternatively, apply plugin by adding the &lt;code&gt;kotlin-gradle-plugin&lt;/code&gt; dependency to the build script classpath:</source>
          <target state="translated">または、ビルドスクリプトのクラスパスに &lt;code&gt;kotlin-gradle-plugin&lt;/code&gt; 依存関係を追加してプラグインを適用します。</target>
        </trans-unit>
        <trans-unit id="b0ad788f2bddcef11f58ae65090d685c11e6c1e0" translate="yes" xml:space="preserve">
          <source>Alternatively, on OS X you can install the compiler via &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.</source>
          <target state="translated">または、OS Xでは&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;を介してコンパイラをインストールできます。</target>
        </trans-unit>
        <trans-unit id="b6d98d3d8356f7c1784fb77b4e80c9059c7f1ef1" translate="yes" xml:space="preserve">
          <source>Alternatively, open the &lt;strong&gt;Help | Eclipse Marketplace&amp;hellip;&lt;/strong&gt; menu and search for &lt;strong&gt;Kotlin Plugin for Eclipse&lt;/strong&gt;:</source>
          <target state="translated">または、&lt;strong&gt;ヘルプを&lt;/strong&gt;開く&lt;strong&gt;| &lt;/strong&gt;&lt;strong&gt;Eclipse Marketplace&amp;hellip;&lt;/strong&gt;メニューと&lt;strong&gt;Eclipse&lt;/strong&gt;用&lt;strong&gt;Kotlin Pluginの&lt;/strong&gt;検索：</target>
        </trans-unit>
        <trans-unit id="a3819c18da3153eee5f7ba2c4f884eb9d5a9d51f" translate="yes" xml:space="preserve">
          <source>Alternatively, run your build with the &lt;code&gt;-Dkotlin.compiler.incremental=true&lt;/code&gt; option.</source>
          <target state="translated">または、 &lt;code&gt;-Dkotlin.compiler.incremental=true&lt;/code&gt; オプションを使用してビルドを実行します。</target>
        </trans-unit>
        <trans-unit id="dcafc37efacee62ff5167b22bd7afe945e65f65d" translate="yes" xml:space="preserve">
          <source>Alternatively, we can build it using the command line:</source>
          <target state="translated">あるいは、コマンドラインを使ってビルドすることもできます。</target>
        </trans-unit>
        <trans-unit id="8e7ff30c6d62b4d9a9b64c0da6086266922583f1" translate="yes" xml:space="preserve">
          <source>Alternatively, we can implement &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; interface in this &lt;code&gt;Activity&lt;/code&gt; class. The best way to do it is to use delegation with default factory functions. We also can combine the desired dispatcher (we used &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; in this example) with the scope:</source>
          <target state="translated">または、この &lt;code&gt;Activity&lt;/code&gt; クラスに&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;インターフェイスを実装することもできます。これを行う最良の方法は、デフォルトのファクトリ関数で委任を使用することです。また、目的のディスパッチャー（この例では&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;を使用）とスコープを組み合わせることもできます。</target>
        </trans-unit>
        <trans-unit id="81c85a530ac80bb63937f24d1d2d09b3453ca2c3" translate="yes" xml:space="preserve">
          <source>Alternatively, we can replace the lambda expression with an &lt;a href=&quot;lambdas#anonymous-functions&quot;&gt;anonymous function&lt;/a&gt;. A &lt;em&gt;return&lt;/em&gt; statement in an anonymous function will return from the anonymous function itself.</source>
          <target state="translated">または、ラムダ式を&lt;a href=&quot;lambdas#anonymous-functions&quot;&gt;無名関数に&lt;/a&gt;置き換えることもできます。&lt;em&gt;リターン&lt;/em&gt;匿名関数内のステートメントは、無名関数自体から返されます。</target>
        </trans-unit>
        <trans-unit id="6f729ed5a8b3f8541da8ad5c54dd2f06874e09fd" translate="yes" xml:space="preserve">
          <source>Alternatively, we can write an imperative implementation of the function &lt;code&gt;f&lt;/code&gt; using the traditional &lt;a href=&quot;../reference/control-flow&quot;&gt;while loop&lt;/a&gt; and mutable variables that are denoted in Kotlin with &lt;a href=&quot;../reference/basic-syntax#defining-variables&quot;&gt;var&lt;/a&gt;:</source>
          <target state="translated">または、Kotlinで&lt;a href=&quot;../reference/basic-syntax#defining-variables&quot;&gt;var&lt;/a&gt;を使用して示される従来の&lt;a href=&quot;../reference/control-flow&quot;&gt;whileループ&lt;/a&gt;と可変変数を使用して、関数 &lt;code&gt;f&lt;/code&gt; の命令型実装を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="352774b07b2ab09439be79c0627f8b9afa24ae3c" translate="yes" xml:space="preserve">
          <source>Alternatively, we may call the following command from the console:</source>
          <target state="translated">あるいは、コンソールから以下のコマンドを呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="cbb96921154a578b053b38c546f9f1ca15a9e271" translate="yes" xml:space="preserve">
          <source>Alternatively, you can append the content of &lt;code&gt;sample-library.meta.js&lt;/code&gt; to the end of &lt;code&gt;sample-library.js&lt;/code&gt; and distribute only the resulting file.</source>
          <target state="translated">また、あなたはのコンテンツ追加できる &lt;code&gt;sample-library.meta.js&lt;/code&gt; の最後に &lt;code&gt;sample-library.js&lt;/code&gt; のみ結果のファイルを配布します。</target>
        </trans-unit>
        <trans-unit id="c4a6eecc487b3e3f00148a15b2aaaeb358f0ee3a" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create new references to the same collection instance. New references are created when you initialize a collection variable with an existing collection. So, when the collection instance is altered through a reference, the changes are reflected in all its references.</source>
          <target state="translated">あるいは、同じコレクションインスタンスへの新しい参照を作成することもできます。新しい参照は、既存のコレクションでコレクション変数を初期化するときに作成されます。つまり、コレクションインスタンスが参照によって変更されると、その変更はすべての参照に反映されます。</target>
        </trans-unit>
        <trans-unit id="d73a5521b8a7030597430cfd9b6070220a6870c9" translate="yes" xml:space="preserve">
          <source>Alternatively, you can provide the necessary context by storing the method reference in a variable with an explicitly specified type:</source>
          <target state="translated">あるいは、明示的に指定された型を持つ変数にメソッド参照を格納することで、必要なコンテキストを提供することもできます。</target>
        </trans-unit>
        <trans-unit id="5cd4ff6b7dcd1cfc14b33e8b866af695e767db1d" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;apply plugin&lt;/code&gt; syntax:</source>
          <target state="translated">または、 &lt;code&gt;apply plugin&lt;/code&gt; 構文を適用することもできます。</target>
        </trans-unit>
        <trans-unit id="56eaefaabb413968ff2b278f1fe29c406df6e762" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;withIndex&lt;/code&gt; library function:</source>
          <target state="translated">または、 &lt;code&gt;withIndex&lt;/code&gt; ライブラリ関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="cfc691e1993122a26b8103256a134273624ec9f6" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the aliases if their names suit your situation better:</source>
          <target state="translated">あるいは、その名前があなたの状況に適している場合は、エイリアスを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="7e07bdecaff54dff9ada680a414c391c56b5344e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the older &lt;code&gt;apply plugin&lt;/code&gt; approach:</source>
          <target state="translated">または、古い &lt;code&gt;apply plugin&lt;/code&gt; の適用方法を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="7eb260d30ec4bcadab117cc5d4aebc3e0523fada" translate="yes" xml:space="preserve">
          <source>Although C pointers are mapped to the &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; type, the C function pointer-typed parameters are mapped to &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt;. When passing &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; as the value of such a parameter, it is passed to the C function as is. However, the sequence of values can be passed instead of a pointer. In this case the sequence is passed &quot;by value&quot;, i.e., the C function receives the pointer to the temporary copy of that sequence, which is valid only until the function returns.</source>
          <target state="translated">Cポインターは &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; 型にマップされますが、C関数のポインター型パラメーターは &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; マップされます。このようなパラメーターの値として &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; を渡すと、それはそのままC関数に渡されます。ただし、ポインターの代わりに値のシーケンスを渡すことができます。この場合、シーケンスは「値によって」渡されます。つまり、C関数は、そのシーケンスの一時的なコピーへのポインタを受け取ります。これは、関数が戻るまでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="f3762689ea186775c0d44ba58816cafeca593bfb" translate="yes" xml:space="preserve">
          <source>Although the scope functions are a way of making the code more concise, avoid overusing them: it can decrease your code readability and lead to errors. Avoid nesting scope functions and be careful when chaining them: it's easy to get confused about the current context object and the value of &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">スコープ関数はコードをより簡潔にする方法ですが、コードの使いすぎを避けてください。コードが読みにくくなり、エラーが発生する可能性があります。スコープ関数のネストを避け、それらをチェーンするときは注意してください。現在のコンテキストオブジェクトと &lt;code&gt;this&lt;/code&gt; または &lt;code&gt;it&lt;/code&gt; の値について混乱するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="b23c702ca03a5045c1531152dfb3347f4be40df2" translate="yes" xml:space="preserve">
          <source>Always explicitly specify function return types and property types (to avoid accidentally changing the return type when the implementation changes)</source>
          <target state="translated">関数の戻り値の型とプロパティの型を常に明示的に指定する(実装が変更された際に誤って戻り値の型を変更しないようにするため)。</target>
        </trans-unit>
        <trans-unit id="835bb0e9fc6cf0064468a302e6d1c6d633ca414d" translate="yes" xml:space="preserve">
          <source>Always explicitly specify member visibility (to avoid accidentally exposing declarations as public API)</source>
          <target state="translated">常に明示的にメンバーの可視性を指定します (宣言を誤って公開APIとして公開しないようにするため)。</target>
        </trans-unit>
        <trans-unit id="4dc7148df72dd0eb4b660574f26da9859f150966" translate="yes" xml:space="preserve">
          <source>Always put a space after &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="translated">の後には常にスペースを入れ &lt;code&gt;:&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdd7ac93b0b6b5c506f97a6f71fa95aec0b610cb" translate="yes" xml:space="preserve">
          <source>Always put overloads next to each other in a class.</source>
          <target state="translated">クラス内では常にオーバーロードを隣り合わせに配置します。</target>
        </trans-unit>
        <trans-unit id="77dd98961a884a5345ab12b4781a1a8ee340331a" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;false&lt;/code&gt; if the &lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.IntRange%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.IntRange%2C+kotlin.Int%29%2Felement&quot;&gt;要素&lt;/a&gt;が &lt;code&gt;null&lt;/code&gt; の場合、常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9c9f31c676a6d2c5edcca8d2e2d9b3ed41e15836" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;false&lt;/code&gt; if the &lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.contains.R%2C+kotlin.ranges.contains.T%29%2Felement&quot;&gt;element&lt;/a&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.contains.R%2C+kotlin.ranges.contains.T%29%2Felement&quot;&gt;要素&lt;/a&gt;が &lt;code&gt;null&lt;/code&gt; の場合、常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7988ba89d17b0a8ab3d804da58a5949afc3c968a" translate="yes" xml:space="preserve">
          <source>Always throws &lt;a href=&quot;-not-implemented-error/index&quot;&gt;NotImplementedError&lt;/a&gt; stating that operation is not implemented.</source>
          <target state="translated">操作が実装されていないことを示す&lt;a href=&quot;-not-implemented-error/index&quot;&gt;NotImplementedErrorを&lt;/a&gt;常にスローします。</target>
        </trans-unit>
        <trans-unit id="f89ffc2975fe20e674af074c614652dadb0e1a13" translate="yes" xml:space="preserve">
          <source>Always use immutable collection interfaces (&lt;code&gt;Collection&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;) to declare collections which are not mutated. When using factory functions to create collection instances, always use functions that return immutable collection types when possible:</source>
          <target state="translated">変更されないコレクションを宣言するには、常に不変コレクションインターフェイス（ &lt;code&gt;Collection&lt;/code&gt; 、 &lt;code&gt;List&lt;/code&gt; 、 &lt;code&gt;Set&lt;/code&gt; 、 &lt;code&gt;Map&lt;/code&gt; ）を使用します。ファクトリ関数を使用してコレクションインスタンスを作成するときは、可能な場合は常に不変のコレクション型を返す関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="ec2be55c240f050e35689b7c83a5b457a77f53f8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model&quot;&gt;actor&lt;/a&gt; is an entity made up of a combination of a coroutine, the state that is confined and encapsulated into this coroutine, and a channel to communicate with other coroutines. A simple actor can be written as a function, but an actor with a complex state is better suited for a class.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model&quot;&gt;アクターは、&lt;/a&gt;コルーチンの組み合わせで構成エンティティ、このコルーチンに閉じ込められ、カプセル化された状態、および他のコルーチンと通信するためのチャネルです。単純なアクターは関数として記述できますが、複雑な状態のアクターはクラスに適しています。</target>
        </trans-unit>
        <trans-unit id="d3b7d81a6f6754455032716fcc37915e63ee744a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;internal&lt;/code&gt; declaration can be annotated with &lt;code&gt;@PublishedApi&lt;/code&gt;, which allows its use in public API inline functions. When an &lt;code&gt;internal&lt;/code&gt; inline function is marked as &lt;code&gt;@PublishedApi&lt;/code&gt;, its body is checked too, as if it were public.</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; 宣言を用いて注釈を付けることができる &lt;code&gt;@PublishedApi&lt;/code&gt; パブリックAPIインライン関数におけるその使用を可能にします、。ときに &lt;code&gt;internal&lt;/code&gt; インライン関数は次のようにマークされている &lt;code&gt;@PublishedApi&lt;/code&gt; それが公共であるかのように、その本体は、あまりにもチェックされます。</target>
        </trans-unit>
        <trans-unit id="d1097d10379eacb95aba05c0c9ec394b32cfc159" translate="yes" xml:space="preserve">
          <source>An Android target's compilations created by default are tied to &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variants&lt;/a&gt;: for each build variant, a Kotlin compilation is created under the same name.</source>
          <target state="translated">デフォルトで作成されるAndroidターゲットのコンパイルは、&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Androidビルドバリアントに&lt;/a&gt;関連付けられています。ビルドバリアントごとに、Kotlinコンパイルは同じ名前で作成されます。</target>
        </trans-unit>
        <trans-unit id="25078697ad33e45e08c9cfe1bfa0aa40ccddc669" translate="yes" xml:space="preserve">
          <source>An Example C Library</source>
          <target state="translated">C ライブラリの例</target>
        </trans-unit>
        <trans-unit id="1b9ea2836a33996ba8c487526327ec3e8cf9fba2" translate="yes" xml:space="preserve">
          <source>An abstract class that is implemented by random number generator algorithms.</source>
          <target state="translated">乱数発生器のアルゴリズムで実装された抽象クラス。</target>
        </trans-unit>
        <trans-unit id="4a9fd254537990e83f93b983a98cb769ff30b247" translate="yes" xml:space="preserve">
          <source>An actual implementation of &lt;code&gt;synchronized&lt;/code&gt; method. This method is not supported in Kotlin/Native</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt; メソッドの実際の実装。このメソッドはKotlin / Nativeではサポートされていません</target>
        </trans-unit>
        <trans-unit id="a9715a45b4a88fc6fa80baa51b1d8ecddeadc9b2" translate="yes" xml:space="preserve">
          <source>An addition to d1: array of strings which occur in metadata, written in plain text so that strings already present in the constant pool are reused. These strings may be then indexed in the metadata by an integer index in this array.</source>
          <target state="translated">d1に追加されたもの:メタデータに現れる文字列の配列で、定数プールに既に存在する文字列が再利用されるようにプレーンテキストで書かれています。これらの文字列は、この配列の中の整数のインデックスによって、 メタデータの中でインデックス化されます。</target>
        </trans-unit>
        <trans-unit id="c3f4f34a32595590cdef4ef21ae760b10e173fce" translate="yes" xml:space="preserve">
          <source>An alternative implementation &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-set/index&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; &amp;ndash; says nothing about the elements order, so calling such functions on it returns unpredictable results. However, &lt;code&gt;HashSet&lt;/code&gt; requires less memory to store the same number of elements.</source>
          <target state="translated">代替実装&amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-set/index&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt; &amp;ndash;は要素の順序について何も言わないため、そのような関数を呼び出すと、予測できない結果が返されます。ただし、 &lt;code&gt;HashSet&lt;/code&gt; では、同じ数の要素を格納するために必要なメモリが少なくなります。</target>
        </trans-unit>
        <trans-unit id="e6e4f3366874e7590ae17b52297300632714aa71" translate="yes" xml:space="preserve">
          <source>An alternative way to specify the dependencies is to use the Gradle built-in DSL at the top level with the configuration names following the pattern &lt;code&gt;&amp;lt;sourceSetName&amp;gt;&amp;lt;DependencyKind&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">依存関係を指定する別の方法は、パターン &lt;code&gt;&amp;lt;sourceSetName&amp;gt;&amp;lt;DependencyKind&amp;gt;&lt;/code&gt; に従って構成名を付けて、最上位のGradle組み込みDSLを使用することです。</target>
        </trans-unit>
        <trans-unit id="9e96207a8c63326fbb03324978e047087f7d38c1" translate="yes" xml:space="preserve">
          <source>An annotation class is called a DSL marker if it is annotated with the &lt;code&gt;@DslMarker&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@DslMarker&lt;/code&gt; アノテーションが付けられているアノテーションクラスは、DSLマーカーと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="8bb0a9a63017ed601212672e5c20bc72207662b6" translate="yes" xml:space="preserve">
          <source>An anonymous function looks very much like a regular function declaration, except that its name is omitted. Its body can be either an expression (as shown above) or a block:</source>
          <target state="translated">匿名関数は、名前が省略されていることを除けば、通常の関数宣言と非常によく似ています。その本体は、式 (上図のように)かブロックのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="a7ab42b3abd36e19b2dd38585e49286adc00776d" translate="yes" xml:space="preserve">
          <source>An array of booleans. When targeting the JVM, instances of this class are represented as &lt;code&gt;boolean[]&lt;/code&gt;.</source>
          <target state="translated">ブール値の配列。JVMをターゲットとする場合、このクラスのインスタンスは &lt;code&gt;boolean[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="03e4b3088769d4557efa48ddcda5c52a61a168f4" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
          <target state="translated">バイトの配列。</target>
        </trans-unit>
        <trans-unit id="77e1f84d649f7d47d3cdaabf0e7ae93cf9dfc8bd" translate="yes" xml:space="preserve">
          <source>An array of bytes. When targeting the JVM, instances of this class are represented as &lt;code&gt;byte[]&lt;/code&gt;.</source>
          <target state="translated">バイトの配列。JVMを対象とする場合、このクラスのインスタンスは &lt;code&gt;byte[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="2ae191ec98b8d269b61fb103fa5590df851e5e34" translate="yes" xml:space="preserve">
          <source>An array of chars.</source>
          <target state="translated">文字の配列。</target>
        </trans-unit>
        <trans-unit id="397c8a21555baad250cc29c896d3f6477cec2858" translate="yes" xml:space="preserve">
          <source>An array of chars. When targeting the JVM, instances of this class are represented as &lt;code&gt;char[]&lt;/code&gt;.</source>
          <target state="translated">文字の配列。JVMを対象とする場合、このクラスのインスタンスは &lt;code&gt;char[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="4aa6c602bd80e75126301c9ec9915cf18b9a7758" translate="yes" xml:space="preserve">
          <source>An array of doubles. When targeting the JVM, instances of this class are represented as &lt;code&gt;double[]&lt;/code&gt;.</source>
          <target state="translated">doubleの配列。JVMをターゲットとする場合、このクラスのインスタンスは &lt;code&gt;double[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="652268ad0bfc8ca3233421c951b6b39d049a36c1" translate="yes" xml:space="preserve">
          <source>An array of floats.</source>
          <target state="translated">フロートの配列。</target>
        </trans-unit>
        <trans-unit id="44d375a3f1b207f46615611f923b7bf67734180a" translate="yes" xml:space="preserve">
          <source>An array of floats. When targeting the JVM, instances of this class are represented as &lt;code&gt;float[]&lt;/code&gt;.</source>
          <target state="translated">floatの配列。JVMをターゲットとする場合、このクラスのインスタンスは &lt;code&gt;float[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="aea2599e708e4ade794a04cb1ab3f04381d0b48c" translate="yes" xml:space="preserve">
          <source>An array of ints. When targeting the JVM, instances of this class are represented as &lt;code&gt;int[]&lt;/code&gt;.</source>
          <target state="translated">intの配列。JVMを対象とする場合、このクラスのインスタンスは &lt;code&gt;int[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="0b6b8bc946d943dd3ede081d9aaa88fd4de42699" translate="yes" xml:space="preserve">
          <source>An array of longs.</source>
          <target state="translated">ロングの配列。</target>
        </trans-unit>
        <trans-unit id="18358dd2cca50176a34410623345dbb64cff7ef4" translate="yes" xml:space="preserve">
          <source>An array of longs. When targeting the JVM, instances of this class are represented as &lt;code&gt;long[]&lt;/code&gt;.</source>
          <target state="translated">longの配列。JVMをターゲットとする場合、このクラスのインスタンスは &lt;code&gt;long[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="d6132facfa61d9777c706c73a84076d0c407e593" translate="yes" xml:space="preserve">
          <source>An array of shorts.</source>
          <target state="translated">ショートパンツの配列。</target>
        </trans-unit>
        <trans-unit id="4ab0f1bc7d8cd9bb47534750628da8d69770eb1e" translate="yes" xml:space="preserve">
          <source>An array of shorts. When targeting the JVM, instances of this class are represented as &lt;code&gt;short[]&lt;/code&gt;.</source>
          <target state="translated">ショーツの配列。JVMを対象とする場合、このクラスのインスタンスは &lt;code&gt;short[]&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="fd7b7a9b6d337563a2e4a5af2155f94b795f2923" translate="yes" xml:space="preserve">
          <source>An atomic reference to a Kotlin object. Can be used in concurrent scenarious, but must be frozen first, otherwise behaves as regular box for the value.</source>
          <target state="translated">Kotlin オブジェクトへのアトミックな参照。並行してscenariousで使用できますが、最初にフリーズさせなければなりません。</target>
        </trans-unit>
        <trans-unit id="c028591855097c6e299238572ef0b28b0e01e4ec" translate="yes" xml:space="preserve">
          <source>An atomic reference to a frozen Kotlin object. Can be used in concurrent scenarious but frequently shall be of nullable type and be zeroed out (with &lt;code&gt;compareAndSwap(get(), null)&lt;/code&gt;) once no longer needed. Otherwise memory leak could happen.</source>
          <target state="translated">凍結されたKotlinオブジェクトへのアトミック参照。同時シナリオで使用できますが、多くの場合null許容型であり、 &lt;code&gt;compareAndSwap(get(), null)&lt;/code&gt; ）ゼロにします。そうしないと、メモリリークが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="044706ac7c066a79a8ca31a7b12e7f90d8506cea" translate="yes" xml:space="preserve">
          <source>An easier way to install Kotlin on UNIX based systems such as OS X, Linux, Cygwin, FreeBSD and Solaris is by using &lt;a href=&quot;http://sdkman.io&quot;&gt;SDKMAN!&lt;/a&gt;. Simply run the following in a terminal and follow any instructions:</source>
          <target state="translated">&lt;a href=&quot;http://sdkman.io&quot;&gt;OSX&lt;/a&gt;、Linux、Cygwin、FreeBSD、SolarisなどのUNIXベースのシステムにKotlinをインストールする簡単な方法は、SDKMANを使用することです！。ターミナルで以下を実行し、指示に従ってください：</target>
        </trans-unit>
        <trans-unit id="51df019fa1a82a04d9407d583511fc048d6c341d" translate="yes" xml:space="preserve">
          <source>An effect of calling a functional parameter in place.</source>
          <target state="translated">機能パラメータをその場で呼び出すことによる効果。</target>
        </trans-unit>
        <trans-unit id="dce8b6398f6936bfa916784ba09b00d24e54897b" translate="yes" xml:space="preserve">
          <source>An effect of some condition being true after observing another effect of a function.</source>
          <target state="translated">関数の別の効果を観察した後に、ある条件が真であることの効果。</target>
        </trans-unit>
        <trans-unit id="c82d963873efac1606e11e14fa28a46f3f129aff" translate="yes" xml:space="preserve">
          <source>An effect that can be observed after a function invocation.</source>
          <target state="translated">関数呼び出し後に観察できる効果。</target>
        </trans-unit>
        <trans-unit id="d2a65229731a1dbcda2cde8dff94ea0c037236bb" translate="yes" xml:space="preserve">
          <source>An element of the &lt;a href=&quot;../index&quot;&gt;CoroutineContext&lt;/a&gt;. An element of the coroutine context is a singleton context by itself.</source>
          <target state="translated">&lt;a href=&quot;../index&quot;&gt;CoroutineContext&lt;/a&gt;の要素。コルーチンコンテキストの要素は、それ自体がシングルトンコンテキストです。</target>
        </trans-unit>
        <trans-unit id="579b5f9d0393353d9c5ad419c926798d0b5b0289" translate="yes" xml:space="preserve">
          <source>An element of the &lt;a href=&quot;index&quot;&gt;CoroutineContext&lt;/a&gt;. An element of the coroutine context is a singleton context by itself.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;CoroutineContext&lt;/a&gt;の要素。コルーチンコンテキストの要素は、それ自体がシングルトンコンテキストです。</target>
        </trans-unit>
        <trans-unit id="1849ea29cacd1d78de42e2cb11c54790de624f2c" translate="yes" xml:space="preserve">
          <source>An element of the collection at the particular index can be &lt;code&gt;null&lt;/code&gt;, if the corresponding group in the regular expression is optional and there was no match captured by that group.</source>
          <target state="translated">正規表現の対応するグループがオプションであり、そのグループによってキャプチャされた一致がなかった場合、特定のインデックスにあるコレクションの要素は &lt;code&gt;null&lt;/code&gt; になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d9ddd9f9f3fa617ce4d8683c03fc4782ec2a40a7" translate="yes" xml:space="preserve">
          <source>An empty Kotlin/JVM project will be created. For Eclipse IDE, the project is also a Java project but configured with Kotlin nature, meaning it has the Kotlin Builder and reference to the Kotlin Runtime Library. Great thing about this solution is that you can add both Kotlin and Java code to the same project.</source>
          <target state="translated">空のKotlin/JVMプロジェクトが作成されます。Eclipse IDEの場合、このプロジェクトはJavaプロジェクトでもありますが、Kotlinの性質を利用して設定されているので、Kotlin BuilderとKotlinランタイムライブラリへの参照が含まれています。このソリューションの素晴らしいところは、同じプロジェクトにKotlinとJavaの両方のコードを追加できることです。</target>
        </trans-unit>
        <trans-unit id="dec745358d69beb09a2cb557383753064ad5f416" translate="yes" xml:space="preserve">
          <source>An empty coroutine context.</source>
          <target state="translated">空のコルーチンコンテキスト。</target>
        </trans-unit>
        <trans-unit id="355167ba2b150529086bc55ea5529ff274eb867f" translate="yes" xml:space="preserve">
          <source>An empty range of values of type Char.</source>
          <target state="translated">Char型の値の空の範囲。</target>
        </trans-unit>
        <trans-unit id="5493ad4757293e81ed1e9d2b01fc9447308dc693" translate="yes" xml:space="preserve">
          <source>An empty range of values of type Int.</source>
          <target state="translated">Int型の値の空の範囲。</target>
        </trans-unit>
        <trans-unit id="f5c5227c98ba9fec8424537f02bd771bee2287a2" translate="yes" xml:space="preserve">
          <source>An empty range of values of type Long.</source>
          <target state="translated">Long型の値の空の範囲。</target>
        </trans-unit>
        <trans-unit id="a31cd8f0bdd302ffa6c82ec40a1d6bf08a7f03fd" translate="yes" xml:space="preserve">
          <source>An empty range of values of type UInt.</source>
          <target state="translated">UInt型の値の空の範囲。</target>
        </trans-unit>
        <trans-unit id="7de0db07d18eb5a7249868fe2631acd208937558" translate="yes" xml:space="preserve">
          <source>An empty range of values of type ULong.</source>
          <target state="translated">ULong型の値の空の範囲。</target>
        </trans-unit>
        <trans-unit id="f855b6a5d7c9ae64725c2b7618b0b2dc46cd761c" translate="yes" xml:space="preserve">
          <source>An enum class may implement an interface (but not derive from a class), providing either a single interface members implementation for all of the entries, or separate ones for each entry within its anonymous class. This is done by adding the interfaces to the enum class declaration as follows:</source>
          <target state="translated">enum クラスはインターフェイスを実装することができます (クラスから派生したものではありません)。これは、以下のようにenumクラス宣言にインターフェイスを追加することで実現されます。</target>
        </trans-unit>
        <trans-unit id="ae2e82030b071bac69253359197054aa0e172fee" translate="yes" xml:space="preserve">
          <source>An enumeration to describe possible walk directions. There are two of them: beginning from parents, ending with children, and beginning from children, ending with parents. Both use depth-first search.</source>
          <target state="translated">可能性のある歩き方を記述するための列挙。親から始まり、子供で終わるものと、子供から始まり、親で終わるものがある。どちらも深さ優先検索を使用する.</target>
        </trans-unit>
        <trans-unit id="1c8f513f65f98ac40886df273a2948dd4398150d" translate="yes" xml:space="preserve">
          <source>An example Maven project can be &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/archive/master/maven.zip&quot;&gt;downloaded directly from the GitHub repository&lt;/a&gt;</source>
          <target state="translated">Mavenプロジェクトの例&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/archive/master/maven.zip&quot;&gt;は、GitHubリポジトリから直接ダウンロード&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="31868c0655f4bdd21b4429e1d41316b9ccfad16e" translate="yes" xml:space="preserve">
          <source>An example layout can be found in &lt;code&gt;klib/stdlib&lt;/code&gt; directory of your installation.</source>
          <target state="translated">レイアウトの例は、インストールの &lt;code&gt;klib/stdlib&lt;/code&gt; ディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="160a0ebfb2e5d68b3c7e0d3a06b8c18043971895" translate="yes" xml:space="preserve">
          <source>An example of decomposing it into values:</source>
          <target state="translated">値に分解した例。</target>
        </trans-unit>
        <trans-unit id="cf480fe4e3a90cbdf7f14671c90f85e64185cd10" translate="yes" xml:space="preserve">
          <source>An example of the latter is when a key and the corresponding value are produced from an element together.</source>
          <target state="translated">後者の例としては、要素からキーとそれに対応する値が一緒に生成される場合があります。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="570f06329b5a3397d9d5b6a489b93c7119808cca" translate="yes" xml:space="preserve">
          <source>An exception class which is used when file to copy does not exist.</source>
          <target state="translated">コピーするファイルが存在しない場合に使用する例外クラスです。</target>
        </trans-unit>
        <trans-unit id="d8bd7f3d54e6f5271c37c83b071cf7246f1d8f63" translate="yes" xml:space="preserve">
          <source>An exception class which is used when some file to create or copy to already exists.</source>
          <target state="translated">作成・コピー先のファイルが既に存在する場合に使用する例外クラスです。</target>
        </trans-unit>
        <trans-unit id="4954c46232f2521f188fba6863ae1930df25fd04" translate="yes" xml:space="preserve">
          <source>An exception class which is used when we have not enough access for some operation.</source>
          <target state="translated">ある操作のために十分なアクセスがない場合に使用される例外クラスです。</target>
        </trans-unit>
        <trans-unit id="083fe82c5742a5e704c81ec938cc87543328da5e" translate="yes" xml:space="preserve">
          <source>An exception is thrown to indicate that a method body remains to be implemented.</source>
          <target state="translated">メソッド本体が実装されていないことを示す例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="81dcbb15ec41f3003e8331049eba1b756484d0a9" translate="yes" xml:space="preserve">
          <source>An exception that is thrown when &lt;code&gt;call&lt;/code&gt; is invoked on a callable or &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; is invoked on a property and that callable is not accessible (in JVM terms) from the calling method.</source>
          <target state="translated">callableまたは &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; で &lt;code&gt;call&lt;/code&gt; が呼び出されたときにスローされる例外がプロパティで呼び出され、そのcallableは呼び出しメソッドから（JVM用語で）アクセスできません。</target>
        </trans-unit>
        <trans-unit id="3faf62980c73621e78fbb6b7ad0d45485319433c" translate="yes" xml:space="preserve">
          <source>An exception that is thrown when &lt;code&gt;getDelegate&lt;/code&gt; is invoked on a &lt;a href=&quot;../../kotlin.reflect/-k-property/index#kotlin.reflect.KProperty&quot;&gt;KProperty&lt;/a&gt; object that was not made accessible with &lt;a href=&quot;../../kotlin.reflect.jvm/is-accessible&quot;&gt;isAccessible&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.reflect.jvm/is-accessible&quot;&gt;isAccessible&lt;/a&gt;でアクセス可能にされなかった&lt;a href=&quot;../../kotlin.reflect/-k-property/index#kotlin.reflect.KProperty&quot;&gt;KProperty&lt;/a&gt;オブジェクトで &lt;code&gt;getDelegate&lt;/code&gt; が呼び出されたときにスローされる例外。</target>
        </trans-unit>
        <trans-unit id="a4e161a0a85dfd03d188bd175d0b523e044a83fa" translate="yes" xml:space="preserve">
          <source>An exception that is thrown when &lt;code&gt;getDelegate&lt;/code&gt; is invoked on a &lt;a href=&quot;../kotlin.reflect/-k-property/index#kotlin.reflect.KProperty&quot;&gt;KProperty&lt;/a&gt; object that was not made accessible with &lt;a href=&quot;../kotlin.reflect.jvm/is-accessible&quot;&gt;isAccessible&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../kotlin.reflect.jvm/is-accessible&quot;&gt;isAccessible&lt;/a&gt;でアクセス可能にされなかった&lt;a href=&quot;../kotlin.reflect/-k-property/index#kotlin.reflect.KProperty&quot;&gt;KProperty&lt;/a&gt;オブジェクトで &lt;code&gt;getDelegate&lt;/code&gt; が呼び出されたときにスローされる例外。</target>
        </trans-unit>
        <trans-unit id="242022ed97713db649c4ad5a37af657ef4655f8c" translate="yes" xml:space="preserve">
          <source>An exception that is thrown when the code tries to introspect a property of a class or a package and that class or the package no longer has that property.</source>
          <target state="translated">コードがクラスやパッケージのプロパティをイントロスペクトしようとしたときに、そのクラスやパッケージがそのプロパティを持たなくなった場合にスローされる例外です。</target>
        </trans-unit>
        <trans-unit id="58dd21bdfb1687667b9872b3ca93f2959e023d71" translate="yes" xml:space="preserve">
          <source>An expected declaration in the common module and its actual counterparts always have exactly the same fully qualified name.</source>
          <target state="translated">共通モジュールで期待される宣言と実際の対応するものは、常に完全に同じ名前を持ちます。</target>
        </trans-unit>
        <trans-unit id="5efb5aa724a8dec245f424eb49c66e7f7ac4b028" translate="yes" xml:space="preserve">
          <source>An expected declaration is marked with the &lt;code&gt;expect&lt;/code&gt; keyword; the actual declaration is marked with the &lt;code&gt;actual&lt;/code&gt; keyword.</source>
          <target state="translated">予想される宣言は、 &lt;code&gt;expect&lt;/code&gt; キーワードでマークされています。実際の宣言は &lt;code&gt;actual&lt;/code&gt; キーワードでマークされます。</target>
        </trans-unit>
        <trans-unit id="2fd2c079b25e53015e4d7fa0eab891461a6ae7ed" translate="yes" xml:space="preserve">
          <source>An explicit call to &lt;code&gt;throw NullPointerException()&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;throw NullPointerException()&lt;/code&gt; をスローする明示的な呼び出し。</target>
        </trans-unit>
        <trans-unit id="e3c3c1a2b1eff4abc4b0bd9f7da57b625ebdddc9" translate="yes" xml:space="preserve">
          <source>An extension declared on top level of a file has access to the other &lt;code&gt;private&lt;/code&gt; top-level declarations in the same file;</source>
          <target state="translated">ファイルのトップレベルで宣言された拡張機能は、同じファイル内の他の &lt;code&gt;private&lt;/code&gt; トップレベル宣言にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="6a8434d8047cdd92cb0882c89429b8fc437cb69e" translate="yes" xml:space="preserve">
          <source>An extension to delegate a read-only property of type &lt;a href=&quot;../get-value#T&quot;&gt;T&lt;/a&gt; to an instance of &lt;a href=&quot;index&quot;&gt;Lazy&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;../get-value#T&quot;&gt;Tの&lt;/a&gt;読み取り専用プロパティを&lt;a href=&quot;index&quot;&gt;Lazyの&lt;/a&gt;インスタンスに委任するための拡張。</target>
        </trans-unit>
        <trans-unit id="60a92a66fb90cdfaf209843a1821537be8c6e582" translate="yes" xml:space="preserve">
          <source>An extension to delegate a read-only property of type &lt;a href=&quot;get-value#T&quot;&gt;T&lt;/a&gt; to an instance of &lt;a href=&quot;-lazy/index&quot;&gt;Lazy&lt;/a&gt;.</source>
          <target state="translated">タイプ&lt;a href=&quot;get-value#T&quot;&gt;Tの&lt;/a&gt;読み取り専用プロパティを&lt;a href=&quot;-lazy/index&quot;&gt;Lazyの&lt;/a&gt;インスタンスに委任するための拡張。</target>
        </trans-unit>
        <trans-unit id="705744a9de15af62a08f61e8d41c9c81f05518b6" translate="yes" xml:space="preserve">
          <source>An external function can have optional parameters. How the JavaScript implementation actually computes default values for these parameters, is unknown to Kotlin, thus it's impossible to use the usual syntax to declare such parameters in Kotlin. You should use the following syntax:</source>
          <target state="translated">外部関数はオプションのパラメータを持つことができます。JavaScriptの実装がどのようにしてこれらのパラメータのデフォルト値を計算しているのかはKotlinにはわからないので、Kotlinでこのようなパラメータを宣言するための通常の構文を使うことはできません。そのため、Kotlinでこのようなパラメータを宣言するには通常の構文を使うことができません。</target>
        </trans-unit>
        <trans-unit id="9ab375c29192b7811d916d4b9f176aab31922ed3" translate="yes" xml:space="preserve">
          <source>An extra int. Bits of this number represent the following flags:</source>
          <target state="translated">余計な整数。この数値のビットは以下のフラグを表します。</target>
        </trans-unit>
        <trans-unit id="8f0e7fbb0abda96cee9b91266671ebefde0d55a4" translate="yes" xml:space="preserve">
          <source>An extra string. For a multi-file part class, internal name of the facade class.</source>
          <target state="translated">追加の文字列。マルチファイルパートクラスの場合は、ファサードクラスの内部名。</target>
        </trans-unit>
        <trans-unit id="984f7bcd2eec42ba4307e6ee97bb51125e509aa1" translate="yes" xml:space="preserve">
          <source>An ideal scenario for interop is to call C functions as if we were calling Kotlin functions, that is, following the same signature and conventions. This is precisely what the &lt;code&gt;cinterop&lt;/code&gt; tool provides us with. It takes a C library and generates the corresponding Kotlin bindings for it, which then allows us to use the library as if it were Kotlin code.</source>
          <target state="translated">interopの理想的なシナリオは、Cotlin関数を呼び出す場合と同じように、つまり同じシグネチャと規則に従ってC関数を呼び出すことです。これはまさに &lt;code&gt;cinterop&lt;/code&gt; ツールが私たちに提供するものです。Cライブラリを受け取り、それに対応するKotlinバインディングを生成します。これにより、ライブラリをKotlinコードであるかのように使用できます。</target>
        </trans-unit>
        <trans-unit id="afbbe153fc9878ad0ce2e6f385b96c7a9b2bf6e6" translate="yes" xml:space="preserve">
          <source>An if/else statement is also an expression, meaning that a ternary conditional (which looks like &lt;code&gt;result = true_body if condition else false_body&lt;/code&gt; in Python) looks like this in Kotlin:</source>
          <target state="translated">if / elseステートメントも式です。つまり、3項条件式（Pythonでは &lt;code&gt;result = true_body if condition else false_body&lt;/code&gt; ように見えます）は、Kotlinでは次のようになります。</target>
        </trans-unit>
        <trans-unit id="eded1723cc9cb0692733789ac70b1045d7ae3a00" translate="yes" xml:space="preserve">
          <source>An immutable compile-time array of bytes.</source>
          <target state="translated">コンパイル時のバイトの不変の配列。</target>
        </trans-unit>
        <trans-unit id="577c3daf13e465ed00cd05fd438564786b390b7b" translate="yes" xml:space="preserve">
          <source>An important invariant that Kotlin/Native runtime maintains is that the object is either owned by a single thread/worker, or it is immutable (&lt;em&gt;shared XOR mutable&lt;/em&gt;). This ensures that the same data has a single mutator, and so there is no need for locking to exist. To achieve such an invariant, we use the concept of not externally referred object subgraphs. This is a subgraph which has no external references from outside of the subgraph, which could be checked algorithmically with O(N) complexity (in ARC systems), where N is the number of elements in such a subgraph. Such subgraphs are usually produced as a result of a lambda expression, for example some builder, and may not contain objects, referred to externally.</source>
          <target state="translated">Kotlin /ネイティブランタイムが維持する重要な不変条件は、オブジェクトが単一のスレッド/ワーカーによって所有されているか、不変である（&lt;em&gt;共有XOR可変&lt;/em&gt;）ことです。これにより、同じデータに単一のミューテーターが含まれることが保証されるため、ロックが存在する必要はありません。このような不変条件を実現するために、外部参照されないオブジェクトサブグラフの概念を使用します。これは、サブグラフの外部からの外部参照のないサブグラフであり、（ARCシステムで）O（N）の複雑さを使用してアルゴリズムでチェックできます。Nは、そのようなサブグラフの要素数です。このようなサブグラフは通常、ラムダ式（一部のビルダーなど）の結果として生成され、外部参照されるオブジェクトを含まない場合があります。</target>
        </trans-unit>
        <trans-unit id="a245b7b35f0279e876756ff2bf8f82c352511406" translate="yes" xml:space="preserve">
          <source>An important note is to make sure that the scripts are located before the &lt;code&gt;body&lt;/code&gt; tag is closed. Placing them at the top means that the scripts would be loaded before the DOM is fully available.</source>
          <target state="translated">重要な注意事項は、 &lt;code&gt;body&lt;/code&gt; タグを閉じる前にスクリプトを配置することです。それらを上部に配置することは、DOMが完全に利用可能になる前にスクリプトがロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="8458d287867c82b566dc113a91041a78172d4cd7" translate="yes" xml:space="preserve">
          <source>An index of the first occurrence of matched string from &lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; or -1 if none of &lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">マッチした文字列が最初に出現する位置のインデックス&lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;文字列&lt;/a&gt;または-1のいずれ場合は&lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;、文字列が&lt;/a&gt;見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="8c0a8b78c66945be3740a31787ba7e4635825d79" translate="yes" xml:space="preserve">
          <source>An index of the last occurrence of matched string from &lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; or -1 if none of &lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">マッチした文字列が最後に出現する位置のインデックス&lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;文字列&lt;/a&gt;または-1のいずれ場合は&lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;、文字列が&lt;/a&gt;見つかりません。</target>
        </trans-unit>
        <trans-unit id="d19026d29cad020c85eaf54de6347bca0fcff218" translate="yes" xml:space="preserve">
          <source>An inline class must have a single property initialized in the primary constructor. At runtime, instances of the inline class will be represented using this single property (see details about runtime representation &lt;a href=&quot;#representation&quot;&gt;below&lt;/a&gt;):</source>
          <target state="translated">インラインクラスには、プライマリコンストラクターで初期化された単一のプロパティが必要です。実行時、インラインクラスのインスタンスは、この単一のプロパティを使用して表されます（&lt;a href=&quot;#representation&quot;&gt;以下の&lt;/a&gt;実行時表現の詳細を参照してください）：</target>
        </trans-unit>
        <trans-unit id="6aeeca53f7d7112ea85744aebff5f624f1d57367" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;-destructured/index&quot;&gt;MatchResult.Destructured&lt;/a&gt; wrapper providing components for destructuring assignment of group values.</source>
          <target state="translated">グループ値の割り当てを破棄するためのコンポーネントを提供する&lt;a href=&quot;-destructured/index&quot;&gt;MatchResult.Destructured&lt;/a&gt;ラッパーのインスタンス。</target>
        </trans-unit>
        <trans-unit id="237963f856e3f0f9a452e4fa65010cb8b2cd3fde" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;../-match-group/index#kotlin.text.MatchGroup&quot;&gt;MatchGroup&lt;/a&gt; if the group with the specified &lt;a href=&quot;get#kotlin.text.MatchGroupCollection%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; was matched or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">指定された&lt;a href=&quot;get#kotlin.text.MatchGroupCollection%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスを&lt;/a&gt;持つグループが一致した場合は&lt;a href=&quot;../-match-group/index#kotlin.text.MatchGroup&quot;&gt;MatchGroup&lt;/a&gt;のインスタンス、そうでない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97b78fb44af12055a270650807c86bc14860d569" translate="yes" xml:space="preserve">
          <source>An integer literal has the type &lt;code&gt;Int&lt;/code&gt; if its value fits in an &lt;code&gt;Int&lt;/code&gt;, or &lt;code&gt;Long&lt;/code&gt; otherwise. &lt;code&gt;Long&lt;/code&gt; literals should be suffixed by &lt;code&gt;L&lt;/code&gt; for clarity, which will also let you make a &lt;code&gt;Long&lt;/code&gt; with a &quot;small&quot; value. There are no literal suffixes for &lt;code&gt;Short&lt;/code&gt; or &lt;code&gt;Byte&lt;/code&gt;, so such values need an explicit type declaration or the use of an explicit conversion function.</source>
          <target state="translated">整数リテラルは、その値が &lt;code&gt;Int&lt;/code&gt; に収まる場合は &lt;code&gt;Int&lt;/code&gt; 型、そうでない場合は &lt;code&gt;Long&lt;/code&gt; 型になります。明確にするために、 &lt;code&gt;Long&lt;/code&gt; リテラルの末尾には &lt;code&gt;L&lt;/code&gt; を付ける必要があります。これにより、「小さい」値で &lt;code&gt;Long&lt;/code&gt; を作成できます。 &lt;code&gt;Short&lt;/code&gt; または &lt;code&gt;Byte&lt;/code&gt; にはリテラルサフィックスがないため、そのような値には明示的な型宣言または明示的な変換関数の使用が必要です。</target>
        </trans-unit>
        <trans-unit id="02e8662bad7e28cd0e48175d2c2746c101216500" translate="yes" xml:space="preserve">
          <source>An interface can derive from other interfaces and thus both provide implementations for their members and declare new functions and properties. Quite naturally, classes implementing such an interface are only required to define the missing implementations:</source>
          <target state="translated">インターフェースは他のインターフェースから派生することができ、その結果、両方のメンバーに実装を提供し、新しい関数やプロパティを宣言することができます。当然のことながら、そのようなインターフェイスを実装するクラスは、不足している実装を定義するだけでよいのです。</target>
        </trans-unit>
        <trans-unit id="d5581e8a3a7a66c7475ca1827e8ce1ca2c9d0c83" translate="yes" xml:space="preserve">
          <source>An interface for indexing access to a collection of key-value pairs, where type of key is String and type of value is Any?.</source>
          <target state="translated">キーと値のペアのコレクションへのアクセスをインデックス化するためのインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="0afd7ca739dc49957f9c91a6a9442c0e8a4cf89b" translate="yes" xml:space="preserve">
          <source>An interface is defined using the keyword &lt;em&gt;interface&lt;/em&gt;</source>
          <target state="translated">インターフェースは、キーワード&lt;em&gt;インターフェース&lt;/em&gt;を使用して定義され&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ba2eecf86d7ef792219c17c70423ffeb9885bbf5" translate="yes" xml:space="preserve">
          <source>An interface is essentially a contract that a class may choose to sign; if it does, the class is obliged to provide implementations of the properties and functions of the interface. However, an interface may (but typically doesn't) provide a default implementation of some or all of its properties and functions. If a property or function has a default implementation, the class may choose to override it, but it doesn't have to. Here's an interface without any default implementations:</source>
          <target state="translated">インターフェースは基本的には、クラスが契約することを選択することができる契約です。しかし、インターフェースは、そのプロパティや関数の一部またはすべてのデフォルト実装を提供することができます(通常は提供しません)。プロパティや関数にデフォルトの実装がある場合、クラスはそれをオーバーライドすることができますが、オーバーライドする必要はありません。ここでは、デフォルトの実装を持たないインターフェイスを示します。</target>
        </trans-unit>
        <trans-unit id="9f55c1248bc5ba60ef7f0dd5822a00ca7f3914c9" translate="yes" xml:space="preserve">
          <source>An iterator over a collection or another entity that can be represented as a sequence of elements. Allows to sequentially access the elements.</source>
          <target state="translated">要素のシーケンスとして表現できるコレクションや他の実体に対するイテレータ。要素に順次アクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="9ca0e3ae9c59fbd7f313669ed9fb242663c8ce74" translate="yes" xml:space="preserve">
          <source>An iterator over a collection that supports indexed access.</source>
          <target state="translated">インデックス付きアクセスをサポートするコレクションに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f31216dec0895474d8551d7a2a358ec7e3f6c05b" translate="yes" xml:space="preserve">
          <source>An iterator over a mutable collection that supports indexed access. Provides the ability to add, modify and remove elements while iterating.</source>
          <target state="translated">インデックス化されたアクセスをサポートする、変異可能なコレクションに対するイテレータ。イテレータ中に要素を追加、変更、削除する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="6f61738c1b798d6a254b62e38051d6432deb0182" translate="yes" xml:space="preserve">
          <source>An iterator over a mutable collection. Provides the ability to remove elements while iterating.</source>
          <target state="translated">変形可能なコレクションに対するイテレータ。イテレータ中に要素を削除する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="b41aeaa5cbda107613255a0b4f804d60c68fe6a4" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; 型の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="04f13c68eded7ea224909442cc4d3c9c70a8aa8e" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;Byte&lt;/code&gt; の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="a4d3914072798d983f8e7b99a97ddf83e51f5150" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Char&lt;/code&gt; 型の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="19d10d27bce13e16f7cd4e0e39282ec57c212fc7" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Double&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;Double&lt;/code&gt; の値のシーケンスの反復子。</target>
        </trans-unit>
        <trans-unit id="f11269da054b557e4dff485fd1b14f7ce9345bf0" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 型の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="3cb77cc9b73a4fe06a1f2ecb948760972ec7ec6a" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; 型の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="1fc1bb0c2362d2d2b2fe222a4fb88088a8631bdc" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 型の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="c5f01f352bf1f8d7b643474efcd3c608e1a7cd97" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;Short&lt;/code&gt; の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="212a4fe33427d942dc09d1cff0248c1fc3dc41b7" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;UByte&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;UByte&lt;/code&gt; の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="38dca6b515a3b72722f20aca24dc7b0e3ccaaf8b" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;UInt&lt;/code&gt; の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f4cecbf1286c39461397d1e819d7bab1fabcb3f0" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;ULong&lt;/code&gt; の値のシーケンスに対するイテレーター。</target>
        </trans-unit>
        <trans-unit id="7d8df1d837284bb446cda713be646b9c293074ad" translate="yes" xml:space="preserve">
          <source>An iterator over a sequence of values of type &lt;code&gt;UShort&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UShort&lt;/code&gt; 型の値のシーケンスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="9878401117334f76dd1af0a629a8398d92b131b3" translate="yes" xml:space="preserve">
          <source>An object declaration inside a class can be marked with the &lt;em&gt;companion&lt;/em&gt; keyword:</source>
          <target state="translated">クラス内のオブジェクト宣言は、&lt;em&gt;コンパニオン&lt;/em&gt;キーワードでマークできます。</target>
        </trans-unit>
        <trans-unit id="ab861076a4fb4b02b25cde349d34de01eeec98b6" translate="yes" xml:space="preserve">
          <source>An object subgraph without external references can be disconnected using &lt;code&gt;DetachedObjectGraph&amp;lt;T&amp;gt;&lt;/code&gt; to a &lt;code&gt;COpaquePointer&lt;/code&gt; value, which could be stored in &lt;code&gt;void*&lt;/code&gt; data, so the disconnected object subgraphs can be stored in a C data structure, and later attached back with &lt;code&gt;DetachedObjectGraph&amp;lt;T&amp;gt;.attach()&lt;/code&gt; in an arbitrary thread or a worker. Combining it with &lt;a href=&quot;#shared&quot;&gt;raw memory sharing&lt;/a&gt; it allows side channel object transfer between concurrent threads, if the worker mechanisms are insufficient for a particular task.</source>
          <target state="translated">外部参照のないオブジェクトサブグラフは、 &lt;code&gt;DetachedObjectGraph&amp;lt;T&amp;gt;&lt;/code&gt; を使用して &lt;code&gt;void*&lt;/code&gt; データに格納できる &lt;code&gt;COpaquePointer&lt;/code&gt; 値に接続解除できるため、接続解除されたオブジェクトサブグラフをCデータ構造に格納し、後で &lt;code&gt;DetachedObjectGraph&amp;lt;T&amp;gt;.attach()&lt;/code&gt; 接続し直すことができます。&amp;gt;任意のスレッドまたはワーカーでの.attach（）。これを&lt;a href=&quot;#shared&quot;&gt;rawメモリ共有&lt;/a&gt;と組み合わせると、ワーカーメカニズムが特定のタスクに対して不十分な場合に、並行スレッド間でのサイドチャネルオブジェクト転送が可能になります。</target>
        </trans-unit>
        <trans-unit id="07a746c8cc0ee622f55dadfc108e799a1c3fb083" translate="yes" xml:space="preserve">
          <source>An ulp is a positive distance between this value and the next nearest &lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; value larger in magnitude.</source>
          <target state="translated">ulpは、この値と、次に大きい&lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt;値の大きさが大きい方の正の距離です。</target>
        </trans-unit>
        <trans-unit id="1193a682ae42184db8b00781bf1a6cff623135b6" translate="yes" xml:space="preserve">
          <source>An ulp is a positive distance between this value and the next nearest &lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; value larger in magnitude.</source>
          <target state="translated">ulpは、この値と次に大きい&lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt;値との間の正の距離です。</target>
        </trans-unit>
        <trans-unit id="1eeb0f95376371cdfb49abdb4c9217d97908b326" translate="yes" xml:space="preserve">
          <source>An unchecked cast warning can be suppressed by &lt;a href=&quot;annotations#annotations&quot;&gt;annotating&lt;/a&gt; the statement or the declaration where it occurs with &lt;code&gt;@Suppress(&quot;UNCHECKED_CAST&quot;)&lt;/code&gt;:</source>
          <target state="translated">未チェックのキャスト警告は、 &lt;code&gt;@Suppress(&quot;UNCHECKED_CAST&quot;)&lt;/code&gt; てステートメントまたはそれが発生する宣言に&lt;a href=&quot;annotations#annotations&quot;&gt;注釈を付ける&lt;/a&gt;ことで抑制できます。</target>
        </trans-unit>
        <trans-unit id="224fc875cc1389812769c427011b90378de64ff1" translate="yes" xml:space="preserve">
          <source>An uninitialized &lt;em&gt;this&lt;/em&gt; available in a constructor is passed and used somewhere (&quot;leaking &lt;em&gt;this&lt;/em&gt;&quot;);</source>
          <target state="translated">コンストラクタで利用可能な初期化されていない&lt;em&gt;this&lt;/em&gt;が渡され、どこかで使用されます（「&lt;em&gt;これを&lt;/em&gt;漏らす」）。</target>
        </trans-unit>
        <trans-unit id="294d616f23f237830e6172c8a2189fb0f6e3c307" translate="yes" xml:space="preserve">
          <source>And another coroutine or coroutines are consuming that stream, doing some processing, and producing some other results. In the example below, the numbers are just squared:</source>
          <target state="translated">そして、別のコルーチンまたはコルーチンは、そのストリームを消費し、何らかの処理を行い、他の何らかの結果を生み出しています。下の例では、数値はちょうど二乗しています。</target>
        </trans-unit>
        <trans-unit id="6d8db83654543299ba855ef2f77a0b67151b03f0" translate="yes" xml:space="preserve">
          <source>And indeed, the standard library provides such extensions:</source>
          <target state="translated">そして実際に、標準ライブラリはこのような拡張機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="831662cd23d556ae1867167e2b997555fda60ee2" translate="yes" xml:space="preserve">
          <source>And run the program:</source>
          <target state="translated">そして、プログラムを実行します。</target>
        </trans-unit>
        <trans-unit id="ef7383e9956dea7361c485cfdf90bfc09624cefc" translate="yes" xml:space="preserve">
          <source>And so now we can see the Application running in the Android emulator:</source>
          <target state="translated">そして今、私たちはAndroidエミュレータで実行されているアプリケーションを見ることができます。</target>
        </trans-unit>
        <trans-unit id="7f38de52a30af5ba4f2ad14a87b6af3302926c72" translate="yes" xml:space="preserve">
          <source>And the &lt;code&gt;buzz&lt;/code&gt; produces &quot;Buzz!&quot; string every 500 ms:</source>
          <target state="translated">そして、その &lt;code&gt;buzz&lt;/code&gt; は「バズ！」を生み出します。500ミリ秒ごとの文字列：</target>
        </trans-unit>
        <trans-unit id="abb85fc7583d49475a385d4fe1d8b3105d5744be" translate="yes" xml:space="preserve">
          <source>And the &lt;code&gt;kotlin&lt;/code&gt; folder should contain an &lt;code&gt;org.jetbrains.base64&lt;/code&gt; subfolder.</source>
          <target state="translated">また、 &lt;code&gt;kotlin&lt;/code&gt; フォルダーには &lt;code&gt;org.jetbrains.base64&lt;/code&gt; サブフォルダーが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="06968c048eecdfd2d8ce82ce65947172dc3ced91" translate="yes" xml:space="preserve">
          <source>And this is no good, see &lt;a href=&quot;http://www.oracle.com/technetwork/java/effectivejava-136174.html&quot;&gt;Effective Java, 3rd Edition&lt;/a&gt;, Item 77: &lt;em&gt;Don't ignore exceptions&lt;/em&gt;.</source>
          <target state="translated">そして、これは良くありません&lt;a href=&quot;http://www.oracle.com/technetwork/java/effectivejava-136174.html&quot;&gt;。EffectiveJava、3rd Edition&lt;/a&gt;、Item 77：&lt;em&gt;Do n't ignore exceptionsを&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ba4ed78a5c203e0a0d6c5d248918b8a19c56fa8c" translate="yes" xml:space="preserve">
          <source>And this is the corresponding JVM module:</source>
          <target state="translated">そして、これが対応するJVMモジュールです。</target>
        </trans-unit>
        <trans-unit id="8aae11c5ef8b94af9125d6d8e56120926d1e5469" translate="yes" xml:space="preserve">
          <source>And verify them:</source>
          <target state="translated">そして、それらを検証する。</target>
        </trans-unit>
        <trans-unit id="8f6ffd8fd8d2e472f2e6b7e9ab7c09aec1216b74" translate="yes" xml:space="preserve">
          <source>And we can use them to build &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">そして、それらを使用して &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグを作成できます。</target>
        </trans-unit>
        <trans-unit id="37029fccdc73e9af70ef315fe238e34b29d5d800" translate="yes" xml:space="preserve">
          <source>And we want to call it from Java and catch the exception:</source>
          <target state="translated">そして、Javaから呼び出して例外をキャッチしたい。</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="d63e83074435cb01ef82cc980736988099b393fa" translate="yes" xml:space="preserve">
          <source>Android &amp;mdash; iOS</source>
          <target state="translated">Android-iOS</target>
        </trans-unit>
        <trans-unit id="122421d0aa6da1c1d8b0652b1d0439aee58b1fa2" translate="yes" xml:space="preserve">
          <source>Android (&lt;code&gt;com.android.annotations&lt;/code&gt; and &lt;code&gt;android.support.annotations&lt;/code&gt;)</source>
          <target state="translated">Android（ &lt;code&gt;com.android.annotations&lt;/code&gt; および &lt;code&gt;android.support.annotations&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="cdbd05ca81539d7727c9f72c50fc2575de148b93" translate="yes" xml:space="preserve">
          <source>Android (arm32, arm64)</source>
          <target state="translated">Android (arm32,arm64)</target>
        </trans-unit>
        <trans-unit id="d5e0c620945a0a3f660b3e5ab3d4f8c8582d5174" translate="yes" xml:space="preserve">
          <source>Android Extensions is a part of the Kotlin plugin for IntelliJ IDEA and Android Studio. You do not need to install additional plugins.</source>
          <target state="translated">Android Extensionsは、IntelliJ IDEAやAndroid Studio用のKotlinプラグインの一部です。追加のプラグインをインストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="912cebcc81b6727d6b4a27f25ae6ceda0f3d945c" translate="yes" xml:space="preserve">
          <source>Android Extensions plugin includes several experimental features:</source>
          <target state="translated">Android Extensionsプラグインには、いくつかの実験的な機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="788e92cd59f35b765dfb290b75a2470110bcac5a" translate="yes" xml:space="preserve">
          <source>Android Extensions plugin provides &lt;a href=&quot;https://developer.android.com/reference/android/os/Parcelable&quot;&gt;&lt;code&gt;Parcelable&lt;/code&gt;&lt;/a&gt; implementation generator as an experimental feature. To be able to use it, &lt;a href=&quot;#enabling-experimental-features&quot;&gt;turn on&lt;/a&gt; the experimental flag.</source>
          <target state="translated">Android Extensionsプラグインは、実験的な機能として&lt;a href=&quot;https://developer.android.com/reference/android/os/Parcelable&quot;&gt; &lt;code&gt;Parcelable&lt;/code&gt; &lt;/a&gt;実装ジェネレーターを提供します。これを使用できるようにするには、実験的なフラグを&lt;a href=&quot;#enabling-experimental-features&quot;&gt;オンに&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="4b20faf69bb0d68e9ff5259d5a94fe50505aad01" translate="yes" xml:space="preserve">
          <source>Android Extensions plugin supports Android flavors. Suppose you have a flavor named &lt;code&gt;free&lt;/code&gt; in your &lt;code&gt;build.gradle&lt;/code&gt; file:</source>
          <target state="translated">Android Extensionsプラグインは、Androidフレーバーをサポートしています。名前の風味があると &lt;code&gt;free&lt;/code&gt; あなたに &lt;code&gt;build.gradle&lt;/code&gt; のファイルを：</target>
        </trans-unit>
        <trans-unit id="5c386b083ffeaf3c4c5b1b58aa40591816e49ddc" translate="yes" xml:space="preserve">
          <source>Android Extensions plugin supports different kinds of containers. The most basic ones are &lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html&quot;&gt;&lt;code&gt;Activity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/Fragment.html&quot;&gt;&lt;code&gt;Fragment&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;, but you can turn (virtually) any class to an Android Extensions container by implementing the &lt;code&gt;LayoutContainer&lt;/code&gt; interface, e.g.:</source>
          <target state="translated">Android Extensionsプラグインは、さまざまな種類のコンテナをサポートしています。最も基本的なものは&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html&quot;&gt; &lt;code&gt;Activity&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/Fragment.html&quot;&gt; &lt;code&gt;Fragment&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;ですが、 &lt;code&gt;LayoutContainer&lt;/code&gt; インターフェースを実装することで、任意のクラスを（実質的に）Android Extensionsコンテナーに変換できます。</target>
        </trans-unit>
        <trans-unit id="8f8e962e28dbda713734323efa907ea47ce54c5e" translate="yes" xml:space="preserve">
          <source>Android Frameworks Using Annotation Processing</source>
          <target state="translated">アノテーション処理を利用したAndroidフレームワーク</target>
        </trans-unit>
        <trans-unit id="a0461b370c97320db4eadce615521905410d30a0" translate="yes" xml:space="preserve">
          <source>Android Studio</source>
          <target state="translated">アンドロイドスタジオ</target>
        </trans-unit>
        <trans-unit id="1db00d00a02a5f04cb50bc2f0f1287f5de2abffb" translate="yes" xml:space="preserve">
          <source>Android Support</source>
          <target state="translated">人造人間サポート</target>
        </trans-unit>
        <trans-unit id="77168da48908d28fa05355dd32a69b973fe58e0f" translate="yes" xml:space="preserve">
          <source>Android's Gradle model is a little different from ordinary Gradle, so if we want to build an Android project written in Kotlin, we need &lt;em&gt;kotlin-android&lt;/em&gt; plugin instead of &lt;em&gt;kotlin&lt;/em&gt;:</source>
          <target state="translated">AndroidのGradleモデルは通常のGradleとは少し異なるため、Kotlinで記述されたAndroidプロジェクトをビルドする場合は、&lt;em&gt;kotlin&lt;/em&gt;ではなく&lt;em&gt;kotlin-android&lt;/em&gt;プラグインが必要&lt;em&gt;です&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="019d146e25dbc3abff3df1a28b09e19875c7c134" translate="yes" xml:space="preserve">
          <source>Annotate the class with &lt;code&gt;@Parcelize&lt;/code&gt;, and a &lt;code&gt;Parcelable&lt;/code&gt; implementation will be generated automatically.</source>
          <target state="translated">&lt;code&gt;@Parcelize&lt;/code&gt; でクラスに注釈を付けると、 &lt;code&gt;Parcelable&lt;/code&gt; 実装が自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="dcf47962afab59506d8f05ffc0dc0e240be6a73a" translate="yes" xml:space="preserve">
          <source>Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any).</source>
          <target state="translated">機能型の型引数をアノテーションし、型宣言でユーザが指定したパラメータ名を保持します。</target>
        </trans-unit>
        <trans-unit id="c27450928632920dddfd46511ecec7b552b66647" translate="yes" xml:space="preserve">
          <source>Annotating methods looks absolutely the same. In the example below &lt;code&gt;@Binds&lt;/code&gt; determines that a &lt;code&gt;Thermosiphon&lt;/code&gt; object is used whenever a &lt;code&gt;Pump&lt;/code&gt; is required, &lt;code&gt;@Provides&lt;/code&gt; specifies the way to build a &lt;code&gt;Heater&lt;/code&gt;, and &lt;code&gt;@Singleton&lt;/code&gt; says that the same &lt;code&gt;Heater&lt;/code&gt; should be used all over the place:</source>
          <target state="translated">アノテーションメソッドはまったく同じように見えます。以下の例では &lt;code&gt;@Binds&lt;/code&gt; は、と判断した &lt;code&gt;Thermosiphon&lt;/code&gt; たびオブジェクトが使用されている &lt;code&gt;Pump&lt;/code&gt; 必要とされ、 &lt;code&gt;@Provides&lt;/code&gt; が構築する方法を指定する &lt;code&gt;Heater&lt;/code&gt; 、そして &lt;code&gt;@Singleton&lt;/code&gt; は同じことを言う &lt;code&gt;Heater&lt;/code&gt; すべての場所で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0f6ad66cff0e79c74d390295ecf1f3c4ab7b59fb" translate="yes" xml:space="preserve">
          <source>Annotating such a property with &lt;code&gt;@JvmField&lt;/code&gt; makes it a static field with the same visibility as the property itself.</source>
          <target state="translated">そのようなプロパティに &lt;code&gt;@JvmField&lt;/code&gt; で注釈を付けると、プロパティ自体と同じ可視性を持つ静的フィールドになります。</target>
        </trans-unit>
        <trans-unit id="11b6848c1aaa50087253db374f3e542c102505a6" translate="yes" xml:space="preserve">
          <source>Annotating type arguments works with Java 8 target or higher and requires the nullability annotations to support the &lt;code&gt;TYPE_USE&lt;/code&gt; target (&lt;code&gt;org.jetbrains.annotations&lt;/code&gt; supports this in version 15 and above).</source>
          <target state="translated">型引数の注釈はJava 8以上のターゲットで機能し、 &lt;code&gt;TYPE_USE&lt;/code&gt; ターゲットをサポートするにはnull可能性注釈が必要です（ &lt;code&gt;org.jetbrains.annotations&lt;/code&gt; はバージョン15以降でこれをサポートしています）。</target>
        </trans-unit>
        <trans-unit id="2384c58a90459d62d2a9efbd506f8d261edf1c4e" translate="yes" xml:space="preserve">
          <source>Annotating type parameters</source>
          <target state="translated">型パラメータのアノテーション</target>
        </trans-unit>
        <trans-unit id="de3b78b64190965365f72568ffbe049d4ba32c22" translate="yes" xml:space="preserve">
          <source>Annotation</source>
          <target state="translated">Annotation</target>
        </trans-unit>
        <trans-unit id="1fc4932868442cf0c915c6837aca5550ee2f7927" translate="yes" xml:space="preserve">
          <source>Annotation Declaration</source>
          <target state="translated">アノテーション宣言</target>
        </trans-unit>
        <trans-unit id="bd92d9d74b7b3d8b6b1ad2f625c0250d938741c6" translate="yes" xml:space="preserve">
          <source>Annotation Processing</source>
          <target state="translated">アノテーション処理</target>
        </trans-unit>
        <trans-unit id="ec182925ba0524966cce4626bddf6ad6f32fea1b" translate="yes" xml:space="preserve">
          <source>Annotation Processing with Kotlin</source>
          <target state="translated">Kotlinによるアノテーション処理</target>
        </trans-unit>
        <trans-unit id="4b1f1c06bffcea15147a1b5f623f527a74b80af9" translate="yes" xml:space="preserve">
          <source>Annotation Use-site Targets</source>
          <target state="translated">アノテーション使用サイトターゲット</target>
        </trans-unit>
        <trans-unit id="ea260de226a4895003858a596d11ca961f112a86" translate="yes" xml:space="preserve">
          <source>Annotation class only</source>
          <target state="translated">アノテーションクラスのみ</target>
        </trans-unit>
        <trans-unit id="1290b8cda0147361fd3f2806d2d8763e0ffa0968" translate="yes" xml:space="preserve">
          <source>Annotation formatting</source>
          <target state="translated">アノテーションの書式設定</target>
        </trans-unit>
        <trans-unit id="bdd1fdac400f38ba14b75c1c0154b036afccd7ea" translate="yes" xml:space="preserve">
          <source>Annotation is stored in binary output and visible for reflection (default retention)</source>
          <target state="translated">アノテーションはバイナリ出力で保存され、反映のために可視化されます(デフォルトの保持</target>
        </trans-unit>
        <trans-unit id="dd3648b8cbd441a977d7ed18767b0067be651d6a" translate="yes" xml:space="preserve">
          <source>Annotation is stored in binary output, but invisible for reflection</source>
          <target state="translated">アノテーションはバイナリ出力で保存されますが、反映のためには見えません。</target>
        </trans-unit>
        <trans-unit id="c7633dc654201d1105c878ea7b445332a7650b6b" translate="yes" xml:space="preserve">
          <source>Annotation isn't stored in binary output</source>
          <target state="translated">アノテーションはバイナリ出力に保存されない</target>
        </trans-unit>
        <trans-unit id="ecd1cf51d6f16f433722d127b63f8f642bdf879d" translate="yes" xml:space="preserve">
          <source>Annotation parameters cannot have nullable types, because the JVM does not support storing &lt;code&gt;null&lt;/code&gt; as a value of an annotation attribute.</source>
          <target state="translated">JVMはアノテーション属性の値として &lt;code&gt;null&lt;/code&gt; を格納することをサポートしていないため、アノテーションパラメータにnullを使用できるタイプを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="fdc3a82bb03b8de0d603c836988ef88e6d4c4baa" translate="yes" xml:space="preserve">
          <source>Annotation processing</source>
          <target state="translated">アノテーション処理</target>
        </trans-unit>
        <trans-unit id="a311a5d8ccbe0a6fecfd06cf3a3f1cb6c96f2df3" translate="yes" xml:space="preserve">
          <source>Annotation processing with &lt;a href=&quot;kapt&quot;&gt;kapt&lt;/a&gt; is also supported but, due to the current limitations, it requires that the Android target is created before the &lt;code&gt;kapt&lt;/code&gt; dependencies are configured, which needs to be done in a top-level &lt;code&gt;dependencies { ... }&lt;/code&gt; block rather than within Kotlin source sets dependencies.</source>
          <target state="translated">&lt;a href=&quot;kapt&quot;&gt;kaptを使用した&lt;/a&gt;注釈処理もサポートされていますが、現在の制限により、 &lt;code&gt;kapt&lt;/code&gt; の依存関係を構成する前にAndroidターゲットを作成する必要があります。これは、最上位の &lt;code&gt;dependencies { ... }&lt;/code&gt; ブロック内ではなく、 Kotlinソースは依存関係を設定します。</target>
        </trans-unit>
        <trans-unit id="b5373dc5f2a0f143704f01fcb8a91297a2418810" translate="yes" xml:space="preserve">
          <source>Annotation processor arguments</source>
          <target state="translated">アノテーションプロセッサの引数</target>
        </trans-unit>
        <trans-unit id="94c1d27835b4e3c7463b14f6930327f7833181c1" translate="yes" xml:space="preserve">
          <source>Annotation processors (see &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=269&quot;&gt;JSR 269&lt;/a&gt;) are supported in Kotlin with the &lt;em&gt;kapt&lt;/em&gt; compiler plugin.</source>
          <target state="translated">注釈プロセッサ（&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=269&quot;&gt;JSR 269を&lt;/a&gt;参照）は、&lt;em&gt;Kaptlinでkapt&lt;/em&gt;コンパイラプラグインを使用してサポートされています。</target>
        </trans-unit>
        <trans-unit id="8177082fe0038f6133f976841e6fceb03f7a0e8e" translate="yes" xml:space="preserve">
          <source>AnnotationRetention</source>
          <target state="translated">AnnotationRetention</target>
        </trans-unit>
        <trans-unit id="7c993c00a44678340db7437a435cc646de2f557c" translate="yes" xml:space="preserve">
          <source>AnnotationTarget</source>
          <target state="translated">AnnotationTarget</target>
        </trans-unit>
        <trans-unit id="74dc68d72e7c6f05cb32f3c5f38a50a1624e1e2a" translate="yes" xml:space="preserve">
          <source>Annotations</source>
          <target state="translated">Annotations</target>
        </trans-unit>
        <trans-unit id="0978c1e3f442becc0c8fccc611674f0ff526839b" translate="yes" xml:space="preserve">
          <source>Annotations are means of attaching metadata to code. To declare an annotation, put the &lt;em&gt;annotation&lt;/em&gt; modifier in front of a class:</source>
          <target state="translated">注釈は、メタデータをコードに添付する手段です。アノテーションを宣言するには、&lt;em&gt;アノテーション&lt;/em&gt;修飾子をクラスの前に置きます。</target>
        </trans-unit>
        <trans-unit id="511dab2d8ef617e7cfb0e45010f87088807dd23f" translate="yes" xml:space="preserve">
          <source>Annotations are typically placed on separate lines, before the declaration to which they are attached, and with the same indentation:</source>
          <target state="translated">注釈は通常、添付する宣言の前に、同じインデントで別の行に配置されます。</target>
        </trans-unit>
        <trans-unit id="53fb8de00347ef0b4554853ad0e05547f13eb723" translate="yes" xml:space="preserve">
          <source>Annotations can also be used on lambdas. They will be applied to the &lt;code&gt;invoke()&lt;/code&gt; method into which the body of the lambda is generated. This is useful for frameworks like &lt;a href=&quot;http://www.paralleluniverse.co/quasar/&quot;&gt;Quasar&lt;/a&gt;, which uses annotations for concurrency control.</source>
          <target state="translated">注釈はラムダでも使用できます。それらは、ラムダの本体が生成される &lt;code&gt;invoke()&lt;/code&gt; メソッドに適用されます。これは、同時実行制御に注釈を使用する&lt;a href=&quot;http://www.paralleluniverse.co/quasar/&quot;&gt;Quasar&lt;/a&gt;などのフレームワークに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ad2224bd25ce92b9025b6cbeb112a7edaa5b0e3b" translate="yes" xml:space="preserve">
          <source>Annotations in stdlib</source>
          <target state="translated">stdlib でのアノテーション</target>
        </trans-unit>
        <trans-unit id="c2d0f5d5817a655773e98d2c21d1501a5c3e7638" translate="yes" xml:space="preserve">
          <source>Annotations may have constructors that take parameters.</source>
          <target state="translated">アノテーションはパラメータを取るコンストラクタを持つことができます。</target>
        </trans-unit>
        <trans-unit id="2af836fc4cd801e828ede4c1772f23c770652441" translate="yes" xml:space="preserve">
          <source>Annotations which are present on this element.</source>
          <target state="translated">この要素に存在するアノテーション。</target>
        </trans-unit>
        <trans-unit id="51f21b108edd7cfa3b4df397c3cd16e16ba8d400" translate="yes" xml:space="preserve">
          <source>Annotations with target &lt;code&gt;PARAMETER&lt;/code&gt; shouldn't be applicable to parameter's type</source>
          <target state="translated">ターゲット &lt;code&gt;PARAMETER&lt;/code&gt; のアノテーションは、パラメーターのタイプに適用できません</target>
        </trans-unit>
        <trans-unit id="85bbbe74ab1f228abca8b699919d8fe4ff920b3b" translate="yes" xml:space="preserve">
          <source>Annotations without arguments may be placed on the same line:</source>
          <target state="translated">引数のないアノテーションは、同じ行に配置することができます。</target>
        </trans-unit>
        <trans-unit id="f45e790951127a954b0b138945817a99cba86179" translate="yes" xml:space="preserve">
          <source>Annoyingly, the setter logic is not invoked by the initialization, which instead sets the backing field directly - that's why we have to use an initializer block in this example in order to verify that newly-created persons also don't get a negative age. Note the use of &lt;code&gt;this.age&lt;/code&gt; in the initializer block in order to distinguish between the identically-named property and constructor parameter.</source>
          <target state="translated">厄介なことに、セッターロジックは初期化によって呼び出されず、代わりにバッキングフィールドが直接設定されます。そのため、この例でイニシャライザブロックを使用して、新しく作成された人も負の年齢にならないことを確認する必要があります。同じ名前のプロパティとコンストラクタパラメータを区別するために、初期化ブロックで &lt;code&gt;this.age&lt;/code&gt; を使用していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0c46e55e02d2bba0de063715368447986462348d" translate="yes" xml:space="preserve">
          <source>Anonymous Classes</source>
          <target state="translated">匿名クラス</target>
        </trans-unit>
        <trans-unit id="462519e135281467088215ccc649f512ae9b84ce" translate="yes" xml:space="preserve">
          <source>Anonymous functions</source>
          <target state="translated">匿名機能</target>
        </trans-unit>
        <trans-unit id="67efcff218d7ef611506afe6c509fc760ea45887" translate="yes" xml:space="preserve">
          <source>Anonymous inner class instances are created using an &lt;a href=&quot;object-declarations#object-expressions&quot;&gt;object expression&lt;/a&gt;:</source>
          <target state="translated">匿名の内部クラスインスタンスは、&lt;a href=&quot;object-declarations#object-expressions&quot;&gt;オブジェクト式&lt;/a&gt;を使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="3e6935713845f342d3a7e30d54255301343b2148" translate="yes" xml:space="preserve">
          <source>Anonymous inner classes</source>
          <target state="translated">匿名のインナークラス</target>
        </trans-unit>
        <trans-unit id="317ce283b0e1e51af67dff2cb20cce9acaf80af1" translate="yes" xml:space="preserve">
          <source>Another case for using &lt;code&gt;let&lt;/code&gt; is introducing local variables with a limited scope for improving code readability. To define a new variable for the context object, provide its name as the lambda argument so that it can be used instead of the default &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; を使用するもう1つのケースは、コードの読みやすさを向上させるために範囲が限定されたローカル変数を導入することです。コンテキストオブジェクトの新しい変数を定義するには、その名前をlambda引数として指定し、デフォルトの &lt;code&gt;it&lt;/code&gt; の代わりに使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="23c755f4bc30a99c7ee274c17c1920280ebe7a5c" translate="yes" xml:space="preserve">
          <source>Another case where you may encounter this type is type inference. The nullable variant of this type, &lt;code&gt;Nothing?&lt;/code&gt;, has exactly one possible value, which is &lt;code&gt;null&lt;/code&gt;. If you use &lt;code&gt;null&lt;/code&gt; to initialize a value of an inferred type and there's no other information that can be used to determine a more specific type, the compiler will infer the &lt;code&gt;Nothing?&lt;/code&gt; type:</source>
          <target state="translated">このタイプに遭遇する可能性があるもう1つのケースは、タイプ推論です。この型のnull可能なバリアント、 &lt;code&gt;Nothing?&lt;/code&gt; には、1つの可能な値、つまり &lt;code&gt;null&lt;/code&gt; があります。 &lt;code&gt;null&lt;/code&gt; を使用して推論された型の値を初期化し、より具体的な型を決定するために使用できる他の情報がない場合、コンパイラーは &lt;code&gt;Nothing?&lt;/code&gt; タイプ：</target>
        </trans-unit>
        <trans-unit id="9b8366304ab1a95c1c49beb7448b75ab5f74c5e6" translate="yes" xml:space="preserve">
          <source>Another change made to ensure compatibility with the new module system is removing the deprecated declarations in the &lt;code&gt;kotlin.reflect&lt;/code&gt; package from the &lt;code&gt;kotlin-reflect&lt;/code&gt; library. If you were using them, you need to switch to using the declarations in the &lt;code&gt;kotlin.reflect.full&lt;/code&gt; package, which is supported since Kotlin 1.1.</source>
          <target state="translated">新しいモジュールシステムとの互換性を確保するために行われたもう1つの変更は、 &lt;code&gt;kotlin-reflect&lt;/code&gt; ライブラリから &lt;code&gt;kotlin.reflect&lt;/code&gt; パッケージの非推奨の宣言を削除することです。それらを使用していた場合は、 &lt;code&gt;kotlin.reflect.full&lt;/code&gt; 1.1以降でサポートされているkotlin.reflect.fullパッケージの宣言を使用するように切り替える必要があります。</target>
        </trans-unit>
        <trans-unit id="17fc6ea4e8ffe3adb9fcba583205b4f8e084b79f" translate="yes" xml:space="preserve">
          <source>Another crucial difference between regular and supervisor jobs is exception handling. Every child should handle its exceptions by itself via exception handling mechanisms. This difference comes from the fact that child's failure is not propagated to the parent.</source>
          <target state="translated">通常の仕事とスーパーバイザの仕事のもう一つの決定的な違いは、例外処理です。すべての子は、例外処理メカニズムを介して自分自身で例外を処理しなければなりません。この違いは、子の失敗が親に伝わらないという事実に由来します。</target>
        </trans-unit>
        <trans-unit id="72453f3d9ecafd5a8291207dab55a7f0a491bc00" translate="yes" xml:space="preserve">
          <source>Another example is a server process that spawns several children jobs and needs to &lt;em&gt;supervise&lt;/em&gt; their execution, tracking their failures and restarting just those children jobs that had failed.</source>
          <target state="translated">別の例は、いくつかの子ジョブを生成し、その実行を&lt;em&gt;監視&lt;/em&gt;し、失敗を追跡し、失敗した子ジョブだけを再起動する必要があるサーバープロセスです。</target>
        </trans-unit>
        <trans-unit id="b69e1595e0323133f3f094f84d78e280c57f4898" translate="yes" xml:space="preserve">
          <source>Another filtering function &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/partition&quot;&gt;&lt;code&gt;partition()&lt;/code&gt;&lt;/a&gt; &amp;ndash; filters a collection by a predicate and keeps the elements that don't match it in a separate list. So, you have a &lt;code&gt;Pair&lt;/code&gt; of &lt;code&gt;List&lt;/code&gt;s as a return value: the first list containing elements that match the predicate and the second one containing everything else from the original collection.</source>
          <target state="translated">別のフィルタリング関数&amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/partition&quot;&gt; &lt;code&gt;partition()&lt;/code&gt; &lt;/a&gt; &amp;ndash;述語でコレクションをフィルタリングし、それと一致しない要素を別のリストに保持します。したがって、戻り値として &lt;code&gt;Pair&lt;/code&gt; of &lt;code&gt;List&lt;/code&gt; があります。最初のリストには述語と一致する要素が含まれ、2番目のリストには元のコレクションのその他すべてが含まれます。</target>
        </trans-unit>
        <trans-unit id="415a2510c81000e2775fd292f94af115dd5767bd" translate="yes" xml:space="preserve">
          <source>Another function &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flat-map&quot;&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;/a&gt; provides a flexible way to process nested collections. It takes a function that maps a collection element to another collection. As a result, &lt;code&gt;flatMap()&lt;/code&gt; returns a single list of its return values on all the elements. So, &lt;code&gt;flatMap()&lt;/code&gt; behaves as a subsequent call of &lt;code&gt;map()&lt;/code&gt; (with a collection as a mapping result) and &lt;code&gt;flatten()&lt;/code&gt;.</source>
          <target state="translated">別の関数&amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flat-map&quot;&gt; &lt;code&gt;flatMap()&lt;/code&gt; &lt;/a&gt;は、ネストされたコレクションを処理する柔軟な方法を提供します。これは、コレクション要素を別のコレクションにマップする関数を取ります。その結果、 &lt;code&gt;flatMap()&lt;/code&gt; は、すべての要素の戻り値の単一のリストを返します。したがって、 &lt;code&gt;flatMap()&lt;/code&gt; は、 &lt;code&gt;map()&lt;/code&gt; （マッピング結果としてのコレクションを含む）および &lt;code&gt;flatten()&lt;/code&gt; の後続の呼び出しとして動作します。</target>
        </trans-unit>
        <trans-unit id="6bdbf853549591cf1a02de5538850f39175644f2" translate="yes" xml:space="preserve">
          <source>Another great resource is &lt;a href=&quot;https://leanpub.com/kotlin-for-android-developers&quot;&gt;Kotlin for Android Developers&lt;/a&gt;, a book that guides you step by step through the process of creating a real Android application in Kotlin.</source>
          <target state="translated">もう1つの優れたリソースは、&lt;a href=&quot;https://leanpub.com/kotlin-for-android-developers&quot;&gt;Kotlin for Android Developers&lt;/a&gt;です。これは、Kotlinで実際のAndroidアプリケーションを作成するプロセスを段階的にガイドする本です。</target>
        </trans-unit>
        <trans-unit id="a4421cbdbb5fffa3b41c631d13e851a82d7ccfb6" translate="yes" xml:space="preserve">
          <source>Another option is to use the</source>
          <target state="translated">もう一つの選択肢は</target>
        </trans-unit>
        <trans-unit id="a7469a97c5c0ee4e6c429ef78216de7c6a97d267" translate="yes" xml:space="preserve">
          <source>Another option is to use the &lt;code&gt;Array&lt;/code&gt; constructor that takes the array size and the function that can return the initial value of each array element given its index:</source>
          <target state="translated">もう1つのオプションは、配列サイズを取得する &lt;code&gt;Array&lt;/code&gt; コンストラクターと、インデックスを指定して各配列要素の初期値を返すことができる関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="66ef33646f6fdb95c6e7b715b325d7ddb5fc97f7" translate="yes" xml:space="preserve">
          <source>Another possibility is to check that a value &lt;em&gt;is&lt;/em&gt; or &lt;em&gt;!is&lt;/em&gt; of a particular type. Note that, due to &lt;a href=&quot;typecasts#smart-casts&quot;&gt;smart casts&lt;/a&gt;, you can access the methods and properties of the type without any extra checks.</source>
          <target state="translated">別の可能性は、値&lt;em&gt;が&lt;/em&gt;特定のタイプであるか&lt;em&gt;！&lt;/em&gt;&lt;a href=&quot;typecasts#smart-casts&quot;&gt;スマートキャスト&lt;/a&gt;により、追加のチェックなしで型のメソッドとプロパティにアクセスできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="284a54958ab9f9c7c6a312c55c1a3df5f40c15ff" translate="yes" xml:space="preserve">
          <source>Another reversing function - &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/as-reversed&quot;&gt;&lt;code&gt;asReversed()&lt;/code&gt;&lt;/a&gt; - returns a reversed view of the same collection instance, so it may be more lightweight and preferable than &lt;code&gt;reversed()&lt;/code&gt; if the original list is not going to change.</source>
          <target state="translated">別の逆転関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/as-reversed&quot;&gt; &lt;code&gt;asReversed()&lt;/code&gt; &lt;/a&gt; -は同じコレクションインスタンスの逆ビューを返すため、元のリストが変更されない場合は、 &lt;code&gt;reversed()&lt;/code&gt; よりも軽量で望ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="d7f61ba1a72297f8b5fa0d822ed4df9701871ffa" translate="yes" xml:space="preserve">
          <source>Another scenario when code sharing may bring benefits is a connected application where the logic may be reused on both the server and the client side running in the browser. This is covered by Kotlin Multiplatform as well.</source>
          <target state="translated">コード共有がメリットをもたらすもう一つのシナリオは、接続されたアプリケーションで、ブラウザ上で実行されているサーバ側とクライアント側の両方でロジックを再利用することができます。これは Kotlin Multiplatform でもカバーされています。</target>
        </trans-unit>
        <trans-unit id="37695a5b0985c68902e863a2fd2d3990bae7d390" translate="yes" xml:space="preserve">
          <source>Another use case for &lt;code&gt;with&lt;/code&gt; is introducing a helper object whose properties or functions will be used for calculating a value.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; のもう1つの使用例は、プロパティまたは関数が値の計算に使用されるヘルパーオブジェクトを導入することです。</target>
        </trans-unit>
        <trans-unit id="31890f3edcac57b3dc2b3c0904a630dc6729f127" translate="yes" xml:space="preserve">
          <source>Another use case for external interfaces is to describe settings objects. For example:</source>
          <target state="translated">外部インターフェースのもう一つの使用例は、設定オブジェクトを記述することです。例えば</target>
        </trans-unit>
        <trans-unit id="19519608d649a4a1570c94870bc19f2702db02d8" translate="yes" xml:space="preserve">
          <source>Another way of starting a coroutine is &lt;code&gt;async {}&lt;/code&gt;. It is like &lt;code&gt;launch {}&lt;/code&gt;, but returns an instance of &lt;code&gt;Deferred&amp;lt;T&amp;gt;&lt;/code&gt;, which has an &lt;code&gt;await()&lt;/code&gt; function that returns the result of the coroutine. &lt;code&gt;Deferred&amp;lt;T&amp;gt;&lt;/code&gt; is a very basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;future&lt;/a&gt; (fully-fledged JDK futures are also supported, but here we'll confine ourselves to &lt;code&gt;Deferred&lt;/code&gt; for now).</source>
          <target state="translated">コルーチンを開始する別の方法は、 &lt;code&gt;async {}&lt;/code&gt; です。これは &lt;code&gt;launch {}&lt;/code&gt; に似ていますが、コルーチンの結果を返す &lt;code&gt;await()&lt;/code&gt; 関数を持つ &lt;code&gt;Deferred&amp;lt;T&amp;gt;&lt;/code&gt; インスタンスを返します。 &lt;code&gt;Deferred&amp;lt;T&amp;gt;&lt;/code&gt; は非常に基本的な&lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;フューチャーです&lt;/a&gt;（本格的なJDKフューチャーもサポートされていますが、ここでは、今のところ &lt;code&gt;Deferred&lt;/code&gt; に限定します）。</target>
        </trans-unit>
        <trans-unit id="df86afd8c87499bcb72715837a9a282e5fd351a2" translate="yes" xml:space="preserve">
          <source>Another way to build maps in which both keys and values are somehow produced from collection elements is the function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate&quot;&gt;&lt;code&gt;associate()&lt;/code&gt;&lt;/a&gt;. It takes a lambda function that returns a &lt;code&gt;Pair&lt;/code&gt;: the key and the value of the corresponding map entry.</source>
          <target state="translated">キーと値の両方がコレクション要素から何らかの方法で生成されるマップを作成する別の方法は、関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate&quot;&gt; &lt;code&gt;associate()&lt;/code&gt; &lt;/a&gt;です。これは、 &lt;code&gt;Pair&lt;/code&gt; を返すラムダ関数（キーと対応するマップエントリの値）を取ります。</target>
        </trans-unit>
        <trans-unit id="315ea56e40e8a92285cf58ab15e68492291615cc" translate="yes" xml:space="preserve">
          <source>Another way to go through an &lt;code&gt;Iterable&lt;/code&gt; collection is the well-known &lt;code&gt;for&lt;/code&gt; loop. When using &lt;code&gt;for&lt;/code&gt; on a collection, you obtain the iterator implicitly. So, the following code is equivalent to the example above:</source>
          <target state="translated">&lt;code&gt;Iterable&lt;/code&gt; コレクションを処理する別の方法は、よく知られている &lt;code&gt;for&lt;/code&gt; ループです。コレクションで &lt;code&gt;for&lt;/code&gt; を使用すると、暗黙的にイテレータを取得できます。したがって、次のコードは上記の例と同等です。</target>
        </trans-unit>
        <trans-unit id="64e8da5240fa789378c770ee117158ca6aa3b29e" translate="yes" xml:space="preserve">
          <source>Another way to remove elements from a collection is with the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt;&lt;code&gt;minusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;-=&lt;/code&gt;) operator &amp;ndash; the in-place version of &lt;a href=&quot;collection-plus-minus&quot;&gt;&lt;code&gt;minus&lt;/code&gt;&lt;/a&gt;. The second argument can be a single instance of the element type or another collection. With a single element on the right-hand side, &lt;code&gt;-=&lt;/code&gt; removes the &lt;em&gt;first&lt;/em&gt; occurrence of it. In turn, if it's a collection, &lt;em&gt;all&lt;/em&gt; occurrences of its elements are removed. For example, if a list contains duplicate elements, they are removed at once. The second operand can contain elements that are not present in the collection. Such elements don't affect the operation execution.</source>
          <target state="translated">コレクションから要素を削除するもう1つの方法は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt; &lt;code&gt;minusAssign&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;-=&lt;/code&gt; ）演算子、つまりインプレースバージョンの&lt;a href=&quot;collection-plus-minus&quot;&gt; &lt;code&gt;minus&lt;/code&gt; &lt;/a&gt;です。2番目の引数は、要素タイプの単一のインスタンスまたは別のコレクションにすることができます。右側に単一の要素がある場合、 &lt;code&gt;-=&lt;/code&gt; はその&lt;em&gt;最初の&lt;/em&gt;要素を削除します。次に、それがコレクションの場合、その要素の&lt;em&gt;すべての&lt;/em&gt;出現が削除されます。たとえば、リストに重複する要素が含まれている場合、それらはすぐに削除されます。2番目のオペランドには、コレクションに存在しない要素を含めることができます。このような要素は、操作の実行には影響しません。</target>
        </trans-unit>
        <trans-unit id="02cc2a69720bd8bf1661deb23018e16470c069da" translate="yes" xml:space="preserve">
          <source>Ant</source>
          <target state="translated">Ant</target>
        </trans-unit>
        <trans-unit id="322444d3bb52c341f429ca0454f292dc242f315b" translate="yes" xml:space="preserve">
          <source>Any</source>
          <target state="translated">Any</target>
        </trans-unit>
        <trans-unit id="0cb33ffdd158d16c1cd363febb574a459919f699" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;index&quot;&gt;StableRef&lt;/a&gt; should be manually &lt;a href=&quot;dispose&quot;&gt;disposed&lt;/a&gt;</source>
          <target state="translated">どれ&lt;a href=&quot;index&quot;&gt;StableRefを&lt;/a&gt;手動でする必要があります&lt;a href=&quot;dispose&quot;&gt;配置されました&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="840d9fcd93be1f3f16e7000df19c0d0aa726f047" translate="yes" xml:space="preserve">
          <source>Any attempt to use a suspending function in the &lt;code&gt;finally&lt;/code&gt; block of the previous example causes &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;, because the coroutine running this code is cancelled. Usually, this is not a problem, since all well-behaving closing operations (closing a file, cancelling a job, or closing any kind of a communication channel) are usually non-blocking and do not involve any suspending functions. However, in the rare case when you need to suspend in a cancelled coroutine you can wrap the corresponding code in &lt;code&gt;withContext(NonCancellable) {...}&lt;/code&gt; using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html&quot;&gt;withContext&lt;/a&gt; function and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable.html&quot;&gt;NonCancellable&lt;/a&gt; context as the following example shows:</source>
          <target state="translated">前の例の &lt;code&gt;finally&lt;/code&gt; ブロックで中断関数を使用しようとすると、このコードを実行しているコルーチンが&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;キャンセルされる&lt;/a&gt;ため、CancellationExceptionが発生します。通常、これは問題にはなりません。正常に動作するすべてのクローズ操作（ファイルのクローズ、ジョブのキャンセル、またはあらゆる種類の通信チャネルのクローズ）は通常、非ブロッキングであり、中断機能は含まれないためです。ただし、キャンセルされたコルーチンで中断する必要があるまれなケースでは、次の例に示すように、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html&quot;&gt;withContext&lt;/a&gt;関数と&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable.html&quot;&gt;NonCancellable&lt;/a&gt;コンテキストを使用して、対応するコードを &lt;code&gt;withContext(NonCancellable) {...}&lt;/code&gt; でラップできます。</target>
        </trans-unit>
        <trans-unit id="baeca08f9527514de78f5126e61178580f4c2c75" translate="yes" xml:space="preserve">
          <source>Any declaration annotated with that marker is considered an experimental declaration and its call sites should accept the experimental aspect of it either by using &lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;, or by being annotated with that marker themselves, effectively causing further propagation of that experimental aspect.</source>
          <target state="translated">そのマーカーで注釈が付けられた宣言は実験的な宣言と見なされ、その呼び出しサイトは&lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;を使用するか、そのマーカー自体で注釈が付けられることにより、実験的な側面を受け入れる必要があり、効果的にその実験的側面をさらに拡大させます。</target>
        </trans-unit>
        <trans-unit id="9319546d56f2fb468a61f9cedf3aafcdcfd95f62" translate="yes" xml:space="preserve">
          <source>Any exception thrown by &lt;a href=&quot;map-catching#kotlin%24mapCatching%28kotlin.Result%28%28kotlin.mapCatching.T%29%29%2C+kotlin.Function1%28%28kotlin.mapCatching.T%2C+kotlin.mapCatching.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is caught, encapsulated as a failure and returned by this function. See &lt;a href=&quot;../kotlin.collections/map&quot;&gt;map&lt;/a&gt; for an alternative that rethrows exceptions.</source>
          <target state="translated">&lt;a href=&quot;map-catching#kotlin%24mapCatching%28kotlin.Result%28%28kotlin.mapCatching.T%29%29%2C+kotlin.Function1%28%28kotlin.mapCatching.T%2C+kotlin.mapCatching.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によってスローされた例外はすべてキャッチされ、失敗としてカプセル化されて、この関数によって返されます。例外を再スローする別の方法については、&lt;a href=&quot;../kotlin.collections/map&quot;&gt;マップ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8842081f269de454291ed96018f04e4603843cee" translate="yes" xml:space="preserve">
          <source>Any exception thrown by &lt;a href=&quot;recover-catching#kotlin%24recoverCatching%28kotlin.Result%28%28kotlin.recoverCatching.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.recoverCatching.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is caught, encapsulated as a failure and returned by this function. See &lt;a href=&quot;recover&quot;&gt;recover&lt;/a&gt; for an alternative that rethrows exceptions.</source>
          <target state="translated">&lt;a href=&quot;recover-catching#kotlin%24recoverCatching%28kotlin.Result%28%28kotlin.recoverCatching.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.recoverCatching.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によってスローされた例外はすべてキャッチされ、失敗としてカプセル化されて、この関数によって返されます。例外を再スローする別の方法については、&lt;a href=&quot;recover&quot;&gt;recover&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="676a34c59e95a4bb59a11025f2fe79d7b6a31e23" translate="yes" xml:space="preserve">
          <source>Any expression</source>
          <target state="translated">任意の式</target>
        </trans-unit>
        <trans-unit id="3a4587134976bb63b9ccebaab803c030010a7add" translate="yes" xml:space="preserve">
          <source>Any expression in Kotlin may be marked with a &lt;em&gt;label&lt;/em&gt;. Labels have the form of an identifier followed by the &lt;code&gt;@&lt;/code&gt; sign, for example: &lt;code&gt;abc@&lt;/code&gt;, &lt;code&gt;fooBar@&lt;/code&gt; are valid labels (see the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#label&quot;&gt;grammar&lt;/a&gt;). To label an expression, we just put a label in front of it</source>
          <target state="translated">Kotlinの表現には&lt;em&gt;ラベルを付ける&lt;/em&gt;ことができます。ラベルの形式は、識別子の後に &lt;code&gt;@&lt;/code&gt; 記号が続きます。例： &lt;code&gt;abc@&lt;/code&gt; 、 &lt;code&gt;fooBar@&lt;/code&gt; は有効なラベルです（&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#label&quot;&gt;文法を&lt;/a&gt;参照）。式にラベルを付けるには、その前にラベルを付けます</target>
        </trans-unit>
        <trans-unit id="9643747708b7afd0811621e7269415d800d57f87" translate="yes" xml:space="preserve">
          <source>Any malformed char sequence is replaced by the replacement byte sequence.</source>
          <target state="translated">不正な文字列はすべて置換バイト列で置き換えられます。</target>
        </trans-unit>
        <trans-unit id="cf02ecffd68da5d0b2c4fdb77704ed56e42b7d74" translate="yes" xml:space="preserve">
          <source>Any of the expressions to the right of &lt;code&gt;in&lt;/code&gt; in the loops above can also be used outside of loops in order to generate &lt;em&gt;ranges&lt;/em&gt; (one type of iterables - this is similar to &lt;code&gt;xrange()&lt;/code&gt; in Python 2 and &lt;code&gt;range()&lt;/code&gt; in Python 3), which can be iterated over later or turned into lists:</source>
          <target state="translated">上記のループ &lt;code&gt;in&lt;/code&gt; の右側の任意の式は、&lt;em&gt;範囲&lt;/em&gt;を生成するためにループの外側でも使用でき&lt;em&gt;ます&lt;/em&gt;（1種類の反復可能 &lt;code&gt;xrange()&lt;/code&gt; -これはPython 2のxrange（）およびPython 3の &lt;code&gt;range()&lt;/code&gt; に似ています）、これは後で繰り返したり、リストに変換したりできます。</target>
        </trans-unit>
        <trans-unit id="1319dcb2bc27c8497335222f4a0503f6a40176eb" translate="yes" xml:space="preserve">
          <source>Any other online Kotlin resources?</source>
          <target state="translated">他のオンラインのKotlinのリソースはありますか?</target>
        </trans-unit>
        <trans-unit id="fb898bc0e94df87d2d9f5f26138f08571ccf0df2" translate="yes" xml:space="preserve">
          <source>Any property (package-level or class-level) initialised with an expression of a platform type must declare its Kotlin type explicitly:</source>
          <target state="translated">プラットフォーム型の式で初期化されたプロパティ(パッケージレベルまたはクラスレベル)は、そのKotlin型を明示的に宣言しなければなりません。</target>
        </trans-unit>
        <trans-unit id="518e6ae52ee08d7d549c666588b84c9760ff3df2" translate="yes" xml:space="preserve">
          <source>Any reference in Java may be &lt;em&gt;null&lt;/em&gt;, which makes Kotlin's requirements of strict null-safety impractical for objects coming from Java. Types of Java declarations are treated specially in Kotlin and called &lt;em&gt;platform types&lt;/em&gt;. Null-checks are relaxed for such types, so that safety guarantees for them are the same as in Java (see more &lt;a href=&quot;#mapped-types&quot;&gt;below&lt;/a&gt;).</source>
          <target state="translated">Javaでの参照は&lt;em&gt;null&lt;/em&gt;になる可能性があり&lt;em&gt;ます&lt;/em&gt;。そのため、Javaからのオブジェクトに対して厳密なnullの安全性を求めるKotlinの要件は現実的ではありません。Java宣言のタイプはKotlinで特別に扱われ、&lt;em&gt;プラットフォームタイプ&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。このような型のヌルチェックは緩和されているため、それらの安全性保証はJavaと同じです（&lt;a href=&quot;#mapped-types&quot;&gt;以下を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="59ac9c9bbf2b27c71bdc39d7d608a003929abcac" translate="yes" xml:space="preserve">
          <source>Any usage of a declaration annotated with &lt;code&gt;@ExperimentalContracts&lt;/code&gt; must be accepted either by annotating that usage with the &lt;a href=&quot;../../kotlin/-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt; annotation, e.g. &lt;code&gt;@UseExperimental(ExperimentalContracts::class)&lt;/code&gt;, or by using the compiler argument &lt;code&gt;-Xuse-experimental=kotlin.contracts.ExperimentalContracts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@ExperimentalContracts&lt;/code&gt; で注釈が付けられた宣言の使用は、その使用に&lt;a href=&quot;../../kotlin/-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;注釈 &lt;code&gt;@UseExperimental(ExperimentalContracts::class)&lt;/code&gt; など）で注釈を付けるか、コンパイラー引数 &lt;code&gt;-Xuse-experimental=kotlin.contracts.ExperimentalContracts&lt;/code&gt; を使用して受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="02bf92f2d04d7b1cd46f8f42e0898ed8e98968a3" translate="yes" xml:space="preserve">
          <source>Any usage of a declaration annotated with &lt;code&gt;@ExperimentalMultiplatform&lt;/code&gt; must be accepted either by annotating that usage with the &lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt; annotation, e.g. &lt;code&gt;@UseExperimental(ExperimentalMultiplatform::class)&lt;/code&gt;, or by using the compiler argument &lt;code&gt;-Xuse-experimental=kotlin.ExperimentalMultiplatform&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@ExperimentalMultiplatform&lt;/code&gt; で注釈が付けられた宣言の使用は、&lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;注釈 &lt;code&gt;@UseExperimental(ExperimentalMultiplatform::class)&lt;/code&gt; など）で注釈を付けるか、コンパイラー引数 &lt;code&gt;-Xuse-experimental=kotlin.ExperimentalMultiplatform&lt;/code&gt; を使用することによって受け入れられます。</target>
        </trans-unit>
        <trans-unit id="c1d8bfdff579dcb65de53205211578dbeb5eb14c" translate="yes" xml:space="preserve">
          <source>Any usage of a declaration annotated with &lt;code&gt;@ExperimentalStdlibApi&lt;/code&gt; must be accepted either by annotating that usage with the &lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt; annotation, e.g. &lt;code&gt;@UseExperimental(ExperimentalStdlibApi::class)&lt;/code&gt;, or by using the compiler argument &lt;code&gt;-Xuse-experimental=kotlin.ExperimentalStdlibApi&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@ExperimentalStdlibApi&lt;/code&gt; で注釈が付けられた宣言の使用は、その使用に&lt;a href=&quot;../-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;注釈 &lt;code&gt;@UseExperimental(ExperimentalStdlibApi::class)&lt;/code&gt; など）で注釈を付けるか、コンパイラー引数 &lt;code&gt;-Xuse-experimental=kotlin.ExperimentalStdlibApi&lt;/code&gt; を使用して受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="9887d311cebb49c1b8013b0d0aff60f92ef1b87c" translate="yes" xml:space="preserve">
          <source>Any usage of a declaration annotated with &lt;code&gt;@ExperimentalTypeInference&lt;/code&gt; must be accepted either by annotating that usage with the &lt;a href=&quot;../../kotlin/-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt; annotation, e.g. &lt;code&gt;@UseExperimental(ExperimentalTypeInference::class)&lt;/code&gt;, or by using the compiler argument &lt;code&gt;-Xuse-experimental=kotlin.experimental.ExperimentalTypeInference&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@ExperimentalTypeInference&lt;/code&gt; で注釈が付けられた宣言の使用は、その使用に&lt;a href=&quot;../../kotlin/-use-experimental/index&quot;&gt;UseExperimental&lt;/a&gt;注釈 &lt;code&gt;@UseExperimental(ExperimentalTypeInference::class)&lt;/code&gt; など）で注釈を付けるか、コンパイラー引数 &lt;code&gt;-Xuse-experimental=kotlin.experimental.ExperimentalTypeInference&lt;/code&gt; を使用して受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="811cbe2af61404ee56f39ba006b687b297069bad" translate="yes" xml:space="preserve">
          <source>Any.hashCode</source>
          <target state="translated">Any.hashCode</target>
        </trans-unit>
        <trans-unit id="2bd2f20ae14171c9121a433ba4cee6ae0ab841c4" translate="yes" xml:space="preserve">
          <source>Anyone wanting to continue on without an IDE, will need to download and install the &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt; build tool. Make sure to use the right version of Gradle (e.g. 5.4.1 or newer). Running the &lt;code&gt;gradle wrapper&lt;/code&gt; command will complete the project creation. &lt;a href=&quot;https://docs.gradle.org/current/userguide/getting_started.html&quot;&gt;Getting Started with Gradle&lt;/a&gt; explains in detail how to start using Gradle projects.</source>
          <target state="translated">IDEなしで続行する場合は、&lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;ビルドツールをダウンロードしてインストールする必要があります。必ず正しいバージョンのGradleを使用してください（例：5.4.1以降）。 &lt;code&gt;gradle wrapper&lt;/code&gt; コマンドを実行すると、プロジェクトの作成が完了します。&lt;a href=&quot;https://docs.gradle.org/current/userguide/getting_started.html&quot;&gt;Gradleスタートガイドで&lt;/a&gt;は、Gradleプロジェクトの使用を開始する方法について詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="068fa8e08711a37bb299b526732bca2ab3db73f5" translate="yes" xml:space="preserve">
          <source>Anyway, this is an extremely impractical way to find prime numbers. In practice, pipelines do involve some other suspending invocations (like asynchronous calls to remote services) and these pipelines cannot be built using &lt;code&gt;sequence&lt;/code&gt;/&lt;code&gt;iterator&lt;/code&gt;, because they do not allow arbitrary suspension, unlike &lt;code&gt;produce&lt;/code&gt;, which is fully asynchronous.</source>
          <target state="translated">とにかく、これは素数を見つけるための非常に非現実的な方法です。実際には、パイプラインには他のいくつかの中断呼び出し（リモートサービスへの非同期呼び出しなど）が含まれます。これらのパイプラインは、完全に非同期の &lt;code&gt;produce&lt;/code&gt; とは異なり、任意の中断を許可しないため、 &lt;code&gt;sequence&lt;/code&gt; / &lt;code&gt;iterator&lt;/code&gt; を使用して構築できません。</target>
        </trans-unit>
        <trans-unit id="3aef4e48f67a38e531561594a9ddba747f5daaaf" translate="yes" xml:space="preserve">
          <source>Apart from the automatic passing of the instance into &lt;code&gt;this&lt;/code&gt;, member functions generally act like ordinary functions.</source>
          <target state="translated">インスタンスが &lt;code&gt;this&lt;/code&gt; に自動的に渡されることを除いて、メンバー関数は通常、通常の関数のように動作します。</target>
        </trans-unit>
        <trans-unit id="5b3a4634f2e4a70511a4fa828097bfdaf52b9aaa" translate="yes" xml:space="preserve">
          <source>Apart from the default imports, each file may contain its own import directives. Syntax for imports is described in the &lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#importHeader&quot;&gt;grammar&lt;/a&gt;.</source>
          <target state="translated">デフォルトのインポートとは別に、各ファイルには独自のインポートディレクティブを含めることができます。インポートの構文は&lt;a href=&quot;https://kotlinlang.org/docs/reference/grammar.html#importHeader&quot;&gt;文法で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="e96335f31dca923971fca83bb7d266b9f6649b68" translate="yes" xml:space="preserve">
          <source>Appendable</source>
          <target state="translated">Appendable</target>
        </trans-unit>
        <trans-unit id="6a3d4d9872f5280873fccfbdf465e2c00f0e60ed" translate="yes" xml:space="preserve">
          <source>Appending &lt;code&gt;::class&lt;/code&gt; to a class name will give you a &lt;code&gt;KClass&amp;lt;C&amp;gt;&lt;/code&gt; metadata object for that class. The generic type parameter &lt;code&gt;C&lt;/code&gt; is the class itself, so you can use &lt;code&gt;KClass&amp;lt;*&amp;gt;&lt;/code&gt; if you're writing a function that can work with metadata for any class, or you can make a generic function with a type parameter &lt;code&gt;T&lt;/code&gt; and parameter type &lt;code&gt;KClass&amp;lt;T&amp;gt;&lt;/code&gt;. From this, you can obtain references to the members of the class. The most interesting properties on &lt;code&gt;KClass&lt;/code&gt; are probably &lt;code&gt;primaryConstructor&lt;/code&gt;, &lt;code&gt;constructors&lt;/code&gt;, &lt;code&gt;memberProperties&lt;/code&gt;, &lt;code&gt;declaredMemberProperties&lt;/code&gt;, &lt;code&gt;memberFunctions&lt;/code&gt;, and &lt;code&gt;declaredMemberFunctions&lt;/code&gt;. The difference between e.g. &lt;code&gt;memberProperties&lt;/code&gt; and &lt;code&gt;declaredMemberProperties&lt;/code&gt; is that the former includes inherited properties, while the latter only includes the properties that have been declared in the class' own body.</source>
          <target state="translated">追加 &lt;code&gt;::class&lt;/code&gt; クラス名には、あなたを与えるだろう &lt;code&gt;KClass&amp;lt;C&amp;gt;&lt;/code&gt; そのクラスのメタデータオブジェクトを。ジェネリック型パラメーター &lt;code&gt;C&lt;/code&gt; はクラス自体なので、任意のクラスのメタデータを処理できる関数を作成している場合は &lt;code&gt;KClass&amp;lt;*&amp;gt;&lt;/code&gt; 使用できます。または、型パラメーター &lt;code&gt;T&lt;/code&gt; とパラメーター型 &lt;code&gt;KClass&amp;lt;T&amp;gt;&lt;/code&gt; を使用してジェネリック関数を作成できます&amp;lt;T&amp;gt;。これから、クラスのメンバーへの参照を取得できます。 &lt;code&gt;KClass&lt;/code&gt; の最も興味深いプロパティは、おそらく &lt;code&gt;primaryConstructor&lt;/code&gt; 、 &lt;code&gt;constructors&lt;/code&gt; 、 &lt;code&gt;memberProperties&lt;/code&gt; 、 &lt;code&gt;declaredMemberProperties&lt;/code&gt; 、 &lt;code&gt;memberFunctions&lt;/code&gt; です。、および &lt;code&gt;declaredMemberFunctions&lt;/code&gt; 。例えば違い &lt;code&gt;memberProperties&lt;/code&gt; と &lt;code&gt;declaredMemberProperties&lt;/code&gt; は、後者は唯一のクラス自身の体の中で宣言されているプロパティが含まれていながら、前者は、継承されたプロパティが含まれていることです。</target>
        </trans-unit>
        <trans-unit id="be1d1d96167f93b540a0a12cf470f65a0ef2bd8e" translate="yes" xml:space="preserve">
          <source>Appends &lt;a href=&quot;append-text#kotlin.io%24appendText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Ftext&quot;&gt;text&lt;/a&gt; to the content of this file using UTF-8 or the specified &lt;a href=&quot;append-text#kotlin.io%24appendText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Fcharset&quot;&gt;charset&lt;/a&gt;.</source>
          <target state="translated">UTF-8または指定された&lt;a href=&quot;append-text#kotlin.io%24appendText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Fcharset&quot;&gt;文字セット&lt;/a&gt;を使用して、このファイルのコンテンツに&lt;a href=&quot;append-text#kotlin.io%24appendText%28java.io.File%2C+kotlin.String%2C+java.nio.charset.Charset%29%2Ftext&quot;&gt;テキスト&lt;/a&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="8a8999496fc661ce8164ba7837b255177ad8f57f" translate="yes" xml:space="preserve">
          <source>Appends &lt;a href=&quot;appendln#kotlin.text%24appendln%28java.lang.StringBuilder%2C+java.lang.StringBuffer%29%2Fvalue&quot;&gt;value&lt;/a&gt; to this &lt;a href=&quot;../-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt;, followed by a line separator.</source>
          <target state="translated">この&lt;a href=&quot;../-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt;に&lt;a href=&quot;appendln#kotlin.text%24appendln%28java.lang.StringBuilder%2C+java.lang.StringBuffer%29%2Fvalue&quot;&gt;値&lt;/a&gt;を追加し、その後に行区切り文字を続けます。</target>
        </trans-unit>
        <trans-unit id="ea49ebc1d13f18d460ca4cebe37aae1347ded545" translate="yes" xml:space="preserve">
          <source>Appends C data to the buffer, if &lt;code&gt;data&lt;/code&gt; is null or &lt;code&gt;count&lt;/code&gt; is non-positive - return.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; がnullであるか、 &lt;code&gt;count&lt;/code&gt; が正でない場合、Cデータをバッファーに追加します-戻り値。</target>
        </trans-unit>
        <trans-unit id="2b55516111291f930c3715c0c1f29c8bb222ce89" translate="yes" xml:space="preserve">
          <source>Appends a line separator to this Appendable.</source>
          <target state="translated">このAppendableに行の区切り文字を追加します。</target>
        </trans-unit>
        <trans-unit id="9d742f5883811266416bb9aa3eeaa232f995ef67" translate="yes" xml:space="preserve">
          <source>Appends a line separator to this StringBuilder.</source>
          <target state="translated">この StringBuilder に行区切り文字を追加します。</target>
        </trans-unit>
        <trans-unit id="d0da084cc77c1451e56e3f5d303b23bc6e67a6b9" translate="yes" xml:space="preserve">
          <source>Appends a newly created element with the specified &lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Fname&quot;&gt;name&lt;/a&gt; to this element.</source>
          <target state="translated">指定された&lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Fname&quot;&gt;名前&lt;/a&gt;で新しく作成された要素をこの要素に追加します。</target>
        </trans-unit>
        <trans-unit id="4ef80311f16526889a25c8d86fb39adf1d551db6" translate="yes" xml:space="preserve">
          <source>Appends all arguments to the given &lt;a href=&quot;-appendable/index#kotlin.text.Appendable&quot;&gt;Appendable&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;-appendable/index#kotlin.text.Appendable&quot;&gt;Appendableに&lt;/a&gt;すべての引数を追加します。</target>
        </trans-unit>
        <trans-unit id="359126c5d701e3e3877471c841c71c9aabf6a96d" translate="yes" xml:space="preserve">
          <source>Appends all arguments to the given &lt;a href=&quot;../-appendable/index#kotlin.text.Appendable&quot;&gt;Appendable&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../-appendable/index#kotlin.text.Appendable&quot;&gt;Appendableに&lt;/a&gt;すべての引数を追加します。</target>
        </trans-unit>
        <trans-unit id="cfce50d79aafb040edf7d52615adc44e7cf98f7e" translate="yes" xml:space="preserve">
          <source>Appends all arguments to the given &lt;a href=&quot;index#kotlin.text.Appendable&quot;&gt;Appendable&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;index#kotlin.text.Appendable&quot;&gt;Appendableに&lt;/a&gt;すべての引数を追加します。</target>
        </trans-unit>
        <trans-unit id="dbc4346bdae3ec4bcd2ecf2a267151a69e9ebb43" translate="yes" xml:space="preserve">
          <source>Appends all arguments to the given StringBuilder.</source>
          <target state="translated">すべての引数を指定された StringBuilder に追加します。</target>
        </trans-unit>
        <trans-unit id="2483850b74b7e1a681e741e91a7d46e5b1810abb" translate="yes" xml:space="preserve">
          <source>Appends all characters matching the given &lt;a href=&quot;../../kotlin.text/filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.text/filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての文字を指定された&lt;a href=&quot;../../kotlin.text/filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="e73a835d823b3b87c4edae43c05fb29630e926b6" translate="yes" xml:space="preserve">
          <source>Appends all characters matching the given &lt;a href=&quot;../../kotlin.text/filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.text/filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての文字を指定された&lt;a href=&quot;../../kotlin.text/filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="061ac71f24c167fbb775f2df3317be21267e8ae5" translate="yes" xml:space="preserve">
          <source>Appends all characters matching the given &lt;a href=&quot;../filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての文字を指定された&lt;a href=&quot;../filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="f3d1b32551c9c986ed3ee1ab00f1ce9d0048f9f3" translate="yes" xml:space="preserve">
          <source>Appends all characters matching the given &lt;a href=&quot;../filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての文字を指定された&lt;a href=&quot;../filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="99538988a35d2c7542da53ecc2149865b6a37300" translate="yes" xml:space="preserve">
          <source>Appends all characters matching the given &lt;a href=&quot;filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての文字を指定された&lt;a href=&quot;filter-indexed-to#kotlin.text%24filterIndexedTo%28kotlin.CharSequence%2C+kotlin.text.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="d959358f8a5c3da9427841de87dd74b66ff9f18a" translate="yes" xml:space="preserve">
          <source>Appends all characters matching the given &lt;a href=&quot;filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての文字を指定された&lt;a href=&quot;filter-to#kotlin.text%24filterTo%28kotlin.CharSequence%2C+kotlin.text.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ee4f822e153e28bbf04008c1e8f074818971e3a2" translate="yes" xml:space="preserve">
          <source>Appends all characters not matching the given &lt;a href=&quot;../../kotlin.text/filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.text/filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての文字を指定された&lt;a href=&quot;../../kotlin.text/filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c0cb45deebdac2f736a830f8933f5780b57083bc" translate="yes" xml:space="preserve">
          <source>Appends all characters not matching the given &lt;a href=&quot;../filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての文字を指定された&lt;a href=&quot;../filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="692f4c7c4b1ebf87f69eda1aabc649fc62f7d70e" translate="yes" xml:space="preserve">
          <source>Appends all characters not matching the given &lt;a href=&quot;filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての文字を指定された&lt;a href=&quot;filter-not-to#kotlin.text%24filterNotTo%28kotlin.CharSequence%2C+kotlin.text.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="7e0a31e92fa58b671170533124d96adafcc98a0e" translate="yes" xml:space="preserve">
          <source>Appends all characters to the given &lt;a href=&quot;../../kotlin.text/to-collection#kotlin.text%24toCollection%28kotlin.CharSequence%2C+kotlin.text.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/to-collection#kotlin.text%24toCollection%28kotlin.CharSequence%2C+kotlin.text.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションにすべての文字を追加します。</target>
        </trans-unit>
        <trans-unit id="7d8e91b67ec39191432af7eb80306223a810cc53" translate="yes" xml:space="preserve">
          <source>Appends all characters to the given &lt;a href=&quot;../to-collection#kotlin.text%24toCollection%28kotlin.CharSequence%2C+kotlin.text.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">指定された&lt;a href=&quot;../to-collection#kotlin.text%24toCollection%28kotlin.CharSequence%2C+kotlin.text.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションにすべての文字を追加します。</target>
        </trans-unit>
        <trans-unit id="de4b266e5dfe4fb67c528f75e411bf056a6a415a" translate="yes" xml:space="preserve">
          <source>Appends all characters to the given &lt;a href=&quot;to-collection#kotlin.text%24toCollection%28kotlin.CharSequence%2C+kotlin.text.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">指定された&lt;a href=&quot;to-collection#kotlin.text%24toCollection%28kotlin.CharSequence%2C+kotlin.text.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションにすべての文字を追加します。</target>
        </trans-unit>
        <trans-unit id="f35f4e9e40ba81648303f20734742043a6a9ee99" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="83bf5ff3dbc6222fadc34a2fc006366b280cc0dd" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="18f7fa349c1506fd9281bba0591ea77f13ebf679" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b494dcfaa5301bc9c21867013729bd5f48c3117d" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.CharArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.CharArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.CharArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.CharArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4b0f83f95c07af7c07180f1759dff7fbc33897dd" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ea87aa4b7645655c5c0aaa2d256a5724df96a428" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="7e467d0ed843bc7e6acde27ac322a1a06238f00d" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.IntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.IntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.IntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.IntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="fd3fb15c4013561275dafd10f9abcb3c6f49a982" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.LongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.LongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.LongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.LongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="6608086f69aec62af8b4dbf37d37ba6c8a32a41e" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="e0c9ae86d0b8b65c5863732f2a2a33e211fc693f" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a1c89237d9e35c250951494ee496e0c805a06885" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8ca1f534cc88f1098dee7385ff7c470a0938f776" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8a54d47c4ba42d150763f32971d8f7ccc4c1744f" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3f993054dc6fc6045a74603b2a0216ca8e013258" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8f617a11d4a46191ea1082b1fbdcff5c2cebd358" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c848bb30a78bc0e173bbf4163f56a4d4b60e5826" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.BooleanArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.BooleanArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.BooleanArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.BooleanArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="dc25f58e1274c7e5b6679c4ce475afa0e1d9c5be" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8c165accaea6d2e7fbd31df8fb3ec4296546b7aa" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.CharArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.CharArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.CharArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.CharArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="36964fd9d53e4f87368d16fe1a670f758b1552d4" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.DoubleArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.DoubleArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.DoubleArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.DoubleArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8780b74ca5bf514f5209e8eae9e079d5dac5cc4a" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.FloatArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.FloatArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.FloatArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.FloatArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="44aa08926f103a8a9b7530b7c9b053e07ab14721" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.IntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.IntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.IntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.IntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4037cacebcb6a2ed1a0adda496d92e48ed41736c" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.LongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.LongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.LongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.LongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="408071ef40108269dcb59d789e0687d53e59b99a" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ba1e79a2eb478c151f44566e18a1d75cc14b6f40" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UByteArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="92605a9254bb056b3dd3ecbcc55c94d06918d02e" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UIntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UIntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UIntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UIntArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="fa2325a02c72944057a74046955242895fbd689f" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ULongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ULongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ULongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.ULongArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="eeedf095da41ed24f5484a2df8a4a3b170773032" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.UShortArray%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4365b1a4cf0775ce0ba93b6e2154c72fb322cb12" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="65ecceef9db6fde4773de8745d44a17fea62e414" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="639b2d84c52e1a9377dac18cbca0a7e80e5558a2" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8d4a35662237bac7a8a762ce756664251b73ee82" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="550ea97f22e47bc7e454d8af5eee727e155e4f6e" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;../filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;../filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="abdfe825773a4c4bab1f4c5221bac69555718d20" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;filter-indexed-to#kotlin.collections%24filterIndexedTo%28kotlin.Array%28%28kotlin.collections.filterIndexedTo.T%29%29%2C+kotlin.collections.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="50927e18ab1cbb8439df8828830aa77865bdf300" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;filter-indexed-to#kotlin.sequences%24filterIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterIndexedTo.T%29%29%2C+kotlin.sequences.filterIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.filterIndexedTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="adf3349735fabec35a43ad0f5e23053ea97ed550" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.Array%28%28kotlin.collections.filterTo.T%29%29%2C+kotlin.collections.filterTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="76fdd32dcffc7effab6d5336c85a5fcb30b537b2" translate="yes" xml:space="preserve">
          <source>Appends all elements matching the given &lt;a href=&quot;filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべての要素を指定された&lt;a href=&quot;filter-to#kotlin.sequences%24filterTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterTo.T%29%29%2C+kotlin.sequences.filterTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="33d3d88bc150a06aaeb02df66a6e6a1080bb1701" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ee8ffc8e2a62ba4e5625a32e6c94a96876615e20" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.BooleanArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.BooleanArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.BooleanArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.BooleanArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="6ecf2bc22f34016a4ae04a3359ec63ce677ba317" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="671743fe97a266bc45818fc5134cc84acdf0aef8" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.CharArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.CharArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.CharArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.CharArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="7a559b14eaaa1e10a92ac0eeee13150dfc2662f1" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.DoubleArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.DoubleArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.DoubleArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.DoubleArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="08c2e2d621eb1f0bca7afe521094e68e820558e2" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.FloatArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.FloatArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.FloatArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.FloatArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="750d6f1af221380f4399adb7457047d60ad69f9c" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.IntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.IntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.IntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.IntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8e89df8e6b7bcc01b0029925119e118ede719361" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.LongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.LongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.LongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.LongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="664ba6b2cb13d145f94af75a36038d451e61570c" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="00556cc8141ebce66fb29e1ddfa2a017a24d2557" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UByteArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="f2e1f423f0f12921b40a2bc07f8dcb170be355b1" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UIntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UIntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UIntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UIntArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8d2322a5b4d9a7a44808565b1ba4460133d34b4d" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ULongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ULongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ULongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.ULongArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="209fea6138bbf5e19e5c30e6fc22fafa75f92503" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.UShortArray%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5efd81c92556447c97f389bae3d5242095fec81a" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b5aa417eb699f87d4f190bd2eaa909b5800f6294" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="9c2da7b1f2b70ffd3d46859fe2d69e51e64c29f2" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;../filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;../filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;../filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="516db9b04dfc9b6027d1a7932c8c246a02690021" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.Array%28%28kotlin.collections.filterNotTo.T%29%29%2C+kotlin.collections.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.collections.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3996d639dc76b48905e2e71d5251e79cff06f21d" translate="yes" xml:space="preserve">
          <source>Appends all elements not matching the given &lt;a href=&quot;filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; to the given &lt;a href=&quot;filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべての要素を指定された&lt;a href=&quot;filter-not-to#kotlin.sequences%24filterNotTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotTo.T%29%29%2C+kotlin.sequences.filterNotTo.C%2C+kotlin.Function1%28%28kotlin.sequences.filterNotTo.T%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="09557260d60d4c2a30241c95b205ce4b1f377366" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="f4672b6232f15a488f49af9fe3c19afa522a6053" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="fee012a7594433c8d840c83af54f17e2e4f9446a" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;../../kotlin.sequences/filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.sequences.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../../kotlin.sequences/filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.sequences.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b6ef4effff7ba696a22deb39adb091bccef3f52d" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;../filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="1395eb50f2e91c5d8b3cd7198784ef73a4da488f" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;../filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.sequences.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.sequences.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b4c1e20ca345bbc4c9ed21d0b3c08c305d629a76" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.collections.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="2532d2a71277249fa4f7a701f56c541698c94540" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified class to the given &lt;a href=&quot;filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.sequences.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定されたクラスのインスタンスであるすべての要素を、指定された&lt;a href=&quot;filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%2C+java.lang.Class%28%28kotlin.sequences.filterIsInstanceTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="08055063e51c7257cae907a9efc01f5399ce0956" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified type parameter R to the given &lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された型パラメーターRのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b1f74cf6044553ad4ae8567422b09a3ae7096f74" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified type parameter R to the given &lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された型パラメーターRのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="37092298da0a081ea563bdbc9697419c02b008d9" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified type parameter R to the given &lt;a href=&quot;../filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された型パラメーターRのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.collections.Iterable%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4a564561ef1398e9c5016b61b0ad3328f10bfb26" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified type parameter R to the given &lt;a href=&quot;../filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された型パラメーターRのインスタンスであるすべての要素を、指定された&lt;a href=&quot;../filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="d21fea10665c26f37cde8c56aa74e0e3f3f543fc" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified type parameter R to the given &lt;a href=&quot;filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された型パラメーターRのインスタンスであるすべての要素を、指定された&lt;a href=&quot;filter-is-instance-to#kotlin.collections%24filterIsInstanceTo%28kotlin.Array%28%28kotlin.Any%29%29%2C+kotlin.collections.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a4abbdf5df8b7ffdfaffb5f6c22fc5974cef0fe5" translate="yes" xml:space="preserve">
          <source>Appends all elements that are instances of specified type parameter R to the given &lt;a href=&quot;filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された型パラメーターRのインスタンスであるすべての要素を、指定された&lt;a href=&quot;filter-is-instance-to#kotlin.sequences%24filterIsInstanceTo%28kotlin.sequences.Sequence%28%28kotlin.Any%29%29%2C+kotlin.sequences.filterIsInstanceTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="bf4be7854ddaab18e4a7b9abbbef44339101771e" translate="yes" xml:space="preserve">
          <source>Appends all elements that are not &lt;code&gt;null&lt;/code&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.Array%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.Array%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a27c25e372e6697c8e68f2e6af4f2b634276c6d1" translate="yes" xml:space="preserve">
          <source>Appends all elements that are not &lt;code&gt;null&lt;/code&gt; to the given &lt;a href=&quot;../../kotlin.collections/filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でないすべての要素を指定された&lt;a href=&quot;../../kotlin.collections/filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="08e54f871bf3d9aea9093f74303278d57b1e48e2" translate="yes" xml:space="preserve">
          <source>Appends all elements that are not &lt;code&gt;null&lt;/code&gt; to the given &lt;a href=&quot;../filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でないすべての要素を指定された&lt;a href=&quot;../filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="0dc1a6cbe3c17c106bcfeb3e00c1e4cbd39f927e" translate="yes" xml:space="preserve">
          <source>Appends all elements that are not &lt;code&gt;null&lt;/code&gt; to the given &lt;a href=&quot;../filter-not-null-to#kotlin.sequences%24filterNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotNullTo.T%29%29%2C+kotlin.sequences.filterNotNullTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でないすべての要素を指定された&lt;a href=&quot;../filter-not-null-to#kotlin.sequences%24filterNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotNullTo.T%29%29%2C+kotlin.sequences.filterNotNullTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="42789fba7bd6c2e95b73910218ea4f39aa433639" translate="yes" xml:space="preserve">
          <source>Appends all elements that are not &lt;code&gt;null&lt;/code&gt; to the given &lt;a href=&quot;filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.Array%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でないすべての要素を指定された&lt;a href=&quot;filter-not-null-to#kotlin.collections%24filterNotNullTo%28kotlin.Array%28%28kotlin.collections.filterNotNullTo.T%29%29%2C+kotlin.collections.filterNotNullTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c111631abfb6b1cbae4106472a9267f1cde538f9" translate="yes" xml:space="preserve">
          <source>Appends all elements that are not &lt;code&gt;null&lt;/code&gt; to the given &lt;a href=&quot;filter-not-null-to#kotlin.sequences%24filterNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotNullTo.T%29%29%2C+kotlin.sequences.filterNotNullTo.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でないすべての要素を指定された&lt;a href=&quot;filter-not-null-to#kotlin.sequences%24filterNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.filterNotNullTo.T%29%29%2C+kotlin.sequences.filterNotNullTo.C%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="48e5c99241bc30d74598f17eaefdbfcbe3843bc9" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.Array%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.Array%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="b4b107012c0580758973a6a8a722bc86dce61314" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.BooleanArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.BooleanArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="0cb64da2371f09463bbce4e68b7eee028913bd2c" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.ByteArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.ByteArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="82c04bcc9c323b4c00bc533609ce41cb3636311d" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.CharArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.CharArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="0d6de4f14173b6737cbe450cf2b7d1bcb899758a" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.DoubleArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.DoubleArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="129c00f945942eb8f0479dd1baecbba789df57e4" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.FloatArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.FloatArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="d79d3c5013e95f726a580c6f452b009cf8ecce07" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.IntArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.IntArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="20763ca93f3685507099c58b3cc886ee08756dc4" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.LongArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.LongArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="c034c648dcaa175f9fd316f5bb25bb07ba8d0d07" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.ShortArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.ShortArray%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="fbe08b1d5b2da2174a5cff071ce731d5a819b9d1" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.collections.Iterable%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../../kotlin.collections/to-collection#kotlin.collections%24toCollection%28kotlin.collections.Iterable%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="ffd531efcc5cdf01eee9116193ced2d198cfd311" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../to-collection#kotlin.collections%24toCollection%28kotlin.collections.Iterable%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../to-collection#kotlin.collections%24toCollection%28kotlin.collections.Iterable%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="95cbb17930b68257b5031579b5fd4bc5b8bda647" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;../to-collection#kotlin.sequences%24toCollection%28kotlin.sequences.Sequence%28%28kotlin.sequences.toCollection.T%29%29%2C+kotlin.sequences.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;../to-collection#kotlin.sequences%24toCollection%28kotlin.sequences.Sequence%28%28kotlin.sequences.toCollection.T%29%29%2C+kotlin.sequences.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="70d77564e2fee768a5e6f71d23fdbe3f95899b72" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;to-collection#kotlin.collections%24toCollection%28kotlin.Array%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;to-collection#kotlin.collections%24toCollection%28kotlin.Array%28%28kotlin.collections.toCollection.T%29%29%2C+kotlin.collections.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="839720955bb4caf84b31ce3b55f97ce14816879b" translate="yes" xml:space="preserve">
          <source>Appends all elements to the given &lt;a href=&quot;to-collection#kotlin.sequences%24toCollection%28kotlin.sequences.Sequence%28%28kotlin.sequences.toCollection.T%29%29%2C+kotlin.sequences.toCollection.C%29%2Fdestination&quot;&gt;destination&lt;/a&gt; collection.</source>
          <target state="translated">すべての要素を指定された&lt;a href=&quot;to-collection#kotlin.sequences%24toCollection%28kotlin.sequences.Sequence%28%28kotlin.sequences.toCollection.T%29%29%2C+kotlin.sequences.toCollection.C%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;コレクションに追加します。</target>
        </trans-unit>
        <trans-unit id="0298511a5ccb55f6520198aa2289a564bd805f7b" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="cef187ba29b1167ca92e1779e8fe743320fc1976" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.BooleanArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.BooleanArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.BooleanArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.BooleanArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b2e1418d6351289bcd4374522d92e33d48ffa075" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="404e0898b5eb46cc1de371a780f517e5e0b1671d" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.CharArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.CharArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.CharArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.CharArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="916436db9bffe8fe73d58f9c95db15c43949deea" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.DoubleArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.DoubleArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.DoubleArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.DoubleArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="fe954cdfd75a2ea7d3a8751ef5af3753e0da27ad" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.FloatArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.FloatArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.FloatArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.FloatArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3a23b36ba485ca4495f1075609ef719e219e9923" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.IntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.IntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.IntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.IntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="62c9acc5b8930e171ec48aff5de26e8dbd4a7ae1" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.LongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.LongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.LongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.LongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="18ddf5ed4c00b912056950f612fb89f603ae05dc" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ae333e5fae855e5e34b9c89406ab39e3c5acc04f" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UByteArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="eaf1469e4ca32464be6c6dda1feca3b5aac23719" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UIntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UIntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UIntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UIntArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="dc134a814cec5421d2079f19f81d8a8cc45df2e0" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ULongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ULongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ULongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.ULongArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="30043ce8e67ba0b34fb523d6e0e545635d497889" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.UShortArray%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="24930c6bdd5a96233560e6c66dba3a96552a2d35" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original collection, to the given &lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のコレクションの各要素で呼び出された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.collections/flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="077c2c4c47c508f7783dfa37eb858bb52ea05576" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../../kotlin.text/flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each character of original char sequence, to the given &lt;a href=&quot;../../kotlin.text/flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のcharシーケンスの各文字で呼び出された&lt;a href=&quot;../../kotlin.text/flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../../kotlin.text/flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destinationに&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="086ac6f574446ec51d2abca1928a189f32a0fe7b" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original collection, to the given &lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のコレクションの各要素で呼び出された&lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3b7066e5a15bb29732a8e3bf9161a5877b28d0ac" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each entry of original map, to the given &lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のマップの各エントリで呼び出された&lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="19fea8da74cd7850370aaf5e73810cb5a34b4435" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original sequence, to the given &lt;a href=&quot;../flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のシーケンスの各要素で呼び出された&lt;a href=&quot;../flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4364eeef2d8ff9d87ed6fd870c5899d9904a8a98" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;../flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each character of original char sequence, to the given &lt;a href=&quot;../flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のcharシーケンスの各文字で呼び出された&lt;a href=&quot;../flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;../flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destinationに&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="34a1b2e1fc9ece24363dd1d4ee5dcaf761abeae0" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original array, to the given &lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元の配列の各要素で呼び出された&lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.Array%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="82a3ad58736f7efc48b68ddcd233fd61e646664c" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original collection, to the given &lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のコレクションの各要素で呼び出された&lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.T%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.flatMapTo.T%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="334c58b37dd1adab74b3b98da48301d4d6c06de3" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each entry of original map, to the given &lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のマップの各エントリで呼び出された&lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;flat-map-to#kotlin.collections%24flatMapTo%28kotlin.collections.Map%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.flatMapTo.K%2C+kotlin.collections.flatMapTo.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="7ebbe2f34b6ab656aedb0c18fc7de8062708fb08" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each element of original sequence, to the given &lt;a href=&quot;flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のシーケンスの各要素で呼び出された&lt;a href=&quot;flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;flat-map-to#kotlin.sequences%24flatMapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.T%29%29%2C+kotlin.sequences.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.flatMapTo.T%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4e04b6862c91470c89a3f5cc594a1f5d4f53be2d" translate="yes" xml:space="preserve">
          <source>Appends all elements yielded from results of &lt;a href=&quot;flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function being invoked on each character of original char sequence, to the given &lt;a href=&quot;flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">元のcharシーケンスの各文字で呼び出された&lt;a href=&quot;flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数の結果から生成されたすべての要素を、指定された&lt;a href=&quot;flat-map-to#kotlin.text%24flatMapTo%28kotlin.CharSequence%2C+kotlin.text.flatMapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.Iterable%28%28kotlin.text.flatMapTo.R%29%29%29%29%29%2Fdestination&quot;&gt;destinationに&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="47a18760629014ab8df8f6d1f41b80d229e3bd04" translate="yes" xml:space="preserve">
          <source>Appends all entries matching the given &lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; into the mutable map given as &lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; parameter.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべてのエントリを、&lt;a href=&quot;../filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;パラメータとして指定された変更可能なマップに追加します。</target>
        </trans-unit>
        <trans-unit id="ea7b49dfb357fd6cd6b3c79cefbeabab8cc1eb70" translate="yes" xml:space="preserve">
          <source>Appends all entries matching the given &lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; into the mutable map given as &lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; parameter.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致するすべてのエントリを、&lt;a href=&quot;filter-to#kotlin.collections%24filterTo%28kotlin.collections.Map%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.collections.filterTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterTo.K%2C+kotlin.collections.filterTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;パラメータとして指定された変更可能なマップに追加します。</target>
        </trans-unit>
        <trans-unit id="69b7c707b90352aa1014e7282b107d6b52c9fdc5" translate="yes" xml:space="preserve">
          <source>Appends all entries not matching the given &lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; into the given &lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべてのエントリを指定された&lt;a href=&quot;../filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a41abea790adbb3960d3673e75fb67742812fae3" translate="yes" xml:space="preserve">
          <source>Appends all entries not matching the given &lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;predicate&lt;/a&gt; into the given &lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fpredicate&quot;&gt;述語&lt;/a&gt;に一致しないすべてのエントリを指定された&lt;a href=&quot;filter-not-to#kotlin.collections%24filterNotTo%28kotlin.collections.Map%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.collections.filterNotTo.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.filterNotTo.K%2C+kotlin.collections.filterNotTo.V%29%29%2C+kotlin.Boolean%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c0600a5cdd5128ef724397ae14e5e70864691753" translate="yes" xml:space="preserve">
          <source>Appends an &lt;a href=&quot;append-bytes#kotlin.io%24appendBytes%28java.io.File%2C+kotlin.ByteArray%29%2Farray&quot;&gt;array&lt;/a&gt; of bytes to the content of this file.</source>
          <target state="translated">このファイルのコンテンツにバイトの&lt;a href=&quot;append-bytes#kotlin.io%24appendBytes%28java.io.File%2C+kotlin.ByteArray%29%2Farray&quot;&gt;配列&lt;/a&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="a5825a60d45d5528dbee970879c7e90f5737809b" translate="yes" xml:space="preserve">
          <source>Appends byte array to the buffer.</source>
          <target state="translated">バッファにバイト配列を追加します。</target>
        </trans-unit>
        <trans-unit id="68c85bb1e250ebbe2bb20296a5058fa2ce136c71" translate="yes" xml:space="preserve">
          <source>Appends data to the buffer.</source>
          <target state="translated">バッファにデータを追加します。</target>
        </trans-unit>
        <trans-unit id="86764067285b2bab42945e0b6e07277bc55ac8d8" translate="yes" xml:space="preserve">
          <source>Appends or replaces all entries from the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Map%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fmap&quot;&gt;map&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Map%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fmap&quot;&gt;マップの&lt;/a&gt;すべてのエントリを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="85f61ab2e1e8d9936a1b1efe49fcae4a72a807cd" translate="yes" xml:space="preserve">
          <source>Appends or replaces all entries from the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Map%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fmap&quot;&gt;map&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Map%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fmap&quot;&gt;マップの&lt;/a&gt;すべてのエントリを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="6364e79c6791b5ade93c1a419d562d66a26cb1ac" translate="yes" xml:space="preserve">
          <source>Appends or replaces all pairs from the given array of &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Array%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;pairs&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Array%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;ペアの&lt;/a&gt;配列からすべてのペアを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="1052c9025237b020bbb364d4c31bbb4e08d0df44" translate="yes" xml:space="preserve">
          <source>Appends or replaces all pairs from the given array of &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Array%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;pairs&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Array%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;ペアの&lt;/a&gt;配列からすべてのペアを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="bf890795eabbe3e0b0479a639fa5873222b7c71c" translate="yes" xml:space="preserve">
          <source>Appends or replaces all pairs from the given collection of &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;pairs&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;ペアの&lt;/a&gt;コレクションのすべてのペアを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="e1b5e8e7aa6a2b02a03919d4cbb403745ec4de85" translate="yes" xml:space="preserve">
          <source>Appends or replaces all pairs from the given collection of &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;pairs&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.collections.Iterable%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;ペアの&lt;/a&gt;コレクションのすべてのペアを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="d3158a6616684d004dd78269620a1ad169525fae" translate="yes" xml:space="preserve">
          <source>Appends or replaces all pairs from the given sequence of &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;pairs&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;ペアの&lt;/a&gt;シーケンスのすべてのペアを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="f7f8a9743280b89b8cdf8ce1e3d69525fcb3527d" translate="yes" xml:space="preserve">
          <source>Appends or replaces all pairs from the given sequence of &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;pairs&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%29%29%2Fpairs&quot;&gt;ペアの&lt;/a&gt;シーケンスのすべてのペアを追加または置換します。</target>
        </trans-unit>
        <trans-unit id="a315d89520f58fa6efbc5a196bc01d52d1431994" translate="yes" xml:space="preserve">
          <source>Appends or replaces the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fpair&quot;&gt;pair&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fpair&quot;&gt;ペアを&lt;/a&gt;追加または置換します。</target>
        </trans-unit>
        <trans-unit id="84c64649e67d9004739b406a3ffc7fe74520ad24" translate="yes" xml:space="preserve">
          <source>Appends or replaces the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fpair&quot;&gt;pair&lt;/a&gt; in this mutable map.</source>
          <target state="translated">この可変マップ内の指定された&lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableMap%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%2C+kotlin.Pair%28%28kotlin.collections.plusAssign.K%2C+kotlin.collections.plusAssign.V%29%29%29%2Fpair&quot;&gt;ペアを&lt;/a&gt;追加または置換します。</target>
        </trans-unit>
        <trans-unit id="1b151b75944b810e99424331028fbe7ea0525413" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="26f434f723c42d16f2c4a78a70ffad2ebd38f7ed" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.BooleanArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.BooleanArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.BooleanArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.BooleanArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.BooleanArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.BooleanArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="a147c915e33a5bd8b9b03c68f91417ecd9ebe1da" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ByteArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ByteArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ByteArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ByteArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ByteArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ByteArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="b9784808a9f300ad1d11133dc24a432ce94bfc06" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.CharArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.CharArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.CharArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.CharArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.CharArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.CharArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="518f07fb24e6da2a48e3f75b4d839eedc496cfb5" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.DoubleArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.DoubleArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.DoubleArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.DoubleArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.DoubleArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.DoubleArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="37585ed203cea823d1f1bf376a3c0a3ef2e6df1e" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.FloatArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.FloatArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.FloatArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.FloatArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.FloatArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.FloatArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="b669ab619b1f9f1ffbcf7735df8034b7ec6c2d4b" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.IntArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.IntArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.IntArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.IntArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.IntArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.IntArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="3fcf0d25e40642fa7074c4f846f480763e77bb25" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.LongArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.LongArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.LongArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.LongArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.LongArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.LongArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="b3da2ee1311194b8685d08d5b59bcd9fea71b397" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ShortArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ShortArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ShortArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ShortArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ShortArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.ShortArray%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="15919a497bc1753be5a8e8141427dbea4ba0c559" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../../kotlin.collections/join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="7c9d437d0c0137e484b18845d8b178a0187a1d68" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../join-to#kotlin.collections%24joinTo%28kotlin.collections.Iterable%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="212cc9091b8114bf968380981067615e094c2b05" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;../join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;../join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;../join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;../join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;../join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="4497025b1799108958d93190dc0fb2aad4a1e64f" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="376bd50f2fd1eb46efd24a7abcf17fb609744958" translate="yes" xml:space="preserve">
          <source>Appends the string from all the elements separated using &lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;separator&lt;/a&gt; and using the given &lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;postfix&lt;/a&gt; if supplied.</source>
          <target state="translated">&lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fseparator&quot;&gt;セパレーター&lt;/a&gt;を使用して、指定された&lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;と&lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Fpostfix&quot;&gt;ポストフィックス&lt;/a&gt;を使用して区切られたすべての要素から文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="89df82d0293db69c41ae864ae4b3c56ae569ba34" translate="yes" xml:space="preserve">
          <source>Appends value to the given Appendable and line separator after it.</source>
          <target state="translated">与えられたAppendableに値を追加し、その後に行区切り文字を追加します。</target>
        </trans-unit>
        <trans-unit id="31fb45c1d0c4f0b6072721e59eb6ed2b36ee7bbf" translate="yes" xml:space="preserve">
          <source>Apple framework</source>
          <target state="translated">アップルフレームワーク</target>
        </trans-unit>
        <trans-unit id="21761148fff05c2cdeac69e8bc247c6416436bc7" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends only the non-null results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3f5008b51a5e99e92e294b70b3bbf1b32125de9a" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original collection and appends only the non-null results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="aff0e6b8ceab1c1c0199c32be90c3eecc703ffc5" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4e1ef3f976be5a44b8cb6dd6458d59c9ca69faa0" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.BooleanArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="215ea1c5ee1630276febddf0c8b64950d867c841" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8308f24a45b593e080ed76d6303bd2db3ab5345c" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.CharArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.CharArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.CharArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.CharArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5d651dbba907a6ac295ff9c3de3bf88c8bda8469" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.DoubleArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="9eba1becd6c22a1bf92fe20d7dd56e5d79747988" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.FloatArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="2684d2251197c8d186d1aeb62db7f9bf484b6d75" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.IntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.IntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.IntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.IntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5d08bac37404256ad6743d2c34655ef974141f4f" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.LongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.LongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.LongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.LongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4a0b11edc533527f26cce5f83c395063076aaa1c" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="129d6a9b413f63e2ccaed4bb2c45fecb48b6e1e9" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UByteArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="e1c35798d7c1b477ae63fb3983b8587dec5210c2" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UIntArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="d02edf77eeddc9c0806eb514f2ead9017c114843" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.ULongArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="36f93f80ea10c1f7526639b4d8ebcf6145e34d63" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.UShortArray%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ffc827657a136479bba0ca18b43b178aa15dd787" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original collection and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="013ea05e8c734e8cf1c10879d4b33a971c54958b" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original array and appends only the non-null results to the given &lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ac6b48acaabafc2968df6f42b1c342e289f5e592" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original collection and appends only the non-null results to the given &lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;../../kotlin.collections/map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="2bd49f2d84614b6f5be3662b9a2b4df7e54d19d2" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ca55928580872f1d180eb8b785bffeae995aeb9a" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.BooleanArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.BooleanArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.BooleanArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.BooleanArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="34639b161fccc9a47ec47eb5000aed1889ee4f15" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="96231ac7b3d96ad8edd53214a92729cf957703d3" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.CharArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.CharArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.CharArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.CharArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="47f6c664e9cf6dbec26aed5b12931e942e7fb0e2" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.DoubleArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.DoubleArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.DoubleArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.DoubleArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8c376682082662ea6ef6c15b71f5810b22f49571" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.FloatArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.FloatArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.FloatArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.FloatArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="06323cde4027b2d512921e8a660c50fe795ad525" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.IntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.IntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.IntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.IntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="66e9cf2c243c55ddc550bdd0c8da525003a16354" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.LongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.LongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.LongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.LongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a3b95bda83cce3c09ecabb8795bb60aabd285a2c" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5fccfc0396e20d5bd78faa0fca19eeb6da6a6b53" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UByteArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5aebfd1d226b33213475664233929105b7bb61cc" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UIntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UIntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UIntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UIntArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5af7a8df437c8c61f5a278f01a7c866268ab66a5" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ULongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ULongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ULongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.ULongArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b5993db7e4de4013722222dc4373b66b991e18e9" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.UShortArray%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="bdbe5432b2aad3c425fde332df3a8ec155f8a8bd" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original collection and appends the results to the given &lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素に適用し、結果を指定された&lt;a href=&quot;../../kotlin.collections/map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="6255c3387673b69d5e270da123837680ab35861e" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.text/map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character and its index in the original char sequence and appends only the non-null results to the given &lt;a href=&quot;../../kotlin.text/map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;../../kotlin.text/map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c31af51a2e540683127694ba3ac0bd6b639ac181" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.text/map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character and its index in the original char sequence and appends the results to the given &lt;a href=&quot;../../kotlin.text/map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../../kotlin.text/map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="233de549756b5e95c58559157342252b4c6126e8" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.text/map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character in the original char sequence and appends only the non-null results to the given &lt;a href=&quot;../../kotlin.text/map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のcharシーケンスの各文字に適用し、null以外の結果のみを指定された&lt;a href=&quot;../../kotlin.text/map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destinationに&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="44d2ed0539b8d9a181ad6f52ac3373b267fdf27e" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../../kotlin.text/map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character of the original char sequence and appends the results to the given &lt;a href=&quot;../../kotlin.text/map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../kotlin.text/map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字に適用し、結果を指定された&lt;a href=&quot;../../kotlin.text/map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a00b2ccde1fe9a5715362d9d57858472aeb05aa4" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original collection and appends only the non-null results to the given &lt;a href=&quot;../map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="57f22745b280377faa6311ffee5532c2d1df8a90" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original sequence and appends only the non-null results to the given &lt;a href=&quot;../map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="cb24d476abd4b3536ceea3a6d031d8bf49463f5a" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character and its index in the original char sequence and appends only the non-null results to the given &lt;a href=&quot;../map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8503179f2efdc755d38f0159d827d9d325149c06" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original collection and appends the results to the given &lt;a href=&quot;../map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="11a941796ae9ea31f42984ff7c62f462133e9e66" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original sequence and appends the results to the given &lt;a href=&quot;../map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="81220b6b25ebed6448ab28b421982abdfc4bfd2b" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character and its index in the original char sequence and appends the results to the given &lt;a href=&quot;../map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字とそのインデックスに適用し、結果を指定された&lt;a href=&quot;../map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="26eca79960f56921431f9050ec97049368a2f992" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original collection and appends only the non-null results to the given &lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="d796ead9e8ea2932d8cffcf6a9b5b5f887d92a3a" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each entry in the original map and appends only the non-null results to the given &lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のマップの各エントリに適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="33b6d6d6e73cd060e5431dd45e6f3a0b34984111" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original sequence and appends only the non-null results to the given &lt;a href=&quot;../map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="0af47dfe629a4e5312c24c0ef0acd01694a47ff0" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character in the original char sequence and appends only the non-null results to the given &lt;a href=&quot;../map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のcharシーケンスの各文字に適用し、null以外の結果のみを指定された&lt;a href=&quot;../map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destinationに&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="2cf3d7c9d792e6553f35317b6241dea4de53a4bf" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original collection and appends the results to the given &lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素に適用し、結果を指定された&lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3de5f9596ff3f2d3e5a228a115c58ec37dd0432f" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each entry of the original map and appends the results to the given &lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のマップの各エントリに適用し、結果を指定された&lt;a href=&quot;../map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="a01f81e5864089e6ab8212d646d806652f1150ff" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original sequence and appends the results to the given &lt;a href=&quot;../map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素に適用し、結果を指定された&lt;a href=&quot;../map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4bb6f33c6522f8d6759c2f58bd3a6b494f7f87a7" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;../map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character of the original char sequence and appends the results to the given &lt;a href=&quot;../map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字に適用し、結果を指定された&lt;a href=&quot;../map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="9b44f82adc04a584ca4f1c72500785fb53138f63" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends only the non-null results to the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.Array%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="62351ca8ae23b51c0152579d728f3ddb99875211" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original collection and appends only the non-null results to the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.collections%24mapIndexedNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedNotNullTo.T%29%29%2C+kotlin.collections.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedNotNullTo.T%2C+kotlin.collections.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="df1dccc7ee87fe7e0f96acc56c283617c2bf91a0" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original sequence and appends only the non-null results to the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.sequences%24mapIndexedNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedNotNullTo.T%29%29%2C+kotlin.sequences.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedNotNullTo.T%2C+kotlin.sequences.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="83506b5fdd4dc6435330c7129e55221cacc345b3" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character and its index in the original char sequence and appends only the non-null results to the given &lt;a href=&quot;map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字とそのインデックスに適用し、null以外の結果のみを指定された&lt;a href=&quot;map-indexed-not-null-to#kotlin.text%24mapIndexedNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedNotNullTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="3c76a9539200b096b7e3cb68053cc19426e8b8b9" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original array and appends the results to the given &lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.Array%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="8e24e52dff4f6c0e7d26083030211abfce314737" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original collection and appends the results to the given &lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;map-indexed-to#kotlin.collections%24mapIndexedTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapIndexedTo.T%29%29%2C+kotlin.collections.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.mapIndexedTo.T%2C+kotlin.collections.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ee376f0828b5b52f45720958c1bbe45a15e649d8" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element and its index in the original sequence and appends the results to the given &lt;a href=&quot;map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素とそのインデックスに適用し、結果を指定された&lt;a href=&quot;map-indexed-to#kotlin.sequences%24mapIndexedTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapIndexedTo.T%29%29%2C+kotlin.sequences.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.mapIndexedTo.T%2C+kotlin.sequences.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="38a28f0f5b0d9fb8b0fb67b76784212a48095630" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character and its index in the original char sequence and appends the results to the given &lt;a href=&quot;map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字とそのインデックスに適用し、結果を指定された&lt;a href=&quot;map-indexed-to#kotlin.text%24mapIndexedTo%28kotlin.CharSequence%2C+kotlin.text.mapIndexedTo.C%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.mapIndexedTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="5d7c6700d1d7dbb3fc0b329c2dd7c59bb33850b6" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original array and appends only the non-null results to the given &lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.Array%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c8ab1a2c73e278cbc108dfb41891b4adc401f319" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original collection and appends only the non-null results to the given &lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapNotNullTo.T%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapNotNullTo.T%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="dccb5a2458e548be47293f32b9f9a3ccec0f0d75" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each entry in the original map and appends only the non-null results to the given &lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のマップの各エントリに適用し、null以外の結果のみを指定された&lt;a href=&quot;map-not-null-to#kotlin.collections%24mapNotNullTo%28kotlin.collections.Map%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapNotNullTo.K%2C+kotlin.collections.mapNotNullTo.V%29%29%2C+kotlin.collections.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="29943684ea642a1fe1542b2e988ca6eecde77c77" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element in the original sequence and appends only the non-null results to the given &lt;a href=&quot;map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素に適用し、null以外の結果のみを指定された&lt;a href=&quot;map-not-null-to#kotlin.sequences%24mapNotNullTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapNotNullTo.T%29%29%2C+kotlin.sequences.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapNotNullTo.T%2C+kotlin.sequences.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="b3bd8b151e467a80d182e883b5ca298ecfb49d04" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character in the original char sequence and appends only the non-null results to the given &lt;a href=&quot;map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のcharシーケンスの各文字に適用し、null以外の結果のみを指定された&lt;a href=&quot;map-not-null-to#kotlin.text%24mapNotNullTo%28kotlin.CharSequence%2C+kotlin.text.mapNotNullTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapNotNullTo.R%29%29%29%2Fdestination&quot;&gt;destinationに&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="55bc5a0422f13782e3c24f10bf6983fe771e2340" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original array and appends the results to the given &lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の配列の各要素に適用し、結果を指定された&lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.Array%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="937b52e3998366a29a4c3ccfee28eee22486b19c" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original collection and appends the results to the given &lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のコレクションの各要素に適用し、結果を指定された&lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Iterable%28%28kotlin.collections.mapTo.T%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.mapTo.T%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ce01688561be37d44fc55a09c7b9a32f94edd96f" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each entry of the original map and appends the results to the given &lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のマップの各エントリに適用し、結果を指定された&lt;a href=&quot;map-to#kotlin.collections%24mapTo%28kotlin.collections.Map%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.C%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.mapTo.K%2C+kotlin.collections.mapTo.V%29%29%2C+kotlin.collections.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4e3e17d2cb3a0440d4b3175c719bf696a0ddc686" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each element of the original sequence and appends the results to the given &lt;a href=&quot;map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元のシーケンスの各要素に適用し、結果を指定された&lt;a href=&quot;map-to#kotlin.sequences%24mapTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.mapTo.T%29%29%2C+kotlin.sequences.mapTo.C%2C+kotlin.Function1%28%28kotlin.sequences.mapTo.T%2C+kotlin.sequences.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="83eecf4afdfa9cf2645b7fa94b344fd175ac487d" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;a href=&quot;map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function to each character of the original char sequence and appends the results to the given &lt;a href=&quot;map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数を元の文字シーケンスの各文字に適用し、結果を指定された&lt;a href=&quot;map-to#kotlin.text%24mapTo%28kotlin.CharSequence%2C+kotlin.text.mapTo.C%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.mapTo.R%29%29%29%2Fdestination&quot;&gt;宛先に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ccfdf093d87bb362d732c6beca860e4a5556113d" translate="yes" xml:space="preserve">
          <source>Apply the &lt;code&gt;kotlin-kapt&lt;/code&gt; Gradle plugin:</source>
          <target state="translated">&lt;code&gt;kotlin-kapt&lt;/code&gt; Gradleプラグインを適用します。</target>
        </trans-unit>
        <trans-unit id="ef430ab86a010bddfe6db457881507fac5f82b53" translate="yes" xml:space="preserve">
          <source>Apply the Kotlin Gradle plugin by using &lt;a href=&quot;https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block&quot;&gt;the Gradle plugins DSL&lt;/a&gt;. The Kotlin Gradle plugin 1.3.41 works with Gradle 4.1 and later.</source>
          <target state="translated">&lt;a href=&quot;https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block&quot;&gt;GradleプラグインDSL&lt;/a&gt;を使用して、Kotlin Gradleプラグインを適用します。Kotlin Gradleプラグイン1.3.41は、Gradle 4.1以降で動作します。</target>
        </trans-unit>
        <trans-unit id="3f853f5560dd7c8476c5cf941ab3e0839f653371" translate="yes" xml:space="preserve">
          <source>Applying &lt;code&gt;@JsModule&lt;/code&gt; to packages</source>
          <target state="translated">パッケージへの &lt;code&gt;@JsModule&lt;/code&gt; の適用</target>
        </trans-unit>
        <trans-unit id="aeabd49e0d7b1b1b34af79a4957eaaad5894c5a9" translate="yes" xml:space="preserve">
          <source>Applying the method &lt;a href=&quot;to-lower-case#kotlin.text%24toLowerCase%28kotlin.Char%29&quot;&gt;toLowerCase&lt;/a&gt; to each character produces the same result</source>
          <target state="translated">メソッド&lt;a href=&quot;to-lower-case#kotlin.text%24toLowerCase%28kotlin.Char%29&quot;&gt;toLowerCase&lt;/a&gt;を各文字に適用すると、同じ結果が生成されます</target>
        </trans-unit>
        <trans-unit id="6c7e06af6bcb9f21d385d033624e41aa4de56345" translate="yes" xml:space="preserve">
          <source>Applying the method &lt;a href=&quot;to-upper-case#kotlin.text%24toUpperCase%28kotlin.Char%29&quot;&gt;toUpperCase&lt;/a&gt; to each character produces the same result</source>
          <target state="translated">&lt;a href=&quot;to-upper-case#kotlin.text%24toUpperCase%28kotlin.Char%29&quot;&gt;メソッドtoUpperCase&lt;/a&gt;を各文字に適用すると、同じ結果が生成されます</target>
        </trans-unit>
        <trans-unit id="88ee8125c77dcafc5bf95377789eb0ec79f24743" translate="yes" xml:space="preserve">
          <source>Applying the multiplatform plugin</source>
          <target state="translated">マルチプラットフォームのプラグインを適用する</target>
        </trans-unit>
        <trans-unit id="b386c6b29c2ede32d74101d16e5a74cdab325a7c" translate="yes" xml:space="preserve">
          <source>Applying the style guide</source>
          <target state="translated">スタイルガイドの適用</target>
        </trans-unit>
        <trans-unit id="b0030315682a2665c3c17394d00a850ed1848b04" translate="yes" xml:space="preserve">
          <source>Architechture of the CPU program executes upon.</source>
          <target state="translated">CPUプログラムのアーキテクトが実行されます。</target>
        </trans-unit>
        <trans-unit id="97c9b9304549fe021ab2a3e2a07aea737c7c6bc6" translate="yes" xml:space="preserve">
          <source>Are there Kotlin events?</source>
          <target state="translated">コトリンのイベントはありますか?</target>
        </trans-unit>
        <trans-unit id="b2731682bdcb720a33ddb2c2d592a12f53ac05af" translate="yes" xml:space="preserve">
          <source>Are there any books on Kotlin?</source>
          <target state="translated">コトリンの本はありますか?</target>
        </trans-unit>
        <trans-unit id="bf1abc615f5fcf9cea42743c0be6ffea27aad499" translate="yes" xml:space="preserve">
          <source>Are there any online courses available for Kotlin?</source>
          <target state="translated">Kotlinのオンラインコースはありますか?</target>
        </trans-unit>
        <trans-unit id="1a4ba82219180de0b96342941aba144e73459a0e" translate="yes" xml:space="preserve">
          <source>Arena</source>
          <target state="translated">Arena</target>
        </trans-unit>
        <trans-unit id="53c8d0ca18809578b9f153d7c05aef31d34b7372" translate="yes" xml:space="preserve">
          <source>ArenaBase</source>
          <target state="translated">ArenaBase</target>
        </trans-unit>
        <trans-unit id="1fe793872eba681384e897fcbfb954b9c94254a0" translate="yes" xml:space="preserve">
          <source>ArenaManager</source>
          <target state="translated">ArenaManager</target>
        </trans-unit>
        <trans-unit id="fbc3085b815a6a3739709a1cfd4f0a9c358c425d" translate="yes" xml:space="preserve">
          <source>Arithmetic and bitwise operator functions:</source>
          <target state="translated">算術演算子関数とビット演算子関数。</target>
        </trans-unit>
        <trans-unit id="d077356b7b5076ff62409f2fbd19527762e29c71" translate="yes" xml:space="preserve">
          <source>Arithmetic operators</source>
          <target state="translated">算術演算子</target>
        </trans-unit>
        <trans-unit id="2259330fb77de2bd8dc1911ad15baf0ac1663381" translate="yes" xml:space="preserve">
          <source>ArithmeticException</source>
          <target state="translated">ArithmeticException</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="993db66e606b690af9a36a5050f3014f5db6a946" translate="yes" xml:space="preserve">
          <source>Array capturing before the &lt;code&gt;for&lt;/code&gt;-loop where it is iterated</source>
          <target state="translated">反復される &lt;code&gt;for&lt;/code&gt; ループの前にキャプチャする配列</target>
        </trans-unit>
        <trans-unit id="d2324e3a22ded322b967f4ef9514ff4a6daf1c6d" translate="yes" xml:space="preserve">
          <source>Array literals in annotations</source>
          <target state="translated">アノテーションの配列リテラル</target>
        </trans-unit>
        <trans-unit id="c839ae973f5d8afc99c9113db40a2fda70705bcb" translate="yes" xml:space="preserve">
          <source>Array manipulation functions</source>
          <target state="translated">配列操作機能</target>
        </trans-unit>
        <trans-unit id="86becd6583707920b6322fa55ea374f96c455f6b" translate="yes" xml:space="preserve">
          <source>Array-like List instantiation functions</source>
          <target state="translated">配列のようなリストのインスタンス化関数</target>
        </trans-unit>
        <trans-unit id="767ecb9669597d00150b90d6fe244883cb6456ff" translate="yes" xml:space="preserve">
          <source>Array.groupingBy</source>
          <target state="translated">Array.groupingBy</target>
        </trans-unit>
        <trans-unit id="95971ea269213b08d09c9553e6421bde178a5ca7" translate="yes" xml:space="preserve">
          <source>ArrayBuffer</source>
          <target state="translated">ArrayBuffer</target>
        </trans-unit>
        <trans-unit id="344ca1bae01f225dce43a257eecb7eef13159726" translate="yes" xml:space="preserve">
          <source>ArrayBufferView</source>
          <target state="translated">ArrayBufferView</target>
        </trans-unit>
        <trans-unit id="21484b74aa640458082fe4bb49601200afedc0f0" translate="yes" xml:space="preserve">
          <source>ArrayIndexOutOfBoundsException</source>
          <target state="translated">ArrayIndexOutOfBoundsException</target>
        </trans-unit>
        <trans-unit id="f5baaa4ad5d36710b8fed9d2bc4a53a86da5b55a" translate="yes" xml:space="preserve">
          <source>ArrayList</source>
          <target state="translated">ArrayList</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="1f020c8a312d352f40253725bb9a1404c682feb5" translate="yes" xml:space="preserve">
          <source>Arrays are used with primitive datatypes on the Java platform to avoid the cost of boxing/unboxing operations. As Kotlin hides those implementation details, a workaround is required to interface with Java code. There are specialized classes for every type of primitive array (&lt;code&gt;IntArray&lt;/code&gt;, &lt;code&gt;DoubleArray&lt;/code&gt;, &lt;code&gt;CharArray&lt;/code&gt;, and so on) to handle this case. They are not related to the &lt;code&gt;Array&lt;/code&gt; class and are compiled down to Java's primitive arrays for maximum performance.</source>
          <target state="translated">配列は、Javaプラットフォームでプリミティブデータ型とともに使用され、ボックス化/ボックス化解除操作のコストを回避します。Kotlinはこれらの実装の詳細を隠しているため、Javaコードとのインターフェースには回避策が必要です。このケースを処理するために、プリミティブ配列のすべてのタイプ（ &lt;code&gt;IntArray&lt;/code&gt; 、 &lt;code&gt;DoubleArray&lt;/code&gt; 、 &lt;code&gt;CharArray&lt;/code&gt; など）に特化したクラスがあります。これらは &lt;code&gt;Array&lt;/code&gt; クラスとは関係なく、最大のパフォーマンスを得るためにJavaのプリミティブ配列にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="f4482d24800bcb9b5653ad79bcd0d74461f8a7c5" translate="yes" xml:space="preserve">
          <source>Arrays as annotation parameters</source>
          <target state="translated">アノテーションパラメータとしての配列</target>
        </trans-unit>
        <trans-unit id="ed7e657ddb1b841cdf39a77088d64ab0f911f2e7" translate="yes" xml:space="preserve">
          <source>Arrays in Kotlin are &lt;a href=&quot;basic-types#arrays&quot;&gt;invariant&lt;/a&gt;</source>
          <target state="translated">Kotlinの配列は&lt;a href=&quot;basic-types#arrays&quot;&gt;不変です&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3c00afae5e17ce36b4bce66872255823a71409c" translate="yes" xml:space="preserve">
          <source>Arrays in Kotlin are invariant, unlike Java. This means that Kotlin does not let us assign an &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; to an &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;, which prevents a possible runtime failure. Passing an array of a subclass as an array of superclass to a Kotlin method is also prohibited, but for Java methods this is allowed (through &lt;a href=&quot;#null-safety-and-platform-types&quot;&gt;platform types&lt;/a&gt; of the form &lt;code&gt;Array&amp;lt;(out) String&amp;gt;!&lt;/code&gt;).</source>
          <target state="translated">Javaとは異なり、Kotlinの配列は不変です。つまり、Kotlinでは &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; を &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; に割り当てることができないため、実行時の失敗を防ぐことができます。サブクラスの配列をスーパークラスの配列としてKotlinメソッドに渡すことも禁止されていますが、Javaメソッドの場合は（ &lt;code&gt;Array&amp;lt;(out) String&amp;gt;!&lt;/code&gt; の形式の&lt;a href=&quot;#null-safety-and-platform-types&quot;&gt;プラットフォームタイプ&lt;/a&gt;を通じて）許可されます。</target>
        </trans-unit>
        <trans-unit id="b2963cfe708724b267de4b04ed1331ea0490e388" translate="yes" xml:space="preserve">
          <source>Arrays in Kotlin are represented by the &lt;code&gt;Array&lt;/code&gt; class, that has &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions (that turn into &lt;code&gt;[]&lt;/code&gt; by operator overloading conventions), and &lt;code&gt;size&lt;/code&gt; property, along with a few other useful member functions:</source>
          <target state="translated">Kotlinの配列は、 &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; 関数（演算子のオーバーロード規則によって &lt;code&gt;[]&lt;/code&gt; に変換される）を持つ &lt;code&gt;Array&lt;/code&gt; クラス、および他のいくつかの有用なメンバー関数とともに &lt;code&gt;size&lt;/code&gt; プロパティによって表されます。</target>
        </trans-unit>
        <trans-unit id="62f028c885fc3a31a2fedf97f0f1bc1c20632cf6" translate="yes" xml:space="preserve">
          <source>Arrays in Kotlin have a constant length, so one normally uses lists, which are similar to the ones in Python. What's called a &lt;em&gt;dict&lt;/em&gt; in Python is called a &lt;em&gt;map&lt;/em&gt; in Kotlin (not to be confused with the function &lt;code&gt;map()&lt;/code&gt;). &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, and &lt;code&gt;Set&lt;/code&gt; are all &lt;em&gt;interfaces&lt;/em&gt; which are implemented by many different classes. In most situations, a standard array-backed list or hash-based map or set will do, and you can easily make those like this:</source>
          <target state="translated">Kotlinの配列の長さは一定であるため、Pythonの配列と同様のリストを通常使用します。何と呼ばれています&lt;em&gt;dictの&lt;/em&gt; Pythonでは呼ばれている&lt;em&gt;マップ&lt;/em&gt;（関数と混同しないKotlinで &lt;code&gt;map()&lt;/code&gt; ）。 &lt;code&gt;List&lt;/code&gt; 、 &lt;code&gt;Map&lt;/code&gt; 、および &lt;code&gt;Set&lt;/code&gt; はすべて、多くの異なるクラスによって実装される&lt;em&gt;インターフェース&lt;/em&gt;です。ほとんどの状況では、標準の配列に基づくリストまたはハッシュベースのマップまたはセットで十分であり、次のように簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="44661dfa805f34613024421c354f59c34cebafbb" translate="yes" xml:space="preserve">
          <source>As a bonus, coroutines not only open the doors to asynchronous programming, but also provide a wealth of other possibilities such as concurrency, actors, etc.</source>
          <target state="translated">さらに、コアーチンは非同期プログラミングの扉を開くだけでなく、同時実行やアクターなど、他の可能性も豊富に提供してくれます。</target>
        </trans-unit>
        <trans-unit id="849ec1d4c4988a83bcc7a0523f4dd424edfbc641" translate="yes" xml:space="preserve">
          <source>As a consequence, smaller types are NOT implicitly converted to bigger types. This means that we cannot assign a value of type &lt;code&gt;Byte&lt;/code&gt; to an &lt;code&gt;Int&lt;/code&gt; variable without an explicit conversion</source>
          <target state="translated">結果として、小さい型が大きい型に暗黙的に変換されることはありません。私たちは、型の値に割り当てることができないことをこの意味 &lt;code&gt;Byte&lt;/code&gt; へ &lt;code&gt;Int&lt;/code&gt; 明示的な変換せずに変数を</target>
        </trans-unit>
        <trans-unit id="f56d690ae72ecdc73defe8a1c492e548b27cf531" translate="yes" xml:space="preserve">
          <source>As a general rule, avoid horizontal alignment of any kind. Renaming an identifier to a name with a different length should not affect the formatting of either the declaration or any of the usages.</source>
          <target state="translated">原則として、いかなる種類の水平配列も避けてください。識別子の名前を異なる長さの名前に変更しても、宣言の書式や使用法に影響を与えるべきではありません。</target>
        </trans-unit>
        <trans-unit id="178223b61004b4b10504bc589edd7f966b052b5e" translate="yes" xml:space="preserve">
          <source>As an alternative, Kotlin provides a mechanism of &lt;em&gt;expected and actual declarations&lt;/em&gt;. With this mechanism, a common module can define &lt;em&gt;expected declarations&lt;/em&gt;, and a platform module can provide &lt;em&gt;actual declarations&lt;/em&gt; corresponding to the expected ones. To see how this works, let's look at an example first. This code is part of a common module:</source>
          <target state="translated">別の方法として、Kotlinは&lt;em&gt;期待される宣言と実際の宣言の&lt;/em&gt;メカニズムを提供します。このメカニズムを使用すると、共通モジュールが&lt;em&gt;期待される宣言&lt;/em&gt;を定義でき、プラットフォームモジュールが期待される&lt;em&gt;宣言に&lt;/em&gt;対応する&lt;em&gt;実際の宣言&lt;/em&gt;を提供できます。これがどのように機能するかを確認するために、最初に例を見てみましょう。このコードは一般的なモジュールの一部です：</target>
        </trans-unit>
        <trans-unit id="b2e87b12f4753ea4d70c597e7b97d980eff63d7c" translate="yes" xml:space="preserve">
          <source>As an alternative, you can enable it using the &lt;code&gt;plugins&lt;/code&gt; block:</source>
          <target state="translated">別の方法として、 &lt;code&gt;plugins&lt;/code&gt; ブロックを使用して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="6d19b5ff36d4481de491f96b720aa65a5af94dc2" translate="yes" xml:space="preserve">
          <source>As an example, here's how you can overload the unary minus operator:</source>
          <target state="translated">例として、単項マイナス演算子をオーバーロードする方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="3befe476ef533e4f009fc0eb02aff611e3535906" translate="yes" xml:space="preserve">
          <source>As assembling Kotlin/Native artifacts requires several builds to run on different host platforms, publishing a multiplatform library that includes Kotlin/Native targets needs to be done with that same set of host machines. To avoid duplicate publications of modules that can be built on more than one of the platforms (like JVM, JS, Kotlin metadata, WebAssembly), the publishing tasks for these modules may be configured to run conditionally.</source>
          <target state="translated">Kotlin/Nativeの成果物を組み立てるには、異なるホストプラットフォーム上で実行するために複数のビルドが必要なため、Kotlin/Nativeターゲットを含むマルチプラットフォームライブラリを公開するには、同じホストマシンのセットで実行する必要があります。複数のプラットフォームでビルドできるモジュール(JVM、JS、Kotlinのメタデータ、WebAssemblyなど)の重複公開を避けるために、これらのモジュールの公開タスクを条件付きで実行するように設定することができます。</target>
        </trans-unit>
        <trans-unit id="045b064d31075e8f38b87bd89fc2dc2f370481ec" translate="yes" xml:space="preserve">
          <source>As can be seen, this is again pretty much a one-to-one translation of Java to Kotlin, with nothing special required for Kotlin.</source>
          <target state="translated">見ての通り、これはJavaからKotlinへの一対一の翻訳であり、Kotlinに必要なものは何もありません。</target>
        </trans-unit>
        <trans-unit id="cdacfd12541b0606e6a0e3ca0a605644c2a970f6" translate="yes" xml:space="preserve">
          <source>As for 1.1.x versions, DCE tool is an &lt;em&gt;experimental&lt;/em&gt; feature. This does not mean we are going to remove it, or that it's unusable for production. This means that we can change names of configuration parameters, default settings, etc.</source>
          <target state="translated">1.1.xバージョンに関しては、DCEツールは&lt;em&gt;実験的な&lt;/em&gt;機能です。これは、これを削除することを意味するのではなく、本番環境で使用できないことを意味します。これは、設定パラメータの名前、デフォルト設定などを変更できることを意味します。</target>
        </trans-unit>
        <trans-unit id="866b561a2d48221046295349ec5382a653d7fe14" translate="yes" xml:space="preserve">
          <source>As for why you would want to create an interface, other than as a reminder to have your classes implement certain members, see the section on &lt;a href=&quot;inheritance#polymorphism&quot;&gt;polymorphism&lt;/a&gt;.</source>
          <target state="translated">クラスに特定のメンバーを実装させるためのリマインダーとして以外に、インターフェースを作成する理由については、&lt;a href=&quot;inheritance#polymorphism&quot;&gt;ポリモーフィズム&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ed37584c0bf4724511ff5c77e1c092e6dda5e383" translate="yes" xml:space="preserve">
          <source>As in Java, classes in Kotlin may have type parameters:</source>
          <target state="translated">Javaと同様に、Kotlinのクラスは型のパラメータを持つことができます。</target>
        </trans-unit>
        <trans-unit id="5d6aeea8fc5a019db03fb823a48f0312c3ea67a8" translate="yes" xml:space="preserve">
          <source>As in Java, you use &lt;code&gt;@Inject&lt;/code&gt; to annotate the constructor used by Dagger to create instances of a class. Kotlin has a short syntax for declaring a property and a constructor parameter at the same time. To annotate the constructor, use the &lt;code&gt;constructor&lt;/code&gt; keyword explicitly and put the &lt;code&gt;@Inject&lt;/code&gt; annotation before it:</source>
          <target state="translated">Javaの場合と同様に、 &lt;code&gt;@Inject&lt;/code&gt; を使用して、Daggerがクラスのインスタンスを作成するために使用するコンストラクターに注釈を付けます。Kotlinには、プロパティとコンストラクターパラメーターを同時に宣言する短い構文があります。コンストラクターに注釈を付けるには、コンストラク &lt;code&gt;constructor&lt;/code&gt; キーワードを明示的に使用し、 &lt;code&gt;@Inject&lt;/code&gt; アノテーションをその前に置きます。</target>
        </trans-unit>
        <trans-unit id="41a928eeb4d74c1825293231ae305910b4c8f0f0" translate="yes" xml:space="preserve">
          <source>As is with C, these reinterpret casts are unsafe and can potentially lead to subtle memory problems in the application.</source>
          <target state="translated">C言語と同様に、これらの再解釈キャストは安全ではなく、アプリケーションの微妙なメモリ問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="8984045e35ecf74845da505924dbd146c3b06c19" translate="yes" xml:space="preserve">
          <source>As legacy features get removed and bugs fixed, the source language changes, and old code that has not been properly migrated may not compile any more. The normal deprecation cycle allows a comfortable period of time for migration, and even when it's over and the change ships in a stable version, there's still a way to compile unmigrated code.</source>
          <target state="translated">レガシー機能が削除されたりバグが修正されたりすると、ソース言語が変わり、適切に移行されていない古いコードはコンパイルできなくなることがあります。通常の非推奨化サイクルでは、移行のための快適な期間が確保されており、それが終了して安定版で出荷された場合でも、移行されていないコードをコンパイルする方法があります。</target>
        </trans-unit>
        <trans-unit id="a13e2b85f0dcfaf3ea29e663238654080766a6a4" translate="yes" xml:space="preserve">
          <source>As mentioned above, Kotlin represents package-level functions as static methods. Kotlin can also generate static methods for functions defined in named objects or companion objects if you annotate those functions as &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/index&quot;&gt;&lt;code&gt;@JvmStatic&lt;/code&gt;&lt;/a&gt;. If you use this annotation, the compiler will generate both a static method in the enclosing class of the object and an instance method in the object itself. For example:</source>
          <target state="translated">上記のように、Kotlinはパッケージレベルの関数を静的メソッドとして表します。Kotlinは、名前付きオブジェクトまたはコンパニオンオブジェクトで定義された関数に静的メソッドを生成することもできます（それらの関数に&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/index&quot;&gt; &lt;code&gt;@JvmStatic&lt;/code&gt; &lt;/a&gt;として注釈を付ける場合）。このアノテーションを使用すると、コンパイラーは、オブジェクトを囲むクラスの静的メソッドとオブジェクト自体のインスタンスメソッドの両方を生成します。例えば：</target>
        </trans-unit>
        <trans-unit id="0a76cc1aee11fbedb9203ead3a6cbeb807610d14" translate="yes" xml:space="preserve">
          <source>As mentioned above, platform types cannot be mentioned explicitly in the program, so there's no syntax for them in the language. Nevertheless, the compiler and IDE need to display them sometimes (in error messages, parameter info etc), so we have a mnemonic notation for them:</source>
          <target state="translated">上で述べたように、プラットフォーム型はプログラムの中で明示的に言及することができないので、言語にはそのための構文がありません。とはいえ、コンパイラやIDEは時々(エラーメッセージやパラメータ情報などで)それらを表示する必要があるので、それらのためのニーモニック記法を用意しています。</target>
        </trans-unit>
        <trans-unit id="f43b3b86722780ca744b9043774fc3a7c83a1e20" translate="yes" xml:space="preserve">
          <source>As mentioned before, &lt;em&gt;for&lt;/em&gt; iterates through anything that provides an iterator, i.e.</source>
          <target state="translated">前に述べたように、&lt;em&gt;for&lt;/em&gt;はイテレータを提供するあらゆるもの&lt;em&gt;を&lt;/em&gt;反復します。</target>
        </trans-unit>
        <trans-unit id="c4d37d69d9ec83cd91daa76881b54b8260ce4574" translate="yes" xml:space="preserve">
          <source>As of bitwise operations, there're no special characters for them, but just named functions that can be called in infix form, for example:</source>
          <target state="translated">ビット演算に関しては、特別な文字があるわけではなく、例えばインフィックス形式で呼び出せる名前付き関数があるだけです。</target>
        </trans-unit>
        <trans-unit id="5aad44396dc052a94b214ded61040a7ce5438b38" translate="yes" xml:space="preserve">
          <source>As opposed to Python, omitting &lt;code&gt;return&lt;/code&gt; at the end of a function does not implicitly return null; if you want to return null, you must do so with &lt;code&gt;return null&lt;/code&gt;. If a function never needs to return anything, the function should have the return type &lt;code&gt;Unit&lt;/code&gt; (or not declare a return type at all, in which case the return type defaults to &lt;code&gt;Unit&lt;/code&gt;). In such a function, you may either have no &lt;code&gt;return&lt;/code&gt; statement at all, or say just &lt;code&gt;return&lt;/code&gt;. &lt;code&gt;Unit&lt;/code&gt; is both a singleton object (which &lt;code&gt;None&lt;/code&gt; in Python also happens to be) and the type of that object, and it represents &quot;this function never returns any information&quot; (rather than &quot;this function sometimes returns information, but this time, it didn't&quot;, which is more or less the semantics of returning null).</source>
          <target state="translated">Pythonとは対照的に、関数の最後で &lt;code&gt;return&lt;/code&gt; を省略しても暗黙的にnullは返されません。 nullを返したい場合は、return nullを使用して行う必要があり &lt;code&gt;return null&lt;/code&gt; 。関数が何も返す必要がない場合、関数の戻り値の型は &lt;code&gt;Unit&lt;/code&gt; にする必要があります（または戻り値の型をまったく宣言しないでください。その場合、戻り値の型はデフォルトで &lt;code&gt;Unit&lt;/code&gt; になります）。そのような関数では、 &lt;code&gt;return&lt;/code&gt; ステートメントをまったく持たないか、単に &lt;code&gt;return&lt;/code&gt; と言うだけです。 &lt;code&gt;Unit&lt;/code&gt; は両方ともシングルトンオブジェクトです（これは &lt;code&gt;None&lt;/code&gt; Pythonでは、たまたま）とそのオブジェクトのタイプであり、「この関数は情報を返さない」ことを表します（「この関数は情報を返すことがあるが、今回は返さなかった」ではなく、多かれ少なかれnullを返すセマンティクス）。</target>
        </trans-unit>
        <trans-unit id="3acadd09fb55e1c866575baf09f2eec7cd88fe6e" translate="yes" xml:space="preserve">
          <source>As said above, Kotlin provides the ability &lt;a href=&quot;#invoking-a-function-type-instance&quot;&gt;to call an instance&lt;/a&gt; of a function type with receiver providing the &lt;em&gt;receiver object&lt;/em&gt;.</source>
          <target state="translated">上記のように、Kotlinは関数型の&lt;a href=&quot;#invoking-a-function-type-instance&quot;&gt;インスタンスを呼び出す&lt;/a&gt;機能を提供し、&lt;em&gt;レシーバー&lt;/em&gt;は&lt;em&gt;レシーバーオブジェクトを&lt;/em&gt;提供し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="af9463b7016217fafafd45036aa3aaf5a76afa2f" translate="yes" xml:space="preserve">
          <source>As said above, type erasure makes checking actual type arguments of a generic type instance impossible at runtime, and generic types in the code might be connected to each other not closely enough for the compiler to ensure type safety.</source>
          <target state="translated">上で述べたように、型消去を行うと、実行時にジェネリック型インスタンスの実際の型引数をチェックすることができなくなり、コード中のジェネリック型は、コンパイラが型の安全性を確保するために十分に密接に接続されていない可能性があります。</target>
        </trans-unit>
        <trans-unit id="ef7d7e86bc8fa5fde32371e6a18f2f72af578c6d" translate="yes" xml:space="preserve">
          <source>As shown in the examples above, the ranges of integral types, such as &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, and &lt;code&gt;Char&lt;/code&gt;, can be treated as &lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_progression&quot;&gt;arithmetic progressions&lt;/a&gt; of them. In Kotlin, these progressions are defined by special types: &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-int-progression/index&quot;&gt;&lt;code&gt;IntProgression&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-long-progression/index&quot;&gt;&lt;code&gt;LongProgression&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-char-progression/index&quot;&gt;&lt;code&gt;CharProgression&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">上記の例に示されているように、 &lt;code&gt;Int&lt;/code&gt; 、 &lt;code&gt;Long&lt;/code&gt; 、 &lt;code&gt;Char&lt;/code&gt; などの整数型の範囲は、それらの&lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_progression&quot;&gt;算術的な進行&lt;/a&gt;として扱うことができます。：Kotlinでは、これらの進行は、特殊なタイプで定義されてい&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-int-progression/index&quot;&gt; &lt;code&gt;IntProgression&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-long-progression/index&quot;&gt; &lt;code&gt;LongProgression&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-char-progression/index&quot;&gt; &lt;code&gt;CharProgression&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e702b315630e1178fe3212af7f23fa932d025965" translate="yes" xml:space="preserve">
          <source>As shown in this example, maven dependency also can be exported. But due to current limitations of Gradle metadata such a dependency should be either a platform one (e.g. &lt;code&gt;kotlinx-coroutines-core-native_debug_macos_x64&lt;/code&gt; instead of &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt;) or be exported transitively (see below).</source>
          <target state="translated">この例に示すように、Maven依存関係もエクスポートできます。ただし、Gradleメタデータの現在の制限により、このような依存関係はプラットフォームの依存関係（例： &lt;code&gt;kotlinx-coroutines-core-native_debug_macos_x64&lt;/code&gt; ではなく &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt; coroutines-core-native_debug_macos_x64）であるか、推移的にエクスポートされる必要があります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="323a54219c5ee6f0cab7f91bcab32dc5c192e7e7" translate="yes" xml:space="preserve">
          <source>As soon as main invokes &lt;code&gt;job.cancel&lt;/code&gt;, we don't see any output from the other coroutine because it was cancelled. There is also a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; extension function &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt; that combines &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;cancel&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;join&lt;/a&gt; invocations.</source>
          <target state="translated">mainが &lt;code&gt;job.cancel&lt;/code&gt; を呼び出すと、キャンセルされたため、他のコルーチンからの出力は表示されません。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;取り消し&lt;/a&gt;呼び出しと&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;結合&lt;/a&gt;呼び出しを組み合わせる&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;ジョブ&lt;/a&gt;拡張関数&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="1ec1557f8eee71518f9ad217e76da59d2f3a92f5" translate="yes" xml:space="preserve">
          <source>As the &lt;a href=&quot;collections-overview&quot;&gt;definition of list&lt;/a&gt; says, a list is an ordered collection. Hence, every element of a list has its position that you can use for referring. In addition to functions described on this page, lists offer a wider set of ways to retrieve and search for elements by indices. For more details, see &lt;a href=&quot;list-operations&quot;&gt;List Specific Operations&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;collections-overview&quot;&gt;リスト&lt;/a&gt;の定義が言うように、リストは順序付けられたコレクションです。したがって、リストのすべての要素には、参照に使用できる位置があります。このページで説明されている関数に加えて、リストはインデックスによって要素を取得および検索するための幅広い方法を提供します。詳細については、「&lt;a href=&quot;list-operations&quot;&gt;特定の操作&lt;/a&gt;を一覧表示する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="27ad261bc9c7d6cb765d0ea1438b3c8e987a6979" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;commonTest&lt;/code&gt;&lt;a href=&quot;#default-project-layout&quot;&gt;default source set&lt;/a&gt; is added to all test compilations, tests and test tools that are needed on all target platforms may be placed there.</source>
          <target state="translated">以下のよう &lt;code&gt;commonTest&lt;/code&gt; &lt;a href=&quot;#default-project-layout&quot;&gt;デフォルトのソースセットは&lt;/a&gt;、すべてのテストのコンパイルに追加され、すべてのターゲットプラットフォーム上で必要なテストとテストツールがそこに配置することができます。</target>
        </trans-unit>
        <trans-unit id="5a2f37014fdc09535abad4023c6b450a2b899b17" translate="yes" xml:space="preserve">
          <source>As the platforms are different, targets are built in different ways as well and have various platform-specific settings. The Gradle plugin bundles a number of presets for the supported platforms.</source>
          <target state="translated">プラットフォームが異なるため、ターゲットも同様に異なる方法で構築されており、プラットフォーム固有の様々な設定を持っています。Gradle プラグインには、サポートされているプラットフォーム用の多数のプリセットがバンドルされています。</target>
        </trans-unit>
        <trans-unit id="43e93e982fbf27b175ee52afaca49428156c5004" translate="yes" xml:space="preserve">
          <source>As this is key to understanding how Kotlin is moving forward, let's expand on these principles.</source>
          <target state="translated">コトリンがどのように進んでいるのかを理解するための鍵となるので、これらの原則を展開していきましょう。</target>
        </trans-unit>
        <trans-unit id="d8a6951b471083df17ec063563955cea5aec3f48" translate="yes" xml:space="preserve">
          <source>As we can see, we've eliminated the explicit variable declarations in the Kotlin version, but everything else is pretty much verbatim to the C version. All the calls we'd expect in the &lt;code&gt;libcurl&lt;/code&gt; library are available in their Kotlin equivalent.</source>
          <target state="translated">ご覧のように、Kotlinバージョンでは明示的な変数宣言を削除しましたが、その他はすべてCバージョンとまったく同じです。 &lt;code&gt;libcurl&lt;/code&gt; ライブラリで予想されるすべての呼び出しは、対応するKotlinで利用できます。</target>
        </trans-unit>
        <trans-unit id="9beef94ae067e63cbd9e59d894b27cdc816aa2f7" translate="yes" xml:space="preserve">
          <source>As we have studied before, cancellation is a bidirectional relationship propagating through the whole coroutines hierarchy. But what if unidirectional cancellation is required?</source>
          <target state="translated">以前にも勉強したように、キャンセルはコーチンの階層全体を伝搬する双方向の関係です。しかし、一方向性のキャンセルが必要な場合はどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="b64b2981e63e1536aa67f1172fa99896be6284dc" translate="yes" xml:space="preserve">
          <source>As we mentioned above, Kotlin does not have checked exceptions. So, normally, the Java signatures of Kotlin functions do not declare exceptions thrown. Thus if we have a function in Kotlin like this:</source>
          <target state="translated">前述したように、Kotlinにはチェック済みの例外はありません。そのため、通常、Kotlinの関数のJavaシグネチャでは、スローされた例外は宣言されていません。したがって、Kotlinにこのような関数があったとします。</target>
        </trans-unit>
        <trans-unit id="08396bfca73f3c35212459154b28f8878108768a" translate="yes" xml:space="preserve">
          <source>As we mentioned before, we stick to making things explicit in Kotlin. And unlike Java, Kotlin requires explicit modifiers for overridable members (we call them &lt;em&gt;open&lt;/em&gt;) and for overrides:</source>
          <target state="translated">前に述べたように、Kotlinで物事を明示的にすることに固執します。また、Javaとは異なり、Kotlinはオーバーライド可能なメンバー（&lt;em&gt;open&lt;/em&gt;と呼ぶ）とオーバーライドに対して明示的な修飾子を必要とします。</target>
        </trans-unit>
        <trans-unit id="0253e410893c125101fd61e2b655187a42457a6c" translate="yes" xml:space="preserve">
          <source>As we said above, the &lt;code&gt;[]&lt;/code&gt; operation stands for calls to member functions &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt;.</source>
          <target state="translated">上で述べたように、 &lt;code&gt;[]&lt;/code&gt; 操作はメンバー関数 &lt;code&gt;get()&lt;/code&gt; および &lt;code&gt;set()&lt;/code&gt; の呼び出しを表します。</target>
        </trans-unit>
        <trans-unit id="f6bc0d71d02feb935761c2fec09157ddb18fef0a" translate="yes" xml:space="preserve">
          <source>As with all-open, add the plugin JAR file to the compiler plugin classpath and specify annotations or presets:</source>
          <target state="translated">all-open と同様に、プラグイン JAR ファイルをコンパイラ・プラグインのクラスパスに追加し、アノテーションまたはプリセットを指定します。</target>
        </trans-unit>
        <trans-unit id="e700fa017eccf7f4f99be1f93fd46c19e29e9465" translate="yes" xml:space="preserve">
          <source>As with all-open, add the plugin to the buildscript dependencies:</source>
          <target state="translated">all-open と同様に、buildscript の依存関係にプラグインを追加します。</target>
        </trans-unit>
        <trans-unit id="0ddb289577a5748be89057d32163008e7c2b82ca" translate="yes" xml:space="preserve">
          <source>As with other function literals, if the function takes one parameter (other than the receiver object that it is invoked on), the single parameter is implicitly called &lt;code&gt;it&lt;/code&gt;, unless you declare another name. If it takes more than one parameter, you must declare their names.</source>
          <target state="translated">関数は（それが呼び出されたことを受信者オブジェクト以外の）一つのパラメータを取る場合は、他の関数リテラルと同じように、単一のパラメータは、暗黙的に呼び出され &lt;code&gt;it&lt;/code&gt; 別の名前を宣言しない限り、。複数のパラメーターを使用する場合は、それらの名前を宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="b3a2c907f41578ca82056398084f5bd35172b8f8" translate="yes" xml:space="preserve">
          <source>As with the &lt;em&gt;kotlin-spring&lt;/em&gt; plugin, &lt;em&gt;kotlin-jpa&lt;/em&gt; is a wrapped on top of &lt;em&gt;no-arg&lt;/em&gt;. The plugin specifies &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt;&lt;em&gt;no-arg&lt;/em&gt; annotations automatically.</source>
          <target state="translated">同様に&lt;em&gt;kotlinスプリング&lt;/em&gt;プラグイン、&lt;em&gt;kotlin-JPAは&lt;/em&gt;の上にラップされている&lt;em&gt;引数なし&lt;/em&gt;。プラグインは&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt; &lt;code&gt;@Entity&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt; &lt;code&gt;@Embeddable&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt; &lt;code&gt;@MappedSuperclass&lt;/code&gt; &lt;/a&gt;&lt;em&gt; no-arg&lt;/em&gt;アノテーションを自動的に指定します。</target>
        </trans-unit>
        <trans-unit id="68d1e9ff2648dcea56d6c6f57453efa33c7feb3b" translate="yes" xml:space="preserve">
          <source>As you can see in this example, the annotated function appears to be a part of the &lt;code&gt;@ExperimentalDateTime&lt;/code&gt; experimental API. So, the described way of acceptance propagates the experimental status to the code that uses an experimental API; its clients will be required to accept it as well. To use multiple experimental APIs, annotate the declaration with all their markers.</source>
          <target state="translated">この例でわかるように、注釈付き関数は &lt;code&gt;@ExperimentalDateTime&lt;/code&gt; 実験的APIの一部であるように見えます。したがって、説明した受け入れ方法は、試験的なステータスを試験的なAPIを使用するコードに伝播します。そのクライアントもそれを受け入れる必要があります。複数の試験的なAPIを使用するには、宣言にすべてのマーカーで注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="cc87d19acb232a1d83499d511bd23cda3c0080c6" translate="yes" xml:space="preserve">
          <source>As you can see, now this loop is cancelled. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt; is an extension property available inside the coroutine via the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; object.</source>
          <target state="translated">ご覧のとおり、このループはキャンセルされています。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt;は、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;オブジェクトを介してコルーチン内で使用できる拡張プロパティです。</target>
        </trans-unit>
        <trans-unit id="7352fb651c3772692a032dbe42546dd641670912" translate="yes" xml:space="preserve">
          <source>As you can see, only the first two coroutines had printed a message and the others were cancelled by a single invocation of &lt;code&gt;job.cancel()&lt;/code&gt; in &lt;code&gt;Activity.destroy()&lt;/code&gt;.</source>
          <target state="translated">あなたが見ることができるように、最初の2つのだけコルーチンは、メッセージを印刷していたし、他のものは、単一の呼び出しによってキャンセルされた &lt;code&gt;job.cancel()&lt;/code&gt; 内 &lt;code&gt;Activity.destroy()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7b66783a2aeaef0abd85ccec69670f515a360a3" translate="yes" xml:space="preserve">
          <source>As you see, Kotlin aims to create very concise and readable JavaScript allowing us to interact with it as needed. One question of course is why go to all this trouble to as opposed to just use &lt;code&gt;console.log()&lt;/code&gt;. Obviously this is a very simple example that shows the basics of how it works and we've focused on analysing the output. As application complexity grows, the benefits of using Kotlin and static typing start to become more apparent.</source>
          <target state="translated">ご覧のとおり、Kotlinは非常に簡潔で読みやすいJavaScriptを作成し、必要に応じてJavaScriptを操作できるようにすることを目的としています。もちろん1つの質問は、単に &lt;code&gt;console.log()&lt;/code&gt; を使用するのではなく、このすべての問題に行く理由です。明らかにこれは非常に単純な例であり、それがどのように機能するかの基本を示し、出力の分析に焦点を当ててきました。アプリケーションの複雑さが増すにつれ、Kotlinと静的型付けを使用する利点がより明白になります。</target>
        </trans-unit>
        <trans-unit id="421389931a4f34efe05c30826b90917d2975e478" translate="yes" xml:space="preserve">
          <source>As you see, in some aspects lists are very similar to arrays. However, there is one important difference: an array's size is defined upon initialization and is never changed; in turn, a list doesn't have a predefined size; a list's size can be changed as a result of write operations: adding, updating, or removing elements.</source>
          <target state="translated">ご覧のように、リストはある面では配列と非常によく似ています。それは、配列のサイズは初期化時に定義され、変更されることがないということです。</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="afab27ed2b3bea84dc85860592e64030242b513a" translate="yes" xml:space="preserve">
          <source>Assign the result of &lt;code&gt;a.inc()&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;;</source>
          <target state="translated">結果割り当てる &lt;code&gt;a.inc()&lt;/code&gt; に; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bfc2ce14690efbfc3e5f03f1bd9d81c65e09d6d4" translate="yes" xml:space="preserve">
          <source>AssignedNodesOptions</source>
          <target state="translated">AssignedNodesOptions</target>
        </trans-unit>
        <trans-unit id="bc4637d011ec1e897c4f35d1c0564ca5d6270854" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="abf408e5ce9df9297b5724dfc0aa196f0ea492ef" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fvalue&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fkey&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="4f6905f1353a5a56ec02146382ec893696f10bfb" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">指定された&lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;値&lt;/a&gt;をマップ内の指定された&lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;キー&lt;/a&gt;に関連付けます。</target>
        </trans-unit>
        <trans-unit id="1948b8a73d1cd0190740c5b39d682043e8e45d4f" translate="yes" xml:space="preserve">
          <source>Association</source>
          <target state="translated">Association</target>
        </trans-unit>
        <trans-unit id="8395c0a0a207934d59566106bad22ec2ff5eb59e" translate="yes" xml:space="preserve">
          <source>Assume that we have two suspending functions defined elsewhere that do something useful like some kind of remote service call or computation. We just pretend they are useful, but actually each one just delays for a second for the purpose of this example:</source>
          <target state="translated">他の場所で定義されている、ある種のリモートサービスコールや計算のような有用なことを行う2つのサスペンド関数があるとします。これらの関数は便利なふりをしていますが、実際には、この例の目的のために、それぞれの関数が1秒だけ遅延しているだけです。</target>
        </trans-unit>
        <trans-unit id="c3aa4978e4d58ec2c7d3b82f0965d81efb4db15b" translate="yes" xml:space="preserve">
          <source>Assume that you have a list of words. The code below filters the words longer than three characters and prints the lengths of first four such words.</source>
          <target state="translated">単語のリストがあるとします。以下のコードは、3文字より長い単語をフィルタリングし、そのような単語の最初の4つの長さを表示します。</target>
        </trans-unit>
        <trans-unit id="79861cda45d1d1336e91c18e019c28d9b3291f82" translate="yes" xml:space="preserve">
          <source>Assuming we have the following project layout</source>
          <target state="translated">以下のようなプロジェクトレイアウトがあるとします。</target>
        </trans-unit>
        <trans-unit id="d7a00b0d9f24fd10ce1bc320970a529790a5b81e" translate="yes" xml:space="preserve">
          <source>Async-style functions</source>
          <target state="translated">非同期スタイルの関数</target>
        </trans-unit>
        <trans-unit id="5f0c15c7899512dbe26911df30eecdd90eaafd60" translate="yes" xml:space="preserve">
          <source>Async: returning a value from a coroutine</source>
          <target state="translated">Async:コアーチンから値を返す</target>
        </trans-unit>
        <trans-unit id="8148eff566285bcd48743fb742f972c7a1dd962f" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming</source>
          <target state="translated">非同期プログラミング</target>
        </trans-unit>
        <trans-unit id="bb7e30cd8cfe981829ae3dbd4f1b57e04eede4d9" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Techniques</source>
          <target state="translated">非同期プログラミング技法</target>
        </trans-unit>
        <trans-unit id="e2607ac70e77e7024a19441f977aa15dcc598da2" translate="yes" xml:space="preserve">
          <source>Asynchronous or non-blocking programming is the new reality. Whether we're creating server-side, desktop or mobile applications, it's important that we provide an experience that is not only fluid from the user's perspective, but scalable when needed.</source>
          <target state="translated">非同期プログラミングやノンブロッキングプログラミングは新しい現実です。サーバーサイド、デスクトップ、モバイルのいずれのアプリケーションを作成するにしても、ユーザーの視点から流動的であるだけでなく、必要に応じてスケーラブルな体験を提供することが重要です。</target>
        </trans-unit>
        <trans-unit id="c90a909b33ae5b355a043d0fe5cf66963c82e15f" translate="yes" xml:space="preserve">
          <source>At first sight, inline classes may appear to be very similar to &lt;a href=&quot;type-aliases&quot;&gt;type aliases&lt;/a&gt;. Indeed, both seem to introduce a new type and both will be represented as the underlying type at runtime.</source>
          <target state="translated">一見すると、インラインクラスは&lt;a href=&quot;type-aliases&quot;&gt;タイプエイリアス&lt;/a&gt;に非常に似ているように見える場合があります。実際、どちらも新しいタイプを導入しているようで、どちらも実行時に基本となるタイプとして表されます。</target>
        </trans-unit>
        <trans-unit id="4c1c4f3d0549737a69f500db6e62443a19d51d14" translate="yes" xml:space="preserve">
          <source>At most one Java class (and as many Java interfaces as you like) can be a supertype for a class in Kotlin.</source>
          <target state="translated">Kotlinでは、クラスのスーパータイプにできるのは、最大で1つのJavaクラス(そして好きなだけのJavaインターフェイス)です。</target>
        </trans-unit>
        <trans-unit id="3ca268b94cd98a6448db35d4377a0662bccdcb59" translate="yes" xml:space="preserve">
          <source>At the call site, inline accessors are inlined as regular inline functions.</source>
          <target state="translated">呼び出しサイトでは、インラインアクセサは通常のインライン関数としてインライン化されます。</target>
        </trans-unit>
        <trans-unit id="ee1f6327a5680b8affafb58ed8775299673d7bbf" translate="yes" xml:space="preserve">
          <source>At the call sites, which function to use is determined from the type of the arguments:</source>
          <target state="translated">呼び出し先では、引数の型からどの関数を使うかが決まります。</target>
        </trans-unit>
        <trans-unit id="776e970e6527bb2e679d37cd7d85af476c65df75" translate="yes" xml:space="preserve">
          <source>At this point we can start writing Kotlin code. For this sample, we're going to write some code that will print a string out to the console window.</source>
          <target state="translated">この時点でKotlinのコードを書き始めることができます。今回のサンプルでは、コンソールウィンドウに文字列を出力するコードを書いてみます。</target>
        </trans-unit>
        <trans-unit id="4e8863167b77086ca7c7ae08d20e28d919c8bb33" translate="yes" xml:space="preserve">
          <source>At this point, we should be able to compile and run the Android application</source>
          <target state="translated">この時点で、Androidアプリケーションをコンパイルして実行できるようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="6242af7a693eecb27b33a26762af854b2d88d142" translate="yes" xml:space="preserve">
          <source>At this point, we should have a Gradle project that is ready to be opened in an IDE. IntelliJ IDEA (CLion, AppCode, or AndroidStudio) helps us to generate the &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradle Wrapper&lt;/a&gt; scripts for our project.</source>
          <target state="translated">この時点で、IDEで開く準備ができているGradleプロジェクトができているはずです。IntelliJ IDEA（CLion、AppCode、またはAndroidStudio）は、プロジェクトの&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradleラッパー&lt;/a&gt;スクリプトを生成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f92583dde928fd145b3d96c6ab04278084ac9ae1" translate="yes" xml:space="preserve">
          <source>At this time, JavaScript does not support the full Kotlin reflection API. The only supported part of the API is the &lt;code&gt;::class&lt;/code&gt; syntax which allows you to refer to the class of an instance, or the class corresponding to the given type. The value of a &lt;code&gt;::class&lt;/code&gt; expression is a stripped-down &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt; implementation that only supports the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name&quot;&gt;simpleName&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance&quot;&gt;isInstance&lt;/a&gt; members.</source>
          <target state="translated">現時点では、JavaScriptはKotlinリフレクションAPIを完全にはサポートしていません。 APIでサポートされる唯一の部分は、 &lt;code&gt;::class&lt;/code&gt; 構文です。これにより、インスタンスのクラス、または指定されたタイプに対応するクラスを参照できます。 &lt;code&gt;::class&lt;/code&gt; 式の値は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name&quot;&gt;simpleName&lt;/a&gt;および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance&quot;&gt;isInstance&lt;/a&gt;メンバーのみをサポートする、簡略化された&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;実装です。</target>
        </trans-unit>
        <trans-unit id="b1093ec23519e17835b710a2e546cfab3df5cdd9" translate="yes" xml:space="preserve">
          <source>Atomic Kotlin</source>
          <target state="translated">アトミックコトリン</target>
        </trans-unit>
        <trans-unit id="7d3ac242b6d27572d34300c15efdc9401c78d30a" translate="yes" xml:space="preserve">
          <source>Atomic lazy initializer, could be used in frozen objects, freezes initializing lambda, so use very carefully. Also, as with other uses of an &lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; may potentially leak memory, so it is recommended to use &lt;code&gt;atomicLazy&lt;/code&gt; in cases of objects living forever, such as object signletons, or in cases where it's guaranteed not to have cyclical garbage.</source>
          <target state="translated">Atomicレイジー初期化子は、凍結されたオブジェクトで使用でき、ラムダの初期化を凍結するため、注意深く使用してください。また、&lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReferenceの&lt;/a&gt;他の使用と同様に、メモリリークが発生する可能性があるため、オブジェクトサインレットなどの永久に存在するオブジェクトの場合、または循環ガベージがないことが保証されている場合は、 &lt;code&gt;atomicLazy&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3e3527d53d19dec4d8e1e33d95793431aa83f1ca" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子値と凍結：&lt;a href=&quot;-atomic-int/index&quot;&gt;atomics AtomicInt&lt;/a&gt;、&lt;a href=&quot;-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;、&lt;a href=&quot;-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;、および&lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;は、凍結に関して一意の型です。つまり、フリーズされたサブグラフに参加できる一方で、それらは変更操作を提供します。したがって、共有された凍結オブジェクトは、アトミックタイプのフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="ff80b7bb0582527dccb6953af274f0c41a527a8d" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子値と凍結：&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-int/index&quot;&gt;atomics AtomicInt&lt;/a&gt;、&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;、&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;、および&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;は、凍結に関して一意の型です。つまり、フリーズされたサブグラフに参加できる一方で、それらは変更操作を提供します。したがって、共有された凍結オブジェクトは、アトミックタイプのフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="f3220b8f47f19733bfedcab3d792dd6ebcbb2870" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;../-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;../-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;../-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子値と凍結：&lt;a href=&quot;index&quot;&gt;atomics AtomicInt&lt;/a&gt;、&lt;a href=&quot;../-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;、&lt;a href=&quot;../-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;、および&lt;a href=&quot;../-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;は、凍結に関して一意の型です。つまり、フリーズされたサブグラフに参加できる一方で、それらは変更操作を提供します。したがって、共有された凍結オブジェクトは、アトミックタイプのフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d29876e6e5c1007b7487d4800ff3326a46fdfe37" translate="yes" xml:space="preserve">
          <source>AtomicInt</source>
          <target state="translated">AtomicInt</target>
        </trans-unit>
        <trans-unit id="c6711287dc9369302489e77fcf65d42a31c0643c" translate="yes" xml:space="preserve">
          <source>AtomicLong</source>
          <target state="translated">AtomicLong</target>
        </trans-unit>
        <trans-unit id="b10e4647607e2f28f754fdbd9c0031e65869ad2c" translate="yes" xml:space="preserve">
          <source>AtomicNativePtr</source>
          <target state="translated">AtomicNativePtr</target>
        </trans-unit>
        <trans-unit id="cd0e6702ca5c371f1347949dd4a2eec403216573" translate="yes" xml:space="preserve">
          <source>AtomicReference</source>
          <target state="translated">AtomicReference</target>
        </trans-unit>
        <trans-unit id="6b9263c0c045b4b22f5e194c58e2e0998a48c054" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not have sense anymore, and shall be discarded.</source>
          <target state="translated">&lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;によって作成された、以前に切り離されたオブジェクトサブグラフをアタッチします。オブジェクトグラフがアタッチされると、DetachedObjectGraph.stableポインタは無効になり、破棄されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="85360aaf61fcc41844144d2a436522c4272bcaf6" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not have sense anymore, and shall be discarded.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;によって作成された、以前に切り離されたオブジェクトサブグラフをアタッチします。オブジェクトグラフがアタッチされると、DetachedObjectGraph.stableポインタは無効になり、破棄されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e04925abe583687ef35f1c1ca19b4070dadb97b" translate="yes" xml:space="preserve">
          <source>Attempts to access a member on a &lt;code&gt;null&lt;/code&gt; reference of a &lt;a href=&quot;java-interop#null-safety-and-platform-types&quot;&gt;platform type&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;java-interop#null-safety-and-platform-types&quot;&gt;プラットフォームタイプの&lt;/a&gt; &lt;code&gt;null&lt;/code&gt; 参照でメンバーにアクセスしようとします。</target>
        </trans-unit>
        <trans-unit id="f38b115c0558078590578144f222487894baa182" translate="yes" xml:space="preserve">
          <source>Attempts to match the entire &lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire%28kotlin.CharSequence%29%2Finput&quot;&gt;input&lt;/a&gt; CharSequence against the pattern.</source>
          <target state="translated">&lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire%28kotlin.CharSequence%29%2Finput&quot;&gt;入力&lt;/a&gt; CharSequence 全体をパターンと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="0a3992a6a4aa368ee211c9a5ef66edcf44867dac" translate="yes" xml:space="preserve">
          <source>Attributes Common for JVM and JS</source>
          <target state="translated">JVMとJSに共通の属性</target>
        </trans-unit>
        <trans-unit id="19e61d54f451b94d2a537e89732db95c83678a6f" translate="yes" xml:space="preserve">
          <source>Attributes Common for JVM, JS, and JS DCE</source>
          <target state="translated">JVM、JS、JS DCEに共通の属性</target>
        </trans-unit>
        <trans-unit id="df5c20aa22a21e846f82b7e3de20a361b9409ec8" translate="yes" xml:space="preserve">
          <source>Attributes Specific for JS</source>
          <target state="translated">JSに固有の属性</target>
        </trans-unit>
        <trans-unit id="f2b02b6aea1831e52d168cd65816378536e73e3e" translate="yes" xml:space="preserve">
          <source>Attributes Specific for JVM</source>
          <target state="translated">JVMに固有の属性</target>
        </trans-unit>
        <trans-unit id="bc7039e1aba846721ec623985d2d40d6de32dcac" translate="yes" xml:space="preserve">
          <source>Attributes common for JVM and JS</source>
          <target state="translated">JVMとJSに共通の属性</target>
        </trans-unit>
        <trans-unit id="3a04a6e86e3fe7f9d64d5f2e9b362b660d514689" translate="yes" xml:space="preserve">
          <source>Attributes common for kotlinc and kotlin2js</source>
          <target state="translated">kotlinc と kotlin2js で共通の属性</target>
        </trans-unit>
        <trans-unit id="58a9f1cbcc06a3468059fe9cb6b0bd7ec18ece90" translate="yes" xml:space="preserve">
          <source>Attributes specific for JS</source>
          <target state="translated">JSに固有の属性</target>
        </trans-unit>
        <trans-unit id="3e62e54f4e49fd8be02c1ea2299e7299a8d38dee" translate="yes" xml:space="preserve">
          <source>Attributes specific for JVM</source>
          <target state="translated">JVMに固有の属性</target>
        </trans-unit>
        <trans-unit id="4c30a80ce09bd22cb712da2e47c2b70c6a7dbc6d" translate="yes" xml:space="preserve">
          <source>AudioTrack</source>
          <target state="translated">AudioTrack</target>
        </trans-unit>
        <trans-unit id="6075948adfa60c73f74f563f8feb4a98403ab458" translate="yes" xml:space="preserve">
          <source>Augmented assignments</source>
          <target state="translated">拡張された割り当て</target>
        </trans-unit>
        <trans-unit id="834e7a793c079da4161fe6e5f43f722449edfaff" translate="yes" xml:space="preserve">
          <source>Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won't be affected by switching to the defaults in the future)</source>
          <target state="translated">既存のプロジェクトの作者は、プロジェクトで古いコードスタイルを使用することを明示的に宣言することができます (この方法では、将来的にデフォルトのコードスタイルに切り替えてもプロジェクトに影響はありません)。</target>
        </trans-unit>
        <trans-unit id="698d12054509449dda459aba97ce14ac599bf62a" translate="yes" xml:space="preserve">
          <source>Authors of existing projects may choose to migrate to the Kotlin Coding Conventions</source>
          <target state="translated">既存のプロジェクトの著者は、Kotlin コーディング規約への移行を選択することができます。</target>
        </trans-unit>
        <trans-unit id="5b21b0d1957d77cbce2fde42083342b94ff6d7b9" translate="yes" xml:space="preserve">
          <source>AutofreeScope</source>
          <target state="translated">AutofreeScope</target>
        </trans-unit>
        <trans-unit id="ed639df7587daa7f0e2a83a2efdab37263d53336" translate="yes" xml:space="preserve">
          <source>Automatic Configuration</source>
          <target state="translated">自動設定</target>
        </trans-unit>
        <trans-unit id="e62729f2b2555d5d8ac4915829fe367bb5ae7e91" translate="yes" xml:space="preserve">
          <source>Automatically assigned ids are good when coroutines log often and you just need to correlate log records coming from the same coroutine. However, when coroutine is tied to the processing of a specific request or doing some specific background task, it is better to name it explicitly for debugging purposes. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt; context element serves the same function as a thread name. It'll get displayed in the thread name that is executing this coroutine when &lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;debugging mode&lt;/a&gt; is turned on.</source>
          <target state="translated">コルーチンが頻繁にログを記録し、同じコルーチンからのログレコードを関連付ける必要がある場合は、自動的に割り当てられるIDが適しています。ただし、コルーチンが特定の要求の処理または特定のバックグラウンドタスクの実行に関連付けられている場合は、デバッグのために明示的に名前を付けることをお勧めします。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt;コンテキスト要素は、スレッド名と同じ機能を果たします。&lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;デバッグモード&lt;/a&gt;がオンの場合、このコルーチンを実行しているスレッド名に表示されます。</target>
        </trans-unit>
        <trans-unit id="dedf9e0b9e549511e84f9a55d3b042ca74de957a" translate="yes" xml:space="preserve">
          <source>Availability by default</source>
          <target state="translated">デフォルトでの利用可能性</target>
        </trans-unit>
        <trans-unit id="19e5fd6a644635fee9a19be8333a112f913920e1" translate="yes" xml:space="preserve">
          <source>Available values are similar to Maven.</source>
          <target state="translated">利用可能な値はMavenに似ています。</target>
        </trans-unit>
        <trans-unit id="925c5bacdb9d1f8779aa51c640f5ff726fe66e5b" translate="yes" xml:space="preserve">
          <source>Available values are: &lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;amd&lt;/code&gt;, &lt;code&gt;commonjs&lt;/code&gt;, &lt;code&gt;umd&lt;/code&gt;.</source>
          <target state="translated">使用可能な値は、 &lt;code&gt;plain&lt;/code&gt; 、 &lt;code&gt;amd&lt;/code&gt; 、 &lt;code&gt;commonjs&lt;/code&gt; 、 &lt;code&gt;umd&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="163b0272f1313b7d3ab40d92011eb45565a061a9" translate="yes" xml:space="preserve">
          <source>Avoid using multiple labeled returns in a lambda. Consider restructuring the lambda so that it will have a single exit point. If that's not possible or not clear enough, consider converting the lambda into an anonymous function.</source>
          <target state="translated">ラムダで複数のラベル付きリターンを使用しないようにしてください。ラムダを再構築して、単一の終了点を持つようにすることを検討してください。それが不可能な場合や十分に明確でない場合は、ラムダを匿名関数に変換することを検討してください。</target>
        </trans-unit>
        <trans-unit id="f61994132eb4d79c6aaf7ca511db5a42493392ec" translate="yes" xml:space="preserve">
          <source>Avoiding redundant constructs</source>
          <target state="translated">冗長な構成を避ける</target>
        </trans-unit>
        <trans-unit id="d05fb01e0b399387c3a28586f5fd296e2670d6a3" translate="yes" xml:space="preserve">
          <source>BINARY</source>
          <target state="translated">BINARY</target>
        </trans-unit>
        <trans-unit id="40f11d3ad003725179d3a62fbf2b87b2339ec88d" translate="yes" xml:space="preserve">
          <source>BOTTOM_UP</source>
          <target state="translated">BOTTOM_UP</target>
        </trans-unit>
        <trans-unit id="ddfff385b1434a7625c985e9f1d31a3cd0752508" translate="yes" xml:space="preserve">
          <source>BOUNDARY_NEUTRAL</source>
          <target state="translated">BOUNDARY_NEUTRAL</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="1f8df48cbdf6e9bb3b2a296fc43fa4bd2dbc081a" translate="yes" xml:space="preserve">
          <source>Backing Fields</source>
          <target state="translated">バッキングフィールド</target>
        </trans-unit>
        <trans-unit id="ba9525e05855250ce336ac7c2b4ab8bd18b3201d" translate="yes" xml:space="preserve">
          <source>Backing Properties</source>
          <target state="translated">バッキング特性</target>
        </trans-unit>
        <trans-unit id="631fe8fd6cc851cadc4405bb7dd43652aea1c83c" translate="yes" xml:space="preserve">
          <source>BarProp</source>
          <target state="translated">BarProp</target>
        </trans-unit>
        <trans-unit id="69c20ffdfd0584cd6a1117171a685097ea27aca9" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="7243152aff3a19217da0e810a6a6b21b0ed42228" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="3dbb332a4302b9a6be036aad90c3597ea0d446a7" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="64721f5bd5bf9cb87511e3b2df6546bc5436e2d1" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;実装の基本クラス。</target>
        </trans-unit>
        <trans-unit id="5734564e60f6d0468b2eba14396fc3fc48c4b1b3" translate="yes" xml:space="preserve">
          <source>Base interface implicitly implemented by all annotation interfaces. See &lt;a href=&quot;../../../../../../docs/reference/annotations&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on annotations.</source>
          <target state="translated">すべての注釈インターフェースによって暗黙的に実装された基本インターフェース。アノテーションの詳細については、&lt;a href=&quot;../../../../../../docs/reference/annotations&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7fe2c7954cd1b89a648a9cad253d4aec1376c4b5" translate="yes" xml:space="preserve">
          <source>Base interface implicitly implemented by all annotation interfaces. See &lt;a href=&quot;../../../../../docs/reference/annotations&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on annotations.</source>
          <target state="translated">すべての注釈インターフェースによって暗黙的に実装された基本インターフェース。アノテーションの詳細については、&lt;a href=&quot;../../../../../docs/reference/annotations&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c59ba4cae5cc34265ab39cbd2c308fd7a43f2458" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegates of read-only properties.</source>
          <target state="translated">読み取り専用プロパティのプロパティデリゲートを実装するために使用できる基本インターフェースです。</target>
        </trans-unit>
        <trans-unit id="e91c5343b8946f864e8b656029fb53550538fd16" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegates of read-write properties.</source>
          <target state="translated">読み書きプロパティのプロパティデリゲートを実装するために使用できる基本インターフェースです。</target>
        </trans-unit>
        <trans-unit id="64373315f6e979efca96ab611c5eefc9e99553fc" translate="yes" xml:space="preserve">
          <source>Base of the natural logarithms, approximately 2.71828.</source>
          <target state="translated">自然対数のベース、約2.71828。</target>
        </trans-unit>
        <trans-unit id="2afb88d7964181bbca0fa9e83d658a614510bacd" translate="yes" xml:space="preserve">
          <source>Basecamp's Android app is &lt;a href=&quot;https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12&quot;&gt;100% Kotlin code&lt;/a&gt;, and they report a huge difference in programmer happiness and great improvements in work quality and speed.</source>
          <target state="translated">BasecampのAndroidアプリは&lt;a href=&quot;https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12&quot;&gt;100％Kotlinコード&lt;/a&gt;であり、プログラマーの幸福に大きな違いがあり、作業の品質と速度が大幅に改善されていると報告されています。</target>
        </trans-unit>
        <trans-unit id="15e10e999d9f45564ef18325b8fb75ba7dfdf012" translate="yes" xml:space="preserve">
          <source>Basic Syntax</source>
          <target state="translated">基本構文</target>
        </trans-unit>
        <trans-unit id="0683d71248dcbb6ef209d3946391b3451983e5b6" translate="yes" xml:space="preserve">
          <source>Basic Types</source>
          <target state="translated">基本的な種類</target>
        </trans-unit>
        <trans-unit id="095602bb1950fe3e722bc705ecbf84e81ffbfbce" translate="yes" xml:space="preserve">
          <source>Basic interop types</source>
          <target state="translated">基本的なインターロップの種類</target>
        </trans-unit>
        <trans-unit id="31c67e8a76b1546e5e885d2ff65b10a2ec9660ee" translate="yes" xml:space="preserve">
          <source>Basic lifecycle tasks like &lt;code&gt;assemble&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;clean&lt;/code&gt; are also available.</source>
          <target state="translated">&lt;code&gt;assemble&lt;/code&gt; 、 &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;clean&lt;/code&gt; などの基本的なライフサイクルタスクも使用できます。</target>
        </trans-unit>
        <trans-unit id="bff9aacbc4e15b3e4592c41eb9ecf6abc207d35d" translate="yes" xml:space="preserve">
          <source>Basic primitives for creating and suspending coroutines: &lt;a href=&quot;-continuation/index&quot;&gt;Continuation&lt;/a&gt;, &lt;a href=&quot;-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; interfaces, coroutine creation and suspension top-level functions.</source>
          <target state="translated">コルーチンを作成および一時停止するための基本的なプリミティブ：&lt;a href=&quot;-continuation/index&quot;&gt;Continuation&lt;/a&gt;、&lt;a href=&quot;-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;インターフェース、コルーチンの作成および一時停止のトップレベル関数。</target>
        </trans-unit>
        <trans-unit id="3c4f90d8acc9678c79d53f447d2f3f8d0cca60ff" translate="yes" xml:space="preserve">
          <source>Basic primitives for creating and suspending coroutines: &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; interfaces, coroutine creation and suspension top-level functions.</source>
          <target state="translated">コルーチンを作成および一時停止するための基本的なプリミティブ：&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;インターフェース、コルーチンの作成および一時停止のトップレベル関数。</target>
        </trans-unit>
        <trans-unit id="ad5ff5967cd00f1b9a1ebc25862b124009e41b57" translate="yes" xml:space="preserve">
          <source>Basic terms</source>
          <target state="translated">基本的な用語</target>
        </trans-unit>
        <trans-unit id="6af1132d5b79ef2d86c138cc84ba1a7c1c491b45" translate="yes" xml:space="preserve">
          <source>Basically this step is limited to defining the Step Name and the version of Kotlin we need. Tags can be used.</source>
          <target state="translated">基本的にこのステップは、ステップ名と必要なKotlinのバージョンを定義するだけです。タグを使用することができます。</target>
        </trans-unit>
        <trans-unit id="5f93bc71aa464c43e8bc2736eb59d1de19d1609c" translate="yes" xml:space="preserve">
          <source>Basically, these functions do the same: execute a block of code on an object. What's different is how this object becomes available inside the block and what is the result of the whole expression.</source>
          <target state="translated">基本的に、これらの関数は同じことをします:オブジェクト上でコードのブロックを実行します。異なるのは、このオブジェクトがブロック内でどのように利用可能になるのか、そして全体の式の結果が何になるのかということです。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="27757d2e54473d3cf22ab554f90a3e64a22141d2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;T&lt;/code&gt; is used as a parameter type, it can't be covariant, and because it's used as a return type, it can't be contravariant. But if we only want to use the &lt;code&gt;get()&lt;/code&gt; function, we can project it covariantly with &lt;code&gt;out&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; はパラメーター型として使用されるため、共変にすることはできません。また、戻り型として使用されるため、反変にすることもできません。ただし、 &lt;code&gt;get()&lt;/code&gt; 関数のみを使用する場合は、 &lt;code&gt;out&lt;/code&gt; を使用して共変的に投影できます。</target>
        </trans-unit>
        <trans-unit id="2249ad42743195fa21c675ff00b5c5fb81328557" translate="yes" xml:space="preserve">
          <source>Because inline classes may be represented both as the underlying value and as a wrapper, &lt;a href=&quot;equality#referential-equality&quot;&gt;referential equality&lt;/a&gt; is pointless for them and is therefore prohibited.</source>
          <target state="translated">インラインクラスは、基になる値とラッパーの両方として表すことができるため、&lt;a href=&quot;equality#referential-equality&quot;&gt;参照の等価性&lt;/a&gt;はそれらにとって無意味であり、したがって禁止されています。</target>
        </trans-unit>
        <trans-unit id="3b0d8a0e940588e3637555a402e45bcf798e5679" translate="yes" xml:space="preserve">
          <source>Because the scope functions are all quite similar in nature, it's important to understand the differences between them. There are two main differences between each scope function:</source>
          <target state="translated">スコープ機能はどれも似たようなものばかりなので、それぞれの違いを理解しておくことが大切です。各スコープ関数の違いは主に2つあります。</target>
        </trans-unit>
        <trans-unit id="819946568e5b0c80c753dc4720dc81fac4aa4556" translate="yes" xml:space="preserve">
          <source>Because the set of member functions of an object is constrained to be exactly the set of member functions that are declared at compile-time in the object's class and base classes, it's not possible to add new member functions to an object or to a class at runtime, so e.g. &lt;code&gt;p.leave = fun() { println(&quot;Bye!&quot;) }&lt;/code&gt; or anything of the sort won't compile.</source>
          <target state="translated">オブジェクトのメンバー関数のセットは、コンパイル時にオブジェクトのクラスと基本クラスで宣言されたメンバー関数のセットに限定されるため、オブジェクトまたはクラスに新しいメンバー関数を追加することはできません。ランタイムなので、たとえば、 &lt;code&gt;p.leave = fun() { println(&quot;Bye!&quot;) }&lt;/code&gt; またはそのようなものはコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="8e9ea512eb79ca2592dd1a0e0d03d975a2b307ee" translate="yes" xml:space="preserve">
          <source>Because the set of properties of an object is constrained to be exactly the set of properties that are declared at compile-time in the object's class, it's not possible to add new properties to an object or to a class at runtime, so e.g. &lt;code&gt;a.nationality = &quot;Norwegian&quot;&lt;/code&gt; won't compile.</source>
          <target state="translated">オブジェクトのプロパティのセットは、コンパイル時にオブジェクトのクラスで宣言されているプロパティのセットとまったく同じになるように制約されているため、実行時にオブジェクトまたはクラスに新しいプロパティを追加することはできません &lt;code&gt;a.nationality = &quot;Norwegian&quot;&lt;/code&gt; はコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="ad87165569409ac8f63f0b14ac5e97d48b36791d" translate="yes" xml:space="preserve">
          <source>Before Kotlin 1.2, interface members overriding Java-default methods while targeting JVM 1.6 produced a warning on super calls: &lt;code&gt;Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'&lt;/code&gt;. In Kotlin 1.2, there's an &lt;strong&gt;error&lt;/strong&gt; instead, thus requiring any such code to be compiled with JVM target 1.8.</source>
          <target state="translated">Kotlin 1.2より前のバージョンでは、JVM 1.6を対象とするときにJavaのデフォルトメソッドをオーバーライドするインターフェイスメンバーが、スーパーコールに関する警告を生成してい &lt;code&gt;Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'&lt;/code&gt; ます。Kotlin 1.2 では、代わりに&lt;strong&gt;エラーが発生&lt;/strong&gt;するため、そのようなコードはすべてJVMターゲット1.8でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="e306172d559087c1f5488fe960b3bc7709c9e7f1" translate="yes" xml:space="preserve">
          <source>Before explaining what coroutines are, let's briefly review some of the other solutions.</source>
          <target state="translated">コアーチンとは何かを説明する前に、他のソリューションのいくつかを簡単におさらいしておきましょう。</target>
        </trans-unit>
        <trans-unit id="93e8eb7cb48937a7f7cda7db1b5cb495184a3434" translate="yes" xml:space="preserve">
          <source>Before reading this tutorial, please, look through &lt;a href=&quot;http://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html&quot;&gt;Kotlin and JavaScript for Gradle tutorial&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルを読む前に、&lt;a href=&quot;http://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html&quot;&gt;KotlinとJavaScript for Gradleのチュートリアル&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="75adccbc8b940be9de2d4c0d6ecccaba4f5c3ad9" translate="yes" xml:space="preserve">
          <source>Before releasing stable versions, we usually publish a number of preview builds dubbed EAP (for &quot;Early Access Preview&quot;) that let us iterate faster and gather feedback from the community. EAPs of feature releases usually produce binaries that will be later rejected by the stable compiler to make sure that possible bugs in the binary format survive no longer than the preview period. Final Release Candidates normally do not bear this limitation.</source>
          <target state="translated">安定版をリリースする前に、私たちは通常、EAP (Early Access Preview)と呼ばれるいくつかのプレビュービルドを公開します。機能リリースの EAP は通常、バイナリを生成しますが、バイナリ形式のバグの可能性がプレビュー期間を超えないことを確認するために、後に安定版コンパイラによってリジェクトされます。最終リリース候補は通常この制限を受けません。</target>
        </trans-unit>
        <trans-unit id="f41ba730918fd1fccf5221281196b863dfda5c8a" translate="yes" xml:space="preserve">
          <source>Behavioral: a change is said to be behavioral-incompatible if one and the same program demonstrates different behavior before and after applying the change</source>
          <target state="translated">行動:変更は、変更を適用する前と適用した後に異なる行動を示している場合、1つと同じプログラムは、行動的に互換性がないと言われています。</target>
        </trans-unit>
        <trans-unit id="dde6c943c606c3f296f259d96add15cf4fd1cf01" translate="yes" xml:space="preserve">
          <source>Being a statically typed language, Kotlin still has to interoperate with untyped or loosely typed environments, such as the JavaScript ecosystem. To facilitate these use cases, the &lt;code&gt;dynamic&lt;/code&gt; type is available in the language:</source>
          <target state="translated">Kotlinは静的型付け言語であるため、JavaScriptエコシステムなど、型付けされていない、または緩やかに型付けされた環境と相互運用する必要があります。これらの使用例を容易にするために、 &lt;code&gt;dynamic&lt;/code&gt; タイプは言語で利用可能です：</target>
        </trans-unit>
        <trans-unit id="5fb9c683c2e184695c7bfd7451bb04214a1765b5" translate="yes" xml:space="preserve">
          <source>Being abstract is the only way to &quot;escape&quot; from having to implement the members of your interfaces, by offloading the work onto your subclasses - if a subclass wants to be concrete, it must implement all the &quot;missing&quot; members.</source>
          <target state="translated">抽象的であることは、作業をサブクラスにオフロードすることで、インターフェイスのメンバを実装しなければならないことから &quot;逃れる &quot;唯一の方法です-サブクラスが具象化したければ、&quot;足りない &quot;メンバをすべて実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5e543936a5d76f10477f647e41b14d63cbeb8898" translate="yes" xml:space="preserve">
          <source>Below are descriptions of the standard library functions for write operations available on mutable maps.</source>
          <target state="translated">以下に,変異可能な地図上で利用可能な書き込み操作のための標準ライブラリ関数の説明を示します.</target>
        </trans-unit>
        <trans-unit id="23c4bcd44ee8499dae4c538d99a1425ac42187bb" translate="yes" xml:space="preserve">
          <source>Below is a class that can be used for ordering versions that consist of the major and the minor part.</source>
          <target state="translated">以下は、メジャーパートとマイナーパートで構成されるバージョンの順序付けに使用できるクラスです。</target>
        </trans-unit>
        <trans-unit id="01432299b2df31f0ad456d2e3dcfa35df72da82a" translate="yes" xml:space="preserve">
          <source>Below is a diagram of the Kotlin collection interfaces:</source>
          <target state="translated">以下はKotlinコレクションのインターフェースの図です。</target>
        </trans-unit>
        <trans-unit id="c026f6562df5d012fc4b9945fc1f178ec6dd656c" translate="yes" xml:space="preserve">
          <source>Below is an example Counter class that starts at a given value and can be incremented using the overloaded &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">以下は、指定された値で始まり、オーバーロードされた &lt;code&gt;+&lt;/code&gt; 演算子を使用して増分できるCounterクラスの例です。</target>
        </trans-unit>
        <trans-unit id="edbdfb6203a38d292de6b0369ed2a2c9ea024b9a" translate="yes" xml:space="preserve">
          <source>Below please find explanations of how the modifiers apply to different types of declaring scopes.</source>
          <target state="translated">以下では、さまざまなタイプの宣言スコープに修飾子がどのように適用されるかを説明しています。</target>
        </trans-unit>
        <trans-unit id="a65fe305f30ed3d5d015c1d8ac222cdc8dd1b064" translate="yes" xml:space="preserve">
          <source>Besides calling &lt;code&gt;run&lt;/code&gt; on a receiver object, you can use it as a non-extension function. Non-extension &lt;code&gt;run&lt;/code&gt; lets you execute a block of several statements where an expression is required.</source>
          <target state="translated">レシーバーオブジェクトで &lt;code&gt;run&lt;/code&gt; を呼び出す以外に、それを非拡張関数として使用できます。非拡張 &lt;code&gt;run&lt;/code&gt; では、式が必要ないくつかのステートメントのブロックを実行できます。</target>
        </trans-unit>
        <trans-unit id="4d8f399439321d69bb3aae1bdb5a53f11ee0da4c" translate="yes" xml:space="preserve">
          <source>Besides converting existing functionality to Kotlin, you can also enjoy the Kotlin specific support. For instance, you can declare tables as &lt;a href=&quot;../reference/data-classes&quot;&gt;data classes&lt;/a&gt;:</source>
          <target state="translated">既存の機能をKotlinに変換するだけでなく、Kotlin固有のサポートも利用できます。たとえば、テーブルを&lt;a href=&quot;../reference/data-classes&quot;&gt;データクラス&lt;/a&gt;として宣言できます。</target>
        </trans-unit>
        <trans-unit id="112397f331b5572dd703b4ebc9b4678c9fc92667" translate="yes" xml:space="preserve">
          <source>Better code generation</source>
          <target state="translated">より良いコード生成</target>
        </trans-unit>
        <trans-unit id="daf5f256962e0bce3abff7235d6469a618bc9f29" translate="yes" xml:space="preserve">
          <source>Beware that dividing an integer by an integer produces an integer (like in Python 2, but unlike Python 3). If you want a floating-point result, at least one of the operands needs to be a floating-point number (and recall that like in most languages, floating-point operations are generally imprecise):</source>
          <target state="translated">整数を整数で割ると整数が生成されることに注意してください(Python 2と同様ですが、Python 3とは異なります)。浮動小数点の結果を得たい場合、オペランドの少なくとも1つは浮動小数点数でなければなりません (多くの言語と同様に、浮動小数点演算は一般的に不正確であることを覚えておいてください)。</target>
        </trans-unit>
        <trans-unit id="9ee4e69876a3afeb1c1bb0bcf29fd55cda91de34" translate="yes" xml:space="preserve">
          <source>Beware using the annotated API especially if you're developing a library, since your library might become binary incompatible with the future versions of the standard library.</source>
          <target state="translated">特にライブラリを開発している場合は、注釈付きAPIを使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="c66ee5bbf7e4118187340873748e37adbb358aa2" translate="yes" xml:space="preserve">
          <source>Binaries have a set of properties allowing one to configure them. The following options are available:</source>
          <target state="translated">バイナリには、それらを設定するためのプロパティのセットがあります。以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="72a460c436692a1a8c70072c89565ca2220867ee" translate="yes" xml:space="preserve">
          <source>Binaries: &lt;code&gt;0b00001011&lt;/code&gt;</source>
          <target state="translated">バイナリ： &lt;code&gt;0b00001011&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c098d684da3e34376aa8f819e499d4e82c11310f" translate="yes" xml:space="preserve">
          <source>Binary compatibility warnings</source>
          <target state="translated">バイナリ互換性に関する警告</target>
        </trans-unit>
        <trans-unit id="b26f6c63a335a90adeeab8f4d5013e4f2efe2bec" translate="yes" xml:space="preserve">
          <source>Binary operations</source>
          <target state="translated">バイナリ演算</target>
        </trans-unit>
        <trans-unit id="f2a6d55277fe59460ac595b466dfa5b222b190df" translate="yes" xml:space="preserve">
          <source>Binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; and infix functions &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;shl&lt;/code&gt;, &lt;code&gt;shr&lt;/code&gt;;</source>
          <target state="translated">二項演算子 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; と中置機能 &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;xor&lt;/code&gt; 、 &lt;code&gt;shl&lt;/code&gt; 、 &lt;code&gt;shr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20b00ae38326b542aedf0b482b6afe3e749095cb" translate="yes" xml:space="preserve">
          <source>Binary representation:</source>
          <target state="translated">バイナリ表現。</target>
        </trans-unit>
        <trans-unit id="3dfefc606c6b6cb785b2fc9edff50a1793a08ceb" translate="yes" xml:space="preserve">
          <source>Binary search in sorted lists</source>
          <target state="translated">ソートされたリストのバイナリ検索</target>
        </trans-unit>
        <trans-unit id="effd37854dc15cf0fa524eebd650b9512c09f83b" translate="yes" xml:space="preserve">
          <source>Binary search with &lt;em&gt;comparison&lt;/em&gt; function lets you find elements without providing explicit search values. Instead, it takes a comparison function mapping elements to &lt;code&gt;Int&lt;/code&gt; values and searches for the element where the function returns zero. The list must be sorted in the ascending order according to the provided function; in other words, the return values of comparison must grow from one list element to the next one.</source>
          <target state="translated">&lt;em&gt;比較&lt;/em&gt;機能付きのバイナリ検索では、明示的な検索値を指定せずに要素を検索できます。代わりに、要素を &lt;code&gt;Int&lt;/code&gt; 値にマッピングする比較関数を受け取り、関数がゼロを返す要素を検索します。リストは、提供された関数に従って昇順でソートする必要があります。つまり、比較の戻り値は、あるリスト要素から次のリスト要素へと成長する必要があります。</target>
        </trans-unit>
        <trans-unit id="db5f4be53358b6d2931c1b26250a31285c182825" translate="yes" xml:space="preserve">
          <source>Binary: two binary artifacts are said to be binary-compatible if interchanging them doesn't lead to loading or linkage errors</source>
          <target state="translated">バイナリ:2つのバイナリアーチファクトは、それらを交換することがロードまたはリンケージエラーにつながらない場合は、バイナリ互換性があると言われています。</target>
        </trans-unit>
        <trans-unit id="ef29ec8d1db838c8e1a48ba8918f31da08b74947" translate="yes" xml:space="preserve">
          <source>BinaryType</source>
          <target state="translated">BinaryType</target>
        </trans-unit>
        <trans-unit id="2b237840996cac995b70318f64835abec7e9398b" translate="yes" xml:space="preserve">
          <source>Bit width</source>
          <target state="translated">ビット幅</target>
        </trans-unit>
        <trans-unit id="f8cd7716f7a5997d4efd153b8de6bda8ac575d3b" translate="yes" xml:space="preserve">
          <source>BitSet</source>
          <target state="translated">BitSet</target>
        </trans-unit>
        <trans-unit id="a36a25a1cccb68c7c87fcd879bbb216973e2de75" translate="yes" xml:space="preserve">
          <source>Bits</source>
          <target state="translated">Bits</target>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="e31b904ea0486cad654bda29fbbbc9b45336239c" translate="yes" xml:space="preserve">
          <source>BlobPropertyBag</source>
          <target state="translated">BlobPropertyBag</target>
        </trans-unit>
        <trans-unit id="70af3238de42da66beb5f354425347f373dca837" translate="yes" xml:space="preserve">
          <source>Block Tags</source>
          <target state="translated">ブロックタグ</target>
        </trans-unit>
        <trans-unit id="b16d07cec726bb8e19bba1a595f5b311f2f811e3" translate="yes" xml:space="preserve">
          <source>Block pointer type</source>
          <target state="translated">ブロックポインタ型</target>
        </trans-unit>
        <trans-unit id="f3b461348854c06872102b7c71825cb31ea832d9" translate="yes" xml:space="preserve">
          <source>Blocks execution until the future is ready.</source>
          <target state="translated">将来の準備が整うまで実行をブロックします。</target>
        </trans-unit>
        <trans-unit id="0b9d2b2362bc33581ba11fddcb0cf0590ebd3a7a" translate="yes" xml:space="preserve">
          <source>Blog</source>
          <target state="translated">Blog</target>
        </trans-unit>
        <trans-unit id="718a7e8a582e982e452dd5700addba4ffc1cf40d" translate="yes" xml:space="preserve">
          <source>Body</source>
          <target state="translated">Body</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="bcac21aba714064e6b64ee7f175904786fbaa767" translate="yes" xml:space="preserve">
          <source>Boolean expressions are formed with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; for logical AND, &lt;code&gt;||&lt;/code&gt; for logical OR, and &lt;code&gt;!&lt;/code&gt; for logical NOT. As in Python, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are short-circuiting: they only evaluate the right-hand side if it's necessary to determine the outcome. Beware that the keywords &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; also exist, but they only perform &lt;em&gt;bitwise&lt;/em&gt; operations on integral values, and they do not short-circuit.</source>
          <target state="translated">ブール式は、論理ANDの &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; で形成されます &lt;code&gt;||&lt;/code&gt; 論理OR、および &lt;code&gt;!&lt;/code&gt; 論理NOTの場合。 Pythonと同様、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;||&lt;/code&gt; ショートサーキットです：結果を決定する必要がある場合のみ、右側を評価します。キーワードことに注意してください &lt;code&gt;and&lt;/code&gt; し、 &lt;code&gt;or&lt;/code&gt; さらには存在するが、彼らは唯一の実行&lt;em&gt;ビット単位の&lt;/em&gt;整数値に対して操作を、彼らは短絡しません。</target>
        </trans-unit>
        <trans-unit id="61a088b0a156000801673ebe9758a3bc5e658a93" translate="yes" xml:space="preserve">
          <source>BooleanArray</source>
          <target state="translated">BooleanArray</target>
        </trans-unit>
        <trans-unit id="94ed6ad64eddcf16d738b1b685887dc56574c0f0" translate="yes" xml:space="preserve">
          <source>BooleanIterator</source>
          <target state="translated">BooleanIterator</target>
        </trans-unit>
        <trans-unit id="a07abf481bfcf1e7306014f6c27bb8804d578197" translate="yes" xml:space="preserve">
          <source>BooleanVar</source>
          <target state="translated">BooleanVar</target>
        </trans-unit>
        <trans-unit id="590cf12042dbc6ae4ccebcc55f169cf10900e4f8" translate="yes" xml:space="preserve">
          <source>BooleanVarOf</source>
          <target state="translated">BooleanVarOf</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="2b4e4ca9dd13df33b1f274e08ff704dbb23d3e35" translate="yes" xml:space="preserve">
          <source>Booleans are boxed if a nullable reference is needed.</source>
          <target state="translated">ブーリアンは、ヌル可能な参照が必要な場合にはボックスに入れられます。</target>
        </trans-unit>
        <trans-unit id="6a192a826b5af31fd1aa88b2c770d9045a0a1def" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html&quot;&gt;Channel()&lt;/a&gt; factory function and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;produce&lt;/a&gt; builder take an optional &lt;code&gt;capacity&lt;/code&gt; parameter to specify &lt;em&gt;buffer size&lt;/em&gt;. Buffer allows senders to send multiple elements before suspending, similar to the &lt;code&gt;BlockingQueue&lt;/code&gt; with a specified capacity, which blocks when buffer is full.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html&quot;&gt;Channel（）&lt;/a&gt;ファクトリ関数と&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;プロデュース&lt;/a&gt;ビルダーはどちらも、オプションの &lt;code&gt;capacity&lt;/code&gt; パラメーターを使用して&lt;em&gt;バッファーサイズ&lt;/em&gt;を指定します。バッファは、送信者がサスペンド前に複数の要素を送信できるようにします。これは、指定された容量の &lt;code&gt;BlockingQueue&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="56678bcd37fdbd67057a57fd3f8c1ac179f5ab13" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;join&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt; wait for all finalization actions to complete, so the example above produces the following output:</source>
          <target state="translated">どちらも&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;参加&lt;/a&gt;して&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt;上記の例は次の出力が生成されて、完全にすべてのファイナライズアクション待ちを：</target>
        </trans-unit>
        <trans-unit id="aaa3ae0941c1c63e8404db11c2c5822ea8776ac1" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このコレクション内の要素の数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="084d0f42a2f1fd2b3233b8ecf6d5d045540a6653" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このコレクション内の要素の数より大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="f0718785d7a21f217dfdae0e623137151eb06714" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このシーケンスの要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="e153c00b80d52af9d9d30cb6047f86b6a26f5f37" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、このシーケンスの要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="67539940f5aa420fb9707f75cbc306cea0396d84" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="cbced784a4e4808737c5eb9216375acd25dc2730" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="36b84c2b0b283f28a914a68615f6871a6a9ceceb" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;サイズ&lt;/a&gt;と&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;ステップ&lt;/a&gt;はどちらも正である必要があり、この文字シーケンスの要素数よりも大きくすることができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
