<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="976d63a365da3100af6d9872785a7fc0f872d0e7" translate="yes" xml:space="preserve">
          <source>For more information about configuring Gradle to target JavaScript please see &lt;a href=&quot;getting-started-gradle/getting-started-with-gradle&quot;&gt;Getting Started with Gradle&lt;/a&gt;.</source>
          <target state="translated">JavaScriptをターゲットとするようにGradleを構成する方法の詳細については、&lt;a href=&quot;getting-started-gradle/getting-started-with-gradle&quot;&gt;「Gradleスタートガイド」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c6ff59fd7a11f10a9972c2d13b56cf93a2a27bb8" translate="yes" xml:space="preserve">
          <source>For more information about operations on collections in Kotlin, see &lt;a href=&quot;collection-operations&quot;&gt;Collection Operations Overview&lt;/a&gt;.</source>
          <target state="translated">Kotlinでの&lt;a href=&quot;collection-operations&quot;&gt;コレクションの操作の&lt;/a&gt;詳細については、「コレクション操作の概要」を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f6f131a11bc8f9aee46dcc694fdd53ec967e63c" translate="yes" xml:space="preserve">
          <source>For more information about the different types of module outputs, please see &lt;a href=&quot;../working-with-modules/working-with-modules&quot;&gt;Working with Modules&lt;/a&gt;</source>
          <target state="translated">さまざまなタイプのモジュール出力の詳細については&lt;a href=&quot;../working-with-modules/working-with-modules&quot;&gt;、モジュールの操作&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1a670969bcee8de36de21a8b92e43600ead5d941" translate="yes" xml:space="preserve">
          <source>For more information on classes and overriding members see &lt;a href=&quot;classes&quot;&gt;Classes&lt;/a&gt; and &lt;a href=&quot;classes#inheritance&quot;&gt;Inheritance&lt;/a&gt;.</source>
          <target state="translated">クラスとオーバーライドメンバーの詳細については、「&lt;a href=&quot;classes&quot;&gt;クラス&lt;/a&gt;と&lt;a href=&quot;classes#inheritance&quot;&gt;継承&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f493af417c0883b703c110e5ef635256b757a3b" translate="yes" xml:space="preserve">
          <source>For more information on generic functions see &lt;a href=&quot;generics&quot;&gt;Generics&lt;/a&gt;.</source>
          <target state="translated">ジェネリック関数の詳細については、&lt;a href=&quot;generics&quot;&gt;ジェネリックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="303071782df80a3b92a14b04beb4abef6a8308f2" translate="yes" xml:space="preserve">
          <source>For more information on the output generated and the instructions for running the application, please see &lt;a href=&quot;../kotlin-to-javascript/kotlin-to-javascript&quot;&gt;Kotlin to JavaScript&lt;/a&gt;</source>
          <target state="translated">生成された出力とアプリケーションの実行手順の詳細については、&lt;a href=&quot;../kotlin-to-javascript/kotlin-to-javascript&quot;&gt;Kotlin to JavaScript&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="bc5273660a5131db46416a5fa7a3772f1b529324" translate="yes" xml:space="preserve">
          <source>For more information on the output generated please see &lt;a href=&quot;../kotlin-to-javascript/kotlin-to-javascript&quot;&gt;Kotlin to JavaScript&lt;/a&gt;</source>
          <target state="translated">生成された出力の詳細については、&lt;a href=&quot;../kotlin-to-javascript/kotlin-to-javascript&quot;&gt;Kotlin to JavaScript&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="daef8b2b4fbdfb10968e7ab8682260feb7d3ad24" translate="yes" xml:space="preserve">
          <source>For more information regarding Coroutines and the different possibilities, check out the reference guide.</source>
          <target state="translated">コルチンや様々な可能性についての詳細は、リファレンスガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b15215288bf8795d3069346c3f31ed3415c1f91f" translate="yes" xml:space="preserve">
          <source>For more information, please refer to the &lt;a href=&quot;coroutines-overview&quot;&gt;coroutine documentation&lt;/a&gt; and &lt;a href=&quot;../tutorials/coroutines/coroutines-basic-jvm&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;coroutines-overview&quot;&gt;コルーチンのドキュメント&lt;/a&gt;と&lt;a href=&quot;../tutorials/coroutines/coroutines-basic-jvm&quot;&gt;チュートリアル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6eeee62282cd6eaa33fb5a1d8b69933a3a3935f0" translate="yes" xml:space="preserve">
          <source>For more information, please refer to the &lt;a href=&quot;multiplatform&quot;&gt;Multiplatform Programming documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;multiplatform&quot;&gt;マルチプラットフォームプログラミングのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="da87ece52c9509e3c187c92dff775cc4483c1807" translate="yes" xml:space="preserve">
          <source>For more specific cases, there are the functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/reduce&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt; that apply the provided operation to the collection elements sequentially and return the accumulated result. The operation takes two arguments: the previously accumulated value and the collection element.</source>
          <target state="translated">より具体的なケースとして、提供された操作をコレクション要素に順次適用して累積結果を返す関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/reduce&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;があります。操作は2つの引数を取ります。以前に累積された値とコレクション要素です。</target>
        </trans-unit>
        <trans-unit id="ab0c4227fc15976eb92034e00419c20be38f5f2a" translate="yes" xml:space="preserve">
          <source>For multiple interfaces, the superclass constructor call should be located first and then each interface should be located in a different line:</source>
          <target state="translated">複数のインタフェースについては、スーパークラスのコンストラクタの呼び出しを最初に配置し、その後、各インタフェースを別の行に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="bb77545005b94c54066e9d9c8881eb5ff714309f" translate="yes" xml:space="preserve">
          <source>For mutable collections, there are also &lt;em&gt;write operations&lt;/em&gt; that change the collection state. Such operations include adding, removing, and updating elements. Write operations are listed in the &lt;a href=&quot;collection-write&quot;&gt;Write operations&lt;/a&gt; and corresponding sections of &lt;a href=&quot;list-operations#list-write-operations&quot;&gt;List specific operations&lt;/a&gt; and &lt;a href=&quot;map-operations#map-write-operations&quot;&gt;Map specific operations&lt;/a&gt;.</source>
          <target state="translated">変更可能なコレクションの場合、コレクションの状態を変更する&lt;em&gt;書き込み操作&lt;/em&gt;もあります。このような操作には、要素の追加、削除、更新が含まれます。書き込み操作は、&lt;a href=&quot;collection-write&quot;&gt;書き込み操作&lt;/a&gt;と、&lt;a href=&quot;list-operations#list-write-operations&quot;&gt;特定の操作&lt;/a&gt;のリストおよび&lt;a href=&quot;map-operations#map-write-operations&quot;&gt;特定の操作のマップの&lt;/a&gt;対応するセクションにリストされています。</target>
        </trans-unit>
        <trans-unit id="2264476b9fddb2a93fca3dc48b27fc02f976f3a9" translate="yes" xml:space="preserve">
          <source>For other arguments that have an array type, you need to use the array literal syntax (since Kotlin 1.2) or &lt;code&gt;arrayOf(...)&lt;/code&gt;:</source>
          <target state="translated">配列型を持つ他の引数については、配列リテラル構文（Kotlin 1.2以降）または &lt;code&gt;arrayOf(...)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="db60979da7e995256bb86e6d0277cb6571c18a2c" translate="yes" xml:space="preserve">
          <source>For pattern syntax reference see &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot;&gt;Pattern&lt;/a&gt;.</source>
          <target state="translated">パターン構文リファレンスについては、&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot;&gt;パターンを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c6f6d754aa9e873410fd58f825ac72cd1786f800" translate="yes" xml:space="preserve">
          <source>For pattern syntax reference see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions&quot;&gt;MDN RegExp&lt;/a&gt; and &lt;a href=&quot;https://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot;&gt;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&lt;/a&gt;.</source>
          <target state="translated">パターン構文のリファレンスについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions&quot;&gt;MDN RegExp&lt;/a&gt;および&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot;&gt;http://www.w3schools.com/jsref/jsref_obj_regexp.aspを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82d4a54b61c92df737ecca3a9a2524b44eaf0db8" translate="yes" xml:space="preserve">
          <source>For properties with an initializer, if the initializer is long, add a line break after the equals sign and indent the initializer by four spaces:</source>
          <target state="translated">初期化子を持つプロパティの場合、初期化子が長い場合は、等号の後に改行を追加し、初期化子を4つのスペースでインデントします。</target>
        </trans-unit>
        <trans-unit id="9cdedbb82fb399140c8019e32038b4c4f46e6185" translate="yes" xml:space="preserve">
          <source>For properties with the getter defined as an expression body, the property type can now be omitted:</source>
          <target state="translated">ゲッターが式ボディとして定義されているプロパティでは、プロパティの型を省略できるようになりました。</target>
        </trans-unit>
        <trans-unit id="1513b20a53870cfed16fd2ad458f8813cde7ede7" translate="yes" xml:space="preserve">
          <source>For release build it embeds bitcode as data.</source>
          <target state="translated">リリースビルドではビットコードをデータとして埋め込んでいます。</target>
        </trans-unit>
        <trans-unit id="6714a4c30aef88bcbb0d4874a73165632b296c1c" translate="yes" xml:space="preserve">
          <source>For removing multiple elements at once, there are the following functions :</source>
          <target state="translated">複数の要素を一度に削除するには、以下の機能があります。</target>
        </trans-unit>
        <trans-unit id="1b7f712789e7f5f5055614d3977263a4adb68a2d" translate="yes" xml:space="preserve">
          <source>For retrieving a value from a map, you must provide its key as an argument of the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-map/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; function. The shorthand &lt;code&gt;[key]&lt;/code&gt; syntax is also supported. If the given key is not found, it returns &lt;code&gt;null&lt;/code&gt;. There is also the function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/get-value&quot;&gt;&lt;code&gt;getValue()&lt;/code&gt;&lt;/a&gt; which has slightly different behavior: it throws an exception if the key is not found in the map. Additionally, you have two more options to handle the key absence:</source>
          <target state="translated">マップから値を取得するには、キーを&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-map/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;関数の引数として提供する必要があります。略記 &lt;code&gt;[key]&lt;/code&gt; 構文もサポートされています。指定されたキーが見つからない場合は、 &lt;code&gt;null&lt;/code&gt; を返します。わずかに異なる動作を持つ関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/get-value&quot;&gt; &lt;code&gt;getValue()&lt;/code&gt; &lt;/a&gt;もあります。キーがマップで見つからない場合、例外をスローします。さらに、キーの不在を処理するためのオプションがさらに2つあります。</target>
        </trans-unit>
        <trans-unit id="c741843158ffd3467a54ce4487c7800f9e54c35c" translate="yes" xml:space="preserve">
          <source>For retrieving an element at a specific position, there is the function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/element-at&quot;&gt;&lt;code&gt;elementAt()&lt;/code&gt;&lt;/a&gt;. Call it with the integer number as an argument, and you'll receive the collection element at the given position. The first element has the position &lt;code&gt;0&lt;/code&gt;, and the last one is &lt;code&gt;(size - 1)&lt;/code&gt;.</source>
          <target state="translated">特定の位置にある要素を取得するために、関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/element-at&quot;&gt; &lt;code&gt;elementAt()&lt;/code&gt; があり&lt;/a&gt;ます。整数を引数としてそれを呼び出すと、指定された位置にコレクション要素を受け取ります。最初の要素の位置は &lt;code&gt;0&lt;/code&gt; で、最後の要素は &lt;code&gt;(size - 1)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b392cd856b69f2efecba62da2529ccf97edcdc2b" translate="yes" xml:space="preserve">
          <source>For some reason you want to rename declaration, e.g. there's common term in JavaScript for a concept provided by the declaration, which in uncommon in Kotlin.</source>
          <target state="translated">何らかの理由で宣言の名前を変更したい場合、例えば、JavaScriptでは宣言で提供される概念のための共通語がありますが、Kotlinでは一般的ではありません。</target>
        </trans-unit>
        <trans-unit id="8158db5e8b246ddad0b2dfbfdebcbf1b90125c6f" translate="yes" xml:space="preserve">
          <source>For some specific use cases, creating a custom compilation may be required. This can be done within the target's &lt;code&gt;compilations&lt;/code&gt; domain object collection. Note that the dependencies need to be set up manually for all custom compilations, and the usage of a custom compilation's outputs is up to the build author. For example, consider a custom compilation for integration tests of a &lt;code&gt;jvm()&lt;/code&gt; target:</source>
          <target state="translated">特定の使用例では、カスタムコンパイルの作成が必要になる場合があります。これは、ターゲットの &lt;code&gt;compilations&lt;/code&gt; ドメインオブジェクトコレクション内で実行できます。すべてのカスタムコンパイルに対して依存関係を手動で設定する必要があることに注意してください。カスタムコンパイルの出力の使用法はビルド作成者次第です。たとえば、 &lt;code&gt;jvm()&lt;/code&gt; ターゲットの統合テストのカスタムコンパイルを考えてみます。</target>
        </trans-unit>
        <trans-unit id="8f20399dce7cafc92e613f156c508b5fbaf82b80" translate="yes" xml:space="preserve">
          <source>For sorting in custom orders or sorting non-comparable objects, there are the functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-by&quot;&gt;&lt;code&gt;sortedBy()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-by-descending&quot;&gt;&lt;code&gt;sortedByDescending()&lt;/code&gt;&lt;/a&gt;. They take a selector function that maps collection elements to &lt;code&gt;Comparable&lt;/code&gt; values and sort the collection in natural order of that values.</source>
          <target state="translated">カスタムオーダーでソートや非同等のオブジェクトをソートするために、機能がある&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-by&quot;&gt; &lt;code&gt;sortedBy()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-by-descending&quot;&gt; &lt;code&gt;sortedByDescending()&lt;/code&gt; &lt;/a&gt;。それらは、コレクション要素を &lt;code&gt;Comparable&lt;/code&gt; 値にマップするセレクター関数を取り、その値の自然な順序でコレクションをソートします。</target>
        </trans-unit>
        <trans-unit id="06c12102ea94e6d5c34aa4e1cb45ef7a132aadee" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;@JvmDefault&lt;/code&gt; annotation to take effect, the interface must be compiled with an &lt;code&gt;-Xjvm-default&lt;/code&gt; argument. Depending on the case of adding the annotation, specify one of the argument values:</source>
          <target state="translated">&lt;code&gt;@JvmDefault&lt;/code&gt; の注釈を有効にするには、インターフェイスがしてコンパイルする必要があります &lt;code&gt;-Xjvm-default&lt;/code&gt; 引数。注釈を追加する場合に応じて、引数値の1つを指定します。</target>
        </trans-unit>
        <trans-unit id="da62afa580a98e0eb59438fc6f192b8b9be1b649" translate="yes" xml:space="preserve">
          <source>For the &lt;em&gt;prefix&lt;/em&gt; forms &lt;code&gt;++a&lt;/code&gt; and &lt;code&gt;--a&lt;/code&gt; resolution works the same way, and the effect is:</source>
          <target state="translated">以下のための&lt;em&gt;接頭辞&lt;/em&gt;フォーム &lt;code&gt;++a&lt;/code&gt; と &lt;code&gt;--a&lt;/code&gt; 解像度は同じように動作し、効果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1f7fafe2033f8e575628eabc01789127498dbf01" translate="yes" xml:space="preserve">
          <source>For the CLI, you can compile using gradle as stated in the README (and if you get errors, you can try to do a &lt;code&gt;./gradlew clean&lt;/code&gt;):</source>
          <target state="translated">CLIの場合、READMEに記載されているように、 &lt;code&gt;./gradlew clean&lt;/code&gt; を使用してコンパイルできます（エラーが発生した場合は、。/ gradlew cleanを実行してみてください）。</target>
        </trans-unit>
        <trans-unit id="6b5978de1c0c3fb2925d795946fd3b784f2b5a41" translate="yes" xml:space="preserve">
          <source>For the assignment operations, e.g. &lt;code&gt;a += b&lt;/code&gt;, the compiler performs the following steps:</source>
          <target state="translated">代入演算（例： &lt;code&gt;a += b&lt;/code&gt; では、コンパイラーは次のステップを実行します。</target>
        </trans-unit>
        <trans-unit id="539d8e13c53ef4abbcf027a9d0068c7cc4e5769d" translate="yes" xml:space="preserve">
          <source>For the details on &lt;code&gt;plus&lt;/code&gt; and &lt;code&gt;minus&lt;/code&gt; operators for maps, see &lt;a href=&quot;map-operations&quot;&gt;Map Specific Operations&lt;/a&gt;. The &lt;a href=&quot;operator-overloading#assignments&quot;&gt;augmented assignment operators&lt;/a&gt;&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/plus-assign&quot;&gt;&lt;code&gt;plusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;+=&lt;/code&gt;) and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt;&lt;code&gt;minusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;-=&lt;/code&gt;) are also defined for collections. However, for read-only collections, they actually use the &lt;code&gt;plus&lt;/code&gt; or &lt;code&gt;minus&lt;/code&gt; operators and try to assign the result to the same variable. Thus, they are available only on &lt;code&gt;var&lt;/code&gt; read-only collections. For mutable collections, they modify the collection if it's a &lt;code&gt;val&lt;/code&gt;. For more details see &lt;a href=&quot;collection-write&quot;&gt;Collection Write Operations&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;plus&lt;/code&gt; と &lt;code&gt;minus&lt;/code&gt; の演算子のマップのために、参照&lt;a href=&quot;map-operations&quot;&gt;マップ具体的な操作&lt;/a&gt;。&lt;a href=&quot;operator-overloading#assignments&quot;&gt;増強代入演算子&lt;/a&gt;&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/plus-assign&quot;&gt; &lt;code&gt;plusAssign&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;+=&lt;/code&gt; ）と&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt; &lt;code&gt;minusAssign&lt;/code&gt; は、&lt;/a&gt;（ &lt;code&gt;-=&lt;/code&gt; ）また、コレクションのために定義されています。ただし、読み取り専用のコレクションの場合、実際には &lt;code&gt;plus&lt;/code&gt; または &lt;code&gt;minus&lt;/code&gt; 演算子を使用し、結果を同じ変数に割り当てようとします。したがって、これらは &lt;code&gt;var&lt;/code&gt; 読み取り専用コレクションでのみ使用できます。変更可能なコレクションの場合、 &lt;code&gt;val&lt;/code&gt; であればコレクションを変更します。詳細については、&lt;a href=&quot;collection-write&quot;&gt;コレクションの書き込み操作を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="99ae6cfe21ef096005ae65ac105caaba34a120b7" translate="yes" xml:space="preserve">
          <source>For the list of group-and-fold operations available, see the &lt;a href=&quot;#extension-functions&quot;&gt;extension functions&lt;/a&gt; for &lt;code&gt;Grouping&lt;/code&gt;.</source>
          <target state="translated">使用可能なグループ化および折りたたみ操作のリストについては、 &lt;code&gt;Grouping&lt;/code&gt; &lt;a href=&quot;#extension-functions&quot;&gt;拡張関数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3d997519fcd24d20831bd6eeaa31e67ced9c303f" translate="yes" xml:space="preserve">
          <source>For the operations in this table, the compiler just resolves the expression in the &lt;em&gt;Translated to&lt;/em&gt; column.</source>
          <target state="translated">この表の操作の場合、コンパイラーは「&lt;em&gt;変換先」&lt;/em&gt;列の式を解決するだけです。</target>
        </trans-unit>
        <trans-unit id="fbe0069c2060f259a02cd894aa164e3831bd4221" translate="yes" xml:space="preserve">
          <source>For the opposite conversion, to turn a pointer into a by-value variable, we call the &lt;code&gt;readValue()&lt;/code&gt; extension function:</source>
          <target state="translated">逆の変換では、ポインターを値 &lt;code&gt;readValue()&lt;/code&gt; 変数に変換するために、readValue（）拡張関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8f7d074241fa549a9ea4f9b661cdc64b28a3c053" translate="yes" xml:space="preserve">
          <source>For these purposes &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt; can be used. It is similar to a regular &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;Job&lt;/a&gt; with the only exception that cancellation is propagated only downwards. It is easy to demonstrate with an example:</source>
          <target state="translated">これらの目的のために、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt;を使用できます。これは通常の&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;ジョブに&lt;/a&gt;似ていますが、キャンセルが下方にのみ伝搬されるという点が異なります。例を使用して簡単に説明できます。</target>
        </trans-unit>
        <trans-unit id="df1761b46b93e575c969c1e93c41c9c609214097" translate="yes" xml:space="preserve">
          <source>For this reason, you should probably not use a function with side effects as a default value initializer, as the side effects will happen on every call. If you just reference a variable instead of calling a function, the same variable will be read every time the function is invoked: &lt;code&gt;numbers: MutableList&amp;lt;Int&amp;gt; = myMutableList&lt;/code&gt;. If the variable is immutable, each call will see the same value (but if the value itself is mutable, it might change between calls), and if the variable is mutable, each call will see the current value of the variable. Needless to say, these situations easily lead to confusion, so a default value initializer should be either a constant or a function call that always produces a new object with the same value.</source>
          <target state="translated">このため、副作用のある関数はデフォルト値の初期化子として使用しないでください。副作用はすべての呼び出しで発生するためです。関数を呼び出すのではなく変数を参照するだけの場合、関数が呼び出されるたびに同じ変数が読み込まれ &lt;code&gt;numbers: MutableList&amp;lt;Int&amp;gt; = myMutableList&lt;/code&gt; 。変数が不変の場合、各呼び出しは同じ値を参照します（ただし、値自体が変更可能な場合、呼び出し間で変更される可能性があります）。変数が変更可能な場合、各呼び出しは変数の現在の値を参照します。言うまでもなく、これらの状況は簡単に混乱を招くため、デフォルト値のイニシャライザは、定数または常に同じ値の新しいオブジェクトを生成する関数呼び出しのいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="d3b653bd00b4026d91ae27cf19e170d9e5fafb1f" translate="yes" xml:space="preserve">
          <source>For this tutorial, we want to minimize Android project changes, so we add an ordinary dependency from that project to the &lt;code&gt;SharedCode&lt;/code&gt; project. It is also possible to use the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin directly in an Android Gradle project, instead of the &lt;code&gt;kotlin-android&lt;/code&gt; plugin. For more information, please refer to the &lt;a href=&quot;../../reference/multiplatform&quot;&gt;Multiplatform Projects&lt;/a&gt; documentation.</source>
          <target state="translated">このチュートリアルでは、Androidプロジェクトの変更を最小限に抑えるため、そのプロジェクトから &lt;code&gt;SharedCode&lt;/code&gt; プロジェクトに通常の依存関係を追加します。 &lt;code&gt;kotlin-android&lt;/code&gt; プラグインの代わりに、直接Android Gradleプロジェクトで &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインを使用することもできます。詳細については、&lt;a href=&quot;../../reference/multiplatform&quot;&gt;マルチプラットフォームプロジェクトの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2e99967fe57ee7a76a36c8deadb4fec1ccb4886b" translate="yes" xml:space="preserve">
          <source>For traversing collection elements, the Kotlin standard library supports the commonly used mechanism of &lt;em&gt;iterators&lt;/em&gt; &amp;ndash; objects that provide access to the elements sequentially without exposing the underlying structure of the collection. Iterators are useful when you need to process all the elements of a collection one-by-one, for example, print values or make similar updates to them.</source>
          <target state="translated">コレクション要素をトラバースするために、Kotlin標準ライブラリは、一般的に使用される&lt;em&gt;イテレータの&lt;/em&gt;メカニズム、つまりコレクションの基になる構造を公開せずに要素へのアクセスを順次提供するオブジェクトをサポートしてい&lt;em&gt;ます&lt;/em&gt;。イテレータは、コレクションのすべての要素を1つずつ処理する必要がある場合に便利です。たとえば、値を出力したり、要素に同様の更新を行ったりします。</target>
        </trans-unit>
        <trans-unit id="2f68c0b5ebbd06a7445ef5ecca5d9e9d637d9dcb" translate="yes" xml:space="preserve">
          <source>For types that have both representations, the one with a &quot;lvalue&quot; has a mutable &lt;code&gt;.value&lt;/code&gt; property for accessing the value.</source>
          <target state="translated">両方の表現を持つタイプの場合、「lvalue」を持つタイプには、値にアクセスするための変更可能な &lt;code&gt;.value&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="c1e4f115384861adef16b8b2baffe917e562f4a0" translate="yes" xml:space="preserve">
          <source>For unit testing support, you also need to add a dependency on the &lt;code&gt;kotlin-test-js&lt;/code&gt; artifact.</source>
          <target state="translated">単体テストをサポートするには、 &lt;code&gt;kotlin-test-js&lt;/code&gt; アーティファクトへの依存関係も追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="529daec5f1bf826a76cdf0d941f5076d7ea34e5f" translate="yes" xml:space="preserve">
          <source>For very simple read-only properties, consider one-line formatting:</source>
          <target state="translated">非常にシンプルな読み取り専用のプロパティの場合は、1行フォーマットを検討してください。</target>
        </trans-unit>
        <trans-unit id="3dd63779dfda05c2ef28c4628ee7e9d8efbf8130" translate="yes" xml:space="preserve">
          <source>Forces the compiler to use specified symbol name for the target &lt;code&gt;external&lt;/code&gt; function.</source>
          <target state="translated">ターゲット &lt;code&gt;external&lt;/code&gt; 関数に指定されたシンボル名を使用するようコンパイラーに強制します。</target>
        </trans-unit>
        <trans-unit id="e69b34f01c97f652d8ef9e0c92a45af9259da382" translate="yes" xml:space="preserve">
          <source>ForeignFetchEventInit</source>
          <target state="translated">ForeignFetchEventInit</target>
        </trans-unit>
        <trans-unit id="75d9182c3bec31e50516efc67fc31601b8525430" translate="yes" xml:space="preserve">
          <source>ForeignFetchOptions</source>
          <target state="translated">ForeignFetchOptions</target>
        </trans-unit>
        <trans-unit id="12a487ec9be62c993fa0b4647bb4e76b66ee7f98" translate="yes" xml:space="preserve">
          <source>ForeignFetchResponse</source>
          <target state="translated">ForeignFetchResponse</target>
        </trans-unit>
        <trans-unit id="b92b85002a3fb316a5c6e08beb73b6cb9ed9d64d" translate="yes" xml:space="preserve">
          <source>FormData</source>
          <target state="translated">FormData</target>
        </trans-unit>
        <trans-unit id="841f832857c780b47f478b4f21d34d8995af64b8" translate="yes" xml:space="preserve">
          <source>Formatting</source>
          <target state="translated">Formatting</target>
        </trans-unit>
        <trans-unit id="ce0f3fcfa3eec092a3013ce4a7b42696b94dcbc1" translate="yes" xml:space="preserve">
          <source>Formatting control flow statements</source>
          <target state="translated">制御フロー文の書式設定</target>
        </trans-unit>
        <trans-unit id="0bdf2028ee128cef1644ccdc1afa0bcfab5ad779" translate="yes" xml:space="preserve">
          <source>Fortunately, there is a meta-runner already available that takes care of most of the manual work. If not familiar with the concept of TeamCity meta-runners, check the &lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/Working+with+Meta-Runner&quot;&gt;documentation&lt;/a&gt;. They are very easy and powerful way to introduce custom Runners without the need to write plugins</source>
          <target state="translated">幸いにも、手作業のほとんどを処理するメタランナーがすでに利用可能です。 TeamCityメタランナーの概念に慣れていない場合は、&lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/Working+with+Meta-Runner&quot;&gt;ドキュメントを&lt;/a&gt;確認してください。プラグインを作成する必要なく、カスタムランナーを導入するための非常に簡単で強力な方法です。</target>
        </trans-unit>
        <trans-unit id="cf1d2c9702ec3c2c9c19d4853cd487b92618fb0c" translate="yes" xml:space="preserve">
          <source>Forum</source>
          <target state="translated">Forum</target>
        </trans-unit>
        <trans-unit id="3c108296aa2c6b7ffe348740261e9186846c294a" translate="yes" xml:space="preserve">
          <source>FrameType</source>
          <target state="translated">FrameType</target>
        </trans-unit>
        <trans-unit id="3fff0cc68f4be81edcb85632753b99c277aa4fa3" translate="yes" xml:space="preserve">
          <source>Frameworks for Server-side Development with Kotlin</source>
          <target state="translated">Kotlinを使ったサーバーサイド開発のためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="c02f140d4e1c43d1f955dd72be8623c93c3777d5" translate="yes" xml:space="preserve">
          <source>FreezableAtomicReference</source>
          <target state="translated">FreezableAtomicReference</target>
        </trans-unit>
        <trans-unit id="80447dec7b683323831bc3898e849011567bb9dd" translate="yes" xml:space="preserve">
          <source>Freezes object subgraph reachable from this object. Frozen objects can be freely shared between threads/workers.</source>
          <target state="translated">このオブジェクトから到達可能なオブジェクトのサブグラフを凍結します。凍結されたオブジェクトは、スレッド/ワーカー間で自由に共有することができます。</target>
        </trans-unit>
        <trans-unit id="b5732305dc8d6bdd9feedc8e8feab21d51a4ad6a" translate="yes" xml:space="preserve">
          <source>Freezing is a runtime operation making a given object subgraph immutable, by modifying the object header so that future mutation attempts throw an &lt;code&gt;InvalidMutabilityException&lt;/code&gt;. It is deep, so if an object has a pointer to other objects - transitive closure of such objects will be frozen. Freezing is a one way transformation, frozen objects cannot be unfrozen. Frozen objects have a nice property that due to their immutability, they can be freely shared between multiple workers/threads without breaking the &quot;mutable XOR shared&quot; invariant.</source>
          <target state="translated">フリーズは、将来のミュー &lt;code&gt;InvalidMutabilityException&lt;/code&gt; 試行がInvalidMutabilityExceptionをスローするようにオブジェクトヘッダーを変更することにより、特定のオブジェクトサブグラフを不変にするランタイム操作です。それは深いので、オブジェクトが他のオブジェクトへのポインタを持っている場合-そのようなオブジェクトの推移的な閉鎖は凍結されます。フリーズは一方向の変換であり、フリーズされたオブジェクトはフリーズ解除できません。凍結されたオブジェクトには不変の性質があるため、「可変XOR共有」不変式を壊すことなく、複数のワーカー/スレッド間で自由に共有できます。</target>
        </trans-unit>
        <trans-unit id="080e2c352b2e6ce4d98cbfd75308fccd2d13b6e7" translate="yes" xml:space="preserve">
          <source>FreezingException</source>
          <target state="translated">FreezingException</target>
        </trans-unit>
        <trans-unit id="3270d126408ac9c895b73a16eb41ad3bd68810c6" translate="yes" xml:space="preserve">
          <source>Frequently - especially if you want a complex return type from a function or a complex key for a map - you'll want a quick and dirty class which only contains some properties, but is still comparable for equality and is usable as a map key. If you create a &lt;em&gt;data class&lt;/em&gt;, you'll get automatic implementations of the following functions: &lt;code&gt;toString()&lt;/code&gt; (which will produce a string containing all the property names and values), &lt;code&gt;equals()&lt;/code&gt; (which will do a per-property &lt;code&gt;equals()&lt;/code&gt;), &lt;code&gt;hashCode()&lt;/code&gt; (which will hash the individual properties and combine the hashes), and the functions that are required to enable Kotlin to destructure an instance of the class into a declaration (&lt;code&gt;component1()&lt;/code&gt;, &lt;code&gt;component2()&lt;/code&gt;, etc.):</source>
          <target state="translated">頻繁に-特に、関数からの複雑な戻り値の型またはマップの複雑なキーが必要な場合-一部のプロパティのみを含み、同等性については比較可能であり、マップキーとして使用可能な迅速でダーティなクラスが必要になります。&lt;em&gt;データクラス&lt;/em&gt;を作成すると、次の関数の自動実装が得られます： &lt;code&gt;toString()&lt;/code&gt; （すべてのプロパティ名と値を含む文字列を生成します）、 &lt;code&gt;equals()&lt;/code&gt; （プロパティごとの &lt;code&gt;equals()&lt;/code&gt; を実行します））、 &lt;code&gt;hashCode()&lt;/code&gt; （個々のプロパティをハッシュしてハッシュを組み合わせる）、およびKotlinがクラスのインスタンスを宣言に &lt;code&gt;component1()&lt;/code&gt; できるようにするために必要な関数（component1（）、 &lt;code&gt;component2()&lt;/code&gt; など）：</target>
        </trans-unit>
        <trans-unit id="eeaebac0ea185354ca4da1eed41ca0237a76e360" translate="yes" xml:space="preserve">
          <source>Frequently, global variables are a source of unintended concurrency issues, so &lt;em&gt;Kotlin/Native&lt;/em&gt; implements the following mechanisms to prevent the unintended sharing of state via global objects:</source>
          <target state="translated">多くの場合、グローバル変数は予期しない同時実行の問題の原因となるため、&lt;em&gt;Kotlin / Native&lt;/em&gt;は次のメカニズムを実装して、グローバルオブジェクトを介した意図しない状態の共有を防止します。</target>
        </trans-unit>
        <trans-unit id="6f534b1669d028d05de6c4f01c61b4cbefdfc68b" translate="yes" xml:space="preserve">
          <source>Frequently, you'll find that during the lifetime of your variable, it only ever needs to refer to one object. Then, you can declare it with &lt;code&gt;val&lt;/code&gt; (for &quot;value&quot;) instead:</source>
          <target state="translated">多くの場合、変数の存続期間中は、1つのオブジェクトを参照するだけで済みます。次に、代わりに &lt;code&gt;val&lt;/code&gt; （「値」用）を使用して宣言できます。</target>
        </trans-unit>
        <trans-unit id="7f1dacd0361126bb8241eaf5f54839027d1b83de" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;Iterable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Iterable&lt;/code&gt; から</target>
        </trans-unit>
        <trans-unit id="e903d5d97686e54561b32d3001611ffcc2e0a685" translate="yes" xml:space="preserve">
          <source>From Gradle</source>
          <target state="translated">グラドルから</target>
        </trans-unit>
        <trans-unit id="2c1510bd121f7b4adb08915128573cbc22353dad" translate="yes" xml:space="preserve">
          <source>From IntelliJ IDEA</source>
          <target state="translated">IntelliJ IDEAより</target>
        </trans-unit>
        <trans-unit id="46a2318d1812b0419db3c6cf8e568ded984d2f97" translate="yes" xml:space="preserve">
          <source>From Kotlin they will be accessible by the same name &lt;code&gt;filterValid&lt;/code&gt;, but from Java it will be &lt;code&gt;filterValid&lt;/code&gt; and &lt;code&gt;filterValidInt&lt;/code&gt;.</source>
          <target state="translated">Kotlinからは同じ名前 &lt;code&gt;filterValid&lt;/code&gt; でアクセスできますが、Javaからは &lt;code&gt;filterValid&lt;/code&gt; および &lt;code&gt;filterValidInt&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4b86aa5caa340495b300dfdb7661e78f45617313" translate="yes" xml:space="preserve">
          <source>From Maven</source>
          <target state="translated">メイヴンから</target>
        </trans-unit>
        <trans-unit id="63be8821b7dae58ac3edb96332553cab8bfda471" translate="yes" xml:space="preserve">
          <source>From chunks</source>
          <target state="translated">チャンクから</target>
        </trans-unit>
        <trans-unit id="7ab268169d69c739813b410b45da09fd14cd394a" translate="yes" xml:space="preserve">
          <source>From elements</source>
          <target state="translated">要素から</target>
        </trans-unit>
        <trans-unit id="99d7bcb17fff71b248e97c870c311e513e0173a5" translate="yes" xml:space="preserve">
          <source>From function</source>
          <target state="translated">関数から</target>
        </trans-unit>
        <trans-unit id="a7b57207ffe105a985227c26ccdced3c28406c1e" translate="yes" xml:space="preserve">
          <source>Full definition of the &lt;code&gt;com.example.html&lt;/code&gt; package</source>
          <target state="translated">&lt;code&gt;com.example.html&lt;/code&gt; パッケージの完全な定義</target>
        </trans-unit>
        <trans-unit id="aad1c0dafbf03119fdcdb3c699f48901b1590080" translate="yes" xml:space="preserve">
          <source>Full kotlinx.coroutines API reference</source>
          <target state="translated">完全な kotlinx.coroutines API リファレンス</target>
        </trans-unit>
        <trans-unit id="3bac36b2b7a23e52c764a12f2d4d0fc0a7a0e4d8" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the package this class is located in, from Kotlin's point of view, or empty string if this name does not differ from the JVM's package FQ name. These names can be different in case the JvmPackageName annotation is used. Note that this information is also stored in the corresponding module's &lt;code&gt;.kotlin_module&lt;/code&gt; file.</source>
          <target state="translated">このクラスが配置されているパッケージの完全修飾名。Kotlinから見ると、この名前がJVMのパッケージFQ名と異なる場合は空の文字列。JvmPackageNameアノテーションが使用される場合、これらの名前は異なる場合があります。この情報は、対応するモジュールの &lt;code&gt;.kotlin_module&lt;/code&gt; ファイルにも保存されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="1dcdfd2ec9069a64630d38318805ac58f78ebc9a" translate="yes" xml:space="preserve">
          <source>Function (constructors are not included)</source>
          <target state="translated">関数(コンストラクタは含まれません</target>
        </trans-unit>
        <trans-unit id="035787f0ca20d22e08021c39f72834469799520f" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;max&lt;/code&gt; is a higher-order function, it takes a function value as the second argument. This second argument is an expression that is itself a function, i.e. a function literal, which is equivalent to the following named function:</source>
          <target state="translated">関数 &lt;code&gt;max&lt;/code&gt; は高次関数であり、2番目の引数として関数値を取ります。この2番目の引数は、それ自体が関数である式、つまり、次の名前付き関数と同等の関数リテラルです。</target>
        </trans-unit>
        <trans-unit id="751924331feba79685bd7ca453e7d70d1ee39798" translate="yes" xml:space="preserve">
          <source>Function Declarations</source>
          <target state="translated">関数宣言</target>
        </trans-unit>
        <trans-unit id="da9189d87675a5d44e6310e344886c7fd0a3671f" translate="yes" xml:space="preserve">
          <source>Function References</source>
          <target state="translated">関数リファレンス</target>
        </trans-unit>
        <trans-unit id="5c8224fb885f624660db62da8b1055688dda11c3" translate="yes" xml:space="preserve">
          <source>Function Scope</source>
          <target state="translated">機能範囲</target>
        </trans-unit>
        <trans-unit id="2267d63b26917f9a3715a86c5fd0aa733935b6e4" translate="yes" xml:space="preserve">
          <source>Function Usage</source>
          <target state="translated">関数の利用法</target>
        </trans-unit>
        <trans-unit id="cf18ccbe7924a806aa4ee8d2ed664f4d998e37b0" translate="yes" xml:space="preserve">
          <source>Function corresponding to JavaScript's &lt;code&gt;typeof&lt;/code&gt; operator</source>
          <target state="translated">JavaScriptの &lt;code&gt;typeof&lt;/code&gt; 演算子に対応する関数</target>
        </trans-unit>
        <trans-unit id="b95c3bae5d82738e59f8b16d63717ed67c934752" translate="yes" xml:space="preserve">
          <source>Function formatting</source>
          <target state="translated">関数の書式設定</target>
        </trans-unit>
        <trans-unit id="ce6e413c01f8f88615ada6c7f6d349f7800231ea" translate="yes" xml:space="preserve">
          <source>Function having two &lt;code&gt;Int&lt;/code&gt; parameters with &lt;code&gt;Int&lt;/code&gt; return type:</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; 戻り型の2つの &lt;code&gt;Int&lt;/code&gt; パラメータを持つ関数：</target>
        </trans-unit>
        <trans-unit id="ca665affb7c73b78ff26c871ee3d6b8618de47f7" translate="yes" xml:space="preserve">
          <source>Function literals with receiver</source>
          <target state="translated">レシーバーを使った関数リテラル</target>
        </trans-unit>
        <trans-unit id="d74aadb0539e8ce0c16c1f970d53120878cd40d9" translate="yes" xml:space="preserve">
          <source>Function literals: lambda expressions and anonymous functions</source>
          <target state="translated">関数リテラル:ラムダ式と匿名関数</target>
        </trans-unit>
        <trans-unit id="dbfe0bee331f156c7ece93de6926384c2e325f16" translate="yes" xml:space="preserve">
          <source>Function names</source>
          <target state="translated">関数名</target>
        </trans-unit>
        <trans-unit id="f8d62ea92d3791c590b8073632a146bf910c0f88" translate="yes" xml:space="preserve">
          <source>Function names should use &lt;code&gt;lowerCamelCase&lt;/code&gt; instead of &lt;code&gt;snake_case&lt;/code&gt;.</source>
          <target state="translated">関数名は使うべき &lt;code&gt;lowerCamelCase&lt;/code&gt; の代わりに &lt;code&gt;snake_case&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2357eb920295d3ee4fd2746f790b824f9b769058" translate="yes" xml:space="preserve">
          <source>Function parameters are defined using Pascal notation, i.e. &lt;em&gt;name&lt;/em&gt;: &lt;em&gt;type&lt;/em&gt;. Parameters are separated using commas. Each parameter must be explicitly typed:</source>
          <target state="translated">関数パラメーターは、Pascal表記、つまり&lt;em&gt;name&lt;/em&gt;：&lt;em&gt;type&lt;/em&gt;を使用して定義されます。パラメータはカンマで区切られます。各パラメーターは明示的に入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="5edd24c452ecd10a54093010f4990be666666f06" translate="yes" xml:space="preserve">
          <source>Function parameters can be named when calling functions. This is very convenient when a function has a high number of parameters or default ones.</source>
          <target state="translated">関数を呼び出す際に、関数のパラメータに名前を付けることができます。これは、関数のパラメータの数が多い場合やデフォルトのパラメータを持つ場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="85a49cc1f92d081670928800342e92a2a2ac7f85" translate="yes" xml:space="preserve">
          <source>Function parameters can have default values, which are used when a corresponding argument is omitted. This allows for a reduced number of overloads compared to other languages:</source>
          <target state="translated">関数のパラメータはデフォルト値を持つことができ、対応する引数が省略された場合に使用されます。これにより、他の言語に比べてオーバーロードの数を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="807c42249b0922157615f7450853ad54609a2512" translate="yes" xml:space="preserve">
          <source>Function pointers from C and how they look in Kotlin/Native</source>
          <target state="translated">C からの関数ポインタと Kotlin/Native での見え方</target>
        </trans-unit>
        <trans-unit id="0f181fa3f949ca58e990503187b232168a8466d0" translate="yes" xml:space="preserve">
          <source>Function references</source>
          <target state="translated">関数参照</target>
        </trans-unit>
        <trans-unit id="e9bdf065ac1d9b004b177e363e9f91fbf2b96350" translate="yes" xml:space="preserve">
          <source>Function references belong to one of the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-function/index&quot;&gt;&lt;code&gt;KFunction&amp;lt;out R&amp;gt;&lt;/code&gt;&lt;/a&gt; subtypes, depending on the parameter count, e.g. &lt;code&gt;KFunction3&amp;lt;T1, T2, T3, R&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">関数参照は、パラメータ数に応じ&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-function/index&quot;&gt; &lt;code&gt;KFunction&amp;lt;out R&amp;gt;&lt;/code&gt; &lt;/a&gt;、KFunction &amp;lt;out R&amp;gt;サブタイプの1つに属します（例： &lt;code&gt;KFunction3&amp;lt;T1, T2, T3, R&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a31212b4d92d1dae20ef3440ad0c5dd83c9e9ba8" translate="yes" xml:space="preserve">
          <source>Function returning no meaningful value:</source>
          <target state="translated">意味のない値を返す関数。</target>
        </trans-unit>
        <trans-unit id="5f274445178a53837ad18098a8c7a5d6fc400cb9" translate="yes" xml:space="preserve">
          <source>Function selection</source>
          <target state="translated">機能選択</target>
        </trans-unit>
        <trans-unit id="bc031b64c0889a188091b33b3ffbe9e95dc3e702" translate="yes" xml:space="preserve">
          <source>Function type</source>
          <target state="translated">関数型</target>
        </trans-unit>
        <trans-unit id="4cf28af51590dee95695351a40b2cc8d5c35812e" translate="yes" xml:space="preserve">
          <source>Function types</source>
          <target state="translated">機能の種類</target>
        </trans-unit>
        <trans-unit id="856adb0347c3f4becd32b9cb22d963c4fe41d845" translate="yes" xml:space="preserve">
          <source>Function types can be combined using parentheses: &lt;code&gt;(Int) -&amp;gt; ((Int) -&amp;gt; Unit)&lt;/code&gt;</source>
          <target state="translated">括弧を使用して関数タイプを組み合わせることができます： &lt;code&gt;(Int) -&amp;gt; ((Int) -&amp;gt; Unit)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c9bebe6feed7f92b3e31e52ccb139bfa1b01661" translate="yes" xml:space="preserve">
          <source>Function types can optionally have an additional &lt;em&gt;receiver&lt;/em&gt; type, which is specified before a dot in the notation: the type &lt;code&gt;A.(B) -&amp;gt; C&lt;/code&gt; represents functions that can be called on a receiver object of &lt;code&gt;A&lt;/code&gt; with a parameter of &lt;code&gt;B&lt;/code&gt; and return a value of &lt;code&gt;C&lt;/code&gt;. &lt;a href=&quot;#function-literals-with-receiver&quot;&gt;Function literals with receiver&lt;/a&gt; are often used along with these types.</source>
          <target state="translated">関数タイプはオプションで、表記のドットの前に指定される追加の&lt;em&gt;レシーバー&lt;/em&gt;タイプを持つことができます &lt;code&gt;A.(B) -&amp;gt; C&lt;/code&gt; タイプA.（B）-&amp;gt; Cは、パラメーター &lt;code&gt;B&lt;/code&gt; で &lt;code&gt;A&lt;/code&gt; のレシーバーオブジェクトで呼び出すことができる関数を表し、 &lt;code&gt;C&lt;/code&gt; の値。&lt;a href=&quot;#function-literals-with-receiver&quot;&gt;レシーバー付きの関数リテラルは&lt;/a&gt;、これらのタイプとともによく使用されます。</target>
        </trans-unit>
        <trans-unit id="cbb0a89a817f8245fd4501f682c4b83cd600158e" translate="yes" xml:space="preserve">
          <source>Function with an expression body and inferred return type:</source>
          <target state="translated">式本体と推論された戻り値の型を持つ関数。</target>
        </trans-unit>
        <trans-unit id="616348e4102e287bce650e93d6e6f0f3f64bef4a" translate="yes" xml:space="preserve">
          <source>Functional operators example: Long Number problem</source>
          <target state="translated">関数演算子の例。長い数の問題</target>
        </trans-unit>
        <trans-unit id="deb4e042b9d6249db97e6680ab8276b237985bd9" translate="yes" xml:space="preserve">
          <source>Functional programming</source>
          <target state="translated">機能的なプログラミング</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="c6cf63bb2db24e88a231a0809e16881a5299ada5" translate="yes" xml:space="preserve">
          <source>Functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/first&quot;&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/last&quot;&gt;&lt;code&gt;last()&lt;/code&gt;&lt;/a&gt; also let you search a collection for elements matching a given predicate. When you call &lt;code&gt;first()&lt;/code&gt; with a predicate that tests a collection element, you'll receive the first element on which the predicate yields &lt;code&gt;true&lt;/code&gt;. In turn, &lt;code&gt;last()&lt;/code&gt; with a predicate returns the last element matching it.</source>
          <target state="translated">関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/first&quot;&gt; &lt;code&gt;first()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/last&quot;&gt; &lt;code&gt;last()&lt;/code&gt; を使用&lt;/a&gt;すると、指定された述語に一致する要素のコレクションを検索することもできます。コレクション要素をテストする述語で &lt;code&gt;first()&lt;/code&gt; を呼び出すと、述語が &lt;code&gt;true&lt;/code&gt; を生成する最初の要素を受け取ります。次に、述語を持つ &lt;code&gt;last()&lt;/code&gt; は、それに一致する最後の要素を返します。</target>
        </trans-unit>
        <trans-unit id="9672456d84600d7933765df2e67cde51c9146628" translate="yes" xml:space="preserve">
          <source>Functions act similarly to properties, but can be referenced as two different kinds of types.</source>
          <target state="translated">関数はプロパティと似たような動作をしますが、2種類の異なるタイプとして参照することができます。</target>
        </trans-unit>
        <trans-unit id="38e0c96376951cc87589b6bdee7b1ee1c34c4cd2" translate="yes" xml:space="preserve">
          <source>Functions and annotations specific to the Java platform.</source>
          <target state="translated">Javaプラットフォームに固有の関数とアノテーション。</target>
        </trans-unit>
        <trans-unit id="af02c4bbfc0fd5d261d9a7c1341f5f36cb64fc58" translate="yes" xml:space="preserve">
          <source>Functions and other APIs specific to the JavaScript platform.</source>
          <target state="translated">JavaScriptプラットフォームに特化した関数などのAPI。</target>
        </trans-unit>
        <trans-unit id="1363a53b7740a8dfedddc08cb1096432aefce24a" translate="yes" xml:space="preserve">
          <source>Functions are called the same way as in Python:</source>
          <target state="translated">関数はPythonと同じように呼ばれます。</target>
        </trans-unit>
        <trans-unit id="ffffe56cc8b206d4da2960cd6acff3498dd8bab0" translate="yes" xml:space="preserve">
          <source>Functions are declared with the &lt;code&gt;fun&lt;/code&gt; keyword. For the parameters, you must declare not only their names, but also their types, and you must declare the type of the value the function is intending to return. The body of the function is usually a &lt;em&gt;block&lt;/em&gt;, which is enclosed in curly braces:</source>
          <target state="translated">関数は &lt;code&gt;fun&lt;/code&gt; キーワードで宣言されます。パラメータについては、名前だけでなく型も宣言する必要があり、関数が返す予定の値の型を宣言する必要があります。関数の本体は通常、中括弧で囲まれた&lt;em&gt;block&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="c5cabb16d69d786b4868a7a6a2bf74508116eaf0" translate="yes" xml:space="preserve">
          <source>Functions can be inlined and never get called directly (which happens always except for few situations).</source>
          <target state="translated">関数はインライン化することができ、直接呼び出されることはありません (これはいくつかの状況を除いて常に起こります)。</target>
        </trans-unit>
        <trans-unit id="8ec68d70c5ce9191111e899674a4b364e187fad0" translate="yes" xml:space="preserve">
          <source>Functions can have generic parameters which are specified using angle brackets before the function name:</source>
          <target state="translated">関数は、関数名の前に角括弧を使用して指定された汎用パラメータを持つことができます。</target>
        </trans-unit>
        <trans-unit id="bb364910311fce703048fea10e4d919d72d59716" translate="yes" xml:space="preserve">
          <source>Functions for working with text and regular expressions.</source>
          <target state="translated">テキストや正規表現を扱うための関数。</target>
        </trans-unit>
        <trans-unit id="d223cff044f05e7b30816ce62b78775dd0b163cd" translate="yes" xml:space="preserve">
          <source>Functions in Kotlin are declared using the &lt;em&gt;fun&lt;/em&gt; keyword:</source>
          <target state="translated">Kotlinの関数は、&lt;em&gt;fun&lt;/em&gt;キーワードを使用して宣言され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="abcf79c145a0740ce76ae03026a3b5f6a374058e" translate="yes" xml:space="preserve">
          <source>Functions marked with the &lt;em&gt;infix&lt;/em&gt; keyword can also be called using the infix notation (omitting the dot and the parentheses for the call). Infix functions must satisfy the following requirements:</source>
          <target state="translated">&lt;em&gt;infix&lt;/em&gt;キーワードでマークされた関数は、infix表記を使用して呼び出すこともできます（呼び出しではドットと括弧を省略します）。中置関数は次の要件を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="10e994cc2b3874457f1a3b7ea19e8f59d42dc03b" translate="yes" xml:space="preserve">
          <source>Functions vs Properties</source>
          <target state="translated">関数とプロパティ</target>
        </trans-unit>
        <trans-unit id="605aecda5c91b6b9048a949e9a032b635cbf0a1c" translate="yes" xml:space="preserve">
          <source>Functions with big arity</source>
          <target state="translated">大きなアリティを持つ関数</target>
        </trans-unit>
        <trans-unit id="4263c3e1bd4e555556b6d00bf49afae16b33edd0" translate="yes" xml:space="preserve">
          <source>Functions with block body must always specify return types explicitly, unless it's intended for them to return &lt;code&gt;Unit&lt;/code&gt;, &lt;a href=&quot;#unit-returning-functions&quot;&gt;in which case it is optional&lt;/a&gt;. Kotlin does not infer return types for functions with block bodies because such functions may have complex control flow in the body, and the return type will be non-obvious to the reader (and sometimes even for the compiler).</source>
          <target state="translated">彼らが返すようにするためのものだしない限り、ブロック本体を持つ関数は、常に、明示的に戻り値の型を指定しなければならない &lt;code&gt;Unit&lt;/code&gt; 、&lt;a href=&quot;#unit-returning-functions&quot;&gt;それはオプションであり、その場合には&lt;/a&gt;。Kotlinは、ブロック本体を含む関数の戻り値の型を推測しません。これは、そのような関数の本体に複雑な制御フローがあり、戻り値の型がリーダー（および場合によってはコンパイラー）からは明らかでないためです。</target>
        </trans-unit>
        <trans-unit id="869c75fbf27b8cca960a9441a8a796e1012f6db9" translate="yes" xml:space="preserve">
          <source>Functions with destination are available for filtering, association, grouping, flattening, and other operations. For the complete list of destination operations see the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/index&quot;&gt;Kotlin collections reference&lt;/a&gt;.</source>
          <target state="translated">宛先を持つ関数は、フィルタリング、関連付け、グループ化、フラット化、およびその他の操作に使用できます。宛先オペレーションの完全なリストについては、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/index&quot;&gt;Kotlinコレクションリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ec474f22ddefd224ff67020fbb6ae2182e01b1bd" translate="yes" xml:space="preserve">
          <source>Functions, properties and classes, objects and interfaces can be declared on the &quot;top-level&quot;, i.e. directly inside a package:</source>
          <target state="translated">関数、プロパティ、クラス、オブジェクト、インターフェイスは「トップレベル」、つまりパッケージの中で直接宣言することができます。</target>
        </trans-unit>
        <trans-unit id="64bb8f0fe0b9db02fc735271491aea4157abc344" translate="yes" xml:space="preserve">
          <source>Further discussion</source>
          <target state="translated">さらなる議論</target>
        </trans-unit>
        <trans-unit id="96c5f382ec6718fb0998748d71e7d0240a9b8b4e" translate="yes" xml:space="preserve">
          <source>Further we describe the conventions that regulate operator overloading for different operators.</source>
          <target state="translated">さらに、異なる演算子に対する演算子のオーバーロードを規制する規約を説明します。</target>
        </trans-unit>
        <trans-unit id="047ca54032a1756c098d3bc1a941a0ed8e583df8" translate="yes" xml:space="preserve">
          <source>Future</source>
          <target state="translated">Future</target>
        </trans-unit>
        <trans-unit id="bdeb21a050e1ff6f2a23beb6e6f7287a62d029a3" translate="yes" xml:space="preserve">
          <source>Future is cancelled.</source>
          <target state="translated">未来はキャンセルされました。</target>
        </trans-unit>
        <trans-unit id="62f3171baa5c0fb94afa3426a227046e9f1a7e06" translate="yes" xml:space="preserve">
          <source>Future is scheduled for execution.</source>
          <target state="translated">未来は実行予定です。</target>
        </trans-unit>
        <trans-unit id="195b2c4ef0b579e6fc4df56af690cec04f2f5bb0" translate="yes" xml:space="preserve">
          <source>Future result is computed.</source>
          <target state="translated">将来の結果を計算します。</target>
        </trans-unit>
        <trans-unit id="99e54311d7d01d796e399d911a504c91ce32cd9c" translate="yes" xml:space="preserve">
          <source>FutureState</source>
          <target state="translated">FutureState</target>
        </trans-unit>
        <trans-unit id="e9808cbd1900d3da5151bc3f2b38f18d4b846b48" translate="yes" xml:space="preserve">
          <source>Futures, Promises et al.</source>
          <target state="translated">未来、約束など</target>
        </trans-unit>
        <trans-unit id="d302df4ce43907abad06f077688fdd515b323131" translate="yes" xml:space="preserve">
          <source>Futures, Promises et. al</source>
          <target state="translated">未来、約束など</target>
        </trans-unit>
        <trans-unit id="6dbbfe6588647d02744e6218e0591657f4ee2019" translate="yes" xml:space="preserve">
          <source>Garbage Collection and Reference Counting</source>
          <target state="translated">ゴミの収集と参照カウント</target>
        </trans-unit>
        <trans-unit id="5537dfcf4040a457bb174bf6d48eae1b56f94aab" translate="yes" xml:space="preserve">
          <source>General category &quot;Cc&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Cc」。</target>
        </trans-unit>
        <trans-unit id="3580200580fcd436242306f983f3b3507549a6d0" translate="yes" xml:space="preserve">
          <source>General category &quot;Cf&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Cf」。</target>
        </trans-unit>
        <trans-unit id="fd1d6d98583bd5d286c8c74c0b9f29ebf1956524" translate="yes" xml:space="preserve">
          <source>General category &quot;Cn&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Cn」。</target>
        </trans-unit>
        <trans-unit id="3a106be07363c0507044c963eabc93ed51c9f075" translate="yes" xml:space="preserve">
          <source>General category &quot;Co&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Co」。</target>
        </trans-unit>
        <trans-unit id="03ca4907122b18ef856396c0fa40bcff775e3854" translate="yes" xml:space="preserve">
          <source>General category &quot;Cs&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Cs」。</target>
        </trans-unit>
        <trans-unit id="00468af6d9083b471cf09e0ab8f92739e492618c" translate="yes" xml:space="preserve">
          <source>General category &quot;Ll&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Ll」。</target>
        </trans-unit>
        <trans-unit id="257f5f2650986b8ae0295dd63b1dad60b91f932e" translate="yes" xml:space="preserve">
          <source>General category &quot;Lm&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Lm」。</target>
        </trans-unit>
        <trans-unit id="914f6778c8d6a3a8826bf16e80d3412755d054b5" translate="yes" xml:space="preserve">
          <source>General category &quot;Lo&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Lo」。</target>
        </trans-unit>
        <trans-unit id="fb8a22c756350d8003ac24a1929c70ad4b9d0b0b" translate="yes" xml:space="preserve">
          <source>General category &quot;Lt&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Lt」。</target>
        </trans-unit>
        <trans-unit id="0f887a16535e642a6540462856260b3a206e313f" translate="yes" xml:space="preserve">
          <source>General category &quot;Lu&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Lu」。</target>
        </trans-unit>
        <trans-unit id="1fb16989d2201c63c16c857610395df222c44d9f" translate="yes" xml:space="preserve">
          <source>General category &quot;Mc&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Mc」。</target>
        </trans-unit>
        <trans-unit id="db22004b965686c72aef5fe1a6705573f3aea2fc" translate="yes" xml:space="preserve">
          <source>General category &quot;Me&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「私」。</target>
        </trans-unit>
        <trans-unit id="e13b65d112880a2a8f689b8c3e69658f87c69992" translate="yes" xml:space="preserve">
          <source>General category &quot;Mn&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Mn」。</target>
        </trans-unit>
        <trans-unit id="7274a78e11b5a951cd6f03c870bd0ccefdda3504" translate="yes" xml:space="preserve">
          <source>General category &quot;Nd&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Nd」。</target>
        </trans-unit>
        <trans-unit id="dcce571b632cd78adf2562075b5c74018107e4e8" translate="yes" xml:space="preserve">
          <source>General category &quot;Nl&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Nl」。</target>
        </trans-unit>
        <trans-unit id="9d69dc6d8d9257de7ff5da721565e07f739f0467" translate="yes" xml:space="preserve">
          <source>General category &quot;No&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「いいえ」。</target>
        </trans-unit>
        <trans-unit id="e6d7f297a1537c8c470bb1754fefd41df20e32ee" translate="yes" xml:space="preserve">
          <source>General category &quot;Pc&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Pc」。</target>
        </trans-unit>
        <trans-unit id="6c9a46645388b12163772f1307cbfed28e013f2b" translate="yes" xml:space="preserve">
          <source>General category &quot;Pd&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Pd」。</target>
        </trans-unit>
        <trans-unit id="047b798db60291a961bbe18b169d957b5e8f2ac5" translate="yes" xml:space="preserve">
          <source>General category &quot;Pe&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Pe」。</target>
        </trans-unit>
        <trans-unit id="3be1b8cac97eeb03e34849d57e62caad6a798de0" translate="yes" xml:space="preserve">
          <source>General category &quot;Pf&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Pf」。</target>
        </trans-unit>
        <trans-unit id="f28cc64fbce4cdefe6051ea49212cc4fe7ae6e3b" translate="yes" xml:space="preserve">
          <source>General category &quot;Pi&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Pi」。</target>
        </trans-unit>
        <trans-unit id="ea0f8c2c8c4aaf5e8874fc537f1b92fabfd83b14" translate="yes" xml:space="preserve">
          <source>General category &quot;Po&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Po」。</target>
        </trans-unit>
        <trans-unit id="e6ac096a85e292ce39b00b857c0903ea5e39458f" translate="yes" xml:space="preserve">
          <source>General category &quot;Ps&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Ps」。</target>
        </trans-unit>
        <trans-unit id="2b08ccd66bb2e2119f27b38b956c87ccafcd1bbc" translate="yes" xml:space="preserve">
          <source>General category &quot;Sc&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Sc」。</target>
        </trans-unit>
        <trans-unit id="875265e6a3ae354a48ee9b551342c6834462859a" translate="yes" xml:space="preserve">
          <source>General category &quot;Sk&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Sk」。</target>
        </trans-unit>
        <trans-unit id="1fe1e30af0d3ea99f97e67460fef543e37c2753b" translate="yes" xml:space="preserve">
          <source>General category &quot;Sm&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Sm」。</target>
        </trans-unit>
        <trans-unit id="443a5fada001e01121a65d80a1d54f9e97daa061" translate="yes" xml:space="preserve">
          <source>General category &quot;So&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「だから」。</target>
        </trans-unit>
        <trans-unit id="32eb327deae57fb982c7872b593b2b6b26bc8a9b" translate="yes" xml:space="preserve">
          <source>General category &quot;Zl&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Zl」。</target>
        </trans-unit>
        <trans-unit id="91da17fb5fbcd7c99bc1b5e9d498abeba9e0df66" translate="yes" xml:space="preserve">
          <source>General category &quot;Zp&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Zp」。</target>
        </trans-unit>
        <trans-unit id="117612c710e794318f15c0e6f4ab0b9c45c47361" translate="yes" xml:space="preserve">
          <source>General category &quot;Zs&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における一般的なカテゴリ「Zs」。</target>
        </trans-unit>
        <trans-unit id="20e6f238bae1caf72a2ca34c802a17fadd4cc9c3" translate="yes" xml:space="preserve">
          <source>Generally Swift argument labels and Objective-C selector pieces are mapped to Kotlin parameter names. Anyway these two concepts have different semantics, so sometimes Swift/Objective-C methods can be imported with a clashing Kotlin signature. In this case the clashing methods can be called from Kotlin using named arguments, e.g.:</source>
          <target state="translated">一般的に、Swiftの引数ラベルとObjective-Cのセレクタの部分はKotlinのパラメータ名にマッピングされます。いずれにしても、この2つの概念は異なるセマンティクスを持っているので、時にはSwift/Objective-Cのメソッドが衝突するKotlinのシグネチャを使ってインポートされることもあります。この場合、衝突するメソッドは名前付き引数を使ってKotlinから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="f0cc05fd19df56e0eacc01af5e8e38d1225bfd83" translate="yes" xml:space="preserve">
          <source>Generally, avoid using &lt;code&gt;@param&lt;/code&gt; and &lt;code&gt;@return&lt;/code&gt; tags. Instead, incorporate the description of parameters and return values directly into the documentation comment, and add links to parameters wherever they are mentioned. Use &lt;code&gt;@param&lt;/code&gt; and &lt;code&gt;@return&lt;/code&gt; only when a lengthy description is required which doesn't fit into the flow of the main text.</source>
          <target state="translated">一般的には、使用を避ける &lt;code&gt;@param&lt;/code&gt; 及び &lt;code&gt;@return&lt;/code&gt; タグを。代わりに、パラメーターの説明と戻り値をドキュメンテーションコメントに直接組み込み、パラメーターへのリンクを記載されている場所に追加します。 &lt;code&gt;@param&lt;/code&gt; と &lt;code&gt;@return&lt;/code&gt; は、本文の流れに合わない長い説明が必要な場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="29e3d514d55b6125bea56dda15b26eafa5f39066" translate="yes" xml:space="preserve">
          <source>Generally, the contents of a class is sorted in the following order:</source>
          <target state="translated">一般的に、クラスの内容は以下の順番でソートされます。</target>
        </trans-unit>
        <trans-unit id="d7fbe705690a6a1b73ca822febf65f9f439edf39" translate="yes" xml:space="preserve">
          <source>Generate .meta.js and .kjsm files with metadata. Use to create a library</source>
          <target state="translated">.meta.jsと.kjsmファイルをメタデータで生成します。ライブラリの作成に使用します。</target>
        </trans-unit>
        <trans-unit id="749ba44f18bc31e5613803f750e487c856af288a" translate="yes" xml:space="preserve">
          <source>Generate JS files for specific ECMA version</source>
          <target state="translated">特定のECMAバージョン用のJSファイルを生成</target>
        </trans-unit>
        <trans-unit id="baffdfbdc7b7e90b403385bcfcad05060b54977d" translate="yes" xml:space="preserve">
          <source>Generate code for &lt;code&gt;a.plusAssign(b)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;a.plusAssign(b)&lt;/code&gt; のコードを生成します。</target>
        </trans-unit>
        <trans-unit id="ca6737eca8bb7217a2a3d4f7aeadd4eef8e6cc44" translate="yes" xml:space="preserve">
          <source>Generate metadata for Java 1.8 reflection on method parameters</source>
          <target state="translated">Java 1.8のメソッド・パラメータへの反映のためのメタデータを生成します。</target>
        </trans-unit>
        <trans-unit id="183b9e807d281d2fcdfa940f891802dccbfe3d82" translate="yes" xml:space="preserve">
          <source>Generate no warnings</source>
          <target state="translated">警告を生成しない</target>
        </trans-unit>
        <trans-unit id="250c962bc08b9b28e2eca7ecd5b00831756e4a37" translate="yes" xml:space="preserve">
          <source>Generate source map</source>
          <target state="translated">ソースマップの生成</target>
        </trans-unit>
        <trans-unit id="4e121fd0c11320ddcadbde030de322eb06e47f01" translate="yes" xml:space="preserve">
          <source>Generated Framework Headers</source>
          <target state="translated">生成されたフレームワークヘッダ</target>
        </trans-unit>
        <trans-unit id="f04b94c66b16d00a648fc6082eb3dfa21457f5ac" translate="yes" xml:space="preserve">
          <source>Generated Headers File</source>
          <target state="translated">生成されたヘッダファイル</target>
        </trans-unit>
        <trans-unit id="d946501e1e2ba7debd1406d8e243b228d0da85d2" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; random value uniformly distributed between &lt;a href=&quot;../kotlin/-u-int/-m-i-n_-v-a-l-u-e&quot;&gt;UInt.MIN_VALUE&lt;/a&gt; and &lt;a href=&quot;../kotlin/-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; (inclusive).</source>
          <target state="translated">&lt;a href=&quot;../kotlin/-u-int/-m-i-n_-v-a-l-u-e&quot;&gt;UInt.MIN_VALUE&lt;/a&gt;と&lt;a href=&quot;../kotlin/-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;（両端を含む）の間で均一に分散された&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt;ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="5d92e2b8d802695176ccf8af3fa819c75baf685e" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; random value uniformly distributed between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified &lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%29%2Funtil&quot;&gt;until&lt;/a&gt; bound (exclusive).</source>
          <target state="translated">生成&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UINT&lt;/a&gt;均一間に分配ランダム値 &lt;code&gt;0&lt;/code&gt; （含む）と指定&lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%29%2Funtil&quot;&gt;するまで、&lt;/a&gt;結合（排他的に）。</target>
        </trans-unit>
        <trans-unit id="c16c379abe1c61ef584ef9af40918bcd9ec2f049" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; random value uniformly distributed between the specified &lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%2C+kotlin.UInt%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%2C+kotlin.UInt%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UINT&lt;/a&gt;均一指定間に分布乱数値&lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%2C+kotlin.UInt%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%2C+kotlin.UInt%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界を。</target>
        </trans-unit>
        <trans-unit id="4c70c93a911c0b7e6438702d76fce2c8ea628c12" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; random value uniformly distributed in the specified &lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.ranges.UIntRange%29%2Frange&quot;&gt;range&lt;/a&gt;: from &lt;code&gt;range.start&lt;/code&gt; inclusive to &lt;code&gt;range.endInclusive&lt;/code&gt; inclusive.</source>
          <target state="translated">生成&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UINT&lt;/a&gt;均一指定に分布乱数値&lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.ranges.UIntRange%29%2Frange&quot;&gt;範囲&lt;/a&gt;：から &lt;code&gt;range.start&lt;/code&gt; 含めに &lt;code&gt;range.endInclusive&lt;/code&gt; 含め。</target>
        </trans-unit>
        <trans-unit id="757b30cdacd9eaaf9012afe9c2732ea102b190e3" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; random value uniformly distributed between &lt;a href=&quot;../kotlin/-u-long/-m-i-n_-v-a-l-u-e&quot;&gt;ULong.MIN_VALUE&lt;/a&gt; and &lt;a href=&quot;../kotlin/-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; (inclusive).</source>
          <target state="translated">&lt;a href=&quot;../kotlin/-u-long/-m-i-n_-v-a-l-u-e&quot;&gt;ULong.MIN_VALUE&lt;/a&gt;と&lt;a href=&quot;../kotlin/-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt;（両端を含む）の間で均一に分散された&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt;ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="fa35e4a57d086459b2d86d7150d6deae9f1ebdac" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; random value uniformly distributed between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified &lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%29%2Funtil&quot;&gt;until&lt;/a&gt; bound (exclusive).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; （両端を含む）から指定された範囲（両端を含まない）&lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%29%2Funtil&quot;&gt;まで&lt;/a&gt;指定された値の間で均一に分散された&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt;ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="86a5293679cfc4d641d91c7745d099cc5355381d" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; random value uniformly distributed between the specified &lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%2C+kotlin.ULong%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%2C+kotlin.ULong%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULONG&lt;/a&gt;均一指定間に分布乱数値&lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%2C+kotlin.ULong%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%2C+kotlin.ULong%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界を。</target>
        </trans-unit>
        <trans-unit id="a6da6d1f8e6d83268cfddc1ca01d028666d50d99" translate="yes" xml:space="preserve">
          <source>Generates a &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; random value uniformly distributed in the specified &lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ranges.ULongRange%29%2Frange&quot;&gt;range&lt;/a&gt;: from &lt;code&gt;range.start&lt;/code&gt; inclusive to &lt;code&gt;range.endInclusive&lt;/code&gt; inclusive.</source>
          <target state="translated">生成&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULONG&lt;/a&gt;均一指定に分布乱数値&lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ranges.ULongRange%29%2Frange&quot;&gt;範囲&lt;/a&gt;：から &lt;code&gt;range.start&lt;/code&gt; 含めに &lt;code&gt;range.endInclusive&lt;/code&gt; 含め。</target>
        </trans-unit>
        <trans-unit id="9d6b5d91e9590b09d5869bda06c3e6b0bf73ab0a" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Double&lt;/code&gt; random value uniformly distributed between 0 (inclusive) and &lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive).</source>
          <target state="translated">0（包括的）と&lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt;（排他的）の間で均一に分散された &lt;code&gt;Double&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="ec5869eeef0508f5a390633c4af337b342951d4d" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Double&lt;/code&gt; random value uniformly distributed between 0 (inclusive) and &lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive).</source>
          <target state="translated">0（包括的）と&lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt;（排他的）の間で均一に分散された &lt;code&gt;Double&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="23183f2a00cc05d170d3187fadb1b4c9530eeaa1" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Double&lt;/code&gt; random value uniformly distributed between the specified &lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成 &lt;code&gt;Double&lt;/code&gt; 均一指定間に分布乱数値&lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界を。</target>
        </trans-unit>
        <trans-unit id="2c885277e3d75b6a7d820f8993b27b0ea1ed1831" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Double&lt;/code&gt; random value uniformly distributed between the specified &lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成 &lt;code&gt;Double&lt;/code&gt; 均一指定間に分布乱数値&lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%2C+kotlin.Double%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界を。</target>
        </trans-unit>
        <trans-unit id="5a6b4f88da0f76f60921086afa057e783981746d" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Long&lt;/code&gt; random value uniformly distributed between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified &lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;until&lt;/a&gt; bound (exclusive).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; （両端を含む）から指定された範囲（両端を含まない）&lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;まで&lt;/a&gt;指定された値の間で均一に分散された &lt;code&gt;Long&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="60c65d3b69ec73d8ccba96a172c16774c259c15d" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Long&lt;/code&gt; random value uniformly distributed between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified &lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;until&lt;/a&gt; bound (exclusive).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; （両端を含む）から指定された範囲（両端を含まない）&lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;まで&lt;/a&gt;指定された値の間で均一に分散された &lt;code&gt;Long&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="ab109e5e8d3d0e327a16d9897abb1724c9e3febe" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Long&lt;/code&gt; random value uniformly distributed between &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; (inclusive).</source>
          <target state="translated">&lt;code&gt;Long.MIN_VALUE&lt;/code&gt; と &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; （両端を含む）の間で均一に分散された &lt;code&gt;Long&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="e607b06de9bc2f244a31f0349072809203ea1b71" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Long&lt;/code&gt; random value uniformly distributed between the specified &lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成 &lt;code&gt;Long&lt;/code&gt; 均一指定間に分布乱数値&lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界が。</target>
        </trans-unit>
        <trans-unit id="e9f12bef09f7fda69f9bcf34d36b4a468e06795d" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Long&lt;/code&gt; random value uniformly distributed between the specified &lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成 &lt;code&gt;Long&lt;/code&gt; 均一指定間に分布乱数値&lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%2C+kotlin.Long%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界が。</target>
        </trans-unit>
        <trans-unit id="2ca32feb98c1f1a296ae0d442d2374d09519129f" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;Long&lt;/code&gt; random value uniformly distributed in the specified &lt;a href=&quot;next-long#kotlin.random%24nextLong%28kotlin.random.Random%2C+kotlin.ranges.LongRange%29%2Frange&quot;&gt;range&lt;/a&gt;: from &lt;code&gt;range.start&lt;/code&gt; inclusive to &lt;code&gt;range.endInclusive&lt;/code&gt; inclusive.</source>
          <target state="translated">生成 &lt;code&gt;Long&lt;/code&gt; 均一指定に分布乱数値&lt;a href=&quot;next-long#kotlin.random%24nextLong%28kotlin.random.Random%2C+kotlin.ranges.LongRange%29%2Frange&quot;&gt;範囲&lt;/a&gt;：から &lt;code&gt;range.start&lt;/code&gt; 含めに &lt;code&gt;range.endInclusive&lt;/code&gt; 含め。</target>
        </trans-unit>
        <trans-unit id="0f136df27ab0868f4bf0a7576712f622b78145c2" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; random value uniformly distributed between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified &lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;until&lt;/a&gt; bound (exclusive).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; （両端を含む）から指定された範囲（両端を含まない）&lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;まで&lt;/a&gt;指定された &lt;code&gt;Int&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="ec98b0a06fdbd7a82ef2f666365c49873e613a82" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; random value uniformly distributed between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified &lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;until&lt;/a&gt; bound (exclusive).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; （両端を含む）から指定された範囲（両端を含まない）&lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;まで&lt;/a&gt;指定された &lt;code&gt;Int&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="04f70d4706957e55f4983127f5ed29b9491f0f07" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; random value uniformly distributed between &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; (inclusive).</source>
          <target state="translated">&lt;code&gt;Int.MIN_VALUE&lt;/code&gt; と &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; （両端を含む）の間で均一に分散された &lt;code&gt;Int&lt;/code&gt; ランダム値を生成します。</target>
        </trans-unit>
        <trans-unit id="476b2cb5400c0e512ae51d0729074ed01ac8bda4" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; random value uniformly distributed between the specified &lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成 &lt;code&gt;Int&lt;/code&gt; 均一指定間に分布乱数値&lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界が。</target>
        </trans-unit>
        <trans-unit id="0de235eec64bc5d3abe57854cae11f52092981c6" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; random value uniformly distributed between the specified &lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Funtil&quot;&gt;until&lt;/a&gt; (exclusive) bounds.</source>
          <target state="translated">生成 &lt;code&gt;Int&lt;/code&gt; 均一指定間に分布乱数値&lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;から&lt;/a&gt;（包括的）と&lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%2C+kotlin.Int%29%2Funtil&quot;&gt;なるまで&lt;/a&gt;（排他的）境界が。</target>
        </trans-unit>
        <trans-unit id="1c5044362d31a36128faeaa0ad8440d54a5b8752" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; random value uniformly distributed in the specified &lt;a href=&quot;next-int#kotlin.random%24nextInt%28kotlin.random.Random%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt;: from &lt;code&gt;range.start&lt;/code&gt; inclusive to &lt;code&gt;range.endInclusive&lt;/code&gt; inclusive.</source>
          <target state="translated">生成 &lt;code&gt;Int&lt;/code&gt; 均一指定に分布乱数値&lt;a href=&quot;next-int#kotlin.random%24nextInt%28kotlin.random.Random%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;の範囲は&lt;/a&gt;：から &lt;code&gt;range.start&lt;/code&gt; 含めに &lt;code&gt;range.endInclusive&lt;/code&gt; 含め。</target>
        </trans-unit>
        <trans-unit id="0409d26d25d18313944791fd4e9f7071a9c95419" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; whose lower &lt;a href=&quot;../next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; bits are filled with random values and the remaining upper bits are zero.</source>
          <target state="translated">下位の&lt;a href=&quot;../next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;ビットがランダムな値で埋められ、残りの上位ビットがゼロである &lt;code&gt;Int&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="ed35029e5017af43b400a43a4628d6b0d880f06d" translate="yes" xml:space="preserve">
          <source>Generates an &lt;code&gt;Int&lt;/code&gt; whose lower &lt;a href=&quot;next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; bits are filled with random values and the remaining upper bits are zero.</source>
          <target state="translated">下位の&lt;a href=&quot;next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;ビットがランダムな値で埋められ、残りの上位ビットがゼロである &lt;code&gt;Int&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="1fd83bc9d972c10c11aa356e5d5814078cadb5db" translate="yes" xml:space="preserve">
          <source>Generating Bindings</source>
          <target state="translated">バインディングの生成</target>
        </trans-unit>
        <trans-unit id="1b570d05016f6a7ca8005a2f5e7a392d74fdcfce" translate="yes" xml:space="preserve">
          <source>Generating Documentation</source>
          <target state="translated">ドキュメントの生成</target>
        </trans-unit>
        <trans-unit id="d383d1659362e7239295fb9a0f5f6c1929f87149" translate="yes" xml:space="preserve">
          <source>Generating Kotlin sources</source>
          <target state="translated">Kotlinソースの生成</target>
        </trans-unit>
        <trans-unit id="8551aaa91b99dd56e53754d86f9c806a66101455" translate="yes" xml:space="preserve">
          <source>Generating documentation</source>
          <target state="translated">ドキュメントの生成</target>
        </trans-unit>
        <trans-unit id="c6b50b1155789f10b71f1d8e7eed8e5f96125848" translate="yes" xml:space="preserve">
          <source>Generating markup with Kotlin code, such as &lt;a href=&quot;https://github.com/Kotlin/kotlinx.html&quot;&gt;HTML&lt;/a&gt; or XML;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Kotlin/kotlinx.html&quot;&gt;HTML&lt;/a&gt;やXML などのKotlinコードでマークアップを生成します。</target>
        </trans-unit>
        <trans-unit id="ecabf0ae993c552c88079cae877c4784c545939c" translate="yes" xml:space="preserve">
          <source>Generating source map</source>
          <target state="translated">ソースマップの生成</target>
        </trans-unit>
        <trans-unit id="c551db814cb760b3eeb8c8927c9cd28545c1386e" translate="yes" xml:space="preserve">
          <source>Generating the Documentation</source>
          <target state="translated">ドキュメントの生成</target>
        </trans-unit>
        <trans-unit id="2968d68104a89b44e3e96456644969cfbe30ace4" translate="yes" xml:space="preserve">
          <source>Generation of default methods is only possible with JVM target bytecode version 1.8 (&lt;code&gt;-jvm-target 1.8&lt;/code&gt;) or higher.</source>
          <target state="translated">デフォルトのメソッドの生成は、JVMターゲットバイトコードバージョン1.8（ &lt;code&gt;-jvm-target 1.8&lt;/code&gt; ）以降でのみ可能です。</target>
        </trans-unit>
        <trans-unit id="83082f46072d254fd933bf6e78414552f2b12960" translate="yes" xml:space="preserve">
          <source>Generic Functions</source>
          <target state="translated">汎用関数</target>
        </trans-unit>
        <trans-unit id="c22e5721464820e7a81c36569ec53083ecc8eb34" translate="yes" xml:space="preserve">
          <source>Generic constraints</source>
          <target state="translated">一般的な制約</target>
        </trans-unit>
        <trans-unit id="cce03127b5a38d4eca19d77a229234d826517c5d" translate="yes" xml:space="preserve">
          <source>Generic enum value access</source>
          <target state="translated">汎用列挙値アクセス</target>
        </trans-unit>
        <trans-unit id="acc8a030fcc7a80f6f90bb435dde9b34b92c8a04" translate="yes" xml:space="preserve">
          <source>Generic feature support for Objc and Swift differ from Kotlin, so the translation will inevitably lose some information, but the features supported retain meaningful information.</source>
          <target state="translated">ObjcとSwiftの一般的な機能サポートはKotlinとは異なるため、翻訳は必然的に情報を失いますが、サポートされている機能は意味のある情報を保持しています。</target>
        </trans-unit>
        <trans-unit id="37f5365cdbef14515226dcd384583192170cc525" translate="yes" xml:space="preserve">
          <source>Generic functions</source>
          <target state="translated">汎用関数</target>
        </trans-unit>
        <trans-unit id="e385420208351239c9848b5aa01ee2121d573c3a" translate="yes" xml:space="preserve">
          <source>Generic type parameter (unsupported yet)</source>
          <target state="translated">汎用型パラメータ(未サポート</target>
        </trans-unit>
        <trans-unit id="92a2f746b7830fb83eba6c4cddd355833efd75f2" translate="yes" xml:space="preserve">
          <source>Generic type parameters</source>
          <target state="translated">汎用型パラメータ</target>
        </trans-unit>
        <trans-unit id="4f81bf48fda6a667e13ada0305e9584972f3dbe7" translate="yes" xml:space="preserve">
          <source>Generic types used for Java interoperation with incorrect nullability, e.g. a piece of Java code might add &lt;code&gt;null&lt;/code&gt; into a Kotlin &lt;code&gt;MutableList&amp;lt;String&amp;gt;&lt;/code&gt;, meaning that &lt;code&gt;MutableList&amp;lt;String?&amp;gt;&lt;/code&gt; should be used for working with it;</source>
          <target state="translated">不正な &lt;code&gt;null&lt;/code&gt; 可能性を伴うJava相互運用に使用されるジェネリック型。たとえば、Javaコードの一部がKotlin &lt;code&gt;MutableList&amp;lt;String&amp;gt;&lt;/code&gt; にnullを追加する可能性があります。つまり、 &lt;code&gt;MutableList&amp;lt;String?&amp;gt;&lt;/code&gt; を使用して操作する必要があります。</target>
        </trans-unit>
        <trans-unit id="80dadd86173d0ff3979257793d4e45beb238b6a2" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Generics</target>
        </trans-unit>
        <trans-unit id="cca07acad0dc1efd73fdb4cb240cc7cfd1e90717" translate="yes" xml:space="preserve">
          <source>Generics are currently not enabled by default. To have the framework header written with generics, add an experimental flag to the compiler config:</source>
          <target state="translated">ジェネリックは現在のところデフォルトでは有効になっていません。フレームワークのヘッダをジェネリックで書かせるには、コンパイラの設定に experimental フラグを追加してください。</target>
        </trans-unit>
        <trans-unit id="55fd76732b46ad77052ac2d3873198cc27caa1b6" translate="yes" xml:space="preserve">
          <source>Generics can only be defined on classes, not on interfaces (protocols in Objc and Swift) or functions.</source>
          <target state="translated">ジェネリックはクラス上でのみ定義でき、インターフェース(ObjcやSwiftのプロトコル)や関数上では定義できません。</target>
        </trans-unit>
        <trans-unit id="1e94ba5be90faaf690548102545dc0952f060022" translate="yes" xml:space="preserve">
          <source>GeometryUtils</source>
          <target state="translated">GeometryUtils</target>
        </trans-unit>
        <trans-unit id="4e3fb78e17a8387a0dee01367cbbd69a1775c579" translate="yes" xml:space="preserve">
          <source>Get a byte from the mutable data.</source>
          <target state="translated">変形可能なデータからバイトを取得します。</target>
        </trans-unit>
        <trans-unit id="97255b26e50ef02686cad7f6fc1ee00930f7d4a3" translate="yes" xml:space="preserve">
          <source>Get first item of a possibly empty collection</source>
          <target state="translated">空の可能性のあるコレクションの最初の項目を取得</target>
        </trans-unit>
        <trans-unit id="c2e1b35c387fa63896999438c72ee91795fb8ecd" translate="yes" xml:space="preserve">
          <source>GetNotificationOptions</source>
          <target state="translated">GetNotificationOptions</target>
        </trans-unit>
        <trans-unit id="00112e9e707db49f0a0f93f1ee129c6efe3c1bc4" translate="yes" xml:space="preserve">
          <source>GetRootNodeOptions</source>
          <target state="translated">GetRootNodeOptions</target>
        </trans-unit>
        <trans-unit id="0c7c6733bfd36f14bb53c13bb7a5f327d6e85555" translate="yes" xml:space="preserve">
          <source>GetSVGDocument</source>
          <target state="translated">GetSVGDocument</target>
        </trans-unit>
        <trans-unit id="1c29cd0a72813c07e82b51cdf61ab34e19b8d38a" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../-char/index#kotlin.Char&quot;&gt;Char&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-char-at#kotlin.native%24getCharAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-char-at#kotlin.native%24getCharAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-char/index#kotlin.Char&quot;&gt;Charを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="12c146ab92ff828f48210bfc29f2a0b851cff183" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-double-at#kotlin.native%24getDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-double-at#kotlin.native%24getDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-double/index#kotlin.Double&quot;&gt;Doubleを&lt;/a&gt;取得します</target>
        </trans-unit>
        <trans-unit id="c613a964720f0d6b16c4f6f3e24ca409a93e230b" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-float-at#kotlin.native%24getFloatAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-float-at#kotlin.native%24getFloatAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-float/index#kotlin.Float&quot;&gt;Floatを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="e40860a0e917d0b30df1c353bdab3718cc1a5cae" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-int-at#kotlin.native%24getIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-int-at#kotlin.native%24getIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Intを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="ba9e4dffcc804ef80ace24233a9a283d9ee2413e" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-long-at#kotlin.native%24getLongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-long-at#kotlin.native%24getLongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Longを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="050c879d6a9b25698d6d451f3f94af42b69689a3" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-short-at#kotlin.native%24getShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-short-at#kotlin.native%24getShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Shortを&lt;/a&gt;取得します</target>
        </trans-unit>
        <trans-unit id="a3b81bd33b6cd037160b4cec0ac8e3dda6d1f79b" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../kotlin/-char/index#kotlin.Char&quot;&gt;Char&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-char-at#kotlin.native%24getCharAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-char-at#kotlin.native%24getCharAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-char/index#kotlin.Char&quot;&gt;Charを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="0a9274c2e88dd117f1562e9fb7853c1bb8a76f52" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-double-at#kotlin.native%24getDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-double-at#kotlin.native%24getDoubleAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Doubleを&lt;/a&gt;取得します</target>
        </trans-unit>
        <trans-unit id="05f14be5d64ee1f27a2c3eebdfd84da241f1b7b5" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-float-at#kotlin.native%24getFloatAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-float-at#kotlin.native%24getFloatAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Floatを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="19b181f7974529f4fcfdfb7c7df609deb054c407" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-int-at#kotlin.native%24getIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-int-at#kotlin.native%24getIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Intを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="58b0897e8884a67298867d9626c28bef8ba34b98" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-long-at#kotlin.native%24getLongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-long-at#kotlin.native%24getLongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Longを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="77ab2f99d15b02d7c8aede4c088766c187e76fbe" translate="yes" xml:space="preserve">
          <source>Gets &lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-short-at#kotlin.native%24getShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-short-at#kotlin.native%24getShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーから&lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Shortを&lt;/a&gt;取得します</target>
        </trans-unit>
        <trans-unit id="ceba4e0c24f35bc1d24919beac99894fff5cc49e" translate="yes" xml:space="preserve">
          <source>Gets UByte out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-u-byte-at#kotlin.native%24getUByteAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-u-byte-at#kotlin.native%24getUByteAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUByteを取得します。</target>
        </trans-unit>
        <trans-unit id="5443eaf1f8b4d504383ed266ef07407ecf2dec10" translate="yes" xml:space="preserve">
          <source>Gets UByte out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-u-byte-at#kotlin.native%24getUByteAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-u-byte-at#kotlin.native%24getUByteAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUByteを取得します。</target>
        </trans-unit>
        <trans-unit id="5e56c63ae7abdc2f655dc5a3867f58e6cf8f10ec" translate="yes" xml:space="preserve">
          <source>Gets UInt out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-u-int-at#kotlin.native%24getUIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-u-int-at#kotlin.native%24getUIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUIntを取得します。</target>
        </trans-unit>
        <trans-unit id="ff8bb654dc35893343272fb488280f04d13917e5" translate="yes" xml:space="preserve">
          <source>Gets UInt out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-u-int-at#kotlin.native%24getUIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-u-int-at#kotlin.native%24getUIntAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUIntを取得します。</target>
        </trans-unit>
        <trans-unit id="ad23f949f964388c3320ca1484e325ac9c528b96" translate="yes" xml:space="preserve">
          <source>Gets ULong out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-u-long-at#kotlin.native%24getULongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-u-long-at#kotlin.native%24getULongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからULongを取得します。</target>
        </trans-unit>
        <trans-unit id="f09eaa4ed41d19ee2683030c8f94ad668353d816" translate="yes" xml:space="preserve">
          <source>Gets ULong out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-u-long-at#kotlin.native%24getULongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-u-long-at#kotlin.native%24getULongAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからULongを取得します。</target>
        </trans-unit>
        <trans-unit id="f6b5923edb949a03319c75e067d0d3d389ef5b5b" translate="yes" xml:space="preserve">
          <source>Gets UShort out of the &lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;get-u-short-at#kotlin.native%24getUShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;get-u-short-at#kotlin.native%24getUShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;../kotlin/-byte-array/index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUShortを取得します</target>
        </trans-unit>
        <trans-unit id="359c6d06bf5b44e59852ecd275fcbab50a57e29e" translate="yes" xml:space="preserve">
          <source>Gets UShort out of the &lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt; byte buffer at specified index &lt;a href=&quot;../../kotlin.native/get-u-short-at#kotlin.native%24getUShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt;</source>
          <target state="translated">指定されたインデックス&lt;a href=&quot;../../kotlin.native/get-u-short-at#kotlin.native%24getUShortAt%28kotlin.ByteArray%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;で&lt;a href=&quot;index#kotlin.ByteArray&quot;&gt;ByteArray&lt;/a&gt;バイトバッファーからUShortを取得します</target>
        </trans-unit>
        <trans-unit id="11cb5c2d4da49e0fbbf552dbf506006785cc6aec" translate="yes" xml:space="preserve">
          <source>Gets a sequence for visiting this directory and all its content in bottom-up order. Depth-first search is used and directories are visited after all their files.</source>
          <target state="translated">このディレクトリとそのすべてのコンテンツをボトムアップ順に訪問する順序を取得します。深さ優先検索が使用され、ディレクトリはすべてのファイルの後に訪問されます。</target>
        </trans-unit>
        <trans-unit id="de21168140d7a6ffec2aa5d645b81cfb0b1d5ead" translate="yes" xml:space="preserve">
          <source>Gets a sequence for visiting this directory and all its content in top-down order. Depth-first search is used and directories are visited before all their files.</source>
          <target state="translated">このディレクトリとそのすべてのコンテンツをトップダウン順に訪問する順序を取得します。深さ優先検索が使用され、ディレクトリはすべてのファイルの前に訪問されます。</target>
        </trans-unit>
        <trans-unit id="8c112a6c105dbc16e8786834f4d9d438ca98749b" translate="yes" xml:space="preserve">
          <source>Gets a sequence for visiting this directory and all its content.</source>
          <target state="translated">このディレクトリを訪問するためのシーケンスと、そのすべてのコンテンツを取得します。</target>
        </trans-unit>
        <trans-unit id="ba0bb49ff92219d8b958b11eef51aa366e859249" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this node is a TEXT_NODE or a CDATA_SECTION_NODE.</source>
          <target state="translated">このノードが TEXT_NODE であるか CDATA_SECTION_NODE であるかを示す値を取得する。</target>
        </trans-unit>
        <trans-unit id="194ae6961c389bb66dfbaf6c24ca4f8b25cffd7f" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this node is an &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/org.w3c.dom/-element/index.html&quot;&gt;Element&lt;/a&gt;.</source>
          <target state="translated">このノードが&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/org.w3c.dom/-element/index.html&quot;&gt;Element&lt;/a&gt;かどうかを示す値を取得します。</target>
        </trans-unit>
        <trans-unit id="31dbfb91c70eeb1c5307d3ad1bfaea63d69faa0e" translate="yes" xml:space="preserve">
          <source>Gets current system time in microseconds since certain moment in the past, only delta between two subsequent calls makes sense.</source>
          <target state="translated">過去のある瞬間からの現在のシステム時刻をマイクロ秒単位で取得します。</target>
        </trans-unit>
        <trans-unit id="0809d536712c860de45cf5b17c686273bac85a06" translate="yes" xml:space="preserve">
          <source>Gets current system time in milliseconds since certain moment in the past, only delta between two subsequent calls makes sense.</source>
          <target state="translated">過去のある瞬間からの現在のシステム時刻をミリ秒単位で取得します。</target>
        </trans-unit>
        <trans-unit id="a307890a113e29c1affbb02eeed92e0fe3c13424" translate="yes" xml:space="preserve">
          <source>Gets current system time in nanoseconds since certain moment in the past, only delta between two subsequent calls makes sense.</source>
          <target state="translated">過去のある瞬間からの現在のシステム時刻をナノ秒単位で取得します。</target>
        </trans-unit>
        <trans-unit id="c3c82af36761705f1895b7f6ddac8345e79e3d55" translate="yes" xml:space="preserve">
          <source>Gets the entire content of this file as a String using UTF-8 or specified &lt;a href=&quot;read-text#kotlin.io%24readText%28java.io.File%2C+java.nio.charset.Charset%29%2Fcharset&quot;&gt;charset&lt;/a&gt;.</source>
          <target state="translated">このファイルのコンテンツ全体を、UTF-8または指定された&lt;a href=&quot;read-text#kotlin.io%24readText%28java.io.File%2C+java.nio.charset.Charset%29%2Fcharset&quot;&gt;文字セット&lt;/a&gt;を使用する文字列として取得します。</target>
        </trans-unit>
        <trans-unit id="95b4415867bb0e04fef4852f7d8e7b04b048c510" translate="yes" xml:space="preserve">
          <source>Gets the entire content of this file as a byte array.</source>
          <target state="translated">このファイルの内容全体をバイト配列で取得します。</target>
        </trans-unit>
        <trans-unit id="7163713dcc358cd25d8cb51e383949b943ff7b3c" translate="yes" xml:space="preserve">
          <source>Gets the lazily initialized value of the current Lazy instance. Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.</source>
          <target state="translated">現在の Lazy インスタンスの初期化された値を取得します。一度初期化された値は、この Lazy インスタンスの残りのライフタイム中は変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="37c41acddc812cd7a66c995087ca7ce3dbb73e5d" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../../kotlin/-boolean/index#kotlin.Boolean&quot;&gt;Boolean&lt;/a&gt; value.</source>
          <target state="translated">次のランダムな&lt;a href=&quot;../../../kotlin/-boolean/index#kotlin.Boolean&quot;&gt;ブール&lt;/a&gt;値を取得します。</target>
        </trans-unit>
        <trans-unit id="30956cdd85522de8900f766117ac0700a203fc7b" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; value uniformly distributed between 0 (inclusive) and 1 (exclusive).</source>
          <target state="translated">0（両端を含む）と1（両端を含まない）の間で均一に分散された次のランダム&lt;a href=&quot;../../../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt;値を取得します。</target>
        </trans-unit>
        <trans-unit id="309ef06192b09598fcb2a4953632ab464eb205c6" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; value uniformly distributed between 0 (inclusive) and 1 (exclusive).</source>
          <target state="translated">0（両端を含む）と1（両端を含まない）の間で均一に分散された次のランダムな&lt;a href=&quot;../../../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt;値を取得します。</target>
        </trans-unit>
        <trans-unit id="f13b624fdef9631938704e53303259adbf3d3008" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-boolean/index#kotlin.Boolean&quot;&gt;Boolean&lt;/a&gt; value.</source>
          <target state="translated">次のランダムな&lt;a href=&quot;../../kotlin/-boolean/index#kotlin.Boolean&quot;&gt;ブール&lt;/a&gt;値を取得します。</target>
        </trans-unit>
        <trans-unit id="9c1a73c830924c485c129aec0e959e687729be76" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; value uniformly distributed between 0 (inclusive) and 1 (exclusive).</source>
          <target state="translated">0（両端を含む）と1（両端を含まない）の間で均一に分散された次のランダム&lt;a href=&quot;../../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt;値を取得します。</target>
        </trans-unit>
        <trans-unit id="78b55d267d8cb8da4eb67367038fae92883ffba8" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; value uniformly distributed between 0 (inclusive) and 1 (exclusive).</source>
          <target state="translated">0（両端を含む）と1（両端を含まない）の間で均一に分散された次のランダムな&lt;a href=&quot;../../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt;値を取得します。</target>
        </trans-unit>
        <trans-unit id="6b069452c867cc34d833fd1f74484a4bac1b8d73" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator in the specified &lt;a href=&quot;../next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.ranges.UIntRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.ranges.UIntRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム&lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UIntを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="37e9ce94104e274134ae5cd0024dee2a28d8b36a" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム&lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UIntを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="3c9db191e67fe2d032c273f05c4c2a95b4fca99e" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator less than the specified &lt;a href=&quot;../next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;../next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された値よりも小さい乱数ジェネレータから次のランダム&lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UIntを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="df0f8f4c47ad4633251926059d24e74bd095651a" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator.</source>
          <target state="translated">乱数&lt;a href=&quot;../../kotlin/-u-int/index&quot;&gt;ジェネレータ&lt;/a&gt;から次のランダムUIntを取得します。</target>
        </trans-unit>
        <trans-unit id="e7793f99b74ab0789880c106b3979b40f240bb01" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator in the specified &lt;a href=&quot;../next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ranges.ULongRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ranges.ULongRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム&lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULongを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="c6382977c67f7a868b05c20e430ee75137588175" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム&lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULongを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="7ac3458718ad9505600ca7fb8773a471b9e50892" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator less than the specified &lt;a href=&quot;../next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;../next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された数よりも小さい乱数ジェネレータから次のランダム&lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULongを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="a54b4e342c19fcbe2f3af7a96c78016cc14cedb3" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator.</source>
          <target state="translated">乱数&lt;a href=&quot;../../kotlin/-u-long/index&quot;&gt;ジェネレータ&lt;/a&gt;から次のランダムULongを取得します。</target>
        </trans-unit>
        <trans-unit id="929b9e532a5b7b161a700de08add954ec6d36ca6" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator in the specified &lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.ranges.UIntRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.ranges.UIntRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UIntを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="471972f13ea37f1c27e3718fc1a40679cedb0068" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UIntを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="f11249e53ff101c876fd8a178739950955288fdc" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator less than the specified &lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;next-u-int#kotlin.random%24nextUInt%28kotlin.random.Random%2C+kotlin.UInt%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された値よりも小さい乱数ジェネレータから次のランダム&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UIntを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="8d7b64258910d1f8e7e95f6885bafd4b7d6aef91" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; from the random number generator.</source>
          <target state="translated">乱数&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;ジェネレータ&lt;/a&gt;から次のランダムUIntを取得します。</target>
        </trans-unit>
        <trans-unit id="6066b9becb7346790721071986c20dd5acb6de18" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator in the specified &lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ranges.ULongRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ranges.ULongRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULongを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="9b589f8eef60bcd4b38db2895bff627da29fcfcd" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULongを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="112333309fc46102c0a0448255000cc3c9ba3f69" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator less than the specified &lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;next-u-long#kotlin.random%24nextULong%28kotlin.random.Random%2C+kotlin.ULong%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された数よりも小さい乱数ジェネレータから次のランダム&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULongを&lt;/a&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="76b0c05fa65e814a57c8a2da06ad7a361405834e" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; from the random number generator.</source>
          <target state="translated">乱数&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ジェネレータ&lt;/a&gt;から次のランダムULongを取得します。</target>
        </trans-unit>
        <trans-unit id="04f34e55827ddb4623c3b83662a56026854407e8" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;../next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">次のランダムな&lt;a href=&quot;../next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;ビット数を取得します。</target>
        </trans-unit>
        <trans-unit id="2faba648c909e55694100a5c0c3e4adf90257566" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;a href=&quot;next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt; number of bits.</source>
          <target state="translated">次のランダムな&lt;a href=&quot;next-bits#kotlin.random.Random%24nextBits%28kotlin.Int%29%2FbitCount&quot;&gt;bitCount&lt;/a&gt;ビット数を取得します。</target>
        </trans-unit>
        <trans-unit id="9028d1dcb4cef84a31ee55278bbac6ae5357d31d" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Double&lt;/code&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム &lt;code&gt;Double&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="f543f8df7361b2bb53169e28e58d78384cbc4fc5" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Int&lt;/code&gt; from the random number generator in the specified &lt;a href=&quot;../next-int#kotlin.random%24nextInt%28kotlin.random.Random%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../next-int#kotlin.random%24nextInt%28kotlin.random.Random%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム &lt;code&gt;Int&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="0308952d598f94e2695c06c2f23d1a62905b0bee" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Int&lt;/code&gt; from the random number generator in the specified &lt;a href=&quot;next-int#kotlin.random%24nextInt%28kotlin.random.Random%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;next-int#kotlin.random%24nextInt%28kotlin.random.Random%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム &lt;code&gt;Int&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="f1e1e810f585a0afdffc6e7c00adc9f1a30bb15d" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Int&lt;/code&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム &lt;code&gt;Int&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="705882ad155ff18dc9f97216330472b8c8b24ba3" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Int&lt;/code&gt; from the random number generator.</source>
          <target state="translated">乱数ジェネレータから次のランダム &lt;code&gt;Int&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="d1ca0ffd7d53e1b5ad497b30e898b764bfc015ac" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Long&lt;/code&gt; from the random number generator in the specified &lt;a href=&quot;../next-long#kotlin.random%24nextLong%28kotlin.random.Random%2C+kotlin.ranges.LongRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../next-long#kotlin.random%24nextLong%28kotlin.random.Random%2C+kotlin.ranges.LongRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム &lt;code&gt;Long&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="e5fb6f9e1469c44b19d531da2765acbd786f7313" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Long&lt;/code&gt; from the random number generator in the specified &lt;a href=&quot;next-long#kotlin.random%24nextLong%28kotlin.random.Random%2C+kotlin.ranges.LongRange%29%2Frange&quot;&gt;range&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;next-long#kotlin.random%24nextLong%28kotlin.random.Random%2C+kotlin.ranges.LongRange%29%2Frange&quot;&gt;範囲内の&lt;/a&gt;乱数ジェネレータから次のランダム &lt;code&gt;Long&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="7b1e8d7297c8baa2df40c7c82c7aad1283ee0ef7" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Long&lt;/code&gt; from the random number generator in the specified range.</source>
          <target state="translated">指定された範囲内の乱数ジェネレータから次のランダム &lt;code&gt;Long&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="c21be4abd909031b3586371d1970672e7e168e9a" translate="yes" xml:space="preserve">
          <source>Gets the next random &lt;code&gt;Long&lt;/code&gt; from the random number generator.</source>
          <target state="translated">乱数ジェネレータから次のランダム &lt;code&gt;Long&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="b6be61594fa2dd329ed385c4171b2602f61166a8" translate="yes" xml:space="preserve">
          <source>Gets the next random non-negative &lt;code&gt;Double&lt;/code&gt; from the random number generator less than the specified &lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;../next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された値よりも小さい乱数ジェネレータから次のランダムな非負の &lt;code&gt;Double&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="0c9a1bb80dc61d4350189c8d53a1723a1ce8bab5" translate="yes" xml:space="preserve">
          <source>Gets the next random non-negative &lt;code&gt;Double&lt;/code&gt; from the random number generator less than the specified &lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;next-double#kotlin.random.Random%24nextDouble%28kotlin.Double%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された値よりも小さい乱数ジェネレータから次のランダムな非負の &lt;code&gt;Double&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="4284455c3c686da2f5f0607a4e4f8fdbd0d56bd4" translate="yes" xml:space="preserve">
          <source>Gets the next random non-negative &lt;code&gt;Int&lt;/code&gt; from the random number generator less than the specified &lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;../next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された数よりも小さい次のランダムな非負の &lt;code&gt;Int&lt;/code&gt; を乱数ジェネレーターから取得します。</target>
        </trans-unit>
        <trans-unit id="8bd8c79c3e21d295fb1c15cde569828a6e0d3051" translate="yes" xml:space="preserve">
          <source>Gets the next random non-negative &lt;code&gt;Int&lt;/code&gt; from the random number generator less than the specified &lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;next-int#kotlin.random.Random%24nextInt%28kotlin.Int%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された数よりも小さい次のランダムな非負の &lt;code&gt;Int&lt;/code&gt; を乱数ジェネレーターから取得します。</target>
        </trans-unit>
        <trans-unit id="403ac94b16c81a69dd16b254f1801320c57f5111" translate="yes" xml:space="preserve">
          <source>Gets the next random non-negative &lt;code&gt;Long&lt;/code&gt; from the random number generator less than the specified &lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;../next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された値よりも小さい次のランダムな非負の &lt;code&gt;Long&lt;/code&gt; を乱数ジェネレーターから取得します。</target>
        </trans-unit>
        <trans-unit id="9c0e48933f74bb2c6310b971048738f978b109d0" translate="yes" xml:space="preserve">
          <source>Gets the next random non-negative &lt;code&gt;Long&lt;/code&gt; from the random number generator less than the specified &lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;until&lt;/a&gt; bound.</source>
          <target state="translated">バインドさ&lt;a href=&quot;next-long#kotlin.random.Random%24nextLong%28kotlin.Long%29%2Funtil&quot;&gt;れるまで&lt;/a&gt;、指定された値よりも小さい次のランダムな非負の &lt;code&gt;Long&lt;/code&gt; を乱数ジェネレーターから取得します。</target>
        </trans-unit>
        <trans-unit id="2b7e0a9f8042c263c6cd6468bf56dde544cd8ae0" translate="yes" xml:space="preserve">
          <source>Gets the value in the current thread's copy of this thread-local variable or replaces the value with the result of calling &lt;a href=&quot;get-or-set#kotlin.concurrent%24getOrSet%28java.lang.ThreadLocal%28%28kotlin.concurrent.getOrSet.T%29%29%2C+kotlin.Function0%28%28kotlin.concurrent.getOrSet.T%29%29%29%2Fdefault&quot;&gt;default&lt;/a&gt; function in case if that value was &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このスレッドローカル変数の現在のスレッドのコピー内の値を取得するか、その値が &lt;code&gt;null&lt;/code&gt; の場合は、その値を&lt;a href=&quot;get-or-set#kotlin.concurrent%24getOrSet%28java.lang.ThreadLocal%28%28kotlin.concurrent.getOrSet.T%29%29%2C+kotlin.Function0%28%28kotlin.concurrent.getOrSet.T%29%29%29%2Fdefault&quot;&gt;デフォルト&lt;/a&gt;関数の呼び出しの結果で置き換えます。</target>
        </trans-unit>
        <trans-unit id="96857c88cebeabc578d887e01fbcb2fd02cbcdb7" translate="yes" xml:space="preserve">
          <source>Getter</source>
          <target state="translated">Getter</target>
        </trans-unit>
        <trans-unit id="163dc52918f86c26710b8acaf72b5734b1cf27d1" translate="yes" xml:space="preserve">
          <source>Getter of the property is a &lt;code&gt;get&lt;/code&gt; method declared alongside the property.</source>
          <target state="translated">プロパティのゲッターは、プロパティと一緒に宣言された &lt;code&gt;get&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="4ed1aac47efbb51b56ad6a6f326722a1c1c048e0" translate="yes" xml:space="preserve">
          <source>Getters and Setters</source>
          <target state="translated">ゲッターとセッター</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="f2a96e364f18ce2cf12d58c581b9f77f01d71c61" translate="yes" xml:space="preserve">
          <source>Getting Started with Eclipse IDE</source>
          <target state="translated">Eclipse IDEの入門編</target>
        </trans-unit>
        <trans-unit id="42cf14ca65905dcfc442ada3294d53e40371efdc" translate="yes" xml:space="preserve">
          <source>Getting Started with Gradle</source>
          <target state="translated">Gradleを始めるには</target>
        </trans-unit>
        <trans-unit id="13f4cc71ba71e855fd6ee40fe700d140aa4d0403" translate="yes" xml:space="preserve">
          <source>Getting Started with IntelliJ IDEA</source>
          <target state="translated">IntelliJ IDEAを使い始める</target>
        </trans-unit>
        <trans-unit id="984760bee6820a43a1176969d0eb8e8758e08f83" translate="yes" xml:space="preserve">
          <source>Getting Started with Kotlin and JavaScript with Gradle</source>
          <target state="translated">GradleでKotlinとJavaScriptを始める</target>
        </trans-unit>
        <trans-unit id="5dd4a2a2de278dbd47a7cbdaa4c4b6745d4a19be" translate="yes" xml:space="preserve">
          <source>Getting Started with Kotlin and JavaScript with IntelliJ IDEA</source>
          <target state="translated">IntelliJ IDEAでKotlinとJavaScriptを始める</target>
        </trans-unit>
        <trans-unit id="1d48ae394054c582aa04c2975c93978aeac99618" translate="yes" xml:space="preserve">
          <source>Getting Started with Kotlin and JavaScript with Maven</source>
          <target state="translated">MavenでKotlinとJavaScriptを始める</target>
        </trans-unit>
        <trans-unit id="cd4b0c856208f741f17d1a02da2b24b267c56935" translate="yes" xml:space="preserve">
          <source>Getting Started with Kotlin to JavaScript</source>
          <target state="translated">Kotlin から JavaScript への入門</target>
        </trans-unit>
        <trans-unit id="646a49e49eae55b672b6de83fc26901b5720412e" translate="yes" xml:space="preserve">
          <source>Getting Started with Maven</source>
          <target state="translated">Mavenを始めるには</target>
        </trans-unit>
        <trans-unit id="da6eb7f117bc1433780193d58fd1a8c334269d93" translate="yes" xml:space="preserve">
          <source>Getting Started with the Command Line</source>
          <target state="translated">コマンドラインで始める</target>
        </trans-unit>
        <trans-unit id="77195551022e69f3fe692e55f18a442cb14d057e" translate="yes" xml:space="preserve">
          <source>Getting around</source>
          <target state="translated">移動手段</target>
        </trans-unit>
        <trans-unit id="d966aa4c0cb6af87411922025d607a28da9dadc4" translate="yes" xml:space="preserve">
          <source>Getting representation of the object variable (var) could also be done using the built-in runtime function &lt;code&gt;Konan_DebugPrint&lt;/code&gt; (this approach also works for gdb, using a module of command syntax):</source>
          <target state="translated">オブジェクト変数（var）の表現の取得は、組み込みのランタイム関数 &lt;code&gt;Konan_DebugPrint&lt;/code&gt; を使用して行うこともできます（このアプローチは、コマンド構文のモジュールを使用して、gdbでも機能します）。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="52be919dd9daef1b311b120fb6fe20a334a24e25" translate="yes" xml:space="preserve">
          <source>Getting started with Android and Kotlin</source>
          <target state="translated">AndroidとKotlinを使い始める</target>
        </trans-unit>
        <trans-unit id="a8fef841204af009adaf90bc21fac5ecb522d4af" translate="yes" xml:space="preserve">
          <source>Getting the Ant Tasks</source>
          <target state="translated">アリのタスクの取得</target>
        </trans-unit>
        <trans-unit id="afad882b9cc056965179ab8ca4d21bd55cf909e2" translate="yes" xml:space="preserve">
          <source>Give your project a name and select an SDK version for it.</source>
          <target state="translated">プロジェクトに名前を付け、SDKのバージョンを選択します。</target>
        </trans-unit>
        <trans-unit id="ed8daa798a5b15bec0a3209902f2dd5b84e2b411" translate="yes" xml:space="preserve">
          <source>Given a string &lt;code&gt;s&lt;/code&gt;, you can get a &lt;code&gt;ByteArray&lt;/code&gt; with the UTF-8 encoding of the string by calling &lt;code&gt;s.toByteArray()&lt;/code&gt;, or you can specify another encoding, e.g. &lt;code&gt;s.toByteArray(Charsets.US_ASCII)&lt;/code&gt; - just like &lt;code&gt;encode()&lt;/code&gt; in Python. Given a byte array &lt;code&gt;b&lt;/code&gt; that contains a UTF-8-encoded string, you can get a &lt;code&gt;String&lt;/code&gt; by calling &lt;code&gt;String(b)&lt;/code&gt;; if you've got a different encoding, use e.g. &lt;code&gt;String(b, Charsets.US_ASCII)&lt;/code&gt;, just like &lt;code&gt;decode()&lt;/code&gt; in Python. You can also call e.g. &lt;code&gt;b.toString(Charsets.US_ASCII)&lt;/code&gt;, but do &lt;em&gt;not&lt;/em&gt; call &lt;code&gt;b.toString()&lt;/code&gt; without parameters (this will just print an internal reference to the byte array).</source>
          <target state="translated">文字列を考える &lt;code&gt;s&lt;/code&gt; 、あなたが得ることができ &lt;code&gt;ByteArray&lt;/code&gt; 呼び出すことにより、文字列のUTF-8エンコーディングで &lt;code&gt;s.toByteArray()&lt;/code&gt; 、またはあなたが別のエンコーディングを指定することができ、例えば &lt;code&gt;s.toByteArray(Charsets.US_ASCII)&lt;/code&gt; だけのように- &lt;code&gt;encode()&lt;/code&gt; にPython。バイト配列を考えると &lt;code&gt;b&lt;/code&gt; UTF-8でエンコードされた文字列が含まれている、あなたが得ることができる &lt;code&gt;String&lt;/code&gt; 呼び出すことによって &lt;code&gt;String(b)&lt;/code&gt; ;別のエンコーディングがある場合は、Pythonの &lt;code&gt;decode()&lt;/code&gt; と同じように &lt;code&gt;String(b, Charsets.US_ASCII)&lt;/code&gt; 例えばString（b、Charsets.US_ASCII）を使用します。たとえば &lt;code&gt;b.toString(Charsets.US_ASCII)&lt;/code&gt; を呼び出すこともできますが、 &lt;code&gt;b.toString()&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;呼び出さ&lt;em&gt;ないで&lt;/em&gt;ください。&lt;em&gt;&lt;/em&gt; パラメータなし（これはバイト配列への内部参照を出力するだけです）。</target>
        </trans-unit>
        <trans-unit id="d52776ec9b50b7e842377169a2dc0f87740730c0" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;-iterable#kotlin.collections%24Iterable%28kotlin.Function0%28%28kotlin.collections.Iterator%28%28kotlin.collections.Iterable.T%29%29%29%29%29%2Fiterator&quot;&gt;iterator&lt;/a&gt; function constructs an &lt;a href=&quot;-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt; instance that returns values through the &lt;a href=&quot;-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; provided by that function.</source>
          <target state="translated">&lt;a href=&quot;-iterable#kotlin.collections%24Iterable%28kotlin.Function0%28%28kotlin.collections.Iterator%28%28kotlin.collections.Iterable.T%29%29%29%29%29%2Fiterator&quot;&gt;イテレータ&lt;/a&gt;関数を指定すると、その関数によって提供される&lt;a href=&quot;-iterator/index#kotlin.collections.Iterator&quot;&gt;イテレータ&lt;/a&gt;を介して値を返す&lt;a href=&quot;-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;インスタンスが構築されます。</target>
        </trans-unit>
        <trans-unit id="6f0cc0f079c270a0f9cdb6aa220795e4826b92e8" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;-sequence#kotlin.sequences%24Sequence%28kotlin.Function0%28%28kotlin.collections.Iterator%28%28kotlin.sequences.Sequence.T%29%29%29%29%29%2Fiterator&quot;&gt;iterator&lt;/a&gt; function constructs a &lt;a href=&quot;-sequence/index&quot;&gt;Sequence&lt;/a&gt; that returns values through the &lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; provided by that function. The values are evaluated lazily, and the sequence is potentially infinite.</source>
          <target state="translated">&lt;a href=&quot;-sequence#kotlin.sequences%24Sequence%28kotlin.Function0%28%28kotlin.collections.Iterator%28%28kotlin.sequences.Sequence.T%29%29%29%29%29%2Fiterator&quot;&gt;イテレータ&lt;/a&gt;関数を指定すると、その関数によって提供される&lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;イテレータ&lt;/a&gt;を介して値を返す&lt;a href=&quot;-sequence/index&quot;&gt;シーケンス&lt;/a&gt;が構築されます。値は遅延評価され、シーケンスは潜在的に無限です。</target>
        </trans-unit>
        <trans-unit id="c485d6c75b301df13711cf1468e06dd2f21a2da3" translate="yes" xml:space="preserve">
          <source>Given an &lt;code&gt;R&lt;/code&gt; instance, &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; will let you read the value that the property has in that instance by calling &lt;code&gt;get()&lt;/code&gt;, and &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; will also let you change the property value in the instance by calling &lt;code&gt;set()&lt;/code&gt;. Using this, we can start writing functions that manipulate properties without knowing in advance which property (or which class) they are going to deal with:</source>
          <target state="translated">与えられた &lt;code&gt;R&lt;/code&gt; のインスタンス、 &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; 、プロパティを呼び出すことによって、そのインスタンスであることを値読ませます &lt;code&gt;get()&lt;/code&gt; 、そして &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; また、あなたが呼び出すことで、インスタンス内のプロパティの値を変更できます &lt;code&gt;set()&lt;/code&gt; 。これを使用して、どのプロパティ（またはどのクラス）を処理するかを事前に知らなくても、プロパティを操作する関数の作成を開始できます。</target>
        </trans-unit>
        <trans-unit id="1e5731d4bf9c4d88436dc7528815df264748c74c" translate="yes" xml:space="preserve">
          <source>Given that, the compiler prohibits &lt;em&gt;is&lt;/em&gt;-checks that cannot be performed at runtime due to type erasure, such as &lt;code&gt;ints is List&amp;lt;Int&amp;gt;&lt;/code&gt; or &lt;code&gt;list is T&lt;/code&gt; (type parameter). You can, however, check an instance against a &lt;a href=&quot;generics#star-projections&quot;&gt;star-projected type&lt;/a&gt;:</source>
          <target state="translated">コンパイラー&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;ints is List&amp;lt;Int&amp;gt;&lt;/code&gt; か &lt;code&gt;list is T&lt;/code&gt; （型パラメーター）であるなど、型の消去のために実行時に実行できないチェックを禁止しています。ただし、インスタンスを&lt;a href=&quot;generics#star-projections&quot;&gt;star-projected型&lt;/a&gt;と照合できます。</target>
        </trans-unit>
        <trans-unit id="d14fa916aad304abf9368effaed2af1c9cae9a7d" translate="yes" xml:space="preserve">
          <source>Given the following function:</source>
          <target state="translated">次のような関数があるとします。</target>
        </trans-unit>
        <trans-unit id="3bccba6c1d0dad412745ca499dd4881c9a868243" translate="yes" xml:space="preserve">
          <source>Gives a declaration (a function, a property or a class) specific name in JavaScript.</source>
          <target state="translated">JavaScriptで宣言(関数、プロパティ、クラス)の特定の名前を与えます。</target>
        </trans-unit>
        <trans-unit id="881cfc245c723cf7c3f61576f22801ef2e3c72b2" translate="yes" xml:space="preserve">
          <source>Global Declarations from Kotlin</source>
          <target state="translated">コトリンのグローバル宣言</target>
        </trans-unit>
        <trans-unit id="659f27a0f1f897cced3c75d045ad40fe242c727f" translate="yes" xml:space="preserve">
          <source>Global coroutines are like daemon threads</source>
          <target state="translated">グローバルコルーチンはデーモンスレッドのようなもの</target>
        </trans-unit>
        <trans-unit id="d468d0378c00d1e27a28a236d7de95756c08f8c9" translate="yes" xml:space="preserve">
          <source>Global functions &lt;code&gt;forInts&lt;/code&gt;, &lt;code&gt;forFloats&lt;/code&gt;, or &lt;code&gt;strings&lt;/code&gt; are turned into the functions pointers in the &lt;code&gt;kotlin.root.example&lt;/code&gt; anonymous struct.</source>
          <target state="translated">グローバル関数 &lt;code&gt;forInts&lt;/code&gt; 、 &lt;code&gt;forFloats&lt;/code&gt; 、または &lt;code&gt;strings&lt;/code&gt; は、 &lt;code&gt;kotlin.root.example&lt;/code&gt; 匿名構造体の関数ポインターに変換されます。</target>
        </trans-unit>
        <trans-unit id="30cadf19adfad41f8a6e59daa5ff3a3d48ba595c" translate="yes" xml:space="preserve">
          <source>Global variables and singletons</source>
          <target state="translated">グローバル変数とシングルトン</target>
        </trans-unit>
        <trans-unit id="1044c240904be1204cda061e8f188ed693002d4b" translate="yes" xml:space="preserve">
          <source>GlobalEventHandlers</source>
          <target state="translated">GlobalEventHandlers</target>
        </trans-unit>
        <trans-unit id="baed9919f2e4f46815715dc91aa4078ed633aaf4" translate="yes" xml:space="preserve">
          <source>GlobalPerformance</source>
          <target state="translated">GlobalPerformance</target>
        </trans-unit>
        <trans-unit id="765216c578e052557132746a69028e4fe8edce22" translate="yes" xml:space="preserve">
          <source>Go on to the next task with the &lt;strong&gt;Next&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel:</source>
          <target state="translated">&lt;strong&gt;[タスクの説明&lt;/strong&gt; ]パネルの上部にある&lt;strong&gt;[ &lt;/strong&gt;&lt;strong&gt;次へ&lt;/strong&gt; ]アイコンを使用して、次のタスクに&lt;strong&gt;進み&lt;/strong&gt;ます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dc56189f84c8bd9505ed21d652da81943de515c" translate="yes" xml:space="preserve">
          <source>Go to &lt;strong&gt;Preferences -&amp;gt; Plugins&lt;/strong&gt; (or &lt;strong&gt;Configure -&amp;gt; Plugins&lt;/strong&gt; from the &lt;strong&gt;Welcome Screen&lt;/strong&gt;), press &lt;strong&gt;Install JetBrains Plugin&amp;hellip;&lt;/strong&gt; and search for EduTools plugin:</source>
          <target state="translated">行く&lt;strong&gt;設定- &amp;gt;プラグイン&lt;/strong&gt;（または&lt;strong&gt;設定- &amp;gt;プラグイン&lt;/strong&gt;から&lt;strong&gt;ようこそ画面&lt;/strong&gt;）を押し&lt;strong&gt;JetBrainsのプラグインをインストールして...&lt;/strong&gt;とプラグインEduToolsを検索：</target>
        </trans-unit>
        <trans-unit id="891a1edb814b257caca47fbe98d9f5d5b15c6d14" translate="yes" xml:space="preserve">
          <source>Go to &lt;strong&gt;View -&amp;gt; Tool Windows -&amp;gt; Project&lt;/strong&gt; to look at the course structure:</source>
          <target state="translated">&lt;strong&gt;[表示]-&amp;gt; [ツールウィンドウ]-&amp;gt; [プロジェクト]に&lt;/strong&gt;移動して、コース構造を確認します。</target>
        </trans-unit>
        <trans-unit id="8165d64dbe21ad94145d018a811b3d046578b825" translate="yes" xml:space="preserve">
          <source>Google Cloud Platform offers a series of tutorials for deploying Kotlin applications to GCP, both for &lt;a href=&quot;https://cloud.google.com/community/tutorials/kotlin-ktor-app-engine-java8&quot;&gt;Ktor and App Engine&lt;/a&gt; and &lt;a href=&quot;https://cloud.google.com/community/tutorials/kotlin-springboot-app-engine-java8&quot;&gt;Spring and App engine&lt;/a&gt;. In addition there is an &lt;a href=&quot;https://codelabs.developers.google.com/codelabs/cloud-spring-cloud-gcp-kotlin&quot;&gt;interactive code lab&lt;/a&gt; for deploying a Kotlin Spring application.</source>
          <target state="translated">Google Cloud Platformは、&lt;a href=&quot;https://cloud.google.com/community/tutorials/kotlin-ktor-app-engine-java8&quot;&gt;KtorとApp Engine&lt;/a&gt;、&lt;a href=&quot;https://cloud.google.com/community/tutorials/kotlin-springboot-app-engine-java8&quot;&gt;SpringとApp engineの&lt;/a&gt;両方で、KotlinアプリケーションをGCPにデプロイするための一連のチュートリアルを提供します。さらに、Kotlin Springアプリケーションをデプロイするための&lt;a href=&quot;https://codelabs.developers.google.com/codelabs/cloud-spring-cloud-gcp-kotlin&quot;&gt;インタラクティブなコードラボ&lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="f426be61bd7a1e2a2ad7e39cb0258e09623e3b4d" translate="yes" xml:space="preserve">
          <source>Gradle</source>
          <target state="translated">Gradle</target>
        </trans-unit>
        <trans-unit id="6134eca2b360f22c2387c3051541c510c1250e3f" translate="yes" xml:space="preserve">
          <source>Gradle Build Cache Support (since 1.2.20)</source>
          <target state="translated">Gradle ビルドキャッシュのサポート (1.2.20 以降)</target>
        </trans-unit>
        <trans-unit id="c7cb10f96b225f304e707e064e5400d18a33549a" translate="yes" xml:space="preserve">
          <source>Gradle Plugin</source>
          <target state="translated">Gradle プラグイン</target>
        </trans-unit>
        <trans-unit id="35d1c8165e4e67c09f92e3d5f647ffd5441e58ba" translate="yes" xml:space="preserve">
          <source>Gradle build cache support (since 1.2.20)</source>
          <target state="translated">Gradle ビルドキャッシュのサポート (1.2.20 以降)</target>
        </trans-unit>
        <trans-unit id="a0575dd3e951b41de498712d03d4e2bfef8d7b1f" translate="yes" xml:space="preserve">
          <source>Gradle function</source>
          <target state="translated">グラドルきのう</target>
        </trans-unit>
        <trans-unit id="5e8f2626ed20cf2fef59f13d2bd987a20f6e43c4" translate="yes" xml:space="preserve">
          <source>Gradle module metadata provides rich publishing and dependency resolution features that are used in Kotlin multiplatform projects to simplify dependencies configuration for build authors. In particular, the publications of a multiplatform library may include a special 'root' module that stands for the whole library and is automatically resolved to the appropriate platform-specific artifacts when added as a dependency, as described below.</source>
          <target state="translated">Gradleモジュールメタデータは、Kotlinマルチプラットフォームプロジェクトで使用される豊富なパブリッシング機能と依存関係解決機能を提供し、ビルド作者の依存関係設定を簡素化します。特に、マルチプラットフォームライブラリのパブリケーションには、ライブラリ全体を表す特別な「ルート」モジュールが含まれている場合があり、以下に説明するように、依存関係として追加されると、適切なプラットフォーム固有のアーティファクトに自動的に解決されます。</target>
        </trans-unit>
        <trans-unit id="2fd0f11cc0565eea500951b2cff526bf32d99bc4" translate="yes" xml:space="preserve">
          <source>Gradle supports two languages for the build scripts. We have the following options:</source>
          <target state="translated">Gradleはビルドスクリプトのために2つの言語をサポートしています。以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="f71244b324fcc1c6b328413612267429db191347" translate="yes" xml:space="preserve">
          <source>Graduation of experimental API</source>
          <target state="translated">実験用APIの卒業</target>
        </trans-unit>
        <trans-unit id="dc1c6d4a7505aca84258226a0109982d4ee37319" translate="yes" xml:space="preserve">
          <source>Groovy language is the oldest supported scripting language for Gradle, it leverages the power of the dynamic typing and runtime features of the language. Sometimes it can be harder to maintain Groovy build scripts. IDEs are struggling to get through the dynamism of Groovy to provide helpful insights or code completion.</source>
          <target state="translated">Groovy 言語は Gradle で最も古くからサポートされているスクリプト言語で、動的な型付けとランタイム機能を活用しています。時には、Groovyビルドスクリプトのメンテナンスが難しくなることもあります。IDEはGroovyの動的な機能を使いこなすことで、有用な洞察やコード補完を提供するのに苦労しています。</target>
        </trans-unit>
        <trans-unit id="a7214450a2aa2acc2aff209936d73e98c04d25cc" translate="yes" xml:space="preserve">
          <source>Groovy scripts in &lt;code&gt;build.gradle&lt;/code&gt; files</source>
          <target state="translated">&lt;code&gt;build.gradle&lt;/code&gt; ファイル内のGroovyスクリプト</target>
        </trans-unit>
        <trans-unit id="2ae6967b07a45b63c8543a6c5e34052414ba32af" translate="yes" xml:space="preserve">
          <source>Grouping</source>
          <target state="translated">Grouping</target>
        </trans-unit>
        <trans-unit id="f580fcf315dbe0e3aac37a8e051a65190b4d82e6" translate="yes" xml:space="preserve">
          <source>Grouping function calls on an object: &lt;code&gt;with&lt;/code&gt;</source>
          <target state="translated">オブジェクトの関数呼び出しのグループ化： &lt;code&gt;with&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1bb9860eb5022e44d178a9eaf4fcdc57655695f" translate="yes" xml:space="preserve">
          <source>Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0 corresponds to the entire match.</source>
          <target state="translated">グループは、1から正規表現内のグループの数までのインデックスが付けられます。インデックス0のグループはマッチ全体に対応します。</target>
        </trans-unit>
        <trans-unit id="ac61ad0a10837ed5627a2dd0ab6b66c7c3e0676f" translate="yes" xml:space="preserve">
          <source>Groups characters of the original char sequence by the key returned by the given &lt;a href=&quot;../../kotlin.text/group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character and returns a map where each group key is associated with a list of corresponding characters.</source>
          <target state="translated">元の文字シーケンスの文字を、各文字に適用された特定の&lt;a href=&quot;../../kotlin.text/group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーでグループ化し、各グループキーが対応する文字のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="7cf73cc29f8dbedce10d3ff42ded5a6b73eda280" translate="yes" xml:space="preserve">
          <source>Groups characters of the original char sequence by the key returned by the given &lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character and puts to the &lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding characters.</source>
          <target state="translated">元の文字シーケンスの文字を、各文字に適用された特定の&lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーでグループ化し、対応する文字のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="16819263b803ee1d619eddf7cea3cc3aa1ddb8a9" translate="yes" xml:space="preserve">
          <source>Groups characters of the original char sequence by the key returned by the given &lt;a href=&quot;../group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character and returns a map where each group key is associated with a list of corresponding characters.</source>
          <target state="translated">元の文字シーケンスの文字を、各文字に適用された特定の&lt;a href=&quot;../group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーでグループ化し、各グループキーが対応する文字のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="834ceb29666dfabc2774c58d68cddf77c4b7e8b3" translate="yes" xml:space="preserve">
          <source>Groups characters of the original char sequence by the key returned by the given &lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character and puts to the &lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding characters.</source>
          <target state="translated">元の文字シーケンスの文字を、各文字に適用された特定の&lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーでグループ化し、対応する文字のリストに関連付けられた各グループキーを&lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="a3b218745ea0cc39939249fc515c9fb52230dc23" translate="yes" xml:space="preserve">
          <source>Groups characters of the original char sequence by the key returned by the given &lt;a href=&quot;group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character and returns a map where each group key is associated with a list of corresponding characters.</source>
          <target state="translated">元の文字シーケンスの文字を、各文字に適用された特定の&lt;a href=&quot;group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーでグループ化し、各グループキーが対応する文字のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="eab6055c069a2c7df989a9febe4f384188c0c9be" translate="yes" xml:space="preserve">
          <source>Groups characters of the original char sequence by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character and puts to the &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding characters.</source>
          <target state="translated">元の文字シーケンスの文字を、各文字に適用された特定の&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーでグループ化し、対応する文字のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="beb10184b9eaf2a19d2c8a85f0dcc9de8f275a3d" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;aggregate#kotlin.collections%24aggregate%28kotlin.collections.Grouping%28%28kotlin.collections.aggregate.T%2C+kotlin.collections.aggregate.K%29%29%2C+kotlin.Function4%28%28kotlin.collections.aggregate.K%2C+kotlin.collections.aggregate.R%2C+kotlin.collections.aggregate.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregate.R%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;aggregate#kotlin.collections%24aggregate%28kotlin.collections.Grouping%28%28kotlin.collections.aggregate.T%2C+kotlin.collections.aggregate.K%29%29%2C+kotlin.Function4%28%28kotlin.collections.aggregate.K%2C+kotlin.collections.aggregate.R%2C+kotlin.collections.aggregate.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregate.R%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに保存します。</target>
        </trans-unit>
        <trans-unit id="d78b573eb1ea66f3add23f57f9a4df87cbfded46" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、その結果を指定された&lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。</target>
        </trans-unit>
        <trans-unit id="76bb6c1807250140b502881e8ffed09dd4b1fd1b" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is provided by &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt; function.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに保存します。アキュムレータの初期値は、&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="c65c91e0b49e269f0aacbdeb1e8b6110be08d78b" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is the same &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValue&quot;&gt;initialValue&lt;/a&gt; for each group.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに保存します。アキュムレータの初期値は同じで&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValue&quot;&gt;はinitialValue&lt;/a&gt;グループごと。</target>
        </trans-unit>
        <trans-unit id="9854f2468f181697be0f2d6e46ea0904ecd6079d" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map. An initial value of accumulator is provided by &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt; function.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、その結果を指定された&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。アキュムレータの初期値は、&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="889e9070bf99aa4bd4efd50edeaf2a68bfa9907b" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map. An initial value of accumulator is the same &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValue&quot;&gt;initialValue&lt;/a&gt; for each group.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、その結果を指定された&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。アキュムレータの初期値は同じで&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValue&quot;&gt;はinitialValue&lt;/a&gt;グループごと。</target>
        </trans-unit>
        <trans-unit id="83efeb50c4e9dec95e37f4820667b4239119591b" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies the reducing &lt;a href=&quot;reduce#kotlin.collections%24reduce%28kotlin.collections.Grouping%28%28kotlin.collections.reduce.T%2C+kotlin.collections.reduce.K%29%29%2C+kotlin.Function3%28%28kotlin.collections.reduce.K%2C+kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially starting from the second element of the group, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is the first element of the group.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、グループの2番目の要素から順に各グループの要素に削減&lt;a href=&quot;reduce#kotlin.collections%24reduce%28kotlin.collections.Grouping%28%28kotlin.collections.reduce.T%2C+kotlin.collections.reduce.K%29%29%2C+kotlin.Function3%28%28kotlin.collections.reduce.K%2C+kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用し、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに格納します。アキュムレータの初期値は、グループの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="933500c1ca8e977ee9b0687537291630d3768a4b" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and applies the reducing &lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially starting from the second element of the group, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map. An initial value of accumulator is the first element of the group.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、グループの2番目の要素から順に各グループの要素に削減&lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用し、以前に累積された値と現在の要素を引数として渡し、結果を指定された&lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。アキュムレータの初期値は、グループの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="015ae8e55e1e1ac2045e4141888e3b1d7417038b" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;-grouping/index&quot;&gt;Grouping&lt;/a&gt; source by key and counts elements in each group to the given &lt;a href=&quot;each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">グループ&lt;a href=&quot;-grouping/index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素を指定された&lt;a href=&quot;each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップにカウントします。</target>
        </trans-unit>
        <trans-unit id="490f294445acd743261ddc1eb23853d6e61b542c" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;../aggregate#kotlin.collections%24aggregate%28kotlin.collections.Grouping%28%28kotlin.collections.aggregate.T%2C+kotlin.collections.aggregate.K%29%29%2C+kotlin.Function4%28%28kotlin.collections.aggregate.K%2C+kotlin.collections.aggregate.R%2C+kotlin.collections.aggregate.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregate.R%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;../aggregate#kotlin.collections%24aggregate%28kotlin.collections.Grouping%28%28kotlin.collections.aggregate.T%2C+kotlin.collections.aggregate.K%29%29%2C+kotlin.Function4%28%28kotlin.collections.aggregate.K%2C+kotlin.collections.aggregate.R%2C+kotlin.collections.aggregate.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregate.R%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに保存します。</target>
        </trans-unit>
        <trans-unit id="d0d422dce75fcd6501bddf563bfffca9153d62f0" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;../aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;../aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;../aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、その結果を指定された&lt;a href=&quot;../aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。</target>
        </trans-unit>
        <trans-unit id="b3acede8354576676a7060a6788281a42ba83ce9" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is provided by &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt; function.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに保存します。アキュムレータの初期値は、&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.Function2%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.T%2C+kotlin.collections.fold.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.fold.K%2C+kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="bee30654191ef79d0432bd589fd07c4fc64c2c69" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is the same &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValue&quot;&gt;initialValue&lt;/a&gt; for each group.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに保存します。アキュムレータの初期値は同じで&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Grouping%28%28kotlin.collections.fold.T%2C+kotlin.collections.fold.K%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2FinitialValue&quot;&gt;はinitialValue&lt;/a&gt;グループごと。</target>
        </trans-unit>
        <trans-unit id="0ed265b07fc8dddafb0187a982928efab397ce8f" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map. An initial value of accumulator is provided by &lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt; function.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、その結果を指定された&lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。アキュムレータの初期値は、&lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="993e5ec052dbbeb5a3ec6c7dcfcb192706c6c5a9" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies &lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map. An initial value of accumulator is the same &lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValue&quot;&gt;initialValue&lt;/a&gt; for each group.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素に&lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を順次適用して、以前に累積された値と現在の要素を引数として渡し、その結果を指定された&lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。アキュムレータの初期値は同じで&lt;a href=&quot;../fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValue&quot;&gt;はinitialValue&lt;/a&gt;グループごと。</target>
        </trans-unit>
        <trans-unit id="c13abf5bc4eeafadf280004e040101dde3fb83cb" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies the reducing &lt;a href=&quot;../reduce#kotlin.collections%24reduce%28kotlin.collections.Grouping%28%28kotlin.collections.reduce.T%2C+kotlin.collections.reduce.K%29%29%2C+kotlin.Function3%28%28kotlin.collections.reduce.K%2C+kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially starting from the second element of the group, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is the first element of the group.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、グループの2番目の要素から順に各グループの要素に削減&lt;a href=&quot;../reduce#kotlin.collections%24reduce%28kotlin.collections.Grouping%28%28kotlin.collections.reduce.T%2C+kotlin.collections.reduce.K%29%29%2C+kotlin.Function3%28%28kotlin.collections.reduce.K%2C+kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用し、以前に累積された値と現在の要素を引数として渡し、結果を新しいマップに格納します。アキュムレータの初期値は、グループの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="abbc3f18ca4e8fe2849f2e16a8381bdec04177da" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and applies the reducing &lt;a href=&quot;../reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; to the elements of each group sequentially starting from the second element of the group, passing the previously accumulated value and the current element as arguments, and stores the results in the given &lt;a href=&quot;../reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map. An initial value of accumulator is the first element of the group.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、グループの2番目の要素から順に各グループの要素に削減&lt;a href=&quot;../reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用し、以前に累積された値と現在の要素を引数として渡し、結果を指定された&lt;a href=&quot;../reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに格納します。アキュムレータの初期値は、グループの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="def242ad6826d52ffd2160988337cd2d241e310d" translate="yes" xml:space="preserve">
          <source>Groups elements from the &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; source by key and counts elements in each group to the given &lt;a href=&quot;../each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">グループ&lt;a href=&quot;index&quot;&gt;化&lt;/a&gt;ソースの要素をキーでグループ化し、各グループの要素を指定された&lt;a href=&quot;../each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップにカウントします。</target>
        </trans-unit>
        <trans-unit id="33bdc57b4803e7486893c856c65f9f2dc83d888d" translate="yes" xml:space="preserve">
          <source>Groups elements from the Grouping source by key and counts elements in each group.</source>
          <target state="translated">グループ化ソースの要素をキーでグループ化し、各グループ内の要素をカウントします。</target>
        </trans-unit>
        <trans-unit id="0049cbdd9a79fa0c1c0a57f41eb649c85fb3f9da" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="1c51d9088c4daf2245ac28bdf16088c56db1ffb6" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="b2c08078d6fe0e8e94be2dbd5c83cf3ded89183e" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="2114e4aff30894275945688a229421607cdf62f9" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="a2bb5c5822f15801f72e694bf63c203633cabb8e" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="fdef4c643a8c0c33ffb57b3bbff3489b47f9e492" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="5aef18a32d519975f70caf15dc5e44830c8833f7" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="5f139e736a7f90fc2da9b03415aad0910e913890" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="ae18d1f7b9a9fac041c1f739af868e400dd69900" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="4f3177e8bbafa7ae57628d22bf32feb937052adf" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="bb266de87014489fcf7146d343f2089ced330186" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="ed7d644cb34fbeb886322ce233475a7ba83b2351" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="82394286609da7139425ea67f88a8ceec3cb07d3" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="b97359dd418232f3e9dfba4839af5b34080c030a" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="ce5a0635a524f1fec495708d53a45e84dfbe68b5" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="958569e0463e46cabce02a2bbd6365d74a9b357e" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="f0fb79969db9482e65fa3420c1d0bf7843b07e7f" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="306933cb3933a6a1a74b8d42cc0396d5c33a34dc" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="565bf8325f2e55755766a63645c8ab50123f18b5" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="391eb4b360ddda6247da1f2acec1ff424920a711" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="4eaa4fffc174c3473d3d102b97c7875e8172a200" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="48d9c4775abfc93a0b1d431d33160466750f89f2" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="b8605775196a80b16b6519486fb7c28367deeec5" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="0dc001caed09ffefd53b93e3197a629ed1fc0ec4" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="a72b276dac35986efed8b6df558338b126cfdf57" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="0226904415121a1435b0100b90ba0df857d6c486" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="f1ea1983ee1ace62ea4d7847ae47f2af29e3e8b7" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される指定された&lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元の配列の要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="6f9c701e783385331f9ae2fa7a4574978463d51e" translate="yes" xml:space="preserve">
          <source>Groups elements of the original array by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="aeab561390722ea1c65c8dd6cb19582a63491afa" translate="yes" xml:space="preserve">
          <source>Groups elements of the original collection by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーによって元のコレクションの要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="517d4d0a40fb4e4ebf5b17ce5e285bf3ea95e744" translate="yes" xml:space="preserve">
          <source>Groups elements of the original collection by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーで元のコレクションの要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="18645dce0a179d46721040a013c7c2aaf281e353" translate="yes" xml:space="preserve">
          <source>Groups elements of the original collection by the key returned by the given &lt;a href=&quot;../group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーによって元のコレクションの要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="839f3ff0a4b21a3fb439fd9a44418a2158e05fa4" translate="yes" xml:space="preserve">
          <source>Groups elements of the original collection by the key returned by the given &lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーで元のコレクションの要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="33bf3bb48ad29661f3baae393a0cc99f73167717" translate="yes" xml:space="preserve">
          <source>Groups elements of the original collection by the key returned by the given &lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーによって元のコレクションの要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="7931ac3eb2cb1ac7f85b3778bd370248cf181321" translate="yes" xml:space="preserve">
          <source>Groups elements of the original collection by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーで元のコレクションの要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="b738b8d42d76ab1d26042cd7bca1712e233e1b00" translate="yes" xml:space="preserve">
          <source>Groups elements of the original sequence by the key returned by the given &lt;a href=&quot;../group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;../group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元のシーケンスの要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="97ac36e3e9fd52501da0a3b987cc43c0293e964d" translate="yes" xml:space="preserve">
          <source>Groups elements of the original sequence by the key returned by the given &lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される特定の&lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元のシーケンスの要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="8a8875f0180052555387882539b34b0e16ba24e2" translate="yes" xml:space="preserve">
          <source>Groups elements of the original sequence by the key returned by the given &lt;a href=&quot;group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and returns a map where each group key is associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用された特定の&lt;a href=&quot;group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元のシーケンスの要素をグループ化し、各グループキーが対応する要素のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="05b9a5d5612ee02f871ecbd0b90c1f1934726c0f" translate="yes" xml:space="preserve">
          <source>Groups elements of the original sequence by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element and puts to the &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding elements.</source>
          <target state="translated">各要素に適用される特定の&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されるキーで元のシーケンスの要素をグループ化し、対応する要素のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="0c13d802fc83fb417f4db679bc54a8b8dd9c4cd6" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="edf45bfebe04f5e0932aa2ebd24d8f8ad23cf236" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="ec68bf694aaedf58fbfabe0c2f60c18f77929117" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="30925fcc6b9f20201f2ddac9f2047ff0b5d9574b" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="9e12a790fbd231e076f738a178fccc8139b8c554" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="5a588399d89bc5711966ed2730aedf4dbbc22c98" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="bef79b8ef9f6baedb0d78a983d328c8bf8fa09e0" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="4a9b47e51433f950b5a1bd41c28bae6d294580d6" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="5d0867a1b19df800095755738cbfc807be904120" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="b833a48470c0f3342699c408599dfb224a17fc29" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="9323fc10d5fdfdc6ca5c0862bd237bce5d316229" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="262fd693f93c7d8fc592a4a596034da2937b873c" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="105d959656cfbe5d1a8214c7c01d2e5689ed25e9" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="ecf4088d9c38778f598151be7feb7b7774df4498" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original collection by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のコレクションの各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="5e14e17af229b7a64cd72c9e61381d31167b02c6" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="15afb1e1aafcde9c9f0c493b7b5514d708c3ef21" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.BooleanArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="6102f783ca6b80ae09922c8a9d4c9e3a06950b2c" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="bfd1d751a5b539bd58d073a68e86a87eda78d821" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.CharArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="6c7492e3646e11be56f82e0e3e11b83b12c93472" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.DoubleArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="90040553349b0e00671106e1fa0d8a198cb768af" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.FloatArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="75946a44f171c6d433da12b2a5c3adcb053d5d8a" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.IntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="1388bb95a8bb43baa4d446382e92690f393842e5" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.LongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="f797f7632480a1a27f645be371f21e618e72d2f2" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="b8aa35750fe93dcea4289b1f9976ae9787e28035" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UByteArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="1211c1d0459b8fb7bd06c13ce866bd49a3af49e8" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UIntArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="2ded10c3a8711d6ea075fd3e37b8a98fb491c5ce" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.ULongArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="5f2aa4bf740741abbe1bf0a2e26d33e482572358" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.UShortArray%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="e91b7e58de38408e07d485e9a36d764d14890a9f" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original collection by the key returned by the given &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のコレクションの各要素に適用された&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.collections/group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="d4f604c6cf9776efcb0fe97f434c98f29bdb30c9" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.text/group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each character of the original char sequence by the key returned by the given &lt;a href=&quot;../../kotlin.text/group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the character and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">文字に適用された特定の&lt;a href=&quot;../../kotlin.text/group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の文字シーケンスの各文字に適用された&lt;a href=&quot;../../kotlin.text/group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="171645e45f713d2812e6be2c0af2d2e851f725e7" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each character of the original char sequence by the key returned by the given &lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the character and puts to the &lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">文字に適用された特定の&lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の文字シーケンスの各文字に適用された&lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../../kotlin.text/group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="4b7ae2e49f1074a964984328edf28807a4559cf8" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original collection by the key returned by the given &lt;a href=&quot;../group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のコレクションの各要素に適用された&lt;a href=&quot;../group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="c42e35967e0dd9f88938b50e060ea0e9bc5436b8" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original sequence by the key returned by the given &lt;a href=&quot;../group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のシーケンスの各要素に適用された&lt;a href=&quot;../group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="d328f2ed4366d09469e07761469f5b31429bef7f" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each character of the original char sequence by the key returned by the given &lt;a href=&quot;../group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the character and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">文字に適用された特定の&lt;a href=&quot;../group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の文字シーケンスの各文字に適用された&lt;a href=&quot;../group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="91a56fc90f80e9983e4d12c68b952245f2c4863d" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original collection by the key returned by the given &lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のコレクションの各要素に適用された&lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="6133e7ffcba60e8c7ca183d8754244013dee3051" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original sequence by the key returned by the given &lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のシーケンスの各要素に適用された&lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="c3249a0b5205f9c05c4f99cd18f9870458d31e02" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each character of the original char sequence by the key returned by the given &lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the character and puts to the &lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">文字に適用された特定の&lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の文字シーケンスの各文字に適用された&lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;../group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="b4efab6e1ea870536f5cc2e69ae3873ac048af7c" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.Array%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="c30df3e35a857b962ce402eb2bfb40bad2ff2661" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original collection by the key returned by the given &lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のコレクションの各要素に適用された&lt;a href=&quot;group-by#kotlin.collections%24groupBy%28kotlin.collections.Iterable%28%28kotlin.collections.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupBy.T%2C+kotlin.collections.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="cbab5fc57f5e6a44c19a84ad4fa26397fdc1c1ad" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original sequence by the key returned by the given &lt;a href=&quot;group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のシーケンスの各要素に適用された&lt;a href=&quot;group-by#kotlin.sequences%24groupBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupBy.T%2C+kotlin.sequences.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="82fd00734c32884d111e62bfa57dfd2543bb77c1" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each character of the original char sequence by the key returned by the given &lt;a href=&quot;group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the character and returns a map where each group key is associated with a list of corresponding values.</source>
          <target state="translated">文字に適用された特定の&lt;a href=&quot;group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の文字シーケンスの各文字に適用された&lt;a href=&quot;group-by#kotlin.text%24groupBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupBy.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、各グループキーが対応する値のリストに関連付けられているマップを返します。</target>
        </trans-unit>
        <trans-unit id="61af8b8644747449b7ea854a912826205e29374c" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original array by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の配列の各要素に適用された&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="57b7411c62c1b48f7b2329cc0f360e751a1d5f04" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original collection by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のコレクションの各要素に適用された&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="ec746744415ac5324814073f398ea295c5d97be1" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each element of the original sequence by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the element and puts to the &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">要素に適用された特定の&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元のシーケンスの各要素に適用された&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="a5af5557d5a229c09e04a3dabd9144f68eed9121" translate="yes" xml:space="preserve">
          <source>Groups values returned by the &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to each character of the original char sequence by the key returned by the given &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to the character and puts to the &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map each group key associated with a list of corresponding values.</source>
          <target state="translated">文字に適用された特定の&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって返されたキーによって元の文字シーケンスの各文字に適用された&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって返された値をグループ化し、対応する値のリストに関連付けられた各グループキーを&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップに配置します。</target>
        </trans-unit>
        <trans-unit id="0b4e0ad36013170249087a39af06addff8702427" translate="yes" xml:space="preserve">
          <source>Guide to UI programming with coroutines</source>
          <target state="translated">コアーチンを使ったUIプログラミングガイド</target>
        </trans-unit>
        <trans-unit id="ffcd6fd3be2b8e68d56b152d3c64c5bfe63651d1" translate="yes" xml:space="preserve">
          <source>Guide to reactive streams with coroutines</source>
          <target state="translated">コアーチンを用いたリアクティブ・ストリームのガイド</target>
        </trans-unit>
        <trans-unit id="1ba3456507ad0628ffef08bfa52a7b0cd368f255" translate="yes" xml:space="preserve">
          <source>HIDDEN</source>
          <target state="translated">HIDDEN</target>
        </trans-unit>
        <trans-unit id="cb19a6374948586d14e2b1a2c546309492910187" translate="yes" xml:space="preserve">
          <source>HTMLAllCollection</source>
          <target state="translated">HTMLAllCollection</target>
        </trans-unit>
        <trans-unit id="4c52783da612b22fe54d1b6ac95e715dd9c1b742" translate="yes" xml:space="preserve">
          <source>HTMLCollection</source>
          <target state="translated">HTMLCollection</target>
        </trans-unit>
        <trans-unit id="4160c6e1a844a0e46d0b25c230278933561d83be" translate="yes" xml:space="preserve">
          <source>HTMLHyperlinkElementUtils</source>
          <target state="translated">HTMLHyperlinkElementUtils</target>
        </trans-unit>
        <trans-unit id="5afa4ce27f1e140932faf73c7ec2657e9e9fb1a9" translate="yes" xml:space="preserve">
          <source>HTMLOrSVGImageElement</source>
          <target state="translated">HTMLOrSVGImageElement</target>
        </trans-unit>
        <trans-unit id="e4260e00d7ae68e26d8b2788375dd101818548cd" translate="yes" xml:space="preserve">
          <source>HTMLOrSVGScriptElement</source>
          <target state="translated">HTMLOrSVGScriptElement</target>
        </trans-unit>
        <trans-unit id="f5e84acdec73cacccdd6a0e6708e899e233ab5ef" translate="yes" xml:space="preserve">
          <source>Hadi Hariri, Edoardo Vacchi, S&amp;eacute;bastien Deleuze</source>
          <target state="translated">ハディハリリ、エドアルドヴァッキ、セバスチャンドゥルーズ</target>
        </trans-unit>
        <trans-unit id="c0a888dd9c427e4a217a64402be233d1b8e8282e" translate="yes" xml:space="preserve">
          <source>Handling signature clashes with &lt;code&gt;@JvmName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@JvmName&lt;/code&gt; による署名の衝突の処理</target>
        </trans-unit>
        <trans-unit id="f5b53691461c367d22af5a5d9ea5e5bdb4bd573d" translate="yes" xml:space="preserve">
          <source>Hands-on experience is the way to master your Kotlin skills on real examples right in the browser:</source>
          <target state="translated">ハンズオン体験は、ブラウザ上で実際の例を見ながらKotlinのスキルをマスターする方法です。</target>
        </trans-unit>
        <trans-unit id="a9b3bcc1c1b6077725b43c7b2b03b2329c85a7d0" translate="yes" xml:space="preserve">
          <source>Hard Keywords</source>
          <target state="translated">ハードキーワード</target>
        </trans-unit>
        <trans-unit id="97a2b75e2d466574b1a6c8cc957b97c7acf70c1a" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface, which additionally preserves the insertion order of entries during the iteration.</source>
          <target state="translated">&lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。これにより、反復中にエントリの挿入順序がさらに保持されます。</target>
        </trans-unit>
        <trans-unit id="d0ceb916e1d644fa6b5389696f5076cf8fd624c1" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。</target>
        </trans-unit>
        <trans-unit id="16326864f33a381692b73eed3eeaf677ec94bad6" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface, which additionally preserves the insertion order of entries during the iteration.</source>
          <target state="translated">&lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。これにより、反復中にエントリの挿入順序がさらに保持されます。</target>
        </trans-unit>
        <trans-unit id="f0bdef08fd6dd05500473c598e6d74a82da5a9fd" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。</target>
        </trans-unit>
        <trans-unit id="7ea419b54a457cb3c6c5cc65609c5ace43529e56" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface, which additionally preserves the insertion order of entries during the iteration.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。これにより、反復中にエントリの挿入順序がさらに保持されます。</target>
        </trans-unit>
        <trans-unit id="c5be46be14f718f12035351a7fec221127466ed7" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。</target>
        </trans-unit>
        <trans-unit id="9b4378e29bed19a0caf75d9accb188eba1f1cb68" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface, which additionally preserves the insertion order of entries during the iteration.</source>
          <target state="translated">&lt;a href=&quot;index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。これにより、反復中にエントリの挿入順序がさらに保持されます。</target>
        </trans-unit>
        <trans-unit id="158ac569cb9477fc0e1256d1493d1370cd5b34b5" translate="yes" xml:space="preserve">
          <source>Hash table based implementation of the &lt;a href=&quot;index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースのハッシュテーブルベースの実装。</target>
        </trans-unit>
        <trans-unit id="aa8c17a3b1dda3ebc62cb63e33bdab65004a22b7" translate="yes" xml:space="preserve">
          <source>HashChangeEventInit</source>
          <target state="translated">HashChangeEventInit</target>
        </trans-unit>
        <trans-unit id="ba62d7b8d0b157f714c6a6132554b38789c6ada5" translate="yes" xml:space="preserve">
          <source>HashMap</source>
          <target state="translated">HashMap</target>
        </trans-unit>
        <trans-unit id="cac17f9bdb6febebe0052a72f2ab8a6828d20944" translate="yes" xml:space="preserve">
          <source>HashSet</source>
          <target state="translated">HashSet</target>
        </trans-unit>
        <trans-unit id="8503ede3ea63ea360679c1a7bb9c6feb415c1aeb" translate="yes" xml:space="preserve">
          <source>Have fun!</source>
          <target state="translated">楽しもう!</target>
        </trans-unit>
        <trans-unit id="614c8c725939c1409d2367860130473abc3d4ef4" translate="yes" xml:space="preserve">
          <source>Having multiple files which have the same generated Java class name (the same package and the same name or the same &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-name/index&quot;&gt;&lt;code&gt;@JvmName&lt;/code&gt;&lt;/a&gt; annotation) is normally an error. However, the compiler has the ability to generate a single Java facade class which has the specified name and contains all the declarations from all the files which have that name. To enable the generation of such a facade, use the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-multifile-class/index&quot;&gt;&lt;code&gt;@JvmMultifileClass&lt;/code&gt;&lt;/a&gt; annotation in all of the files.</source>
          <target state="translated">同じ生成されたJavaクラス名（同じパッケージ、同じ名前、または同じ&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-name/index&quot;&gt; &lt;code&gt;@JvmName&lt;/code&gt; &lt;/a&gt;アノテーション）を持つ複数のファイルがあると、通常はエラーになります。ただし、コンパイラーには、指定された名前を持ち、その名前を持つすべてのファイルからのすべての宣言を含む単一のJavaファサードクラスを生成する機能があります。このようなファサードの生成を有効にするには、すべてのファイルで&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-multifile-class/index&quot;&gt; &lt;code&gt;@JvmMultifileClass&lt;/code&gt; &lt;/a&gt;アノテーションを使用します。</target>
        </trans-unit>
        <trans-unit id="1f242aabecbf270e9098f316d26a6f3578a9273f" translate="yes" xml:space="preserve">
          <source>Having the &lt;code&gt;lengthComparator&lt;/code&gt;, you are able to arrange strings by their length instead of the default lexicographical order.</source>
          <target state="translated">持っ &lt;code&gt;lengthComparator&lt;/code&gt; を、あなたの代わりにデフォルトの辞書順の彼らの長さの文字列を手配することができます。</target>
        </trans-unit>
        <trans-unit id="2c0eaa8edf655cc1e8de855aec9d918e7b1ea95d" translate="yes" xml:space="preserve">
          <source>Having the ability to iterate in both directions, means the &lt;code&gt;ListIterator&lt;/code&gt; can still be used after it reaches the last element.</source>
          <target state="translated">両方向に反復する機能があるということは、 &lt;code&gt;ListIterator&lt;/code&gt; が最後の要素に到達した後も引き続き使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="90be45baa04a9d5a158798fb0b4bf37260137255" translate="yes" xml:space="preserve">
          <source>Having the receiver as the return value, you can easily include &lt;code&gt;apply&lt;/code&gt; into call chains for more complex processing.</source>
          <target state="translated">戻り値としてレシーバーを &lt;code&gt;apply&lt;/code&gt; すると、適用を呼び出しチェーンに簡単に組み込んで、より複雑な処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="e0d9450925442ce470d2e864cab9481d218ffe6d" translate="yes" xml:space="preserve">
          <source>Header files under the covers</source>
          <target state="translated">カバーの下のヘッダーファイル</target>
        </trans-unit>
        <trans-unit id="520de7443d00d6ff4dc3ababbbf6cfbe0b74f4ec" translate="yes" xml:space="preserve">
          <source>Headers</source>
          <target state="translated">Headers</target>
        </trans-unit>
        <trans-unit id="0a4d55a8d778e5022fab701977c5d840bbc486d0" translate="yes" xml:space="preserve">
          <source>Hello World</source>
          <target state="translated">ハローワールド</target>
        </trans-unit>
        <trans-unit id="ff5585f75c04b35aa1980b334e869011a0d42614" translate="yes" xml:space="preserve">
          <source>Helper functions for creating &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html&quot;&gt;Comparator&lt;/a&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html&quot;&gt;コンパレータ&lt;/a&gt;インスタンスを作成するためのヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="aadf38d42c47f2942d053ad710757cc1b854fee0" translate="yes" xml:space="preserve">
          <source>Helper functions for creating Comparator instances.</source>
          <target state="translated">コンパレータインスタンスを作成するためのヘルパー関数です。</target>
        </trans-unit>
        <trans-unit id="0b73fa64c5ddbe065b8467f94a6ebd4f7c1823cc" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;::isOdd&lt;/code&gt; is a value of function type &lt;code&gt;(Int) -&amp;gt; Boolean&lt;/code&gt;.</source>
          <target state="translated">ここで &lt;code&gt;::isOdd&lt;/code&gt; は、関数型 &lt;code&gt;(Int) -&amp;gt; Boolean&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="41ccfd26f5a19a10fbdd491b940c29702e4e0642" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;runBlocking&amp;lt;Unit&amp;gt; { ... }&lt;/code&gt; works as an adaptor that is used to start the top-level main coroutine. We explicitly specify its &lt;code&gt;Unit&lt;/code&gt; return type, because a well-formed &lt;code&gt;main&lt;/code&gt; function in Kotlin has to return &lt;code&gt;Unit&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;runBlocking&amp;lt;Unit&amp;gt; { ... }&lt;/code&gt; は、トップレベルのメインコルーチンを開始するために使用されるアダプターとして機能します。私たちは、明示的に指定した &lt;code&gt;Unit&lt;/code&gt; 整形ので、戻り値の型を &lt;code&gt;main&lt;/code&gt; Kotlin内の関数が返すために持っている &lt;code&gt;Unit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73ec159c610c0bde512d4dd98796481a0f1dd9af" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;startOtherActivity&lt;/code&gt; is a method defined in our &lt;code&gt;MainActivity&lt;/code&gt;:</source>
          <target state="translated">ここで &lt;code&gt;startOtherActivity&lt;/code&gt; は、MainActivityで定義されたメソッド &lt;code&gt;MainActivity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64e9f395cb5a12a58f09dadd871e66a32af07cec" translate="yes" xml:space="preserve">
          <source>Here an interop library will be built and added in the component dependencies.</source>
          <target state="translated">ここでinteropライブラリがビルドされ、コンポーネントの依存関係に追加されます。</target>
        </trans-unit>
        <trans-unit id="9817b024dae16b279b9de34a5943e840e3c6c191" translate="yes" xml:space="preserve">
          <source>Here is a list of the available options:</source>
          <target state="translated">ここでは、利用可能なオプションの一覧です。</target>
        </trans-unit>
        <trans-unit id="3964503de4031e1f67f448283c7c7436d1b66391" translate="yes" xml:space="preserve">
          <source>Here is a short guide for choosing scope functions depending on the intended purpose:</source>
          <target state="translated">ここでは、目的に応じてスコープ機能を選択するための簡単なガイドをご紹介します。</target>
        </trans-unit>
        <trans-unit id="354b21831f3e1d3354009c224825e8899e667c5d" translate="yes" xml:space="preserve">
          <source>Here is an example of a function literal with receiver along with its type, where &lt;code&gt;plus&lt;/code&gt; is called on the receiver object:</source>
          <target state="translated">以下は、型と一緒にレシーバーを持つ関数リテラルの例です。ここで、 &lt;code&gt;plus&lt;/code&gt; はレシーバーオブジェクトで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">ここでは一例を紹介します。</target>
        </trans-unit>
        <trans-unit id="9cbaae661e521db61b00232121154a0bc978c4dc" translate="yes" xml:space="preserve">
          <source>Here is how you can encode options by yourself:</source>
          <target state="translated">ここでは、自分でオプションをエンコードする方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="bcb68cd11077c1a66dff0232c6f982357e38486f" translate="yes" xml:space="preserve">
          <source>Here is how you can pass arbitrary options to javac:</source>
          <target state="translated">ここでは、任意のオプションを javac に渡す方法を説明します。</target>
        </trans-unit>
        <trans-unit id="8b5c51aaaea8e6fb9ff9f4bba92240eccf7a3b31" translate="yes" xml:space="preserve">
          <source>Here is the complete list of bitwise operations (available for &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Long&lt;/code&gt; only):</source>
          <target state="translated">以下は、ビット単位の操作の完全なリストです（ &lt;code&gt;Int&lt;/code&gt; および &lt;code&gt;Long&lt;/code&gt; でのみ使用可能）。</target>
        </trans-unit>
        <trans-unit id="ef5968a2159afa31759e26f3ea13b246a929d737" translate="yes" xml:space="preserve">
          <source>Here the constructor is private. By default, all constructors are &lt;code&gt;public&lt;/code&gt;, which effectively amounts to them being visible everywhere where the class is visible (i.e. a constructor of an &lt;code&gt;internal&lt;/code&gt; class is only visible within the same module).</source>
          <target state="translated">ここではコンストラクタはプライベートです。デフォルトでは、すべてのコンストラクタは &lt;code&gt;public&lt;/code&gt; であり、これは事実上、クラスが表示されるすべての場所で表示されることになります（つまり、 &lt;code&gt;internal&lt;/code&gt; クラスのコンストラクタは同じモジュール内でのみ表示されます）。</target>
        </trans-unit>
        <trans-unit id="f0628102a9e16610a1147c5ea146af2767dcf266" translate="yes" xml:space="preserve">
          <source>Here the type argument of the resulting sequence is inferred to &lt;code&gt;String&lt;/code&gt; from the argument of the &lt;a href=&quot;../../kotlin.sequences/-sequence-scope/yield&quot;&gt;SequenceScope.yield&lt;/a&gt; function, that is called inside the lambda passed to &lt;a href=&quot;../../kotlin.sequences/sequence&quot;&gt;sequence&lt;/a&gt;.</source>
          <target state="translated">ここで、結果のシーケンスの型引数は、&lt;a href=&quot;../../kotlin.sequences/-sequence-scope/yield&quot;&gt;SequenceScope.yield&lt;/a&gt;関数の引数から &lt;code&gt;String&lt;/code&gt; に推定され&lt;a href=&quot;../../kotlin.sequences/sequence&quot;&gt;ます&lt;/a&gt;。これは、sequenceに渡されたラムダ内で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5ed150d2efdc560bc0c053dcbb778cf03c9077fc" translate="yes" xml:space="preserve">
          <source>Here we call a transform function on an element first, and then build a pair from the properties of that function's result.</source>
          <target state="translated">ここでは、まず要素に対して変換関数を呼び出し、その関数の結果のプロパティからペアを作成します。</target>
        </trans-unit>
        <trans-unit id="2cbc4d7a889a0c905e849d457558acb812460a70" translate="yes" xml:space="preserve">
          <source>Here we can use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uidevice?language=objc&quot;&gt;UIDevice&lt;/a&gt; class from the Apple UIKit Framework, which is not available in Java, it is only usable in Swift and Objective-C. Kotlin/Native compiler comes with a set of pre-imported frameworks, so we can use the UIKit Framework without additional steps. Objective-C and Swift Interop is covered in details in the &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;documentation&lt;/a&gt;</source>
          <target state="translated">ここでは、Javaでは使用できないApple UIKitフレームワークの&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uidevice?language=objc&quot;&gt;UIDevice&lt;/a&gt;クラスを使用できます。これは、SwiftおよびObjective-Cでのみ使用できます。Kotlin / Nativeコンパイラーには、事前にインポートされた一連のフレームワークが付属しているため、追加の手順なしでUIKitフレームワークを使用できます。Objective-CとSwiftの相互運用については、&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;ドキュメント&lt;/a&gt;で詳しく説明されています</target>
        </trans-unit>
        <trans-unit id="2251b76155288ed7475b3b229f327779f9362db1" translate="yes" xml:space="preserve">
          <source>Here we make use of Java's &lt;em&gt;wildcards types&lt;/em&gt; (&lt;code&gt;? extends Base&lt;/code&gt;) to emulate declaration-site variance through use-site variance, because it is all Java has.</source>
          <target state="translated">ここでは、Javaの&lt;em&gt;ワイルドカードタイプ&lt;/em&gt;（ &lt;code&gt;? extends Base&lt;/code&gt; ）を利用して、use-site varianceを介して宣言-site varianceをエミュレートしています。</target>
        </trans-unit>
        <trans-unit id="1ef65687c96ed79c329d047f1e866230a83d8fdd" translate="yes" xml:space="preserve">
          <source>Here we run into the same familiar problem: &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;strong&gt;invariant&lt;/strong&gt; in &lt;code&gt;T&lt;/code&gt;, thus neither of &lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; is a subtype of the other. Why? Again, because copy &lt;strong&gt;might&lt;/strong&gt; be doing bad things, i.e. it might attempt to &lt;strong&gt;write&lt;/strong&gt;, say, a String to &lt;code&gt;from&lt;/code&gt;, and if we actually passed an array of &lt;code&gt;Int&lt;/code&gt; there, a &lt;code&gt;ClassCastException&lt;/code&gt; would have been thrown sometime later.</source>
          <target state="translated">ここでは、使い慣れた同じ問題に遭遇： &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; ありません&lt;strong&gt;不変&lt;/strong&gt;で &lt;code&gt;T&lt;/code&gt; したがってどちらの、 &lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt; および &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; その他のサブタイプです。どうして？繰り返します&lt;strong&gt;が&lt;/strong&gt;、コピー&lt;strong&gt;は&lt;/strong&gt;悪いことをしている&lt;strong&gt;可能性&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。つまり、たとえばStringを &lt;code&gt;from&lt;/code&gt; に&lt;strong&gt;書き込も&lt;/strong&gt;うとする可能性があり、実際にそこに &lt;code&gt;Int&lt;/code&gt; の配列を渡した場合、後で &lt;code&gt;ClassCastException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="35c15034dc107b5dfe7ca81016a55158d3c1422e" translate="yes" xml:space="preserve">
          <source>Here we start a coroutine that waits for 1 second and prints &lt;code&gt;Hello&lt;/code&gt;.</source>
          <target state="translated">ここで、1秒間待機して &lt;code&gt;Hello&lt;/code&gt; を出力するコルーチンを開始します。</target>
        </trans-unit>
        <trans-unit id="a39b3fc4994029915e40feeb64b4f5236e8052fc" translate="yes" xml:space="preserve">
          <source>Here we summarize requirements to delegate objects.</source>
          <target state="translated">ここでは、オブジェクトをデリゲートするための要件をまとめてみました。</target>
        </trans-unit>
        <trans-unit id="d5b472ee7ff40bf88f4ec29f0eda10fcaca784a6" translate="yes" xml:space="preserve">
          <source>Here we use service function &lt;code&gt;usePinned&lt;/code&gt;, which pins an object, executes block and unpins it on normal and exception paths.</source>
          <target state="translated">ここでは、サービス関数 &lt;code&gt;usePinned&lt;/code&gt; を使用します。これは、オブジェクトを固定し、ブロックを実行して、通常のパスと例外パスでオブジェクトの固定を解除します。</target>
        </trans-unit>
        <trans-unit id="e4f4aba80443aa3eb8e2f7ea243b14bbcc6a9610" translate="yes" xml:space="preserve">
          <source>Here's a list of &lt;code&gt;Product&lt;/code&gt; instances that aren't &lt;code&gt;Comparable&lt;/code&gt; and a &lt;code&gt;Comparator&lt;/code&gt; that defines the order: product &lt;code&gt;p1&lt;/code&gt; precedes product &lt;code&gt;p2&lt;/code&gt; if &lt;code&gt;p1&lt;/code&gt;'s price is less than &lt;code&gt;p2&lt;/code&gt;'s price. So, having a list sorted ascending according to this order, we use &lt;code&gt;binarySearch()&lt;/code&gt; to find the index of the specified &lt;code&gt;Product&lt;/code&gt;.</source>
          <target state="translated">ここのリストだ &lt;code&gt;Product&lt;/code&gt; ではありませんインスタンス &lt;code&gt;Comparable&lt;/code&gt; と &lt;code&gt;Comparator&lt;/code&gt; の順序を定義します。製品 &lt;code&gt;p1&lt;/code&gt; 先行製品 &lt;code&gt;p2&lt;/code&gt; 場合 &lt;code&gt;p1&lt;/code&gt; の価格未満である &lt;code&gt;p2&lt;/code&gt; の価格&quot;。したがって、リストをこの順序に従って昇順にソートし、 &lt;code&gt;binarySearch()&lt;/code&gt; を使用して、指定された &lt;code&gt;Product&lt;/code&gt; のインデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="efbc73d5132802ac71f5934ce19cbcd5fb8b7408" translate="yes" xml:space="preserve">
          <source>Here's a small DSL example for constructing tree structures:</source>
          <target state="translated">ここでは、木構造を構築するための小さなDSLの例を示します。</target>
        </trans-unit>
        <trans-unit id="deacdfc6a74517cf99346be6c831a7d4dcdbaad3" translate="yes" xml:space="preserve">
          <source>Here's a typical usage of a scope function:</source>
          <target state="translated">スコープ機能の典型的な使い方をご紹介します。</target>
        </trans-unit>
        <trans-unit id="b32f6d706eff957c972b3e1645609c6f0f0e541d" translate="yes" xml:space="preserve">
          <source>Here's an example content of the file:</source>
          <target state="translated">ファイルの内容の一例です。</target>
        </trans-unit>
        <trans-unit id="a5606f252ecc2ad174dea4647e01f60d2aaeb354" translate="yes" xml:space="preserve">
          <source>Here's an example of a class documented using KDoc:</source>
          <target state="translated">KDocを使って文書化したクラスの例です。</target>
        </trans-unit>
        <trans-unit id="3c3d7fa503d9b11d735a1dcda178f0b19a2cefe9" translate="yes" xml:space="preserve">
          <source>Here's an example of code sharing and interaction between the common and platform logic in a minimalistic logging framework. The common code would look like this:</source>
          <target state="translated">最小限のロギングフレームワークにおける共通ロジックとプラットフォームロジック間のコード共有と相互作用の例を示します。共通コードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="30b994f56b0ee580bb2d52aad3f9e3570f83d7b9" translate="yes" xml:space="preserve">
          <source>Here's an illustration of what a project targeting the JVM and JS looks like:</source>
          <target state="translated">JVMとJSをターゲットにしたプロジェクトがどのようなものかを説明します。</target>
        </trans-unit>
        <trans-unit id="fc7be004e2e60aa56a1148a79def1e9ee80e98df" translate="yes" xml:space="preserve">
          <source>Here's how to use all-open with Maven:</source>
          <target state="translated">ここでは、Mavenでall-openを使う方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="c1c3f3dd507e26d2dcc90d9449cf5588ff4d3164" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;async { ... }&lt;/code&gt; starts a coroutine and, when we use &lt;code&gt;await()&lt;/code&gt;, the execution of the coroutine is suspended while the operation being awaited is executed, and is resumed (possibly on a different thread) when the operation being awaited completes.</source>
          <target state="translated">ここでは、 &lt;code&gt;async { ... }&lt;/code&gt; がコルーチンを開始し、 &lt;code&gt;await()&lt;/code&gt; を使用すると、待機中の操作が実行されている間、コルーチンの実行が一時停止され、待機中の操作が再開されると（別のスレッドで）再開されます。完了します。</target>
        </trans-unit>
        <trans-unit id="24f1b6a4e672cb4df34dbd0c1ed96ab04f2d6a88" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;name&lt;/code&gt; must be a string, &lt;code&gt;age&lt;/code&gt; must be an integer, and the function must return a string. However, you can also make a oneliner function, where the body simply is the expression whose result is to be returned. In that case, the return type is inferred, and an equals sign is used to indicate that it's a oneliner:</source>
          <target state="translated">ここで、 &lt;code&gt;name&lt;/code&gt; は文字列、 &lt;code&gt;age&lt;/code&gt; は整数、関数は文字列を返す必要があります。ただし、本体が結果を返す式であるoneliner関数を作成することもできます。その場合、戻り値の型は推論され、等号はそれがワンライナーであることを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="b47502105661e1b046d12435cd46d97524cb6677" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;jvmMain&lt;/code&gt; source set provides &lt;a href=&quot;platform-specific-declarations&quot;&gt;plaform-specific implementations&lt;/a&gt; for the expected API in the shared &lt;code&gt;commonMain&lt;/code&gt; sources. This is how the code is shared between the platforms in a flexible way with platform-specific implementations where needed.</source>
          <target state="translated">ここで、 &lt;code&gt;jvmMain&lt;/code&gt; ソースセットは、共有 &lt;code&gt;commonMain&lt;/code&gt; ソースで予期されるAPIの&lt;a href=&quot;platform-specific-declarations&quot;&gt;プラットフォーム固有の実装&lt;/a&gt;を提供します。これは、必要に応じてプラットフォーム固有の実装を使用して、コードをプラットフォーム間で柔軟に共有する方法です。</target>
        </trans-unit>
        <trans-unit id="1a4b7aa1a5f137db0fd44fc2a6d9f303d3f93187" translate="yes" xml:space="preserve">
          <source>Here, the two targets, &lt;code&gt;jvm&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt;, each compile the production and test sources, and some of the sources are shared. This layout is achieved by just creating the two targets, with no additional configuration for the compilations and source sets: those are &lt;a href=&quot;#default-project-layout&quot;&gt;created by default&lt;/a&gt; for these targets.</source>
          <target state="translated">ここでは、2つのターゲット &lt;code&gt;jvm&lt;/code&gt; と &lt;code&gt;js&lt;/code&gt; がそれぞれ本番ソースとテストソースをコンパイルし、一部のソースは共有されています。このレイアウトは、2つのターゲットを作成するだけで実現され、コンパイルとソースセットの追加構成は不要&lt;a href=&quot;#default-project-layout&quot;&gt;です&lt;/a&gt;。これらは、これらのターゲットに対してデフォルトで作成されます。</target>
        </trans-unit>
        <trans-unit id="873b8d686246b463c295f204a9ac94e12e662907" translate="yes" xml:space="preserve">
          <source>Here, we walk up a tree and use reflection to check if a node has a certain type. It&amp;rsquo;s all fine, but the call site is not very pretty:</source>
          <target state="translated">ここでは、ツリーをたどり、リフレクションを使用してノードに特定のタイプがあるかどうかを確認します。すべて問題ありませんが、呼び出しサイトはそれほどきれいではありません。</target>
        </trans-unit>
        <trans-unit id="c26c5c5e687a30b11835307ebbf485121ab5d535" translate="yes" xml:space="preserve">
          <source>Here, we're saying that the type parameter of &lt;code&gt;from&lt;/code&gt; must be a subtype of the type parameter of &lt;code&gt;to&lt;/code&gt;. This function will accept e.g. a &lt;code&gt;Bowl&amp;lt;Apple&amp;gt;&lt;/code&gt; as &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;Bowl&amp;lt;Fruit&amp;gt;&lt;/code&gt; as &lt;code&gt;to&lt;/code&gt;. The price we're paying for using the &lt;code&gt;out&lt;/code&gt; projection is that we can't call &lt;code&gt;add()&lt;/code&gt; on &lt;code&gt;from()&lt;/code&gt;, since we don't know its true type parameter and we would therefore risk adding incompatible fruits to it.</source>
          <target state="translated">ここでは、 &lt;code&gt;from&lt;/code&gt; の型パラメーターは &lt;code&gt;to&lt;/code&gt; の型パラメーターのサブタイプでなければならないことを示しています。この関数は、例えば、 &lt;code&gt;Bowl&amp;lt;Apple&amp;gt;&lt;/code&gt; を &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;Bowl&amp;lt;Fruit&amp;gt;&lt;/code&gt; を &lt;code&gt;to&lt;/code&gt; として受け入れます。 &lt;code&gt;out&lt;/code&gt; プロジェクションを使用するために支払う代償は、 &lt;code&gt;from()&lt;/code&gt; で &lt;code&gt;add()&lt;/code&gt; を呼び出せないことです。これは、その真の型パラメーターがわからないため、互換性のない果物を追加するリスクがあるためです。</target>
        </trans-unit>
        <trans-unit id="fd526ef99a476acb9c78bf5c9a11e6ea0860b857" translate="yes" xml:space="preserve">
          <source>Hexadecimals: &lt;code&gt;0x0F&lt;/code&gt;</source>
          <target state="translated">16進数： &lt;code&gt;0x0F&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30fe03c33b8a84674c73678ff4c5b2d65ac121be" translate="yes" xml:space="preserve">
          <source>Higher-Order Functions</source>
          <target state="translated">高次関数</target>
        </trans-unit>
        <trans-unit id="a41e5f0f0a047564f4254bac665f73f90f95046f" translate="yes" xml:space="preserve">
          <source>Higher-Order Functions and Lambdas</source>
          <target state="translated">高次関数とラムダ</target>
        </trans-unit>
        <trans-unit id="67ee6db3881c67f5daa465a08c67e8184f10a9cd" translate="yes" xml:space="preserve">
          <source>Higher-Order functions and Lambdas are explained in &lt;a href=&quot;lambdas&quot;&gt;their own section&lt;/a&gt;.</source>
          <target state="translated">高次関数とラムダについては&lt;a href=&quot;lambdas&quot;&gt;、それぞれのセクションで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="72139434928027cd54d82a5ef7b3629d508b0f44" translate="yes" xml:space="preserve">
          <source>Higher-order functions implementing idiomatic patterns (&lt;a href=&quot;api/latest/jvm/stdlib/kotlin/let&quot;&gt;let&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin/apply&quot;&gt;apply&lt;/a&gt;, use, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin/synchronized#kotlin%24synchronized%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.synchronized.R%29%29%29&quot;&gt;synchronized&lt;/a&gt;, etc).</source>
          <target state="translated">慣用的なパターンを実装する高次関数（&lt;a href=&quot;api/latest/jvm/stdlib/kotlin/let&quot;&gt;let&lt;/a&gt;、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin/apply&quot;&gt;apply&lt;/a&gt;、use、&lt;a href=&quot;api/latest/jvm/stdlib/kotlin/synchronized#kotlin%24synchronized%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.synchronized.R%29%29%29&quot;&gt;synchronized&lt;/a&gt;など）。</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="0eb3ee7e7a16153c8f6a87abb16da40d619a3efa" translate="yes" xml:space="preserve">
          <source>HitRegionOptions</source>
          <target state="translated">HitRegionOptions</target>
        </trans-unit>
        <trans-unit id="b24cd4dd561003744f6839bba6f0b01af01e9c66" translate="yes" xml:space="preserve">
          <source>Homebrew</source>
          <target state="translated">Homebrew</target>
        </trans-unit>
        <trans-unit id="cbfc13df571c4c83d93997bf94e3b83b772c380a" translate="yes" xml:space="preserve">
          <source>Horizontal whitespace</source>
          <target state="translated">水平方向の空白</target>
        </trans-unit>
        <trans-unit id="86ddaf47a34381dda708ccb6f4f8d658790bbfa0" translate="yes" xml:space="preserve">
          <source>How Struct and Union types are mapped</source>
          <target state="translated">Struct 型と Union 型のマッピング方法</target>
        </trans-unit>
        <trans-unit id="35c4267f2ce497ed96e9a713e96604a9eab77acf" translate="yes" xml:space="preserve">
          <source>How it can be used</source>
          <target state="translated">どのように使用することができるか</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="602a8f7c41c71250fa416b68c4f67d256ca06632" translate="yes" xml:space="preserve">
          <source>How to Start</source>
          <target state="translated">開始方法</target>
        </trans-unit>
        <trans-unit id="a300459d78bbcb70e72c699d68bbe2c60d99400e" translate="yes" xml:space="preserve">
          <source>How to start</source>
          <target state="translated">開始方法</target>
        </trans-unit>
        <trans-unit id="dd45fd3f2e347de26d6cbb92c276978c2dd03be8" translate="yes" xml:space="preserve">
          <source>How to use</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="c8dac9e108cb40b7e0a9d87700f138976ecc8ddc" translate="yes" xml:space="preserve">
          <source>How to use Struct and Union type from Kotlin</source>
          <target state="translated">KotlinからStructとUnion型を使う方法</target>
        </trans-unit>
        <trans-unit id="87da5869c150f567fc13bde03027b7419ad453eb" translate="yes" xml:space="preserve">
          <source>How would we do this from Kotlin given that the function &lt;code&gt;dataTable()&lt;/code&gt; does not exist, and calling it would give a compiler error?</source>
          <target state="translated">関数 &lt;code&gt;dataTable()&lt;/code&gt; が存在しない場合、これをKotlinからどのように実行し、それを呼び出すとコンパイラエラーが発生しますか？</target>
        </trans-unit>
        <trans-unit id="be0464a11908e8c7b9be38021ee672219ffad064" translate="yes" xml:space="preserve">
          <source>However in the following case:</source>
          <target state="translated">しかし、次のような場合。</target>
        </trans-unit>
        <trans-unit id="08aa25ee369322b7c9cce859c3276910252c6990" translate="yes" xml:space="preserve">
          <source>However, a &lt;code&gt;project('...')&lt;/code&gt; dependency on another multiplatform project is resolved to an appropriate target automatically. It is enough to specify a single &lt;code&gt;project('...')&lt;/code&gt; dependency in a source set's dependencies, and the compilations that include the source set will receive a corresponding platform-specific artifact of that project, given that it has a compatible target:</source>
          <target state="translated">ただし、別のマルチプラットフォームプロジェクトに対する &lt;code&gt;project('...')&lt;/code&gt; 依存関係は、適切なターゲットに自動的に解決されます。ソースセットの依存関係で単一の &lt;code&gt;project('...')&lt;/code&gt; 依存関係を指定するだけで十分です。互換性のあるターゲットがある場合、ソースセットを含むコンパイルは、そのプロジェクトの対応するプラットフォーム固有のアーティファクトを受け取ります。</target>
        </trans-unit>
        <trans-unit id="9f0073d145a72380a67857aa70bcd14c61466462" translate="yes" xml:space="preserve">
          <source>However, as soon as these checks are extracted in a separate function, all the smartcasts immediately disappear:</source>
          <target state="translated">しかし、これらのチェックが別の関数で抽出されると、すぐにすべてのスマートキャストが消えてしまいます。</target>
        </trans-unit>
        <trans-unit id="070f5cebd5d9214c243e1534bfda4f0cf0927625" translate="yes" xml:space="preserve">
          <source>However, compile avoidance can't be used for annotation processors discovered in the compile classpath since &lt;em&gt;any changes&lt;/em&gt; in them require running the annotation processing tasks.</source>
          <target state="translated">ただし、コンパイルの回避は、コンパイルクラスパスで検出されたアノテーションプロセッサには使用できません。アノテーションプロセッサで&lt;em&gt;変更&lt;/em&gt;を行うと、アノテーション処理タスクを実行する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="b08734b9aff767eee11e08eafa8988bd2c1174ca" translate="yes" xml:space="preserve">
          <source>However, dependencies on such a multiplatform library may be ambiguous and may thus fail to resolve because there is not enough information to decide which of the targets to choose.</source>
          <target state="translated">しかし、このようなマルチプラットフォームライブラリへの依存関係は、どのターゲットを選択するかを決定するのに十分な情報がないため、曖昧であり、その結果、解決に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="479fa5ba0f8e1b445bab5b40d926a5ca86729d0e" translate="yes" xml:space="preserve">
          <source>However, if the mutability of the list is unknown or the source is not a list at all, &lt;code&gt;reversed()&lt;/code&gt; is more preferable since its result is a copy that won't change in the future.</source>
          <target state="translated">ただし、リストの変更可能性が不明であるか、ソースがリストではない場合、その結果は将来変更されないコピーになるため、 &lt;code&gt;reversed()&lt;/code&gt; の方が適しています。</target>
        </trans-unit>
        <trans-unit id="09fa8d58225957d34b7eea70bb62562ee76d26df" translate="yes" xml:space="preserve">
          <source>However, if we derive &lt;em&gt;D&lt;/em&gt; from &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;, we need to implement all the methods which we have inherited from multiple interfaces, and to specify how exactly &lt;em&gt;D&lt;/em&gt; should implement them. This rule applies both to methods for which we've inherited a single implementation (&lt;em&gt;bar()&lt;/em&gt;) and multiple implementations (&lt;em&gt;foo()&lt;/em&gt;).</source>
          <target state="translated">ただし、&lt;em&gt;A&lt;/em&gt;と&lt;em&gt;B&lt;/em&gt;から&lt;em&gt;D&lt;/em&gt;を派生させる場合は、複数のインターフェースから継承したすべてのメソッドを実装し、&lt;em&gt;D&lt;/em&gt;がそれらをどのように実装するかを正確に指定する必要があります。このルールは、単一の実装（&lt;em&gt;bar（）&lt;/em&gt;）と複数の実装（&lt;em&gt;foo（）&lt;/em&gt;）を継承したメソッドの両方に適用されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f5c2b71d2c4944197bf814089efe3e169f6241a1" translate="yes" xml:space="preserve">
          <source>However, it's perfectly OK for extension functions to overload member functions which have the same name but a different signature:</source>
          <target state="translated">しかし、拡張関数が同じ名前で署名が異なるメンバ関数をオーバーロードすることは完全に問題ありません。</target>
        </trans-unit>
        <trans-unit id="7211de00f87035400862ba49948436c704051e31" translate="yes" xml:space="preserve">
          <source>However, on the JVM you can have members of companion objects generated as real static methods and fields, if you use the &lt;code&gt;@JvmStatic&lt;/code&gt; annotation. See the &lt;a href=&quot;java-to-kotlin-interop#static-fields&quot;&gt;Java interoperability&lt;/a&gt; section for more details.</source>
          <target state="translated">ただし、 &lt;code&gt;@JvmStatic&lt;/code&gt; アノテーションを使用すると、JVMで実際の静的メソッドおよびフィールドとして生成されるコンパニオンオブジェクトのメンバーを持つことができます。詳細については、&lt;a href=&quot;java-to-kotlin-interop#static-fields&quot;&gt;Javaの相互運用性の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0bad521f56fe8a915aa6062aecd121e23b4faae6" translate="yes" xml:space="preserve">
          <source>However, the crucial difference is that type aliases are &lt;em&gt;assignment-compatible&lt;/em&gt; with their underlying type (and with other type aliases with the same underlying type), while inline classes are not.</source>
          <target state="translated">ただし、決定的な違いは、型のエイリアスは、基になる型（および同じ基になる型を持つ他の型のエイリアス）と&lt;em&gt;代入互換性&lt;/em&gt;があるのに対し、インラインクラスは&lt;em&gt;割り当て互換性&lt;/em&gt;がないことです。</target>
        </trans-unit>
        <trans-unit id="8dd1f3cacf0fcb4414c2d1a278f7fbd543f3b7f6" translate="yes" xml:space="preserve">
          <source>However, the lifetime of allocated memory is often bound to the lexical scope. It is possible to define such scope with &lt;code&gt;memScoped { ... }&lt;/code&gt;. Inside the braces, the temporary placement is available as an implicit receiver, so it is possible to allocate native memory with &lt;code&gt;alloc&lt;/code&gt; and &lt;code&gt;allocArray&lt;/code&gt;, and the allocated memory will be automatically freed after leaving the scope.</source>
          <target state="translated">ただし、割り当てられたメモリの有効期間は、多くの場合、字句スコープにバインドされます。そのようなスコープを &lt;code&gt;memScoped { ... }&lt;/code&gt; で定義することが可能です。中括弧内では、一時的な配置が暗黙的なレシーバーとして使用できるため、 &lt;code&gt;alloc&lt;/code&gt; および &lt;code&gt;allocArray&lt;/code&gt; を使用してネイティブメモリを割り当てることができ、割り当てられたメモリはスコープを離れると自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="ae0918f5641e63c3a09e5fadf6918891cd0a9092" translate="yes" xml:space="preserve">
          <source>However, there are some restrictions for inline class members:</source>
          <target state="translated">ただし、インラインクラスのメンバーには制限があります。</target>
        </trans-unit>
        <trans-unit id="982bf0758421af7f56223ac97a5942a5eb849e7c" translate="yes" xml:space="preserve">
          <source>However, to support generic use cases and provide total ordering, when the operands are &lt;strong&gt;not&lt;/strong&gt; statically typed as floating point numbers (e.g. &lt;code&gt;Any&lt;/code&gt;, &lt;code&gt;Comparable&amp;lt;...&amp;gt;&lt;/code&gt;, a type parameter), the operations use the &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;compareTo&lt;/code&gt; implementations for &lt;code&gt;Float&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt;, which disagree with the standard, so that:</source>
          <target state="translated">しかし、一般的なユースケースをサポートし、オペランドがされた場合、全順序を提供し&lt;strong&gt;ていない&lt;/strong&gt;静的浮動小数点数として入力された（例えば &lt;code&gt;Any&lt;/code&gt; 、 &lt;code&gt;Comparable&amp;lt;...&amp;gt;&lt;/code&gt; 、typeパラメータ）、操作が使用 &lt;code&gt;equals&lt;/code&gt; と &lt;code&gt;compareTo&lt;/code&gt; の実装を &lt;code&gt;Float&lt;/code&gt; し、 &lt;code&gt;Double&lt;/code&gt; 。これは標準に同意しないため、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5ca45e03bc21f5ab9507a309528260ebbde146f9" translate="yes" xml:space="preserve">
          <source>However, when &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; is used to launch a coroutine, it is not tied to the scope it was launched from and operates independently.</source>
          <target state="translated">ただし、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;を使用してコルーチンを起動する場合、コルーチンは、起動元のスコープとは関係なく、独立して動作します。</target>
        </trans-unit>
        <trans-unit id="4d1d9b7a2bcd9b2aa8b62eaa04c9b3c6ae4ca870" translate="yes" xml:space="preserve">
          <source>However, when calling it with non-default, the call would look something like:</source>
          <target state="translated">しかし、デフォルトではない状態で呼び出すと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="c85468492872696cce76d8471e59f791f6d182b2" translate="yes" xml:space="preserve">
          <source>However, you can't spread a map into a function call and expect the values in the map to be passed to the parameters named by the keys - the names of the parameters must be known at compile time. If you need runtime-defined parameter names, your function must either take a map or take &lt;code&gt;vararg kwargs: Pair&amp;lt;String, X&amp;gt;&lt;/code&gt; (where &lt;code&gt;X&lt;/code&gt; is the &quot;lowest common denominator&quot; of the parameter types, in the worst case &lt;code&gt;Any?&lt;/code&gt; - be prepared to have to typecast the parameter values, and note that you'll lose type safety). You can call such a function like this: &lt;code&gt;foo(&quot;bar&quot; to 42, &quot;test&quot; to &quot;hello&quot;)&lt;/code&gt;, since &lt;code&gt;to&lt;/code&gt; is an &lt;a href=&quot;classes#infix-functions&quot;&gt;infix function&lt;/a&gt; that creates a &lt;code&gt;Pair&lt;/code&gt;.</source>
          <target state="translated">ただし、マップを関数呼び出しに展開して、マップ内の値がキーによって名前が付けられたパラメーターに渡されることを期待することはできません。パラメーターの名前はコンパイル時に既知でなければなりません。実行時に定義された必要であればパラメータ名を、あなたの関数は、いずれかのマップを取るか、取らなければならない &lt;code&gt;vararg kwargs: Pair&amp;lt;String, X&amp;gt;&lt;/code&gt; （ &lt;code&gt;X&lt;/code&gt; は、最悪の場合には、パラメータタイプの「最小公分母」で、 &lt;code&gt;Any?&lt;/code&gt; -ことパラメータ値をタイプキャストする必要があり、タイプセーフが失われることに注意してください）。 ：あなたはこのような関数を呼び出すことができ &lt;code&gt;foo(&quot;bar&quot; to 42, &quot;test&quot; to &quot;hello&quot;)&lt;/code&gt; 以来、 &lt;code&gt;to&lt;/code&gt; ある&lt;a href=&quot;classes#infix-functions&quot;&gt;中置関数&lt;/a&gt;を作成 &lt;code&gt;Pair&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8531a005c4e1249c38eb76c35700e47d28dd56c4" translate="yes" xml:space="preserve">
          <source>However, you cannot change the type of a variable: &lt;code&gt;number&lt;/code&gt; can only ever refer to &lt;code&gt;Int&lt;/code&gt; values, and &lt;code&gt;message&lt;/code&gt; can only ever refer to &lt;code&gt;String&lt;/code&gt; values, so both &lt;code&gt;number = &quot;Test&quot;&lt;/code&gt; and &lt;code&gt;message = 3&lt;/code&gt; are illegal and will produce syntax errors.</source>
          <target state="translated">：ただし、変数の型を変更することはできません &lt;code&gt;number&lt;/code&gt; しかを参照することができます &lt;code&gt;Int&lt;/code&gt; 値、および &lt;code&gt;message&lt;/code&gt; しかを参照することができます &lt;code&gt;String&lt;/code&gt; 両方ので、値 &lt;code&gt;number = &quot;Test&quot;&lt;/code&gt; と &lt;code&gt;message = 3&lt;/code&gt; 違法であると構文エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="3027d872a38e795211cb7e3ae47043fbab5b615d" translate="yes" xml:space="preserve">
          <source>Hyperbolic: &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt; and their inverse: &lt;code&gt;acosh&lt;/code&gt;, &lt;code&gt;asinh&lt;/code&gt;, &lt;code&gt;atanh&lt;/code&gt;</source>
          <target state="translated">双曲線： &lt;code&gt;cosh&lt;/code&gt; 、 &lt;code&gt;sinh&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; およびそれらの逆： &lt;code&gt;acosh&lt;/code&gt; 、 &lt;code&gt;asinh&lt;/code&gt; 、 &lt;code&gt;atanh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a21e8428249ae48d17127a95118ae2f24cfd3ac4" translate="yes" xml:space="preserve">
          <source>I.e. if &lt;code&gt;a&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it calls the &lt;code&gt;equals(Any?)&lt;/code&gt; function, otherwise (i.e. &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;) it checks that &lt;code&gt;b&lt;/code&gt; is referentially equal to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">場合、すなわちない &lt;code&gt;null&lt;/code&gt; 、それが呼び出し &lt;code&gt;equals(Any?)&lt;/code&gt; （すなわち、さもなければ、機能 &lt;code&gt;a&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; のことがチェック） &lt;code&gt;b&lt;/code&gt; は参照上に等しい &lt;code&gt;null&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b4059c9b5820041f826f688b6e57c7201e42d5f" translate="yes" xml:space="preserve">
          <source>IDE</source>
          <target state="translated">IDE</target>
        </trans-unit>
        <trans-unit id="574c819e8b68fbc5deeb72ec7f823f930d288043" translate="yes" xml:space="preserve">
          <source>IDEA has built-in &lt;a href=&quot;https://www.jetbrains.com/help/idea/converting-a-java-file-to-kotlin-file.html&quot;&gt;Java-to-Kotlin converter&lt;/a&gt;. It can be used by people familiar with Java to learn the corresponding Kotlin syntactic constructions, but it is not perfect and it is still worth familiarizing yourself with Kotlin and learning the &lt;a href=&quot;../reference/idioms&quot;&gt;Kotlin idioms&lt;/a&gt;.</source>
          <target state="translated">IDEAには&lt;a href=&quot;https://www.jetbrains.com/help/idea/converting-a-java-file-to-kotlin-file.html&quot;&gt;Java-to-Kotlinコンバーター&lt;/a&gt;が組み込まれています。Javaに精通している人が対応するKotlin構文構文を学ぶために使用できますが、完全ではなく、Kotlinに慣れ、&lt;a href=&quot;../reference/idioms&quot;&gt;Kotlinイディオム&lt;/a&gt;を学ぶ価値はあります。</target>
        </trans-unit>
        <trans-unit id="3e8437143d4c208041b9e7dc73001eda18b471b7" translate="yes" xml:space="preserve">
          <source>IEEErem</source>
          <target state="translated">IEEErem</target>
        </trans-unit>
        <trans-unit id="a479a89af81322719229d26626e9261747f5e247" translate="yes" xml:space="preserve">
          <source>IGNORE_CASE</source>
          <target state="translated">IGNORE_CASE</target>
        </trans-unit>
        <trans-unit id="6fca55ca3c828a46bfe96a10e69f572b61ce540c" translate="yes" xml:space="preserve">
          <source>IN</source>
          <target state="translated">IN</target>
        </trans-unit>
        <trans-unit id="d60d89994c2165dbb5cb15c0ca6a53ef57dbf709" translate="yes" xml:space="preserve">
          <source>INITIAL_QUOTE_PUNCTUATION</source>
          <target state="translated">INITIAL_QUOTE_PUNCTUATION</target>
        </trans-unit>
        <trans-unit id="4c38beffa49b3c4e833b61ab982e642ee37bd833" translate="yes" xml:space="preserve">
          <source>INSTANCE</source>
          <target state="translated">INSTANCE</target>
        </trans-unit>
        <trans-unit id="bc0a7fedf606734e8b8a7a6a0423b5fd26cf0e94" translate="yes" xml:space="preserve">
          <source>INTERNAL</source>
          <target state="translated">INTERNAL</target>
        </trans-unit>
        <trans-unit id="3abcb72b954677e513cd35785ddfd45da21ba7df" translate="yes" xml:space="preserve">
          <source>INVALID</source>
          <target state="translated">INVALID</target>
        </trans-unit>
        <trans-unit id="6309dcdb883fbfdbdd8583370627de3f62431921" translate="yes" xml:space="preserve">
          <source>INVARIANT</source>
          <target state="translated">INVARIANT</target>
        </trans-unit>
        <trans-unit id="74b5e33e6c2950450e841be55ad77a9a298f6e82" translate="yes" xml:space="preserve">
          <source>IO API for working with files and streams.</source>
          <target state="translated">ファイルやストリームを扱うための IO API。</target>
        </trans-unit>
        <trans-unit id="d4ba35793b9b14a1c9dfe7552c4aadb3500b92b0" translate="yes" xml:space="preserve">
          <source>IOS</source>
          <target state="translated">IOS</target>
        </trans-unit>
        <trans-unit id="880aaed583c06128d0dabc74c31f4f9c0f838de0" translate="yes" xml:space="preserve">
          <source>ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</source>
          <target state="translated">ISO Latin Alphabet No.1,a.k.a.ISO-LATIN-1.</target>
        </trans-unit>
        <trans-unit id="7ed18c6c7ea70ff1be77a3ecb9a66a126984e1e5" translate="yes" xml:space="preserve">
          <source>ISO_8859_1</source>
          <target state="translated">ISO_8859_1</target>
        </trans-unit>
        <trans-unit id="d3a51ffb1e3f01b30accf6df0d2f721e7f26e556" translate="yes" xml:space="preserve">
          <source>Ideally, a new version of a library can be used as a &quot;drop-in replacement&quot; for an older version. This means that upgrading a binary dependency should not break anything, even if the application is not recompiled (this is possible under dynamic linking).</source>
          <target state="translated">理想的には、ライブラリの新バージョンは古いバージョンの「ドロップイン置換」として使用できます。これは、アプリケーションが再コンパイルされていなくても、バイナリ依存関係をアップグレードしても何も壊さないことを意味します (これはダイナミックリンクで可能です)。</target>
        </trans-unit>
        <trans-unit id="859ba4fec3728f6f969697355896871c211c1e1f" translate="yes" xml:space="preserve">
          <source>Ideally, every incompatible change should be announced through a compile-time warning reported in the problematic code (usually referred to as a &lt;em&gt;deprecation warning&lt;/em&gt;) and accompanied with automated migration aids. So, the ideal migration workflow goes as follows:</source>
          <target state="translated">理想的には、互換性のないすべての変更は、問題のあるコードで報告されるコンパイル時の警告（通常は&lt;em&gt;非推奨の警告&lt;/em&gt;と呼ば&lt;em&gt;れます&lt;/em&gt;）を介して通知され、自動化された移行支援が付随します。したがって、理想的な移行ワークフローは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="087a9655745fc0cab55d8e68ef13c11042591cc2" translate="yes" xml:space="preserve">
          <source>Idiomatic use of language features</source>
          <target state="translated">言語機能の慣用的な使用</target>
        </trans-unit>
        <trans-unit id="ec04bd386a626dbd6df1f3954dfd578f058ce091" translate="yes" xml:space="preserve">
          <source>Idioms</source>
          <target state="translated">Idioms</target>
        </trans-unit>
        <trans-unit id="7116ccfc9bfe7776006467cfb0a446f8b7f1a57f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.Array%28%28kotlin.collections.copyOf.T%29%29%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is greater than the size of the original array, the extra elements in the copy array are filled with &lt;code&gt;null&lt;/code&gt; values.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.Array%28%28kotlin.collections.copyOf.T%29%29%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより大きい場合、コピー配列の余分な要素は &lt;code&gt;null&lt;/code&gt; 値で埋められます。</target>
        </trans-unit>
        <trans-unit id="10756c73471a82f7019c38192c8009852ba15419" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.Array%28%28kotlin.collections.copyOf.T%29%29%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is less than the size of the original array, the copy array is truncated to the &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.Array%28%28kotlin.collections.copyOf.T%29%29%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.Array%28%28kotlin.collections.copyOf.T%29%29%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより小さい場合、コピー配列は&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.Array%28%28kotlin.collections.copyOf.T%29%29%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSizeに&lt;/a&gt;切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="51af16ecd7473c2e5424019e748ee393e778bc49" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.BooleanArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is greater than the size of the original array, the extra elements in the copy array are filled with &lt;code&gt;false&lt;/code&gt; values.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.BooleanArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより大きい場合、コピー配列の余分な要素は &lt;code&gt;false&lt;/code&gt; 値で埋められます。</target>
        </trans-unit>
        <trans-unit id="c1e121c8e99f645abbf72f057357f99718caaa2f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.BooleanArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is less than the size of the original array, the copy array is truncated to the &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.BooleanArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.BooleanArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより小さい場合、コピー配列は&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.BooleanArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSizeに&lt;/a&gt;切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="1f2abba5d06a22a16ee639e853c70cb9ca87180f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.ByteArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is greater than the size of the original array, the extra elements in the copy array are filled with zero values.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.ByteArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより大きい場合、コピー配列の余分な要素はゼロ値で埋められます。</target>
        </trans-unit>
        <trans-unit id="f9cc62e5c68b22296cffe98ca0d3ae74a9771f17" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.ByteArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is less than the size of the original array, the copy array is truncated to the &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.ByteArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.ByteArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより小さい場合、コピー配列は&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.ByteArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSizeに&lt;/a&gt;切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="54313bea7a81301c76111eaa07088a4a9fb7c12c" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.CharArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is greater than the size of the original array, the extra elements in the copy array are filled with null char (&lt;code&gt;\u0000&lt;/code&gt;) values.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.CharArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより大きい場合、コピー配列の余分な要素はnull char（ &lt;code&gt;\u0000&lt;/code&gt; ）値で埋められます。</target>
        </trans-unit>
        <trans-unit id="b0875c9b1dc49854df801a1cc12ab6317eaea969" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.CharArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is less than the size of the original array, the copy array is truncated to the &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.CharArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.CharArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより小さい場合、コピー配列は&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.CharArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSizeに&lt;/a&gt;切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="ada9d3a67b3da1ac031d4b8eab6aa15e10e6f505" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.UIntArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is greater than the size of the original array, the extra elements in the copy array are filled with zero values.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.UIntArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより大きい場合、コピー配列の余分な要素はゼロ値で埋められます。</target>
        </trans-unit>
        <trans-unit id="a4d533ebbe21d5f918e9006bf160fa180cce3bde" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.UIntArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt; is less than the size of the original array, the copy array is truncated to the &lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.UIntArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.UIntArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSize&lt;/a&gt;が元の配列のサイズより小さい場合、コピー配列は&lt;a href=&quot;copy-of#kotlin.collections%24copyOf%28kotlin.UIntArray%2C+kotlin.Int%29%2FnewSize&quot;&gt;newSizeに&lt;/a&gt;切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="323d80bac9fea71a1cf91f72104d4ae325480945" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; is not specified then some unspecified name will be used. If &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt; is not specified then &quot;.tmp&quot; will be used. If &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fdirectory&quot;&gt;directory&lt;/a&gt; is not specified then the default temporary-file directory will be used.</source>
          <target state="translated">&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;が指定されていない場合、未指定の名前が使用されます。&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fsuffix&quot;&gt;サフィックス&lt;/a&gt;が指定されていない場合は、「。tmp」が使用されます。&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fdirectory&quot;&gt;ディレクトリ&lt;/a&gt;が指定されていない場合は、デフォルトの一時ファイルディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="58f46707a7046964465798b99af9c1e475421494" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; is not specified then some unspecified name will be used. If &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt; is not specified then &quot;.tmp&quot; will be used. If &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fdirectory&quot;&gt;directory&lt;/a&gt; is not specified then the default temporary-file directory will be used.</source>
          <target state="translated">&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;が指定されていない場合、未指定の名前が使用されます。&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fsuffix&quot;&gt;サフィックス&lt;/a&gt;が指定されていない場合は、「。tmp」が使用されます。&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile%28kotlin.String%2C+kotlin.String%2C+java.io.File%29%2Fdirectory&quot;&gt;ディレクトリ&lt;/a&gt;が指定されていない場合は、デフォルトの一時ファイルディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="39f8f458ec615b321af11d61c4b5bbe5ba0596a6" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt; is rooted path it must be equal to this. If &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt; is relative path then last N components of &lt;code&gt;this&lt;/code&gt; must be the same as all components in &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt;, where N is the number of components in &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;、他のは、&lt;/a&gt;パスを根ざしていることは、これに等しくなければなりません。場合&lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;他方が&lt;/a&gt;相対パスであり、その後の最後のN個の成分 &lt;code&gt;this&lt;/code&gt; すべてのコンポーネントと同じである必要があり&lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;、他の&lt;/a&gt; Nの中の成分の数であり、&lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;他方が&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c3436ce672978ed57529bad76b43af3b8c8d35f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;with-sign#kotlin.math%24withSign%28kotlin.Double%2C+kotlin.Double%29%2Fsign&quot;&gt;sign&lt;/a&gt; is &lt;code&gt;NaN&lt;/code&gt; the sign of the result is undefined.</source>
          <target state="translated">&lt;a href=&quot;with-sign#kotlin.math%24withSign%28kotlin.Double%2C+kotlin.Double%29%2Fsign&quot;&gt;符号&lt;/a&gt;が &lt;code&gt;NaN&lt;/code&gt; の場合、結果の符号は未定義です。</target>
        </trans-unit>
        <trans-unit id="97bd02530a6e92760dbfeb249a29a66473663604" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Car&lt;/code&gt; does nothing, it will inherit this function as-is, and it will return a message with the car's horsepowers and max speed. If we want a car-specific message, &lt;code&gt;Car&lt;/code&gt; can override the function by redeclaring it with the &lt;code&gt;override&lt;/code&gt; keyword:</source>
          <target state="translated">&lt;code&gt;Car&lt;/code&gt; が何もしない場合、この関数はそのまま継承され、車の馬力と最高速度を示すメッセージが返されます。車固有のメッセージが必要な場合、 &lt;code&gt;Car&lt;/code&gt; は &lt;code&gt;override&lt;/code&gt; キーワードを使用して関数を再宣言することにより、関数をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="6b65a764a6e57020469ed37fe85c746bc23325c2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; is contravariant: is it okay that the user of my class thinks that &lt;code&gt;T&lt;/code&gt; in this position is a &lt;code&gt;Subtype&lt;/code&gt;, while in reality, it's a &lt;code&gt;Supertype&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が反変である場合：私のクラスのユーザーは、この位置の &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Subtype&lt;/code&gt; であると考えていても &lt;code&gt;Supertype&lt;/code&gt; ませんが、実際には、スーパータイプですか？</target>
        </trans-unit>
        <trans-unit id="7f4b2a8362f8c8da16a2daf58794c2f8fb9ef78c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; is covariant: is it okay that the user of my class thinks that &lt;code&gt;T&lt;/code&gt; in this position is a &lt;code&gt;Supertype&lt;/code&gt;, while in reality, it's a &lt;code&gt;Subtype&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が共変である場合：私のクラスのユーザーは、この位置の &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Supertype&lt;/code&gt; &lt;code&gt;Subtype&lt;/code&gt; と考えていても問題ありませんが、実際にはサブタイプですか？</target>
        </trans-unit>
        <trans-unit id="bfd51f1001dac80c99a4bb3dda8e4e82d6a1ba60" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maybeNull&lt;/code&gt; is null, the function won't be called, and &lt;code&gt;result&lt;/code&gt; will be null; otherwise, it will be the return value of &lt;code&gt;functionThatCanNotHandleNull(this)&lt;/code&gt;, where &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;maybeNull&lt;/code&gt;. You can chain &lt;code&gt;run()&lt;/code&gt; calls with &lt;code&gt;?.&lt;/code&gt; - each one will be called on the previous result if it's not null:</source>
          <target state="translated">場合 &lt;code&gt;maybeNull&lt;/code&gt; nullの場合、関数が呼び出されず、 &lt;code&gt;result&lt;/code&gt; nullになります。それ以外の場合は、の戻り値となる &lt;code&gt;functionThatCanNotHandleNull(this)&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; を意味 &lt;code&gt;maybeNull&lt;/code&gt; 。 &lt;code&gt;run()&lt;/code&gt; 呼び出しは &lt;code&gt;?.&lt;/code&gt; チェーンできます。-それぞれがnullでない場合、前の結果で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1fae05b8006d19a81c7cfe4f83b2f0b20d1eb681" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;output&lt;/code&gt; is a .jar file, whether Kotlin runtime library is included in the jar</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; が.jarファイルの場合、Kotlinランタイムライブラリがjarに含まれているかどうか</target>
        </trans-unit>
        <trans-unit id="76b835947859ca1b8bd986c559c1ae81675e7041" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;this&lt;/em&gt; has no qualifiers, it refers to the &lt;em&gt;innermost enclosing scope&lt;/em&gt;. To refer to &lt;em&gt;this&lt;/em&gt; in other scopes, &lt;em&gt;label qualifiers&lt;/em&gt; are used:</source>
          <target state="translated">&lt;em&gt;これ&lt;/em&gt;に修飾子がない場合は、&lt;em&gt;最も内側の囲みスコープを&lt;/em&gt;参照し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;これ&lt;/em&gt;を他のスコープで参照するには、&lt;em&gt;ラベル修飾子&lt;/em&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="61eed3660645882617baf218a091099d9cf2b60b" translate="yes" xml:space="preserve">
          <source>If Expression</source>
          <target state="translated">式の場合</target>
        </trans-unit>
        <trans-unit id="067406276e7bea71dbdf3fc57b0b60425f4f81e1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;headerFilter&lt;/code&gt; is not specified, then all headers are included.</source>
          <target state="translated">&lt;code&gt;headerFilter&lt;/code&gt; が指定されていない場合、すべてのヘッダーが含まれます。</target>
        </trans-unit>
        <trans-unit id="c1d473c7be95157741f59b453932617b9a2d63b7" translate="yes" xml:space="preserve">
          <source>If a Java method returns void, it will return &lt;code&gt;Unit&lt;/code&gt; when called from Kotlin. If, by any chance, someone uses that return value, it will be assigned at the call site by the Kotlin compiler, since the value itself is known in advance (being &lt;code&gt;Unit&lt;/code&gt;).</source>
          <target state="translated">Javaメソッドがvoidを返す場合、Kotlinから呼び出されると &lt;code&gt;Unit&lt;/code&gt; が返されます。万が一、誰かがその戻り値を使用した場合、値自体は事前に（ &lt;code&gt;Unit&lt;/code&gt; であるため）わかっているため、コールサイトでKotlinコンパイラーによって割り当てられます。</target>
        </trans-unit>
        <trans-unit id="40ec1cb51b1e7e966d4cdec7135acdd24d93310b" translate="yes" xml:space="preserve">
          <source>If a Kotlin file contains a single class (potentially with related top-level declarations), its name should be the same as the name of the class, with the .kt extension appended. If a file contains multiple classes, or only top-level declarations, choose a name describing what the file contains, and name the file accordingly. Use camel humps with an uppercase first letter (e.g. &lt;code&gt;ProcessDeclarations.kt&lt;/code&gt;).</source>
          <target state="translated">Kotlinファイルに単一のクラスが含まれている場合（関連するトップレベルの宣言が含まれている可能性があります）、その名前はクラスの名前と同じで、.kt拡張子が追加されている必要があります。ファイルに複数のクラスが含まれている場合、または最上位の宣言のみが含まれている場合は、ファイルの内容を説明する名前を選択し、それに応じてファイルに名前を付けます。キャメルのこぶを最初の文字に大文字で使用します（例： &lt;code&gt;ProcessDeclarations.kt&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d499261dcf077150b8a893ee60227455c9e843ed" translate="yes" xml:space="preserve">
          <source>If a Kotlin/Native module uses a CocoaPods library, you can build this module only from an Xcode project. Otherwise the CocoaPods library cannot be resolved by the Kotlin/Native infrastructure.</source>
          <target state="translated">Kotlin/NativeモジュールがCocoaPodsライブラリを使用している場合、Xcodeプロジェクトからのみビルドできます。そうしないと、CocoaPods ライブラリは Kotlin/Native インフラストラクチャで解決できません。</target>
        </trans-unit>
        <trans-unit id="a60ec0b587e0996e818004264195b3afcc09cec1" translate="yes" xml:space="preserve">
          <source>If a class has a &lt;a href=&quot;object-declarations#companion-objects&quot;&gt;companion object&lt;/a&gt; defined, you can also define extension functions and properties for the companion object:</source>
          <target state="translated">クラスに&lt;a href=&quot;object-declarations#companion-objects&quot;&gt;コンパニオンオブジェクトが&lt;/a&gt;定義されている場合は、コンパニオンオブジェクトの拡張関数とプロパティを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="4764e437b4a8e0194f97255ccbb034043a390f71" translate="yes" xml:space="preserve">
          <source>If a class has a member function, and an extension function is defined which has the same receiver type, the same name is applicable to given arguments, the &lt;strong&gt;member always wins&lt;/strong&gt;. For example:</source>
          <target state="translated">クラスにメンバー関数があり、同じレシーバータイプを持つ拡張関数が定義されている場合、同じ名前が特定の引数に適用され、&lt;strong&gt;メンバーは常にwinになり&lt;/strong&gt;ます。例えば：</target>
        </trans-unit>
        <trans-unit id="b0751c2dcab880d762e9ac5f2b150da0f43d1aeb" translate="yes" xml:space="preserve">
          <source>If a class has two properties which are conceptually the same but one is part of a public API and another is an implementation detail, use an underscore as the prefix for the name of the private property:</source>
          <target state="translated">概念的には同じですが、1 つがパブリック API の一部で、もう 1 つが実装の詳細である 2 つのプロパティを持つクラスの場合、プライベート プロパティの名前の接頭語にはアンダースコアを使用します。</target>
        </trans-unit>
        <trans-unit id="62aeef1d35409f9d2a0e16b783bc032764ff6cdc" translate="yes" xml:space="preserve">
          <source>If a class or a function from a library is marked by its author as experimental, using it in your code will produce warnings or compilation errors unless you explicitly accept their experimental status. There are several ways to accept the experimental status of API elements; all of them are applicable without technical limitations. You are free to choose the way that you find best for your situation.</source>
          <target state="translated">ライブラリのクラスや関数が作者によって実験的なものとしてマークされている場合、明示的に実験的な状態を受け入れない限り、コード内でそれを使用すると警告やコンパイルエラーが発生します。API 要素の実験的な状態を受け入れるにはいくつかの方法があります。あなたの状況に最も適した方法を自由に選択することができます。</target>
        </trans-unit>
        <trans-unit id="b68424f5ba6a2078bd8f39139d9b1b4eecca3f3f" translate="yes" xml:space="preserve">
          <source>If a component of the destructured parameter is unused, you can replace it with the underscore to avoid inventing its name:</source>
          <target state="translated">破壊されたパラメータのコンポーネントが使用されていない場合は、アンダースコアに置き換えることで、その名前を考案しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="c6f280ee1c596a483e44dc5cd919a56f36a6fc8d" translate="yes" xml:space="preserve">
          <source>If a coroutine encounters exception other than &lt;code&gt;CancellationException&lt;/code&gt;, it cancels its parent with that exception. This behaviour cannot be overridden and is used to provide stable coroutines hierarchies for &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/composing-suspending-functions.md#structured-concurrency-with-async&quot;&gt;structured concurrency&lt;/a&gt; which do not depend on &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt; implementation. The original exception is handled by the parent when all its children terminate.</source>
          <target state="translated">コルーチンが &lt;code&gt;CancellationException&lt;/code&gt; 以外の例外を検出した場合、コルーチンはその例外を使用してその親をキャンセルします。この動作はオーバーライドできず、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt;実装に依存しない&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/composing-suspending-functions.md#structured-concurrency-with-async&quot;&gt;構造化された同時実行性の&lt;/a&gt;ための安定したコルーチン階層を提供するために使用されます。元の例外は、すべての子が終了したときに親によって処理されます。</target>
        </trans-unit>
        <trans-unit id="d2d462cd8e9ba3b7d699994700c496f2c560b29d" translate="yes" xml:space="preserve">
          <source>If a declaration has multiple modifiers, always put them in the following order:</source>
          <target state="translated">宣言に複数の修飾子がある場合は、常に以下の順序で配置してください。</target>
        </trans-unit>
        <trans-unit id="1c324efe9f900ec5ab9502805d87c655d837da4d" translate="yes" xml:space="preserve">
          <source>If a default parameter precedes a parameter with no default value, the default value can only be used by calling the function with &lt;a href=&quot;#named-arguments&quot;&gt;named arguments&lt;/a&gt;:</source>
          <target state="translated">デフォルトパラメータがデフォルト値のないパラメータの前にある場合、デフォルト値は、&lt;a href=&quot;#named-arguments&quot;&gt;名前付き引数で&lt;/a&gt;関数を呼び出すことによってのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="c5fa62c81704299df516dd7c041a8d480c196b9b" translate="yes" xml:space="preserve">
          <source>If a default type qualifier uses a type qualifier nickname and they are both &lt;code&gt;@UnderMigration&lt;/code&gt;, the status from the default type qualifier is used.</source>
          <target state="translated">デフォルトのタイプ修飾子がタイプ修飾子のニックネームを使用し、両方が &lt;code&gt;@UnderMigration&lt;/code&gt; である場合、デフォルトのタイプ修飾子のステータスが使用されます。</target>
        </trans-unit>
        <trans-unit id="8fb1b7879228c51bc49251497614be1617615253" translate="yes" xml:space="preserve">
          <source>If a file doesn't declare a package, it belongs to the nameless &lt;em&gt;default package&lt;/em&gt;. This should be avoided, as it will make it hard to reference the symbols from that file in case of naming conflicts (you can't explicitly import the empty package).</source>
          <target state="translated">ファイルがパッケージを宣言していない場合、そのファイルは名前のない&lt;em&gt;デフォルトパッケージに&lt;/em&gt;属してい&lt;em&gt;ます&lt;/em&gt;。名前の競合が発生した場合にそのファイルからシンボルを参照することが困難になるため、これは避けてください（空のパッケージを明示的にインポートすることはできません）。</target>
        </trans-unit>
        <trans-unit id="f5fbea4c3aea4496e7e7b00414d2fcaa5869dd61" translate="yes" xml:space="preserve">
          <source>If a function does not return any useful value, its return type is &lt;code&gt;Unit&lt;/code&gt;. &lt;code&gt;Unit&lt;/code&gt; is a type with only one value - &lt;code&gt;Unit&lt;/code&gt;. This value does not have to be returned explicitly:</source>
          <target state="translated">関数が有用な値を返さない場合、その戻り値の型は &lt;code&gt;Unit&lt;/code&gt; です。 &lt;code&gt;Unit&lt;/code&gt; 一つの値だけを持つタイプである- &lt;code&gt;Unit&lt;/code&gt; 。この値は明示的に返される必要はありません：</target>
        </trans-unit>
        <trans-unit id="586ae5a6f0a2e9992a680dbe096f9f0a203405b4" translate="yes" xml:space="preserve">
          <source>If a function returns Unit, the return type should be omitted:</source>
          <target state="translated">関数がUnitを返す場合は、戻り値の型を省略します。</target>
        </trans-unit>
        <trans-unit id="26ffbbf2f8c7a69e516fd6f5e5fb01c4807e2577" translate="yes" xml:space="preserve">
          <source>If a generic type has several type parameters each of them can be projected independently. For example, if the type is declared as &lt;code&gt;interface Function&amp;lt;in T, out U&amp;gt;&lt;/code&gt; we can imagine the following star-projections:</source>
          <target state="translated">ジェネリック型に複数の型パラメーターがある場合、それぞれを独立して投影できます。たとえば、型が &lt;code&gt;interface Function&amp;lt;in T, out U&amp;gt;&lt;/code&gt; として宣言されている場合、次の星型投影を想像できます。</target>
        </trans-unit>
        <trans-unit id="de5d80fa791bb5a89bb7999f43e44154d9f7a1b7" translate="yes" xml:space="preserve">
          <source>If a library has a 'root' publication, the consumer may specify a single dependency on the library as a whole in a common source set, and a corresponding platform-specific variant will be chosen, if available, for each of the compilations that include this dependency. Consider a &lt;code&gt;sample-lib&lt;/code&gt; library built for the JVM and JS and published with a 'root' publication:</source>
          <target state="translated">ライブラリに「ルート」パブリケーションがある場合、コンシューマは共通のソースセットでライブラリ全体に対する単一の依存関係を指定でき、対応するプラットフォーム固有のバリアントが利用可能な場合は、以下を含むコンパイルごとに選択されますこの依存関係。JVMとJS用にビルドされ、「ルート」パブリケーションで公開された &lt;code&gt;sample-lib&lt;/code&gt; ライブラリライブラリを考えます。</target>
        </trans-unit>
        <trans-unit id="2b6d1027059f87a94c39781325c4a38d3fd36ee6" translate="yes" xml:space="preserve">
          <source>If a member function or property is declared as &lt;code&gt;open&lt;/code&gt;, subclasses may &lt;em&gt;override&lt;/em&gt; it by providing a new implementation. Let's say that &lt;code&gt;MotorVehicle&lt;/code&gt; declares this function:</source>
          <target state="translated">メンバー関数またはプロパティが &lt;code&gt;open&lt;/code&gt; として宣言されている場合、サブクラスは新しい実装を提供することによってそれを&lt;em&gt;オーバーライド&lt;/em&gt;でき&lt;em&gt;ます&lt;/em&gt;。ことをしてみましょうと言う &lt;code&gt;MotorVehicle&lt;/code&gt; は、この関数を宣言します。</target>
        </trans-unit>
        <trans-unit id="3b05658c0676c78c2f6ecac73f01698365f225fb" translate="yes" xml:space="preserve">
          <source>If a method has N parameters and M of which have default values, M overloads are generated: the first one takes N-1 parameters (all but the last one that takes a default value), the second takes N-2 parameters, and so on.</source>
          <target state="translated">あるメソッドがN個のパラメータを持ち、そのうちのM個がデフォルト値を持つ場合、M個のオーバーロードが生成されます:最初のものはN-1個のパラメータを取り(デフォルト値を取る最後のものを除いてすべて)、2番目のものはN-2個のパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="187f8c5b91bd6882618c5a62bdf223a239fa7e78" translate="yes" xml:space="preserve">
          <source>If a non-abstract class does not declare any constructors (primary or secondary), it will have a generated primary constructor with no arguments. The visibility of the constructor will be public. If you do not want your class to have a public constructor, you need to declare an empty primary constructor with non-default visibility:</source>
          <target state="translated">抽象クラスではないクラスがコンストラクタ (プライマリまたはセカンダリ)を宣言していない場合は、引数を持たないプライマリコンストラクタが生成されます。コンストラクタの可視性はパブリックになります。クラスにパブリックなコンストラクタを持たせたくない場合は、 デフォルトではない可視性を持つ空のプライマリコンストラクタを宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="29905ed43abbefe9d905d1bc7ab8a797a47bb7d9" translate="yes" xml:space="preserve">
          <source>If a project consists of both Kotlin and Java source code, while it is possible to use &lt;em&gt;kotlinc&lt;/em&gt;, to avoid repetition of task parameters, it is recommended to use &lt;em&gt;withKotlin&lt;/em&gt; task:</source>
          <target state="translated">プロジェクトがKotlinとJavaソースコードの両方で構成されている場合、&lt;em&gt;kotlinc&lt;/em&gt;を使用することは可能ですが、タスクパラメーターの繰り返しを避けるため、&lt;em&gt;withKotlin&lt;/em&gt;タスクを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="609654c2fad938d0263a48e6bf332c23223482ab" translate="yes" xml:space="preserve">
          <source>If a project consists of multiple source roots, use &lt;em&gt;src&lt;/em&gt; as elements to define paths:</source>
          <target state="translated">プロジェクトが複数のソースルートで構成されている場合は、&lt;em&gt;src&lt;/em&gt;を要素として使用してパスを定義します。</target>
        </trans-unit>
        <trans-unit id="6ed938136219853ee5b7c06664d635c5b5eff6f0" translate="yes" xml:space="preserve">
          <source>If a sequence operation returns another sequence, which is produced lazily, it's called &lt;em&gt;intermediate&lt;/em&gt;. Otherwise, the operation is &lt;em&gt;terminal&lt;/em&gt;. Examples of terminal operations are &lt;a href=&quot;constructing-collections#copying&quot;&gt;&lt;code&gt;toList()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;collection-aggregate&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;. Sequence elements can be retrieved only with terminal operations.</source>
          <target state="translated">シーケンス操作が遅延生成される別のシーケンスを返す場合、それは&lt;em&gt;中間&lt;/em&gt;と呼ばれます。それ以外の場合、操作は&lt;em&gt;terminal&lt;/em&gt;です。端末操作の例は、&lt;a href=&quot;constructing-collections#copying&quot;&gt; &lt;code&gt;toList()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;collection-aggregate&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; &lt;/a&gt;です。シーケンス要素は、ターミナル操作でのみ取得できます。</target>
        </trans-unit>
        <trans-unit id="30e6ccb06323d447af741e2670a8825971c56bf1" translate="yes" xml:space="preserve">
          <source>If a supertype has a constructor, appropriate constructor parameters must be passed to it. Many supertypes may be specified as a comma-separated list after the colon:</source>
          <target state="translated">スーパータイプがコンストラクタを持っている場合は、適切なコンストラクタのパラメータを渡さなければなりません。多くのスーパータイプは、コロンの後にカンマ区切りのリストとして指定することができます。</target>
        </trans-unit>
        <trans-unit id="71ee75455c68258fcc7798b0e5a90d8dadcef5cd" translate="yes" xml:space="preserve">
          <source>If a supertype has the &lt;code&gt;componentN()&lt;/code&gt; functions that are &lt;em&gt;open&lt;/em&gt; and return compatible types, the corresponding functions are generated for the data class and override those of the supertype. If the functions of the supertype cannot be overridden due to incompatible signatures or being final, an error is reported;</source>
          <target state="translated">スーパータイプに、&lt;em&gt;オープン&lt;/em&gt;で互換性のあるタイプを返す &lt;code&gt;componentN()&lt;/code&gt; 関数がある場合、対応する関数がデータクラスに対して生成され、スーパータイプの関数をオーバーライドします。互換性のないシグネチャまたはfinalであるためにスーパータイプの関数をオーバーライドできない場合、エラーが報告されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="28f4bb4cbd876a2710b0efbbf4b0592357748708" translate="yes" xml:space="preserve">
          <source>If a top-level declaration is marked &lt;em&gt;private&lt;/em&gt;, it is private to the file it's declared in (see &lt;a href=&quot;visibility-modifiers&quot;&gt;Visibility Modifiers&lt;/a&gt;).</source>
          <target state="translated">トップレベルの宣言が&lt;em&gt;private&lt;/em&gt;とマークされている場合、宣言されたファイルに対してプライベートです（&lt;a href=&quot;visibility-modifiers&quot;&gt;Visibility Modifiersを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8f9335847e2c530d21bcd3080b073f4d1f543f5f" translate="yes" xml:space="preserve">
          <source>If all you want to do with a constructor parameter value is to assign it to a property with the same name, you can declare the property in the primary constructor parameter list (the oneliner below is sufficient for both declaring the properties, declaring the constructor parameters, and initializing the properties with the parameters):</source>
          <target state="translated">コンストラクタのパラメータ値を同じ名前のプロパティに代入するだけの場合は、そのプロパティをプライマリ コンストラクタのパラメータ リストで宣言することができます (プロパティの宣言、コンストラクタのパラメータの宣言、およびパラメータを使用したプロパティの初期化の両方を行うには、以下のオネリで十分です)。</target>
        </trans-unit>
        <trans-unit id="286a0bf4d2cc8a5a12f2292b0ceccc9207bc4770" translate="yes" xml:space="preserve">
          <source>If an annotation is used as a parameter of another annotation, its name is not prefixed with the @ character:</source>
          <target state="translated">アノテーションが別のアノテーションのパラメータとして使用されている場合、その名前の前には @ 文字は付けられません。</target>
        </trans-unit>
        <trans-unit id="10147e3b40c783598d2bd9a60f764d64051cd74f" translate="yes" xml:space="preserve">
          <source>If an annotation type is annotated with both &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/meta/TypeQualifierNickname.html&quot;&gt;&lt;code&gt;@TypeQualifierNickname&lt;/code&gt;&lt;/a&gt; and JSR-305 &lt;code&gt;@Nonnull&lt;/code&gt; (or its another nickname, such as &lt;code&gt;@CheckForNull&lt;/code&gt;), then the annotation type is itself used for retrieving precise nullability and has the same meaning as that nullability annotation:</source>
          <target state="translated">注釈型に&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/meta/TypeQualifierNickname.html&quot;&gt; &lt;code&gt;@TypeQualifierNickname&lt;/code&gt; &lt;/a&gt;とJSR-305 &lt;code&gt;@Nonnull&lt;/code&gt; （または@CheckForNullなどの別のニックネーム）の両方が注釈されている場合、注釈型自体が正確な &lt;code&gt;@CheckForNull&lt;/code&gt; 取得に使用され、null可能性注釈と同じ意味になります。</target>
        </trans-unit>
        <trans-unit id="f981f8a8e6f98948229b86561835f71dd548b23d" translate="yes" xml:space="preserve">
          <source>If an extension is declared outside its receiver type, such an extension cannot access the receiver's &lt;code&gt;private&lt;/code&gt; members.</source>
          <target state="translated">エクステンションがそのレシーバータイプ外で宣言されている場合、そのようなエクステンションはレシーバーの &lt;code&gt;private&lt;/code&gt; メンバーにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="61dcbc44eee3bab1f0e103c1b87baa369fec0f94" translate="yes" xml:space="preserve">
          <source>If an external build system is used for configuring the project, and it's been decided not to share &lt;code&gt;.idea/codeStyle&lt;/code&gt; folder, Kotlin Coding Conventions can be forced with an additional property:</source>
          <target state="translated">プロジェクトの構成に外部ビルドシステムが使用され、 &lt;code&gt;.idea/codeStyle&lt;/code&gt; フォルダーを共有しないことが決定された場合、追加のプロパティを使用してKotlinコーディング規約を強制できます。</target>
        </trans-unit>
        <trans-unit id="d93cee5a226e1db8584fc451a3062eec2e7267d3" translate="yes" xml:space="preserve">
          <source>If an object is frozen it can be checked with an extension property &lt;code&gt;isFrozen&lt;/code&gt;, and if it is, object sharing is allowed. Currently, Kotlin/Native runtime only freezes the enum objects after creation, although additional autofreezing of certain provably immutable objects could be implemented in the future.</source>
          <target state="translated">オブジェクトがフリーズしている場合は、拡張プロパティ &lt;code&gt;isFrozen&lt;/code&gt; で確認できます。フリーズしている場合は、オブジェクトの共有が許可されます。現在、Kotlin / Nativeランタイムは、作成後にenumオブジェクトのみをフリーズしますが、特定の不変のオブジェクトの追加の自動フリーズは将来実装される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d745839ade06f63274de839883364751868e1c68" translate="yes" xml:space="preserve">
          <source>If an object is transferred in &lt;code&gt;UNSAFE&lt;/code&gt; mode and is still accessible from multiple concurrent executors, program will likely crash unexpectedly, so consider that last resort in optimizing, not a general purpose mechanism.</source>
          <target state="translated">オブジェクトが &lt;code&gt;UNSAFE&lt;/code&gt; モードで転送され、複数の同時実行プログラムから引き続きアクセスできる場合、プログラムが予期せずクラッシュする可能性があるため、汎用メカニズムではなく、最適化の最後の手段を検討してください。</target>
        </trans-unit>
        <trans-unit id="2fbb13db366dcb9336c03ff5dd678511b1b8d160" translate="yes" xml:space="preserve">
          <source>If any errors occur during the copying, then further actions will depend on the result of the call to &lt;code&gt;onError(File, IOException)&lt;/code&gt; function, that will be called with arguments, specifying the file that caused the error and the exception itself. By default this function rethrows exceptions.</source>
          <target state="translated">コピー中にエラーが発生した場合、その後のアクションは &lt;code&gt;onError(File, IOException)&lt;/code&gt; 関数の呼び出しの結果によって異なります。これは、エラーの原因となったファイルと例外自体を指定して、引数で呼び出されます。デフォルトでは、この関数は例外を再スローします。</target>
        </trans-unit>
        <trans-unit id="aad3cd8dfcbdf7511572b2939855bed2ac55b99b" translate="yes" xml:space="preserve">
          <source>If any of arrays contains itself on any nesting level that reference is rendered as &lt;code&gt;&quot;[...]&quot;&lt;/code&gt; to prevent recursion.</source>
          <target state="translated">配列のいずれかがネストレベルでそれ自体を含む場合、その参照は再帰を防ぐために &lt;code&gt;&quot;[...]&quot;&lt;/code&gt; としてレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="e3f9db9bf25bbec3f31f98164a22576425cc669b" translate="yes" xml:space="preserve">
          <source>If any of arrays contains itself on any nesting level the behavior is undefined.</source>
          <target state="translated">配列のいずれかがどの入れ子レベルにもそれ自身を含む場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="9c5d9097483a5bb9ad684d81ab29afc4db54e1ed" translate="yes" xml:space="preserve">
          <source>If any of elements is &lt;code&gt;NaN&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">要素のいずれかがある場合は &lt;code&gt;NaN&lt;/code&gt; を返す &lt;code&gt;NaN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97176cd6bad6dda53932f8ad2eae19bbc9012e41" translate="yes" xml:space="preserve">
          <source>If any of two pairs would have the same key the last one gets added to the map.</source>
          <target state="translated">同じキーを持つペアが2つある場合、最後のペアがマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="79cd9f8134bc36e93ee0b5b0096e84d02bfcaf30" translate="yes" xml:space="preserve">
          <source>If any two characters are equal, the last one gets added to the map.</source>
          <target state="translated">2つの文字が等しい場合、最後の文字がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="c0c6357923841ba1ceaab6f1a6e9f84f8606ef1c" translate="yes" xml:space="preserve">
          <source>If any two characters are equal, the last one overwrites the former value in the map.</source>
          <target state="translated">2 つの文字が等しい場合、最後の文字がマップ内の前の値を上書きします。</target>
        </trans-unit>
        <trans-unit id="2f26706708ad295a2d4220fcac5447f101089a9f" translate="yes" xml:space="preserve">
          <source>If any two characters would have the same key returned by &lt;a href=&quot;associate-by#kotlin.text%24associateBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">&lt;a href=&quot;associate-by#kotlin.text%24associateBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーが2つの文字に含まれる場合、最後の文字がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="5497c944eda344c5ee4cce041575eba3fa47949a" translate="yes" xml:space="preserve">
          <source>If any two characters would have the same key returned by &lt;a href=&quot;associate-by#kotlin.text%24associateBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">&lt;a href=&quot;associate-by#kotlin.text%24associateBy%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーが2つの文字に含まれる場合、最後の文字がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="00f0b6493f2eb1f51451a75f987e59fc400e809f" translate="yes" xml:space="preserve">
          <source>If any two characters would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">&lt;a href=&quot;associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーが2つの文字に含まれる場合、最後の文字がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="e75792e6117ae62d34357ae99163b28e3ae87d39" translate="yes" xml:space="preserve">
          <source>If any two characters would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">&lt;a href=&quot;associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーが2つの文字に含まれる場合、最後の文字がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="4222526855776d5fea3d288e6bf28ef40486cfda" translate="yes" xml:space="preserve">
          <source>If any two elements are equal, the last one gets added to the map.</source>
          <target state="translated">2 つの要素が等しい場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="52ae8f33e4fce4d2bff00b2205f42a03dc6b6dc5" translate="yes" xml:space="preserve">
          <source>If any two elements are equal, the last one overwrites the former value in the map.</source>
          <target state="translated">2 つの要素が等しい場合、最後の要素がマップ内の前の値を上書きします。</target>
        </trans-unit>
        <trans-unit id="b0b36918b10e47a460b56e912f87552132811b0f" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.Array%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.Array%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="e4f7e861149810b95e4b66a62c5652d10a7c2b34" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.Array%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.Array%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="346c57febb657aa512596a792a1d6c53c4a5c173" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.collections.Iterable%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.collections.Iterable%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="3287da59db6cb14700469a6de2aad1297af6a1ee" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.collections.Iterable%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by#kotlin.collections%24associateBy%28kotlin.collections.Iterable%28%28kotlin.collections.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateBy.T%2C+kotlin.collections.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="00e86e26effea5e2019fdb8f013dd65c8b5af777" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by#kotlin.sequences%24associateBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateBy.T%2C+kotlin.sequences.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by#kotlin.sequences%24associateBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateBy.T%2C+kotlin.sequences.associateBy.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="aa4e0bb8aab998beb153e618c68711e8ed1f5b4f" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by#kotlin.sequences%24associateBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateBy.T%2C+kotlin.sequences.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateBy.T%2C+kotlin.sequences.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by#kotlin.sequences%24associateBy%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateBy.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateBy.T%2C+kotlin.sequences.associateBy.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateBy.T%2C+kotlin.sequences.associateBy.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="c3d37381e9e97d902481d1677ee619ffffeec57b" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="8a54ba887f98592eb00ea24f27934531d1671f80" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="ab1f15270d6a111ddaa8968f8a8f226b8f79ddf4" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="d0f68c68a34d4b5715504c8f74b425b62b183fef" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="7fef979d1100c793011b653d677a5f4789c9ce5c" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="0f4cd25d85f79262f8b0d5f4a453055241040829" translate="yes" xml:space="preserve">
          <source>If any two elements would have the same key returned by &lt;a href=&quot;associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; the last one gets added to the map.</source>
          <target state="translated">2つの要素が&lt;a href=&quot;associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;によって返される同じキーを持つ場合、最後の要素がマップに追加されます。</target>
        </trans-unit>
        <trans-unit id="15a7c9b40dd906acf8613adf81beb5022ec43a6e" translate="yes" xml:space="preserve">
          <source>If assigning a label for a lambda, do not put a space between the label and the opening curly brace:</source>
          <target state="translated">ラムダにラベルを代入する場合は、ラベルと中括弧の間にスペースを入れないでください。</target>
        </trans-unit>
        <trans-unit id="a91c0067bcc4bc2dc899d9a2f5799f4eb73c4ee3" translate="yes" xml:space="preserve">
          <source>If either value is &lt;code&gt;NaN&lt;/code&gt;, then the result is &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">いずれかの値が &lt;code&gt;NaN&lt;/code&gt; の場合、結果は &lt;code&gt;NaN&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="7f3e1f12baf2d25f74fb62aefb55ff3c7223ad4c" translate="yes" xml:space="preserve">
          <source>If everything went well, you'll see the result in the &lt;strong&gt;Console&lt;/strong&gt; window.</source>
          <target state="translated">すべてがうまくいくと、&lt;strong&gt;コンソール&lt;/strong&gt;ウィンドウに結果が表示されます。</target>
        </trans-unit>
        <trans-unit id="b99457c74d09db32d851769270d759bf6b0bed1e" translate="yes" xml:space="preserve">
          <source>If everything went well, you'll see the result in the &lt;strong&gt;Run&lt;/strong&gt; tool window.</source>
          <target state="translated">すべてが順調に進んだ場合、&lt;strong&gt;実行&lt;/strong&gt;ツールウィンドウに結果が表示されます。</target>
        </trans-unit>
        <trans-unit id="f44e8e73afacbc926ee5ae8b0a40c2caa8a431c0" translate="yes" xml:space="preserve">
          <source>If for some reason you want to store a different value in the backing field than the value that is being assigned to the property, you're free to do that, but then you will probably want a getter to give the calling code back what they expect: if you say &lt;code&gt;field = value * 2&lt;/code&gt; in the setter and &lt;code&gt;this.age = age * 2&lt;/code&gt; in the initializer block, you should also have &lt;code&gt;get() = field / 2&lt;/code&gt;.</source>
          <target state="translated">なんらかの理由で、プロパティに割り当てられている値とは異なる値をバッキングフィールドに格納する場合は、自由に実行できますが、おそらく、ゲッターに呼び出しコードにそれらの値を返させたいと思うでしょう。予想：セッターで &lt;code&gt;field = value * 2&lt;/code&gt; と言い、初期化ブロックで &lt;code&gt;this.age = age * 2&lt;/code&gt; すると、 &lt;code&gt;get() = field / 2&lt;/code&gt; も必要です。</target>
        </trans-unit>
        <trans-unit id="4edefded820cd80aae935341ea1dcb1006c317d1" translate="yes" xml:space="preserve">
          <source>If many cases should be handled in the same way, the branch conditions may be combined with a comma:</source>
          <target state="translated">多くのケースを同じように扱う必要がある場合は、分岐条件をカンマで結合してもよい。</target>
        </trans-unit>
        <trans-unit id="fce48d9ac76717b44d2ca9ae647c75c587720e7e" translate="yes" xml:space="preserve">
          <source>If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.</source>
          <target state="translated">複数のペアが同じキーを持つ場合、結果として得られるマップには、それらのペアの最後のペアの値が含まれます。</target>
        </trans-unit>
        <trans-unit id="c2f6abafe51dcf05f7cf659caae54fb0bbb624da" translate="yes" xml:space="preserve">
          <source>If no elements match the predicate, both functions throw exceptions. To avoid them, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/first-or-null&quot;&gt;&lt;code&gt;firstOrNull()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/last-or-null&quot;&gt;&lt;code&gt;lastOrNull()&lt;/code&gt;&lt;/a&gt; instead: they return &lt;code&gt;null&lt;/code&gt; if no matching elements are found.</source>
          <target state="translated">述語に一致する要素がない場合、両方の関数が例外をスローします。それらを回避するには、代わりに&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/first-or-null&quot;&gt; &lt;code&gt;firstOrNull()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/last-or-null&quot;&gt; &lt;code&gt;lastOrNull()&lt;/code&gt; を&lt;/a&gt;使用し &lt;code&gt;null&lt;/code&gt; 。一致する要素が見つからない場合はnullを返します。</target>
        </trans-unit>
        <trans-unit id="8ce45b90b7ed5e84a37f6079dd50b9e40c3acc1b" translate="yes" xml:space="preserve">
          <source>If not null and else shorthand</source>
          <target state="translated">nullではなく、他の場合は省略可能です。</target>
        </trans-unit>
        <trans-unit id="c3119c5c318b3c1bb9ef4c81af371e666f2e1406" translate="yes" xml:space="preserve">
          <source>If not null shorthand</source>
          <target state="translated">nullではない場合の速記法</target>
        </trans-unit>
        <trans-unit id="f0a31ecbf625068fa2a79a659389ab370dd6f36e" translate="yes" xml:space="preserve">
          <source>If present, specifies a code fragment which should be used as a replacement for the deprecated API usage.</source>
          <target state="translated">存在する場合は、非推奨のAPIの使用法の代替として使用するコードフラグメントを指定します。</target>
        </trans-unit>
        <trans-unit id="b5b87a1191a07e9f1f10d2d86fbeef8f4c6e6b20" translate="yes" xml:space="preserve">
          <source>If some directories on a way to the &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;target&lt;/a&gt; are missing, then they will be created. If the &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;target&lt;/a&gt; file already exists, this function will fail unless &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Foverwrite&quot;&gt;overwrite&lt;/a&gt; argument is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;ターゲット&lt;/a&gt;への途中のいくつかのディレクトリが見つからない場合は、作成されます。&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;ターゲット&lt;/a&gt;ファイルがすでに存在する場合、引数&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Foverwrite&quot;&gt;overwrite&lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; に設定されていない限り、この関数は失敗します。</target>
        </trans-unit>
        <trans-unit id="69564edb6644d0771a0b53f00a1f0ee73a8d9530" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map already has a value corresponding to some key, then the elements being aggregated for that key are never considered as &lt;code&gt;first&lt;/code&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップは、すでにいくつかのキーに対応する値を有し、そのキーに集約されている要素は、と考えることはありません &lt;code&gt;first&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0b6595d56ce18db4a67782306e25689cafd4cbf" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Ftarget&quot;&gt;target&lt;/a&gt; already exists, it will be deleted before copying when the &lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Foverwrite&quot;&gt;overwrite&lt;/a&gt; parameter permits so.</source>
          <target state="translated">場合は&lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Ftarget&quot;&gt;、ターゲットが&lt;/a&gt;すでに存在している、それは時にコピーする前に削除されます&lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Foverwrite&quot;&gt;上書き&lt;/a&gt;パラメータがそうできます。</target>
        </trans-unit>
        <trans-unit id="9f9b5e8d1feceda52168174d03a6fd1853068274" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map already has a value corresponding to the key of some group, that value is used as an initial value of the counter for that group.</source>
          <target state="translated">場合&lt;a href=&quot;each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップは、すでにいくつかのグループのキーに対応する値を有し、その値は、そのグループのためのカウンタの初期値として使用されます。</target>
        </trans-unit>
        <trans-unit id="8e5524567ae268875bd1ad8d3089898977c657ab" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map already has a value corresponding to some key, that value is used as an initial value of the accumulator for that group and the &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelector&lt;/a&gt; function is not called for that group.</source>
          <target state="translated">場合&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップは、すでにいくつかのキーに対応する値を有し、そのグループのためのアキュムレータの初期値として、その値が使用され&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2FinitialValueSelector&quot;&gt;initialValueSelectorの&lt;/a&gt;機能は、そのグループのために呼び出されません。</target>
        </trans-unit>
        <trans-unit id="c2e00bc5fd9ad4886018856e815daa5b47301e4d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map already has a value corresponding to the key of some group, that value is used as an initial value of the accumulator for that group.</source>
          <target state="translated">場合&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップは、すでにいくつかのグループのキーと対応する値を有し、その値は、そのグループのためのアキュムレータの初期値として使用されます。</target>
        </trans-unit>
        <trans-unit id="a5e416dc2da9d5eff4e49855727e16479b47d6e8" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.Array%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.Array%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="a66362906cf4418648a9a5554323ed383b8c8eea" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.Array%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.Array%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e297805d5d494bda3a0385ad18c3569e75f14c7d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.BooleanArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.BooleanArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="4c007633067610794e36b0b3cc51865ca8352f19" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.BooleanArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.BooleanArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ef7d2330d71db6f764d35eea14e9ab73aac72b9c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.ByteArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.ByteArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="8b70a8c2ba34131364e28b2512d35483af00f19a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.ByteArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.ByteArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b2c1eabbbf7b712271d653fdcbd433c34590b4d2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.CharArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.CharArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="87b690a93b6a351a33df7161fb636a57f37c003d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.CharArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.CharArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9330d9da57aef0aed8c13aee6dc337fbeb829bff" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.DoubleArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.DoubleArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="6c4f88ba4389bfc9a900b68407e80b12b5ae9b02" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.DoubleArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.DoubleArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4839668bfa4ee00994900630081eeb5714f95752" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.FloatArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.FloatArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="0e047d5c3d28e4eb74b19b8706f2359f4a496d1c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.FloatArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.FloatArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="33490febae2a178f4655be7a154612da34a0c4a5" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.IntArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.IntArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="9d2ed5d24fc59700154e317864d8c0e6739505a7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.IntArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.IntArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b5f087deed2fca1a1e09b14c363914201ae8d71a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.LongArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.LongArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="256c8bdcf7db878fc6b6b13f96f3eeecab8e97a4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.LongArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.LongArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="999680793def1bf95ce65d25a967348c34b8ed9d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.ShortArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.ShortArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="343f876e9f1eb0b0c40cd9f7901fcfe6d86bd975" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.ShortArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.ShortArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2e96f00fc82613fc72e45bd901e49fdbd42b006e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.String%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this string, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合は&lt;a href=&quot;get#kotlin.String%24get%28kotlin.Int%29%2Findex&quot;&gt;、インデックスが&lt;/a&gt;この文字列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionを&lt;/a&gt;動作が指定されていないKotlin / JSを除き。</target>
        </trans-unit>
        <trans-unit id="121146c1773ced51b85c510f0c9a740fcee4401a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.String%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this string, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.String%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの文字列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d9b4a8848b9c8e64b348afb59840b8348887cc19" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.UByteArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.UByteArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="c42b44be3aa2af1c6b520077f8536d89266d3575" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.UIntArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.UIntArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="9aa63b031868d224c7a7f44af55292bbb50b21f2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.ULongArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.ULongArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="5f0b48aa5778c165df7d576ad84fb99a045c6acc" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;get#kotlin.UShortArray%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;get#kotlin.UShortArray%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="3832840323d1968de06c86d1668de66bc5395923" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;on-enter#kotlin.io.FileTreeWalk%24onEnter%28kotlin.Function1%28%28java.io.File%2C+kotlin.Boolean%29%29%29%2Ffunction&quot;&gt;function&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt; the directory is not entered and neither it nor its files are visited.</source>
          <target state="translated">&lt;a href=&quot;on-enter#kotlin.io.FileTreeWalk%24onEnter%28kotlin.Function1%28%28java.io.File%2C+kotlin.Boolean%29%29%29%2Ffunction&quot;&gt;関数&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を返す場合、ディレクトリには入れず、ディレクトリもファイルも訪問しません。</target>
        </trans-unit>
        <trans-unit id="0a2285dd49856fe4825e17e694cf3fa18696091c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map already has a value corresponding to the key of some group, that value is used as an initial value of the accumulator for that group and the first element of that group is also subjected to the &lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップは、すでにいくつかのグループのキーに対応する値を有し、その値は、そのグループのためのアキュムレータの初期値として使用され、そのグループの最初の要素は、に供される&lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c1cf29eaa37e1a848f362e9496c70a7361cc3c0" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="b4795422de28a107d2b93ad77a19fea520c69382" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.Array%24set%28kotlin.Int%2C+kotlin.Array.T%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ad0c6c091ccda18739aa6f3577cd89dd09841078" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="835319d043a0f65a5eee60807011570250691591" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.BooleanArray%24set%28kotlin.Int%2C+kotlin.Boolean%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="527f471fdf4e268be1d4b9f1ebfd516bc71f229b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="42963185cae43f2e758e143f41ae72d95b5c4100" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.ByteArray%24set%28kotlin.Int%2C+kotlin.Byte%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c8618ed56cd06c8c291f923aab1b1a054f5002b8" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="16b81d70965f40eb90b072a5e9edb009e7b41db0" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.CharArray%24set%28kotlin.Int%2C+kotlin.Char%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="684c4e170a424d705f9e13c5cda4d575a1e09f13" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="f733c2a99de30ff7689107b0fce91469fa4b4623" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.DoubleArray%24set%28kotlin.Int%2C+kotlin.Double%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="09664e73fde927f6d22f3ea9f4070e59236e924f" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="dde11a436e59034272f619d39049718d3c4685e2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.FloatArray%24set%28kotlin.Int%2C+kotlin.Float%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1000d31cc93809459dc4dbcc455954d9ddc757d2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="ab2984691cfff299ebe407e2aee780db1db59dff" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.IntArray%24set%28kotlin.Int%2C+kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f173e322ccd56addf649214d8ae7803d5dfa5b94" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="f409e29966bb054dfd47826d8dd2e870d206d24a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.LongArray%24set%28kotlin.Int%2C+kotlin.Long%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7a8044147072cea61ae2e90888654fdcbbe920ee" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="382bd7e3336be8af1102464e37fa8b63b568ca7c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set#kotlin.ShortArray%24set%28kotlin.Int%2C+kotlin.Short%29%2Findex&quot;&gt;インデックス&lt;/a&gt;がこの配列の範囲外の場合、&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsExceptionをスローし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bb1e18b251850707f84797db758d97e17b714305" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.UByteArray%24set%28kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.UByteArray%24set%28kotlin.Int%2C+kotlin.UByte%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="2b01aefe6d05f741cac19ebae49684d8f27b7c15" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.UIntArray%24set%28kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.UIntArray%24set%28kotlin.Int%2C+kotlin.UInt%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="e0298f72be4df89660cb3cbfa8ca0b544a87436d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.ULongArray%24set%28kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.ULongArray%24set%28kotlin.Int%2C+kotlin.ULong%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="c204bddc743f17a6a83f3273732caa9abcce98a1" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;set#kotlin.UShortArray%24set%28kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;index&lt;/a&gt; is out of bounds of this array, throws an &lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;IndexOutOfBoundsException&lt;/a&gt; except in Kotlin/JS where the behavior is unspecified.</source>
          <target state="translated">場合&lt;a href=&quot;set#kotlin.UShortArray%24set%28kotlin.Int%2C+kotlin.UShort%29%2Findex&quot;&gt;インデックスが&lt;/a&gt;この配列の範囲外である、スロー&lt;a href=&quot;../-index-out-of-bounds-exception/index#kotlin.IndexOutOfBoundsException&quot;&gt;はIndexOutOfBoundsExceptionの&lt;/a&gt;動作が指定されていないKotlin / JSを除い。</target>
        </trans-unit>
        <trans-unit id="fd0d3eb59459a0737a168b08758efee370cf55de" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; returns the special &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d#kotlin.coroutines.experimental.intrinsics%24COROUTINE_SUSPENDED&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; value, it means that suspend function did suspend the execution and will not return any result immediately. In this case, the &lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/index&quot;&gt;Continuation&lt;/a&gt; provided to the &lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; shall be invoked at some moment in the future when the result becomes available to resume the computation.</source>
          <target state="translated">&lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;が特別な&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d#kotlin.coroutines.experimental.intrinsics%24COROUTINE_SUSPENDED&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt;値を返す場合は、suspend関数が実行を一時停止し、すぐには結果を返さないことを意味します。この場合、&lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックに&lt;/a&gt;提供された&lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/index&quot;&gt;Continuation&lt;/a&gt;は、結果が計算を再開するために利用可能になる将来のある時点で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="05d3b99631a5ed6456bedf676a61766834d5fac4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; returns the special &lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt; value, it means that suspend function did suspend the execution and will not return any result immediately. In this case, the &lt;a href=&quot;../kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt; provided to the &lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; shall be resumed by invoking &lt;a href=&quot;../kotlin.coroutines/-continuation/resume-with&quot;&gt;Continuation.resumeWith&lt;/a&gt; at some moment in the future when the result becomes available to resume the computation.</source>
          <target state="translated">&lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;が特別な&lt;a href=&quot;-c-o-r-o-u-t-i-n-e_-s-u-s-p-e-n-d-e-d&quot;&gt;COROUTINE_SUSPENDED&lt;/a&gt;値を返す場合は、suspend関数が実行を一時停止し、すぐには結果を返さないことを意味します。この場合、&lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックに&lt;/a&gt;提供された&lt;a href=&quot;../kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;は、計算を再開するために結果が利用可能になる将来のある時点で&lt;a href=&quot;../kotlin.coroutines/-continuation/resume-with&quot;&gt;Continuation.resumeWith&lt;/a&gt;を呼び出すことによって再開されます。</target>
        </trans-unit>
        <trans-unit id="8c3e8a5ebbcd7a703e634eecad27bcd0557ad20c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;until#kotlin.ranges%24until%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value is less than or equal to &lt;code&gt;this&lt;/code&gt; value, then the returned range is empty.</source>
          <target state="translated">場合&lt;a href=&quot;until#kotlin.ranges%24until%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;の&lt;/a&gt;値よりも小さいか等しい &lt;code&gt;this&lt;/code&gt; 値は、返される範囲は空です。</target>
        </trans-unit>
        <trans-unit id="5345ec6188f99db607179fac5ae96cec3bb7c52f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;@Nonnull(when = ...)&lt;/code&gt; value is &lt;code&gt;When.ALWAYS&lt;/code&gt;, the annotated type is treated as non-null; &lt;code&gt;When.MAYBE&lt;/code&gt; and &lt;code&gt;When.NEVER&lt;/code&gt; denote a nullable type; and &lt;code&gt;When.UNKNOWN&lt;/code&gt; forces the type to be &lt;a href=&quot;#null-safety-and-platform-types&quot;&gt;platform one&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;@Nonnull(when = ...)&lt;/code&gt; 値である &lt;code&gt;When.ALWAYS&lt;/code&gt; 、注釈付きタイプは、非ヌルとして扱われます。 &lt;code&gt;When.MAYBE&lt;/code&gt; および &lt;code&gt;When.NEVER&lt;/code&gt; はnull許容型を示します。そして &lt;code&gt;When.UNKNOWN&lt;/code&gt; するタイプを強制的に&lt;a href=&quot;#null-safety-and-platform-types&quot;&gt;プラットフォーム1&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ab41cb28f87df4bf85af33067d923e82cb67834" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;value&lt;/code&gt; argument in Java has an array type, it becomes a &lt;code&gt;vararg&lt;/code&gt; parameter in Kotlin:</source>
          <target state="translated">Java の &lt;code&gt;value&lt;/code&gt; 引数が配列型の場合、それはKotlinの &lt;code&gt;vararg&lt;/code&gt; パラメータになります。</target>
        </trans-unit>
        <trans-unit id="c6ef38c717fdd1e4d50094959ff3c7a5a376b3eb" translate="yes" xml:space="preserve">
          <source>If the Java class has multiple methods taking functional interfaces, you can choose the one you need to call by using an adapter function that converts a lambda to a specific SAM type. Those adapter functions are also generated by the compiler when needed:</source>
          <target state="translated">Java クラスが機能インタフェースを取る複数のメソッドを持っている場合、ラムダを特定の SAM 型に変換するアダプタ関数を使用して、呼び出す必要のあるものを選択することができます。これらのアダプタ関数は必要に応じてコンパイラによって生成されます。</target>
        </trans-unit>
        <trans-unit id="ced4c8b1c0812e2f37b8f765b9bf671545680b65" translate="yes" xml:space="preserve">
          <source>If the array contains multiple elements equal to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;, there is no guarantee which one will be found.</source>
          <target state="translated">配列に指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;と等しい複数の要素が含まれている場合、どの要素が見つかるかは保証されません。</target>
        </trans-unit>
        <trans-unit id="6466c3976ded360fb3b54d0482a0da85fa3ffd46" translate="yes" xml:space="preserve">
          <source>If the array contains multiple elements equal to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;, there is no guarantee which one will be found.</source>
          <target state="translated">配列に指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;と等しい複数の要素が含まれている場合、どの要素が見つかるかは保証されません。</target>
        </trans-unit>
        <trans-unit id="fa8581b13c8fdd01f13e98c50d4e7d29550396fc" translate="yes" xml:space="preserve">
          <source>If the behavior for a certain platform needs to be modified, you can use a format like &lt;code&gt;compilerOpts.osx&lt;/code&gt; or &lt;code&gt;compilerOpts.linux&lt;/code&gt; to provide platform-specific values to the options.</source>
          <target state="translated">特定のプラットフォームの動作を変更する必要がある場合は、 &lt;code&gt;compilerOpts.osx&lt;/code&gt; や &lt;code&gt;compilerOpts.linux&lt;/code&gt; のような形式を使用して、プラットフォーム固有の値をオプションに提供できます。</target>
        </trans-unit>
        <trans-unit id="996cca3563bf26540aaf4288dff8af8f84e60dcc" translate="yes" xml:space="preserve">
          <source>If the callback doesn't run in the main thread, it is mandatory to init the &lt;em&gt;Kotlin/Native&lt;/em&gt; runtime by calling &lt;code&gt;kotlin.native.initRuntimeIfNeeded()&lt;/code&gt;.</source>
          <target state="translated">コールバックがメインスレッドで実行されない場合は、 &lt;code&gt;kotlin.native.initRuntimeIfNeeded()&lt;/code&gt; を呼び出して&lt;em&gt;Kotlin / Native&lt;/em&gt;ランタイムを初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="71e01fbddfaf8e865fcef95f03a855f99eabb469" translate="yes" xml:space="preserve">
          <source>If the class (or any of its superclasses) is annotated with &lt;code&gt;com.my.Annotation&lt;/code&gt;, the class itself and all its members will become open.</source>
          <target state="translated">クラス（またはそのスーパークラス）に &lt;code&gt;com.my.Annotation&lt;/code&gt; で注釈が付けられている場合、クラス自体とそのすべてのメンバーが開かれます。</target>
        </trans-unit>
        <trans-unit id="1d6fb5abda1df282cf7b793af04d339e6c8b07ca" translate="yes" xml:space="preserve">
          <source>If the class has a primary constructor, each secondary constructor needs to delegate to the primary constructor, either directly or indirectly through another secondary constructor(s). Delegation to another constructor of the same class is done using the &lt;em&gt;this&lt;/em&gt; keyword:</source>
          <target state="translated">クラスにプライマリコンストラクターがある場合、各セカンダリコンストラクターは、直接または別のセカンダリコンストラクターを介して間接的にプライマリコンストラクターに委任する必要があります。同じクラスの別のコンストラクターへの委任は、&lt;em&gt;this&lt;/em&gt;キーワードを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="1becbc997c1b9834ca68a14f7454678bc5ce31a3" translate="yes" xml:space="preserve">
          <source>If the classes represent &lt;a href=&quot;../../kotlin/-array/index#kotlin.Array&quot;&gt;Array&lt;/a&gt;, then &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;Class&lt;/a&gt; objects of their element types are equal.</source>
          <target state="translated">クラスが表す場合は&lt;a href=&quot;../../kotlin/-array/index#kotlin.Array&quot;&gt;配列を&lt;/a&gt;、その&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;クラスは、&lt;/a&gt;その要素の型が等しいのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="944291945314272d9d50e4311dd336ba21bad448" translate="yes" xml:space="preserve">
          <source>If the classes represent Array, then Class objects of their element types are equal.</source>
          <target state="translated">クラスがArrayを表している場合、その要素型のClassオブジェクトは等しくなります。</target>
        </trans-unit>
        <trans-unit id="79031f7fd8baac9875032a654d3a81aa8ce76daf" translate="yes" xml:space="preserve">
          <source>If the code block contains a single function with &lt;code&gt;it&lt;/code&gt; as an argument, you can use the method reference (&lt;code&gt;::&lt;/code&gt;) instead of the lambda:</source>
          <target state="translated">コードブロックが持つ単一の機能が含まれている場合 &lt;code&gt;it&lt;/code&gt; 引数として、あなたはメソッド参照（使用することができます &lt;code&gt;::&lt;/code&gt; を代わりにラムダの）：</target>
        </trans-unit>
        <trans-unit id="d97d691977b15199380af830d5ad236bbf75524c" translate="yes" xml:space="preserve">
          <source>If the collection could be huge, you can specify a non-negative value of &lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;, in which case only the first &lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt; elements will be appended, followed by the &lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;truncated&lt;/a&gt; string (which defaults to &quot;...&quot;).</source>
          <target state="translated">コレクションが膨大になる可能性がある場合は、負でない値の&lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limitを&lt;/a&gt;指定できます。この場合、最初の&lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;要素のみが追加され、その後に&lt;a href=&quot;join-to#kotlin.collections%24joinTo%28kotlin.Array%28%28kotlin.collections.joinTo.T%29%29%2C+kotlin.collections.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;切り捨てられた&lt;/a&gt;文字列が続きます（デフォルトは &quot;...&quot;）。</target>
        </trans-unit>
        <trans-unit id="8f5b1dc0c41182773d56507020b349e5e7ed653a" translate="yes" xml:space="preserve">
          <source>If the collection could be huge, you can specify a non-negative value of &lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;, in which case only the first &lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt; elements will be appended, followed by the &lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;truncated&lt;/a&gt; string (which defaults to &quot;...&quot;).</source>
          <target state="translated">コレクションが膨大になる可能性がある場合は、負でない値の&lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limitを&lt;/a&gt;指定できます。この場合、最初の&lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;要素のみが追加され、その後に&lt;a href=&quot;join-to#kotlin.sequences%24joinTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinTo.T%29%29%2C+kotlin.sequences.joinTo.A%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinTo.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;切り捨てられた&lt;/a&gt;文字列が続きます（デフォルトは &quot;...&quot;）。</target>
        </trans-unit>
        <trans-unit id="9cb18d53f708d0c262ed97ec04392d87077ad40e" translate="yes" xml:space="preserve">
          <source>If the collection could be huge, you can specify a non-negative value of &lt;a href=&quot;join-to-string#kotlin.collections%24joinToString%28kotlin.Array%28%28kotlin.collections.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;, in which case only the first &lt;a href=&quot;join-to-string#kotlin.collections%24joinToString%28kotlin.Array%28%28kotlin.collections.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt; elements will be appended, followed by the &lt;a href=&quot;join-to-string#kotlin.collections%24joinToString%28kotlin.Array%28%28kotlin.collections.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;truncated&lt;/a&gt; string (which defaults to &quot;...&quot;).</source>
          <target state="translated">コレクションが膨大になる可能性がある場合は、負でない値の&lt;a href=&quot;join-to-string#kotlin.collections%24joinToString%28kotlin.Array%28%28kotlin.collections.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limitを&lt;/a&gt;指定できます。この場合、最初の&lt;a href=&quot;join-to-string#kotlin.collections%24joinToString%28kotlin.Array%28%28kotlin.collections.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;要素のみが追加され、その後に&lt;a href=&quot;join-to-string#kotlin.collections%24joinToString%28kotlin.Array%28%28kotlin.collections.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.collections.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;切り捨てられた&lt;/a&gt;文字列が続きます（デフォルトは &quot;...&quot;）。</target>
        </trans-unit>
        <trans-unit id="bbf01993f693a43b2b5c8b4e4105a26cb7dc269a" translate="yes" xml:space="preserve">
          <source>If the collection could be huge, you can specify a non-negative value of &lt;a href=&quot;join-to-string#kotlin.sequences%24joinToString%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;, in which case only the first &lt;a href=&quot;join-to-string#kotlin.sequences%24joinToString%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt; elements will be appended, followed by the &lt;a href=&quot;join-to-string#kotlin.sequences%24joinToString%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;truncated&lt;/a&gt; string (which defaults to &quot;...&quot;).</source>
          <target state="translated">コレクションが膨大になる可能性がある場合は、負でない値の&lt;a href=&quot;join-to-string#kotlin.sequences%24joinToString%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limitを&lt;/a&gt;指定できます。この場合、最初の&lt;a href=&quot;join-to-string#kotlin.sequences%24joinToString%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Flimit&quot;&gt;limit&lt;/a&gt;要素のみが追加され、その後に&lt;a href=&quot;join-to-string#kotlin.sequences%24joinToString%28kotlin.sequences.Sequence%28%28kotlin.sequences.joinToString.T%29%29%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.sequences.joinToString.T%2C+kotlin.CharSequence%29%29%29%2Ftruncated&quot;&gt;切り捨てられた&lt;/a&gt;文字列が続きます（デフォルトは &quot;...&quot;）。</target>
        </trans-unit>
        <trans-unit id="da05b4ffa7db8223c058fb5dd70605340f6d4abf" translate="yes" xml:space="preserve">
          <source>If the compiler can figure the signature out itself, it is allowed not to declare the only parameter and omit &lt;code&gt;-&amp;gt;&lt;/code&gt;. The parameter will be implicitly declared under the name &lt;code&gt;it&lt;/code&gt;:</source>
          <target state="translated">コンパイラがシグネチャ自体を把握できる場合、唯一のパラメータを宣言せずに &lt;code&gt;-&amp;gt;&lt;/code&gt; を省略できます。パラメータは、 &lt;code&gt;it&lt;/code&gt; という名前で暗黙的に宣言されます。</target>
        </trans-unit>
        <trans-unit id="599643b28c2249744c642d762df9eef25c3f1489" translate="yes" xml:space="preserve">
          <source>If the condition of an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;when&lt;/code&gt; statement is multiline, always use curly braces around the body of the statement. Indent each subsequent line of the condition by 4 spaces relative to statement begin. Put the closing parentheses of the condition together with the opening curly brace on a separate line:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; または &lt;code&gt;when&lt;/code&gt; ステートメントの条件が複数行の場合は、常にステートメントの本文を中括弧で囲みます。条件の後続の各行を、ステートメント開始から4つのスペースでインデントします。条件の閉じ括弧を開始中括弧と一緒に別の行に置きます。</target>
        </trans-unit>
        <trans-unit id="2257c88010b27895c6524d9c1e2196bb7e536709" translate="yes" xml:space="preserve">
          <source>If the constructor has annotations or visibility modifiers, the &lt;em&gt;constructor&lt;/em&gt; keyword is required, and the modifiers go before it:</source>
          <target state="translated">コンストラクターに注釈または可視性修飾子がある場合、コンストラク&lt;em&gt;ター&lt;/em&gt;キーワードは必須であり、修飾子はその前に配置されます。</target>
        </trans-unit>
        <trans-unit id="8e6824b3ec6e98e5575247ecc8ff5b7a4046e476" translate="yes" xml:space="preserve">
          <source>If the corresponding binary function (i.e. &lt;code&gt;plus()&lt;/code&gt; for &lt;code&gt;plusAssign()&lt;/code&gt;) is available too, report error (ambiguity),</source>
          <target state="translated">もし対応するバイナリ機能（すなわち &lt;code&gt;plus()&lt;/code&gt; のための &lt;code&gt;plusAssign()&lt;/code&gt; ）エラー報告（曖昧）、あまりにも利用可能です、</target>
        </trans-unit>
        <trans-unit id="3beb3ca0f76030c28cffd99a1ef390c7748ebe7c" translate="yes" xml:space="preserve">
          <source>If the derived class has a primary constructor, the base class can (and must) be initialized right there, using the parameters of the primary constructor.</source>
          <target state="translated">派生クラスに一次コンストラクタがある場合、基底クラスはその場で一次コンストラクタのパラメータを使用して初期化することができます (そして、初期化しなければなりません)。</target>
        </trans-unit>
        <trans-unit id="81ea87c7c846a5bc82b765d82616bbeeb4342e98" translate="yes" xml:space="preserve">
          <source>If the derived class has no primary constructor, then each secondary constructor has to initialize the base type using the &lt;em&gt;super&lt;/em&gt; keyword, or to delegate to another constructor which does that. Note that in this case different secondary constructors can call different constructors of the base type:</source>
          <target state="translated">派生クラスにプライマリコンストラクタがない場合、各セカンダリコンストラクタは、&lt;em&gt;super&lt;/em&gt;キーワードを使用して基本型を初期化するか、それを行う別のコンストラクタに委任する必要があります。この場合、異なるセカンダリコンストラクターが基本型の異なるコンストラクターを呼び出すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4f83e9cb6ca713b30ca5975229637ad37ddf0b2e" translate="yes" xml:space="preserve">
          <source>If the expression to the left of &lt;code&gt;?:&lt;/code&gt; is not null, the elvis operator returns it, otherwise it returns the expression to the right. Note that the right-hand side expression is evaluated only if the left-hand side is null.</source>
          <target state="translated">&lt;code&gt;?:&lt;/code&gt; の左側の式がnullでない場合、elvis演算子はそれを返します。それ以外の場合は、右側の式を返します。右側の式は、左側がnullの場合にのみ評価されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="435bd7ef9c1ca0e75781f37812da8cdd0434ce4a" translate="yes" xml:space="preserve">
          <source>If the file path given is just a file, walker iterates only it. If the file path given does not exist, walker iterates nothing, i.e. it's equivalent to an empty sequence.</source>
          <target state="translated">与えられたファイルパスが単なるファイルであれば、walkerはそのファイルのみを処理します。与えられたファイルパスが存在しない場合、walkerは何も処理しません。</target>
        </trans-unit>
        <trans-unit id="341f4361aea5609d460e0b76db7e4ec05c60a0bb" translate="yes" xml:space="preserve">
          <source>If the function from the right column is available</source>
          <target state="translated">右側の列からの関数が利用できる場合</target>
        </trans-unit>
        <trans-unit id="baaa08a62689c9d8bfb298957d5ecaaa332cecf1" translate="yes" xml:space="preserve">
          <source>If the function has an expression body that doesn't fit in the same line as the declaration, put the &lt;code&gt;=&lt;/code&gt; sign on the first line. Indent the expression body by 4 spaces.</source>
          <target state="translated">関数の式本体が宣言と同じ行に収まらない場合は、最初の行に &lt;code&gt;=&lt;/code&gt; 記号を付けます。式の本文を4つのスペースでインデントします。</target>
        </trans-unit>
        <trans-unit id="29229e1e579d9295bd8f3ae80b55b98deb32a290" translate="yes" xml:space="preserve">
          <source>If the function is absent or ambiguous, it is a compilation error;</source>
          <target state="translated">関数が存在しないか曖昧な場合はコンパイルエラーです。</target>
        </trans-unit>
        <trans-unit id="6df6274a785959a141d5be93cbbade7433fe3f26" translate="yes" xml:space="preserve">
          <source>If the function is present and its return type is &lt;code&gt;R&lt;/code&gt;, the expression &lt;code&gt;+a&lt;/code&gt; has type &lt;code&gt;R&lt;/code&gt;;</source>
          <target state="translated">関数が存在し、その戻り型が &lt;code&gt;R&lt;/code&gt; の場合、式 &lt;code&gt;+a&lt;/code&gt; の型は &lt;code&gt;R&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="0e5095d3d7b34d609b680d7fa5506874cf55c9e5" translate="yes" xml:space="preserve">
          <source>If the function signature doesn't fit on a single line, use the following syntax:</source>
          <target state="translated">関数のシグネチャが一行に収まらない場合は、以下の構文を使用します。</target>
        </trans-unit>
        <trans-unit id="da5a14c8b54552ea732a4d4e6142a3943b4cd96d" translate="yes" xml:space="preserve">
          <source>If the group in the regular expression is optional and there were no match captured by that group, corresponding component value is an empty string.</source>
          <target state="translated">正規表現内のグループがオプションであり、そのグループによって捕捉された一致がなかった場合、対応するコンポーネントの値は空文字列となります。</target>
        </trans-unit>
        <trans-unit id="d430ff9c1ba01bf9a8c783998530df052f55721e" translate="yes" xml:space="preserve">
          <source>If the group in the regular expression is optional and there were no match captured by that group, corresponding item in &lt;a href=&quot;group-values&quot;&gt;groupValues&lt;/a&gt; is an empty string.</source>
          <target state="translated">正規表現のグループがオプションであり、そのグループによってキャプチャされた一致がなかった場合、&lt;a href=&quot;group-values&quot;&gt;groupValuesの&lt;/a&gt;対応する項目は空の文字列です。</target>
        </trans-unit>
        <trans-unit id="643fa02b9a8df93d52958425162d28c0e98f33e6" translate="yes" xml:space="preserve">
          <source>If the initialization of a value throws an exception, it will attempt to reinitialize the value at next access.</source>
          <target state="translated">値の初期化で例外が発生した場合、次回のアクセス時に値の再初期化を試みます。</target>
        </trans-unit>
        <trans-unit id="70f53db00bc0a33bccdcb28704c5331a818e66f8" translate="yes" xml:space="preserve">
          <source>If the innermost applied &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt; has &lt;code&gt;suppress=true&lt;/code&gt;, the type is generated without wildcards. If the innermost applied &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt; has &lt;code&gt;suppress=false&lt;/code&gt;, the type is generated with wildcards.</source>
          <target state="translated">最も内側に適用された &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt; に &lt;code&gt;suppress=true&lt;/code&gt; がある場合、タイプはワイルドカードなしで生成されます。最も内側に適用された &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt; に &lt;code&gt;suppress=false&lt;/code&gt; がある場合、タイプはワイルドカードを使用して生成されます。</target>
        </trans-unit>
        <trans-unit id="eee51b4527104383bc254754abf4668fd83fd300" translate="yes" xml:space="preserve">
          <source>If the lambda is the only argument to that call, the parentheses can be omitted entirely:</source>
          <target state="translated">ラムダがその呼び出しの唯一の引数である場合、括弧は完全に省略することができます。</target>
        </trans-unit>
        <trans-unit id="1de53ed9727d06b3c7bd0607d6d4643e9b89c9f3" translate="yes" xml:space="preserve">
          <source>If the lambda parameter is unused, you can place an underscore instead of its name:</source>
          <target state="translated">lambda パラメータが使用されていない場合は、その名前の代わりにアンダースコアを置くことができます。</target>
        </trans-unit>
        <trans-unit id="a9c6142f7e98803bfddded146b81383e4a0f40e4" translate="yes" xml:space="preserve">
          <source>If the last argument after default parameters is a &lt;a href=&quot;lambdas#lambda-expression-syntax&quot;&gt;lambda&lt;/a&gt;, it can be passed in either as a named argument or &lt;a href=&quot;lambdas#passing-a-lambda-to-the-last-parameter&quot;&gt;outside the parentheses&lt;/a&gt;:</source>
          <target state="translated">デフォルトのパラメータの後の最後の引数が&lt;a href=&quot;lambdas#lambda-expression-syntax&quot;&gt;lambdaの&lt;/a&gt;場合、名前付き引数として、または&lt;a href=&quot;lambdas#passing-a-lambda-to-the-last-parameter&quot;&gt;括弧の外&lt;/a&gt;で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bc94874fad8d6a3f9e943d1975b7337b73e5e96a" translate="yes" xml:space="preserve">
          <source>If the list contains multiple elements equal to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;, there is no guarantee which one will be found.</source>
          <target state="translated">リストに指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;と等しい複数の要素が含まれている場合、どの要素が見つかるかは保証されません。</target>
        </trans-unit>
        <trans-unit id="283094cd40b3e90a305fdcb2b91ad3b0c2c41453" translate="yes" xml:space="preserve">
          <source>If the list contains multiple elements equal to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;, there is no guarantee which one will be found.</source>
          <target state="translated">リストに指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Int%2C+kotlin.Int%29%2Felement&quot;&gt;element&lt;/a&gt;と等しい複数の要素が含まれている場合、どの要素が見つかるかは保証されません。</target>
        </trans-unit>
        <trans-unit id="79a654f17dffc6680bd32da28acb61ad45511a3b" translate="yes" xml:space="preserve">
          <source>If the list contains multiple elements for which &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;comparison&lt;/a&gt; returns zero, there is no guarantee which one will be found.</source>
          <target state="translated">リストに&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearch.T%2C+kotlin.Int%29%29%29%2Fcomparison&quot;&gt;比較で&lt;/a&gt;ゼロが返される複数の要素が含まれている場合、どの要素が見つかるかは保証されません。</target>
        </trans-unit>
        <trans-unit id="3c27e8d39625b1f210692fb3e472e2e70d219112" translate="yes" xml:space="preserve">
          <source>If the list contains multiple elements with the specified &lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;key&lt;/a&gt;, there is no guarantee which one will be found.</source>
          <target state="translated">リストに指定された&lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;キーを&lt;/a&gt;持つ複数の要素が含まれている場合、どの要素が見つかるかは保証されません。</target>
        </trans-unit>
        <trans-unit id="faaba4525f66a7ceffb2e5046c2260e6c103509f" translate="yes" xml:space="preserve">
          <source>If the list size is less than the specified index, an exception is thrown. There are two other functions that help you avoid such exceptions:</source>
          <target state="translated">リストのサイズが指定したインデックスよりも小さい場合は例外がスローされます。このような例外を回避するのに役立つ関数が他に2つあります。</target>
        </trans-unit>
        <trans-unit id="eb9933a4cb9e8666aba0e0d81ce03883cc01e6a2" translate="yes" xml:space="preserve">
          <source>If the map was created by &lt;a href=&quot;with-default&quot;&gt;withDefault&lt;/a&gt;, resorts to its &lt;code&gt;defaultValue&lt;/code&gt; provider function instead of throwing an exception.</source>
          <target state="translated">マップが&lt;a href=&quot;with-default&quot;&gt;withDefault&lt;/a&gt;によって作成された場合、例外をスローする代わりに、その &lt;code&gt;defaultValue&lt;/code&gt; プロバイダー関数を使用します。</target>
        </trans-unit>
        <trans-unit id="c1f1e713ff8c23832b76dce0f833606cef70aca6" translate="yes" xml:space="preserve">
          <source>If the name of the property starts with &lt;code&gt;is&lt;/code&gt;, a different name mapping rule is used: the name of the getter will be the same as the property name, and the name of the setter will be obtained by replacing &lt;code&gt;is&lt;/code&gt; with &lt;code&gt;set&lt;/code&gt;. For example, for a property &lt;code&gt;isOpen&lt;/code&gt;, the getter will be called &lt;code&gt;isOpen()&lt;/code&gt; and the setter will be called &lt;code&gt;setOpen()&lt;/code&gt;. This rule applies for properties of any type, not just &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">プロパティの名前が &lt;code&gt;is&lt;/code&gt; で始まる場合、別の名前マッピングルールが使用されます。ゲッターの名前はプロパティ名と同じになり、セッターの名前は &lt;code&gt;is&lt;/code&gt; を &lt;code&gt;set&lt;/code&gt; に置き換えることで取得されます。たとえば、プロパティ &lt;code&gt;isOpen&lt;/code&gt; の場合、ゲッターは &lt;code&gt;isOpen()&lt;/code&gt; と呼ばれ、セッターは &lt;code&gt;setOpen()&lt;/code&gt; と呼ばれます。このルールは、 &lt;code&gt;Boolean&lt;/code&gt; 型だけでなく、あらゆるタイプのプロパティに適用されます。</target>
        </trans-unit>
        <trans-unit id="3332fa3bdec15301400b043f38b9641d591bc5f4" translate="yes" xml:space="preserve">
          <source>If the object is an instance of a functional Java interface (i.e. a Java interface with a single abstract method), you can create it using a lambda expression prefixed with the type of the interface:</source>
          <target state="translated">オブジェクトが機能的な Java インターフェース(つまり、単一の抽象メソッドを持つ Java インターフェース)のインスタンスである場合は、インターフェースの型を先頭にしたラムダ式を使用して作成することができます。</target>
        </trans-unit>
        <trans-unit id="079d14d9fa4b11b9fed1da4e6938934fb59ac4b3" translate="yes" xml:space="preserve">
          <source>If the original list is mutable, all its changes reflect in its reversed views and vice versa.</source>
          <target state="translated">元のリストが突然変異可能な場合、その変更はすべて反転表示に反映され、その逆もまた然りです。</target>
        </trans-unit>
        <trans-unit id="f199eb80255475df9da84da09551f8bd23017106" translate="yes" xml:space="preserve">
          <source>If the package is not specified, the contents of such a file belong to &quot;default&quot; package that has no name.</source>
          <target state="translated">パッケージが指定されていない場合、そのようなファイルの内容は、名前のない &quot;default &quot;パッケージに属します。</target>
        </trans-unit>
        <trans-unit id="e2bbcc7a5d6ec12b113958618724012f588f92a6" translate="yes" xml:space="preserve">
          <source>If the parameter list is too long to fit on a line, put the arrow on a separate line:</source>
          <target state="translated">パラメータリストが長すぎて一行に収まらない場合は、矢印を別の行に配置します。</target>
        </trans-unit>
        <trans-unit id="65d840640485aeb56113ca2dcd5f195cfe9368f9" translate="yes" xml:space="preserve">
          <source>If the parameters or return types of the members of a variant type are themselves variant, it gets a bit complicated. Function types in parameters and return types make it even more challenging. If you're wondering whether it's safe to use a variant type parameter &lt;code&gt;T&lt;/code&gt; in a particular position, ask yourself:</source>
          <target state="translated">バリアント型のメンバーのパラメーターまたは戻り値の型自体がバリアント型である場合、少し複雑になります。パラメータの型と戻り値の型は、さらに難しいものにします。特定の位置でバリアント型パラメーター &lt;code&gt;T&lt;/code&gt; を使用しても安全かどうか疑問に思っている場合は、次の点を確認してください。</target>
        </trans-unit>
        <trans-unit id="a18d633a4ebf37f8c95ff8f80627508e8e6e0a0d" translate="yes" xml:space="preserve">
          <source>If the primary constructor does not have any annotations or visibility modifiers, the &lt;em&gt;constructor&lt;/em&gt; keyword can be omitted:</source>
          <target state="translated">プライマリコンストラクターに注釈または可視性修飾子がない場合は、&lt;em&gt;コンストラクター&lt;/em&gt;キーワードを省略できます。</target>
        </trans-unit>
        <trans-unit id="47e17a53862f3b306373aab1293af010a48f2c36" translate="yes" xml:space="preserve">
          <source>If the same kind of ambiguity arises when a dependency is added to a custom configuration rather than one of the configurations created by the plugin, you can add the attributes to the configuration in the same way:</source>
          <target state="translated">プラグインが作成した設定のいずれかではなく、カスタム設定に依存関係を追加したときに同じような曖昧さが生じた場合は、同じように属性を設定に追加することができます。</target>
        </trans-unit>
        <trans-unit id="c2003e3c2a4c342bc0df488d2992403b24e0a68f" translate="yes" xml:space="preserve">
          <source>If the second-to-last line compiled, it would allow us to put a pear into what is ostensibly a bowl of only apples, and your code would explode when it tried to extract the &quot;apple&quot; from the bowl. However, it's frequently useful to be able to let the type hierarchy of a generic type parameter &quot;flow&quot; to the generic class. As we saw above, though, some care must be taken - the solution is to restrict the direction in which you can move data in and out of the generic object.</source>
          <target state="translated">2行目から最後の1行目がコンパイルされた場合、表向きはリンゴだけのボウルに梨を入れることができ、ボウルから &quot;リンゴ &quot;を抽出しようとしたときにコードが爆発することになります。しかし、汎用型パラメータの型階層を汎用クラスに「フロー」させることができると便利なことがよくあります。しかし、上で見たように、いくつかの注意を払わなければなりません-解決策は、ジェネリックオブジェクトにデータを出し入れする方向を制限することです。</target>
        </trans-unit>
        <trans-unit id="5e1d01b7eb886e9322c190422643ee87c94b9cb3" translate="yes" xml:space="preserve">
          <source>If the sequence operation returns another sequence, which is produced lazily, it's called &lt;em&gt;intermediate&lt;/em&gt;, and otherwise the operation is &lt;em&gt;terminal&lt;/em&gt;. Examples of terminal operations are &lt;a href=&quot;to-list&quot;&gt;kotlin.sequences.Sequence.toList&lt;/a&gt;, kotlin.sequences.Sequence.max.</source>
          <target state="translated">シーケンス操作が遅延生成される別のシーケンスを返す場合、それは&lt;em&gt;中間&lt;/em&gt;と呼ばれます。それ以外の場合、操作は&lt;em&gt;terminal&lt;/em&gt;です。端末の動作例は、&lt;a href=&quot;to-list&quot;&gt;kotlin.sequences.Sequence.toList&lt;/a&gt;、kotlin.sequences.Sequence.max。</target>
        </trans-unit>
        <trans-unit id="aea8a32a75a7deb90bc9b2784a7bca89130df6d4" translate="yes" xml:space="preserve">
          <source>If the supertype has a constructor, it must be invoked with parentheses after the supertype name. You can specify multiple supertypes if need be (but as usual, at most one superclass).</source>
          <target state="translated">スーパータイプにコンストラクタがある場合は、スーパータイプ名の後に括弧をつけて呼び出さなければなりません。必要に応じて複数のスーパータイプを指定することができます(ただし、通常通り、スーパークラスは最大1つです)。</target>
        </trans-unit>
        <trans-unit id="f754e813201e3d3c1d7a4229841ecfb54eadad53" translate="yes" xml:space="preserve">
          <source>If the target meta-annotation is not present on an annotation declaration, the annotation is applicable to the following elements: &lt;a href=&quot;../-annotation-target/-c-l-a-s-s#kotlin.annotation.AnnotationTarget.CLASS&quot;&gt;CLASS&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-p-r-o-p-e-r-t-y#kotlin.annotation.AnnotationTarget.PROPERTY&quot;&gt;PROPERTY&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-f-i-e-l-d#kotlin.annotation.AnnotationTarget.FIELD&quot;&gt;FIELD&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-l-o-c-a-l_-v-a-r-i-a-b-l-e#kotlin.annotation.AnnotationTarget.LOCAL_VARIABLE&quot;&gt;LOCAL_VARIABLE&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-v-a-l-u-e_-p-a-r-a-m-e-t-e-r#kotlin.annotation.AnnotationTarget.VALUE_PARAMETER&quot;&gt;VALUE_PARAMETER&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-c-o-n-s-t-r-u-c-t-o-r#kotlin.annotation.AnnotationTarget.CONSTRUCTOR&quot;&gt;CONSTRUCTOR&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-f-u-n-c-t-i-o-n#kotlin.annotation.AnnotationTarget.FUNCTION&quot;&gt;FUNCTION&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-p-r-o-p-e-r-t-y_-g-e-t-t-e-r#kotlin.annotation.AnnotationTarget.PROPERTY_GETTER&quot;&gt;PROPERTY_GETTER&lt;/a&gt;, &lt;a href=&quot;../-annotation-target/-p-r-o-p-e-r-t-y_-s-e-t-t-e-r#kotlin.annotation.AnnotationTarget.PROPERTY_SETTER&quot;&gt;PROPERTY_SETTER&lt;/a&gt;.</source>
          <target state="translated">ターゲットのメタ注釈が注釈宣言に存在しない場合、注釈は次の要素に適用できます：&lt;a href=&quot;../-annotation-target/-c-l-a-s-s#kotlin.annotation.AnnotationTarget.CLASS&quot;&gt;CLASS&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-p-r-o-p-e-r-t-y#kotlin.annotation.AnnotationTarget.PROPERTY&quot;&gt;PROPERTY&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-f-i-e-l-d#kotlin.annotation.AnnotationTarget.FIELD&quot;&gt;FIELD&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-l-o-c-a-l_-v-a-r-i-a-b-l-e#kotlin.annotation.AnnotationTarget.LOCAL_VARIABLE&quot;&gt;LOCAL_VARIABLE&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-v-a-l-u-e_-p-a-r-a-m-e-t-e-r#kotlin.annotation.AnnotationTarget.VALUE_PARAMETER&quot;&gt;VALUE_PARAMETER&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-c-o-n-s-t-r-u-c-t-o-r#kotlin.annotation.AnnotationTarget.CONSTRUCTOR&quot;&gt;CONSTRUCTOR&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-f-u-n-c-t-i-o-n#kotlin.annotation.AnnotationTarget.FUNCTION&quot;&gt;FUNCTION&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-p-r-o-p-e-r-t-y_-g-e-t-t-e-r#kotlin.annotation.AnnotationTarget.PROPERTY_GETTER&quot;&gt;PROPERTY_GETTER&lt;/a&gt;、&lt;a href=&quot;../-annotation-target/-p-r-o-p-e-r-t-y_-s-e-t-t-e-r#kotlin.annotation.AnnotationTarget.PROPERTY_SETTER&quot;&gt;PROPERTY_SETTER&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a35d20b281a1e85d8a06fc803c1646e572b36e8" translate="yes" xml:space="preserve">
          <source>If the transformation produces &lt;code&gt;null&lt;/code&gt; on certain elements, you can filter out the &lt;code&gt;null&lt;/code&gt;s from the result collection by calling the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-not-null&quot;&gt;&lt;code&gt;mapNotNull()&lt;/code&gt;&lt;/a&gt; function instead of &lt;code&gt;map()&lt;/code&gt;, or &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed-not-null&quot;&gt;&lt;code&gt;mapIndexedNotNull()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;mapIndexed()&lt;/code&gt;.</source>
          <target state="translated">変換が生じた場合 &lt;code&gt;null&lt;/code&gt; 特定の要素に、あなたは除外でき &lt;code&gt;null&lt;/code&gt; 呼び出すことにより、結果コレクションからSを&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-not-null&quot;&gt; &lt;code&gt;mapNotNull()&lt;/code&gt; &lt;/a&gt;の代わりに、機能 &lt;code&gt;map()&lt;/code&gt; 、または&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed-not-null&quot;&gt; &lt;code&gt;mapIndexedNotNull()&lt;/code&gt; &lt;/a&gt;の代わりに &lt;code&gt;mapIndexed()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9296b27a4d8120036a7decf816cb92c4373c8a8" translate="yes" xml:space="preserve">
          <source>If the type of the last parameter to a function is a function type and you want to supply a lambda expression, you can place the lambda expression &lt;em&gt;outside&lt;/em&gt; of the parameter parentheses. If the lambda expression is the only parameter, you can omit the parentheses entirely. This is very useful for &lt;a href=&quot;functional-programming#receivers&quot;&gt;constructing DSLs&lt;/a&gt;.</source>
          <target state="translated">関数の最後のパラメーターの型が関数型であり、ラムダ式を指定する場合は、パラメーターの括弧の&lt;em&gt;外側&lt;/em&gt;にラムダ式を配置できます。ラムダ式が唯一のパラメーターである場合は、括弧を完全に省略できます。これは&lt;a href=&quot;functional-programming#receivers&quot;&gt;DSL&lt;/a&gt;を構築するのに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d77bf30b739c2514d63ed87849b1332700a2c8b6" translate="yes" xml:space="preserve">
          <source>If the value has a receiver type, the receiver object should be passed as the first argument. Another way to invoke a value of a function type with receiver is to prepend it with the receiver object, as if the value were an &lt;a href=&quot;extensions&quot;&gt;extension function&lt;/a&gt;: &lt;code&gt;1.foo(2)&lt;/code&gt;,</source>
          <target state="translated">値にレシーバータイプがある場合、レシーバーオブジェクトを最初の引数として渡す必要があります。レシーバーで関数タイプの値を呼び出す別の方法は、値が&lt;a href=&quot;extensions&quot;&gt;拡張関数で&lt;/a&gt;あるかのように、レシーバーオブジェクトを付加することです： &lt;code&gt;1.foo(2)&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="ec8c7f7b7e4402c0d35a4121dd40caffc8d7c935" translate="yes" xml:space="preserve">
          <source>If the variable has no value for the current thread, it is first initialized to the value returned by an invocation of the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html#initialValue()&quot;&gt;ThreadLocal.initialValue&lt;/a&gt; method. Then if it is still &lt;code&gt;null&lt;/code&gt;, the provided &lt;a href=&quot;get-or-set#kotlin.concurrent%24getOrSet%28java.lang.ThreadLocal%28%28kotlin.concurrent.getOrSet.T%29%29%2C+kotlin.Function0%28%28kotlin.concurrent.getOrSet.T%29%29%29%2Fdefault&quot;&gt;default&lt;/a&gt; function is called and its result is stored for the current thread and then returned.</source>
          <target state="translated">変数に現在のスレッドの値がない場合は、最初に&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html#initialValue()&quot;&gt;ThreadLocal.initialValue&lt;/a&gt;メソッドの呼び出しによって返される値に初期化されます。次に、それが &lt;code&gt;null&lt;/code&gt; のままの場合、提供された&lt;a href=&quot;get-or-set#kotlin.concurrent%24getOrSet%28java.lang.ThreadLocal%28%28kotlin.concurrent.getOrSet.T%29%29%2C+kotlin.Function0%28%28kotlin.concurrent.getOrSet.T%29%29%29%2Fdefault&quot;&gt;デフォルト&lt;/a&gt;関数が呼び出され、その結果が現在のスレッドに格納されて返されます。</target>
        </trans-unit>
        <trans-unit id="dcc77a995f63cb6e01033f3a55686b845948a61a" translate="yes" xml:space="preserve">
          <source>If there are explicit implementations of &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; or &lt;code&gt;toString()&lt;/code&gt; in the data class body or &lt;em&gt;final&lt;/em&gt; implementations in a superclass, then these functions are not generated, and the existing implementations are used;</source>
          <target state="translated">&lt;code&gt;equals()&lt;/code&gt; 、 &lt;code&gt;hashCode()&lt;/code&gt; 、または &lt;code&gt;toString()&lt;/code&gt; の明示的な実装がデータクラス本体にある場合、またはスーパークラスの&lt;em&gt;最終&lt;/em&gt;実装がある場合、これらの関数は生成されず、既存の実装が使用されます。</target>
        </trans-unit>
        <trans-unit id="a22fd4a7c09aa2ff0cda3088cc25dcaf533edd1f" translate="yes" xml:space="preserve">
          <source>If there are no errors during compilation, we should see the result of the execution of our program, which on execution should output the contents of the site &lt;code&gt;http://example.com&lt;/code&gt;</source>
          <target state="translated">コンパイル中にエラーがなければ、プログラムの実行結果が表示されます。実行すると、サイト &lt;code&gt;http://example.com&lt;/code&gt; のコンテンツが出力されます。</target>
        </trans-unit>
        <trans-unit id="9edcba1fdea56091b72b70d9544284be2a9b118c" translate="yes" xml:space="preserve">
          <source>If there is a name clash, we can disambiguate by using &lt;em&gt;as&lt;/em&gt; keyword to locally rename the clashing entity:</source>
          <target state="translated">名前の競合がある場合は、キーワード&lt;em&gt;としてas&lt;/em&gt;を使用&lt;em&gt;し&lt;/em&gt;て競合するエンティティの名前をローカルで変更することにより、曖昧さをなくすことができます。</target>
        </trans-unit>
        <trans-unit id="b4b2b7e97af6db9e9aed9e5719f03ea30bf0227c" translate="yes" xml:space="preserve">
          <source>If there is a naming conflict, you should usually import just one of the symbols and fully qualify the usages of the other. If both are heavily used, you can rename the symbol at import time:</source>
          <target state="translated">命名の競合がある場合は、通常はどちらか一方のシンボルだけをインポートして、もう一方のシンボルの使用法を完全に確認する必要があります。両方が多用されている場合は、インポート時にシンボルの名前を変更することができます。</target>
        </trans-unit>
        <trans-unit id="a65b66d3772f31ab93bac26e3026245f1a24b319" translate="yes" xml:space="preserve">
          <source>If there's no nice way around it, and you need to take special actions based on what type something is or to access functions/properties that only exist on some classes, you can use &lt;code&gt;is&lt;/code&gt; to check if the real type of an object is a particular class or a subclass thereof (or an implementor of an interface). When this is used as the condition in an &lt;code&gt;if&lt;/code&gt;, the compiler will let you perform type-specific operations on the object inside the &lt;code&gt;if&lt;/code&gt; body:</source>
          <target state="translated">それを回避する良い方法がなく、何かが何かのタイプに基づいて特別なアクションを実行する必要がある場合、または一部のクラスにのみ存在する関数/プロパティにアクセスする必要がある場合 &lt;code&gt;is&lt;/code&gt; 、オブジェクトの実際のタイプが特定であるかどうかを確認することができますクラスまたはそのサブクラス（またはインターフェースのインプリメンター）。これを &lt;code&gt;if&lt;/code&gt; の条件として使用すると、コンパイラーは &lt;code&gt;if&lt;/code&gt; 本体内のオブジェクトに対して型固有の操作を実行できます。</target>
        </trans-unit>
        <trans-unit id="83d0b5382998741d7aeea7ea3925f51e48120ef6" translate="yes" xml:space="preserve">
          <source>If this char sequence ends with the given &lt;a href=&quot;../../kotlin.text/remove-suffix#kotlin.text%24removeSuffix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence with the suffix removed. Otherwise, returns a new char sequence with the same characters.</source>
          <target state="translated">この文字シーケンスが指定された&lt;a href=&quot;../../kotlin.text/remove-suffix#kotlin.text%24removeSuffix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;で終わる場合は、接尾辞を削除した新しい文字シーケンスを返します。それ以外の場合は、同じ文字を含む新しい文字シーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="1f68e5f9283a11982ac4d9ee4f72f23e35be2e15" translate="yes" xml:space="preserve">
          <source>If this char sequence ends with the given &lt;a href=&quot;../remove-suffix#kotlin.text%24removeSuffix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence with the suffix removed. Otherwise, returns a new char sequence with the same characters.</source>
          <target state="translated">この文字シーケンスが指定された&lt;a href=&quot;../remove-suffix#kotlin.text%24removeSuffix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;で終わる場合は、接尾辞を削除した新しい文字シーケンスを返します。それ以外の場合は、同じ文字を含む新しい文字シーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="f1d9aa147865687623fa05e3a2703d76d90d9924" translate="yes" xml:space="preserve">
          <source>If this char sequence ends with the given &lt;a href=&quot;remove-suffix#kotlin.text%24removeSuffix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence with the suffix removed. Otherwise, returns a new char sequence with the same characters.</source>
          <target state="translated">この文字シーケンスが指定された&lt;a href=&quot;remove-suffix#kotlin.text%24removeSuffix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;で終わる場合は、接尾辞を削除した新しい文字シーケンスを返します。それ以外の場合は、同じ文字を含む新しい文字シーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="393978ca2e4989e43b2a725707449d745979c2c2" translate="yes" xml:space="preserve">
          <source>If this char sequence starts with the given &lt;a href=&quot;../../kotlin.text/remove-prefix#kotlin.text%24removePrefix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;, returns a new char sequence with the prefix removed. Otherwise, returns a new char sequence with the same characters.</source>
          <target state="translated">この文字シーケンスが指定された&lt;a href=&quot;../../kotlin.text/remove-prefix#kotlin.text%24removePrefix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;で始まる場合、プレフィックスを削除した新しい文字シーケンスを返します。それ以外の場合は、同じ文字を含む新しい文字シーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="c4551b66808b7a93bcbea0cb98dbc6cf03713996" translate="yes" xml:space="preserve">
          <source>If this char sequence starts with the given &lt;a href=&quot;../remove-prefix#kotlin.text%24removePrefix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;, returns a new char sequence with the prefix removed. Otherwise, returns a new char sequence with the same characters.</source>
          <target state="translated">この文字シーケンスが指定された&lt;a href=&quot;../remove-prefix#kotlin.text%24removePrefix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;で始まる場合、プレフィックスを削除した新しい文字シーケンスを返します。それ以外の場合は、同じ文字を含む新しい文字シーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="e5eb3f5440c96a359b2e662128e4b4a2fe2e0c6d" translate="yes" xml:space="preserve">
          <source>If this char sequence starts with the given &lt;a href=&quot;remove-prefix#kotlin.text%24removePrefix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;, returns a new char sequence with the prefix removed. Otherwise, returns a new char sequence with the same characters.</source>
          <target state="translated">この文字シーケンスが指定された&lt;a href=&quot;remove-prefix#kotlin.text%24removePrefix%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;プレフィックス&lt;/a&gt;で始まる場合、プレフィックスを削除した新しい文字シーケンスを返します。それ以外の場合は、同じ文字を含む新しい文字シーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="e50b89219e8ed48483bbf130e9adaab263424db1" translate="yes" xml:space="preserve">
          <source>If this file is a directory, it is copied without its content, i.e. an empty &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;target&lt;/a&gt; directory is created. If you want to copy directory including its contents, use &lt;a href=&quot;copy-recursively&quot;&gt;copyRecursively&lt;/a&gt;.</source>
          <target state="translated">このファイルがディレクトリの場合、その内容なしでコピーされます。つまり、空の&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;ターゲット&lt;/a&gt;ディレクトリが作成されます。内容を含めてディレクトリをコピーする場合は、&lt;a href=&quot;copy-recursively&quot;&gt;copyRecursivelyを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="696bc35b6b7c9124fdae8a289c38873049e01372" translate="yes" xml:space="preserve">
          <source>If this file path points to a single file, then it will be copied to a file with the path &lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Ftarget&quot;&gt;target&lt;/a&gt;. If this file path points to a directory, then its children will be copied to a directory with the path &lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Ftarget&quot;&gt;target&lt;/a&gt;.</source>
          <target state="translated">このファイルパスが単一のファイルを指している場合は、パスが&lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Ftarget&quot;&gt;targetの&lt;/a&gt;ファイルにコピーされます。このファイルパスがディレクトリを指している場合、その子はパス&lt;a href=&quot;copy-recursively#kotlin.io%24copyRecursively%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Function2%28%28java.io.File%2C+java.io.IOException%2C+kotlin.io.OnErrorAction%29%29%29%2Ftarget&quot;&gt;target&lt;/a&gt;を持つディレクトリにコピーされます。</target>
        </trans-unit>
        <trans-unit id="822fa875865380bffd3780f735dc7821bbfbc1dd" translate="yes" xml:space="preserve">
          <source>If this function is invoked on other &lt;a href=&quot;../kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt; instances it returns &lt;code&gt;this&lt;/code&gt; continuation unchanged.</source>
          <target state="translated">この関数が他の&lt;a href=&quot;../kotlin.coroutines/-continuation/index&quot;&gt;継続&lt;/a&gt;インスタンスで呼び出された場合、 &lt;code&gt;this&lt;/code&gt; 継続を変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="000d49e516219b57649db3a4add8aedc933ac12a" translate="yes" xml:space="preserve">
          <source>If this is the first time you're adding a Kotlin file to this project, IntelliJ IDEA will prompt you to add the required Kotlin runtime. For a Java project, configure the Kotlin runtime as a &lt;strong&gt;Kotlin Java Module&lt;/strong&gt;.</source>
          <target state="translated">このプロジェクトにKotlinファイルを初めて追加する場合は、IntelliJ IDEAから必要なKotlinランタイムを追加するように求められます。Javaプロジェクトの場合、Kotlinランタイムを&lt;strong&gt;Kotlin Javaモジュール&lt;/strong&gt;として構成します。</target>
        </trans-unit>
        <trans-unit id="8ef8c14fd9985248743a7603b2080574686a18ae" translate="yes" xml:space="preserve">
          <source>If this reference is &lt;a href=&quot;../-c-pointer/index&quot;&gt;CPointer&lt;/a&gt;, returns this pointer, otherwise allocate storage value in the scope and return it.</source>
          <target state="translated">この参照が&lt;a href=&quot;../-c-pointer/index&quot;&gt;CPointerの&lt;/a&gt;場合、このポインターを返します。それ以外の場合は、スコープにストレージ値を割り当てて返します。</target>
        </trans-unit>
        <trans-unit id="b3b7f842b5ea81c3f4b90a34bcfe922201e07ced" translate="yes" xml:space="preserve">
          <source>If this reference is &lt;a href=&quot;index&quot;&gt;CPointer&lt;/a&gt;, returns this pointer, otherwise allocate storage value in the scope and return it.</source>
          <target state="translated">この参照が&lt;a href=&quot;index&quot;&gt;CPointerの&lt;/a&gt;場合、このポインターを返します。それ以外の場合は、スコープにストレージ値を割り当てて返します。</target>
        </trans-unit>
        <trans-unit id="daa765d4ed09a47719a46eaa22921d3d6383a5b1" translate="yes" xml:space="preserve">
          <source>If this string ends with the given &lt;a href=&quot;../../kotlin.text/remove-suffix#kotlin.text%24removeSuffix%28kotlin.String%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a copy of this string with the suffix removed. Otherwise, returns this string.</source>
          <target state="translated">この文字列が指定された&lt;a href=&quot;../../kotlin.text/remove-suffix#kotlin.text%24removeSuffix%28kotlin.String%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;で終わる場合、この文字列のコピーを、サフィックスを削除して返します。それ以外の場合は、この文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fe146357dbe5d233f80385c4622bdabdf282c2ff" translate="yes" xml:space="preserve">
          <source>If this string ends with the given &lt;a href=&quot;remove-suffix#kotlin.text%24removeSuffix%28kotlin.String%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a copy of this string with the suffix removed. Otherwise, returns this string.</source>
          <target state="translated">この文字列が指定された&lt;a href=&quot;remove-suffix#kotlin.text%24removeSuffix%28kotlin.String%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;で終わる場合、この文字列のコピーを、サフィックスを削除して返します。それ以外の場合は、この文字列を返します。</target>
        </trans-unit>
        <trans-unit id="eef5abc7cbd0224a64b4e2e54624e8e1396be8a5" translate="yes" xml:space="preserve">
          <source>If this string starts with the given &lt;a href=&quot;../../kotlin.text/remove-prefix#kotlin.text%24removePrefix%28kotlin.String%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;, returns a copy of this string with the prefix removed. Otherwise, returns this string.</source>
          <target state="translated">この文字列が指定された&lt;a href=&quot;../../kotlin.text/remove-prefix#kotlin.text%24removePrefix%28kotlin.String%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;で始まる場合、接頭辞を削除したこの文字列のコピーを返します。それ以外の場合は、この文字列を返します。</target>
        </trans-unit>
        <trans-unit id="9adf224f013e9757a5b20a24dd0cebbc9d578cc5" translate="yes" xml:space="preserve">
          <source>If this string starts with the given &lt;a href=&quot;remove-prefix#kotlin.text%24removePrefix%28kotlin.String%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;, returns a copy of this string with the prefix removed. Otherwise, returns this string.</source>
          <target state="translated">この文字列が指定された&lt;a href=&quot;remove-prefix#kotlin.text%24removePrefix%28kotlin.String%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt;で始まる場合、接頭辞を削除したこの文字列のコピーを返します。それ以外の場合は、この文字列を返します。</target>
        </trans-unit>
        <trans-unit id="eaa08b32eac3b33ecf492f621bff941ea4a9fcd4" translate="yes" xml:space="preserve">
          <source>If this value is in &lt;a href=&quot;../-byte/-m-i-n_-v-a-l-u-e#kotlin.Byte.Companion%24MIN_VALUE&quot;&gt;Byte.MIN_VALUE&lt;/a&gt;..&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-i-n_-v-a-l-u-e#kotlin.Byte.Companion%24MIN_VALUE&quot;&gt;Byte.MIN_VALUE&lt;/a&gt; .. &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUEにある&lt;/a&gt;場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;Int&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="fc02da33b8b0ff318b09d189a23b770163982e91" translate="yes" xml:space="preserve">
          <source>If this value is in &lt;a href=&quot;../-byte/-m-i-n_-v-a-l-u-e#kotlin.Byte.Companion%24MIN_VALUE&quot;&gt;Byte.MIN_VALUE&lt;/a&gt;..&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-i-n_-v-a-l-u-e#kotlin.Byte.Companion%24MIN_VALUE&quot;&gt;Byte.MIN_VALUE&lt;/a&gt; .. &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUEにある&lt;/a&gt;場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="490305470096f372ac8119db4e004b84e91a7481" translate="yes" xml:space="preserve">
          <source>If this value is in &lt;a href=&quot;../-byte/-m-i-n_-v-a-l-u-e#kotlin.Byte.Companion%24MIN_VALUE&quot;&gt;Byte.MIN_VALUE&lt;/a&gt;..&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-i-n_-v-a-l-u-e#kotlin.Byte.Companion%24MIN_VALUE&quot;&gt;Byte.MIN_VALUE&lt;/a&gt; .. &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUEにある&lt;/a&gt;場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;Short&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="f92846150c40dce3860615a8d63e6d463453288e" translate="yes" xml:space="preserve">
          <source>If this value is in &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt;..&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Int&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; .. &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUEにある&lt;/a&gt;場合、結果の &lt;code&gt;Int&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="6a741800a8dda50919fa61b7fa403325e77f2e0d" translate="yes" xml:space="preserve">
          <source>If this value is in &lt;a href=&quot;../-short/-m-i-n_-v-a-l-u-e#kotlin.Short.Companion%24MIN_VALUE&quot;&gt;Short.MIN_VALUE&lt;/a&gt;..&lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Short&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-short/-m-i-n_-v-a-l-u-e#kotlin.Short.Companion%24MIN_VALUE&quot;&gt;Short.MIN_VALUE&lt;/a&gt; .. &lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUEにある&lt;/a&gt;場合、結果の &lt;code&gt;Short&lt;/code&gt; 値はこの &lt;code&gt;Int&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="005b91e001ae975c4aa32f3aea7b1ec2812c965b" translate="yes" xml:space="preserve">
          <source>If this value is in &lt;a href=&quot;../-short/-m-i-n_-v-a-l-u-e#kotlin.Short.Companion%24MIN_VALUE&quot;&gt;Short.MIN_VALUE&lt;/a&gt;..&lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Short&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-short/-m-i-n_-v-a-l-u-e#kotlin.Short.Companion%24MIN_VALUE&quot;&gt;Short.MIN_VALUE&lt;/a&gt; .. &lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUEにある&lt;/a&gt;場合、結果の &lt;code&gt;Short&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="db0284f249225c9c93443ff06ef1c4250bc05e17" translate="yes" xml:space="preserve">
          <source>If this value is in the range of &lt;code&gt;Char&lt;/code&gt; codes &lt;code&gt;Char.MIN_VALUE..Char.MAX_VALUE&lt;/code&gt;, the resulting &lt;code&gt;Char&lt;/code&gt; code is equal to this value.</source>
          <target state="translated">この値が &lt;code&gt;Char&lt;/code&gt; コード &lt;code&gt;Char.MIN_VALUE..Char.MAX_VALUE&lt;/code&gt; の範囲内にある場合、結果の &lt;code&gt;Char&lt;/code&gt; コードはこの値と等しくなります。</target>
        </trans-unit>
        <trans-unit id="ba8d6d461e9008017be587a9202d1b43cf4ff54e" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UByte&lt;/code&gt;. Otherwise the result is negative.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;UByte&lt;/code&gt; と同じ数値を表します。そうでない場合、結果は負になります。</target>
        </trans-unit>
        <trans-unit id="df39050abae12f0e8e01436504cfef55ec387e2d" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;UInt&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="4978f90a7ed1a79fd218cf1590a5d83b0509d961" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="6ca047505e5da8d6c0e87f024f03aaab76397dfc" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Byte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UShort&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-byte/-m-a-x_-v-a-l-u-e#kotlin.Byte.Companion%24MAX_VALUE&quot;&gt;Byte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Byte&lt;/code&gt; 値はこの &lt;code&gt;UShort&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="e4c48fdf984577c7db86ab572e1f6df4cdbfd866" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Int&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UInt&lt;/code&gt;. Otherwise the result is negative.</source>
          <target state="translated">この値が&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Int&lt;/code&gt; 値はこの &lt;code&gt;UInt&lt;/code&gt; と同じ数値を表します。そうでない場合、結果は負になります。</target>
        </trans-unit>
        <trans-unit id="558a6d1dd84324e1f32448d5639a910b9702fe85" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Int&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Int&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="d5c7b7a5156a004ef779605c60b74b3e30f938ab" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Long&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;. Otherwise the result is negative.</source>
          <target state="translated">この値が&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Long&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。そうでない場合、結果は負になります。</target>
        </trans-unit>
        <trans-unit id="4d043b90606414b70c2e38bef9430e4d147c520b" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Short&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Short&lt;/code&gt; 値はこの &lt;code&gt;UInt&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="30cf5a989061d05ea8b8590b44fff20c1be5f179" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Short&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Short&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="1a549db6113eee376be4eec1673b56713351397d" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;Short&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UShort&lt;/code&gt;. Otherwise the result is negative.</source>
          <target state="translated">この値が&lt;a href=&quot;../-short/-m-a-x_-v-a-l-u-e#kotlin.Short.Companion%24MAX_VALUE&quot;&gt;Short.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;Short&lt;/code&gt; 値はこの &lt;code&gt;UShort&lt;/code&gt; と同じ数値を表します。そうでない場合、結果は負になります。</target>
        </trans-unit>
        <trans-unit id="7879809b5daf67a980acd328829f4454ce83b90e" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;UInt&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="bcead8032199b4164256add596a32cf9db97266e" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="1121ef81db7e8693e07be091631a7082321f06c6" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UShort&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;UShort&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="81dc4365e9ac822eeb6e28d60dee107cd6132748" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UInt&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UInt&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="3c9c01de18ce638bd129bff08018567a3e4127c6" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UShort&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UShort&lt;/code&gt; 値はこの &lt;code&gt;UInt&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="a6f6b5210b89a3892e478e42ca97672805905a83" translate="yes" xml:space="preserve">
          <source>If this value is less than or equals to &lt;a href=&quot;../-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UShort&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">この値が&lt;a href=&quot;../-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UShort&lt;/code&gt; 値はこの &lt;code&gt;ULong&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="b503698fc5df8a655c9e1e6ad1697e72a8fc230d" translate="yes" xml:space="preserve">
          <source>If this value is non-negative, the resulting &lt;code&gt;Char&lt;/code&gt; code is equal to this value.</source>
          <target state="translated">この値が負でない場合、結果の &lt;code&gt;Char&lt;/code&gt; コードはこの値と等しくなります。</target>
        </trans-unit>
        <trans-unit id="2db0fef9187625217d9cbad099e4b7a81b501888" translate="yes" xml:space="preserve">
          <source>If this value is positive and less than or equals to &lt;a href=&quot;-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">この値が正で&lt;a href=&quot;-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;Int&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="92dfb012b562ce6d901306be8ab16c8954d89a73" translate="yes" xml:space="preserve">
          <source>If this value is positive and less than or equals to &lt;a href=&quot;-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が正で&lt;a href=&quot;-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="953da8b824c2844b89e1295212fa13c1e2d80e5e" translate="yes" xml:space="preserve">
          <source>If this value is positive and less than or equals to &lt;a href=&quot;-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">この値が正で&lt;a href=&quot;-u-byte/-m-a-x_-v-a-l-u-e&quot;&gt;UByte.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;Short&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="9fa06c56030e25a9536cc3f63946d539809dea9f" translate="yes" xml:space="preserve">
          <source>If this value is positive and less than or equals to &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UInt&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が正で&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UInt&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="50d4512f22b639993dc1259c1108fdebd639d406" translate="yes" xml:space="preserve">
          <source>If this value is positive and less than or equals to &lt;a href=&quot;-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UShort&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">この値が正で&lt;a href=&quot;-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UShort&lt;/code&gt; 値はこの &lt;code&gt;Int&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="8dadb1990a07a6ce6e741d4f630eb1d46e9ed4a3" translate="yes" xml:space="preserve">
          <source>If this value is positive and less than or equals to &lt;a href=&quot;-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;, the resulting &lt;code&gt;UShort&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が正で&lt;a href=&quot;-u-short/-m-a-x_-v-a-l-u-e&quot;&gt;UShort.MAX_VALUE&lt;/a&gt;以下の場合、結果の &lt;code&gt;UShort&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="f89685f072ef956cdc798c29edd60c19b535cdfe" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;UByte&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;UByte&lt;/code&gt; 値はこの &lt;code&gt;Byte&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="509d2f430404b1731ac6b4aaf8d343dae3f0754b" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;UInt&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;UInt&lt;/code&gt; 値はこの &lt;code&gt;Byte&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="273aa3ecdd133965b3ad433946ad9ef5ed7f4eee" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;UInt&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;UInt&lt;/code&gt; 値はこの &lt;code&gt;Int&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="2607741fe174b50565a03e15e9436cf3b0a3f525" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;UInt&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;UInt&lt;/code&gt; 値はこの &lt;code&gt;Short&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="0f095f5bb49dc6a53286dbebb4a62e97505f3fa8" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;ULong&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;ULong&lt;/code&gt; 値はこの &lt;code&gt;Byte&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="c42bf5546a05357422f652dbab02ab2c5562b1b9" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;ULong&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;ULong&lt;/code&gt; 値はこの &lt;code&gt;Int&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="1c908d0ebe8742d6be314405ace34fa252b6ec7d" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;ULong&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;ULong&lt;/code&gt; 値はこの &lt;code&gt;Long&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="b851c29ac8506df58c238a4d6e63ef0a6ce3bf18" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;ULong&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;ULong&lt;/code&gt; 値はこの &lt;code&gt;Short&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="a4186277a2fae421e55cc11af12fc473065dce40" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;UShort&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;UShort&lt;/code&gt; 値はこの &lt;code&gt;Byte&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="f91f720debed186fe9dc1691606e3420ca01e262" translate="yes" xml:space="preserve">
          <source>If this value is positive, the resulting &lt;code&gt;UShort&lt;/code&gt; value represents the same numerical value as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">この値が正の場合、結果の &lt;code&gt;UShort&lt;/code&gt; 値はこの &lt;code&gt;Short&lt;/code&gt; と同じ数値を表します。</target>
        </trans-unit>
        <trans-unit id="b92f3912f030b245b906c1d0285095411d239059" translate="yes" xml:space="preserve">
          <source>If two corresponding elements are nested arrays, they are also compared deeply. If any of arrays contains itself on any nesting level the behavior is undefined.</source>
          <target state="translated">2つの対応する要素が入れ子になっている配列の場合,それらも深く比較されます.配列のいずれかが,いずれかの入れ子レベルにそれ自身を含んでいる場合,動作は未定義です.</target>
        </trans-unit>
        <trans-unit id="5c426df69b29a4f2a8f05ed102d4c7c508452b26" translate="yes" xml:space="preserve">
          <source>If two objects are equal according to the &lt;code&gt;equals()&lt;/code&gt; method, then calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of the two objects must produce the same integer result.</source>
          <target state="translated">&lt;code&gt;equals()&lt;/code&gt; メソッドに従って2つのオブジェクトが等しい場合、2つのオブジェクトのそれぞれで &lt;code&gt;hashCode&lt;/code&gt; メソッドを呼び出すと、同じ整数の結果が生成される必要があります。</target>
        </trans-unit>
        <trans-unit id="848bd4767d40a5b040578d4b4acc3831b4a5c116" translate="yes" xml:space="preserve">
          <source>If using Android Studio, the following needs to be added under android:</source>
          <target state="translated">Android Studioを使用している場合は、androidの下に以下を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="835af367bcaa35713fbb44c63e3433507604b4f9" translate="yes" xml:space="preserve">
          <source>If using Ant or Maven, the same configuration applies. The only difference being that the Runner Type would be Ant or Maven respectively.</source>
          <target state="translated">AntやMavenを使用している場合は、同じ設定が適用されます。唯一の違いは、ランナーのタイプがそれぞれAntとMavenになることです。</target>
        </trans-unit>
        <trans-unit id="00e086822c4cc4c3d86e846ccfc2b1c6bbc7e5e5" translate="yes" xml:space="preserve">
          <source>If using Ant, Maven or Gradle, the setup process is straightforward. All that is needed is to define the Build Step. In our case, if using Gradle we'd simply define the required parameters such as the Step Name and Gradle tasks that need executing for the Runner Type.</source>
          <target state="translated">Ant,Maven,Gradleを使用している場合、セットアップのプロセスは簡単です。必要なのは、ビルドステップを定義することです。この例では、Gradleを使用している場合は、ステップ名やランナータイプに必要なGradleタスクなどの必要なパラメータを定義します。</target>
        </trans-unit>
        <trans-unit id="6d1aa0dbbc7faa5d8c75c6b538e6bd8ea6617548" translate="yes" xml:space="preserve">
          <source>If using IntelliJ IDEA build system with TeamCity, we need to make sure that the version of Kotlin being used by IntelliJ IDEA is the same as that that TeamCity runs. This would mean that we need to download the specific version of the Kotlin plugin and install it on TeamCity.</source>
          <target state="translated">IntelliJ IDEAビルドシステムをTeamCityで使用する場合、IntelliJ IDEAで使用しているKotlinのバージョンがTeamCityで動作しているものと同じであることを確認する必要があります。これは、Kotlin プラグインの特定のバージョンをダウンロードして、TeamCity にインストールする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="1ff8b36dc1a6a3cc57b717edeaeb3788168f606b" translate="yes" xml:space="preserve">
          <source>If using Maven or Gradle, we can also configure the module output format. For more information see &lt;a href=&quot;http://kotlinlang.org/docs/reference/js-modules.html&quot;&gt;JavaScript Modules&lt;/a&gt;.</source>
          <target state="translated">MavenまたはGradleを使用している場合は、モジュールの出力形式も構成できます。詳細については、&lt;a href=&quot;http://kotlinlang.org/docs/reference/js-modules.html&quot;&gt;JavaScriptモジュールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a5a4dc0ed9963550c2c79f4e04423d9486f9f6cf" translate="yes" xml:space="preserve">
          <source>If using a Continuous Integration tool different to TeamCity, as long as it supports any of the build tools, or calling command line tools, compiling Kotlin and automating things as part of a CI process should be possible.</source>
          <target state="translated">TeamCityとは別の継続的インテグレーションツールを使用している場合、ビルドツールのいずれかをサポートしているか、コマンドラインツールを呼び出すことができれば、KotlinをコンパイルしてCIプロセスの一部として物事を自動化することは可能なはずです。</target>
        </trans-unit>
        <trans-unit id="6bd5591695bc9bb315e16734b0ff743bacc22bbf" translate="yes" xml:space="preserve">
          <source>If using a previous version, refer to the &lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/Working+with+Meta-Runner&quot;&gt;documentation on how to add meta-runners&lt;/a&gt;.</source>
          <target state="translated">以前のバージョンを使用している場合は、&lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/Working+with+Meta-Runner&quot;&gt;メタランナーの追加方法に関するドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="83ff93c719c3677a5febd54d97d72cdccbce6a99" translate="yes" xml:space="preserve">
          <source>If we call &lt;code&gt;c.foo()&lt;/code&gt; of any &lt;code&gt;c&lt;/code&gt; of type &lt;code&gt;C&lt;/code&gt;, it will print &quot;member&quot;, not &quot;extension&quot;.</source>
          <target state="translated">我々は呼び出す場合 &lt;code&gt;c.foo()&lt;/code&gt; いずれかの &lt;code&gt;c&lt;/code&gt; 型の &lt;code&gt;C&lt;/code&gt; を、それが「メンバー」ではなく、「拡張子」を印刷します。</target>
        </trans-unit>
        <trans-unit id="379283767448c54e1e97c1028507253f860becb5" translate="yes" xml:space="preserve">
          <source>If we choose a non-null type, the compiler will emit an assertion upon assignment. This prevents Kotlin's non-null variables from holding nulls. Assertions are also emitted when we pass platform values to Kotlin functions expecting non-null values etc. Overall, the compiler does its best to prevent nulls from propagating far through the program (although sometimes this is impossible to eliminate entirely, because of generics).</source>
          <target state="translated">非ヌル型を選択すると、コンパイラは代入時にアサーションを出します。これにより、Kotlinの非ヌル型変数がヌル型を保持することを防ぎます。アサーションは、非 null 型の値を期待して Kotlin の関数にプラットフォームの値を渡した場合などにも発行されます。全体的には、コンパイラはnullがプログラムの中で遠くまで伝搬するのを防ぐために最善を尽くしています (ただし、ジェネリックのために完全に排除することは不可能な場合もあります)。</target>
        </trans-unit>
        <trans-unit id="bdbae50858519197b3fe083596ba04b9db8edf5b" translate="yes" xml:space="preserve">
          <source>If we define a custom setter, it will be called every time we assign a value to the property. A custom setter looks like this:</source>
          <target state="translated">カスタム・セッターを定義すると、プロパティに値を代入するたびに呼び出されます。カスタムセッターは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d5788a5cd4b3c40d8ba64eb6708ad2b0a9b603bc" translate="yes" xml:space="preserve">
          <source>If we didn't specify the &lt;code&gt;@JsName&lt;/code&gt; annotation, the name of the corresponding function would contain a suffix calculated from the function signature, for example &lt;code&gt;hello_61zpoe$&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@JsName&lt;/code&gt; アノテーションを指定しなかった場合、対応する関数の名前には、関数のシグネチャから計算されたサフィックスが含まれます（例： &lt;code&gt;hello_61zpoe$&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="966f788e727a4b595780377e8042611cc0480c54" translate="yes" xml:space="preserve">
          <source>If we had wanted to express the same thing in Python, it would have looked like this, and we would be hamstrung by the fact that lambda functions can only contain one expression, so we need explicit function definitions for everything but the oneliners:</source>
          <target state="translated">同じことをPythonで表現しようとしたら、こんな感じになっていたでしょうし、ラムダ関数は1つの式しか入れられないので、オネリナ以外は明示的な関数定義が必要になります。</target>
        </trans-unit>
        <trans-unit id="dc0fca0f296a8cb428a1796bfc197561c1551e47" translate="yes" xml:space="preserve">
          <source>If we leave all the optional annotations out, what's left looks like this:</source>
          <target state="translated">オプションの注釈をすべて削除すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7f0622f86bfe1754250cfd5960f42eb9787c1baa" translate="yes" xml:space="preserve">
          <source>If we need to use a member of a class, or an extension function, it needs to be qualified, e.g. &lt;code&gt;String::toCharArray&lt;/code&gt;.</source>
          <target state="translated">クラスのメンバーまたは拡張関数を使用する必要がある場合は、例えば &lt;code&gt;String::toCharArray&lt;/code&gt; ように修飾する必要があります。</target>
        </trans-unit>
        <trans-unit id="06f2f1ba4877a89d728de7b4cb1810c2c9646349" translate="yes" xml:space="preserve">
          <source>If we need wildcards where they are not generated by default, we can use the &lt;code&gt;@JvmWildcard&lt;/code&gt; annotation:</source>
          <target state="translated">デフォルトで生成されないワイルドカードが必要な場合は、 &lt;code&gt;@JvmWildcard&lt;/code&gt; アノテーションを使用できます。</target>
        </trans-unit>
        <trans-unit id="8622531a5c0429cfdda336ff31f83fe890fe02ca" translate="yes" xml:space="preserve">
          <source>If we try to use the same non-blocking &lt;code&gt;delay()&lt;/code&gt; function directly inside &lt;code&gt;main()&lt;/code&gt;, we'll get a compiler error:</source>
          <target state="translated">同じ非ブロッキング &lt;code&gt;delay()&lt;/code&gt; 関数を &lt;code&gt;main()&lt;/code&gt; 内で直接使用しようとすると、コンパイラエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="eec42d7483409e40f6e340d8a3d88fe567b92801" translate="yes" xml:space="preserve">
          <source>If we want to call the synthetic properties on &lt;code&gt;View&lt;/code&gt;, we should also import &lt;code&gt;kotlinx.android.synthetic.main.activity_main.view.*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;View&lt;/code&gt; で合成プロパティを呼び出す場合は、 &lt;code&gt;kotlinx.android.synthetic.main.activity_main.view.*&lt;/code&gt; もインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="df31a64d374ba97c421367b3cdcce507cbe75299" translate="yes" xml:space="preserve">
          <source>If we want, we can add tests to a specific platform, then it will be executed only as part of these platform tests. For example, we can add UTF-16 tests on JVM. Just follow the same steps as before, but create file in &lt;code&gt;jvmTest/kotlin/jetbrains/base64&lt;/code&gt;:</source>
          <target state="translated">必要に応じて、特定のプラットフォームにテストを追加すると、これらのプラットフォームテストの一部としてのみ実行されます。たとえば、JVMにUTF-16テストを追加できます。前と同じ手順を実行しますが、 &lt;code&gt;jvmTest/kotlin/jetbrains/base64&lt;/code&gt; にファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="ba8fe72a36f3192d28c0b1bb2a6adebf2c73a672" translate="yes" xml:space="preserve">
          <source>If we were to introduce another class &lt;code&gt;Bicycle&lt;/code&gt;, which should be neither a subclass nor a superclass of &lt;code&gt;MotorVehicle&lt;/code&gt;, we could still make it implement &lt;code&gt;Driveable&lt;/code&gt;, as long as we declare &lt;code&gt;maxSpeed&lt;/code&gt; and &lt;code&gt;drive&lt;/code&gt; in &lt;code&gt;Bicycle&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MotorVehicle&lt;/code&gt; のサブクラスでもスーパークラスでもない別のクラス &lt;code&gt;Bicycle&lt;/code&gt; を導入する場合でも、 &lt;code&gt;maxSpeed&lt;/code&gt; と &lt;code&gt;drive&lt;/code&gt; を &lt;code&gt;Bicycle&lt;/code&gt; で宣言する限り、 &lt;code&gt;Driveable&lt;/code&gt; を実装することができます。</target>
        </trans-unit>
        <trans-unit id="84ed0f9beb7f91564144926831adc67accd41344" translate="yes" xml:space="preserve">
          <source>If we're not using IntelliJ IDEA, we can configure the &lt;code&gt;pom.xml&lt;/code&gt; file manually to target JavaScript, by adding the following entries</source>
          <target state="translated">IntelliJ IDEAを使用していない場合は、次のエントリを追加することで、JavaScriptをターゲットとするように &lt;code&gt;pom.xml&lt;/code&gt; ファイルを手動で構成できます。</target>
        </trans-unit>
        <trans-unit id="f4acfe17479a9d138aec02a2b5400d83b9dbad62" translate="yes" xml:space="preserve">
          <source>If what the overriding function wants to do is an extension of what the overridden function did, you can call the overridden function via &lt;code&gt;super&lt;/code&gt; (either before, after, or between other code):</source>
          <target state="translated">オーバーライドする関数が実行したいことは、オーバーライドされた関数が行ったことの拡張である場合、オーバーライドされた関数を &lt;code&gt;super&lt;/code&gt; を介して呼び出すことができます（前、後、または他のコード間）。</target>
        </trans-unit>
        <trans-unit id="c93cd73e42edadff5832f929c0b9aee1adf9c114" translate="yes" xml:space="preserve">
          <source>If you already have an &lt;code&gt;Iterable&lt;/code&gt; object (such as a &lt;code&gt;List&lt;/code&gt; or a &lt;code&gt;Set&lt;/code&gt;), you can create a sequence from it by calling &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/as-sequence&quot;&gt;&lt;code&gt;asSequence()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Iterable&lt;/code&gt; オブジェクト（ &lt;code&gt;List&lt;/code&gt; や &lt;code&gt;Set&lt;/code&gt; など）がすでにある場合は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/as-sequence&quot;&gt; &lt;code&gt;asSequence()&lt;/code&gt; を&lt;/a&gt;呼び出して、そこからシーケンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="fc29b28eefcc5ecff8f112f0914c7751c0121584" translate="yes" xml:space="preserve">
          <source>If you already have the Java classes, you can just copy them to the project directories.</source>
          <target state="translated">すでにJavaクラスを持っている場合は、プロジェクトディレクトリにコピーしてください。</target>
        </trans-unit>
        <trans-unit id="4e80a816776f6d15384568dae346e099a9c4bc29" translate="yes" xml:space="preserve">
          <source>If you are new to the JVM and Java, check out the &lt;a href=&quot;http://hadihariri.com/2013/12/29/jvm-minimal-survival-guide-for-the-dotnet-developer/&quot;&gt;JVM Minimal Survival Guide&lt;/a&gt;. If you are new to IntelliJ IDEA, check out the &lt;a href=&quot;http://hadihariri.com/2014/01/06/intellij-idea-minimal-survival-guide/&quot;&gt;The IntelliJ IDEA Minimal Survival Guide&lt;/a&gt;.</source>
          <target state="translated">JVMとJavaを初めて使用する場合は、&lt;a href=&quot;http://hadihariri.com/2013/12/29/jvm-minimal-survival-guide-for-the-dotnet-developer/&quot;&gt;JVM Minimal Survival Guideを&lt;/a&gt;確認してください。IntelliJ IDEAを初めて使用する場合は&lt;a href=&quot;http://hadihariri.com/2014/01/06/intellij-idea-minimal-survival-guide/&quot;&gt;、IntelliJ IDEA Minimal Survival Guideを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="3a098b59cc7c828b6cf7a7a722a6433f92888a1c" translate="yes" xml:space="preserve">
          <source>If you are using IntelliJ IDEA, start with &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt; and then work your way through the &lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;.</source>
          <target state="translated">IntelliJ IDEAを使用している場合は、&lt;a href=&quot;getting-started&quot;&gt;「はじめに」から始め&lt;/a&gt;て、&lt;a href=&quot;koans&quot;&gt;Kotlin Koansを進め&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="288920b3c9422f077df54c1f4e25ceb3fa6051e0" translate="yes" xml:space="preserve">
          <source>If you are using the command line compiler, start with &lt;a href=&quot;command-line&quot;&gt;Working with the Command Line Compiler&lt;/a&gt; and then work your way through the &lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;;</source>
          <target state="translated">あなたは、コマンドラインコンパイラを使用している場合は、で始まる&lt;a href=&quot;command-line&quot;&gt;コマンドラインコンパイラで作業&lt;/a&gt;し、その後を通してあなたの方法を動作し&lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f2a50c48e84ca80688cd2b0e1b9297326e7b2f1d" translate="yes" xml:space="preserve">
          <source>If you build your module with Gradle, you can add arguments like this:</source>
          <target state="translated">Gradleでモジュールを構築する場合は、以下のように引数を追加することができます。</target>
        </trans-unit>
        <trans-unit id="cd3aa7d69244f58e95e8689b9c6402ed443bb559" translate="yes" xml:space="preserve">
          <source>If you consider all the APIs of your module experimental, you can mark the entire module as such with the compiler argument &lt;code&gt;-Xexperimental&lt;/code&gt; as described in &lt;a href=&quot;#module-wide-use&quot;&gt;Module-wide use&lt;/a&gt;.</source>
          <target state="translated">モジュールのすべてのAPIを実験的に検討する場合は、モジュール全体の&lt;a href=&quot;#module-wide-use&quot;&gt;使用で&lt;/a&gt;説明されているように、コンパイラー引数 &lt;code&gt;-Xexperimental&lt;/code&gt; を使用してモジュール全体をそのようにマークできます。</target>
        </trans-unit>
        <trans-unit id="e700eece24a382c6a466861314d880f1c63adba4" translate="yes" xml:space="preserve">
          <source>If you declare a factory function for a class, avoid giving it the same name as the class itself. Prefer using a distinct name making it clear why the behavior of the factory function is special. Only if there is really no special semantics, you can use the same name as the class.</source>
          <target state="translated">クラスのファクトリ関数を宣言する場合、クラス自体と同じ名前を付けることは避けてください。ファクトリ関数の動作が特別なものである理由を明確にするために、明確な名前を使用することをお勧めします。本当に特別なセマンティクスがない場合に限り、クラスと同じ名前を使うことができます。</target>
        </trans-unit>
        <trans-unit id="a09dc2e7a857fda68536a28e258f8622ea168f72" translate="yes" xml:space="preserve">
          <source>If you declare your Kotlin code in a package, &lt;code&gt;main&lt;/code&gt; would be followed by a package definition part. For example, this goes after the &lt;code&gt;main&lt;/code&gt; declaration if you put your &lt;code&gt;main&lt;/code&gt; function in the &lt;code&gt;org.example.hellojs&lt;/code&gt; package:</source>
          <target state="translated">Kotlinコードをパッケージで宣言すると、 &lt;code&gt;main&lt;/code&gt; の後にパッケージ定義部分が続きます。たとえば、 &lt;code&gt;main&lt;/code&gt; 関数を &lt;code&gt;org.example.hellojs&lt;/code&gt; パッケージに配置した場合、これは &lt;code&gt;main&lt;/code&gt; 宣言の後にあります。</target>
        </trans-unit>
        <trans-unit id="2d0c772b88930f846f25631788c26caf89a248c8" translate="yes" xml:space="preserve">
          <source>If you do not specify any visibility modifier, &lt;code&gt;public&lt;/code&gt; is used by default, which means that your declarations will be visible everywhere;</source>
          <target state="translated">可視性修飾子を指定しない場合、デフォルトで &lt;code&gt;public&lt;/code&gt; が使用されます。つまり、宣言はどこにでも表示されます。</target>
        </trans-unit>
        <trans-unit id="cadfb46ca63577b7ac5a59ea3e20f042f8a1e23b" translate="yes" xml:space="preserve">
          <source>If you don't care about the return value from the function, but you want to make one or more calls involving something that might be null and then keep on using that value, try &lt;code&gt;apply()&lt;/code&gt;, which returns the value it's called on. This is particularly useful if you want to work with many members of the object in question:</source>
          <target state="translated">関数からの戻り値は気にしないが、nullの可能性があるものを含む1つ以上の呼び出しを行い、その値を使い続けたい場合は、 &lt;code&gt;apply()&lt;/code&gt; を呼び出します。apply（）は呼び出された値を返します。これは、問題のオブジェクトの多くのメンバーを操作する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="25be6af74cab7ee5d3f6a46048e18b2c9c41852a" translate="yes" xml:space="preserve">
          <source>If you don't care about the return value, you don't need to assign it to anything.</source>
          <target state="translated">戻り値を気にしないのであれば、何も代入する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b5e43077cfafc57268582f5f13c46e3f8aaffa0e" translate="yes" xml:space="preserve">
          <source>If you don't have an instance of the class, you can get the class metadata with &lt;code&gt;String::class.java&lt;/code&gt; (but you can't invoke any of its members until you have an instance).</source>
          <target state="translated">クラスのインスタンスがない場合は、 &lt;code&gt;String::class.java&lt;/code&gt; してクラスメタデータを取得できます（ただし、インスタンスが作成されるまで、そのメンバーを呼び出すことはできません）。</target>
        </trans-unit>
        <trans-unit id="ef8266bd47e097890ef64d7166bd8dd100eb20ff" translate="yes" xml:space="preserve">
          <source>If you don't have any idea (or don't care) what the generic type might be, you can use a &lt;em&gt;star-projection&lt;/em&gt;:</source>
          <target state="translated">ジェネリック型が何であるかわからない（または気にしない）場合は、&lt;em&gt;スター投影を&lt;/em&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="3e3d1700eb36e84d61d0cc0f83792e108ac15508" translate="yes" xml:space="preserve">
          <source>If you don't need a variable in the destructuring declaration, you can place an underscore instead of its name:</source>
          <target state="translated">破壊宣言で変数を必要としない場合は、その名前の代わりにアンダースコアを置くことができます。</target>
        </trans-unit>
        <trans-unit id="22b00c7537a626ef39f32b96fa84adefd77db83f" translate="yes" xml:space="preserve">
          <source>If you don't specify a use-site target, the target is chosen according to the &lt;code&gt;@Target&lt;/code&gt; annotation of the annotation being used. If there are multiple applicable targets, the first applicable target from the following list is used:</source>
          <target state="translated">use-siteターゲットを指定しない場合、ターゲットは、使用されて &lt;code&gt;@Target&lt;/code&gt; アノテーションの@Targetアノテーションに従って選択されます。該当するターゲットが複数ある場合は、以下のリストから最初に該当するターゲットが使用されます。</target>
        </trans-unit>
        <trans-unit id="3fedc784120817cc87cdecd3df22bdeb6a5e4e0c" translate="yes" xml:space="preserve">
          <source>If you don't want to annotate every usage of experimental APIs in your code, you can accept the experimental status for your whole module. Module-wide use of experimental APIs can be propagating and non-propagating as well:</source>
          <target state="translated">コード中の実験的 API の使用法をすべてアノテーションしたくない場合は、モジュール全体の実験的ステータスを受け入れることができます。モジュール全体での実験的 API の使用は、伝播するものと伝播しないものがあります。</target>
        </trans-unit>
        <trans-unit id="43a0c51574e240459eda5d6b9335be253ee68042" translate="yes" xml:space="preserve">
          <source>If you find that an interface that you want a class to implement is already implemented by one of the properties of the class, you can &lt;em&gt;delegate&lt;/em&gt; the implementation of that interface to that property with &lt;code&gt;by&lt;/code&gt;:</source>
          <target state="translated">あなたが実装するクラスがすでにクラスのプロパティのいずれかによって実現されたいとのインターフェイスは、あなたができることが判明した場合&lt;em&gt;に委任&lt;/em&gt;してそのプロパティにそのインターフェイスの実装を &lt;code&gt;by&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8261f1da9a2137ff384a6fcdb0fdc9e9eb256bac" translate="yes" xml:space="preserve">
          <source>If you find the &lt;code&gt;this&lt;/code&gt; syntax to be confusing, you can use &lt;code&gt;also&lt;/code&gt; instead, which takes ordinary lambdas:</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 構文がわかりにくい場合は、代わりに通常のラムダを使用すること &lt;code&gt;also&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="b72e9d9abf32110dc1b1cda54fc1754195041c56" translate="yes" xml:space="preserve">
          <source>If you have a collection of elements of a nullable type and want to filter non-null elements, you can do so by using &lt;code&gt;filterNotNull&lt;/code&gt;:</source>
          <target state="translated">null許容型の要素のコレクションがあり、null以外の要素をフィルタリングする場合は、 &lt;code&gt;filterNotNull&lt;/code&gt; を使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="3854a89fb1eb0d55d0045c79155df3bda3823777" translate="yes" xml:space="preserve">
          <source>If you have a functional type or a type with type parameters which is used multiple times in a codebase, prefer defining a type alias for it:</source>
          <target state="translated">コードベース内で複数回使用される機能型や型パラメータを持つ型がある場合は、その型のエイリアスを定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="160be5812cd4b3879f4656323f6abb0ca91c7f96" translate="yes" xml:space="preserve">
          <source>If you have a platform-specific library that you want to use in common code while providing your own implementation for another platform, you can provide a typealias to an existing class as the actual declaration:</source>
          <target state="translated">他のプラットフォーム向けに独自の実装を提供しつつ、共通コードで使用したいプラットフォーム固有のライブラリがある場合は、実際の宣言として既存のクラスにtypealiasを提供することができます。</target>
        </trans-unit>
        <trans-unit id="c6e93137d89d2551a056f737e4db196d1978cfc3" translate="yes" xml:space="preserve">
          <source>If you have a value that is truly constant, and the value is a string or a primitive type (see below) that is known at compile-time, you can declare an actual constant instead. You can only do this at the top level of a file or inside an &lt;a href=&quot;objects-and-companion-objects#object-declarations&quot;&gt;object declaration&lt;/a&gt; (but not inside a class declaration):</source>
          <target state="translated">真に定数である値があり、その値がコンパイル時にわかっている文字列またはプリミティブ型（以下を参照）である場合、代わりに実際の定数を宣言できます。これを行うことができるのは、ファイルの最上位または&lt;a href=&quot;objects-and-companion-objects#object-declarations&quot;&gt;オブジェクト宣言の&lt;/a&gt;内部のみです（クラス宣言の内部ではできません）。</target>
        </trans-unit>
        <trans-unit id="b3734595028b6b703699f95d53623d869e9b5b43" translate="yes" xml:space="preserve">
          <source>If you have an account on &lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt;, you can easily upload your course there, update it anytime you need, and &lt;a href=&quot;https://blog.jetbrains.com/pycharm/2017/06/integration-with-stepik-for-educators/&quot;&gt;share publicly or privately&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt;にアカウントがあれば、そこにコースを簡単にアップロードし、必要なときにいつでも更新して、&lt;a href=&quot;https://blog.jetbrains.com/pycharm/2017/06/integration-with-stepik-for-educators/&quot;&gt;公開または非公開で共有&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="07988c0863287cce070542583bc572c93b997f2d" translate="yes" xml:space="preserve">
          <source>If you have an archive &lt;code&gt;sample-library.jar&lt;/code&gt;, which contains &lt;code&gt;sample-library.js&lt;/code&gt; and &lt;code&gt;sample-library.meta.js&lt;/code&gt;, you can use the following command</source>
          <target state="translated">&lt;code&gt;sample-library.js&lt;/code&gt; と &lt;code&gt;sample-library.meta.js&lt;/code&gt; を含むアーカイブ &lt;code&gt;sample-library.jar&lt;/code&gt; がある場合は、次のコマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="8ca8fa744fdcf13cab8a2d83ad8ba290dd0853cd" translate="yes" xml:space="preserve">
          <source>If you have an instance of &lt;code&gt;Generic&amp;lt;Subtype&amp;gt;&lt;/code&gt;, and you want to refer to it as a &lt;code&gt;Generic&amp;lt;Supertype&amp;gt;&lt;/code&gt;, you can safely &lt;em&gt;get&lt;/em&gt; instances of the generic type parameter from it - these will truly be instances of &lt;code&gt;Subtype&lt;/code&gt; (because they come from an instance of &lt;code&gt;Generic&amp;lt;Subtype&amp;gt;&lt;/code&gt;), but they will appear to you as instances of &lt;code&gt;Supertype&lt;/code&gt; (because you've told the compiler that you have a &lt;code&gt;Generic&amp;lt;Supertype&amp;gt;&lt;/code&gt;). This is safe; it is called &lt;em&gt;covariance&lt;/em&gt;, and Kotlin lets you do &lt;em&gt;declaration-site covariance&lt;/em&gt; by putting &lt;code&gt;out&lt;/code&gt; in front of the generic type parameter. If you do, you may only use that type parameter as a return type, not as a parameter type. Here is the simplest useful covariant interface:</source>
          <target state="translated">&lt;code&gt;Generic&amp;lt;Subtype&amp;gt;&lt;/code&gt; インスタンスがあり、それを &lt;code&gt;Generic&amp;lt;Supertype&amp;gt;&lt;/code&gt; として参照したい場合は、そこからジェネリック型パラメーターのインスタンスを安全に&lt;em&gt;取得でき&lt;/em&gt;ます-これらは本当に &lt;code&gt;Subtype&lt;/code&gt; インスタンスになります（これらはインスタンス &lt;code&gt;Generic&amp;lt;Subtype&amp;gt;&lt;/code&gt; ）が、彼らはのインスタンスとしてあなたに表示される &lt;code&gt;Supertype&lt;/code&gt; あなたは、あなたが持っていることをコンパイラに指示しましたので（ &lt;code&gt;Generic&amp;lt;Supertype&amp;gt;&lt;/code&gt; ）。これは安全です。それが呼び出され&lt;em&gt;、共分散&lt;/em&gt;、およびKotlinはあなたが行うことができます&lt;em&gt;宣言サイトの共分散を&lt;/em&gt;入れて &lt;code&gt;out&lt;/code&gt; ジェネリック型パラメーターの前。その場合、その型パラメーターは戻り値の型としてのみ使用でき、パラメーター型としては使用できません。以下は、最も単純で有用な共変インターフェースです。</target>
        </trans-unit>
        <trans-unit id="76b81d78f8b362115f861d43270c94c40851a654" translate="yes" xml:space="preserve">
          <source>If you have an object with multiple overloaded constructors that don't call different superclass constructors and can't be reduced to a single constructor with default argument values, prefer to replace the overloaded constructors with factory functions.</source>
          <target state="translated">複数のオーバーロードされたコンストラクタを持つオブジェクトで、異なるスーパークラスのコンストラクタを呼ばず、デフォルトの引数値を持つ単一のコンストラクタに還元できない場合は、オーバーロードされたコンストラクタをファクトリー関数に置き換えることを好みます。</target>
        </trans-unit>
        <trans-unit id="c8853dee9818f39e3759ffe7b639b9f7bc068972" translate="yes" xml:space="preserve">
          <source>If you have multiple annotations with the same target, you can avoid repeating the target by adding brackets after the target and putting all the annotations inside the brackets:</source>
          <target state="translated">同じターゲットを持つ複数のアノテーションがある場合は、ターゲットの後に括弧を付けて、すべてのアノテーションを括弧の中に入れることで、ターゲットの繰り返しを避けることができます。</target>
        </trans-unit>
        <trans-unit id="f4458460acc96ecaa2c9621b4261e57a18ecc54c" translate="yes" xml:space="preserve">
          <source>If you insist on using a plain editor and the command line, see &lt;a href=&quot;../command-line&quot;&gt;these instructions instead&lt;/a&gt;. In short, you need to &lt;em&gt;compile&lt;/em&gt; your Kotlin code before running it. Assuming that your Kotlin file is called &lt;code&gt;program.kt&lt;/code&gt;:</source>
          <target state="translated">プレーンエディタとコマンドラインの使用を主張する場合は、&lt;a href=&quot;../command-line&quot;&gt;代わりにこれらの手順を&lt;/a&gt;参照してください。つまり、実行する前にKotlinコードを&lt;em&gt;コンパイル&lt;/em&gt;する必要があります。あなたKotlinファイルが呼び出されると仮定すると &lt;code&gt;program.kt&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ef2b7c0495898685e9252662cc7dfb4430876f43" translate="yes" xml:space="preserve">
          <source>If you intend to use the APIs from the 1.1 Standard Library, or language features that depend on those APIs, you should upgrade the dependency to the version 1.1.</source>
          <target state="translated">1.1 Standard Library の API や、その API に依存する言語機能を使用する場合は、依存関係をバージョン 1.1 にアップグレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="9dac576da363f8811fb3df384398b7619989e0f8" translate="yes" xml:space="preserve">
          <source>If you like a &amp;ldquo;hands-on&amp;rdquo; learning, try &lt;a href=&quot;https://play.kotlinlang.org/koans&quot;&gt;Kotlin Koans online&lt;/a&gt; to get familiar with Kotlin;</source>
          <target state="translated">「実践的な」学習が好きな場合は、&lt;a href=&quot;https://play.kotlinlang.org/koans&quot;&gt;Kotlin Koansをオンライン&lt;/a&gt;で試して、Kotlinに慣れてください。</target>
        </trans-unit>
        <trans-unit id="d82ca3a290ad528cc2bae1e2cb08d2ecdafea630" translate="yes" xml:space="preserve">
          <source>If you mark a declaration &lt;code&gt;private&lt;/code&gt;, it will only be visible inside the file containing the declaration;</source>
          <target state="translated">宣言を &lt;code&gt;private&lt;/code&gt; とマークすると、宣言を含むファイル内でのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="1b38ef20d54a5b26492d65004e55d4d4d8807d1f" translate="yes" xml:space="preserve">
          <source>If you mark it &lt;code&gt;internal&lt;/code&gt;, it is visible everywhere in the same &lt;a href=&quot;#modules&quot;&gt;module&lt;/a&gt;;</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; としてマークすると、同じ&lt;a href=&quot;#modules&quot;&gt;モジュールの&lt;/a&gt;どこにでも表示されます。</target>
        </trans-unit>
        <trans-unit id="23d6510bb7782c43d563dd375dee713e5d305e0b" translate="yes" xml:space="preserve">
          <source>If you need a &lt;em&gt;singleton&lt;/em&gt; - a class that only has got one instance - you can declare the class in the usual way, but use the &lt;code&gt;object&lt;/code&gt; keyword instead of &lt;code&gt;class&lt;/code&gt;:</source>
          <target state="translated">あなたが必要な場合は&lt;em&gt;シングルトン&lt;/em&gt;インスタンスを1つだけ持っているクラスを- -あなたは、通常の方法でクラスを宣言しますが、使用することができ &lt;code&gt;object&lt;/code&gt; の代わりにキーワードを &lt;code&gt;class&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fc8467398b87bfa40771e50f53a8a177a25657b1" translate="yes" xml:space="preserve">
          <source>If you need a fancier way of reading or writing file data, you have access to the full Java suite of I/O classes - in particular, &lt;code&gt;Scanner&lt;/code&gt;, which can parse numbers and other data types from files or other streams, and &lt;code&gt;BufferedReader&lt;/code&gt; (which is good for efficient reading of large amounts of data), which you can obtain by calling &lt;code&gt;bufferedReader()&lt;/code&gt; on a file or stream. See any Java tutorial for how to use these.</source>
          <target state="translated">ファイルデータの読み書きをより洗練された方法で行う必要がある場合は、I / Oクラスの完全なJavaスイートにアクセスできます。特に、ファイルやその他のストリームから数値やその他のデータ型を解析できる &lt;code&gt;Scanner&lt;/code&gt; や、 &lt;code&gt;BufferedReader&lt;/code&gt; （これには大量のデータを効率的に読み取るのに適しています）。これは、ファイルまたはストリームで &lt;code&gt;bufferedReader()&lt;/code&gt; を呼び出すことで取得できます。これらの使用方法については、Javaチュートリアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="54e87845252769ababaaab1c06f5bd872659abd6" translate="yes" xml:space="preserve">
          <source>If you need a function or a property to be tied to a class rather than to instances of it (similar to &lt;code&gt;@staticmethod&lt;/code&gt; in Python), you can declare it inside a &lt;em&gt;companion object&lt;/em&gt;:</source>
          <target state="translated">関数またはプロパティをインスタンスではなくクラスに &lt;code&gt;@staticmethod&lt;/code&gt; がある場合（Pythonの@staticmethodと同様）、&lt;em&gt;コンパニオンオブジェクト&lt;/em&gt;内で宣言でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8de1431e2a233483ba705c03102c9221f4f2f632" translate="yes" xml:space="preserve">
          <source>If you need multiple ways to initialize a class, you can create &lt;em&gt;secondary constructors&lt;/em&gt;, each of which looks like a function whose name is &lt;code&gt;constructor&lt;/code&gt;. Every secondary constructor must invoke another (primary or secondary) constructor by using the &lt;code&gt;this&lt;/code&gt; keyword as if it were a function (so that every instance construction eventually calls the primary constructor).</source>
          <target state="translated">クラスを初期化するために複数の方法が必要な場合は、それぞれ &lt;code&gt;constructor&lt;/code&gt; という名前の関数のように見える、&lt;em&gt;2次コンストラクター&lt;/em&gt;を作成できます。すべての2次コンストラクターは、関数のように &lt;code&gt;this&lt;/code&gt; キーワードを使用して、別の（1次または2次）コンストラクターを呼び出す必要があります（そのため、すべてのインスタンス構築が最終的に1次コンストラクターを呼び出します）。</target>
        </trans-unit>
        <trans-unit id="e23221640befe2f0b60d6c58ea9b02d7e3a97b07" translate="yes" xml:space="preserve">
          <source>If you need to access a class implemented in JavaScript from Kotlin in a typesafe way, you can write a Kotlin declaration using the &lt;code&gt;external&lt;/code&gt; modifier. (In Kotlin 1.0, the &lt;code&gt;@native&lt;/code&gt; annotation was used instead.) Unlike the JVM target, the JS one permits to use external modifier with classes and properties. For example, here's how you can declare the DOM &lt;code&gt;Node&lt;/code&gt; class:</source>
          <target state="translated">タイプセーフな方法でKotlinからJavaScriptで実装されたクラスにアクセスする必要がある場合は、 &lt;code&gt;external&lt;/code&gt; 修飾子を使用してKotlin宣言を記述できます。（Kotlin 1.0では、代わりに &lt;code&gt;@native&lt;/code&gt; アノテーションが使用されていました。）JVMターゲットとは異なり、JSはクラスとプロパティで外部修飾子を使用することを許可します。たとえば、DOM &lt;code&gt;Node&lt;/code&gt; クラスを宣言する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d4e8082dbfdacd1170b034e190a7f81841b9039b" translate="yes" xml:space="preserve">
          <source>If you need to annotate the primary constructor of a class, you need to add the &lt;em&gt;constructor&lt;/em&gt; keyword to the constructor declaration, and add the annotations before it:</source>
          <target state="translated">クラスのプライマリコンストラクターに注釈を付ける必要がある場合は、&lt;em&gt;コンストラクター&lt;/em&gt;キーワードをコンストラクター宣言に追加し、その前に注釈を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="e462275c07255513e75672de08e598bdce5e271f" translate="yes" xml:space="preserve">
          <source>If you need to change the visibility of an accessor or to annotate it, but don't need to change the default implementation, you can define the accessor without defining its body:</source>
          <target state="translated">アクセサの可視性を変更したり注釈を付けたりする必要があるが、デフォルトの実装を変更する必要がない場合は、アクセサのボディを定義せずにアクセサを定義することができます。</target>
        </trans-unit>
        <trans-unit id="4613a8244834c0ecb89ce0d825ca742a6fa51707" translate="yes" xml:space="preserve">
          <source>If you need to expose a Kotlin property as a field in Java, annotate it with the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-field/index&quot;&gt;&lt;code&gt;@JvmField&lt;/code&gt;&lt;/a&gt; annotation. The field will have the same visibility as the underlying property. You can annotate a property with &lt;code&gt;@JvmField&lt;/code&gt; if it has a backing field, is not private, does not have &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;override&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; modifiers, and is not a delegated property.</source>
          <target state="translated">KotlinプロパティをJavaのフィールドとして公開する必要がある場合は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-field/index&quot;&gt; &lt;code&gt;@JvmField&lt;/code&gt; &lt;/a&gt;アノテーションを付けます。フィールドは、基になるプロパティと同じ可視性を持ちます。プロパティにバッキングフィールドがあり、プライベートではなく、 &lt;code&gt;open&lt;/code&gt; 、 &lt;code&gt;override&lt;/code&gt; または &lt;code&gt;const&lt;/code&gt; 修飾子がなく、委任されたプロパティでない場合、 &lt;code&gt;@JvmField&lt;/code&gt; プロパティに注釈を付けることができます。</target>
        </trans-unit>
        <trans-unit id="89e90e48358e19dcdf7d70c38acd3455ecae2039" translate="yes" xml:space="preserve">
          <source>If you need to know the index of the current element when you're iterating through something, you can use &lt;code&gt;withIndex()&lt;/code&gt;, which corresponds to &lt;code&gt;enumerate()&lt;/code&gt;. It produces a sequence of objects that have got two properties (the index and the value) and two specially-named accessor functions called &lt;code&gt;component1()&lt;/code&gt; and &lt;code&gt;component2()&lt;/code&gt;; Kotlin lets you destructure such an object into a declaration:</source>
          <target state="translated">何かを反復しているときに現在の要素のインデックスを知る必要がある場合は、 &lt;code&gt;enumerate()&lt;/code&gt; に対応する &lt;code&gt;withIndex()&lt;/code&gt; を使用できます。これは、2つのプロパティ（インデックスと値）と、 &lt;code&gt;component1()&lt;/code&gt; および &lt;code&gt;component2()&lt;/code&gt; と呼ばれる2つの特別な名前のアクセサ関数を持つオブジェクトのシーケンスを生成します。Kotlinでは、そのようなオブジェクトを宣言に分解できます。</target>
        </trans-unit>
        <trans-unit id="4c304182ad4dffb827b2cd5041835d4a1290ba5c" translate="yes" xml:space="preserve">
          <source>If you need to look up the class dynamically as well, you can use &lt;code&gt;Class.forName()&lt;/code&gt; and supply the fully-qualified name of the class.</source>
          <target state="translated">クラスも動的に検索する必要がある場合は、 &lt;code&gt;Class.forName()&lt;/code&gt; を使用して、クラスの完全修飾名を指定できます。</target>
        </trans-unit>
        <trans-unit id="fb05e76a6c128f62bf211b270ee1f300cbc3d9aa" translate="yes" xml:space="preserve">
          <source>If you need to retrieve an arbitrary element of a collection, call the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/random&quot;&gt;&lt;code&gt;random()&lt;/code&gt;&lt;/a&gt; function. You can call it without arguments or with a &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.random/-random/index&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; object as a source of the randomness.</source>
          <target state="translated">コレクションの任意の要素を取得する必要がある場合は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/random&quot;&gt; &lt;code&gt;random()&lt;/code&gt; &lt;/a&gt;関数を呼び出します。引数なしで、またはランダム性のソースとして&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.random/-random/index&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2c6c6ff6a76abad65e2d1d67dae2bda5a0418cb0" translate="yes" xml:space="preserve">
          <source>If you need to retrieve the collection content in a readable format, use functions that transform the collections to strings: &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/join-to-string&quot;&gt;&lt;code&gt;joinToString()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/join-to&quot;&gt;&lt;code&gt;joinTo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コレクションのコンテンツを読み取り可能な形式で取得する必要がある場合は、コレクションを文字列に変換する関数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/join-to-string&quot;&gt; &lt;code&gt;joinToString()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/join-to&quot;&gt; &lt;code&gt;joinTo()&lt;/code&gt; を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="993106f4a5b27e1d574e1151066452d4ad416447" translate="yes" xml:space="preserve">
          <source>If you need to specify a class as an argument of an annotation, use a Kotlin class (&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;). The Kotlin compiler will automatically convert it to a Java class, so that the Java code will be able to see the annotations and arguments normally.</source>
          <target state="translated">アノテーションの引数としてクラスを指定する必要がある場合は、Kotlinクラス（&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;）を使用します。Kotlinコンパイラーはそれを自動的にJavaクラスに変換するため、Javaコードは通常、注釈と引数を見ることができます。</target>
        </trans-unit>
        <trans-unit id="7448bb25e266494ddde684c5929327a96a8fb964" translate="yes" xml:space="preserve">
          <source>If you need to use a nullable &lt;code&gt;Boolean&lt;/code&gt; in a conditional statement, use &lt;code&gt;if (value == true)&lt;/code&gt; or &lt;code&gt;if (value == false)&lt;/code&gt; checks.</source>
          <target state="translated">条件ステートメントでnull許容の &lt;code&gt;Boolean&lt;/code&gt; を使用する必要がある場合は、 &lt;code&gt;if (value == true)&lt;/code&gt; または &lt;code&gt;if (value == false)&lt;/code&gt; チェックを使用します。</target>
        </trans-unit>
        <trans-unit id="2c201a6c8803ec9d0564e44a48fc6ef8489585c2" translate="yes" xml:space="preserve">
          <source>If you need to write a function that can be called without having a class instance but needs access to the internals of a class (for example, a factory method), you can write it as a member of an &lt;a href=&quot;object-declarations&quot;&gt;object declaration&lt;/a&gt; inside that class.</source>
          <target state="translated">クラスインスタンスがなくても呼び出すことができるが、クラスの内部（たとえば、ファクトリメソッド）にアクセスする必要がある関数を記述する必要がある場合は、そのクラス内の&lt;a href=&quot;object-declarations&quot;&gt;オブジェクト宣言の&lt;/a&gt;メンバーとして関数を記述できます。</target>
        </trans-unit>
        <trans-unit id="5f584df433485780683ca571ae5a89e659948c6b" translate="yes" xml:space="preserve">
          <source>If you only want to call the function and don't care about the metadata, use a function type, e.g. &lt;code&gt;(A, B) -&amp;gt; V&lt;/code&gt; for an ordinary function reference or a bound member function reference, or &lt;code&gt;A.(B, C) -&amp;gt; V&lt;/code&gt; for an unbound member function reference on &lt;code&gt;A&lt;/code&gt;. Note that &lt;code&gt;KFunction&amp;lt;V&amp;gt;&lt;/code&gt; and its subinterfaces are only available for declared functions (obtained either by explicitly referencing it in the code, or through reflection, as shown later) - only function types are available for function literals (lambda expressions or anonymous functions).</source>
          <target state="translated">関数を呼び出すだけでメタデータを気にしない場合は、関数タイプを使用します。例： &lt;code&gt;(A, B) -&amp;gt; V&lt;/code&gt; 通常の関数参照またはバインドされたメンバー関数参照、または &lt;code&gt;A.(B, C) -&amp;gt; V&lt;/code&gt; に結合していないメンバ関数参照の &lt;code&gt;A&lt;/code&gt; 。 &lt;code&gt;KFunction&amp;lt;V&amp;gt;&lt;/code&gt; とそのサブインターフェースは、宣言された関数（コードで明示的に参照するか、後で示すようにリフレクションによって取得）でのみ使用できることに注意してください-関数リテラル（ラムダ式または無名関数）で使用できるのは関数タイプのみです。 。</target>
        </trans-unit>
        <trans-unit id="8014e84399844604d4127e5bfb102e3054b9b7f6" translate="yes" xml:space="preserve">
          <source>If you operate nested collections, you may find the standard library functions that provide flat access to nested collection elements useful.</source>
          <target state="translated">入れ子になったコレクションを操作する場合、入れ子になったコレクション要素へのフラットアクセスを提供する標準ライブラリ関数が便利です。</target>
        </trans-unit>
        <trans-unit id="aa8d397c2c2050d55c50d82eec1a501b49617481" translate="yes" xml:space="preserve">
          <source>If you override a &lt;code&gt;protected&lt;/code&gt; member and do not specify the visibility explicitly, the overriding member will also have &lt;code&gt;protected&lt;/code&gt; visibility.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; メンバーをオーバーライドし、可視性を明示的に指定しない場合、オーバーライドするメンバーも可視性を &lt;code&gt;protected&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bd8f947a24ab8c99f576a413b868a14fd70348dc" translate="yes" xml:space="preserve">
          <source>If you previously used the &lt;a href=&quot;https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config&quot;&gt;Android support&lt;/a&gt; for annotation processors, replace usages of the &lt;code&gt;annotationProcessor&lt;/code&gt; configuration with &lt;code&gt;kapt&lt;/code&gt;. If your project contains Java classes, &lt;code&gt;kapt&lt;/code&gt; will also take care of them.</source>
          <target state="translated">以前にアノテーションプロセッサの&lt;a href=&quot;https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config&quot;&gt;Androidサポート&lt;/a&gt;を使用していた場合は、 &lt;code&gt;annotationProcessor&lt;/code&gt; 構成の使用法を &lt;code&gt;kapt&lt;/code&gt; に置き換えます。プロジェクトにJavaクラスが含まれている場合、 &lt;code&gt;kapt&lt;/code&gt; もそれらを処理します。</target>
        </trans-unit>
        <trans-unit id="3126f475d393c0188e7088d866ab3c517a722979" translate="yes" xml:space="preserve">
          <source>If you publish several features in the experimental state, declare a marker for each. Separate markers make the use of experimental features safer for your clients: they'll be able to use only the features that they explicitly accept. This also lets you graduate the features to stable independently.</source>
          <target state="translated">実験的な状態で複数の機能を公開する場合は、それぞれにマーカーを宣言します。マーカーを分けておくことで、実験的な機能をより安全に使用することができます。これにより、機能を独立して安定版に移行させることができます。</target>
        </trans-unit>
        <trans-unit id="df8a586d7260c254feebf62ecf6abe57e497a3fe" translate="yes" xml:space="preserve">
          <source>If you really really need a mixed-type collection, you can use the element type &lt;code&gt;Any&lt;/code&gt; - but you'll need typecasting to get the elements back to their proper type again, so if what you want is a multiple-value return from a function, please use the per-element-typed &lt;code&gt;Pair&lt;/code&gt; or &lt;code&gt;Triple&lt;/code&gt; instead. If you need four or more elements, consider making a &lt;a href=&quot;classes#data-classes&quot;&gt;data class&lt;/a&gt; for the return type instead (which you should ideally do for two or three elements as well, especially if it's a public function, since it gives you proper names for the elements) - it's very easy and usually a oneliner.</source>
          <target state="translated">本当に混合型のコレクションが必要な場合は、要素型 &lt;code&gt;Any&lt;/code&gt; を使用できますが、要素を適切な型に戻すには型キャストが必要になるため、関数から複数の値を返す場合は、代わりに要素ごとに型指定された &lt;code&gt;Pair&lt;/code&gt; または &lt;code&gt;Triple&lt;/code&gt; を使用してください。4つ以上の要素が必要な場合は、代わりに戻り値の型の&lt;a href=&quot;classes#data-classes&quot;&gt;データクラス&lt;/a&gt;を作成することを検討してください（2つまたは3つの要素にも理想的です。特に、それが要素の適切な名前を提供するため、パブリック関数の場合）。とても簡単で、通常はワンライナーです。</target>
        </trans-unit>
        <trans-unit id="cbc8324a9f6502600707b1d372c5b0e01758d5e6" translate="yes" xml:space="preserve">
          <source>If you really want to, you can both initialize and specify the type on the same line. This is mostly useful if you're dealing with a class hierarchy (more on that later) and you want the variable type to be a base type of the value's class:</source>
          <target state="translated">本当に必要ならば、初期化と型の指定を同じ行で行うことができます。これは、クラス階層を扱っていて(これについては後述します)、変数の型を値のクラスのベース型にしたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="dd3a00df64d22ebf69e57bb704a9d62539a93298" translate="yes" xml:space="preserve">
          <source>If you start by replacing &lt;code&gt;GlobalScope.launch&lt;/code&gt; by &lt;code&gt;thread&lt;/code&gt;, the compiler produces the following error:</source>
          <target state="translated">&lt;code&gt;GlobalScope.launch&lt;/code&gt; を &lt;code&gt;thread&lt;/code&gt; で置き換えることから始めると、コンパイラーは次のエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="589b4c81823f6922542c45e2902c148531d2b494" translate="yes" xml:space="preserve">
          <source>If you target JavaScript, use the &lt;code&gt;stdlib-js&lt;/code&gt; dependency.</source>
          <target state="translated">JavaScriptをターゲットにする場合は、 &lt;code&gt;stdlib-js&lt;/code&gt; 依存関係を使用します。</target>
        </trans-unit>
        <trans-unit id="39efa722c74de834ad1bd8a4e4c201bd7dac494b" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;kapt&quot;&gt;kapt&lt;/a&gt;, note that the kapt annotation processing tasks are not cached by default. However, you can enable caching for them manually. See the &lt;a href=&quot;kapt#gradle-build-cache-support-since-1220&quot;&gt;kapt page&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;kapt&quot;&gt;kapt&lt;/a&gt;を使用する場合、kaptアノテーション処理タスクはデフォルトではキャッシュされないことに注意してください。ただし、それらのキャッシュを手動で有効にすることができます。詳細については、&lt;a href=&quot;kapt#gradle-build-cache-support-since-1220&quot;&gt;kaptページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a73c7aeee6bdc5c7806d3e53e9294fc8ac4610bf" translate="yes" xml:space="preserve">
          <source>If you use Spring, you can enable the &lt;em&gt;kotlin-spring&lt;/em&gt; compiler plugin instead of specifying Spring annotations manually. The kotlin-spring is a wrapper on top of all-open, and it behaves exactly the same way.</source>
          <target state="translated">Springを使用する場合は、Springアノテーションを手動で指定する代わりに、&lt;em&gt;kotlin-spring&lt;/em&gt;コンパイラプラグインを有効にすることができます。kotlin-springはall-openのラッパーであり、まったく同じように動作します。</target>
        </trans-unit>
        <trans-unit id="1bce77e8c93a7ca161789d86b2fef454e9ed0e0f" translate="yes" xml:space="preserve">
          <source>If you use annotation processors for your &lt;code&gt;androidTest&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; sources, the respective &lt;code&gt;kapt&lt;/code&gt; configurations are named &lt;code&gt;kaptAndroidTest&lt;/code&gt; and &lt;code&gt;kaptTest&lt;/code&gt;. Note that &lt;code&gt;kaptAndroidTest&lt;/code&gt; and &lt;code&gt;kaptTest&lt;/code&gt; extends &lt;code&gt;kapt&lt;/code&gt;, so you can just provide the &lt;code&gt;kapt&lt;/code&gt; dependency and it will be available both for production sources and tests.</source>
          <target state="translated">&lt;code&gt;androidTest&lt;/code&gt; または &lt;code&gt;test&lt;/code&gt; ソースにアノテーションプロセッサを使用する場合、それぞれの &lt;code&gt;kapt&lt;/code&gt; 構成は &lt;code&gt;kaptAndroidTest&lt;/code&gt; および &lt;code&gt;kaptTest&lt;/code&gt; という名前になります。ことを注意 &lt;code&gt;kaptAndroidTest&lt;/code&gt; と &lt;code&gt;kaptTest&lt;/code&gt; が拡張 &lt;code&gt;kapt&lt;/code&gt; を、あなたはただ提供することができます &lt;code&gt;kapt&lt;/code&gt; の依存関係を、それが両方の生産源とテストのために利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="8e5fa9bba802b4996dceed857e221c7dc79c3552" translate="yes" xml:space="preserve">
          <source>If you use the NV Kotlin compiler and have the OV standard library or the OV reflection library in the classpath, it can be a sign that the project is misconfigured. To prevent unexpected problems during compilation or at runtime, we suggest either updating the dependencies to NV, or specifying the API version / language version arguments explicitly. Otherwise the compiler detects that something can go wrong and reports a warning.</source>
          <target state="translated">NVのKotlinコンパイラを使用していて、クラスパスにOV標準ライブラリやOV反射ライブラリがある場合、プロジェクトの設定が間違っているサインである可能性があります。コンパイル中や実行時の予期せぬ問題を防ぐために、依存関係をNVに更新するか、APIバージョン/言語バージョンの引数を明示的に指定することをお勧めします。そうしないと、コンパイラは何かが間違っている可能性があることを検出し、警告を報告します。</target>
        </trans-unit>
        <trans-unit id="f69388ccfa9be1025c7351e156b510d0110f1b95" translate="yes" xml:space="preserve">
          <source>If you want a literal &lt;code&gt;$&lt;/code&gt;, you need to escape it: &lt;code&gt;\$&lt;/code&gt;. Escaping generally works the same way as in Python, with a similar set of standard escape sequences.</source>
          <target state="translated">リテラル &lt;code&gt;$&lt;/code&gt; が必要な場合は、エスケープする必要があります： &lt;code&gt;\$&lt;/code&gt; 。エスケープは通常、Pythonと同じように機能し、類似した標準エスケープシーケンスのセットを使用します。</target>
        </trans-unit>
        <trans-unit id="aeb2cd1321a6da714d1670aa5db99ba2841082d1" translate="yes" xml:space="preserve">
          <source>If you want to be able to intercept an assignment and &quot;veto&quot; it, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable&quot;&gt;&lt;code&gt;vetoable()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;observable()&lt;/code&gt;. The handler passed to the &lt;code&gt;vetoable&lt;/code&gt; is called &lt;em&gt;before&lt;/em&gt; the assignment of a new property value has been performed.</source>
          <target state="translated">割り当てをインターセプトして「拒否」できるようにするには、 &lt;code&gt;observable()&lt;/code&gt; ではなく&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable&quot;&gt; &lt;code&gt;vetoable()&lt;/code&gt; を&lt;/a&gt;使用します。 &lt;code&gt;vetoable&lt;/code&gt; 渡されたハンドラーは、新しいプロパティ値の割り当てが実行される&lt;em&gt;前&lt;/em&gt;に呼び出されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bfcb549b385e785251e8b67f2103cc999018679b" translate="yes" xml:space="preserve">
          <source>If you want to be more explicit about the fact that you're creating a function, you can make an &lt;em&gt;anonymous function&lt;/em&gt;, which is still an expression rather than a declaration:</source>
          <target state="translated">関数を作成しているという事実をより明確にしたい場合は、宣言ではなく式である&lt;em&gt;無名関数&lt;/em&gt;を作成できます。</target>
        </trans-unit>
        <trans-unit id="696e4536ad6464f41098a1506dbe37ed6e039609" translate="yes" xml:space="preserve">
          <source>If you want to check for &lt;em&gt;not&lt;/em&gt; being an instance of a type, use &lt;code&gt;!is&lt;/code&gt;. Note that &lt;code&gt;null&lt;/code&gt; is never an instance of any non-nullable type, but it is always an &quot;instance&quot; of any nullable type (even though it technically isn't an instance, but an absence of any instance).</source>
          <target state="translated">タイプのインスタンスで&lt;em&gt;ない&lt;/em&gt;ことを確認する場合は、 &lt;code&gt;!is&lt;/code&gt; を使用します。 &lt;code&gt;null&lt;/code&gt; はnull可能ではない型のインスタンスではないことに注意してください。ただし、null可能な型の「インスタンス」であることに注意してください（技術的にはインスタンスではなく、インスタンスがない場合でも）。</target>
        </trans-unit>
        <trans-unit id="da257f8128fc0a8ca8d706e6f33a71205b6846f0" translate="yes" xml:space="preserve">
          <source>If you want to customize your builds or run configuration, refer to the Android Studio &lt;a href=&quot;https://developer.android.com/studio/run&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">ビルドまたは実行構成をカスタマイズする場合は、Android Studioの&lt;a href=&quot;https://developer.android.com/studio/run&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6811d9ac7923673de93e7c6cb86e0dcf12f4b539" translate="yes" xml:space="preserve">
          <source>If you want to declare your module's API as experimental, create an annotation class to use as its &lt;em&gt;experimental marker&lt;/em&gt;. This class must be annotated with &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-experimental/index&quot;&gt;@Experimental&lt;/a&gt;:</source>
          <target state="translated">モジュールのAPIを実験的として宣言する場合は、&lt;em&gt;実験的マーカー&lt;/em&gt;として使用する注釈クラスを作成し&lt;em&gt;ます&lt;/em&gt;。このクラスには&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-experimental/index&quot;&gt;@Experimental&lt;/a&gt;アノテーションを付ける必要があります：</target>
        </trans-unit>
        <trans-unit id="03930681c826a10c017d1c305e0dfdcd631eb099" translate="yes" xml:space="preserve">
          <source>If you want to do something that does not fit into this &quot;implicit backing field&quot; scheme, you can always fall back to having a &lt;em&gt;backing property&lt;/em&gt;:</source>
          <target state="translated">この「暗黙のバッキングフィールド」のスキームに当てはまらないことをしたい場合は、常に&lt;em&gt;バッキングプロパティ&lt;/em&gt;を使用するようにフォールバックでき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="469cbead1816f95552e8fb9afc4584e38910eba1" translate="yes" xml:space="preserve">
          <source>If you want to exclude the last value, use &lt;code&gt;until&lt;/code&gt;:</source>
          <target state="translated">最後の値を除外する場合は、 &lt;code&gt;until&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="21db5d6173e4569eae43123218189b3a3fd619bd" translate="yes" xml:space="preserve">
          <source>If you want to group elements and then apply an operation to all groups at one time, use the function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/grouping-by&quot;&gt;&lt;code&gt;groupingBy()&lt;/code&gt;&lt;/a&gt;. It returns an instance of the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-grouping/index&quot;&gt;&lt;code&gt;Grouping&lt;/code&gt;&lt;/a&gt; type. The &lt;code&gt;Grouping&lt;/code&gt; instance lets you apply operations to all groups in a lazy manner: the groups are actually built right before the operation execution.</source>
          <target state="translated">要素を&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/grouping-by&quot;&gt; &lt;code&gt;groupingBy()&lt;/code&gt; &lt;/a&gt;から、一度にすべてのグループに操作を適用する場合は、関数groupingBy（）を使用します。これは、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-grouping/index&quot;&gt; &lt;code&gt;Grouping&lt;/code&gt; &lt;/a&gt;タイプのインスタンスを返します。 &lt;code&gt;Grouping&lt;/code&gt; グループが実際に右の操作を実行する前に構築されています：インスタンスは、あなたが怠惰な方法で、すべてのグループに操作を適用することができます。</target>
        </trans-unit>
        <trans-unit id="28c8357f8e591acaadaa35ef0312974da5893976" translate="yes" xml:space="preserve">
          <source>If you want to impose additional constraints, you must use a separate &lt;code&gt;where&lt;/code&gt; clause, in which case the type parameter must be a subclass of the given class (if you specify a class, and you can specify at most one) &lt;em&gt;and&lt;/em&gt; implement all the given interfaces. You may then access all the public members of all the given types whenever you've got a value of type &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">追加の制約を課したい場合は、別個の &lt;code&gt;where&lt;/code&gt; 句を使用する必要があります。その場合、typeパラメータは特定のクラスのサブクラスでなければならず（クラスを指定し、最大で1つを指定できる場合）、特定のすべて&lt;em&gt;を&lt;/em&gt;実装します。インターフェース。その後、型 &lt;code&gt;T&lt;/code&gt; の値を取得すると、指定されたすべての型のすべてのパブリックメンバーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ad4ce20803bf2d9ea3efb4e51b2111ecb76db405" translate="yes" xml:space="preserve">
          <source>If you want to iterate through an array or a list with an index, you can do it this way:</source>
          <target state="translated">インデックスを持つ配列やリストを反復処理したい場合は、このようにします。</target>
        </trans-unit>
        <trans-unit id="c6675875ca0e15a9e0e94e4e62bcc35aa2271753" translate="yes" xml:space="preserve">
          <source>If you want to keep your code compatible with the 1.0 standard library, you can pass &lt;code&gt;-api-version 1.0&lt;/code&gt;.</source>
          <target state="translated">コードを1.0標準ライブラリと互換性を維持したい場合は、 &lt;code&gt;-api-version 1.0&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a90f40cf003c1ca63835c4f5252dade99a0b6302" translate="yes" xml:space="preserve">
          <source>If you want to learn different Kotlin features, try &lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;.</source>
          <target state="translated">Kotlinのさまざまな機能を学びたい場合は、&lt;a href=&quot;koans&quot;&gt;Kotlin Koansを&lt;/a&gt;試してください。</target>
        </trans-unit>
        <trans-unit id="00db4d51336388a60b35cfdb52f35a642fd46d81" translate="yes" xml:space="preserve">
          <source>If you want to look at the metadata of a function (e.g. its name), use &lt;code&gt;KFunction&amp;lt;V&amp;gt;&lt;/code&gt; or one of its subinterfaces, where &lt;code&gt;V&lt;/code&gt; is the function's return type. Here's a basic example:</source>
          <target state="translated">あなたは、関数のメタデータ（例えば、名前）、使用を見たい場合は &lt;code&gt;KFunction&amp;lt;V&amp;gt;&lt;/code&gt; またはそのサブインタフェースの1、 &lt;code&gt;V&lt;/code&gt; は、関数の戻り値の型です。基本的な例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1d1730df83789869c0eec8797d86c76b973936cd" translate="yes" xml:space="preserve">
          <source>If you want to restrict the set of subclasses of a base class, you can declare the base class to be &lt;code&gt;sealed&lt;/code&gt; (which also makes it abstract), in which case you can only declare subclasses in the same file. The compiler then knows the complete set of possible subclasses, which will let you do exhaustive &lt;code&gt;when&lt;/code&gt; expression for all the possible subtypes without the need for an &lt;code&gt;else&lt;/code&gt; clause (and if you add another subclass in the future and forget to update the &lt;code&gt;when&lt;/code&gt;, the compiler will let you know).</source>
          <target state="translated">基本クラスのサブクラスのセットを制限したい場合は、基本クラスを &lt;code&gt;sealed&lt;/code&gt; するように宣言できます（これにより抽象化もできます）。この場合、同じファイルでサブクラスのみを宣言できます。コンパイラーは次に、可能なサブクラスの完全なセットを認識します。これにより、 &lt;code&gt;else&lt;/code&gt; 節を必要とせずにすべての可能なサブタイプの &lt;code&gt;when&lt;/code&gt; 式を網羅的に実行できます（将来、別のサブクラスを追加して &lt;code&gt;when&lt;/code&gt; の更新を忘れた場合、コンパイラーお知らせします）。</target>
        </trans-unit>
        <trans-unit id="24aa907f13ca700b9ceeaa1262123234a9393fc1" translate="yes" xml:space="preserve">
          <source>If you want to see all available options run</source>
          <target state="translated">利用可能なオプションをすべて表示したい場合は、次のように実行してください。</target>
        </trans-unit>
        <trans-unit id="2d21aa936de4e7ff46724ca50ee4a418c4b5e521" translate="yes" xml:space="preserve">
          <source>If you want to see how your task will be look to the learner, right-click the &lt;code&gt;Task.kt&lt;/code&gt; file in the &lt;strong&gt;Project&lt;/strong&gt; tool window, and choose &lt;strong&gt;Course Creator -&amp;gt; Show Preview&lt;/strong&gt;:</source>
          <target state="translated">タスクが学習者にどのように見えるかを確認したい場合は、&lt;strong&gt;プロジェクト&lt;/strong&gt;ツールウィンドウで &lt;code&gt;Task.kt&lt;/code&gt; ファイルを右クリックし、&lt;strong&gt;コース作成者-&amp;gt;プレビューを表示&lt;/strong&gt;を選択します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81dec7b57d1ae160cc859398f6b261d2b3f48fa4" translate="yes" xml:space="preserve">
          <source>If you want to specify a custom label for the link, use the Markdown reference-style syntax:</source>
          <target state="translated">リンクにカスタムラベルを指定したい場合は、Markdown参照スタイルの構文を使用します。</target>
        </trans-unit>
        <trans-unit id="e8b98cb29aff85793ce838953d8ec8871fe09a05" translate="yes" xml:space="preserve">
          <source>If you want to start from scratch with the task, use the &lt;strong&gt;Reset&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel:</source>
          <target state="translated">タスクを最初から開始する場合は、&lt;strong&gt;タスクの説明&lt;/strong&gt;パネルの上部にある&lt;strong&gt;リセット&lt;/strong&gt;アイコンを使用します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef089a53351dae0337ca675a4a633d10abb6eccf" translate="yes" xml:space="preserve">
          <source>If you want to use a value only if it satisfies a certain condition, try &lt;code&gt;takeIf()&lt;/code&gt;, which returns the value it's called on if it satisfies the given predicate, and null otherwise. There's also &lt;code&gt;takeUnless()&lt;/code&gt;, which inverts the logic. You can follow this with a &lt;code&gt;?.&lt;/code&gt; to perform an operation on the value only if it satisfies the predicate. Below, we compute the square of some expression, but only if the expression value is at least 42:</source>
          <target state="translated">特定の条件を満たす場合にのみ値を使用したい場合は、 &lt;code&gt;takeIf()&lt;/code&gt; を試してください。これは、指定された述部を満たす場合に呼び出された値を返し、それ以外の場合はnullを返します。ロジックを反転させる &lt;code&gt;takeUnless()&lt;/code&gt; もあります。これに &lt;code&gt;?.&lt;/code&gt; 付けることができます。述語を満たす場合にのみ、値に対して演算を実行します。以下では、式の2乗を計算しますが、式の値が少なくとも42の場合のみです。</target>
        </trans-unit>
        <trans-unit id="87bc643ce85513f6868cb2e9de9823d1f4369259" translate="yes" xml:space="preserve">
          <source>If you want to write strings gradually, you need to create an &lt;code&gt;OutputStreamWriter&lt;/code&gt; by calling &lt;code&gt;writer()&lt;/code&gt; on the file object. You can write binary data to a file by calling &lt;code&gt;outputStream()&lt;/code&gt; on a file object and use the resulting &lt;code&gt;OutputStream&lt;/code&gt; to write bytes.</source>
          <target state="translated">文字列を徐々に書き込む場合は、ファイルオブジェクトで &lt;code&gt;writer()&lt;/code&gt; を呼び出して、 &lt;code&gt;OutputStreamWriter&lt;/code&gt; を作成する必要があります。ファイルオブジェクトで &lt;code&gt;outputStream()&lt;/code&gt; を呼び出してバイナリデータをファイルに書き込み、結果の &lt;code&gt;OutputStream&lt;/code&gt; を使用してバイトを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="a41befb145b42cbf8131f21728e484a8a91115d2" translate="yes" xml:space="preserve">
          <source>If you write the same without &lt;code&gt;let&lt;/code&gt;, you'll have to introduce a new variable and repeat its name whenever you use it.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; なしで同じものを書く場合、新しい変数を導入し、使用するたびにその名前を繰り返す必要があります。</target>
        </trans-unit>
        <trans-unit id="0a3aaf1f9dd9fea6023de83a437602a5eadebf5e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re on Ubuntu 16.04 or later, you can install the compiler from the command line:</source>
          <target state="translated">Ubuntu 16.04以降を使用している場合は、コマンドラインからコンパイラをインストールできます。</target>
        </trans-unit>
        <trans-unit id="4ef3b492d472d99a86a122fa8edba6106fbe3c08" translate="yes" xml:space="preserve">
          <source>If you'd rather do &lt;code&gt;x.unsigned&lt;/code&gt;, you can define an extension property:</source>
          <target state="translated">あなたはむしろないと思います場合 &lt;code&gt;x.unsigned&lt;/code&gt; 、あなたは拡張プロパティを定義することができます。</target>
        </trans-unit>
        <trans-unit id="07dd95cbbfcdccfc3f0d530d8306040139f15ae7" translate="yes" xml:space="preserve">
          <source>If you're a &lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt; user, you can install the compiler with:</source>
          <target state="translated">あなたがいる場合は&lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPortsのの&lt;/a&gt;ユーザー、あなたがコンパイラをインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="368782cf6eaff197b952127bcc0c0565b3479378" translate="yes" xml:space="preserve">
          <source>If you're developing a library to be used by other Kotlin applications, you can produce the .jar file without including the Kotlin runtime into it.</source>
          <target state="translated">他のKotlinアプリケーションで使用するライブラリを開発している場合は、Kotlinランタイムを含まずに.jarファイルを作成することができます。</target>
        </trans-unit>
        <trans-unit id="766f702953f8980e6bc50e185cc1d656f34dfbc1" translate="yes" xml:space="preserve">
          <source>If you're targeting JDK 7 or JDK 8, you can use extended versions of the Kotlin standard library which contain additional extension functions for APIs added in new JDK versions. Instead of &lt;code&gt;kotlin-stdlib&lt;/code&gt;, use &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; or &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt;, depending on your JDK version (for Kotlin 1.1.x use &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt; as the &lt;code&gt;jdk&lt;/code&gt; counterparts were introduced in 1.2.0).</source>
          <target state="translated">JDK 7またはJDK 8を対象としている場合は、新しいJDKバージョンで追加されたAPIの追加の拡張関数を含むKotlin標準ライブラリの拡張バージョンを使用できます。代わりに &lt;code&gt;kotlin-stdlib&lt;/code&gt; 、使用 &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; または &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; （お使いのJDKのバージョンに応じて、Kotlin 1.1.xの使用を &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; と &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt; として &lt;code&gt;jdk&lt;/code&gt; のカウンターパートは1.2で導入されました.0）。</target>
        </trans-unit>
        <trans-unit id="b775395194955c271aef49dac84498fbe90d7450" translate="yes" xml:space="preserve">
          <source>If you're targeting the JVM platform, you can also use Java's reflection system directly. In this example, we grab a function reference from an object's class by specifying the function's name as a string (if the function takes parameters, you also need to specify their types), and then we call it. Note that we didn't mention &lt;code&gt;String&lt;/code&gt; anywhere - this technique works without knowing what the object's class is, but it will raise an exception if the object's class doesn't have the requested function. However, Java-style function references do not have type information, so you won't get verification of the parameter types, and you must cast the return value:</source>
          <target state="translated">JVMプラットフォームをターゲットにしている場合は、Javaのリフレクションシステムを直接使用することもできます。この例では、関数の名前を文字列として指定してオブジェクトのクラスから関数参照を取得し（関数がパラメーターを取る場合は、その型も指定する必要があります）、それを呼び出します。 &lt;code&gt;String&lt;/code&gt; についてはどこにも触れなかったことに注意してください。この手法はオブジェクトのクラスが何であるかを知らなくても機能しますが、オブジェクトのクラスに要求された関数がない場合は例外が発生します。ただし、Javaスタイルの関数参照には型情報がないため、パラメーターの型の検証は行われず、戻り値をキャストする必要があります。</target>
        </trans-unit>
        <trans-unit id="5d2933676dc2f7e28b956599b006e00954f9395f" translate="yes" xml:space="preserve">
          <source>If you're using &lt;em&gt;if&lt;/em&gt; as an expression rather than a statement (for example, returning its value or assigning it to a variable), the expression is required to have an &lt;code&gt;else&lt;/code&gt; branch.</source>
          <target state="translated">ステートメントではなく式として&lt;em&gt;if&lt;/em&gt;を使用している&lt;em&gt;場合&lt;/em&gt;（たとえば、その値を返す、または変数に割り当てる）、式には &lt;code&gt;else&lt;/code&gt; 分岐が必要です。</target>
        </trans-unit>
        <trans-unit id="51fc2cadbf8df70dee87fb5d749d2ee884d218b0" translate="yes" xml:space="preserve">
          <source>If you're using a generic class whose type parameters haven't been declared in a variant way (either because its authors didn't think of it, or because the type parameters can't have either variance kind because they are used both as parameter types and return types), you can still use it in a variant way thanks to &lt;em&gt;type projection&lt;/em&gt;. The term &quot;projection&quot; refers to the fact that when you do this, you might restrict yourself to using only some of its members - so you're in a sense only seeing a partial, or &quot;projected&quot; version of the class. Let's look again at our &lt;code&gt;Bowl&lt;/code&gt; class, but without the variant interfaces this time:</source>
          <target state="translated">型パラメーターがさまざまな方法で宣言されていないジェネリッククラスを使用している場合（その作成者がそれを考慮していなかったため、または型パラメーターが両方として使用されているため、型パラメーターに分散の種類を指定できないため）パラメータ型と戻り値型）、&lt;em&gt;型プロジェクションの&lt;/em&gt;おかげで、まださまざまな方法で使用できます。 「プロジェクション」という用語は、これを行うと、一部のメンバーのみを使用するように制限する場合があるという事実を意味します。つまり、ある意味では、クラスの部分バージョンまたは「プロジェクション」バージョンのみが表示されます。もう一度、 &lt;code&gt;Bowl&lt;/code&gt; クラスを見てみましょう。ただし、今回はバリアントインターフェイスはありません。</target>
        </trans-unit>
        <trans-unit id="f6e51da97890d2ae9ab3d189065498b378cc4fb2" translate="yes" xml:space="preserve">
          <source>If you've got one string that you want to write to a file, overwriting the existing contents if the file already exists, do this (again, UTF-8 is the default encoding):</source>
          <target state="translated">ファイルに書き込みたい文字列が1つある場合、ファイルがすでに存在する場合は既存の内容を上書きして、このようにします (ここでもデフォルトのエンコーディングは UTF-8 です)。</target>
        </trans-unit>
        <trans-unit id="d91079d5275bf77f335cf6cb84c315d0b54d9ee8" translate="yes" xml:space="preserve">
          <source>If you've just upgraded to Kotlin 1.1 but can not use new language features yet (e.g. because some of your teammates may not have upgraded), you can pass &lt;code&gt;-language-version 1.0&lt;/code&gt;, which will restrict all APIs and language features to 1.0.</source>
          <target state="translated">Kotlin 1.1にアップグレードしたばかりで、まだ新しい言語機能を使用できない場合（たとえば、チームメートの一部がアップグレードしていない可能性があるため）、 &lt;code&gt;-language-version 1.0&lt;/code&gt; を渡すと、すべてのAPIと言語機能が1.0に制限されます。</target>
        </trans-unit>
        <trans-unit id="6a4d49a0aa58db91f5538f1484a110d84d269171" translate="yes" xml:space="preserve">
          <source>If your application already uses DBFlow, you can safely introduce Kotlin into your project. You can gradually convert existing code to Kotlin (ensuring that everything compiles along the way). The converted code doesn't differ much from Java. For instance, declaring a table looks similar to Java with the small difference that default values for properties must be specified explicitly:</source>
          <target state="translated">もしあなたのアプリケーションが既に DBFlow を使用しているのであれば、Kotlin をプロジェクトに安全に導入することができます。既存のコードを徐々にKotlinに変換していくことができます(途中ですべてのコードがコンパイルされることを確認してください)。変換されたコードはJavaとあまり変わりません。例えば、テーブルの宣言は Java と似ていますが、プロパティのデフォルト値を明示的に指定しなければならないという小さな違いがあります。</target>
        </trans-unit>
        <trans-unit id="3503de21b9cb0b7cba965dc4634f2918727f903d" translate="yes" xml:space="preserve">
          <source>If your class requires more advanced serialization logic, you can write it inside a companion class:</source>
          <target state="translated">クラスでより高度なシリアライズロジックが必要な場合は、コンパニオンクラスの中に書くことができます。</target>
        </trans-unit>
        <trans-unit id="eacc53066a886e6486df3248d96a52d89fd95863" translate="yes" xml:space="preserve">
          <source>If your code is too clever for the compiler, and you know without the help of &lt;code&gt;is&lt;/code&gt; that &lt;code&gt;x&lt;/code&gt; is an instance of &lt;code&gt;Person&lt;/code&gt; but the compiler doesn't, you can &lt;em&gt;cast&lt;/em&gt; your value with &lt;code&gt;as&lt;/code&gt;:</source>
          <target state="translated">あなたのコードは、コンパイラのためにあまりにも巧妙で、そしてあなたがの助けなし知っている場合 &lt;code&gt;is&lt;/code&gt; ことを &lt;code&gt;x&lt;/code&gt; のインスタンスである &lt;code&gt;Person&lt;/code&gt; しかし、コンパイラは、次のことができていない&lt;em&gt;キャスト&lt;/em&gt;を使用して値を &lt;code&gt;as&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2ecf8bd14ee3aa94f5fa13c2b5cd616c3b320e5a" translate="yes" xml:space="preserve">
          <source>If your project uses &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect.full/index&quot;&gt;Kotlin reflection&lt;/a&gt; or testing facilities, you need to add the corresponding dependencies as well. The artifact IDs are &lt;code&gt;kotlin-reflect&lt;/code&gt; for the reflection library, and &lt;code&gt;kotlin-test&lt;/code&gt; and &lt;code&gt;kotlin-test-junit&lt;/code&gt; for the testing libraries.</source>
          <target state="translated">プロジェクトで&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect.full/index&quot;&gt;Kotlinリフレクション&lt;/a&gt;またはテスト機能を使用している場合は、対応する依存関係も追加する必要があります。アーティファクトIDは、リフレクションライブラリの場合は &lt;code&gt;kotlin-reflect&lt;/code&gt; 、テストライブラリの場合は &lt;code&gt;kotlin-test&lt;/code&gt; および &lt;code&gt;kotlin-test-junit&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="aaffb39c3271a99cd3c6b1dcd26285bb7f6d4133" translate="yes" xml:space="preserve">
          <source>If your project uses &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect.full/index&quot;&gt;Kotlin reflection&lt;/a&gt; or testing facilities, you need to add the corresponding dependencies as well:</source>
          <target state="translated">プロジェクトで&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect.full/index&quot;&gt;Kotlinリフレクション&lt;/a&gt;またはテスト機能を使用している場合は、対応する依存関係も追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="ff4ecabd35e3e545f9518b5b102d6fa77c32607a" translate="yes" xml:space="preserve">
          <source>If, by any chance, we need &quot;just an object&quot;, with no nontrivial supertypes, we can simply say:</source>
          <target state="translated">ひょっとして、非自明なスーパータイプを持たない「ただのオブジェクト」が必要な場合は、単純に言えば、「ただのオブジェクト」と言えます。</target>
        </trans-unit>
        <trans-unit id="f78ba0d5d02014df85f65107c7688ad5093fc4b0" translate="yes" xml:space="preserve">
          <source>If, upon updating from one version to another, some code that used to work doesn't work any more, it is an &lt;em&gt;incompatible change&lt;/em&gt; in the language (sometimes referred to as &quot;breaking change&quot;). There can be debates as to what &quot;doesn't work any more&quot; means precisely in some cases, but it definitely includes the following:</source>
          <target state="translated">あるバージョンから別のバージョンに更新したときに、以前は機能していた一部のコードが機能しなくなった場合、それは言語の&lt;em&gt;互換性のない変更&lt;/em&gt;です（「重大な変更」と呼ばれることもあります）。 「これ以上機能しない」が何を意味するのかについては、場合によっては正確に論争がある可能性がありますが、これには間違いなく以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="ea0b39c7ffc510626fe28212437d8a57285e5a4c" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException</source>
          <target state="translated">IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="906f0c92cf03edbafe4a5d12e37d92701ba25962" translate="yes" xml:space="preserve">
          <source>IllegalCallableAccessException</source>
          <target state="translated">IllegalCallableAccessException</target>
        </trans-unit>
        <trans-unit id="6bfee05d69b5aa826fde5d373d8ebea121200b58" translate="yes" xml:space="preserve">
          <source>IllegalCharacterConversionException</source>
          <target state="translated">IllegalCharacterConversionException</target>
        </trans-unit>
        <trans-unit id="6d13e3edbafba5c6ba6e57ae6bc8267296d1bf66" translate="yes" xml:space="preserve">
          <source>IllegalPropertyDelegateAccessException</source>
          <target state="translated">IllegalPropertyDelegateAccessException</target>
        </trans-unit>
        <trans-unit id="63b3abc14a5b2c9db143083b94887cb72910c4de" translate="yes" xml:space="preserve">
          <source>IllegalStateException</source>
          <target state="translated">IllegalStateException</target>
        </trans-unit>
        <trans-unit id="0ef9de975cdef9d9d9b896b68103ad59db30e33a" translate="yes" xml:space="preserve">
          <source>ImageBitmap</source>
          <target state="translated">ImageBitmap</target>
        </trans-unit>
        <trans-unit id="33f05a29887232f2adef5f1b64b04d6cf8bd78f2" translate="yes" xml:space="preserve">
          <source>ImageBitmapOptions</source>
          <target state="translated">ImageBitmapOptions</target>
        </trans-unit>
        <trans-unit id="91a39bdc5a33f203d5c2f138f0da931369fac84f" translate="yes" xml:space="preserve">
          <source>ImageBitmapRenderingContext</source>
          <target state="translated">ImageBitmapRenderingContext</target>
        </trans-unit>
        <trans-unit id="1a722437bfbd0c07b7f837b5b4332fd5d966ead2" translate="yes" xml:space="preserve">
          <source>ImageBitmapRenderingContextSettings</source>
          <target state="translated">ImageBitmapRenderingContextSettings</target>
        </trans-unit>
        <trans-unit id="682b65e19d67a5e783299b757e21bec2832c6fb5" translate="yes" xml:space="preserve">
          <source>ImageData</source>
          <target state="translated">ImageData</target>
        </trans-unit>
        <trans-unit id="2217055c382ca08984df9c834dee428b5ed7c541" translate="yes" xml:space="preserve">
          <source>ImageOrientation</source>
          <target state="translated">ImageOrientation</target>
        </trans-unit>
        <trans-unit id="3394b71415cd8bd55fc9255b5d6beaf734d6f770" translate="yes" xml:space="preserve">
          <source>ImageSmoothingQuality</source>
          <target state="translated">ImageSmoothingQuality</target>
        </trans-unit>
        <trans-unit id="f98fd49f8f974a3886c42cb3693e5ffdf40539ee" translate="yes" xml:space="preserve">
          <source>Immediate superclasses of this class, in the order they are listed in the source code. Includes superclasses and superinterfaces of the class, but does not include the class itself.</source>
          <target state="translated">このクラスの即時のスーパークラスを、ソース・コードに記載されている順に示します。このクラスのスーパークラスとスーパーインターフェースを含みますが、クラス自体は含まれません。</target>
        </trans-unit>
        <trans-unit id="70af22099196223b8485c95684bbf8824a9afa2b" translate="yes" xml:space="preserve">
          <source>Immutability</source>
          <target state="translated">Immutability</target>
        </trans-unit>
        <trans-unit id="bb86d1b762a23d9068f4510901eeff7d18242638" translate="yes" xml:space="preserve">
          <source>Immutability in Kotlin/Native</source>
          <target state="translated">コトリン/ネイティブの不変性</target>
        </trans-unit>
        <trans-unit id="7f8782e7a667262dd5095f5ff184ddd709f4772b" translate="yes" xml:space="preserve">
          <source>Immutability is a runtime property in Kotlin/Native, and can be applied to an arbitrary object subgraph using the &lt;code&gt;kotlin.native.concurrent.freeze&lt;/code&gt; function. It makes all the objects reachable from the given one immutable, such a transition is a one-way operation (i.e., objects cannot be unfrozen later). Some naturally immutable objects such as &lt;code&gt;kotlin.String&lt;/code&gt;, &lt;code&gt;kotlin.Int&lt;/code&gt;, and other primitive types, along with &lt;code&gt;AtomicInt&lt;/code&gt; and &lt;code&gt;AtomicReference&lt;/code&gt; are frozen by default. If a mutating operation is applied to a frozen object, an &lt;code&gt;InvalidMutabilityException&lt;/code&gt; is thrown.</source>
          <target state="translated">不変性はKotlin / Nativeのランタイムプロパティであり、 &lt;code&gt;kotlin.native.concurrent.freeze&lt;/code&gt; 関数を使用して任意のオブジェクトサブグラフに適用できます。指定された1つの不変オブジェクトからすべてのオブジェクトに到達可能にします。このような遷移は一方向の操作です（つまり、オブジェクトを後でフリーズ解除することはできません）。 &lt;code&gt;kotlin.String&lt;/code&gt; 、 &lt;code&gt;kotlin.Int&lt;/code&gt; 、およびその他のプリミティブ型などの一部の自然に不変のオブジェクトは、 &lt;code&gt;AtomicInt&lt;/code&gt; および &lt;code&gt;AtomicReference&lt;/code&gt; とともに、デフォルトでフリーズされています。変更された操作がフリーズされたオブジェクトに適用されると、 &lt;code&gt;InvalidMutabilityException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="ed22a68de3c3f3cb15e1268df39db4a167fd746d" translate="yes" xml:space="preserve">
          <source>ImmutableBlob</source>
          <target state="translated">ImmutableBlob</target>
        </trans-unit>
        <trans-unit id="ee7341a728a58d68c7532bf18aeb0fac4452b6b5" translate="yes" xml:space="preserve">
          <source>Implementation by Delegation</source>
          <target state="translated">委任による実施</target>
        </trans-unit>
        <trans-unit id="dc1735ad8ce42355f885445d5ba551e409b9c86b" translate="yes" xml:space="preserve">
          <source>Implementations of the interface can override default methods.</source>
          <target state="translated">インターフェースの実装は、デフォルトのメソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="00d5f96768fee4f4899fb4ea94381d1c87db0a66" translate="yes" xml:space="preserve">
          <source>Implementing Interfaces</source>
          <target state="translated">インターフェースの実装</target>
        </trans-unit>
        <trans-unit id="d640e1d5eb2b7a283f3bc3070dd151afc512fb6c" translate="yes" xml:space="preserve">
          <source>Implementing Interfaces in Enum Classes</source>
          <target state="translated">Enum クラスでのインターフェイスの実装</target>
        </trans-unit>
        <trans-unit id="b2153d6fa67762548da1f8fe28f3d481ede48834" translate="yes" xml:space="preserve">
          <source>Implements the core logic of a property delegate for a read/write property that calls callback functions when changed.</source>
          <target state="translated">変更されたときにコールバック関数を呼び出す読み書きプロパティのデリゲートのコア・ロジックを実装します。</target>
        </trans-unit>
        <trans-unit id="febd7a841f47bb67cef7b18f13ac806c637192b6" translate="yes" xml:space="preserve">
          <source>Important: files marked with &lt;code&gt;@file:JsModule&lt;/code&gt; annotation can't declare non-external members. The example below produces compile-time error:</source>
          <target state="translated">重要： &lt;code&gt;@file:JsModule&lt;/code&gt; アノテーションが付けられたファイルは、非外部メンバーを宣言できません。次の例では、コンパイル時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e45479a7a7959d4875b5ea4acddae533ace5e782" translate="yes" xml:space="preserve">
          <source>Importing deeper package hierarchies</source>
          <target state="translated">より深いパッケージ階層のインポート</target>
        </trans-unit>
        <trans-unit id="a932c1ce87f097109d85ae710ba5975b2888a20e" translate="yes" xml:space="preserve">
          <source>Importing synthetic properties</source>
          <target state="translated">合成プロパティのインポート</target>
        </trans-unit>
        <trans-unit id="e42328ac01cd03a47978f064c93b392caf3861f0" translate="yes" xml:space="preserve">
          <source>Imports</source>
          <target state="translated">Imports</target>
        </trans-unit>
        <trans-unit id="513df22c9887b1f085e00ef3b729d3f007cfd9d9" translate="yes" xml:space="preserve">
          <source>Improved import handling</source>
          <target state="translated">インポート処理の改善</target>
        </trans-unit>
        <trans-unit id="d8972a1f28a588591d73ee09ddd836428eaca222" translate="yes" xml:space="preserve">
          <source>Improving smartcasts analysis by declaring the relation between a function's call outcome and the passed arguments values:</source>
          <target state="translated">関数の呼び出し結果と渡された引数の値の関係を宣言することで、スマートキャストの解析を改善します。</target>
        </trans-unit>
        <trans-unit id="3ea84fc4dca92bbd95cba0393e768bc0dbac665a" translate="yes" xml:space="preserve">
          <source>Improving the variable initialization analysis in the presence of high-order functions:</source>
          <target state="translated">高次関数の存在下での変数初期化解析の改善</target>
        </trans-unit>
        <trans-unit id="1a9aa64fd2cf728e6a54a37ad269e224c4406ae7" translate="yes" xml:space="preserve">
          <source>In &quot;clever words&quot; they say that the class &lt;code&gt;C&lt;/code&gt; is &lt;strong&gt;covariant&lt;/strong&gt; in the parameter &lt;code&gt;T&lt;/code&gt;, or that &lt;code&gt;T&lt;/code&gt; is a &lt;strong&gt;covariant&lt;/strong&gt; type parameter. You can think of &lt;code&gt;C&lt;/code&gt; as being a &lt;strong&gt;producer&lt;/strong&gt; of &lt;code&gt;T&lt;/code&gt;'s, and NOT a &lt;strong&gt;consumer&lt;/strong&gt; of &lt;code&gt;T&lt;/code&gt;'s.</source>
          <target state="translated">「賢い言葉」では、クラス &lt;code&gt;C&lt;/code&gt; はパラメーター &lt;code&gt;T&lt;/code&gt; で&lt;strong&gt;共変&lt;/strong&gt;である、または &lt;code&gt;T&lt;/code&gt; は&lt;strong&gt;共変型&lt;/strong&gt;パラメーターであると述べています。あなたは考えることができます &lt;code&gt;C&lt;/code&gt; として&lt;strong&gt;プロデューサー&lt;/strong&gt;の &lt;code&gt;T&lt;/code&gt; さん、およびNOT &lt;strong&gt;消費者&lt;/strong&gt;の &lt;code&gt;T&lt;/code&gt; さん。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6019b82a793e669523c1435271b5d51f4ccb4ffc" translate="yes" xml:space="preserve">
          <source>In 1.3 we reworked the entire multiplatform model. The &lt;a href=&quot;building-mpp-with-gradle&quot;&gt;new DSL&lt;/a&gt; we have for describing multiplatform Gradle projects is much more flexible, and we'll keep working on it to make project configuration straightforward.</source>
          <target state="translated">1.3では、マルチプラットフォームモデル全体を作り直しました。&lt;a href=&quot;building-mpp-with-gradle&quot;&gt;新しいDSL&lt;/a&gt;マルチGradleのプロジェクトを記述するため、我々は持っているがはるかに柔軟であり、我々は、プロジェクトの設定は簡単に作ってそれに取り組んでおこう。</target>
        </trans-unit>
        <trans-unit id="08f9bdd95bef61c2c357a6e138e1e9a913682812" translate="yes" xml:space="preserve">
          <source>In 1.3, we've completely reworked the model of multiplatform projects in order to improve expressiveness and flexibility, and to make sharing common code easier. Also, Kotlin/Native is now supported as one of the targets!</source>
          <target state="translated">1.3では、表現力と柔軟性を向上させ、共通のコードを共有しやすくするために、マルチプラットフォームプロジェクトのモデルを完全に作り直しました。また、Kotlin/Native がターゲットの一つとしてサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="5745802255877abfa046b72cbccdadc8221d5622" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;collection-ordering&quot;&gt;Collection Ordering&lt;/a&gt;, we describe operations that retrieve collection elements in specific orders. For mutable lists, the standard library offers similar extension functions that perform the same ordering operations in place. When you apply such an operation to a list instance, it changes the order of elements in that exact instance.</source>
          <target state="translated">で&lt;a href=&quot;collection-ordering&quot;&gt;コレクションの注文&lt;/a&gt;、我々は特定の順序でコレクション要素を取得する操作について説明します。可変リストの場合、標準ライブラリは、同じ順序付け操作を実行する同様の拡張関数を提供します。このような操作をリストインスタンスに適用すると、その正確なインスタンス内の要素の順序が変更されます。</target>
        </trans-unit>
        <trans-unit id="be8a31aea4fdca8e3b9bdedb1958918e98cae1d2" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;collections-overview#map&quot;&gt;maps&lt;/a&gt;, types of both keys and values are user-defined. Key-based access to map entries enables various map-specific processing capabilities from getting a value by key to separate filtering of keys and values. On this page, we provide descriptions of the map processing functions from the standard library.</source>
          <target state="translated">では&lt;a href=&quot;collections-overview#map&quot;&gt;マップ&lt;/a&gt;、キーと値の両方のタイプは、ユーザが定義しています。マップエントリへのキーベースのアクセスにより、キーごとの値の取得から、キーと値のフィルタリングの分離まで、さまざまなマップ固有の処理機能が可能になります。このページでは、標準ライブラリのマップ処理関数について説明します。</target>
        </trans-unit>
        <trans-unit id="7454358e40f9eaf26ccc7cd55f4c30f555918de5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;the previous tutorial&lt;/a&gt; we created a &lt;code&gt;lib.h&lt;/code&gt; file. This time, we are going to include those declarations directly into the &lt;code&gt;interop.def&lt;/code&gt; file, after the &lt;code&gt;---&lt;/code&gt; separator line:</source>
          <target state="translated">で&lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;前のチュートリアル&lt;/a&gt;、我々は、作成 &lt;code&gt;lib.h&lt;/code&gt; ファイルを。今回は、それらの宣言を &lt;code&gt;interop.def&lt;/code&gt; ファイルの &lt;code&gt;---&lt;/code&gt; セパレータ行の後に直接含めます。</target>
        </trans-unit>
        <trans-unit id="4f2d8d96fc34753484a87526254e4a4f003f9c05" translate="yes" xml:space="preserve">
          <source>In Android projects, additional Kotlin source sets are created for each &lt;a href=&quot;https://developer.android.com/studio/build/#sourcesets&quot;&gt;Android source set&lt;/a&gt;. If the Android target has a name &lt;code&gt;foo&lt;/code&gt;, the Android source set &lt;code&gt;bar&lt;/code&gt; gets a Kotlin source set counterpart &lt;code&gt;fooBar&lt;/code&gt;. The Kotlin compilations, however, are able to consume Kotlin sources from all of the directories &lt;code&gt;src/bar/java&lt;/code&gt;, &lt;code&gt;src/bar/kotlin&lt;/code&gt;, and &lt;code&gt;src/fooBar/kotlin&lt;/code&gt;. Java sources are only read from the first of these directories.</source>
          <target state="translated">Androidプロジェクトでは、&lt;a href=&quot;https://developer.android.com/studio/build/#sourcesets&quot;&gt;Androidソースセット&lt;/a&gt;ごとに追加のKotlinソースセットが作成されます。 Androidターゲットの名前が &lt;code&gt;foo&lt;/code&gt; の場合、Androidソースセット &lt;code&gt;bar&lt;/code&gt; はKotlinソースセットの対応する &lt;code&gt;fooBar&lt;/code&gt; を取得します。ただし、Kotlinのコンパイルでは、 &lt;code&gt;src/bar/java&lt;/code&gt; 、 &lt;code&gt;src/bar/kotlin&lt;/code&gt; 、および &lt;code&gt;src/fooBar/kotlin&lt;/code&gt; のすべてのディレクトリからKotlinソースを利用できます。 Javaソースは、これらのディレクトリの最初からのみ読み取られます。</target>
        </trans-unit>
        <trans-unit id="33342ff8fe9e060731185ad7c136d99b9461055f" translate="yes" xml:space="preserve">
          <source>In Gradle</source>
          <target state="translated">グラドルでは</target>
        </trans-unit>
        <trans-unit id="9ffad76a20436e6770075c18f7fc5a623588a28f" translate="yes" xml:space="preserve">
          <source>In Gradle 5.3 and above, the module metadata is always used during dependency resolution, but publications don't include any module metadata by default. To enable module metadata publishing, add &lt;code&gt;enableFeaturePreview(&quot;GRADLE_METADATA&quot;)&lt;/code&gt; to the root project's &lt;code&gt;settings.gradle&lt;/code&gt; file. With older Gradle versions, this is also required for module metadata consumption.</source>
          <target state="translated">Gradle 5.3以降では、依存関係の解決中にモジュールメタデータが常に使用されますが、パブリケーションにはデフォルトでモジュールメタデータが含まれていません。モジュールのメタデータの公開を有効にするには、ルートプロジェクトの &lt;code&gt;settings.gradle&lt;/code&gt; ファイルに &lt;code&gt;enableFeaturePreview(&quot;GRADLE_METADATA&quot;)&lt;/code&gt; を追加します。古いGradleバージョンでは、これはモジュールメタデータの消費にも必要です。</target>
        </trans-unit>
        <trans-unit id="db8d93f584f6cd9be9c19cceb09290c42348f8b6" translate="yes" xml:space="preserve">
          <source>In Gradle command line parameters: add the parameter &lt;code&gt;-Pkotlin.incremental&lt;/code&gt; or &lt;code&gt;-Pkotlin.incremental.js&lt;/code&gt; with the boolean value reflecting the usage of incremental compilation. Note that in this case the parameter should be added to each subsequent build, and any build with disabled incremental compilation invalidates incremental caches.</source>
          <target state="translated">Gradleコマンドラインパラメータで、パラメータ &lt;code&gt;-Pkotlin.incremental&lt;/code&gt; または &lt;code&gt;-Pkotlin.incremental.js&lt;/code&gt; を追加して、増分コンパイルの使用を反映するブール値を指定します。この場合、パラメーターは後続の各ビルドに追加する必要があることに注意してください。増分コンパイルが無効になっているビルドは、増分キャッシュを無効にします。</target>
        </trans-unit>
        <trans-unit id="d95af6982c4662ae34dc8dfd04c6f3d77bb71544" translate="yes" xml:space="preserve">
          <source>In Gradle configuration files: add the line &lt;code&gt;kotlin.incremental=&amp;lt;value&amp;gt;&lt;/code&gt; for Kotlin/JVM or &lt;code&gt;kotlin.incremental.js=&amp;lt;value&amp;gt;&lt;/code&gt; for Kotlin/JS projects either to &lt;code&gt;gradle.properties&lt;/code&gt; or to &lt;code&gt;local.properties&lt;/code&gt; file. &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; is a boolean value reflecting the usage of incremental compilation.</source>
          <target state="translated">Gradleの設定ファイルでは：行を追加 &lt;code&gt;kotlin.incremental=&amp;lt;value&amp;gt;&lt;/code&gt; Kotlin / JVMまたはのため &lt;code&gt;kotlin.incremental.js=&amp;lt;value&amp;gt;&lt;/code&gt; のいずれかにKotlin / JSプロジェクトのため &lt;code&gt;gradle.properties&lt;/code&gt; かに &lt;code&gt;local.properties&lt;/code&gt; のファイル。 &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; は、増分コンパイルの使用を反映するブール値です。</target>
        </trans-unit>
        <trans-unit id="d2d1d0c783432497ec07d157b951c4e78d7cc0b8" translate="yes" xml:space="preserve">
          <source>In IntelliJ IDEA go to &lt;em&gt;File -&amp;gt; New &amp;gt; Project&amp;hellip;&lt;/em&gt; and check the &lt;em&gt;Create from archetype&lt;/em&gt; box:</source>
          <target state="translated">IntelliJ IDEAでに行き&lt;em&gt;、ファイル- &amp;gt;新規&amp;gt;プロジェクト...&lt;/em&gt;とチェック&lt;em&gt;原型から作成&lt;/em&gt;ボックス：</target>
        </trans-unit>
        <trans-unit id="4d485a76c7a3760895d18fab529fc51f77b28063" translate="yes" xml:space="preserve">
          <source>In IntelliJ IDEA go to &lt;em&gt;File -&amp;gt; New &amp;gt; Project&amp;hellip;&lt;/em&gt;:</source>
          <target state="translated">IntelliJ IDEAで、&lt;em&gt;[ファイル]-&amp;gt; [新規]&amp;gt; [プロジェクト]に移動します&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9cc14db5a6e801d7da035df405c7d7827fc53b41" translate="yes" xml:space="preserve">
          <source>In JVM platform code:</source>
          <target state="translated">JVMプラットフォームのコードで。</target>
        </trans-unit>
        <trans-unit id="513ad5f28a98a53d38c2cd4b1ebf3e53ba78a0e9" translate="yes" xml:space="preserve">
          <source>In Java you specify &lt;code&gt;Dagger&lt;/code&gt; as &lt;code&gt;annotationProcessor&lt;/code&gt; (or &lt;code&gt;apt&lt;/code&gt;) dependency:</source>
          <target state="translated">Javaでは、 &lt;code&gt;Dagger&lt;/code&gt; を &lt;code&gt;annotationProcessor&lt;/code&gt; （または &lt;code&gt;apt&lt;/code&gt; ）依存関係として指定します。</target>
        </trans-unit>
        <trans-unit id="e76e330054ec3492dbde5d95b20d3d1c9ac12e6f" translate="yes" xml:space="preserve">
          <source>In Java, we are used to classes named &quot;*Utils&quot;: &lt;code&gt;FileUtils&lt;/code&gt;, &lt;code&gt;StringUtils&lt;/code&gt; and so on. The famous &lt;code&gt;java.util.Collections&lt;/code&gt; belongs to the same breed. And the unpleasant part about these Utils-classes is that the code that uses them looks like this:</source>
          <target state="translated">Javaでは、「* Utils」という名前のクラスに慣れています： &lt;code&gt;FileUtils&lt;/code&gt; 、 &lt;code&gt;StringUtils&lt;/code&gt; など。有名な &lt;code&gt;java.util.Collections&lt;/code&gt; は同じ品種に属しています。また、これらのUtilsクラスの不愉快な点は、それらを使用するコードが次のようになっていることです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
