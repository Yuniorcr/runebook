<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="6af37177e65c1a71744a7cb984d51ba2f07f5140" translate="yes" xml:space="preserve">
          <source>Maven</source>
          <target state="translated">Maven</target>
        </trans-unit>
        <trans-unit id="b522db69b358e8fce0593518fbe3b0d7db36d2d4" translate="yes" xml:space="preserve">
          <source>Maven configuration</source>
          <target state="translated">Mavenの設定</target>
        </trans-unit>
        <trans-unit id="71edee9db1ff5b8ff75c1bfdc3477115c9cadb2f" translate="yes" xml:space="preserve">
          <source>Max value</source>
          <target state="translated">最大値</target>
        </trans-unit>
        <trans-unit id="6f26174801b4fb329b7b4754a956851117212509" translate="yes" xml:space="preserve">
          <source>Maximum value a version component can have, a constant value 255.</source>
          <target state="translated">バージョンコンポーネントが持つことができる最大値、定数値255。</target>
        </trans-unit>
        <trans-unit id="258389887a049fd789e8d5c0611eb448fb932cc4" translate="yes" xml:space="preserve">
          <source>MediaDeviceInfo</source>
          <target state="translated">MediaDeviceInfo</target>
        </trans-unit>
        <trans-unit id="6134c6977e97c143c3e4282792a6fe2d4e4a8d3d" translate="yes" xml:space="preserve">
          <source>MediaDeviceKind</source>
          <target state="translated">MediaDeviceKind</target>
        </trans-unit>
        <trans-unit id="5e9d9c4423f0ac299fce82e9517c3425a061ddb4" translate="yes" xml:space="preserve">
          <source>MediaError</source>
          <target state="translated">MediaError</target>
        </trans-unit>
        <trans-unit id="f30d349fe509ab2452d9ff5db776c749eb21115d" translate="yes" xml:space="preserve">
          <source>MediaList</source>
          <target state="translated">MediaList</target>
        </trans-unit>
        <trans-unit id="5264b922a464ea5a9f88144f8b72f9626c1db269" translate="yes" xml:space="preserve">
          <source>MediaQueryListEventInit</source>
          <target state="translated">MediaQueryListEventInit</target>
        </trans-unit>
        <trans-unit id="70dcd56d399d2e12aa2533dd163497d5ff6362fd" translate="yes" xml:space="preserve">
          <source>MediaStreamConstraints</source>
          <target state="translated">MediaStreamConstraints</target>
        </trans-unit>
        <trans-unit id="c74168a0d6b99bbcdaff6005366c94dc042ddd9e" translate="yes" xml:space="preserve">
          <source>MediaStreamTrackEventInit</source>
          <target state="translated">MediaStreamTrackEventInit</target>
        </trans-unit>
        <trans-unit id="f6268479064052c02a6fe8b1b48bf8011df3d770" translate="yes" xml:space="preserve">
          <source>MediaStreamTrackState</source>
          <target state="translated">MediaStreamTrackState</target>
        </trans-unit>
        <trans-unit id="10f95ad72ba533133d954c473a07f3f67fdac829" translate="yes" xml:space="preserve">
          <source>MediaTrackCapabilities</source>
          <target state="translated">MediaTrackCapabilities</target>
        </trans-unit>
        <trans-unit id="bb47b7b2d8ef429be15b6e0dad452a4f8b48f974" translate="yes" xml:space="preserve">
          <source>MediaTrackConstraintSet</source>
          <target state="translated">MediaTrackConstraintSet</target>
        </trans-unit>
        <trans-unit id="8054e6c6485f93790f303ed390e1cba5c2743911" translate="yes" xml:space="preserve">
          <source>MediaTrackConstraints</source>
          <target state="translated">MediaTrackConstraints</target>
        </trans-unit>
        <trans-unit id="43ae2bb87ab91212c29f9b3badd22fa54472dcc6" translate="yes" xml:space="preserve">
          <source>MediaTrackSettings</source>
          <target state="translated">MediaTrackSettings</target>
        </trans-unit>
        <trans-unit id="7e941f3e34c1287f6e0e3fa6973fe4daf92e6bf1" translate="yes" xml:space="preserve">
          <source>MediaTrackSupportedConstraints</source>
          <target state="translated">MediaTrackSupportedConstraints</target>
        </trans-unit>
        <trans-unit id="0821090b6a2b08e3c2088bad74f0cd7597a2e61c" translate="yes" xml:space="preserve">
          <source>MemScope</source>
          <target state="translated">MemScope</target>
        </trans-unit>
        <trans-unit id="13754495aca84346deb594b0d23bc4d086989ee4" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
          <target state="translated">メンバー機能</target>
        </trans-unit>
        <trans-unit id="2675e87b859fb2d5772f0ea8bf6c203afefdde62" translate="yes" xml:space="preserve">
          <source>Member function names should use &lt;code&gt;lowerCamelCase&lt;/code&gt; instead of &lt;code&gt;snake_case&lt;/code&gt;.</source>
          <target state="translated">メンバー関数名を使うべき &lt;code&gt;lowerCamelCase&lt;/code&gt; の代わりに &lt;code&gt;snake_case&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b217f7514e4e69fd38aa7c54a821e91e41f619c3" translate="yes" xml:space="preserve">
          <source>Member functions</source>
          <target state="translated">メンバー機能</target>
        </trans-unit>
        <trans-unit id="d58072c4501a38b0ae1c8099bd6324750503224c" translate="yes" xml:space="preserve">
          <source>Member functions are called with dot notation:</source>
          <target state="translated">メンバ関数はドット表記で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="90302bd1ef8edadba09a04d671c6ada71d5d8a46" translate="yes" xml:space="preserve">
          <source>Member functions define operations that are essential for a collection type. For example, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/index&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; contains the function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty&quot;&gt;&lt;code&gt;isEmpty()&lt;/code&gt;&lt;/a&gt; for checking its emptiness; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/index&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; contains &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; for index access to elements, and so on.</source>
          <target state="translated">メンバー関数は、コレクション型に不可欠な操作を定義します。たとえば、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/index&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; に&lt;/a&gt;は、空か&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty&quot;&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/a&gt;かを確認するための関数isEmpty（）が含まれています。&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/index&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;は、要素へのインデックスアクセスのための&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;などが含まれます。</target>
        </trans-unit>
        <trans-unit id="a569ddca50a19b2205ceb3e1f59db2a7ba968aef" translate="yes" xml:space="preserve">
          <source>Member properties and member functions inside a generic class may for the most part use the class' generic type parameters as if they were ordinary types, without having to redeclare them. It is also possible to make functions that take more generic parameters than the class does, and to make generic functions inside nongeneric classes, and to make generic top-level functions (which is what we'll do in the next example). Note the different placement of the generic type parameter in generic function declarations:</source>
          <target state="translated">ジェネリック・クラス内のメンバ・プロパティやメンバ関数は、大抵の場合、そのクラスのジェネリック・タイプ・パラメータを再宣言することなく、通常のタイプであるかのように使用することができます。また、クラスよりも多くの汎用型パラメータを取る関数を作成したり、非汎用クラス内で汎用型関数を作成したり、汎用トップレベル関数を作成したりすることも可能です(これは次の例で説明します)。ジェネリック関数の宣言におけるジェネリック型パラメータの配置の違いに注意してください。</target>
        </trans-unit>
        <trans-unit id="74971806b05c2768bdffa67bcc7b89b958d7edea" translate="yes" xml:space="preserve">
          <source>Member references and reflection</source>
          <target state="translated">メンバーの参照と反省</target>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="2fd5b3fb4a679664c9a47a448257d9fa802a22f3" translate="yes" xml:space="preserve">
          <source>Members of Objective-C categories and Swift extensions are imported to Kotlin as extensions. That's why these declarations can't be overridden in Kotlin. And the extension initializers aren't available as Kotlin constructors.</source>
          <target state="translated">Objective-CのカテゴリのメンバーやSwiftの拡張機能は拡張機能としてKotlinにインポートされます。そのため、これらの宣言はKotlinではオーバーライドできません。また、拡張機能のイニシャライザはKotlinのコンストラクタとして利用できません。</target>
        </trans-unit>
        <trans-unit id="c590aa47cb148126a7aed2e0252e6e56de2e1fb5" translate="yes" xml:space="preserve">
          <source>Members of the companion object can be called by using simply the class name as the qualifier:</source>
          <target state="translated">コンパニオン・オブジェクトのメンバは、単にクラス名を修飾子として使用することで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b61b70edbe3a97caa2ecb5ac100b7aca209a1cba" translate="yes" xml:space="preserve">
          <source>Memory allocation</source>
          <target state="translated">メモリの割り当て</target>
        </trans-unit>
        <trans-unit id="2a2bb3d6a7f5790d759cba72823f3811d734fe09" translate="yes" xml:space="preserve">
          <source>MessageChannel</source>
          <target state="translated">MessageChannel</target>
        </trans-unit>
        <trans-unit id="ccca7aad0aa3bbb87c9ea30bfca4cd685ee282a6" translate="yes" xml:space="preserve">
          <source>MessageEventInit</source>
          <target state="translated">MessageEventInit</target>
        </trans-unit>
        <trans-unit id="da50feb28afa8ee6b84decde6712247ff2db1356" translate="yes" xml:space="preserve">
          <source>Metacharacters or escape sequences in the input sequence will be given no special meaning.</source>
          <target state="translated">入力シーケンス内のメタキャラクタやエスケープシーケンスには特別な意味は与えられません。</target>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="translated">Metadata</target>
        </trans-unit>
        <trans-unit id="00c97618202a4d85cdcf254062dd76c688bb9937" translate="yes" xml:space="preserve">
          <source>Metadata in a custom format. The format may be different (or even absent) for different kinds.</source>
          <target state="translated">カスタムフォーマットのメタデータ。フォーマットは種類によって異なる(あるいは存在しない)場合があります。</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="6ef376dbda2a9dfd9fe8fb9172d6ea36380a325e" translate="yes" xml:space="preserve">
          <source>Method call formatting</source>
          <target state="translated">メソッド呼び出しの書式設定</target>
        </trans-unit>
        <trans-unit id="3643c572e5a5065b656aa6b5fce445bafca060de" translate="yes" xml:space="preserve">
          <source>Method declarations</source>
          <target state="translated">メソッド宣言</target>
        </trans-unit>
        <trans-unit id="6c23f25a80838dd8e19f20f6fec8854933be69db" translate="yes" xml:space="preserve">
          <source>Method names translation</source>
          <target state="translated">メソッド名の翻訳</target>
        </trans-unit>
        <trans-unit id="88533fb91c329fcc07daac7abd293e3d2ef386bf" translate="yes" xml:space="preserve">
          <source>Methods &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; are not available on references of type &lt;code&gt;Any&lt;/code&gt;. Their usage is generally discouraged in favor of &lt;code&gt;java.util.concurrent&lt;/code&gt;. If you really need to call these methods, you can cast to &lt;code&gt;java.lang.Object&lt;/code&gt;:</source>
          <target state="translated">メソッド &lt;code&gt;wait()&lt;/code&gt; および &lt;code&gt;notify()&lt;/code&gt; は、タイプ &lt;code&gt;Any&lt;/code&gt; の参照では使用できません。通常、 &lt;code&gt;java.util.concurrent&lt;/code&gt; を使用することをお勧めします。これらのメソッドを呼び出す必要がある場合は、 &lt;code&gt;java.lang.Object&lt;/code&gt; にキャストできます。</target>
        </trans-unit>
        <trans-unit id="04764bae2f3b42e32503d658246fd786e62d1716" translate="yes" xml:space="preserve">
          <source>Methods defined in &lt;code&gt;MyList&amp;lt;T&amp;gt;&lt;/code&gt; use &lt;code&gt;T&lt;/code&gt; as platform, i.e. it's possible to perform unsafe operation in Kotlin:</source>
          <target state="translated">&lt;code&gt;MyList&amp;lt;T&amp;gt;&lt;/code&gt; 定義されたメソッドは、プラットフォームとして &lt;code&gt;T&lt;/code&gt; を使用します。つまり、Kotlinで安全でない操作を実行することが可能です。</target>
        </trans-unit>
        <trans-unit id="2362d4b5d61680189ee786359c95c772832ea599" translate="yes" xml:space="preserve">
          <source>Methods defined in &lt;code&gt;MyPureList&amp;lt;T&amp;gt;&lt;/code&gt; overriding methods in &lt;code&gt;MutableList&lt;/code&gt; use &lt;code&gt;T&lt;/code&gt; as non-platform types:</source>
          <target state="translated">で定義されているメソッド &lt;code&gt;MyPureList&amp;lt;T&amp;gt;&lt;/code&gt; のメソッドのオーバーライド &lt;code&gt;MutableList&lt;/code&gt; 使用 &lt;code&gt;T&lt;/code&gt; を非プラットフォーム型として：</target>
        </trans-unit>
        <trans-unit id="1643049f5673b4e1c5eb74d112c9611cf055d3c5" translate="yes" xml:space="preserve">
          <source>Methods returning void</source>
          <target state="translated">void を返すメソッド</target>
        </trans-unit>
        <trans-unit id="a8027f1188b3014c0f8995cd7120023b72397d3d" translate="yes" xml:space="preserve">
          <source>Methods that follow the Java conventions for getters and setters (no-argument methods with names starting with &lt;code&gt;get&lt;/code&gt; and single-argument methods with names starting with &lt;code&gt;set&lt;/code&gt;) are represented as properties in Kotlin. &lt;code&gt;Boolean&lt;/code&gt; accessor methods (where the name of the getter starts with &lt;code&gt;is&lt;/code&gt; and the name of the setter starts with &lt;code&gt;set&lt;/code&gt;) are represented as properties which have the same name as the getter method.</source>
          <target state="translated">getterとsetterのJava規則に従うメソッド（名前が &lt;code&gt;get&lt;/code&gt; で始まる引数なしのメソッドと名前が &lt;code&gt;set&lt;/code&gt; で始まる単一引数のメソッド）は、Kotlinではプロパティとして表されます。 &lt;code&gt;Boolean&lt;/code&gt; アクセサーメソッド（ゲッターの名前が &lt;code&gt;is&lt;/code&gt; で始まり、セッターの名前が &lt;code&gt;set&lt;/code&gt; で始まる）は、ゲッターメソッドと同じ名前を持つプロパティとして表されます。</target>
        </trans-unit>
        <trans-unit id="2474109210e0ea672543f6c977728ae54b8f124d" translate="yes" xml:space="preserve">
          <source>Migrate the code with the help of the tooling</source>
          <target state="translated">ツールの助けを借りてコードを移行する</target>
        </trans-unit>
        <trans-unit id="708b9cf32b4bb9e8e85c01bf95c0ef78c92becb6" translate="yes" xml:space="preserve">
          <source>Migrating from Java</source>
          <target state="translated">Javaからの移行</target>
        </trans-unit>
        <trans-unit id="f44d82dafb548c8ad9d6490ef0e69cd3d1ba217d" translate="yes" xml:space="preserve">
          <source>Migration to a new code style</source>
          <target state="translated">新しいコードスタイルへの移行</target>
        </trans-unit>
        <trans-unit id="d0a1c8e409ae53cb281e66770ad717b9178d43ce" translate="yes" xml:space="preserve">
          <source>Migration to a new code style discussion</source>
          <target state="translated">新しいコードスタイルへの移行議論</target>
        </trans-unit>
        <trans-unit id="1bd7ccbde8d3077fec1f549017e747393223a900" translate="yes" xml:space="preserve">
          <source>MimeType</source>
          <target state="translated">MimeType</target>
        </trans-unit>
        <trans-unit id="ed52d3a5f9993b67e83d292332a8f9a1d86ebf44" translate="yes" xml:space="preserve">
          <source>MimeTypeArray</source>
          <target state="translated">MimeTypeArray</target>
        </trans-unit>
        <trans-unit id="98f205e04abca4bbe7595051d07e6eb3a4abe953" translate="yes" xml:space="preserve">
          <source>Min value</source>
          <target state="translated">最小値</target>
        </trans-unit>
        <trans-unit id="222d1f694d764125a7a7a5786d11a04234b0be8d" translate="yes" xml:space="preserve">
          <source>Missing errors in class constructor&amp;rsquo;s &lt;code&gt;@get:&lt;/code&gt; annotations</source>
          <target state="translated">クラスコンストラクターの &lt;code&gt;@get:&lt;/code&gt; アノテーションに欠落しているエラー</target>
        </trans-unit>
        <trans-unit id="47e4750870ece5e5c348eda89bdc8e3fbb4c6cff" translate="yes" xml:space="preserve">
          <source>Missing getter-targeted annotations on annotation constructor parameters</source>
          <target state="translated">アノテーション コンストラクタのパラメータにゲッターをターゲットにしたアノテーションが存在しない</target>
        </trans-unit>
        <trans-unit id="52b91c038ffc21a08d48959a44ba1c6fddb114f2" translate="yes" xml:space="preserve">
          <source>Mixed Java and Kotlin</source>
          <target state="translated">JavaとKotlinの混合</target>
        </trans-unit>
        <trans-unit id="86c40367cc1e1c53a8c10c73ada1f29fd66c1405" translate="yes" xml:space="preserve">
          <source>Mixing Java and Kotlin in one project</source>
          <target state="translated">JavaとKotlinを一つのプロジェクトに混ぜる</target>
        </trans-unit>
        <trans-unit id="404ab93e44ed76b5232ab6931dd26299f542e43d" translate="yes" xml:space="preserve">
          <source>Modern debuggers provide several ways to set a breakpoint, see below for a tool-by-tool breakdown:</source>
          <target state="translated">最近のデバッガはブレークポイントを設定する方法をいくつか提供しています。</target>
        </trans-unit>
        <trans-unit id="5ba6ee64964304bc6c3c5424baba2b34cd73ea5d" translate="yes" xml:space="preserve">
          <source>Modifier Keywords</source>
          <target state="translated">修飾キーワード</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="42cd86d0e702bd27bcb835a0b162fb95197132a2" translate="yes" xml:space="preserve">
          <source>Modifies the value of the property.</source>
          <target state="translated">プロパティの値を変更します。</target>
        </trans-unit>
        <trans-unit id="723a9a05eb17a0ec38db3b56d4b0ea18be0358a6" translate="yes" xml:space="preserve">
          <source>Module and Package Documentation</source>
          <target state="translated">モジュールとパッケージのドキュメント</target>
        </trans-unit>
        <trans-unit id="ec446b6ebb15f053c4868dce62c242283cf04673" translate="yes" xml:space="preserve">
          <source>Module-wide markers</source>
          <target state="translated">モジュール全体のマーカー</target>
        </trans-unit>
        <trans-unit id="738fa33a16ad3f30c737fafc42459e4a03f30470" translate="yes" xml:space="preserve">
          <source>Module-wide use</source>
          <target state="translated">モジュール全体での使用</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="d62ac0bf808c354dcb97b6778e8aaae4635a7c9f" translate="yes" xml:space="preserve">
          <source>More details and advanced use-cases are presented in the</source>
          <target state="translated">詳細と高度なユースケースについては、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="91aa2ec21d9f2bac781876761e04b45d52ef74fe" translate="yes" xml:space="preserve">
          <source>More documentation on the types mapping can be found in the &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt; article.</source>
          <target state="translated">型マッピングの詳細については、&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interopの&lt;/a&gt;記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b5c09addc98121bf0f9aad66c228b38f1430aecf" translate="yes" xml:space="preserve">
          <source>More information about all other types mapping details can be found in the &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt; documentation article</source>
          <target state="translated">他のすべてのタイプマッピングの詳細については、&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interopの&lt;/a&gt;ドキュメントの記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b061f32f9ec8d43b64e344ed5485c4d9f7caf378" translate="yes" xml:space="preserve">
          <source>More tips and tricks</source>
          <target state="translated">より多くのヒントとトリック</target>
        </trans-unit>
        <trans-unit id="e9792383929cbb7b1909aa88012c0f218c0c51f8" translate="yes" xml:space="preserve">
          <source>Most built-in types are comparable:</source>
          <target state="translated">ビルトインタイプはほとんどが比較対象となります。</target>
        </trans-unit>
        <trans-unit id="f9f0f6eb5ddb49db8f8ae5d8eb9cab0176d9ace5" translate="yes" xml:space="preserve">
          <source>Most of the functionality of signed types are supported for unsigned counterparts too:</source>
          <target state="translated">符号付き型の機能のほとんどは、符号なしの対応するものでもサポートされています。</target>
        </trans-unit>
        <trans-unit id="cb91c080f7b68ae6a8bbb2b702b1059a13b12c96" translate="yes" xml:space="preserve">
          <source>Most of the operators that are recognized by Kotlin's syntax have predefined textual names and are available for implementation in your classes, just like you can do with Python's double-underscore operator names. For example, the binary &lt;code&gt;+&lt;/code&gt; operator is called &lt;code&gt;plus&lt;/code&gt;. Similarly to the infix example, if you do this inside a &lt;code&gt;Person&lt;/code&gt; class that has got a &lt;code&gt;name&lt;/code&gt; property:</source>
          <target state="translated">Kotlinの構文で認識されるほとんどの演算子は、定義済みのテキスト名があり、Pythonの二重下線演算子名と同じように、クラスに実装できます。たとえば、二項 &lt;code&gt;+&lt;/code&gt; 演算子は &lt;code&gt;plus&lt;/code&gt; と呼ばれます。infixの例と同様に、 &lt;code&gt;name&lt;/code&gt; プロパティを持つ &lt;code&gt;Person&lt;/code&gt; クラス内でこれを行うと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="3edbae2a158aaf025c7463b2890fdba1f30e0552" translate="yes" xml:space="preserve">
          <source>Most of the time we define extensions on the top level, i.e. directly under packages:</source>
          <target state="translated">ほとんどの場合、トップレベル、つまりパッケージの直下で拡張機能を定義します。</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">Motivation</target>
        </trans-unit>
        <trans-unit id="e5f579f208747beb161cf00d47a3a0c086f81dbe" translate="yes" xml:space="preserve">
          <source>MouseEventInit</source>
          <target state="translated">MouseEventInit</target>
        </trans-unit>
        <trans-unit id="19754c53e87ae21affdf187e21540a29ec7c1fa2" translate="yes" xml:space="preserve">
          <source>Much like we reference an input element, we can access other elements on the page, casting them to the appropriate types.</source>
          <target state="translated">入力要素を参照するのと同じように、ページ上の他の要素にアクセスし、それらを適切な型にキャストすることができます。</target>
        </trans-unit>
        <trans-unit id="85e61eaa48d6be8dae51bf80212b85c25bd2b301" translate="yes" xml:space="preserve">
          <source>Much the same way as regular properties, the properties declared in the primary constructor can be mutable (&lt;em&gt;var&lt;/em&gt;) or read-only (&lt;em&gt;val&lt;/em&gt;).</source>
          <target state="translated">通常のプロパティとほとんど同じように、プライマリコンストラクタで宣言されたプロパティは、変更可能（&lt;em&gt;var&lt;/em&gt;）または読み取り専用（&lt;em&gt;val&lt;/em&gt;）にすることができます。</target>
        </trans-unit>
        <trans-unit id="bf10a69dc3111e2f0b70a7a3b5fcde0eb5de58f0" translate="yes" xml:space="preserve">
          <source>Multiplatform &lt;code&gt;Random&lt;/code&gt;</source>
          <target state="translated">マルチプラットフォーム &lt;code&gt;Random&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d27d69385dad1ecc38485d70b593ff3be6501e1" translate="yes" xml:space="preserve">
          <source>Multiplatform Gradle Project</source>
          <target state="translated">マルチプラットフォームのGradleプロジェクト</target>
        </trans-unit>
        <trans-unit id="b476304566bdb2c8284f4c5fabc7060e30563d1f" translate="yes" xml:space="preserve">
          <source>Multiplatform Kotlin Library</source>
          <target state="translated">マルチプラットフォームのKotlinライブラリ</target>
        </trans-unit>
        <trans-unit id="594342484b7fa8723561cd74a56adf5ed5eecd56" translate="yes" xml:space="preserve">
          <source>Multiplatform Kotlin library</source>
          <target state="translated">マルチプラットフォームのKotlinライブラリ</target>
        </trans-unit>
        <trans-unit id="abdd2b4ca66085ea36500996c307f3c54d5bee0a" translate="yes" xml:space="preserve">
          <source>Multiplatform Libraries</source>
          <target state="translated">マルチプラットフォームライブラリ</target>
        </trans-unit>
        <trans-unit id="49bdb75dde412727c37ad9cfdc25f84b9800e1ee" translate="yes" xml:space="preserve">
          <source>Multiplatform Programming</source>
          <target state="translated">マルチプラットフォームプログラミング</target>
        </trans-unit>
        <trans-unit id="8831ff8afbd886576a6d26e7a38c2a2945370e5f" translate="yes" xml:space="preserve">
          <source>Multiplatform Project: iOS and Android</source>
          <target state="translated">マルチプラットフォームプロジェクト:iOSとAndroid</target>
        </trans-unit>
        <trans-unit id="5cff52171a748c24fbdfa2675a9193d1e17c8b90" translate="yes" xml:space="preserve">
          <source>Multiplatform Projects</source>
          <target state="translated">マルチプラットフォームプロジェクト</target>
        </trans-unit>
        <trans-unit id="30ece0cd52430a4d7a64233600e1721dbcbbe2bf" translate="yes" xml:space="preserve">
          <source>Multiplatform Projects (experimental)</source>
          <target state="translated">マルチプラットフォームプロジェクト(実験的</target>
        </trans-unit>
        <trans-unit id="dce33eff96bb2026a847a2a553a328f131ebdfe5" translate="yes" xml:space="preserve">
          <source>Multiplatform projects</source>
          <target state="translated">マルチプラットフォーム プロジェクト</target>
        </trans-unit>
        <trans-unit id="48104e942ea0eb10a48e224f17bd6af63a0f01ad" translate="yes" xml:space="preserve">
          <source>Multiplatform projects are a new &lt;strong&gt;experimental&lt;/strong&gt; feature in Kotlin 1.2, allowing you to reuse code between target platforms supported by Kotlin &amp;ndash; JVM, JavaScript and (in the future) Native. In a multiplatform project, you have three kinds of modules:</source>
          <target state="translated">マルチプラットフォームプロジェクトはKotlin 1.2の新しい&lt;strong&gt;実験的&lt;/strong&gt;機能であり、Kotlinでサポートされているターゲットプラットフォーム間でコードを再利用できます&amp;ndash; JVM、JavaScript、および（将来的には）ネイティブ。マルチプラットフォームプロジェクトには、3種類のモジュールがあります。</target>
        </trans-unit>
        <trans-unit id="56c55ee3ca3b8c8dc0a5fe577d6b3cbe7b6bf668" translate="yes" xml:space="preserve">
          <source>Multiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. All of the language and tooling features described in this document are subject to change in future Kotlin versions.</source>
          <target state="translated">マルチプラットフォームプロジェクトはKotlin 1.2と1.3では実験的な機能です。このドキュメントに記載されている言語やツールの機能はすべて、将来のKotlinのバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a47f8ee1f56229364d475a5b4995314b84d9fc4e" translate="yes" xml:space="preserve">
          <source>Multiple coroutines may receive from the same channel, distributing work between themselves. Let us start with a producer coroutine that is periodically producing integers (ten numbers per second):</source>
          <target state="translated">複数のコルーチンは、同じチャネルから受信して、自分たちの間で作業を分配することができます。ここでは、周期的に整数(毎秒10個の数)を生成しているプロデューサー・コルーチンから始めてみましょう。</target>
        </trans-unit>
        <trans-unit id="264744e655406950142eec2a53dc539eed8a5fd7" translate="yes" xml:space="preserve">
          <source>Multiple coroutines may send to the same channel. For example, let us have a channel of strings, and a suspending function that repeatedly sends a specified string to this channel with a specified delay:</source>
          <target state="translated">複数のコルーチンが同じチャンネルに送信することがあります。例えば、文字列のチャンネルがあり、このチャンネルに指定された文字列を指定された遅延時間で繰り返し送信するサスペンド関数があるとします。</target>
        </trans-unit>
        <trans-unit id="9d79d3118202ae1d668fb56014f9cb20b36159e5" translate="yes" xml:space="preserve">
          <source>Multiplies this value by the other value.</source>
          <target state="translated">この値に他の値を乗算します。</target>
        </trans-unit>
        <trans-unit id="f342e79f479c63b3a6f1a4035901daea4fbf30b9" translate="yes" xml:space="preserve">
          <source>MustBeDocumented</source>
          <target state="translated">MustBeDocumented</target>
        </trans-unit>
        <trans-unit id="07b00606431523d4ebea7077981984b607d973e8" translate="yes" xml:space="preserve">
          <source>Mutable closure variables</source>
          <target state="translated">変形可能なクロージャ変数</target>
        </trans-unit>
        <trans-unit id="e427611262df2a9a50ee135e0fceaecfa0c80c7f" translate="yes" xml:space="preserve">
          <source>Mutable concurrently accessible data buffer. Could be accessed from several workers simulteniously.</source>
          <target state="translated">同時アクセス可能なデータバッファ。複数のワーカーから同時にアクセス可能。</target>
        </trans-unit>
        <trans-unit id="46fb0a3dd2497d28351f3b643be68bf38c4dcf04" translate="yes" xml:space="preserve">
          <source>Mutable iterators</source>
          <target state="translated">可換イテレータ</target>
        </trans-unit>
        <trans-unit id="9b7b2307fe92cd7c012fa39281f7b175b249dd6e" translate="yes" xml:space="preserve">
          <source>MutableCollection</source>
          <target state="translated">MutableCollection</target>
        </trans-unit>
        <trans-unit id="42724994b4f6f408170a142d4bb3a6bfa7198849" translate="yes" xml:space="preserve">
          <source>MutableCollection.iterator</source>
          <target state="translated">MutableCollection.iterator</target>
        </trans-unit>
        <trans-unit id="1a5033d42eefb58adbea823fa5255b0aed1d662e" translate="yes" xml:space="preserve">
          <source>MutableData</source>
          <target state="translated">MutableData</target>
        </trans-unit>
        <trans-unit id="5e9e097c14385f745d368faabbd3854a67b05b46" translate="yes" xml:space="preserve">
          <source>MutableEntry</source>
          <target state="translated">MutableEntry</target>
        </trans-unit>
        <trans-unit id="8a4f4102af09300cf876f9a6460618caaa96575a" translate="yes" xml:space="preserve">
          <source>MutableIterable</source>
          <target state="translated">MutableIterable</target>
        </trans-unit>
        <trans-unit id="a652e5941b9ff793ccc9e659b88bf1a8f5227c3a" translate="yes" xml:space="preserve">
          <source>MutableIterator</source>
          <target state="translated">MutableIterator</target>
        </trans-unit>
        <trans-unit id="49e02d16b11d601b6e4902190c5bca350a9202fc" translate="yes" xml:space="preserve">
          <source>MutableList</source>
          <target state="translated">MutableList</target>
        </trans-unit>
        <trans-unit id="4c650d57f6075cf5940d694638ac9e4ec8e77bc6" translate="yes" xml:space="preserve">
          <source>MutableListIterator</source>
          <target state="translated">MutableListIterator</target>
        </trans-unit>
        <trans-unit id="f20ff48f1ceb7119a78b4b13a251cf2c7628b7ac" translate="yes" xml:space="preserve">
          <source>MutableMap</source>
          <target state="translated">MutableMap</target>
        </trans-unit>
        <trans-unit id="c0a289c1f11c0248072d86bca1271c7246850c9c" translate="yes" xml:space="preserve">
          <source>MutableSet</source>
          <target state="translated">MutableSet</target>
        </trans-unit>
        <trans-unit id="0b5d551add97f7ca81d05d95c5a9f114421d02ad" translate="yes" xml:space="preserve">
          <source>Mutating the backing field of a read-only property by assigning &lt;code&gt;field = ...&lt;/code&gt; in the custom getter has been deprecated, with a warning in Kotlin 1.2 and an error in Kotlin 1.3.</source>
          <target state="translated">カスタムゲッターで &lt;code&gt;field = ...&lt;/code&gt; を割り当てることによる読み取り専用プロパティのバッキングフィールドの変更は非推奨になりました。Kotlin1.2では警告が表示され、Kotlin 1.3ではエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="d9e09542ba7562ba06b3618d585343bb16717cc0" translate="yes" xml:space="preserve">
          <source>MutationObserver</source>
          <target state="translated">MutationObserver</target>
        </trans-unit>
        <trans-unit id="bf760ce86085d0556b58a1fb2886ad6300cf25c9" translate="yes" xml:space="preserve">
          <source>MutationObserverInit</source>
          <target state="translated">MutationObserverInit</target>
        </trans-unit>
        <trans-unit id="902e161ec72b34937173fb6ae6f1167c6c4b933a" translate="yes" xml:space="preserve">
          <source>MutationRecord</source>
          <target state="translated">MutationRecord</target>
        </trans-unit>
        <trans-unit id="bd89464f515bc7c1945f885ef807721ee91c256b" translate="yes" xml:space="preserve">
          <source>Mutual exclusion</source>
          <target state="translated">相互排除</target>
        </trans-unit>
        <trans-unit id="f2a0cc7430b6ab201c123d93595f5409656e44aa" translate="yes" xml:space="preserve">
          <source>Mutual exclusion solution to the problem is to protect all modifications of the shared state with a &lt;em&gt;critical section&lt;/em&gt; that is never executed concurrently. In a blocking world you'd typically use &lt;code&gt;synchronized&lt;/code&gt; or &lt;code&gt;ReentrantLock&lt;/code&gt; for that. Coroutine's alternative is called &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html&quot;&gt;Mutex&lt;/a&gt;. It has &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/lock.html&quot;&gt;lock&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/unlock.html&quot;&gt;unlock&lt;/a&gt; functions to delimit a critical section. The key difference is that &lt;code&gt;Mutex.lock()&lt;/code&gt; is a suspending function. It does not block a thread.</source>
          <target state="translated">この問題に対する相互排除ソリューションは、共有状態のすべての変更を、同時に実行されることのない&lt;em&gt;クリティカルセクション&lt;/em&gt;で保護することです。ブロッキングの世界では、通常、 &lt;code&gt;synchronized&lt;/code&gt; または &lt;code&gt;ReentrantLock&lt;/code&gt; を使用します。コルーチンの代替は&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html&quot;&gt;ミューテックス&lt;/a&gt;と呼ばれています。重要なセクションを区切るための&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/lock.html&quot;&gt;ロック&lt;/a&gt;および&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/unlock.html&quot;&gt;ロック解除&lt;/a&gt;機能があります。主な違いは、 &lt;code&gt;Mutex.lock()&lt;/code&gt; が中断関数であることです。スレッドをブロックしません。</target>
        </trans-unit>
        <trans-unit id="e6a87480ef216b736cda78776d20937ae965a5a1" translate="yes" xml:space="preserve">
          <source>My first coroutine</source>
          <target state="translated">私の最初のコルチン</target>
        </trans-unit>
        <trans-unit id="08d2e98e6754af941484848930ccbaddfefe13d6" translate="yes" xml:space="preserve">
          <source>N/A</source>
          <target state="translated">N/A</target>
        </trans-unit>
        <trans-unit id="ac5af3d78fb9a248a0c8878049fa45cb722c5609" translate="yes" xml:space="preserve">
          <source>NEGATIVE_INFINITY</source>
          <target state="translated">NEGATIVE_INFINITY</target>
        </trans-unit>
        <trans-unit id="0654a028e5aea48c8fbb09871b8f397a186c883b" translate="yes" xml:space="preserve">
          <source>NONE</source>
          <target state="translated">NONE</target>
        </trans-unit>
        <trans-unit id="19b5db1284eda5fe55423cf6ff666bbd91d48790" translate="yes" xml:space="preserve">
          <source>NONSPACING_MARK</source>
          <target state="translated">NONSPACING_MARK</target>
        </trans-unit>
        <trans-unit id="a711913b07f219db3720165b1cc42ba33ab84d07" translate="yes" xml:space="preserve">
          <source>NON_SPACING_MARK</source>
          <target state="translated">NON_SPACING_MARK</target>
        </trans-unit>
        <trans-unit id="b12d9f3adce16f3c42e185c9323b0f2c05d0d02a" translate="yes" xml:space="preserve">
          <source>NOTE: Octal literals are not supported.</source>
          <target state="translated">注:八進数リテラルはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c820cc676951d2a6935d55d3c748ef2d4229e0ef" translate="yes" xml:space="preserve">
          <source>NSArray</source>
          <target state="translated">NSArray</target>
        </trans-unit>
        <trans-unit id="850a25e67ede967c8226916d9435ee3fa9fe30c0" translate="yes" xml:space="preserve">
          <source>NSDictionary</source>
          <target state="translated">NSDictionary</target>
        </trans-unit>
        <trans-unit id="88142d93bc155af7430eda23b521adf5177befb3" translate="yes" xml:space="preserve">
          <source>NSMutableArray</source>
          <target state="translated">NSMutableArray</target>
        </trans-unit>
        <trans-unit id="093cc39541f1d88e9c8d7815809e04abdc468222" translate="yes" xml:space="preserve">
          <source>NSMutableDictionary</source>
          <target state="translated">NSMutableDictionary</target>
        </trans-unit>
        <trans-unit id="6f353d0803276b29f669e8e00d5912e0735d118f" translate="yes" xml:space="preserve">
          <source>NSMutableString</source>
          <target state="translated">NSMutableString</target>
        </trans-unit>
        <trans-unit id="21b6f3d1ecc982003af64b405b1aec1eeffcbd63" translate="yes" xml:space="preserve">
          <source>NSNumber</source>
          <target state="translated">NSNumber</target>
        </trans-unit>
        <trans-unit id="6049050154f9c68876906ec983b62a8beb7bfd87" translate="yes" xml:space="preserve">
          <source>NSSet</source>
          <target state="translated">NSSet</target>
        </trans-unit>
        <trans-unit id="f7fd9c68f804acda665d2ab082217bb1583318f2" translate="yes" xml:space="preserve">
          <source>NaN</source>
          <target state="translated">NaN</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="ed2a70884b6ea61a0ea998c7fe86ebc6c43c39e1" translate="yes" xml:space="preserve">
          <source>Name of the module being compiled</source>
          <target state="translated">コンパイルされるモジュールの名前</target>
        </trans-unit>
        <trans-unit id="4efab9c724a7839dff5f1e0118b1a9b242fe8997" translate="yes" xml:space="preserve">
          <source>Name of this parameter as it was declared in the source code, or &lt;code&gt;null&lt;/code&gt; if the parameter has no name or its name is not available at runtime. Examples of nameless parameters include &lt;code&gt;this&lt;/code&gt; instance for member functions, extension receiver for extension functions or properties, parameters of Java methods compiled without the debug information, and others.</source>
          <target state="translated">ソースコードで宣言されたこのパラメーターの名前。パラメーターに名前がないか、実行時にその名前を使用できない場合は &lt;code&gt;null&lt;/code&gt; 。名前のないパラメーターの例には、メンバー関数の &lt;code&gt;this&lt;/code&gt; インスタンス、拡張関数またはプロパティの拡張レシーバー、デバッグ情報なしでコンパイルされたJavaメソッドのパラメーターなどがあります。</target>
        </trans-unit>
        <trans-unit id="9e0268761f1a46defda13527e24a738481491b83" translate="yes" xml:space="preserve">
          <source>Name translation</source>
          <target state="translated">名前の翻訳</target>
        </trans-unit>
        <trans-unit id="80a1546459fb296b75e903b673f8cc0ad0b7638a" translate="yes" xml:space="preserve">
          <source>Named Arguments</source>
          <target state="translated">名前付き引数</target>
        </trans-unit>
        <trans-unit id="f2ab34573e168918bf72dc73ec10c4b5b1ba3f14" translate="yes" xml:space="preserve">
          <source>Named arguments</source>
          <target state="translated">名前付き引数</target>
        </trans-unit>
        <trans-unit id="7eee412e511b81f184e8fdcdd0d16df4490ee091" translate="yes" xml:space="preserve">
          <source>NamedNodeMap</source>
          <target state="translated">NamedNodeMap</target>
        </trans-unit>
        <trans-unit id="89ed0927522265d199caf008b2d935b4dc13e4ec" translate="yes" xml:space="preserve">
          <source>Namely, &lt;code&gt;Grouping&lt;/code&gt; supports the following operations:</source>
          <target state="translated">つまり、 &lt;code&gt;Grouping&lt;/code&gt; は次の操作をサポートします。</target>
        </trans-unit>
        <trans-unit id="ce7873d11ca1350ea35c4e7edcc86d0f3faedfbb" translate="yes" xml:space="preserve">
          <source>Names for backing properties</source>
          <target state="translated">バッキングプロパティの名称</target>
        </trans-unit>
        <trans-unit id="d5e90b6eaa5ac7d68bfe0de19720901740a9662f" translate="yes" xml:space="preserve">
          <source>Names for test methods</source>
          <target state="translated">試験方法の名称</target>
        </trans-unit>
        <trans-unit id="1bbe1b5bbc9b48ae056a0ba828b7773769b4e6a7" translate="yes" xml:space="preserve">
          <source>Names in links are resolved using the same rules as if the name was used inside the element being documented. In particular, this means that if you have imported a name into the current file, you don't need to fully qualify it when you use it in a KDoc comment.</source>
          <target state="translated">リンク内の名前は、その名前が文書化されている要素の内部で使用されている場合と同じルールで解決されます。特に、現在のファイルに名前をインポートしている場合は、KDocのコメントで名前を使用する際に完全に修飾する必要がないことを意味します。</target>
        </trans-unit>
        <trans-unit id="c5380f68245bbc672ad92afb09b8fb6715ad3ca6" translate="yes" xml:space="preserve">
          <source>Names of classes and objects start with an upper case letter and use camel humps:</source>
          <target state="translated">クラスやオブジェクトの名前は大文字で始まり、ラクダのこぶを使用します。</target>
        </trans-unit>
        <trans-unit id="fc15464a07c43531a73eacebb7c301c643be9755" translate="yes" xml:space="preserve">
          <source>Names of constants (properties marked with &lt;code&gt;const&lt;/code&gt;, or top-level or object &lt;code&gt;val&lt;/code&gt; properties with no custom &lt;code&gt;get&lt;/code&gt; function that hold deeply immutable data) should use uppercase underscore-separated names:</source>
          <target state="translated">定数の名前（ &lt;code&gt;const&lt;/code&gt; でマークされたプロパティ、または深く不変のデータを保持するカスタム &lt;code&gt;get&lt;/code&gt; 関数のないトップレベルまたはオブジェクト &lt;code&gt;val&lt;/code&gt; プロパティ）は、アンダースコアで区切られた大文字の名前を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed152e23d368497078b7ae5dc12a67a09aef9537" translate="yes" xml:space="preserve">
          <source>Names of functions, properties and local variables start with a lower case letter and use camel humps and no underscores:</source>
          <target state="translated">関数、プロパティ、ローカル変数の名前は小文字で始まり、キャメルハンプを使用し、アンダースコアは使用しません。</target>
        </trans-unit>
        <trans-unit id="2fe2ff19a7f565c3d30edceae570abf2351b799b" translate="yes" xml:space="preserve">
          <source>Names of packages are always lower case and do not use underscores (&lt;code&gt;org.example.myproject&lt;/code&gt;). Using multi-word names is generally discouraged, but if you do need to use multiple words, you can either simply concatenate them together or use camel humps (&lt;code&gt;org.example.myProject&lt;/code&gt;).</source>
          <target state="translated">パッケージの名前は常に小文字で、アンダースコア（ &lt;code&gt;org.example.myproject&lt;/code&gt; ）を使用しません。通常、複数の単語を使用することはお勧めしませんが、複数の単語を使用する必要がある場合は、それらを単に連結するか、キャメルのこぶ（ &lt;code&gt;org.example.myProject&lt;/code&gt; ）を使用できます。</target>
        </trans-unit>
        <trans-unit id="7f7adf5dd484e8eda6819e4b4ab1a277a17337ee" translate="yes" xml:space="preserve">
          <source>Names of properties holding references to singleton objects can use the same naming style as &lt;code&gt;object&lt;/code&gt; declarations:</source>
          <target state="translated">シングルトンオブジェクトへの参照を保持するプロパティの名前には、 &lt;code&gt;object&lt;/code&gt; 宣言と同じ命名スタイルを使用できます。</target>
        </trans-unit>
        <trans-unit id="2dd1c430f56a1096d7535c6bff1f0b002bb217ee" translate="yes" xml:space="preserve">
          <source>Names of top-level or object properties which hold objects with behavior or mutable data should use regular camel-hump names:</source>
          <target state="translated">挙動を持つオブジェクトや変異可能なデータを持つオブジェクトを保持するトップレベルまたはオブジェクトプロパティの名前には、通常のキャメルハンプ名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a821637ed465037f50fb45146c7157533ce303ab" translate="yes" xml:space="preserve">
          <source>Naming coroutines for debugging</source>
          <target state="translated">デバッグ用のコアーチンの命名</target>
        </trans-unit>
        <trans-unit id="b8f89bc873847bc6acb441471008e2ef77f271a2" translate="yes" xml:space="preserve">
          <source>Naming rules</source>
          <target state="translated">ネーミングルール</target>
        </trans-unit>
        <trans-unit id="4fc6e7f740abb8af896ebedebf941a3f8d7076b5" translate="yes" xml:space="preserve">
          <source>Native</source>
          <target state="translated">Native</target>
        </trans-unit>
        <trans-unit id="712b0ca62af66efef9be01024a01163935118cd1" translate="yes" xml:space="preserve">
          <source>NativeFreeablePlacement</source>
          <target state="translated">NativeFreeablePlacement</target>
        </trans-unit>
        <trans-unit id="8c2ed68939229f0bed6cd8b6f2cb9306658a5c17" translate="yes" xml:space="preserve">
          <source>NativePlacement</source>
          <target state="translated">NativePlacement</target>
        </trans-unit>
        <trans-unit id="f6500269f9c3fb94b4438bc913d694314febde22" translate="yes" xml:space="preserve">
          <source>NativePointed</source>
          <target state="translated">NativePointed</target>
        </trans-unit>
        <trans-unit id="82e059ceb59aa7b7713c457045493d8d28dcc3f4" translate="yes" xml:space="preserve">
          <source>NativePtr</source>
          <target state="translated">NativePtr</target>
        </trans-unit>
        <trans-unit id="f504a9f397b7b30ca39f0ef1407b932940292f78" translate="yes" xml:space="preserve">
          <source>Natural order</source>
          <target state="translated">自然秩序</target>
        </trans-unit>
        <trans-unit id="c8e6f949b8ada118fdafbdc6ee8783d697f007cb" translate="yes" xml:space="preserve">
          <source>Navigator</source>
          <target state="translated">Navigator</target>
        </trans-unit>
        <trans-unit id="e7b5edc7e8cb311a0b039335c594c9a957eb3175" translate="yes" xml:space="preserve">
          <source>NavigatorConcurrentHardware</source>
          <target state="translated">NavigatorConcurrentHardware</target>
        </trans-unit>
        <trans-unit id="c539be135337dd03c6301959fad0ce1bee475889" translate="yes" xml:space="preserve">
          <source>NavigatorContentUtils</source>
          <target state="translated">NavigatorContentUtils</target>
        </trans-unit>
        <trans-unit id="00b43738cf147df0c752dcea119b953d47ded336" translate="yes" xml:space="preserve">
          <source>NavigatorCookies</source>
          <target state="translated">NavigatorCookies</target>
        </trans-unit>
        <trans-unit id="ca09397d83fa076ca8fa71c95007223165d66fb5" translate="yes" xml:space="preserve">
          <source>NavigatorID</source>
          <target state="translated">NavigatorID</target>
        </trans-unit>
        <trans-unit id="1c556456dba6623478e38282faadace5b5f02feb" translate="yes" xml:space="preserve">
          <source>NavigatorLanguage</source>
          <target state="translated">NavigatorLanguage</target>
        </trans-unit>
        <trans-unit id="b3ab2a10f83370ceafad9f996d8048d28d1a1363" translate="yes" xml:space="preserve">
          <source>NavigatorOnLine</source>
          <target state="translated">NavigatorOnLine</target>
        </trans-unit>
        <trans-unit id="e94d6507f620430ae9754053564c70782f33c7c9" translate="yes" xml:space="preserve">
          <source>NavigatorPlugins</source>
          <target state="translated">NavigatorPlugins</target>
        </trans-unit>
        <trans-unit id="e7f4b2c609e0e06e378710e78e2e3f9dbec6df11" translate="yes" xml:space="preserve">
          <source>Negative values show that it's less than the argument.</source>
          <target state="translated">マイナスの値は論よりも少ないことを示しています。</target>
        </trans-unit>
        <trans-unit id="789280e01339d5a915f0345cf138b9b4fb941c8e" translate="yes" xml:space="preserve">
          <source>Nested and Inner Classes</source>
          <target state="translated">入れ子クラスと内部クラス</target>
        </trans-unit>
        <trans-unit id="ee69ace2d0864bd815e214e20536f1f61364fc0f" translate="yes" xml:space="preserve">
          <source>Nested classifiers in enum entries</source>
          <target state="translated">列挙エントリ内のネストされた分類子</target>
        </trans-unit>
        <trans-unit id="40c58381d790a3e7eec655ca2a16667d8a074dd3" translate="yes" xml:space="preserve">
          <source>Nested declarations in annotation classes</source>
          <target state="translated">アノテーションクラスのネストされた宣言</target>
        </trans-unit>
        <trans-unit id="d053911ed6d5cc20ee675fd6a4520e78c20b1efb" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;B&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 仕様の中立双方向文字型「B」。</target>
        </trans-unit>
        <trans-unit id="8fd58ea9d9361ae87799e3e0adb497216a8850cd" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;ON&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様の中立双方向文字型「ON」。</target>
        </trans-unit>
        <trans-unit id="cc8492cfce3dced2f8758c8c41b89e84144de788" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;S&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 仕様の中立双方向文字型「S」。</target>
        </trans-unit>
        <trans-unit id="61ee633fcd6ff884b460c34fd4f698e42b8d1f57" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;WS&quot; in the Unicode specification.</source>
          <target state="translated">Unicode仕様における中立双方向文字型「WS」。</target>
        </trans-unit>
        <trans-unit id="9ac5f98640f23386ec33233fa4af214ae29bb68c" translate="yes" xml:space="preserve">
          <source>Never equal to null: for any non-null value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(null)&lt;/code&gt; should return false.</source>
          <target state="translated">nullに等しくない：null以外の値 &lt;code&gt;x&lt;/code&gt; の場合、 &lt;code&gt;x.equals(null)&lt;/code&gt; はfalseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="c8ca579cfa2a0bc063bd07e3a4d9c7f65e8e3087" translate="yes" xml:space="preserve">
          <source>Never put a space after &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, or before &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、またはその前 &lt;code&gt;]&lt;/code&gt; 、 &lt;code&gt;)&lt;/code&gt; の後にスペースを入れないでください。</target>
        </trans-unit>
        <trans-unit id="9294e60ab9df0dbecb3a72a47335eee294748f65" translate="yes" xml:space="preserve">
          <source>Never put a space around &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;?.&lt;/code&gt;: &lt;code&gt;foo.bar().filter { it &amp;gt; 2 }.joinToString()&lt;/code&gt;, &lt;code&gt;foo?.bar()&lt;/code&gt;</source>
          <target state="translated">周りにスペースを置かないでください &lt;code&gt;.&lt;/code&gt; または &lt;code&gt;?.&lt;/code&gt; ： &lt;code&gt;foo.bar().filter { it &amp;gt; 2 }.joinToString()&lt;/code&gt; 、 &lt;code&gt;foo?.bar()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="845d99d67846936e2a2ecffc0c1f73a93b077848" translate="yes" xml:space="preserve">
          <source>New extensions for &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Sequence&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;CharSequence&lt;/code&gt; cover such use cases as buffering or batch processing (&lt;code&gt;chunked&lt;/code&gt;), sliding window and computing sliding average (&lt;code&gt;windowed&lt;/code&gt;) , and processing pairs of subsequent items (&lt;code&gt;zipWithNext&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; 、 &lt;code&gt;Sequence&amp;lt;T&amp;gt;&lt;/code&gt; 、および &lt;code&gt;CharSequence&lt;/code&gt; の新しい拡張機能は、バッファリングまたはバッチ処理（ &lt;code&gt;chunked&lt;/code&gt; ）、スライディングウィンドウとスライディング平均の計算（ &lt;code&gt;windowed&lt;/code&gt; ）、および後続のアイテムのペアの処理（ &lt;code&gt;zipWithNext&lt;/code&gt; ）などのユースケースをカバーします。</target>
        </trans-unit>
        <trans-unit id="e22e233ab95d5952f18b874d9870e1b80280d15d" translate="yes" xml:space="preserve">
          <source>New functions were added for converting &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt; to and from their bit representations:</source>
          <target state="translated">&lt;code&gt;Double&lt;/code&gt; と &lt;code&gt;Float&lt;/code&gt; をビット表現との間で変換するための新しい関数が追加されました。</target>
        </trans-unit>
        <trans-unit id="28dcc6d65c266a50c3f667c9e5ea8aa135aa58a6" translate="yes" xml:space="preserve">
          <source>New to Kotlin? Take a look at the &lt;a href=&quot;basic-syntax&quot;&gt;Getting Started&lt;/a&gt; page.</source>
          <target state="translated">Kotlinは初めてですか？見てみましょう&lt;a href=&quot;basic-syntax&quot;&gt;スタート&lt;/a&gt;ページを。</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="5079a9846101e11db84a1abb592a9473e268055f" translate="yes" xml:space="preserve">
          <source>Next open a new terminal and install Kotlin with:</source>
          <target state="translated">次に新しいターミナルを開き、Kotlinをインストールします。</target>
        </trans-unit>
        <trans-unit id="2f460c75911314c0c9543c3367959a31445cb463" translate="yes" xml:space="preserve">
          <source>Next, let's include the following line of code into the &lt;code&gt;MainActivity&lt;/code&gt; class from the &lt;code&gt;/app/src/main/java/&amp;lt;package&amp;gt;/MainActivity.kt&lt;/code&gt; file, to the end of the &lt;code&gt;onCreate&lt;/code&gt; method:</source>
          <target state="translated">次に、 &lt;code&gt;/app/src/main/java/&amp;lt;package&amp;gt;/MainActivity.kt&lt;/code&gt; ファイルから &lt;code&gt;onCreate&lt;/code&gt; メソッドの最後まで、 &lt;code&gt;MainActivity&lt;/code&gt; クラスに次のコード行を含めます。</target>
        </trans-unit>
        <trans-unit id="61e1f7fc790c5246a6e519f4f67f422c4a517358" translate="yes" xml:space="preserve">
          <source>Next, we need to create the &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; file with the following content:</source>
          <target state="translated">次に、次の内容の &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="fba44f74cfbe24d927a6f2e32c74f105a6d9ca00" translate="yes" xml:space="preserve">
          <source>Next: Annotations &amp;rarr;</source>
          <target state="translated">次：注釈&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="00ef744e43f0f9ea134186c2ef008876b94cfb5d" translate="yes" xml:space="preserve">
          <source>Next: Classes &amp;rarr;</source>
          <target state="translated">次：クラス&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="c8735b85302131b9db681cecd1fb40aa277a0558" translate="yes" xml:space="preserve">
          <source>Next: Collections &amp;rarr;</source>
          <target state="translated">次：コレクション&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="07999039cc4614cf9d9c83d8a64e7926f8829364" translate="yes" xml:space="preserve">
          <source>Next: Compiling and running &amp;rarr;</source>
          <target state="translated">次：コンパイルと実行&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="f20d28acc929c74946791930cf9c56d2978b64a8" translate="yes" xml:space="preserve">
          <source>Next: Conditionals &amp;rarr;</source>
          <target state="translated">次：条件文&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="840074b0ba8fd90b4e90aa33d45718551b373169" translate="yes" xml:space="preserve">
          <source>Next: Declaring variables &amp;rarr;</source>
          <target state="translated">次：変数の宣言&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="cce5126b0175141ca7a8267a7936ebe65fe68d5f" translate="yes" xml:space="preserve">
          <source>Next: Documentation &amp;rarr;</source>
          <target state="translated">次：ドキュメント&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="fa55701df6604b3cecc0d604af09a04554d557b6" translate="yes" xml:space="preserve">
          <source>Next: Exceptions &amp;rarr;</source>
          <target state="translated">次：例外&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b6aa34eef4e603a14fc427c78ce11728dd25836" translate="yes" xml:space="preserve">
          <source>Next: Extension functions/properties &amp;rarr;</source>
          <target state="translated">次：拡張関数/プロパティ&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="085547cea36d9036af28992fd35c78130fafdd20" translate="yes" xml:space="preserve">
          <source>Next: File I/O &amp;rarr;</source>
          <target state="translated">次：ファイルI / O&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="1ad7d1fc04a3f8f5bb3171b2738d368b2e7962ea" translate="yes" xml:space="preserve">
          <source>Next: Functional programming &amp;rarr;</source>
          <target state="translated">次：関数型プログラミング&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="4ca230bdec76005c5c8ecf036e517045996d632a" translate="yes" xml:space="preserve">
          <source>Next: Functions &amp;rarr;</source>
          <target state="translated">次：関数&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="ee174e846c5088dfbb38266ba627304b28a4e778" translate="yes" xml:space="preserve">
          <source>Next: Generics &amp;rarr;</source>
          <target state="translated">次：ジェネリックス&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="1fc3a42a52feb37755a354083cafdc34a3336119" translate="yes" xml:space="preserve">
          <source>Next: Hello World &amp;rarr;</source>
          <target state="translated">次：Hello World&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="3e18f658842ac7800584f5830d0086c6615ba81e" translate="yes" xml:space="preserve">
          <source>Next: Inheritance &amp;rarr;</source>
          <target state="translated">次：継承&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="e300f7cf6a03c09bab1b47c326855a60fe6e07fb" translate="yes" xml:space="preserve">
          <source>Next: Loops &amp;rarr;</source>
          <target state="translated">次：ループ&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="42aae1e29d68a1d88913d08cee33e89180a579d7" translate="yes" xml:space="preserve">
          <source>Next: Member references and reflection &amp;rarr;</source>
          <target state="translated">次：メンバーの参照とリフレクション&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="47130dd2717d7971c3c94623669be8f3f6e6f3ff" translate="yes" xml:space="preserve">
          <source>Next: Null safety &amp;rarr;</source>
          <target state="translated">次：ヌルセーフティ&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="86e91a1d2169b2b6d5f0e4158807082816cf024d" translate="yes" xml:space="preserve">
          <source>Next: Objects and companion objects &amp;rarr;</source>
          <target state="translated">次：オブジェクトとコンパニオンオブジェクト&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6bfa5e253a9933523c52548db5718fffcec08ff4" translate="yes" xml:space="preserve">
          <source>Next: Packages and imports &amp;rarr;</source>
          <target state="translated">次：パッケージとインポート&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="61b315e1a975491d53d3e93505ae2e73a35eccf9" translate="yes" xml:space="preserve">
          <source>Next: Primitive data types and their limitations &amp;rarr;</source>
          <target state="translated">次へ：プリミティブデータタイプとその制限&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="a8e3f58e4df0923f458764df8d805bc1daaebc52" translate="yes" xml:space="preserve">
          <source>Next: Scoped resource usage &amp;rarr;</source>
          <target state="translated">次：スコープ指定リソースの使用&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="d22ef24051b74c0f8f3a98dbd34b162df22e8d8a" translate="yes" xml:space="preserve">
          <source>Next: Strings &amp;rarr;</source>
          <target state="translated">次：文字列&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="df94caa7ffe6e8dba6f94ac077da12da6df4dd88" translate="yes" xml:space="preserve">
          <source>Next: Visibility modifiers &amp;rarr;</source>
          <target state="translated">次：可視性修飾子&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="dd6dd817ee9557c6ebd9ce223abe7e65e35724c3" translate="yes" xml:space="preserve">
          <source>Nice utility functions</source>
          <target state="translated">優れたユーティリティー機能</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="fc6d6d07a9da4b1cf8d3f863c9932b05d0b9d378" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;EXPRESSION&lt;/code&gt; and &lt;code&gt;FILE&lt;/code&gt; among &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.annotation/-annotation-target/index&quot;&gt;targets&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.annotation/-annotation-target/index&quot;&gt;ターゲット&lt;/a&gt;間で &lt;code&gt;EXPRESSION&lt;/code&gt; および &lt;code&gt;FILE&lt;/code&gt; はありません</target>
        </trans-unit>
        <trans-unit id="d50a5c00dba30dbb17216b740546f411fd49910a" translate="yes" xml:space="preserve">
          <source>No custom getter</source>
          <target state="translated">カスタムゲッターなし</target>
        </trans-unit>
        <trans-unit id="c2792086f80dff691fc70c60e9944bd70ee578bb" translate="yes" xml:space="preserve">
          <source>No locks are used to synchronize an access to the &lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt; instance value; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated">&lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt;インスタンス値へのアクセスを同期するためにロックは使用されません。インスタンスが複数のスレッドからアクセスされる場合、その動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="1576fb8454236b0d4fa99182ffbcc64b6805f9d7" translate="yes" xml:space="preserve">
          <source>No need to mark the Application class as &lt;em&gt;open&lt;/em&gt; since we are using the &lt;em&gt;kotlin-spring&lt;/em&gt; Gradle plugin which does that automatically.</source>
          <target state="translated">自動的にそれを行う&lt;em&gt;kotlin-spring&lt;/em&gt; Gradleプラグインを使用して&lt;em&gt;いる&lt;/em&gt;ので、Applicationクラスを&lt;em&gt;オープン&lt;/em&gt;としてマークする必要はありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ea178000db803133ca4ed5bf0f26cf40a2ac141" translate="yes" xml:space="preserve">
          <source>No parameters.</source>
          <target state="translated">パラメータはありません。</target>
        </trans-unit>
        <trans-unit id="a39dbb3db1c73d98fb6e9bf0a6cc7fe2780640aa" translate="yes" xml:space="preserve">
          <source>No raw types</source>
          <target state="translated">生タイプなし</target>
        </trans-unit>
        <trans-unit id="4512f94421443be3bb6fe68bb037823683ccfd0a" translate="yes" xml:space="preserve">
          <source>No-arg compiler plugin</source>
          <target state="translated">引数なしのコンパイラプラグイン</target>
        </trans-unit>
        <trans-unit id="ec11a5bdeaa38cafa1809cd0b1418fa7f8f3cfef" translate="yes" xml:space="preserve">
          <source>No. Kotlin lets you choose between generating Java 6 and Java 8 compatible bytecode. More optimal byte code may be generated for higher versions of the platform.</source>
          <target state="translated">いいえ。Kotlinでは、Java 6とJava 8の互換性のあるバイトコードを生成するかどうかを選択できます。プラットフォームの上位バージョンでは、より最適なバイトコードが生成される場合があります。</target>
        </trans-unit>
        <trans-unit id="ce3234172e6888dbe6cf68e5d69aca93bdbdb6aa" translate="yes" xml:space="preserve">
          <source>No: called without the context object</source>
          <target state="translated">いいえ:コンテキストオブジェクトなしで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="44924246111ca028f4b377861fa8b1a56b2f8f3f" translate="yes" xml:space="preserve">
          <source>No: takes the context object as an argument.</source>
          <target state="translated">いいえ:コンテキストオブジェクトを引数に取ります。</target>
        </trans-unit>
        <trans-unit id="23a71e363ee25bc12526201fd5e1559555edeab5" translate="yes" xml:space="preserve">
          <source>NoSuchElementException</source>
          <target state="translated">NoSuchElementException</target>
        </trans-unit>
        <trans-unit id="9a296716d89fec45e837ec162f0a3cdfae0666f6" translate="yes" xml:space="preserve">
          <source>NoSuchFileException</source>
          <target state="translated">NoSuchFileException</target>
        </trans-unit>
        <trans-unit id="8e965431f22047ddfc939473709e81428fafe4f0" translate="yes" xml:space="preserve">
          <source>NoSuchPropertyException</source>
          <target state="translated">NoSuchPropertyException</target>
        </trans-unit>
        <trans-unit id="dd82911bf9c2f7cf6fe3c3a3a0486e6fd4980949" translate="yes" xml:space="preserve">
          <source>NoWhenBranchMatchedException</source>
          <target state="translated">NoWhenBranchMatchedException</target>
        </trans-unit>
        <trans-unit id="6d1452836a5e358d27de613d82985d8f206e4345" translate="yes" xml:space="preserve">
          <source>NodeFilter</source>
          <target state="translated">NodeFilter</target>
        </trans-unit>
        <trans-unit id="749f705e68c34826a7cc3dffa5cbbe3e73f820de" translate="yes" xml:space="preserve">
          <source>NodeIterator</source>
          <target state="translated">NodeIterator</target>
        </trans-unit>
        <trans-unit id="05a2a8746fe10231011b4d6850be527a41c1c732" translate="yes" xml:space="preserve">
          <source>NodeList</source>
          <target state="translated">NodeList</target>
        </trans-unit>
        <trans-unit id="683af661ab161f85e9822c648db026a9cf30dda6" translate="yes" xml:space="preserve">
          <source>Non-constant vararg annotation parameters</source>
          <target state="translated">非定数の vararg 注釈パラメータ</target>
        </trans-unit>
        <trans-unit id="dc9767217a1c7b0bf421fbdc439c549407505217" translate="yes" xml:space="preserve">
          <source>Non-existent type correction</source>
          <target state="translated">存在しないタイプの修正</target>
        </trans-unit>
        <trans-unit id="4faaccd91d30b37f731dad2f02cd8a91e9099b87" translate="yes" xml:space="preserve">
          <source>Non-local returns</source>
          <target state="translated">非ローカルリターン</target>
        </trans-unit>
        <trans-unit id="92dc2c3bbe1e4d97caf60f89e03fd837acb72669" translate="yes" xml:space="preserve">
          <source>Non-private fields</source>
          <target state="translated">プライベート以外の分野</target>
        </trans-unit>
        <trans-unit id="f8f526d37ae54edc0292fa3b9fb52e0ef28cf4f3" translate="yes" xml:space="preserve">
          <source>Non-propagating use</source>
          <target state="translated">非増殖的な使用</target>
        </trans-unit>
        <trans-unit id="806c74a6dd444e7b581fe8d0651c3b583f7e4a35" translate="yes" xml:space="preserve">
          <source>NonDocumentTypeChildNode</source>
          <target state="translated">NonDocumentTypeChildNode</target>
        </trans-unit>
        <trans-unit id="928c9a9956e3637b60b5e9617db297b95e7290fd" translate="yes" xml:space="preserve">
          <source>NonElementParentNode</source>
          <target state="translated">NonElementParentNode</target>
        </trans-unit>
        <trans-unit id="d75dfc52cb45227dc75a26a76fe24ef6aeb82f70" translate="yes" xml:space="preserve">
          <source>Normal functions (not marked as inline) cannot have reified parameters. A type that does not have a run-time representation (e.g. a non-reified type parameter or a fictitious type like &lt;code&gt;Nothing&lt;/code&gt;) cannot be used as an argument for a reified type parameter.</source>
          <target state="translated">通常の関数（インラインとしてマークされていない）は、具体化されたパラメーターを持つことができません。ランタイム表現を持たない型（たとえば、非具体化型パラメーターや &lt;code&gt;Nothing&lt;/code&gt; などの架空の型）は、具体化型パラメーターの引数として使用できません。</target>
        </trans-unit>
        <trans-unit id="49a45a50e6244c47619f28727155a0cbe41bd131" translate="yes" xml:space="preserve">
          <source>Normal methods can be overridden using the &lt;code&gt;override&lt;/code&gt; Kotlin keyword. In this case the overriding method must have the same parameter names as the overridden one.</source>
          <target state="translated">通常のメソッドは、 &lt;code&gt;override&lt;/code&gt; Kotlinキーワードを使用してオーバーライドできます。この場合、オーバーライドするメソッドには、オーバーライドされるメソッドと同じパラメーター名が必要です。</target>
        </trans-unit>
        <trans-unit id="a916e7bdcd294dc74af71b748cdce7d82df98e31" translate="yes" xml:space="preserve">
          <source>Normally, if you write a Kotlin function with default parameter values, it will be visible in Java only as a full signature, with all parameters present. If you wish to expose multiple overloads to Java callers, you can use the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/index&quot;&gt;&lt;code&gt;@JvmOverloads&lt;/code&gt;&lt;/a&gt; annotation.</source>
          <target state="translated">通常、デフォルトのパラメーター値を使用してKotlin関数を作成すると、Javaでは完全なシグニチャーとしてのみ表示され、すべてのパラメーターが存在します。複数のオーバーロードをJava呼び出し元に公開する場合は、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/index&quot;&gt; &lt;code&gt;@JvmOverloads&lt;/code&gt; &lt;/a&gt;アノテーションを使用できます。</target>
        </trans-unit>
        <trans-unit id="6a89db40e0b8cfbd047b44012190c470a3ee8af7" translate="yes" xml:space="preserve">
          <source>Normally, properties declared as having a non-null type must be initialized in the constructor. However, fairly often this is not convenient. For example, properties can be initialized through dependency injection, or in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor, but you still want to avoid null checks when referencing the property inside the body of a class.</source>
          <target state="translated">通常、非 null 型を持つと宣言されたプロパティはコンストラクタで初期化しなければなりません。しかし、これは便利ではないことがよくあります。例えば、依存関係の注入や、ユニットテストのセットアップメソッドでプロパティを初期化することができます。この場合、コンストラクタで非 null 型のイニシャライザを指定することはできませんが、クラスのボディ内でプロパティを参照する際に null チェックを回避したい場合もあります。</target>
        </trans-unit>
        <trans-unit id="a967d31a488ea79d5210d74fd176b0b854f6d231" translate="yes" xml:space="preserve">
          <source>Not only classes can have type parameters. Functions can, too. Type parameters are placed &lt;strong&gt;before&lt;/strong&gt; the name of the function:</source>
          <target state="translated">クラスだけが型パラメーターを持つことができるわけではありません。関数もできます。型パラメーターは、関数の名前の&lt;strong&gt;前&lt;/strong&gt;に配置されます。</target>
        </trans-unit>
        <trans-unit id="2efce3f5aa2c271d194d1082031602e01c017249" translate="yes" xml:space="preserve">
          <source>Not use any members that take a star-projected type as a parameter</source>
          <target state="translated">星形投影型をパラメータとするメンバを使用しない。</target>
        </trans-unit>
        <trans-unit id="68b62df2b207d9543eb97cef507795cf7a5eb731" translate="yes" xml:space="preserve">
          <source>Not-null assertion operator</source>
          <target state="translated">ノットヌルアサーション演算子</target>
        </trans-unit>
        <trans-unit id="8850b3bd61499741c05bd500ea7929ed489941ca" translate="yes" xml:space="preserve">
          <source>NotImplementedError</source>
          <target state="translated">NotImplementedError</target>
        </trans-unit>
        <trans-unit id="0525b1fa9e28d14aa40cc8644228138fdab333ad" translate="yes" xml:space="preserve">
          <source>Notation for Platform Types</source>
          <target state="translated">プラットフォームタイプの表記法</target>
        </trans-unit>
        <trans-unit id="346c210a245c6f4ac5e207e281e87f32eaf27522" translate="yes" xml:space="preserve">
          <source>Note how &lt;a href=&quot;../reference/properties#late-initialized-properties-and-variables&quot;&gt;the lateinit modifier&lt;/a&gt; allows to declare a non-null type initialized after the object is created (after the constructor call). Without &lt;code&gt;lateinit&lt;/code&gt; you'd have to declare a &lt;a href=&quot;../reference/null-safety&quot;&gt;nullable type&lt;/a&gt; and add additional nullability checks.</source>
          <target state="translated">オブジェクトの作成後（コンストラクターの呼び出し後）&lt;a href=&quot;../reference/properties#late-initialized-properties-and-variables&quot;&gt;、lateinit修飾子を&lt;/a&gt;使用して初期化されたnull以外の型を宣言できることに注意してください。なけれ &lt;code&gt;lateinit&lt;/code&gt; あなたは宣言する必要があると思い&lt;a href=&quot;../reference/null-safety&quot;&gt;NULL可能タイプを&lt;/a&gt;、追加のNULL値を許容するかどうかのチェックを追加します。</target>
        </trans-unit>
        <trans-unit id="ece9aff9cfec4f422a4dd193e67bb220717aeb47" translate="yes" xml:space="preserve">
          <source>Note how easily one may forget the corresponding context element and then still safely access thread local. To avoid such situations, it is recommended to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/java.lang.-thread-local/ensure-present.html&quot;&gt;ensurePresent&lt;/a&gt; method and fail-fast on improper usages.</source>
          <target state="translated">対応するコンテキスト要素を忘れても、ローカルのスレッドに安全にアクセスできることに注意してください。このような状況を回避するには、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/java.lang.-thread-local/ensure-present.html&quot;&gt;ensurePresent&lt;/a&gt;メソッドを使用し、不適切な使用法ではフェイルファストすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="27e144234fbe29431367eab42a112f44ba9e6e90" translate="yes" xml:space="preserve">
          <source>Note on visibility</source>
          <target state="translated">視認性に関する注意事項</target>
        </trans-unit>
        <trans-unit id="f7e11b4556b13f0f82fdc5bafcd108c64e182fe4" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;android-plugin&quot;&gt;Kotlin Android Extensions&lt;/a&gt; plugin (automatically bundled into the Kotlin plugin in Android Studio) solves the same issue: replacing &lt;code&gt;findViewById&lt;/code&gt; with a concise and straightforward code. Consider using it unless you're already using ButterKnife and don't want to migrate.</source>
          <target state="translated">注こと&lt;a href=&quot;android-plugin&quot;&gt;Kotlin Androidの拡張機能&lt;/a&gt;（自動アンドロイドStudioでKotlinプラグインにバンドル）プラグインが同じ問題を解決：交換 &lt;code&gt;findViewById&lt;/code&gt; を簡潔で分かりやすいコードで。すでにButterKnifeを使用していて、移行したくない場合を除き、使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="b10bef8aca468769cab7ca0f31c1ca35bfeef062" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; is an extension function defined only for channels with non-nullable elements so that there is no accidental confusion between a closed channel and a null value.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt;はnull関数を使用できない要素を持つチャネルに対してのみ定義される拡張関数であるため、閉じたチャネルとnull値が誤って混同しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="23cd4a64981ce83f9769929d7af16453dd2385a0" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/ticker.html&quot;&gt;ticker&lt;/a&gt; is aware of possible consumer pauses and, by default, adjusts next produced element delay if a pause occurs, trying to maintain a fixed rate of produced elements.</source>
          <target state="translated">そのノート&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/ticker.html&quot;&gt;ティッカーが&lt;/a&gt;可能消費者が一時停止を認識しており、一時停止が発生した場合、デフォルトで、生成要素の固定速度を維持しようとすると、次生成素子遅延を調整します。</target>
        </trans-unit>
        <trans-unit id="e4f574aa6b81a2a53d14300616da27a08406bc5d" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt; in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; is just a convenient shortcut for &lt;code&gt;coroutineContext[Job]?.isActive == true&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScopeの&lt;/a&gt;&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt;はcoroutineContext &lt;code&gt;coroutineContext[Job]?.isActive == true&lt;/code&gt; 便利なショートカットにすぎないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="643f0957c5be70b41f4b5877b3662ee68c79f859" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;-&lt;/code&gt; is an &lt;em&gt;invalid&lt;/em&gt; symbol in Java, meaning that it's impossible to call functions which accept inline classes from Java.</source>
          <target state="translated">こと注 &lt;code&gt;-&lt;/code&gt; で&lt;em&gt;無効&lt;/em&gt;それはJavaからインラインクラスを受け入れる関数を呼び出すことは不可能だということを意味し、Javaでのシンボル。</target>
        </trans-unit>
        <trans-unit id="326418c4e5742c7d5633cf6eb21a36a9bd5007fa" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;associate()&lt;/code&gt; produces short-living &lt;code&gt;Pair&lt;/code&gt; objects which may affect the performance. Thus, &lt;code&gt;associate()&lt;/code&gt; should be used when the performance isn't critical or it's more preferable than other options.</source>
          <target state="translated">assign &lt;code&gt;associate()&lt;/code&gt; は、パフォーマンスに影響を与える可能性のある短命の &lt;code&gt;Pair&lt;/code&gt; オブジェクトを生成することに注意してください。したがって、パフォーマンスが重要でない場合、または他のオプションよりも好ましい場合は、 &lt;code&gt;associate()&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4712744d1c59fe11b666d701399f2acdde076310" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;external&lt;/code&gt; modifier is inherited by nested declarations, i.e. in &lt;code&gt;Node&lt;/code&gt; class we do not put &lt;code&gt;external&lt;/code&gt; before member functions and properties.</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 修飾子はネストされた宣言によって継承されることに注意してください。つまり、 &lt;code&gt;Node&lt;/code&gt; クラスでは、メンバー関数とプロパティの前に &lt;code&gt;external&lt;/code&gt; を配置しません。</target>
        </trans-unit>
        <trans-unit id="7c2abf53e89201db42a6d7da34bd24e5d79ffb90" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;jQuery&lt;/code&gt; needs to be included in the corresponding HTML:</source>
          <target state="translated">&lt;code&gt;jQuery&lt;/code&gt; を対応するHTMLに含める必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a130b307700ca7edccdf73fda8c49be967259f51" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;null&lt;/em&gt; cannot be cast to &lt;code&gt;String&lt;/code&gt; as this type is not &lt;a href=&quot;null-safety&quot;&gt;nullable&lt;/a&gt;, i.e. if &lt;code&gt;y&lt;/code&gt; is null, the code above throws an exception. In order to match Java cast semantics we have to have nullable type at cast right hand side, like:</source>
          <target state="translated">そのノート&lt;em&gt;ヌル&lt;/em&gt;にキャストすることができない &lt;code&gt;String&lt;/code&gt; このタイプではないように&lt;a href=&quot;null-safety&quot;&gt;NULL可能で&lt;/a&gt;あれば、すなわち &lt;code&gt;y&lt;/code&gt; がヌルである、上記のコードは例外をスロー。Javaキャストのセマンティクスを一致させるには、キャストの右側にnull許容型が必要です。</target>
        </trans-unit>
        <trans-unit id="3b25bca041a3db971a025c2e5df5df075febfd74" translate="yes" xml:space="preserve">
          <source>Note that KDoc does not have any syntax for resolving overloaded members in links. Since the Kotlin documentation generation tool puts the documentation for all overloads of a function on the same page, identifying a specific overloaded function is not required for the link to work.</source>
          <target state="translated">KDocには、リンク内のオーバーロードされたメンバを解決するための構文がないことに注意してください。Kotlinのドキュメント生成ツールは、ある関数のすべてのオーバーロードのドキュメントを同じページに配置するので、特定のオーバーロードされた関数を特定する必要はなく、リンクが機能するようになります。</target>
        </trans-unit>
        <trans-unit id="378fb47127c89ebfae61cf028d6a1d9ec0aaa851" translate="yes" xml:space="preserve">
          <source>Note that Kapt does not support multiple rounds for the generated Kotlin files.</source>
          <target state="translated">Kaptは生成されたKotlinファイルの複数ラウンドをサポートしていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f3383898decca7a9f7b6deb5d495a2e5e68df372" translate="yes" xml:space="preserve">
          <source>Note that Kotlin compiler does not apply such mangling to &lt;code&gt;external&lt;/code&gt; declarations, so you don't have to use &lt;code&gt;@JsName&lt;/code&gt; on them. Another case worth noticing is inheriting non-external classes from external classes. In this case any overridden functions won't be mangled as well.</source>
          <target state="translated">Kotlinコンパイラはこのようなマングリングを &lt;code&gt;external&lt;/code&gt; 宣言に適用しないため、それら &lt;code&gt;@JsName&lt;/code&gt; を使用する必要がないことに注意してください。注目に値するもう1つのケースは、外部クラスから非外部クラスを継承することです。この場合、オーバーライドされた関数もマングルされません。</target>
        </trans-unit>
        <trans-unit id="123a11d8fa5ed53f8ac07b91892dff993cf556e9" translate="yes" xml:space="preserve">
          <source>Note that Kotlin does not have a &lt;em&gt;new&lt;/em&gt; keyword.</source>
          <target state="translated">Kotlinには&lt;em&gt;新しい&lt;/em&gt;キーワードがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="24cefba751ca3442834b1d28297766c4dedb14f5" translate="yes" xml:space="preserve">
          <source>Note that SAM conversions only work for interfaces, not for abstract classes, even if those also have just a single abstract method.</source>
          <target state="translated">SAMの変換はインタフェースに対してのみ機能し、抽象クラスに対しては機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="50497e29cee31d617bb240dff5362b9731a558da" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;for&lt;/code&gt; loop always implicitly declares a new read-only variable (in this example, &lt;code&gt;name&lt;/code&gt;) - if the outer scope already contains a variable with the same name, it will be shadowed by the unrelated loop variable. For the same reason, the final value of the loop variable is not accessible after the loop.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループは常に新しい読み取り専用変数（この例では &lt;code&gt;name&lt;/code&gt; ）を暗黙的に宣言することに注意してください。外側のスコープに同じ名前の変数がすでに含まれている場合、無関係なループ変数によってシャドウされます。同じ理由で、ループ変数の最終値はループ後にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="f345c0305c039a5c5d92b2679df3ab69307a3616" translate="yes" xml:space="preserve">
          <source>Note that a Kotlin class reference is not the same as a Java class reference. To obtain a Java class reference, use the &lt;code&gt;.java&lt;/code&gt; property on a &lt;code&gt;KClass&lt;/code&gt; instance.</source>
          <target state="translated">Kotlinクラス参照はJavaクラス参照と同じではないことに注意してください。Javaクラス参照を取得するには、 &lt;code&gt;KClass&lt;/code&gt; インスタンスで &lt;code&gt;.java&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="0206a8d998dc749c92f53c56e6d927b2e3bb8c96" translate="yes" xml:space="preserve">
          <source>Note that a boxed primitive type used as a type parameter is mapped to a platform type: for example, &lt;code&gt;List&amp;lt;java.lang.Integer&amp;gt;&lt;/code&gt; becomes a &lt;code&gt;List&amp;lt;Int!&amp;gt;&lt;/code&gt; in Kotlin.</source>
          <target state="translated">型パラメータとして使用箱入りプリミティブ型は、プラットフォームの種類にマッピングされていることに注意してください。例えば、 &lt;code&gt;List&amp;lt;java.lang.Integer&amp;gt;&lt;/code&gt; となり &lt;code&gt;List&amp;lt;Int!&amp;gt;&lt;/code&gt; Kotlinインチ</target>
        </trans-unit>
        <trans-unit id="cda0f8a2d7cf131c070c968ead3e02616cc75710" translate="yes" xml:space="preserve">
          <source>Note that a file marked with the &lt;code&gt;@JsQualifier(...)&lt;/code&gt; annotation can't contain non-&lt;code&gt;external&lt;/code&gt; declarations.</source>
          <target state="translated">でマークされたファイルという注意 &lt;code&gt;@JsQualifier(...)&lt;/code&gt; 注釈が非含めることはできません &lt;code&gt;external&lt;/code&gt; 宣言を。</target>
        </trans-unit>
        <trans-unit id="406525d21e4a3c81c722c7741ff866f95a0130cf" translate="yes" xml:space="preserve">
          <source>Note that a function type with no receiver is inferred by default, even if a variable is initialized with a reference to an extension function. To alter that, specify the variable type explicitly.</source>
          <target state="translated">変数が拡張関数への参照で初期化されていても、デフォルトでは受信機のない関数型が推論されることに注意してください。これを変更するには、変数の型を明示的に指定します。</target>
        </trans-unit>
        <trans-unit id="b53df8b9afb9e806e949a0d6af036fa85a8a9db9" translate="yes" xml:space="preserve">
          <source>Note that a module referenced by a dependency declared for &lt;code&gt;commonMain&lt;/code&gt; or &lt;code&gt;commonTest&lt;/code&gt; source set must be published using the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin. If you want to use libraries published by the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin, you need to declare a separate source set for common native sources.</source>
          <target state="translated">&lt;code&gt;commonMain&lt;/code&gt; または &lt;code&gt;commonTest&lt;/code&gt; ソースセットに対して宣言された依存関係によって参照されるモジュールは、 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインを使用して公開する必要があることに注意してください。 &lt;code&gt;kotlin-platform-native&lt;/code&gt; プラグインによって公開されたライブラリを使用する場合は、一般的なネイティブソース用に個別のソースセットを宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="07dbd163eca990505b14bc6390f514e8f9d894c6" translate="yes" xml:space="preserve">
          <source>Note that a read-only variable is not a constant per se: it can be initialized with the value of a variable (so its value doesn't need to be known at compile-time), and if it is declared inside a construct that is repeatedly invoked (such as a function or a loop), it can take on a different value on each invocation. Also, while the read-only variable may not be reassigned while it is in scope, it can still refer to an object which is in itself mutable (such as a list).</source>
          <target state="translated">読み取り専用変数はそれ自体が定数ではないことに注意してください。変数の値で初期化することができ(コンパイル時にその値を知る必要はありません)、繰り返し呼び出される構造体(関数やループなど)の内部で宣言されている場合は、呼び出しのたびに異なる値を取ることができます。また、読み取り専用変数がスコープ内にある間は再代入されないかもしれませんが、それ自体が変異可能なオブジェクト (リストなど)を参照することができます。</target>
        </trans-unit>
        <trans-unit id="89edad7d707ce970adc3246bd03659328accf5e4" translate="yes" xml:space="preserve">
          <source>Note that all classes in this tutorial are in the &lt;code&gt;org.jetbrains.kotlin.demo&lt;/code&gt; package.</source>
          <target state="translated">このチュートリアルのすべてのクラスは &lt;code&gt;org.jetbrains.kotlin.demo&lt;/code&gt; パッケージにあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e339722ad427ded0a06508490a0f24fc47b54f2b" translate="yes" xml:space="preserve">
          <source>Note that altering a mutable collection doesn't require it to be a &lt;a href=&quot;basic-syntax#defining-variables&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt;: write operations modify the same mutable collection object, so the reference doesn't change. Although, if you try to reassign a &lt;code&gt;val&lt;/code&gt; collection, you'll get a compilation error.</source>
          <target state="translated">可変コレクションを変更する場合、それが&lt;a href=&quot;basic-syntax#defining-variables&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt;である必要はありません。書き込み操作は同じ可変コレクションオブジェクトを変更するため、参照は変更されません。ただし、 &lt;code&gt;val&lt;/code&gt; コレクションを再割り当てしようとすると、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="402c9cc77c78831d6ef7a6f5b12edeefd76b9797" translate="yes" xml:space="preserve">
          <source>Note that an &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html&quot;&gt;actor&lt;/a&gt; coroutine builder is a dual of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;produce&lt;/a&gt; coroutine builder. An actor is associated with the channel that it receives messages from, while a producer is associated with the channel that it sends elements to.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html&quot;&gt;アクター&lt;/a&gt;コルーチンビルダーは、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;プロデュース&lt;/a&gt;コルーチンビルダーのデュアルであることに注意してください。アクターはメッセージを受信するチャネルに関連付けられていますが、プロデューサーは要素を送信するチャネルに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="3f7eda5be515629fb292c86295db20e329d1452f" translate="yes" xml:space="preserve">
          <source>Note that an order of &lt;a href=&quot;compare-by-descending#kotlin.comparisons%24compareByDescending%28kotlin.Comparator%28%28kotlin.comparisons.compareByDescending.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareByDescending.T%2C+kotlin.comparisons.compareByDescending.K%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; is reversed by this wrapper.</source>
          <target state="translated">このラッパーによって&lt;a href=&quot;compare-by-descending#kotlin.comparisons%24compareByDescending%28kotlin.Comparator%28%28kotlin.comparisons.compareByDescending.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareByDescending.T%2C+kotlin.comparisons.compareByDescending.K%29%29%29%2Fcomparator&quot;&gt;コンパレーターの&lt;/a&gt;順序が逆になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e5cfcc2bcacb2464eb49e0f0ddd2d5c9c0f5de73" translate="yes" xml:space="preserve">
          <source>Note that anonymous function parameters are always passed inside the parentheses. The shorthand syntax allowing to leave the function outside the parentheses works only for lambda expressions.</source>
          <target state="translated">匿名関数のパラメータは常に括弧内に渡されることに注意してください。括弧の外に関数を残すことができる短縮構文は、ラムダ式でのみ機能します。</target>
        </trans-unit>
        <trans-unit id="9217d029286f8cd07e91756805e90b92b90c8d04" translate="yes" xml:space="preserve">
          <source>Note that anonymous objects can be used as types only in local and private declarations. If you use an anonymous object as a return type of a public function or the type of a public property, the actual type of that function or property will be the declared supertype of the anonymous object, or &lt;code&gt;Any&lt;/code&gt; if you didn't declare any supertype. Members added in the anonymous object will not be accessible.</source>
          <target state="translated">匿名オブジェクトは、ローカルおよびプライベート宣言でのみ型として使用できることに注意してください。匿名関数をパブリック関数の戻り型またはパブリックプロパティの型として使用する場合、その関数またはプロパティの実際の型は匿名オブジェクトの宣言されたスーパータイプになります。スーパータイプを宣言しなかった場合は &lt;code&gt;Any&lt;/code&gt; になります。 。匿名オブジェクトに追加されたメンバーにはアクセスできません。</target>
        </trans-unit>
        <trans-unit id="58e17f85bfcb71bf347b7f266c8bad279b3e8c99" translate="yes" xml:space="preserve">
          <source>Note that another regular expression constructed from the same pattern string may have different &lt;a href=&quot;options#kotlin.text.Regex%24options&quot;&gt;options&lt;/a&gt; and may match strings differently.</source>
          <target state="translated">同じパターン文字列から作成された別の正規表現は、&lt;a href=&quot;options#kotlin.text.Regex%24options&quot;&gt;オプション&lt;/a&gt;が異なり、文字列の一致が異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0e1195c36b54acff13f3bf0d0c44bfdb9ba62965" translate="yes" xml:space="preserve">
          <source>Note that blank lines do not affect the detected indent level.</source>
          <target state="translated">空行は検出されたインデントレベルに影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="901eb90b706fa87b74726ae4ca585fc8ee1df3bd" translate="yes" xml:space="preserve">
          <source>Note that both the target platform and the name matter: if a target was created as &lt;code&gt;jvm('jvm6')&lt;/code&gt;, using &lt;code&gt;jvm()&lt;/code&gt; will create a separate target (with the default name &lt;code&gt;jvm&lt;/code&gt;). If the preset function used to create the target under that name was different, an error is reported.</source>
          <target state="translated">注両方のターゲットプラットフォームと名の問題であること：ターゲットは、次のように作成された場合 &lt;code&gt;jvm('jvm6')&lt;/code&gt; 使用して、 &lt;code&gt;jvm()&lt;/code&gt; （デフォルト名を持つ別のターゲットが作成されます &lt;code&gt;jvm&lt;/code&gt; ）。その名前でターゲットを作成するために使用されたプリセット関数が異なる場合、エラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="20a8a158a1c056ad5cea3eaeda038189df025fb8" translate="yes" xml:space="preserve">
          <source>Note that boxing of numbers does not necessarily preserve identity:</source>
          <target state="translated">数字の箱詰めは必ずしも同一性を維持するわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="18f0c3bd108e4fca3d9b4ad0c92853cb37af67e8" translate="yes" xml:space="preserve">
          <source>Note that cancelling a producer coroutine closes its channel, thus eventually terminating iteration over the channel that processor coroutines are doing.</source>
          <target state="translated">プロデューサ・コルーチンをキャンセルすると、そのチャネルが閉じてしまうので、最終的にはプロセッサ・コルーチンが行っているチャネルに対する反復処理が終了してしまうことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a4257481b27fd911ec2dc62a1694406a02635294" translate="yes" xml:space="preserve">
          <source>Note that changing type from unsigned type to signed counterpart (and vice versa) is a &lt;em&gt;binary incompatible&lt;/em&gt; change</source>
          <target state="translated">符号なしの型から対応する符号付きの型に（およびその逆に）型を変更すると、&lt;em&gt;バイナリ互換性のない&lt;/em&gt;変更になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fb531691886575d5d0b4f4f27624c19223bae127" translate="yes" xml:space="preserve">
          <source>Note that characters are not numbers in Kotlin.</source>
          <target state="translated">Kotlinでは文字は数字ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="224781b538ad44d496b4eb9848adbb611bc7607f" translate="yes" xml:space="preserve">
          <source>Note that classes which extend subclasses of a sealed class (indirect inheritors) can be placed anywhere, not necessarily in the same file.</source>
          <target state="translated">封印されたクラスのサブクラスを拡張するクラス(間接的な継承者)は、同じファイル内である必要はなく、どこにでも配置することができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b01c476864e020a6b3bdf6a577c404757a04f763" translate="yes" xml:space="preserve">
          <source>Note that code in initializer blocks effectively becomes part of the primary constructor. Delegation to the primary constructor happens as the first statement of a secondary constructor, so the code in all initializer blocks is executed before the secondary constructor body. Even if the class has no primary constructor, the delegation still happens implicitly, and the initializer blocks are still executed:</source>
          <target state="translated">初期化ブロック内のコードは、事実上プライマリ コンストラクタの一部になることに注意してください。プライマリ コンストラクタへの委任はセカンダリ コンストラクタの最初のステートメントとして行われるため、すべてのイニシャライザ ブロック内のコードはセカンダリ コンストラクタのボディよりも前に実行されます。クラスに一次コンストラクタがない場合でも、委任は暗黙のうちに行われ、初期化ブロックは実行されます。</target>
        </trans-unit>
        <trans-unit id="40662d03b687698fb7e2efe397dfb49179bd8a28" translate="yes" xml:space="preserve">
          <source>Note that coroutines are currently considered an &lt;strong&gt;experimental feature&lt;/strong&gt;, meaning that the Kotlin team is not committing to supporting the backwards compatibility of this feature after the final 1.1 release.</source>
          <target state="translated">コルーチンは現在&lt;strong&gt;実験的な機能&lt;/strong&gt;と見なされていることに注意してください。つまり、Kotlinチームは、最終的な1.1リリース以降、この機能の下位互換性のサポートを確約していません。</target>
        </trans-unit>
        <trans-unit id="abdd0e9fc4f6072582fff7f11143b17405eee64f" translate="yes" xml:space="preserve">
          <source>Note that despite the fact that the right-hand side of &lt;em&gt;as?&lt;/em&gt; is a non-null type &lt;code&gt;String&lt;/code&gt; the result of the cast is nullable.</source>
          <target state="translated">&lt;em&gt;asの&lt;/em&gt;右側にあるにもかかわらず、null以外の型の &lt;code&gt;String&lt;/code&gt; です。キャストの結果はnull可能です。</target>
        </trans-unit>
        <trans-unit id="984acf59abb99e6edf5501246d83e1bc7951b21e" translate="yes" xml:space="preserve">
          <source>Note that even if &lt;a href=&quot;is-marked-nullable#kotlin.reflect.KType%24isMarkedNullable&quot;&gt;isMarkedNullable&lt;/a&gt; is false, values of the type can still be &lt;code&gt;null&lt;/code&gt;. This may happen if it is a type of the type parameter with a nullable upper bound:</source>
          <target state="translated">&lt;a href=&quot;is-marked-nullable#kotlin.reflect.KType%24isMarkedNullable&quot;&gt;isMarkedNullable&lt;/a&gt;がfalseの場合でも、型の値が &lt;code&gt;null&lt;/code&gt; になる可能性があることに注意してください。これは、null許容上限を持つ型パラメーターの型である場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9717ca7605239239d9b446b8d8baf568533a62a" translate="yes" xml:space="preserve">
          <source>Note that even if you initialize a variable with a reference to an extension function, the inferred function type will have no receiver (it will have an additional parameter accepting a receiver object). To have a function type with receiver instead, specify the type explicitly:</source>
          <target state="translated">拡張関数への参照で変数を初期化した場合でも、推論された関数型にはレシーバがないことに注意してください(レシーバオブジェクトを受け取る追加のパラメータを持つことになります)。代わりにレシーバを持つ関数型を持つようにするには、明示的に型を指定します。</target>
        </trans-unit>
        <trans-unit id="e1859932d9a0b691a9fc9411f62e5506be7f8a66" translate="yes" xml:space="preserve">
          <source>Note that even though this is a read-only property due to declaring it with &lt;code&gt;val&lt;/code&gt; (in which case you may not provide a setter), its value can still change since it reads from a mutable property - you just can't assign to the property. Also, note that the property type is inferred from the return value of the getter.</source>
          <target state="translated">これは &lt;code&gt;val&lt;/code&gt; で宣言されているため読み取り専用のプロパティですが（この場合、セッターを指定できない場合があります）、変更可能なプロパティから読み取るため、その値は変更される可能性があることに注意してください。プロパティ。また、プロパティタイプはゲッターの戻り値から推測されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fd6bde9af50a41c1d5f97ea7b48311cc0527806c" translate="yes" xml:space="preserve">
          <source>Note that exceptions are somewhat discouraged in Kotlin except when interacting with Java code. Instead of throwing exceptions in your own code, consider using special return types like &lt;a href=&quot;https://arrow-kt.io/docs/datatypes/option/&quot;&gt;Option&lt;/a&gt; or &lt;a href=&quot;https://arrow-kt.io/docs/datatypes/either/&quot;&gt;Either&lt;/a&gt; from the &lt;a href=&quot;https://arrow-kt.io/&quot;&gt;Arrow library&lt;/a&gt;.</source>
          <target state="translated">Javaコードとやり取りする場合を除いて、Kotlinでは例外がやや推奨されないことに注意してください。独自のコードで例外をスローする代わりに、&lt;a href=&quot;https://arrow-kt.io/&quot;&gt;矢印ライブラリの&lt;/a&gt;&lt;a href=&quot;https://arrow-kt.io/docs/datatypes/option/&quot;&gt;Option&lt;/a&gt;または&lt;a href=&quot;https://arrow-kt.io/docs/datatypes/either/&quot;&gt;Either&lt;/a&gt;などの特別な戻り値の型を使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="33e073ab069310793fb905b91ca3476dc4caf23c" translate="yes" xml:space="preserve">
          <source>Note that expected declarations are not restricted to interfaces and interface members. In this example, the expected class has a constructor and can be created directly from common code. You can apply the &lt;code&gt;expect&lt;/code&gt; modifier to other declarations as well, including top-level declarations and annotations:</source>
          <target state="translated">予想される宣言は、インターフェースとインターフェースメンバーに限定されないことに注意してください。この例では、予期されるクラスにはコンストラクターがあり、一般的なコードから直接作成できます。 &lt;code&gt;expect&lt;/code&gt; 修飾子は、トップレベルの宣言や注釈を含む他の宣言にも適用できます。</target>
        </trans-unit>
        <trans-unit id="45215a2c612cfc18ca0212e4816f62d8f14fe5b3" translate="yes" xml:space="preserve">
          <source>Note that extensions can be defined with a nullable receiver type. Such extensions can be called on an object variable even if its value is null, and can check for &lt;code&gt;this == null&lt;/code&gt; inside the body. This is what allows you to call toString() in Kotlin without checking for null: the check happens inside the extension function.</source>
          <target state="translated">拡張はnull許容のレシーバータイプで定義できることに注意してください。そのような拡張は、その値がnullであってもオブジェクト変数で呼び出すことができ、本文の中で &lt;code&gt;this == null&lt;/code&gt; 確認できます。これにより、nullをチェックせずにKotlinでtoString（）を呼び出すことができます。チェックは拡張関数内で行われます。</target>
        </trans-unit>
        <trans-unit id="519b88833afa591c638bec3f6bbeb8adf1aa4ab7" translate="yes" xml:space="preserve">
          <source>Note that for a top level &lt;strong&gt;extension&lt;/strong&gt; property, the delegate is the same for all extension receivers, so the actual &lt;a href=&quot;get-delegate#kotlin.reflect.KProperty1%24getDelegate%28kotlin.reflect.KProperty1.T%29%2Freceiver&quot;&gt;receiver&lt;/a&gt; instance passed in is not going to make any difference, it must only be a value of &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">トップレベルの&lt;strong&gt;拡張&lt;/strong&gt;プロパティの場合、デリゲートはすべての拡張レシーバーで同じであるため、渡された実際の&lt;a href=&quot;get-delegate#kotlin.reflect.KProperty1%24getDelegate%28kotlin.reflect.KProperty1.T%29%2Freceiver&quot;&gt;レシーバー&lt;/a&gt;インスタンスは何の違いも生じないことに注意してください。値は&lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c0ed19157d69e7092350d01754dff2c913099ef4" translate="yes" xml:space="preserve">
          <source>Note that for the IDE to correctly analyze the dependencies of the common sources, the common source sets need to have corresponding dependencies on the Kotlin metadata packages in addition to the platform-specific artifact dependencies of the platform-specific source sets. Usually, an artifact with a suffix &lt;code&gt;-common&lt;/code&gt; (as in &lt;code&gt;kotlin-stdlib-common&lt;/code&gt;) or &lt;code&gt;-metadata&lt;/code&gt; is required when using a published library (unless it is published with Gradle metadata, as described below).</source>
          <target state="translated">IDEが共通ソースの依存関係を正しく分析するには、共通ソースセットに、プラットフォーム固有のソースセットのプラットフォーム固有のアーティファクト依存関係に加えて、Kotlinメタデータパッケージに対する対応する依存関係が必要であることに注意してください。通常、公開されたライブラリを使用する場合は、 &lt;code&gt;-common&lt;/code&gt; （ &lt;code&gt;kotlin-stdlib-common&lt;/code&gt; など）または &lt;code&gt;-metadata&lt;/code&gt; のアーティファクトが必要です（以下で説明するように、Gradleメタデータで公開されている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="ef903749bbe41c983b27f632974567077577929e" translate="yes" xml:space="preserve">
          <source>Note that for the purpose of this tutorial, we've done a line by line literal translation. Obviously we could write this in a more Kotlin idiomatic way.</source>
          <target state="translated">このチュートリアルの目的のために、一行一行のリテラル翻訳を行っていることに注意してください。明らかにもっとKotlinの慣用的な方法で書くことができます。</target>
        </trans-unit>
        <trans-unit id="2712e3816fc9fe0e5aede4e3fca67cc623f69a68" translate="yes" xml:space="preserve">
          <source>Note that if a class has got a primary constructor, it is no longer possible to create an instance of it without supplying any parameters (unless one of the secondary constructors is parameterless).</source>
          <target state="translated">クラスが一次コンストラクタを持っている場合は、パラメータを与えずにそのクラスのインスタンスを作成することはできないことに注意してください (二次コンストラクタの一つがパラメータレスでない限り)。</target>
        </trans-unit>
        <trans-unit id="3b1296c9d04a31b1fde17dffa086ef1b8acdb6c3" translate="yes" xml:space="preserve">
          <source>Note that if a library consumer defines variants that are missing in the library, they need to provide &lt;a href=&quot;https://developer.android.com/studio/build/dependencies#resolve_matching_errors&quot;&gt;matching fallbacks&lt;/a&gt;. For example, if a library does not have or does not publish a &lt;code&gt;staging&lt;/code&gt; build type, it will be necessary to provide a fallback for the consumers who have such a build type, specifying at least one of the build types that the library publishes:</source>
          <target state="translated">ライブラリの利用者がライブラリに欠けているバリアントを定義する場合、それらは&lt;a href=&quot;https://developer.android.com/studio/build/dependencies#resolve_matching_errors&quot;&gt;一致するフォールバック&lt;/a&gt;を提供する必要があることに注意してください。たとえば、ライブラリに &lt;code&gt;staging&lt;/code&gt; ビルドタイプがないか公開されていない場合、そのようなビルドタイプを持つコンシューマーにフォールバックを提供し、ライブラリが公開するビルドタイプの少なくとも1つを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c82c92fd55806c5e9d8d4f7e9db855fd43d5a7a" translate="yes" xml:space="preserve">
          <source>Note that if an inline function has no inlinable function parameters and no &lt;a href=&quot;#reified-type-parameters&quot;&gt;reified type parameters&lt;/a&gt;, the compiler will issue a warning, since inlining such functions is very unlikely to be beneficial (you can suppress the warning if you are sure the inlining is needed using the annotation &lt;code&gt;@Suppress(&quot;NOTHING_TO_INLINE&quot;)&lt;/code&gt;).</source>
          <target state="translated">インライン関数にインライン可能な関数パラメーターがなく、具体&lt;a href=&quot;#reified-type-parameters&quot;&gt;化された型パラメーター&lt;/a&gt;がない場合、そのような関数のインライン化が有益である可能性は非常に低いため、コンパイラーは警告を発行します（インライン化が必要であることが確実な場合は、アノテーション &lt;code&gt;@Suppress(&quot;NOTHING_TO_INLINE&quot;)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ac1401dfe931b50e5500ce4b2ebac5d2aaf6e00c" translate="yes" xml:space="preserve">
          <source>Note that if an interface with &lt;code&gt;@JvmDefault&lt;/code&gt; methods is used as a &lt;a href=&quot;delegation&quot;&gt;delegate&lt;/a&gt;, the default method implementations are called even if the actual delegate type provides its own implementations.</source>
          <target state="translated">界面場合、その音符 &lt;code&gt;@JvmDefault&lt;/code&gt; の方法として使用される&lt;a href=&quot;delegation&quot;&gt;デリゲート&lt;/a&gt;、デフォルトのメソッドの実装は、実際のデリゲート型は、独自の実装を提供しても呼ばれています。</target>
        </trans-unit>
        <trans-unit id="5c363669dd6ed31274f54972ddb75e1fa04284aa" translate="yes" xml:space="preserve">
          <source>Note that if the &lt;code&gt;comparator&lt;/code&gt; considers any two keys of this map equal, only the value associated with the last of them gets into the resulting map.</source>
          <target state="translated">&lt;code&gt;comparator&lt;/code&gt; がこのマップの2つのキーを等しいと見なした場合、それらの最後のキーに関連付けられた値のみが結果のマップに入ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="169507f367051a5b585a09223134ff4c0faab6be" translate="yes" xml:space="preserve">
          <source>Note that if the natural sorting order of keys considers any two keys of this map equal (this could happen if the equality of keys according to &lt;a href=&quot;../kotlin/-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29&quot;&gt;Comparable.compareTo&lt;/a&gt; is inconsistent with the equality according to &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;Any.equals&lt;/a&gt;), only the value associated with the last of them gets into the resulting map.</source>
          <target state="translated">キーの自然なソート順がこのマップの2つのキーを等しいと見なす場合（これは、&lt;a href=&quot;../kotlin/-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29&quot;&gt;Comparable.compareTo&lt;/a&gt;によるキーの等価性が&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;Any.equals&lt;/a&gt;による等価性と一致しない場合に発生する可能性があります）、最後のキーに関連付けられた値のみそれらの結果のマップに入ります。</target>
        </trans-unit>
        <trans-unit id="fdeead972a4f0dc85a954b4ef35d091c4109a874" translate="yes" xml:space="preserve">
          <source>Note that if the type of the result is known from the context, the type argument can be omitted as usual due to the type inference.</source>
          <target state="translated">コンテキストから結果の型がわかっている場合は、型推論のため、通常通り型引数を省略することができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3df7a58b11ae9c7f677f019b7e29ec36da986c3e" translate="yes" xml:space="preserve">
          <source>Note that if this function fails, then partial copying may have taken place.</source>
          <target state="translated">この関数が失敗した場合は、部分的なコピーが行われている可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e537ff121d99004384d6b13ae0784e74c296eabf" translate="yes" xml:space="preserve">
          <source>Note that if we have called &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt; in &lt;code&gt;println&lt;/code&gt; and omitted &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;start&lt;/a&gt; on individual coroutines, then we would have got the sequential behaviour as &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt; starts the coroutine execution and waits for the execution to finish, which is not the intended use-case for laziness. The use-case for &lt;code&gt;async(start = CoroutineStart.LAZY)&lt;/code&gt; is a replacement for the standard &lt;code&gt;lazy&lt;/code&gt; function in cases when computation of the value involves suspending functions.</source>
          <target state="translated">私たちが呼び出されている場合は、そのノート&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;のawait&lt;/a&gt;で &lt;code&gt;println&lt;/code&gt; 省略&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;開始を&lt;/a&gt;個々のコルーチンにとして、我々はシーケンシャルな行動を持っているだろう&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;のawaitは&lt;/a&gt;怠惰のために意図されたユースケースではありません最後まで実行のためのコルーチンの実行を待機し、開始します。 &lt;code&gt;async(start = CoroutineStart.LAZY)&lt;/code&gt; の使用例は、値の計算に関数の中断が含まれる場合の標準の &lt;code&gt;lazy&lt;/code&gt; 関数の代わりです。</target>
        </trans-unit>
        <trans-unit id="1e82a73f61c52b17d7e3c65e8e99e11241b677f8" translate="yes" xml:space="preserve">
          <source>Note that if you are using multi-project build, you should apply plugin to the main project that is an entry point to your application.</source>
          <target state="translated">マルチプロジェクトビルドを使用している場合は、アプリケーションのエントリーポイントとなるメインプロジェクトにプラグインを適用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e39d91f028c6c4bc3b768c071107ff617a7a7685" translate="yes" xml:space="preserve">
          <source>Note that if you use the project template generated by the &lt;a href=&quot;http://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt; service, the &lt;code&gt;kotlin-spring&lt;/code&gt; plugin will be enabled by default.</source>
          <target state="translated">&lt;a href=&quot;http://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;サービスによって生成されたプロジェクトテンプレートを使用する場合、 &lt;code&gt;kotlin-spring&lt;/code&gt; プラグインがデフォルトで有効になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="261071b80b92f5599125de0c5212f010938aeec4" translate="yes" xml:space="preserve">
          <source>Note that if your function has parameters, its name will be mangled, so the mangled name should be used in the keep directive.</source>
          <target state="translated">関数がパラメータを持っている場合は、その名前が変更されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4c99e0a3c39d8997895800da0e15222c8aa2ad3b" translate="yes" xml:space="preserve">
          <source>Note that in Kotlin/JS Float range is wider than &quot;single format&quot; bit layout can represent, so some Float values may overflow, underflow or loose their accuracy after conversion to bits and back.</source>
          <target state="translated">Kotlin/JSの場合、Floatの範囲は「単一フォーマット」のビットレイアウトが表現できる範囲よりも広いので、ビットに変換して戻ってきた後にFloatの値がオーバーフローしたり、アンダーフローしたり、精度が落ちたりすることがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="88d47ad6334c013775aba391a38df6074a6dc3f4" translate="yes" xml:space="preserve">
          <source>Note that in competitive programming it is customary to give variables shorter names than it is typical in industrial programming practice, since the code is to be written just once and not supported thereafter. However, these names are usually still mnemonic &amp;mdash; &lt;code&gt;a&lt;/code&gt; for arrays, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, etc for indices, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; for row and column numbers in tables, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; for coordinates, etc. It is easier to keep the same names for input data as it is given in the problem statement. However, more complex problems require more code which leads to using longer self-explanatory variable and function names.</source>
          <target state="translated">競合プログラミングでは、コードは1回だけ記述され、その後はサポートされないため、工業用プログラミングの慣例よりも短い名前を変数に付けるのが通例であることに注意してください。ただし、これらの名前は通常、まだニーモニックです。配列の場合は &lt;code&gt;a&lt;/code&gt; 、インデックスの場合は &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;j&lt;/code&gt; 、テーブルの行番号と列番号の場合は &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;c&lt;/code&gt; 、座標の場合は &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; です。同じ名前を保持する方が簡単です。問題の説明に示されているとおりにデータを入力します。ただし、より複雑な問題にはより多くのコードが必要であり、より長い説明のない変数名と関数名を使用することになります。</target>
        </trans-unit>
        <trans-unit id="24fc67264648157b787a9e1d8a1aee247379a870" translate="yes" xml:space="preserve">
          <source>Note that in many cases there's no need to use custom interoperability library creation mechanisms described below, as for APIs available on the platform standardized bindings called &lt;a href=&quot;platform_libs&quot;&gt;platform libraries&lt;/a&gt; could be used. For example, POSIX on Linux/macOS platforms, Win32 on Windows platform, or Apple frameworks on macOS/iOS are available this way.</source>
          <target state="translated">多くの場合、以下で説明するカスタムの相互運用性ライブラリ作成メカニズムを使用する必要がないことに注意してください。&lt;a href=&quot;platform_libs&quot;&gt;プラットフォームライブラリで&lt;/a&gt;利用可能なAPIについては、プラットフォームライブラリと呼ばれる標準化されたバインディングを使用できます。たとえば、Linux / macOSプラットフォームのPOSIX、WindowsプラットフォームのWin32、またはmacOS / iOSのAppleフレームワークは、この方法で利用できます。</target>
        </trans-unit>
        <trans-unit id="4c3031faf8b33ed043c9d69fe73ae60488938a50" translate="yes" xml:space="preserve">
          <source>Note that in most cases using &lt;a href=&quot;#string-templates&quot;&gt;string templates&lt;/a&gt; or raw strings is preferable to string concatenation.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;#string-templates&quot;&gt;文字列テンプレート&lt;/a&gt;または生の文字列を使用する方が、文字列連結よりも望ましいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6addd273834de7f83ab126536995cca9dd6643b2" translate="yes" xml:space="preserve">
          <source>Note that incremental annotation processing requires &lt;a href=&quot;using-gradle#incremental-compilation&quot;&gt;incremental compilation&lt;/a&gt; to be enabled as well.</source>
          <target state="translated">増分注釈処理では、&lt;a href=&quot;using-gradle#incremental-compilation&quot;&gt;増分コンパイル&lt;/a&gt;も有効にする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6b7588c134bcd5e8f4a5da82d120b4047c151b76" translate="yes" xml:space="preserve">
          <source>Note that infix functions always require both the receiver and the parameter to be specified. When you're calling a method on the current receiver using the infix notation, you need to use &lt;code&gt;this&lt;/code&gt; explicitly; unlike regular method calls, it cannot be omitted. This is required to ensure unambiguous parsing.</source>
          <target state="translated">インフィックス関数では常にレシーバーとパラメーターの両方を指定する必要があることに注意してください。インフィックス表記を使用して現在のレシーバーでメソッドを呼び出す場合、 &lt;code&gt;this&lt;/code&gt; 明示的に使用する必要があります。通常のメソッド呼び出しとは異なり、省略することはできません。これは、明確な解析を確実にするために必要です。</target>
        </trans-unit>
        <trans-unit id="ad1d05af6c1aa655f7d3f68b893652c8d8011b1f" translate="yes" xml:space="preserve">
          <source>Note that instead of declaring lambdas in xml like in the following example, you can can bind actions directly in the code:</source>
          <target state="translated">次の例のようにラムダをxmlで宣言するのではなく、コード内で直接アクションをバインドすることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2de64757cb014df0ce60c045d22eb608329bdbb9" translate="yes" xml:space="preserve">
          <source>Note that it is not recommended to call either &lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume&quot;&gt;Continuation.resume&lt;/a&gt; nor &lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume-with-exception&quot;&gt;Continuation.resumeWithException&lt;/a&gt; functions synchronously in the same stackframe where suspension function is run. Use &lt;a href=&quot;../kotlin.coroutines.experimental/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt; as a safer way to obtain current continuation instance.</source>
          <target state="translated">&lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume-with-exception&quot;&gt;Continuation.resume&lt;/a&gt;関数またはContinuation.resumeWithException関数のいずれかを、一時停止関数が実行されている同じスタックフレームで同期&lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume&quot;&gt;的&lt;/a&gt;に呼び出すことはお勧めしません。現在の継続インスタンスを取得するより安全な方法として、&lt;a href=&quot;../kotlin.coroutines.experimental/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="9d6ffb0207257e6147b3a7dc3f05f4b2eb90ba26" translate="yes" xml:space="preserve">
          <source>Note that it is not recommended to call either &lt;a href=&quot;../kotlin.coroutines/resume&quot;&gt;Continuation.resume&lt;/a&gt; nor &lt;a href=&quot;../kotlin.coroutines/resume-with-exception&quot;&gt;Continuation.resumeWithException&lt;/a&gt; functions synchronously in the same stackframe where suspension function is run. Use &lt;a href=&quot;../kotlin.coroutines/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt; as a safer way to obtain current continuation instance.</source>
          <target state="translated">&lt;a href=&quot;../kotlin.coroutines/resume-with-exception&quot;&gt;Continuation.resume&lt;/a&gt;関数またはContinuation.resumeWithException関数のいずれかを、一時停止関数が実行されている同じスタックフレームで同期&lt;a href=&quot;../kotlin.coroutines/resume&quot;&gt;的&lt;/a&gt;に呼び出すことはお勧めしません。現在の継続インスタンスを取得するより安全な方法として、&lt;a href=&quot;../kotlin.coroutines/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="ef6ff08c8afdc4c88bfce216a4201b44bef8d337" translate="yes" xml:space="preserve">
          <source>Note that it's still possible to call the members of the outer receiver, but to do that you have to specify this receiver explicitly:</source>
          <target state="translated">外部レシーバのメンバを呼び出すことは可能ですが、そのためにはこのレシーバを明示的に指定しなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1a8a5665bc44d5cdbf2531c3d2423dcbe7d87681" translate="yes" xml:space="preserve">
          <source>Note that parameters of the primary constructor can be used in the initializer blocks. They can also be used in property initializers declared in the class body:</source>
          <target state="translated">プライマリ・コンストラクタのパラメータは、イニシャライザ・ブロックで使用できることに注意してください。また、クラス本体で宣言されたプロパティのイニシャライザでも使用することができます。</target>
        </trans-unit>
        <trans-unit id="c0c4053dbcf27c46808a2ab0e8b3303b9f7cbf9a" translate="yes" xml:space="preserve">
          <source>Note that set operations are supported by &lt;code&gt;List&lt;/code&gt; as well. However, the result of set operations on lists is still a &lt;code&gt;Set&lt;/code&gt;, so all the duplicate elements are removed.</source>
          <target state="translated">集合演算は &lt;code&gt;List&lt;/code&gt; でもサポートされていることに注意してください。ただし、リストに対する集合演算の結果は依然として &lt;code&gt;Set&lt;/code&gt; であるため、重複する要素はすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="ecba1bd96686456eab8e7e25340f9f56c1cd293b" translate="yes" xml:space="preserve">
          <source>Note that since Kotlin 1.1 you can declare a delegated property inside a function or code block, it shouldn't necessarily be a member of a class. Below you can find &lt;a href=&quot;delegated-properties#local-delegated-properties-since-11&quot;&gt;the example&lt;/a&gt;.</source>
          <target state="translated">Kotlin 1.1以降では、委任されたプロパティを関数またはコードブロック内で宣言できるため、必ずしもクラスのメンバーである必要はありません。以下に&lt;a href=&quot;delegated-properties#local-delegated-properties-since-11&quot;&gt;例を示し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8f27fe847dccbaf44c3e83c0485bdf6be308f0d6" translate="yes" xml:space="preserve">
          <source>Note that smart casts do not work when the compiler cannot guarantee that the variable cannot change between the check and the usage. More specifically, smart casts are applicable according to the following rules:</source>
          <target state="translated">スマート・キャストは、チェックと使用の間に変数が変更されないことをコンパイラが保証できない場合には動作しないことに注意してください。具体的には、以下のルールに従ってスマートキャストが適用されます。</target>
        </trans-unit>
        <trans-unit id="1c295c01c9e6a32796148120ae2cf2ae77c47235" translate="yes" xml:space="preserve">
          <source>Note that some Java visibilities such as package-private and protected (which also gives access to items from the same package) cannot be represented in Kotlin, so there's no &lt;a href=&quot;index#kotlin.reflect.KVisibility&quot;&gt;KVisibility&lt;/a&gt; value corresponding to them.</source>
          <target state="translated">package-privateやprotected（同じパッケージのアイテムへのアクセスも可能にする）などの一部のJavaの可視性はKotlinで表現できないため、それらに対応する&lt;a href=&quot;index#kotlin.reflect.KVisibility&quot;&gt;KVisibility&lt;/a&gt;値がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a13526efa441f113eff7267561f09b5212747a9d" translate="yes" xml:space="preserve">
          <source>Note that some inline functions may call the lambdas passed to them as parameters not directly from the function body, but from another execution context, such as a local object or a nested function. In such cases, non-local control flow is also not allowed in the lambdas. To indicate that, the lambda parameter needs to be marked with the &lt;code&gt;crossinline&lt;/code&gt; modifier:</source>
          <target state="translated">一部のインライン関数は、関数本体から直接ではなく、ローカルオブジェクトやネストされた関数などの別の実行コンテキストからパラメーターとして渡されたラムダを呼び出す場合があることに注意してください。そのような場合、非ローカル制御フローもラムダで許可されません。これを示すために、ラムダパラメータは &lt;code&gt;crossinline&lt;/code&gt; 修飾子でマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="c7e376b19704536e280b87471b9d2f1935ff22e7" translate="yes" xml:space="preserve">
          <source>Note that some of the Kotlin/Native targets require an &lt;a href=&quot;#using-kotlinnative-targets&quot;&gt;appropriate host machine&lt;/a&gt; to build on.</source>
          <target state="translated">Kotlin /ネイティブターゲットの一部は、&lt;a href=&quot;#using-kotlinnative-targets&quot;&gt;適切なホストマシン&lt;/a&gt;を構築する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="36013172d7bed76a773c2a3e7f523422dd3a224f" translate="yes" xml:space="preserve">
          <source>Note that sometimes channels may produce executions that look unfair due to the nature of the executor that is being used. See &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/issues/111&quot;&gt;this issue&lt;/a&gt; for details.</source>
          <target state="translated">使用されているエグゼキュータの性質により、チャネルが不公平に見える実行を生成する場合があることに注意してください。詳細については、&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/issues/111&quot;&gt;この問題&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1c3b5c2f9f97ede3b692c00928df156ad477b585" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; implementation of this interface in Kotlin/JS has unspecified behavior if the &lt;a href=&quot;get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of its bounds.</source>
          <target state="translated">&lt;a href=&quot;get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;が範囲外の場合、Kotlin / JSでのこのインターフェースの&lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;実装は不特定の動作をすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="656f0ee95d7b273c3b267aed0322b60e181f19cb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; implementation of this interface in Kotlin/JS has unspecified behavior if the &lt;a href=&quot;../../kotlin/-char-sequence/get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of its bounds.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin/-char-sequence/get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;インデックス&lt;/a&gt;が範囲外の場合、Kotlin / JSでのこのインターフェースの&lt;a href=&quot;../../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;実装は不特定の動作をすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="86d97d17b217564ee55541f4e63de5ad16ee2c54" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;@DslMarker&lt;/code&gt; annotation is available only since Kotlin 1.1.</source>
          <target state="translated">&lt;code&gt;@DslMarker&lt;/code&gt; アノテーションはKotlin 1.1以降でのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e7b3f809dbbb0b87e0e79d9712336f436e1ff493" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;componentN()&lt;/code&gt; functions need to be marked with the &lt;code&gt;operator&lt;/code&gt; keyword to allow using them in a destructuring declaration.</source>
          <target state="translated">構造化宣言でそれらを使用できるようにするには、 &lt;code&gt;componentN()&lt;/code&gt; 関数を &lt;code&gt;operator&lt;/code&gt; キーワードでマークする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d942ddfab9f982a7bff6988ad53e1b8f734657f3" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;kotlin-multiplaform&lt;/code&gt; plugin doesn't create any production binaries by default. The only binary available by default is a debug executable allowing one to run tests from the &lt;code&gt;test&lt;/code&gt; compilation.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplaform&lt;/code&gt; プラグインは、デフォルトではプロダクションバイナリを作成しないことに注意してください。デフォルトで使用できる唯一のバイナリは、 &lt;code&gt;test&lt;/code&gt; コンパイルからテストを実行できるデバッグ実行可能ファイルです。</target>
        </trans-unit>
        <trans-unit id="c656240136213ce9805ea2877dde6b34a8442c1b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;provideDelegate&lt;/code&gt; method affects only the creation of the auxiliary property and doesn't affect the code generated for getter or setter.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; メソッドは、補助プロパティの作成にのみ影響し、ゲッターまたはセッター用に生成されるコードには影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="eaabc3c1b973d9e58d5da5690136b6ca64e5f983" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;rem&lt;/code&gt; operator is supported since Kotlin 1.1. Kotlin 1.0 uses the &lt;code&gt;mod&lt;/code&gt; operator, which is deprecated in Kotlin 1.1.</source>
          <target state="translated">&lt;code&gt;rem&lt;/code&gt; 演算子はKotlin 1.1以降でサポートされていることに注意してください。Kotlin 1.0は、Kotlin 1.1で廃止された &lt;code&gt;mod&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="72e01dcbd71cc06e15070eae50092b4b7e9eed02" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;to&lt;/code&gt; notation creates a short-living &lt;code&gt;Pair&lt;/code&gt; object, so it's recommended that you use it only if performance isn't critical. To avoid excessive memory usage, use alternative ways. For example, you can create a mutable map and populate it using the write operations. The &lt;a href=&quot;scope-functions#apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; function can help to keep the initialization fluent here.</source>
          <target state="translated">注こと &lt;code&gt;to&lt;/code&gt; 表記は、短い生活作成 &lt;code&gt;Pair&lt;/code&gt; あなたがパフォーマンスが重要でない場合にのみ、それを使用することをお勧めしますので、オブジェクトを。過度のメモリ使用を回避するには、別の方法を使用します。たとえば、変更可能なマップを作成し、書き込み操作を使用してそれを生成できます。&lt;a href=&quot;scope-functions#apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;関数は、ここでは、初期化流暢を保つのを助けることができます。</target>
        </trans-unit>
        <trans-unit id="ae0cdfd1c642695da1e12ec7f632f89942b6add0" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last char sequence may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡される文字シーケンスは一時的なものであり、その関数内でのみ有効です。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後の文字シーケンスは、指定&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="691b0c57806763a4b2bdecce9c41e605803c5ebe" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last char sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡される文字シーケンスは一時的なものであり、その関数内でのみ有効です。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後の文字シーケンスは、指定&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="1754418c79853b8c6ec574fcc023dbf40a7d737e" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last char sequences may have less characters than the given &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡される文字シーケンスは一時的なものであり、その関数内でのみ有効です。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後のいくつかの文字シーケンスは、指定&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="266d21f640d721c4dd41a4ded8abb4f2b56ec11c" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last char sequences may have less characters than the given &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡される文字シーケンスは一時的なものであり、その関数内でのみ有効です。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後のいくつかの文字シーケンスは、指定&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも文字数が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="eeca19ffbd81bf7218d5ce25611e87d001f58db2" translate="yes" xml:space="preserve">
          <source>Note that the compiler only uses the properties defined inside the primary constructor for the automatically generated functions. To exclude a property from the generated implementations, declare it inside the class body:</source>
          <target state="translated">コンパイラは、自動的に生成される関数のプライマリ・コンストラクタ内で定義されたプロパティのみを使用することに注意してください。生成される実装からプロパティを除外するには、クラス本体内で宣言します。</target>
        </trans-unit>
        <trans-unit id="29a5989520a2bf8fd601f2d782fa7b5f4d18221d" translate="yes" xml:space="preserve">
          <source>Note that the content of &lt;code&gt;platform.posix&lt;/code&gt; is NOT identical on different platforms, in the same way as different &lt;code&gt;POSIX&lt;/code&gt; implementations are a little different.</source>
          <target state="translated">&lt;code&gt;platform.posix&lt;/code&gt; の内容は、異なる &lt;code&gt;POSIX&lt;/code&gt; 実装が少し異なるのと同じように、異なるプラットフォームで同一ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6e0ba2d2cb4d8f4a9dbc1b85a017969941095acd" translate="yes" xml:space="preserve">
          <source>Note that the databinding expression language uses the same syntax for referring to properties as Kotlin: &lt;code&gt;data.imageUrl&lt;/code&gt;. In Kotlin you can write &lt;code&gt;v.prop&lt;/code&gt; instead of &lt;code&gt;v.getProp()&lt;/code&gt; even if &lt;code&gt;getProp()&lt;/code&gt; is a Java method. Similarly, instead of calling a setter directly, you may use an assignment:</source>
          <target state="translated">データバインディング式言語は、プロパティを参照するためにKotlinと同じ構文 &lt;code&gt;data.imageUrl&lt;/code&gt; を使用することに注意してください。Kotlinでは、書くことができます &lt;code&gt;v.prop&lt;/code&gt; 代わりの &lt;code&gt;v.getProp()&lt;/code&gt; 場合でも &lt;code&gt;getProp()&lt;/code&gt; Javaメソッドです。同様に、setterを直接呼び出す代わりに、割り当てを使用できます。</target>
        </trans-unit>
        <trans-unit id="e38cb3723f44256fc4af27d394f0da73badd7310" translate="yes" xml:space="preserve">
          <source>Note that the first build isn't incremental in any case.</source>
          <target state="translated">最初のビルドはいずれにしてもインクリメンタルではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3539b1a59eaf5408904eb51b677999543b8a5f8e" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡されるリストは一時的なものであり、その関数内でのみ有効であることに注意してください。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後のリストは、指定&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="7d6ec3f60ea3d3f0e1450f4fd127d92b3dabc464" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last list may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡されるリストは一時的なものであり、その関数内でのみ有効であることに注意してください。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後のリストは、指定&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="a0c9e1743347f1aa8d11316573c39fab1f4d2b86" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡されるリストは一時的なものであり、その関数内でのみ有効であることに注意してください。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後のいくつかのリストは、指定&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="b9a01e230c14a996ac73932af98798f763d520bb" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数に渡されるリストは一時的なものであり、その関数内でのみ有効であることに注意してください。スナップショットを作成しない限り、保存したり、何らかの方法でエスケープしたりしないでください。最後のいくつかのリストは、指定&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;さ&lt;/a&gt;れたサイズよりも要素が少ない場合があります。</target>
        </trans-unit>
        <trans-unit id="d6259e89a9a4c0b547dbd66ff1bea24b671ef991" translate="yes" xml:space="preserve">
          <source>Note that the module metadata published by Gradle 5.3 and above cannot be read by Gradle versions older than 5.3.</source>
          <target state="translated">Gradle 5.3以上で公開されているモジュールのメタデータは、5.3より古いバージョンのGradleでは読み取れないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="289248f23bcb06f8e447242c0fc575e0c1a20430" translate="yes" xml:space="preserve">
          <source>Note that the named argument syntax cannot be used when calling Java functions, because Java bytecode does not always preserve names of function parameters.</source>
          <target state="translated">Javaバイトコードは常に関数パラメータの名前を保持しているとは限らないため、Java関数を呼び出す際に名前付き引数構文を使用することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7b39b5b0c66187e76139e4031731bcf6a323f589" translate="yes" xml:space="preserve">
          <source>Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.</source>
          <target state="translated">マップが同時に変更されている場合、操作がアトミックであることは保証されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f1adf6c7e534562475c3f5e5643436265ce9a453" translate="yes" xml:space="preserve">
          <source>Note that the opposite reversed translation is not implemented yet: Swift/Objective-C error-throwing methods aren't imported to Kotlin as exception-throwing.</source>
          <target state="translated">逆の逆変換はまだ実装されていないので注意してください。Swift/Objective-Cのエラースローイングメソッドは例外スローイングとしてKotlinにはインポートされません。</target>
        </trans-unit>
        <trans-unit id="13e4f5805154eec53798d94ef883500f35ad56a4" translate="yes" xml:space="preserve">
          <source>Note that the other uses of curly braces in Kotlin, such as in function and class definitions and after &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; statements, are not lambda expressions (so it is &lt;em&gt;not&lt;/em&gt; the case that &lt;code&gt;if&lt;/code&gt; is a function that conditionally executes a lambda function).</source>
          <target state="translated">このような機能やクラス定義のようKotlinに中括弧の他の用途および後ことに留意されたい &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; / &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;while&lt;/code&gt; 文、ラムダ式ではない（それがあるよう&lt;em&gt;ではない&lt;/em&gt;ことが場合 &lt;code&gt;if&lt;/code&gt; 条件付きラムダを実行する機能であります関数）。</target>
        </trans-unit>
        <trans-unit id="29cdb0fff079bd2313b913b84a243b2ced642967" translate="yes" xml:space="preserve">
          <source>Note that the returned instance uses itself to synchronize on. Do not synchronize from external code on the returned instance as it may cause accidental deadlock. Also this behavior can be changed in the future.</source>
          <target state="translated">返されたインスタンスは自分自身を使用して同期することに注意してください。誤ってデッドロックを起こす可能性があるので、返されたインスタンス上で外部コードから同期しないようにしてください。また、この動作は将来的に変更することができます。</target>
        </trans-unit>
        <trans-unit id="99bb4d1e09ed7e1f3f7c48bd69bd7281f7032077" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the array being added are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">追加されるソースシーケンスと配列は、結果のシーケンスから &lt;code&gt;iterator&lt;/code&gt; が要求された場合にのみ反復されることに注意してください。 &lt;code&gt;iterator&lt;/code&gt; 連続する呼び出しの間にそれらのいずれかを変更すると、結果に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="4bc2850950af5238d132e57cd0616b073acff952" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the array being subtracted are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">ソースシーケンスと減算される配列は、結果のシーケンスから &lt;code&gt;iterator&lt;/code&gt; が要求された場合にのみ反復されることに注意してください。 &lt;code&gt;iterator&lt;/code&gt; 連続する呼び出しの間にそれらのいずれかを変更すると、結果に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="8cd8b63a074395eb7bac096117fd2d1a65ca128f" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the collection being added are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">追加されるソースシーケンスとコレクションは、結果のシーケンスから &lt;code&gt;iterator&lt;/code&gt; が要求された場合にのみ反復されることに注意してください。 &lt;code&gt;iterator&lt;/code&gt; 連続する呼び出しの間にそれらのいずれかを変更すると、結果に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="230e838a21a0d86d33ae636264aea12d232d60bc" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the collection being subtracted are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">ソースシーケンスと減算されるコレクションは、結果のシーケンスから &lt;code&gt;iterator&lt;/code&gt; が要求された場合にのみ反復されることに注意してください。 &lt;code&gt;iterator&lt;/code&gt; 連続する呼び出しの間にそれらのいずれかを変更すると、結果に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="1d7a2c8875e7a4328f4bc1cb1a337451636c5765" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the sequence being added are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">ソースシーケンスと追加されるシーケンスは、結果のシーケンスから &lt;code&gt;iterator&lt;/code&gt; が要求された場合にのみ反復されることに注意してください。 &lt;code&gt;iterator&lt;/code&gt; 連続する呼び出しの間にそれらのいずれかを変更すると、結果に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="9b6c8e7b439f69f32239265aaaa738e3fcea0362" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the sequence being subtracted are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">ソースシーケンスと減算されるシーケンスは、結果のシーケンスから &lt;code&gt;iterator&lt;/code&gt; が要求された場合にのみ反復されることに注意してください。 &lt;code&gt;iterator&lt;/code&gt; 連続する呼び出しの間にそれらのいずれかを変更すると、結果に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="be4783ce40fed5c138c67544445542f050cb0f80" translate="yes" xml:space="preserve">
          <source>Note that the syntax &lt;code&gt;this::prop&lt;/code&gt; to refer a &lt;a href=&quot;reflection#bound-function-and-property-references-since-11&quot;&gt;bound callable reference&lt;/a&gt; in the code directly is available only since Kotlin 1.1.</source>
          <target state="translated">コードで&lt;a href=&quot;reflection#bound-function-and-property-references-since-11&quot;&gt;バインドされた呼び出し可能な参照&lt;/a&gt;を直接参照する構文 &lt;code&gt;this::prop&lt;/code&gt; は、Kotlin 1.1以降でのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2949a431bbdf8be1e322b0911e16815ddc68d4b3" translate="yes" xml:space="preserve">
          <source>Note that the terms &quot;subclass&quot; and &quot;superclass&quot; can span multiple levels of inheritance - &lt;code&gt;Car&lt;/code&gt; is a subclass of &lt;code&gt;Any&lt;/code&gt;, and &lt;code&gt;Any&lt;/code&gt; is the superclass of everything. If we want to restrict ourselves to one level of inheritance, we will say &quot;direct subclass&quot; or &quot;direct superclass&quot;.</source>
          <target state="translated">用語「サブクラス」と「スーパークラス」の継承の複数のレベルにまたがることができること注- &lt;code&gt;Car&lt;/code&gt; のサブクラスで &lt;code&gt;Any&lt;/code&gt; 、および &lt;code&gt;Any&lt;/code&gt; すべてのスーパークラスです。継承を1つのレベルに制限したい場合は、「直接サブクラス」または「直接スーパークラス」と言います。</target>
        </trans-unit>
        <trans-unit id="6f04df739b130f057070e51840257477306e9abb" translate="yes" xml:space="preserve">
          <source>Note that the trailing newline of each line is stripped. You can also call &lt;code&gt;readLines()&lt;/code&gt; on a file object to get a list of all the lines, or &lt;code&gt;useLines()&lt;/code&gt; to supply a function that will be called on every line. If you simply want the entire file contents as one string or byte array, call &lt;code&gt;readText()&lt;/code&gt; or &lt;code&gt;readBytes()&lt;/code&gt;, respectively.</source>
          <target state="translated">各行の末尾の改行が削除されることに注意してください。また、ファイルオブジェクトで &lt;code&gt;readLines()&lt;/code&gt; を呼び出してすべての行のリストを取得したり、 &lt;code&gt;useLines()&lt;/code&gt; ですべての行で呼び出される関数を提供したりすることもできます。ファイルの内容全体を1つの文字列またはバイト配列として単純に必要な場合は、それぞれ &lt;code&gt;readText()&lt;/code&gt; または &lt;code&gt;readBytes()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3233b123410bb0637d15ef36074b9c50ad6be8ca" translate="yes" xml:space="preserve">
          <source>Note that the type of a property must be explicitly specified. As opposed to Python, declaring a property directly inside the class does not create a class-level property, but an instance-level one: every instance of &lt;code&gt;Person&lt;/code&gt; will have &lt;em&gt;its own&lt;/em&gt;&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. Their values will start out in every instance as &lt;code&gt;&quot;Anne&quot;&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt;, respectively, but the value in each instance can be modified independently of the others:</source>
          <target state="translated">プロパティのタイプは明示的に指定する必要があることに注意してください。Pythonのとは対照的に、クラス内で直接プロパティを宣言すると、クラスレベルのプロパティを作成しますが、インスタンス・レベルのものではないんのすべてのインスタンス &lt;code&gt;Person&lt;/code&gt; 持っているだろう&lt;em&gt;、独自の&lt;/em&gt; &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;age&lt;/code&gt; 。それらの値は、すべてのインスタンスでそれぞれ &lt;code&gt;&quot;Anne&quot;&lt;/code&gt; および &lt;code&gt;32&lt;/code&gt; として始まりますが、各インスタンスの値は他のインスタンスとは独立して変更できます。</target>
        </trans-unit>
        <trans-unit id="f7f16b8fd146ff06d4c86373cb61d32bd374065c" translate="yes" xml:space="preserve">
          <source>Note that the type systems of TypeScript and Kotlin do not match exactly, so you may need to edit the generated headers in case you encounter difficulties with using the APIs from Kotlin.</source>
          <target state="translated">TypeScript と Kotlin の型システムは完全に一致していないので、Kotlin の API を使用する際に問題が発生した場合は、生成されたヘッダを編集する必要があるかもしれないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b0f31d7eb5e41ba2d64378a5f837d7e8fe985ed7" translate="yes" xml:space="preserve">
          <source>Note that the use of local returns in previous three examples is similar to the use of &lt;em&gt;continue&lt;/em&gt; in regular loops. There is no direct equivalent for &lt;em&gt;break&lt;/em&gt;, but it can be simulated by adding another nesting lambda and non-locally returning from it:</source>
          <target state="translated">前の3つの例でのローカルリターンの使用は、通常のループでの&lt;em&gt;continue&lt;/em&gt;の使用に似ていることに注意してください。&lt;em&gt;break&lt;/em&gt;に直接相当するものはありませんが、別の入れ子のラムダを追加し、それから非ローカルに戻ることでシミュレートできます。</target>
        </trans-unit>
        <trans-unit id="c4baab91a6183da58c03d16fdff1a5962cf6d45a" translate="yes" xml:space="preserve">
          <source>Note that there must be no space between &lt;code&gt;continue&lt;/code&gt;/&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; / &lt;code&gt;break&lt;/code&gt; と &lt;code&gt;@&lt;/code&gt; の間にスペースがあってはならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9d4ed672615deb4b3ea8e8cf90856dae61208644" translate="yes" xml:space="preserve">
          <source>Note that there's no point in optimizing your code when comparing to &lt;code&gt;null&lt;/code&gt; explicitly: &lt;code&gt;a == null&lt;/code&gt; will be automatically translated to &lt;code&gt;a === null&lt;/code&gt;.</source>
          <target state="translated">明示的に &lt;code&gt;null&lt;/code&gt; と比較する場合、コードを最適化しても意味がないことに注意してください &lt;code&gt;a == null&lt;/code&gt; は自動的に &lt;code&gt;a === null&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="29bbb70efdb2913fbd8c12ace3a60040ce02ee39" translate="yes" xml:space="preserve">
          <source>Note that these &lt;code&gt;xxxAsync&lt;/code&gt; functions are &lt;strong&gt;not&lt;/strong&gt;&lt;em&gt;suspending&lt;/em&gt; functions. They can be used from anywhere. However, their use always implies asynchronous (here meaning &lt;em&gt;concurrent&lt;/em&gt;) execution of their action with the invoking code.</source>
          <target state="translated">これらの &lt;code&gt;xxxAsync&lt;/code&gt; 関数は&lt;em&gt;一時停止&lt;/em&gt;関数では&lt;strong&gt;ない&lt;/strong&gt;&lt;em&gt;ことに&lt;/em&gt;注意してください。どこからでも使えます。ただし、これらの使用は常に、呼び出しコードでのアクションの非同期実行（ここでは&lt;em&gt;同時を&lt;/em&gt;意味する）を意味&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d091dbc112d0275a030bcbf9509f2a82ef36aedb" translate="yes" xml:space="preserve">
          <source>Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain locales.</source>
          <target state="translated">このコンパレータはロケールを考慮していないため、特定のロケールでは満足のいく注文ができないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="bf9957e9675cc2706846aa1653497d6600b98d94" translate="yes" xml:space="preserve">
          <source>Note that this example also uses &lt;code&gt;use&lt;/code&gt; function from the Kotlin standard library to release threads that are created with &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html&quot;&gt;newSingleThreadContext&lt;/a&gt; when they are no longer needed.</source>
          <target state="translated">この例では、Kotlin標準ライブラリの &lt;code&gt;use&lt;/code&gt; 関数も使用して、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html&quot;&gt;newSingleThreadContextで&lt;/a&gt;作成されたスレッドが不要になったときに解放することに注意してください。</target>
        </trans-unit>
        <trans-unit id="f0cc5e3b07875e2d5bb6712ec59bb2224c29a52e" translate="yes" xml:space="preserve">
          <source>Note that this only works where &lt;code&gt;b&lt;/code&gt; is immutable (i.e. a local variable which is not modified between the check and the usage or a member &lt;em&gt;val&lt;/em&gt; which has a backing field and is not overridable), because otherwise it might happen that &lt;code&gt;b&lt;/code&gt; changes to &lt;em&gt;null&lt;/em&gt; after the check.</source>
          <target state="translated">これはどこにのみ動作することに注意してください &lt;code&gt;b&lt;/code&gt; は不変である（チェックと使用またはメンバー間で変更されていない、すなわち、ローカル変数&lt;em&gt;valの&lt;/em&gt;バッキングフィールドを持ち、オーバーライドではありません）、それ以外の場合は、その起こる可能性があるため、 &lt;code&gt;b&lt;/code&gt; への変更を&lt;em&gt;nullに&lt;/em&gt;した後、チェック。</target>
        </trans-unit>
        <trans-unit id="02cb3aecbee6ce81505199ced32233815d499b61" translate="yes" xml:space="preserve">
          <source>Note that this part of the &lt;code&gt;.def&lt;/code&gt; file is treated as part of the header file, so functions with the body should be declared as &lt;code&gt;static&lt;/code&gt;. The declarations are parsed after including the files from the &lt;code&gt;headers&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;.def&lt;/code&gt; ファイルのこの部分はヘッダーファイルの一部として扱われるため、本文を含む関数は &lt;code&gt;static&lt;/code&gt; として宣言する必要があります。宣言は、 &lt;code&gt;headers&lt;/code&gt; リストからファイルを含めた後に解析されます。</target>
        </trans-unit>
        <trans-unit id="632fe2c8e3130a19688049106ee9e7cf2e3fa004" translate="yes" xml:space="preserve">
          <source>Note that this way of applying the Kotlin/JS plugin requires adding the following code to Gradle settings file (&lt;code&gt;settings.gradle&lt;/code&gt;):</source>
          <target state="translated">Kotlin / JSプラグインを適用するこの方法では、次のコードをGradle設定ファイル（ &lt;code&gt;settings.gradle&lt;/code&gt; ）に追加する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5d89b0ac97e4e72ec3a56a39219f1c2ad6cf8c5b" translate="yes" xml:space="preserve">
          <source>Note that we do not use &lt;code&gt;val&lt;/code&gt; in front of &lt;code&gt;maxSpeed&lt;/code&gt; in &lt;code&gt;Car&lt;/code&gt; - doing so would have introduced a distinct property in &lt;code&gt;Car&lt;/code&gt; that would have &lt;em&gt;shadowed&lt;/em&gt; the one inherited from &lt;code&gt;MotorVehicle&lt;/code&gt;. As written, it's just a constructor parameter that we pass on to the superconstructor.</source>
          <target state="translated">私たちが使用していないことを注意 &lt;code&gt;val&lt;/code&gt; の前で &lt;code&gt;maxSpeed&lt;/code&gt; で &lt;code&gt;Car&lt;/code&gt; -そうすることで明確な財産導入しているでしょう &lt;code&gt;Car&lt;/code&gt; だろう&lt;em&gt;影の&lt;/em&gt;から継承された1 &lt;code&gt;MotorVehicle&lt;/code&gt; を。書かれているように、これはスーパーコンストラクターに渡すコンストラクターパラメーターです。</target>
        </trans-unit>
        <trans-unit id="32efdf9e14f64cdc5ac4ce116b4cf7f1f66b160c" translate="yes" xml:space="preserve">
          <source>Note that when the LazyThreadSafetyMode.SYNCHRONIZED mode is specified the returned instance uses itself to synchronize on. Do not synchronize from external code on the returned instance as it may cause accidental deadlock. Also this behavior can be changed in the future.</source>
          <target state="translated">LazyThreadSafetyMode.SYNCHRONIZED モードが指定されている場合、返されたインスタンスは自分自身を使用して同期することに注意してください。誤ってデッドロックを起こす可能性があるので、返されたインスタンス上で外部コードから同期しないようにしてください。また、この動作は将来的に変更することも可能です。</target>
        </trans-unit>
        <trans-unit id="d89d8b71e027e7e428c09aada677d55add6a81f5" translate="yes" xml:space="preserve">
          <source>Note that while &lt;code&gt;File()&lt;/code&gt; does create a &quot;file object&quot;, it doesn't actually open the file - the file object is just a reference to the file path; opening the file is a separate action. The preceding functions open and close the file automatically, whereas other functions separately open and close the file. For example, if you're parsing binary data and you don't want to read the entire file at once, you must create an &lt;em&gt;input stream&lt;/em&gt; (for binary data) or an &lt;em&gt;input stream reader&lt;/em&gt; (for strings) - the example below will read 16 bytes:</source>
          <target state="translated">&lt;code&gt;File()&lt;/code&gt; は「ファイルオブジェクト」を作成しますが、実際にはファイルを開かないことに注意してください。ファイルオブジェクトはファイルパスへの参照にすぎません。ファイルを開くことは別のアクションです。上記の関数はファイルを自動的に開いたり閉じたりしますが、他の関数はファイルを個別に開いたり閉じたりします。たとえば、バイナリデータを解析していて、ファイル全体を一度に読みたくない場合は、&lt;em&gt;入力ストリーム&lt;/em&gt;（バイナリデータの場合）または&lt;em&gt;入力ストリームリーダー&lt;/em&gt;（文字列の場合）を作成する必要があります。以下の例では、 16バイト：</target>
        </trans-unit>
        <trans-unit id="14f5320c56ff81654d679ede920646b9dc75066a" translate="yes" xml:space="preserve">
          <source>Note that with Gradle Kotlin DSL, you should get the task from the project's &lt;code&gt;tasks&lt;/code&gt; first.</source>
          <target state="translated">Gradle Kotlin DSLでは、最初にプロジェクトの &lt;code&gt;tasks&lt;/code&gt; からタスクを取得する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c40d9fcf3b6b2afa85b538678b5ccf141165484f" translate="yes" xml:space="preserve">
          <source>Note that you can build the same pipeline using &lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.sequences/iterator&quot;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt; coroutine builder from the standard library. Replace &lt;code&gt;produce&lt;/code&gt; with &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt; with &lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt; with &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;ReceiveChannel&lt;/code&gt; with &lt;code&gt;Iterator&lt;/code&gt;, and get rid of the coroutine scope. You will not need &lt;code&gt;runBlocking&lt;/code&gt; either. However, the benefit of a pipeline that uses channels as shown above is that it can actually use multiple CPU cores if you run it in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; context.</source>
          <target state="translated">標準ライブラリの&lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.sequences/iterator&quot;&gt; &lt;code&gt;iterator&lt;/code&gt; &lt;/a&gt;コルーチンビルダーを使用して同じパイプラインを構築できることに注意してください。 &lt;code&gt;produce&lt;/code&gt; を &lt;code&gt;iterator&lt;/code&gt; で置き換え、 &lt;code&gt;send&lt;/code&gt; を &lt;code&gt;yield&lt;/code&gt; で、 &lt;code&gt;receive&lt;/code&gt; を &lt;code&gt;next&lt;/code&gt; で、 &lt;code&gt;ReceiveChannel&lt;/code&gt; を &lt;code&gt;Iterator&lt;/code&gt; で置き換え、コルーチンスコープを削除します。 &lt;code&gt;runBlocking&lt;/code&gt; も必要ありません。ただし、上記のようにチャネルを使用するパイプラインの利点は、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;コンテキストで実行すると、実際に複数のCPUコアを使用できることです。</target>
        </trans-unit>
        <trans-unit id="fb9e894663a37dff3bfdff25d326ba2089261968" translate="yes" xml:space="preserve">
          <source>Note that you can open folders in the Source tab and see sources of libraries you are using in your project, including Kotlin standard library (&lt;code&gt;kotlin.js&lt;/code&gt;). This, however, requires that libraries are compiled with source maps enabled, as well as sources embedded into source maps. So the good practice is: if you share a library for Kotlin/JS, please, include source map into distribution.</source>
          <target state="translated">[ソース]タブでフォルダーを開いて、Kotlin標準ライブラリ（ &lt;code&gt;kotlin.js&lt;/code&gt; ）を含む、プロジェクトで使用しているライブラリのソースを表示できることに注意してください。ただし、これには、ソースマップを有効にした状態でライブラリをコンパイルし、ソースマップに埋め込まれたソースをコンパイルする必要があります。ですから、Kotlin / JSのライブラリを共有する場合は、ソースマップを配布に含めてください。</target>
        </trans-unit>
        <trans-unit id="f3d310ef82c3c4cf7ec6ba7c31c24dfd55f8f136" translate="yes" xml:space="preserve">
          <source>Note that you can use the &lt;em&gt;override&lt;/em&gt; keyword as part of the property declaration in a primary constructor.</source>
          <target state="translated">プライマリコンストラクターのプロパティ宣言の一部として、&lt;em&gt;override&lt;/em&gt;キーワードを使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="49136291f4ccdd63f93ac650ad3552f2ac330a1e" translate="yes" xml:space="preserve">
          <source>Note that you can't extend a non-external class by external classes.</source>
          <target state="translated">外部クラスではないクラスを外部クラスで拡張することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e28231afdd7ac958845e417ade6744d2f5c90c1" translate="yes" xml:space="preserve">
          <source>Note that you need to turn on the &lt;a href=&quot;#enabling-experimental-features&quot;&gt;experimental flag&lt;/a&gt; to use &lt;code&gt;LayoutContainer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LayoutContainer&lt;/code&gt; を使用するには、&lt;a href=&quot;#enabling-experimental-features&quot;&gt;実験的なフラグ&lt;/a&gt;をオンにする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7606870a12c3125873b69f0dbf82ae21f8b6f6b5" translate="yes" xml:space="preserve">
          <source>Note that, as described in &lt;a href=&quot;classes#secondary-constructors&quot;&gt;Secondary Constructors&lt;/a&gt;, if a class has default values for all constructor parameters, a public no-argument constructor will be generated for it. This works even if the &lt;code&gt;@JvmOverloads&lt;/code&gt; annotation is not specified.</source>
          <target state="translated">&lt;a href=&quot;classes#secondary-constructors&quot;&gt;セカンダリコンストラクター&lt;/a&gt;で説明されているように、クラスにすべてのコンストラクターパラメーターのデフォルト値がある場合、引数のないパブリックコンストラクターが生成されます。これは、 &lt;code&gt;@JvmOverloads&lt;/code&gt; アノテーションが指定されていなくても機能します。</target>
        </trans-unit>
        <trans-unit id="bcfd3d4bc13c4d196d89ced424f8f78ed6df819a" translate="yes" xml:space="preserve">
          <source>Note that, even though the members of companion objects look like static members in other languages, at runtime those are still instance members of real objects, and can, for example, implement interfaces:</source>
          <target state="translated">コンパニオンオブジェクトのメンバは、他の言語では静的なメンバのように見えても、実行時には実際のオブジェクトのインスタンスメンバであり、例えばインターフェイスを実装することができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="63673aeff981591d75550c2f1b2c84d22a058b57" translate="yes" xml:space="preserve">
          <source>Note that, if the Java class only has a setter, it will not be visible as a property in Kotlin, because Kotlin does not support set-only properties at this time.</source>
          <target state="translated">Javaクラスがセッターのみを持っている場合、Kotlinではそれがプロパティとして表示されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4ff451e50da6bbf10519c4f38e0ec36c818d0c89" translate="yes" xml:space="preserve">
          <source>Note that, since &lt;em&gt;throw&lt;/em&gt; and &lt;em&gt;return&lt;/em&gt; are expressions in Kotlin, they can also be used on the right hand side of the elvis operator. This can be very handy, for example, for checking function arguments:</source>
          <target state="translated">以来、なお&lt;em&gt;スロー&lt;/em&gt;と&lt;em&gt;リターンが&lt;/em&gt; Kotlinで式をしている、彼らはまた、エルビス演算子の右側に使用することができます。これは、たとえば、関数の引数をチェックする場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="ff2652dcfc51e4dc3d549eb0a81df9a68d2667cc" translate="yes" xml:space="preserve">
          <source>Note that, since extensions do not actually insert members into classes, there's no efficient way for an extension property to have a &lt;a href=&quot;properties#backing-fields&quot;&gt;backing field&lt;/a&gt;. This is why &lt;strong&gt;initializers are not allowed for extension properties&lt;/strong&gt;. Their behavior can only be defined by explicitly providing getters/setters.</source>
          <target state="translated">拡張機能は実際にはクラスにメンバーを挿入しないので、拡張プロパティが&lt;a href=&quot;properties#backing-fields&quot;&gt;バッキングフィールド&lt;/a&gt;を持つための効率的な方法はないことに注意してください。これが&lt;strong&gt;、拡張プロパティに対してイニシャライザが許可されない&lt;/strong&gt;理由です。それらの動作は、ゲッター/セッターを明示的に提供することによってのみ定義できます。</target>
        </trans-unit>
        <trans-unit id="410e3cbb9102efe17f7c84d061da15f92debf764" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;@NotNull&lt;/code&gt; annotations on &lt;code&gt;String&lt;/code&gt; type arguments. Without them, we get platform types in the type arguments:</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 型の引数の &lt;code&gt;@NotNull&lt;/code&gt; アノテーションに注意してください。それらがない場合、型引数でプラットフォーム型を取得します。</target>
        </trans-unit>
        <trans-unit id="c5849a883ad401340758801d94c3c8fe5489e593" translate="yes" xml:space="preserve">
          <source>Note the difference between declaring two parameters and declaring a destructuring pair instead of a parameter:</source>
          <target state="translated">2つのパラメータを宣言することと、パラメータの代わりに破壊ペアを宣言することの違いに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe84360ef08152f70a600e469dd1daf46f251b07" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;private&lt;/code&gt;&lt;a href=&quot;../reference/visibility-modifiers&quot;&gt;visibility modifier&lt;/a&gt; here. While the concept of visibility modifier is not relevant for competitive programming at all, it allows you to place multiple solution files based on the same template without getting an error for conflicting public declarations in the same package.</source>
          <target state="translated">ここでは &lt;code&gt;private&lt;/code&gt; &lt;a href=&quot;../reference/visibility-modifiers&quot;&gt;可視性修飾子の&lt;/a&gt;使用に注意してください。可視性修飾子の概念は競合プログラミングにはまったく関係ありませんが、同じパッケージで競合するパブリック宣言のエラーが発生することなく、同じテンプレートに基づく複数のソリューションファイルを配置できます。</target>
        </trans-unit>
        <trans-unit id="32363778a2d483af8b5e294fa0d257703c3636de" translate="yes" xml:space="preserve">
          <source>Note the use of Kotlin's &lt;a href=&quot;../reference/null-safety#the--operator&quot;&gt;null-assertion operator&lt;/a&gt;&lt;code&gt;!!&lt;/code&gt; after the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.io/read-line&quot;&gt;readLine()&lt;/a&gt; function call. Kotlin's &lt;code&gt;readLine()&lt;/code&gt; function is defined to return a &lt;a href=&quot;../reference/null-safety#nullable-types-and-non-null-types&quot;&gt;nullable type&lt;/a&gt;&lt;code&gt;String?&lt;/code&gt; and returns &lt;code&gt;null&lt;/code&gt; on the end of the input, which explicitly forces the developer to handle the case of missing input.</source>
          <target state="translated">Kotlinの&lt;a href=&quot;../reference/null-safety#the--operator&quot;&gt;nullアサーション演算子&lt;/a&gt;の使用に注意してください &lt;code&gt;!!&lt;/code&gt; 後&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.io/read-line&quot;&gt;のreadLine（）&lt;/a&gt;関数呼び出し。Kotlinの &lt;code&gt;readLine()&lt;/code&gt; 関数は、&lt;a href=&quot;../reference/null-safety#nullable-types-and-non-null-types&quot;&gt;null許容型の&lt;/a&gt; &lt;code&gt;String?&lt;/code&gt; を返すように定義されていますか？そして、入力の最後に &lt;code&gt;null&lt;/code&gt; を返します。これにより、開発者は入力がない場合の処理​​を明示的に強制します。</target>
        </trans-unit>
        <trans-unit id="ac2f2aad869d626d4d52fe790ab55573fcf5e8e3" translate="yes" xml:space="preserve">
          <source>Note, Kotlin/Native object references do not support multi-threaded access. Hosting the returned &lt;code&gt;libnative_ExportedSymbols*&lt;/code&gt; pointer per thread might be necessary.</source>
          <target state="translated">Kotlin / Nativeオブジェクト参照はマルチスレッドアクセスをサポートしていないことに注意してください。返された &lt;code&gt;libnative_ExportedSymbols*&lt;/code&gt; ポインターをスレッドごとにホストする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="2b78a1550dcdacf66568124ca1b7e49361c24581" translate="yes" xml:space="preserve">
          <source>Note, here we use the &lt;code&gt;$SRCROOT/../..&lt;/code&gt; as the path to the root of our Gradle project. It can depend on the way the Xcode project was created. Also, we use the generated &lt;code&gt;SharedCode/build/xcode-frameworks/gradlew&lt;/code&gt; script, the &lt;code&gt;packForXCode&lt;/code&gt; task generates it. We assumed that the Gradle build is executed at least once, before opening the Xcode project on a fresh machine</source>
          <target state="translated">ここでは、 &lt;code&gt;$SRCROOT/../..&lt;/code&gt; をGradleプロジェクトのルートへのパスとして使用しています。Xcodeプロジェクトの作成方法によって異なります。また、生成された &lt;code&gt;SharedCode/build/xcode-frameworks/gradlew&lt;/code&gt; スクリプトを使用し、 &lt;code&gt;packForXCode&lt;/code&gt; タスクがそれを生成します。新しいマシンでXcodeプロジェクトを開く前に、Gradleビルドが少なくとも1回実行されると想定しました</target>
        </trans-unit>
        <trans-unit id="e681d434ce2d0ba5fe65e1c3eb9e64a72c2114ad" translate="yes" xml:space="preserve">
          <source>Note, how both first &lt;code&gt;async&lt;/code&gt; and awaiting parent are cancelled on the one child failure:</source>
          <target state="translated">最初の &lt;code&gt;async&lt;/code&gt; と待機中の親の両方が1つの子の失敗でキャンセルされる方法に注意してください。</target>
        </trans-unit>
        <trans-unit id="fa14e718dbed55afbde738f5e7d1fbd2fe0275f6" translate="yes" xml:space="preserve">
          <source>Note, however, that members overridden in this way do not get called from the members of the delegate object, which can only access its own implementations of the interface members:</source>
          <target state="translated">しかし、この方法でオーバーライドされたメンバはデリゲートオブジェクトのメンバからは呼び出されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9016aa7ea4f2b1fc5592a3d2b46f69f0ff3c825e" translate="yes" xml:space="preserve">
          <source>Note, that an exception thrown by &lt;a href=&quot;recover#kotlin%24recover%28kotlin.Result%28%28kotlin.recover.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.recover.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is rethrown by this function. See &lt;a href=&quot;recover-catching&quot;&gt;recoverCatching&lt;/a&gt; for an alternative that encapsulates exceptions.</source>
          <target state="translated">&lt;a href=&quot;recover#kotlin%24recover%28kotlin.Result%28%28kotlin.recover.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.recover.R%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によってスローされた例外は、この関数によって再スローされることに注意してください。例外をカプセル化する別の方法については、&lt;a href=&quot;recover-catching&quot;&gt;recoverCatching&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ab4261a565eea01ddcb4378ad59c0c58898851cf" translate="yes" xml:space="preserve">
          <source>Note, that for some cases cycle collection need to be done to ensure that dead cycles do not affect reachability of passed object graph.</source>
          <target state="translated">いくつかのケースでは、デッドサイクルが渡されたオブジェクトグラフの到達性に影響を与えないように、サイクルの収集を行う必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b6259b2eebc86f15dafec32912cdde080c4e1580" translate="yes" xml:space="preserve">
          <source>Note, that the generated bindings are generally platform-specific, so if you are developing for multiple targets, the bindings need to be regenerated.</source>
          <target state="translated">生成されたバインディングは一般的にプラットフォーム固有のものなので、複数のターゲット向けに開発している場合は、バインディングを再生成する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe80340489c5eb8bbb1e5235c463cea51b0d96bc" translate="yes" xml:space="preserve">
          <source>Note, the task may not work &lt;a href=&quot;https://github.com/gradle/gradle/issues/6330&quot;&gt;correctly&lt;/a&gt; if you use Gradle older than 4.10. In this tutorial we have already &lt;a href=&quot;#gradle-upgrade&quot;&gt;upgraded it to 4.7&lt;/a&gt;.</source>
          <target state="translated">4.10より前のGradleを使用すると、タスクが&lt;a href=&quot;https://github.com/gradle/gradle/issues/6330&quot;&gt;正しく&lt;/a&gt;機能しない場合があります。このチュートリアルでは、すでに&lt;a href=&quot;#gradle-upgrade&quot;&gt;4.7にアップグレードし&lt;/a&gt;ています。</target>
        </trans-unit>
        <trans-unit id="cdfb7f6c960fbbb54ec2a22474d762eebb5eb578" translate="yes" xml:space="preserve">
          <source>Note, the way Kotlin/Native exports symbols is subject to change without notice.</source>
          <target state="translated">Kotlin/Nativeがシンボルをエクスポートする方法は、予告なく変更されることがあります。</target>
        </trans-unit>
        <trans-unit id="a421385920384e5f4a176ab3c70967301467e475" translate="yes" xml:space="preserve">
          <source>Note, this mechanism currently works only on Java version 1.7+. Limitation on JS and Native is temporary and will be fixed in the future.</source>
          <target state="translated">注:このメカニズムは現在のところJavaバージョン1.7以上でのみ動作します。JSとNativeの制限は一時的なもので、将来的には修正される予定です。</target>
        </trans-unit>
        <trans-unit id="12618a61ea26af57372d00837c08269ccff8b13d" translate="yes" xml:space="preserve">
          <source>Note, we use the extension property &lt;code&gt;ptr&lt;/code&gt; which comes from a &lt;code&gt;memScoped&lt;/code&gt; lambda receiver type, to turn &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; instances into native pointers.</source>
          <target state="translated">&lt;code&gt;MyStruct&lt;/code&gt; および &lt;code&gt;MyUnion&lt;/code&gt; インスタンスをネイティブポインターに変換するために、 &lt;code&gt;memScoped&lt;/code&gt; ラムダレシーバータイプからの拡張プロパティ &lt;code&gt;ptr&lt;/code&gt; を使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="928235a3ea58117b013d6814e6ae398b8d106eb5" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies%28kotlin.Boolean%29%2FbooleanExpression&quot;&gt;booleanExpression&lt;/a&gt; can accept only a subset of boolean expressions, where a function parameter or receiver (&lt;code&gt;this&lt;/code&gt;) undergoes</source>
          <target state="translated">注：&lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies%28kotlin.Boolean%29%2FbooleanExpression&quot;&gt;booleanExpression&lt;/a&gt;は、関数パラメーターまたはレシーバー（ &lt;code&gt;this&lt;/code&gt; ）が実行するブール式のサブセットのみを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="6981f24296bbc00cf0e0f8db9ec6624b3daecbcc" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;Any&lt;/code&gt; is not &lt;code&gt;java.lang.Object&lt;/code&gt;; in particular, it does not have any members other than &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;toString()&lt;/code&gt;. Please consult the &lt;a href=&quot;java-interop#object-methods&quot;&gt;Java interoperability&lt;/a&gt; section for more details.</source>
          <target state="translated">注： &lt;code&gt;Any&lt;/code&gt; は &lt;code&gt;java.lang.Object&lt;/code&gt; ではありません。特に、 &lt;code&gt;equals()&lt;/code&gt; 、 &lt;code&gt;hashCode()&lt;/code&gt; 、および &lt;code&gt;toString()&lt;/code&gt; 以外のメンバーはありません。詳細については、&lt;a href=&quot;java-interop#object-methods&quot;&gt;Javaの相互運用性の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7cea38b31131e5f3bc473b1806a7dadc1df3f76c" translate="yes" xml:space="preserve">
          <source>Note: Before 1.3.40, both test and product executables were represented by the same binary type. Thus to access the default test binary created by the plugin, the following line was used:</source>
          <target state="translated">注意:1.3.40以前では、テスト実行ファイルと製品実行ファイルの両方が同じバイナリタイプで表現されていました。そのため、プラグインによって作成されたデフォルトのテストバイナリにアクセスするには、以下の行を使用していました。</target>
        </trans-unit>
        <trans-unit id="fb3a30630df8eec859177fc75c5dd700ee60baec" translate="yes" xml:space="preserve">
          <source>Note: For Spring you can use the &lt;code&gt;kotlin-spring&lt;/code&gt; compiler plugin (&lt;a href=&quot;compiler-plugins#spring-support&quot;&gt;see below&lt;/a&gt;).</source>
          <target state="translated">注：Springの場合、 &lt;code&gt;kotlin-spring&lt;/code&gt; コンパイラプラグインを使用できます（&lt;a href=&quot;compiler-plugins#spring-support&quot;&gt;以下を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d6a0dc39a4a138257b96c621b751cc052081b76a" translate="yes" xml:space="preserve">
          <source>Note: This above code will work properly only on JDK7+ that supports &lt;code&gt;suppressed&lt;/code&gt; exceptions</source>
          <target state="translated">注：この上記のコードは、 &lt;code&gt;suppressed&lt;/code&gt; 例外をサポートする JDK7 +でのみ正しく動作します</target>
        </trans-unit>
        <trans-unit id="484cdded81040d7cac731a5df3e0b2162661d2db" translate="yes" xml:space="preserve">
          <source>Note: creating a source set does not link it to any target. Some source sets are &lt;a href=&quot;#default-project-layout&quot;&gt;predefined&lt;/a&gt; and thus compiled by default. However, custom source sets always need to be explicitly directed to the compilations. See: &lt;a href=&quot;#connecting-source-sets&quot;&gt;Connecting source sets&lt;/a&gt;.</source>
          <target state="translated">注：ソースセットを作成しても、ターゲットにリンクされません。一部のソースセットは&lt;a href=&quot;#default-project-layout&quot;&gt;事前定義され&lt;/a&gt;ているため、デフォルトでコンパイルされます。ただし、カスタムソースセットは常に明示的にコンパイルする必要があります。参照：&lt;a href=&quot;#connecting-source-sets&quot;&gt;ソースセットの接続&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d3cb30c99fb08c5217d1cecd77b25e0a37cf168" translate="yes" xml:space="preserve">
          <source>Note: due to the current technical limitations, the IDE does not correctly recognize these annotations on type arguments in compiled Java libraries that are used as dependencies.</source>
          <target state="translated">注意:現在の技術的な制限のため、IDE は依存関係として使用されるコンパイル済みの Java ライブラリの型引数のこれらのアノテーションを正しく認識しません。</target>
        </trans-unit>
        <trans-unit id="43526e690a06b94dffa5d82ef9ea46b38220defe" translate="yes" xml:space="preserve">
          <source>Note: runtime lookup can be forced even when the class is referenced statically from Objective-C source code by adding &lt;code&gt;__attribute__((objc_runtime_visible))&lt;/code&gt; to its &lt;code&gt;@interface&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;__attribute__((objc_runtime_visible))&lt;/code&gt; を &lt;code&gt;@interface&lt;/code&gt; に追加することにより、クラスがObjective-Cソースコードから静的に参照されている場合でも、ランタイムルックアップを強制できます。</target>
        </trans-unit>
        <trans-unit id="961c619d9fb3964975b4b9e69245c681552524a7" translate="yes" xml:space="preserve">
          <source>Note: static and shared libraries has suffixes &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt; respectively, e.g. &lt;code&gt;fooDebugStatic&lt;/code&gt; or &lt;code&gt;barReleaseShared&lt;/code&gt;</source>
          <target state="translated">注：静的ライブラリと共有ライブラリには、それぞれ &lt;code&gt;static&lt;/code&gt; と &lt;code&gt;shared&lt;/code&gt; サフィックスがあります。たとえば、 &lt;code&gt;fooDebugStatic&lt;/code&gt; または &lt;code&gt;barReleaseShared&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ba0ca9c0ff727e2f159f9a318e2b4838c970baa" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;lib&lt;/code&gt; directory which contains &lt;code&gt;kotlin.js&lt;/code&gt; and other library files is only created in IntelliJ IDEA-based projects and is controlled by the &lt;em&gt;Copy library runtime files&lt;/em&gt; flag in the Kotlin &lt;a href=&quot;https://www.jetbrains.com/help/idea/facets.html&quot;&gt;facet settings&lt;/a&gt;. In a Maven or Gradle build (including multiplatform projects), no library files are copied by default to the compilation output directory. See the corresponding tutorials for the instructions on how to achieve the same with those build systems.</source>
          <target state="translated">注： &lt;code&gt;kotlin.js&lt;/code&gt; およびその他のライブラリファイルを含む &lt;code&gt;lib&lt;/code&gt; ディレクトリは、IntelliJ IDEAベースのプロジェクトでのみ作成され、Kotlin &lt;a href=&quot;https://www.jetbrains.com/help/idea/facets.html&quot;&gt;ファセット設定の&lt;/a&gt;&lt;em&gt;ライブラリランタイムファイル&lt;/em&gt;の&lt;em&gt;コピー&lt;/em&gt;フラグによって制御されます。 MavenまたはGradleビルド（マルチプラットフォームプロジェクトを含む）では、ライブラリファイルはデフォルトでコンパイル出力ディレクトリにコピーされません。これらのビルドシステムで同じことを行う方法については、対応するチュートリアルを参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7a0e64e270b153ff90968e1ff6456ea22567f491" translate="yes" xml:space="preserve">
          <source>Note: the built-in JSR-305 annotations &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt;&lt;code&gt;@Nonnull&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nullable.html&quot;&gt;&lt;code&gt;@Nullable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/CheckForNull.html&quot;&gt;&lt;code&gt;@CheckForNull&lt;/code&gt;&lt;/a&gt; are always enabled and affect the types of the annotated declarations in Kotlin, regardless of compiler configuration with the &lt;code&gt;-Xjsr305&lt;/code&gt; flag.</source>
          <target state="translated">注：組み込みのJSR-305アノテーション&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt; &lt;code&gt;@Nonnull&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nullable.html&quot;&gt; &lt;code&gt;@Nullable&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/CheckForNull.html&quot;&gt; &lt;code&gt;@CheckForNull&lt;/code&gt; &lt;/a&gt;は常に有効であり、 &lt;code&gt;-Xjsr305&lt;/code&gt; フラグを使用したコンパイラー構成に関係なく、Kotlinのアノテーション付き宣言のタイプに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="70ea34d1da722222e140a53cf5465f6882b21617" translate="yes" xml:space="preserve">
          <source>Note: the migration status of a nullability annotation is not inherited by its type qualifier nicknames but is applied to its usages in default type qualifiers.</source>
          <target state="translated">注意:nullabilityアノテーションの移行ステータスは、その型修飾子のニックネームによって継承されるのではなく、デフォルトの型修飾子での使用に適用されます。</target>
        </trans-unit>
        <trans-unit id="c0edc7da32b33f24605529da7af1e0f20a415a52" translate="yes" xml:space="preserve">
          <source>Note: the static members of these Java types are not directly accessible on the &lt;a href=&quot;object-declarations#companion-objects&quot;&gt;companion objects&lt;/a&gt; of the Kotlin types. To call them, use the full qualified names of the Java types, e.g. &lt;code&gt;java.lang.Integer.toHexString(foo)&lt;/code&gt;.</source>
          <target state="translated">注：これらのJava型の静的メンバーは、Kotlin型の&lt;a href=&quot;object-declarations#companion-objects&quot;&gt;コンパニオンオブジェクト&lt;/a&gt;では直接アクセスできません。それらを呼び出すには、Java型の完全修飾名を使用し &lt;code&gt;java.lang.Integer.toHexString(foo)&lt;/code&gt; 例：java.lang.Integer.toHexString（foo））。</target>
        </trans-unit>
        <trans-unit id="58d630dc0f3f2c164372b5befca4a458dbf430dc" translate="yes" xml:space="preserve">
          <source>Note: the types in this example only take place with the strict mode enabled, otherwise, the platform types remain. See the &lt;a href=&quot;#undermigration-annotation-since-1160&quot;&gt;&lt;code&gt;@UnderMigration&lt;/code&gt; annotation&lt;/a&gt; and &lt;a href=&quot;#compiler-configuration&quot;&gt;Compiler configuration&lt;/a&gt; sections.</source>
          <target state="translated">注：この例のタイプは、strictモードが有効になっている場合にのみ発生します。それ以外の場合、プラットフォームタイプは残ります。&lt;a href=&quot;#undermigration-annotation-since-1160&quot;&gt; &lt;code&gt;@UnderMigration&lt;/code&gt; アノテーション&lt;/a&gt;と&lt;a href=&quot;#compiler-configuration&quot;&gt;コンパイラ設定&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1897db2fc3536b91b9cf29ef737cb27b1a12735f" translate="yes" xml:space="preserve">
          <source>Note: this annotation is experimental, see &lt;a href=&quot;../-experimental-multiplatform/index&quot;&gt;ExperimentalMultiplatform&lt;/a&gt; on how to opt-in for it.</source>
          <target state="translated">注：このアノテーションは実験的なものです。オプトインする方法については、&lt;a href=&quot;../-experimental-multiplatform/index&quot;&gt;ExperimentalMultiplatform&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="0b4255d1b07a5ecec5778c495ae7e465e074b5b4" translate="yes" xml:space="preserve">
          <source>Note: this annotation is experimental, see &lt;a href=&quot;../../kotlin.experimental/-experimental-type-inference/index&quot;&gt;ExperimentalTypeInference&lt;/a&gt; on how to opt-in for it.</source>
          <target state="translated">注：このアノテーションは実験的なものです。オプトインする方法については、&lt;a href=&quot;../../kotlin.experimental/-experimental-type-inference/index&quot;&gt;ExperimentalTypeInference&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="357bf8828e4f466867f5aa8f9b5bb6f1a07b487b" translate="yes" xml:space="preserve">
          <source>Note: to use a visible top-level declaration from another package, you should still &lt;a href=&quot;packages#imports&quot;&gt;import&lt;/a&gt; it.</source>
          <target state="translated">注：別のパッケージから可視のトップレベル宣言を使用するには、それを&lt;a href=&quot;packages#imports&quot;&gt;インポート&lt;/a&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="4f0d56c46129caef4c0e06f3c8334481a847bd34" translate="yes" xml:space="preserve">
          <source>Note: unlike Java, arrays in Kotlin are invariant. This means that Kotlin does not let us assign an &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; to an &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;, which prevents a possible runtime failure (but you can use &lt;code&gt;Array&amp;lt;out Any&amp;gt;&lt;/code&gt;, see &lt;a href=&quot;generics#type-projections&quot;&gt;Type Projections&lt;/a&gt;).</source>
          <target state="translated">注：Javaとは異なり、Kotlinの配列は不変です。つまり、Kotlinでは &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; を &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; に割り当てることができないため、実行時の失敗を防ぐことができます（ただし、 &lt;code&gt;Array&amp;lt;out Any&amp;gt;&lt;/code&gt; 使用できます。&lt;a href=&quot;generics#type-projections&quot;&gt;型の射影を&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="4481948392a8846400c954e77f58d76cdaa73963" translate="yes" xml:space="preserve">
          <source>Nothing</source>
          <target state="translated">Nothing</target>
        </trans-unit>
        <trans-unit id="79090fccdb94d09e1c560c62dc8ff6d888bc7489" translate="yes" xml:space="preserve">
          <source>Nothing has no instances. You can use Nothing to represent &quot;a value that never exists&quot;: for example, if a function has the return type of Nothing, it means that it never returns (always throws an exception).</source>
          <target state="translated">Nothingにはインスタンスがありません。Nothingを使って「存在しない値」を表現することができます:例えば、関数がNothingのreturn型を持っている場合、それは決して返さない(常に例外を投げる)ことを意味します。</target>
        </trans-unit>
        <trans-unit id="a531e5857d96a6fe172e33a54636fa2c5e7837a4" translate="yes" xml:space="preserve">
          <source>Notice that the implementation on &lt;em&gt;every&lt;/em&gt; platform can encode byte arrays to a string. If we want we can provide a more efficient implementation for this method, for example, let's specialize it on the JVM:</source>
          <target state="translated">&lt;em&gt;すべての&lt;/em&gt;プラットフォームの実装がバイト配列を文字列にエンコードできることに注意してください。たとえば、このメソッドのより効率的な実装を提供したい場合は、JVMでそれを特化しましょう。</target>
        </trans-unit>
        <trans-unit id="ac46cd6bf2ec7e9d90f5e3709af6c843ffd8a6af" translate="yes" xml:space="preserve">
          <source>NotificationAction</source>
          <target state="translated">NotificationAction</target>
        </trans-unit>
        <trans-unit id="f541255e0e0d091ef01be7d639674756d30f41bc" translate="yes" xml:space="preserve">
          <source>NotificationDirection</source>
          <target state="translated">NotificationDirection</target>
        </trans-unit>
        <trans-unit id="596349e0f504aa4e6ec1f31115a62914042449e8" translate="yes" xml:space="preserve">
          <source>NotificationEventInit</source>
          <target state="translated">NotificationEventInit</target>
        </trans-unit>
        <trans-unit id="2a1a4c24d8e083b47b4ff678b4cd0997219c060e" translate="yes" xml:space="preserve">
          <source>NotificationOptions</source>
          <target state="translated">NotificationOptions</target>
        </trans-unit>
        <trans-unit id="93c639dc73db96edc66ede2299276f652971fac6" translate="yes" xml:space="preserve">
          <source>NotificationPermission</source>
          <target state="translated">NotificationPermission</target>
        </trans-unit>
        <trans-unit id="94e838061a82a5ce0b113db3557cf9f9730866ea" translate="yes" xml:space="preserve">
          <source>Now check it with the command &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt; and you should see a successful build. That's it, our library is now successfully published and any Kotlin project can depend on it, whether it is another common library, JVM, JS, or Native application.</source>
          <target state="translated">コマンド &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt; で確認すると、正常にビルドされているはずです。これで、ライブラリは正常に公開され、Kotlinプロジェクトは、別の共通ライブラリ、JVM、JS、ネイティブアプリケーションのいずれであっても、それに依存できます。</target>
        </trans-unit>
        <trans-unit id="4c6fdd021c50c395969a31c37923d25d734b30ed" translate="yes" xml:space="preserve">
          <source>Now compile the program linking with the library we have just created:</source>
          <target state="translated">では、先ほど作成したライブラリとリンクするプログラムをコンパイルしてみましょう。</target>
        </trans-unit>
        <trans-unit id="7fd938355a267ec17f411c8d98d04708e4180da6" translate="yes" xml:space="preserve">
          <source>Now it is time to provide an &lt;code&gt;actual&lt;/code&gt; implementation of &lt;code&gt;Base64Factory&lt;/code&gt; for every platform.</source>
          <target state="translated">すべてのプラットフォームに &lt;code&gt;Base64Factory&lt;/code&gt; の &lt;code&gt;actual&lt;/code&gt; 実装を提供する時が来ました。</target>
        </trans-unit>
        <trans-unit id="ef159996af2b9215562c38a942c2f8905195f55d" translate="yes" xml:space="preserve">
          <source>Now it is time to refresh the Gradle project again in Android Studio. Click &lt;em&gt;Sync Now&lt;/em&gt; on the yellow stripe or use the &lt;em&gt;Gradle&lt;/em&gt; tool window and click the &lt;code&gt;Refresh&lt;/code&gt; action in the context menu on the root Gradle project. The &lt;code&gt;:SharedCode&lt;/code&gt; project should be recognized by the IDE now.</source>
          <target state="translated">次に、Android StudioでGradleプロジェクトを再度更新します。黄色のストライプで[ &lt;em&gt;今すぐ同期&lt;/em&gt; ]をクリックするか、&lt;em&gt;Gradle&lt;/em&gt;ツールウィンドウを使用して、ルートGradleプロジェクトのコンテキストメニューで[ &lt;code&gt;Refresh&lt;/code&gt; ] アクションをクリックします。 &lt;code&gt;:SharedCode&lt;/code&gt; のプロジェクトは現在、IDEによって認識されるべきです。</target>
        </trans-unit>
        <trans-unit id="9eb8c10ce256de217fd7408c5d0fa2be1c81f16b" translate="yes" xml:space="preserve">
          <source>Now it is time to see how to use &lt;code&gt;cValue&lt;/code&gt; and pass by-value parameters:</source>
          <target state="translated">次に、 &lt;code&gt;cValue&lt;/code&gt; を使用して値渡しパラメーターを渡す方法を確認します。</target>
        </trans-unit>
        <trans-unit id="f62049422e34abdef8fb40e736ddaa894413b1d4" translate="yes" xml:space="preserve">
          <source>Now it prints something sensible: &lt;code&gt;1784293664&lt;/code&gt;, because all coroutines complete.</source>
          <target state="translated">すべてのコルーチンが完了しているため、今ではそれは賢明な何かを出力します： &lt;code&gt;1784293664&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c3c5f110103dcae6c7a1c5048ae4801a489102c" translate="yes" xml:space="preserve">
          <source>Now it's time to add the task description. Click the &lt;strong&gt;Edit&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel to switch to the editing mode:</source>
          <target state="translated">次に、タスクの説明を追加します。&lt;strong&gt;タスクの説明&lt;/strong&gt;パネルの上部にある&lt;strong&gt;編集&lt;/strong&gt;アイコンをクリックして、編集モードに切り替えます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f21a6f3ded0ce3ad0d37be7f610a6bcde3237278" translate="yes" xml:space="preserve">
          <source>Now let us launch five processors and let them work for almost a second. See what happens:</source>
          <target state="translated">では、5つのプロセッサを起動して、ほぼ1秒間動作させてみましょう。何が起こるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="3a85707fc6ed973d97aee272da025f72a2062245" translate="yes" xml:space="preserve">
          <source>Now let's check out the contents of the library:</source>
          <target state="translated">では、図書館の中身をチェックしてみましょう。</target>
        </trans-unit>
        <trans-unit id="06f1756ff063bdd720deb57bebdc098cbb1f3682" translate="yes" xml:space="preserve">
          <source>Now let's open the project in IntelliJ IDEA. For that we click on the File | Open&amp;hellip; and select our &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;code&gt;build.gradle&lt;/code&gt; project file.</source>
          <target state="translated">次に、IntelliJ IDEAでプロジェクトを開きます。そのために、ファイルをクリックします。開いて&amp;hellip; &lt;code&gt;build.gradle.kts&lt;/code&gt; &lt;code&gt;build.gradle&lt;/code&gt; プロジェクトファイルを選択します。</target>
        </trans-unit>
        <trans-unit id="62863dbb3bcee301c0e208573e6e92993330cf1e" translate="yes" xml:space="preserve">
          <source>Now let's see how it works in practice:</source>
          <target state="translated">では、実際にどのような効果があるのか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="316006c9bf1b6b4efc24b9287e973de18a0cd5b2" translate="yes" xml:space="preserve">
          <source>Now let's write the same with sequences:</source>
          <target state="translated">今度はシーケンスで同じように書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="a94f1a0ca142aa8eb48c8af48afa3350f83b1400" translate="yes" xml:space="preserve">
          <source>Now need to create an empty &lt;code&gt;settings.gradle.kts&lt;/code&gt;&lt;code&gt;settings.gradle&lt;/code&gt; file in the project root directory.</source>
          <target state="translated">次に、プロジェクトのルートディレクトリに空の &lt;code&gt;settings.gradle.kts&lt;/code&gt; &lt;code&gt;settings.gradle&lt;/code&gt; ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c9080cd76ec0143ae2c7fdafc332586543b3c8a" translate="yes" xml:space="preserve">
          <source>Now the application is ready to run. The easiest way is to click the green &lt;strong&gt;Run&lt;/strong&gt; icon in the gutter and select &lt;strong&gt;Run 'AppKt'&lt;/strong&gt;.</source>
          <target state="translated">これで、アプリケーションを実行する準備ができました。最も簡単な方法は、ガターの緑色の&lt;strong&gt;実行&lt;/strong&gt;アイコンをクリックして、&lt;strong&gt;「AppKtを実行」&lt;/strong&gt;を選択することです。</target>
        </trans-unit>
        <trans-unit id="a4dea9f6780cb4b1fb116abe461c884b2fc3e6f5" translate="yes" xml:space="preserve">
          <source>Now the classic &lt;code&gt;maven-publish&lt;/code&gt; Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;plugin&lt;/a&gt; can be used. Don't forget to specify the group and version of your library along with the plugin in &lt;code&gt;build.gradle&lt;/code&gt;:</source>
          <target state="translated">これで、古典的な &lt;code&gt;maven-publish&lt;/code&gt; Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;プラグイン&lt;/a&gt;を使用できます。 &lt;code&gt;build.gradle&lt;/code&gt; でプラグインとともにライブラリのグループとバージョンを指定することを忘れないでください：</target>
        </trans-unit>
        <trans-unit id="c36da2f63965003675ecd4f90e9e76c88deea8db" translate="yes" xml:space="preserve">
          <source>Now the main function awaits for the first of them to complete and counts the number of deferred values that are still active. Note that we've used here the fact that &lt;code&gt;select&lt;/code&gt; expression is a Kotlin DSL, so we can provide clauses for it using an arbitrary code. In this case we iterate over a list of deferred values to provide &lt;code&gt;onAwait&lt;/code&gt; clause for each deferred value.</source>
          <target state="translated">これで、メイン関数は最初の関数が完了するのを待って、まだアクティブな遅延値の数をカウントします。ここでは、 &lt;code&gt;select&lt;/code&gt; 式がKotlin DSLであるという事実を使用しているため、任意のコードを使用してその句を提供できることに注意してください。この場合、遅延値のリストを反復処理して、各遅延値に &lt;code&gt;onAwait&lt;/code&gt; 句を提供します。</target>
        </trans-unit>
        <trans-unit id="fafa6b7e1e97bd8d0310f07c3ffc916e9bc52c4e" translate="yes" xml:space="preserve">
          <source>Now the result is still the same, but the code of the main coroutine is not tied to the duration of the background job in any way. Much better.</source>
          <target state="translated">これで結果は変わりませんが、メインのコルーチンのコードはバックグラウンドジョブの期間とは関係ありません。だいぶ良くなりました。</target>
        </trans-unit>
        <trans-unit id="68e76914b57b2c484d2fcdeac9dacb63ea15843e" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing that, we'll examine how C functions are mapped into Kotlin/Native declarations.</source>
          <target state="translated">これ&lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;で、IntelliJ IDEAでプロジェクト&lt;/a&gt;を開き、サンプルプロジェクトを修正する方法を確認する準備ができました。その際、C関数がKotlin / Native宣言にどのようにマップされるかを調べます。</target>
        </trans-unit>
        <trans-unit id="0cc37329b152a7d48d832f02d3782a3273c9a922" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing that, we'll examine how C primitive types are mapped into Kotlin/Native.</source>
          <target state="translated">これ&lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;で、IntelliJ IDEAでプロジェクト&lt;/a&gt;を開き、サンプルプロジェクトを修正する方法を確認する準備ができました。その際、Cプリミティブ型がKotlin / Nativeにどのようにマップされるかを調べます。</target>
        </trans-unit>
        <trans-unit id="280651c06a20fde5cc37b475316ca2430a0a1d40" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing this, we'll examine how C functions are mapped into Kotlin/Native declarations.</source>
          <target state="translated">これ&lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;で、IntelliJ IDEAでプロジェクト&lt;/a&gt;を開き、サンプルプロジェクトを修正する方法を確認する準備ができました。これを行いながら、C関数がKotlin / Native宣言にどのようにマップされるかを調べます。</target>
        </trans-unit>
        <trans-unit id="8514872c5f66d71d839c86ef7b8ede3a7f8b037f" translate="yes" xml:space="preserve">
          <source>Now we are ready to compile our &lt;code&gt;main.c&lt;/code&gt; into an executable. We include the generated &lt;code&gt;libnative.lib&lt;/code&gt; into the build command and start:</source>
          <target state="translated">これで、 &lt;code&gt;main.c&lt;/code&gt; を実行可能ファイルにコンパイルする準備ができました。生成された &lt;code&gt;libnative.lib&lt;/code&gt; をビルドコマンドに含めて開始します。</target>
        </trans-unit>
        <trans-unit id="bd615a740472938a27e61f3e5ad1d8c088398a62" translate="yes" xml:space="preserve">
          <source>Now we build our pipeline by starting a stream of numbers from 2, taking a prime number from the current channel, and launching new pipeline stage for each prime number found:</source>
          <target state="translated">現在のチャンネルから素数を取り出し、素数が見つかるたびに新しいパイプラインを起動することで、パイプラインを構築します。</target>
        </trans-unit>
        <trans-unit id="b09d5a8ac24e62ac515e5408d015b6449705f5ff" translate="yes" xml:space="preserve">
          <source>Now we have implementations on all the platforms and it is time to move to testing of our library.</source>
          <target state="translated">これですべてのプラットフォームでの実装が完了したので、ライブラリのテストに移る時が来ました。</target>
        </trans-unit>
        <trans-unit id="6fc43d604b99f2dfefc014ae5ff71405690d454a" translate="yes" xml:space="preserve">
          <source>Now we have learned how to use C declarations in our code, we are ready to try it out on a real example. Let's fix our code and see how it runs by calling the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;in the IDE&lt;/a&gt; or by using the following console command:</source>
          <target state="translated">コードでC宣言を使用する方法を学習したので、実際の例でそれを試す準備ができました。&lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;IDEで&lt;/a&gt; &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradleタスクを呼び出すか、次のコンソールコマンドを使用して、コードを修正し、どのように実行されるかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="dcdaca8bf7117a3b069ebd97d9d500bbee893084" translate="yes" xml:space="preserve">
          <source>Now we have our library and Kotlin stubs, we can consume them from our application. To keep things simple, in this tutorial we're going to convert one of the simplest &lt;code&gt;libcurl&lt;/code&gt; examples over to Kotlin.</source>
          <target state="translated">これでライブラリとKotlinスタブができたので、アプリケーションからそれらを使用できます。簡単にするために、このチュートリアルでは、最も単純な &lt;code&gt;libcurl&lt;/code&gt; の例の1つをKotlin に変換します。</target>
        </trans-unit>
        <trans-unit id="56a410308bdaa182b925a6dff7fc3ba66711f037" translate="yes" xml:space="preserve">
          <source>Now we have the &lt;code&gt;TextView&lt;/code&gt; that will show us the text created by the shared code function &lt;code&gt;createApplicationScreenMessage()&lt;/code&gt;. It shows &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt;. Let's see how it works.</source>
          <target state="translated">これで、共有コード関数 &lt;code&gt;createApplicationScreenMessage()&lt;/code&gt; によって作成されたテキストを表示する &lt;code&gt;TextView&lt;/code&gt; ができました。それは示し &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; 。それがどのように機能するか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ff70a609caee6a29932d7e21240cf4b92c28370c" translate="yes" xml:space="preserve">
          <source>Now we need to define the classes and interfaces we want to implement. Create the file &lt;code&gt;Base64.kt&lt;/code&gt; in the &lt;code&gt;commonMain/kotlin/jetbrains/base64&lt;/code&gt; folder. Core primitive will be the &lt;code&gt;Base64Encoder&lt;/code&gt; interface which knows how to convert bytes to bytes in &lt;code&gt;Base64&lt;/code&gt; format:</source>
          <target state="translated">次に、実装したいクラスとインターフェースを定義する必要があります。ファイル作成 &lt;code&gt;Base64.kt&lt;/code&gt; で &lt;code&gt;commonMain/kotlin/jetbrains/base64&lt;/code&gt; フォルダを。コアプリミティブは、バイトを &lt;code&gt;Base64&lt;/code&gt; 形式のバイトに変換する方法を知っている &lt;code&gt;Base64Encoder&lt;/code&gt; インターフェイスです。</target>
        </trans-unit>
        <trans-unit id="6ca6511b451c4bb08b2161576b6d00b309bd636f" translate="yes" xml:space="preserve">
          <source>Now we need to explain to Xcode, where to look for frameworks. We need to add the &lt;em&gt;relative&lt;/em&gt; path &lt;code&gt;$(SRCROOT)/../../SharedCode/build/xcode-frameworks&lt;/code&gt; into the &lt;em&gt;Search Paths | Framework Search Paths&lt;/em&gt; section. Open the &lt;em&gt;Build Settings&lt;/em&gt; tab again, pick the &lt;em&gt;All&lt;/em&gt; sub-tab below, and type the &lt;em&gt;Framework Search Paths&lt;/em&gt; into the search field to easily find the option. Xcode will then show the substituted path in the UI for it.</source>
          <target state="translated">次に、フレームワークを探す場所をXcodeに説明する必要があります。&lt;em&gt;相対&lt;/em&gt;パス &lt;code&gt;$(SRCROOT)/../../SharedCode/build/xcode-frameworks&lt;/code&gt; を&lt;em&gt;検索パス&lt;/em&gt;に追加する必要があります&lt;em&gt;| &lt;/em&gt;&lt;em&gt;フレームワーク検索パス&lt;/em&gt;セクション。[ &lt;em&gt;ビルド設定&lt;/em&gt; ]タブを再度開き、下の[ &lt;em&gt;すべて&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;サブタブを選択し、検索フィールドに&lt;em&gt;フレームワーク検索パス&lt;/em&gt;を入力して、オプションを簡単に見つけます。Xcodeは、UIに代替パスを表示します。</target>
        </trans-unit>
        <trans-unit id="bbdba5d4735168e3785e68f7843040b781bf6309" translate="yes" xml:space="preserve">
          <source>Now when we call &lt;code&gt;workload()&lt;/code&gt; from a coroutine, the compiler knows that it may suspend and will prepare accordingly:</source>
          <target state="translated">これで、コルーチンからworkload &lt;code&gt;workload()&lt;/code&gt; を呼び出すと、コンパイラーはそれが一時停止する可能性があることを認識し、それに応じて準備します。</target>
        </trans-unit>
        <trans-unit id="1d24cd9e38cbefb079dd50a49d7d7f03311c7bf3" translate="yes" xml:space="preserve">
          <source>Now you are ready to create a new Kotlin project.</source>
          <target state="translated">これで新しいKotlinプロジェクトを作成する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="290dbe288d985515eeabffa880759f9b6702dbd0" translate="yes" xml:space="preserve">
          <source>Now you can declare a dependency on a Kotlin/Native library in the traditional &lt;code&gt;group:artifact:version&lt;/code&gt; notation:</source>
          <target state="translated">これで、従来の &lt;code&gt;group:artifact:version&lt;/code&gt; 表記でKotlin / Nativeライブラリへの依存関係を宣言できます。</target>
        </trans-unit>
        <trans-unit id="21f7ffde9424834101062b3a3b4388e5becd0386" translate="yes" xml:space="preserve">
          <source>Now you can publish the artifacts with the standard Gradle &lt;code&gt;publish&lt;/code&gt; task:</source>
          <target state="translated">これで、標準のGradle &lt;code&gt;publish&lt;/code&gt; タスクでアーティファクトを公開できます。</target>
        </trans-unit>
        <trans-unit id="1f0e0a97af9c78bc7052cbc7558b0c5721564a3e" translate="yes" xml:space="preserve">
          <source>Now you can use this class from JavaScript in the following way:</source>
          <target state="translated">これでこのクラスをJavaScriptから以下のように使うことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="d5043215278e17616ae1356fe9712ab2361ec4d2" translate="yes" xml:space="preserve">
          <source>Now you have the new project created with the following folder structure:</source>
          <target state="translated">これで、以下のようなフォルダ構造で新しいプロジェクトが作成されました。</target>
        </trans-unit>
        <trans-unit id="3e24bac49840414b90995c5cbd33ee7b86539a1d" translate="yes" xml:space="preserve">
          <source>Now you're ready to start learning. Read the first task description and the exercise code. You will find a placeholder in the exercise code which you need to complete to solve the task:</source>
          <target state="translated">これで学習を始める準備ができました。最初のタスクの説明と練習問題のコードを読んでください。演習コードの中には、タスクを解くために必要なプレースホルダがあります。</target>
        </trans-unit>
        <trans-unit id="5cb44051b734fae4af55ffe5224978dec7c87251" translate="yes" xml:space="preserve">
          <source>Now, &lt;code&gt;callStatic()&lt;/code&gt; is static in Java, while &lt;code&gt;callNonStatic()&lt;/code&gt; is not:</source>
          <target state="translated">現在、 &lt;code&gt;callStatic()&lt;/code&gt; はJavaでは静的ですが、 &lt;code&gt;callNonStatic()&lt;/code&gt; はそうではありません。</target>
        </trans-unit>
        <trans-unit id="a13d0fb128d24db7d3bb5f2f36926ba1c128f4f2" translate="yes" xml:space="preserve">
          <source>Now, &lt;em&gt;this&lt;/em&gt; can be omitted, as usual, and we get something that looks very much like a builder already:</source>
          <target state="translated">これで、通常どおり&lt;em&gt;これ&lt;/em&gt;を省略でき、すでにビルダーに非常によく似たものが得られます。</target>
        </trans-unit>
        <trans-unit id="f0a82c0a40d22072db820930c190224b73ea978f" translate="yes" xml:space="preserve">
          <source>Now, all is left is to write the main function that reads the input and implements the rest of the algorithm that the problem statement asks for &amp;mdash; to compute the number of different integers that are produced while repeatedly applying function &lt;code&gt;f&lt;/code&gt; to the initial number &lt;code&gt;n&lt;/code&gt; that is given in the standard input.</source>
          <target state="translated">繰り返し機能を付与しながら製造されている異なる整数の数を計算するために-今、残っているすべては、問題文がを要求することを、アルゴリズムの残りの入力や道具を読み込み、メイン関数を記述することである &lt;code&gt;f&lt;/code&gt; 初期値に &lt;code&gt;n&lt;/code&gt; 個あることを標準入力で与えられます。</target>
        </trans-unit>
        <trans-unit id="fb6047e18f4bc8d11bc30e4fd65fb8d503da1662" translate="yes" xml:space="preserve">
          <source>Now, if you call a method or access a property on &lt;code&gt;a&lt;/code&gt;, it's guaranteed not to cause an NPE, so you can safely say:</source>
          <target state="translated">あなたがメソッドを呼び出すかのプロパティにアクセスする場合さて、あなたは安全に言うことができるので、NPEが発生しないことが保証です。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20f3d5cd33eec60a8a8002b141a9b28a6b9b7682" translate="yes" xml:space="preserve">
          <source>Now, if you do:</source>
          <target state="translated">さて、そうすると</target>
        </trans-unit>
        <trans-unit id="f71ccd18f05da02b03c8a2c32b3e5cdf31e2366b" translate="yes" xml:space="preserve">
          <source>Now, if you open DevTools, you should see both JavaScript and Kotlin files in Sources tab, as shown in the picture below.</source>
          <target state="translated">さて、DevToolsを開くと、下の図のようにSourcesタブにJavaScriptとKotlinの両方のファイルが表示されているはずです。</target>
        </trans-unit>
        <trans-unit id="a83d9e77f9456d18d8a05fd327f1e236de7060bd" translate="yes" xml:space="preserve">
          <source>Now, if you rebuild the project, you should see both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.js.map&lt;/code&gt; files generated.</source>
          <target state="translated">これで、プロジェクトを再ビルドすると、生成された &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.js.map&lt;/code&gt; ファイルの両方が表示されます。</target>
        </trans-unit>
        <trans-unit id="76f6cc5aafdabd68e55d4250b74b32cd977c308a" translate="yes" xml:space="preserve">
          <source>Now, it returns only from the lambda expression. Oftentimes it is more convenient to use implicit labels: such a label has the same name as the function to which the lambda is passed.</source>
          <target state="translated">これで、ラムダ式からのみ返されるようになりました。暗黙のラベルを使った方が便利なことがよくあります:このようなラベルはラムダが渡される関数と同じ名前を持ちます。</target>
        </trans-unit>
        <trans-unit id="94f815aeffcc5ac17241b513b6e20a9f1cdaea31" translate="yes" xml:space="preserve">
          <source>Now, let us see what happens if we launch a couple of coroutines sending strings (in this example we launch them in the context of the main thread as main coroutine's children):</source>
          <target state="translated">さて、文字列を送信するいくつかのコルーチンを起動するとどうなるか見てみましょう(この例では、メインスレッドのコンテキストでメインコルーチンの子として起動しています)。</target>
        </trans-unit>
        <trans-unit id="71d025254fd20926043d356611276f9c88403338" translate="yes" xml:space="preserve">
          <source>Now, let's make sure that coroutines are really cheaper than threads. How about starting a million of them? Let's try starting a million threads first:</source>
          <target state="translated">さて、スレッドよりもコアチンの方が本当に安いのか確認してみましょう。100万個のスレッドを立ち上げてみるのはどうでしょうか?まずは100万個のスレッドを起動してみましょう。</target>
        </trans-unit>
        <trans-unit id="16dd7a2ec4c182b0f69f31fe9543eb28189fc230" translate="yes" xml:space="preserve">
          <source>Now, let's recall why we can say something like this in the code:</source>
          <target state="translated">では、なぜこのようなことをコードで言えるのかを思い出してみましょう。</target>
        </trans-unit>
        <trans-unit id="544d487017d11ee4001cb80b112987fd1c122959" translate="yes" xml:space="preserve">
          <source>Now, let's say we want to extract our &lt;em&gt;workload&lt;/em&gt; (which is &quot;wait 1 second and return a number&quot;) into a separate function:</source>
          <target state="translated">ここで、&lt;em&gt;ワークロード&lt;/em&gt;（「1秒待って数値を返す」）を別の関数に抽出するとします。</target>
        </trans-unit>
        <trans-unit id="c750281f584acadba2af58cffcc8c1305b106c0d" translate="yes" xml:space="preserve">
          <source>Now, the type parameter of &lt;code&gt;to&lt;/code&gt; must be a supertype of that of &lt;code&gt;from&lt;/code&gt;. This time, we're losing the ability to call &lt;code&gt;get()&lt;/code&gt; on &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;to&lt;/code&gt; の型パラメーターは、 &lt;code&gt;from&lt;/code&gt; のスーパータイプでなければなりません。今回は、呼び出す機能失っている &lt;code&gt;get()&lt;/code&gt; は上 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="841ea7e84248eb13447bb49e5c5c6dbc24123f33" translate="yes" xml:space="preserve">
          <source>Now, we can launch coroutines in the scope of this &lt;code&gt;Activity&lt;/code&gt; without having to explicitly specify their context. For the demo, we launch ten coroutines that delay for a different time:</source>
          <target state="translated">これで、コンテキストを明示的に指定しなくても、この &lt;code&gt;Activity&lt;/code&gt; のスコープでコルーチンを起動できます。デモでは、異なる時間遅延する10個のコルーチンを起動します。</target>
        </trans-unit>
        <trans-unit id="b7b794f9844126d9635b31ec7a7259faff61ea34" translate="yes" xml:space="preserve">
          <source>Now, we can qualify a &lt;em&gt;break&lt;/em&gt; or a &lt;em&gt;continue&lt;/em&gt; with a label:</source>
          <target state="translated">これで、ラベルで&lt;em&gt;中断&lt;/em&gt;または&lt;em&gt;継続&lt;/em&gt;を修飾できます。</target>
        </trans-unit>
        <trans-unit id="4009ace22d0b31f5461708301ff321a7b41e34f1" translate="yes" xml:space="preserve">
          <source>Now, we need to create the implementation file (and missing directories) for Android in the &lt;code&gt;SharedCode/src/androidMain/kotlin/actual.kt&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;SharedCode/src/androidMain/kotlin/actual.kt&lt;/code&gt; にAndroidの実装ファイル（および不足しているディレクトリ）を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc32792e1ffb6994d09d3ccc5850fcde297ab5b1" translate="yes" xml:space="preserve">
          <source>Now, whenever anyone reads &lt;code&gt;p.name&lt;/code&gt;, &lt;code&gt;getValue()&lt;/code&gt; will be invoked with &lt;code&gt;p&lt;/code&gt; as &lt;code&gt;thisRef&lt;/code&gt; and metadata about the &lt;code&gt;name&lt;/code&gt; property as &lt;code&gt;property&lt;/code&gt;. Since &lt;code&gt;thisRef&lt;/code&gt; is a &lt;code&gt;DbModel&lt;/code&gt;, this delegated property can only be used inside &lt;code&gt;DbModel&lt;/code&gt; and its subclasses.</source>
          <target state="translated">さて、誰でも読み込むたび &lt;code&gt;p.name&lt;/code&gt; を、 &lt;code&gt;getValue()&lt;/code&gt; で呼び出される &lt;code&gt;p&lt;/code&gt; として &lt;code&gt;thisRef&lt;/code&gt; とに関するメタデータ &lt;code&gt;name&lt;/code&gt; としてプロパティ &lt;code&gt;property&lt;/code&gt; 。以来 &lt;code&gt;thisRef&lt;/code&gt; がある &lt;code&gt;DbModel&lt;/code&gt; 、この委任プロパティは内部で使用することができる &lt;code&gt;DbModel&lt;/code&gt; とそのサブクラス。</target>
        </trans-unit>
        <trans-unit id="1ddfae4b18596b2854071f83733087767ffb2d01" translate="yes" xml:space="preserve">
          <source>Now, you can do:</source>
          <target state="translated">これで、できるようになりました。</target>
        </trans-unit>
        <trans-unit id="c62d757ce7f75d3f121e4c4fec1867b7958bd009" translate="yes" xml:space="preserve">
          <source>Now, you can no longer say &lt;code&gt;val mv = MotorVehicle(100, 4)&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;val mv = MotorVehicle(100, 4)&lt;/code&gt; と言うことはできなくなりました。</target>
        </trans-unit>
        <trans-unit id="6c97d282b328adc12f3e5a556471451c0554c8b2" translate="yes" xml:space="preserve">
          <source>Now, you can say &lt;code&gt;loadFromDb&amp;lt;Exercise&amp;gt;(&quot;x01234567&quot;)&lt;/code&gt; to load an object from the &lt;code&gt;Exercise&lt;/code&gt; database table.</source>
          <target state="translated">これで、 &lt;code&gt;loadFromDb&amp;lt;Exercise&amp;gt;(&quot;x01234567&quot;)&lt;/code&gt; と言って、 &lt;code&gt;Exercise&lt;/code&gt; データベーステーブルからオブジェクトをロードできます。</target>
        </trans-unit>
        <trans-unit id="93baa80c955acf188a4912f62d9bfabe1e89cde4" translate="yes" xml:space="preserve">
          <source>Now, you can treat a bowl of &lt;code&gt;T&lt;/code&gt; as a producer of any superclass of &lt;code&gt;T&lt;/code&gt;, and as a consumer of any subclass of &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">さて、あなたはのボウル扱うことができる &lt;code&gt;T&lt;/code&gt; を任意のスーパークラスのプロデューサーとして &lt;code&gt;T&lt;/code&gt; 、および任意のサブクラスの消費者としての &lt;code&gt;T&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cb06774e37de315de0f5603f0b4fd0176b0b42a0" translate="yes" xml:space="preserve">
          <source>Now, you may not create a &lt;code&gt;TreeNode&lt;/code&gt; of a type that is not a subclass/implementor of &lt;code&gt;Vehicle&lt;/code&gt;. Inside the class, whenever you've got a value of type &lt;code&gt;T&lt;/code&gt;, you may access all the public members of &lt;code&gt;Vehicle&lt;/code&gt; on it.</source>
          <target state="translated">ここで、 &lt;code&gt;Vehicle&lt;/code&gt; のサブクラス/インプリ &lt;code&gt;TreeNode&lt;/code&gt; ではないタイプのTreeNodeを作成することはできません。クラス内では、 &lt;code&gt;T&lt;/code&gt; 型の値を取得するたびに、そのクラスの &lt;code&gt;Vehicle&lt;/code&gt; のすべてのパブリックメンバーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e66b62de2c45ca7a1dafaa470efed27db40c8abf" translate="yes" xml:space="preserve">
          <source>Null Safety</source>
          <target state="translated">ヌル安全</target>
        </trans-unit>
        <trans-unit id="961437d22902a2f7dfd53365cc313f4a8b919ec9" translate="yes" xml:space="preserve">
          <source>Null references are &lt;a href=&quot;null-safety&quot;&gt;controlled by the type system&lt;/a&gt;.</source>
          <target state="translated">null参照は&lt;a href=&quot;null-safety&quot;&gt;型システムによって制御されます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2b2542f64eaa222fbfda6a1a4f6d0850cf59a88" translate="yes" xml:space="preserve">
          <source>Null safety</source>
          <target state="translated">ヌル安全</target>
        </trans-unit>
        <trans-unit id="39f94d225bc04bec959b32c61b7c0b099f1b3de4" translate="yes" xml:space="preserve">
          <source>Null safety is enforced as usual, so a variable of type &lt;code&gt;ContentKind&lt;/code&gt; can not be null, unlike in Java.</source>
          <target state="translated">nullの安全性は通常どおり適用されるため、Javaとは異なり、 &lt;code&gt;ContentKind&lt;/code&gt; 型の変数をnullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="c768f27b8cd368aac53b3bf7b3466119f4aeaaad" translate="yes" xml:space="preserve">
          <source>Null-Safety and Platform Types</source>
          <target state="translated">ヌルセーフとプラットフォームタイプ</target>
        </trans-unit>
        <trans-unit id="7b2e605360643dd896eff359d1535b4e4db34c3d" translate="yes" xml:space="preserve">
          <source>Null-safety</source>
          <target state="translated">Null-safety</target>
        </trans-unit>
        <trans-unit id="e96a81e5fc6aa1615fc78a379fdad68b748bc26c" translate="yes" xml:space="preserve">
          <source>NullPointerException</source>
          <target state="translated">NullPointerException</target>
        </trans-unit>
        <trans-unit id="7cfd44db910fd8b20253bc74265b31aeaf45384c" translate="yes" xml:space="preserve">
          <source>Nullability</source>
          <target state="translated">Nullability</target>
        </trans-unit>
        <trans-unit id="13c99d5e49300b52aefe21f12764921df1d1f93f" translate="yes" xml:space="preserve">
          <source>Nullability annotations</source>
          <target state="translated">ヌルアビリティーアノテーション</target>
        </trans-unit>
        <trans-unit id="e5e6784edcd14305d294e06ecb03d642a0a57873" translate="yes" xml:space="preserve">
          <source>Nullability assertions on access to Java types annotated with &lt;code&gt;@NotNull&lt;/code&gt;</source>
          <target state="translated">注釈付きJavaタイプへのアクセスにNULL可能アサーション &lt;code&gt;@NotNull&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e5389deab4b42bc503c62cbba549bbb26b00be1" translate="yes" xml:space="preserve">
          <source>Nullable Receiver</source>
          <target state="translated">ヌル可能受信機</target>
        </trans-unit>
        <trans-unit id="ea692fde5fad8fec43d27ab3923928d9c3e4f762" translate="yes" xml:space="preserve">
          <source>Nullable types and Non-Null Types</source>
          <target state="translated">ヌル可能な型と非ヌル型</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="2e1ee95668fd5f69d1925d4acd4d52b859469b82" translate="yes" xml:space="preserve">
          <source>NumberFormatException</source>
          <target state="translated">NumberFormatException</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="b7b3deb2440db7b27508e61ad6b6526ba91d78a1" translate="yes" xml:space="preserve">
          <source>Numbers are compared with the ends of this range according to IEEE-754.</source>
          <target state="translated">数値はIEEE-754に準拠して、この範囲の端と比較しています。</target>
        </trans-unit>
        <trans-unit id="b1c2afbaeee52797fa3a437d9c480e4a05cf0193" translate="yes" xml:space="preserve">
          <source>Numeric types use the traditional numerical order: &lt;code&gt;1&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;; &lt;code&gt;-3.4f&lt;/code&gt; is greater than &lt;code&gt;-5f&lt;/code&gt;, an so on.</source>
          <target state="translated">数値タイプは、従来の数値順序を使用します &lt;code&gt;1&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; より大きいです。 &lt;code&gt;-3.4f&lt;/code&gt; はより大きくなる &lt;code&gt;-5f&lt;/code&gt; ように、。</target>
        </trans-unit>
        <trans-unit id="132a0e722f57154d901e124e4cb8e8bc570f7174" translate="yes" xml:space="preserve">
          <source>Numerous use cases are covered by just the default source sets and don't require custom source sets.</source>
          <target state="translated">多くのユースケースはデフォルトのソースセットだけでカバーされており、カスタムソースセットを必要としません。</target>
        </trans-unit>
        <trans-unit id="f5bd86a2929ff840c45d76159d984c1239906a9d" translate="yes" xml:space="preserve">
          <source>OSGi</source>
          <target state="translated">OSGi</target>
        </trans-unit>
        <trans-unit id="802bfbdcec1e0873ee0e4b3f43f68d3022244543" translate="yes" xml:space="preserve">
          <source>OTHER_LETTER</source>
          <target state="translated">OTHER_LETTER</target>
        </trans-unit>
        <trans-unit id="c526c1a55d3a7d1197fc54064f8aa775a085df54" translate="yes" xml:space="preserve">
          <source>OTHER_NEUTRALS</source>
          <target state="translated">OTHER_NEUTRALS</target>
        </trans-unit>
        <trans-unit id="0528be3a553ee55304545e3df532c16619f9a75f" translate="yes" xml:space="preserve">
          <source>OTHER_NUMBER</source>
          <target state="translated">OTHER_NUMBER</target>
        </trans-unit>
        <trans-unit id="a79f18b5ad7c3bc6ad0e1685c0b9f1d91e9ea75c" translate="yes" xml:space="preserve">
          <source>OTHER_PUNCTUATION</source>
          <target state="translated">OTHER_PUNCTUATION</target>
        </trans-unit>
        <trans-unit id="5dcd7535199ae15a813d866ef04e762cfaa07f6c" translate="yes" xml:space="preserve">
          <source>OTHER_SYMBOL</source>
          <target state="translated">OTHER_SYMBOL</target>
        </trans-unit>
        <trans-unit id="5d84eb9e92dc661a577d3adfba33f1d74c56b13f" translate="yes" xml:space="preserve">
          <source>OUT</source>
          <target state="translated">OUT</target>
        </trans-unit>
        <trans-unit id="91920f1b8433472c27ea07aeaf636cc60ba181dc" translate="yes" xml:space="preserve">
          <source>ObjCAction</source>
          <target state="translated">ObjCAction</target>
        </trans-unit>
        <trans-unit id="e75d1b861d64404390b1044e805e449a8200ca83" translate="yes" xml:space="preserve">
          <source>ObjCBlockVar</source>
          <target state="translated">ObjCBlockVar</target>
        </trans-unit>
        <trans-unit id="e9af1c5fc6d5face32a12e24e19f7721bddde5b0" translate="yes" xml:space="preserve">
          <source>ObjCClass</source>
          <target state="translated">ObjCClass</target>
        </trans-unit>
        <trans-unit id="f25e8c7f51c9fbd76d5d3f0065c1777ea9957679" translate="yes" xml:space="preserve">
          <source>ObjCClassOf</source>
          <target state="translated">ObjCClassOf</target>
        </trans-unit>
        <trans-unit id="f6a51cb987439b8eee022689cce7766c56796d55" translate="yes" xml:space="preserve">
          <source>ObjCConstructor</source>
          <target state="translated">ObjCConstructor</target>
        </trans-unit>
        <trans-unit id="174b16a8130fefe11ed27381abeeb2de5f620114" translate="yes" xml:space="preserve">
          <source>ObjCFactory</source>
          <target state="translated">ObjCFactory</target>
        </trans-unit>
        <trans-unit id="b26295bcadcc4d23542076fe5cb26969093b0b48" translate="yes" xml:space="preserve">
          <source>ObjCMethod</source>
          <target state="translated">ObjCMethod</target>
        </trans-unit>
        <trans-unit id="07d9267ddaf9a5ade080cb2ba3e61a2c1db5834c" translate="yes" xml:space="preserve">
          <source>ObjCNotImplementedVar</source>
          <target state="translated">ObjCNotImplementedVar</target>
        </trans-unit>
        <trans-unit id="88fce822e198e83b3ad7f5c732a4ec9995f176b3" translate="yes" xml:space="preserve">
          <source>ObjCObject</source>
          <target state="translated">ObjCObject</target>
        </trans-unit>
        <trans-unit id="c3946e9e7a5b7a873393f4068d626ccc17017e1d" translate="yes" xml:space="preserve">
          <source>ObjCObjectBase</source>
          <target state="translated">ObjCObjectBase</target>
        </trans-unit>
        <trans-unit id="f2b935ffe4e074cda5d9854c568bff792bd27525" translate="yes" xml:space="preserve">
          <source>ObjCObjectBaseMeta</source>
          <target state="translated">ObjCObjectBaseMeta</target>
        </trans-unit>
        <trans-unit id="968b48c24c631a6e3656fa344166e2e696dac30a" translate="yes" xml:space="preserve">
          <source>ObjCObjectMeta</source>
          <target state="translated">ObjCObjectMeta</target>
        </trans-unit>
        <trans-unit id="877c2fba97f85ebcbe0815d3dd7f9aa9abf27eb2" translate="yes" xml:space="preserve">
          <source>ObjCObjectVar</source>
          <target state="translated">ObjCObjectVar</target>
        </trans-unit>
        <trans-unit id="380d9e7d32a5ea9a8f4a45d77367a2bd6224641f" translate="yes" xml:space="preserve">
          <source>ObjCOutlet</source>
          <target state="translated">ObjCOutlet</target>
        </trans-unit>
        <trans-unit id="7ddeec08c37b0e1684597f07f64a856e9d5996d5" translate="yes" xml:space="preserve">
          <source>ObjCStringVarOf</source>
          <target state="translated">ObjCStringVarOf</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="9cf5c3411eb513b108884e51c19ba17172ea9665" translate="yes" xml:space="preserve">
          <source>Object Declarations</source>
          <target state="translated">オブジェクト宣言</target>
        </trans-unit>
        <trans-unit id="7c97f9bd791112ffa2e31c34e5efe261bd493bd5" translate="yes" xml:space="preserve">
          <source>Object Expressions and Declarations</source>
          <target state="translated">オブジェクト表現と宣言</target>
        </trans-unit>
        <trans-unit id="f0e2a5cc2614159a14f8d24f77aff8cedbb91395" translate="yes" xml:space="preserve">
          <source>Object Methods</source>
          <target state="translated">オブジェクトメソッド</target>
        </trans-unit>
        <trans-unit id="da5029a017fab6364fe3776821fcb6e385dc5dee" translate="yes" xml:space="preserve">
          <source>Object Transfer Basics.</source>
          <target state="translated">オブジェクト転送の基本。</target>
        </trans-unit>
        <trans-unit id="720b937cd9168a2afdad295cde0f6e29e57ba3f8" translate="yes" xml:space="preserve">
          <source>Object configuration and computing the result: &lt;code&gt;run&lt;/code&gt;</source>
          <target state="translated">オブジェクトの構成と結果の計算： &lt;code&gt;run&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1602dbe04f927f110613a2ff025fac15d0ab85e1" translate="yes" xml:space="preserve">
          <source>Object configuration: &lt;code&gt;apply&lt;/code&gt;</source>
          <target state="translated">オブジェクト構成： &lt;code&gt;apply&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a447624065dc9ff0a50d2837d5bc597740342d7d" translate="yes" xml:space="preserve">
          <source>Object declaration's initialization is thread-safe.</source>
          <target state="translated">オブジェクト宣言の初期化はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="628c7c8804cdd6233ca4db93a682c55cf0920e38" translate="yes" xml:space="preserve">
          <source>Object declarations</source>
          <target state="translated">オブジェクト宣言</target>
        </trans-unit>
        <trans-unit id="cae8f3bd29605b55880171db0511493e6eb7c132" translate="yes" xml:space="preserve">
          <source>Object describing the current platform program executes upon.</source>
          <target state="translated">現在のプラットフォームプログラムが実行される際に記述されているオブジェクト。</target>
        </trans-unit>
        <trans-unit id="652916453e90e519555e6ab21189e4862e16ddc5" translate="yes" xml:space="preserve">
          <source>Object expressions</source>
          <target state="translated">オブジェクト表現</target>
        </trans-unit>
        <trans-unit id="a5005a7247de5e6b7399fc2c0fe58f85332088cd" translate="yes" xml:space="preserve">
          <source>Object pinning</source>
          <target state="translated">オブジェクトのピン留め</target>
        </trans-unit>
        <trans-unit id="bd34180a1517f8541977dbe1575129ec09ee4ed0" translate="yes" xml:space="preserve">
          <source>Object reference</source>
          <target state="translated">オブジェクト参照</target>
        </trans-unit>
        <trans-unit id="c74457d6502afea678cde0191acb0c28174b3019" translate="yes" xml:space="preserve">
          <source>Object subgraph detachment</source>
          <target state="translated">オブジェクトサブグラフの切り離し</target>
        </trans-unit>
        <trans-unit id="9e612181ece96085e9c01a6c4c75420948e3db15" translate="yes" xml:space="preserve">
          <source>Object subgraph freezing</source>
          <target state="translated">オブジェクトサブグラフのフリーズ</target>
        </trans-unit>
        <trans-unit id="f714255fe9b4b0abd289766d10b307beefd8bdca" translate="yes" xml:space="preserve">
          <source>Object subgraph ownership transfer</source>
          <target state="translated">オブジェクトサブグラフの所有権移転</target>
        </trans-unit>
        <trans-unit id="f7e1ff28ab70fc23071798b8c0343f8a27fa8277" translate="yes" xml:space="preserve">
          <source>Object transfer and freezing</source>
          <target state="translated">オブジェクトの転送とフリーズ</target>
        </trans-unit>
        <trans-unit id="9cf4af30df052d80876381f9ec0e05811ecd3d08" translate="yes" xml:space="preserve">
          <source>Objective-C</source>
          <target state="translated">Objective-C</target>
        </trans-unit>
        <trans-unit id="f624b8a4ac060c545ced78fe5b569d299005d811" translate="yes" xml:space="preserve">
          <source>Objective-C allows generics to be declared covariant or contravariant. Swift has no support for variance. Generic classes coming from Objective-C can be force-cast as needed.</source>
          <target state="translated">Objective-Cでは、ジェネリックを共分散または逆分散で宣言することができます。Swiftは分散をサポートしていません。Objective-C からのジェネリッククラスは、必要に応じて強制的にキャストすることができます。</target>
        </trans-unit>
        <trans-unit id="c34ace6f5a2b6e2147c689be6867500eabe88ca9" translate="yes" xml:space="preserve">
          <source>Objective-C and Swift use reference counting. Kotlin/Native has its own garbage collection too. Kotlin/Native garbage collection is integrated with Objective-C/Swift reference counting. We do not need to use anything special to control the lifetime of Kotlin/Native instances from Swift or Objective-C.</source>
          <target state="translated">Objective-CやSwiftは参照カウントを使っています。Kotlin/Native は独自のガベージコレクションも持っています。Kotlin/NativeのガベージコレクションはObjective-C/Swiftの参照カウントと統合されています。Kotlin/Nativeのインスタンスの寿命をSwiftやObjective-Cから制御するために特別なものを使う必要はありません。</target>
        </trans-unit>
        <trans-unit id="42d9bdb0193a26ed15d57450ee6f73bec2393ce7" translate="yes" xml:space="preserve">
          <source>Objective-C classes are imported into Kotlin with their original names. Protocols are imported as interfaces with &lt;code&gt;Protocol&lt;/code&gt; name suffix, i.e. &lt;code&gt;@protocol Foo&lt;/code&gt; -&amp;gt; &lt;code&gt;interface FooProtocol&lt;/code&gt;. These classes and interfaces are placed into a package &lt;a href=&quot;#usage&quot;&gt;specified in build configuration&lt;/a&gt; (&lt;code&gt;platform.*&lt;/code&gt; packages for preconfigured system frameworks).</source>
          <target state="translated">Objective-Cクラスは、元の名前でKotlinにインポートされます。プロトコルは、 &lt;code&gt;Protocol&lt;/code&gt; 名のサフィックスが付いたインターフェースとしてインポートされます。つまり、 &lt;code&gt;@protocol Foo&lt;/code&gt; - &amp;gt; &lt;code&gt;interface FooProtocol&lt;/code&gt; です。これらのクラスとインターフェースは&lt;a href=&quot;#usage&quot;&gt;、ビルド構成で指定さ&lt;/a&gt;れたパッケージ（事前構成されたシステムフレームワーク用の &lt;code&gt;platform.*&lt;/code&gt; パッケージ）に配置されます。</target>
        </trans-unit>
        <trans-unit id="e28ecca8c4c63098937f693b564f06106597a69f" translate="yes" xml:space="preserve">
          <source>Objective-C generics do not support all features of either Kotlin or Swift, so there will be some information lost in the translation.</source>
          <target state="translated">Objective-CジェネリックはKotlinやSwiftのすべての機能をサポートしているわけではないので、翻訳の際に失われる情報があります。</target>
        </trans-unit>
        <trans-unit id="edc50c4e6d2116d2eefbad12ba8e08e873a18c54" translate="yes" xml:space="preserve">
          <source>Objective-C supports &quot;lightweight generics&quot; defined on classes, with a relatively limited feature set. Swift can import generics defined on classes to help provide additional type information to the compiler.</source>
          <target state="translated">Objective-C はクラス上で定義された「軽量なジェネリック」をサポートしていますが、機能は比較的限られています。Swift は、コンパイラに追加の型情報を提供するのに役立つように、クラス上で定義されたジェネリックをインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="872324a80a8df1d396c94677f04ea994d1ae3329" translate="yes" xml:space="preserve">
          <source>Objects and companion objects</source>
          <target state="translated">オブジェクトとコンパニオンオブジェクト</target>
        </trans-unit>
        <trans-unit id="baa64e9ea92fa8d9f0990d9b1a5bc22ee025b445" translate="yes" xml:space="preserve">
          <source>Objects can be passed between threads in one of two possible modes.</source>
          <target state="translated">オブジェクトは、2 つのモードのいずれかでスレッド間で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c92258fa87a7fd87bfb0eac39b2cad3876c1531d" translate="yes" xml:space="preserve">
          <source>Observable</source>
          <target state="translated">Observable</target>
        </trans-unit>
        <trans-unit id="53d6bf00994a7a961b92ecd0048f0ecd77a13ddf" translate="yes" xml:space="preserve">
          <source>ObservableProperty</source>
          <target state="translated">ObservableProperty</target>
        </trans-unit>
        <trans-unit id="1145800f1de30eba6d1df3a4fd2cc70c1f07f939" translate="yes" xml:space="preserve">
          <source>Obtain the Kotlin/Native compiler</source>
          <target state="translated">Kotlin/Native コンパイラを入手する</target>
        </trans-unit>
        <trans-unit id="cdf71ecbbe212f441c04603a28909072a535e232" translate="yes" xml:space="preserve">
          <source>Obtaining member references from a class reference</source>
          <target state="translated">クラス参照からのメンバ参照の取得</target>
        </trans-unit>
        <trans-unit id="df8298dcee7334200280003820f9875dbf3c187b" translate="yes" xml:space="preserve">
          <source>Obtaining the Compiler</source>
          <target state="translated">コンパイラの取得</target>
        </trans-unit>
        <trans-unit id="b10db2a36e46741d4da85b74ece4b6f72fb9bfd8" translate="yes" xml:space="preserve">
          <source>Obtains a &lt;code&gt;KClass&lt;/code&gt; instance for the given constructor reference.</source>
          <target state="translated">取得 &lt;code&gt;KClass&lt;/code&gt; の所与のコンストラクタ参照のインスタンス。</target>
        </trans-unit>
        <trans-unit id="9910159f8fee624aa4548124f031d4745a86c889" translate="yes" xml:space="preserve">
          <source>Obtains a constructor reference for the given &lt;code&gt;KClass&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;KClass&lt;/code&gt; のコンストラクタ参照を取得します。</target>
        </trans-unit>
        <trans-unit id="0219b4a8ea1da937bc70be9c1ab95184f21fc8c4" translate="yes" xml:space="preserve">
          <source>Obtains the current continuation instance inside suspend functions and either suspends currently running coroutine or returns result immediately without suspension.</source>
          <target state="translated">サスペンド関数内の現在の継続インスタンスを取得し、現在実行中のコルーチンをサスペンドするか、サスペンドせずに直ちに結果を返します。</target>
        </trans-unit>
        <trans-unit id="646fc575bcb6c35847d73d3b2dd2cc5db56f01df" translate="yes" xml:space="preserve">
          <source>Obtains the current continuation instance inside suspend functions and suspends currently running coroutine.</source>
          <target state="translated">サスペンド関数内の現在の継続インスタンスを取得し、現在実行中のcoroutineをサスペンドします。</target>
        </trans-unit>
        <trans-unit id="dedd1425a40b177d169a6eb17080f5f8210d2fe7" translate="yes" xml:space="preserve">
          <source>Obtains the current continuation instance inside suspend functions and suspends the currently running coroutine.</source>
          <target state="translated">サスペンド関数内の現在の継続インスタンスを取得し、現在実行中のコルーチンをサスペンドします。</target>
        </trans-unit>
        <trans-unit id="0e481b647fccdeaa073311d1f3e53a76a5713079" translate="yes" xml:space="preserve">
          <source>Of course, there are use cases, where we need to pass a struct as a value to one call, and then, to pass the same struct as a reference to another call. This is possible in Kotlin/Native too. A &lt;code&gt;NativePlacement&lt;/code&gt; will be needed here.</source>
          <target state="translated">もちろん、構造体を値として1つの呼び出しに渡し、次に同じ構造体を別の呼び出しへの参照として渡す必要があるユースケースがあります。これはKotlin / Nativeでも可能です。ここには &lt;code&gt;NativePlacement&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="31883564163ba418ee2d22f8e75f951da14db61c" translate="yes" xml:space="preserve">
          <source>Of course, this function makes sense for any &lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt;, and we can make it generic:</source>
          <target state="translated">もちろん、この関数はすべての &lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt; に意味があり、汎用的にすることができます。</target>
        </trans-unit>
        <trans-unit id="01fad7001a3bd3884c94e7702bc3df04daa71091" translate="yes" xml:space="preserve">
          <source>Of course, you can use both &lt;code&gt;kotlin-allopen&lt;/code&gt; and &lt;code&gt;kotlin-spring&lt;/code&gt; in the same project.</source>
          <target state="translated">もちろん、同じプロジェクトで &lt;code&gt;kotlin-allopen&lt;/code&gt; と &lt;code&gt;kotlin-spring&lt;/code&gt; の両方を使用できます。</target>
        </trans-unit>
        <trans-unit id="42c11258f0fc4616029dfe363fc90cedc10dac00" translate="yes" xml:space="preserve">
          <source>Often C APIs allow passing some user data to callbacks. Such data is usually provided by the user when configuring the callback. It is passed to some C function (or written to the struct) as e.g. &lt;code&gt;void*&lt;/code&gt;. However, references to Kotlin objects can't be directly passed to C. So they require wrapping before configuring the callback and then unwrapping in the callback itself, to safely swim from Kotlin to Kotlin through the C world. Such wrapping is possible with &lt;code&gt;StableRef&lt;/code&gt; class.</source>
          <target state="translated">多くの場合、C APIでは、一部のユーザーデータをコールバックに渡すことができます。このようなデータは通常、コールバックの構成時にユーザーによって提供されます。これは、たとえば &lt;code&gt;void*&lt;/code&gt; としてC関数に渡されます（または構造体に書き込まれます）。ただし、Kotlinオブジェクトへの参照を直接Cに渡すことはできません。したがって、コールバックを構成する前にラップしてから、コールバック自体をラップ解除して、Cワールドを介してKotlinからKotlinに安全に泳ぐ必要があります。このようなラッピングは、 &lt;code&gt;StableRef&lt;/code&gt; クラスで可能です。</target>
        </trans-unit>
        <trans-unit id="242f4c07d8050ddde5e50538c080e4ec4486413c" translate="yes" xml:space="preserve">
          <source>Often it's necessary to specify target-specific linker options for a Kotlin/Native binary using an interop. It can be done using the &lt;code&gt;target&lt;/code&gt; script block:</source>
          <target state="translated">多くの場合、相互運用機能を使用してKotlin / Nativeバイナリのターゲット固有のリンカーオプションを指定する必要があります。これは、 &lt;code&gt;target&lt;/code&gt; スクリプトブロックを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="954df0a6263002ad270cb3cbc1c777c4a6fac8a1" translate="yes" xml:space="preserve">
          <source>Often it's necessary to specify target-specific linker options for a binary which uses a native library. It can by done using the &lt;code&gt;linkerOpts&lt;/code&gt; property of the binary. See the &lt;a href=&quot;#configuring-binaries&quot;&gt;Configuring binaries&lt;/a&gt; section for details.</source>
          <target state="translated">多くの場合、ネイティブライブラリを使用するバイナリのターゲット固有のリンカーオプションを指定する必要があります。バイナリの &lt;code&gt;linkerOpts&lt;/code&gt; プロパティを使用して行うことができます。詳細については、&lt;a href=&quot;#configuring-binaries&quot;&gt;バイナリ&lt;/a&gt;の構成セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="17450dcb9110eb38f3fe2d512c09098b5921aef0" translate="yes" xml:space="preserve">
          <source>Older compilers reject binaries that rely on new features (e.g. a 1.0 compiler rejects binaries that use coroutines).</source>
          <target state="translated">古いコンパイラは新しい機能に依存するバイナリを拒否します (例えば 1.0 のコンパイラはコアーチンを使用するバイナリを拒否します)。</target>
        </trans-unit>
        <trans-unit id="622d524446394c09abc4f2559c91821dbd352982" translate="yes" xml:space="preserve">
          <source>Omit semicolons whenever possible.</source>
          <target state="translated">可能な限りセミコロンを省略してください。</target>
        </trans-unit>
        <trans-unit id="902eb259efe55ed5caa3e21ba3397c994cd51091" translate="yes" xml:space="preserve">
          <source>On Apple platforms &lt;code&gt;objc&lt;/code&gt; library is provided for interoperability with &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;.</source>
          <target state="translated">Appleプラットフォームでは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;との相互運用性のために &lt;code&gt;objc&lt;/code&gt; ライブラリが提供されています。</target>
        </trans-unit>
        <trans-unit id="3a12a3cf1289b0209f29a4a3a5bf9dabfcdb8788" translate="yes" xml:space="preserve">
          <source>On GitHub</source>
          <target state="translated">GitHubで</target>
        </trans-unit>
        <trans-unit id="c0ab16d7d10cfcca8fa016bc8b366c04e76c5016" translate="yes" xml:space="preserve">
          <source>On JVM it is possible to redefine global exception handler for all coroutines by registering &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt; via &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt;. Global exception handler is similar to &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt;&lt;code&gt;Thread.defaultUncaughtExceptionHandler&lt;/code&gt;&lt;/a&gt; which is used when no more specific handlers are registered. On Android, &lt;code&gt;uncaughtExceptionPreHandler&lt;/code&gt; is installed as a global coroutine exception handler.</source>
          <target state="translated">JVMでは、&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt;を介して&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt;を登録することにより、すべてのコルーチンのグローバル例外ハンドラを再定義できます。グローバル例外ハンドラは、特定のハンドラが登録されていないときに使用される&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt; &lt;code&gt;Thread.defaultUncaughtExceptionHandler&lt;/code&gt; に&lt;/a&gt;似ています。Androidでは、 &lt;code&gt;uncaughtExceptionPreHandler&lt;/code&gt; がグローバルコルーチン例外ハンドラーとしてインストールされます。</target>
        </trans-unit>
        <trans-unit id="d634a94c081c286c31c7efa035cd25a12a05ea49" translate="yes" xml:space="preserve">
          <source>On JVM this generator is thread-safe, its methods can be invoked from multiple threads.</source>
          <target state="translated">JVM上では、このジェネレータはスレッドセーフであり、そのメソッドは複数のスレッドから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="82b7124cbe78a1bd0ee0229af53226a5b9d9303c" translate="yes" xml:space="preserve">
          <source>On Linux we call a similar command:</source>
          <target state="translated">Linuxでは、同様のコマンドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="f32995a2978fac4fc27ca1ef6f69f7fd0261ff6b" translate="yes" xml:space="preserve">
          <source>On Windows, Dynamic libraries are included either via a generated static library wrapper or with manual code, which deals with the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175.aspx&quot;&gt;LoadLibrary&lt;/a&gt; or similar Win32API functions. We will follow the first option and generate the static wrapper library for the &lt;code&gt;libnative.dll&lt;/code&gt; on our own.</source>
          <target state="translated">Windowsでは、動的ライブラリは、生成された静的ライブラリラッパーを介して、または&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175.aspx&quot;&gt;LoadLibrary&lt;/a&gt;または類似のWin32API関数を処理する手動コードに含まれます。最初のオプションに従い、 &lt;code&gt;libnative.dll&lt;/code&gt; の静的ラッパーライブラリを独自に生成します。</target>
        </trans-unit>
        <trans-unit id="d7653dc191105be976f3e4142a119bd4841c071b" translate="yes" xml:space="preserve">
          <source>On compiling, Gradle will produce the output of our application, which is by default placed under the &lt;code&gt;build/classes/main&lt;/code&gt; directory. This can be overridden using &lt;a href=&quot;#configuring-compiler-options&quot;&gt;the compiler options&lt;/a&gt;.</source>
          <target state="translated">コンパイル時に、Gradleはアプリケーションの出力を生成します。これはデフォルトで &lt;code&gt;build/classes/main&lt;/code&gt; ディレクトリに配置されます。これは&lt;a href=&quot;#configuring-compiler-options&quot;&gt;、コンパイラオプション&lt;/a&gt;を使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c14acaa8726202e56fd6764b8d4c4f4bf976a344" translate="yes" xml:space="preserve">
          <source>On compiling, Maven will produce the following output</source>
          <target state="translated">コンパイルすると、Mavenは以下の出力を生成します。</target>
        </trans-unit>
        <trans-unit id="2882a4f2583407f0619da2020ec98bec3d44466d" translate="yes" xml:space="preserve">
          <source>On macOS 10.13 with Xcode, we compile the C code and link it with the dynamic library with the following command:</source>
          <target state="translated">macOS 10.13のXcodeでは、以下のコマンドでCコードをコンパイルしてダイナミックライブラリと連携させています。</target>
        </trans-unit>
        <trans-unit id="fb4ddd201d36fd87940a13588d6e11985482252b" translate="yes" xml:space="preserve">
          <source>On the JVM side, the main build tools include &lt;a href=&quot;using-gradle&quot;&gt;Gradle&lt;/a&gt;, &lt;a href=&quot;using-maven&quot;&gt;Maven&lt;/a&gt;, &lt;a href=&quot;using-ant&quot;&gt;Ant&lt;/a&gt;, and &lt;a href=&quot;http://beust.com/kobalt/home/index.html&quot;&gt;Kobalt&lt;/a&gt;. There are also some build tools available that target client-side JavaScript.</source>
          <target state="translated">JVM側の主なビルドツールには、&lt;a href=&quot;using-gradle&quot;&gt;Gradle&lt;/a&gt;、&lt;a href=&quot;using-maven&quot;&gt;Maven&lt;/a&gt;、&lt;a href=&quot;using-ant&quot;&gt;Ant&lt;/a&gt;、および&lt;a href=&quot;http://beust.com/kobalt/home/index.html&quot;&gt;Kobaltがあり&lt;/a&gt;ます。クライアント側のJavaScriptを対象とするビルドツールもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="8a846654c5fb7b58771a6c8aa68e2bb8f0431b17" translate="yes" xml:space="preserve">
          <source>On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see &lt;a href=&quot;classes#constructors&quot;&gt;Constructors&lt;/a&gt;).</source>
          <target state="translated">JVMでは、生成されたクラスにパラメーターなしのコンストラクターが必要な場合、すべてのプロパティのデフォルト値を指定する必要があります（&lt;a href=&quot;classes#constructors&quot;&gt;コンストラクターを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="22f3441381be355a57b0344800020b03a2e7fba9" translate="yes" xml:space="preserve">
          <source>On the JVM, non-nullable values of this type are represented as values of the primitive type &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">JVMでは、このタイプのnullにできない値は、プリミティブタイプ &lt;code&gt;char&lt;/code&gt; の値として表されます。</target>
        </trans-unit>
        <trans-unit id="c36ad8bfe3e9b420b17609f7d80f8fe5d46e556b" translate="yes" xml:space="preserve">
          <source>On the JVM, one could provide an implementation that writes the log to the standard output:</source>
          <target state="translated">JVM上では、ログを標準出力に書き込む実装を提供することができます。</target>
        </trans-unit>
        <trans-unit id="37c721a8e1ab899d231ec42baf253266e008d200" translate="yes" xml:space="preserve">
          <source>On the JVM, the &lt;a href=&quot;basic-types#arrays&quot;&gt;array types&lt;/a&gt; (&lt;code&gt;Array&amp;lt;Foo&amp;gt;&lt;/code&gt;) retain the information about the erased type of their elements, and the type casts to an array type are partially checked: the nullability and actual type arguments of the elements type are still erased. For example, the cast &lt;code&gt;foo as Array&amp;lt;List&amp;lt;String&amp;gt;?&amp;gt;&lt;/code&gt; will succeed if &lt;code&gt;foo&lt;/code&gt; is an array holding any &lt;code&gt;List&amp;lt;*&amp;gt;&lt;/code&gt;, nullable or not.</source>
          <target state="translated">JVMでは、&lt;a href=&quot;basic-types#arrays&quot;&gt;配列型&lt;/a&gt;（ &lt;code&gt;Array&amp;lt;Foo&amp;gt;&lt;/code&gt; ）は要素の消去された型に関する情報を保持し、配列型への型キャストは部分的にチェックされます。要素型のnull可能性と実際の型引数は引き続き消去されます。たとえば、 &lt;code&gt;foo as Array&amp;lt;List&amp;lt;String&amp;gt;?&amp;gt;&lt;/code&gt; キャストされた場合、 &lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;List&amp;lt;*&amp;gt;&lt;/code&gt; 保持する配列である場合、null可能かどうかは成功します。</target>
        </trans-unit>
        <trans-unit id="5506431e2bb120557c874e7652f1a65950568290" translate="yes" xml:space="preserve">
          <source>On the Java platform, numbers are physically stored as JVM primitive types, unless we need a nullable number reference (e.g. &lt;code&gt;Int?&lt;/code&gt;) or generics are involved. In the latter cases numbers are boxed.</source>
          <target state="translated">Javaプラットフォームでは、null許容の数値参照（ &lt;code&gt;Int?&lt;/code&gt; など）が必要な場合やジェネリックが関係しない限り、数値はJVMプリミティブ型として物理的に格納されます。後者の場合、数字はボックスで囲まれます。</target>
        </trans-unit>
        <trans-unit id="fc1cc156e617b185ed0f40e773e41bff1f85a104" translate="yes" xml:space="preserve">
          <source>On the Java platform, standard library contains extensions for reflection classes that provide a mapping to and from Java reflection objects (see package &lt;code&gt;kotlin.reflect.jvm&lt;/code&gt;). For example, to find a backing field or a Java method that serves as a getter for a Kotlin property, you can say something like this:</source>
          <target state="translated">Javaプラットフォームでは、標準ライブラリには、Javaリフレクションオブジェクトとのマッピングを提供するリフレクションクラスの拡張機能が含まれています（パッケージ &lt;code&gt;kotlin.reflect.jvm&lt;/code&gt; を参照）。たとえば、Kotlinプロパティのゲッターとして機能するバッキングフィールドまたはJavaメソッドを見つけるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="2a19f51c47052a4b52d4d3a45688012ff83885d4" translate="yes" xml:space="preserve">
          <source>On the Java platform, the runtime component required for using the reflection features is distributed as a separate JAR file (&lt;code&gt;kotlin-reflect.jar&lt;/code&gt;). This is done to reduce the required size of the runtime library for applications that do not use reflection features. If you do use reflection, please make sure that the .jar file is added to the classpath of your project.</source>
          <target state="translated">Javaプラットフォームでは、リフレクション機能を使用するために必要なランタイムコンポーネントは、個別のJARファイル（ &lt;code&gt;kotlin-reflect.jar&lt;/code&gt; ）として配布されます。これは、リフレクション機能を使用しないアプリケーションに必要なランタイムライブラリのサイズを削減するために行われます。リフレクションを使用する場合は、プロジェクトのクラスパスに.jarファイルが追加されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="5d535cc279349339edec2b28152e5485a7cce0a0" translate="yes" xml:space="preserve">
          <source>On the JavaScript platform this code will be compiled &quot;as is&quot;: &lt;code&gt;dyn.whatever(1)&lt;/code&gt; in Kotlin becomes &lt;code&gt;dyn.whatever(1)&lt;/code&gt; in the generated JavaScript code.</source>
          <target state="translated">「そのまま」のコードがコンパイルされたJavaScriptプラットフォーム上： &lt;code&gt;dyn.whatever(1)&lt;/code&gt; Kotlinになる &lt;code&gt;dyn.whatever(1)&lt;/code&gt; 生成されたJavaScriptコードです。</target>
        </trans-unit>
        <trans-unit id="7710454ff099464789e309cce04c505a88cd2a29" translate="yes" xml:space="preserve">
          <source>On the generic Native platform we don't have the luxury to use someone else's implementation, so we will have to write one ourselves. I won't explain the implementation details here, but it's pretty straightforward and follows Base64 format description without any optimizations:</source>
          <target state="translated">一般的なNativeプラットフォームでは、誰かの実装を使う余裕がないので、自分たちで実装を書かなければなりません。ここでは実装の詳細は説明しませんが、非常に簡単で、最適化されていないBase64フォーマットの記述に従っています。</target>
        </trans-unit>
        <trans-unit id="dc341284a94c1ff306b2072d23ec90c8ced7deca" translate="yes" xml:space="preserve">
          <source>On the one hand, to achieve this, the compiler has to provide certain ABI stability guarantees under the constraints of separate compilation. This is why every change in the language is examined from the point of view of binary compatibility.</source>
          <target state="translated">一方で、これを実現するためには、コンパイラは分離コンパイルの制約の下で、ある種のABI安定性保証を提供しなければなりません。これが、言語のすべての変更がバイナリ互換性の観点から検討される理由です。</target>
        </trans-unit>
        <trans-unit id="000c75f582537e6c16176741f98b45d2d110bbb3" translate="yes" xml:space="preserve">
          <source>On the other hand, Kotlin/Native supports interoperability to use existing libraries directly from Kotlin/Native:</source>
          <target state="translated">一方、Kotlin/Nativeは既存のライブラリをKotlin/Nativeから直接利用するための相互運用性をサポートしています。</target>
        </trans-unit>
        <trans-unit id="60f0f1b25c5dff1f04424f892492e20e71e1b66d" translate="yes" xml:space="preserve">
          <source>On the other hand, a lot depends on the library authors being careful about which changes are safe to make. Thus it's very important that library authors understand how source changes affect compatibility and follow certain best practices to keep both APIs and ABIs of their libraries stable. Here are some assumptions that we make when considering language changes from the library evolution standpoint:</source>
          <target state="translated">一方で、ライブラリの作者がどのような変更を行っても安全であるかについて注意を払うかどうかに大きく依存しています。したがって、ライブラリの作者がソースの変更が互換性にどのような影響を与えるかを理解し、ライブラリのAPIとABIの両方を安定的に保つために、ある種のベストプラクティスに従うことが非常に重要です。ここでは、ライブラリの進化の観点から言語の変更を検討する際に、いくつかの仮定をしています。</target>
        </trans-unit>
        <trans-unit id="24a6b58cfe3e05a456f0e657a9154e03adab1e36" translate="yes" xml:space="preserve">
          <source>On the other hand, if we don't need wildcards where they are generated, we can use &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt;:</source>
          <target state="translated">一方、ワイルドカードが生成される場所で必要ない場合は、 &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="9fe83b5bff0a5d4a34dc3a1fd60b88652cfd8998" translate="yes" xml:space="preserve">
          <source>On the other hand, infix function call's precedence is higher than that of the boolean operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;- and &lt;code&gt;in&lt;/code&gt;-checks, and some other operators. These expressions are equivalent as well:</source>
          <target state="translated">一方、infix関数呼び出しの優先順位は、ブール演算子 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;||&lt;/code&gt; の優先順位よりも高くなっています。、 &lt;code&gt;is&lt;/code&gt; -と &lt;code&gt;in&lt;/code&gt; -checks、およびいくつかの他の演算子。これらの式も同等です。</target>
        </trans-unit>
        <trans-unit id="4b4a432df45f297429fbc3cee76b5f8d7f65a8e2" translate="yes" xml:space="preserve">
          <source>On the other hand, it preserves equality:</source>
          <target state="translated">一方で、平等性を保っている。</target>
        </trans-unit>
        <trans-unit id="7e3c3918cd7bead7b21ab07c18b704638f85c9a4" translate="yes" xml:space="preserve">
          <source>On the other hand, the platform libs in the distribution are merely just wrappers and bindings to the native libraries. That means the native libraries themselves (&lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.a&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt;, &lt;code&gt;.dll&lt;/code&gt; etc) should be installed on the machine.</source>
          <target state="translated">一方、ディストリビューションのプラットフォームライブラリは、単なるラッパーであり、ネイティブライブラリへのバインディングです。つまり、ネイティブライブラリ自体（ &lt;code&gt;.so&lt;/code&gt; 、 &lt;code&gt;.a&lt;/code&gt; 、 &lt;code&gt;.dylib&lt;/code&gt; 、 &lt;code&gt;.dll&lt;/code&gt; など）をマシンにインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="a4bdeb370dbf1cefb8a423a42914a31fcb4ec6d9" translate="yes" xml:space="preserve">
          <source>On the other side, by default, a dispatcher for the outer &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; is inherited. The default dispatcher for &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine, in particular, is confined to the invoker thread, so inheriting it has the effect of confining execution to this thread with a predictable FIFO scheduling.</source>
          <target state="translated">一方、デフォルトでは、外側の&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScopeの&lt;/a&gt;ディスパッチャーが継承されます。特に、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;コルーチンのデフォルトディスパッチャーは呼び出しスレッドに限定されているため、これを継承すると、予測可能なFIFOスケジューリングでこのスレッドに実行が限定されます。</target>
        </trans-unit>
        <trans-unit id="0097b825a22364e0ed5d52b543c2c2d7417ac42f" translate="yes" xml:space="preserve">
          <source>OnErrorAction</source>
          <target state="translated">OnErrorAction</target>
        </trans-unit>
        <trans-unit id="af3390fd9bdb1b1f1af829e06104c3364aeb4907" translate="yes" xml:space="preserve">
          <source>Once a worker is started with the &lt;code&gt;Worker.start&lt;/code&gt; function call, it can be addressed with its own unique integer worker id. Other workers, or non-worker concurrency primitives, such as OS threads, can send a message to the worker with the &lt;code&gt;execute&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;Worker.start&lt;/code&gt; 関数呼び出しでワーカーが開始されると、独自の一意の整数ワーカーIDでアドレス指定できます。他のワーカー、またはOSスレッドなどの非ワーカー同時実行プリミティブは、 &lt;code&gt;execute&lt;/code&gt; 呼び出しでメッセージをワーカーに送信できます。</target>
        </trans-unit>
        <trans-unit id="df99b41ffc8e8869530eb6fc788d462a8f350ad0" translate="yes" xml:space="preserve">
          <source>Once that's done, we simply right-click on our &lt;code&gt;index.html&lt;/code&gt; file and select the Debug option. This launches Chrome and then stops at the breakpoint defined in our code inside IntelliJ IDEA, from where we can evaluate expressions, step through code, etc.</source>
          <target state="translated">完了したら、 &lt;code&gt;index.html&lt;/code&gt; ファイルを右クリックして、[デバッグ]オプションを選択します。これによりChromeが起動し、IntelliJ IDEA内のコードで定義されたブレークポイントで停止します。ブレークポイントから式を評価したり、コードをステップ実行したりできます。</target>
        </trans-unit>
        <trans-unit id="3775c8ff21ba04eef02e13e8e82e7fea59a82c9d" translate="yes" xml:space="preserve">
          <source>Once the IDE has finished creating the new project, we should be left with the following layout</source>
          <target state="translated">IDE で新しいプロジェクトの作成が完了すると、次のようなレイアウトになります。</target>
        </trans-unit>
        <trans-unit id="d9769c12f9ad9598db953dee152f3b5b5ad3daf0" translate="yes" xml:space="preserve">
          <source>Once the code is ready, select a fragment you want a learner to fill in, invoke &lt;strong&gt;Add Answer Placeholder&lt;/strong&gt; command from the right-click menu and add the placeholder text and some hints to help the learner find the right solution:</source>
          <target state="translated">コードの準備ができたら、学習者に入力してほしいフラグメントを選択し、右クリックメニューから[ &lt;strong&gt;回答のプレースホルダー&lt;/strong&gt;を&lt;strong&gt;追加&lt;/strong&gt; ]コマンドを呼び出し、プレースホルダーテキストとヒントを追加して、学習者が適切な解決策を見つけられるようにします。</target>
        </trans-unit>
        <trans-unit id="46c1b63ed4fbeaebfc1fd631405807b64e959941" translate="yes" xml:space="preserve">
          <source>Once the dependency is included, we can access the different interfaces provided to generate DOM. The code below will add a new &lt;code&gt;span&lt;/code&gt; tag with the text &lt;code&gt;Hello&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt; on the &lt;code&gt;window.load&lt;/code&gt; event.</source>
          <target state="translated">依存関係が含まれると、DOMを生成するために提供されるさまざまなインターフェースにアクセスできます。以下のコードは、新規に追加されます &lt;code&gt;span&lt;/code&gt; テキストとタグを &lt;code&gt;Hello&lt;/code&gt; 内側 &lt;code&gt;div&lt;/code&gt; に &lt;code&gt;window.load&lt;/code&gt; のイベント。</target>
        </trans-unit>
        <trans-unit id="5f0142e56236eba7d0f9779ea0961db259aa8e0d" translate="yes" xml:space="preserve">
          <source>Once the file is created, add the &lt;code&gt;main&lt;/code&gt; function which is the entry point to a Kotlin application. IntelliJ IDEA offers a template to do this quickly. Just type &lt;em&gt;main&lt;/em&gt; and press tab.</source>
          <target state="translated">ファイルが作成されたら、Kotlinアプリケーションへのエントリポイントである &lt;code&gt;main&lt;/code&gt; 関数を追加します。IntelliJ IDEAは、これをすばやく行うためのテンプレートを提供しています。&lt;em&gt;main&lt;/em&gt;と入力してTabキーを押すだけです。</target>
        </trans-unit>
        <trans-unit id="c73312381dcc07c6b7a625ba7ed9e57ac7440a0f" translate="yes" xml:space="preserve">
          <source>Once the plugin is installed and Eclipse is restarted, make sure the plugin is installed correctly: open the &lt;strong&gt;Kotlin perspective&lt;/strong&gt; in the menu &lt;strong&gt;Window | Open Perspective | Other&amp;hellip;&lt;/strong&gt;</source>
          <target state="translated">プラグインをインストールしてEclipseを再起動したら、プラグインが正しくインストールされていることを確認します。メニュー&lt;strong&gt;ウィンドウ&lt;/strong&gt;で&lt;strong&gt;Kotlinパースペクティブ&lt;/strong&gt;を開きます&lt;strong&gt;。パースペクティブを開く| その他&amp;hellip;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0796366ca4be24e6c9cb8aea2efb2652251fe7de" translate="yes" xml:space="preserve">
          <source>Once we do that, we can then invoke the corresponding extensions, which are properties named after the views in the XML file. For example, for this view:</source>
          <target state="translated">これを実行すると、対応する拡張子を呼び出すことができます。例えば、このビューの場合。</target>
        </trans-unit>
        <trans-unit id="1c271397461aeb676abb2a2efff251e0af0e8c64" translate="yes" xml:space="preserve">
          <source>Once we have the build script defined with the correct dependencies, we can now create a controller</source>
          <target state="translated">ビルドスクリプトを正しい依存関係で定義したら、次はコントローラを作成します。</target>
        </trans-unit>
        <trans-unit id="a08b600d20b04c79c7a79b722bf898a01cce7fce" translate="yes" xml:space="preserve">
          <source>Once we have the definition file ready, we can create project files and open the project in an IDE.</source>
          <target state="translated">定義ファイルの準備ができたら、プロジェクトファイルを作成し、IDEでプロジェクトを開くことができます。</target>
        </trans-unit>
        <trans-unit id="d8045dca300b9f4677fd2c5dc7702ace1a03cfe2" translate="yes" xml:space="preserve">
          <source>Once we have the file generated, we can simply include it in our project and use it:</source>
          <target state="translated">生成されたファイルをプロジェクトにインクルードして使用することができます。</target>
        </trans-unit>
        <trans-unit id="bd56b1bd7445724ec0021ec14943c2a384d08186" translate="yes" xml:space="preserve">
          <source>Once we run the application (using this previous run configuration), and on successful deployment, we should be able to navigate to the browser with the correct url and see the response:</source>
          <target state="translated">アプリケーションを実行し(この前の実行設定を使用して)、デプロイが成功したら、正しい URL でブラウザに移動してレスポンスを見ることができるはずです。</target>
        </trans-unit>
        <trans-unit id="1b6604db47f0dce985d7de59d4f23c0c4c5c9cca" translate="yes" xml:space="preserve">
          <source>Once you complete the steps, Android Studio creates a project. The project already contains all the code and resources for building an application that can run on your Android device or an emulator.</source>
          <target state="translated">ステップを完了すると、Android Studioはプロジェクトを作成します。プロジェクトには、Androidデバイスまたはエミュレータ上で実行できるアプリケーションを構築するためのすべてのコードとリソースがすでに含まれています。</target>
        </trans-unit>
        <trans-unit id="07c62572d32f4ddef7a4fab02344f0c5993a4073" translate="yes" xml:space="preserve">
          <source>Once you have IntelliJ IDEA installed, it's time to create your first Kotlin application.</source>
          <target state="translated">IntelliJ IDEAをインストールしたら、最初のKotlinアプリケーションを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="57c7fbdcf305fcf640a6242dec4553b583c17b02" translate="yes" xml:space="preserve">
          <source>Once you have a source file, add the &lt;code&gt;main&lt;/code&gt; function - the entry point to a Kotlin application. You can simply type &lt;code&gt;main&lt;/code&gt; and invoke code completion by hitting &lt;code&gt;Ctrl + Space&lt;/code&gt;.</source>
          <target state="translated">ソースファイルを取得したら、 &lt;code&gt;main&lt;/code&gt; 機能であるKotlinアプリケーションへのエントリポイントを追加します。単に &lt;code&gt;main&lt;/code&gt; と &lt;code&gt;Ctrl + Space&lt;/code&gt; を押すことでコード補完を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="17939f0df56f8a8f1b07cbf026fcbc6c284de9b6" translate="yes" xml:space="preserve">
          <source>Once your experimental API graduates and is released in its final state, remove its marker annotation from declarations so that the clients can use it without restriction. However, you should leave the marker classes in modules so that the existing client code remains compatible. To let the API users update their modules accordingly (remove the markers from their code and recompile), mark the annotations as &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-deprecated/index&quot;&gt;&lt;code&gt;@Deprecated&lt;/code&gt;&lt;/a&gt; and provide the explanation in its message.</source>
          <target state="translated">実験的なAPIが段階的に終了し、最終状態でリリースされたら、宣言からマーカーアノテーションを削除して、クライアントが制限なしで使用できるようにします。ただし、既存のクライアントコードとの互換性を保つために、マーカークラスはモジュールに残しておく必要があります。APIユーザーがモジュールを適宜更新できるようにするには（コードからマーカーを削除して再コンパイルします）、注釈を&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-deprecated/index&quot;&gt; &lt;code&gt;@Deprecated&lt;/code&gt; &lt;/a&gt;としてマークし、メッセージに説明を入力します。</target>
        </trans-unit>
        <trans-unit id="0e2971b85ea49c26dcec5b2c744d22a818808e11" translate="yes" xml:space="preserve">
          <source>One can think of a coroutine as a light-weight thread. Like threads, coroutines can run in parallel, wait for each other and communicate. The biggest difference is that coroutines are very cheap, almost free: we can create thousands of them, and pay very little in terms of performance. True threads, on the other hand, are expensive to start and keep around. A thousand threads can be a serious challenge for a modern machine.</source>
          <target state="translated">コアーチンは軽量スレッドと考えることができます。スレッドのように、コアーチンは並列に動作し、お互いに待ち合わせをしたり、通信したりすることができます。最大の違いは、コアーチンが非常に安価で、ほとんど無料であるということです。一方、真のスレッドは、起動して維持するにはコストがかかります。1000個のスレッドは、現代のマシンにとって深刻な挑戦になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ef394220529220df8824f487b3f420bc848dae8f" translate="yes" xml:space="preserve">
          <source>One common use case is storing the values of properties in a map. This comes up often in applications like parsing JSON or doing other &amp;ldquo;dynamic&amp;rdquo; things. In this case, you can use the map instance itself as the delegate for a delegated property.</source>
          <target state="translated">一般的な使用例の1つは、プロパティの値をマップに格納することです。これは、JSONの解析やその他の「動的」なことを行うアプリケーションなどで頻繁に発生します。この場合、マップインスタンス自体を委任されたプロパティのデリゲートとして使用できます。</target>
        </trans-unit>
        <trans-unit id="295aff355ebc55ee584427ed710ab76e9197e01b" translate="yes" xml:space="preserve">
          <source>One element still represent one byte in the output data. This is the only way to create ImmutableBlob for now.</source>
          <target state="translated">1つの要素はまだ出力データの1バイトを表しています。今のところImmutableBlobを作るにはこれしかありません。</target>
        </trans-unit>
        <trans-unit id="69552c7e67db21fed3933e5341eb7f8d6f1878a7" translate="yes" xml:space="preserve">
          <source>One has to remember that those definitions are given only for pure Kotlin. Compatibility of Kotlin code from the other languages perspective (e.g. from Java) is out of the scope of this document.</source>
          <target state="translated">これらの定義は純粋な Kotlin のためだけに与えられたものであることを覚えておく必要があります。他の言語から見たKotlinのコードとの互換性については(例えばJavaから見た場合など)、このドキュメントの範囲外となります。</target>
        </trans-unit>
        <trans-unit id="10295bca22700ae68c4bd22afa199c59a7bf9d2d" translate="yes" xml:space="preserve">
          <source>One might think that static typing would make it very impractical to make collection classes or any other class that needs to contain members whose types vary with each usage. Generics to the rescue: they allow you to specify a &quot;placeholder&quot; type in a class or function that must be filled in whenever the class or function is used. For example, a node in a linked list needs to contain data of some type that is not known when we write the class, so we introduce a &lt;em&gt;generic type parameter&lt;/em&gt;&lt;code&gt;T&lt;/code&gt; (they are conventionally given single-letter names):</source>
          <target state="translated">静的型付けにより、コレクションクラスや、使用法ごとに型が異なるメンバーを含める必要があるその他のクラスを作成するのは非常に非現実的になると考える人もいるかもしれません。救済のジェネリック：クラスまたは関数が使用されるときはいつでも入力する必要があるクラスまたは関数の「プレースホルダー」タイプを指定できます。たとえば、リンクリストのノードには、クラスの作成時に不明なある型のデータを含める必要があるため、&lt;em&gt;ジェネリック型パラメーター&lt;/em&gt; &lt;code&gt;T&lt;/code&gt; を導入し&lt;em&gt;ます&lt;/em&gt;（通常、これらには1文字の名前が付けられます）。</target>
        </trans-unit>
        <trans-unit id="d91389670b253297bf40dd8c299f98764e30e6fa" translate="yes" xml:space="preserve">
          <source>One more way to create a sequence is by building it with a function that calculates its elements. To build a sequence based on a function, call &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.sequences/generate-sequence&quot;&gt;&lt;code&gt;generateSequence()&lt;/code&gt;&lt;/a&gt; with this function as an argument. Optionally, you can specify the first element as an explicit value or a result of a function call. The sequence generation stops when the provided function returns &lt;code&gt;null&lt;/code&gt;. So, the sequence in the example below is infinite.</source>
          <target state="translated">シーケンスを作成するもう1つの方法は、要素を計算する関数を使用してシーケンスを作成することです。関数に基づいてシーケンスを作成するには、この関数を引数として&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.sequences/generate-sequence&quot;&gt; &lt;code&gt;generateSequence()&lt;/code&gt; &lt;/a&gt;を呼び出します。オプションで、最初の要素を明示的な値または関数呼び出しの結果として指定できます。提供された関数が &lt;code&gt;null&lt;/code&gt; を返すと、シーケンスの生成は停止します。したがって、以下の例のシーケンスは無限です。</target>
        </trans-unit>
        <trans-unit id="fafa0cfeaea1b82981c57e5ae33aa6c2ac893b23" translate="yes" xml:space="preserve">
          <source>One of the benefits however of coroutines is that when it comes to the developer, writing non-blocking code is essentially the same as writing blocking code. The programming model in itself doesn't really change.</source>
          <target state="translated">しかし、コアーチンの利点の一つは、開発者にとってノンブロッキングコードを書くことは、基本的にブロッキングコードを書くことと同じであるということです。プログラミングモデル自体は本当に変わりません。</target>
        </trans-unit>
        <trans-unit id="265251dce76905646b45b6f600aaf0f8ecf9a59f" translate="yes" xml:space="preserve">
          <source>One of the key capabilities of Kotlin's multiplatform code is a way for common code to depend on platform-specific declarations. In other languages, this can often be accomplished by building a set of interfaces in the common code and implementing these interfaces in platform-specific modules. However, this approach is not ideal in cases when you have a library on one of the platforms that implements the functionality you need, and you'd like to use the API of this library directly without extra wrappers. Also, it requires common declarations to be expressed as interfaces, which doesn't cover all possible cases.</source>
          <target state="translated">Kotlin のマルチプラットフォームコードの重要な機能の一つは、共通コードをプラットフォーム固有の宣言に依存させる方法です。他の言語では、共通コードの中にインターフェイスのセットを構築し、プラットフォーム固有のモジュールにそれらのインターフェイスを実装することでこれを実現することがよくあります。しかし、このアプローチは、必要な機能を実装したライブラリがプラットフォーム上にあり、そのライブラリのAPIを余分なラッパーなしで直接使いたい場合には理想的ではありません。また、共通の宣言をインターフェイスとして表現する必要があるため、すべての可能なケースをカバーしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="dc2f355daff82042213227d21be547e3dba71d34" translate="yes" xml:space="preserve">
          <source>One of the most common pitfalls in many programming languages, including Java, is that accessing a member of a null reference will result in a null reference exception. In Java this would be the equivalent of a &lt;code&gt;NullPointerException&lt;/code&gt; or NPE for short.</source>
          <target state="translated">Javaを含む多くのプログラミング言語で最も一般的な落とし穴の1つは、null参照のメンバーにアクセスするとnull参照例外が発生することです。Javaでは、これは略して &lt;code&gt;NullPointerException&lt;/code&gt; またはNPEと同等です。</target>
        </trans-unit>
        <trans-unit id="e6f92c8a67f2d507591085679c40b475519d2dde" translate="yes" xml:space="preserve">
          <source>One of the most tricky parts of Java's type system is wildcard types (see &lt;a href=&quot;http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html&quot;&gt;Java Generics FAQ&lt;/a&gt;). And Kotlin doesn't have any. Instead, it has two other things: declaration-site variance and type projections.</source>
          <target state="translated">Javaの型システムの最もトリッキーな部分の1つはワイルドカード型です（&lt;a href=&quot;http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html&quot;&gt;Java Generics FAQを参照&lt;/a&gt;）。そしてKotlinには何もありません。代わりに、宣言とサイトの差異と型の射影という2つのことが他にあります。</target>
        </trans-unit>
        <trans-unit id="38d02ab09e44aff951d70a40c329956aa2b8b363" translate="yes" xml:space="preserve">
          <source>One of the possible use cases of &lt;code&gt;provideDelegate&lt;/code&gt; is to check property consistency when the property is created, not only in its getter or setter.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 可能な使用例の1つは、ゲッターやセッターだけでなく、プロパティの作成時にプロパティの整合性をチェックすることです。</target>
        </trans-unit>
        <trans-unit id="8d4385a0374e1c5c7b6c1f784715b203768aadd3" translate="yes" xml:space="preserve">
          <source>One of the solutions would have been to report each exception separately, but then &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;Deferred.await&lt;/a&gt; should have had the same mechanism to avoid behavioural inconsistency and this would cause implementation details of a coroutines (whether it had delegated parts of its work to its children or not) to leak to its exception handler.</source>
          <target state="translated">解決策の1つは、各例外を個別に報告することでしたが、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;Deferred.await&lt;/a&gt;は動作の不整合を回避するために同じメカニズムを備えている必要があり、これによりコルーチンの実装の詳細が発生します（その作業の一部を子に委任したか、 not）例外ハンドラにリークしません。</target>
        </trans-unit>
        <trans-unit id="4682051378a5cd9287062ccfaa20c54f71557242" translate="yes" xml:space="preserve">
          <source>One other difference between lambda expressions and anonymous functions is the behavior of &lt;a href=&quot;inline-functions#non-local-returns&quot;&gt;non-local returns&lt;/a&gt;. A &lt;em&gt;return&lt;/em&gt; statement without a label always returns from the function declared with the &lt;em&gt;fun&lt;/em&gt; keyword. This means that a &lt;em&gt;return&lt;/em&gt; inside a lambda expression will return from the enclosing function, whereas a &lt;em&gt;return&lt;/em&gt; inside an anonymous function will return from the anonymous function itself.</source>
          <target state="translated">ラムダ式と無名関数のもう1つの違いは、&lt;a href=&quot;inline-functions#non-local-returns&quot;&gt;非ローカルなreturnの&lt;/a&gt;動作です。&lt;em&gt;リターン・&lt;/em&gt;ラベルのない文は、常にで宣言された関数から返す&lt;em&gt;楽しい&lt;/em&gt;キーワード。これは、ラムダ式内の戻りは囲み関数から&lt;em&gt;戻るの&lt;/em&gt;に対し、無名関数内の戻りは無名関数自体から&lt;em&gt;戻る&lt;/em&gt;ことを意味します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f184b36bfb713e43fbfa93f50dceca8dadfd2966" translate="yes" xml:space="preserve">
          <source>One other thing to be discussed here is how we add text to tag bodies. In the example above we say something like:</source>
          <target state="translated">もう一つ、ここで議論すべきことは、タグボディにテキストをどのように追加するかということです。上の例では、次のようなことを言っています。</target>
        </trans-unit>
        <trans-unit id="298f631b7015e52a7102aa3f6251e37e068b1948" translate="yes" xml:space="preserve">
          <source>One thing missing from the lambda expression syntax presented above is the ability to specify the return type of the function. In most cases, this is unnecessary because the return type can be inferred automatically. However, if you do need to specify it explicitly, you can use an alternative syntax: an &lt;em&gt;anonymous function&lt;/em&gt;.</source>
          <target state="translated">上記のラムダ式の構文に欠けているのは、関数の戻り値の型を指定できることです。戻り値の型は自動的に推測できるため、ほとんどの場合、これは不要です。ただし、明示的に指定する必要がある場合は、代わりの構文である&lt;em&gt;無名関数を&lt;/em&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="642728af0fb0800824d7dd9f4eab6562d33e66c6" translate="yes" xml:space="preserve">
          <source>Online Courses</source>
          <target state="translated">オンラインコース</target>
        </trans-unit>
        <trans-unit id="a56fd70563b4d9f0bebcf1cf95d7aaace3e6c084" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;EXECUTABLE&lt;/code&gt; and &lt;code&gt;KLIBRARY&lt;/code&gt; binaries are published currently.</source>
          <target state="translated">現在、 &lt;code&gt;EXECUTABLE&lt;/code&gt; および &lt;code&gt;KLIBRARY&lt;/code&gt; バイナリのみが公開されています。</target>
        </trans-unit>
        <trans-unit id="da7677e45b190380bd45a6a9f12fa569b7b050cd" translate="yes" xml:space="preserve">
          <source>Only imports and declarations can exist at the top level of a Kotlin file. Therefore, &quot;running&quot; an individual file only makes sense if it contains an &lt;em&gt;entry point&lt;/em&gt;, which must be a function called &lt;code&gt;main&lt;/code&gt; with one argument called &lt;code&gt;args&lt;/code&gt; of the type &quot;array of strings&quot;. &lt;code&gt;args&lt;/code&gt; will contain the command-line arguments that the program is invoked with, similarly to &lt;code&gt;sys.argv&lt;/code&gt; in Python; it can be omitted if your program does not need to accept command-line arguments and you are using Kotlin 1.3:</source>
          <target state="translated">Kotlinファイルの最上位に存在できるのは、インポートと宣言のみです。それが含まれている場合はそのため、個々のファイルを「実行すると、」だけ理にかなっている&lt;em&gt;エントリポイント&lt;/em&gt;と呼ばれる機能である必要があり、 &lt;code&gt;main&lt;/code&gt; と呼ばれる一つの引数と &lt;code&gt;args&lt;/code&gt; の型のは、「文字列の配列を」。 &lt;code&gt;args&lt;/code&gt; には、Pythonの &lt;code&gt;sys.argv&lt;/code&gt; と同様に、プログラムが呼び出されるコマンドライン引数が含まれます。プログラムがコマンドライン引数を受け入れる必要がなく、Kotlin 1.3を使用している場合は、省略できます。</target>
        </trans-unit>
        <trans-unit id="d5acf06992dbc80a4d90b07667e54904a5303d8d" translate="yes" xml:space="preserve">
          <source>Only one parameter may be marked as &lt;code&gt;vararg&lt;/code&gt;. If a &lt;code&gt;vararg&lt;/code&gt; parameter is not the last one in the list, values for the following parameters can be passed using the named argument syntax, or, if the parameter has a function type, by passing a lambda outside parentheses.</source>
          <target state="translated">&lt;code&gt;vararg&lt;/code&gt; としてマークできるパラメーターは1つだけです。 &lt;code&gt;vararg&lt;/code&gt; パラメーターがリストの最後のパラメーターではない場合、以下のパラメーターの値は、名前付き引数構文を使用して渡すことができます。パラメーターに関数タイプがある場合は、括弧の外側にラムダを渡すことによって渡すことができます。</target>
        </trans-unit>
        <trans-unit id="62ae003ddbe718dd1517100f12cc23341d88734f" translate="yes" xml:space="preserve">
          <source>Only the property &lt;code&gt;name&lt;/code&gt; will be used inside the &lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt;, and &lt;code&gt;copy()&lt;/code&gt; implementations, and there will only be one component function &lt;code&gt;component1()&lt;/code&gt;. While two &lt;code&gt;Person&lt;/code&gt; objects can have different ages, they will be treated as equal.</source>
          <target state="translated">プロパティ &lt;code&gt;name&lt;/code&gt; のみが &lt;code&gt;toString()&lt;/code&gt; 、 &lt;code&gt;equals()&lt;/code&gt; 、 &lt;code&gt;hashCode()&lt;/code&gt; 、および &lt;code&gt;copy()&lt;/code&gt; の実装内で使用され、コンポーネント関数 &lt;code&gt;component1()&lt;/code&gt; は 1つだけ存在します。2つの &lt;code&gt;Person&lt;/code&gt; オブジェクトは年齢が異なる場合がありますが、同じものとして扱われます。</target>
        </trans-unit>
        <trans-unit id="0991ef404e96f10fd9f12b53834c650d31c927f7" translate="yes" xml:space="preserve">
          <source>Only the top-level functions can have a contract for now.</source>
          <target state="translated">今のところ契約できるのはトップレベルの機能だけです。</target>
        </trans-unit>
        <trans-unit id="44fceaa53bcd4e0959ad0f0959b849cd53bad4d8" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;Task.kt&lt;/code&gt; file to write the code you want for the exercise:</source>
          <target state="translated">&lt;code&gt;Task.kt&lt;/code&gt; ファイルを開いて、演習に必要なコードを記述します。</target>
        </trans-unit>
        <trans-unit id="7314b40c316a1f266ab17c79c1dbaa5efa312fc4" translate="yes" xml:space="preserve">
          <source>Open Android Studio and click &lt;strong&gt;Start a new Android Studio project&lt;/strong&gt; on the welcome screen or &lt;strong&gt;File | New | New project&lt;/strong&gt;.</source>
          <target state="translated">Android Studioを開き、ようこそ画面または&lt;strong&gt;[ファイル&lt;/strong&gt; ]メニューから[ &lt;strong&gt;新しいAndroid Studioプロジェクト&lt;/strong&gt;を&lt;strong&gt;開始&lt;/strong&gt; ]をクリックし&lt;strong&gt;ます。新規| 新しいプロジェクト&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="91d2d6c25074dfcfb7cab43ab30e7f03b9fd3e52" translate="yes" xml:space="preserve">
          <source>Opening the Project in IDE</source>
          <target state="translated">IDEでプロジェクトを開く</target>
        </trans-unit>
        <trans-unit id="066186e62ea684ac1212e026a26d571f981c4d5a" translate="yes" xml:space="preserve">
          <source>Operating system family program executes upon.</source>
          <target state="translated">オペレーティングシステムファミリーのプログラムが実行されます。</target>
        </trans-unit>
        <trans-unit id="c791730b00e42caba4395b78632bfee149a435dc" translate="yes" xml:space="preserve">
          <source>Operating system family.</source>
          <target state="translated">オペレーティングシステムのファミリー。</target>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="81a400d5fba1ee0821e50ecd6c5fe68fa3817f28" translate="yes" xml:space="preserve">
          <source>Operations described on these pages return their results without affecting the original collection. For example, a filtering operation produces a &lt;em&gt;new collection&lt;/em&gt; that contains all the elements matching the filtering predicate. Results of such operations should be either stored in variables, or used in some other way, for example, passed in other functions.</source>
          <target state="translated">これらのページで説明されている操作は、元のコレクションに影響を与えることなく結果を返します。たとえば、フィルタリング操作は、フィルタリング述語に一致するすべての要素を含む&lt;em&gt;新しいコレクション&lt;/em&gt;を生成します。このような操作の結果は、変数に格納するか、他の関数で渡されるなど、他の方法で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9bf7c09224d4e5f03f06eb1166a0d0d5843b1570" translate="yes" xml:space="preserve">
          <source>Operator overloading</source>
          <target state="translated">オペレータの過負荷</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="0caa6abe0a90ca66988bc7871ced1b5719175a43" translate="yes" xml:space="preserve">
          <source>Operators and Special Symbols</source>
          <target state="translated">オペレータと特殊記号</target>
        </trans-unit>
        <trans-unit id="391a1d9fef3c27917074b6cfe64302d4a7548eb3" translate="yes" xml:space="preserve">
          <source>Operators and conversions for BigInteger and BigDecimal</source>
          <target state="translated">BigIntegerとBigDecimalの演算子と変換</target>
        </trans-unit>
        <trans-unit id="3a15cb4802d6a2f5087bc78f9d683b8a1c586e0c" translate="yes" xml:space="preserve">
          <source>OptionalExpectation</source>
          <target state="translated">OptionalExpectation</target>
        </trans-unit>
        <trans-unit id="a6a5dca52b1cba88b3d7679218fb5b6d2dfb1487" translate="yes" xml:space="preserve">
          <source>Optionally, a &lt;code&gt;mode&lt;/code&gt; parameter equal to &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/-f-i-x-e-d_-d-e-l-a-y.html&quot;&gt;TickerMode.FIXED_DELAY&lt;/a&gt; can be specified to maintain a fixed delay between elements.</source>
          <target state="translated">オプションで、&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/-f-i-x-e-d_-d-e-l-a-y.html&quot;&gt;TickerMode.FIXED_DELAYに&lt;/a&gt;等しい &lt;code&gt;mode&lt;/code&gt; パラメータを指定して、要素間の固定遅延を維持できます。</target>
        </trans-unit>
        <trans-unit id="81e695612c6b558fba4d69087c222c3508c30997" translate="yes" xml:space="preserve">
          <source>Options for compiler plugins</source>
          <target state="translated">コンパイラプラグインのオプション</target>
        </trans-unit>
        <trans-unit id="d99a34cf6e89392af307d2da71942e282bd91e96" translate="yes" xml:space="preserve">
          <source>Options passed to the C compiler (used to analyze headers, such as preprocessor definitions) and the linker (used to link final executables) can be passed in the definition file as &lt;code&gt;compilerOpts&lt;/code&gt; and &lt;code&gt;linkerOpts&lt;/code&gt; respectively. For example</source>
          <target state="translated">（そのようなプリプロセッサ定義としてヘッダを分析するために使用される）Cコンパイラと（最終的な実行可能ファイルをリンクするために使用される）は、リンカーに渡されるオプションは、として定義ファイルに渡すことができ &lt;code&gt;compilerOpts&lt;/code&gt; と &lt;code&gt;linkerOpts&lt;/code&gt; それぞれ。例えば</target>
        </trans-unit>
        <trans-unit id="bfefe272fa75c738fdc90c4c14d8bf8da5c74e2c" translate="yes" xml:space="preserve">
          <source>Or alternatively, even shorter:</source>
          <target state="translated">あるいは、もっと短く。</target>
        </trans-unit>
        <trans-unit id="532bd8eaed87cda55870df17e6d9de316d9f4893" translate="yes" xml:space="preserve">
          <source>Or an entire package, which will bring in all the symbols from that package:</source>
          <target state="translated">または、パッケージ全体の中からすべてのシンボルを取り込むことができます。</target>
        </trans-unit>
        <trans-unit id="84941468d72b41cd1e72e93f8755c37167fcb75c" translate="yes" xml:space="preserve">
          <source>Or commandline arguments: &lt;code&gt;-Xembed-bitcode&lt;/code&gt; (for release) and &lt;code&gt;-Xembed-bitcode-marker&lt;/code&gt; (debug)</source>
          <target state="translated">またはコマンドライン引数： &lt;code&gt;-Xembed-bitcode&lt;/code&gt; （リリース用）および &lt;code&gt;-Xembed-bitcode-marker&lt;/code&gt; （デバッグ）</target>
        </trans-unit>
        <trans-unit id="4a6904cf48807fd990ed6c31cef633f6c1c024ac" translate="yes" xml:space="preserve">
          <source>Or using the Gradle plugins DSL:</source>
          <target state="translated">またはGradleのプラグインDSLを使用しています。</target>
        </trans-unit>
        <trans-unit id="2a931f4319a05ea77891d9060114221f91b89607" translate="yes" xml:space="preserve">
          <source>Or you can fill in the right answer with the &lt;strong&gt;Bulb&lt;/strong&gt; icon:</source>
          <target state="translated">または、&lt;strong&gt;電球&lt;/strong&gt;アイコンで正しい答えを入力することもできます。</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="d3ed86c1334d74f0ae883f47feef902d83b9d8c6" translate="yes" xml:space="preserve">
          <source>Ordering</source>
          <target state="translated">Ordering</target>
        </trans-unit>
        <trans-unit id="5f3c0a024546767e98619d4c704f350b22156152" translate="yes" xml:space="preserve">
          <source>Ordinary named value parameter.</source>
          <target state="translated">通常の名前付き値のパラメータです。</target>
        </trans-unit>
        <trans-unit id="4869781b0f55f4c1037bf2910220d1e6f2a7ce09" translate="yes" xml:space="preserve">
          <source>OsFamily</source>
          <target state="translated">OsFamily</target>
        </trans-unit>
        <trans-unit id="959184f53e7b6600b042795548ffeee55d75c4c1" translate="yes" xml:space="preserve">
          <source>Other CI Server</source>
          <target state="translated">その他のCIサーバ</target>
        </trans-unit>
        <trans-unit id="b22c85b9254408bacf27f231cb8b5205551c3cad" translate="yes" xml:space="preserve">
          <source>Other Language Features</source>
          <target state="translated">その他の言語の特徴</target>
        </trans-unit>
        <trans-unit id="b9e470b1de14eca892c5fa77e2ebfe8529930c48" translate="yes" xml:space="preserve">
          <source>Other citations of this sort:</source>
          <target state="translated">この種の他の引用</target>
        </trans-unit>
        <trans-unit id="1f6194122ceb6cecad3809ca5a924ada067e2d97" translate="yes" xml:space="preserve">
          <source>Other collection operations are declared as extension functions. These are filtering, transformation, ordering, and other collection processing functions.</source>
          <target state="translated">その他のコレクション処理は、拡張関数として宣言されています。これらは、フィルタリング、変換、順序付け、その他のコレクション処理関数です。</target>
        </trans-unit>
        <trans-unit id="126d7a1bf7e54d2a4bf4a9c0419a29fe417ffdb3" translate="yes" xml:space="preserve">
          <source>Other issues caused by external Java code.</source>
          <target state="translated">その他、外部のJavaコードに起因する問題。</target>
        </trans-unit>
        <trans-unit id="16cfd92afd47d77c945ee46ac4fb8ac72dfa3d58" translate="yes" xml:space="preserve">
          <source>Other language features</source>
          <target state="translated">その他の言語の特徴</target>
        </trans-unit>
        <trans-unit id="d2503fbe45c5caffb865ef91cb9bcd7c9e6bde78" translate="yes" xml:space="preserve">
          <source>Other supported cases include acquiring a Java getter/setter method or a backing field for a Kotlin property, a &lt;code&gt;KProperty&lt;/code&gt; for a Java field, a Java method or constructor for a &lt;code&gt;KFunction&lt;/code&gt; and vice versa.</source>
          <target state="translated">サポートされている他のケースには、KotlinプロパティのJavaゲッター/セッターメソッドまたはバッキングフィールド、Javaフィールドの &lt;code&gt;KProperty&lt;/code&gt; 、KFunctionのJavaメソッドまたはコンストラクターの &lt;code&gt;KFunction&lt;/code&gt; 、およびその逆が含まれます。</target>
        </trans-unit>
        <trans-unit id="8d5454be13e8e63af0393432029da696ce74c13c" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value of the &lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; must have a type assignable to &lt;a href=&quot;suspend-coroutine-or-return#T&quot;&gt;T&lt;/a&gt; and represents the result of this suspend function. It means that the execution was not suspended and the &lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/index&quot;&gt;Continuation&lt;/a&gt; provided to the &lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; shall not be invoked. As the result type of the &lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; is declared as &lt;code&gt;Any?&lt;/code&gt; and cannot be correctly type-checked, its proper return type remains on the conscience of the suspend function's author.</source>
          <target state="translated">それ以外の場合、&lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックの&lt;/a&gt;戻り値は、&lt;a href=&quot;suspend-coroutine-or-return#T&quot;&gt;Tに&lt;/a&gt;割り当て可能な型を持たなければならず、この中断関数の結果を表します。これは、実行が中断されておらず、&lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックに&lt;/a&gt;提供された&lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/index&quot;&gt;Continuation&lt;/a&gt;が呼び出されないことを意味します。&lt;a href=&quot;suspend-coroutine-or-return#kotlin.coroutines.experimental.intrinsics%24suspendCoroutineOrReturn%28kotlin.Function1%28%28kotlin.coroutines.experimental.Continuation%28%28kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックの&lt;/a&gt;結果の型が &lt;code&gt;Any?&lt;/code&gt; として宣言されているので？正しく型チェックできないため、適切な戻り値の型は、suspend関数の作成者の良心に残ります。</target>
        </trans-unit>
        <trans-unit id="0de4f3d3a643debaa8825b8903404f8fc938727d" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value of the &lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; must have a type assignable to &lt;a href=&quot;suspend-coroutine-unintercepted-or-return#T&quot;&gt;T&lt;/a&gt; and represents the result of this suspend function. It means that the execution was not suspended and the &lt;a href=&quot;../kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt; provided to the &lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; shall not be invoked. As the result type of the &lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; is declared as &lt;code&gt;Any?&lt;/code&gt; and cannot be correctly type-checked, its proper return type remains on the conscience of the suspend function's author.</source>
          <target state="translated">それ以外の場合、&lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックの&lt;/a&gt;戻り値は、&lt;a href=&quot;suspend-coroutine-unintercepted-or-return#T&quot;&gt;Tに&lt;/a&gt;割り当て可能な型を持たなければならず、この中断関数の結果を表します。これは、実行が中断されておらず、&lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックに&lt;/a&gt;提供された&lt;a href=&quot;../kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;が呼び出されないことを意味します。&lt;a href=&quot;suspend-coroutine-unintercepted-or-return#kotlin.coroutines.intrinsics%24suspendCoroutineUninterceptedOrReturn%28kotlin.Function1%28%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn.T%29%29%2C+kotlin.Any%29%29%29%2Fblock&quot;&gt;ブロックの&lt;/a&gt;結果の型が &lt;code&gt;Any?&lt;/code&gt; として宣言されているので？正しく型チェックできないため、適切な戻り値の型は、suspend関数の作成者の良心に残ります。</target>
        </trans-unit>
        <trans-unit id="80332318434bec9b581b702805f0a6036697bbb7" translate="yes" xml:space="preserve">
          <source>Otherwise, the structural equality is used, which disagrees with the standard so that &lt;code&gt;NaN&lt;/code&gt; is equal to itself, and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;NaN&lt;/code&gt; がそれ自体に等しくなり、 &lt;code&gt;-0.0&lt;/code&gt; が &lt;code&gt;0.0&lt;/code&gt; に等しくならないように、標準と一致しない構造的等式が使用されます。</target>
        </trans-unit>
        <trans-unit id="cb380427bcdf9e2288105dd3444ff34884f91949" translate="yes" xml:space="preserve">
          <source>Otherwise, try to generate code for &lt;code&gt;a = a + b&lt;/code&gt; (this includes a type check: the type of &lt;code&gt;a + b&lt;/code&gt; must be a subtype of &lt;code&gt;a&lt;/code&gt;).</source>
          <target state="translated">そうでなければ、用のコードを生成しよう &lt;code&gt;a = a + b&lt;/code&gt; （これは型チェックを含んでいる：のタイプ &lt;code&gt;a + b&lt;/code&gt; のサブタイプでなければなりません）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4519fbda5213ca8ee3068e92e2d8eeb9a0128d9" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;build.gradle&lt;/code&gt; file should look like the following</source>
          <target state="translated">私たちの &lt;code&gt;build.gradle&lt;/code&gt; のファイルは、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="adbbd30ddb3bdecc114802621e11ef40e9d64175" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;workload()&lt;/code&gt; function can be called from a coroutine (or another suspending function), but &lt;em&gt;can not&lt;/em&gt; be called from outside a coroutine. Naturally, &lt;code&gt;delay()&lt;/code&gt; and &lt;code&gt;await()&lt;/code&gt; that we used above are themselves declared as &lt;code&gt;suspend&lt;/code&gt;, and this is why we had to put them inside &lt;code&gt;runBlocking {}&lt;/code&gt;, &lt;code&gt;launch {}&lt;/code&gt; or &lt;code&gt;async {}&lt;/code&gt;.</source>
          <target state="translated">私たちの &lt;code&gt;workload()&lt;/code&gt; 関数はコルーチン（または別の一時停止関数）から呼び出す&lt;em&gt;こと&lt;/em&gt;が&lt;em&gt;でき&lt;/em&gt;ますが、コルーチンの外部から呼び出す&lt;em&gt;ことはできません&lt;/em&gt;。当然、上記で使用した &lt;code&gt;delay()&lt;/code&gt; および &lt;code&gt;await()&lt;/code&gt; は、それ自体が &lt;code&gt;suspend&lt;/code&gt; として宣言されているため、これらを &lt;code&gt;runBlocking {}&lt;/code&gt; 内に配置し、 &lt;code&gt;launch {}&lt;/code&gt; または &lt;code&gt;async {}&lt;/code&gt; 内に配置する必要がありました。</target>
        </trans-unit>
        <trans-unit id="7460360fa1bf50529b473bc85864ff382d98b93c" translate="yes" xml:space="preserve">
          <source>Our JS implementation will be very similar to the JVM one. We create a file &lt;code&gt;Base64.kt&lt;/code&gt; in &lt;code&gt;jsMain/kotlin/jetbrains/base64&lt;/code&gt; and provide an implementation which delegates to NodeJS &lt;code&gt;Buffer&lt;/code&gt; API:</source>
          <target state="translated">JSの実装は、JVMの実装とよく似ています。私たちは、ファイル作成 &lt;code&gt;Base64.kt&lt;/code&gt; で &lt;code&gt;jsMain/kotlin/jetbrains/base64&lt;/code&gt; し、実装を提供するNodeJSに委譲 &lt;code&gt;Buffer&lt;/code&gt; API：</target>
        </trans-unit>
        <trans-unit id="0ab5b1cc96e82694a219ee123e8bd14970db091a" translate="yes" xml:space="preserve">
          <source>Our Library Functions</source>
          <target state="translated">図書館の機能</target>
        </trans-unit>
        <trans-unit id="0625d1616b84e58f7d2be19de1e6f136e6542f1c" translate="yes" xml:space="preserve">
          <source>Our code to call functions with pointers will look like this:</source>
          <target state="translated">ポインタを使って関数を呼び出すコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="82b08dc063f75e99580fde46838e1e3a9e711f19" translate="yes" xml:space="preserve">
          <source>Our factory is marked with the &lt;code&gt;expect&lt;/code&gt; keyword. &lt;code&gt;expect&lt;/code&gt; is a mechanism to define a requirement, which every platform should provide in order for the common part to work properly. So on each platform we should provide the &lt;code&gt;actual&lt;/code&gt;&lt;code&gt;Base64Factory&lt;/code&gt; which knows how to create the platform-specific encoder. You can read more about platform specific declarations &lt;a href=&quot;../reference/platform-specific-declarations&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">私たちの工場は &lt;code&gt;expect&lt;/code&gt; キーワードでマークされています。 &lt;code&gt;expect&lt;/code&gt; は、共通部分が適切に機能するためにすべてのプラットフォームが提供する必要がある要件を定義するメカニズムです。したがって、各プラットフォームで、プラットフォーム固有のエンコーダーの作成方法を知っている &lt;code&gt;actual&lt;/code&gt; &lt;code&gt;Base64Factory&lt;/code&gt; を提供する必要があります。プラットフォーム固有の宣言について詳しくは、&lt;a href=&quot;../reference/platform-specific-declarations&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9618079b890493b724f82c893c8117a26cd9973f" translate="yes" xml:space="preserve">
          <source>Our first application is simply going to print some text on the standard output. In our case, this text is &quot;Hello Kotlin/Native&quot;. We can open up our favorite IDE or editor and write the following code in a file named &lt;code&gt;hello.kt&lt;/code&gt;:</source>
          <target state="translated">最初のアプリケーションは、標準出力にテキストを印刷するだけです。私たちの場合、このテキストは「Hello Kotlin / Native」です。お気に入りのIDEまたはエディターを開き、次のコードを &lt;code&gt;hello.kt&lt;/code&gt; という名前のファイルに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="94bfc3111bbdf55e54097cc4c8b45667119c21af" translate="yes" xml:space="preserve">
          <source>Our first multiplatform library is almost ready. The last step is to publish it, so other projects can then depend on our library. To make the publishing mechanism work, you should enable the experimental Gradle feature in &lt;code&gt;settings.gradle&lt;/code&gt;:</source>
          <target state="translated">最初のマルチプラットフォームライブラリはほぼ準備ができています。最後のステップはそれを公開することなので、他のプロジェクトは私たちのライブラリに依存することができます。公開メカニズムを機能させるには、 &lt;code&gt;settings.gradle&lt;/code&gt; で試験的なGradle機能を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="95dbdf808fd430fab749c0243fcb9f04f2b77f95" translate="yes" xml:space="preserve">
          <source>Our goal is to build a small multiplatform library to demonstrate the ability to share the code between the platforms and its benefits. In order to have a small implementation to focus on the multiplatform machinery, we will write a library which converts raw data (strings and byte arrays) to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;Base64&lt;/a&gt; format which can be used on JVM, JS, and any available K/N platform. On JVM implementation will be using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html&quot;&gt;&lt;code&gt;java.util.Base64&lt;/code&gt;&lt;/a&gt; which is known to be extremely efficient because JVM is aware of this particular class and compiles it in a special way. On JS we will be using the native &lt;a href=&quot;https://nodejs.org/docs/latest/api/buffer.html&quot;&gt;Buffer&lt;/a&gt; API and on Kotlin/Native we will write our own implementation. We will cover this functionality with common tests and then publish the resulting library to Maven.</source>
          <target state="translated">私たちの目標は、小さなマルチプラットフォームライブラリを構築して、プラットフォーム間でコードを共有する機能とその利点を実証することです。マルチプラットフォームマシンに焦点を当てた小さな実装を実現するために、生データ（文字列とバイト配列）を、JVM、JS、および利用可能なすべてのK / Nプラットフォームで使用できる&lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;Base64&lt;/a&gt;形式に変換するライブラリを作成します。 JVMの実装では、JVMがこの特定のクラスを認識して特別な方法でコンパイルするため、非常に効率的であることが知られている&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html&quot;&gt; &lt;code&gt;java.util.Base64&lt;/code&gt; &lt;/a&gt;を使用します。 JSではネイティブの&lt;a href=&quot;https://nodejs.org/docs/latest/api/buffer.html&quot;&gt;Buffer&lt;/a&gt; APIを使用し、Kotlin / Nativeでは独自の実装を作成します。この機能を一般的なテストでカバーし、結果のライブラリをMavenに公開します。</target>
        </trans-unit>
        <trans-unit id="28e418729eb2ef55e18bb9c364e7664f07141956" translate="yes" xml:space="preserve">
          <source>Our goal of this tutorial is to demonstrate the ability to share code within Kotlin and the benefits it provides. While what we'll be looking at is a simplified application, what is shown here can be applied to real world applications, independent of their size or complexity.</source>
          <target state="translated">このチュートリアルの目的は、Kotlin内でコードを共有する能力と、それがもたらすメリットを実証することです。これから見ていくものは単純化されたアプリケーションですが、ここで示されているものは、その大きさや複雑さに関係なく、実世界のアプリケーションに適用することができます。</target>
        </trans-unit>
        <trans-unit id="4e88e8917a2f0fd2340eeca26b8e09a5c15c5c1b" translate="yes" xml:space="preserve">
          <source>OutOfMemoryError</source>
          <target state="translated">OutOfMemoryError</target>
        </trans-unit>
        <trans-unit id="2ea2bd35ad59a2939c5dcd7aeb754e6a11bc0c9c" translate="yes" xml:space="preserve">
          <source>Output file path</source>
          <target state="translated">出力ファイルのパス</target>
        </trans-unit>
        <trans-unit id="4e314e13bdbb2fd6cd6b6a8ef78fddfab3a9b341" translate="yes" xml:space="preserve">
          <source>Output kinds</source>
          <target state="translated">出力の種類</target>
        </trans-unit>
        <trans-unit id="8d54e195aea506e4a8eb397299d73595ce957ff6" translate="yes" xml:space="preserve">
          <source>Output kinds (e.g. executable, library, framework etc)</source>
          <target state="translated">出力の種類 (実行形式、ライブラリ、フレームワークなど)</target>
        </trans-unit>
        <trans-unit id="691402679267af452a6063a6c55ee9c23954ac22" translate="yes" xml:space="preserve">
          <source>Output kinds can also be specified using a special property:</source>
          <target state="translated">また、特殊なプロパティを使用して出力の種類を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="4172d77e28118d4345ad2b9c32b7c79ad5281e26" translate="yes" xml:space="preserve">
          <source>Overall, multiplatform is not about compiling all code for all platforms. This model has its obvious limitations, and we understand that modern applications need access to unique features of the platforms they are running on. Kotlin doesn't limit you to the common subset of all APIs in the world. Every component can share as much code as needed with others but can access platform APIs at any time through the &lt;a href=&quot;platform-specific-declarations&quot;&gt;&lt;code&gt;expect&lt;/code&gt;/&lt;code&gt;actual&lt;/code&gt; mechanism&lt;/a&gt; provided by the language.</source>
          <target state="translated">全体として、マルチプラットフォームとは、すべてのプラットフォームのすべてのコードをコンパイルすることではありません。このモデルには明らかな制限があり、最新のアプリケーションは、それらが実行されているプラ​​ットフォームの固有の機能にアクセスする必要があることを理解しています。Kotlinは、世界中のすべてのAPIの共通サブセットに制限されません。すべてのコンポーネントは、他のコンポーネントと必要なだけのコードを共有できますが、言語によって提供される&lt;a href=&quot;platform-specific-declarations&quot;&gt; &lt;code&gt;expect&lt;/code&gt; / &lt;code&gt;actual&lt;/code&gt; メカニズム&lt;/a&gt;を通じて、いつでもプラットフォームAPIにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7985f98f2e4e8de528bf2f20b91d10b65fb5b978" translate="yes" xml:space="preserve">
          <source>OverconstrainedErrorEventInit</source>
          <target state="translated">OverconstrainedErrorEventInit</target>
        </trans-unit>
        <trans-unit id="c952d0b1979fee4876fed3b2bae9f5ed565aaabe" translate="yes" xml:space="preserve">
          <source>Overload layout</source>
          <target state="translated">オーバーロードレイアウト</target>
        </trans-unit>
        <trans-unit id="3e7d88ee10c3c15b721eb8187cd87f4643715ad2" translate="yes" xml:space="preserve">
          <source>Overloaded functions and properties provided by the same library should do essentially the same thing. Changes in type inference may result in more precise static types to be known at call sites causing changes in overload resolution.</source>
          <target state="translated">同じライブラリで提供されるオーバーロードされた関数やプロパティは、基本的には同じことを行うべきです。型推論の変更により、コールサイトでより正確なスタティック型を知ることができるようになり、オーバーロードの解決方法が変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="cb2f163ccc20cb7388203cf1edbc6860b44ea0f0" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Overloading</target>
        </trans-unit>
        <trans-unit id="e6b45b9a5e179e49e414143db015c18fc536c9e5" translate="yes" xml:space="preserve">
          <source>Overloads generation</source>
          <target state="translated">過負荷の発生</target>
        </trans-unit>
        <trans-unit id="da5b2097ee60b501632c6242ff39b9bd62ccc1fa" translate="yes" xml:space="preserve">
          <source>OverrideInit</source>
          <target state="translated">OverrideInit</target>
        </trans-unit>
        <trans-unit id="945393d320ad2e84b266063f79c1d098c79b4bbb" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-abstract-mutable-list/remove-range&quot;&gt;AbstractMutableList.removeRange&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-abstract-mutable-list/remove-range&quot;&gt;AbstractMutableList.removeRangeを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="0412fb2e7e855fc5b71c429e7e8296c4512d1ddd" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-collection/contains&quot;&gt;Collection.contains&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-collection/contains&quot;&gt;Collection.containsを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="e14d55c91b7965c1d6d631c1d07de9fa97080766" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-collection/contains-all&quot;&gt;Collection.containsAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-collection/contains-all&quot;&gt;Collection.containsAllを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="2ad0612dea8eaabf434ce52e7c783f5c48e2fddd" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-collection/is-empty&quot;&gt;Collection.isEmpty&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-collection/is-empty&quot;&gt;Collection.isEmptyを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="d8395525fedec5005642af530ca89906f16d5c31" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-collection/size&quot;&gt;Collection.size&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-collection/size&quot;&gt;Collection.sizeを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="c1bc61ce06e0fb2fbb1ac1456d5615e48f2ac19c" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-comparable/compare-to&quot;&gt;Comparable.compareTo&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-comparable/compare-to&quot;&gt;Comparable.compareToを&lt;/a&gt;オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1459fd426ebdbfd085b335b7740dd0d1604898aa" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-hash-map/create-entry-set&quot;&gt;HashMap.createEntrySet&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-hash-map/create-entry-set&quot;&gt;HashMap.createEntrySetを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="505ce4c5312a657ad2db2ad4fea4db1bac36448a" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-list/contains-all&quot;&gt;List.containsAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-list/contains-all&quot;&gt;List.containsAllを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="28eb9265deb1aca2369498234fa6e7ab3b001351" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-list/is-empty&quot;&gt;List.isEmpty&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-list/is-empty&quot;&gt;List.isEmptyを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="c04e861e843e37f9b39e84afa025cedf23f0ed4f" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-map/contains-key&quot;&gt;Map.containsKey&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-map/contains-key&quot;&gt;Map.containsKeyを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="e53018f590dae1ff51f24c1f87b670d484b8f15a" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-map/contains-value&quot;&gt;Map.containsValue&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-map/contains-value&quot;&gt;Map.containsValueを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="cfe3ee98c24d2eafcfa0a1b7987dfb17585cc22b" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-map/get&quot;&gt;Map.get&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-map/get&quot;&gt;Map.getを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="f7c1b304b14830a9f0f416fe6b1b545a7f67fb53" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-map/is-empty&quot;&gt;Map.isEmpty&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-map/is-empty&quot;&gt;Map.isEmptyを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="7c9545ba01bf1ee531740e0b11ca9b68428d91ec" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-map/size&quot;&gt;Map.size&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-map/size&quot;&gt;Map.sizeを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="3810cd8fb4b8df070f0c23138c79569b47ec271b" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-collection/iterator&quot;&gt;MutableCollection.iterator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-collection/iterator&quot;&gt;MutableCollection.iteratorを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="a16c6d97eeab4cc2591210ac7d932680db232505" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-list/add-all&quot;&gt;MutableList.addAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-list/add-all&quot;&gt;MutableList.addAllを&lt;/a&gt;オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="ada0d5a0992424195238c6fd7c187d4766c440c7" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-list/remove&quot;&gt;MutableList.remove&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-list/remove&quot;&gt;MutableList.removeを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="bc669baa4972bad392b7374e99e00a2abfded1a1" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-map/entries&quot;&gt;MutableMap.entries&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-map/entries&quot;&gt;MutableMap.entriesを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="c79ad03c13d000b71f177595ec492a2c28395c7c" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-map/keys&quot;&gt;MutableMap.keys&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-map/keys&quot;&gt;MutableMap.keysを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="5b4898ab832f11850009ac41b011794ef75cd869" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-map/put-all&quot;&gt;MutableMap.putAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-map/put-all&quot;&gt;MutableMap.putAllを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="cec29412680bec28164c0fe1f70dd087fad233d4" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-map/values&quot;&gt;MutableMap.values&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-map/values&quot;&gt;MutableMap.valuesを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="ed46cf9a43917b66a54752db98f6e6b09e0df162" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/add&quot;&gt;MutableSet.add&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/add&quot;&gt;MutableSet.addを&lt;/a&gt;オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="dcf426c10d6d909d196a9b9f3bb5c61847249c1e" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/add-all&quot;&gt;MutableSet.addAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/add-all&quot;&gt;MutableSet.addAllを&lt;/a&gt;オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="c002bcae05fefbc9d774039c0200e1713b4fb644" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/clear&quot;&gt;MutableSet.clear&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/clear&quot;&gt;MutableSet.clearを&lt;/a&gt;オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="e205316a797cc598058f2ad91e62f19dc98b0380" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/iterator&quot;&gt;MutableSet.iterator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/iterator&quot;&gt;MutableSet.iteratorを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="6eefd798285aa9425a8b6f34535ea9d116cd7648" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/remove&quot;&gt;MutableSet.remove&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/remove&quot;&gt;MutableSet.removeを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="f5451bba7280c8ab2b1022ec4b8e432dddb2d0bb" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/remove-all&quot;&gt;MutableSet.removeAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/remove-all&quot;&gt;MutableSet.removeAllを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="13a378d256016ef3849bfd324183fff8ada7718f" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-mutable-set/retain-all&quot;&gt;MutableSet.retainAll&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-mutable-set/retain-all&quot;&gt;MutableSet.retainAllを&lt;/a&gt;オーバーライドします。</target>
        </trans-unit>
        <trans-unit id="d5ffc92d2081ab9845fc58c54bbc6bf33bdd927b" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-set/contains&quot;&gt;Set.contains&lt;/a&gt;</source>
          <target state="translated">オーバーライド&lt;a href=&quot;../-set/contains&quot;&gt;Set.contains&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33d8d25ed831ccbd1a9c6a50b579b3e39a486849" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-set/contains-all&quot;&gt;Set.containsAll&lt;/a&gt;</source>
          <target state="translated">オーバーライド&lt;a href=&quot;../-set/contains-all&quot;&gt;Set.containsAll&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ad60553efc9175c88ee2751fcb3da2043c4d1c8" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-set/is-empty&quot;&gt;Set.isEmpty&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-set/is-empty&quot;&gt;Set.isEmptyを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="4661e6d5d55bf62af3f8308493e1657e6b0acdc7" translate="yes" xml:space="preserve">
          <source>Overrides &lt;a href=&quot;../-set/size&quot;&gt;Set.size&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../-set/size&quot;&gt;Set.sizeを&lt;/a&gt;オーバーライドします</target>
        </trans-unit>
        <trans-unit id="c6135137749f44ab01770866a1a5ad05ffe9fd2a" translate="yes" xml:space="preserve">
          <source>Overriding</source>
          <target state="translated">Overriding</target>
        </trans-unit>
        <trans-unit id="af9d2c60b74a53b5cbb456ba0c99630df9bb378f" translate="yes" xml:space="preserve">
          <source>Overriding Methods</source>
          <target state="translated">メソッドのオーバーライド</target>
        </trans-unit>
        <trans-unit id="7b07f68f7f2b7a58542addc9fbcb507ada81c4d7" translate="yes" xml:space="preserve">
          <source>Overriding Properties</source>
          <target state="translated">プロパティのオーバーライド</target>
        </trans-unit>
        <trans-unit id="fde9d61f62ecf5fdc44c2db7338a8f6a77860c34" translate="yes" xml:space="preserve">
          <source>Overriding Rules</source>
          <target state="translated">上書きルール</target>
        </trans-unit>
        <trans-unit id="df0d0d85b110978af70f5bd1f72ba4d032e833dd" translate="yes" xml:space="preserve">
          <source>Overriding a member of an interface implemented by delegation</source>
          <target state="translated">委任によって実装されたインタフェースのメンバをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="18feeb4f63051a8c733b4345362ff0a45e9ffcb1" translate="yes" xml:space="preserve">
          <source>Overriding methods always use the same default parameter values as the base method. When overriding a method with default parameter values, the default parameter values must be omitted from the signature:</source>
          <target state="translated">オーバーライド・メソッドは、常にベース・メソッドと同じ既定のパラメータ値を使用します。デフォルトのパラメータ値を持つメソッドをオーバーライドする場合は、シグネチャからデフォルトのパラメータ値を省略しなければなりません。</target>
        </trans-unit>
        <trans-unit id="00e581c34738ebec4dc6d1e8b2a8c45ac0c758a8" translate="yes" xml:space="preserve">
          <source>Overriding properties works in a similar way to overriding methods; properties declared on a superclass that are then redeclared on a derived class must be prefaced with &lt;em&gt;override&lt;/em&gt;, and they must have a compatible type. Each declared property can be overridden by a property with an initializer or by a property with a getter method.</source>
          <target state="translated">プロパティのオーバーライドは、メソッドのオーバーライドと同様に機能します。スーパークラスで宣言されたプロパティは、派生クラスで再宣言され、その前に&lt;em&gt;override&lt;/em&gt;がなければならず、互換性のある型でなければなりません。宣言された各プロパティは、初期化子を持つプロパティまたはゲッターメソッドを持つプロパティによってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="c7a86015f3f4daeacc41d303c97f2340f4320e19" translate="yes" xml:space="preserve">
          <source>PARAGRAPH_SEPARATOR</source>
          <target state="translated">PARAGRAPH_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="fa7ff6fb00a7ace8d98cf880a492dc6c5ffc8ca7" translate="yes" xml:space="preserve">
          <source>PI</source>
          <target state="translated">PI</target>
        </trans-unit>
        <trans-unit id="090d50c51374f7c58b2081f1b3c850d6b151f3fb" translate="yes" xml:space="preserve">
          <source>PLEASE NOTE THAT THIS ANNOTATION MAY GO AWAY IN UPCOMING RELEASES.</source>
          <target state="translated">このアノテーションは今後のリリースで消える可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ac606dbad42d1c4714aa6a9bf09911a8e876ff06" translate="yes" xml:space="preserve">
          <source>POP_DIRECTIONAL_FORMAT</source>
          <target state="translated">POP_DIRECTIONAL_FORMAT</target>
        </trans-unit>
        <trans-unit id="8f1690cac270605877b569090a52e1dedb1b3cb7" translate="yes" xml:space="preserve">
          <source>POSITIVE_INFINITY</source>
          <target state="translated">POSITIVE_INFINITY</target>
        </trans-unit>
        <trans-unit id="990bb56af7a024a4883a4f48eec334c61fe2cdba" translate="yes" xml:space="preserve">
          <source>POSIX bindings</source>
          <target state="translated">POSIX バインディング</target>
        </trans-unit>
        <trans-unit id="b0b7ba4666a92774e0d1afe02f2e20982b307a35" translate="yes" xml:space="preserve">
          <source>PRIVATE</source>
          <target state="translated">PRIVATE</target>
        </trans-unit>
        <trans-unit id="ef502b9eaf7d1ece878343d111c2927f242ad5cc" translate="yes" xml:space="preserve">
          <source>PRIVATE_USE</source>
          <target state="translated">PRIVATE_USE</target>
        </trans-unit>
        <trans-unit id="270be4f67efbcd132dfcd88a1e60b5ca9c489764" translate="yes" xml:space="preserve">
          <source>PROPERTY</source>
          <target state="translated">PROPERTY</target>
        </trans-unit>
        <trans-unit id="d3ec62f1035daa7ed06a217fced23ccea0d00c91" translate="yes" xml:space="preserve">
          <source>PROPERTY_GETTER</source>
          <target state="translated">PROPERTY_GETTER</target>
        </trans-unit>
        <trans-unit id="d707324b9f9cc3ad9cba4772ed64b65d98a95c24" translate="yes" xml:space="preserve">
          <source>PROPERTY_SETTER</source>
          <target state="translated">PROPERTY_SETTER</target>
        </trans-unit>
        <trans-unit id="a2b61061be5708d1feb96030d399b2c2f58cdefe" translate="yes" xml:space="preserve">
          <source>PROTECTED</source>
          <target state="translated">PROTECTED</target>
        </trans-unit>
        <trans-unit id="d1785ca28c3a4d29a6edef1520c544b838a93db3" translate="yes" xml:space="preserve">
          <source>PUBLIC</source>
          <target state="translated">PUBLIC</target>
        </trans-unit>
        <trans-unit id="08453087a04e6d708ae6af6c0c3c47e6d23edde0" translate="yes" xml:space="preserve">
          <source>PUBLICATION</source>
          <target state="translated">PUBLICATION</target>
        </trans-unit>
        <trans-unit id="1acf69c571fbafbcee4b870789cee7bcbb8486b2" translate="yes" xml:space="preserve">
          <source>Package kotlin</source>
          <target state="translated">kotlin パッケージ</target>
        </trans-unit>
        <trans-unit id="cd7a851443ec94bf83404471697b71d0df66e2f0" translate="yes" xml:space="preserve">
          <source>Package kotlin.annotation</source>
          <target state="translated">パッケージ kotlin.annotation</target>
        </trans-unit>
        <trans-unit id="0b0b6b8914efd82619b518a2e5ab82c69a446aa1" translate="yes" xml:space="preserve">
          <source>Package kotlin.browser</source>
          <target state="translated">kotlin.browser パッケージ</target>
        </trans-unit>
        <trans-unit id="f98ef1feb55ed4b2f2b8510f8947795d64200c33" translate="yes" xml:space="preserve">
          <source>Package kotlin.collections</source>
          <target state="translated">kotlin.collections パッケージ</target>
        </trans-unit>
        <trans-unit id="e37cb9e9d8bcbc20421c89f1d4a3cf51da43105b" translate="yes" xml:space="preserve">
          <source>Package kotlin.comparisons</source>
          <target state="translated">kotlin.comparisons パッケージ</target>
        </trans-unit>
        <trans-unit id="71cef1b3291b82944ac44b05ce5cb8d1b3119eba" translate="yes" xml:space="preserve">
          <source>Package kotlin.concurrent</source>
          <target state="translated">パッケージ kotlin.concurrent</target>
        </trans-unit>
        <trans-unit id="e4f18ea6cc68a4324d9fe077bf0a3961984d1554" translate="yes" xml:space="preserve">
          <source>Package kotlin.contracts</source>
          <target state="translated">kotlin.contracts パッケージ</target>
        </trans-unit>
        <trans-unit id="c3f0584f99e1bff3d1686d68159a6bff59169eb7" translate="yes" xml:space="preserve">
          <source>Package kotlin.coroutines</source>
          <target state="translated">kotlin.coroutines パッケージ</target>
        </trans-unit>
        <trans-unit id="13aad27c51400614c352d03e9f66e8f5a41652d7" translate="yes" xml:space="preserve">
          <source>Package kotlin.coroutines.experimental</source>
          <target state="translated">kotlin.coroutines.experimental パッケージ</target>
        </trans-unit>
        <trans-unit id="033de5e0946bf28aaac381c847cffe4d782bd722" translate="yes" xml:space="preserve">
          <source>Package kotlin.coroutines.experimental.intrinsics</source>
          <target state="translated">パッケージ kotlin.coroutines.experimental.intrinsics</target>
        </trans-unit>
        <trans-unit id="87133af8c88889df654f8f71db6e286dd608d5fa" translate="yes" xml:space="preserve">
          <source>Package kotlin.coroutines.intrinsics</source>
          <target state="translated">kotlin.coroutines.intrinsics パッケージ</target>
        </trans-unit>
        <trans-unit id="c3ca4a3850ac6d9e19b6ae38b8c180f32a27e07d" translate="yes" xml:space="preserve">
          <source>Package kotlin.dom</source>
          <target state="translated">kotlin.dom パッケージ</target>
        </trans-unit>
        <trans-unit id="63e7d0f241ae2c6d73d5113efe433fd6b16bfc09" translate="yes" xml:space="preserve">
          <source>Package kotlin.experimental</source>
          <target state="translated">kotlin.experimental パッケージ</target>
        </trans-unit>
        <trans-unit id="4d1d32e94e7e305e7e74c66f1a8d27388a6f7269" translate="yes" xml:space="preserve">
          <source>Package kotlin.io</source>
          <target state="translated">basins.io のパッケージ</target>
        </trans-unit>
        <trans-unit id="9148e6520fffdc9c48b55a2794c808085a9f0cd6" translate="yes" xml:space="preserve">
          <source>Package kotlin.js</source>
          <target state="translated">basin.jsをパッケージ化</target>
        </trans-unit>
        <trans-unit id="b067f7df3bfc6bf39daa5b6a3cf9419ebcbd8775" translate="yes" xml:space="preserve">
          <source>Package kotlin.jvm</source>
          <target state="translated">kotlin.jvm パッケージ</target>
        </trans-unit>
        <trans-unit id="1c4631b1ff0fc35addd0ed5763af022f852b0ee0" translate="yes" xml:space="preserve">
          <source>Package kotlin.math</source>
          <target state="translated">basins.math のパッケージ</target>
        </trans-unit>
        <trans-unit id="380f686b8b67135abd2a9fbcd860a050f035ba1e" translate="yes" xml:space="preserve">
          <source>Package kotlin.native</source>
          <target state="translated">kotlin.native パッケージ</target>
        </trans-unit>
        <trans-unit id="067cec4056c78d5de990524297dbd7e14e26acb8" translate="yes" xml:space="preserve">
          <source>Package kotlin.native.concurrent</source>
          <target state="translated">パッケージ kotlin.native.concurrent</target>
        </trans-unit>
        <trans-unit id="a8c824bf1148ae3f803dbb32696043852e7097aa" translate="yes" xml:space="preserve">
          <source>Package kotlin.native.ref</source>
          <target state="translated">kotlin.native.ref パッケージ</target>
        </trans-unit>
        <trans-unit id="c301d459bbf6656d24ab507e636602bd17a0c738" translate="yes" xml:space="preserve">
          <source>Package kotlin.properties</source>
          <target state="translated">kotlin.properties パッケージ</target>
        </trans-unit>
        <trans-unit id="bb07a784b727441a9b1b60cbd2404284b4fae5d4" translate="yes" xml:space="preserve">
          <source>Package kotlin.random</source>
          <target state="translated">kotlin.randomパッケージ</target>
        </trans-unit>
        <trans-unit id="6c6f61724e126196b76789c3a20a34174e6a544b" translate="yes" xml:space="preserve">
          <source>Package kotlin.ranges</source>
          <target state="translated">kotlin.range パッケージ</target>
        </trans-unit>
        <trans-unit id="5e3cb5f6f9234dfe542737aa5e1111a067757cfd" translate="yes" xml:space="preserve">
          <source>Package kotlin.reflect</source>
          <target state="translated">kotlin.reflect パッケージ</target>
        </trans-unit>
        <trans-unit id="76b85e57e328f6322d2f156ebec00bc356e55083" translate="yes" xml:space="preserve">
          <source>Package kotlin.reflect.full</source>
          <target state="translated">kotlin.reflect.full パッケージ</target>
        </trans-unit>
        <trans-unit id="bc16787d08622bd2dc2bddfe3c63c9cf72fae338" translate="yes" xml:space="preserve">
          <source>Package kotlin.reflect.jvm</source>
          <target state="translated">kotlin.reflect.jvm パッケージ</target>
        </trans-unit>
        <trans-unit id="5e7391e934d90c3cbc1c67d3786a56ce6d538586" translate="yes" xml:space="preserve">
          <source>Package kotlin.sequences</source>
          <target state="translated">kotlin.sequence パッケージ</target>
        </trans-unit>
        <trans-unit id="0d739b0c687d296660761c625d582a76e2f6c5ab" translate="yes" xml:space="preserve">
          <source>Package kotlin.streams</source>
          <target state="translated">kotlin.stream をパッケージ化</target>
        </trans-unit>
        <trans-unit id="35f5ba85dbc3f020cb30371add30a2922d4e9ae5" translate="yes" xml:space="preserve">
          <source>Package kotlin.system</source>
          <target state="translated">ベイスンパッケージ.system</target>
        </trans-unit>
        <trans-unit id="d85232ffe7c1124903c6ca95ad8427074d72f56f" translate="yes" xml:space="preserve">
          <source>Package kotlin.text</source>
          <target state="translated">kotlin.text パッケージ</target>
        </trans-unit>
        <trans-unit id="a42fef5b118b647e415749814e18ff6ec658922e" translate="yes" xml:space="preserve">
          <source>Package kotlinx.cinterop</source>
          <target state="translated">kotlinx.cinterop パッケージ</target>
        </trans-unit>
        <trans-unit id="8c8cfe52d8daa0836a022131cbee708a414b763f" translate="yes" xml:space="preserve">
          <source>Package kotlinx.cinterop.internal</source>
          <target state="translated">kotlinx.cinterop.internalパッケージ</target>
        </trans-unit>
        <trans-unit id="ebaf6054eaa0e0044893bf6544f260a83b0424b5" translate="yes" xml:space="preserve">
          <source>Package kotlinx.wasm.jsinterop</source>
          <target state="translated">kotlinx.wasm.jsinterop パッケージ</target>
        </trans-unit>
        <trans-unit id="caec6c3341b515b8b418beabf7e2a33258bb17c6" translate="yes" xml:space="preserve">
          <source>Package names customarily contain only lowercase letters (no underscores) and the separating dots.</source>
          <target state="translated">パッケージ名は通常、小文字(アンダースコアなし)と区切りのドットのみで構成されています。</target>
        </trans-unit>
        <trans-unit id="1997cd46b56d4233defaefae294513a03aaa5170" translate="yes" xml:space="preserve">
          <source>Package names customarily correspond to the directory structure - note that the source file name should &lt;em&gt;not&lt;/em&gt; be a part of the package name (so if you follow this, file-level symbol names must be unique within an entire directory, not just within a file). However, this correspondence is not required, so if you're going to do interop with Java code and all your package names must start with the same prefix, e.g. &lt;code&gt;org.khanacademy&lt;/code&gt;, you might be relieved to learn that you don't need to put all your code inside &lt;code&gt;org/khanacademy&lt;/code&gt; (which is what Java would have forced you to do) - instead, you could start out with a directory called e.g. &lt;code&gt;content&lt;/code&gt;, and the files inside it could declare that they belong to the package &lt;code&gt;org.khanacademy.content&lt;/code&gt;. However, if you have a mixed project with both Kotlin and Java code, the convention is to use the Java-style package directories for Kotlin code too.</source>
          <target state="translated">パッケージ名は慣習的にディレクトリ構造に対応します-ソースファイル名はパッケージ名の一部であってはいけ&lt;em&gt;ない&lt;/em&gt;ことに注意してください（これに従う場合、ファイルレベルのシンボル名はファイル内だけでなく、ディレクトリ全体で一意でなければなりません） 。ただし、この対応は必須ではないため、Javaコードと相互運用する予定で、すべてのパッケージ名が同じ接頭辞で &lt;code&gt;org.khanacademy&lt;/code&gt; 必要がある場合（例：org.khanacademy）、必要がないことを知って安心できる場合があります。すべてのコードを &lt;code&gt;org/khanacademy&lt;/code&gt; 内に配置します（これにより、Javaが強制的に実行することになります）。代わりに、たとえば &lt;code&gt;content&lt;/code&gt; という名前のディレクトリから開始し、その中のファイルがパッケージに属していることを宣言できます。 &lt;code&gt;org.khanacademy.content&lt;/code&gt; 。ただし、KotlinとJavaコードの両方が混在するプロジェクトの場合、規約はKotlinコードにもJavaスタイルのパッケージディレクトリを使用することです。</target>
        </trans-unit>
        <trans-unit id="aaa78bc5394b57af9de0e50cdfd169280ce28bd0" translate="yes" xml:space="preserve">
          <source>Package specification should be at the top of the source file:</source>
          <target state="translated">パッケージの指定はソースファイルの先頭にあるべきです。</target>
        </trans-unit>
        <trans-unit id="2b3dada27bfad5ff51da937fccac0bdd7dc89386" translate="yes" xml:space="preserve">
          <source>Package structure</source>
          <target state="translated">パッケージ構造</target>
        </trans-unit>
        <trans-unit id="7057dbd64229d83d6ca51bbfe7c0c59bf7d92332" translate="yes" xml:space="preserve">
          <source>Package-level default nullability is also supported:</source>
          <target state="translated">パッケージレベルのデフォルトのヌル可能性もサポートされています。</target>
        </trans-unit>
        <trans-unit id="c52d65263eedea9fdaa00300b3ce188059fefc64" translate="yes" xml:space="preserve">
          <source>Package-level documentation can be provided in a separate Markdown file.</source>
          <target state="translated">パッケージレベルのドキュメントは、別のMarkdownファイルで提供することができます。</target>
        </trans-unit>
        <trans-unit id="1b1501997eed23c21b32688fb7a28bc3e490834e" translate="yes" xml:space="preserve">
          <source>Package-level functions</source>
          <target state="translated">パッケージレベルの機能</target>
        </trans-unit>
        <trans-unit id="0a999012ffb87b3edac99adbdfc498b12831a1e2" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">Packages</target>
        </trans-unit>
        <trans-unit id="af5cf28c492734cbbda868ac8554c7074b2c5f93" translate="yes" xml:space="preserve">
          <source>Packages and imports</source>
          <target state="translated">パッケージと輸入</target>
        </trans-unit>
        <trans-unit id="ebda79463818f2e1578e5acabbc0ad173c9872fe" translate="yes" xml:space="preserve">
          <source>Pads the string to the specified &lt;a href=&quot;../../kotlin.text/pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; at the end with the specified character or space.</source>
          <target state="translated">文字列の最後に、指定した文字またはスペースを指定した&lt;a href=&quot;../../kotlin.text/pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;長さ&lt;/a&gt;で埋め込みます。</target>
        </trans-unit>
        <trans-unit id="767af9725b3d4c9fe548e4663f41a118fa6618d4" translate="yes" xml:space="preserve">
          <source>Pads the string to the specified &lt;a href=&quot;../../kotlin.text/pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; at the beginning with the specified character or space.</source>
          <target state="translated">指定&lt;a href=&quot;../../kotlin.text/pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;さ&lt;/a&gt;れた文字またはスペースで文字列の先頭を指定された長さに埋め込みます。</target>
        </trans-unit>
        <trans-unit id="9775fcfa1dfc8830c5f2709b3a7edd29275c524d" translate="yes" xml:space="preserve">
          <source>Pads the string to the specified &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; at the end with the specified character or space.</source>
          <target state="translated">文字列の最後に、指定した文字またはスペースを指定した&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;長さ&lt;/a&gt;で埋め込みます。</target>
        </trans-unit>
        <trans-unit id="33bae32d321b0a79faa5343f57ebe7de7553943a" translate="yes" xml:space="preserve">
          <source>Pads the string to the specified &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; at the beginning with the specified character or space.</source>
          <target state="translated">指定&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;さ&lt;/a&gt;れた文字またはスペースで文字列の先頭を指定された長さに埋め込みます。</target>
        </trans-unit>
        <trans-unit id="5ea1680b49ef979617b212c8216d0d6bb5ae052a" translate="yes" xml:space="preserve">
          <source>PageTransitionEventInit</source>
          <target state="translated">PageTransitionEventInit</target>
        </trans-unit>
        <trans-unit id="2537f88ac2f56246c757a78fd250fe571c25bb72" translate="yes" xml:space="preserve">
          <source>Pair</source>
          <target state="translated">Pair</target>
        </trans-unit>
        <trans-unit id="78ee15380355e435a919e49f0511d53edfaf1824" translate="yes" xml:space="preserve">
          <source>Parameter names in the bytecode</source>
          <target state="translated">バイトコード内のパラメータ名</target>
        </trans-unit>
        <trans-unit id="01d96306f74636eb4b351ade766a2344184143f9" translate="yes" xml:space="preserve">
          <source>ParameterName</source>
          <target state="translated">ParameterName</target>
        </trans-unit>
        <trans-unit id="5e3bb0ac99a7fedf581a36f6d24c3ac15104d602" translate="yes" xml:space="preserve">
          <source>Parameterless &lt;code&gt;main&lt;/code&gt;</source>
          <target state="translated">パラメータなしの &lt;code&gt;main&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="6007e884de03062ce98684d67d70e4363c749a71" translate="yes" xml:space="preserve">
          <source>Parameters required to make a call to this callable. If this callable requires a &lt;code&gt;this&lt;/code&gt; instance or an extension receiver parameter, they come first in the list in that order.</source>
          <target state="translated">この呼び出し可能オブジェクトを呼び出すために必要なパラメーター。この呼び出し可能オブジェクトが &lt;code&gt;this&lt;/code&gt; インスタンスまたは拡張レシーバーパラメーターを必要とする場合、それらはこの順序でリストの最初に来ます。</target>
        </trans-unit>
        <trans-unit id="f5496d18f32dc79533fd367651808a9138a4d742" translate="yes" xml:space="preserve">
          <source>ParentNode</source>
          <target state="translated">ParentNode</target>
        </trans-unit>
        <trans-unit id="9a4a33cbe10dd7250f2202d387f7bf2828634043" translate="yes" xml:space="preserve">
          <source>Parental responsibilities</source>
          <target state="translated">親の責任</target>
        </trans-unit>
        <trans-unit id="c3cc6a8da3b5889ae78a89bccdb3931e409a93df" translate="yes" xml:space="preserve">
          <source>Parentheses are translated to calls to &lt;code&gt;invoke&lt;/code&gt; with appropriate number of arguments.</source>
          <target state="translated">括弧は、適切な数の引数で &lt;code&gt;invoke&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="3b7f40c00b71d845b696c035abe99affb5e55e29" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="77e9ea428cbac46623806a26e06a724d80dd803a" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3460dc9977c3211b2a7212ebddcc3de19130d09f" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../-u-long/index&quot;&gt;ULong&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-long/index&quot;&gt;ULong&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="e9566c12a33fe4f91d3368cf5c55f5b83e3844f3" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../-u-short/index&quot;&gt;UShort&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-short/index&quot;&gt;UShort&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="03fcee6f1bc05077ccafc1ad6f1c9dc53e972374" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5e57d89119057c3c3cefa6d5760b7304e4a55a29" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-double/index#kotlin.Double&quot;&gt;Double&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="e017592a7860cb2ba99a028eb4332791a37cb61b" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9fd243710f5d1156a68a9fda79cfcc500a1e3a94" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-float/index#kotlin.Float&quot;&gt;Float&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="c4e20fa41c3f4a8ec2470fa7691ce6fd58d6695a" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b21c687bfab2a9fa2bd8c0d5151e491628e0808a" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-long/index#kotlin.Long&quot;&gt;Long&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="e00e74116039154e2eaf85ad6860873f49bc8901" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="11636b3a2888c265e9bd1e696d846d41be6f72ed" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-short/index#kotlin.Short&quot;&gt;Short&lt;/a&gt;番号として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="808c021e120df742b13d46ab170e5daa6e2439af" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="9ce207a9488f5cb14e26985fa84c2e79075ef623" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;../kotlin/-u-short/index&quot;&gt;UShort&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-short/index&quot;&gt;UShort&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="9cd24a4116bc75a4a236890965ad69b9f9889741" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;java.math.BigDecimal&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;java.math.BigDecimal&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="56aa3e835c346e617edd83fb98e8496ea6101b8b" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;java.math.BigDecimal&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;java.math.BigDecimal&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="729c13559a5f0954494982664b3cc0f0def880c2" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html&quot;&gt;java.math.BigInteger&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html&quot;&gt;java.math.BigInteger&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ac452fd9440a9fd52c2a0c6af54d266f05d9d9ad" translate="yes" xml:space="preserve">
          <source>Parses the string as a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html&quot;&gt;java.math.BigInteger&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html&quot;&gt;java.math.BigInteger&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="c00f10809b689be6b7ca4208ac2acc3fd70ee29d" translate="yes" xml:space="preserve">
          <source>Parses the string as a signed &lt;a href=&quot;../-byte/index#kotlin.Byte&quot;&gt;Byte&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を符号付き&lt;a href=&quot;../-byte/index#kotlin.Byte&quot;&gt;バイト&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1069310e66e412772969b19fcb962b6a8b050fe6" translate="yes" xml:space="preserve">
          <source>Parses the string as a signed &lt;a href=&quot;../-u-byte/index&quot;&gt;UByte&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を符号付き&lt;a href=&quot;../-u-byte/index&quot;&gt;UByte&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="3327b35f87a717b64d0f7b88020c519964110940" translate="yes" xml:space="preserve">
          <source>Parses the string as a signed &lt;a href=&quot;../kotlin/-byte/index#kotlin.Byte&quot;&gt;Byte&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を符号付き&lt;a href=&quot;../kotlin/-byte/index#kotlin.Byte&quot;&gt;バイト&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cdabe40b91498659cc5d402374e06ae3dbae6d16" translate="yes" xml:space="preserve">
          <source>Parses the string as a signed &lt;a href=&quot;../kotlin/-byte/index#kotlin.Byte&quot;&gt;Byte&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を符号付き&lt;a href=&quot;../kotlin/-byte/index#kotlin.Byte&quot;&gt;バイト&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="632dd483fc309a795c56e1b319d5db7e54bc42d9" translate="yes" xml:space="preserve">
          <source>Parses the string as a signed &lt;a href=&quot;../kotlin/-u-byte/index&quot;&gt;UByte&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を符号付き&lt;a href=&quot;../kotlin/-u-byte/index&quot;&gt;UByte&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="92127503e18a7587ff052448b8982e878082d94d" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt;数値として解析し、結果を返すか、文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="44d8eaf46733313d1ce7354e6d56a9fe33ef724f" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../-u-byte/index&quot;&gt;UByte&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-byte/index&quot;&gt;UByte&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8b85204dceef6f104ee570ddea87ef90930852cf" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../-u-int/index&quot;&gt;UInt&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-int/index&quot;&gt;UInt&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="50635bca1100c5a749ef6f79a67b0b536da17e5a" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../-u-int/index&quot;&gt;UInt&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-int/index&quot;&gt;UInt&lt;/a&gt;番号として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="099658faf2cf9e52112f13e7e0da51b61a87b74c" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../-u-long/index&quot;&gt;ULong&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-long/index&quot;&gt;ULong&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28a499686be5b8df212203a6a5db135523deaad1" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../-u-short/index&quot;&gt;UShort&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../-u-short/index&quot;&gt;UShort&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fc99fc355875545058ca7792361749550f63798f" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt;数値として解析し、結果を返すか、文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ba4b749f733fa1903c7ab78a01fb542dcb149b45" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-int/index#kotlin.Int&quot;&gt;Int&lt;/a&gt;数として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="739e3472f0ceb677cd83787ae3336ed5f607a619" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-u-byte/index&quot;&gt;UByte&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-byte/index&quot;&gt;UByte&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="77b2098c25b9ce373ba6dec00f8aaddf3c369073" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="03eab929beeb8fb71b308b00ae7c6efa65744c5c" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt; number and returns the result.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-int/index&quot;&gt;UInt&lt;/a&gt;番号として解析し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="b2ae9ff4eba3a1b62d14bb51901559b4c2994840" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-long/index&quot;&gt;ULong&lt;/a&gt;数として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1183755b1a6c59c54b593ca971bed915e51407cc" translate="yes" xml:space="preserve">
          <source>Parses the string as an &lt;a href=&quot;../kotlin/-u-short/index&quot;&gt;UShort&lt;/a&gt; number and returns the result or &lt;code&gt;null&lt;/code&gt; if the string is not a valid representation of a number.</source>
          <target state="translated">文字列を&lt;a href=&quot;../kotlin/-u-short/index&quot;&gt;UShort&lt;/a&gt;数値として解析し、結果を返します。文字列が数値の有効な表現でない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4d8d29c37cfa9d2ee47bae5429be39d9f989f27b" translate="yes" xml:space="preserve">
          <source>Partitioning</source>
          <target state="translated">Partitioning</target>
        </trans-unit>
        <trans-unit id="c75dab75d570c82239fe7c2c6c8dabcee5e46f80" translate="yes" xml:space="preserve">
          <source>Pass Kotlin function as C function pointer</source>
          <target state="translated">Kotlin関数をC関数ポインタとして渡す</target>
        </trans-unit>
        <trans-unit id="ae9ac58422160d0ad0eee983cca791d9a468b6ba" translate="yes" xml:space="preserve">
          <source>Pass a Kotlin string to C</source>
          <target state="translated">Kotlin の文字列を C に渡す</target>
        </trans-unit>
        <trans-unit id="f90e12f023572526edda5a593aaa0584b13f423c" translate="yes" xml:space="preserve">
          <source>Passing Kotlin Function as C Function Pointer</source>
          <target state="translated">Kotlin関数をC関数ポインタとして渡す</target>
        </trans-unit>
        <trans-unit id="7585c346e264607bad89b635100a35c36a66834a" translate="yes" xml:space="preserve">
          <source>Passing Kotlin string to C</source>
          <target state="translated">Kotlin の文字列を C に渡す</target>
        </trans-unit>
        <trans-unit id="0b7f3f3974a64e350e65c342a4d718ece533af30" translate="yes" xml:space="preserve">
          <source>Passing a Kotlin string to C is easy, thanks to the fact that we have &lt;code&gt;String.cstr&lt;/code&gt;&lt;a href=&quot;../../reference/extensions#extension-properties&quot;&gt;extension property&lt;/a&gt; in Kotlin for it. There is also &lt;code&gt;String.wcstr&lt;/code&gt; for cases where we need UTF-16 wide characters.</source>
          <target state="translated">Kotlinに &lt;code&gt;String.cstr&lt;/code&gt; &lt;a href=&quot;../../reference/extensions#extension-properties&quot;&gt;拡張プロパティ&lt;/a&gt;があるため、Kotlin文字列をCに渡すのは簡単です。UTF-16ワイド文字が必要な場合のための &lt;code&gt;String.wcstr&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="304a061cb8ed9f8aa67f451b3f515400a41c3804" translate="yes" xml:space="preserve">
          <source>Passing a lambda to the last parameter</source>
          <target state="translated">最後のパラメータにラムダを渡す</target>
        </trans-unit>
        <trans-unit id="c1e4d32fb03a360e8f74a53d64c38b50bc21b2dc" translate="yes" xml:space="preserve">
          <source>Passing and receiving structs by value</source>
          <target state="translated">値による構造体の受け渡し</target>
        </trans-unit>
        <trans-unit id="0d14aaea7d3a92a48681954df970dc56b82a0dd9" translate="yes" xml:space="preserve">
          <source>Passing pointers to bindings</source>
          <target state="translated">バインディングへのポインタの渡し方</target>
        </trans-unit>
        <trans-unit id="fcb96d8edb91ae75b64ef7828f16be5780218320" translate="yes" xml:space="preserve">
          <source>Passing raw compiler arguments</source>
          <target state="translated">生のコンパイラ引数を渡す</target>
        </trans-unit>
        <trans-unit id="13a5d719b2faedd726058a84f3e9eb0b6139a416" translate="yes" xml:space="preserve">
          <source>Passing single element to vararg in named form</source>
          <target state="translated">単一の要素を名前付き形式で vararg に渡す</target>
        </trans-unit>
        <trans-unit id="0c67af8f12dbf77b99536e4d73820164109f829b" translate="yes" xml:space="preserve">
          <source>Passing user data to callbacks</source>
          <target state="translated">ユーザーデータをコールバックに渡す</target>
        </trans-unit>
        <trans-unit id="c9ea761624069fe5b9a0e6e90deff94d704140b4" translate="yes" xml:space="preserve">
          <source>Path to JDK home directory to include into classpath, if differs from default JAVA_HOME</source>
          <target state="translated">デフォルトの JAVA_HOME と異なる場合、クラスパスに含める JDK ホームディレクトリへのパス</target>
        </trans-unit>
        <trans-unit id="f5e4fcf5033305d3fdfb9539698b3863c2f8d442" translate="yes" xml:space="preserve">
          <source>Path2D</source>
          <target state="translated">Path2D</target>
        </trans-unit>
        <trans-unit id="78a42d3766ebfbfee5049adb3d4ca41e9f6416e1" translate="yes" xml:space="preserve">
          <source>Paths to Kotlin libraries</source>
          <target state="translated">コトリン図書館への道</target>
        </trans-unit>
        <trans-unit id="ad6b0ffca55dac1102315c8d5a7682cc7c224b28" translate="yes" xml:space="preserve">
          <source>PerformanceNavigation</source>
          <target state="translated">PerformanceNavigation</target>
        </trans-unit>
        <trans-unit id="c239be2f9d93dc0ca884a5a073e42f4ad6b6e9a2" translate="yes" xml:space="preserve">
          <source>PerformanceTiming</source>
          <target state="translated">PerformanceTiming</target>
        </trans-unit>
        <trans-unit id="9706f87615fbda5b6b52e22687f6aba443000410" translate="yes" xml:space="preserve">
          <source>Performs a bitwise AND operation between the two values.</source>
          <target state="translated">2つの値の間でビット単位のAND演算を実行します。</target>
        </trans-unit>
        <trans-unit id="453b3283ac8b85b200cf999c3286bac224a17bf8" translate="yes" xml:space="preserve">
          <source>Performs a bitwise OR operation between the two values.</source>
          <target state="translated">2つの値の間でビット単位のOR演算を実行します。</target>
        </trans-unit>
        <trans-unit id="d6132130bbc5d03b4d898a22fb564f21209a6d16" translate="yes" xml:space="preserve">
          <source>Performs a bitwise XOR operation between the two values.</source>
          <target state="translated">2つの値の間でビット単位のXOR演算を実行します。</target>
        </trans-unit>
        <trans-unit id="2726daaa8d5cb24f28a5d0601822288498f6860b" translate="yes" xml:space="preserve">
          <source>Performs a logical &lt;code&gt;and&lt;/code&gt; operation between this Boolean and the &lt;a href=&quot;and#kotlin.Boolean%24and%28kotlin.Boolean%29%2Fother&quot;&gt;other&lt;/a&gt; one. Unlike the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator, this function does not perform short-circuit evaluation. Both &lt;code&gt;this&lt;/code&gt; and &lt;a href=&quot;and#kotlin.Boolean%24and%28kotlin.Boolean%29%2Fother&quot;&gt;other&lt;/a&gt; will always be evaluated.</source>
          <target state="translated">実行論理 &lt;code&gt;and&lt;/code&gt; 、このブールとの間で操作&lt;a href=&quot;and#kotlin.Boolean%24and%28kotlin.Boolean%29%2Fother&quot;&gt;その他&lt;/a&gt; 1。 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子とは異なり、この関数は短絡評価を実行しません。 &lt;code&gt;this&lt;/code&gt; と&lt;a href=&quot;and#kotlin.Boolean%24and%28kotlin.Boolean%29%2Fother&quot;&gt;他の&lt;/a&gt;両方は常に評価されます。</target>
        </trans-unit>
        <trans-unit id="ad41cc2ec99ee6284221d89c3a72499ca80a0d5f" translate="yes" xml:space="preserve">
          <source>Performs a logical &lt;code&gt;or&lt;/code&gt; operation between this Boolean and the &lt;a href=&quot;or#kotlin.Boolean%24or%28kotlin.Boolean%29%2Fother&quot;&gt;other&lt;/a&gt; one. Unlike the &lt;code&gt;||&lt;/code&gt; operator, this function does not perform short-circuit evaluation. Both &lt;code&gt;this&lt;/code&gt; and &lt;a href=&quot;or#kotlin.Boolean%24or%28kotlin.Boolean%29%2Fother&quot;&gt;other&lt;/a&gt; will always be evaluated.</source>
          <target state="translated">論理的な実行 &lt;code&gt;or&lt;/code&gt; このブールとの間の動作を&lt;a href=&quot;or#kotlin.Boolean%24or%28kotlin.Boolean%29%2Fother&quot;&gt;他の&lt;/a&gt; 1。 &lt;code&gt;||&lt;/code&gt; とは異なり 演算子、この関数は短絡評価を実行しません。 &lt;code&gt;this&lt;/code&gt; と&lt;a href=&quot;or#kotlin.Boolean%24or%28kotlin.Boolean%29%2Fother&quot;&gt;他の&lt;/a&gt;両方は常に評価されます。</target>
        </trans-unit>
        <trans-unit id="d8e5bacffc830263b6de1881a8720dc0d3cb5b95" translate="yes" xml:space="preserve">
          <source>Performs a logical &lt;code&gt;xor&lt;/code&gt; operation between this Boolean and the &lt;a href=&quot;xor#kotlin.Boolean%24xor%28kotlin.Boolean%29%2Fother&quot;&gt;other&lt;/a&gt; one.</source>
          <target state="translated">このブール値と&lt;a href=&quot;xor#kotlin.Boolean%24xor%28kotlin.Boolean%29%2Fother&quot;&gt;他の&lt;/a&gt;ブール値の間で論理 &lt;code&gt;xor&lt;/code&gt; 演算を実行します。</target>
        </trans-unit>
        <trans-unit id="f15a7a5b346eb278931840866891b41c56053f06" translate="yes" xml:space="preserve">
          <source>Performs a logical and + not operations over corresponding bits of this and &lt;a href=&quot;and-not#kotlin.native.BitSet%24andNot%28kotlin.native.BitSet%29%2Fanother&quot;&gt;another&lt;/a&gt; BitSets. The result is saved in this BitSet.</source>
          <target state="translated">このビットセットと&lt;a href=&quot;and-not#kotlin.native.BitSet%24andNot%28kotlin.native.BitSet%29%2Fanother&quot;&gt;別の&lt;/a&gt;ビットセットの対応するビットに対して、論理演算と+ not演算を実行します。結果はこのBitSetに保存されます。</target>
        </trans-unit>
        <trans-unit id="248264ee3ec26747cef66641b0ab9e9cc36bfb95" translate="yes" xml:space="preserve">
          <source>Performs a logical and operation over corresponding bits of this and &lt;a href=&quot;and#kotlin.native.BitSet%24and%28kotlin.native.BitSet%29%2Fanother&quot;&gt;another&lt;/a&gt; BitSets. The result is saved in this BitSet.</source>
          <target state="translated">このビットセットと&lt;a href=&quot;and#kotlin.native.BitSet%24and%28kotlin.native.BitSet%29%2Fanother&quot;&gt;別の&lt;/a&gt;ビットセットの対応するビットに対して論理演算を実行します。結果はこのBitSetに保存されます。</target>
        </trans-unit>
        <trans-unit id="39156b45f208fe04edcebcf2a0e15108c2b5ecbe" translate="yes" xml:space="preserve">
          <source>Performs a logical or operation over corresponding bits of this and &lt;a href=&quot;or#kotlin.native.BitSet%24or%28kotlin.native.BitSet%29%2Fanother&quot;&gt;another&lt;/a&gt; BitSets. The result is saved in this BitSet.</source>
          <target state="translated">このビットセットと&lt;a href=&quot;or#kotlin.native.BitSet%24or%28kotlin.native.BitSet%29%2Fanother&quot;&gt;別の&lt;/a&gt;ビットセットの対応するビットに対して論理演算または演算を実行します。結果はこのBitSetに保存されます。</target>
        </trans-unit>
        <trans-unit id="89952362ca0f0ea4e127ac7e85a2c86c496c4d34" translate="yes" xml:space="preserve">
          <source>Performs a logical xor operation over corresponding bits of this and &lt;a href=&quot;xor#kotlin.native.BitSet%24xor%28kotlin.native.BitSet%29%2Fanother&quot;&gt;another&lt;/a&gt; BitSets. The result is saved in this BitSet.</source>
          <target state="translated">thisおよび&lt;a href=&quot;xor#kotlin.native.BitSet%24xor%28kotlin.native.BitSet%29%2Fanother&quot;&gt;別の&lt;/a&gt; BitSetの対応するビットに対して論理xor演算を実行します。結果はこのBitSetに保存されます。</target>
        </trans-unit>
        <trans-unit id="8778d29dc0dc7d3574ea0e3286cb3d5caa4e81c8" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.Array%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.Array%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="354429514682e691beedeceba088207f7f86e08b" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.BooleanArray%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="902b222a85bfa2ce3e8bfb951d9b4dc9446d6839" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.ByteArray%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="3a1029b825870c14a4decbb21d6805858ed0f320" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.CharArray%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="132e431f819fe0a59343199d4c78f179f89ce62a" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.DoubleArray%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="ff4a1baf61ef7e535c3fc6836d76a4d846af6cf5" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.FloatArray%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="bb54c2b7efc5373c1cf68583371d345a5f50c012" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.IntArray%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="a7b1ee7f732b88eb7700c41ce99b3e032c7ced05" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.LongArray%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="769e73f068d119cc23fb2e7269a6869a219a4c2f" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.ShortArray%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="315872fa4cb4bee637685098226a83214f60bbca" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.UByteArray%2C+kotlin.Function1%28%28kotlin.UByte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="be7773eeb96c7f44ff812a4c6c54cebfddc1c39a" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.UIntArray%2C+kotlin.Function1%28%28kotlin.UInt%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="9d3c644080133080d00a82ec64258b3304250cb1" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.ULongArray%2C+kotlin.Function1%28%28kotlin.ULong%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="343918dc2653e9b26cd6c78fe46e177a55191bd0" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.UShortArray%2C+kotlin.Function1%28%28kotlin.UShort%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="60c3854730411666aadc2a5786a5566b6e293813" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.collections.Iterable%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each#kotlin.collections%24forEach%28kotlin.collections.Iterable%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="156a178c7e2fa943631d6411cce4305751cb118d" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.Array%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.Array%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="fb9edc2371f5689293ab517c3018d2216eee1bfa" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="cccffefe6af8ebe6cc83f72c2165e58f69acf3bb" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="1b26e4703dad1494d851f19e309b30697e57ae82" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="2432517ffef532827d34978f4ef21e42155112dc" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="34760498c33bbec4d94a6070c40416c9f57789ac" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="436163486ef4aa6a8403d929f381de1ed09ad5c8" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="bcc9e3cfaea470e3580c1c4bb6b1f240a35a554e" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="ff4766a4cba0adbc0664e324d1c59a412892576a" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="6628be7f64b97fd70255215773475a4a595013a0" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="7c75ed24cd0bba9c7f121610cb68dd4ad6d27485" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="fc3ae4f7b218e21e390940d489b5aaad31231608" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="a8c1524a85fc3b689fcfa6b2f1e64351adedd584" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="8d63f486ca4249c62fd4fe22e2b76611a0fea4ee" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="9bb69c054b7cc08bfa79083dfdb96baed031f4ce" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.collections/on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.C%2C+kotlin.Function1%28%28kotlin.collections.onEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element and returns the collection itself afterwards.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../../kotlin.collections/on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.C%2C+kotlin.Function1%28%28kotlin.collections.onEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後でコレクション自体を返します。</target>
        </trans-unit>
        <trans-unit id="0e5ae0e9e37604365a59cffd9ebd8b0458d25c60" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.text/for-each#kotlin.text%24forEach%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character.</source>
          <target state="translated">各キャラクターに与えられた&lt;a href=&quot;../../kotlin.text/for-each#kotlin.text%24forEach%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="df20894630de9dca9b041239dba3714304624d44" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.text/for-each-indexed#kotlin.text%24forEachIndexed%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character, providing sequential index with the character.</source>
          <target state="translated">各文字に対して指定された&lt;a href=&quot;../../kotlin.text/for-each-indexed#kotlin.text%24forEachIndexed%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、文字の順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="9c39c510f61f6934c4d4717c38fda9525b7f9e71" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../../kotlin.text/on-each#kotlin.text%24onEach%28kotlin.text.onEach.S%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character and returns the char sequence itself afterwards.</source>
          <target state="translated">各文字に対して指定された&lt;a href=&quot;../../kotlin.text/on-each#kotlin.text%24onEach%28kotlin.text.onEach.S%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後で文字シーケンス自体を返します。</target>
        </trans-unit>
        <trans-unit id="89821f6d1cc426bf722b8dc4cde256a1620cb225" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Iterable%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Iterable%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="4e210d2ff57fa0fcccace8b4e8d2d4e17d2b1534" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Iterator%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; on each element of this &lt;a href=&quot;../-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;../-iterator/index#kotlin.collections.Iterator&quot;&gt;Iteratorの&lt;/a&gt;各要素に対して指定された&lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Iterator%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="6a050e79c3140ce79cd41930bd591ab179061a6a" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Iterator%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; on each element of this &lt;a href=&quot;index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;index#kotlin.collections.Iterator&quot;&gt;Iteratorの&lt;/a&gt;各要素に対して指定された&lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Iterator%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="508a343134493917d3257ce3b73078bbdb0e7f64" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Map%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each entry.</source>
          <target state="translated">各エントリで指定された&lt;a href=&quot;../for-each#kotlin.collections%24forEach%28kotlin.collections.Map%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="7bf498ae32274e7f17b67341cf2d07b308f50bb4" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each#kotlin.sequences%24forEach%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../for-each#kotlin.sequences%24forEach%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="f6e8aced5304e72e8ba36a5362b2d10c41f72428" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each#kotlin.text%24forEach%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character.</source>
          <target state="translated">各キャラクターに与えられた&lt;a href=&quot;../for-each#kotlin.text%24forEach%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="6184ad680ff62a8a1a5f1c8545e1700ca1b43884" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="4ffe16b2047dd6b905902ecb7cd8c68c1882f05d" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each-indexed#kotlin.sequences%24forEachIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../for-each-indexed#kotlin.sequences%24forEachIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="c398757f124a04f252a4f84eb4bc0ea90ee0e1c6" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../for-each-indexed#kotlin.text%24forEachIndexed%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character, providing sequential index with the character.</source>
          <target state="translated">各文字に対して指定された&lt;a href=&quot;../for-each-indexed#kotlin.text%24forEachIndexed%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、文字の順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="4cf6ab376a8e39291fbabff216f6baa19f10110e" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.C%2C+kotlin.Function1%28%28kotlin.collections.onEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element and returns the collection itself afterwards.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;../on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.C%2C+kotlin.Function1%28%28kotlin.collections.onEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後でコレクション自体を返します。</target>
        </trans-unit>
        <trans-unit id="e26d4f16f359e801f3511fe82a5c09dea69f579a" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.onEach.K%2C+kotlin.collections.onEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each entry and returns the map itself afterwards.</source>
          <target state="translated">各エントリで指定された&lt;a href=&quot;../on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.onEach.K%2C+kotlin.collections.onEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後でマップ自体を返します。</target>
        </trans-unit>
        <trans-unit id="631fdcf8194c5e79e1a4409f3a3f4c7539d32a0e" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../on-each#kotlin.text%24onEach%28kotlin.text.onEach.S%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character and returns the char sequence itself afterwards.</source>
          <target state="translated">各文字に対して指定された&lt;a href=&quot;../on-each#kotlin.text%24onEach%28kotlin.text.onEach.S%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後で文字シーケンス自体を返します。</target>
        </trans-unit>
        <trans-unit id="5113d7c5fc0a6d8bba9b090f482e4648076619ba" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../on-failure#kotlin%24onFailure%28kotlin.Result%28%28kotlin.onFailure.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on encapsulated exception if this instance represents &lt;a href=&quot;is-failure&quot;&gt;failure&lt;/a&gt;. Returns the original &lt;code&gt;Result&lt;/code&gt; unchanged.</source>
          <target state="translated">このインスタンスが&lt;a href=&quot;is-failure&quot;&gt;失敗を&lt;/a&gt;表す場合、カプセル化された例外に対して指定された&lt;a href=&quot;../on-failure#kotlin%24onFailure%28kotlin.Result%28%28kotlin.onFailure.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。元の &lt;code&gt;Result&lt;/code&gt; 変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="f2481f64f700561b8b558fa47b71f60a5d75e5c2" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;../on-success#kotlin%24onSuccess%28kotlin.Result%28%28kotlin.onSuccess.T%29%29%2C+kotlin.Function1%28%28kotlin.onSuccess.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on encapsulated value if this instance represents &lt;a href=&quot;is-success&quot;&gt;success&lt;/a&gt;. Returns the original &lt;code&gt;Result&lt;/code&gt; unchanged.</source>
          <target state="translated">このインスタンスが&lt;a href=&quot;is-success&quot;&gt;成功を&lt;/a&gt;表す場合、カプセル化された値に対して指定された&lt;a href=&quot;../on-success#kotlin%24onSuccess%28kotlin.Result%28%28kotlin.onSuccess.T%29%29%2C+kotlin.Function1%28%28kotlin.onSuccess.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。元の &lt;code&gt;Result&lt;/code&gt; 変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="cefe0cdb2472abe9bb2db7d20ff5ae01ad642a92" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each#kotlin.collections%24forEach%28kotlin.Array%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;for-each#kotlin.collections%24forEach%28kotlin.Array%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="74cfdb87e8c93e5d2dbc176b9e82eb5119e13838" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each#kotlin.collections%24forEach%28kotlin.collections.Iterator%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; on each element of this &lt;a href=&quot;-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;-iterator/index#kotlin.collections.Iterator&quot;&gt;Iteratorの&lt;/a&gt;各要素に対して指定された&lt;a href=&quot;for-each#kotlin.collections%24forEach%28kotlin.collections.Iterator%28%28kotlin.collections.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.collections.forEach.T%2C+kotlin.Unit%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="cdf31e1a626bd0a40a6edad4167805ec6579b18c" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each#kotlin.collections%24forEach%28kotlin.collections.Map%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each entry.</source>
          <target state="translated">各エントリで指定された&lt;a href=&quot;for-each#kotlin.collections%24forEach%28kotlin.collections.Map%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.forEach.K%2C+kotlin.collections.forEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="09672fbc97176d09fe72c4f3a1054557676675e0" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each#kotlin.sequences%24forEach%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;for-each#kotlin.sequences%24forEach%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEach.T%29%29%2C+kotlin.Function1%28%28kotlin.sequences.forEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="c42b8f4b18bfd5f61c52144605ca972edf9ee166" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each#kotlin.text%24forEach%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character.</source>
          <target state="translated">各キャラクターに与えられた&lt;a href=&quot;for-each#kotlin.text%24forEach%28kotlin.CharSequence%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="d6ca50a33d9ab0eaef78344b9b0e985ffdc01270" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.Array%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;for-each-indexed#kotlin.collections%24forEachIndexed%28kotlin.Array%28%28kotlin.collections.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="67883b089471a47542ce82cc71c8d658a4654dbf" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each-indexed#kotlin.sequences%24forEachIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element, providing sequential index with the element.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;for-each-indexed#kotlin.sequences%24forEachIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.forEachIndexed.T%29%29%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.sequences.forEachIndexed.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、要素に順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="eeafadabb6804f8c23d35fa4b28517fcceea85f4" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;for-each-indexed#kotlin.text%24forEachIndexed%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character, providing sequential index with the character.</source>
          <target state="translated">各文字に対して指定された&lt;a href=&quot;for-each-indexed#kotlin.text%24forEachIndexed%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、文字の順次インデックスを提供します。</target>
        </trans-unit>
        <trans-unit id="a1d1b6a88dfe42c618a5b1ca25fc0d5d894063de" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.C%2C+kotlin.Function1%28%28kotlin.collections.onEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each element and returns the collection itself afterwards.</source>
          <target state="translated">各要素に対して指定された&lt;a href=&quot;on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.C%2C+kotlin.Function1%28%28kotlin.collections.onEach.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後でコレクション自体を返します。</target>
        </trans-unit>
        <trans-unit id="374017948a2d0fcd87819b8874959606012dabaf" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.onEach.K%2C+kotlin.collections.onEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each entry and returns the map itself afterwards.</source>
          <target state="translated">各エントリで指定された&lt;a href=&quot;on-each#kotlin.collections%24onEach%28kotlin.collections.onEach.M%2C+kotlin.Function1%28%28kotlin.collections.Map.Entry%28%28kotlin.collections.onEach.K%2C+kotlin.collections.onEach.V%29%29%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後でマップ自体を返します。</target>
        </trans-unit>
        <trans-unit id="bef24848056c83d4896d0c344a733cfe72650d07" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;on-each#kotlin.text%24onEach%28kotlin.text.onEach.S%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on each character and returns the char sequence itself afterwards.</source>
          <target state="translated">各文字に対して指定された&lt;a href=&quot;on-each#kotlin.text%24onEach%28kotlin.text.onEach.S%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行し、後で文字シーケンス自体を返します。</target>
        </trans-unit>
        <trans-unit id="ae5dd943a998bf0632072e1a8c0d1cad78ad3f17" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;on-failure#kotlin%24onFailure%28kotlin.Result%28%28kotlin.onFailure.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on encapsulated exception if this instance represents &lt;a href=&quot;-result/is-failure&quot;&gt;failure&lt;/a&gt;. Returns the original &lt;code&gt;Result&lt;/code&gt; unchanged.</source>
          <target state="translated">このインスタンスが&lt;a href=&quot;-result/is-failure&quot;&gt;失敗を&lt;/a&gt;表す場合、カプセル化された例外に対して指定された&lt;a href=&quot;on-failure#kotlin%24onFailure%28kotlin.Result%28%28kotlin.onFailure.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。元の &lt;code&gt;Result&lt;/code&gt; 変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="67384b74c028474cb5ed6795583a3caee43626b0" translate="yes" xml:space="preserve">
          <source>Performs the given &lt;a href=&quot;on-success#kotlin%24onSuccess%28kotlin.Result%28%28kotlin.onSuccess.T%29%29%2C+kotlin.Function1%28%28kotlin.onSuccess.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; on encapsulated value if this instance represents &lt;a href=&quot;-result/is-success&quot;&gt;success&lt;/a&gt;. Returns the original &lt;code&gt;Result&lt;/code&gt; unchanged.</source>
          <target state="translated">このインスタンスが&lt;a href=&quot;-result/is-success&quot;&gt;成功を&lt;/a&gt;表す場合、カプセル化された値に対して指定された&lt;a href=&quot;on-success#kotlin%24onSuccess%28kotlin.Result%28%28kotlin.onSuccess.T%29%29%2C+kotlin.Function1%28%28kotlin.onSuccess.T%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;アクション&lt;/a&gt;を実行します。元の &lt;code&gt;Result&lt;/code&gt; 変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="f2055702950dd7647317e43a271427aab2f0320c" translate="yes" xml:space="preserve">
          <source>Performs type cast of the &lt;a href=&quot;-c-pointer/index&quot;&gt;CPointer&lt;/a&gt; from the given raw pointer.</source>
          <target state="translated">指定された生のポインタから&lt;a href=&quot;-c-pointer/index&quot;&gt;CPointerの&lt;/a&gt;型キャストを実行します。</target>
        </trans-unit>
        <trans-unit id="dff1870d6c391af7bfc6f9c31b9fd3e1f22424a0" translate="yes" xml:space="preserve">
          <source>Performs type cast of the native pointer to given interop type, including null values.</source>
          <target state="translated">null値を含む、指定されたinterop型へのネイティブポインタの型キャストを実行します。</target>
        </trans-unit>
        <trans-unit id="70b3460333090074f460006fbc3c29cbd8b8ed4c" translate="yes" xml:space="preserve">
          <source>Permits whitespace and comments in pattern.</source>
          <target state="translated">パターン内の空白とコメントを許可します。</target>
        </trans-unit>
        <trans-unit id="af78c38398b139be2b3b2642ea9cb205e18abd10" translate="yes" xml:space="preserve">
          <source>Persistent context for the coroutine. It is an indexed set of &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt; instances. An indexed set is a mix between a set and a map. Every element in this set has a unique &lt;a href=&quot;-coroutine-context/-key&quot;&gt;Key&lt;/a&gt;.</source>
          <target state="translated">コルーチンの永続的なコンテキスト。これは&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt;インスタンスのインデックス付きセットです。インデックス付きセットは、セットとマップの組み合わせです。このセットのすべての要素には、一意の&lt;a href=&quot;-coroutine-context/-key&quot;&gt;Keyがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c157c340f43a865245c7fc93858e3d651e03db02" translate="yes" xml:space="preserve">
          <source>Persistent context for the coroutine. It is an indexed set of &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt; instances. An indexed set is a mix between a set and a map. Every element in this set has a unique &lt;a href=&quot;-coroutine-context/-key&quot;&gt;Key&lt;/a&gt;. Keys are compared &lt;em&gt;by reference&lt;/em&gt;.</source>
          <target state="translated">コルーチンの永続的なコンテキスト。これは&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt;インスタンスのインデックス付きセットです。インデックス付きセットは、セットとマップの組み合わせです。このセットのすべての要素には、一意の&lt;a href=&quot;-coroutine-context/-key&quot;&gt;Keyがあり&lt;/a&gt;ます。キーは&lt;em&gt;参照によって&lt;/em&gt;比較&lt;em&gt;されます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b967bafef068480743eba427623473373d559d2d" translate="yes" xml:space="preserve">
          <source>Persistent context for the coroutine. It is an indexed set of &lt;a href=&quot;-element/index&quot;&gt;Element&lt;/a&gt; instances. An indexed set is a mix between a set and a map. Every element in this set has a unique &lt;a href=&quot;-key&quot;&gt;Key&lt;/a&gt;.</source>
          <target state="translated">コルーチンの永続的なコンテキスト。これは&lt;a href=&quot;-element/index&quot;&gt;Element&lt;/a&gt;インスタンスのインデックス付きセットです。インデックス付きセットは、セットとマップの組み合わせです。このセットのすべての要素には、一意の&lt;a href=&quot;-key&quot;&gt;Keyがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c764f72e9b533c3e92099663bd3155a39c117cff" translate="yes" xml:space="preserve">
          <source>Persistent context for the coroutine. It is an indexed set of &lt;a href=&quot;-element/index&quot;&gt;Element&lt;/a&gt; instances. An indexed set is a mix between a set and a map. Every element in this set has a unique &lt;a href=&quot;-key&quot;&gt;Key&lt;/a&gt;. Keys are compared &lt;em&gt;by reference&lt;/em&gt;.</source>
          <target state="translated">コルーチンの永続的なコンテキスト。これは&lt;a href=&quot;-element/index&quot;&gt;Element&lt;/a&gt;インスタンスのインデックス付きセットです。インデックス付きセットは、セットとマップの組み合わせです。このセットのすべての要素には、一意の&lt;a href=&quot;-key&quot;&gt;Keyがあり&lt;/a&gt;ます。キーは&lt;em&gt;参照によって&lt;/em&gt;比較&lt;em&gt;されます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="95451dcb8e009499e098e6e7a96b268f1fac141a" translate="yes" xml:space="preserve">
          <source>Persistent context for the coroutine. It is an indexed set of &lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt; instances. An indexed set is a mix between a set and a map. Every element in this set has a unique &lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-key&quot;&gt;Key&lt;/a&gt;. Keys are compared &lt;em&gt;by reference&lt;/em&gt;.</source>
          <target state="translated">コルーチンの永続的なコンテキスト。これは&lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt;インスタンスのインデックス付きセットです。インデックス付きセットは、セットとマップの組み合わせです。このセットのすべての要素には、一意の&lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-key&quot;&gt;Keyがあり&lt;/a&gt;ます。キーは&lt;em&gt;参照によって&lt;/em&gt;比較&lt;em&gt;されます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="846500d1d4ad3ba3a25965623df48239e4855082" translate="yes" xml:space="preserve">
          <source>Persistent context for the coroutine. It is an indexed set of &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt; instances. An indexed set is a mix between a set and a map. Every element in this set has a unique &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-key&quot;&gt;Key&lt;/a&gt;.</source>
          <target state="translated">コルーチンの永続的なコンテキスト。これは&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;Element&lt;/a&gt;インスタンスのインデックス付きセットです。インデックス付きセットは、セットとマップの組み合わせです。このセットのすべての要素には、一意の&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-key&quot;&gt;Keyがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f9312169efb2796a0b1da9edb152b101f2300da1" translate="yes" xml:space="preserve">
          <source>Pinned</source>
          <target state="translated">Pinned</target>
        </trans-unit>
        <trans-unit id="0c0360a84d9cf873ea3ea1f65f0f811d87230d3d" translate="yes" xml:space="preserve">
          <source>Pinterest has successfully &lt;a href=&quot;https://www.youtube.com/watch?v=mDpnc45WwlI&quot;&gt;introduced Kotlin into their application&lt;/a&gt;, used by 150M people every month.</source>
          <target state="translated">Pinterestは、毎月1億5,000万人が使用する&lt;a href=&quot;https://www.youtube.com/watch?v=mDpnc45WwlI&quot;&gt;アプリケーション&lt;/a&gt;にKotlinを導入することに成功しています。</target>
        </trans-unit>
        <trans-unit id="c5df1e14fdba13b1a3f9690f736bcb2aac132e72" translate="yes" xml:space="preserve">
          <source>Pipelines</source>
          <target state="translated">Pipelines</target>
        </trans-unit>
        <trans-unit id="b2ee7fbd6f51756380013f5fd4950677fa0c81fb" translate="yes" xml:space="preserve">
          <source>Place all annotations before modifiers:</source>
          <target state="translated">すべての注釈を修飾子の前に配置します。</target>
        </trans-unit>
        <trans-unit id="3982eb75527059bbd6d192e34d8368da66120228" translate="yes" xml:space="preserve">
          <source>Placing multiple declarations (classes, top-level functions or properties) in the same Kotlin source file is encouraged as long as these declarations are closely related to each other semantically and the file size remains reasonable (not exceeding a few hundred lines).</source>
          <target state="translated">複数の宣言(クラス、トップレベルの関数、プロパティ)を同じKotlinソースファイルに配置することは、これらの宣言が意味的に互いに密接に関連しており、ファイルサイズが妥当なサイズ(数百行を超えない)であれば推奨されます。</target>
        </trans-unit>
        <trans-unit id="b62ff09be9581c8e92bedbae8f703577022a386d" translate="yes" xml:space="preserve">
          <source>Plain. Don't compile for any module system. As usual, you can access a module by its name in the global scope. This option is used by default.</source>
          <target state="translated">明白だ 任意のモジュールシステムのためにコンパイルしないでください。いつものように、グローバルスコープでモジュール名を指定してアクセスできます。このオプションはデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="afb64e7d9920cfa61ac4bcb4a97a95361d70c9d4" translate="yes" xml:space="preserve">
          <source>Plan job for further execution in the worker. Execute is a two-phase operation:</source>
          <target state="translated">ワーカーでさらに実行するためにジョブを計画します。実行は二段階の操作です。</target>
        </trans-unit>
        <trans-unit id="123a7f2fcc9ae7cbbbd7c7627a483853a9708dab" translate="yes" xml:space="preserve">
          <source>Platform</source>
          <target state="translated">Platform</target>
        </trans-unit>
        <trans-unit id="f5f2f02ee59dd5f7278fa52e9803b778e1810bf6" translate="yes" xml:space="preserve">
          <source>Platform libraries</source>
          <target state="translated">プラットフォームライブラリ</target>
        </trans-unit>
        <trans-unit id="27daeb6136375e35b7aae078a456f0409455061d" translate="yes" xml:space="preserve">
          <source>Platform types</source>
          <target state="translated">プラットフォームの種類</target>
        </trans-unit>
        <trans-unit id="c86d5ba4c85d5fb0c76ddc4c4b75a80c8e2b5bf7" translate="yes" xml:space="preserve">
          <source>Platform types are &lt;em&gt;non-denotable&lt;/em&gt;, meaning that one can not write them down explicitly in the language. When a platform value is assigned to a Kotlin variable, we can rely on type inference (the variable will have an inferred platform type then, as &lt;code&gt;item&lt;/code&gt; has in the example above), or we can choose the type that we expect (both nullable and non-null types are allowed):</source>
          <target state="translated">プラットフォームの種類は、&lt;em&gt;非denotable&lt;/em&gt; 1言語で明示的にそれらを書き留めることができないことを意味し、。プラットフォーム値がKotlin変数に割り当てられると、我々は、型推論に依存することができ（としての変数は、次に推論プラットフォームタイプを有することになる &lt;code&gt;item&lt;/code&gt; 上記の例で持っている）、または我々が期待する種類を選択することができる（両方NULL可能とnull以外のタイプが許可されます）：</target>
        </trans-unit>
        <trans-unit id="2de932b8a9245d1f54a9aad41804f55891736690" translate="yes" xml:space="preserve">
          <source>Platform-Specific Declarations</source>
          <target state="translated">プラットフォーム固有の宣言</target>
        </trans-unit>
        <trans-unit id="5e25183c13ab998897981474ea6c1e9585cc156e" translate="yes" xml:space="preserve">
          <source>Platform-specific implementations</source>
          <target state="translated">プラットフォーム固有の実装</target>
        </trans-unit>
        <trans-unit id="a68eb230823a2defe94e6d3f9718ef2ec069c259" translate="yes" xml:space="preserve">
          <source>Playground</source>
          <target state="translated">Playground</target>
        </trans-unit>
        <trans-unit id="bbdb65085dee03f9522e3e5f0025eed4f5359814" translate="yes" xml:space="preserve">
          <source>Please note that kapt is still not supported for IntelliJ IDEA&amp;rsquo;s own build system. Launch the build from the &amp;ldquo;Maven Projects&amp;rdquo; toolbar whenever you want to re-run the annotation processing.</source>
          <target state="translated">IntelliJ IDEA独自のビルドシステムではkaptはまだサポートされていないことに注意してください。アノテーション処理を再実行したい場合はいつでも、「Maven Projects」ツールバーからビルドを起動します。</target>
        </trans-unit>
        <trans-unit id="a652f9a1cbf6bc63cb39a996bce3be974d2d22bc" translate="yes" xml:space="preserve">
          <source>Please note that not all target platforms have reached this level of stability (but Kotlin/JVM has).</source>
          <target state="translated">すべてのターゲットプラットフォームがこのレベルの安定性に達しているわけではないことに注意してください (ただし、Kotlin/JVMは達しています)。</target>
        </trans-unit>
        <trans-unit id="47b2ec614eb50f3bdffe58d7ff2b3bc3913ac575" translate="yes" xml:space="preserve">
          <source>Please note, that scripting is an experimental feature, meaning that no compatibility guarantees on the API are given.</source>
          <target state="translated">スクリプトは実験的な機能であり、APIの互換性は保証されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6aca781c3a79a3e72414af74477414b1309db482" translate="yes" xml:space="preserve">
          <source>Please read below about how to apply the &lt;em&gt;kapt&lt;/em&gt; plugin to your Gradle/Maven build.</source>
          <target state="translated">Gradle / Mavenビルドに&lt;em&gt;kapt&lt;/em&gt;プラグインを適用する方法については、以下をお読みください。</target>
        </trans-unit>
        <trans-unit id="df850d65431ff850dff9db645cfb9959b6fb5f52" translate="yes" xml:space="preserve">
          <source>Please refer to the &quot;Using in Gradle&quot; section above for the detailed information about how all-open annotations work.</source>
          <target state="translated">オールオープンアノテーションの動作方法の詳細については、上記の「Gradleでの使用」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d7f29bab7062ae491aa74823e07cdd75e6cd1ef2" translate="yes" xml:space="preserve">
          <source>Please see the section on exceptions in the &lt;a href=&quot;java-interop&quot;&gt;Java Interoperability section&lt;/a&gt; for information about Java interoperability.</source>
          <target state="translated">Javaの相互運用性については、&lt;a href=&quot;java-interop&quot;&gt;Javaの相互運用性セクションの&lt;/a&gt;例外に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ccb2526b5c6a9379dd851edd6f41998ad27d981" translate="yes" xml:space="preserve">
          <source>Please, note, that even though kotlinx.serialization now ships with the Kotlin Compiler distribution, it is still considered to be an experimental feature.</source>
          <target state="translated">kotlinx.serialization は現在 Kotlin Compiler ディストリビューションに同梱されていますが、まだ実験的な機能とみなされていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8dc208f8ebe86aa9ee6a37d49d48058be5364bff" translate="yes" xml:space="preserve">
          <source>Plugin</source>
          <target state="translated">Plugin</target>
        </trans-unit>
        <trans-unit id="5579f3d6a54a5df8a540f8a3cba8e5401b9749b2" translate="yes" xml:space="preserve">
          <source>Plugin and Versions</source>
          <target state="translated">プラグインとバージョン</target>
        </trans-unit>
        <trans-unit id="60a1d5098c3c7592cf00aad9670f4365516e6abe" translate="yes" xml:space="preserve">
          <source>PluginArray</source>
          <target state="translated">PluginArray</target>
        </trans-unit>
        <trans-unit id="bc5de071a8adc9ea913c6f9e5f0005a2d40cc14d" translate="yes" xml:space="preserve">
          <source>Pointer</source>
          <target state="translated">Pointer</target>
        </trans-unit>
        <trans-unit id="d9fb370b0a40e2e2f19446936bcadb07206247ac" translate="yes" xml:space="preserve">
          <source>Pointer types</source>
          <target state="translated">ポインタ型</target>
        </trans-unit>
        <trans-unit id="7cf6219682a4407547b2c28d17b1d8dd2d5fdfa2" translate="yes" xml:space="preserve">
          <source>PointerEventInit</source>
          <target state="translated">PointerEventInit</target>
        </trans-unit>
        <trans-unit id="62d38aba74e2d8a777d33dbe646ae8fc7a0f65ff" translate="yes" xml:space="preserve">
          <source>Pointers and arrays are mapped to &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt;.</source>
          <target state="translated">ポインタと配列は &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; マップされていますか？。</target>
        </trans-unit>
        <trans-unit id="989fc91d044783d05d714e433d3e90dca9bdf4da" translate="yes" xml:space="preserve">
          <source>Polymorphism</source>
          <target state="translated">Polymorphism</target>
        </trans-unit>
        <trans-unit id="2ad1ac7a525966a8b45094077f33bbdc05886ea0" translate="yes" xml:space="preserve">
          <source>Polymorphism is the ability to treat objects with similar traits in a common way. In Python, this is achieved via &lt;em&gt;ducktyping&lt;/em&gt;: if &lt;code&gt;x&lt;/code&gt; refers to some object, you can call &lt;code&gt;x.quack()&lt;/code&gt; as long as the object happens to have the function &lt;code&gt;quack()&lt;/code&gt; - nothing else needs to be known (or rather, assumed) about the object. That's very flexible, but also risky: if &lt;code&gt;x&lt;/code&gt; is a parameter, every caller of your function must be aware that the object they pass to it must have &lt;code&gt;quack()&lt;/code&gt;, and if someone gets it wrong, the program blows up at runtime.</source>
          <target state="translated">ポリモーフィズムとは、類似した特性を持つオブジェクトを一般的な方法で処理する機能です。 Pythonでは、これは介して達成される&lt;em&gt;ダック・タイピング&lt;/em&gt;：場合 &lt;code&gt;x&lt;/code&gt; 、いくつかのオブジェクトを参照し、あなたが呼び出すことができます &lt;code&gt;x.quack()&lt;/code&gt; オブジェクトは、関数持つことを起こる限り、 &lt;code&gt;quack()&lt;/code&gt; -何も他のニーズが知られるように（というかを想定）オブジェクトについて。これは非常に柔軟ですが、リスクも伴います &lt;code&gt;x&lt;/code&gt; がパラメーターの場合、関数のすべての呼び出し元は、渡されるオブジェクトに &lt;code&gt;quack()&lt;/code&gt; が必要であることを認識している必要があり、誰かが間違った場合、プログラムは実行時に爆破します。</target>
        </trans-unit>
        <trans-unit id="287d62a455423043d5956c1c3dc80d61f37fed02" translate="yes" xml:space="preserve">
          <source>Pop quiz: if &lt;code&gt;Apple&lt;/code&gt; is a subtype of &lt;code&gt;Fruit&lt;/code&gt;, and &lt;code&gt;Bowl&lt;/code&gt; is a generic container class, is &lt;code&gt;Bowl&amp;lt;Apple&amp;gt;&lt;/code&gt; a subtype of &lt;code&gt;Bowl&amp;lt;Fruit&amp;gt;&lt;/code&gt;? The answer is - perhaps surprisingly - &lt;em&gt;no&lt;/em&gt;. The reason is that if it were a subtype, we would be able to break the type system like this:</source>
          <target state="translated">ポップクイズ： &lt;code&gt;Apple&lt;/code&gt; が &lt;code&gt;Fruit&lt;/code&gt; のサブタイプであり、 &lt;code&gt;Bowl&lt;/code&gt; がジェネリックコンテナークラスである場合、 &lt;code&gt;Bowl&amp;lt;Apple&amp;gt;&lt;/code&gt; は &lt;code&gt;Bowl&amp;lt;Fruit&amp;gt;&lt;/code&gt; サブタイプですか？答えは-おそらく驚くべきことに- &lt;em&gt;いいえ&lt;/em&gt;。その理由は、それがサブタイプであれば、次のように型システムを壊すことができるからです。</target>
        </trans-unit>
        <trans-unit id="a76679a620591482e0464dddad4f14c8c7fd9339" translate="yes" xml:space="preserve">
          <source>PopStateEventInit</source>
          <target state="translated">PopStateEventInit</target>
        </trans-unit>
        <trans-unit id="04a8da25b5f1b7ae8b0f0e1a4c823bc62e314fee" translate="yes" xml:space="preserve">
          <source>Popular native libraries</source>
          <target state="translated">人気のあるネイティブライブラリ</target>
        </trans-unit>
        <trans-unit id="f06a7327f16a4e64c4c9f5157a5438dac01e49c3" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="cc815fb8f30b9d67defc8672639f11b7cd964deb" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.Array%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="e54027fe3b0c04647bd612e2d3001a28dfddab19" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="8c294042ba1c08bbdf5f2ca919aef74b3ad73e01" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.BooleanArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="628dc0da6494de25d6ba457f2f80c91e78b5b864" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="8cd2dcf8a0a402b667ea907412305ccf1cbf6066" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ByteArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="f23a8e6acd4ac41b4190d6db10e68e05825c24e2" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="b8bf455ab69f63a4c886ade4aaa383957ceadbbb" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.CharArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="835ba668c69cdc57c88721d2e320413b3efebdf5" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="c2f2bfb6d6c1fee4d8e3438233d80e7a7a05d1bc" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.DoubleArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="965dd1a49d764dd96f8546692b284b466f37668d" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="a24d7c2e18ecb007b00d96f3b5e8e1b1dfc4165e" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.FloatArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="810e63afdaa4a01c8713ae8f7c4e623e24cde602" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="35c88ac7832af61b09df102f495469d5c47c19bf" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.IntArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="f11152cde12e6d1614eef0deb533061d2b1bf59d" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="d56d43a15229b8df5a4b882555e6345dcbf17540" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.LongArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="3dc35e1acead28c9cc9a024f3cba7e8852a7fa41" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given array and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="535abd01da7044a27ccb1df593ed3fbe5c5398c9" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given array.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定された配列の要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.ShortArray%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="ea599f76b5cb805b8c6d077b4b51e064dc95e582" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given collection and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定されたコレクションの各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="14fe9f45c4659166e5d5b6a9351d07a47b0ba4d2" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given collection.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。キーは&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定されたコレクションの要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="7ac9d5cdf9e117969ee6fd10d283bd039df69bdb" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.Array%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.Array%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.Array%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.Array%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="7c8d8cb3a696eed3506a74fa2814b5821e1d267c" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.BooleanArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.BooleanArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.BooleanArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.BooleanArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Boolean%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="f0953fc7300bc0f59efa7e327d197bb5dea25408" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ByteArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ByteArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ByteArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ByteArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Byte%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="29a42a62c585a0490da15590546a063f932573b5" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.CharArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.CharArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.CharArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.CharArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="b0ef08dea16529021d40ba7da3d084fdd66caec9" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.DoubleArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.DoubleArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.DoubleArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.DoubleArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Double%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="36fb4f2a7d3248986574e0c1dd6562a07512eaa9" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.FloatArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.FloatArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.FloatArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.FloatArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Float%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="005885692fbf56a60dc05bd53733c4891b99cfee" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.IntArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.IntArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.IntArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.IntArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="275b012ceb78f86357f9b74a9be9f065ced07569" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.LongArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.LongArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.LongArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.LongArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Long%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="1c9f9ade92bd594c318865244d8674cf43c6e5eb" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ShortArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ShortArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given array.</source>
          <target state="translated">指定された配列の各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ShortArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.ShortArray%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.Short%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="222709cb6cec955540f6eec31b21dbcaa138e8ad" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given collection.</source>
          <target state="translated">指定されたコレクションの各要素に適用される&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="4b3cec0c265cbd53d7684ed54291063de6524e65" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs for each element of the given collection, where key is the element itself and value is provided by the &lt;a href=&quot;../../kotlin.collections/associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt; function applied to that key.</source>
          <target state="translated">指定されたコレクションの各要素のキーと値のペアを&lt;a href=&quot;../../kotlin.collections/associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップに入力して返します。ここで、keyは要素自体であり、値はそのキーに適用された&lt;a href=&quot;../../kotlin.collections/associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="0ee2ea86d75e05bf19ed43f94f8f29fa928a470a" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/to-map#kotlin.collections%24toMap%28kotlin.Array%28%28kotlin.Pair%28%28kotlin.collections.toMap.K%2C+kotlin.collections.toMap.V%29%29%29%29%2C+kotlin.collections.toMap.M%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs from the given array of pairs.</source>
          <target state="translated">指定されたペアの配列からのキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/to-map#kotlin.collections%24toMap%28kotlin.Array%28%28kotlin.Pair%28%28kotlin.collections.toMap.K%2C+kotlin.collections.toMap.V%29%29%29%29%2C+kotlin.collections.toMap.M%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="1433bc5917111a026fbb4cb78b8d5db17b5bb675" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.collections/to-map#kotlin.collections%24toMap%28kotlin.sequences.Sequence%28%28kotlin.Pair%28%28kotlin.collections.toMap.K%2C+kotlin.collections.toMap.V%29%29%29%29%2C+kotlin.collections.toMap.M%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs from the given sequence of pairs.</source>
          <target state="translated">指定されたペアのシーケンスからのキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.collections/to-map#kotlin.collections%24toMap%28kotlin.sequences.Sequence%28%28kotlin.Pair%28%28kotlin.collections.toMap.K%2C+kotlin.collections.toMap.V%29%29%29%29%2C+kotlin.collections.toMap.M%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="b50c3513993561d08e0ce6fdd6676f47133115dc" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character of the given char sequence and value is the character itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。ここで、キーは、指定された文字シーケンスの各文字に適用される&lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は文字自体です。</target>
        </trans-unit>
        <trans-unit id="3bf8950467eebfb02b6d12bdd9a08c3e11df4dd8" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to characters of the given char sequence.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。ここで、keyは&lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、valueは指定された文字シーケンスの文字に適用される&lt;a href=&quot;../../kotlin.text/associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="b64885bdd2b7c51d1bd993d8ebca0c3aea40777e" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.text/associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../../kotlin.text/associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each character of the given char sequence.</source>
          <target state="translated">指定された文字シーケンスの各文字に適用される&lt;a href=&quot;../../kotlin.text/associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../../kotlin.text/associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="08049c8715ed54b355404482e75d57c1492f8b46" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../../kotlin.text/associate-with-to#kotlin.text%24associateWithTo%28kotlin.CharSequence%2C+kotlin.text.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs for each character of the given char sequence, where key is the character itself and value is provided by the &lt;a href=&quot;../../kotlin.text/associate-with-to#kotlin.text%24associateWithTo%28kotlin.CharSequence%2C+kotlin.text.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt; function applied to that key.</source>
          <target state="translated">指定された文字シーケンスの各文字のキーと値のペアを使用して&lt;a href=&quot;../../kotlin.text/associate-with-to#kotlin.text%24associateWithTo%28kotlin.CharSequence%2C+kotlin.text.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。ここで、keyは文字自体であり、valueはそのキーに適用された&lt;a href=&quot;../../kotlin.text/associate-with-to#kotlin.text%24associateWithTo%28kotlin.CharSequence%2C+kotlin.text.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="3bfa88beba28fa899e7efabef398d0df9fc527f6" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given collection and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは、指定されたコレクションの各要素に適用される&lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="63884c2ba8ab3783e9195e5db339c72987632cfb" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given collection.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。キーは&lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は指定されたコレクションの要素に適用される&lt;a href=&quot;../associate-by-to#kotlin.collections%24associateByTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateByTo.T%29%29%2C+kotlin.collections.associateByTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.associateByTo.T%2C+kotlin.collections.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="d3212e9a08afda08c72e954fe852b843a188ea5c" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each element of the given sequence and value is the element itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。ここで、キーは、指定されたシーケンスの各要素に適用される&lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は要素自体です。</target>
        </trans-unit>
        <trans-unit id="5b8b8c943c1609879d7a1f57b5dc9813bf21326e" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to elements of the given sequence.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。キーは&lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は特定のシーケンスの要素に適用される&lt;a href=&quot;../associate-by-to#kotlin.sequences%24associateByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateByTo.T%29%29%2C+kotlin.sequences.associateByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.associateByTo.T%2C+kotlin.sequences.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="5384339a5d0735aa683d1c5076e43862b74c65d6" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function applied to each character of the given char sequence and value is the character itself.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップを生成して返します。ここで、キーは、指定された文字シーケンスの各文字に適用される&lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、値は文字自体です。</target>
        </trans-unit>
        <trans-unit id="7ae55e124d3d56ba20ffaff33842d9c8916eaea8" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs, where key is provided by the &lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt; function and and value is provided by the &lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt; function applied to characters of the given char sequence.</source>
          <target state="translated">キーと値のペアを使用して&lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。ここで、keyは&lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FkeySelector&quot;&gt;keySelector&lt;/a&gt;関数によって提供され、valueは指定された文字シーケンスの文字に適用される&lt;a href=&quot;../associate-by-to#kotlin.text%24associateByTo%28kotlin.CharSequence%2C+kotlin.text.associateByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.associateByTo.V%29%29%29%2FvalueTransform&quot;&gt;valueTransform&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="392dcb695a938cce9be34e7a8e590802b145da17" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given collection.</source>
          <target state="translated">指定されたコレクションの各要素に適用される&lt;a href=&quot;../associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../associate-to#kotlin.collections%24associateTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateTo.T%29%29%2C+kotlin.collections.associateTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateTo.T%2C+kotlin.Pair%28%28kotlin.collections.associateTo.K%2C+kotlin.collections.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="a4fce5a30ada9c031d14ecb70ab4a7a990af509a" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-to#kotlin.sequences%24associateTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateTo.T%29%29%2C+kotlin.sequences.associateTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateTo.T%2C+kotlin.Pair%28%28kotlin.sequences.associateTo.K%2C+kotlin.sequences.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../associate-to#kotlin.sequences%24associateTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateTo.T%29%29%2C+kotlin.sequences.associateTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateTo.T%2C+kotlin.Pair%28%28kotlin.sequences.associateTo.K%2C+kotlin.sequences.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each element of the given sequence.</source>
          <target state="translated">指定されたシーケンスの各要素に適用される&lt;a href=&quot;../associate-to#kotlin.sequences%24associateTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateTo.T%29%29%2C+kotlin.sequences.associateTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateTo.T%2C+kotlin.Pair%28%28kotlin.sequences.associateTo.K%2C+kotlin.sequences.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../associate-to#kotlin.sequences%24associateTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateTo.T%29%29%2C+kotlin.sequences.associateTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateTo.T%2C+kotlin.Pair%28%28kotlin.sequences.associateTo.K%2C+kotlin.sequences.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="881cea2c519af687517a4c634a7b9732436c1136" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs provided by &lt;a href=&quot;../associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function applied to each character of the given char sequence.</source>
          <target state="translated">指定された文字シーケンスの各文字に適用される&lt;a href=&quot;../associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Ftransform&quot;&gt;変換&lt;/a&gt;関数によって提供されるキーと値のペアを使用して、&lt;a href=&quot;../associate-to#kotlin.text%24associateTo%28kotlin.CharSequence%2C+kotlin.text.associateTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.Pair%28%28kotlin.text.associateTo.K%2C+kotlin.text.associateTo.V%29%29%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップにデータを入力して返します。</target>
        </trans-unit>
        <trans-unit id="da35771039c5ede750defdd998bce46defbc8a67" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs for each element of the given collection, where key is the element itself and value is provided by the &lt;a href=&quot;../associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt; function applied to that key.</source>
          <target state="translated">指定されたコレクションの各要素のキーと値のペアを&lt;a href=&quot;../associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップに入力して返します。ここで、keyは要素自体であり、値はそのキーに適用された&lt;a href=&quot;../associate-with-to#kotlin.collections%24associateWithTo%28kotlin.collections.Iterable%28%28kotlin.collections.associateWithTo.K%29%29%2C+kotlin.collections.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.collections.associateWithTo.K%2C+kotlin.collections.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="1bd8c37c5ec1a10d6a6cf183b7489e4a31e66cd2" translate="yes" xml:space="preserve">
          <source>Populates and returns the &lt;a href=&quot;../associate-with-to#kotlin.sequences%24associateWithTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateWithTo.K%29%29%2C+kotlin.sequences.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateWithTo.K%2C+kotlin.sequences.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; mutable map with key-value pairs for each element of the given sequence, where key is the element itself and value is provided by the &lt;a href=&quot;../associate-with-to#kotlin.sequences%24associateWithTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateWithTo.K%29%29%2C+kotlin.sequences.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateWithTo.K%2C+kotlin.sequences.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt; function applied to that key.</source>
          <target state="translated">指定されたシーケンスの各要素のキーと値のペアを&lt;a href=&quot;../associate-with-to#kotlin.sequences%24associateWithTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateWithTo.K%29%29%2C+kotlin.sequences.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateWithTo.K%2C+kotlin.sequences.associateWithTo.V%29%29%29%2Fdestination&quot;&gt;宛先の&lt;/a&gt;可変マップに入力して返します。ここで、keyは要素自体であり、値はそのキーに適用された&lt;a href=&quot;../associate-with-to#kotlin.sequences%24associateWithTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.associateWithTo.K%29%29%2C+kotlin.sequences.associateWithTo.M%2C+kotlin.Function1%28%28kotlin.sequences.associateWithTo.K%2C+kotlin.sequences.associateWithTo.V%29%29%29%2FvalueSelector&quot;&gt;valueSelector&lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
