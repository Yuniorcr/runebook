<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="gnu_cobol">
    <body>
      <group id="gnu_cobol">
        <trans-unit id="c4d58ce0b1bb54c0f561e8907e04ffe9d89e88c5" translate="yes" xml:space="preserve">
          <source>PIC X(16) &amp;mdash; This register contains the date and time the program was compiled in the format &quot;mm/dd/yyhh.mm.ss&quot;. Note that only a two-digit year is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faab1a3c4ec203b389c6383f2fd9a0b1b5967bf" translate="yes" xml:space="preserve">
          <source>PICTURE Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6a530b5ee01a71031bbf926dd0d04d7d729821" translate="yes" xml:space="preserve">
          <source>PRESENT-VALUE Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de6def8d27ffaffd715bb05a0f1de913d677f1f" translate="yes" xml:space="preserve">
          <source>PRESENT-WHEN Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3a31c9fb0612106236d826f985656c27fa00fe" translate="yes" xml:space="preserve">
          <source>PROCEDURE DIVISION Main-Program-Argument Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12c49de171e8ff45e7691afead86a30c33cf2b7" translate="yes" xml:space="preserve">
          <source>PROCEDURE DIVISION RETURNING Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c47e678129694787452f711b5ce9e476e0339d7" translate="yes" xml:space="preserve">
          <source>PROCEDURE DIVISION Subprogram-Argument Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a478a1ada18c25f1d672cd086d9b5594b16518" translate="yes" xml:space="preserve">
          <source>PROCEDURE DIVISION Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ca8d091026e55d615f2ebed52ad90192bd4666" translate="yes" xml:space="preserve">
          <source>PROGRAM-ID Type Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05a7ddbe232076f4b718b4f0b93a1bf867fd986" translate="yes" xml:space="preserve">
          <source>PROMPT Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5435be0c54489a569b0a291b3f067fd4481460" translate="yes" xml:space="preserve">
          <source>PROTECTED Attribute Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8b3ce3e38db02acd8124f259036255874b20ab" translate="yes" xml:space="preserve">
          <source>Packed-decimal (i.e.&lt;code&gt;USAGE PACKED-DECIMAL&lt;/code&gt;&lt;code&gt;USAGE COMP-3&lt;/code&gt;or&lt;code&gt;USAGE COMP-6&lt;/code&gt; data is stored as a series of bytes such that each byte contains two 4-bit fields, referred to as &amp;rsquo;nibbles&amp;rsquo; (since they comprise half a &quot;byte&quot;, they&amp;rsquo;re just &quot;nibbles&quot; &amp;mdash; don&amp;rsquo;t groan, I don&amp;rsquo;t just make this stuff up!). Each nibble represents a&lt;code&gt;9&lt;/code&gt;in the&lt;code&gt;PICTURE&lt;/code&gt;and each holds a single decimal digit encoded as its binary value (0 = 0000, 1 = 0001, &amp;hellip; , 9 = 1001).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df4debd8c25c3d331c6d6f74d9c512ed615340b" translate="yes" xml:space="preserve">
          <source>Page Footing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baddf38bfa7e551158f6ec6ea53979d031e77c1c" translate="yes" xml:space="preserve">
          <source>Page Heading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc422d197f885cd73bbf6cb19ad07f143f64cc5" translate="yes" xml:space="preserve">
          <source>Parameters: none Returns: PID (the child process gets &amp;acirc;0&amp;acirc; returned, the calling process gets the PID of the created children).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c0b8614e902d865b389a981de864968906fe3a" translate="yes" xml:space="preserve">
          <source>Parenthesis must be used to explicitly signify the sequence in which conditions are evaluated and processed if the default precedence isn&amp;rsquo;t desired. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1727880630dd1fbf9ecb1fb3a261512a196787cf" translate="yes" xml:space="preserve">
          <source>Parenthesis provide for a recursive application of the arithmetic expression rules, effectively allowing you to alter the precedence of operations. 4 times 2 is 8 (the use of parenthesis &quot;trumps&quot; the exponentiation operator, so the multiplication happens first); 8 ^ 3 is 512, minus 10 is 502.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f38b7046bb542d678cb81a4130cdce52f1dff7" translate="yes" xml:space="preserve">
          <source>Partial-line comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91b4eacd5a0ee6e28cebb6a8883adce2fae1f00" translate="yes" xml:space="preserve">
          <source>Pass a quoted literal string from GnuCOBOL to C as a zero-delimited string literal (Z&amp;rsquo;&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f223212e3bb2ae17ffe15b3b3a10416a5c4b36f" translate="yes" xml:space="preserve">
          <source>Pass alphanumeric (PIC X) or alphabetic (PIC A) data items to C subroutines by appending an ASCII NULL character (X&amp;rsquo;00&amp;rsquo;) to them. For example, to pass the 15-character LastName data item described above to a C subroutine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681583e47a37f7049858cf1cb42196b9023932d0" translate="yes" xml:space="preserve">
          <source>Passing a subroutine argument&lt;code&gt;BY VALUE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7c6f196285b117ee69f8c6840027349a6f0c75" translate="yes" xml:space="preserve">
          <source>Paths and file names may be specified on an absolute &lt;code&gt;C:\Data\datafile.dat&lt;/code&gt;&lt;code&gt;/Data/datafile.dat&lt;/code&gt; &amp;hellip;) or relative-to-the-current-directory &lt;code&gt;Data\datafile.dat&lt;/code&gt;&lt;code&gt;Data/datafile.dat&lt;/code&gt; &amp;hellip;) basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de86c41a1c8cd24f4c25886876f4c3423363b963" translate="yes" xml:space="preserve">
          <source>Perform data summarise, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b065be49e80915c4f1ecfba0a26c906331c34747" translate="yes" xml:space="preserve">
          <source>Performing special reporting actions based upon the fact that the data being used to generate the report has been sorted according to one or more key fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e0f1c8caa9a9f011e54f531c5d051a6f3b8c55" translate="yes" xml:space="preserve">
          <source>Permanent I/O error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d016004473e0e58d7682856755147e33256bb813" translate="yes" xml:space="preserve">
          <source>Permission denied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1431c6f1cea824d656da841b10c8f47251e336a0" translate="yes" xml:space="preserve">
          <source>PgDn,was pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d92a8344a4dcd6944aa8972c0546d576535b292" translate="yes" xml:space="preserve">
          <source>PgUp was pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08414b3fc797a48153d27b836c711e9af07d13e1" translate="yes" xml:space="preserve">
          <source>Phrase-Clause</source>
          <target state="translated">Phrase-Clause</target>
        </trans-unit>
        <trans-unit id="9cac84948702f6e6a49575f66c4e4043ce1e90b9" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;#Report-Writer-Features&quot;&gt;Report Writer Features&lt;/a&gt;, if you have not read it already. This will familiarize you with the Report Writer terminology that will follow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2602ffae44e122955827b0cd473f9039072f75d0" translate="yes" xml:space="preserve">
          <source>Please see availability notes on this at 1.3.13. There are a number of terms that describe various aspects of the operation of the Report Writer Control System (RWCS). Understanding the meanings of these terms is vital to developing an understanding of the subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254c646ba844fb66c2b9d7c96eff3e33b0023b0b" translate="yes" xml:space="preserve">
          <source>Pre-compiled object-code subprograms may be automatically located by the GnuCOBOL compiler and the loader by using the&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;compilation-time environment variable  The collection of compilation units supplied on a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7b5fccdbb449ec2c551649d5898d352077f7f4" translate="yes" xml:space="preserve">
          <source>Prepare a text file containing 100 or so records, each consisting of a numeric scale &lt;code&gt;123456789012345678901234&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4d59948adf7751277e60ef5b8dcba523662f1d" translate="yes" xml:space="preserve">
          <source>Presented throughout the report, as needed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df23f2f29cdba6cde69b3fa2a8d89b0fced491b1" translate="yes" xml:space="preserve">
          <source>Primary Entry-Point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f9ce32d08588f834c56376d9dc94ccfe00e53b" translate="yes" xml:space="preserve">
          <source>Print the file in a manner consistent with your answers to questions 1-4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5a507a8fc83697bf613f4d29c4c2f58980754a" translate="yes" xml:space="preserve">
          <source>Printers supporting channel positioning are generally mainframe-type line printers. When writing to printers that do not support channel positioning, a formfeed will be issued to the printer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657d6289c4aca78075281817dcd5c1921c50a61e" translate="yes" xml:space="preserve">
          <source>Procedural PERFORM Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ea781ed99930cb2040f2b3d1f7277fa799d5c7" translate="yes" xml:space="preserve">
          <source>Procedure</source>
          <target state="translated">Procedure</target>
        </trans-unit>
        <trans-unit id="6e1ab28e843a99805bbdb57ed1c711c419e1aa51" translate="yes" xml:space="preserve">
          <source>Procedure name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f87251fcb83be18c4fa1e9400471f023bee612" translate="yes" xml:space="preserve">
          <source>Procedure names may be up to thirty one (31) characters long and may consist of letters, numbers, dashes and underscores. A procedure name may neither begin nor end with a dash (-) or underscore (_) character. This means that &quot;Main&quot;, &quot;0100-Read-Transaction&quot; and &quot;17&quot; are all perfectly valid procedure names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d682fc9dab69c1d2daf94fe72d9c9c2027249415" translate="yes" xml:space="preserve">
          <source>Procedures</source>
          <target state="translated">Procedures</target>
        </trans-unit>
        <trans-unit id="f726a7d843f5607354d5fb12395564570f1b96b0" translate="yes" xml:space="preserve">
          <source>Processing of any&lt;code&gt;LINE&lt;/code&gt;(see &lt;a href=&quot;#LINE&quot;&gt;LINE&lt;/a&gt;) clauses within the report group in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca535fcf65ddac45b10bbd190bd912efb8febc8" translate="yes" xml:space="preserve">
          <source>Processing of the&lt;code&gt;NEXT GROUP&lt;/code&gt;(see &lt;a href=&quot;#NEXT-GROUP&quot;&gt;NEXT GROUP&lt;/a&gt;) clause (if any) within the report group in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf95463f80efe59bac0a5ec88028c32e9047c22" translate="yes" xml:space="preserve">
          <source>Producing a footer, known as a control footing after the detail lines that shared the same old value for the control field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a031b41f38921ea04f5486bed7bf8b3dd63fc44" translate="yes" xml:space="preserve">
          <source>Producing a header, known as a control heading before the detail lines that share the same new value for the control field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d68007b0763cb230f9034ec96f52b39d03ad630" translate="yes" xml:space="preserve">
          <source>Program</source>
          <target state="translated">Program</target>
        </trans-unit>
        <trans-unit id="54e7e8e624bf02687707da11dd8ce3501a9e30d0" translate="yes" xml:space="preserve">
          <source>Program file names should match exactly the specification of PROGRAM-ID (including case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1d5bfc26224f1a15ab4aea7046cdbbdc25cd1b" translate="yes" xml:space="preserve">
          <source>Program source code may be concatenated as shown here, provided an&lt;code&gt;END PROGRAM&lt;/code&gt;marker naming the&lt;code&gt;PROGRAM-ID&lt;/code&gt;of the just-completed program is used to separate one program from another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de21741dc59a32e0e7c8ba7a44dd3af330fe83fa" translate="yes" xml:space="preserve">
          <source>Program source files should have extensions of &quot;.cob&quot; or &quot;.cbl&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275b5a83064b03891d014483794645ab21eadb7b" translate="yes" xml:space="preserve">
          <source>Program-Source-Lines-3</source>
          <target state="translated">Program-Source-Lines-3</target>
        </trans-unit>
        <trans-unit id="2a9e3057057dc7e2c578bf3e6184686cd6169420" translate="yes" xml:space="preserve">
          <source>Program-Source-Lines-n</source>
          <target state="translated">Program-Source-Lines-n</target>
        </trans-unit>
        <trans-unit id="5488eb52d0b2069f39abbb1920ab8b988889fe47" translate="yes" xml:space="preserve">
          <source>Programmers may create their own figurative constants via the&lt;code&gt;SYMBOLIC CHARACTERS&lt;/code&gt;(see &lt;a href=&quot;#Symbolic_002dCharacters_002dClause&quot;&gt;Symbolic-Characters-Clause&lt;/a&gt;) clause of the&lt;code&gt;SPECIAL-NAMES&lt;/code&gt;(see &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;) paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1df5ce010ae9a6c18dff20bf206a26ce5f2a2c5" translate="yes" xml:space="preserve">
          <source>Programmers may use a reserved word as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f49b39beacf3661dbc95559f2addb85dc7b9aee" translate="yes" xml:space="preserve">
          <source>Programs coded for 1985 (and beyond) standards don&amp;rsquo;t need it, instead using the explicit scope-terminator&lt;code&gt;END-IF&lt;/code&gt;to inform the compiler where &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d080ddb65112a4fbc1c1e54f907db42a9976aa" translate="yes" xml:space="preserve">
          <source>Prompt Character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a220b87a7be509dbece00789d4b3d878c3a60b1" translate="yes" xml:space="preserve">
          <source>Prompt characters will be automatically transformed into spaces upon input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf45316af5e41facda6d4ce2eb62cdd65e8a987" translate="yes" xml:space="preserve">
          <source>PrtSc (Print Screen) was pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f9ef15986bae3ffde2ed5089694e852bf420de" translate="yes" xml:space="preserve">
          <source>Putting the program &amp;rsquo;to sleep&amp;rsquo;, specifying the sleep time in nanoseconds; CAVEAT: although you&amp;rsquo;ll express the time in nanoseconds, Windows systems will only be able to sleep at a millisecond granularity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d07e7e49c86dad93291362c0dab33a6083e56e" translate="yes" xml:space="preserve">
          <source>Putting the program &amp;rsquo;to sleep&amp;rsquo;, specifying the sleep time in seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dfe59bf8fd63e613158ecf86f77c108701c252" translate="yes" xml:space="preserve">
          <source>QUEUE, QUOTE, QUOTES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffe44e547583bf61e0c2b02d0288df152e1e76d" translate="yes" xml:space="preserve">
          <source>Qualification</source>
          <target state="translated">Qualification</target>
        </trans-unit>
        <trans-unit id="f08a1db7e6b2f2c1d6778ded5854c67530551d51" translate="yes" xml:space="preserve">
          <source>RAISE, RAISING, RANDOM, RANGE, RD, READ, RECEIVE, RECORD, RECORDING, RECORDS, RECURSIVE, REDEFINES, REEL, REFERENCE, REFERENCES, RELATION, RELATIVE, RELEASE, REM, REMAINDER, REMARKS, REMOVAL, RENAMES, REPLACE, REPLACING, REPORT, REPORTING, REPORTS, REPOSITORY, REQUIRED, RESERVE, RESET, RESUME, RETRY, RETURN, RETURN-CODE, RETURNING, REVERSE, REVERSED, REVERSE-VIDEO, REWIND, REWRITE, RF, RH, RIGHT, RIGHT-JUSTIFY, ROLLBACK, ROUNDED, ROUNDING, RUN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2ad98025c5ccedb9a8062b45fc81b9a85a1f9b" translate="yes" xml:space="preserve">
          <source>RANDOM Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbba2fb2211acfc6f7e82c9b2672b38909b3350b" translate="yes" xml:space="preserve">
          <source>RANGE Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db466c67d7c924cf8154e41dc48967a59e9f1388" translate="yes" xml:space="preserve">
          <source>READ formats. For that reason, when&lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt;has been specified and you want to tell the GnuCOBOL compiler that this minimal statement should be treated as a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297a219959d7e33eb60f63d58ef1707009c5589b" translate="yes" xml:space="preserve">
          <source>READY TRACE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2443315e578a83c109e2573005e5d586a47e1f1" translate="yes" xml:space="preserve">
          <source>REDEFINES Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0eda3b4da0e9ceb260e9bdb8e5e7288b128d72" translate="yes" xml:space="preserve">
          <source>RELEASE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1452eb67d984473ae14ca789abb0dd5e6572d980" translate="yes" xml:space="preserve">
          <source>REM Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860c8f47d893f4be74f855bc3ab2e7755e06e9f8" translate="yes" xml:space="preserve">
          <source>RENAMES Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee104cf480ad829d0d18846195f1ae3e42608d2" translate="yes" xml:space="preserve">
          <source>REPORT FOOTING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45db7be4ee99a037495a1b32a06d59c28c970b98" translate="yes" xml:space="preserve">
          <source>REPORT HEADING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06102dd7b6d8bbeea07ca6248d2d0491f36ca514" translate="yes" xml:space="preserve">
          <source>REPORT SECTION Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bae7109eaffc652415c08257a2232ce3d6d355" translate="yes" xml:space="preserve">
          <source>REPORT-SECTION-Data-Item</source>
          <target state="translated">REPORT-SECTION-Data-Item</target>
        </trans-unit>
        <trans-unit id="bbf4d4bf6e7c7b88c13cb244b20c9db60fea7fe8" translate="yes" xml:space="preserve">
          <source>REPORT-SECTION-Data-Item Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b842cd5554e5443ec37175b86f0a7439277eaa" translate="yes" xml:space="preserve">
          <source>REPOSITORY Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e46f46f9ea86a2a9553486ee7aa2c96ae58ba11" translate="yes" xml:space="preserve">
          <source>REQUIRED Attribute Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda8fbff28f8810780b1a56c33efc20d1dde8b3d" translate="yes" xml:space="preserve">
          <source>RESET TRACE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed24f6619445e8cfbe948cba81942311748cd46" translate="yes" xml:space="preserve">
          <source>RETURN Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3589e955cfc0488a73e50210ba64c73c4db3d5b" translate="yes" xml:space="preserve">
          <source>REVERSE Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62008f8b8cc34e29b2ffb97c051904c56144fb42" translate="yes" xml:space="preserve">
          <source>REVERSE-VIDEO Attribute Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8603e175aadbb76620be9e78e2b5af2c6f0031" translate="yes" xml:space="preserve">
          <source>REWRITE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8278d68f89bd316de6fc950777060e28082a6774" translate="yes" xml:space="preserve">
          <source>ROLLBACK Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013737bd37ee61fd6988b27b61f124f3f09c2c5b" translate="yes" xml:space="preserve">
          <source>ROUNDED Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7086af21cea218894d38b86c0f36ebe5431a8978" translate="yes" xml:space="preserve">
          <source>RWCS will still be counting lines to decide when to close off one page and start a new one, but when a new page is started it&amp;rsquo;s page heading will</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b743a7c1306a4852bcc4d9446e41b820e314cfb0" translate="yes" xml:space="preserve">
          <source>Random READ Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe6d420b581df57a36800ee0b4e6d48b9222c04" translate="yes" xml:space="preserve">
          <source>Range of Values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fb69456149034e0c74e43230f8241bc8a15df6" translate="yes" xml:space="preserve">
          <source>Read error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96936a418561c4f0cf4ce37907f034b2ce74117" translate="yes" xml:space="preserve">
          <source>Read not done</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32211bbc813e496d9a82dc784c0086ff3f040eb" translate="yes" xml:space="preserve">
          <source>Reads all eight of the COBOL switches (SWITCH-1 through SWITCH-8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09acbc68ca2f9bb219e307419a9388579ddd5613" translate="yes" xml:space="preserve">
          <source>Recognizing when control fields on the report &amp;mdash; fields tied to those that were used as&lt;code&gt;SORT&lt;/code&gt;statement (see &lt;a href=&quot;#SORT&quot;&gt;SORT&lt;/a&gt;) keys &amp;mdash; have changed. This is known as a control break. The RWCS can automatically perform the following reporting actions when a control break occurs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c54132b8e5a9fa44a9a1a7d30b1be36ab3c4247" translate="yes" xml:space="preserve">
          <source>Record</source>
          <target state="translated">Record</target>
        </trans-unit>
        <trans-unit id="ce416265562e75e05fc8d34feb2de4e9ae68719c" translate="yes" xml:space="preserve">
          <source>Record locked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafe95bf83724804fd5d5b773a1aceb42c757e0f" translate="yes" xml:space="preserve">
          <source>Record overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683f2af03fd2b451e73dee88eff2a425d1ecd97a" translate="yes" xml:space="preserve">
          <source>Records in this type of file are all the same physical length, except possibly for the very last record in the file, which may be shorter than the others. If variable-length logical records are defined to the program, the space occupied by each physical record in the file will occupy the space described by the longest record description in the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8bfa364f950637050d748a4e18c3576f1bf748" translate="yes" xml:space="preserve">
          <source>Records in this type of file are all the same physical length. If variable-length logical records are defined to the program, the space occupied by each physical record in the file will occupy the maximum possible space, and the logical record length field will contain the number of bytes of data in the record that are actually in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc533c96861929cfb20ffe2f1ccaa0c199fe22c" translate="yes" xml:space="preserve">
          <source>Records must be read from or written to these files in a purely sequential manner. The only way to read (or write) record number 100 would be to have read (or written) records number 1 through 99 first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbeae30df9c604bb1a30ed80ec60f1cebdc2b9f" translate="yes" xml:space="preserve">
          <source>Recursive Subprogram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da484c501d81e3eb5897020437a8f807f382208e" translate="yes" xml:space="preserve">
          <source>Red: COB-COLOR-RED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111f6b94230823d5f9d9b5c8661cde1fc214b6f9" translate="yes" xml:space="preserve">
          <source>Reference Modifier (Format 1) Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e36307df79002e130ab3dd97ca6835f5f295a6" translate="yes" xml:space="preserve">
          <source>Reference Modifier (Format 2) Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30329903751ce4ff8417bb80e18251dd7c760418" translate="yes" xml:space="preserve">
          <source>Reference modification may be used anywhere an identifier is legal, including serving as the receiving field of statements like&lt;code&gt;MOVE&lt;/code&gt;(see &lt;a href=&quot;#MOVE&quot;&gt;MOVE&lt;/a&gt;),&lt;code&gt;STRING&lt;/code&gt;(see &lt;a href=&quot;#STRING&quot;&gt;STRING&lt;/a&gt;) and&lt;code&gt;ACCEPT&lt;/code&gt;(see &lt;a href=&quot;#ACCEPT&quot;&gt;ACCEPT&lt;/a&gt;), to name a few.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b929dfaa30d9c57fc875dc3ae211dcda30183e2" translate="yes" xml:space="preserve">
          <source>Reference modifier out of bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292bc0cf7eadba7bffbf9a17d47d5c140de33bd9" translate="yes" xml:space="preserve">
          <source>References all character positions of CUSTOMER-LAST-NAME from the fourth onward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2358ec73c08c61f19384f30ea6b4e2a0fbbd83" translate="yes" xml:space="preserve">
          <source>References characters 7 through 11 (5 characters in total) in the 6th occurrence of Table-Entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767a4b3e7cf181198eb8a779db4f399f44e6d264" translate="yes" xml:space="preserve">
          <source>References the current month as a 2-digit number in character form. See &lt;a href=&quot;#CURRENT_002dDATE&quot;&gt;CURRENT-DATE&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038d770e8d89d23f07610fa1be0137c66a6fea57" translate="yes" xml:space="preserve">
          <source>References the first three characters of CUSTOMER-LAST-NAME.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c0c22f11cdf98888eb8e2651eb44a37d101835" translate="yes" xml:space="preserve">
          <source>References to&lt;code&gt;PAGE-COUNTER&lt;/code&gt;in the procedure division must be qualified with the appropriate report name if there are multiple&lt;code&gt;RD&lt;/code&gt; defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc6721faab5f2802ecdc12b1549bca72e8dd5a2" translate="yes" xml:space="preserve">
          <source>References to&lt;code&gt;PAGE-COUNTER&lt;/code&gt;within the report section will be implicitly qualified with the name of the report to which the report group referencing the register belongs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b4727d522cc8fd132f13dbc1bd77418c2f5fa2" translate="yes" xml:space="preserve">
          <source>Referencing a&lt;code&gt;BASED&lt;/code&gt;data item either before its storage has been allocated or after its storage has been released (via the&lt;code&gt;FREE&lt;/code&gt;statement) will lead to &quot;unpredictable results&quot;. That&amp;rsquo;s how reference manuals and standards specifications talk about this situation. In the author&amp;rsquo;s experience, the results are all too predictable &amp;mdash; the program aborts from an attempt to reference an unallocated area of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409fda81216da86f4b719672a1c841c502a8a320" translate="yes" xml:space="preserve">
          <source>Regardless of how many programs comprise a single GnuCOBOL source file, only a single output executable program will be generated from that source file when the file is compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7478f48888d55ca4c1a34fa362ca62073e45fb" translate="yes" xml:space="preserve">
          <source>Regardless of the manner in which a main program is executed (i.e. directly or via&lt;code&gt;cobcrun&lt;/code&gt;, any arguments specified to the program may be retrieved via any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754b50352cbeb073b05a92d3dc3dd894a1fd30c8" translate="yes" xml:space="preserve">
          <source>Regardless of the value moved into the field, this symbol will insert the currency symbol into the data item&amp;rsquo;s value in the position where it occurs in the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d10a49661c56094a589b50b21f808472559b68" translate="yes" xml:space="preserve">
          <source>Regardless of whether the compiler is operating in Fixed or Free Format Mode, GnuCOBOL allows alphanumeric literals to be broken up into separate fragments. These fragments have their own beginning and ending quote/apostrophe characters and are &quot;glued together&quot; at compilation time using &quot;&amp;amp;&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b5e0b9af6147c0242db84e0c4a13e171c5553f" translate="yes" xml:space="preserve">
          <source>RelOp Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b451c449833edcae74df44c9b1e2774aa11aba" translate="yes" xml:space="preserve">
          <source>Relation-Condition Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2bbee2af3f24cebcd54dfe968efd8b4dc84da8" translate="yes" xml:space="preserve">
          <source>Relative files are processed using the following statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8074a49fb497726af6af68fe038ef3c63f14d75" translate="yes" xml:space="preserve">
          <source>Remember that the null characters are actually in the GnuCOBOL &quot;Arg1&quot; and &quot;Arg2&quot; data items. They don&amp;rsquo;t appear in the output, but they ARE there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b41aeb9a8ef66492ba2168a625b9aeb689e33ca" translate="yes" xml:space="preserve">
          <source>Remember that the points described here are intended to make things easier for you, the programmer. No COBOL compiler cares one way or another whether any of these suggestions are followed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3c352d613abe4e31f868838e58187f552464af" translate="yes" xml:space="preserve">
          <source>Repeated, as needed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086db9ae73624a8fd462fa0d1f01022947edee6c" translate="yes" xml:space="preserve">
          <source>Replace Mode remains in-effect &amp;mdash; continuing to make source code changes &amp;mdash; until another Format 1&lt;code&gt;REPLACE&lt;/code&gt;is encountered, the end of currently compiling program source file is reached or a Format 2&lt;code&gt;REPLACE&lt;/code&gt;statement is encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b67c018726c13647c572f1447f0e2a6fa2576e" translate="yes" xml:space="preserve">
          <source>Replace one or more complete reserved words, user-defined identifiers or literals; the following points apply to this option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c1a853f5318fa583f60512501f1e7bbab158ad" translate="yes" xml:space="preserve">
          <source>Replacement of one or more complete reserved words, user-defined identifiers or literals; the following points apply to this option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3584f020632f05d39728f2ebe9927cf604a1725" translate="yes" xml:space="preserve">
          <source>Report Footing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b52f1abe3ac29f70381d19510c3cba0043a6bbd" translate="yes" xml:space="preserve">
          <source>Report Group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7f2e7a7c1eab0ca6e6f5f80c57a1506edbb36d" translate="yes" xml:space="preserve">
          <source>Report Heading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0e8276f3c85c4332b49cc15cda40edfc99748e" translate="yes" xml:space="preserve">
          <source>Report group declarations must be followed by at least one &amp;lt;&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c0ff29655342b1619cb8511d8231760ec3468c" translate="yes" xml:space="preserve">
          <source>Report-Description (RD) Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d8d840181db86a81475c4ecbc7c1aebafea842" translate="yes" xml:space="preserve">
          <source>Report-Group-Definition Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc78c4dd35e76513ea8698d9cdd17d8aadc720d" translate="yes" xml:space="preserve">
          <source>Reserved Word</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f80623ffda4637ef16987aa5f47e5c605a09b42" translate="yes" xml:space="preserve">
          <source>Reserved Words</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f811c8adb8a6b1e9b9b9faaf6f3806186fa7fe0" translate="yes" xml:space="preserve">
          <source>Reserved words of the COBOL language will appear in UPPER-CASE. When they appear underlined, as this one is, they are required reserved words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="61a3a6e39b507fd50579c74b81260ece96d65764" translate="yes" xml:space="preserve">
          <source>Result is &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635841ecd7e49d52016a2baa42fe40227b28508e" translate="yes" xml:space="preserve">
          <source>Result is &amp;rsquo;ABC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e077fbe236df277dc5c01298886daa0417a3d9" translate="yes" xml:space="preserve">
          <source>Result is &amp;rsquo;ABCDEF&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d662f46412276c6c8a8d7c81378948cbde22381" translate="yes" xml:space="preserve">
          <source>Result is &amp;rsquo;DEFGHI&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b027c7cc37d7818b9336c7ca74e14d71d4fdfb" translate="yes" xml:space="preserve">
          <source>Retrieves the number of arguments passed to the program executing the CALL X&quot;91&quot;, saving that number into the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c590f5f3ec023804208a621501668d27e0e77ec1" translate="yes" xml:space="preserve">
          <source>Retrieving information about the currently-executing program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c570687be468812fdc35b94e1681fcc239fc3dc" translate="yes" xml:space="preserve">
          <source>Retrieving the number of arguments passed to a subroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f4c7dc209de44ce48630dcaecde0952de812d1" translate="yes" xml:space="preserve">
          <source>Return to step (C).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d71ad8c451fa23368b22f5954a4b59a775302a6" translate="yes" xml:space="preserve">
          <source>Reverse Video</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcf181cd4a0a23c939d756ac0bf62d450c9e879" translate="yes" xml:space="preserve">
          <source>Rewriting a record does not cause the contents of the file to be physically updated until the next block of the file is read, a&lt;code&gt;COMMIT&lt;/code&gt;(see &lt;a href=&quot;#COMMIT&quot;&gt;COMMIT&lt;/a&gt;) or&lt;code&gt;UNLOCK&lt;/code&gt;statement (see &lt;a href=&quot;#UNLOCK&quot;&gt;UNLOCK&lt;/a&gt;) is issued or that file is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b1d11588a96b44e2ed96b65592ce6a4f7de4b" translate="yes" xml:space="preserve">
          <source>Rounding is to the nearest value (larger or smaller). If two values are equally near, the value whose rightmost digit is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad6706b3cf4bc7ae1c6f29e19ebf628256c5d56" translate="yes" xml:space="preserve">
          <source>Rounding is to the nearest value (larger or smaller). If two values are equally near, the value with the larger absolute value is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7615ee1054e581dcc3a8de4ea377f1d1dc3d34fc" translate="yes" xml:space="preserve">
          <source>Rounding is to the nearest value (larger or smaller). If two values are equally near, the value with the smaller absolute value is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef9cebf7a4f3fc0f3641120885da85acae7fab9" translate="yes" xml:space="preserve">
          <source>Rounding is to the nearest value of larger magnitude.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c473e95e70ef4113c7e4d23d6d9d39d929f8ba56" translate="yes" xml:space="preserve">
          <source>Rounding is to the nearest value whose magnitude is smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749f6595f010ab3ccab08d1309aeff0232369c6b" translate="yes" xml:space="preserve">
          <source>Rounding is toward the nearest value whose algebraic value is larger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789a21df2c0ea997aa47256c6917e1c2bd59b330" translate="yes" xml:space="preserve">
          <source>Rounding is toward the nearest value whose algebraic value is smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e4915dc94f8f7ed08953e738a14007e25b02c6" translate="yes" xml:space="preserve">
          <source>Rounding only applies when the result being saved to a receiving field with a&lt;code&gt;ROUNDED&lt;/code&gt;clause is a non-integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e9028a32cf8efdb6c7f70c0a91cdae3cb6e291" translate="yes" xml:space="preserve">
          <source>S, SAME, SCREEN, SCROLL, SD, SEARCH, SECONDS, SECONDS-FROM-FORMATTED-TIME, SECONDS-PAST-MIDNIGHT, SECTION, SECURE, SECURITY, SEGMENT, SEGMENT-LIMIT, SELECT, SELF, SEND, SENTENCE, SEPARATE, SEQUENCE, SEQUENTIAL, SET, SHARING, SIGN, SIGNED, SIGNED-INT, SIGNED-LONG, SIGNED-SHORT, SIN, SIZE, SORT, SORT-MERGE, SORT-RETURN, SOURCE, SOURCE-COMPUTER, SOURCES, SPACE, SPACE-FILL, SPACES, SPECIAL-NAMES, SQRT, STANDARD, STANDARD-1, STANDARD-2, STANDARD-BINARY, STANDARD-COMPARE, STANDARD-DECIMAL, STANDARD-DEVIATION, START, STATEMENT, STATIC, STATUS, STDCALL, STDERR, STDIN, STDOUT, STEP, STOP, STORED-CHAR-LENGTH, STRING, STRONG, SUB-QUEUE-1, SUB-QUEUE-2, SUB-QUEUE-3, SUBSTITUTE, SUBSTITUTE-CASE, SUBTRACT, SUM, SUPER, SUPPRESS, SW0, SW1, SW10, SW11, SW12, SW13, SW14, SW15, SW2, SW3, SW4, SW5, SW6, SW7, SW8, SW9, SWITCH 0, SWITCH-0, SWITCH 1, SWITCH-1, SWITCH 10, SWITCH-10, SWITCH 11, SWITCH-11, SWITCH 12, SWITCH-12, SWITCH 13, SWITCH-13, SWITCH 14, SWITCH-14, SWITCH 15, SWITCH-15, SWITCH 16, SWITCH-16, SWITCH 17, SWITCH-17, SWITCH 18, SWITCH-18, SWITCH 19, SWITCH-19, SWITCH 2, SWITCH-2, SWITCH 20, SWITCH-20, SWITCH 21, SWITCH-21, SWITCH 22, SWITCH-22, SWITCH 23, SWITCH-23, SWITCH 24, SWITCH-24, SWITCH 25, SWITCH-25, SWITCH 26, SWITCH-26, SWITCH-27, SWITCH-28, SWITCH-29, SWITCH 3, SWITCH-3, SWITCH-30, SWITCH-31, SWITCH-32, SWITCH-33, SWITCH-34, SWITCH-35, SWITCH-36, SWITCH 4, SWITCH-4, SWITCH 5, SWITCH-5, SWITCH 6, SWITCH-6, SWITCH 7, SWITCH-7, SWITCH 8, SWITCH-8, SWITCH 9, SWITCH-9, SWITCH A, SWITCH B, SWITCH C, SWITCH D, SWITCH E, SWITCH F, SWITCH G, SWITCH H, SWITCH I, SWITCH J, SWITCH K, SWITCH L, SWITCH M, SWITCH N, SWITCH O, SWITCH P, SWITCH Q, SWITCH R, SWITCH S, SWITCH T, SWITCH U, SWITCH V, SWITCH W, SWITCH X, SWITCH Y, SWITCH Z, SYMBOL, SYMBOLIC, SYNC, SYNCHRONISED, SYNCHRONIZED, SYSERR, SYSIN, SYSIPT, SYSLIST, SYSLST, SYSOUT, SYSTEM, SYSTEM-DEFAULT, SYSTEM-OFFSET</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363f373bfcd4d4ccbf275f3c0f160a1af75ccf07" translate="yes" xml:space="preserve">
          <source>SCREEN-SECTION-Data-Item Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09a03255901a0557a4c216efea055996652af0e" translate="yes" xml:space="preserve">
          <source>SEARCH ALL Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe39b36b8b7acffcfcbc17625fbf54678d5ee131" translate="yes" xml:space="preserve">
          <source>SEARCH Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a8f26d4a02b40195ab4a41bc77f226df838e64" translate="yes" xml:space="preserve">
          <source>SECONDS-FROM-FORMATTED-TIME Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9aab22ee485d02b4bbb39677a796867aeb41d0e" translate="yes" xml:space="preserve">
          <source>SECONDS-PAST-MIDNIGHT Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c90a5cbf1a7f1839010593040298c9ab3b34b8" translate="yes" xml:space="preserve">
          <source>SECURE Attribute Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e326685f4538da2210aeadc79af06dbf194c59d9" translate="yes" xml:space="preserve">
          <source>SELECT Statement Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d32fc8e8ff19d8791ede4bf59ac75915e6b38cd" translate="yes" xml:space="preserve">
          <source>SET ADDRESS Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d4d9a313dba20aac9d8d7ddd4d383a4a9d3598" translate="yes" xml:space="preserve">
          <source>SET ATTRIBUTE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2d0741307e9153e4830db935a4421d66c8e424" translate="yes" xml:space="preserve">
          <source>SET Condition Name Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e13fb57e6cdb5df1f70992f5cb3ebc302f9040" translate="yes" xml:space="preserve">
          <source>SET ENVIRONMENT Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fd5faabb7ac0b2fde2d5cc29abd3105f8d0c3b" translate="yes" xml:space="preserve">
          <source>SET Index Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc56c1e0ac9b84b165916822141c813590e6c08f" translate="yes" xml:space="preserve">
          <source>SET Program-Pointer Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a664d01bd559812f3d03a6aabd6f96c15cdf91" translate="yes" xml:space="preserve">
          <source>SET Switch Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d73a61b9e17a56f006be99946149090b878499f" translate="yes" xml:space="preserve">
          <source>SET UP/DOWN Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd9270b5f3cde6595a4438ab2187803ce42d925" translate="yes" xml:space="preserve">
          <source>SIGN Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a83dac46af2e8cb72a955b050e5cc8eaefd4e2a" translate="yes" xml:space="preserve">
          <source>SIGN-IS Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5015ee6d44e7a4080b421d17c2335eceeae1e10f" translate="yes" xml:space="preserve">
          <source>SIN Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af17e6b0426030851200e5ff8767dfd96a2cb12" translate="yes" xml:space="preserve">
          <source>SOURCE Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d74693606d01495ff55af3e47c91d7ec6bef52" translate="yes" xml:space="preserve">
          <source>SOURCE-COMPUTER Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57836c206edabe132d738320da3ab285c5dfe13" translate="yes" xml:space="preserve">
          <source>SPECIAL-NAMES ALPHABET Literal-Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa23f2f84269c3dd438fcab08787b633b64d7642" translate="yes" xml:space="preserve">
          <source>SPECIAL-NAMES Alphabet-Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602bd9218579d2b3939ad13100ea8a12a4534df3" translate="yes" xml:space="preserve">
          <source>SPECIAL-NAMES Class-Definition-Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97458739dc8559d7da877dee902df118a77f419" translate="yes" xml:space="preserve">
          <source>SPECIAL-NAMES Switch-Definition-Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc81091dcec56a8dd5e4bff7530560b6a90ab3fe" translate="yes" xml:space="preserve">
          <source>SPECIAL-NAMES Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd12df6e50de8878ab5fac21624129b15878369" translate="yes" xml:space="preserve">
          <source>SPECIAL-NAMES-Symbolic-Characters-Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209b015447e2b6acc94d8ac0319e13f9c5a4130f" translate="yes" xml:space="preserve">
          <source>SQRT Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac339bd3f97676e1542e0534ed5895fed5588dd" translate="yes" xml:space="preserve">
          <source>STANDARD-DEVIATION Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324703735b466c4ab95c0f7c2fb52f9b248bfcf7" translate="yes" xml:space="preserve">
          <source>START Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154247a34e87fedbcd87e0036c7ef9c150466631" translate="yes" xml:space="preserve">
          <source>STATIC the program name is called as a included element and not dynamically which is the normal default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8b1214e6877778710445249f6455d61e23558b" translate="yes" xml:space="preserve">
          <source>STDCALL. &amp;lt; more info needed &amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043f458614daa43f0a3ab72aa35d366b88a5502c" translate="yes" xml:space="preserve">
          <source>STOP Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73adc9f6477b49121c2d68f1d5964e7524cfd34" translate="yes" xml:space="preserve">
          <source>STORED-CHAR-LENGTH Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37eaf43b32bdd6e65b4016cc10646aea2f72ef2" translate="yes" xml:space="preserve">
          <source>STRING Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff55ce740d5c2c585b9bbceb393487ac9e4807b2" translate="yes" xml:space="preserve">
          <source>STRING overflow condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2587e8ac8e0d653df815007d01377f32dc9f7e55" translate="yes" xml:space="preserve">
          <source>SUBSTITUTE Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32d41f6b43771bab0f678b538fa382f91459d5a" translate="yes" xml:space="preserve">
          <source>SUBSTITUTE-CASE Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dc00ca1e6859602e36de8cc97a942f3af747aa" translate="yes" xml:space="preserve">
          <source>SUBTRACT CORRESPONDING Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e6dfbce21db0afec1fefa289a119b9142fd152" translate="yes" xml:space="preserve">
          <source>SUBTRACT FROM Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b64cdce88721394e621b40d4588fd111017952c" translate="yes" xml:space="preserve">
          <source>SUBTRACT GIVING Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d110e717f81cc113ec939395eba1cd94bd8dddda" translate="yes" xml:space="preserve">
          <source>SUM Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f665dc4d3c0ab4d0010b2ef1482cc5557d7677bb" translate="yes" xml:space="preserve">
          <source>SUM-OF Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2faa7be059c987f7fbbdb165d29cb72d83c29f61" translate="yes" xml:space="preserve">
          <source>SUPPRESS Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f93c80ea5570a868c2cf2d9c0763d3ee2d040e" translate="yes" xml:space="preserve">
          <source>SYNCRONIZED Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386ea13c23fc6b30b837120168afda6138fdba11" translate="yes" xml:space="preserve">
          <source>SYSTEM Built-In Subroutine Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5106a38fa95381ab7467e5d99851adc23ee8ca87" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY-DOUBLE SIGNED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef15899c334707599da1bec824ea706414edbf1c" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY-DOUBLE UNSIGNED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b0dcb23774b5d593e582959996eb9b385b6198" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY-LONG SIGNED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dc348776c8fdd2d0b3c1ef214828b69dda40cd" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY-LONG UNSIGNED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555c6e1ae2e0b06dc311892979bc8b84fd9e27c3" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY-SHORT SIGNED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f034bddabbf417bf47e6a9e1c793ff1212ed946" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY-SHORT UNSIGNED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd30040d8d743dbc60082e2570938677e309c3fd" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;BINARY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afedf7e3c06d1546cd6ac3d2c0204feaa662feff" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;FLOAT-LONG&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6bec079b1c594d6d87e98f77e3e81304dc4baa" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;FLOAT-SHORT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2bfc2f19760e379604c6320e46f148858e0419" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;PACKED-DECIMAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11fcd905fd88a8614e24b2c200c07274a2134a9" translate="yes" xml:space="preserve">
          <source>Same as&lt;code&gt;PROGRAM-POINTER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c05d4340d834aacc1d450cda307aadf3195eab" translate="yes" xml:space="preserve">
          <source>Screens are defined in the screen section of the data division. Once defined, screens are used at run-time via the&lt;code&gt;ACCEPT&lt;/code&gt;and&lt;code&gt;DISPLAY&lt;/code&gt;statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ba7d1f8387f740be70a48afccd300b20cc8bb6" translate="yes" xml:space="preserve">
          <source>Search Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40601b4434e43631bc325b4da992f8cb48c0b8d8" translate="yes" xml:space="preserve">
          <source>Search strings on&lt;code&gt;REPLACE&lt;/code&gt;are always specified using the&lt;code&gt;==&amp;lt;&lt;i&gt;pseudo-text-1&lt;/i&gt;&amp;gt;==&lt;/code&gt;option. For example, to replace all occurrences of&lt;code&gt;UPON PRINTER&lt;/code&gt; you would specify&lt;code&gt;==UPON PRINTER==&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff9d0095b351752582d903743ceaaa221d4b1a8" translate="yes" xml:space="preserve">
          <source>Secure Input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a37acd3f90ce06fc1f2074663a39689f43fb23" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;, for additional information on the other&lt;code&gt;WITH&lt;/code&gt;clause options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccc9b201c947e1e014cf775eff33dbb02a79b3d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Appendix-B-_002d-Reserved-Word-List&quot;&gt;Appendix B - Reserved Word List&lt;/a&gt;, for a complete list of GnuCOBOL reserved words for the current release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ea85685c5ddd17d8579147c4356dac31b42b17" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Arithmetic-Expressions&quot;&gt;Arithmetic Expressions&lt;/a&gt;, for more information on arithmetic expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8866370949273481f1934447dd6937e1e8a3d98" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#CORRESPONDING&quot;&gt;CORRESPONDING&lt;/a&gt;, for a discussion of how corresponding matches between two group items are established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4a948663718e8e3965f21bc5143e1baa895ca4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#CORRESPONDING&quot;&gt;CORRESPONDING&lt;/a&gt;, for information on how corresponding matches will be found between &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a012a8c47df41cb8d01f62880e8787f65affbc5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Color-Palette-and-Video-Attributes&quot;&gt;Color Palette and Video Attributes&lt;/a&gt;, for more information on screen colors and video attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1480fd1d08ee87eedcf11c4ba7778d9dcdd724" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Condition-Names&quot;&gt;Condition Names&lt;/a&gt;, for a discussion of how condition names are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9f4738b5b7a58141efe1f0c74e6f5b4fccc9ae" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Condition-Names&quot;&gt;Condition Names&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe237ef6114ed30bab01f7d6d321b66227fff97" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Data-Description-Clauses&quot;&gt;Data Description Clauses&lt;/a&gt;, for information on the usage of the various data description clauses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22c51f2e35f61813b65110710ced3e5ff98a7d3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Data-Description-Clauses&quot;&gt;Data Description Clauses&lt;/a&gt;, for information on the&lt;code&gt;EXTERNAL&lt;/code&gt;and&lt;code&gt;GLOBAL&lt;/code&gt;options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3c7cd1032e7441ffb83dbf23e1e704c0704b51" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Error-Exception-Codes&quot;&gt;Error Exception Codes&lt;/a&gt;, for a complete list of the exception codes and their meanings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0314bef84f31293f922a9a59460c263f0d332ee8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#GLOBAL&quot;&gt;GLOBAL&lt;/a&gt;, for information on the&lt;code&gt;GLOBAL&lt;/code&gt;option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50f456669b7cf3e0ba57085c4d5b594dc2c00af" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#LOCALE-Names&quot;&gt;LOCALE Names&lt;/a&gt;, for a list of typically-available locale names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cfed89ec2c088c8977784439f946e77d59b0dc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Locating-Copybooks&quot;&gt;Locating Copybooks&lt;/a&gt;, for the specific rules on how copybooks are located by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b67d5bc7c5941961d0f9dac13632cd266def73" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Marking-Changes-in-Programs&quot;&gt;Marking Changes in Programs&lt;/a&gt;, for discussion of a valuable use to which the program name area may be put today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35290b00862a216af9784d021af6d0aea693e158" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Marking-Changes-in-Programs&quot;&gt;Marking Changes in Programs&lt;/a&gt;, for discussion of a valuable use to which the sequence number area may be put today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0fb183f0445e0492e5e5f3c0c2ccb051bc33e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#RWCS-Lexicon&quot;&gt;RWCS Lexicon&lt;/a&gt;, for a description of the seven different types of report groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b243f9c7300442e9e15584d6d67d1fd0d6687d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Record-Locking&quot;&gt;Record Locking&lt;/a&gt;, for additional information on record locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c61dbdf796fbc7816c83984e2f7f701aab05cb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Record-Locking&quot;&gt;Record Locking&lt;/a&gt;, to review the various record locking behaviours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46dacf046ac16c5ec82c7d16a35e13747f33184d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Sub_002dProgramming&quot;&gt;Sub-Programming&lt;/a&gt;, for a complete discussion of sub-programming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4744e3c317efad88cd3f30d57284098ab648ae69" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#g_t01_002dLevel-Constants&quot;&gt;01-Level Constants&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29463cf63812e1b76d8c63e9fb349f445d0401c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#g_t66_002dLevel-Data-Items&quot;&gt;66-Level Data Items&lt;/a&gt;, for additional information on the RENAMES clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd431c22a0e7c6eecc05c2248dc4896286df057" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#g_t88_002dLevel-Data-Items&quot;&gt;88-Level Data Items&lt;/a&gt;, for a discussion of how this format of&lt;code&gt;VALUE&lt;/code&gt;is used to create condition names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294e8e066a44f1dcccc715bdb14fa18d882d4136" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#g_t88_002dLevel-Data-Items&quot;&gt;88-Level Data Items&lt;/a&gt;, or See &lt;a href=&quot;#Condition-Names&quot;&gt;Condition Names&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178a59fd5932b18f2ddd26c707a26a5d24743a32" translate="yes" xml:space="preserve">
          <source>See entry-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16737e1bcd19306dcb16f4adbd4bc1ee0ad6b7f5" translate="yes" xml:space="preserve">
          <source>See the documentation of the&lt;code&gt;SEARCH&lt;/code&gt;(see &lt;a href=&quot;#SEARCH&quot;&gt;SEARCH&lt;/a&gt;),&lt;code&gt;SEARCH ALL&lt;/code&gt;(see &lt;a href=&quot;#SEARCH-ALL&quot;&gt;SEARCH ALL&lt;/a&gt;) and&lt;code&gt;SORT&lt;/code&gt;(see &lt;a href=&quot;#SORT&quot;&gt;SORT&lt;/a&gt;) statements for explanations of the&lt;code&gt;KEY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99d16c50e28774b9367c6efdc9ae504f33ee4f7" translate="yes" xml:space="preserve">
          <source>See the documentation on the&lt;code&gt;CBL_GET_SCR_SIZE&lt;/code&gt;built-in system subroutine (see &lt;a href=&quot;#CBL_005fGET_005fSCR_005fSIZE&quot;&gt;CBL_GET_SCR_SIZE&lt;/a&gt;) for another way to retrieve this information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e9c6422faf2d00e499d2d38fa0bb509b141b92" translate="yes" xml:space="preserve">
          <source>See the period at the end of the second&lt;code&gt;MULTIPLY&lt;/code&gt;(see &lt;a href=&quot;#MULTIPLY&quot;&gt;MULTIPLY&lt;/a&gt;)? That is what terminates the scope of the&lt;code&gt;IF&lt;/code&gt; thus making the&lt;code&gt;DISPLAY&lt;/code&gt;statement&amp;rsquo;s execution completely independent of the TRUE/FALSE status of the&lt;code&gt;IF&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909ff939ec981953f61ffe1fe6213ae8d9c03027" translate="yes" xml:space="preserve">
          <source>See the&lt;code&gt;UNLOCK&lt;/code&gt;statement (see &lt;a href=&quot;#UNLOCK&quot;&gt;UNLOCK&lt;/a&gt;) for additional details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367bca9f464537df5c942a3ab8170b21d106dd3d" translate="yes" xml:space="preserve">
          <source>Selected WHEN Clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90426e9620111fd78abcc549ff6e519a422fa8ce" translate="yes" xml:space="preserve">
          <source>Selected WHEN clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cc059fea3b82fb7364f83d2b0d3f838e439dd4" translate="yes" xml:space="preserve">
          <source>Selection-Object</source>
          <target state="translated">Selection-Object</target>
        </trans-unit>
        <trans-unit id="c12c9c50c093ba4e7bfc61ba93c5785b24d1edc4" translate="yes" xml:space="preserve">
          <source>Selection-Subject</source>
          <target state="translated">Selection-Subject</target>
        </trans-unit>
        <trans-unit id="1bb1f30ec48f10e1a7e3a2acbd5f28a35dc4644c" translate="yes" xml:space="preserve">
          <source>Sentence</source>
          <target state="translated">Sentence</target>
        </trans-unit>
        <trans-unit id="d9786d8821a96e23e9013330d6148c6bcf5afb8e" translate="yes" xml:space="preserve">
          <source>Sequential READ Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91120e27157f99e4885921bd23d39f5ce9bfed7" translate="yes" xml:space="preserve">
          <source>Sequential files are processed using the following statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069ee1877b1845d947f09c9a0e31f74c8dff31df" translate="yes" xml:space="preserve">
          <source>Set to a directory/folder appropriate to create temporary files in. The intermediate working files created by the compiler will be created here (and deleted once they&amp;rsquo;re no longer needed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0afa4233d7741ab8d407d6b11f7222a52c49858" translate="yes" xml:space="preserve">
          <source>Set to any additional linker switches (ld) that can specify where standard libraries that must be linked with the program can be found. The default is &quot;&quot; (null).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6f31a473a4c76473967ddbb7c7996f26a3a672" translate="yes" xml:space="preserve">
          <source>Set to any linker switches (ld) that specify where standard libraries that must be linked with the program can be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faf23e3b89e0820f532679031bd15696dc10e40" translate="yes" xml:space="preserve">
          <source>Set to any linker/loader (ld) switches that you&amp;rsquo;d like to pass on to the C compiler from the&lt;code&gt;cobc&lt;/code&gt;compiler (in addition to any that cobc will specify).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75fcfa6f7d79959cd815db6ecb29300e5f8f829" translate="yes" xml:space="preserve">
          <source>Set to any switches that you&amp;rsquo;d like to pass on to the C compiler from the&lt;code&gt;cobc&lt;/code&gt;compiler (in addition to any that&lt;code&gt;cobc&lt;/code&gt;will specify).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f3d4af00ad5fd089a0cd86a7c91daab5b6f150" translate="yes" xml:space="preserve">
          <source>Set to the name of the C compiler you wish GnuCOBOL to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48e1c6eb499ac6dacdaa2e499873107fe37034b" translate="yes" xml:space="preserve">
          <source>Set to the path to the folder where GnuCOBOL &quot;config&quot; files are kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551db50d808968c66636de937ee33fd8893766c2" translate="yes" xml:space="preserve">
          <source>Sets and/or clears all eight of the COBOL switches (SWITCH-1 through SWITCH-8). See &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;, for an explanation of those switches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8f36edddce014edfb752b86686adfa96f5118b" translate="yes" xml:space="preserve">
          <source>Setting this variable to any non-blank value will allow the&lt;code&gt;ACCEPT screen-data-item&lt;/code&gt;statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) to detect the pressing of the &quot;Esc&quot;, &quot;PgUp&quot; and &quot;PgDn&quot; keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f26a09f01e5b0e60f0a4d452cb6b1b4d899ccd" translate="yes" xml:space="preserve">
          <source>Should actual disk work files be necessary due to the amount of data being sorted or merged, they will be automatically allocated to disk in a folder defined by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c789e6192501860e398e9f024664d486d3044d" translate="yes" xml:space="preserve">
          <source>Should any &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb64eda71bd9c5e3bea41b0953821a085fb4af5" translate="yes" xml:space="preserve">
          <source>Should disk work files be necessary due to the amount of data being sorted, they will be automatically allocated to disk in a folder defined by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9ee72471e723c65e456d4172eb51dd544d91e6" translate="yes" xml:space="preserve">
          <source>Sign-Condition Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4dc5601dadd4ed4dae70b7491398f13c8a8df3" translate="yes" xml:space="preserve">
          <source>Signed Packed Decimal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f9dde621a30a6f3fe9457983ad3598eee536c5" translate="yes" xml:space="preserve">
          <source>Significant digits truncated in store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dbebd9bce34e14cf01b533ea8828acf5b44171" translate="yes" xml:space="preserve">
          <source>Similarly, since there is no&lt;code&gt;END PROGRAM&lt;/code&gt;marker separating PROG3 from PROG2, it is possible for PROG3 to access&lt;code&gt;GLOBAL&lt;/code&gt;files and data items defined within PROG2. Since PROG2 is nested within PROG1, any&lt;code&gt;GLOBAL&lt;/code&gt;resources defined within PROG1 will be available to PROG3 as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2b5c21b86c9349b865faca01a3f8367ffa7f8b" translate="yes" xml:space="preserve">
          <source>Simple GO TO Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be95c7b05b0ed152ce1e8a1f2c5cd796b53caee4" translate="yes" xml:space="preserve">
          <source>Simple MOVE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18126350d3d34e0a9b8ebe73e963984d0c26fd2d" translate="yes" xml:space="preserve">
          <source>Simply Change This&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80baeb12e86a81876a8a769b70e07531ec125d0" translate="yes" xml:space="preserve">
          <source>Simply stated, a &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6287acd20987f4dc314ce910f933c4d6f67c20e" translate="yes" xml:space="preserve">
          <source>Since it is difficult to write any non-trivial COBOL program that uses none of the above, lets assume you will be including at least one section or paragraph in your GnuCOBOL programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508ea858fa9e3c52de9eb67315c2deb6679294f1" translate="yes" xml:space="preserve">
          <source>Since the C program is planning on making changes to all three arguments, it declares all three as pointers in the function header and references the third argument as a pointer in the function body. It actually had no choice for the two string (char array) arguments &amp;ndash; they must be defined as pointers in the function even though the function code references them without the leading * that normally signifies pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcfa8549e408829c8ef205384c0464a133ff588" translate="yes" xml:space="preserve">
          <source>Since the C program is the one that will execute first, before the GnuCOBOL subroutine, the burden of initializing the GnuCOBOL run-time environment lies with that C program; it will have to invoke the &quot;cob_init&quot; function, which is part of the &quot;libcob&quot; library. The two required C statements are shown highlighted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ed98a3b42bc3e899d745b6442e6b282aa14998" translate="yes" xml:space="preserve">
          <source>Since the C program wants to allow &quot;arg3&quot; to be changed by the subprogram, it prefixes it with a &quot;&amp;amp;&quot; to force a CALL BY REFERENCE for that argument. Since &quot;arg1&quot; and &quot;arg2&quot; are strings (char arrays), they are automatically passed by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7bab4fc5d71cb794895a09e1ed73766c2e54c7" translate="yes" xml:space="preserve">
          <source>Since the intent of a copybook is to introduce COBOL code into a particular spot in a program via the&lt;code&gt;COPY&lt;/code&gt;statement (see &lt;a href=&quot;#COPY&quot;&gt;COPY&lt;/a&gt;), it is always a good idea to prefix copybook names with a character sequence that identifies where in a program it&amp;rsquo;s contents are intended to be copyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01687eba61aa14fc82f0d3d3c96fabe9d23f4a49" translate="yes" xml:space="preserve">
          <source>Since this function has no arguments, no parenthesis should be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909cdd47d871721cc7fa46227c59ad8caaa71e90" translate="yes" xml:space="preserve">
          <source>Single-item search strings can be specified by coding the&lt;code&gt;&amp;lt;&lt;i&gt;identifier-1&lt;/i&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;i&gt;literal-1&lt;/i&gt;&amp;gt;&lt;/code&gt;or&lt;code&gt;&amp;lt;&lt;i&gt;word-1&lt;/i&gt;&amp;gt;&lt;/code&gt;being replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4295e77fa1a8eaec34e91836edb92bba39265cd0" translate="yes" xml:space="preserve">
          <source>Size error exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ff7b830260495b0240f0046e9e9268b1fb21ad" translate="yes" xml:space="preserve">
          <source>Size of replace item in inspect differs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4041acbfe1a65f58b7575a3cf0e385ecb143ef3" translate="yes" xml:space="preserve">
          <source>Sleep times less than 1 will be interpreted as 0, which immediately returns control to the calling program without any sleep delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e6206ac873378c94c8c4690558fd8e350a7737" translate="yes" xml:space="preserve">
          <source>So how then do we inform the compiler that the&lt;code&gt;DISPLAY&lt;/code&gt;statement is outside the scope of the&lt;code&gt;IF&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39b0db998bb52a914adf20287d42556dbfec542" translate="yes" xml:space="preserve">
          <source>So, GnuCOBOL programmers expecting to pass strings to or receive strings from C programs had best be prepared to deal with the null-termination issue, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c02e57130c8f0ffde209d228a9499b7d42235d8" translate="yes" xml:space="preserve">
          <source>So, assuming a sort file has been defined and it&amp;rsquo;s record layout (essentially a mirror of the raw data file) is defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a46fafc141a2555ad25145a52a1e94cf613e5cf" translate="yes" xml:space="preserve">
          <source>So, if a file contains 1275 characters of data, and a program defines the structure of that file as containing 100-character records, then the file contents will consist of twelve (12) 100-character records with a final record containing only 75 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d5fdae2f1b64cdbabb3e4ace710843106e2c78" translate="yes" xml:space="preserve">
          <source>So, the definition of these data items in a GnuCOBOL program would go something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea50cf6b9b69104f7a42a089305b29d51c4c5501" translate="yes" xml:space="preserve">
          <source>Some COBOL implementations disallow the use of group items or&lt;code&gt;PIC A&lt;/code&gt;items with&lt;code&gt;NUMERIC&lt;/code&gt;class conditions and the use of&lt;code&gt;PIC 9&lt;/code&gt;items with&lt;code&gt;ALPHABETIC&lt;/code&gt;class conditions. GnuCOBOL has no such restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4225172aabb92fa6a43677763853e5011b635e6" translate="yes" xml:space="preserve">
          <source>Some COBOL implementations provide this optional clause to force their sort and merge facilities to retain duplicate key-value records in their original input sequence, relative to one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd0bbd233792c7dfd9e82425698ec005de32876" translate="yes" xml:space="preserve">
          <source>Some COBOL shops prefer to use the eight-character Program Name Area (columns 73-80) as a change code area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3ce505aa8be30003a54074dddef831cb8ca66c" translate="yes" xml:space="preserve">
          <source>Some COBOL statements &lt;code&gt;SEARCH&lt;/code&gt;(see &lt;a href=&quot;#SEARCH&quot;&gt;SEARCH&lt;/a&gt;),&lt;code&gt;SEARCH ALL&lt;/code&gt;(see &lt;a href=&quot;#SEARCH-ALL&quot;&gt;SEARCH ALL&lt;/a&gt;) and the table-based&lt;code&gt;SORT&lt;/code&gt;(see &lt;a href=&quot;#Table-SORT&quot;&gt;Table SORT&lt;/a&gt;)) require you to index the affected table and to utilize that index with those statements. With any other references to tables, the choice is left to the programmer as to which approach should be used. In general, follow these rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0c0f69dc4186cb9681a9a690539b79e8d8f41b" translate="yes" xml:space="preserve">
          <source>Some COBOL statements have a &quot;scope of applicability&quot; associated with them where one or more other statements can be considered to be part of or related to the statement in question. An example of such a situation might be the following, where the interest on a loan is being calculated and displayed &amp;mdash; 4% interest if the loan balance is under $10000 and 4.5% otherwise (WARNING &amp;ndash; the following code has an error!):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df4c4d5334a475fece7d66e11d3c3ddac824f97" translate="yes" xml:space="preserve">
          <source>Some CPUs  such as the Intel/AMD i386/x64 architecture processors used in most Windows PCs  prefer to process binary data stored in a little-endian format. Since that format is more efficient on those systems, it is referred to as the&lt;code&gt;native&lt;/code&gt;binary format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38550f9056e86e4d797738185be0b86af3597727" translate="yes" xml:space="preserve">
          <source>Some may prefer to compile their GnuCOBOL main programs into these dynamically-loadable modules in the interests of using the same general compilation command for all programs without having to think &quot;Is it a main program or a subprogram?&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1fb85663d128d59abcf9635115d32fc5c135b3" translate="yes" xml:space="preserve">
          <source>Some of the original call-by-number routines never evolved call-by-name equivalents; GnuCOBOL supports some of these routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a38b51a9ed8d9aa72530a6f73c2e911f49b3d5" translate="yes" xml:space="preserve">
          <source>Sometimes the quest for improved programmer productivity (and therefore reduced programming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce8ecca6ac372b2671a4b175cfc95f43e37cda4" translate="yes" xml:space="preserve">
          <source>Sort/merge work files should be assigned to&lt;code&gt;DISK&lt;/code&gt;(or&lt;code&gt;DISC&lt;/code&gt; on their&lt;code&gt;SELECT&lt;/code&gt;statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181cdd056b8d00c3943fec61de5bb0e8654421f5" translate="yes" xml:space="preserve">
          <source>Sorts and merges will be performed in memory, if the amount of data being sorted allows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489383c4ee164ec5ed5cea2619852156b1d2a469" translate="yes" xml:space="preserve">
          <source>Source Mode &amp;mdash; Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e13332d21eba49e8089bdc8abaea2f5ea8ebf3d" translate="yes" xml:space="preserve">
          <source>Spaces cannot be included in primary entry-point names and therefore should not be included in program file names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed55e29dafc932b11e4821a2bb2579422ef1545b" translate="yes" xml:space="preserve">
          <source>Special Registers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b475069bb5d03f66e3620c012d1dc9b060e18337" translate="yes" xml:space="preserve">
          <source>Special data items that are automatically defined for your use by the GnuCOBOL compiler. See &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;, for a complete list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951ca5a73616e8583d8c3f86ed17472460bfdc27" translate="yes" xml:space="preserve">
          <source>Specification of an exception clause will allow your program to trap a failure condition that has occurred and handle it gracefully by executing &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff4b0f98e4425a1d9af2c678aab3288763e69ca" translate="yes" xml:space="preserve">
          <source>Specification of an&lt;code&gt;INVALID KEY&lt;/code&gt;clause will allow your program to trap an I/O failure condition (with an I/O error code in the file&amp;rsquo;s&lt;code&gt;FILE-STATUS&lt;/code&gt;(see &lt;a href=&quot;#SELECT&quot;&gt;SELECT&lt;/a&gt;) field) that has occurred due to a record-not-found condition and handle it gracefully by executing &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c9191817281588c815a068ade17b41d296154b" translate="yes" xml:space="preserve">
          <source>Specifying a&lt;code&gt;LINAGE&lt;/code&gt;clause in an&lt;code&gt;FD&lt;/code&gt;will cause the&lt;code&gt;LINAGE-COUNTER&lt;/code&gt;special register to be created for the file. This automatically-created data item will always contain the current relative line number on the page being prepared which will serve as the starting point for a&lt;code&gt;WRITE&lt;/code&gt;statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb12382997025a330688fcc8fa6bba9e89dc5fb" translate="yes" xml:space="preserve">
          <source>Square bracket meta characters on syntax diagrams document language syntax that is optional. The [] characters themselves should not be coded. If a syntax diagram contains &quot;a [b] c&quot;, the &quot;a&quot; and &quot;c&quot; syntax elements are mandatory but the &quot;b&quot; element is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ccdc56e323f98c63656e35f5fbaa819e99b2e2" translate="yes" xml:space="preserve">
          <source>Start everything defined in local-storage with &quot;LS-&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a334460a50c63866143c2bcb289cda69f1521d" translate="yes" xml:space="preserve">
          <source>Start everything defined in the file section with &quot;F-&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cec1a7d3c5f2c2947b6d1e7fa5c83fd8313a211" translate="yes" xml:space="preserve">
          <source>Start everything defined in the linkage section with &quot;L-&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfb566db3b78c59979e9964596bd66f65e73213" translate="yes" xml:space="preserve">
          <source>Start everything defined in the report section with &quot;R-&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6cae6dd514bccc9d72546b58cffd5203aaf53d" translate="yes" xml:space="preserve">
          <source>Start everything defined in the screen section with &quot;S-&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d794a0ab7bd5ca758c77608d1a7e4499d174230f" translate="yes" xml:space="preserve">
          <source>Start everything defined in working-storage with &quot;WS-&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72ca256dc49e55a1a57b9a727fbde9834c9a3f7" translate="yes" xml:space="preserve">
          <source>Statement</source>
          <target state="translated">Statement</target>
        </trans-unit>
        <trans-unit id="c39d2034c8d11d82a7a2a3f44c3ed8b06f3647b5" translate="yes" xml:space="preserve">
          <source>Static Subprogram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ae3455ed4d77cffa9454ba5d34b0442c69f348" translate="yes" xml:space="preserve">
          <source>Static-linkable form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcef9f75eb7dd61beea9259f4e7c9e8945c543c" translate="yes" xml:space="preserve">
          <source>Storage Format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f036f0002bc8f4898250e0d9f2151320e13a16" translate="yes" xml:space="preserve">
          <source>String-Clause</source>
          <target state="translated">String-Clause</target>
        </trans-unit>
        <trans-unit id="610e80bb94900da3f5e97068e213f2ca2b1715df" translate="yes" xml:space="preserve">
          <source>Strings enclosed in double-quote characters (&quot;) will be treated as a single argument, regardless of how many spaces or tab characters (if any) might be embedded within those quotation characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea2553a31b788157b73395943c919cc222d5603" translate="yes" xml:space="preserve">
          <source>Submitting a command to the shell environment appropriate for the version of GnuCOBOL you are using for execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202a02ec26bf87caf0fe72d9cf37185be4172ca5" translate="yes" xml:space="preserve">
          <source>Subprogram</source>
          <target state="translated">Subprogram</target>
        </trans-unit>
        <trans-unit id="52ebf9910454677c51e370d3c50ad494b952c8c3" translate="yes" xml:space="preserve">
          <source>Subprogram &quot;B&quot; may be nested inside program &quot;A&quot; by including program B&amp;rsquo;s source code at the end of program A&amp;rsquo;s procedure division without an intervening&lt;code&gt;END PROGRAM A.&lt;/code&gt;or&lt;code&gt;END FUNCTION A.&lt;/code&gt;statement. For now, that&amp;rsquo;s all that will be said about nesting. See &lt;a href=&quot;#Independent-vs-Contained-vs-Nested-Subprograms&quot;&gt;Independent vs Contained vs Nested Subprograms&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f041b3b26073b44aaedd78af7207b2cb692fa21" translate="yes" xml:space="preserve">
          <source>Subprograms (either subroutines or user-defined functions) can be implemented in three different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1889bba143969c108d68eb72184e742c5e04cfb" translate="yes" xml:space="preserve">
          <source>Subroutine</source>
          <target state="translated">Subroutine</target>
        </trans-unit>
        <trans-unit id="58802942db0b555fec26b47d260b0bbf15c56086" translate="yes" xml:space="preserve">
          <source>Subscript out of bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b0f8f5e3eafb5efd52e8814f9a8a2f7acebe13" translate="yes" xml:space="preserve">
          <source>Subscripting</source>
          <target state="translated">Subscripting</target>
        </trans-unit>
        <trans-unit id="3523493d2845761109c102ef91fdabfa8f15f8f9" translate="yes" xml:space="preserve">
          <source>Subscripting is the process of referencing an element of a table utilizing either a numeric constant or an unedited numeric data item to select the desired occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cafd262f4d9e094951b7c057b4cad08ca57a0d" translate="yes" xml:space="preserve">
          <source>Subscripts may be specified as numeric (integer) literals, numeric (integer) data items, data items created with any of the picture-less integer&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) specifications,&lt;code&gt;USAGE INDEX&lt;/code&gt;data items or arithmetic expressions resulting in a non-zero integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a8f651d79fd005eeac0612df6442b983a01184" translate="yes" xml:space="preserve">
          <source>Success</source>
          <target state="translated">Success</target>
        </trans-unit>
        <trans-unit id="95c1cefa2242449ff0c6e9b76518e25b94853944" translate="yes" xml:space="preserve">
          <source>Success (Duplicate Record Key Written)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c27e800ef6815ddb5314c0883d6b619fc07bfb" translate="yes" xml:space="preserve">
          <source>Success (No Unit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7843628755fdcace8f2c62d0842df66017b6258a" translate="yes" xml:space="preserve">
          <source>Success (Optional File Not Found)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33153a6b2063a39aab251bbc86628e7422e22418" translate="yes" xml:space="preserve">
          <source>Suggestion: use a copybook to describe the record layouts of any file; this guarantees that multiple programs accessing that file will &quot;see&quot; the same record sizes and layouts by coding a&lt;code&gt;COPY&lt;/code&gt;statement (see &lt;a href=&quot;#COPY&quot;&gt;COPY&lt;/a&gt;) to import the record layout(s) rather than hand-coding them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38af8d3e6886e6fbc84a1a535b9ce13c8e0c4f5" translate="yes" xml:space="preserve">
          <source>Summary Report</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cbddbe89e9462ebd808e11380e474f148057f8" translate="yes" xml:space="preserve">
          <source>Support for national character sets in GnuCOBOL is currently only partially implemented, and the compile- and run-time effect of using the&lt;code&gt;N&lt;/code&gt;symbol in a&lt;code&gt;PICTURE&lt;/code&gt;(see &lt;a href=&quot;#PICTURE&quot;&gt;PICTURE&lt;/a&gt;) clause to define a field as containing national characters is the same as if&lt;code&gt;X(2)&lt;/code&gt;had been coded, with the additional effect that such a field will qualify as a&lt;code&gt;NATIONAL&lt;/code&gt;or&lt;code&gt;NATIONAL-EDITED&lt;/code&gt;field on an&lt;code&gt;INITIALIZE&lt;/code&gt;(see &lt;a href=&quot;#INITIALIZE&quot;&gt;INITIALIZE&lt;/a&gt;) statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2eb5fd8af440754ec9d55b0cf8113c3bdec568" translate="yes" xml:space="preserve">
          <source>Support for the&lt;code&gt;ALTER&lt;/code&gt;verb has been added to GnuCOBOL for the purpose of enabling GnuCOBOL to pass those National Institute of Standards and Technology (NIST) tests for the COBOL programming language that require support for&lt;code&gt;ALTER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf8509ba5ecde4589d8872597ed2ff4969a9a4c" translate="yes" xml:space="preserve">
          <source>Supported</source>
          <target state="translated">Supported</target>
        </trans-unit>
        <trans-unit id="2242dd7b179605b4edfaf01f88f0870d969f667a" translate="yes" xml:space="preserve">
          <source>Switch-Definition-Clause</source>
          <target state="translated">Switch-Definition-Clause</target>
        </trans-unit>
        <trans-unit id="f37335dd0060f12a67182342cc341f3362f6a715" translate="yes" xml:space="preserve">
          <source>Switches are defined using the&lt;code&gt;SPECIAL-NAMES&lt;/code&gt;(see &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;) paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1894e80c232a43f8f22c0f6ce7a3d4717a7ae254" translate="yes" xml:space="preserve">
          <source>Switches may be tested via the&lt;code&gt;IF&lt;/code&gt;statement (see &lt;a href=&quot;#IF&quot;&gt;IF&lt;/a&gt;) and a Switch-Status Condition. See &lt;a href=&quot;#Switch_002dStatus-Conditions&quot;&gt;Switch-Status Conditions&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700222fb1270f971142bcd5fad7e680c99e01f31" translate="yes" xml:space="preserve">
          <source>Symbolic-Characters-Clause</source>
          <target state="translated">Symbolic-Characters-Clause</target>
        </trans-unit>
        <trans-unit id="fddcab9dffe6d8830ccb45a7c8db9b5343c5a3e4" translate="yes" xml:space="preserve">
          <source>Synchronization is performed (by the compiler) as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="2e83c6fd9eb7ff73d298792db8b25150926bf35d" translate="yes" xml:space="preserve">
          <source>TABLE, TALLYING, TAN, TAPE, TERMINAL, TERMINATE, TEST, TEST-DATE-YYYYMMDD, TEST-DAY-YYYYDDD, TEST-FORMATTED-DATETIME, TEST-NUMVAL, TEST-NUMVAL-C, TEST-NUMVAL-F, TEXT, THAN, THEN, THROUGH, THRU, TIME, TIME-OUT, TIMEOUT, TIMES, TO, TOP, TOWARD-GREATER, TOWARD-LESSER, TRAILING, TRAILING-SIGN, TRANSFORM, TRIM, TRUE, TRUNCATION, TYPE, TYPEDEF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60faada67896a97f2ea96cd90b95c7d678d79697" translate="yes" xml:space="preserve">
          <source>TAN Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc6eff5e2fd66b59b00c7f06962e5dbe779902e" translate="yes" xml:space="preserve">
          <source>TERMINATE Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cee4330239724251591ef17a82ec4b7dab1d2af" translate="yes" xml:space="preserve">
          <source>TEST-DATE-YYYYMMDD Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbac88ce14883739f91aa7c7b9e26b1a8da1217" translate="yes" xml:space="preserve">
          <source>TEST-DAY-YYYYDDD Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5cef966d37067d1842521d6b6c1bf755d5a9aa" translate="yes" xml:space="preserve">
          <source>TEST-NUMVAL Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883c9f5d50b2fdb3f38db682764e475839396f64" translate="yes" xml:space="preserve">
          <source>TEST-NUMVAL-C Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb253979d4d5e749205bc4953cd6b602e7d76cf2" translate="yes" xml:space="preserve">
          <source>TEST-NUMVAL-F Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b2a20a8cc0ccd88af0dc68dadd361fd70529b2" translate="yes" xml:space="preserve">
          <source>TO Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad446ff3497e3afc345808baff49525fdcb6f06" translate="yes" xml:space="preserve">
          <source>TRANSFORM Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894be5481118c02f19f200a477242c84de1f3bb0" translate="yes" xml:space="preserve">
          <source>TRIM Function Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbe476c93ca7878b56e6d7cd5b65ffa34ae1f1e" translate="yes" xml:space="preserve">
          <source>TYPE Clause Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff806d8afcbebfaea8b61c37d9832b5131e8778" translate="yes" xml:space="preserve">
          <source>Table SORT Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c559d775715fd2f56d9888245572042914adbc7f" translate="yes" xml:space="preserve">
          <source>Table references such as example #3 (table indexing) generate object code that falls in the middle of the other two but is far closer in efficiency to example #1 than #2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66af24f4127cc42adf617d025d6cd37ff689156" translate="yes" xml:space="preserve">
          <source>Take, for example, the following sample program:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c129ddcc17bbf3036fea845103495c3a3e4103de" translate="yes" xml:space="preserve">
          <source>Technically, GnuCOBOL does not require ANY procedure names be defined unless:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2710741cc1f93fcc3e1018f638485351a7a33490" translate="yes" xml:space="preserve">
          <source>Text Brightness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4d9c084e367f9986faa13df954584c43707262" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s where sentences come in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="b5f7198f8fb40448c22faa814a712229edde5a67" translate="yes" xml:space="preserve">
          <source>The &quot;-FSM-&quot; acronyms make it easier to locate the description of the 01-item the status code and message text items belong to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529b6992580424a3a1799c8f12f4aa404043a076" translate="yes" xml:space="preserve">
          <source>The &quot;modern&quot; languages, like Java, also have their own &quot;boilerplate&quot; infrastructure overhead that must be coded in order to write the logic that is necessary in the program. Take for example the&lt;code&gt;public static void main(String[] arg)&lt;/code&gt;and&lt;code&gt;import java.util.Scanner;&lt;/code&gt;statements. The critics tend to forget about this when they criticize COBOL for it&amp;rsquo;s structural &quot;overhead&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e19534bd0a509db696aed2669a9388d6786761" translate="yes" xml:space="preserve">
          <source>The &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd012025b215fb64723048dc5378511513993c3" translate="yes" xml:space="preserve">
          <source>The &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db50be534d16628548e2d2960f4c7bcdd0ff8e2e" translate="yes" xml:space="preserve">
          <source>The ... meta character sequence signifies that the syntax element immediately preceding it may be repeated. The ... sequence itself should not be coded. If a syntax diagram contains&lt;code&gt;a b... c&lt;/code&gt; syntax element &quot;a&quot; must be followed by at least one &quot;b&quot; element (possibly more) and the entire sequence must be terminated by a &quot;c&quot; syntax element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02dde9a86042eaa0a1d7d271ae63ee3e64e957db" translate="yes" xml:space="preserve">
          <source>The 01-level constant is one of four types of compilation-time constants that can be declared within a program. The other three types are&lt;code&gt;&amp;gt;&amp;gt;DEFINE&lt;/code&gt;CDF directive (see &lt;a href=&quot;#g_t_003e_003eDEFINE&quot;&gt;&amp;gt;&amp;gt;DEFINE&lt;/a&gt;) constants,&lt;code&gt;&amp;gt;&amp;gt;SET&lt;/code&gt;CDF directive (see &lt;a href=&quot;#g_t_003e_003eSET&quot;&gt;&amp;gt;&amp;gt;SET&lt;/a&gt;) constants and 78-level constants (see &lt;a href=&quot;#g_t78_002dLevel-Data-Items&quot;&gt;78-Level Data Items&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2203aaa05e683d198781f9270706d87c15e5a5f0" translate="yes" xml:space="preserve">
          <source>The 1st and 2nd examples are referred to as &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb0c408adad7c2963d9683e7d26945d511c90c3" translate="yes" xml:space="preserve">
          <source>The 7-character family of CPU products the CPU falls into. This will have values such as &quot;A4&quot;, &quot;A10&quot;, &quot;Core i5&quot;, &quot;Core i7&quot;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0029539fb2f900dfff21f3e206abf0f50473e6e3" translate="yes" xml:space="preserve">
          <source>The 78-level constant is one of four types of compilation-time constants that can be declared within a program. The other three types are&lt;code&gt;&amp;gt;&amp;gt;DEFINE&lt;/code&gt;CDF directive (see &lt;a href=&quot;#g_t_003e_003eDEFINE&quot;&gt;&amp;gt;&amp;gt;DEFINE&lt;/a&gt;) constants,&lt;code&gt;&amp;gt;&amp;gt;SET&lt;/code&gt;CDF directive (see &lt;a href=&quot;#g_t_003e_003eSET&quot;&gt;&amp;gt;&amp;gt;SET&lt;/a&gt;) constants and 01-level constants (see &lt;a href=&quot;#g_t01_002dLevel-Constants&quot;&gt;01-Level Constants&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31937604fa2e33cafeaebda8572be77f5b04f1c" translate="yes" xml:space="preserve">
          <source>The CDF text manipulation statements&lt;code&gt;COPY&lt;/code&gt;and&lt;code&gt;REPLACE&lt;/code&gt;are used to introduce new code into programs either with or without changes, or may be used to modify existing statements already in the program. Text manipulation statements are always terminated with a period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724c19d00ff0755366c06c956a631bc7fb0aeb9b" translate="yes" xml:space="preserve">
          <source>The COBOL2002 standard has made a common extension to the COBOL language &amp;mdash; the&lt;code&gt;GOBACK&lt;/code&gt;statement (see &lt;a href=&quot;#GOBACK&quot;&gt;GOBACK&lt;/a&gt;) &amp;mdash; a standard language element; the&lt;code&gt;GOBACK&lt;/code&gt;statement should be strongly considered as the preferred alternative to both&lt;code&gt;EXIT PROGRAM&lt;/code&gt;and&lt;code&gt;EXIT FUNCTION&lt;/code&gt;for new subprograms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91740eff818793cdf296434ec86fa1913d1b8e49" translate="yes" xml:space="preserve">
          <source>The COBOL2002 standard, and therefore GnuCOBOL, only covers textual user interface (TUI) screens (those comprised of ASCII characters presented using a variety of visual attributes) and not the more-advanced graphical user interface (GUI) screen design and processing capabilities built into most modern operating systems. There are subroutine-based packages available that can do full GUI presentation &amp;mdash; most of which may be called by GnuCOBOL programs, with a moderate research time investment (Tcl/Tk, for example) &amp;mdash; but none are currently included with GnuCOBOL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310285085e5d0b8582d6fe39676ac38f88d4deb7" translate="yes" xml:space="preserve">
          <source>The GCic sample program source listing (see &lt;a href=&quot;https://open-cobol.sourceforge.io/HTML/gnucobsp.html#GCic&quot;&gt;GCic&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b093d3f22f34d036edbf55015d2595607910033b" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL &quot;bin&quot; directory should be defined in the PATH.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51f07a50b9c54f4424b4fa7dc1e1419db192641" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler (cobc) supports both of these source line format modes, defaulting to Fixed Format Mode lacking any other information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71c894530f1ca01508b8be48df41284675e9104" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler actually went through the following decision-making logic when generating code for the&lt;code&gt;COMPUTE&lt;/code&gt;Statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a1193e48ccfe20f01e1363ab3e0a2566486fa4" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler can create operating-system appropriate files that may be executed directly from the operating system environment. On Windows systems, these will be &quot;.exe&quot; files whereas on UNIX systems they will have no specific extensions. The compiler&amp;rsquo;s&lt;code&gt;-x&lt;/code&gt;switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a2b7339eef188ca46dff0c726cc74fbbc37ff8" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler generates C code from your COBOL programs; that C code is then automatically compiled and linked using your system&amp;rsquo;s C compiler (typically, but not limited to, &quot;gcc&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea58459ca939d4566e866217668ee2d57c2d2e54" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler is named &quot;cobc&quot; (&quot;cobc.exe&quot; on a Windows system).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670f0187bd768459766992d2c04448aaee8b87cb" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler will attempt to locate copybooks by searching for them in the following folders. The search will occur in the sequence shown below, and will terminate once a copybook is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9920186e56499fcc816b802a43497434d7b2e55a" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL compiler will translate your COBOL program into C source code, compile that C source code into executable binary form using the &quot;C&quot; compiler specified when GnuCOBOL was built and link that executable binary into:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55114b3e2544307d0b630c8fc8295c2b15771a4" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL implementation of RWCS does not issue any carriage-control information to the report files it produces &amp;mdash; instead, it relies upon the information coded in the&lt;code&gt;RD&lt;/code&gt;for the report (specifically the&lt;code&gt;PAGE LIMITS&lt;/code&gt;and related options) and it&amp;rsquo;s internally-generated and managed&lt;code&gt;LINE-COUNTER&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) for the report to know when to issue any blank lines to the file to fill-out the end of a printed page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08b99014e077e1a9dafb85fe81fe3254881ce10" translate="yes" xml:space="preserve">
          <source>The GnuCOBOL language specification defines over 900 &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28b6a161835aaf945a9a622c178a6406a35bd7a" translate="yes" xml:space="preserve">
          <source>The MinGW approach is a personal favourite with the author of this manual because it creates a GnuCOBOL compiler and runtime library that require only a single MinGW DLL to be available for the GnuCOBOL compiler, runtime library and user programs. That DLL is freely distributable under the terms of the GNU General Public License. A MinGW build of GnuCOBOL fits easily on and runs from a 128MB flash drive with no need to install any software onto the Windows computer that will be using it. Some functionality of the language, dealing with the sharing of files between concurrently executing GnuCOBOL programs and record locking on certain types of files, is sacrificed however as the underlying operating system routines needed to implement them aren&amp;rsquo;t available to Windows and aren&amp;rsquo;t provided by MinGW. The current version for MinGW is available at the download link along with various other platforms at the GnuCobol download website (https://sourceforge.net/projects/open-cobol/files/gnu-cobol/2.0/).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa9bd7489598500d797fd95e91629893e798908" translate="yes" xml:space="preserve">
          <source>The PROCEDURE DIVISION of any GnuCOBOL program marks the point where all executable code is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ed5559da5478e5c89338e6b69f8f56c4fcde6f" translate="yes" xml:space="preserve">
          <source>The SIZE phrase specifies the size (length) of the field. After the ACCEPT or DISPLAY is finished, the cursor is placed immediately after the field defined by this clause, unless this would place the cursor outside of the current terminal window. In this case, the cursor is wrapped around to the beginning of the next line (scrolling the window if necessary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da90357a0bffb9cf55a6e70c467792148d914ab8" translate="yes" xml:space="preserve">
          <source>The STDCALL convention will not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33be5cd3d3b8f1d09e31fe887fd4446969242e5b" translate="yes" xml:space="preserve">
          <source>The STDCALL convention, required to use the Microsoft Win32 API, will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef7ffb0f848c6b1ec77cb863709c677b79ef629" translate="yes" xml:space="preserve">
          <source>The Tab and Back-Tab (Shift-Tab on most keyboards) keys will position the cursor from field to field in the line/column sequence in which the fields occur on the screen at execution time, regardless of the sequence in which they were defined in the screen section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b41a694122cd6cd0aa8873143f215d95c4371e" translate="yes" xml:space="preserve">
          <source>The above generates an assembler source file named &quot;sprog1.s&quot;. If you have multiple subprograms to compile this way, just string their file names out on the command &amp;mdash; each will be translated to it&amp;rsquo;s own assembler source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec6601cf5207680213a48bfade05ed84a60a7b6" translate="yes" xml:space="preserve">
          <source>The above is by no means an exhaustive list, but good programmers will use as few of these descriptors as possible as having too many defeats any benefits of such classification/documentation efforts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a12188ad7a4861b4c3156578ed73d4cceae9ae" translate="yes" xml:space="preserve">
          <source>The above screen was produced by the GnuCOBOL Interactive Compiler, or GCic. See &lt;a href=&quot;https://open-cobol.sourceforge.io/HTML/gnucobsp.html#GCic&quot;&gt;GCic&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94be8da29904435534b48e048a367496c1878719" translate="yes" xml:space="preserve">
          <source>The above will display&lt;code&gt;102030405&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8093994b75b50fc77b805afd2cf96e6c082907d2" translate="yes" xml:space="preserve">
          <source>The actual key pressed to generate a function key (Fn) will depend on the type of terminal device you&amp;rsquo;re using (PC, Macintosh, VT100, etc.) and what type of enhanced display driver was configured with the version of GnuCOBOL you&amp;rsquo;re using. For example, on a GnuCOBOL build for a Windows PC using MinGW and PDCurses, F1-F12 are the actual F-keys on the PC keyboard, F13-F24 are entered by shifting the F-keys, F25-F36 are entered by holding Ctrl while pressing an F-key and F37-F48 are entered by holding Alt while pressing an F-key. On the other hand, a GnuCOBOL implementation built for Windows using Cygwin and NCurses treats the PCs F1-F12 keys as the actual F1-F12, while shifted F-keys will enter F11-F20. With Cygwin/NCurses, Ctrl- and Alt-modified F-keys aren&amp;rsquo;t recognized. Neither are Shift-F11 or Shift-F12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b09520a9d96a745b04b503e8aa6737320588b1e" translate="yes" xml:space="preserve">
          <source>The alternative to using multiple entry points in your subroutine, by the way, would be to include an additional argument to the primary (and only) entry point of the subroutine; this new argument might be named&lt;code&gt;STUDENT-FUNCTION&lt;/code&gt;and might have values of &quot;FETCH&quot;, &quot;ADD&quot;, &quot;UPDATE&quot; or &quot;DELETE&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5c49cb3dcdaaf4d3b3d2437e45b4539a60f9ce" translate="yes" xml:space="preserve">
          <source>The amount of programming necessary to accomplish a given task &amp;mdash; including rework needed by any errors found during testing (testing is sometimes jokingly defined as: &quot;that time during which an application is actually in production, allowing users to discover the problems&quot;) is the measure of programmer productivity. Anything that reduces that effort will therefore reduce the time spent in such activities therefore reducing the expense of same. When the expense of programming is reduced, programmer productivity is increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8909f4f3e02ea6ff0f8548b1efeac7f19ec54d" translate="yes" xml:space="preserve">
          <source>The amount of storage requested by an ALLOCATE statement is not available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b290ecc08b7e03247eea53b3b8960797c77936" translate="yes" xml:space="preserve">
          <source>The application that collects data from the various cash registers at each store will generate data records that look like this to a COBOL program:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3e86c9ba7c5fa82dcd8f97b65a3b2cc5cd7c0f" translate="yes" xml:space="preserve">
          <source>The arguments to the &quot;cob_init&quot; routine are the argument count and value parameters passed to the main function when the program began execution. By passing them into the GnuCOBOL subprogram, it will be possible for that GnuCOBOL program to retrieve the command line or individual command-line arguments. If that won&amp;rsquo;t be necessary, &quot;cob_init(0,NULL);&quot; could be specified instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71e38a1cdb0300b0d12d0999405dd27a6a78252" translate="yes" xml:space="preserve">
          <source>The attributes shown in the syntax diagram are the only ones that may be altered by this statement. See &lt;a href=&quot;#Data-Description-Clauses&quot;&gt;Data Description Clauses&lt;/a&gt;, for information on their usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab26e2f1e4ecd0719e97fee3748357d054220fc" translate="yes" xml:space="preserve">
          <source>The automatic numbering of printed pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a127904e5647f59d88833363a96c8d59fa8f41b3" translate="yes" xml:space="preserve">
          <source>The automatic production of a one-time notice on the first page of the report (report heading).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a088d8eb695a724fe4c02137d21c695dd4a8c67" translate="yes" xml:space="preserve">
          <source>The behaviour of the eight different rounding modes is defined in the following table. Note that a &quot;&amp;hellip;&quot; indicates the last digit repeats. The examples assume an integer receiving field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0b6bca0d0d81837dfe03a6981429fcd2dd10d6" translate="yes" xml:space="preserve">
          <source>The braces ({}) meta characters may be used to group a sequence of syntax elements together so that they may be treated as a single entity. The {} characters themselves should not be coded. These are typically used in combination with the &quot;|&quot; or &quot;...&quot; meta characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e1ec49ff77a7356b6c1b79f916b4e2641b12dc" translate="yes" xml:space="preserve">
          <source>The called program (subroutine) will flush processed arguments from the argument stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aac32c3778f9277ca99c13dadc7fb447aeee465" translate="yes" xml:space="preserve">
          <source>The calling program issues a statement of the form&lt;code&gt;CALL '&amp;lt;&lt;i&gt;entry-point&lt;/i&gt;&amp;gt;' USING ...&lt;/code&gt;to transfer control to the subroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51257373760ec85ab048c382d4b584a303053368" translate="yes" xml:space="preserve">
          <source>The calling program will flush processed arguments from the argument stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8573662c2506adbb40ec085b7da60a6a848da8a7" translate="yes" xml:space="preserve">
          <source>The calling program will pass zero or more data items, known as arguments, to this subprogram &amp;mdash; there must be exactly as many &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06b07ae0fed899b5c37763e58619f44a8cb28f7" translate="yes" xml:space="preserve">
          <source>The capability exists for an additional field to be defined as what is known as an alternate key. Alternate key fields behave just like primary keys, allowing both direct and sequential access to record data based upon the alternate key field values, with one exception. That exception is the fact that alternate keys may be allowed to have duplicate values, depending upon how the alternate key field is described to the GnuCOBOL compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae6f110ef61f7a12b2f22ade66af5db6244fb56" translate="yes" xml:space="preserve">
          <source>The clause may only be specified in the&lt;code&gt;FD&lt;/code&gt;of a sequential or line sequential file. If used with a sequential file, the organization of that file will be implicitly changed to line sequential.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5df7cc42621acf4d2a1e91d24e2a95ce0fdafc" translate="yes" xml:space="preserve">
          <source>The clause&lt;code&gt;NEXT SENTENCE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9349436fdebab35446653f1b91e8936037dee0b" translate="yes" xml:space="preserve">
          <source>The clauses&lt;code&gt;VALUE IS&lt;/code&gt;and&lt;code&gt;VALUES ARE&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008211cc7ad52b496143230ab11a510ed29126b7" translate="yes" xml:space="preserve">
          <source>The code within the handler will be executed and &amp;mdash; once the handler issues a&lt;code&gt;return&lt;/code&gt; if it was written in C, or an&lt;code&gt;EXIT PROGRAM&lt;/code&gt;statement (see &lt;a href=&quot;#EXIT&quot;&gt;EXIT&lt;/a&gt;) or&lt;code&gt;GOBACK&lt;/code&gt;statement, if it was written in GnuCOBOL, the system-standard error handling routine will be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c50efba0de4882c9b9bd2581965327e0ce65786" translate="yes" xml:space="preserve">
          <source>The coding example shown above is incomplete &amp;mdash; it only describes the data item names and their hierarchical relationships to one other. In addition, any valid data item definitions will also need to describe what type of data is to be contained in a data item (Numeric? Alphanumeric? Alphabetic?), how much data can be held in the data item and a multitude of other characteristics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d03c998fd0596c11fb61f3b9580ea38b99ddabe" translate="yes" xml:space="preserve">
          <source>The collection of all compilation units being compiled by a single execution of the GnuCOBOL compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244bf7a6f7eb71c8ef7fc994d68ca151f6d8b1db" translate="yes" xml:space="preserve">
          <source>The column coordinate of a field may be stated on an absolute basis (i.e.&lt;code&gt;COLUMN 5&lt;/code&gt; or on a relative basis based upon the end of the previously-presented field (i.e.&lt;code&gt;COLUMN PLUS 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b93877ee9257dbc99209a5c7fb91213f8d23947" translate="yes" xml:space="preserve">
          <source>The column location of a report item will be determined by the&lt;code&gt;COLUMN&lt;/code&gt;(see &lt;a href=&quot;#COLUMN&quot;&gt;COLUMN&lt;/a&gt;) clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c0f041ea07da668a59e14316da54abd2b876fb" translate="yes" xml:space="preserve">
          <source>The column location of a screen section field is determined by the&lt;code&gt;COLUMN&lt;/code&gt;(see &lt;a href=&quot;#COLUMN&quot;&gt;COLUMN&lt;/a&gt;) clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f3cecb739025dfafe39a9552dda5eb3d52fdaa" translate="yes" xml:space="preserve">
          <source>The compiler can be instructed to operate in either mode in any of the following four ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6ed42883bd12f9da0b336d2aef8d29dd50e196" translate="yes" xml:space="preserve">
          <source>The compiler&amp;rsquo;s&lt;code&gt;-Wobsolete&lt;/code&gt;switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78816f1e06fcb7dd59c87fb9883ec962d7e7c3b" translate="yes" xml:space="preserve">
          <source>The complete list of&lt;code&gt;WHEN&lt;/code&gt;clauses (except for the&lt;code&gt;WHEN OTHER&lt;/code&gt;clause, if any) has been exhausted. In this case, there is no &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ab50e44d766a80683ec533a48f74342a8a54f9" translate="yes" xml:space="preserve">
          <source>The complete set of executable code that is run during the execution of a program. This includes the main program as well as all executed subprograms, including those that are both dynamically and statically loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cbd2a54ec3b877e938cd40057327547a2b7716" translate="yes" xml:space="preserve">
          <source>The condition names&lt;code&gt;TINY&lt;/code&gt;&lt;code&gt;XS&lt;/code&gt;&lt;code&gt;S&lt;/code&gt;&lt;code&gt;M&lt;/code&gt;&lt;code&gt;L&lt;/code&gt;&lt;code&gt;XL&lt;/code&gt;&lt;code&gt;XXL&lt;/code&gt;&lt;code&gt;XXXL&lt;/code&gt;and&lt;code&gt;VERY-LARGE&lt;/code&gt;will have TRUE or FALSE values based upon the values within their parent data item (SHIRT-SIZE).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21181dbdd6357193e1899865b1e8fc13ca1ddd5" translate="yes" xml:space="preserve">
          <source>The configuration section is not allowed in a nested subprogram &amp;mdash; nested programs will inherit the configuration section settings of their parent program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc7d4eba969466959d4facc9f0d7ee8492f5862" translate="yes" xml:space="preserve">
          <source>The contents of each &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff49f56349d2fd918bf85a2fd664a7da8d0619ed" translate="yes" xml:space="preserve">
          <source>The contents of the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db251041cbacb6ca7c72e0d339c02b1a66960c3" translate="yes" xml:space="preserve">
          <source>The contents of these files consist of a series of fixed-length data records prefixed with a four-byte record header. The record header contains the length of the data, in bytes. The byte-count does not include the four-byte record header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753f2e99cad8352a6f6d070e145896067c2792da" translate="yes" xml:space="preserve">
          <source>The current content of the process&amp;acirc; storage (including LOCAL-STORAGE) will be identical, any file handles get invalid in the new process, positions and file / record locks are only available to the original process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95adda65d9560f9807e28050afd0114faee1b345" translate="yes" xml:space="preserve">
          <source>The current page number of the report</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7886ea4cdbd69dbc9b8b803d802d2b9f25fcc5" translate="yes" xml:space="preserve">
          <source>The current value in each &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28364140bbc09eff11e7073c30aa37f462dc59a8" translate="yes" xml:space="preserve">
          <source>The data division consists of six optional sections &amp;mdash; when used, those sections must be coded in the order shown in the syntax diagram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bd0ffc2783d74d456d45414e4d5ca7f9d21765" translate="yes" xml:space="preserve">
          <source>The data item &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509d9d5663a18fba15f9359fe80954ed18bdbe00" translate="yes" xml:space="preserve">
          <source>The data item at the top, also referred to as a &quot;record&quot;, always has a level number of 01. After that, you may assign level numbers as you wish (01&amp;ndash;02&amp;ndash;03&amp;ndash;04&amp;hellip;, 01&amp;ndash;05&amp;ndash;10&amp;ndash;15&amp;hellip;, etc.), as long as you follow these simple rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51843ff37218e9751abe9a7a1bce0bd1e6557008" translate="yes" xml:space="preserve">
          <source>The data item contains a complete or partial date (Birth-DT, Birth-Month-DT, Birth-Year-DT, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef7ffd4c58840deeb058caa40ee4fa0de11216f" translate="yes" xml:space="preserve">
          <source>The data item contains a complete or partial screen description (appropriate for SCREEN SECTION 01-level data items).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677092baab05cabea573773ec5aed72fbe5076ee" translate="yes" xml:space="preserve">
          <source>The data item contains a complete or partial time value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2533c9fc67129b6b982ce9bd2ce4d5ee851e5da7" translate="yes" xml:space="preserve">
          <source>The data item contains all or a part of an Address (City-ADDR, State-ADDR, Street-ADDR, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636cb43f8ed1c547b5bb3b2fa7de9d40fdf57cb0" translate="yes" xml:space="preserve">
          <source>The data item contains generic alphanumeric text that doesn&amp;rsquo;t fit into any of the other categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42dccd6fd6eb7bc17ba1f4149ae5122aa3bd569" translate="yes" xml:space="preserve">
          <source>The data item contains nothing but&lt;code&gt;N&lt;/code&gt;&lt;code&gt;B&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;and&lt;code&gt;0&lt;/code&gt;symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd90847c6ca5515697783a7609ebee0a691387e8" translate="yes" xml:space="preserve">
          <source>The data item is one containing nothing but the&lt;code&gt;N&lt;/code&gt;symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061132714c8674745cd158cff7651f996b099908" translate="yes" xml:space="preserve">
          <source>The data item is one that is described with a picture less&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) or has a&lt;code&gt;PICTURE&lt;/code&gt;composed of nothing but&lt;code&gt;P&lt;/code&gt;&lt;code&gt;9&lt;/code&gt;&lt;code&gt;S&lt;/code&gt;and&lt;code&gt;V&lt;/code&gt;symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093ee7f05fc1211641ebb22093984fe7433f9c53" translate="yes" xml:space="preserve">
          <source>The data retrieved from the system and the format in which it is structured will vary, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b7e1589b15e4bdfcdfd30052ff624104478aab" translate="yes" xml:space="preserve">
          <source>The data to be sorted is loaded into the sort work file either by copying the entire contents of the file(s) named on the&lt;code&gt;USING&lt;/code&gt;clause (done automatically by the sort) or by utilizing an input procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bd14aafbf0bb2d0d90b32baade5f53e82a1873" translate="yes" xml:space="preserve">
          <source>The data within &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc2d668890fa142f4bca9eb22c5ad4bb6977c9f" translate="yes" xml:space="preserve">
          <source>The data-pointer specified in a FREE statement does not identify currently allocated storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0579c8205e98600e7650685aa13310c1688563f8" translate="yes" xml:space="preserve">
          <source>The date the report was generated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070db0540d0e286e538aa6839bd9fddf9e40b64d" translate="yes" xml:space="preserve">
          <source>The declaratives area may contain any number of declarative procedures, but no two declarative procedures should be coded to trap the same event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca339f3c37ec719e2ecda0ddafb137b677eb118" translate="yes" xml:space="preserve">
          <source>The default prompt character, should no&lt;code&gt;CHARACTER&lt;/code&gt;specification be coded, or should the&lt;code&gt;PROMPT&lt;/code&gt;clause be absent altogether, is an underscore (&quot;_&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76162fd09f83782bd3efa0d736681e2507f4186e" translate="yes" xml:space="preserve">
          <source>The default, if this clause is absent, is&lt;code&gt;WITH TEST BEFORE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23486948cfdb6c2206b6fe6df69af3b36e2d6aa9" translate="yes" xml:space="preserve">
          <source>The development of so-called &quot;higher-level&quot; programming languages that enable a programmer to specify in a single statement of the language an action that would have required many more separate statements in a prior programming language. The standardization of such languages, making them usable on a wide variety of computers and operating systems, was a key aspect of this development. COBOL was a pioneering development in this area, being a direct descendant of the very first higher-level language (FLOW-MATIC, developed by US Naval Lieutenant Grace Hopper) and the first to become standardized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f65f6fa8d0041b903e87080b6641df52724470" translate="yes" xml:space="preserve">
          <source>The directory change remains in effect until the program terminates (in which the original current directory at the time the program was started will be automatically restored) or until another&lt;code&gt;C$CHDIR&lt;/code&gt;or a&lt;code&gt;CBL_CHANGE_DIR&lt;/code&gt;built-in system subroutine (see &lt;a href=&quot;#CBL_005fCHANGE_005fDIR&quot;&gt;CBL_CHANGE_DIR&lt;/a&gt;) is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d702a74c8382865c30ba6659b7647fc532bcc7" translate="yes" xml:space="preserve">
          <source>The discussion of the&lt;code&gt;MODULE-TIME&lt;/code&gt;(see &lt;a href=&quot;#MODULE_002dTIME&quot;&gt;MODULE-TIME&lt;/a&gt;) function includes a sample program that uses this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf6ffffc7fe722b4e216328bf864ac9991f5cdd" translate="yes" xml:space="preserve">
          <source>The documentation of the&lt;code&gt;CBL_ERROR_PROC&lt;/code&gt;built-in system subroutine (see &lt;a href=&quot;#CBL_005fERROR_005fPROC&quot;&gt;CBL_ERROR_PROC&lt;/a&gt;) built-in subroutine illustrates the use of this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc008342a397d791f64def930081c029113296b" translate="yes" xml:space="preserve">
          <source>The effect of this statement will be as if the generated machine-language code for the&lt;code&gt;GO TO&lt;/code&gt;statement in &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a54b81fa9b8872d2e004fe908ccaf268c5bb8a1" translate="yes" xml:space="preserve">
          <source>The effect of this statement will be to cause the specified files to share the same I/O buffer in memory. These buffers can sometimes get quite large, and by having multiple files share the same buffer memory you may significantly cut down the amount of memory the program is using (thus making &quot;room&quot; for more procedural code or data). If you do use this feature, take care to ensure that no more than one of the specified files are ever OPEN simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12239d80517acfbeb739c7ad78cb1d0e060e0dec" translate="yes" xml:space="preserve">
          <source>The effect of this statement will be to sort all transactions into ascending order of the date the transaction took place (oldest first, newest last). Unless the business running this program is going out of business, there are most-likely many transactions for any given date. Therefore, within each grouping of transactions all with the same date, transactions will be sub-sorted into ascending sequence of the account number the transactions apply to. Since it&amp;rsquo;s quite possible there might be multiple transactions for an account on any given date, a third level sub-sort will arrange all transactions for the same account on the same date into descending sequence of the actual amount of the transaction (largest first, smallest last). If two or more transactions of $100.00 were recorded for account #12345 on the 31st of August 2009, those transactions will be retained in the order in which they were loaded into the sort work file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09a4e8d54e81cbbc0597afbb1491af72f61fa18" translate="yes" xml:space="preserve">
          <source>The effective granularity of &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819d132e1cae0f32f83464203e1d97e1bd496c9c" translate="yes" xml:space="preserve">
          <source>The effects of&lt;code&gt;NEXT GROUP&lt;/code&gt;will be in addition to any line spacing defined by the next-presented group&amp;rsquo;s&lt;code&gt;LINE NUMBER&lt;/code&gt;clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7327030c21583ffcb89960cddedb6a47f13c2932" translate="yes" xml:space="preserve">
          <source>The elements of a table may be referenced either using a subscript or an index. Syntactically, this is coded using parenthesis, as per the following three examples, all of which store the letter &quot;A&quot; into the 17th occurrence of a data item named WSS-Output-Image-TXT:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21ba5e9570592ca1027bb2f7a967224830d4668" translate="yes" xml:space="preserve">
          <source>The end-of-record delimiter sequence will be X&amp;rsquo;0A&amp;rsquo; (an ASCII line-feed character) or a X&amp;rsquo;0D0A&amp;rsquo; (an ASCII carriage-return + line-feed sequence). The former is used on Unix implementations of GnuCOBOL (including Windows/MinGW, Windows/Cygwin and OSX implementations) while the latter would be used with native Windows implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5393d59d2c5188d5bd57057ed1b7ce765115993b" translate="yes" xml:space="preserve">
          <source>The entry half-way between &quot;first&quot; and &quot;last&quot; is identified. We&amp;rsquo;ll call this the &quot;current&quot; entry, and will set its table entry location into &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562eafa425d5bb9917e4277ba627641a28e9f466" translate="yes" xml:space="preserve">
          <source>The establishment of programming techniques AND the introduction of programming language capabilities to facilitate the re-usability of program code. Anything that supports code re-usability can have a profound impact to the amount of time it takes to develop new applications or to make significant changes to existing ones. In recent years, object-oriented programming (OOP) has been the industry &quot;poster child&quot; for code re-usability. By enabling program logic and the data structures that logic manipulates to be encapsulated into easily stored and retrieved (and therefore &quot;reusable&quot;) modules called classes, the object-oriented languages such as Java, C++ and C# have become the favourites of academia. Since students are being trained in these languages and only these, by and large, it&amp;rsquo;s no surprise that &amp;mdash; today &amp;mdash; object-oriented programming languages are the darlings of the industry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a941e78bfd44e622375d5cfbb84b9723ac379b7" translate="yes" xml:space="preserve">
          <source>The establishment of programming techniques that make programs easier to read and therefore easier to understand. Not only do such techniques reduce the amount of rework necessary simply to make a program work as designed, but they also reduce the amount of time a programmer needs to study an existing program in order how to best adapt it to changing business requirements. The foremost development in this area was structured programming. Introduced in the late 1970&amp;rsquo;s, this approach to programming spawned new programming languages (PASCAL, ALGOL, PL/1 and so forth) designed around it. With the ANSI 85 standard, COBOL embraced the principles espoused by structured programming mavens as well as any of the languages designed strictly around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb37202960698160f69c1faf432bf0473036f192" translate="yes" xml:space="preserve">
          <source>The example will display three results &amp;mdash;&lt;code&gt;34567.89&lt;/code&gt;&lt;code&gt;00019.00&lt;/code&gt;and&lt;code&gt;00007.20&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98edd12efda1e9feab7d1734791d6869fcfd7b89" translate="yes" xml:space="preserve">
          <source>The executable for the called program will be located and loaded into memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae0543276748908a42b457ded08593a58da5ab2" translate="yes" xml:space="preserve">
          <source>The expectation is that the subroutine will eventually return control back to the calling program, at which point the CALLing program will resume execution starting with the statement immediately following the&lt;code&gt;CALL&lt;/code&gt; Subprograms are not required to return to their callers, however, and are free to halt program execution if they wish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77533bc29dac6d31041538abf241c663e099c506" translate="yes" xml:space="preserve">
          <source>The fact that GnuCOBOL supports a full-featured two-way interface with C-language programs means that &amp;mdash; even if you cannot access a library API directly &amp;mdash; you could always do so via a small C &quot;wrapper&quot; program that is&lt;code&gt;CALL&lt;/code&gt;d by a GnuCOBOL program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee7f1abbf8b6fb2f091631e36bfcec91db5989d" translate="yes" xml:space="preserve">
          <source>The file in whose&lt;code&gt;FD&lt;/code&gt;(see &lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;File/Sort-Description&lt;/a&gt;) a&lt;code&gt;REPORT &amp;lt;&lt;i&gt;report-name-1&lt;/i&gt;&amp;gt;&lt;/code&gt;clause exists must be open for&lt;code&gt;OUTPUT&lt;/code&gt;or&lt;code&gt;EXTEND&lt;/code&gt;at the time the&lt;code&gt;INITIATE&lt;/code&gt;statement is executed. See &lt;a href=&quot;#OPEN&quot;&gt;OPEN&lt;/a&gt;, for more information on file open modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b362bea9b305c5aa3ad77bf2025719f107a2227b" translate="yes" xml:space="preserve">
          <source>The file in whose&lt;code&gt;FD&lt;/code&gt;a&lt;code&gt;REPORT &amp;lt;&lt;i&gt;report-name-1&lt;/i&gt;&amp;gt;&lt;/code&gt;clause exists must be open for&lt;code&gt;OUTPUT&lt;/code&gt;or&lt;code&gt;EXTEND&lt;/code&gt;at the time the GENERATE is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b781026f528f074ebf5f226bb9fd21b9b3ab6f8" translate="yes" xml:space="preserve">
          <source>The file in whose&lt;code&gt;FD&lt;/code&gt;a&lt;code&gt;REPORT&lt;/code&gt;clause exists for the report in which &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f341f1734088d4aea02441413bb106d9cb631e7a" translate="yes" xml:space="preserve">
          <source>The file specified by &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca55d67ef6631d0e5b8e6987e024175fb708b5a" translate="yes" xml:space="preserve">
          <source>The final argument (&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99beef947d11652a06d1a2c33cf86dafe692ec6" translate="yes" xml:space="preserve">
          <source>The final way in which a data item may be shared between a calling program (&quot;A&quot;) and a called program (&quot;B&quot;) is by defining the data item (with the same name) in both programs and attaching the&lt;code&gt;EXTERNAL&lt;/code&gt;(see &lt;a href=&quot;#EXTERNAL&quot;&gt;EXTERNAL&lt;/a&gt;) clause to it (again, in both programs). This approach works regardless of whether the called program is nested within the calling program or not. It also works even if the two programs are compiled separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24ef20176344c82758443efc4bc4400faf36c4e" translate="yes" xml:space="preserve">
          <source>The first 16 characters returned by the&lt;code&gt;CURRENT-DATE&lt;/code&gt;(see &lt;a href=&quot;#CURRENT_002dDATE&quot;&gt;CURRENT-DATE&lt;/a&gt;) function will be a number in the format &quot;YYYYMMDDhhmmssnn&quot;, where &quot;YYYYMMDD&quot; is the current calendar date and &quot;hhmmssnn&quot; is the current time of day to the one one-hundredth of a second. Since two different executions of the program will never get identical&lt;code&gt;CURRENT-DATE&lt;/code&gt;values (unless they are executed in extremely close time frames to one another), using those first sixteen characters as the&lt;code&gt;RANDOM&lt;/code&gt;seed will guarantee that receiving a duplicate sequence of pseudo-random numbers in two different executions of the program will be HIGHLY unlikely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8602aef862dc47ffdaa1ff7188c798e9adc8061" translate="yes" xml:space="preserve">
          <source>The first argument is unused, but must be specified. It must be specified&lt;code&gt;BY VALUE&lt;/code&gt;(see &lt;a href=&quot;#CALL&quot;&gt;CALL&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb234c1c08fedfe3d03e10c24a5d58a1e51ff57" translate="yes" xml:space="preserve">
          <source>The first can search a table sequentially, stopping only when either a table entry matching one of any number of search conditions is found, or when all table entries have been checked against the search criteria and none matched any of those criteria.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0985088dd31008bb9db75f00f5d8bab686edd716" translate="yes" xml:space="preserve">
          <source>The first page you print is now a perfect template to use when designing reports &amp;mdash; it shows, given the answers to questions 1-4, every available printable character position on a page! The number of lines printed on that page becomes your&lt;code&gt;PAGE LIMIT&lt;/code&gt;value for the&lt;code&gt;RD&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba63c70c2bfaf1f813be75f9b14193d1d91a515" translate="yes" xml:space="preserve">
          <source>The first record of data shown below shows that the aggregated score of all benchmarks reported for the AMD A10-4600M CPU is 3145, as compared to the second record which shows that the aggregated score reported of all benchmarks reported for the Intel Core-i7-4960X CPU is 14291.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525701efa44718af6fb15021852a4228575e601f" translate="yes" xml:space="preserve">
          <source>The first reserved word of a COBOL statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e74ad3ff4a5c3b60b60d4dcccd41ecfb09c704" translate="yes" xml:space="preserve">
          <source>The first time any of the GnuCOBOL subprograms in a dynamically-loadable module are invoked, the entry-point referenced must be the one for which the &quot;.dll&quot;, &quot;.so&quot; or &quot;.dylib&quot; file is named.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0899f5b93e9bfa829355180c29dba661359c4c3" translate="yes" xml:space="preserve">
          <source>The first two ways in which arguments may be passed &lt;code&gt;BY REFERENCE&lt;/code&gt;and&lt;code&gt;BY CONTENT&lt;/code&gt; are intended for use when a GnuCOBOL program is being called, while the first and third &lt;code&gt;BY REFERENCE&lt;/code&gt;and&lt;code&gt;BY VALUE&lt;/code&gt; are intended for use when a C program is being called. You</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae33694c47cefeac6bb5748dcc1830ffb88a66ab" translate="yes" xml:space="preserve">
          <source>The flow of execution will then progress through the coding of the function as it would with any other program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1980f68d667a34e789cf9f54530ce801a821657" translate="yes" xml:space="preserve">
          <source>The flow of execution will then progress through the coding of the subprogram as it would with any other program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46e1d158dac406013171b950ca91dec5bc2d927" translate="yes" xml:space="preserve">
          <source>The folder in which the program being compiled resides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b611bf48324c48049f5c88af85de620a27ed3" translate="yes" xml:space="preserve">
          <source>The folder named as the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a26396dcfdab07d7db095fc96fa5f38a8d028ee" translate="yes" xml:space="preserve">
          <source>The folder named on the&lt;code&gt;-I&lt;/code&gt;switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11171c3dc3fcca3cf199ba3ff908f8b2a575c0f" translate="yes" xml:space="preserve">
          <source>The following &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600ae2dd58ab93b2e853f329233aeba589f43c6a" translate="yes" xml:space="preserve">
          <source>The following apply when &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3b47655fcfeb31d722f10b33b467976275feac" translate="yes" xml:space="preserve">
          <source>The following are examples of keycodes that can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a930c90096e23a1a7996f44bc4a0cb3c19003c3" translate="yes" xml:space="preserve">
          <source>The following are insertion symbols. They are used to insert an extra character (two in the case of &quot;CR&quot; and &quot;DB&quot;) to signify the sign (positive or negative) of the numeric value that is moved into the field whose picture string contains one of these symbols, or the fact that the data item represents a currency (money) amount. Only one of the&lt;code&gt;+&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;CR&lt;/code&gt;or&lt;code&gt;DB&lt;/code&gt;symbols may be used in a picture clause. In this context, when any of these symbols are used in a &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875bba32e815a044e6881c724e77033d1b234210" translate="yes" xml:space="preserve">
          <source>The following are the CORRESPONDING match ups that passed rule #1 (but failed on another rule), and the reasons why they failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e294e2e89bb0547f8d63c19bf6ab737bec2e6b" translate="yes" xml:space="preserve">
          <source>The following are the GnuCOBOL figurative constants and their respective equivalent values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d437f9b3f0e1823ef9aa4aca29cd9ea9ff8b05d" translate="yes" xml:space="preserve">
          <source>The following are the error type strings, and their corresponding exception codes and descriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76cfe3ebe91a3169d26463a970e9cfbb5f039aa" translate="yes" xml:space="preserve">
          <source>The following are the fixed insertion editing symbols that may be specified in a picture string. Each of these editing symbols will insert a special character into the field value at the position it is specified in the picture string. These editing symbols will each introduce one extra character into the total field size for each occurrence of the symbol in the picture string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d26a12344a08e5009f441eb813038a691a7a6ad" translate="yes" xml:space="preserve">
          <source>The following are the numeric formatting symbols that may be specified in a picture string. Each of these editing symbols will insert special characters into the field value to present numbers in a &quot;friendly&quot; format. These editing symbols will each introduce one extra character into the total field size for each occurrence of the symbol in the picture string. Numeric fields whose picture clause contains these characters may neither be used as source fields in any calculation nor may they serve as source fields for the transfer of data values to any data item other than an alphanumeric field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14283b8c23d2ac4035be8dbdc534e051f84542f" translate="yes" xml:space="preserve">
          <source>The following are the valid CORRESPONDING matches, assuming the statement&lt;code&gt;MOVE CORRESPONDING X TO Y&lt;/code&gt;is being executed (there are no valid corresponding matches for&lt;code&gt;ADD CORRESPONDING&lt;/code&gt;or&lt;code&gt;SUBTRACT CORRESPONDING&lt;/code&gt;because every potential match up violates rule #4):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887793f81bf83416cc5c43bc9fe921dfbeefeb3a" translate="yes" xml:space="preserve">
          <source>The following are the various environment variables that can play a role in the compilation of GnuCOBOL programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579b33c24b4bfe811f896ba485aac36b73ac9505" translate="yes" xml:space="preserve">
          <source>The following are typical &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0305ddf4421c028dfe53c53ef58a064b7c1de3a" translate="yes" xml:space="preserve">
          <source>The following code is an alternative approach when you just wish to convert a number to its ASCII equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85706cabbe0ba83f9a11103f1f999f204f7aa9a9" translate="yes" xml:space="preserve">
          <source>The following code is an alternative approach when you just wish to convert an ASCII character to its numeric equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae82a16fa373c4311c8b34e1aea766c683689cdd" translate="yes" xml:space="preserve">
          <source>The following describes the syntax and option switches of the cobc command. This information may be displayed by entering the command &quot;cobc &amp;ndash;help&quot; or &quot;cobc -h&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5ca8304cf163000f5bfeac23dc6f31f6644935" translate="yes" xml:space="preserve">
          <source>The following discussion presents the various components of every GnuCOBOL source line record when the compiler is operating in Fixed Format Mode. Remember that this is the default mode for the GnuCOBOL compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d354bc7b37a71ce771b76dc17210fbe80f7276b" translate="yes" xml:space="preserve">
          <source>The following example enables all intrinsic functions to be specified without the use of the&lt;code&gt;FUNCTION&lt;/code&gt;keyword, (2) names two user-defined functions named &quot;MY-FUNCTION-1&quot; and &quot;MY-FUNCTION-2&quot; that will be used by the program and (3) specifies the alias names &quot;SIGMA&quot; for the intrinsic function &quot;STANDARD-DEVIATION&quot; and &quot;MF2&quot; for &quot;MY-FUNCTION-2&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7cf7d63f9d40da497d2ccf44920d8ab1dc3551" translate="yes" xml:space="preserve">
          <source>The following example may help your understanding of how the&lt;code&gt;INITIALIZE&lt;/code&gt;statement works. The sample code makes use of the COBDUMP program to dump the storage that is (or is not) being initialized. See &lt;a href=&quot;https://open-cobol.sourceforge.io/HTML/gnucobsp.html#COBDUMP&quot;&gt;COBDUMP&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160f741f972e96d920091c139d0f33bc6a75fe51" translate="yes" xml:space="preserve">
          <source>The following example shows how&lt;code&gt;GO TO ... DEPENDING ON&lt;/code&gt;may be used in a real application situation, and compares it against an alternative &amp;mdash;&lt;code&gt;EVALUATE&lt;/code&gt;(see &lt;a href=&quot;#EVALUATE&quot;&gt;EVALUATE&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afce75d07fc62a769c63d0437e7db51bfa8bbdda" translate="yes" xml:space="preserve">
          <source>The following example will format a ten digit number (presumably a telephone number) into a&lt;code&gt;### ### ####&lt;/code&gt;layout:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366e7fd08d56994a77cff5acf1e6768aab310bb0" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the behaviour of the presence and absence of the&lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt;clause when the field size is different than that of the value being stored. In these examples, the symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198edc7343fe5cacb637f5c86b1007d9bd6b6de7" translate="yes" xml:space="preserve">
          <source>The following intrinsic functions, known to other &quot;dialects&quot; of COBOL, are defined to GnuCOBOL as reserved words but are not otherwise implemented currently. Any attempts to use these functions will result in a compile-time error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85eeb5a0f2634bf880fed3f37b5d0f3b3a2c4471" translate="yes" xml:space="preserve">
          <source>The following is a list of the various environment variables that can play a role in the execution of GnuCOBOL programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6af64493c06e9ad590615df4210c4ae73b7c98" translate="yes" xml:space="preserve">
          <source>The following is a sample GnuCOBOL program that registers an error procedure. The output of that program is shown as well. As as you can see, the error handler&amp;rsquo;s messages appear followed by the standard GnuCOBOL message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c37d98c24be8f9f8f3e0b0173b0a2ba7ec9004" translate="yes" xml:space="preserve">
          <source>The following is a sample GnuCOBOL program that registers an exit procedure. The output of that program is shown as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7d84b0f23f441acb6f96ca4df2ee8cfc27c43a" translate="yes" xml:space="preserve">
          <source>The following is a typical &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37584c1f0e6c1a0d62ffdba3c29b838fe7de98fc" translate="yes" xml:space="preserve">
          <source>The following is a verbatim listing of the &quot;default&quot; configuration file (the one used if you don&amp;rsquo;t specify the&lt;code&gt;-conf&lt;/code&gt;switch), just to show you the types of settings that may appear:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194f830014236206be81c84e0c88318e80662338" translate="yes" xml:space="preserve">
          <source>The following is an example of how a table might be defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99768abaae931d2dd8c36a6767cebae32aa9ccb" translate="yes" xml:space="preserve">
          <source>The following is an example of usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f9b3c24781824b8eb01ac954dd1654feedc4c2" translate="yes" xml:space="preserve">
          <source>The following is sample output from the program:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705f4a50e699efbb9c36b6acc593460ca788b002" translate="yes" xml:space="preserve">
          <source>The following is the complete set of input data used for this example. This is by no means the complete set of data available at &lt;a href=&quot;https://open-cobol.sourceforge.io/HTML/cpubenchmark.net&quot;&gt;cpubenchmark.net&lt;/a&gt; &amp;ndash; it is just a representative sample used for this example. For my class, I give my students a report showing the results for almost a thousand CPUs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124c21f972909f3b3b9bbd4754f1a5812c74d864" translate="yes" xml:space="preserve">
          <source>The following is the list of possible locale codes, for example, that would be available on a Windows computer running a GnuCOBOL version that was built utilizing the MinGW Unix-emulator and the GNU C compiler (gcc):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553f94342684c15083992d4ac8e816abc018a3eb" translate="yes" xml:space="preserve">
          <source>The following picture symbols may be used with numeric data items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8d804aa11df4549aa5dbc50b5937242e0276ea" translate="yes" xml:space="preserve">
          <source>The following points apply if &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bf501b411bd65ec9057e34411586b9ec8bbbbb" translate="yes" xml:space="preserve">
          <source>The following points apply to Format 1 of the&lt;code&gt;REPLACE&lt;/code&gt;statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ba2d6822d3084f3303f4f4cffcdd00cd6c072c" translate="yes" xml:space="preserve">
          <source>The following points apply to Format 2 of the&lt;code&gt;REPLACE&lt;/code&gt;statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e24411647918f526878b31ee5a3a3d64c3685a7" translate="yes" xml:space="preserve">
          <source>The following points apply to an&lt;code&gt;OCCURS&lt;/code&gt;used in the report section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75851f320bca3dd7e58cf365fc9c61d4dcd7fca" translate="yes" xml:space="preserve">
          <source>The following points apply to the specification of&lt;code&gt;EXTERNAL&lt;/code&gt;in a data item&amp;rsquo;s definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0251d82e61c3222178a2506bc7d1fb62aa013d" translate="yes" xml:space="preserve">
          <source>The following points apply to the specification of&lt;code&gt;GLOBAL&lt;/code&gt;in a data item&amp;rsquo;s definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c59e6d273d1ed46c8d42cc87af54794bf3d9be" translate="yes" xml:space="preserve">
          <source>The following points apply to the use of the&lt;code&gt;CONVERTING&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d75a94cadf1c4b5adfbac0f31dcb95739589afa" translate="yes" xml:space="preserve">
          <source>The following points apply to the use of the&lt;code&gt;REPLACING&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86df0f22e645629211a77bd6348475c6b50938a" translate="yes" xml:space="preserve">
          <source>The following points apply to the use of the&lt;code&gt;TALLYING&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b4d096d92eb853d660cb08f92a1cab03ed6074" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;EXIT PARAGRAPH&lt;/code&gt;and&lt;code&gt;EXIT SECTION&lt;/code&gt;statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cd9d466d95cb4f3d753f2dd5a73c64ba581e1a" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;EXIT PERFORM&lt;/code&gt;and&lt;code&gt;EXIT PERFORM CYCLE&lt;/code&gt;statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd15a7462798ca21e2492f22cc4c1d492afa9481" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;EXIT PROGRAM&lt;/code&gt;and&lt;code&gt;EXIT FUNCTION&lt;/code&gt;statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853fe56205a948a605bf5ca30859136430acc83b" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;RESET&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5de0fb6dadb197d1bb40f183c0f99c48385b24" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;UPON&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08f48c6cacb6d48aece6396b67314be33704e1f" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;USE BEFORE REPORTING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8e0f2d2ad20d59349e715372f70726296e9490" translate="yes" xml:space="preserve">
          <source>The following points apply to the&lt;code&gt;USE FOR DEBUGGING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ee6aaad7c3c66344e2dc8101621db9aa01d17a" translate="yes" xml:space="preserve">
          <source>The following points apply to using the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01074eaa3539802071c51ac260ee3828c1fa197a" translate="yes" xml:space="preserve">
          <source>The following points apply to using the&lt;code&gt;VALUE&lt;/code&gt;clause in the definition of a condition name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5565a7dfe6431b09250249469dfec8e1f60e8178" translate="yes" xml:space="preserve">
          <source>The following points apply to using the&lt;code&gt;VALUE&lt;/code&gt;clause in the definition of any other data item:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a0d19b7116f6e1457addaa2645e2948a7f07dd" translate="yes" xml:space="preserve">
          <source>The following points apply when &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8395017877ca8cf95569c049f928580cac154ca9" translate="yes" xml:space="preserve">
          <source>The following points describe the sequence of events that take place as a result of the&lt;code&gt;VARYING&lt;/code&gt;portion of the clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a782d35e30f2dcd8b9de269494a07a7f19cf07" translate="yes" xml:space="preserve">
          <source>The following points describe the&lt;code&gt;EXIT&lt;/code&gt;statement with none of the optional clauses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6125fe0d3b1485dfb488aa96d083e7a053607df" translate="yes" xml:space="preserve">
          <source>The following points document the use for format 2 of the&lt;code&gt;LINE&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f38b00f71f3382ea8a9f3630169bd6ffb1c71f" translate="yes" xml:space="preserve">
          <source>The following points document the use of format 1 of the&lt;code&gt;LINE&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3b7e1ad628074ff8337d4a757a9d1f90cb5620" translate="yes" xml:space="preserve">
          <source>The following points pertain to any &amp;lt;&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec4ce59942060d5138deaba201f51fa189c5f8e" translate="yes" xml:space="preserve">
          <source>The following points pertain to the Input Stage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7c3e589adda8a6762f96ae75d8883b526c5b12" translate="yes" xml:space="preserve">
          <source>The following points pertain to the Output Stage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea65bea84fa906ded12d92905a59cf27a5005b89" translate="yes" xml:space="preserve">
          <source>The following points pertain to the Sort Stage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4efb8d394615318137e2b4345b5811efceccbc3" translate="yes" xml:space="preserve">
          <source>The following points pertain to the data division:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062d5c2389b9841120e127eb1934d617814ac12d" translate="yes" xml:space="preserve">
          <source>The following points pertain to the environment division:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3248b5f685b678cbb8e1bdf357d04a64a69741" translate="yes" xml:space="preserve">
          <source>The following points pertain to the identification division</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e269134cad365369d4486a8548afed98fa2530" translate="yes" xml:space="preserve">
          <source>The following points pertain to the procedure division:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e3e4080390f0e787e9d90b49cd72a87e05ba13" translate="yes" xml:space="preserve">
          <source>The following points pertain to the use (or not) of the&lt;code&gt;ADVANCING&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12493d356b52d2f5bc23b1bb1571b752ffbf801b" translate="yes" xml:space="preserve">
          <source>The following points pertain to the use of the&lt;code&gt;EXCEPTION STATUS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5158e26c7b1e647978bb730d5816fde4b5dcede1" translate="yes" xml:space="preserve">
          <source>The following points pertain to the use of the&lt;code&gt;LINES&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e440f306e0239dea81464164871f522fbb726f99" translate="yes" xml:space="preserve">
          <source>The following points pertain to the use of the&lt;code&gt;USER NAME&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719d377db5055cf45363c0790dbdc00976de8f4f" translate="yes" xml:space="preserve">
          <source>The following points pertain to the use of these clauses on&lt;code&gt;READ&lt;/code&gt;(see &lt;a href=&quot;#READ&quot;&gt;READ&lt;/a&gt;) and&lt;code&gt;RETURN&lt;/code&gt;(see &lt;a href=&quot;#RETURN&quot;&gt;RETURN&lt;/a&gt;) statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0dbf6b0c6b9bb3d3bfb0f3213c6629bf0aed90e" translate="yes" xml:space="preserve">
          <source>The following points pertain to the use of these clauses on&lt;code&gt;SEARCH&lt;/code&gt;(see &lt;a href=&quot;#SEARCH&quot;&gt;SEARCH&lt;/a&gt;) and&lt;code&gt;SEARCH ALL&lt;/code&gt;(see &lt;a href=&quot;#SEARCH-ALL&quot;&gt;SEARCH ALL&lt;/a&gt;) statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24afbc6f2d485b7cd781b106251ce0d71291a0e" translate="yes" xml:space="preserve">
          <source>The following program compares the performance of performing arithmetic operations (in a totally non-scientific, non-rigorous way) against data items with a&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) of&lt;code&gt;DISPLAY&lt;/code&gt;&lt;code&gt;COMP&lt;/code&gt;and&lt;code&gt;BINARY-LONG&lt;/code&gt; It was actually my intent when I first wrote the program to merely demonstrate the relative performance differences between different types of numeric data storage, and it certainly met that objective.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599b10c8f2147b43e83dc79f5a3860b83bb649dc" translate="yes" xml:space="preserve">
          <source>The following rules apply to the files named on the&lt;code&gt;USING&lt;/code&gt;clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99382866a30c83c1ebd98e2e7af5871b1f6497a" translate="yes" xml:space="preserve">
          <source>The following rules apply to the rounding behaviour induced by this clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0bc3e2c36c1b7b5bb2959b57a45a21c7ccea5c" translate="yes" xml:space="preserve">
          <source>The following rules establish default values for the various&lt;code&gt;PAGE LIMIT&lt;/code&gt;clauses, assuming there is one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d23af711e1802819dacb30d086c6d8272fc1853" translate="yes" xml:space="preserve">
          <source>The following rules must all be followed in order to use REDEFINES:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b957d67ca238f31ec12f9e4f4b5aca299d504124" translate="yes" xml:space="preserve">
          <source>The following rules pertain to the&lt;code&gt;CONTROL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356cbb94b0b66db95971a2e8a87433719a5fa086" translate="yes" xml:space="preserve">
          <source>The following rules pertain to the&lt;code&gt;PAGE LIMITS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f63eff88655fc2c5c90f78c9dd03662a00a6cf1" translate="yes" xml:space="preserve">
          <source>The following sample program illustrates the&lt;code&gt;UNSTRING&lt;/code&gt;statement statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c008981e4301b9f349748592a5cf59ca960addaa" translate="yes" xml:space="preserve">
          <source>The following sample program uses all the MODULE- Functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04ec0ea7f3a14393306a1c0e653680a25209eb6" translate="yes" xml:space="preserve">
          <source>The following sections describe the various built-in subroutines. ALL SUBROUTINE ARGUMENTS ARE MANDATORY EXCEPT WHERE EXPLICITLY NOTED TO THE CONTRARY. Any subroutine returning a value to the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) could utilize the&lt;code&gt;RETURNING&lt;/code&gt;clause on the&lt;code&gt;CALL&lt;/code&gt;statement to return the result back to the full-word binary data item of your choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99cf75357bf1d1f77f561c6dd5725acec18e2f6" translate="yes" xml:space="preserve">
          <source>The following sets of reserved words are interchangeable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f11552ef149927418cc9293545fdf4ffa29715" translate="yes" xml:space="preserve">
          <source>The following shows how the previous example could have been coded without a&lt;code&gt;GO TO&lt;/code&gt;by utilizing an&lt;code&gt;EXIT PARAGRAPH&lt;/code&gt;statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3cb74a05e06b7673b3b83b1e344f7202ec4fb7" translate="yes" xml:space="preserve">
          <source>The following special rules apply only to sort/merge work files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d4ca609a2f561515c740dc47a2a837e5885030" translate="yes" xml:space="preserve">
          <source>The following table summarizes the various USAGE specifications available in GnuCOBOL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b006600e10a9b909f25f044fdcb192c4ea44fb6d" translate="yes" xml:space="preserve">
          <source>The following two code examples define the same set of figurative constant names for five ASCII control characters (assuming that ASCII is the system&amp;rsquo;s native character set). The two examples are identical in their effects, even though the manner in which the figurative constants are defined is different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b828832010d31dee006caf2a03ff97c599bb0ab2" translate="yes" xml:space="preserve">
          <source>The following two examples illustrate two different ways a report could include four quarters worth of sales figures in it&amp;rsquo;s detail lines &amp;mdash; one doing things &amp;rsquo;the hard way&amp;rsquo; and one using the advanced&lt;code&gt;OCCURS&lt;/code&gt;capabilities of&lt;code&gt;STEP&lt;/code&gt;and&lt;code&gt;VARYING&lt;/code&gt; Both assume the definition of the following table exists in working-storage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7e9413c874d6d7ef9bb02b48c653ec1e7ce935" translate="yes" xml:space="preserve">
          <source>The following two statements produce identical results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae44f8b9360965e84e641ec42c733c33504e3d1" translate="yes" xml:space="preserve">
          <source>The formatting of those report lines that make up the main body of the report (detail).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5457ad50ec74e85af7981f8d5127bac6e5ce5c4b" translate="yes" xml:space="preserve">
          <source>The four paragraphs in this section may be specified in any order but if not in this order, a warning will be issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac937662f2d9cd67b16828a90b34f13abbc65e3" translate="yes" xml:space="preserve">
          <source>The function of the single, mandatory,&lt;code&gt;WHEN&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4266c5208ead97c18144069abdf96648328609e" translate="yes" xml:space="preserve">
          <source>The general usage and syntax of cobcrun is as follows as issued by running cobcrun -h (or &amp;ndash;help) :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8447b3df7f6dccacd4436e40452ddb545ba54a4" translate="yes" xml:space="preserve">
          <source>The idea is to pass two string and one full-word unsigned arguments to the subprogram, have the subprogram print them out, change all three and pass a return code of 2 back to the caller. The caller will then re-display the three arguments (showing changes only to the two&lt;code&gt;BY REFERENCE&lt;/code&gt;arguments), display the return code and halt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167a838ac7eaeda5c91a5623be9b3302d79ab0b8" translate="yes" xml:space="preserve">
          <source>The identification division provides basic identification of the program by giving it a name and optionally defining some high-level characteristics via the eight pre-defined paragraphs that may be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568cfc51a71a7b3753b045574f68d5a3eac2629d" translate="yes" xml:space="preserve">
          <source>The identifiers specified on the&lt;code&gt;USING&lt;/code&gt;clause must be defined in the linkage section of the subprogram. No storage is actually allocated for those identifiers in the subprogram as the actual storage for them will exist in the calling program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0841b45c4b0a7c732760a76d0708f3853ce6c3b8" translate="yes" xml:space="preserve">
          <source>The implied Relation Condition&lt;code&gt;&amp;lt;&lt;i&gt;Selection-Subject&lt;/i&gt;&amp;gt; = &amp;lt;&lt;i&gt;Selection Object&lt;/i&gt;&amp;gt;&lt;/code&gt;is TRUE &amp;mdash; See &lt;a href=&quot;#Relation-Conditions&quot;&gt;Relation Conditions&lt;/a&gt;, for the rules on how the comparison will be made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20170b11d2abfa13b8fcf8d03f512a59978802e5" translate="yes" xml:space="preserve">
          <source>The indentation is purely at the discretion of the programmer to make things easier for humans to read (the compiler couldn&amp;rsquo;t care less). Historically, COBOL implementations that required Fixed Format Mode source programs required that the&lt;code&gt;01&lt;/code&gt;level number begin in Area A and that everything else begins in Area B. GnuCOBOL only requires that all data definition syntax occur in columns 8-72. In Free Format Mode, of course, there aren&amp;rsquo;t even those limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c28549576b010dcd6d6416d4c34e7f4e71e3c1" translate="yes" xml:space="preserve">
          <source>The information is returned to the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ea8b23a7edd458bbabdcfde262ef7b91179e04" translate="yes" xml:space="preserve">
          <source>The initial value of the current character pointer is less than 1 or greater than the number of character positions in &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3c2ad4b5ef0a6e242baddeb9fc935533064328" translate="yes" xml:space="preserve">
          <source>The initial value of the current character pointer is less than 1 or greater than the number of characters in &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da80edfa34bcd6ee1b7a179e95b295b53da063ab" translate="yes" xml:space="preserve">
          <source>The intent of a 77-level item is to be able to create a stand-alone elementary data item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cf47d8b605c1c903a14630100471db386ab139" translate="yes" xml:space="preserve">
          <source>The internal processing of the SEARCH ALL statement begins by setting internal &quot;first&quot; and &quot;last&quot; pointers to the 1st and last entry locations of the table. Processing then proceeds as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8741c0b8c8154da05cce4e0e509a00e96a0279d1" translate="yes" xml:space="preserve">
          <source>The issue of whether to use section and/or paragraph names (collectively referred to as procedure names) within the procedure division is one of near religious significance with many COBOL programmers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56430e20c06bca7ffdc303e632fa28704fcc93de" translate="yes" xml:space="preserve">
          <source>The keyword&lt;code&gt;LOCALE&lt;/code&gt;refers to the current locale (in effect at the time the program is executed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a74db450b36505a74c8f335e1232c8e7a3787ba" translate="yes" xml:space="preserve">
          <source>The keyword&lt;code&gt;SYSTEM-DEFAULT&lt;/code&gt;denotes the default locale specified for the computer upon which the program is executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01849c9ae38f5361f273e8535782a77e19d87e83" translate="yes" xml:space="preserve">
          <source>The keyword&lt;code&gt;USER-DEFAULT&lt;/code&gt;references the default locale specified for the user currently executing this program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb5b2943153401d89f8aa0283d8089cdc05709e" translate="yes" xml:space="preserve">
          <source>The keywords&lt;code&gt;NEXT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52351b9b37a018f60982185d6f423a62de2bb7a6" translate="yes" xml:space="preserve">
          <source>The last program in any GnuCOBOL source file need not have an&lt;code&gt;END&lt;/code&gt;marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606fcddbc705415fd44e12a595558c5d6a9f30ed" translate="yes" xml:space="preserve">
          <source>The last three options above are all equivalent; all three are supported by GnuCOBOL so that source code compatibility may be maintained with a wide variety of other COBOL implementations. With all three, if the compiler is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598d77e9876288d29d8209ca35b42856f4137559" translate="yes" xml:space="preserve">
          <source>The last two decimal digits in the modification time will always be 00.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8981e28af3f836f69bab1d3e2981943500bab47a" translate="yes" xml:space="preserve">
          <source>The level number of both the subject and object data items must be the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1834cb04bd7e282c1d1ff50847d52988b99d6ab3" translate="yes" xml:space="preserve">
          <source>The level number used for a report group definition must be 01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacb6a2c382662a59f28caab725253e9d1260183" translate="yes" xml:space="preserve">
          <source>The level numbers of both the subject and object data items cannot be 66, 78 or 88.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176e51469e379b6d1088e4644c02ef508f226f8e" translate="yes" xml:space="preserve">
          <source>The line contains a valid GnuCOBOL statement that is normally treated as a comment unless the program is being compiled in debugging mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3095df6525e81f3e0c95f311400eed99c1a119" translate="yes" xml:space="preserve">
          <source>The line is a comment that will also force a page eject in the compilation listing. While GnuCOBOL will honour such a line as a comment, it will not form-feed any generated listing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ee87957fcbe2d8f7edde848ea6e3fa6b6ab5d5" translate="yes" xml:space="preserve">
          <source>The line is a comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6760ee15d67fbc99eb830d997ecef08f5bea31" translate="yes" xml:space="preserve">
          <source>The line is a continuation of the previous line. These are needed only when an alphanumeric literal (quoted character string), reserved word or user-defined word are being split across lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74468861dc1215d9046b9e82f00bb8c9fca1b985" translate="yes" xml:space="preserve">
          <source>The line location of a report section or screen section field will be determined by the&lt;code&gt;LINE&lt;/code&gt;(see &lt;a href=&quot;#LINE&quot;&gt;LINE&lt;/a&gt;) clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6c5539fec4ecfa014d2409f9e2cb0651ed5c80" translate="yes" xml:space="preserve">
          <source>The literal(s) specified on this clause define the possible characters that may be found in a data item&amp;rsquo;s value in order to be considered part of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b194a1d5e90485551ac50bc24875d6de4aecaacc" translate="yes" xml:space="preserve">
          <source>The main program must be the first program found in the first compilation unit (&quot;mainprog.cbl&quot;). The remainder of that compilation unit as well as the rest of the files in the compilation group (&quot;sub1.cbl&quot; and &quot;sub2.cbl&quot;) must be independent and/or contained subprograms (see &lt;a href=&quot;#Independent-vs-Contained-vs-Nested-Subprograms&quot;&gt;Independent vs Contained vs Nested Subprograms&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f4640bcac259d3da816d01a099fd611b85fcdf" translate="yes" xml:space="preserve">
          <source>The management of paging, enforcement of the &quot;groups cannot span pages&quot; rule and almost every aspect of report generation are handled entirely by the Report Writer Control System.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f7f6bc9a34644414cbe201465a5cab0354e26e" translate="yes" xml:space="preserve">
          <source>The mandatory&lt;code&gt;AT END&lt;/code&gt;clause is used to detect and react to the failure of an attempt to retrieve another record from the file due to an end-of-file (i.e. no more records) condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a768a2c1485c66cc55f6fe9a1e2d4b47f8dad17b" translate="yes" xml:space="preserve">
          <source>The meaning of&lt;code&gt;REFERENCE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215b43692a18b83d835beda953edecda61510c32" translate="yes" xml:space="preserve">
          <source>The meanings of the four locale specifications are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8494012d0a1aaa9f7b7e98f454a94e825a177da" translate="yes" xml:space="preserve">
          <source>The meanings of the various record locking options are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfce23a1bb0a7fed778ebfd3a713dad7fd2dad30" translate="yes" xml:space="preserve">
          <source>The memory address of the actual data item (allocated in the calling program) that is being passed to the subprogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3db2d95a847382617fcbb08869c79d2585065e" translate="yes" xml:space="preserve">
          <source>The merging process is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb24ec3d9aaaad590e0c901ccc5c49792f4fc5de" translate="yes" xml:space="preserve">
          <source>The minimal statement&lt;code&gt;READ &amp;lt;&lt;i&gt;file-name-1&lt;/i&gt;&amp;gt;&lt;/code&gt;is perfectly legal according to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035d88199282e1ca57f415d21dff0e8340d63831" translate="yes" xml:space="preserve">
          <source>The name COBOL actually says it all &amp;mdash; COBOL is an acronym that stands for &quot;(&lt;b&gt;CO&lt;/b&gt;)mmon (&lt;b&gt;B&lt;/b&gt;)usiness (&lt;b&gt;O&lt;/b&gt;)riented (&lt;b&gt;L&lt;/b&gt;)anguage&quot;. Note the fact that the word &quot;common&quot; comes before all others. The word &quot;business&quot; is a close second. Therein lies the key to Cobol&amp;rsquo;s success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a80933bad7e5c70f0c5d17e6920ff09a5745e4" translate="yes" xml:space="preserve">
          <source>The name of the vendor who makes the CPU. In this data, that will either be &quot;AMD&quot; (American Micro Devices) or &quot;INTEL&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b09730ad6d2456d2a7389c4b6c761c74136887" translate="yes" xml:space="preserve">
          <source>The name returned after the file status information will be returned only if the returned file status value is not 00.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817b3000b9cf495b786eb2fb9963f938e62a8cee" translate="yes" xml:space="preserve">
          <source>The name specified as &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ea36a80640b37e55cdc80db5ba6e35d4e1a70f" translate="yes" xml:space="preserve">
          <source>The natural hierarchy of control breaks within a RWCS-controlled report based upon the manner in which the data the report is being generated from is sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1c49e3dfbbfd0122865aae7889a5439b48a6c0" translate="yes" xml:space="preserve">
          <source>The net effect of the above algorithm is that only a fraction of the number of elements in the table need ever be tested in order to decide whether or not a particular entry exists. This is because the half the remaining entries in the table are discarded each time an entry is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a93948aff6641cf083deb63ad68b184fbbe2108" translate="yes" xml:space="preserve">
          <source>The next (and last, in this case) break listed on the CONTROLS clause will be the one that occurs even more frequently (Sorted-Department-Number). The&lt;code&gt;CONTROL FOOTING&lt;/code&gt;for this control field will be the one that summarizes sales for each department within a store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f749eeee6491bd31e44e38198725bfee7ade27a7" translate="yes" xml:space="preserve">
          <source>The next break listed on the&lt;code&gt;CONTROLS&lt;/code&gt;clause will be the one that occurs next most-frequently (Sorted-Store-Number). This control break will be the one that produces the summation for each entire store, and will have its own&lt;code&gt;CONTROL FOOTING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c9edfc200fb2645ce708c60dfdcb5081177ebd" translate="yes" xml:space="preserve">
          <source>The next most-frequently changing value is that of Sorted-Department-Number, and the least-frequently changing value is that of Sorted-Store-Number. remember that the program should be generating totals each time one of these two values change, plus a grand total of sales at the end of the report. These three points are the &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d9918ede56a5926f659f47fa0785a8c268ac9f" translate="yes" xml:space="preserve">
          <source>The next sequential&lt;code&gt;READ&lt;/code&gt;statement will read the record that is pointed to by the logical record pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ce86f359f58a20c64f97b0c1ff6e383539fdca" translate="yes" xml:space="preserve">
          <source>The object code for the called program (the user-defined function) will be located, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a64b7a4cacb09627ec92e196296d92a6e3edf3" translate="yes" xml:space="preserve">
          <source>The occurrence of either event (A) or (B) triggers what is referred to as an &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a0a64083b35233445b095657b0085df50f6d92" translate="yes" xml:space="preserve">
          <source>The only argument &amp;mdash; &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b23ce1f8d399531e6bf70851fb419401c688668" translate="yes" xml:space="preserve">
          <source>The only time the case used does matter is within quoted character strings, where character values will be exactly as coded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9f02741831d425327100d106b62765046fae26" translate="yes" xml:space="preserve">
          <source>The only valid level numbers are 01-49, 66, 77, 78 and 88. Level numbers 01 through 49 are used to define data items that may be part of a hierarchical structure. Level number 01 can also be used to define a constant &amp;mdash; an item with an unchangeable value specified at compilation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0925b59b16e2437874f003112ae9a69c526446" translate="yes" xml:space="preserve">
          <source>The only valid level numbers are 01-49, 66, 77, 78 and 88. Level numbers 66, 77, 78 and 88 all have special uses &amp;mdash; See &lt;a href=&quot;#Special-Data-Items&quot;&gt;Special Data Items&lt;/a&gt;, for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f837a05e1aff4a6aeca8f34186120c8d868c5f" translate="yes" xml:space="preserve">
          <source>The only&lt;code&gt;USAGE&lt;/code&gt;that is allowed in the report section is&lt;code&gt;USAGE DISPLAY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d18cddc912d76b9dbb9c56889ed96b929fff80" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade799e690ca94e55a73040a7f01a0ef3017d702" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ASSIGN&lt;/code&gt;clause specifies how &amp;mdash; at runtime, when &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5a72c6e25354896038dc72f35bb598948d0d22" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;AT END&lt;/code&gt;clause, if coded, is used to detect and react to the failure of an attempt to retrieve another record from the file due to an end-of-file (i.e. no more records) condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e76515260f34b7703f964af1c7d71eea2bac80" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;CLASSIFICATION&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44a435b463299b31437b6e220402592ab756927" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;DEPENDING ON&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497921f9804627c47e4b1dc5c3f6124d2f64e1d1" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;EXCEPTION-STATUS&lt;/code&gt;clause may be used to detect exceptions from a prior arthmetic verb such as COMPUTE to recover any errors produced. These are recovered using the function&lt;code&gt;EXCEPTION-STATUS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41aa20bec3a591e7be192da3bf04dcc61ad2faf8" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;FROM&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee61fba3a8183e4ef19a6055ab36f9fbdedc5f4a" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;INITIAL&lt;/code&gt;clauses may be used to limit the range of characters in the inspect subject that the&lt;code&gt;CONVERTING&lt;/code&gt;&lt;code&gt;REPLACING&lt;/code&gt;or&lt;code&gt;TALLYING&lt;/code&gt;instruction in which they occur will apply. We call this the &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b702db4aa699fb2cd7e947ed6bc0b29bf2ad5a" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;INVALID KEY&lt;/code&gt;and&lt;code&gt;NOT INVALID KEY&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, by detecting non-zero (typically 23 = key not found = record not found) and 00 file status codes, respectively. See &lt;a href=&quot;#File-Status-Codes&quot;&gt;File Status Codes&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6579d3b45b2bf0fc9e7980f5c87f744c20f9bdd" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;INVALID KEY&lt;/code&gt;and&lt;code&gt;NOT INVALID KEY&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to delete a record. See &lt;a href=&quot;#INVALID-KEY-_002b-NOT-INVALID-KEY&quot;&gt;INVALID KEY + NOT INVALID KEY&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bfd5bce5d49771038a428b0a362198a5070a77" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;INVALID KEY&lt;/code&gt;and&lt;code&gt;NOT INVALID KEY&lt;/code&gt;clauses may be used when writing to relative or indexed files to detect and react to the failure (non-zero file status code) or success (00 file status code), respectively, of the statement. See &lt;a href=&quot;#File-Status-Codes&quot;&gt;File Status Codes&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d9832224b26001752da31cbdde2d003a102c41" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;KEY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16e54f3bc3588c2425aa5ee03deb6c585ae559e" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;LOCK&lt;/code&gt;options may be used to manually control access to the just-written record by other programs while this program is running. See &lt;a href=&quot;#Record-Locking&quot;&gt;Record Locking&lt;/a&gt;, to review the various record locking behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c989c279cb3e0e670fd60bfd552d0746dd1dfcb" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;LOCK&lt;/code&gt;options may be used to manually control access to the re-written record by other programs while this program is running. See &lt;a href=&quot;#Record-Locking&quot;&gt;Record Locking&lt;/a&gt;, to review the various record locking behaviours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ac5ebdd04e4f9dba36f5cc523e63074b42f95c" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;LOCK&lt;/code&gt;options may be used to manually control access to the retrieved record by other programs while this program is running. See &lt;a href=&quot;#Record-Locking&quot;&gt;Record Locking&lt;/a&gt;, to review the various record locking behaviours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96f6c529e0fe02ff6c01c48e6f58e1c3fb2187c" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;NEXT PAGE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9883bd500dd2c11c55a5bb54d03db8e31863a71" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;NOT AT END&lt;/code&gt;clause, if coded, will check checking for a file status value of 00. See &lt;a href=&quot;#File-Status-Codes&quot;&gt;File Status Codes&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f21eadc5bb2a95de2d8d4f2d9fdaa4936a7a21" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON EXCEPTION&lt;/code&gt;and&lt;code&gt;NOT ON EXCEPTION&lt;/code&gt;clauses may be used to detect and react to an attempt to retrieve the value of a non-existent environment variable or the successful retrieval of an environment variable&amp;rsquo;s value, respectively. See &lt;a href=&quot;#ON-EXCEPTION-_002b-NOT-ON-EXCEPTION&quot;&gt;ON EXCEPTION + NOT ON EXCEPTION&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa70e6c29950b4f6846306141cdab701f5a7949" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON EXCEPTION&lt;/code&gt;and&lt;code&gt;NOT ON EXCEPTION&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to display output to the specified device. See &lt;a href=&quot;#ON-EXCEPTION-_002b-NOT-ON-EXCEPTION&quot;&gt;ON EXCEPTION + NOT ON EXCEPTION&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b750f7bf2aba1ffe3ef95db5ebba0c41f396ac" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON EXCEPTION&lt;/code&gt;and&lt;code&gt;NOT ON EXCEPTION&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to display output to the specified item. See &lt;a href=&quot;#ON-EXCEPTION-_002b-NOT-ON-EXCEPTION&quot;&gt;ON EXCEPTION + NOT ON EXCEPTION&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43634a237661f28b822eadabcecfc46df58f2785" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON EXCEPTION&lt;/code&gt;and&lt;code&gt;NOT ON EXCEPTION&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to retrieve an&lt;code&gt;ARGUMENT-VALUE&lt;/code&gt; See &lt;a href=&quot;#ON-EXCEPTION-_002b-NOT-ON-EXCEPTION&quot;&gt;ON EXCEPTION + NOT ON EXCEPTION&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07692f68375e5247ccbb6f915f93ebb67e06c8c1" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON EXCEPTION&lt;/code&gt;and&lt;code&gt;NOT ON EXCEPTION&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of the screen I/O attempt. See &lt;a href=&quot;#ON-EXCEPTION-_002b-NOT-ON-EXCEPTION&quot;&gt;ON EXCEPTION + NOT ON EXCEPTION&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173f548db86d2860c80e68b29805d01d7cce3f9e" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON OVERFLOW&lt;/code&gt;and&lt;code&gt;NOT ON OVERFLOW&lt;/code&gt;clauses (or&lt;code&gt;ON EXCEPTION&lt;/code&gt;and&lt;code&gt;NOT ON EXCEPTION&lt;/code&gt;&amp;mdash; they are interchangeable) may be used to detect and react to the failure or success, respectively, of an attempt to&lt;code&gt;CALL&lt;/code&gt;the subroutine. Failure, in this context, is defined as the inability to either locate or load the object code of the subroutine at execution time. See &lt;a href=&quot;#ON-OVERFLOW-_002b-NOT-ON-OVERFLOW&quot;&gt;ON OVERFLOW + NOT ON OVERFLOW&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf30a6121b5842e2cdc2748b76d4e0bf420509a0" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON OVERFLOW&lt;/code&gt;and&lt;code&gt;NOT ON OVERFLOW&lt;/code&gt;clauses may be used to detect and react to the occurrence or not, respectively, of an overflow condition. See &lt;a href=&quot;#ON-OVERFLOW-_002b-NOT-ON-OVERFLOW&quot;&gt;ON OVERFLOW + NOT ON OVERFLOW&lt;/a&gt;, for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8197d232db0cee2ddd5e17330ee59b750756e66" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON SIZE ERROR&lt;/code&gt;and&lt;code&gt;NOT ON SIZE ERROR&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to perform a calculation. In this case, failure is defined as being an &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9f33c091abeb67364dcd5091b9ee053d6a9555" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON SIZE ERROR&lt;/code&gt;and&lt;code&gt;NOT ON SIZE ERROR&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to perform a calculation. In this case, failure is defined as being numeric truncation caused by an &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e44c7f6a82315301193f1d03ef63d2cea06177" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ON SIZE ERROR&lt;/code&gt;and&lt;code&gt;NOT ON SIZE ERROR&lt;/code&gt;clauses may be used to detect and react to the failure or success, respectively, of an attempt to perform a calculation. In this case, failure is defined either as having an &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaa28ea69cd7254d50a1b2d4e45bae482243d98" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;REPLACING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b418f8a8542303d5d15657366c72caa6252aec1c" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;RETURNING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9bc4b3d6187450319b00ff3fb0918651f2d0aa" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;RETURNING&lt;/code&gt;clause provides the opportunity to return a numeric value to the operating system (a &quot;return code&quot;). The manner in which the return code may be interrogated by the operating system varies, but Windows can use&lt;code&gt;%ERRORLEVEL%&lt;/code&gt;to query the return code while Unix shells such as sh, bash and ksh can query the return code as&lt;code&gt;$?&lt;/code&gt; Other Unix shells may have different ways to access return code values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f622aea8916562080ee8a16271d6f8e5d208959a" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;ROUNDED&lt;/code&gt;(see &lt;a href=&quot;#ROUNDED&quot;&gt;ROUNDED&lt;/a&gt;) clause available to each &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f82cc19824c82d80701c50dc59d204d3d74642" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;SIZE&lt;/code&gt;clause allows you to specify the number of bytes a&lt;code&gt;BY VALUE&lt;/code&gt;argument will occupy, with&lt;code&gt;SIZE DEFAULT&lt;/code&gt;specifying 4 bytes (this is the default if no&lt;code&gt;SIZE&lt;/code&gt;clause is used),&lt;code&gt;SIZE AUTO&lt;/code&gt;specifying the size of the argument in the calling program and&lt;code&gt;SIZE &amp;lt;&lt;i&gt;integer-1&lt;/i&gt;&amp;gt;&lt;/code&gt;specifying a specific byte count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1889b0ab1e49983e2d144d1d5ea040f355e2aba9" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;STEP&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c16aba8833dc728c16b46a2c7c703a8220a54f1" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;SUPPRESS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197e9c106ee8e4aed0227ce00d0cc12a16615a62" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;THROUGH&lt;/code&gt;clause allows a range of possible TRUE values to be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcb010cd5a4bbd5ebe410c21bb376d223f643ec" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;UNSIGNED&lt;/code&gt;keyword, legal only if&lt;code&gt;SIZE AUTO&lt;/code&gt;or&lt;code&gt;SIZE &amp;lt;&lt;i&gt;integer-1&lt;/i&gt;&amp;gt;&lt;/code&gt;are coded, will add the &quot;unsigned&quot; attribute to the argument&amp;rsquo;s specification in the C-language function header code generated for the subprogram. While not of any benefit when the calling program is a GnuCOBOL program, this can improve compatibility with a C-language calling program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fcb556fc364b0cdbb67c5adc295c101a0d531c" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;VARYING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32abc412caa9b9d2e420e769bc790292e0ef52c8" translate="yes" xml:space="preserve">
          <source>The optional&lt;code&gt;WITH TEST&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b5384934c5d86bb4aede74fc9128a13e5b5764" translate="yes" xml:space="preserve">
          <source>The order in which arguments are defined on the&lt;code&gt;USING&lt;/code&gt;clause must correspond to the order in which those arguments will be passed to the subprogram by the calling program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84b5613e21742e1760581600b33bf9e8274a043" translate="yes" xml:space="preserve">
          <source>The original principal developers of GnuCOBOL were Keisuke Nishida and Roger While. Since then many others of the GnuCobol community are directly involved in it&amp;rsquo;s development at any one time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b159fdb46898c9ee580ca79107fa1848a7e763" translate="yes" xml:space="preserve">
          <source>The output of this program, on a Windows 7 system with a 32-bit MinGW build of GnuCOBOL is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1694739868a365aee7f4d52e98a3445cf780db6c" translate="yes" xml:space="preserve">
          <source>The paragraphs shown above may be coded in any sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6441bb7de9da96157777dce203e9417d6b6b8289" translate="yes" xml:space="preserve">
          <source>The paragraphs within each section may only be coded in that section, but may be coded in any order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6509c20a2d710b3a1c60adb813b34b732826ed" translate="yes" xml:space="preserve">
          <source>The paragraphs within the sections may be coded in any order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224652364c0feb28b5691c4df558e93bffb90133" translate="yes" xml:space="preserve">
          <source>The period character (&quot;.&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37790684707b1ca629c69fcdd016453866229145" translate="yes" xml:space="preserve">
          <source>The phrase&lt;code&gt;ORGANIZATION IS&lt;/code&gt;(and it&amp;rsquo;s internationalized alternative,&lt;code&gt;ORGANISATION IS&lt;/code&gt; is optional to provide compatibility with those (few) COBOL implementations that consider that word to be optional. Most COBOL implementations do require the word&lt;code&gt;ORGANIZATION&lt;/code&gt; so it should be used in new programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4a77cdbc4c3e37eb033bdae11d69a1ded95e29" translate="yes" xml:space="preserve">
          <source>The phrase&lt;code&gt;ORGANIZATION IS&lt;/code&gt;(and it&amp;rsquo;s internationalized alternative,&lt;code&gt;ORGANISATION IS&lt;/code&gt; is optional to provide compatibility with those (few) COBOL implementations that consider&lt;code&gt;ORGANIZATION&lt;/code&gt;to be optional. Most COBOL implementations do require the word&lt;code&gt;ORGANIZATION&lt;/code&gt; so it should be used in new programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111771a6addbd47ca9bced3c8d2880df6becd467" translate="yes" xml:space="preserve">
          <source>The phrases&lt;code&gt;CONTROL IS&lt;/code&gt;and&lt;code&gt;CONTROLS ARE&lt;/code&gt;are interchangeable, as are the&lt;code&gt;PAGE LIMIT&lt;/code&gt;and&lt;code&gt;PAGE LIMITS&lt;/code&gt;phrases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5f0b3db282311402d103c58f3ba38960de0fb7" translate="yes" xml:space="preserve">
          <source>The picture clause defines the class (numeric, alphabetic or alphanumeric), size and format of the data that may be contained by the data item being defined. Sometimes this role is assisted by the&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) clause, and in a few instances will be assumed entirely by that clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f6d3c3bdcd6e63ea7cf3bbe95daec25afcfa8e" translate="yes" xml:space="preserve">
          <source>The presence of a&lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt;clause in a data item&amp;rsquo;s definition alters the manner in which data is stored into the field from the default &amp;rsquo;left-justified, space filled&amp;rsquo; behaviour to &amp;rsquo;right justified, space filled&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7759a29cac575c16002a4b8b79476c259f1d7be1" translate="yes" xml:space="preserve">
          <source>The presence of an&lt;code&gt;UPON&lt;/code&gt;clause limits the&lt;code&gt;SUM&lt;/code&gt;clause to adding the specified numeric literal or identifier value into the sum counter only when a&lt;code&gt;GENERATE &amp;lt;&lt;i&gt;identifier-9&lt;/i&gt;&amp;gt;&lt;/code&gt;statement is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3926f249478e4d76a63ba3b0dcf3b45dc44606bc" translate="yes" xml:space="preserve">
          <source>The presence or absence of this clause influences the behaviour of the&lt;code&gt;MOVE&lt;/code&gt;(see &lt;a href=&quot;#MOVE&quot;&gt;MOVE&lt;/a&gt;) statement as well as the&lt;code&gt;FROM&lt;/code&gt;(see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;),&lt;code&gt;SOURCE&lt;/code&gt;(see &lt;a href=&quot;#SOURCE&quot;&gt;SOURCE&lt;/a&gt;) and&lt;code&gt;USING&lt;/code&gt;(see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) data item description clauses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419c7e80678fc23ea8a2263071299f121d0fdb79" translate="yes" xml:space="preserve">
          <source>The pressing of the Esc key if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8f3c51516a7e138dbbedf893df1f039e11725c" translate="yes" xml:space="preserve">
          <source>The pressing of the PgUp or PgDn keys, if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b279064885231cc6d55b597cc63c453da9c5871" translate="yes" xml:space="preserve">
          <source>The pressing of the Up-arrow, Down-Arrow or PrtSc (Print Screen) keys. These keys are not detectable on Windows systems, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb26c177bf377af02ce0783e171e18222be31525" translate="yes" xml:space="preserve">
          <source>The primary entry-point for any subroutine is always the first executable statement following any&lt;code&gt;DECLARATIVES&lt;/code&gt;(see &lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVES&lt;/a&gt;) in the procedure division. The name of that entry-point (the name that will be called) is the subroutine&amp;rsquo;s&lt;code&gt;PROGRAM-ID&lt;/code&gt;(see &lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISION&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a7d8b4a66ca614cacaf247e403ec7adf08aa11" translate="yes" xml:space="preserve">
          <source>The problem with this code is that indentation &amp;mdash; so critical to improving the human-readability of a program &amp;mdash; can provide an erroneous view of the logical flow. An&lt;code&gt;ELSE&lt;/code&gt;is always associated with the most-recently encountered&lt;code&gt;IF&lt;/code&gt; this means the emphasized&lt;code&gt;ELSE&lt;/code&gt;will be associated with the&lt;code&gt;IF B = 1&lt;/code&gt;statement, not the&lt;code&gt;IF A = 1&lt;/code&gt;statement as the indentation would appear to imply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100bb7b3b335cb2b8bb3028944fdec27b8082198" translate="yes" xml:space="preserve">
          <source>The procedure division is the only one of the COBOL divisions that allows you to create your own sections and paragraphs. These are collectively referred to as &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4acc24cd4a35577d17e9fa02c8a07a5278c699" translate="yes" xml:space="preserve">
          <source>The process of establishing a unique reference to a data item whose name is duplicated in a program. This takes the form of using the duplicated data name and the name of any of its parent data items, connected by&lt;code&gt;OF&lt;/code&gt;or&lt;code&gt;IN&lt;/code&gt;such that the combination of those two data names is unique within the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495a8473f4fb5381a2a17896383def5129c21a57" translate="yes" xml:space="preserve">
          <source>The process of locating dynamically-loadable modules is case-sensitive on UNIX systems;&lt;code&gt;CALL &quot;dynsub&quot;&lt;/code&gt;and&lt;code&gt;CALL &quot;DYNSUB&quot;&lt;/code&gt;will both fail to locate the&lt;code&gt;DynSub.so&lt;/code&gt;library on a UNIX system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93bc07b76ff9b112a73709a844fd29b42fc49ecb" translate="yes" xml:space="preserve">
          <source>The product of &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e79fb7877d1d089c830694921f2394ac048f93" translate="yes" xml:space="preserve">
          <source>The production of a one-time notice at the end of the last page of a report (report footing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6244841ef1e95be60d860ca25aa08e7c79db30e5" translate="yes" xml:space="preserve">
          <source>The production of zero or more footer lines at the bottom of every page of the report (page footing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f8145638232293381f208796904993bd3d3989" translate="yes" xml:space="preserve">
          <source>The production of zero or more header lines at the top of every page of the report (page heading).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bee036d11ce86380c56bf92be82951c3d3ab4a" translate="yes" xml:space="preserve">
          <source>The program calling&lt;code&gt;C$CALLEDBY&lt;/code&gt;was indeed called by another program, and that program&amp;rsquo;s name has been saved in &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73c62bfdb19e55f41134316f3617332193d54f8" translate="yes" xml:space="preserve">
          <source>The program calling&lt;code&gt;C$CALLEDBY&lt;/code&gt;was not called by any other program (in other words, it is a main program). The &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c227c7e0fb5eb1a00760a179612f1c3046a2857" translate="yes" xml:space="preserve">
          <source>The program must be compiled with the&lt;code&gt;-debug&lt;/code&gt;switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75a512bf9845771f752e66e3743f9f62a3b3be2" translate="yes" xml:space="preserve">
          <source>The program produces this output when executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8e48f46c8e9f7bc2aad53bc5227750dc3730f2" translate="yes" xml:space="preserve">
          <source>The purpose of the optional &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c887a9b65dd9a27e6702eb9a04533e2ed9dfabf" translate="yes" xml:space="preserve">
          <source>The purpose of the&lt;code&gt;AT&lt;/code&gt;clause is to define where on the screen &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922f2475747859d1fad2cff6f58275b168f906b2" translate="yes" xml:space="preserve">
          <source>The purpose of the&lt;code&gt;WITH&lt;/code&gt;clause is to define the visual attributes that should be applied to &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9358ace0fef34473647189b650a8bebd52429fc0" translate="yes" xml:space="preserve">
          <source>The reality is, however, that good programmers have been practising code re-usability for more than a half-century. Up until recently, COBOL programmers have had some of the best code re-usability tools available &amp;mdash; they&amp;rsquo;ve been doing it with copybooks and subprograms rather than classes, methods and attributes but the net results have been similar. With the COBOL2002 standard and proposed COBOL 20XX standard, the COBOL programming language has become just as &quot;object-oriented&quot; as the &quot;modern&quot; languages, while preserving the ability to support, modify, compile and execute &quot;legacy&quot; COBOL programs as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b5f3c35cde06c82d6d4b155e793427d042660d" translate="yes" xml:space="preserve">
          <source>The record descriptions of &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1959c22fe8aea614525d775dc5927718de11032b" translate="yes" xml:space="preserve">
          <source>The record to be rewritten will be the one retrieved by the most-recently executed&lt;code&gt;READ&lt;/code&gt;(see &lt;a href=&quot;#READ&quot;&gt;READ&lt;/a&gt;) of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84e0b0325650970adbc6e2a74d0a6928e39687c" translate="yes" xml:space="preserve">
          <source>The record will not be locked. This is the default locking option in effect for all statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894c0d927441d2bb164fa87ee9e6455aab7ca5fe" translate="yes" xml:space="preserve">
          <source>The remaining options of the&lt;code&gt;&amp;gt;&amp;gt;SET&lt;/code&gt;CDF directive provide equivalent functionality to the&lt;code&gt;&amp;gt;&amp;gt;DEFINE&lt;/code&gt;and&lt;code&gt;&amp;gt;&amp;gt;SOURCE&lt;/code&gt;directives, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1e77e0d6d52636c5f3c767f98f2943becb9439" translate="yes" xml:space="preserve">
          <source>The remaining structures will be one or more index components. An index component is a data structure that (somehow) enables the contents of a field, called a primary key, within each data record (a customer number, an employee number, a product code, a name, etc.) to be converted to a record number so that the data record for any given primary key value can be directly read, written and/or deleted. Additionally, the index data structure is defined in such a manner as to allow the file to be processed sequentially, record-by-record, in ascending sequence of the primary key field values. Whether this index structure exists as a binary-searchable tree structure (b-tree), an elaborate hash structure or something else is pretty much irrelevant to the programmer &amp;mdash; the behaviour of the structure will be as it was just described. The actual mechanism used will depend upon the advanced file-management package was included into your GnuCOBOL implementation when it was built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341b005cb78203f9f5053a8c4a8e4cce82f44740" translate="yes" xml:space="preserve">
          <source>The remaining&lt;code&gt;PAGE LIMIT&lt;/code&gt;values can be established as required by your report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbed0d1b0997a9dff2192e93863c37c246abd489" translate="yes" xml:space="preserve">
          <source>The replacement string, which follows the&lt;code&gt;BY&lt;/code&gt; is specified using the&lt;code&gt;==&amp;lt;&lt;i&gt;pseudo-text-2&lt;/i&gt;&amp;gt;==&lt;/code&gt;option. If&lt;code&gt;&amp;lt;&lt;i&gt;pseudo-text-2&lt;/i&gt;&amp;gt;&lt;/code&gt;is null (in other words, the replacement text is specified as&lt;code&gt;====&lt;/code&gt;, all encountered occurrences of the search string will be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f047bad0cd66f0cadd77023cd9d4cb26bad834f" translate="yes" xml:space="preserve">
          <source>The replacement string, which follows the&lt;code&gt;BY&lt;/code&gt; may be specified using any of the four options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b93f3d03723dd3ae0981e428e92128b9a26ccb7" translate="yes" xml:space="preserve">
          <source>The report group being defined will be a part of the most-recently coded&lt;code&gt;RD&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6515f142f87a8cf4c1cc22633308555a339c3b" translate="yes" xml:space="preserve">
          <source>The report in which &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62aaa281a6b9f8385a68152ceaf7380e2d0d26e8" translate="yes" xml:space="preserve">
          <source>The report line number upon which the data item containing this clause along with any subordinate data items will be presented may be stated on an absolute basis (i.e.&lt;code&gt;LINE 5&lt;/code&gt; or on a relative basis based upon the previously-displayed line (i.e.&lt;code&gt;LINE PLUS 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd342d11009c2b0ab06196ecef6eea8ca405149" translate="yes" xml:space="preserve">
          <source>The report&amp;rsquo;s&lt;code&gt;LINE-COUNTER&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa4f92896f674f07a14e1ec2d6c653df595f5ca" translate="yes" xml:space="preserve">
          <source>The report&amp;rsquo;s&lt;code&gt;PAGE-COUNTER&lt;/code&gt;special register will be set to 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbaa2135baaebf171ae09637fba4c11e2a7723b" translate="yes" xml:space="preserve">
          <source>The reserved word and phrase&lt;code&gt;FOREVER&lt;/code&gt;and&lt;code&gt;UNTIL EXIT&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e1c7c068d8eb1954f29a55b1c4f884aa326821" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;AS&lt;/code&gt;is optional (only on the&lt;code&gt;SOURCEFORMAT&lt;/code&gt;and&lt;code&gt;FOLDCOPYNAME&lt;/code&gt;clauses) and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370ea212dd4f6ca3bb96f1681d80711b3ffc1688" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;AS&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106fe7b60348ed755f60cbac0f2e69379233b558" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;AT&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fecc631970ef85e6559d98e6bffbad7d2b9ff9" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;BY&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c52d31d72517229b69a76dd7e379be85b627912" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;COLUMN&lt;/code&gt;may be abbreviated as&lt;code&gt;COL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944706e14c11c98dce65cee9da7797626b0b9699" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;COLUMNS&lt;/code&gt;may be abbreviated as&lt;code&gt;COLS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebe5f5dc938232bf13471059915dd1e46afdc69" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;CORRESPONDING&lt;/code&gt;may be abbreviated as&lt;code&gt;CORR&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338f70dac3c6c44983b2aa10a9ede70f085f8f2d" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;EQUAL&lt;/code&gt;is interchangeable with the use of&lt;code&gt;=&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ea1824db1e79012cfd4bd3e661b81fc3ee292e" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;IN&lt;/code&gt;may be used in lieu of&lt;code&gt;OF&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b2916b532a1ec6c2728d3074e569c68e27b7db" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;INITIAL&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6366078b387d37446ff3238f32c71d980da478" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;IS&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170822b5751bcb977ded5111930ebcca401c4744" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;JUSTIFIED&lt;/code&gt;may be abbreviated as&lt;code&gt;JUST&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06799a09548a56b3cbd7453f8f6b539dcd555958" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;JUSTIFIED&lt;/code&gt;may be abbreviated as&lt;code&gt;JUST&lt;/code&gt; the reserved word&lt;code&gt;PICTURE&lt;/code&gt;may be abbreviated as&lt;code&gt;PIC&lt;/code&gt;and the reserved words&lt;code&gt;SYNCRONIZED&lt;/code&gt;and&lt;code&gt;SYNCHRONISED&lt;/code&gt;may be abbreviated as&lt;code&gt;SYNC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7e8d5925d56afefbf41db4af3624cf537b533c" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;JUSTIFIED&lt;/code&gt;may be abbreviated to&lt;code&gt;JUST&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264db1af20a5317fd71db02347e28bdde1187254" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;LINES&lt;/code&gt;may be abbreviated as&lt;code&gt;LINE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81e284b20a61cd117dda71d7b0b5574b873973a" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;OF&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3e204e96dfb6d8d3bc246ef6592ce1009835bc" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;ON&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3c815eb249177423e4c35ec279f91b02845472" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;PICTURE&lt;/code&gt;may be abbreviated as&lt;code&gt;PIC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66315d549b6b75b9010fa51296d0b9b7280ad8cb" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;PICTURE&lt;/code&gt;may be abbreviated as&lt;code&gt;PIC&lt;/code&gt; Most programmers prefer to use the latter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2abe6260a3f846f135aabaf266ab41377d3b6c2" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;PICTURE&lt;/code&gt;may be abbreviated to&lt;code&gt;PIC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3c2b1bb88eefd805cacb0fd9ad241a0e72b6ae" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;PRINTING&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ed0dff772266b2a7838f50769c98b6b8d7b2b0" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;RIGHT&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce0a3df3f59cca78490e53281137a55d3a4ceba" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;THEN&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3f7290c63532efbb123869a9b7d190901112dc" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;TO&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfdd6cc9db86dfe74b17a1d27df190601523540" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;WHEN&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec23324f73e7b37964b9f68000abbd71339e84ed" translate="yes" xml:space="preserve">
          <source>The reserved word&lt;code&gt;WITH&lt;/code&gt;is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this word has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217788d44bf9bf32005536ad90688cf9607ce2e5" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ADVANCING&lt;/code&gt;&lt;code&gt;AT&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;LINE&lt;/code&gt;&lt;code&gt;LINES&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c42c603962fc46853b3e12ad08854910c18e265" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AFTER&lt;/code&gt;&lt;code&gt;FOR&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;&lt;code&gt;PROCEDURE&lt;/code&gt;and&lt;code&gt;STANDARD&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c0983c172bc4f03d88d8ce613ed5cb9bd1e7a0" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AFTER&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;NUMBER&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07c752da5ab558e7ae6eedd496b3c61810b07c2" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AFTER&lt;/code&gt;&lt;code&gt;LINE&lt;/code&gt;&lt;code&gt;LINES&lt;/code&gt;&lt;code&gt;NUMBER&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5bf88832498f14dc9f56a3358349cca0bd13c9" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ARE&lt;/code&gt;&lt;code&gt;AT&lt;/code&gt;&lt;code&gt;CHARACTERS&lt;/code&gt;&lt;code&gt;RECORD&lt;/code&gt;clause only),&lt;code&gt;CONTAINS&lt;/code&gt;&lt;code&gt;FROM&lt;/code&gt;&lt;code&gt;IN&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cfeb1074c083ffda256a0d421550f5dae6e511" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ARE&lt;/code&gt;&lt;code&gt;CHARACTERS&lt;/code&gt;and&lt;code&gt;IS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c37ce00ea9c05bece6a4ca21771f2b3e53f340c" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ARE&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;NUMBER&lt;/code&gt;and&lt;code&gt;NUMBERS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a3775ff8d9adad584414cc1e33154ad2deae0f" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ARE&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;SET&lt;/code&gt;and&lt;code&gt;TO&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f009180ccf35cc3312f7552fba1f9201e6bad83" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ARE&lt;/code&gt;and&lt;code&gt;IS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd9cfccfe59ac032a4c3d895b4f76170861d6ca" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AREA&lt;/code&gt;and&lt;code&gt;FOR&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77cfe09bcf892914f40f449284f63147a642acb" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AREAS&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;MODE&lt;/code&gt;&lt;code&gt;OTHER&lt;/code&gt;&lt;code&gt;SEQUENCE&lt;/code&gt;&lt;code&gt;TO&lt;/code&gt;&lt;code&gt;USING&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2bcf331f196469c42b66dae2de8665b60cfa14" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AS&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;and&lt;code&gt;OF&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9076bcf1d1211ab30243146d550c46ed0038146b" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AS&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;and&lt;code&gt;PROGRAM&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c228706b237d29e79fa0bcafe322b9c4e182c142" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AT&lt;/code&gt;&lt;code&gt;RECORD&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a759a8dcdb4e8314cc15a09cabcb219fe3c349f4" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;AT&lt;/code&gt;and&lt;code&gt;RECORD&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e475f147ed1e83ee9f1ccb77d66e81f2e94c585" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BACKGROUND-COLOR&lt;/code&gt;and&lt;code&gt;BACKGROUND-COLOUR&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747e01b2de5427a080fb99635e9fe9920094d11f" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BINARY&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;MODE&lt;/code&gt;and&lt;code&gt;RECORD&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9093c50165dfb5c768f607fa7ff6ffa25d80b7" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;(INDEXED),&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;and&lt;code&gt;TIMES&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea031fc14b82ac74e1d1b8ade5f4efaccff4dc34" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;&lt;code&gt;CHARACTER&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;&lt;code&gt;RIGHT&lt;/code&gt;(JUSTIFIED),&lt;code&gt;TIMES&lt;/code&gt;and&lt;code&gt;WHEN&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8980974cb5c6032e3cf2ded3ab8a46b2923d69b" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;&lt;code&gt;CHARACTER&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;and&lt;code&gt;WHEN&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49902de2331d72d3a8675d04f9ffa1d7696755df" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;&lt;code&gt;IN&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55e1c8f741952dba5dc03ffd000192a6f7cdfbd" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;and&lt;code&gt;WHEN&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2791d84b4a2877ace849ef4fbcea32b0c981d7f" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef946ac2a767a4466297c00b4bdf8498d1a19198" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121a821fce372edb15324b26c6965b663e866345" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;BY&lt;/code&gt;and&lt;code&gt;IS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words have no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da0e2b110c1806b76f18ed080e7ca40d5f26d3a" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;CHARACTER&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;PROGRAM&lt;/code&gt;and&lt;code&gt;SEQUENCE&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb28fd1e24dea2c71fcf2b3e88dc7d4a43c194f4" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;CHARACTER&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;RIGHT&lt;/code&gt;(JUSTIFIED) and&lt;code&gt;WHEN&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee2182bd8c1e7f50b0ccd2f42ba324e71a264d5" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;CHARACTER&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;and&lt;code&gt;MODE&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3bc478d1e355bf3ab6ba0de7244b15862cd9fe" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;CHARACTER&lt;/code&gt;&lt;code&gt;SEPARATE&lt;/code&gt;clause),&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;NUMBER&lt;/code&gt;&lt;code&gt;RIGHT&lt;/code&gt;&lt;code&gt;TIMES&lt;/code&gt;and&lt;code&gt;WHEN&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22fa88959a3907b13cb273a4f8429649c31cebb" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;CHARACTER&lt;/code&gt;and&lt;code&gt;IS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def1ff523fd51f7d9183bb51ec1b663e47416f9b" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;COLS&lt;/code&gt;and&lt;code&gt;COLUMNS&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf22ac93b9d8f37676ada56851eb14fd4e90098" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;COLUMN&lt;/code&gt;&lt;code&gt;COL&lt;/code&gt;and&lt;code&gt;POSITION&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83123f149cf2d394d6eccf94957c552059ff5be" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;COLUMN&lt;/code&gt;and&lt;code&gt;POSITION&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdf4a9b5468e7da23cb5632dd26a5556e83f326" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;DATA&lt;/code&gt;&lt;code&gt;OF&lt;/code&gt;&lt;code&gt;THEN&lt;/code&gt;&lt;code&gt;TO&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31aa0e6c9aa8073462d0c17ac99e626ccdf30961" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;END-OF-PAGE&lt;/code&gt;and&lt;code&gt;EOP&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4a7a8f156a33519f8c6a8d94d8ff390dd3b9e4" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;EXCEPTION&lt;/code&gt;and&lt;code&gt;OVERFLOW&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f5ca5dc9de6bc88eb6502a77a382cf6f9c772e" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;FOR&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b68a524b4327abe1e16add708d510f04477c750" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;FOREGROUND-COLOR&lt;/code&gt;and&lt;code&gt;FOREGROUND-COLOUR&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d96e1e2fcae456d83f42a28017c24ad3073dd7" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;FORMAT&lt;/code&gt;and&lt;code&gt;IS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcd04750e945ea9fe53e5fccfa7045db86ab3b5" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;GIVING&lt;/code&gt;and&lt;code&gt;RETURNING&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5d24691c64a31614144e778020ae3bc7ef75c1" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IN&lt;/code&gt;&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;&lt;code&gt;ORDER&lt;/code&gt;&lt;code&gt;SEQUENCE&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6f6c1b944f9ec59e42e3058e91ab2edb4de1b0" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;INITIALIZE&lt;/code&gt;and&lt;code&gt;INITIALISE&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18c4fb7672225318a3b76441b84f7730663698c" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;INITIALIZED&lt;/code&gt;and&lt;code&gt;INITIALISED&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c59cb216ee8b22c17cee91294f36244a333bd9" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;(on the&lt;code&gt;INVALID&lt;/code&gt;and&lt;code&gt;NOT INVALID&lt;/code&gt;clauses),&lt;code&gt;RECORD&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73548e9d92385f6045309a1ea7bbd28ae2ebec6f" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;code&gt;THAN&lt;/code&gt;and&lt;code&gt;TO&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5d8adacab08c6b94e8f5dbb4e1f5c1e08b5c3b" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;KEY&lt;/code&gt;and&lt;code&gt;MODE&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc6ebccf5e14db87691e846ad1402be2835b93a" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;NUMBER&lt;/code&gt;&lt;code&gt;OF&lt;/code&gt;&lt;code&gt;ON&lt;/code&gt;&lt;code&gt;RIGHT&lt;/code&gt;&lt;code&gt;TIMES&lt;/code&gt;and&lt;code&gt;WHEN&lt;/code&gt;(BLANK) are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950b80e86a33eda38e14d94619198e5f357ad989" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;NUMBER&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74082eec5b1b669da009b1769870533abf2fdcc" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;SET&lt;/code&gt;&lt;code&gt;TO&lt;/code&gt;and&lt;code&gt;WHEN&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1583b458da006967100f0a5e1f25939f9d7f8e" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;&lt;code&gt;THAN&lt;/code&gt;and&lt;code&gt;TO&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787a1f39e7e8118c48f75bb7721c39223b3df62e" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865eaa284a6959ff60f91302d3a3b8bb11cb5eae" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;IS&lt;/code&gt;and&lt;code&gt;STATUS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5059414640fce91836cfe2313b86d62ea12fac9" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;KEY&lt;/code&gt;and&lt;code&gt;RECORD&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a473e2d52f9f179700509e9270cb9c32563f442a" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;KEY&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7c704fef263efcd8ba7665c6aa5d10ccb80dbf" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;LINE&lt;/code&gt;and&lt;code&gt;LINES&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7cb161ea743dbc9ec05bafbe45e403a6a15010" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;LINES&lt;/code&gt;and&lt;code&gt;LINE-NUMBER&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5453c0e958ae6942812911340bd4b1188063df45" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;OF&lt;/code&gt;and&lt;code&gt;ON&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66130fc8354f559cde2f7870cb62a76aaedd439" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ON&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e4af4223d04a3c53b3051945e39f04296ef607" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;ORGANIZATION&lt;/code&gt;and&lt;code&gt;ORGANISATION&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b8b7d954b34788c4a288c43d00051b91db613d" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;OTHER&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97c7adbd26467babc094ca795ceb5a5f441341a" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;PROCEED&lt;/code&gt;and&lt;code&gt;TO&lt;/code&gt;(the one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b09493a4e3223cde2d73a4aa2046186102ed696" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;RECORD&lt;/code&gt;and&lt;code&gt;RECORDS&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5b352477878b2a127853189c2c69d598faca48" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;REEL&lt;/code&gt;and&lt;code&gt;UNIT&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344e343a4ce096e89a048d6b57e38cc6e452aeee" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;RETURNING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe58545b04baef21716d5dd81d26f52a1c5d981" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;STATUS&lt;/code&gt;and&lt;code&gt;WITH&lt;/code&gt;are optional and may be included, or not, at the discretion of the programmer. The presence or absence of these words has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9cb4f8b0d29139894157a1128817da73ef50b0" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;SYNCRONIZED&lt;/code&gt;and &quot;&lt;code&gt;SYNCHRONISED&lt;/code&gt;&quot; are interchangeable. Both may be abbreviated as&lt;code&gt;SYNC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17eeee4ae12e65f15dc83acd04c6e0492dec3fe0" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;SYNCRONIZED&lt;/code&gt;and&lt;code&gt;SYNCHRONISED&lt;/code&gt;are interchangeable, and may be abbreviated as&lt;code&gt;SYNC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab847121522518d028a0db7be540fe628be704f5" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;SYNCRONIZED&lt;/code&gt;and&lt;code&gt;SYNCHRONISED&lt;/code&gt;are interchangeable. Both may be abbreviated as&lt;code&gt;SYNC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9d7fe9887c22aabea0dcfa464d2aef5cc95a90" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;SYNCRONIZED&lt;/code&gt;and&lt;code&gt;SYNCRONIZED&lt;/code&gt;are interchangeable. Both may be abbreviated to&lt;code&gt;SYNC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bb1e8549e1d115a92955cd1b9f7f99872f5db6" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;THRU&lt;/code&gt;and&lt;code&gt;THROUGH&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f3935d9af80d96869bbb8c80afb7b8a5ea648b" translate="yes" xml:space="preserve">
          <source>The reserved words&lt;code&gt;TIMEOUT&lt;/code&gt;and&lt;code&gt;TIME-OUT&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feada1a04ef204d72d695ca0d4382a8923e3cb4e" translate="yes" xml:space="preserve">
          <source>The result obtained when the value of &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8fb5d1375898d0c010398bd8c50de678eae6d7" translate="yes" xml:space="preserve">
          <source>The result will be an angle, expressed in radians. You may convert this to an angle measured in degrees, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29b9be352b778b9595757b348ecad6fb77e195a" translate="yes" xml:space="preserve">
          <source>The results I saw here were consistent with those that would have been obtained from most of the COBOL implementations I have ever worked with &amp;mdash;&lt;code&gt;USAGE COMP&lt;/code&gt;has a significant performance advantage over&lt;code&gt;USAGE DISPLAY&lt;/code&gt;and&lt;code&gt;USAGE BINARY-LONG&lt;/code&gt;(and presumably the other&lt;code&gt;BINARY-&lt;i&gt;xxx&lt;/i&gt;&lt;/code&gt;usages as well) perform identically, within the measurement tolerances of the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9638fcad6304ebd59961fed1aa6d282fe36d498" translate="yes" xml:space="preserve">
          <source>The return code of the operation is returned both in the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d65980d8539355319e352af7d45f41991d5e8f8" translate="yes" xml:space="preserve">
          <source>The return code of the operation, which will be either 0=Success or 128=failure, is returned in the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). The directory change remains in effect until the program terminates (in which the original current directory at the time the program was started will be automatically restored) or until another&lt;code&gt;CBL_CHANGE_DIR&lt;/code&gt;or a&lt;code&gt;C$CHDIR&lt;/code&gt;built-in system subroutine (see &lt;a href=&quot;#C_0024CHDIR&quot;&gt;C$CHDIR&lt;/a&gt;) is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b974d02798f2d59f00dfebd3abb9ccd3aff5797" translate="yes" xml:space="preserve">
          <source>The returned location data will be in binary form, and will be based upon starting values of 0, meaning that if the cursor is located at line 15, column 12 at the time this routine is called, a value of (14,11) will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62a1482a85be75c0deddd39abb5cfe11612859c" translate="yes" xml:space="preserve">
          <source>The returned result is the userid that was used to login to the system with, and not any actual first and/or last name of the user in question (unless, of course, that is the information used as a logon id).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fde28a33376fc59f7a777528bea4c8ad59cdcd4" translate="yes" xml:space="preserve">
          <source>The returned size data will be in binary form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c462dca12a69539b185951c9416b94a08eb2ae" translate="yes" xml:space="preserve">
          <source>The right answer is 8 &amp;mdash; the value of data item&lt;code&gt;C-D&lt;/code&gt;plus 1! Hopefully, that was the intended result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4e16a27b5db954b2ad9a21047a37ec55d52721" translate="yes" xml:space="preserve">
          <source>The rules for where and when periods are needed in the procedure division are somewhat complicated. See &lt;a href=&quot;#Use-of-Periods&quot;&gt;Use of Periods&lt;/a&gt;, for the details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec512cbfd1680d38ff9813cde865e5737c6affbc" translate="yes" xml:space="preserve">
          <source>The runtime system will not allow two records to be written to an indexed file with the same primary key value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f007d2d1c45d02f72df627c0a438cfc3acd8f6ec" translate="yes" xml:space="preserve">
          <source>The sample program just discussed presents a great opportunity to show what can happen if you don&amp;rsquo;t define the control hierarchy of a report properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa4c102b6b25f33f1a6fb989d0cebcd0cb11257" translate="yes" xml:space="preserve">
          <source>The screen line number upon which the data item containing this clause along with any subordinate data items will be displayed may be stated on an absolute basis (i.e.&lt;code&gt;LINE 5&lt;/code&gt; or on a relative basis based upon the previously-displayed line (i.e.&lt;code&gt;LINE PLUS 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4001d8c0c485280b7ee5d5a7f782ad13aea73e64" translate="yes" xml:space="preserve">
          <source>The search index will be incremented by 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4724231d08f9f6027485fcfb8f80c1542c4bcda" translate="yes" xml:space="preserve">
          <source>The searching process is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824dcda7ff4e81657aa426694fcd0f4e9a228d8d" translate="yes" xml:space="preserve">
          <source>The searching process will be controlled through a &amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6190e0acb7157a871178f4472238a8ff7e269613" translate="yes" xml:space="preserve">
          <source>The second argument is required, but is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa1dcd3d2714ea5d22b88c1ff41cb27027d9c17" translate="yes" xml:space="preserve">
          <source>The second argument is specified as a keyword, not a quoted string or identifier. If no second argument is specified,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991ff78e33fd343cbc131378753523807e205f3b" translate="yes" xml:space="preserve">
          <source>The second can perform an extremely fast search against a table sorted by and searched against a key field contained in each table entry. The algorithm used for such a search is a binary search (also known as a half-interval search). This algorithm ensures that only a small number of entries in the table need to be checked in order to find a desired entry or to determine that the desired entry doesn&amp;rsquo;t exist in the table. The larger the table, the more effective this search becomes. For example, a binary search of a table containing 32,768 entries will be able to locate a particular entry or determine the entry doesn&amp;rsquo;t exist by looking at no more than fifteen (15) entries! The algorithm is explained in detail in the documentation of the&lt;code&gt;SEARCH ALL&lt;/code&gt;statement (see &lt;a href=&quot;#SEARCH-ALL&quot;&gt;SEARCH ALL&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb9c9d41a3d39430993311414d7d9cf0e0510be" translate="yes" xml:space="preserve">
          <source>The sequence in which characters are defined in this clause specifies the relative order those characters should have when comparisons are made using this alphabet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8dcfa1e795cff94d1d3dee25d29216f863624c7" translate="yes" xml:space="preserve">
          <source>The sequence in which files are defined via&lt;code&gt;FD&lt;/code&gt;or&lt;code&gt;SD&lt;/code&gt; as compared to the sequence in which their&lt;code&gt;SELECT&lt;/code&gt;statements were coded, is irrelevant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615400d851badf13acaa6fbc3d0cdcb381f678fb" translate="yes" xml:space="preserve">
          <source>The sequence in which the characters that are acceptable to a computer are ordered for purposes of all types of sorting, merging, comparing, and processing. GnuCOBOL programs may utilize standard character-set collating sequences (such as that defined by the ASCII or EBCDIC character sets) or programmer-defined custom sequences as specified in the OBJECT-COMPUTER paragraph (section 4.1.2) and defined in the SPECIAL-NAMES paragraph (section 4.1.4).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10b5752fcb49f1a44f6466591bafe9dc8ea72e4" translate="yes" xml:space="preserve">
          <source>The sign indicator will have a value of a hexadecimal A through F. Traditional packed decimal encoding rules call for hexadecimal values of F, A, C or E (&quot;FACE&quot;) in the sign nibble to indicate a positive value and B or D to represent a negative value (hexadecimal digits 0-9 are undefined). Testing with a Windows MinGW/GnuCOBOL implementation shows that &amp;ndash; in fact &amp;ndash; hex digit D represents a negative number and any other hexadecimal digit denotes a positive number. Therefore, a&lt;code&gt;PIC S9(3) COMP-3&lt;/code&gt;packed-decimal field with a value of -15 would be stored internally as a hexadecimal 015D in GnuCOBOL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ef59533f8e0d951176f7d13fe14c396c570406" translate="yes" xml:space="preserve">
          <source>The simplest mode of compilation is to generate a single executable file from one or more GnuCOBOL source files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06d322a85ec4f88e96f229c85dabcfd80670afa" translate="yes" xml:space="preserve">
          <source>The size is returned in the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5cbc61acf3ab658c2be056d6537b2e3a7de93a8" translate="yes" xml:space="preserve">
          <source>The sort will take place by arranging the data records in the sequence defined by the&lt;code&gt;KEY&lt;/code&gt;specification(s) on the&lt;code&gt;SORT&lt;/code&gt;statement according to the&lt;code&gt;COLLATING SEQUENCE&lt;/code&gt;specified on the&lt;code&gt;SORT&lt;/code&gt;(if any) or &amp;mdash; if none was defined &amp;mdash; the&lt;code&gt;PROGRAM COLLATING SEQUENCE&lt;/code&gt;(see &lt;a href=&quot;#OBJECT_002dCOMPUTER&quot;&gt;OBJECT-COMPUTER&lt;/a&gt;). Keys may be any supported data type and&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) except for level-78 or level-88 data items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9808d84abad759680b68bd010719955ae263691a" translate="yes" xml:space="preserve">
          <source>The sort will take place by rearranging the data in &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1d1b2d3883f04171cb33e60a131db0b566c28b" translate="yes" xml:space="preserve">
          <source>The sorting process works in three stages &amp;mdash; the Input Stage, the Sort Stage and the Output Stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667f60862fe01277f1e899e71d5046bfd3f9cac8" translate="yes" xml:space="preserve">
          <source>The source string will be parsed into sub strings starting from the current character pointer position. Sub strings are identified by using the various delimiter strings specified on the&lt;code&gt;DELIMITED BY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6e8ba43aaa6b9d79638e88ece4448a79a0204c" translate="yes" xml:space="preserve">
          <source>The specific model of CPU within the family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a85c0306c631b6553637c54b39168d0a4268b22" translate="yes" xml:space="preserve">
          <source>The specified &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee03822080f81e045ddb463de6c1d48c2bb2e521" translate="yes" xml:space="preserve">
          <source>The specified identifier may be defined anywhere in the data division, but if it is defined in the report section it may only be&lt;code&gt;PAGE-COUNTER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a306ae988541f7cf2c116f9010590c1721b3f7" translate="yes" xml:space="preserve">
          <source>The specified report name(s) must be currently initiated (via&lt;code&gt;INITIATE&lt;/code&gt;(see &lt;a href=&quot;#INITIATE&quot;&gt;INITIATE&lt;/a&gt;)) and cannot yet have been terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8812c9a82b3da3c48d3805b5ed71ad865285aa" translate="yes" xml:space="preserve">
          <source>The standard for the COBOL language shows the various&lt;code&gt;END-verb&lt;/code&gt;clauses are optional because using a period as a scope-terminator remains legal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba078e79b29c698c60cd7b53b9fa619abf957232" translate="yes" xml:space="preserve">
          <source>The starting point of the target range will be the first character following the sub string identified by the&lt;code&gt;AFTER&lt;/code&gt;specification. The ending point will be the last character immediately preceding the sub string identified by the&lt;code&gt;BEFORE&lt;/code&gt;specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95dc316f12f7f236a4ba1690e74d9587f98a871" translate="yes" xml:space="preserve">
          <source>The statements within the perform scope will be executed. If a&lt;code&gt;GO TO&lt;/code&gt;executed within the perform scope transfers control to a point outside the perform scope, processing of the&lt;code&gt;PERFORM&lt;/code&gt;will halt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139fc7ef0a40bd92bfcd2d88d3f34c2e17f451c7" translate="yes" xml:space="preserve">
          <source>The structure of DEBUG-ITEM will be as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f85f12a23cf9edf79a153dbc7d93efddec2977" translate="yes" xml:space="preserve">
          <source>The subprogram may modify any argument that is specified as &quot;BY REFERENCE&quot; on it&amp;rsquo;s PROCEDURE DIVISION header. Whether the calling program can actually &quot;see&quot; any modifications depends upon how the calling program passed the argument to the subprogram. See &lt;a href=&quot;#CALL&quot;&gt;CALL&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545b54740d92d44681f482fed13d857aa0151c7e" translate="yes" xml:space="preserve">
          <source>The success or failure of the subroutine will be reported back in the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;), with a value of -1 indicating an invalid argument and a value of 0 indicating success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6312d174cb1a208e1b24d16a40d1aa4bf31bf71d" translate="yes" xml:space="preserve">
          <source>The sum of the previous three specifications should be the total number of possible lines available on one printed page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec9ebe07426b18a7e084552c4c8c5dba97c28f6" translate="yes" xml:space="preserve">
          <source>The supported intrinsic functions are listed in the following sections, along with their syntax and usage notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbfc3e6d98e53601e1cf6840306464c5650e60a" translate="yes" xml:space="preserve">
          <source>The symbol&lt;code&gt;+&lt;/code&gt;may be used in lieu of the word&lt;code&gt;PLUS&lt;/code&gt; if desired; if symbol&lt;code&gt;+&lt;/code&gt;is used, however, there must be at least one space separating it from &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f10093287391718b87d9c366858ea781b974ae3" translate="yes" xml:space="preserve">
          <source>The symbol&lt;code&gt;+&lt;/code&gt;may be used in lieu of the word&lt;code&gt;PLUS&lt;/code&gt; if desired; if&lt;code&gt;+&lt;/code&gt;is used, however, there must be at least one space separating it from &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f5bd814108b4be4e3a1c466f307a9a948cacdd" translate="yes" xml:space="preserve">
          <source>The syntactical rules of COBOL, allowing a dash (-) character in data item names, can lead to some ambiguity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f6711eb1b6906396ef7eca3f14053f27ad6824" translate="yes" xml:space="preserve">
          <source>The term &amp;rsquo;available screen area&amp;rsquo; is a nebulous one in those environments where command-line shell sessions are invoked within a graphical user-interface environment, as will be the case on Windows, OSX and most Unix/Linux systems &amp;mdash; these environments allow command-line session windows to exist with a variable number of available screen rows and columns. When you are designing GnuCOBOL screens, you need to do so with an awareness of the logical screen row/column geometry the program will be executing within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c939ace93f43f438f104d404c243c8cd0f2d8b" translate="yes" xml:space="preserve">
          <source>The terms&lt;code&gt;NEXT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e94fb896472de7a3fbe1be7b850705405bec72e" translate="yes" xml:space="preserve">
          <source>The terms&lt;code&gt;RECORD IS&lt;/code&gt;and&lt;code&gt;RECORDS ARE&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b887b6066ec73f92c1f8b1f0ef8b912d6855dd" translate="yes" xml:space="preserve">
          <source>The terms&lt;code&gt;REPORT IS&lt;/code&gt;and&lt;code&gt;REPORTS ARE&lt;/code&gt;are interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a443b714a1cd4acee51e92d371ef79e0011b6b0f" translate="yes" xml:space="preserve">
          <source>The third and fourth arguments would specify a locking mode and device specification, respectively, but they&amp;rsquo;re not implemented in GnuCOBOL (currently, at least) &amp;mdash; just specify each as 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7aa57596e1ad5fdc0c5bb02cf009bb98a05193c" translate="yes" xml:space="preserve">
          <source>The third argument &amp;mdash; &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5440370705cf9285acb9c4a43b3b36096e3e2b06" translate="yes" xml:space="preserve">
          <source>The third argument is different, however. Since it&amp;rsquo;s not an array you have the choice of passing it either&lt;code&gt;BY REFERENCE&lt;/code&gt;or&lt;code&gt;BY VALUE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f88e5e9f0a027e9c74efec7922dca12fef008e8" translate="yes" xml:space="preserve">
          <source>The third argument is required, but is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89f9a9a86776c4eac37f04886417df860dfe0de" translate="yes" xml:space="preserve">
          <source>The three code snippets below are all equivalent &amp;mdash; they show different ways in which a GnuCOBOL program may be coded to pass a return code value of 16 back to the operating system and then halt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e40f071fd522dda47ac2c111892261b6f8638f" translate="yes" xml:space="preserve">
          <source>The three optional clauses control the operation of this statement as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f4641d946d58959cda366be760b648bff0b0fb" translate="yes" xml:space="preserve">
          <source>The three ways arguments are passed are as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104337c349843eeb9686cf47a1020180af1564d8" translate="yes" xml:space="preserve">
          <source>The time (to one-one-hundredth of a second) will be retrieved before and after each test and the difference between the two is displayed. This is why the computations were done so many times &amp;mdash; it was to make sure the timing was &quot;measurable&quot; with only a 1/100 second &quot;stopwatch&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3faedfc92a5b0d48e71690a39930313396d54d" translate="yes" xml:space="preserve">
          <source>The total allocated size of the subject data item must be the same as the total allocated size of the object data item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555be825eca1f3c58de54b0a0596e3027b74d991" translate="yes" xml:space="preserve">
          <source>The two arguments will be compared, character by character, against each other until their relationship to each other can be determined. The comparison is made according to the cultural rules in effect for the specified &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed84bf1b1f991d87dc413785d68fae633960f99" translate="yes" xml:space="preserve">
          <source>The two&lt;code&gt;END PROGRAM&lt;/code&gt;markers for PROG3 and PROG2 (note their sequence) mean that PROG4 is nested within PROG1 only. It will not have access to any&lt;code&gt;GLOBAL&lt;/code&gt;resources defined within either PROG2 or PROG3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb9322df5d41445bc87823410cef88176cbd10f" translate="yes" xml:space="preserve">
          <source>The typical usage when &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd775a26fcdc4d78500f772b3a44e0bd5722846" translate="yes" xml:space="preserve">
          <source>The typical use of a&lt;code&gt;USE FOR DEBUGGING&lt;/code&gt;declarative procedure is to display the&lt;code&gt;DEBUG-ITEM&lt;/code&gt;special register , which will be implicitly and automatically created in your program for you if&lt;code&gt;WITH DEBUGGING MODE&lt;/code&gt;is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998bdf017aa85c7b33b02f348d230bd37c6d2fb3" translate="yes" xml:space="preserve">
          <source>The unary &quot;minus&quot; (-) operator returns the arithmetic negation of its single argument, effectively returning as its value the product of its argument and -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e3d69342aa5da92c86a3acc32af4e9d3349d60" translate="yes" xml:space="preserve">
          <source>The unary &quot;plus&quot; (+) operator returns the value of its single argument, effectively returning as its value the product of its argument and +1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213865535fcf6e1b23fd2f1a6ba0adc03cfd8da4" translate="yes" xml:space="preserve">
          <source>The unusable areas of a page (if any) will appear above and below that usable area. You don&amp;rsquo;t specify the unusable area in the&lt;code&gt;RD&lt;/code&gt; but rather using a&lt;code&gt;LINAGE&lt;/code&gt;(see &lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;File/Sort-Description&lt;/a&gt;) clause in the&lt;code&gt;FD&lt;/code&gt;of the file the report is &quot;attached&quot; to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d728dcc28b2015d1af55d639e193140525f07fd" translate="yes" xml:space="preserve">
          <source>The upcoming sections deal the issues pertaining to calling C language programs from GnuCOBOL programs, and vice versa. Two additional sections provide samples illustrating specifics as to how those issues are overcome in actual program code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48182ac8d94b781a15796c9be5330a2f17bd6774" translate="yes" xml:space="preserve">
          <source>The usage of this system routine is described by the following example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1caa570ab1b526407de7fc43a65bbef8b9f751f2" translate="yes" xml:space="preserve">
          <source>The use of comma characters can cause confusion to a COBOL compiler if the&lt;code&gt;DECIMAL POINT IS COMMA&lt;/code&gt;clause is used in the&lt;code&gt;SPECIAL-NAMES&lt;/code&gt;(see &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;) paragraph, as might be the case in Europe. The following statement, which calls a subroutine passing it two arguments (the numeric constants 1 and 2):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca4853e92a131b4868b4355165c53f60714cb56" translate="yes" xml:space="preserve">
          <source>The valid &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5c189fa9dfb922c1e3ce220797958d7cf0e6cd" translate="yes" xml:space="preserve">
          <source>The value of &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f21637317c9941707a99e206a4efa414751c109" translate="yes" xml:space="preserve">
          <source>The value of a data item defined as a constant cannot be changed at run-time. In fact, it is not syntactically acceptable to use such a data item as the destination field of any procedure division statement that stores a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c48ee9dbaa9669c26cd54f59e8cbd9d5a86d69" translate="yes" xml:space="preserve">
          <source>The value of the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0381a06034dbd15fe6d05cc64bdf39bf79e9434e" translate="yes" xml:space="preserve">
          <source>The value of the current character pointer exceeds the size of &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec9e22ce3d27fc6518feccd4487729146ba3795" translate="yes" xml:space="preserve">
          <source>The value of the data item found on the user-defined functions&lt;code&gt;PROCEDURE DIVISION RETURNING&lt;/code&gt;(see &lt;a href=&quot;#PROCEDURE-DIVISION-RETURNING&quot;&gt;PROCEDURE DIVISION RETURNING&lt;/a&gt;) clause is moved to the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76dc04f0a323d93c0b2f7421c8f1221bf988f13" translate="yes" xml:space="preserve">
          <source>The value of the left argument is raised to the power indicated by the right argument. Non-integer powers are allowed. The&lt;code&gt;^&lt;/code&gt;and&lt;code&gt;**&lt;/code&gt;operators are both supported to provide compatibility with programs written for other COBOL implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439450828546b590d25c9d71e27bf9f7c611ac4a" translate="yes" xml:space="preserve">
          <source>The value of this variable (an integer) will be used to define how much memory will be allocated for use in sorting. If the value is 1048576 or greater, that value will be used &quot;as is&quot; as the amount of memory (in bytes) to allocate. If the value is less than 1048576, the value will specify how many MB of memory will be allocated. The default sort memory amount is 128 MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34affb891b61cbddde448edfca6af67e1f4955c9" translate="yes" xml:space="preserve">
          <source>The value returned by this function is not the number of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1da3a9dcaeaf45fa67bf52835cd1fa4fa8e82a" translate="yes" xml:space="preserve">
          <source>The value specified for &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f383b87998162435f500a181f92b740df202c7" translate="yes" xml:space="preserve">
          <source>The value specified for the &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7112023f4eda2834589231f319245427d5ef44" translate="yes" xml:space="preserve">
          <source>The value&lt;code&gt;0000012,345&lt;/code&gt;(a very disappointing one for my retirement plans, but a good thousands separator demo) will be displayed. Notice how, since the first comma wasn&amp;rsquo;t needed due to the meagre amount I won, it behaved like another &quot;9&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73be24ae6117b8d0ae94836e9b866e463f648f8a" translate="yes" xml:space="preserve">
          <source>The variable&lt;code&gt;TMPDIR&lt;/code&gt;is checked for a valid path first; if that isn&amp;rsquo;t set, then&lt;code&gt;TMP&lt;/code&gt;is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18424cf0313c201649fc6da5bbea0d7f4dd6d713" translate="yes" xml:space="preserve">
          <source>The various 01-level record descriptions for a file description implicitly share that one common record buffer (thus, they provide different ways to view the structure of data that can exist within the file). Record buffers can be shared between files by using the&lt;code&gt;SAME RECORD AREA&lt;/code&gt;(see &lt;a href=&quot;#SAME-RECORD-AREA&quot;&gt;SAME RECORD AREA&lt;/a&gt;) clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf934c60fec69876c5f9b8b38898d5ad576da854" translate="yes" xml:space="preserve">
          <source>The various I/O statements your program can execute are capable of imposing limitations on access by other concurrently-executing programs to the file record they just accessed. These limitations are syntactically imposed by placing a lock on the record using a&lt;code&gt;LOCK&lt;/code&gt;clause. Other records in the file remain available, assuming that file-sharing limitations imposed at the time the file was opened didn&amp;rsquo;t prevent access to the entire file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490469a62071f1087e55fe6c9511aba1664cd3d5" translate="yes" xml:space="preserve">
          <source>The various clauses that may be specified within the&lt;code&gt;SPECIAL-NAMES&lt;/code&gt;paragraph may be coded in any order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bb52d351d7d5fca4ff1b3ff295075e79152af9" translate="yes" xml:space="preserve">
          <source>The various report groups that constitute a report may be defined in any order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55382657da207c5e91676142fe20e44381a6ca1d" translate="yes" xml:space="preserve">
          <source>The various report groups will be presentable in the various areas of a page, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb54a09257f6cbae3eb7bf8a4a2ef9a2a0e002f" translate="yes" xml:space="preserve">
          <source>The various sections of the data division each have their own rules as to when the actions described above will occur &amp;mdash; consult the documentation on those sections for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491f3175fd7dcc59775480ee1e303b02bf113c19" translate="yes" xml:space="preserve">
          <source>The various&lt;code&gt;AT&lt;/code&gt;clauses provide a means of positioning the cursor to a specific spot on the screen before the screen is read. One or the other (but not both) may be used, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afd8081866d832cb5c4aeb1232bf6e57d7d3990" translate="yes" xml:space="preserve">
          <source>The very first procedure defined in the procedure division of my programs, assuming no&lt;code&gt;DECLARATIVES&lt;/code&gt;(see &lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVES&lt;/a&gt;) are defined, will be a section named &quot;000-Main&quot;. The declaration of this procedure will immediately follow the procedure division header (or&lt;code&gt;END DECLARATIVES&lt;/code&gt;if&lt;code&gt;DECLARATIVES&lt;/code&gt;are used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5b0113c11c5e6e7f1774c61845e56e269968b5" translate="yes" xml:space="preserve">
          <source>The whole reason you&amp;rsquo;re reading this is that you&amp;rsquo;ve discovered GnuCOBOL &amp;mdash; another implementation of COBOL in addition to those mentioned earlier. The distinguishing characteristic of GnuCOBOL versus those others is that GnuCOBOL is FREE open-source and therefore FREE to obtain and use. It is community-enhanced and community-supported. Later in this document (see &lt;a href=&quot;#So-What-is-GnuCOBOL_003f&quot;&gt;So What is GnuCOBOL?&lt;/a&gt;), you&amp;rsquo;ll begin to learn more about this COBOL implementation&amp;rsquo;s capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f35126902924c039630b43a690af4deeb1c6a0" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;$&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad874df5c0d7bdd06d81264bf074aa958c562a9" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;&amp;gt;&amp;gt;DEFINE&lt;/code&gt;CDF directive is one way to create CDF variables that may be processed by other CDF statements such as&lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt;(see &lt;a href=&quot;#g_t_003e_003eIF&quot;&gt;&amp;gt;&amp;gt;IF&lt;/a&gt;). The&lt;code&gt;&amp;gt;&amp;gt;SET&lt;/code&gt;CDF directive (see &lt;a href=&quot;#g_t_003e_003eSET&quot;&gt;&amp;gt;&amp;gt;SET&lt;/a&gt;) provides another way to create them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d6b338dc92125e1cd80ff780d401a3cf7354c6" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;&amp;gt;&amp;gt;LEAP-SECONDS&lt;/code&gt;CDF directive is syntactically recognized but is otherwise non-functional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b84bee186e52664e27eb880e8b7e559f94bc791" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;symbol stands for&lt;code&gt;NOT EQUAL TO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f4ae13e8cd121ef53e7bc5f21dbee6cab3e916" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;&amp;lt;&lt;i&gt;device-name-1&lt;/i&gt;&amp;gt; IS &amp;lt;&lt;i&gt;mnemonic-name-2&lt;/i&gt;&amp;gt;&lt;/code&gt;clause allows you to specify an alternate name (&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0187e703ae5ba2f069b37e772a3c936095a9b64" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;&amp;lt;&lt;i&gt;feature-name-1&lt;/i&gt;&amp;gt; IS &amp;lt;&lt;i&gt;mnemonic-name-3&lt;/i&gt;&amp;gt;&lt;/code&gt;clause allow for mnemonic names to be assigned to up to the 13 printer channel (i.e. vertical page positioning) position feature names&lt;code&gt;Cnn&lt;/code&gt;(nn=01-12) and&lt;code&gt;CSP&lt;/code&gt; Once a channel position has been assigned a mnemonic name, statements of the form&lt;code&gt;WRITE &amp;lt;&lt;i&gt;record-name&lt;/i&gt;&amp;gt; AFTER ADVANCING &amp;lt;&lt;i&gt;mnemonic-name-3&lt;/i&gt;&amp;gt;&lt;/code&gt;may be coded to write the specified print record at the channel position assigned to &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6183e83e827bd337d60b5965a9cac74231a6c6fe" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;*&lt;/code&gt;operator computes the product of the left and right arguments while the&lt;code&gt;/&lt;/code&gt;operator computes the value of the left argument divided by the value of the right argument. If the right argument has a value of zero, expression evaluation will be prematurely terminated before a value is generated. This may cause program failure at run-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd364d7d8c8c607a4efc6e7148430066ab8061f" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;*&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7830ccd8188504113b1b6ace4e8fd56dbdcc18d6" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;+&lt;/code&gt;operator calculates the sum of the left and right arguments while the&lt;code&gt;-&lt;/code&gt;operator computes the value of the right argument subtracted from that of the left argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bf6f61a6ca3adca728cb6897c6d2eb5098e37a" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;+&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11950c8ee9d577dec354e49f467be427395484f0" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;,&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f6eb4e2cf30c22af6964574a0cab5178b32f61" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;,&lt;/code&gt;symbol serves as a thousands separator. Many times, you&amp;rsquo;ll see large numbers formatted with these symbols &amp;mdash; for example, 123,456,789. This can be accomplished easily by adding thousands separator symbols to a picture string. Thousands separator symbols that aren&amp;rsquo;t needed will behave as if they were&lt;code&gt;9&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b6ad5b302e8803a0d86d6ed563b347b7ee4070" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;-&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bb3c338f879cceffcbdad6b7d7eec146dba3cb" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;.&lt;/code&gt;symbol inserts a decimal point into a numeric field value. When the contents of a numeric data item sending field are moved into a receiving data item whose picture clause contains the&lt;code&gt;.&lt;/code&gt;editing symbol, implied &lt;code&gt;V&lt;/code&gt; or actual decimal point in the sending data item or literal, respectively, will be aligned with the&lt;code&gt;.&lt;/code&gt;symbol in the receiving field. Digits are then transferred from the sending to the receiving field outward from the sending field&amp;rsquo;s &quot;V&quot; or &quot;.&quot;, truncating sending digits if there aren&amp;rsquo;t enough positions in the receiving field. Any digit positions in the receiving field that don&amp;rsquo;t receive digits from the sending field, if any, will be set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19168a5ee555dc16d0d2ad7ad4d086ecc7691bcb" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;.&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c843d417a0b3311b34a8f152585c47eaf7c2fe" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;/&lt;/code&gt;editing symbol inserts one &quot;/&quot; character into the field value for each occurrence in the picture string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d91dbce8a8a736914a0f6cc0506bc4d1409f18" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;0&lt;/code&gt;(zero) editing symbol introduces one &quot;0&quot; character into the field value for each occurrence in the picture string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ace8d5a13ee4849dee30ea1b658a6cac0614381" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ACCEPT screen-data-item&lt;/code&gt;statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) will ignore the Enter key and any other cursor-moving keystrokes that would cause the cursor to move to another screen item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b584b60cb6d9ae964212346341cc94b58fa86c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ACCEPT screen-data-item&lt;/code&gt;statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) will ignore the Enter key and any other cursor-moving keystrokes that would cause the cursor to move to another screen item unless the proper amount of data has been entered into the field. Function keys will still be allowed to terminate the&lt;code&gt;ACCEPT&lt;/code&gt; however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ad6a8a20083b4bf082ceae05997fac190ea2cf" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de8ba76866d7e518a19439c4cac012ddb8eecb0" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ADDRESS OF&lt;/code&gt;clause is optional and may be included, or not, at the discretion of the programmer. The presence or absence of this clause has no effect upon the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5446c7e5886b9840fb7dcbbcd05da85c5a5208a5" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ADVANCING PAGE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4498f52dab2e7d3bab5ff6d1080b0e4d45f5269e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ADVANCING PAGE&lt;/code&gt;clause will introduce the appropriate number of line-terminator character sequences into the file either before the written record &lt;code&gt;AFTER ADVANCING&lt;/code&gt; or after the written record &lt;code&gt;BEFORE ADVANCING&lt;/code&gt; so as to force the printer to automatically advance to a new sheet of paper when the file prints. No formfeed characters will be generated when&lt;code&gt;LINAGE&lt;/code&gt;is specified &amp;mdash; instead, it is assumed that the printer to which the report will be printed will be loaded with special forms that conform to the specifications defined by the&lt;code&gt;LINAGE&lt;/code&gt;clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113780f3598fe6ad7d222098beba0497d7d19df7" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ADVANCING n LINES&lt;/code&gt;clause will introduce the specified number of line-terminator character sequences into the file either before the written record &lt;code&gt;AFTER ADVANCING&lt;/code&gt; or after the written record &lt;code&gt;BEFORE ADVANCING&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2f1f4e9e79133f390b1c06c99890c49d639037" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AFTER EXCEPTION CONDITION&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37222f9b9894b1b8ab613dfc3aa5f2c5c5d3acc3" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ALPHABETIC-LOWER&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;ALPHABETIC-LOWER&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e79072f73708a64c6d3ee83d5862425ea6e76c18" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ALPHABETIC&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;ALPHABETIC&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6cb0bb8e755a0fcc7361723475fb52be01498fd" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ALTERNATE RECORD KEY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa6de75e74386061c9642528f44546cc6636295" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ANY LENGTH&lt;/code&gt;and&lt;code&gt;BASED&lt;/code&gt;(see &lt;a href=&quot;#BASED&quot;&gt;BASED&lt;/a&gt;) clauses cannot be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a814e374231c305c2232e09e99902d62293f3ba2" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AT END-OF-PAGE&lt;/code&gt;clause will be triggered, thus executing &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6ce1818d651d2b94136ed97a65c79d29e072f9" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AT END&lt;/code&gt;clause will &amp;mdash; if present &amp;mdash; cause &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0393cda57f33096d28f9cbdc9c544a68c9bbe63d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AUTHOR&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;AUTHOR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45b2879531446e87a8c07af782a2c4eeb517cb4d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AUTO&lt;/code&gt;(see &lt;a href=&quot;#AUTO&quot;&gt;AUTO&lt;/a&gt;),&lt;code&gt;AUTO-SKIP&lt;/code&gt;(see &lt;a href=&quot;#AUTO_002dSKIP&quot;&gt;AUTO-SKIP&lt;/a&gt;) and&lt;code&gt;AUTOTERMINATE&lt;/code&gt;clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61af5e5aa3b1509793fe5ff3396f6cd89e174709" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AUTO&lt;/code&gt;(see &lt;a href=&quot;#AUTO&quot;&gt;AUTO&lt;/a&gt;),&lt;code&gt;AUTO-SKIP&lt;/code&gt;and&lt;code&gt;AUTOTERMINATE&lt;/code&gt;(see &lt;a href=&quot;#AUTOTERMINATE&quot;&gt;AUTOTERMINATE&lt;/a&gt;) clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e94a42e78168bbfd9801e2ec80e83790ced8d9" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;AUTO&lt;/code&gt;&lt;code&gt;AUTO-SKIP&lt;/code&gt;(see &lt;a href=&quot;#AUTO_002dSKIP&quot;&gt;AUTO-SKIP&lt;/a&gt;) and&lt;code&gt;AUTOTERMINATE&lt;/code&gt;(see &lt;a href=&quot;#AUTOTERMINATE&quot;&gt;AUTOTERMINATE&lt;/a&gt;) clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774cae9d904317aa475264ced89da8aefcd82e5c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;B&lt;/code&gt;editing symbol introduces a blank into the field value for each occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be51ef1ba8ef7a3c7410659f51df4fa7603750e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BASED&lt;/code&gt;and&lt;code&gt;ANY LENGTH&lt;/code&gt;(see &lt;a href=&quot;#ANY-LENGTH&quot;&gt;ANY LENGTH&lt;/a&gt;) clauses cannot be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c1cd03416b46578f9bb5e62b8660c310e86577" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BASED&lt;/code&gt;clause may only be used on level 01 and level 77 data items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a3c74a000ec77499bb01ff90dfe6c76c58092e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BEEP&lt;/code&gt;(see &lt;a href=&quot;#BEEP&quot;&gt;BEEP&lt;/a&gt;) and&lt;code&gt;BELL&lt;/code&gt;clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277c3a35ba2df37a4796b4bb66b76b4b538b4bd4" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BEEP&lt;/code&gt;and&lt;code&gt;BELL&lt;/code&gt;(see &lt;a href=&quot;#BELL&quot;&gt;BELL&lt;/a&gt;) clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fd647d5b95bf53f7914d57acf01d6fea68a8e0" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BLINK&lt;/code&gt;clause modifies the visual appearance of the displayed field by making the field contents blink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7037a0d0b02ce7d5c8350e74293eed24107b90a4" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BLOCK CONTAINS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5ed5bb724d242324742dc617d2e49814f7a091" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BY&lt;/code&gt;value, if any, will be added to &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f5fd7d4da861cb6522f6ae025fd2c5f29b451f" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;BYTE-LENGTH&lt;/code&gt;clause will produce a numeric value for &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d780bdce38ee10bff67739f504c5c499466784f0" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CALL-CONVENTION&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;CALL-CONVENTION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a88965b29ac1cd99b5ea0757714cfe8c08598b8" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CBL_GC_PRINTABLE&lt;/code&gt;subroutine converts the contents of the data-item specified as the first argument to printable characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b76ae1225d3f520743b9aaadcfef13052534670" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CHAINING&lt;/code&gt;clause defines arguments that will be passed to a main program from the operating system. The argument identifiers specified on the CHAINING clause will be populated by character strings comprised of the parameters specified to the program on the command line that executed it, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89643c989fbadd686f30969d7b355fa843ffd3ce" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CHARACTERS&lt;/code&gt;option will match any one single character, regardless of what that character is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f1fe8ebf7d409b29e5b08a4fbd49e1eca46a7f" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CHARACTERS&lt;/code&gt;option will match any one single character. When you use this option, the replacement sub string (see the next item) must be exactly one character in length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f8bcd56fdaa3bac57c072a5964c61e3ed2dd9f" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CLOSE&lt;/code&gt;statement may only be executed against files that have been successfully opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a57f79ec2804a6b10105921d613974c57d65929" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CODE IS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca40b108dd35e39c93c5af263be94381067e4dd9" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CODE-SET&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;CODE-SET&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41bb8fac3624eaa0271c4c0aa6a2ee17657ac09b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;COLLATING SEQUENCE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85481fc304d07d82cc934e70f091c78385e98fc" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;COLUMN&lt;/code&gt;clause provides the means of stating in which column a field should be presented on the console window (screen section) or a report (report section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175cd190b41fc80ea4df4bb248200a1c8ff8cdb2" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;COMPUTE&lt;/code&gt;(see &lt;a href=&quot;#COMPUTE&quot;&gt;COMPUTE&lt;/a&gt;) statement will evaluate the arithmetic expression&lt;code&gt;C-D+1&lt;/code&gt;and then save that result in&lt;code&gt;I&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3911e3adfdaa2bbe4e8616d020e2b8a35a3f8379" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;COMPUTE&lt;/code&gt;statement supports exponentiation (via the &quot;**&quot; operator) &amp;mdash; there is no equivalent basic arithmetic statement. Although you could simulate integral exponentiation (raising a value to the third power, for example) using&lt;code&gt;MULTIPLY&lt;/code&gt;statements, and you may use the&lt;code&gt;SQRT&lt;/code&gt;intrinsic function (see &lt;a href=&quot;#SQRT&quot;&gt;SQRT&lt;/a&gt;) to find a square root, there&amp;rsquo;s just no (easy) way to find the cube-root of a value without using the&lt;code&gt;COMPUTE&lt;/code&gt;statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3e725f59522b6a68d90807acf9b183ae7e83e5" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CONSOLE IS CRT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13943df9a010ee21a0e1dc20b917bf0841a489ff" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CONSTANT&lt;/code&gt;option is valid only in conjunction with &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdbf102102dac19e438486994c84c75c63c763b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CONTINUE&lt;/code&gt;statement has no effect on the execution of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07eaae0937ef203c0fcaa3bf95a5acbe7778f96" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CONTROL FOOTING&lt;/code&gt;and&lt;code&gt;CONTROL HEADING&lt;/code&gt;report groups will be presented in the sequence in which they are listed on the&lt;code&gt;CONTROL&lt;/code&gt;clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c0dd646f541c6bd18382ec8b089c431247e8b4" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CONVERTING&lt;/code&gt;clause replaces one or more individual characters found in the inspect subject with a different character in much the same manner as is possible with the&lt;code&gt;TRANSFORM&lt;/code&gt;statement (see &lt;a href=&quot;#TRANSFORM&quot;&gt;TRANSFORM&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49df5ea745ff62ad65bd43aea46066b417d6d40d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;COPY&lt;/code&gt;statement is case-sensitive on UNIX systems;&lt;code&gt;COPY copybookname&lt;/code&gt;and&lt;code&gt;COPY COPYBOOKNAME&lt;/code&gt;will both fail to locate the&lt;code&gt;CopyBookName&lt;/code&gt;copybook on a UNIX system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bc0fdc4a358eafd424d0ccfdf7a9ebcde76af3" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CR&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce050cf3c94a731009807f59070ead2486b02677" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CSP&lt;/code&gt;positioning option stands for &quot;No Spacing&quot;. Testing on a MinGW build of GnuCOBOL shows that this too results in a formfeed being issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ce9663ca55032650887b597cd1324057b1fd0b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CURRENCY SIGN&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c307c3cf0c73a121956d950b44abf30abecf1053" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;CURSOR IS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2271b3eb123c3688cf0901d0610b063a47ddca" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;Char-Value&lt;/code&gt;item now has the corresponding ASCII character value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a936313969eadd632af6aee6c2db9e4addf907" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DB&lt;/code&gt;symbol is not allowed in conjunction with&lt;code&gt;N&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd7114619e444b69faa393f16b8fed84e0abbcd" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DEBUGGING MODE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78c268a73d48f4d9712b5c7fa1c050f04bc0dc4" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DECIMAL POINT IS COMMA&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d089adf19503d6449f836d251fa7b0324ccb2d21" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DEFINED&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;DEFINED&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26df6759feba62fcc1e3c88aa445d0463da44e0c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DELIMITED BY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b0711ab3f5cb28ead218b890c4a25dd9030b34" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DETAIL&lt;/code&gt;group which is defined for &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea836042af0c782f35a6d6a510ae75acbf1ca1e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;DUPLICATES&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;DUPLICATES&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="509fc67f93f2d125804f51f378a918651c574b9b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EMPTY-CHECK&lt;/code&gt;(see &lt;a href=&quot;#EMPTY_002dCHECK&quot;&gt;EMPTY-CHECK&lt;/a&gt;) and&lt;code&gt;REQUIRED&lt;/code&gt;clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e98090e4aa8fb2280d58a0ac2e1120a406e946a" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EMPTY-CHECK&lt;/code&gt;and&lt;code&gt;REQUIRED&lt;/code&gt;(see &lt;a href=&quot;#REQUIRED&quot;&gt;REQUIRED&lt;/a&gt;) clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bd68d06daf7be5c6da8198ce05d524c22cfbe0" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;END PROGRAM PROG1.&lt;/code&gt;marker, since it is the last line in the source file, is entirely optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9b260d7db1380631913ceb2a744d3fefd1905e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;ESCAPE KEY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544dd74fa17a30b6fc85d83b380157ff69596b27" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EVENT STATUS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134988d8c20d658f601cf8646dfd881cce4dab38" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EXIT FUNCTION&lt;/code&gt;statement cannot be used anywhere within a subroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e1091c7343f48089943eb26511a20d50d99cb1" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EXIT PERFORM&lt;/code&gt;and&lt;code&gt;EXIT PERFORM CYCLE&lt;/code&gt;statements are intended to be used in conjunction with an in-line&lt;code&gt;PERFORM&lt;/code&gt;statement (see &lt;a href=&quot;#Inline-PERFORM&quot;&gt;Inline PERFORM&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01c1b0d19476e733eb3534e23ce4a14aec67415" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EXIT PROGRAM&lt;/code&gt;and&lt;code&gt;EXIT FUNCTION&lt;/code&gt;statements terminate the execution of a subroutine (i.e. a program that has been CALLed by another) or user-defined function, respectively, returning control back to the calling program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8425b476849213fbfef2a94fc5a4ad3a48d8e10" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EXIT PROGRAM&lt;/code&gt;statement is not legal anywhere within a user-defined function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a2465a71618dda981ccd799a2b0b3c4e7bbc44" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;EXTERNAL&lt;/code&gt;clause may only be specified at the 77 or 01 level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8072b9c7154ca05d0ab4ec419831390a88be716c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;Employee&lt;/code&gt;data item consists of two subordinate data items &amp;mdash; an&lt;code&gt;Employee-Name&lt;/code&gt;and an&lt;code&gt;Employment-Dates&lt;/code&gt;data item (presumably there would be a lot of others too, but we don&amp;rsquo;t care about them right now). As the diagram shows, each of those data items are, in turn, broken down into subordinate data items. This hierarchy of data items can get rather&lt;code&gt;deep&lt;/code&gt; and GnuCOBOL, like other COBOL implementations, can handle up to 49 levels of such hierarchical structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567e07d3c5788cdde998cbf8e859c105f4b41d5f" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FD&lt;/code&gt;cannot be followed by record descriptions &amp;mdash; detailed descriptions of data to be printed to the file will be defined in the&lt;code&gt;REPORT SECTION&lt;/code&gt;(see &lt;a href=&quot;#REPORT-SECTION&quot;&gt;REPORT SECTION&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95a133e4e61842d3c2731461b6197f77ed009b7" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FILE STATUS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5943864b274eb18593ebfb1ccd3e3c5ffdf06bab" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FIRST DETAIL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba00f4c3d3f5d98745910d13b18f1320a3535b19" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FOLDCOPYNAME&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;FOLDCOPYNAME&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3177c7f09ccf8999cb2ad6da5d51e3296f999787" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FOOTING&lt;/code&gt;</source>
          <target state="translated">The&lt;code&gt;FOOTING&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="383e4ded74d7d6043dcfb14e417e86a9f3e6dbab" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FOREVER&lt;/code&gt;option will repeatedly execute the code within the perform scope with no conditions defined for termination of the repetition &amp;mdash; it will be up to the programmer to include an&lt;code&gt;EXIT SECTION&lt;/code&gt;statement (see &lt;a href=&quot;#EXIT&quot;&gt;EXIT&lt;/a&gt;) or&lt;code&gt;EXIT PARAGRAPH&lt;/code&gt;statement within the procedure(s) being performed that will break out of the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2eec5ad1d7939ae4fc8c0c49f0800f3bcb8de9" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FROM CRT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eedb190694468a72fd82f01dc1ad08ffacb3174" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FROM&lt;/code&gt;(see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;),&lt;code&gt;TO&lt;/code&gt;(see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;),&lt;code&gt;USING&lt;/code&gt;(see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) and&lt;code&gt;VALUE&lt;/code&gt;clauses are mutually-exclusive in any screen section data item&amp;rsquo;s definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166cf17ccb81cb9bba669bfdec2cdbfcd9a4832b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FROM&lt;/code&gt;(see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;),&lt;code&gt;TO&lt;/code&gt;(see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;),&lt;code&gt;USING&lt;/code&gt;and&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clauses are mutually-exclusive in any screen section data item&amp;rsquo;s definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48589d1340b0732e02ad8af547c45bbd3c36cc7b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FROM&lt;/code&gt;(see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;),&lt;code&gt;TO&lt;/code&gt;&lt;code&gt;USING&lt;/code&gt;(see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) and&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clauses are mutually-exclusive in any screen section data item&amp;rsquo;s definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37d4084d8eca8515b00f852bf4b24d88177b2cb" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FROM&lt;/code&gt;&lt;code&gt;TO&lt;/code&gt;(see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;),&lt;code&gt;USING&lt;/code&gt;(see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) and&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clauses are mutually-exclusive in any screen section data item&amp;rsquo;s definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d383aa980665dd429f59bbace09870dab6c862" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FULL&lt;/code&gt;(see &lt;a href=&quot;#FULL&quot;&gt;FULL&lt;/a&gt;) and&lt;code&gt;LENGTH-CHECK&lt;/code&gt;clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17e257939b7d7cc6b964ff282da230639ac183d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FULL&lt;/code&gt;and&lt;code&gt;LENGTH-CHECK&lt;/code&gt;(see &lt;a href=&quot;#LENGTH_002dCHECK&quot;&gt;LENGTH-CHECK&lt;/a&gt;) clauses are interchangeable, and may not be used together in the same data item description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75388dda41cc5e47895dbdbba470d65968c86f9" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;FULL&lt;/code&gt;clause forces the user to enter data into the field it is specified on (or into all subordinate input-capable fields if specified on a group item) sufficient to fill every character position of the field.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
