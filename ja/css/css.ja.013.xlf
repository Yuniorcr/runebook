<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ansible">
    <body>
      <group id="ansible">
        <trans-unit id="fdc82c81ef2c9de88c42bf83cc524ef1bb2bd376" translate="yes" xml:space="preserve">
          <source>Used value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338ba4167c892c351e950d9ec843fb70a090ed4c" translate="yes" xml:space="preserve">
          <source>Useful fallback techniques</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8e1fdce19e43b8493a08a7ea8abcc6977fcb9e" translate="yes" xml:space="preserve">
          <source>Useless selectors can be written using this pseudo-class. For example, &lt;code&gt;:not(*)&lt;/code&gt; matches any element which is not an element, so the rule will never be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c10bee9125c0df141737398f509396f81c6557" translate="yes" xml:space="preserve">
          <source>User agents are allowed to ignore this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174cf4afccd418afdd4d41f68f94fb37a7e79db4" translate="yes" xml:space="preserve">
          <source>User must explicitly enable this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e778262b045b85687f5795cec2a3638bf5d7b9" translate="yes" xml:space="preserve">
          <source>User origin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44708ce7ee4ff379ddee0449689f38ed33b553c1" translate="yes" xml:space="preserve">
          <source>User stylesheets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094621ebe1e3ff0f531e231f728abff5e95962c3" translate="yes" xml:space="preserve">
          <source>User's preference for text color of active links. Should be used with the default document background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09997ef64f4e9755b9db5819642c56ef86badf4" translate="yes" xml:space="preserve">
          <source>User's preference for the document background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9d44caeb4780a69d925d20b5e62345cc178af1" translate="yes" xml:space="preserve">
          <source>User's preference for the text color of unvisited links. Should be used with the default document background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a58a8144409e7e58f2cf7bad132b8617a26f8f" translate="yes" xml:space="preserve">
          <source>User's preference for the text color of visited links. Should be used with the default document background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd723e43a181e36a7276fa16f7238376bb162a17" translate="yes" xml:space="preserve">
          <source>User's preference for the text color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682f97b5b15a17ba7e1e4136cc6723958796b118" translate="yes" xml:space="preserve">
          <source>User-agent origin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430c9d9d9e793f129ef4613d0668829a9c1190c1" translate="yes" xml:space="preserve">
          <source>User-agent stylesheets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a0985ec5d343ee557dbcdc52619a1c6d31da86" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt; instead of a finite list of keywords. Defines which values are excluded for &lt;a href=&quot;list-style-type&quot;&gt;&lt;code&gt;list-style-type&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;@counter-style&quot;&gt;&lt;code&gt;@counter-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6446c61b0629b9f18d59028a39fc7c04f1cb2023" translate="yes" xml:space="preserve">
          <source>Uses a non-standard name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a8b2012a7afa621ad0400d72a507301cd0816c" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;css_box_model/introduction_to_the_css_box_model#border-area&quot;&gt;border box&lt;/a&gt; as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54f4b6ab31db1bf50785ddff6275d897f4dc908" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;css_box_model/introduction_to_the_css_box_model#content-area&quot;&gt;content box&lt;/a&gt; as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7282f74d2df526a70f77f041f168577cd3e9d37f" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;css_box_model/introduction_to_the_css_box_model#margin-area&quot;&gt;margin box&lt;/a&gt; as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36634b505227bc9c3e3b6208c78c6017dd5aa002" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;css_box_model/introduction_to_the_css_box_model#padding-area&quot;&gt;padding box&lt;/a&gt; as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a772f8d1a735e29a115b286555f06467508a5701" translate="yes" xml:space="preserve">
          <source>Uses the nearest SVG viewport as reference box. If a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox&quot;&gt;viewBox&lt;/a&gt;&lt;/code&gt; attribute is specified for the element creating the SVG viewport, the reference box is positioned at the origin of the coordinate system established by the &lt;code&gt;viewBox&lt;/code&gt; attribute and the dimension of the reference box is set to the width and height values of the &lt;code&gt;viewBox&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0fa28a83783b6ef580220a145564fc6d65d84c" translate="yes" xml:space="preserve">
          <source>Uses the nearest SVG viewport as the reference box. If a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox&quot;&gt;viewBox&lt;/a&gt;&lt;/code&gt; attribute is specified for the element creating the SVG viewport, the reference box is positioned at the origin of the coordinate system established by the &lt;code&gt;viewBox&lt;/code&gt; attribute and the dimension of the size of the reference box is set to the width and height values of the &lt;code&gt;viewBox&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d799b8e31082e2ea35db994e5145ff86663459c" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-apple-system&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e154a8dd1f8257264270f3faa8531701192057cb" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-available&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530c47882d88de37e56ed65c7f9e991f44894df3" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-background-inline-policy&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08bd49dc20a2e79f5e6ccf55b5efb213164dc49" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-end-color&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111471a709d89a9b2b6afe791f96c7e90a2f6769" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-end-style&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728d6bbbb35b96da24920edb319c56c9a75f74a2" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-end-width&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a961e1010be589918443e22ba5dd723c02a1d" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-radius-bottomleft&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1abb165cbc8c8257cd8dbc6cc46660e33ef9974" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-radius-bottomright&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875d1a42287c9f9d84e74dc16fe493f963c9b5b0" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-radius-topleft&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206ed1d4f4ddeccb11ffc7d499ccedd00d19a54e" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-radius-topright&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb3999669d9ebc605be8107477ad7017ddca0c7" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-start-color&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17efde975b98c8aeb32b3edefb46850758fb01c5" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-border-start-style&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c4591ae79a53a0d372922c5803ad0affd25f06" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-margin-end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8351ad03fe194c0df97f8aec8e1cb16d4d7f201a" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-margin-start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f97ef8703cdda539b09fd71fc9083a72d9bf4d" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-padding-end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64ead06758d66df4e7eb97113fd9f0df928b490" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-moz-padding-start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d48726d1597864251d0bd80268ef8c142dc91ad" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-ms-flex-positive&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992ab37609879d0377ecc2e0660c4fa5e23f5ba4" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-ms-flexbox&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8de996d65962dcf95bc98f79dd74bd533ce3c2b" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-ms-grid-columns&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca67a48397f5b8e38db06e1bee72c48ce5028223" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-ms-grid-rows&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79d5d18ce1eba2dec85ccde012815e9213bc25a" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-ms-inline-flexbox&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644f4b5a3eb5da8491cf6592a30625b606bc819f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-ms-text-combine-horizontal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0907920923d3bdc4cc8720df41c89423bee72043" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-fill-available&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbafdc58fce8cb60723609bea32e91e0273b494d" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-margin-end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fda8db7e2d6826030129fed71b3a46ed2dbf40b" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-margin-start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7957343511a220378a7e90fc539edfff95daa0" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-optimize-contrast&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f193638b8e48ba43cc7b80e99df767c8f68372" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-padding-end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87db4f8c0ba64a8ebdcdd70f0a23d4cbed3337be" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-padding-start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8d8048e5997f026e0548c7f5fc6a934c8ae3b6" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;-webkit-text-combine&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f205ae6a9744ab85afc3da88f32e545707d75747" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:-moz-full-screen&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9c42c5debfc7ef6259f7c2def249dcc4cd31f2" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:-moz-only-whitespace&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e7790ddd4fdb919e350a20cb62fbfb88ba0d45" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:-moz-placeholder&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34650c6131e96db4239e01d2da8a63b2fd3b9de1" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:-ms-input-placeholder&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34230d7dc1535371764ad579eaf7a1084ced24b4" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:-webkit-full-screen&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eab2a447a3036a5d2dc2ccc53940136ee7b578c" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:after&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02628f0683af78cb1fb7754ce2e64979ca7fb0b3" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:before&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250ec4be47b5f116e433ee9f61cdcefe0b891dc8" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:first-letter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567452c24b3608dfa12edb76a7586875f4468d6b" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;:first-line&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e844f06a988acb65e23b1636122e216f2b2ee48" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;constant&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4524a0d9fbc5b49d2b67953dd055167c2ffc390e" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;device-pixel-ratio&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd0fd008fdd089e204e046aa18288106ec25652" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;element&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c9226b8e023231c937b07c5fe59d16c79c6fcc" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;grid-gap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7943bef90b2ef0afbe84ee7d6c8f4bd7baf078" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;grid-row-gap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e0a2f1fc6bea0b538e69ca5db31f30775729db" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;intrinsic&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51d250c01611ea393091b4ded784f189bd930ff" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;min-intrinsic&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2411e1fa771ae843fd09f0ec68167080d039ed3" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;motion-distance&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba62cff068398a6e02737df6fae3d398da3989cd" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;motion-path&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b74ae42987bb3e2350517106432463b1eccfa79" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;motion&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741b80904cbadad9bc2997603c854f03dfec2fcf" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;offset-block-end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02362e2c656169911efc02ff56e5ec19a5279ff1" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;offset-block-start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda1f0a7184522c277e5f510bbad87c0788eaf39" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;offset-inline-end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f93f8d479f7988509abec04571c6e0a7b41091c" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;offset-inline-start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89226191b02815b78f0ec6d12dac125bc79dd590" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;text-combine-horizontal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c94137d461ab21d0533e2f5da73e4313ce8bc8b" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;vm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4935de78a30f4377a232e82559172e14b47df102" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;word-wrap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefccad4fe20bf4732845f8a47aa59ffdbcf10b4" translate="yes" xml:space="preserve">
          <source>Uses the object bounding box as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87165383b792d705f150e7b015c902c102ce510" translate="yes" xml:space="preserve">
          <source>Uses the stroke bounding box as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf77c53d619dfc52826d014a5b77065c0e4df41" translate="yes" xml:space="preserve">
          <source>Using &quot;auto&quot; and one specific length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902bb12a4971aeef25533e077a85c1f388d60521" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:is()&lt;/code&gt;, though, it's much easier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7c5cd14b29b42d03aa8cfad73604554899dfcd" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;column-count&lt;/code&gt; and &lt;code&gt;column-width&lt;/code&gt; together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90ec048b48a5e18bdafbb4152a2fe55bad9dbc0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;display: flow-root&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25a6b0d8a504643c05246d569e6e5dee68168f9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;flex: auto&lt;/code&gt; is the same as using &lt;code&gt;flex: 1 1 auto&lt;/code&gt;; everything is as with &lt;code&gt;flex:initial&lt;/code&gt; but in this case the items can grow and fill the container as well as shrink if required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3450002131184e80136960d846c2e96e165ce3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;flex: none&lt;/code&gt; will create fully inflexible flex items. It is as if you wrote &lt;code&gt;flex: 0 0 auto&lt;/code&gt;. The items cannot grow or shrink but will be laid out using flexbox with a &lt;code&gt;flex-basis&lt;/code&gt; of &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf964ba87c9a8bc7af713cf40e5fd2b88526880" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;grid-template-areas&lt;/code&gt; for UI elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52c0cc927f9d7e48047f6486c070a86e8e5e2b5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;min-&lt;/code&gt; and &lt;code&gt;max-&lt;/code&gt; we might test for a width between two values like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461625906332d4babd227e2316450b2c643e0f7e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;not()&lt;/code&gt; around a media feature negates that feature in the query. For example, &lt;code&gt;not(hover)&lt;/code&gt; would match if the device had no hover capability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027612a9a2e229ae8d9cfa033a80dc982f26fccc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;opacity&lt;/code&gt; with a value other than &lt;code&gt;1&lt;/code&gt; places the element in a new &lt;a href=&quot;understanding_z-index/the_stacking_context&quot;&gt;stacking context&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3c9957b7c0c22d8b6d178455c5c22a249388c4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;position: fixed&lt;/code&gt; also removes the item from flow, however the offsets are based on the viewport rather than the containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09df739e639faf34bc78e5e18b49036a8479ad24" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;z-index&lt;/code&gt; appears extremely easy: a single property, assigned a single integer number, with an easy-to-understand behaviour. However, when &lt;code&gt;z-index&lt;/code&gt; is applied to complex hierarchies of HTML elements, its behaviour can be hard to understand or predict. This is due to complex stacking rules. In fact a dedicated section has been reserved in the CSS specification &lt;a href=&quot;http://www.w3.org/TR/CSS21/zindex.html&quot;&gt;CSS-2.1 Appendix E&lt;/a&gt; to explain these rules better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b2895cafd33faf1ad3fceff2c470069e1a6974" translate="yes" xml:space="preserve">
          <source>Using CSS Counters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487aee45049708dd041b7312834651bc0acd303c" translate="yes" xml:space="preserve">
          <source>Using CSS Transforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30986589b28f6fe057f8492aa7753c3697686ac" translate="yes" xml:space="preserve">
          <source>Using CSS animations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53893c8e78828e7340701101a2ec8b690e3d140a" translate="yes" xml:space="preserve">
          <source>Using CSS counters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092418185d91af7c409622b04027c0d80094cb92" translate="yes" xml:space="preserve">
          <source>Using CSS feature detection for implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a910c44768f5e8d09618633f6435de08c3de48" translate="yes" xml:space="preserve">
          <source>Using CSS gradients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b834018fe6760f1851570b1d7acec2f282df3832" translate="yes" xml:space="preserve">
          <source>Using CSS transforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad057dc15b17cbf90ae16868f31fb1afa230871" translate="yes" xml:space="preserve">
          <source>Using CSS transitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605a3024d155aee88bedff389c026eafda1e22c7" translate="yes" xml:space="preserve">
          <source>Using CSS variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7324b907c66f98ae12189c657e7b192887c2a139" translate="yes" xml:space="preserve">
          <source>Using CSS with replaced elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c36606c878a771da563f354bbb5c2f51cc042c" translate="yes" xml:space="preserve">
          <source>Using Generated Content as the floated item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc56d299db084aa8dca91609f89d9e3dce338464" translate="yes" xml:space="preserve">
          <source>Using JavaScript you can make the effect of moving the ball to a certain position happen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7ccc518de3b3c8e34c0094adee2ee91a587f82" translate="yes" xml:space="preserve">
          <source>Using Media Queries for Accessibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a1a1b822000ccaef88227a2942263ef5b6f332" translate="yes" xml:space="preserve">
          <source>Using URL values for the &lt;code&gt;cursor&lt;/code&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aec886d928f32464ff5a45a1e545b522bf0cc60" translate="yes" xml:space="preserve">
          <source>Using URL values for the cursor property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9685a15fed5a409178ce8ebb563132d69fd23d7c" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;&lt;a href=&quot;#string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt; value only, in which case the other value defaults to &lt;code&gt;&lt;a href=&quot;#right&quot;&gt;right&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f1110b52a8f081ea935136ba2acdad1398f42c" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;none&lt;/code&gt; on an element will remove it from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility#Accessibility_APIs&quot;&gt;accessibility tree&lt;/a&gt;. This will cause the element and all its descendant elements to no longer be announced by screen reading technology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af589c2bd19c54ebcac5b36d32c563a40fa7780" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;visibility&lt;/code&gt; value of &lt;code&gt;hidden&lt;/code&gt; on an element will remove it from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility#Accessibility_APIs&quot;&gt;accessibility tree&lt;/a&gt;. This will cause the element and all its descendant elements to no longer be announced by screen reading technology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe0cacae0f6b3b08ab739340644c3b8f424ecf2" translate="yes" xml:space="preserve">
          <source>Using a keyword (such as &lt;code&gt;blue&lt;/code&gt; or &lt;code&gt;transparent&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667be831b5554e2c18e5a37d895bae090fa07236" translate="yes" xml:space="preserve">
          <source>Using a single axis translation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e85fab5dbf816bc2ed3fcb27d5ea921aec99991" translate="yes" xml:space="preserve">
          <source>Using a single x-angle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7d83b88e8137b5e02b1535e4558b6d29bec0aa" translate="yes" xml:space="preserve">
          <source>Using a single-axis translation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2042432aa100b2c952cb90a4f5160ab55e2f0823" translate="yes" xml:space="preserve">
          <source>Using a value of &lt;code&gt;auto&lt;/code&gt; will display the content with no scrollbars if the content fits inside the box. If it doesn&amp;rsquo;t fit then scrollbars will be added. Comparing the next example with the example for &lt;code&gt;overflow: scroll&lt;/code&gt; you should see &lt;code&gt;overflow scroll&lt;/code&gt; has horizontal and vertical scrollbars when it only needs vertical scrolling. The &lt;code&gt;auto&lt;/code&gt; example below only adds the scrollbar in the direct we need to scroll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25da30b640d5cb22f8d47afa93a3bf976e6787a0" translate="yes" xml:space="preserve">
          <source>Using a value of &lt;code&gt;justify-content&lt;/code&gt; other than &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;stretch&lt;/code&gt; will cause column boxes to display at the &lt;a href=&quot;../column-width&quot;&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/a&gt; specified on the multicol container, and the remaining space distributed according to the value of justify-content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9dd14601dc1a99059f94607dd2465ed2751971" translate="yes" xml:space="preserve">
          <source>Using a value of &lt;code&gt;scroll&lt;/code&gt; contains the content in its box and add scrollbars to enable viewing it. Scrollbars will be added even if the content fits in the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee40304bc937c2124d74109fb025571217b86f0" translate="yes" xml:space="preserve">
          <source>Using a variable font: @font-face changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8a8a00c8f524f5da7780205884403d959854f4" translate="yes" xml:space="preserve">
          <source>Using a width value only, in which case the height defaults to &lt;code&gt;&lt;a href=&quot;#auto&quot;&gt;auto&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;#auto&quot;&gt;.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29ef26ad9e0cf8979002cd12cb3a2bae3cbca0b" translate="yes" xml:space="preserve">
          <source>Using angles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbf85bb876b0b542d4da2d145750777b36fd26f" translate="yes" xml:space="preserve">
          <source>Using animation events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8340969d02ba16403c5966ceeef3fa68974b3406" translate="yes" xml:space="preserve">
          <source>Using animation shorthand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f598b14181ed6e22a2e22bb5b57aebdee8cb22" translate="yes" xml:space="preserve">
          <source>Using any four-value shorthand such as margin, padding, or border will currently use the physical versions, so if following the flow of the document is important, use the longhand properties for the time being.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc5d15fe286adcaec9328bfdfcdc9d1312d531e" translate="yes" xml:space="preserve">
          <source>Using auto margins for main axis alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d290dc2d7af2f8ca424989afc472c3d9cbe63590" translate="yes" xml:space="preserve">
          <source>Using background images to style links based on whether they've been visited will no longer work, since only colors can be used to style visited links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8a17382ee2d4db738a7d1afa726ef6f42545fa" translate="yes" xml:space="preserve">
          <source>Using both a keyword value and a &lt;code&gt;&lt;a href=&quot;#string&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae95840e339aff2d703b1ec1aa21b97b52947af" translate="yes" xml:space="preserve">
          <source>Using both a width and a height value, in which case the first sets the width and the second sets the height. Each value can be a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;&lt;a href=&quot;#auto&quot;&gt;auto&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c98d7fab69158343f8c2dfa2b3c0b46242962b" translate="yes" xml:space="preserve">
          <source>Using box values is a simple way to create shapes, however this is by nature only going to work with very simple shapes that can be defined using the well-supported &lt;code&gt;border-radius&lt;/code&gt; property. The examples shown above show one such use case. You can create a circular shape using border-radius and then curve text around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b168546dad60cb89047b0f7d809689f3155be6aa" translate="yes" xml:space="preserve">
          <source>Using columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69de9a5aec8fac7f9730994a1ca3b77b8a9c553e" translate="yes" xml:space="preserve">
          <source>Using contain or cover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1ae99754d168df69b3ea622888eb910617dbb6" translate="yes" xml:space="preserve">
          <source>Using counters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020f49a725f698f171ee00a0baf88dc21bbd6d17" translate="yes" xml:space="preserve">
          <source>Using deviceorientation with 3D Transforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b107a934821e6292ca213cd9cd218af6b4ccb03" translate="yes" xml:space="preserve">
          <source>Using feature queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a79e3cf108eb2653228a1b0b9c5522316c78a1" translate="yes" xml:space="preserve">
          <source>Using gradients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f512b17bea4339e456dbb8a2778ed91134a3013" translate="yes" xml:space="preserve">
          <source>Using images with generated content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39db82efe94d269ed24061b61bc78adb4e7c6de" translate="yes" xml:space="preserve">
          <source>Using linear gradients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14af98d31c62e3af887685e242adad911622ad6e" translate="yes" xml:space="preserve">
          <source>Using media queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adaa310e669f45edb8375e412f7f052834e764d" translate="yes" xml:space="preserve">
          <source>Using more specific rules. By indicating one or more elements before the element you're selecting the rule becomes more specific and gets higher priority:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c268ac53552d9c63fe3d6f109b37758424824b" translate="yes" xml:space="preserve">
          <source>Using more than two colors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f35a6a10dd91f80285d3eb7c3ccfd89a7cc6a7" translate="yes" xml:space="preserve">
          <source>Using multiple backgrounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6e7c0851e0ea8f30d0e6127ce34c6c6a8017eb" translate="yes" xml:space="preserve">
          <source>Using radial gradients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a53846d60d589e7bbdbd644cefdf65ca89ae9ad" translate="yes" xml:space="preserve">
          <source>Using repeating gradients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b496206f938bdb4c0c1d0e97e02f0bbaa0e1959" translate="yes" xml:space="preserve">
          <source>Using resize with arbitrary elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275d6d828a32eb89541e2ce17c79a21af3d9bf0d" translate="yes" xml:space="preserve">
          <source>Using the :target pseudo-class in selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850bf0047db5577cb2c95c260da24c8cde6a627e" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;../display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; property's &lt;code&gt;flex&lt;/code&gt; value causes an element to generate a block-level flex container box. The &lt;code&gt;inline-flex&lt;/code&gt; value causes an element to generate an inline-level flex container box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082c26e01bce60f3902a7d5d2e7625c965c4c43f" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;HSL cylindrical-coordinate&lt;/a&gt; system (via the &lt;code&gt;hsl()&lt;/code&gt; and &lt;code&gt;hsla()&lt;/code&gt; functional notations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a512a8a10e2e2e85472895e2124e620e9a07811" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_model#Geometric_representation&quot;&gt;RGB cubic-coordinate&lt;/a&gt; system (via the #-hexadecimal or the &lt;code&gt;rgb()&lt;/code&gt; and &lt;code&gt;rgba()&lt;/code&gt; functional notations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a131ffe85a864b2dc65026ab11c8645188366a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;var()&quot;&gt;var()&lt;/a&gt;&lt;/code&gt; function, you can define multiple &lt;strong&gt;fallback values&lt;/strong&gt; when the given variable is not yet defined; this can be useful when working with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;Custom Elements&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM&quot;&gt;Shadow DOM&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525002f3160374cceb1889cc35b84e7343bd8a9c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;flex-direction&lt;/code&gt; property with values of &lt;code&gt;row-reverse&lt;/code&gt; or &lt;code&gt;column-reverse&lt;/code&gt; will create a disconnect between the visual presentation of content and DOM order. This will adversely affect users experiencing low vision navigating with the aid of assistive technology such as a screen reader. If the visual (CSS) order is important, then screen reader users will not have access to the correct reading order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d224dcb96d4154739c1cdf9e9551c0e95c4cd672" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;order&lt;/code&gt; property will create a disconnect between the visual presentation of content and DOM order. This will adversely affect users experiencing low vision navigating with the aid of assistive technology such as a screen reader. If the visual (css) order is important, then screen reader users will not have access to the correct reading order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fcb005300e094c2d6711d760238025555b4c17" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;span&lt;/code&gt; keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7ec75d685a19b2b48cd799de26ff6b5d8dfac7" translate="yes" xml:space="preserve">
          <source>Using the keyword values &lt;code&gt;&lt;a href=&quot;#contain&quot;&gt;contain&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#cover&quot;&gt;cover&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09adca6d9a77bfe4808a0ec24138fc89a7a75256" translate="yes" xml:space="preserve">
          <source>Using the keyword values &lt;code&gt;&lt;a href=&quot;#start&quot;&gt;start&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#end&quot;&gt;end&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#left&quot;&gt;left&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#right&quot;&gt;right&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#center&quot;&gt;center&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#justify&quot;&gt;justify&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#justify-all&quot;&gt;justify-all&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#match-parent&quot;&gt;match-parent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f20c44d65a75a5ee741f9f01151c17153581644" translate="yes" xml:space="preserve">
          <source>Using the same example, I am setting &lt;a href=&quot;../justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;space-around&lt;/code&gt;. This once again causes tracks which span more than one column track to gain extra space:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b4471db48865a9059646a258bb71adbd046f7a" translate="yes" xml:space="preserve">
          <source>Using the same rules as we use for the margin shorthand you can set more than one offset at once. If there is only one value, it applies to all sides. If there are two values, the top and bottom offsets are set to the first value and the right and left offsets are set to the second. If there are three values, the top is set to the first value, the left and right are set to the second, and the bottom is set to the third. If there are four values, they apply to the top, right, bottom, and left, respectively. So, the above rules could also be described as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754beb953d59a184a1016d03912981a6444f9352" translate="yes" xml:space="preserve">
          <source>Using the value &lt;code&gt;inset()&lt;/code&gt; wraps text around a rectangular shape however you are able to add offset values, thus pulling the line boxes of any wrapping content closer to the object than would otherwise happen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12476ba609989ee3acd63692533baae74207b31f" translate="yes" xml:space="preserve">
          <source>Using the variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a37ee0aeef26cbbd520be1091503e7a02976651" translate="yes" xml:space="preserve">
          <source>Using the viewport meta tag to control layout on mobile browsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf653c35a8e103038bba740a7c6750e5aab9f612" translate="yes" xml:space="preserve">
          <source>Using this method we do not need to specify anything at all on the individual grid items, everything happens on our grid container. We can see the layout described as the value of the &lt;a href=&quot;../grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1324c10daaa38eb8a5027269a4db4ba2c310aaa" translate="yes" xml:space="preserve">
          <source>Using this property with a value different than &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;none&lt;/code&gt; creates a new &lt;a href=&quot;css_positioning/understanding_z_index/the_stacking_context&quot;&gt;stacking context&lt;/a&gt;. Also, in that case, the object will act as a containing block for &lt;code&gt;position&lt;/code&gt;&lt;code&gt;: fixed&lt;/code&gt; elements that it contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b84be55d46c8d53b5e9d53a18beee9bec0e9df" translate="yes" xml:space="preserve">
          <source>Using transitions to make JavaScript functionality smooth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59491e3bed859c7c39608b2ccea1eb8ae9ecb60f" translate="yes" xml:space="preserve">
          <source>Using transitions when highlighting menus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092c22ac7d50f35d10e4c4b3660983c373d83f13" translate="yes" xml:space="preserve">
          <source>Using two angles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16418517e6cfee5d310fcf822801813743806690" translate="yes" xml:space="preserve">
          <source>Using vertical media queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="1c41f7b35c722c103230adb0a6b82121854738fc" translate="yes" xml:space="preserve">
          <source>Valid family names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909bc83866e102b62ffdfc3aa47d42df25db4fec" translate="yes" xml:space="preserve">
          <source>Valid frequency values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a685af230c5f59771ce8c6f35b81183ebc63267f" translate="yes" xml:space="preserve">
          <source>Valid identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae40d57c37b7e5da36c9b2f82f9a9c50c9c4ac5" translate="yes" xml:space="preserve">
          <source>Valid images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1ff617e9a28168fa439fc3c71998a6230e56ce" translate="yes" xml:space="preserve">
          <source>Valid integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f892293f2275feda15f7605152bf63cb68973c5b" translate="yes" xml:space="preserve">
          <source>Valid keyframe lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f709133706de9ccca91cb75d9dc4e0ffd79bb7c" translate="yes" xml:space="preserve">
          <source>Valid numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31357a2dc6efce4171d6584305c5932a12ae6b3e" translate="yes" xml:space="preserve">
          <source>Valid positions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9462be448ee952300a502482adb7a767806766" translate="yes" xml:space="preserve">
          <source>Valid resolutions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8404f1aa47a180d232b25c57a9e0ac1671ba36da" translate="yes" xml:space="preserve">
          <source>Valid times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3638b1bcf957b6ae552d92e593e217e1829ce76" translate="yes" xml:space="preserve">
          <source>Validity and values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="47ede90820b46ca474f4e35da4bb3b6f58b12741" translate="yes" xml:space="preserve">
          <source>Value definition syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04adc005067929c0499e544d8552e637f9a2d30d" translate="yes" xml:space="preserve">
          <source>Value not found in DB!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36d42f28ca50f056ce851dac73e0f9837596b69" translate="yes" xml:space="preserve">
          <source>Value of &lt;a href=&quot;display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f28df16c1811fd9ce20ff74c4b78e908ca98280" translate="yes" xml:space="preserve">
          <source>Value of &lt;a href=&quot;float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514e8244d008adc919b644539e2bcdec31c08c73" translate="yes" xml:space="preserve">
          <source>Value of &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aece21aef296035e848487a534420497b2f42d1c" translate="yes" xml:space="preserve">
          <source>Value of the &lt;a href=&quot;-ms-content-zoom-limit-max&quot;&gt;&lt;code&gt;-ms-content-zoom-limit-max&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f7c8ad8e613cf00095e0ecde9c8b50a5f7cf2d" translate="yes" xml:space="preserve">
          <source>Value of the &lt;a href=&quot;-ms-content-zoom-limit-min&quot;&gt;&lt;code&gt;-ms-content-zoom-limit-min&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0e4d953e84a09b933816eb2f8e93f3072a3b89" translate="yes" xml:space="preserve">
          <source>Value of the &lt;a href=&quot;-ms-content-zoom-snap-points&quot;&gt;&lt;code&gt;-ms-content-zoom-snap-points&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0329df61f3fb84ab126ae9de446eec14cb1a9b" translate="yes" xml:space="preserve">
          <source>Value of the &lt;a href=&quot;-ms-content-zoom-snap-type&quot;&gt;&lt;code&gt;-ms-content-zoom-snap-type&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e35352da1a427e23a6babdb691260d8a91b6c7" translate="yes" xml:space="preserve">
          <source>Value: any integer (0 is the default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="161ac4a3eff7cad59e5a03eb6e696fcdfd44cba2" translate="yes" xml:space="preserve">
          <source>Values &amp;amp; Units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf16dd10813d9670a0bff5376174123b32fc923" translate="yes" xml:space="preserve">
          <source>Values are separated by commas to indicate that they are alternatives. The browser will select the first font in the list that is installed or that can be downloaded using a &lt;a href=&quot;@font-face&quot;&gt;&lt;code&gt;@font-face&lt;/code&gt;&lt;/a&gt; at-rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184c7c3fd716f68abe5d153302ec3b93e996177e" translate="yes" xml:space="preserve">
          <source>Values for inline elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c2c3c8bb5e1d7fd9dd766ff4d1ee480df4029d" translate="yes" xml:space="preserve">
          <source>Values for table cells</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e36b5403dfeb183eb53cece75f6200bd3ebebf6" translate="yes" xml:space="preserve">
          <source>Values in JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e68c61d1b37a6b1a31b9a28c2342f4ae16986c" translate="yes" xml:space="preserve">
          <source>Values of &lt;code&gt;background-clip&lt;/code&gt; longhand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35ef6beb14702c7126716bda30cfa096ba4f83e" translate="yes" xml:space="preserve">
          <source>Values of &lt;code&gt;background-origin&lt;/code&gt; longhand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f877156b1e9c5d89cc074d148fb7713561cf39c" translate="yes" xml:space="preserve">
          <source>Values of &lt;code&gt;background-size&lt;/code&gt; longhand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a441e1742786059b67c1d83522261d4cc1c299" translate="yes" xml:space="preserve">
          <source>Values of &lt;code&gt;writing-mode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc71d3858d7d02c4d82de4669785e94b4351ce8" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;auto&lt;/code&gt; (default) | &lt;code&gt;flex-start&lt;/code&gt; | &lt;code&gt;flex-end&lt;/code&gt; | &lt;code&gt;center&lt;/code&gt; | &lt;code&gt;baseline&lt;/code&gt; | &lt;code&gt;stretch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e755ff24c1d8d2ff3171c12dea1a3ae16205d2" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;flex-start&lt;/code&gt; (default) | &lt;code&gt;flex-end&lt;/code&gt; | &lt;code&gt;center&lt;/code&gt; | &lt;code&gt;space-between&lt;/code&gt; | &lt;code&gt;space-around&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eec5cac473c8bf84dc9b3cda60696c8a91a8307" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;flex-start&lt;/code&gt; | &lt;code&gt;flex-end&lt;/code&gt; | &lt;code&gt;center&lt;/code&gt; | &lt;code&gt;baseline&lt;/code&gt; | &lt;code&gt;stretch&lt;/code&gt; (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e11d8ffb00b3844eed8bf28676f684da2d450b9" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;flex-start&lt;/code&gt; | &lt;code&gt;flex-end&lt;/code&gt; | &lt;code&gt;center&lt;/code&gt; | &lt;code&gt;space-between&lt;/code&gt; | &lt;code&gt;space-around&lt;/code&gt; | &lt;code&gt;stretch&lt;/code&gt; (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa671145bd35e186f7cf4ddb75c67710db8f59d" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;flex&lt;/code&gt; | &lt;code&gt;inline-flex&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512893064c85f41548731e227d6f436b9cb7cc49" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;nowrap&lt;/code&gt; (default) | &lt;code&gt;wrap&lt;/code&gt; | &lt;code&gt;wrap-reverse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae8e6f70f67aa7a7d6b7d59bd1dd374567303fe" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;row&lt;/code&gt; (default) | &lt;code&gt;nowrap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74790e5a59f9e85b3dcf12a4ab3309f42d0cc24" translate="yes" xml:space="preserve">
          <source>Values: &lt;code&gt;row&lt;/code&gt; (default) | &lt;code&gt;row-reverse&lt;/code&gt; | &lt;code&gt;column&lt;/code&gt; | &lt;code&gt;column-reverse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9247a88402dbc0b77800b51f4ed5b25de6dc9074" translate="yes" xml:space="preserve">
          <source>Values: See the &lt;a href=&quot;../flex&quot;&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/a&gt; reference for values and default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3fa1caa97d872619184e1d3615239b75fcc8af" translate="yes" xml:space="preserve">
          <source>Values: See the &lt;a href=&quot;../flex-basis&quot;&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/a&gt; reference (the default is&lt;code&gt; auto&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94893250010308450663d9d407dc6ded472561e" translate="yes" xml:space="preserve">
          <source>Variable Fonts: what they are, and how they differ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87915dcf323c16d43074b63eb4099029617b8ab" translate="yes" xml:space="preserve">
          <source>Variable font axes come in two types: &lt;strong&gt;registered&lt;/strong&gt; and &lt;strong&gt;custom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7516a40c2e019e655d69729fee67e30394afe9" translate="yes" xml:space="preserve">
          <source>Variable font support can be checked with CSS Feature Queries (see &lt;a href=&quot;../@supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt;), so it's possible to use variable fonts in production and scope the CSS calling the variable fonts inside a feature query block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e73575007bdebd28e1f39437b269b4f7298f85" translate="yes" xml:space="preserve">
          <source>Variable fonts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040189f79689156411ce204d50bc71f275f5b568" translate="yes" xml:space="preserve">
          <source>Variable fonts can offer a fine control over the degree to which an oblique face is slanted. You can select this using the &lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; modifier for the &lt;code&gt;oblique&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5d9d8d0d807e572a0db7ca6fbe0ad2e0036111" translate="yes" xml:space="preserve">
          <source>Variable fonts examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3564dae02aba00c347366241041221e82d43ce0f" translate="yes" xml:space="preserve">
          <source>Variable fonts guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="c3f0d3df01cf91f4cecff611fca17bc3202fd4ba" translate="yes" xml:space="preserve">
          <source>Varies from one browser to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc1f260e550783f2209215e18d2d76aa3eb0bc7" translate="yes" xml:space="preserve">
          <source>Various coordinate models can be used to describe an HTML element's size and shape, as well as any transformations applied to it. The most common is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_coordinate_system&quot;&gt;Cartesian coordinate system&lt;/a&gt;, although &lt;a href=&quot;https://en.wikipedia.org/wiki/Homogeneous_coordinates&quot;&gt;homogeneous coordinates&lt;/a&gt; are also sometimes used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554d604a8711b2a1719023d02e8017d2b76edb6a" translate="yes" xml:space="preserve">
          <source>Vector plus angle value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b937cc841d82f8936cef1efb88708ab5b0f1ee5" translate="yes" xml:space="preserve">
          <source>Vertical</source>
          <target state="translated">Vertical</target>
        </trans-unit>
        <trans-unit id="eadf99ecb822466c31cdf097b1ceb1150025754a" translate="yes" xml:space="preserve">
          <source>Vertical alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfed2b0b285df2e921baa27a78d8dd0a52a0a0f" translate="yes" xml:space="preserve">
          <source>Vertical margins between two floated elements on the other hand will not collapse. When applied to floating elements, the &lt;a href=&quot;box_model&quot;&gt;margin edge&lt;/a&gt; of the bottom element is moved below the &lt;a href=&quot;box_model&quot;&gt;margin edge&lt;/a&gt; of all relevant floats. This affects the position of later floats, since later floats cannot be positioned higher than earlier ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d8fccb573164835e6c44d4dd34da4d10f8cbb3" translate="yes" xml:space="preserve">
          <source>Vertical to horizontal translation, as described in &lt;a href=&quot;#Remarks&quot;&gt;Remarks&lt;/a&gt;, will take place when appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef77203bc141c0680c9f87fe4d126bf8f640b89" translate="yes" xml:space="preserve">
          <source>Vertical-Align: All You Need To Know</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e13fbf65fae65f0a7fb9745f42a240b5558b46e" translate="yes" xml:space="preserve">
          <source>Vertically stacked fractions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21fa51d27190c3ab4c5e386ca54e5bc189be361" translate="yes" xml:space="preserve">
          <source>Video tutorial: &lt;em&gt;&lt;a href=&quot;http://gridbyexample.com/video/grid-template-areas/&quot;&gt;Grid Template Areas&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f4f77887b5bbd4fe7580186926e7fbb24f8708" translate="yes" xml:space="preserve">
          <source>Video tutorial: &lt;em&gt;&lt;a href=&quot;http://gridbyexample.com/video/series-auto-placement-order/&quot;&gt;Introducing Grid auto-placement and order&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f727c9a93710d6d337670feaa3b8664889d2d6" translate="yes" xml:space="preserve">
          <source>Video tutorial: &lt;em&gt;&lt;a href=&quot;http://gridbyexample.com/video/series-define-a-grid/&quot;&gt;Defining a Grid&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56ba57bec8e34e10161befab5027ebfc648d653" translate="yes" xml:space="preserve">
          <source>Video tutorial: &lt;em&gt;&lt;a href=&quot;http://gridbyexample.com/video/series-line-based-placement/&quot;&gt;Line-based placement&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337674d97830e97cb36227c5e9e7b0f8d8cc263f" translate="yes" xml:space="preserve">
          <source>Video tutorial: &lt;em&gt;&lt;a href=&quot;http://gridbyexample.com/video/series-minmax/&quot;&gt;Introducing minmax()&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3fed9ed0717fc34631d48a4fdb57f64e715e5d" translate="yes" xml:space="preserve">
          <source>Video tutorial:&lt;em&gt; &lt;a href=&quot;http://gridbyexample.com/video/grid-template-shorthand/&quot;&gt;Grid Template shorthand&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309196ca9c3036b41f34d574942bb771f3292a0e" translate="yes" xml:space="preserve">
          <source>View on JSFiddle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff0d0483199ef113b4acdb7d7380af319c4d470" translate="yes" xml:space="preserve">
          <source>View the live example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c8567220975ff24a85f731001b154c0a6f0dba" translate="yes" xml:space="preserve">
          <source>Viewport concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1a249cab470f4a5be83a14719939ea339becc5" translate="yes" xml:space="preserve">
          <source>Viewport sizes are mutable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cd7302bb4d1f5462b019ad65c73e6b3d9f51b9" translate="yes" xml:space="preserve">
          <source>Viewport-percentage lengths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcdc275c0c9e0c28d3f3f14f50ead580c216b03" translate="yes" xml:space="preserve">
          <source>Viewport-percentage lengths define the &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; value relative to the size of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt;, i.e., the visible portion of the document. Viewport lengths are invalid in &lt;a href=&quot;@page&quot;&gt;&lt;code&gt;@page&lt;/code&gt;&lt;/a&gt; declaration blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e02aac36845db7aea24a2dde1f8e4f72431dd78" translate="yes" xml:space="preserve">
          <source>Viewport-percentage lengths invalid in &lt;code&gt;@page&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7951b4667ca176b3d93855086478385b7aaa4cb3" translate="yes" xml:space="preserve">
          <source>Visibility values are interpolable between &lt;em&gt;visible&lt;/em&gt; and &lt;em&gt;not-visible&lt;/em&gt;. One of the start or ending values must therefore be &lt;code&gt;visible&lt;/code&gt; or no interpolation can happen. The value is interpolated as a discrete step, where values of the timing function between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; map to &lt;code&gt;visible&lt;/code&gt; and other values of the timing function (which occur only at the start/end of the transition or as a result of &lt;code&gt;cubic-bezier()&lt;/code&gt; functions with y values outside of [0, 1]) map to the closer endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed92b14769682194fd606454d622573bf61825ba" translate="yes" xml:space="preserve">
          <source>Visual Formatting Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb786a456bc6994598fbfab4a34163359e76319" translate="yes" xml:space="preserve">
          <source>Visual Guide to CSS3 Flexbox: Flexbox Playground |</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c096b4fb88395d37d6b225538f14ad239987108f" translate="yes" xml:space="preserve">
          <source>Visual Presentation: Understanding SC 1.4.8 | Understanding WCAG 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e858af0dc4ceebec9b164830c4845233b177dd07" translate="yes" xml:space="preserve">
          <source>Visual Viewport API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3269d6debee2215b6374abd3e6b1455af626d8f7" translate="yes" xml:space="preserve">
          <source>Visual formatting model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa166805d371ecb36d33cad043f53e50044a4544" translate="yes" xml:space="preserve">
          <source>Visual not logical re-ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb6bfe051d4042982abd78dd7bea9f4d82aa60b" translate="yes" xml:space="preserve">
          <source>Visually the date appears above the heading, in the source. However, if the card was read out by a screen reader I would prefer that the title was announced first and then the publication date. We can make this so using the &lt;code&gt;order&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a55f604577262456e44b499963cdd8e5aa61e0a" translate="yes" xml:space="preserve">
          <source>Visually, the markers are &lt;em&gt;outside&lt;/em&gt; the content area of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, but that's not the important part here. What's key is that the markers are placed outside the &quot;principal box&quot; of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements, not the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. They're sort of like appendages to the list items, hanging outside the content-area of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; but still attached to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c9f549b49167c363df806372744c1c3a47ab23" translate="yes" xml:space="preserve">
          <source>VoiceOver and list-style-type: none &amp;ndash; Unfettered Thoughts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="e6a7114804b27bd73c251e5e6b1449b20d18f291" translate="yes" xml:space="preserve">
          <source>W3C Github issue queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddc3110e8145fcdc0c737c8d6639a59db539962" translate="yes" xml:space="preserve">
          <source>W3C Specifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49374d4e67f8d5909bba3805830a9a78faeab19" translate="yes" xml:space="preserve">
          <source>W3C Understanding WCAG 2.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a391ca16492cfe24c07e0b871ee58858aaef7647" translate="yes" xml:space="preserve">
          <source>WOFF</source>
          <target state="translated">WOFF</target>
        </trans-unit>
        <trans-unit id="480e983411427c86f6c286dcd6481c56bf29ec66" translate="yes" xml:space="preserve">
          <source>WOFF 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba94a934e46c4a067a4d7f39246f4df70b10237d" translate="yes" xml:space="preserve">
          <source>WOFF File Format 1.0&lt;br/&gt;&lt;small&gt;The definition of 'WOFF font format' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5846e9571e74986b2afa7b903fd86e22ced0762" translate="yes" xml:space="preserve">
          <source>WOFF File Format 2.0&lt;br/&gt;&lt;small&gt;The definition of 'WOFF2 font format' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10936ee01478067e1bdba157aedb0e8321cd6616" translate="yes" xml:space="preserve">
          <source>Wakamai Fondue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e6219a30cf125a259fa1f4c7ef2e863f3bb5fc" translate="yes" xml:space="preserve">
          <source>We also wanted to get rid of the standard overscroll effects when the contacts are scrolled to the top or bottom (e.g. Chrome on Android refreshes the page when you scroll past the top boundary). This can be prevented by setting &lt;code&gt;overscroll-behavior: none&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/a&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898f422e62ec81685167d22038f9e997ce4ec885" translate="yes" xml:space="preserve">
          <source>We are able to align the content inside grid areas, and the grid tracks themselves on these two axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ca6d7f766ab9a25b146c91b7eb2a2815929176" translate="yes" xml:space="preserve">
          <source>We are going to create a grid with a flexible number of flexible columns. I want them never to become smaller than 200 pixels, and then to share any available remaining space equally &amp;ndash; so we always get equal width column tracks. We achieve this with the &lt;code&gt;minmax()&lt;/code&gt; function in our repeat notation for track sizing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03717ab579387a1b6a63d4e33b441d41dfba3f7" translate="yes" xml:space="preserve">
          <source>We are making use of cross-axis alignment in the most simple flex example. If we add &lt;code&gt;display: flex&lt;/code&gt; to a container, the child items all become flex items arranged in a row. They will all stretch to be as tall as the tallest item, as that item is defining the height of the items on the cross axis. If your flex container has a height set, then the items will stretch to that height, regardless of how much content is in the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977f86da64922a0841c8c0c5dd24a79a650ecda4" translate="yes" xml:space="preserve">
          <source>We are once again going to make this a responsive layout, this time however using named lines. Every breakpoint will use a 12-column grid, however the number of tracks that items will span changes depending on the size of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0e9cdb22886f28d9ea9a3450a1e0ccccf43911" translate="yes" xml:space="preserve">
          <source>We are working in English, a left-to-right language. Our block-start is the top row line of the grid container, block-end the final row line of the container. Our inline-start is the left-hand column line as inline-start is always the point from which text would be written in the current writing mode, inline-end is the final column line of our grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec4beed0aca1874fa11de544211236753879d41" translate="yes" xml:space="preserve">
          <source>We are working with a &lt;code&gt;flex-basis&lt;/code&gt; equal to the content size so the available space to distribute is subtracted from the total available space (the width of the flex container), and the leftover space is then shared out equally among each item. Our bigger item ends up bigger because it started from a bigger size, even though it has the same amount of spare space assigned to it as the others:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee361f01c47edc83f3baf4c1ec4f00409d13633" translate="yes" xml:space="preserve">
          <source>We call these keywords and properties &lt;em&gt;physical&lt;/em&gt; because they relate to the screen you are looking at. Left is always left, no matter what direction your text is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fafc9537e2cb1cb3d20cefda7520256ef923cb" translate="yes" xml:space="preserve">
          <source>We can also count backwards from the block and inline end of the grid, for English that would be the right hand column line and final row line. These lines can be addressed as &lt;code&gt;-1&lt;/code&gt;, and you can count back from there &amp;ndash; so the penultimate line is &lt;code&gt;-2&lt;/code&gt;. It is worth noting that the final line is the final line of the &lt;em&gt;explicit grid&lt;/em&gt;, the grid defined by &lt;code&gt;grid-template-columns&lt;/code&gt; and &lt;code&gt;grid-template-rows&lt;/code&gt;, and does not take into account any rows or columns added in the &lt;em&gt;implicit grid&lt;/em&gt; outside of that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8173703bb3c032214b0323dcccc4b48b2d8712e" translate="yes" xml:space="preserve">
          <source>We can also define an area by giving it a name and then specify the location of that area in the value of the &lt;a href=&quot;../grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt; property. You can choose what you would like to name your area. For example, if I wish to create the layout shown below I can identify four main areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dfa7528962ee02045730e8f14ab757c85e1e6a" translate="yes" xml:space="preserve">
          <source>We can also use values for this property that you may be familiar with from flexbox; the space distribution values of &lt;code&gt;space-between&lt;/code&gt;, &lt;code&gt;space-around&lt;/code&gt; and &lt;code&gt;space-evenly&lt;/code&gt;. If we update &lt;a href=&quot;../align-content&quot;&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;space-between&lt;/code&gt;, you can see how the elements on our grid space out:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3415dc02f696398650d65f9581e8d12e470b7c" translate="yes" xml:space="preserve">
          <source>We can control the order in which items stack up by using the &lt;code&gt;z-index&lt;/code&gt; property - just like positioned items. If we give &lt;code&gt;box2&lt;/code&gt; a lower &lt;code&gt;z-index&lt;/code&gt; than &lt;code&gt;box1&lt;/code&gt; it will display below &lt;code&gt;box1&lt;/code&gt; in the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce134eb373509d8a57e7f55408e16870a3fd3c6" translate="yes" xml:space="preserve">
          <source>We can create a similar effect to flexbox, while still keeping the content arranged in strict rows and columns, by creating our track listing using repeat notation and the &lt;code&gt;auto-fill&lt;/code&gt; and &lt;code&gt;auto-fit&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3758c0320e5ecb74018eb2e2840cffa63fe18e" translate="yes" xml:space="preserve">
          <source>We can see the same thing happening with columns. The container will need to have a height in order that the items will start wrapping and creating new columns, and items will stretch taller to fill each column completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b8ee5984a529775c2203a265c599855e412025" translate="yes" xml:space="preserve">
          <source>We can style text or images in the &lt;a href=&quot;content&quot;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; property almost any way we want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7494ff7a4e93a7508529c81635fde9c4e262e0dd" translate="yes" xml:space="preserve">
          <source>We can take things a step further and define each area with a single property &amp;ndash; &lt;a href=&quot;../grid-area&quot;&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/a&gt;. The order of the values for grid-area are as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5b666aa9ddf7715d250bf63e7b9ddf299c04bf" translate="yes" xml:space="preserve">
          <source>We can then redefine that layout inside media queries to go to our two columns layout, and perhaps take it to a three column layout if the available space is even wider. Note that for the wide layout I keep my nine column track grid, I redefine where items are placed using &lt;code&gt;grid-template-areas&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab32ef7a5e8544785a6e45d12839a4191ad63608" translate="yes" xml:space="preserve">
          <source>We can then use that framework to layout our page. For example, to create a three column layout with a header and footer, I might have the following markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff7a30abd91cb716eaea7623e28ff467d03516" translate="yes" xml:space="preserve">
          <source>We can use line-based placement to control where these items sit on the grid. I would like the first item to start on the far left of the grid and span a single column track. It should also start on the first row line, at the top of the grid and span to the fourth row line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd361c9be88d41f53eca2262785fefbcea44943" translate="yes" xml:space="preserve">
          <source>We can use other values to control how the items align:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b14d89ab635ecaf7835b40179a09323f929f86" translate="yes" xml:space="preserve">
          <source>We create a &lt;em&gt;grid container&lt;/em&gt; by declaring &lt;code&gt;display: grid&lt;/code&gt; or &lt;code&gt;display: inline-grid&lt;/code&gt; on an element. As soon as we do this all &lt;em&gt;direct children&lt;/em&gt; of that element will become &lt;em&gt;grid items&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc728395971a236adcf9f08029218a3441ce1df" translate="yes" xml:space="preserve">
          <source>We create a simple HTML containing a single &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element, including an ampersand, that we want to style with a different font. To make it obvious, we will use a sans-serif font, &lt;em&gt;Helvetica&lt;/em&gt;, for the text, and a serif font, &lt;em&gt;Times New Roman&lt;/em&gt;, for the ampersand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04dd77d4cd812db3e1106d4c9341827ef4686e9" translate="yes" xml:space="preserve">
          <source>We define rows and columns on our grid with the &lt;a href=&quot;../grid-template-columns&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-template-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt; properties. These define grid tracks. A &lt;em&gt;grid track&lt;/em&gt; is the space between any two lines on the grid. In the below image you can see a track highlighted &amp;ndash; this is the first row track in our grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97111484dbe84992bee856affaa6bfd0c0420c6b" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t have a &lt;code&gt;justify-items&lt;/code&gt; or &lt;code&gt;justify-self&lt;/code&gt; property available to us on the main axis as our items are treated as a group on that axis. However it is possible to do some individual alignment in order to separate an item or a group of items from others by using auto margins along with flexbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9fe986128d2ace6ff0236dcf01b90b2af51edc" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t need to define where our areas are with &lt;code&gt;grid-template-areas&lt;/code&gt; as our named lines have created an area for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3747eaf4efb564d08fa438e573684dd1476bbf" translate="yes" xml:space="preserve">
          <source>We encounter physical properties frequently when building websites, and while the grid placement and alignment properties and values respect writing modes, there are things you may want to do with Grid that force you to use physical properties and values. In the guide to &lt;a href=&quot;box_alignment_in_css_grid_layout&quot;&gt;Box alignment and grids&lt;/a&gt;, I demonstrated how auto margins work in a grid area. Using an auto margin to push one item away from the others is a common flexbox trick too, however this also ties the layout to the physical space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a8e6ddbb815534e3760c7f6485ab37e64b9935" translate="yes" xml:space="preserve">
          <source>We first set the &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/a&gt; to green.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8dc84d140e42388f40d861b99678069df60d054" translate="yes" xml:space="preserve">
          <source>We generally think of width and height media queries as being relative the width and height of the browser window. They are actually relative to the viewport, which is the window in the main document, but is the intrinsic size of the element's parent in a nested browsing context like objects, iframes and SVG. In CSS, we also have length units based on the viewport size. A &lt;code&gt;vh&lt;/code&gt; unit is 1% of the layout viewport's height. Similarly, &lt;code&gt;vw&lt;/code&gt; unit is 1% of layout viewport's width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bfa2540e131c338863ed137f101e0a0625a74b" translate="yes" xml:space="preserve">
          <source>We give the image area a grid area name of &lt;code&gt;img&lt;/code&gt; and the text area &lt;code&gt;content&lt;/code&gt;, then we can lay those out using the &lt;code&gt;grid-template-areas&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85aaa82f91ece5503036ca38fc076e6ac7c63c5" translate="yes" xml:space="preserve">
          <source>We got the 800 x 533 measurement when we zoomed in using the keyboard. When we zoomed in with the keyboard, the header and footer stayed flush against the top and bottom of the window. But what if we had pinched-zoomed on a tablet? What if a dynamic keyboard pops open on a phone?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cadaef960fc51204660df376ce40af138a6a91d" translate="yes" xml:space="preserve">
          <source>We have already seen how &lt;code&gt;circle()&lt;/code&gt; creates a circular shape. An &lt;code&gt;ellipse()&lt;/code&gt; is essentially a squashed circle. If none of these simple shapes do the trick you can create a &lt;code&gt;polygon()&lt;/code&gt; and make the shape as complex as you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab18930faf44b1fb883e3af921564f26d320e484" translate="yes" xml:space="preserve">
          <source>We have already seen how the &lt;code&gt;fr&lt;/code&gt; unit works to assign a proportion of available space in the grid container to our grid tracks. The &lt;code&gt;fr&lt;/code&gt; unit, when combined with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/minmax&quot;&gt;&lt;code&gt;minmax()&lt;/code&gt;&lt;/a&gt; function can give us very similar behavior to the &lt;code&gt;flex&lt;/code&gt; properties in flexbox while still enabling the creation of a layout in two dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2231421ae315a78ce1d7f1499f12aa573bb62ee1" translate="yes" xml:space="preserve">
          <source>We have completely filled our grid with areas in this example, leaving no white space. However you can leave grid cells empty with this method of layout. To leave a cell empty use the full stop character, '&lt;code&gt;.&lt;/code&gt;'. If I want to only display the footer directly under the main content I would need to leave the three cells underneath the sidebar empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066dc684e92d083d5700fe91b94e3a0d667ae69c" translate="yes" xml:space="preserve">
          <source>We have negative free space when the natural size of the items adds up to larger than the available space in the flex container. If I have a 500 pixel-wide container like the one above, but the three flex items are each 200 pixels wide, the total space I need will be 600 pixels, so I have 100 pixels of negative free space. This could be removed from the items in order to make them fit the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf63d851dbd93015cacfe35337a221e89d9ddbd" translate="yes" xml:space="preserve">
          <source>We have quite a lot of code here to position each item. It should come as no surprise to know there is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/shorthand_properties&quot;&gt;shorthand&lt;/a&gt;. The &lt;a href=&quot;../grid-column-start&quot;&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-column-end&quot;&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/a&gt; properties can be combined into &lt;a href=&quot;../grid-column&quot;&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../grid-row-start&quot;&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-row-end&quot;&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/a&gt; into &lt;a href=&quot;../grid-row&quot;&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f024d0cd4a53940aacb13a8cdf022d62bd846e" translate="yes" xml:space="preserve">
          <source>We have seen how named lines create a named area, and this also works in reverse. Named template areas create named lines that you can use to place your items. If we take the layout created in the guide to Grid Template Areas, we can use the lines created by our areas to see how this works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27c3fef1611a3413df9366fd60295afcf54814c" translate="yes" xml:space="preserve">
          <source>We have typically used &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Floats&quot;&gt;floats&lt;/a&gt; to create multiple column layouts. If you have floated an item, which is also a grid item in a supporting browser, the float will no longer apply to the item. The fact is that &lt;em&gt;a grid item takes precedence.&lt;/em&gt; In the example below, I have a simple media object. In a non-supporting browser, I use &lt;a href=&quot;../float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, however I have also defined the container as a grid container, in order to use the alignment properties that are implemented in CSS Grids.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588971a7baedbc726e249968d2a23249caae0ec3" translate="yes" xml:space="preserve">
          <source>We might want to be able to display our box with the image the other way around. To do this, we redefine the grid to put the &lt;code&gt;1fr&lt;/code&gt; track last, and simply flip the values in &lt;a href=&quot;../grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe7211e3a27cdb8d45e6a313212993d3d2a7763" translate="yes" xml:space="preserve">
          <source>We now have the ability to create a grid with a flexible number of flexible tracks, but see items laid out on the grid aligned by rows and columns at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0845dcef33036f8eb915d96043f9e8fb53ee9fa" translate="yes" xml:space="preserve">
          <source>We see this pattern everywhere, used for comments, and anywhere we need to display images and descriptions. With flexbox we can allow the part of the media object containing the image to take its sizing information from the image, and then the body of the media object flexes to take up the remaining space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676a9e951cef5e6fde348dec1e3d7ffc5a824cb2" translate="yes" xml:space="preserve">
          <source>We start mobile first, and all we want for the narrowest screens is for the items to remain in source order, and all span right across the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aa64e8dd08b74ed36b1a69c09217a4f6a8a40b" translate="yes" xml:space="preserve">
          <source>We start with creating the CSS for the animation. This animation will last for 3 seconds, be called &amp;ldquo;slidein&amp;rdquo;, repeat 3 times, and alternate direction each time. In the &lt;a href=&quot;../@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt;, the width and margin-left are manipulated to make the element slide across the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada17830a2ac58fa3f8cca549f1cb00da42432fe" translate="yes" xml:space="preserve">
          <source>We take a deeper look at creating shapes from images in the &lt;a href=&quot;shapes_from_images&quot;&gt;Shapes from Images&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb99260589efd1661968fdfcbab15d762897e098" translate="yes" xml:space="preserve">
          <source>We will also discover how auto margins can be used for alignment in flexbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b0139ba04f0b442edcd74385a3e985cace8b91" translate="yes" xml:space="preserve">
          <source>We will be exploring line based placement in full detail in a later article. The following example demonstrates doing this in a simple way. When placing an item, we target the line &amp;ndash; rather than the track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77f50d67a17c5ea415b2bf2948ab7506da58103" translate="yes" xml:space="preserve">
          <source>We will revisit the other functionality offered by this shorthand later in these guides when we take a look at auto placement and the grid-auto-flow property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e57e4b12ddf3532778548d6e1d12c6a655a9ae0" translate="yes" xml:space="preserve">
          <source>We will take a brief look at these properties in this overview, and you can gain a fuller understanding in the guide &lt;a href=&quot;controlling_ratios_of_flex_items_along_the_main_ax&quot;&gt;Controlling Ratios of Flex Items on the Main Axis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5701b95cd4fdbe71c206b70ed0c1b818932a99f" translate="yes" xml:space="preserve">
          <source>We would like to provide finer grained control (than just &lt;code&gt;auto&lt;/code&gt; and &lt;code&gt;none&lt;/code&gt;) in HTML for which parts of an element will cause it to &quot;catch&quot; mouse events, and when. To help us in deciding how &lt;code&gt;pointer-events&lt;/code&gt; should be further extended for HTML, if you have any particular things that you would like to be able to do with this property, then please add them to the Use Cases section of &lt;a href=&quot;https://wiki.mozilla.org/SVG:pointer-events&quot;&gt;this wiki page&lt;/a&gt; (don't worry about keeping it tidy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8102b5fed034bd3c84a73892acf57bbc251304" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll use JavaScript code to listen for all three possible animation events. This code configures our event listeners; we call it when the document is first loaded in order to set things up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00dfde4195ef41a560a5bf43c1bce6a3911ff900" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve already seen in these guides that grid gives us power to re-order the content of our page in various ways. We can use the &lt;a href=&quot;../order&quot;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/a&gt; property, which will change how items auto-place. We can use &lt;code&gt;grid-auto-flow: dense&lt;/code&gt; which will take items visually out of DOM order. We can also position items using line-based placement of grid template areas, without considering their location in the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165263814b8c8e53b126c5f7206f0c7f469251f3" translate="yes" xml:space="preserve">
          <source>We'll apply it to this HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8a2b1aa55f136bbf5581e4c860a5a246ba25a0" translate="yes" xml:space="preserve">
          <source>We'll modify the sliding text example to output some information about each animation event when it occurs, so we can get a look at how they work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127a4161ad2dbf59567a74dc765f7d67a6d4bcc6" translate="yes" xml:space="preserve">
          <source>Web App Manifest&lt;br/&gt;&lt;small&gt;The definition of 'display-mode' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02d174e58f413786523a0f58ba469855424b07b" translate="yes" xml:space="preserve">
          <source>Web Open File Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9191e7e1a1ac3dc57fd2eee9dc7aaf964e2d9235" translate="yes" xml:space="preserve">
          <source>Web Open File Format 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a630280a57ff3892929c9ff4c541288f11ef71c4" translate="yes" xml:space="preserve">
          <source>Web Video Tracks Format (WebVTT)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06173f30ba037cccb9d203c2dee575ebeb29f9ea" translate="yes" xml:space="preserve">
          <source>Web components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edb43c7e8143c8ce5dc1379a2a93932c1cceaf7" translate="yes" xml:space="preserve">
          <source>Web font analysis tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5e401f8cd113248f898f80641c8b2dc55a6930" translate="yes" xml:space="preserve">
          <source>Web fonts are subject to the same domain restriction (font files must be on the same domain as the page using them), unless &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/HTTP_access_control&quot;&gt;HTTP access controls&lt;/a&gt; are used to relax this restriction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a38f3c8550a0bc43a83cb57176ef013fca21f3" translate="yes" xml:space="preserve">
          <source>WebAIM: Color Contrast Checker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5bc1f498dd6a42be7bcf710bd41d4a39691a29" translate="yes" xml:space="preserve">
          <source>WebKit Blog &lt;a href=&quot;https://webkit.org/blog/5610/more-responsive-tapping-on-ios/&quot;&gt;More Responsive Tapping on iOS&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa09f00365e2b79faf3ba41c012dc1bb58a1aad6" translate="yes" xml:space="preserve">
          <source>WebKit CSS Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b4aa2146918e252eebe1ae99c3118fb6e0f8c6" translate="yes" xml:space="preserve">
          <source>WebKit-based browsers originally implemented an older draft of CSS3 &lt;code&gt;background-size&lt;/code&gt; in which an omitted second value is treated as duplicating the first value; this draft does not include the &lt;code&gt;contain&lt;/code&gt; or &lt;code&gt;cover&lt;/code&gt; keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595e2e89ceffeaa9784f14802ce48da7e4ded7c2" translate="yes" xml:space="preserve">
          <source>WebVTT: The Web Video Text Tracks Format&lt;br/&gt;&lt;small&gt;The definition of '::cue' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59929cbe62e7ea1e0db89e6e067a51d3a538306d" translate="yes" xml:space="preserve">
          <source>Webkit also supports the prefixed version of this property, and in that case, in addition to the current keywords, the alternative synonyms are: &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, and &lt;code&gt;content&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c0b81540bd6771fbae52b1e5922cfd40155633" translate="yes" xml:space="preserve">
          <source>Weight</source>
          <target state="translated">Weight</target>
        </trans-unit>
        <trans-unit id="dd285a28ebeec0ef884e0121b5059449b2d6531d" translate="yes" xml:space="preserve">
          <source>Weight (represented by the &lt;code&gt;wght&lt;/code&gt; tag) defines the design axis of how thin or thick (light or heavy, in typical typographic terms) the strokes of the letterforms can be. For a long time in CSS there has existed the ability to specify this via the &lt;a href=&quot;../font-weight&quot;&gt;&lt;code&gt;font-weight&lt;/code&gt;&lt;/a&gt; property, which takes numeric values ranging from 100 to 900 in increments of 100, and keywords like &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;bold&lt;/code&gt;, which are were simply aliases for their corresponding numeric values (400 and 700 in this case). These are still applied when dealing with non-variable or variable fonts, but with variable ones, any number from 1 to 1000 is now valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8a5ac750b245b92d9701fe3430428f45d53b38" translate="yes" xml:space="preserve">
          <source>Weight (wght)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff826996be32fe589d56c5e16e6403207c123592" translate="yes" xml:space="preserve">
          <source>What Happens with Invalid Variables?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323181ea3d5a7acd52407e8e5c0f8bde529a94f0" translate="yes" xml:space="preserve">
          <source>What I Learned In One Weekend With CSS Shapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75679044301529babd56a0b0e022e1b53f045843" translate="yes" xml:space="preserve">
          <source>What can&amp;rsquo;t we do with auto-placement (yet)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bfdb767da750b4c1fd6f9c2a4484fca49f89db" translate="yes" xml:space="preserve">
          <source>What does the specification define?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6ef894f9915ff0c30f7aa71bf01abac47267bb" translate="yes" xml:space="preserve">
          <source>What does this mean for designing with grid layout in practice?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a37ded76e4b6d30ca5b663391f7980e72cb54b" translate="yes" xml:space="preserve">
          <source>What happens when an item overflows the column it is in and what happens when there is too much columned content to fit a container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506e3ebab9e8ab35024a72fdd1bedcbd7902eb3e" translate="yes" xml:space="preserve">
          <source>What is a grid?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a961ecf0eab2f086bbbcb1d1ee8ec466c70600" translate="yes" xml:space="preserve">
          <source>What is a viewport?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c49d93a0614a8042a98efecd985d87e807f3ba" translate="yes" xml:space="preserve">
          <source>What is an accessible name? | The Paciello Group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ed2c85986acebaba87fcf22386dadca40e1a9a" translate="yes" xml:space="preserve">
          <source>What is overflow?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbade665f00463e668eef69fb0e87af7ab04e0b8" translate="yes" xml:space="preserve">
          <source>What is worth noting is that the &lt;code&gt;margin-box&lt;/code&gt; will clip the shape, therefore shapes created in reference to other shapes which extend past the margin box will have the shape clipped to the margin box. We will see this in the following examples of basic shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8eeefe0de7786621bbfbbd15356fb4e9529188" translate="yes" xml:space="preserve">
          <source>What it looks like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a5f1855ea725352b8d5c433dbf4128e1faeb61" translate="yes" xml:space="preserve">
          <source>What really matters here is the class &quot;moved&quot;; let's take a look at what it does. First, the &lt;code&gt;&lt;a href=&quot;perspective&quot;&gt;perspective()&lt;/a&gt;&lt;/code&gt; function positions the viewer relative to the plane that lies where z=0 (in essence, the surface of the screen). A value of &lt;code&gt;500px&lt;/code&gt; means the user is 500 pixels &quot;in front of&quot; the imagery located at z=0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67211105885fd36f757b981ac4da19d23c0cb98" translate="yes" xml:space="preserve">
          <source>What sets the base size of the item?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc162353bb41702913832028be8b1258bf04dfeb" translate="yes" xml:space="preserve">
          <source>What this demonstrates, is that if you are switching the direction of your text, either for entire pages or for parts of pages, and are using lines: you may want to name your lines, if you do not want the layout to completely switch direction. For some things, for example, where a grid contains text content, this switching may be exactly what you want. For other usage it may not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1755ad64aa2bfbfe85ee52b050665122def5126b" translate="yes" xml:space="preserve">
          <source>What we are doing here when defining all four lines, is defining the area by specifying the lines that enclose that area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a42b44f5ab432762ed4a95a13f100ef1ccc64f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;calc()&lt;/code&gt; is used for controlling text size, be sure that one of the values includes a &lt;a href=&quot;length#Relative_length_units&quot;&gt;relative length unit&lt;/a&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf9d26d31aed323cec9e15c683a44cbdb16874e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;grid-column-end&lt;/code&gt; is omitted, if &lt;code&gt;grid-column-start&lt;/code&gt; is a &lt;a href=&quot;custom-ident&quot;&gt;&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;grid-column-end&lt;/code&gt; is set to that &lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;; otherwise, it is set to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434d453d5867bab3cc849b9786ff9abeb60eb8c6" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;grid-column-start&lt;/code&gt; is omitted, if &lt;code&gt;grid-row-start&lt;/code&gt; is a &lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;, all four longhands are set to that value. Otherwise, it is set to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca91ac1eea12217a0ee9de14069f85356505be3a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;grid-row-end&lt;/code&gt; is omitted, if &lt;code&gt;grid-row-start&lt;/code&gt; is a &lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;, &lt;code&gt;grid-row-end&lt;/code&gt; is set to that &lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;; otherwise, it is set to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06367c2d77189acc97c262968a4ec78800973163" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;lighter&lt;/code&gt; or &lt;code&gt;bolder&lt;/code&gt; is specified, the following chart shows how the absolute font weight of the element is determined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c0f3627131510d4a9f4fe271ec5dadc4d3a07a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;min()&lt;/code&gt; is used for controlling text size, make sure the text is always large enough to read. A suggestion is to use the min() function nested within a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; that has as its second value a &lt;a href=&quot;length#Relative_length_units&quot;&gt;relative length unit&lt;/a&gt; that is always large enough to read. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfa1d3ea4a80732674c1d50e40352901931c77d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;, the &lt;code&gt;bottom&lt;/code&gt; property specifies the distance between the element's bottom edge and the bottom edge of its containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26f61c4957c6a976fcd64039aabe77907fbcce5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;, the &lt;code&gt;left&lt;/code&gt; property specifies the distance between the element's left edge and the left edge of its containing block. (The containing block is the ancestor to which the element is relatively positioned.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e446ac28a1ad5e7867285ef1a3ed65b90bd11701" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;, the &lt;code&gt;right&lt;/code&gt; property specifies the distance between the element's right edge and the right edge of its containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3476ad4e33ac3ff231063b89dc9e80f7729343" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;, the &lt;code&gt;top&lt;/code&gt; property specifies the distance between the element's top edge and the top edge of its containing block. (Containing block needs to have property &lt;code&gt;position: relative&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79595c57d046ebf0b80867931b44d8d837a64a77" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;relative&lt;/code&gt;, the &lt;code&gt;bottom&lt;/code&gt; property specifies the distance the element's bottom edge is moved above its normal position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7292dea8153cc58f33cd9efa15059cdf9b2fa160" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;relative&lt;/code&gt;, the &lt;code&gt;left&lt;/code&gt; property specifies the distance the element's left edge is moved to the right from its normal position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0217a1c641246a2a0bc972ef3b5e202d78f535d5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;relative&lt;/code&gt;, the &lt;code&gt;right&lt;/code&gt; property specifies the distance the element's right edge is moved to the left from its normal position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89781c73ac5466d805f4ed9c48fa8ed308606591" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;relative&lt;/code&gt;, the &lt;code&gt;top&lt;/code&gt; property specifies the distance the element's top edge is moved below its normal position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c24a317020461c815427a09398a0c7b64541cc2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;static&lt;/code&gt;, the &lt;code&gt;bottom&lt;/code&gt; property has &lt;em&gt;no effect&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bca90c969e57d4adcbbd4c6c607aa06bfaff3a3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;static&lt;/code&gt;, the &lt;code&gt;left&lt;/code&gt; property has &lt;em&gt;no effect&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa03ae358912ad222e1c4ca1c7b5a6a686ab778" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;static&lt;/code&gt;, the &lt;code&gt;right&lt;/code&gt; property has &lt;em&gt;no effect&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d080fd137740a1edb308e74e44dcb78b662368cb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;static&lt;/code&gt;, the &lt;code&gt;top&lt;/code&gt; property has &lt;em&gt;no effect&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45f0127f9dac097587874f6ee624b787202013b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;sticky&lt;/code&gt;, the &lt;code&gt;bottom&lt;/code&gt; property behaves like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;relative&lt;/code&gt; when the element is inside the viewport, and like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;fixed&lt;/code&gt; when it is outside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbcabf0ab65d65cb1603e60817864eb3cd2e1ef" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;sticky&lt;/code&gt;, the &lt;code&gt;left&lt;/code&gt; property behaves like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;relative&lt;/code&gt; when the element is inside the viewport, and like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;fixed&lt;/code&gt; when it is outside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2196dff53b909caa0ba272f165a14fa9986794fa" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;sticky&lt;/code&gt;, the &lt;code&gt;right&lt;/code&gt; property behaves like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;relative&lt;/code&gt; when the element is inside the viewport, and like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;fixed&lt;/code&gt; when it is outside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53020d482a08f44d670270646e9e11d5897ad765" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;sticky&lt;/code&gt;, the &lt;code&gt;top&lt;/code&gt; property behaves like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;relative&lt;/code&gt; when the element is inside the viewport, and like its &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;fixed&lt;/code&gt; when it is outside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b074e709023d9f267e89ae1c280a1548e5b38860" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; positions are specified, they create slices measured from the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61bd182ae4bd0d88dca77f63983627c8b0d05f2b" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; values are specified, the colors apply to the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b8b2f7995c4c1a42e7fee716495cdbe8528493" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; values are specified, the margins apply to the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3726c128cca3458f037f6420cebbbd56c2f4df" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; values are specified, the outsets apply to the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31ee359631c6d210479cf0dad7d45fad002b8bc" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; values are specified, the paddings apply to the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d9588da8eceee62813af441b387f95c446b276" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; values are specified, the styles apply to the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962e290e9eebfc1e747645c8289d6e9fcf2d71f3" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;four&lt;/strong&gt; values are specified, the widths apply to the &lt;strong&gt;top&lt;/strong&gt;, &lt;strong&gt;right&lt;/strong&gt;, &lt;strong&gt;bottom&lt;/strong&gt;, and &lt;strong&gt;left&lt;/strong&gt; in that order (clockwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8bff75cbbfb1817801127c316c1c8b33440120" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; position is specified, it creates all four slices at the same distance from their respective sides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3edcd515ab5b65d9d5052efbf02725fe8256ea" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same behavior on &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7222f2adfb682458117c45f47ae62d96d7383d9" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same color to &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c1bfddbcbff34cf6f853c4df4bec5b719dd4ce" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same margin to &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc03e092b0a15cfb35fccfa65c07ffa3bca1147" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same outset to &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47490b43007fe3ef755f2aa058dfe84ba7df0a69" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same padding to &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d352391ef1370e25ea140ad634d26f74cd6bbc6" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same style to &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8eb10053a803b47ee661eabbb7ca363a6c67c9" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt; value is specified, it applies the same width to &lt;strong&gt;all four sides&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443c83ad6607db162ec2ceeeb5a479f88d439c26" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;one&lt;/strong&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; value is specified, it defines both the horizontal and vertical spacings between cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f838925686b9446d874fcc3e156c4ff2b3eaad" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; positions are specified, the first value creates a slice measured from the &lt;strong&gt;top&lt;/strong&gt;, the second creates slices measured from the &lt;strong&gt;left and right&lt;/strong&gt;, the third creates a slice measured from the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2655b0eb010a3cfdbc94ddab1123e6f0fe423c4e" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; values are specified, the first color applies to the &lt;strong&gt;top&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;, the third to the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cedca49b0207cda8636f4bb9e92a599c6ab15a" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; values are specified, the first margin applies to the &lt;strong&gt;top&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;, the third to the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd9a041980359104d82e0e343dcd1e2acec9e6e" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; values are specified, the first outset applies to the &lt;strong&gt;top&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;, the third to the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8237f18420f4fb09ecf27e64d6e5cdd7fd933819" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; values are specified, the first padding applies to the &lt;strong&gt;top&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;, the third to the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8592e6d593705800269535fec6312009362aec0" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; values are specified, the first style applies to the &lt;strong&gt;top&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;, the third to the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de9106994057d51a68ccc6ea9950144a95869fd" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;three&lt;/strong&gt; values are specified, the first width applies to the &lt;strong&gt;top&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;, the third to the &lt;strong&gt;bottom&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dababb8561422bc0d7cc807ce76be9d12e379f23" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; positions are specified, the first value creates slices measured from the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second creates slices measured from the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc3e2261fa53abb6b02d8b9441bb63e0a6f9ac8" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df091328aca11e6cc6289ca3b5f2475876b7a252" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first color applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a68cae84590a9bb8e0bdac0c7cd4c184e3bf02a" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first margin applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e3095702e104f8b8727aa0250f2453a551f295" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first outset applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3c41d0c02851973dc5f1db28a07c826888dbb5" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first padding applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e536c99a489b3a2e34740db6a1a86d3389eaa25" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first style applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5c8cb36d1c94b5410f86d0fb584aa6a0de2f7b" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt; values are specified, the first width applies to the &lt;strong&gt;top and bottom&lt;/strong&gt;, the second to the &lt;strong&gt;left and right&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6581f800bd8de70eb9200c04ca3b956cb69cf6" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;two&lt;/strong&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; values are specified, the first value defines the horizontal spacing between cells (i.e., the space between cells in adjacent &lt;em&gt;columns&lt;/em&gt;), and the second value defines the vertical spacing between cells (i.e., the space between cells in adjacent &lt;em&gt;rows&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d572f2964568287a2e7121a6b61e4dc16fe3b63b" translate="yes" xml:space="preserve">
          <source>When a URL points at a specific piece of a document, it can be difficult for the user to notice. Find out how you can use some simple CSS to draw attention to the target of a URL and improve the user's experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716863fe41a41b0d5c287d68db740908e5e97a58" translate="yes" xml:space="preserve">
          <source>When a coordinate value is outside the [-1, 1] range, the element grows along that dimension; when inside, it shrinks. If it is negative, the result a &lt;a href=&quot;https://en.wikipedia.org/wiki/Point_reflection&quot;&gt;point reflection&lt;/a&gt; in that dimension. A value of 1 has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd29e56e76106bce3f0a089698f8bb01c63b3d0" translate="yes" xml:space="preserve">
          <source>When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4338cf4a8cc72e0831d633b8e52d434e2fa8184" translate="yes" xml:space="preserve">
          <source>When a gesture is started, the browser intersects the &lt;code&gt;touch-action&lt;/code&gt; values of the touched element and all its ancestors up to the one that implements the gesture (in other words, the first containing scrolling element). This means that in practice, &lt;code&gt;touch-action&lt;/code&gt; is typically applied only to individual elements which have some custom behavior, without needing to specify &lt;code&gt;touch-action&lt;/code&gt; explicitly on any of that element's descendants. After a gesture has started, changes to &lt;strong&gt;touch-action&lt;/strong&gt; values will not have any impact on the behavior of the current gesture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05f35d5fc656a7d8fa703a36c6d23299c53c4fc" translate="yes" xml:space="preserve">
          <source>When a given font includes capital letter glyphs of multiple different sizes, this property selects the most appropriate ones. If petite capital glyphs are not available, they are rendered using small capital glyphs. If these are not present, the browser synthesizes them from the uppercase glyphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a77441c6a2618452fa3cd0c667f4c4209cacaa" translate="yes" xml:space="preserve">
          <source>When a keyframe is defined multiple times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03813086b91124ffa462f71fa6e97607c17ad99f" translate="yes" xml:space="preserve">
          <source>When a nested box is assigned a different writing mode to its parent, then an inline level box will display as if it has &lt;code&gt;display: inline-block&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8086398da4317f3eae56b35c3a37cf4cb1a4ee5c" translate="yes" xml:space="preserve">
          <source>When a non-&lt;code&gt;auto&lt;/code&gt;&lt;code&gt;flex-basis&lt;/code&gt; is specified, Internet Explorer 10 and 11 always uses a &lt;code&gt;content-box&lt;/code&gt; box model to calculate the size of a flex item, even if &lt;a href=&quot;http://developer.mozilla.org/docs/Web/CSS/box-sizing&quot;&gt;&lt;code&gt;box-sizing: border-box&lt;/code&gt;&lt;/a&gt; is applied to the element. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box&quot;&gt;Flexbug #7&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b03ac60181562725b2df310ebbf3445ddb5106" translate="yes" xml:space="preserve">
          <source>When a spanner is introduced, it breaks the flow of columns and columns restart after the spanner, effectively creating a new set of column boxes. The content does not jump over a spanning element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ab394a5418904f9e3e6d28310b713b543091a7" translate="yes" xml:space="preserve">
          <source>When a target is touched and held on iOS, Safari displays a callout information about the link. This property allows disabling that behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89909b588755c142c27e64b2211a16f9d2128de1" translate="yes" xml:space="preserve">
          <source>When a user agent (such as your browser) lays out a document, it generates a box for every element. Each box is divided into four areas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0421c76508d5cd6efe8ff03d486dd8a73a9f31f2" translate="yes" xml:space="preserve">
          <source>When a user pans or scrolls and then lifts his or her contact (for instance, a finger), the content can continue to move with inertia. Snap-points can change the animation that runs when the user lifts his or her finger so that you can adjust where the content will stop. By placing snap-points, you can make it easy for your users to manipulate your content and make it stop at convenient or key places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734cee745c10991e111e19c5020fcedf1fbcdefc" translate="yes" xml:space="preserve">
          <source>When aligning items on the block axis you will use the properties that begin &lt;code&gt;align-&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16cf8e2f2a73c286d450202e454189af1cf31e72" translate="yes" xml:space="preserve">
          <source>When aligning items on the inline axis you will use the properties which begin with &lt;code&gt;justify-&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f029f6c1ce99a780f5553ba9b9b71ea017147820" translate="yes" xml:space="preserve">
          <source>When all margins are negative, the size of the collapsed margin is the smallest (most negative) margin. This applies to both adjacent elements and nested elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84aa0002854b15e40db918b024e1741b3d0acc8e" translate="yes" xml:space="preserve">
          <source>When all of the first four arguments are supplied they represent the top, right, bottom and left offsets from the reference box inward that define the positions of the edges of the inset rectangle. These arguments follow the syntax of the margin shorthand, that let you set all four insets with one, two or four values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d6ec69fa9d740724b8a6d48c9b3f6cf281eefa" translate="yes" xml:space="preserve">
          <source>When altering the indentation of lists, make sure to set both the padding and margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cd2b92612d3001d5e3a6353287f586f712c2a5" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;important&lt;/code&gt; rule is used on a style declaration, this declaration overrides any other declarations. Although technically &lt;code&gt;!important&lt;/code&gt; has nothing to do with specificity, it interacts directly with it. Using &lt;code&gt;!important,&lt;/code&gt; however, is &lt;strong&gt;bad practice&lt;/strong&gt; and should be avoided because it makes debugging more difficult by breaking the natural &lt;a href=&quot;cascade&quot;&gt;cascading&lt;/a&gt; in your stylesheets. When two conflicting declarations with the &lt;code&gt;!important&lt;/code&gt; rule are applied to the same element, the declaration with a greater specificity will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c209e7045b5c81a00df4da0c2bd18abf09c32c03" translate="yes" xml:space="preserve">
          <source>When an element has a border that is larger than a single CSS pixel, each line of pixels uses the next color specified in this property, from the outside in. This eliminates the need for nested boxes. If the border is wider than the number of specified colors, the remaining part of the border is the innermost color specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3787a70e58b77bbfdb2b3af2cf31f4b6376ea50c" translate="yes" xml:space="preserve">
          <source>When an element has a parent set to &lt;code&gt;display: grid&lt;/code&gt; it is &lt;em&gt;blockified&lt;/em&gt;, as defined in the &lt;a href=&quot;https://drafts.csswg.org/css-display-3/#blockify&quot;&gt;CSS display specification&lt;/a&gt;. In the case of our item set to &lt;code&gt;inline-block&lt;/code&gt;, this is why &lt;code&gt;display: inline-block&lt;/code&gt; no longer applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507670098eb8334653c46339c0f744bb5f6a6e95" translate="yes" xml:space="preserve">
          <source>When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the &lt;code&gt;contain&lt;/code&gt; case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0c3f5332b82947726b604f862472330ac6e600" translate="yes" xml:space="preserve">
          <source>When animated, a point's abscissa and ordinate values are interpolated independently. However, because the speed of the interpolation is determined by a single &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt; for both coordinates, the point will move in a straight line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6c16c96391f95169b691a7f5eff6783a27fb9d" translate="yes" xml:space="preserve">
          <source>When animated, values of the &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt; data type are interpolated using discrete, whole steps. The calculation is done as if they were real, floating-point numbers; the discrete value is obtained using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Floor_function&quot;&gt;floor function&lt;/a&gt;. The speed of the interpolation is determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt; associated with the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99682bfc1f2096a88c3ee5a748be72a3a5b0284" translate="yes" xml:space="preserve">
          <source>When animated, values of the &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; data type are interpolated as real, floating-point numbers. The interpolation happens on the calculated value. The speed of the interpolation is determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt; associated with the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f26ab8cf2d99ac36ae189a9fc269f1557295c6" translate="yes" xml:space="preserve">
          <source>When animated, values of the &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; CSS data type are interpolated as real, floating-point numbers. The speed of the interpolation is determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt; associated with the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4aa6f06ae2725f667306ea7a1ba2db47c366a1" translate="yes" xml:space="preserve">
          <source>When animated, values of the &lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt; data type are interpolated as real, floating-point numbers. The speed of the interpolation is determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt; associated with the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b988fbc414c14feea3a990079e517ed3dab683fe" translate="yes" xml:space="preserve">
          <source>When animated, values of the &lt;code&gt;&amp;lt;shape&amp;gt;&lt;/code&gt; data type are interpolated over their &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt; components, each treated as a real, floating-point number. The speed of the interpolation is determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt; associated with the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fdd10121b9aac50c2ba00921b3a249a41f4573" translate="yes" xml:space="preserve">
          <source>When animating between one &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; and a second, the rules below are applied. The values in the shape functions interpolate as a simple list. The list values interpolate as &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; where possible. If list values are not one of those types but are identical (such as finding &lt;code&gt;nonzero&lt;/code&gt; in the same list position in both lists), those values do interpolate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2867e0aa83234f78c3dafc11d4003c0597db8c50" translate="yes" xml:space="preserve">
          <source>When animating between one &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; and another, the rules below are applied. The values in the shape functions interpolate as a simple list. The list values interpolate as &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;calc()&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; where possible. If list values are not one of those types but are identical (such as finding &lt;code&gt;nonzero&lt;/code&gt; in the same list position in both lists), those values do interpolate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323e7ebccaca0d2d36826d88f97863ac202b6d95" translate="yes" xml:space="preserve">
          <source>When appearing outside a &lt;code&gt;minmax()&lt;/code&gt; notation, it implies an automatic minimum (i.e. &lt;code&gt;minmax(auto, &amp;lt;flex&amp;gt;)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ea34b1a15f4f6f2d66fce7f3b9ca0942a8374a" translate="yes" xml:space="preserve">
          <source>When applied to a table cell, specifies the alignment character around which the cell's contents will align.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ab503f98fb5d0c374fcefff78cd3722bf73713" translate="yes" xml:space="preserve">
          <source>When applied to non-floating blocks, it moves the &lt;a href=&quot;box_model&quot;&gt;border edge&lt;/a&gt; of the element down until it is below the &lt;a href=&quot;box_model&quot;&gt;margin edge&lt;/a&gt; of all relevant floats. The non-floated block's vertical margin collapses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b204920e2b1ca4824f9f40a674b8ce3874542bf" translate="yes" xml:space="preserve">
          <source>When both &lt;a href=&quot;left&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;right&lt;/code&gt; are defined, the position of the element is&lt;em&gt; overspecified&lt;/em&gt;. When this is the case, the &lt;code&gt;left&lt;/code&gt; value has precedence when the container is left-to-right (thus, the computed value of &lt;code&gt;right&lt;/code&gt; is set to &lt;code&gt;-left&lt;/code&gt;); the &lt;code&gt;right&lt;/code&gt; value has precedence when the container is right-to-left (thus, the computed value of &lt;code&gt;left&lt;/code&gt; is set to &lt;code&gt;-right&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50380461686364836d5ecbab013f9c7edb45997" translate="yes" xml:space="preserve">
          <source>When both &lt;a href=&quot;top&quot;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;bottom&lt;/code&gt; are specified, &lt;em&gt;and&lt;/em&gt;&lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; is unspecified or either &lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;100%&lt;/code&gt;, both the &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; distances are respected. In all other situations, if &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; is constrained in any way, the &lt;code&gt;top&lt;/code&gt; property takes precedence and the &lt;code&gt;bottom&lt;/code&gt; property is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3273ba16b7c17539d9d640a8a6faa8ded8757d8c" translate="yes" xml:space="preserve">
          <source>When both &lt;code&gt;left&lt;/code&gt; and &lt;a href=&quot;right&quot;&gt;&lt;code&gt;right&lt;/code&gt;&lt;/a&gt; are defined, the position of the element is&lt;em&gt; overspecified&lt;/em&gt;. When this is the case, the &lt;code&gt;left&lt;/code&gt; value has precedence when the container is left-to-right (thus, the computed value of &lt;code&gt;right&lt;/code&gt; is set to &lt;code&gt;-left&lt;/code&gt;); the &lt;code&gt;right&lt;/code&gt; value has precedence when the container is right-to-left (thus, the computed value of &lt;code&gt;left&lt;/code&gt; is set to &lt;code&gt;-right&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9248184f3ad234ea34e632f3aa633a571d27950f" translate="yes" xml:space="preserve">
          <source>When both &lt;code&gt;top&lt;/code&gt; and &lt;a href=&quot;bottom&quot;&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/a&gt; are specified, &lt;em&gt;and&lt;/em&gt;&lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; is unspecified or either &lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;100%&lt;/code&gt;, both the &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; distances are respected. In all other situations, if &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; is constrained in any way, the &lt;code&gt;top&lt;/code&gt; property takes precedence and the &lt;code&gt;bottom&lt;/code&gt; property is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329e39ddd576dce7cd75fbcb9f7619d651d9da2f" translate="yes" xml:space="preserve">
          <source>When can I use SVG Fonts?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c11e57f2b7a5f19e958ac1ceea58789d5878827" translate="yes" xml:space="preserve">
          <source>When can I use WOFF?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7029b6484965e2c76485b8adc51c9e55a8d503db" translate="yes" xml:space="preserve">
          <source>When cells are collapsed, the &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;inset&lt;/code&gt; behaves like &lt;code&gt;groove&lt;/code&gt;, and &lt;code&gt;outset&lt;/code&gt; behaves like &lt;code&gt;ridge&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7aa707d15c7a763f35a9653c5f1d644527f2e36" translate="yes" xml:space="preserve">
          <source>When cells are separated, the distance between cells is defined by the &lt;a href=&quot;border-spacing&quot;&gt;&lt;code&gt;border-spacing&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8453956e180971c95f033af90aa4471b700e33" translate="yes" xml:space="preserve">
          <source>When creating a shape, the reference box is defined by each property that uses &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; values. The coordinate system for the shape has its origin at the top-left corner of the reference box, with the x-axis running to the right and the y-axis running downwards. All the lengths expressed in percentages are resolved from the used dimensions of the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387fcfe5cbe4c59917cd6381368a4b2d4987add7" translate="yes" xml:space="preserve">
          <source>When creating our example grid we specifically defined our column tracks with the &lt;a href=&quot;../grid-template-columns&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt; property, but the grid also created rows on its own. These rows are part of the implicit grid. Whereas the explicit grid consists of any rows and columns defined with &lt;a href=&quot;../grid-template-columns&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../grid-template-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d2b37f3411abc12c5e48108ed5afeee387473a" translate="yes" xml:space="preserve">
          <source>When dealing with multiple-line flex containers however you need to understand that the wrapping is re-done &lt;em&gt;after&lt;/em&gt; collapsing. So the browser needs to re-do the wrapping behaviour to account for the new space that the collapsed item has left in the inline direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2872e49469b949ad65608949e12b893841d982c2" translate="yes" xml:space="preserve">
          <source>When defining custom counter styles, the &lt;code&gt;negative&lt;/code&gt; descriptor lets you alter the representations of negative counter values, by providing a way to specify symbols to be appended or prepended to the counter representation when the value is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166ed08000cbc7b5a622874a6264018a444d49c7" translate="yes" xml:space="preserve">
          <source>When defining custom counter styles, the &lt;code&gt;range&lt;/code&gt; descriptor lets the author specify a range of counter values over which the style is applied. If a counter value is outside the specified range, then the fallback style will be used to construct the representation of that marker. Value of the range descriptor can be either auto or a comma separated list of lower and upper bounds specified as integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a740e1a48fb28ce0f76ea840896777ca3d63fd37" translate="yes" xml:space="preserve">
          <source>When defining the grid, I name my lines inside square brackets. Those names can be anything you like. I have defined a name for the start and end up the container, both for rows and columns. Then defined the centre block of the grid as &lt;code&gt;content-start&lt;/code&gt; and &lt;code&gt;content-end&lt;/code&gt; again, both for columns and rows although you do not need to name all of the lines on your grid. You might choose to name just some key lines for your layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6926d7be4d0a5ef61002aa3bf80b4dcb5f9df6c7" translate="yes" xml:space="preserve">
          <source>When describing Reference Boxes I explained that the margin-box will clip the shape. You can see this by moving the centre of our circle towards the content by setting the position to 60%. The centre of the circle is now nearer the content and the circle extends past the margin-box. This means that the extension becomes clipped and squared off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ec1b3fbe9da0ac90c720bbe69a572d7d14106f" translate="yes" xml:space="preserve">
          <source>When doing this, define the names for your areas outside of any media queries. That way the content area would always be called &lt;code&gt;main&lt;/code&gt; no matter where on the grid it is placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f0e85ab6c01d978354d0dfb2ff3d5d0e3d5e48" translate="yes" xml:space="preserve">
          <source>When drawing 3D graphics, or using a third dimension to layer objects from front to back, the &lt;em&gt;z-coordinate&lt;/em&gt; is also used. This specifies the distance away from the viewer if positive and toward the viewer if negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93264924e2bb7800b6d77c6abed3d76def89fc2a" translate="yes" xml:space="preserve">
          <source>When in the normal flow, in a block formatting context, boxes are laid vertically one after the other out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263e34844144ed80a98d36cc8b3c7c32f0d315d2" translate="yes" xml:space="preserve">
          <source>When in the normal flow, in an inline formatting context, boxes are laid horizontally one after the other out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99a7ea3697f1f06754dbcf86a942aeb73291f0f" translate="yes" xml:space="preserve">
          <source>When laying out a document, the browser's rendering engine represents each element as a rectangular box according to the standard &lt;strong&gt;CSS basic box model&lt;/strong&gt;. CSS determines the size, position, and properties (color, background, border size, etc.) of these boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132c08f43dbbfb27c382c8c25c7568b5345cb94a" translate="yes" xml:space="preserve">
          <source>When more than one shadow is given, shadows are applied front-to-back, with the first-specified shadow on top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f09c99c337b6393d6085fb9f28a7ae2fad5031e" translate="yes" xml:space="preserve">
          <source>When multiple elements have been placed into full-screen mode, the backdrop is drawn immediately beneath the frontmost such element, and on top of the older full-screen elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5491cb9a5c969ae34c675829e7a7651dcfd21cf" translate="yes" xml:space="preserve">
          <source>When naming the lines, I mentioned that you can name these anything you like. The name is a &lt;a href=&quot;https://drafts.csswg.org/css-values-4/#custom-idents&quot;&gt;custom ident&lt;/a&gt;, an author-defined name. When choosing the name you need to avoid words that might appear in the specification and be confusing - such as &lt;code&gt;span&lt;/code&gt;. Idents are not quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec783c12457ae29b2b1e38fe3f07213d5bc3500" translate="yes" xml:space="preserve">
          <source>When negative margins are involved, the size of the collapsed margin is the sum of the largest positive margin and the smallest (most negative) negative margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8a94c3974fb8c0ff7f87a1d569e40939f16e6f" translate="yes" xml:space="preserve">
          <source>When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe99de3f995d8cdc9faba8ef9271ebf0bb345c2" translate="yes" xml:space="preserve">
          <source>When no value for a &lt;strong&gt;non-inherited property&lt;/strong&gt; has been specified on an element, the element gets the &lt;a href=&quot;initial_value&quot;&gt;initial value&lt;/a&gt; of that property (as specified in the property's summary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcc6d65477cb7f7aa5d507cc3bd9e956f1250d4" translate="yes" xml:space="preserve">
          <source>When no value for an &lt;strong&gt;inherited property&lt;/strong&gt; has been specified on an element, the element gets the &lt;a href=&quot;computed_value&quot;&gt;computed value&lt;/a&gt; of that property on its parent element. Only the root element of the document gets the &lt;a href=&quot;initial_value&quot;&gt;initial value&lt;/a&gt; given in the property's summary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc794539ead58a4895574364e126abff537ed62f" translate="yes" xml:space="preserve">
          <source>When one value is specified, that one is painted first, followed by the other two in their default order relative to one another. When two values are specified, they will be painted in the order they are specified in, followed by the unspecified one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886b0ca2fba3fb0d740341b08ff585566b12da6a" translate="yes" xml:space="preserve">
          <source>When printing a page, the browser might want to replace light-colored text on a dark background with dark text on a white background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6264bad86a7389529b24b5e3e397a69d4e77e2" translate="yes" xml:space="preserve">
          <source>When properties are left out of some keyframes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e049753602f64f915a28443bd5174595020091" translate="yes" xml:space="preserve">
          <source>When property value lists are of different lengths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c528ed2d81de5fa9834a284fd6bf240aa384126" translate="yes" xml:space="preserve">
          <source>When range is specified as integers, the value &lt;code&gt;infinite&lt;/code&gt; can be used to denote infinity. If &lt;em&gt;infinite&lt;/em&gt; is specified as the first value in a range, then it is interpreted as negative infinity. If used as upper bound, it is taken as positive infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42e221229654d68ca5df5fefccbf90a199fc0f1" translate="yes" xml:space="preserve">
          <source>When rendering text, the list of OpenType axis names is passed to the text layout engine to enable or disable font features. Each setting is always a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt; of 4 ASCII characters, followed by a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; indicating the axis value. If the &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; has more or fewer characters or contains characters outside the U+20 - U+7E codepoint range, the whole property is invalid. The &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; can be fractional or negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98f8184e8f14b2bc78fd7df0ae83ed3ab257a09" translate="yes" xml:space="preserve">
          <source>When rendering text, the list of OpenType feature tag value is passed to the text layout engine to enable or disable font features. The tag is always a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt; of 4 ASCII characters. If it has more or less characters or contains characters outside the U+20 - U+7E codepoint range, the whole property is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604ec6ad99ddb3e3c0e1fadbd962664b22b34648" translate="yes" xml:space="preserve">
          <source>When rendering text, the list of variable font axis names is passed to the text layout engine to enable or disable font features. Each setting is always one or more pairs comprised of a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt; of 4 ASCII characters followed by a &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; indicating the axis value to set. If the &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; has more or fewer characters or contains characters outside the U+20 - U+7E codepoint range, the whole property is invalid. The &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; can be fractional or negative, depending on the value range available in your font, as defined by the font designer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1c339b21703d3e8c707e36bd3d399462428814" translate="yes" xml:space="preserve">
          <source>When scaling the image up, the nearest-neighbor algorithm must be used, so that the image appears to be composed of large pixels. When scaling down, this is the same as &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20e150fbde63829d95608436d8d2a49d9a64521" translate="yes" xml:space="preserve">
          <source>When setting multiple line-decoration properties at once, it may be more convenient to use the &lt;a href=&quot;text-decoration&quot;&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/a&gt; shorthand property instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b61dda84b8c9164bbd27ca1b8f6584ff0f81090" translate="yes" xml:space="preserve">
          <source>When setting up an explicit grid or defining the sizing for automatically created rows or columns we may want to give tracks a minimum size, but also ensure they expand to fit any content that is added. For example, I may want my rows to never collapse smaller than 100 pixels, but if my content stretches to 300 pixels in height, then I would like the row to stretch to that height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248344293697fc4f2ebf3cc777afc7fd39fd7fb1" translate="yes" xml:space="preserve">
          <source>When several keyframes are appropriate, it chooses the latest defined in the most important document, but never combined all together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db89e03764b44c0a2a30735c152d4bc047c941c9" translate="yes" xml:space="preserve">
          <source>When specifying the location of a pixel in a graphics context (just like when specifying coordinate systems in &lt;a href=&quot;https://en.wikipedia.org/wiki/algebra&quot;&gt;algebra&lt;/a&gt;), its position is defined relative to a fixed point in the context. This fixed point is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Origin_(mathematics)&quot;&gt;origin&lt;/a&gt;. The position is specified as the number of pixels offset from the origin along each dimension of the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d1b7d2607b1e250c346a41195c7be098605e3c" translate="yes" xml:space="preserve">
          <source>When specifying the size of an item, the &lt;a href=&quot;https://drafts.csswg.org/css-logical/&quot;&gt;Logical Properties and Values&lt;/a&gt; specification gives you the ability to indicate sizing as it relates to the flow of text (inline and block) rather than physical sizing which relates to the physical dimensions of horizontal and vertical (e.g. left and right). While these flow relative mappings may well become the default for many of us, in a design you may well use both physical and logical sizing. You might want some features to always relate to the physical dimensions whatever the writing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ab38aa86c657839fc7d667776108eca716dac2" translate="yes" xml:space="preserve">
          <source>When taking an item out of flow with positioning, you will need to manage the possibility of content overlapping. Out of flow essentially means that the other elements on your page no longer know that element exists so will not respond to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7528a087cb43d26127bb0306d41288db1157e996" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; descriptor is specified for a counter style, the fallback style will be used to represent values that fall outside the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bbf5c77b20846a9188469e1261769f9491f5aa" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;-ms-wrap-flow&lt;/code&gt; property's computed value is &lt;code&gt;auto&lt;/code&gt;, the element does not become an exclusion element unless its float property's computed value is not &lt;code&gt;none&lt;/code&gt;. In that case, the element contributes its border box to its containing block's wrapping context and content flows around it according to the &lt;a href=&quot;clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; property. For more information about the impact of an exclusion element on content flow, see the &lt;a href=&quot;https://drafts.csswg.org/css-exclusions-1/#terms&quot;&gt;Terminology&lt;/a&gt; section of the CSS Exclusions Module Level 1 specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b089f217be5a115f965913d4b59702d3d5ae3d06" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;fixed&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/system&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt; is used and there are not enough symbols to cover all the list items, the fallback style will be used for the rest of the list items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151e37b5c72be88019f705c3437d97b9c09e0f10" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;system&lt;/code&gt; descriptor is &lt;code&gt;cyclic&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;alphabetic&lt;/code&gt;, &lt;code&gt;symbolic&lt;/code&gt;, or &lt;code&gt;fixed&lt;/code&gt;, use the &lt;a href=&quot;symbols&quot;&gt;&lt;code&gt;symbols&lt;/code&gt;&lt;/a&gt; descriptor instead of &lt;code&gt;additive-symbols&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00370061f5b6dd0b267f86c658886dda54e8d77f" translate="yes" xml:space="preserve">
          <source>When the browser encounters an invalid &lt;code&gt;var()&lt;/code&gt; substitution, the initial or inherited value of the property is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81448841fb2f78fea4893f8ccc0a2226913cd78" translate="yes" xml:space="preserve">
          <source>When the document &lt;em&gt;is&lt;/em&gt; in full-screen mode, the following CSS applies instead, setting the background color to a pale shade of red.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62c31996275b3d8a3a99aba622777ee859267dc" translate="yes" xml:space="preserve">
          <source>When the usage of these alternate glyphs is activated, if one character in the run doesn't have such a typographically-enhanced glyph, the whole set of characters of the run is rendered using a fallback method, synthesizing these glyphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240a478beee13439ea8957ef95c8e86bec3a7462" translate="yes" xml:space="preserve">
          <source>When the visual &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt; of this scroll container is scrolled horizontally, it must ignore snap points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64d933d9ddcae0f852e30ad765ea605aa55f33c" translate="yes" xml:space="preserve">
          <source>When the visual &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt; of this scroll container is scrolled vertically, it must ignore snap points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee69299147da0eef6a3fb87ed641b8ea359d926a" translate="yes" xml:space="preserve">
          <source>When the visual &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt; of this scroll container is scrolled, it may &quot;pass over&quot; possible snap positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6c926c861b3cc7bc60a814f877d16f4b47b9d8" translate="yes" xml:space="preserve">
          <source>When the visual &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt; of this scroll container is scrolled, it must ignore snap points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848552ddb01a9d58395889518fde38abbac5c116" translate="yes" xml:space="preserve">
          <source>When there is more content than can fit into a container, an overflow situation occurs. Understanding how overflow behaves is important in dealing with any element with a constrained size in CSS. This guide explains how overflow works when working with normal flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cdd9d534d143aaae92bf84773f5f9af020b184" translate="yes" xml:space="preserve">
          <source>When things don&amp;rsquo;t work as expected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802a2f398b77f87e615881f2c039ff6ba1b52e1d" translate="yes" xml:space="preserve">
          <source>When this property is unspecified, the same characteristics of the &lt;code&gt;visiblePainted&lt;/code&gt; value apply to SVG content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff06fa3705a575ceaf5b596f9e9d80663d76238" translate="yes" xml:space="preserve">
          <source>When to use the box values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2f13e8c0c65c53164640c91fdbfb8466a9b39a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;font-variation-settings&lt;/code&gt; it is important to note that axis names are case-sensitive. The registered axis names must be in lower case, and custom axes must be in upper case. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aec20c85771313396772e7b69b82fc14917a58f" translate="yes" xml:space="preserve">
          <source>When using an angle, &lt;code&gt;0deg&lt;/code&gt; creates a vertical gradient running bottom to top, &lt;code&gt;90deg&lt;/code&gt; creates a horizontal gradient running left to right, and so on in a clockwise direction. Negative angles run in the counterclockwise direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c9a86b72a69532c765b70de590d113ed555001" translate="yes" xml:space="preserve">
          <source>When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239126e9c058224a0ae02f9357f19a3085b2d438" translate="yes" xml:space="preserve">
          <source>When using both properties together you may get fewer columns than specified in the value for &lt;code&gt;column-count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0713330803d357a2a158c3b451dee026b1fd03bd" translate="yes" xml:space="preserve">
          <source>When using one or two unitless values, flex-basis changes from auto to 0. More information can be found in the draft for the &lt;a href=&quot;https://drafts.csswg.org/css-flexbox/#flex-common&quot;&gt;Flexible Box Layout Module.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcf785de668d0acab29766b7d5201785ebb5ab2" translate="yes" xml:space="preserve">
          <source>When using scrollbar-color property with specific color values, authors should ensure the specified colors have enough contrast between them. For keyword values, UAs should ensure the colors they use have enough contrast. See &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/G183.html&quot;&gt;Techniques for WCAG 2.0: G183: Using a contrast ratio of 3:1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf23f39d8b5b398bf530cc37ba327a5c5841bd74" translate="yes" xml:space="preserve">
          <source>When using the box alignment properties you will align content on one of two axes &amp;mdash; the inline (or main) axis, and the block (or cross) axis. The inline axis is the axis along which words in a sentence flow in the writing mode being used &amp;mdash; for English, for example, the inline axis is horizontal. The block axis is the axis along which blocks, such as paragraph elements, are laid out and it runs across the Inline axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad29971c51a65b482d0a9dc3aaeafb5afb48d4c5" translate="yes" xml:space="preserve">
          <source>When we describe flexbox as being one dimensional we are describing the fact that flexbox deals with layout in one dimension at a time &amp;mdash; either as a row or as a column. This can be contrasted with the two-dimensional model of &lt;a href=&quot;../css_grid_layout&quot;&gt;CSS Grid Layout&lt;/a&gt;, which controls columns and rows together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9637d528b5e9b114eb9db80fd861942904b87a" translate="yes" xml:space="preserve">
          <source>When we have a set of items that we want to display horizontally, we may well end up with additional space. We need to decide what to do with that space, and have a couple of options. We either display the space outside of the items &amp;mdash; therefore spacing them out with white space between or around them &amp;mdash; or we absorb the extra space inside the items and therefore need a method of allowing the items to grow and take up this space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3d3b1af8d9759ad105d5ce9a5b27bee18372de" translate="yes" xml:space="preserve">
          <source>When we specify our grid area using the &lt;code&gt;grid-area&lt;/code&gt; property we first define both start lines &lt;code&gt;block-start&lt;/code&gt; and &lt;code&gt;inline-start&lt;/code&gt;, then both end lines &lt;code&gt;block-end&lt;/code&gt; and &lt;code&gt;inline-end&lt;/code&gt;. This seems unusual at first as we are used to the physical properties of top, right, bottom and left but makes more sense if you start to think of websites as being multi-directional in writing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1e2cd3877e44c17f9ed7956327d16b6a9941a3" translate="yes" xml:space="preserve">
          <source>When working with a site in a writing mode other than a horizontal, top to bottom one, or when using writing modes for creative reasons, being able to relate to the flow of the content makes a lot of sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749f80870d450fc9ff7a02219d70e5982f18ab65" translate="yes" xml:space="preserve">
          <source>When working with flexbox you need to think in terms of two axes &amp;mdash; the main axis and the cross axis. The main axis is defined by the &lt;a href=&quot;../flex-direction&quot;&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/a&gt; property, and the cross axis runs perpendicular to it. Everything we do with flexbox refers back to these axes, so it is worth understanding how they work from the outset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c1d6eccbdbb8be5371ca142e49f615e2b8f939" translate="yes" xml:space="preserve">
          <source>When working with grid layout you have two axes available to align things against &amp;ndash; the &lt;em&gt;block axis&lt;/em&gt; and the &lt;em&gt;inline axis&lt;/em&gt;. The block axis is the axis upon which blocks are laid out in block layout. If you have two paragraphs on your page they display one below the other, so it is this direction we describe as the block axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932bf1bdb0144d9bec3fb408b800c7effe8db9dd" translate="yes" xml:space="preserve">
          <source>When wrapping flex items, the need to space them out is likely to arise. At the current time we do not have any implementations of the gap properties from the &lt;a href=&quot;https://www.w3.org/TR/css-align-3/&quot;&gt;Box Alignment module&lt;/a&gt; for Flexbox. In the future we will be able to simply use &lt;code&gt;row-gap&lt;/code&gt; and &lt;code&gt;column-gap&lt;/code&gt; for flexbox as we do for CSS Grid. At the current time you will need to use margins to achieve this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2de57f9441a75ee65fa425d242745bbff5e672" translate="yes" xml:space="preserve">
          <source>When you do anything to remove, or shift an item from where it would be placed in normal flow, you can expect to need to do some managing of the content and the content around it to prevent overlaps. Whether that involves clearing floats, or ensuring that an element with &lt;code&gt;position: absolute&lt;/code&gt; does not sit on top of some other content. For this reason methods which remove elements from being in-flow should be used with understanding of the effect that they have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d282a940ee62f715e02c0a0f1be0e425e929a2c" translate="yes" xml:space="preserve">
          <source>When you set an item to &lt;code&gt;display: none&lt;/code&gt; in order to hide it, the item is removed from the formatting structure of the page. What this means in practice is that counters ignore it, and things like transitions do not run. Using &lt;code&gt;visibility: hidden&lt;/code&gt; keeps the box in the formatting structure which is useful in that it still behaves as if it were part of the layout even though the user can&amp;rsquo;t see it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cf064cce06d12a60019981f80763c5fba4e304" translate="yes" xml:space="preserve">
          <source>When you specify an invalid &lt;code&gt;cubic-bezier&lt;/code&gt; curve, CSS ignores the whole property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0885bd8be69faba5c4603f3d4d686547555ffe" translate="yes" xml:space="preserve">
          <source>When zoomed in, both FIrefox and Chrome report the new CSS pixel size for &lt;code&gt;innerWidth&lt;/code&gt; and &lt;code&gt;clientWidth&lt;/code&gt;. The values returned for the &lt;code&gt;outerWidth&lt;/code&gt; and &lt;code&gt;outerHeight&lt;/code&gt; depend on the browser: Firefox reports the new value in CSS pixels, but Chrome returns the length in the default pixel size. When zoomed in you may get:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1997a796da5adb75a89c34816c7166f4def88fb6" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;flex-grow&lt;/code&gt; property deals with adding space in the main axis, the &lt;code&gt;flex-shrink&lt;/code&gt; property controls how it is taken away. If we do not have enough space in the container to lay out our items and &lt;code&gt;flex-shrink&lt;/code&gt; is set to a positive integer the item can become smaller than the &lt;code&gt;flex-basis&lt;/code&gt;. As with &lt;code&gt;flex-grow&lt;/code&gt; different values can be assigned in order to cause one item to shrink faster than others &amp;mdash; an item with a higher value set for &lt;code&gt;flex-shrink&lt;/code&gt; will shrink faster than its siblings that have lower values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e1f1244de85792f219998ca98c597154ff0b57" translate="yes" xml:space="preserve">
          <source>Whether a given page is &quot;left&quot; or &quot;right&quot; is determined by the major writing direction of the document. For example, if the first page has a major writing direction of left-to-right then it will be a &lt;a href=&quot;:right&quot;&gt;&lt;code&gt;:right&lt;/code&gt;&lt;/a&gt; page; if it has a major writing direction of right-to-left then it will be a &lt;code&gt;:left&lt;/code&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c95e9d46a8c8f364291854440877899e549eb7" translate="yes" xml:space="preserve">
          <source>Whether a given page is &quot;left&quot; or &quot;right&quot; is determined by the major writing direction of the document. For example, if the first page has a major writing direction of left-to-right then it will be a &lt;code&gt;:right&lt;/code&gt; page; if it has a major writing direction of right-to-left then it will be a &lt;a href=&quot;:left&quot;&gt;&lt;code&gt;:left&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e210e41d250ece083c581562e452a2bfece05a8" translate="yes" xml:space="preserve">
          <source>Whether the box establishes a local stacking context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7ed44a2100a13f8912976991a109352116577a" translate="yes" xml:space="preserve">
          <source>Whether you are in continuous media on the web or in a Paged Media format such as print or EPUB, understanding how content overflows is useful when dealing with any layout method. By understanding how overflow works in normal flow, you should find it easier to understand the implications of overflow content in layout methods such as grid and flexbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353a1ffb6509c892322a4e86e30261e8ae04b2db" translate="yes" xml:space="preserve">
          <source>Whether you use flexbox or CSS Grid to lay out a list of card components, these layout methods only work on direct children of the flex or grid component. This means that if you have variable amounts of content, the card will stretch to the height of the grid area or flex container. Any content inside uses regular block layout, meaning that on a card with less content the footer will rise up to the bottom of the content rather than stick to the bottom of the card.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60630a39f41a0459d3153b4a8160f5ebc3b1d7ff" translate="yes" xml:space="preserve">
          <source>Which CSS entities participate in the cascade</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c3fd4c3d3917208523a3b679bdb8a44047a5ef" translate="yes" xml:space="preserve">
          <source>Which CSS properties can be transitioned?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7bef1dafca498f703ddbec7e06e294d1e5158d" translate="yes" xml:space="preserve">
          <source>Which for English, in left-to-right means the order is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cacbb7c2ba081bb92d1da431ead278a00c10523" translate="yes" xml:space="preserve">
          <source>Which leads to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabbfd6cddcddae0fc2a70a1049ee2bfa377df40" translate="yes" xml:space="preserve">
          <source>Which will produce lists like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee16f6c8593c355ac929dc78e06f8c011ae7082f" translate="yes" xml:space="preserve">
          <source>While I&amp;rsquo;ve spent some time in this guide going through potential issues and fallbacks, flexbox is very much ready for you to be using in production work. This guide will help you in those cases where you do come across an issue or have the requirement to support older browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78d9975671094b8ed0d946b583f933a0a8cd94e" translate="yes" xml:space="preserve">
          <source>While certain languages will use a particular writing mode or text direction, we can also use these properties for creative effect, such as running a heading vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f2235c1f9b6df703350957ba0a656a3c41bfc5" translate="yes" xml:space="preserve">
          <source>While exploring the above patterns you have hopefully started to see how you can think through the best way to use flexbox to achieve the result that you want. Quite often you have more than one choice. Mix items that cannot stretch with those that can, use the content to inform the size, or allow flexbox to share out space in proportion. It&amp;rsquo;s up to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a1cb7d8b2dd92589f91581d417ed678e6b6788" translate="yes" xml:space="preserve">
          <source>While flexbox is a one dimensional model, it is possible to cause our flex items to wrap onto multiple lines. In doing so, you should consider each line as a new flex container. Any space distribution will happen across that line, without reference to the lines either side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c2f11b245260b17535f7fa4fbfdd15d7fd2f0e" translate="yes" xml:space="preserve">
          <source>While it is usually subtle, defined in the specification is one reason why &lt;code&gt;flex-shrink&lt;/code&gt; isn&amp;rsquo;t quite the same for negative space as &lt;code&gt;flex-grow&lt;/code&gt; is for positive space:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45652f441f338f0a07b5edbbf878c20947615cef" translate="yes" xml:space="preserve">
          <source>While more common in script typefaces, in the below example they are used to create arrows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90802d7c744ae2383c189dd878f77d8a843b5e9f" translate="yes" xml:space="preserve">
          <source>While none of these features individually will render a site useless due to their absence, each of them in turn can make a site easier to use and more memorable for its attention to detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a364ef851f0b8503cdb554d708efc3c477fc79f" translate="yes" xml:space="preserve">
          <source>While preserving its intrinsic proportions, the image is rendered at the largest size contained within, or covering, the background positioning area. If the image has no intrinsic proportions, then it's rendered at the size of the background positioning area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cba2c5464af97360311d4e9362edbe5a4b1561" translate="yes" xml:space="preserve">
          <source>While the CSS property is parsed and accepted, it does not have any effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7616f2ec3625715f94d2030b050fee0ed92a0c7" translate="yes" xml:space="preserve">
          <source>While the declarations contained in most at-rules &amp;mdash; such as those in &lt;a href=&quot;@media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;@document&quot;&gt;&lt;code&gt;@document&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;@supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt; &amp;mdash; participate in the cascade, declarations contained in &lt;a href=&quot;@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt; don't. As with &lt;code&gt;@font-face&lt;/code&gt;, only the at-rule as a whole is selected via the cascade algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17a44fdce85fde98fd6b5dbba55f786329bbdfa" translate="yes" xml:space="preserve">
          <source>While the property is recognized, values applied to it don't have any effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6aefb6f308e8d59b85a2352417ca376f3631eec" translate="yes" xml:space="preserve">
          <source>While the symbols specified in the symbols descriptor is used for constructing marker representation by most algorithms, some systems such as 'additive' rely on &lt;em&gt;additive tuples&lt;/em&gt; described in this descriptor. Each additive tuple consists of a counter symbol and a non negative integer weight. The additive tuples must be specified in the descending order of their weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3b8b5b923b65206d157fbd76a152285def341b" translate="yes" xml:space="preserve">
          <source>While this may all seem a little confusing, the rule to remember is that unless you do something to change it, flex items lay themselves out in the direction that words are laid out in the language of your document along the inline, row axis. &lt;code&gt;flex-start&lt;/code&gt; will be where the start of a sentence of text would begin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51675268ca1e4bcb22c40f15970ba27669d994e2" translate="yes" xml:space="preserve">
          <source>While this was originally done to compensate for the ink and paper printing process (very thin lines at small sizes often didn&amp;rsquo;t print, giving the letterforms a broken appearance), it translates well to digital displays when compensating for screen quality and physical size rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961e46ee34ea93481313fde96c0cdabc14a1d584" translate="yes" xml:space="preserve">
          <source>While you can choose any name, if you append &lt;code&gt;-start&lt;/code&gt; and &lt;code&gt;-end&lt;/code&gt; to the lines around an area, as I have in the example above, grid will create you a named area of the main name used. Taking the above example, I have &lt;code&gt;content-start&lt;/code&gt; and &lt;code&gt;content-end&lt;/code&gt; both for rows and for columns. This means I get a grid area named &lt;code&gt;content&lt;/code&gt;, and could place something in that area should I wish to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ec23feb25ccc401624829872aeaca11be725f4" translate="yes" xml:space="preserve">
          <source>Why choose flexbox?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd838fb78ff4d7c6d74acc276d90fabc932192b" translate="yes" xml:space="preserve">
          <source>Why do we need logical properties?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366ee9168a8f273a69cdd6b4bfef90bd7329df15" translate="yes" xml:space="preserve">
          <source>Why you would use them?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5227f79f09f46b17f41ba1be65adb7772a1e262b" translate="yes" xml:space="preserve">
          <source>Why? Because the &lt;code&gt;animationstart&lt;/code&gt; event fires as soon as the animation starts, and in our case, that happens before our code runs. So we&amp;rsquo;ll start the animation ourselves by setting the class of the element to the style that gets animated after the fact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58ddf50c5ea5c03802da919dd5953bbf82ebd74" translate="yes" xml:space="preserve">
          <source>Width</source>
          <target state="translated">Width</target>
        </trans-unit>
        <trans-unit id="5a0471cb858d4e570d9ed9f19da5ad4a9e9b0dd4" translate="yes" xml:space="preserve">
          <source>Width (represented by the &lt;code&gt;wdth&lt;/code&gt; tag) defines the design axis of how narrow or wide (condensed or extended, in typographic terms) the letterforms can be. This is typically set in CSS using the &lt;a href=&quot;../font-stretch&quot;&gt;&lt;code&gt;font-stretch&lt;/code&gt;&lt;/a&gt; property, with values expressed as a percentage above or below &amp;lsquo;normal&amp;rsquo; (100%), any number greater than 0 is technically valid&amp;mdash;though it is far more likely that the range would fall closer to the 100% mark, such as 75%-125%. If a number value supplied is outside the range encoded in the font, the browser should render the font at the closest value allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848cecda328aa387331ba39f49a091246e6b7cb6" translate="yes" xml:space="preserve">
          <source>Width and height example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc551718ecc4906d301d99f9d42ab140ece8b59" translate="yes" xml:space="preserve">
          <source>Width and margin-left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92b8148be8dbea060c617b02baaef4c0a2c81eb" translate="yes" xml:space="preserve">
          <source>Width of the rendering surface of the output device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d6dbe7c8059764dbea82fb53c401e37ce9e612" translate="yes" xml:space="preserve">
          <source>Width of the viewport</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e9cc4669d99ccaaf5ce925fe8aa5c9841fe412" translate="yes" xml:space="preserve">
          <source>Width-to-height aspect ratio of the output device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a278b12b6a83d38ba5251b427d47d9c27d4d210" translate="yes" xml:space="preserve">
          <source>Width-to-height aspect ratio of the viewport</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a856f106eeeb7dfeca22a9434b17458bd92622" translate="yes" xml:space="preserve">
          <source>Will display the content in two columns (if you're using a multi-column compliant browser):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dfc0a6c92707948578891c51d98c6443be63cc" translate="yes" xml:space="preserve">
          <source>Window</source>
          <target state="translated">Window</target>
        </trans-unit>
        <trans-unit id="5926375a27b167d522e00d16caeb70d390f65ce4" translate="yes" xml:space="preserve">
          <source>Window background. Should be used with the &lt;code&gt;WindowText&lt;/code&gt; foreground color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afb42ea27915e02e903bb0455f8bd59dde6b17f" translate="yes" xml:space="preserve">
          <source>Window frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303d4aa28d21db571335d417316e7147f4cdccb2" translate="yes" xml:space="preserve">
          <source>WindowFrame</source>
          <target state="translated">WindowFrame</target>
        </trans-unit>
        <trans-unit id="af1f0ec13e54170a3dd6e12df0e47b788ec26a0d" translate="yes" xml:space="preserve">
          <source>WindowText</source>
          <target state="translated">WindowText</target>
        </trans-unit>
        <trans-unit id="7411540c9afd173fe17b2f0b1173a61a06db70ae" translate="yes" xml:space="preserve">
          <source>Windows High Contrast Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013253102c8f8875b38916aa030eb4ff877ab191" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;display: flow-root;&lt;/code&gt; on the &lt;code&gt;div&lt;/code&gt;, everything inside that container participates in the block formatting context of that container, and floats will not poke out of the bottom of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ace1e4ac1b3258899c1218db74e4dac332c434f" translate="yes" xml:space="preserve">
          <source>With CSS you can make it smooth without any extra effort. Simply add a transition to the element and any change will happen smoothly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0585ab50099e51e18e0f3b6fe7b89f07f18e78e5" translate="yes" xml:space="preserve">
          <source>With a &lt;em&gt;fixed positioned element&lt;/em&gt;, the containing block is the viewport. The position of the element is absolute within the viewport. Scrolling does not change the position of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e29997b20872190d9049569500c1bb4e6d7f762" translate="yes" xml:space="preserve">
          <source>With a function, use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f209501389ca9cfc29043357914ed8885608fd" translate="yes" xml:space="preserve">
          <source>With a grid area as the parent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40293e837256178b8f1f6b467ff46cc287d01a11" translate="yes" xml:space="preserve">
          <source>With a solid document you can begin to add your layout, it is likely you will be using &lt;a href=&quot;../media_queries&quot;&gt;media queries&lt;/a&gt; to create additional columns and make changes for different screen sizes and devices. Grid can be really very useful here, elements deprioritized in the mobile source order can be moved into a sidebar in a desktop layout, for example. The key here is to keep testing, a very simple test is to &lt;em&gt;tab around the document&lt;/em&gt;. Does that order still make sense? Check that you do not end up leaping from the top to the bottom of the layout in a peculiar way. If so that would be a sign that you need to address something about the layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2ee9fb4bc1bd252f472a3055ae59625544b883" translate="yes" xml:space="preserve">
          <source>With a variable font, all of those permutations can be contained in a single file. That file would be larger than a single font, but in most cases smaller or about the same size as the 4 you might load for body copy. The advantage in choosing the variable font is that you have access to the entire range of weights, widths, and styles available, rather than being constrained to only the few that you previously would have loaded separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6923180af7245b08edc076b849d4a6ae5a4f105f" translate="yes" xml:space="preserve">
          <source>With all the flex tools at your disposal you will find that most tasks can be achieved, although it might take a little bit of experimentation at first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cd6a1eb42ffb5c23db9cda261845d51ff83530" translate="yes" xml:space="preserve">
          <source>With borders, the width, color, and style can be simplified into one declaration. For example, the following CSS ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484e0ddab49303ac064cc3beff803d467c071cc7" translate="yes" xml:space="preserve">
          <source>With each repetition, the positions of the color stops are shifted by a multiple of the dimensions of the basic radial gradient (the distance between the last color stop and the first). Thus, the position of each ending color stop coincides with a starting color stop; if the color values are different, this will result in a sharp visual transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb18d46b8bc9e56ace43986900d470ccaab73360" translate="yes" xml:space="preserve">
          <source>With each repetition, the positions of the color stops are shifted by a multiple of the length of the basic linear gradient (the distance between the last color stop and the first). Thus, the position of each ending color stop coincides with a starting color stop; if the color values are different, this will result in a sharp visual transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152bd338235dca3eefbf8a833d1a45896c66c62f" translate="yes" xml:space="preserve">
          <source>With help from:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cae5daf896ddda9c9f570ac5b04e474fa2290fd" translate="yes" xml:space="preserve">
          <source>With one value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2c3534313eb982744524b6eeb218b3c24b1a55" translate="yes" xml:space="preserve">
          <source>With regard to flex items, if an item was floated or cleared and then becomes a flex item due to the parent having &lt;code&gt;display: flex&lt;/code&gt; applied, the floating and clearing will no longer happen, and the item will not be taken out of normal flow in the way that floats are. If you have used the &lt;a href=&quot;../vertical-align&quot;&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/a&gt; property, as used with &lt;code&gt;inline-block&lt;/code&gt; or table layout for alignment, this will no longer affect the item and you can use the alignment properties of flexbox instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cda0ad47d085cbba50da429af10747c75a8ef1" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;../grid-area&quot;&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/a&gt; property I can assign each of these areas a name. This will not yet create any layout, but we now have named areas to use in a layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f831e238f4eee06317eee3254f079163fe5ab057" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;flex-grow&lt;/code&gt; property set to a positive integer, flex items can grow along the main axis from their &lt;code&gt;flex-basis&lt;/code&gt;. This will cause the item to stretch and take up any available space on that axis, or a proportion of the available space if other items are allowed to grow too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0e19ea7a6abbfee116d0b2ddce99a284cb7369" translate="yes" xml:space="preserve">
          <source>With the block and inline axis able to change direction, the logical values for the alignment properties start to make more sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff32542c3f7e263fb3e305d28be8b995f8fc1996" translate="yes" xml:space="preserve">
          <source>With the preference set to &lt;code&gt;false&lt;/code&gt;, the property still works with SVGs via &lt;code&gt;chrome://&lt;/code&gt; or &lt;code&gt;resource://&lt;/code&gt; URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e001c6b47078688b997e03ca766b0823bb0014" translate="yes" xml:space="preserve">
          <source>With this implementation, the hint content is available even if information is entered into the input field, and the input appears free of preexisting input when the page is loaded. Most screen reading technology will use &lt;code&gt;aria-describedby&lt;/code&gt; to read the hint after the input's label text is announced, and the person using the screen reader can mute it if they find the extra information unnecessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9342a5f3bdf02aaa7c9d9e61707f83ebed93eff5" translate="yes" xml:space="preserve">
          <source>With this notation, it is possible to describe, and therefore compose, most common transformations: rotations, scaling, or skewing. (In fact, all transformations that are linear functions can be described.) Composite transformations are effectively applied in order from right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a0981200fc8d6944edd62de4c7c6b24c418480" translate="yes" xml:space="preserve">
          <source>With two values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a0496466de0cbf02b94de5d425929fef6e122b" translate="yes" xml:space="preserve">
          <source>Within a stacking context, child elements are stacked according to the same rules previously explained. Importantly, the z-index values of its child stacking contexts only have meaning in this parent. Stacking contexts are treated atomically as a single unit in the parent stacking context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e72ed2261050133560be68f01924315fbf10e8" translate="yes" xml:space="preserve">
          <source>Without changing the origin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6419237ce9beaaac289bceb0f8d02816122576" translate="yes" xml:space="preserve">
          <source>Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc95908933a3f9e81ca80aa6a855018ea53d5efe" translate="yes" xml:space="preserve">
          <source>Words are broken for line-wrapping only where characters inside the word suggest line break opportunities. See &lt;a href=&quot;#Suggesting_line_break_opportunities&quot;&gt;Suggesting line break opportunities&lt;/a&gt; below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce39408d53c36b2c3d12dff833d257c7063a42e" translate="yes" xml:space="preserve">
          <source>Words are not broken at line breaks, even if characters inside the words suggest line break points. Lines will only wrap at whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd81953275e4c603fc6e296163f16395c6ee5da7" translate="yes" xml:space="preserve">
          <source>Working Draft</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f4209a7558cad20a99db0c3e840dccb92a5463" translate="yes" xml:space="preserve">
          <source>Working from a &lt;code&gt;flex-basis&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; this means that the available space is distributed as follows. We need to add up the flex grow factors, then divide the total amount of positive free space in the flex container by that number, which in this case is 4. We then share out the space according to the individual values &amp;mdash; the first item gets one part, the second one part, the third two parts. This means that the third item is twice the size of the first and second items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750c191adf08e3df62ff20c3002efc35b9a5fb3b" translate="yes" xml:space="preserve">
          <source>Working with older browsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3447e7954fa5698ae957a33210094d617b1dc00" translate="yes" xml:space="preserve">
          <source>Wrap</source>
          <target state="translated">Wrap</target>
        </trans-unit>
        <trans-unit id="cae8dba2cd2d732b9db17f5aad947364741ee36b" translate="yes" xml:space="preserve">
          <source>Wrapping and flex-direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eee36dd89dcc048fe9e0c23e7c2a5e375fa8b35" translate="yes" xml:space="preserve">
          <source>Wrapping works as you might expect when combined with &lt;code&gt;flex-direction&lt;/code&gt;. If &lt;code&gt;flex-direction&lt;/code&gt; is set to &lt;code&gt;row-reverse&lt;/code&gt; then the items will start from the end edge of the container and lay themselves out in reverse ordered lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dede73e4ed4711503913aeb24fe5c9ce90a3e3b1" translate="yes" xml:space="preserve">
          <source>Writing Modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1daa374d6d4c6bd309b0039aa3d6fe4f7d97d7" translate="yes" xml:space="preserve">
          <source>Writing Modes are more than just left to right and right to left text, and the &lt;code&gt;writing-mode&lt;/code&gt; property helps us display text running in other directions. The &lt;a href=&quot;../writing-mode&quot;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/a&gt; property can have values of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de20b353c9a4e14570911a1da7f70b8531ea7e39" translate="yes" xml:space="preserve">
          <source>Writing modes in grid layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c032adc1ff629c9b66f22749ad667e6beadf144b" translate="yes" xml:space="preserve">
          <source>X</source>
          <target state="translated">X</target>
        </trans-unit>
        <trans-unit id="b28001c2a6ddedad15acbc5c84735c7387de79be" translate="yes" xml:space="preserve">
          <source>XBL Reference: Binding Attachment and Detachment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a57b35c574f50ec1a0fda8af58fb77bb739ee1f" translate="yes" xml:space="preserve">
          <source>XBL is deprecated and being removed. See &lt;a href=&quot;https://bugzil.la/1397874&quot;&gt;bug 1397874&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="0ca80d46539fce3e35417e25c767f1a0c0e9f184" translate="yes" xml:space="preserve">
          <source>XPath feature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9ea07c52b48c7d75cc4f1a81fd5d9af1cf730b" translate="yes" xml:space="preserve">
          <source>XUL &lt;a href=&quot;image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; elements and &lt;a href=&quot;:-moz-tree-image&quot;&gt;&lt;code&gt;:-moz-tree-image&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:-moz-tree-twisty&quot;&gt;&lt;code&gt;:-moz-tree-twisty&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-tree-checkbox&quot;&gt;&lt;code&gt;:-moz-tree-checkbox&lt;/code&gt;&lt;/a&gt; pseudo-elements. &lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;-moz-image-region&lt;/code&gt; only works with &lt;a href=&quot;image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; elements where the icon is specified using &lt;a href=&quot;list-style-image&quot;&gt;&lt;code&gt;list-style-image&lt;/code&gt;&lt;/a&gt;. It will not work with XUL &lt;code&gt;&amp;lt;image src=&quot;url&quot; /&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a540e93abc1d27f4d04d8f6ec17d43548f6c64d2" translate="yes" xml:space="preserve">
          <source>XUL Tutorial: Introduction to XBL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="d90e416bdefc1cccd5bb2dc2292067bfe77087b1" translate="yes" xml:space="preserve">
          <source>You (or others) use inline styles on elements themselves. This is considered very bad practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c2d30014dc5fe7a096a0bca553e422bcb1b621" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://fullscreen-requestfullscreen-demo.glitch.me/&quot;&gt;see this example in action&lt;/a&gt; or &lt;a href=&quot;https://glitch.com/edit/#!/fullscreen-requestfullscreen-demo&quot;&gt;view or remix the code&lt;/a&gt; on &lt;a href=&quot;http://glitch.com/&quot;&gt;Glitch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fb2f973d4ff73074ec8bee969313e4f11c7222" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://mdn.mozillademos.org/files/8179/box-decoration-break-inline.html&quot;&gt;try the two inline examples above&lt;/a&gt; in your browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e41dc0566ee0497bb0177f16b328b40e0d3c69" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://mdn.mozillademos.org/files/8187/box-decoration-break-block.html&quot;&gt;try the block examples above&lt;/a&gt; in your browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877c94b786646d33b6211755341fde76bd188d65" translate="yes" xml:space="preserve">
          <source>You can add the various Box Values after your Basic Shape definition. Therefore the default behaviour is as if you have defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce4f9e3f79936918a68cc8f6b12a4a8421ab44c" translate="yes" xml:space="preserve">
          <source>You can adjust how the replaced element's object's intrinsic size (that is, its natural size) is adjusted to fit within the element's box using the &lt;a href=&quot;object-fit&quot;&gt;&lt;code&gt;object-fit&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735a055854508c9cdb2f01911df2d635c8b02370" translate="yes" xml:space="preserve">
          <source>You can also add the Box Value that you wish to use as a reference box. In the example below change the reference box from &lt;code&gt;margin-box&lt;/code&gt; to &lt;code&gt;border-box&lt;/code&gt;, &lt;code&gt;padding-box&lt;/code&gt; or &lt;code&gt;content-box&lt;/code&gt; to see how the reference box used as the starting point before offsets are calculated changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b44878db1a6f3f75584226777c419d6d4f2645a" translate="yes" xml:space="preserve">
          <source>You can also ask grid to auto-place items by column. Using the property &lt;a href=&quot;../grid-auto-flow&quot;&gt;&lt;code&gt;grid-auto-flow&lt;/code&gt;&lt;/a&gt; with a value of &lt;code&gt;column&lt;/code&gt;. In this case grid will add items in rows that you have defined using &lt;a href=&quot;../grid-template-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt;. When it fills up a column it will move onto the next explicit column, or create a new column track in the implicit grid. As with implicit row tracks, these column tracks will be auto sized. You can control the size of implicit column tracks with &lt;a href=&quot;../grid-auto-columns&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt;, this works in the same way as &lt;a href=&quot;../grid-auto-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad971b11a1d56ac409bbf2d398f17029564e3988" translate="yes" xml:space="preserve">
          <source>You can also define a set size for tracks created in the implicit grid with the &lt;a href=&quot;../grid-auto-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-auto-columns&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8041a8b717341f39795c7703decabb2543490ece" translate="yes" xml:space="preserve">
          <source>You can also pass in a track listing, this will repeat. The following track listing will create an initial implicit row track as 100 pixels and a second as &lt;code&gt;200px&lt;/code&gt;. This will continue for as long as content is added to the implicit grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4592a053ff794872422fa9252d16bb10052d43" translate="yes" xml:space="preserve">
          <source>You can also specify both the horizontal and vertical sizes of the image, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c96757f9ee92ae9d97e72d0484532e6eae312b" translate="yes" xml:space="preserve">
          <source>You can also target multiple devices. For instance, this &lt;code&gt;@media&lt;/code&gt; rule uses two media queries to target both screen and print devices:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023b53d73e6c077fbffde2239bfde118de01ee7a" translate="yes" xml:space="preserve">
          <source>You can also try changing the &lt;code&gt;writing-mode&lt;/code&gt; from &lt;code&gt;horizontal-tb&lt;/code&gt; to &lt;code&gt;vertical-rl&lt;/code&gt;. Again, notice how the margins stay in the same place for the first box, but switch around to follow the text direction in the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c031c9e7e62a23c44b9cdf8203239b5a0e98e474" translate="yes" xml:space="preserve">
          <source>You can also try changing the &lt;code&gt;writing-mode&lt;/code&gt; from &lt;code&gt;horizontal-tb&lt;/code&gt; to &lt;code&gt;vertical-rl&lt;/code&gt;. Again, notice how the padding stays in the same place for the first box, but switches around to follow the text direction in the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb33741640a33eb551da11c81ff862dcd89be305" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;calc()&lt;/code&gt; with &lt;a href=&quot;css_variables&quot;&gt;CSS variables&lt;/a&gt;. Consider the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cdfdcc6b4880a4662e45e4dafe1ac30082d64e" translate="yes" xml:space="preserve">
          <source>You can also use multiple column layout as your legacy browser plan, as the &lt;code&gt;column-*&lt;/code&gt; properties do not apply when applied to a grid container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62832849cc614a77b78b1741b06bcb553420e52" translate="yes" xml:space="preserve">
          <source>You can also use negative values with order, which can be quite useful. If you want to make one item display first, and leave the order of all other items unchanged, you can give that item an order of &lt;code&gt;-1&lt;/code&gt;. As this is lower than 0 the item will always be displayed first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab0e80925199581bceafb3e69cfca190948939f" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;span&lt;/code&gt; keyword here. My next item will be placed from the 7th line named &lt;code&gt;col-start&lt;/code&gt; and span 3 lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b885978de88d17961890a56189ca237663b7df1f" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;span&lt;/code&gt; keyword in the value of &lt;code&gt;grid-row-start&lt;/code&gt;/&lt;code&gt;grid-row-end&lt;/code&gt; and &lt;code&gt;grid-column-start/grid-column-end&lt;/code&gt;. The following two examples will create the same grid area. In the first we set the start row line, then the end line we explain that we want to span 3 lines. The area will start at line 1 and span 3 lines to line 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd2049072bbac34a23a57dd8d67d2dd6725548a" translate="yes" xml:space="preserve">
          <source>You can also use the value &lt;code&gt;space-between&lt;/code&gt; to take all the spare space after the items have been laid out, and share it out evenly between the items so there will be an equal amount of space between each item. To cause an equal amount of space on the right and left of each item use the value &lt;code&gt;space-around&lt;/code&gt;. With &lt;code&gt;space-around&lt;/code&gt;, items have a half-size space on either end. Or, to cause items to have equal space around them use the value &lt;code&gt;space-evenly&lt;/code&gt;. With &lt;code&gt;space-evenly&lt;/code&gt;, items have a full-size space on either end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f7aa9228f6f559db3b6ecc8acf742ee4508f85" translate="yes" xml:space="preserve">
          <source>You can alter the alignment of the replaced element's content object within the element's box using the &lt;a href=&quot;object-position&quot;&gt;&lt;code&gt;object-position&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82db4eaf6dc3373a2ada58dc5aef52f799281f24" translate="yes" xml:space="preserve">
          <source>You can apply &lt;strong&gt;multiple backgrounds&lt;/strong&gt; to elements. These are layered atop one another with the first background you provide on top and the last background listed in the back. Only the last background can include a background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203b3071349d089ad463536a5655fb02242dd5d4" translate="yes" xml:space="preserve">
          <source>You can assign some or all of the lines in your grid a name when you define your grid with the &lt;code&gt;grid-template-rows&lt;/code&gt; and &lt;code&gt;grid-template-columns&lt;/code&gt; properties. To demonstrate I&amp;rsquo;ll use the simple layout created in the guide on line-based placement. This time I&amp;rsquo;ll create the grid using named lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef079b45f91efd05aead42951c8e3e4c6701b249" translate="yes" xml:space="preserve">
          <source>You can change the gap by using any length unit as the value of &lt;code&gt;column-gap&lt;/code&gt;. In the example below, the &lt;code&gt;column-gap&lt;/code&gt; is set to 40px.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd922ca275931a2f83e153b0dca33fc7a83bc85" translate="yes" xml:space="preserve">
          <source>You can combine the two properties &lt;code&gt;flex-direction&lt;/code&gt; and &lt;code&gt;flex-wrap&lt;/code&gt; into the &lt;a href=&quot;../flex-flow&quot;&gt;&lt;code&gt;flex-flow&lt;/code&gt;&lt;/a&gt; shorthand. The first value specified is &lt;code&gt;flex-direction&lt;/code&gt; and the second value is &lt;code&gt;flex-wrap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f6ad4fab90f1765272bdefbbe9bd906da17e05" translate="yes" xml:space="preserve">
          <source>You can control inheritance for all properties at once using the &lt;a href=&quot;all&quot;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt; shorthand property, which applies its value to all properties. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b721416cd5a8a063016d28f4bb6913bf34f582" translate="yes" xml:space="preserve">
          <source>You can control the individual components of the transition with the following sub-properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad84637305018703a4fe435e80e2a44cf1c34500" translate="yes" xml:space="preserve">
          <source>You can create a grid with fixed track sizes &amp;ndash; using pixels for example. This sets the grid to the specified pixel which fits to the layout you desire. You can also create a grid using flexible sizes with percentages or with the new &lt;code&gt;fr&lt;/code&gt; unit designed for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e91b45cccce77312e6f35f7c381cf364edacdb" translate="yes" xml:space="preserve">
          <source>You can create some interesting effects however with just this simple technique. In my final example of this section, I have floated two elements left and right, giving each a border-radius of 100% in the direction closest to the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b94e692efe6c317788c3f424d84cf6d8725c4c0" translate="yes" xml:space="preserve">
          <source>You can define an explicit grid with grid layout but the specification also deals with the content added outside of a declared grid, which adds additional rows and columns when needed. Features such as adding &amp;ldquo;as many columns that will fit into a container&amp;rdquo; are included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa20d48f796743c13b92df26a24b8739ef979057" translate="yes" xml:space="preserve">
          <source>You can disable the glow using the following CSS, or completely override it to alter the appearance of invalid fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52218391e7aaec355e2bc55976f095075f27f48" translate="yes" xml:space="preserve">
          <source>You can do this with both the shorthand &lt;a href=&quot;../background&quot;&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt; property and the individual properties thereof except for &lt;a href=&quot;../background-color&quot;&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/a&gt;. That is, the following background properties can be specified as a list, one per background: &lt;a href=&quot;../background&quot;&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-attachment&quot;&gt;&lt;code&gt;background-attachment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-clip&quot;&gt;&lt;code&gt;background-clip&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-origin&quot;&gt;&lt;code&gt;background-origin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-repeat&quot;&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../background-size&quot;&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740b9c704a56fe87a5a0f5ae4a9184134e9a15f3" translate="yes" xml:space="preserve">
          <source>You can even make the gradient run diagonally, from corner to corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe52245d4a76f128adac3b1363d1d9f2a7fa6c8" translate="yes" xml:space="preserve">
          <source>You can even stack gradients with other gradients. As long as the top gradients aren't entirely opaque, the gradients below will still be visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01245396d8740625cc4a24f8ffd12a5f126a6771" translate="yes" xml:space="preserve">
          <source>You can experiment directly in these live examples, to see how changing the gradient will change the path of your shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d283347f4ee7b5d235846b1131381de5362cf5d9" translate="yes" xml:space="preserve">
          <source>You can find a number of variable fonts examples at &lt;a href=&quot;https://v-fonts.com/&quot;&gt;v-fonts.com&lt;/a&gt; and &lt;a href=&quot;https://www.axis-praxis.org/&quot;&gt;axis-praxis.org&lt;/a&gt;; see also our &lt;a href=&quot;css_fonts/variable_fonts_guide&quot;&gt;Variable fonts guide&lt;/a&gt; for more information and usage information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1918a34b8a8244eef0de43931194157b2b050862" translate="yes" xml:space="preserve">
          <source>You can find more information about border colors in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Applying_color#Borders&quot;&gt;Borders&lt;/a&gt; in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Applying_color&quot;&gt;Applying color to HTML elements using CSS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab51409ad66daf106bddb98c4781b61396b7522" translate="yes" xml:space="preserve">
          <source>You can get additional control over animations &amp;mdash; as well as useful information about them &amp;mdash; by making use of animation events. These events, represented by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent&quot;&gt;&lt;code&gt;AnimationEvent&lt;/code&gt;&lt;/a&gt; object, can be used to detect when animations start, finish, and begin a new iteration. Each event includes the time at which it occurred as well as the name of the animation that triggered the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0a9c62f1617a74c7be695ce70fd63ce55afffd" translate="yes" xml:space="preserve">
          <source>You can however control the size of these rows with the property &lt;code&gt;grid-auto-rows&lt;/code&gt;. To cause all created rows to be 100 pixels tall for example you would use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0745de8f95f409d0947e0846f88d1257745afa92" translate="yes" xml:space="preserve">
          <source>You can learn more about programmatically using media queries in &lt;a href=&quot;media_queries/testing_media_queries&quot;&gt;Testing media queries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a05dadb1ee85a044a693aaac01f1040b059cfc0" translate="yes" xml:space="preserve">
          <source>You can list the keyframe percentages in any order; they will be handled in the order they should occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dac6e63c90db5be7a5736ad370cd30ade576888" translate="yes" xml:space="preserve">
          <source>You can only specify a single value if it is valid for both &lt;code&gt;align-content&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b55ed41e2cfedcb07ade2c5853db4e9fdef8d49" translate="yes" xml:space="preserve">
          <source>You can optionally include additional keyframes that describe intermediate steps between the start and end of the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1364ec86c76e640c61205129cff4d1fcc098e6" translate="yes" xml:space="preserve">
          <source>You can place items into a precise location on the grid using line numbers, names or by targeting an area of the grid. Grid also contains an algorithm to control the placement of items not given an explicit position on the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b3a4f2823b79de936114c89adcfa3e3f166a6b" translate="yes" xml:space="preserve">
          <source>You can play around with the values in this live example below and see how that changes the order. Also, try changing &lt;code&gt;flex-direction&lt;/code&gt; to &lt;code&gt;row-reverse&lt;/code&gt; and see what happens &amp;mdash; the start line is switched so the ordering begins from the opposite side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c5d2afd3c2c864fe382b525d06968a74c96605" translate="yes" xml:space="preserve">
          <source>You can play with the alignment, aligning the item to the start with &lt;code&gt;flex-start&lt;/code&gt; or end with &lt;code&gt;flex-end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2edc44b4ee8d9f9f9cd30677d51f7850184eb85" translate="yes" xml:space="preserve">
          <source>You can play with this here: &lt;a href=&quot;http://jsfiddle.net/9h261pzo/291/&quot;&gt;http://jsfiddle.net/9h261pzo/291/&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f52b39231fedc5327634f95324b7fc91a14cb25" translate="yes" xml:space="preserve">
          <source>You can polyfill &lt;code&gt;:focus-visible&lt;/code&gt; using &lt;a href=&quot;https://github.com/WICG/focus-visible&quot;&gt;focus-visible.js&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9562a2aa9ee6271943420fb8a48abe3e562d8b1" translate="yes" xml:space="preserve">
          <source>You can provide more than two arguments, if you have multiple constraints to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2391f9109448097bade345977bf2470df7ed0134" translate="yes" xml:space="preserve">
          <source>You can read more about margin collapsing in our article &lt;a href=&quot;../css_box_model/mastering_margin_collapsing&quot;&gt;Mastering Margin Collapsing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62f5bc81c71ca3f1631cd9ed9c2fec9f57e9b44" translate="yes" xml:space="preserve">
          <source>You can read more about the relationship between flexbox and the Writing Modes specification in a later article, however the following description should help explain why we do not talk about left and right and top and bottom when we describe the direction that our flex items flow in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1558529f8b28f4025200fa86000706e9fa1a5e" translate="yes" xml:space="preserve">
          <source>You can see from the live example below that in order to create gaps that do not also create a gap at the edges of the container, we need to use negative margins on the flex container itself. Any border on the flex container is then moved to a second wrapper in order that the negative margin can pull the items up to that wrapper element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ec952c6dbc94bde4a9b1cbbaad918c68874368" translate="yes" xml:space="preserve">
          <source>You can see how the item is aligned by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts&quot;&gt;Firefox Grid Highlighter&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a082cf1d2fbf08a9d7e456e249ece7d5a2130c6" translate="yes" xml:space="preserve">
          <source>You can see how this then leaves gaps in the grid, as for the auto-placed items if grid comes across an item that doesn&amp;rsquo;t fit into a track, it will move to the next row until it finds a space the item can fit in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48494c5f3e5a9c39e0ee5b5021a644a205536e2" translate="yes" xml:space="preserve">
          <source>You can see in the live example below how this looks. Try editing the items or adding additional items in order to test the initial behavior of flexbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1641b5df464a0508140e372febbaee5d8ccf62" translate="yes" xml:space="preserve">
          <source>You can see that the item is taking the area from grid row line 2 to 4, and starting after line 1. Then it is offset in that area using the top and left properties. However, it has been taken out of flow as is usually for absolutely positioned items and so the auto-placement rules now place items into the same space. The item also doesn&amp;rsquo;t cause the additional row to be created to span to row line 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c8a7ac94d83e0175870e7e9207486955be2b9b" translate="yes" xml:space="preserve">
          <source>You can see the background colour of the following paragraph running underneath, it is only the line boxes of that paragraph that have been shortened to cause the effect of wrapping content around the float. The box of our paragraph is still displaying according to the rules of normal flow. This is why, to make space around a floated item, you must add a margin to the item, in order to push the line boxes away from it. You cannot apply anything to the following in-flow content to achieve that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff941999748d133190dd1e52322dcbc96c51b79" translate="yes" xml:space="preserve">
          <source>You can see the effect of &lt;code&gt;animation-fill-mode&lt;/code&gt; in the following example. It demonstrates how, for an animation that runs for an infinite time, you can cause it to remain in its final state rather than reverting to the original state (which is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29613ac6bba15a541d59e2c4e5814c9b30927ac" translate="yes" xml:space="preserve">
          <source>You can see the layout taking shape in the value of &lt;a href=&quot;../grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;header&lt;/code&gt; spans over two column tracks, as does the &lt;code&gt;nav&lt;/code&gt;. In the third row track we have the &lt;code&gt;sidebar&lt;/code&gt; alongside the &lt;code&gt;content&lt;/code&gt;. In the fourth row track I have chosen to place my &lt;code&gt;ad&lt;/code&gt; content &amp;ndash; so it appears under the sidebar, then the &lt;code&gt;footer&lt;/code&gt; next to it under the content. I&amp;rsquo;m using a flexbox on the navigation to display it in a row spaced out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79af4a3f953bff80c37d3e077b51cb158dc7113e" translate="yes" xml:space="preserve">
          <source>You can see the named lines in the image, note that some lines have two names - for example &lt;code&gt;sd-end&lt;/code&gt; and &lt;code&gt;main-start&lt;/code&gt; refer to the same column line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079f9838ba6879c1acda80374715e96a8637c50a" translate="yes" xml:space="preserve">
          <source>You can see the same example as used for &lt;a href=&quot;../align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt;, below. This time we are applying the &lt;a href=&quot;../justify-self&quot;&gt;&lt;code&gt;justify-self&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60a89857e754e3f568b7619c37dd0ceab9e4d88" translate="yes" xml:space="preserve">
          <source>You can see the threshold in action if we use a gradient as the image on which to define our shape. In the example below, if you change the threshold the path that the shape takes changes based on the level of opacity you have selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d63dab28a5397035e14fdbf815f88dc522a4e0" translate="yes" xml:space="preserve">
          <source>You can see this &lt;code&gt;min-content&lt;/code&gt; flooring happen in the below example, where the &lt;code&gt;flex-basis&lt;/code&gt; is resolving to the size of the content. If you change the width on the flex container &amp;mdash; increasing it to 700px for example &amp;mdash; and then reduce the flex item width, you can see that the first two items will wrap, however they will never become smaller than that &lt;code&gt;min-content&lt;/code&gt; size. As the box gets smaller space is then just removed from the third item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56936c1a53dc7994e8c73516e20470d75843cf48" translate="yes" xml:space="preserve">
          <source>You can specify a different &lt;code&gt;&amp;lt;repeat-style&amp;gt;&lt;/code&gt; for each mask image, separated by commas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16aa8ed85a39547f912d27af15b431304de2f067" translate="yes" xml:space="preserve">
          <source>You can style visited links, but there are limits to which styles you can use. Only the following styles can be applied to visited links:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481b2c112e4f818415f76e3cb812b734cb29d236" translate="yes" xml:space="preserve">
          <source>You can switch them to display in the block direction for the language of your document by selecting &lt;code&gt;flex-direction: column&lt;/code&gt;. Then &lt;code&gt;flex-start&lt;/code&gt; will then be where the top of your first paragraph of text would start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610c223aa28072c372964c3ea673fc1356fa85f7" translate="yes" xml:space="preserve">
          <source>You can take a look at the code of this example below. Change the size of the container or nested element and the nested element always remains centered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b5f0269b2a3b2a77b5b2f5e1fb3aa9eeb6a4da" translate="yes" xml:space="preserve">
          <source>You can test for support of logical properties and values using feature queries. For example you could set a &lt;a href=&quot;../width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;, test for &lt;a href=&quot;../inline-size&quot;&gt;&lt;code&gt;inline-size&lt;/code&gt;&lt;/a&gt; and, if it is supported, set the &lt;code&gt;width&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt; and the &lt;code&gt;inline-size&lt;/code&gt; to the original &lt;code&gt;width&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807d394f313494faf9ea1dec95c5489a1c813b23" translate="yes" xml:space="preserve">
          <source>You can test the fallback behaviour by removing &lt;code&gt;display: flex&lt;/code&gt; from the wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498391d8c0aa1aa6e32f19a98b55c73edc8dd7c" translate="yes" xml:space="preserve">
          <source>You can therefore change this in order that your shape uses the different parts of the box model, for example to use the border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e41e4291162ec5367b4a1ecda2098022550c8c" translate="yes" xml:space="preserve">
          <source>You can try this out in the example below, which has a flex container with &lt;code&gt;flex-direction: column&lt;/code&gt; yet otherwise is exactly the same as the previous example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d2b9f360711f2115982d783b30493901baff52" translate="yes" xml:space="preserve">
          <source>You can try this out in the live example below. Change &lt;code&gt;writing-mode&lt;/code&gt; from &lt;code&gt;vertical-rl&lt;/code&gt; to &lt;code&gt;horizontal-tb&lt;/code&gt; on &lt;code&gt;.box&lt;/code&gt; to see how the different properties change the layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5976791afe7e4b2ba3b91c2f2864ca4d9537e8e" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;../@supports&quot;&gt;feature queries&lt;/a&gt; to detect flexbox support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f59e4d039ca3198ec2ce941217bf445dad570e" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/minmax&quot;&gt;&lt;code&gt;minmax()&lt;/code&gt;&lt;/a&gt; in your value for &lt;a href=&quot;../grid-auto-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; enabling the creation of rows that are a minimum size but then grow to fit content if it is taller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f2eaa806b7dc9e25e2d2e7c6cd6597029bfcff" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;font-stretch&lt;/code&gt; to select a condensed or expanded face from such fonts. If the font you are using does not offer condensed or expanded faces, this property has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df9a0f9e7bf39a7ad14616792b1f2d036758737" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;or&lt;/code&gt; to test for a match among more than one feature, resolving to &lt;code&gt;true&lt;/code&gt; if any of the features are true. For example, the following query tests for devices that have a monochrome display or hover capability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d64a69aca25d00566eea326b436c4b2eb8bb887" translate="yes" xml:space="preserve">
          <source>You can use a comma-separated list to apply styles when the user's device matches any one of various media types, features, or states. For instance, the following rule will apply its styles if the user's device has either a minimum height of 680px &lt;em&gt;or&lt;/em&gt; is a screen device in portrait mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b10f55fd7d6255d1ef0a0674da22dea09d02343" translate="yes" xml:space="preserve">
          <source>You can use different units for each value in your expression. You may also use parentheses to establish computation order when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6e26703fc043592c998167602ac2bbfe1d1a48" translate="yes" xml:space="preserve">
          <source>You can use different units for each value in your expressions, and different units in any math function making up any of the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fe1063587ab7d2650aab134cf61d42f737721a" translate="yes" xml:space="preserve">
          <source>You can use only one pseudo-element in a selector. It must appear after the simple selectors in the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234d43418a9ffcc466eef66e6a4ad0e44d5905bc" translate="yes" xml:space="preserve">
          <source>You can use placement properties while still taking advantage of auto-placement. In this next example I have added to the layout by setting odd items to span two tracks both for rows and columns. I do this with the &lt;a href=&quot;../grid-column-end&quot;&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-row-end&quot;&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/a&gt; properties and setting the value of this to &lt;code&gt;span 2&lt;/code&gt;. What this means is that the start line of the item will be set by auto-placement, and the end line will span two tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea31155398269ed81e561e57c3e13b225421f274" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;../grid-area&quot;&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/a&gt; property to specify all four lines of a grid area as one value. When people first encounter this, they are often surprised that the values do not follow the same order as the shorthand for margin &amp;ndash; which runs clockwise: top, right, bottom, left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585da26a4e097d4c4c319137dca02d6136e43ef9" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;-ms-wrap-through&lt;/code&gt; property to control the effect of exclusions; for instance, to cause one content block to wrap around an exclusion element and another to intersect the same exclusion element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2f96c7a3ebd80423abce24e98f0a960376dcc9" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;:checked&lt;/code&gt; pseudo-class to build an image gallery with full-size images that show only when the user clicks on a thumbnail. See &lt;a href=&quot;https://developer.mozilla.org/@api/deki/files/6268/=css-checked-gallery.zip&quot;&gt;this demo&lt;/a&gt; for a possible cue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0c90d7b6fbed5e002de3792d55bcf7c76ead97" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;:hover&lt;/code&gt; pseudo-class to build an image gallery with full-size images that show only when the mouse moves over a thumbnail. See &lt;a href=&quot;https://developer.mozilla.org/@api/deki/files/6247/=css-gallery.zip&quot;&gt;this demo&lt;/a&gt; for a possible cue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999cd0c97c22bba4468a23780f41c19587c4d2d9" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;:target&lt;/code&gt; pseudo-class to create a lightbox without using any JavaScript. This technique relies on the ability of anchor links to point to elements that are initially hidden on the page. Once targeted, the CSS changes their &lt;code&gt;display&lt;/code&gt; so that they are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f395b4f3d9737a236c5000732f127bf14cfed8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionend&quot;&gt;transitionend&lt;/a&gt;&lt;/code&gt; event to detect that an animation has finished running. This is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent&quot;&gt;&lt;code&gt;TransitionEvent&lt;/code&gt;&lt;/a&gt; object, which has two added properties beyond a typical &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d69eb839cb07c5ce83f81f0bd7d330122c71152" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;columns&lt;/code&gt;shorthand to set &lt;code&gt;column-count&lt;/code&gt; and &lt;code&gt;column-width&lt;/code&gt;. If you set a length unit, this will be used for &lt;code&gt;column-width&lt;/code&gt;, set an integer and it will be used for &lt;code&gt;column-count&lt;/code&gt;. You can set both, separating the two values with a space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cf7f506542c413dda774de0e3eee9b256e7abd" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;resize&lt;/code&gt; property to make any element resizable. In the example below, a resizable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; contains a resizable paragraph (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt; element).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05fd7774272e84514027e10dfcc1da0c0a02c1b" translate="yes" xml:space="preserve">
          <source>You can use the Box Alignment properties across both layout methods, so using flexbox as a fallback for grid layout can work very well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1850735476202c6cbe83aadf4488c07e625a8abd" translate="yes" xml:space="preserve">
          <source>You can use this syntax in the exact same way as the &lt;a href=&quot;../grid-template&quot;&gt;&lt;code&gt;grid-template&lt;/code&gt;&lt;/a&gt; shorthand, just be aware than when doing so you will reset the other values set by the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad4373107e2eee5e291e9e5fd41ab615baa5bfa" translate="yes" xml:space="preserve">
          <source>You could add a label or icon to the left as easily as we popped the button onto the right. I have added a label, and other than some styling for background colour I didn&amp;rsquo;t need to change the layout. The stretchy input field now has a little less space to play with but it uses the space left after the two items are accounted for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f392f8ab22ad07e2f3e1589abfad4f14b741c1ee" translate="yes" xml:space="preserve">
          <source>You could also allow both sides to grow and shrink in proportion. If you set both sides to &lt;code&gt;flex: 1&lt;/code&gt;, they will grow and shrink from a &lt;a href=&quot;../flex-basis&quot;&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/a&gt; of 0, so you will end up with two equal-sized columns. You could either take the content as a guide and set both to &lt;code&gt;flex: auto&lt;/code&gt;, in which case they would grow and shrink from the size of the content or any size applied directly to the flex items such as a width on the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832a84b808e2908def8cb90a2db3edf526b5af1f" translate="yes" xml:space="preserve">
          <source>You could also give each side different &lt;a href=&quot;../flex-grow&quot;&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/a&gt; factors, for example setting the side with the image to &lt;code&gt;flex: 1&lt;/code&gt; and the content side to &lt;code&gt;flex: 3&lt;/code&gt;. This will mean they use a &lt;code&gt;flex-basis&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; but distribute that space at different rates according to the &lt;code&gt;flex-grow&lt;/code&gt; factor you have assigned. The flex properties we use to do this are described in detail in the guide &lt;a href=&quot;controlling_ratios_of_flex_items_along_the_main_ax&quot;&gt;Controlling ratios of flex items along the main axis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2265eb6d58dfe5c3b0ed9fb1e86d34e74acd9360" translate="yes" xml:space="preserve">
          <source>You could also try removing the background image completely, thus using the gradient purely to create the shape and not displaying it on the page at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4cf5a6782abec35d94224f0d013e670c2f5f2e1" translate="yes" xml:space="preserve">
          <source>You could for example float an item left, which would cause the text to wrap round the right and bottom of the item in a rectangular fashion. If you then apply a circle shape, the text would then wrap round the line of the circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa8eb3905051d80ea1a096700438be3b9084ecf" translate="yes" xml:space="preserve">
          <source>You could instead set &lt;code&gt;align-items&lt;/code&gt; to &lt;code&gt;flex-start&lt;/code&gt; in order to make the items line up at the start of the flex container, &lt;code&gt;flex-end&lt;/code&gt; to align them to the end, or &lt;code&gt;center&lt;/code&gt; to align them in the centre. Try this in the live example &amp;mdash; I have given the flex container a height in order that you can see how the items can be moved around inside the container. See what happens if you set the value of align-items to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fdfa8c5f7c5abc03ebefebab66e64f6d73f78ef" translate="yes" xml:space="preserve">
          <source>You could say that &lt;code&gt;flex-shrink&lt;/code&gt; works in pretty much the same way as &lt;code&gt;flex-grow&lt;/code&gt;. However there are two reasons why it isn&amp;rsquo;t &lt;em&gt;quite&lt;/em&gt; the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08001f9a0b9dee4d9c7bf3ccd910ff86f8b740a4" translate="yes" xml:space="preserve">
          <source>You detect the beginning of a transition using &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionrun&quot;&gt;transitionrun&lt;/a&gt;&lt;/code&gt; (fires before any delay) and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionstart&quot;&gt;transitionstart&lt;/a&gt;&lt;/code&gt; (fires after any delay), in the same kind of fashion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa56ad47246e37775a6692ae3a728ea17bbd1c13" translate="yes" xml:space="preserve">
          <source>You do need something to float, but that could be some generated content as in the below example. I am floating generated content and using a larger star image to shape my content without displaying any image on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c820624c31b65df9a3f6b24a0fcf6775c0522c" translate="yes" xml:space="preserve">
          <source>You don't have to leave your color stops at their default positions. To fine-tune their locations, you can give each one a percentage or absolute length value. If you specify the location as a percentage, &lt;code&gt;0%&lt;/code&gt; represents the starting point, while &lt;code&gt;100%&lt;/code&gt; represents the ending point; however, you can use values outside that range if necessary to get the effect you want. If you leave a location unspecified, the position of that particular color stop will be automatically calculated for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0d8355834bd85c4036c916ed980055e6ae1068" translate="yes" xml:space="preserve">
          <source>You don't have to limit yourself to two colors&amp;mdash;you may use as many as you like! By default, colors are evenly spaced along the gradient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5464281f390f540013fc0c31d45ff2219f48fd20" translate="yes" xml:space="preserve">
          <source>You first need to specify on the embedding element the properties whose values you wish to expose to the embedded SVG, using the &lt;code&gt;-moz-context-properties&lt;/code&gt; property. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864f3708ffaaeea891c752ef846236844c4c88ea" translate="yes" xml:space="preserve">
          <source>You have a global CSS file that sets visual aspects of your site globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577dd3df2d726717690b67d54cc185be4b8caae7" translate="yes" xml:space="preserve">
          <source>You have already encountered the &lt;a href=&quot;../grid-area&quot;&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/a&gt; property. This is the property that can take as a value all four of the lines used to position a grid area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934f48ee83644d2122a456ffb6cf850a182a7148" translate="yes" xml:space="preserve">
          <source>You may also find that some variable fonts come split into two files: one for uprights and all their variations, and one containing the italic variations. This is sometimes done to reduce the overall file size in cases where the italics aren't needed or used. In all cases, it is still possible to link them with a common &lt;a href=&quot;../font-family&quot;&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/a&gt; name so you can call them using the same &lt;code&gt;font-family&lt;/code&gt; and appropriate &lt;a href=&quot;../font-style&quot;&gt;&lt;code&gt;font-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a6253373a545bcaf6d2129eb7ae56a64860d92" translate="yes" xml:space="preserve">
          <source>You may combine any number of functions to manipulate the rendering. The following example enhances the contrast and brightness of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df03ef39b5d298d801269f8f46f0e73200425753" translate="yes" xml:space="preserve">
          <source>You may specify multiple delays, which is useful when transitioning multiple properties. Each delay will be applied to the corresponding property as specified by the &lt;a href=&quot;transition-property&quot;&gt;&lt;code&gt;transition-property&lt;/code&gt;&lt;/a&gt; property, which acts as a master list. If there are fewer delays specified than in the master list, the list of delay values will be repeated until there are enough. If there are more delays, the list of delay values will be truncated to match the number of properties. In both cases, the CSS declaration remains valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231c631a5d530a2f6109d104839fc4f4e8eb69a9" translate="yes" xml:space="preserve">
          <source>You may specify multiple durations; each duration will be applied to the corresponding property as specified by the &lt;a href=&quot;transition-property&quot;&gt;&lt;code&gt;transition-property&lt;/code&gt;&lt;/a&gt; property, which acts as a master list. If there are fewer durations specified than in the master list, the user agent repeat the list of durations. If there are more durations, the list is simply truncated to the right size. In both case the CSS declaration stays valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf9d5d92d91c51c97534bd486ff387e4e51f7b6" translate="yes" xml:space="preserve">
          <source>You may specify multiple timing functions; each one will be applied to the corresponding property as specified by the &lt;a href=&quot;transition-property&quot;&gt;&lt;code&gt;transition-property&lt;/code&gt;&lt;/a&gt; property, which acts as a master list. If there are fewer functions specified than in the master list, missing values are set to the initial value (&lt;code&gt;ease&lt;/code&gt;). If there are more timing functions, the list is simply truncated to the right size. In both cases, the CSS declaration stays valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b22b7108d0419c4b2c07f56d0b33a543311f198" translate="yes" xml:space="preserve">
          <source>You may want to give a line more than one name, perhaps it denotes the sidebar-end and the main-start for example. To do this add the names inside the square brackets with whitespace between them &lt;code&gt;[sidebar-end main-start]&lt;/code&gt;. You can then refer to that line by either of the names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535172525829b787d525c1eaf84a9e721270f19e" translate="yes" xml:space="preserve">
          <source>You may well find the Firefox Shape Inspector very useful here to create your polygon shape. The screenshot below shows the shape highlighted in the tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ae831081348d475096be9dc506f36e62ec9452" translate="yes" xml:space="preserve">
          <source>You might have a design, perhaps a card that will display a news item. The heading of the news item is the key thing to highlight and would be the element that a user might jump to if they were tabbing between headings to find content they wanted to read. The card also has a date; the finished design we want to create is something like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5d96f320fe48db3468a32c274d28e287730a82" translate="yes" xml:space="preserve">
          <source>You might notice that we have been talking about having a specific font file for every weight and style (i.e. bold and italic and bold italic), rather than relying upon the browser to synthesize them. The reason for this is that most typefaces have very specific designs for bolder weights and italics that often include completely different characters (lower-case 'a' and 'g' are often quite different in italics, for example). In order to most accurately reflect the typeface design and avoid differences between browsers and how they may or may not synthesize the different styles, it's more accurate to load the specific font files where needed when using a non-variable font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0735fd395e1b8714d2b95e165ec9d0d22920a27" translate="yes" xml:space="preserve">
          <source>You might use this feature to render your buttons slightly larger if the user is on a touch-screen device, to make them more finger-friendly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d35add4bb35f9f04f2e4eb512391a24029b3df" translate="yes" xml:space="preserve">
          <source>You must specify a threshold with at least one of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, or &lt;code&gt;left&lt;/code&gt; for sticky positioning to behave as expected. Otherwise, it will be indistinguishable from relative positioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d567d07bf89122c5e4144cb088353e58b12d4e80" translate="yes" xml:space="preserve">
          <source>You should always include at least one generic family name in a font-family list, since there's no guarantee that any given font is available. This lets the browser select an acceptable fallback font when necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4288bd3ed937eaff778c7ad1bcc08601e62bae7" translate="yes" xml:space="preserve">
          <source>You will very rarely see the &lt;code&gt;flex-grow&lt;/code&gt;, &lt;code&gt;flex-shrink&lt;/code&gt;, and &lt;code&gt;flex-basis&lt;/code&gt; properties used individually; instead they are combined into the &lt;a href=&quot;../flex&quot;&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/a&gt; shorthand. The &lt;code&gt;flex&lt;/code&gt; shorthand allows you to set the three values in this order &amp;mdash; &lt;code&gt;flex-grow&lt;/code&gt;, &lt;code&gt;flex-shrink&lt;/code&gt;, &lt;code&gt;flex-basis&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9dc144545418a908695396fa0634f8ba8e7a90" translate="yes" xml:space="preserve">
          <source>You'll note the &lt;code&gt;innerWidth&lt;/code&gt; and &lt;code&gt;outerWidth&lt;/code&gt; are the same, but the &lt;code&gt;outerHeight&lt;/code&gt; is 100px taller than the &lt;code&gt;innerHeight&lt;/code&gt;. This is because the &lt;code&gt;outerHeight&lt;/code&gt; includes the browser chrome: measurements were taken on a browser with an addres bar and bookmarks bar totalling 100px in height, but no chrome on the left or right of the window. The area within the &lt;code&gt;innerHeight&lt;/code&gt; and &lt;code&gt;innerWidth&lt;/code&gt; is generally considered the &lt;em&gt;layout viewport&lt;/em&gt;. The browser chrome is not considered part of the viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa41267d3b4f6938eb154343e6ba204bc2624fe8" translate="yes" xml:space="preserve">
          <source>You'll see that when filling the &lt;code&gt;style&lt;/code&gt; element with content, we select all slotted elements (&lt;code&gt;::slotted(*)&lt;/code&gt;) and give them a different font and color. This allows them to stand out better next to the slots that haven't been successfully filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909f99a779adb66a76fc53ab56c7dd1caf35d0fd" translate="yes" xml:space="preserve">
          <source>Z</source>
          <target state="translated">Z</target>
        </trans-unit>
        <trans-unit id="f69eb04223241e3c33b56a1c6706a42374215121" translate="yes" xml:space="preserve">
          <source>Zebra stripes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5207b0faa5a07329498411968eeee4c39262e0c" translate="yes" xml:space="preserve">
          <source>Zone 9 is the &lt;a id=&quot;middle-region&quot; name=&quot;middle-region&quot;&gt;middle region&lt;/a&gt;. It is discarded by default, but is used like a background image if the keyword &lt;code&gt;fill&lt;/code&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed39aa8d9b16527ea716a960c15c1673848bb51" translate="yes" xml:space="preserve">
          <source>Zone 9 is the &lt;span id=&quot;middle-region&quot;&gt;middle region&lt;/span&gt;. It is discarded by default, but is used like a background image if the keyword &lt;code&gt;fill&lt;/code&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1fd07d35523b50bca1a74f3c81b0e7ac64ea45" translate="yes" xml:space="preserve">
          <source>Zones 1-4 are &lt;a id=&quot;corner-regions&quot; name=&quot;corner-regions&quot;&gt;corner regions&lt;/a&gt;. Each one is used a single time to form the corners of the final border image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aada067f79807ac9fc3aa428d55f99444127d53" translate="yes" xml:space="preserve">
          <source>Zones 1-4 are &lt;span id=&quot;corner-regions&quot;&gt;corner regions&lt;/span&gt;. Each one is used a single time to form the corners of the final border image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284cd6ba77c3cd95405eec85bbd59074022f7682" translate="yes" xml:space="preserve">
          <source>Zones 5-8 are &lt;a id=&quot;edge-regions&quot; name=&quot;edge-regions&quot;&gt;edge regions&lt;/a&gt;. These are &lt;a href=&quot;mask-border-repeat&quot;&gt;repeated, scaled, or otherwise modified&lt;/a&gt; in the final border image to match the dimensions of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c8f582863e20c3c84e46e8e4816e4659de692c" translate="yes" xml:space="preserve">
          <source>Zones 5-8 are &lt;span id=&quot;edge-regions&quot;&gt;edge regions&lt;/span&gt;. These are &lt;a href=&quot;border-image-repeat&quot;&gt;repeated, scaled, or otherwise modified&lt;/a&gt; in the final border image to match the dimensions of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a414e6880238d1f19ded3e1ddc0f1a80f6224c" translate="yes" xml:space="preserve">
          <source>Zoom cursors (&lt;code&gt;zoom-in&lt;/code&gt; and &lt;code&gt;zoom-out&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe86eec57f0a90e13ad47fc7c0f22eabdebe95a" translate="yes" xml:space="preserve">
          <source>Zoom factor. &lt;code&gt;100%&lt;/code&gt; is equivalent to &lt;code&gt;normal&lt;/code&gt;. Values larger than &lt;code&gt;100%&lt;/code&gt; zoom in. Values smaller than &lt;code&gt;100%&lt;/code&gt; zoom out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f1f20607d4517642264078ac250786667f69e3" translate="yes" xml:space="preserve">
          <source>Zoom factor. Equivalent to the corresponding percentage (&lt;code&gt;1.0&lt;/code&gt; = &lt;code&gt;100%&lt;/code&gt; = &lt;code&gt;normal&lt;/code&gt;). Values larger than &lt;code&gt;1.0&lt;/code&gt; zoom in. Values smaller than &lt;code&gt;1.0&lt;/code&gt; zoom out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5ff100fc1e8220e16552f6dbcd3f45daa6d1c5" translate="yes" xml:space="preserve">
          <source>Zooming</source>
          <target state="translated">Zooming</target>
        </trans-unit>
        <trans-unit id="f0ed960ed5071b38c959001709b1cad02b0f9a12" translate="yes" xml:space="preserve">
          <source>[1] As of Firefox 63, this feature is behind a feature preference setting. In about:config, set &lt;code&gt;layout.css.overflow.moz-scrollbars.enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="9e3a1be6c5737f1a59f68a564725df28e3d07fb5" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;box-shadow#Interpolation&quot;&gt;shadow list&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196da68e891abd9cf5c77267abebf5132fe2afdf" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;color_value#Interpolation&quot;&gt;color&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d20c59b9ba1694a822715b4c39855e1154182d9" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;custom-ident&quot;&gt;&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;&lt;/a&gt; naming a CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c735dd31354c8cd07a3b6471789456a2003b6272" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;filter#Interpolation&quot;&gt;filter function list&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576a1629180e730239916f72b27dd8fc5cc4a471" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;font-stretch#Interpolation&quot;&gt;font stretch&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5969f99acddf8b49b50dc22cf5edb7b3b03ff8" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;font-weight#Interpolation&quot;&gt;font weight&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07f3840b869e64a8047b1fbd3c3f621aa67a336" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;http://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt; character (in the format of a backslash, &lt;code&gt;\&lt;/code&gt;, followed by one to six hexadecimal digits, representing its Unicode code point)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1dce59f33a3ff721d6c6bd15877f7fc0751c0af" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;length#Interpolation&quot;&gt;length&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4b695d80e8f4f72b00dd3a281b0fd845f58cd3" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;length#Interpolation&quot;&gt;length&lt;/a&gt;, &lt;a href=&quot;percentage#Interpolation&quot;&gt;percentage&lt;/a&gt; or calc();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c588d5ae685ee91a557b063b15eb254423b2c1d3" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;number#Interpolation&quot;&gt;number&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fedfb5ab111f2cb7b802042b461636bc665a761e" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;position_value#Interpolation&quot;&gt;position&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8270cc3399e566bb7425a8c982c0dcc27fa109a7" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;shape#Interpolation&quot;&gt;rectangle&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972d4f15cd97581ffc77c33040fbae83f9ce963a" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;visibility#Interpolation&quot;&gt;visibility&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1234f6e65636a32bbee472123378ad8f304964aa" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;custom-ident&amp;gt;&quot;&gt;&amp;lt;custom-ident&amp;gt;&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17b488dd2d0139a9238ccbde99591a903dcbab2" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;length&amp;gt;&quot;&gt;&amp;lt;length&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b259c78248406234faeaeadff71be4f593d4ad11" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;length&amp;gt;&quot;&gt;&amp;lt;length&amp;gt;&lt;/a&gt;&lt;/code&gt; or a &lt;code&gt;&lt;a href=&quot;#&amp;lt;percentage&amp;gt;&quot;&gt;&amp;lt;percentage&amp;gt;&lt;/a&gt;&lt;/code&gt;. This may optionally be followed by one of the following keywords: &lt;code&gt;&lt;a href=&quot;#border-box&quot;&gt;border-box&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#content-box&quot;&gt;content-box&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abeaf716bb1339a3c8f8d266da7b0eef48d08a34" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;number&amp;gt;&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea33f7c447fa58a9e4887262c5f75cb28a22c06d" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;percentage&amp;gt;&quot;&gt;&amp;lt;percentage&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740f038134615148b72e5850137c95cccf30f997" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;string&amp;gt;&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f7d73a01f5a8b3d58768f43be82985474f9e04" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#&amp;lt;string&amp;gt;&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ac639445f47a93985e4d5b84816c441ede8a7a" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&lt;a href=&quot;#symbols()&quot;&gt;symbols()&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bf96712d0e0729c0aeea0d017879062de8faeb" translate="yes" xml:space="preserve">
          <source>a color plus three absolute lengths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e4f09f9fa07020fbcb4f59adf11bf9d90056d6" translate="yes" xml:space="preserve">
          <source>a community-curated list of flexbox browser bugs and workarounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50dbd924c3cdd905c3968de29746656cccfc28b" translate="yes" xml:space="preserve">
          <source>a footer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b937021f6d5a540fc9a7b252f14cfd1f4438c3" translate="yes" xml:space="preserve">
          <source>a header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c311201614679066bad9803719e136562255584a" translate="yes" xml:space="preserve">
          <source>a hyphen (&lt;code&gt;-&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9271d7e3f4a7c78fbe49fc0cff9de985f5c09718" translate="yes" xml:space="preserve">
          <source>a list, each item consisting of two keywords representing the origin and two offsets from that origin, each given as an absolute length (if given a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;), otherwise as a percentage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f594e5d56fc9059f59b9fc2998a26f6462cce6d" translate="yes" xml:space="preserve">
          <source>a list, each item consisting of two keywords, one per dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d93654264760845a494fde9ba634c5917bf3ca" translate="yes" xml:space="preserve">
          <source>a percentage or &lt;code&gt;auto&lt;/code&gt; or the absolute length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fcd1b38bd693dd0b3e390a54c738d5215c27c0" translate="yes" xml:space="preserve">
          <source>a sidebar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8121ebaf784e08398455828b1f2ec5df749b179" translate="yes" xml:space="preserve">
          <source>a single keyword: one of &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;, or &lt;code&gt;dense&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad346089e537f7884a47a84076c92869657bb18" translate="yes" xml:space="preserve">
          <source>a transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46803028bf047854b8a86768d03129d47d00499" translate="yes" xml:space="preserve">
          <source>a unitless &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;: then it is interpreted as &lt;code&gt;&lt;a href=&quot;#&amp;lt;'flex-grow'&amp;gt;&quot;&gt;&amp;lt;flex-grow&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d498048e46b8ff0febf7b011eafd7f39a02c6c2" translate="yes" xml:space="preserve">
          <source>a unitless &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;: then it is interpreted as &lt;code&gt;&lt;a href=&quot;#&amp;lt;'flex-shrink'&amp;gt;&quot;&gt;&amp;lt;flex-shrink&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180498fecefa5a7ad868f1a967c3a73d3f0b14b5" translate="yes" xml:space="preserve">
          <source>a valid value for &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;: then it is interpreted as &lt;code&gt;&lt;a href=&quot;#&amp;lt;'flex-basis'&amp;gt;&quot;&gt;&amp;lt;flex-basis&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e7a05d31c747bfbf3a6de653e728e700740228" translate="yes" xml:space="preserve">
          <source>a. One</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29bc91bbdab169fc0c0a326965953d11c7dff83" translate="yes" xml:space="preserve">
          <source>a1</source>
          <target state="translated">a1</target>
        </trans-unit>
        <trans-unit id="b9f85daa6f83cf02ce5c31913d1f64d3f5c8fade" translate="yes" xml:space="preserve">
          <source>a2</source>
          <target state="translated">a2</target>
        </trans-unit>
        <trans-unit id="252bc06763afb3b6c2a0802f7346700ab55f46f5" translate="yes" xml:space="preserve">
          <source>a3</source>
          <target state="translated">a3</target>
        </trans-unit>
        <trans-unit id="21440dba05ffe31f6c6bf299dd8da0ff0a5fff52" translate="yes" xml:space="preserve">
          <source>a4</source>
          <target state="translated">a4</target>
        </trans-unit>
        <trans-unit id="37f37b11f442a0eac71d4b8baabe7a5594b0b527" translate="yes" xml:space="preserve">
          <source>aa. Four</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb2842cdc5ca6c10d37f6952e6fa55ff99ae2fe" translate="yes" xml:space="preserve">
          <source>aaa. Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec8a4c163803cf3e06d219fc10ac11b2eb57836" translate="yes" xml:space="preserve">
          <source>ab. Five</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833d0aa625c2fe733c7c9fea87b719c150631286" translate="yes" xml:space="preserve">
          <source>absolute &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d0619404eca5030f8e8c305a7ca83b1d790a25" translate="yes" xml:space="preserve">
          <source>absolute length; &lt;code&gt;0&lt;/code&gt; if the border style is &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;hidden&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d586f16ef1e9804433e35b63ff327c05a2c6aacc" translate="yes" xml:space="preserve">
          <source>absolutely positioned elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0045e59a92b2b37b7d4e295b7e4f3bc55f172c" translate="yes" xml:space="preserve">
          <source>absolutely positioned elements (including &lt;code&gt;position: fixed&lt;/code&gt; and &lt;code&gt;position: sticky&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61b0acb27495f24502d7965764055381a011391" translate="yes" xml:space="preserve">
          <source>ac. Six</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a251ffa6dfbb4e889c9a5a7014aed642dce00102" translate="yes" xml:space="preserve">
          <source>actual value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0616ba62d3f7bd977101de42fe7bae9f651c882b" translate="yes" xml:space="preserve">
          <source>adding the element to the DOM using &lt;code&gt;.appendChild()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b16c91bbe0e7ff2273b8e438cfe7a594e0cb14" translate="yes" xml:space="preserve">
          <source>align-content</source>
          <target state="translated">align-content</target>
        </trans-unit>
        <trans-unit id="d8dd5144dcc6afae54dd53424d97a2c6823ca0f9" translate="yes" xml:space="preserve">
          <source>align-content and justify-content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c143f9e71c2ff5941ed62bf241147eaad010dafb" translate="yes" xml:space="preserve">
          <source>align-items</source>
          <target state="translated">align-items</target>
        </trans-unit>
        <trans-unit id="c78807bba02536cdb0208f6d6ea7cdbd1b479598" translate="yes" xml:space="preserve">
          <source>align-self</source>
          <target state="translated">align-self</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="3e7d8194c130870d4b8f93576f886f0f33f7e40b" translate="yes" xml:space="preserve">
          <source>all elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072713c4b79534c8e2750ce1888643882178574b" translate="yes" xml:space="preserve">
          <source>all elements but non-replaced inline elements, table columns, and column groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8d9f06481ba1f45780a43d355104132e7f11df" translate="yes" xml:space="preserve">
          <source>all elements but non-replaced inline elements, table rows, and row groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c42f28b05f97388c5ef376f81ea5358715a6a6" translate="yes" xml:space="preserve">
          <source>all elements except generated content or pseudo-elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f481c795b1acb7e593225d170acfa3a1702dcb1" translate="yes" xml:space="preserve">
          <source>all elements except table row groups, table column groups, table rows, and table columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78624d48103e7df0f7c45b4584a726bce8e81cbe" translate="yes" xml:space="preserve">
          <source>all elements except: non-replaced inline elements, table rows, row groups, table columns, and column groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda2197678e9cbc187a00015e1f479fe1859e319" translate="yes" xml:space="preserve">
          <source>all elements that accept width or height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fe96338731b7bdf51bf285f5a61b2efe5d7cbd" translate="yes" xml:space="preserve">
          <source>all elements that create native windows, e.g. &amp;lt;window&amp;gt;, &amp;lt;panel&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f074c521bf4fbfbb477b51688b00f6e410b1deb5" translate="yes" xml:space="preserve">
          <source>all elements, &lt;a href=&quot;::before&quot;&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;::after&quot;&gt;&lt;code&gt;::after&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;pseudo-elements&quot;&gt;pseudo-elements&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03762338a91e51a8d0b40ebc188a9d557f5c1d29" translate="yes" xml:space="preserve">
          <source>all elements, but has no effect if the value of &lt;a href=&quot;display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4be256babb96e5c2cf2cbd6b2650b361f9f8d1" translate="yes" xml:space="preserve">
          <source>all elements, except &lt;code&gt;table-row-group&lt;/code&gt;, &lt;code&gt;table-header-group&lt;/code&gt;, &lt;code&gt;table-footer-group&lt;/code&gt;, &lt;code&gt;table-row&lt;/code&gt;, &lt;code&gt;table-column-group&lt;/code&gt; and &lt;code&gt;table-column&lt;/code&gt;. It also applies to &lt;a href=&quot;::first-letter&quot;&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdedb20c86bfd70e34aa9b05451b6ef4bf4934e" translate="yes" xml:space="preserve">
          <source>all elements, except elements with table &lt;a href=&quot;display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; types other than &lt;code&gt;table-caption&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;inline-table&lt;/code&gt;. It also applies to &lt;a href=&quot;::first-letter&quot;&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bd83dbae07c5a26f69d8c21e08fa035bd3cbf4" translate="yes" xml:space="preserve">
          <source>all elements, except internal table elements when &lt;a href=&quot;border-collapse&quot;&gt;&lt;code&gt;border-collapse&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;collapse&lt;/code&gt;. It also applies to &lt;a href=&quot;::first-letter&quot;&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c076311e4f79661919bb1974805badda9b80997" translate="yes" xml:space="preserve">
          <source>all elements, except table row groups, rows, column groups, and columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ea9999f147e381e54947e4c2322361bc0b2b75" translate="yes" xml:space="preserve">
          <source>all elements, though some values have no effect on non-inline elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92317d4852144aaefb3b0c8deba01ab061888dd1" translate="yes" xml:space="preserve">
          <source>all elements. It also applies to &lt;a href=&quot;::first-letter&quot;&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;::first-line&quot;&gt;&lt;code&gt;::first-line&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15acda8721b04151151704563bb82d3543da0928" translate="yes" xml:space="preserve">
          <source>all elements. It also applies to &lt;a href=&quot;::first-letter&quot;&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2b9886f9cb7a4e48a15d3156937497360c5170" translate="yes" xml:space="preserve">
          <source>all elements; In SVG, it applies to container elements excluding the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs&quot;&gt;&lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt;&lt;/a&gt; element and all graphics elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1714909929cdaa7a38750213f996366952e3eb7" translate="yes" xml:space="preserve">
          <source>all elements; but User Agents are not required to apply to &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;inline-table&lt;/code&gt; elements when &lt;a href=&quot;border-collapse&quot;&gt;&lt;code&gt;border-collapse&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;collapse&lt;/code&gt;. The behavior on internal table elements is undefined for the moment.. It also applies to &lt;a href=&quot;::first-letter&quot;&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433117a630bb20244b5311970d57d0004ce5cf7d" translate="yes" xml:space="preserve">
          <source>alpha, beta, gamma&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e04b43a021c13185a5eda185e3253af871836da" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;, rounded to the next quarter turn from &lt;code&gt;0deg&lt;/code&gt; and normalized, that is moduloing the value by &lt;code&gt;1turn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e630e9cf59d1de8af4a89e574579f67fc6e4a93c" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;integer#Interpolation&quot;&gt;integer&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0411186c578a295611a141219d2324a9605a54" translate="yes" xml:space="preserve">
          <source>an absolute length; if the keyword &lt;code&gt;none&lt;/code&gt; is specified, the computed value is &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38eed5fe28952823ee4f15decb200b5233cec30f" translate="yes" xml:space="preserve">
          <source>an escaped character (preceded by a backslash, &lt;code&gt;\&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cf89cf7164ec48b4b5a90fe9a59a97b90b7266" translate="yes" xml:space="preserve">
          <source>an optimum value consisting of either an absolute length or the keyword &lt;code&gt;normal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c3e6b885065ebdf1b40de464a519b2f7972328" translate="yes" xml:space="preserve">
          <source>an optimum, minimum, and maximum value, each consisting of either an absolute length, a percentage, or the keyword &lt;code&gt;normal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4c2a305399fa0bcdccecac72a5b5310f42eb6a" translate="yes" xml:space="preserve">
          <source>an optional name for the animation, which may be &lt;code&gt;none&lt;/code&gt;, a &lt;a href=&quot;custom-ident&quot;&gt;&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6b484e66b9dbb2241dd2f190bcebaeb2b246bf" translate="yes" xml:space="preserve">
          <source>an underscore (&lt;code&gt;_&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="61a72fee62e34e402c5b064ee3100128df63f949" translate="yes" xml:space="preserve">
          <source>and notice that the lower case 'a' reverts to its regular form and the lower case 'g' changes instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48db1ae998c432f125279b4269c3c89ab60264cb" translate="yes" xml:space="preserve">
          <source>and requirement to insert the &lt;code&gt;@import&lt;/code&gt; rule at the beginning of the CSS document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b8b600c27ce95ddcf867cfc503564c89fe816a" translate="yes" xml:space="preserve">
          <source>animation</source>
          <target state="translated">animation</target>
        </trans-unit>
        <trans-unit id="110b63e97df81aa79326c6d49e10e772d25ff73e" translate="yes" xml:space="preserve">
          <source>animation-delay</source>
          <target state="translated">animation-delay</target>
        </trans-unit>
        <trans-unit id="5967065d5efeadc3df79e383a3b8b68f42a0a804" translate="yes" xml:space="preserve">
          <source>animation-direction</source>
          <target state="translated">animation-direction</target>
        </trans-unit>
        <trans-unit id="77c010b6e2e42f1e017d0a3f0e0af3a6302e9e3e" translate="yes" xml:space="preserve">
          <source>animation-duration</source>
          <target state="translated">animation-duration</target>
        </trans-unit>
        <trans-unit id="7c2b746a7360dd9aa195b9cd7d070e094f7e4e7d" translate="yes" xml:space="preserve">
          <source>animation-fill-mode</source>
          <target state="translated">animation-fill-mode</target>
        </trans-unit>
        <trans-unit id="45aadda6a15b8a28c779cbbbca4e1b9cfc4096be" translate="yes" xml:space="preserve">
          <source>animation-iteration-count</source>
          <target state="translated">animation-iteration-count</target>
        </trans-unit>
        <trans-unit id="dd93ac049bd5aabb7dd03ef6faa489cb584df3e8" translate="yes" xml:space="preserve">
          <source>animation-name</source>
          <target state="translated">animation-name</target>
        </trans-unit>
        <trans-unit id="464d5b774b8a85e06367924a32a58a8507473bc3" translate="yes" xml:space="preserve">
          <source>animation-play-state</source>
          <target state="translated">animation-play-state</target>
        </trans-unit>
        <trans-unit id="93167af0d0e87e11258cc1d25d216a112efe7563" translate="yes" xml:space="preserve">
          <source>animation-timing-function</source>
          <target state="translated">animation-timing-function</target>
        </trans-unit>
        <trans-unit id="8e6268d5921ac30a2a78dc1af1a257863a1ad582" translate="yes" xml:space="preserve">
          <source>any alphabetical character (&lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;, or &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a4958cb9ac4bfae827fb04723ba1f8c923b1a6" translate="yes" xml:space="preserve">
          <source>any decimal digit (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f709f143cac58a676af0ee9540dbbd36d3442cc8" translate="yes" xml:space="preserve">
          <source>any element; it has an effect on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/progress&quot;&gt;&lt;code&gt;progress&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/meter&quot;&gt;&lt;code&gt;meter&lt;/code&gt;&lt;/a&gt;, but not on &amp;lt;input type=&quot;range&quot;&amp;gt; or other elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d250f023596b5d31ddc3a04f091fd69fb160dbeb" translate="yes" xml:space="preserve">
          <source>any length made absolute; any specified color computed; otherwise as specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc9b744467a51ec3d4534f9c12687e8bfa4ff8a" translate="yes" xml:space="preserve">
          <source>any one of the keywords &lt;code&gt;&lt;a href=&quot;#auto&quot;&gt;auto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#none&quot;&gt;none&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#manipulation&quot;&gt;manipulation&lt;/a&gt;&lt;/code&gt;, &lt;em&gt;or&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3406e4d2bcd7f8d929b68da0cce820f0fdfeea36" translate="yes" xml:space="preserve">
          <source>any(): &amp;mdash; Issues with performance and specificity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a7b4e8d512e9696237c4a7690cbe5d9a0bf323" translate="yes" xml:space="preserve">
          <source>appearance</source>
          <target state="translated">appearance</target>
        </trans-unit>
        <trans-unit id="ba865ccc5403bee420e617281726f3223a140acc" translate="yes" xml:space="preserve">
          <source>as &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9356916ece5bb93c09e98b7b17dff72a0eb45c" translate="yes" xml:space="preserve">
          <source>as defined for &lt;a href=&quot;basic-shape&quot;&gt;&lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt;&lt;/a&gt; (with &lt;a href=&quot;shape-box&quot;&gt;&lt;code&gt;&amp;lt;shape-box&amp;gt;&lt;/code&gt;&lt;/a&gt; following, if supplied), the &lt;a href=&quot;image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; with its URI made absolute, otherwise as specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c0e6a4d0997a7b0f68380d333f7ab2b2585b5e" translate="yes" xml:space="preserve">
          <source>as each of the properties of the shorthand (all properties but &lt;a href=&quot;unicode-bidi&quot;&gt;&lt;code&gt;unicode-bidi&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fee41e8555c0ea6c146038523636bb44b42816" translate="yes" xml:space="preserve">
          <source>as each of the properties of the shorthand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6a40237ff1311355a568dd78f264e81dd53cee" translate="yes" xml:space="preserve">
          <source>as specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a4e4c7501eda54c31b89aef10e9ab14e6d810f" translate="yes" xml:space="preserve">
          <source>as specified with variables substituted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd545f63834b0f31da83002f2b373f4768397c67" translate="yes" xml:space="preserve">
          <source>as specified, but with &lt;a href=&quot;url&quot;&gt;&lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;&lt;/a&gt; values made absolute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8ceebc852c7520911e1b166c561ba1abd0689e" translate="yes" xml:space="preserve">
          <source>as specified, but with relative lengths converted into absolute lengths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c289a711c65dc555e166525c0d77a9dede5c5ec1" translate="yes" xml:space="preserve">
          <source>as specified, except for the &lt;code&gt;match-parent&lt;/code&gt; value which is calculated against its parent's &lt;code&gt;direction&lt;/code&gt; value and results in a computed value of either &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c6b46c43a9295a3b29e026f86116621fa35145" translate="yes" xml:space="preserve">
          <source>as specified, with &amp;lt;length&amp;gt;s made absolute, and normal computing to zero except on multi-column elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566e75a8105327bdcb553a1e1caa31cfbb8903a6" translate="yes" xml:space="preserve">
          <source>as the specified value applies to each property this is a shorthand for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e12c5ebef4739bcb2ae37e6efd056d9bf423524" translate="yes" xml:space="preserve">
          <source>as the specified value, except for positioned and floating elements and the root element. In both cases the computed value may be a keyword other than the one specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c60d36dc5c396fd67f42bb53f90d1213539301" translate="yes" xml:space="preserve">
          <source>attr()</source>
          <target state="translated">attr()</target>
        </trans-unit>
        <trans-unit id="f64cd8e32f5ac7553c150bd05d6f2252bb73f68d" translate="yes" xml:space="preserve">
          <source>author</source>
          <target state="translated">author</target>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="translated">auto</target>
        </trans-unit>
        <trans-unit id="dec0734503a971da2e214b9d275cc34142e483ff" translate="yes" xml:space="preserve">
          <source>avoid</source>
          <target state="translated">avoid</target>
        </trans-unit>
        <trans-unit id="433688c89849ea21aa0c315934a49f65ac7e4c12" translate="yes" xml:space="preserve">
          <source>avoid-column</source>
          <target state="translated">avoid-column</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="2f71f92fce50d68e071e11d6ee1072b534b29a06" translate="yes" xml:space="preserve">
          <source>b. One</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4402f4e9799f7c581f4231a3f805a637251cb47" translate="yes" xml:space="preserve">
          <source>b. Two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e83ca2a65d6f90a809c8570c6c905a941b87732" translate="yes" xml:space="preserve">
          <source>b1</source>
          <target state="translated">b1</target>
        </trans-unit>
        <trans-unit id="32f28ea03b1b20126629d2ca63fc6665b0bbb604" translate="yes" xml:space="preserve">
          <source>b2</source>
          <target state="translated">b2</target>
        </trans-unit>
        <trans-unit id="23a5fd0ea5ac115cc0ec34e63db15f090c85a5ca" translate="yes" xml:space="preserve">
          <source>b3</source>
          <target state="translated">b3</target>
        </trans-unit>
        <trans-unit id="a6ca17b3772d8cc88f1e0e19031efbdcae66b5d2" translate="yes" xml:space="preserve">
          <source>b4</source>
          <target state="translated">b4</target>
        </trans-unit>
        <trans-unit id="3a01f4b00948f1947e9d8ec1eb9daca57068eab0" translate="yes" xml:space="preserve">
          <source>ba. Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee5ecf7ca9c57a9c502f471162bab26d6f77aca" translate="yes" xml:space="preserve">
          <source>ba. Three</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa5f31f81ca51cfa5bac4faded9a0ab0f805815" translate="yes" xml:space="preserve">
          <source>backdrop-filter</source>
          <target state="translated">backdrop-filter</target>
        </trans-unit>
        <trans-unit id="17a25aaf993f3073f323b25a14ce9a50b35c3fe7" translate="yes" xml:space="preserve">
          <source>backface-visibility</source>
          <target state="translated">backface-visibility</target>
        </trans-unit>
        <trans-unit id="248a20b62efba8f4303c75830c83230f1b088f1e" translate="yes" xml:space="preserve">
          <source>background</source>
          <target state="translated">background</target>
        </trans-unit>
        <trans-unit id="7923496c14847c23cb198333531a4de1d52b1762" translate="yes" xml:space="preserve">
          <source>background-attachment</source>
          <target state="translated">background-attachment</target>
        </trans-unit>
        <trans-unit id="fbc5b8e4f7909257f2a6b74378d0865ee2636ac6" translate="yes" xml:space="preserve">
          <source>background-blend-mode</source>
          <target state="translated">background-blend-mode</target>
        </trans-unit>
        <trans-unit id="9d1ed16d8179287a37520ad43c94fb71448f1831" translate="yes" xml:space="preserve">
          <source>background-clip</source>
          <target state="translated">background-clip</target>
        </trans-unit>
        <trans-unit id="689d37433dd4ed2738a4ad8039cd18122b6fdf9e" translate="yes" xml:space="preserve">
          <source>background-color</source>
          <target state="translated">background-color</target>
        </trans-unit>
        <trans-unit id="de8bf8b32c3f2053956fb663db6ac20f733f766a" translate="yes" xml:space="preserve">
          <source>background-image</source>
          <target state="translated">background-image</target>
        </trans-unit>
        <trans-unit id="e2fe6b335eda2a98fe69fbd5c60a2a3198b6f8a8" translate="yes" xml:space="preserve">
          <source>background-origin</source>
          <target state="translated">background-origin</target>
        </trans-unit>
        <trans-unit id="52b1b85106cc7bdca252cbf745ffe7ba987200e6" translate="yes" xml:space="preserve">
          <source>background-position</source>
          <target state="translated">background-position</target>
        </trans-unit>
        <trans-unit id="cceac05a23d1abc53c9be20390f11adb4ee0b01e" translate="yes" xml:space="preserve">
          <source>background-position-x</source>
          <target state="translated">background-position-x</target>
        </trans-unit>
        <trans-unit id="4b17f6e0c940b6474c31b905c616d5ed60815fb9" translate="yes" xml:space="preserve">
          <source>background-position-y</source>
          <target state="translated">background-position-y</target>
        </trans-unit>
        <trans-unit id="be467190f63141490fcb9b7950250cfb80f87b39" translate="yes" xml:space="preserve">
          <source>background-repeat</source>
          <target state="translated">background-repeat</target>
        </trans-unit>
        <trans-unit id="a8628f3f841ea70dcf99d0612116bbb0845b388e" translate="yes" xml:space="preserve">
          <source>background-size</source>
          <target state="translated">background-size</target>
        </trans-unit>
        <trans-unit id="18f4df3c6e399e115eab71cc8590121584c93ee2" translate="yes" xml:space="preserve">
          <source>backgroundAttachment</source>
          <target state="translated">backgroundAttachment</target>
        </trans-unit>
        <trans-unit id="5a0c7e30142d25a358e34f45113034bddfc8af25" translate="yes" xml:space="preserve">
          <source>backgroundColor</source>
          <target state="translated">backgroundColor</target>
        </trans-unit>
        <trans-unit id="af908886bf13b1a9b9d4313f1a158b78175a6d20" translate="yes" xml:space="preserve">
          <source>backgroundImage</source>
          <target state="translated">backgroundImage</target>
        </trans-unit>
        <trans-unit id="5b72272c446127df8c6c203dd2c772d35bcdcf59" translate="yes" xml:space="preserve">
          <source>backgroundPosition</source>
          <target state="translated">backgroundPosition</target>
        </trans-unit>
        <trans-unit id="3bcd29f93e211ab4e852aa947fdbfe5de5faa743" translate="yes" xml:space="preserve">
          <source>backgroundRepeat</source>
          <target state="translated">backgroundRepeat</target>
        </trans-unit>
        <trans-unit id="72c82be6ca4e8a6ac9fe87733bd6630af08db98f" translate="yes" xml:space="preserve">
          <source>bb. Five</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2321edf52cdeb282e7fc095f7fe0193736152250" translate="yes" xml:space="preserve">
          <source>bb. Four</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f1b7dc8b2a324bd75c08786977befdff592993" translate="yes" xml:space="preserve">
          <source>bb. Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd922c67d56d01f85fae764d7370c9f63b32483" translate="yes" xml:space="preserve">
          <source>bbb. Eight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5366cbb5fd95ee3a4b141679f1038ce79f0dc6ad" translate="yes" xml:space="preserve">
          <source>bc. Five</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b09f36e52f1fe6824918546fe8586d01990e69e" translate="yes" xml:space="preserve">
          <source>behavior</source>
          <target state="translated">behavior</target>
        </trans-unit>
        <trans-unit id="466bc8cef3e71de796ec483e212724a2c2044c68" translate="yes" xml:space="preserve">
          <source>black</source>
          <target state="translated">black</target>
        </trans-unit>
        <trans-unit id="79f08d339105447fd62e83ebc56bb1ef9655655d" translate="yes" xml:space="preserve">
          <source>blend-mode</source>
          <target state="translated">blend-mode</target>
        </trans-unit>
        <trans-unit id="0d913a40c64c8941d1767545f8b23def192208ba" translate="yes" xml:space="preserve">
          <source>block container elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe97813cfa186b10794d158a207d7ebad4c2e09" translate="yes" xml:space="preserve">
          <source>block containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3a168905d9eb91ea7301c98d8062ea280d44e0" translate="yes" xml:space="preserve">
          <source>block elements where overflow has a value other than &lt;code&gt;visible&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e17c07c3231d9f574dc4280a62d25316f74a6ee" translate="yes" xml:space="preserve">
          <source>block-end</source>
          <target state="translated">block-end</target>
        </trans-unit>
        <trans-unit id="31a6e6c951cd423727bf6f6fbb542279e73d1840" translate="yes" xml:space="preserve">
          <source>block-level boxes, absolutely-positioned boxes, and grid items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93162f2dd6e698caeeb08b7a5febac004d8ed295" translate="yes" xml:space="preserve">
          <source>block-level elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4a583f16efe0884ecd9d061be7b57dccc13098" translate="yes" xml:space="preserve">
          <source>block-level elements in the normal flow of the root element. User agents may also apply it to other elements like &lt;code&gt;table-row&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcb8797f479c4c8f44be3de00644534b8895219" translate="yes" xml:space="preserve">
          <source>block-size</source>
          <target state="translated">block-size</target>
        </trans-unit>
        <trans-unit id="bf5c9b4144bf386716e196fc1357351e06fd1926" translate="yes" xml:space="preserve">
          <source>block-size of containing block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dbc0c502d020544e9b91a89f43ff23b580247d" translate="yes" xml:space="preserve">
          <source>block-start</source>
          <target state="translated">block-start</target>
        </trans-unit>
        <trans-unit id="4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9" translate="yes" xml:space="preserve">
          <source>blue</source>
          <target state="translated">blue</target>
        </trans-unit>
        <trans-unit id="a4e90253066487295a1493c03fa325850ddcbc42" translate="yes" xml:space="preserve">
          <source>blue-green</source>
          <target state="translated">blue-green</target>
        </trans-unit>
        <trans-unit id="f21a3a39f4899ae81057f4da4fd8d098ac090b36" translate="yes" xml:space="preserve">
          <source>blur()</source>
          <target state="translated">blur()</target>
        </trans-unit>
        <trans-unit id="ca6bcd4b6f3fa92d735fdb206a49d381884c3cef" translate="yes" xml:space="preserve">
          <source>border</source>
          <target state="translated">border</target>
        </trans-unit>
        <trans-unit id="7faf46d058373427aacbc840dab15bbb810c1e2a" translate="yes" xml:space="preserve">
          <source>border-block</source>
          <target state="translated">border-block</target>
        </trans-unit>
        <trans-unit id="42de38a60abc9d327e7189d8237dd260aa4c366b" translate="yes" xml:space="preserve">
          <source>border-block-color</source>
          <target state="translated">border-block-color</target>
        </trans-unit>
        <trans-unit id="bc5ce3b02c7757c4a6b713083546babc0854d410" translate="yes" xml:space="preserve">
          <source>border-block-end</source>
          <target state="translated">border-block-end</target>
        </trans-unit>
        <trans-unit id="1cc05cc772d7df847993b4a4cdce407f5fa707f4" translate="yes" xml:space="preserve">
          <source>border-block-end-color</source>
          <target state="translated">border-block-end-color</target>
        </trans-unit>
        <trans-unit id="3637f4514f1bc06f2a9dcb0d2a140fa5e73c2942" translate="yes" xml:space="preserve">
          <source>border-block-end-style</source>
          <target state="translated">border-block-end-style</target>
        </trans-unit>
        <trans-unit id="48046a3e7777f395ab84f58f266e11b0915b1b59" translate="yes" xml:space="preserve">
          <source>border-block-end-width</source>
          <target state="translated">border-block-end-width</target>
        </trans-unit>
        <trans-unit id="c1c8e0624f293da3c526a78ddc50766a33d28728" translate="yes" xml:space="preserve">
          <source>border-block-start</source>
          <target state="translated">border-block-start</target>
        </trans-unit>
        <trans-unit id="edd466ccd58cc0e599b7451e0d164a7a90bc8fe7" translate="yes" xml:space="preserve">
          <source>border-block-start-color</source>
          <target state="translated">border-block-start-color</target>
        </trans-unit>
        <trans-unit id="4984dc905d80456bb834a350d59d29a7a6945c02" translate="yes" xml:space="preserve">
          <source>border-block-start-style</source>
          <target state="translated">border-block-start-style</target>
        </trans-unit>
        <trans-unit id="207c928bb5437d9edbfd6071e35bd373ddb1fc09" translate="yes" xml:space="preserve">
          <source>border-block-start-width</source>
          <target state="translated">border-block-start-width</target>
        </trans-unit>
        <trans-unit id="fe172c0f3e2c235225053880d797e2edaf1d28a6" translate="yes" xml:space="preserve">
          <source>border-block-style</source>
          <target state="translated">border-block-style</target>
        </trans-unit>
        <trans-unit id="4a2c7adfb25fb886b883e46619bd941af9ad5569" translate="yes" xml:space="preserve">
          <source>border-block-width</source>
          <target state="translated">border-block-width</target>
        </trans-unit>
        <trans-unit id="850cc767f2f076310d44d8367e5c2b9504f14b78" translate="yes" xml:space="preserve">
          <source>border-bottom</source>
          <target state="translated">border-bottom</target>
        </trans-unit>
        <trans-unit id="2369f4d6986a50ad45234391c58ed3d270df7297" translate="yes" xml:space="preserve">
          <source>border-bottom-color</source>
          <target state="translated">border-bottom-color</target>
        </trans-unit>
        <trans-unit id="2999df656e83829c9b66895e817023a688b29b90" translate="yes" xml:space="preserve">
          <source>border-bottom-left-radius</source>
          <target state="translated">border-bottom-left-radius</target>
        </trans-unit>
        <trans-unit id="d8db1be90cd7e9507cd9249e5a98a462a5c2798b" translate="yes" xml:space="preserve">
          <source>border-bottom-right-radius</source>
          <target state="translated">border-bottom-right-radius</target>
        </trans-unit>
        <trans-unit id="e8d831073860e21ccfaeef07b186c7f03fa23c5d" translate="yes" xml:space="preserve">
          <source>border-bottom-style</source>
          <target state="translated">border-bottom-style</target>
        </trans-unit>
        <trans-unit id="5c896f5f7672bb74364feaf4a0971014bc5ba430" translate="yes" xml:space="preserve">
          <source>border-bottom-width</source>
          <target state="translated">border-bottom-width</target>
        </trans-unit>
        <trans-unit id="026d2f4ec2b522d285d84c3ec0dc3f9d7ab21ffa" translate="yes" xml:space="preserve">
          <source>border-box</source>
          <target state="translated">border-box</target>
        </trans-unit>
        <trans-unit id="4583f90cd9bd7249bf1129211ee51a1ed19b9d2b" translate="yes" xml:space="preserve">
          <source>border-collapse</source>
          <target state="translated">border-collapse</target>
        </trans-unit>
        <trans-unit id="6b60e9ad01b3111bafec4a47367fd4e690d25169" translate="yes" xml:space="preserve">
          <source>border-color</source>
          <target state="translated">border-color</target>
        </trans-unit>
        <trans-unit id="ff43eb717416115501cb225b3cc97edadddba2ba" translate="yes" xml:space="preserve">
          <source>border-image</source>
          <target state="translated">border-image</target>
        </trans-unit>
        <trans-unit id="4d9505da71b11c9ca724a547b920a09c73315211" translate="yes" xml:space="preserve">
          <source>border-image-outset</source>
          <target state="translated">border-image-outset</target>
        </trans-unit>
        <trans-unit id="5fd8a92d30b8c04cf321264eed255760e67ed9c9" translate="yes" xml:space="preserve">
          <source>border-image-repeat</source>
          <target state="translated">border-image-repeat</target>
        </trans-unit>
        <trans-unit id="b735a8e868fba1bdec4eab2d8cb3e9bde7019745" translate="yes" xml:space="preserve">
          <source>border-image-slice</source>
          <target state="translated">border-image-slice</target>
        </trans-unit>
        <trans-unit id="3344e3d806c0c536908789de2637755884acc632" translate="yes" xml:space="preserve">
          <source>border-image-source</source>
          <target state="translated">border-image-source</target>
        </trans-unit>
        <trans-unit id="709c5c19d25c2143518b0a9aef6ad8c9bde694d0" translate="yes" xml:space="preserve">
          <source>border-image-width</source>
          <target state="translated">border-image-width</target>
        </trans-unit>
        <trans-unit id="825bdf57d48acb501b054f61039dcf1e5e39c84f" translate="yes" xml:space="preserve">
          <source>border-inline</source>
          <target state="translated">border-inline</target>
        </trans-unit>
        <trans-unit id="7ba00217a5eace7616801706a16d9199af34d627" translate="yes" xml:space="preserve">
          <source>border-inline-color</source>
          <target state="translated">border-inline-color</target>
        </trans-unit>
        <trans-unit id="3f41fe27d7086b9038d76e323ec764f928247e48" translate="yes" xml:space="preserve">
          <source>border-inline-end</source>
          <target state="translated">border-inline-end</target>
        </trans-unit>
        <trans-unit id="076411db2e97f3f2761dd9aa8a546555b447c9f7" translate="yes" xml:space="preserve">
          <source>border-inline-end-color</source>
          <target state="translated">border-inline-end-color</target>
        </trans-unit>
        <trans-unit id="9348855ef81541acfdc3ad41d68b590afb697cab" translate="yes" xml:space="preserve">
          <source>border-inline-end-style</source>
          <target state="translated">border-inline-end-style</target>
        </trans-unit>
        <trans-unit id="b01f8855be20a1b5b9e913f802c5b64a3eff7ae5" translate="yes" xml:space="preserve">
          <source>border-inline-end-width</source>
          <target state="translated">border-inline-end-width</target>
        </trans-unit>
        <trans-unit id="91632be6d5b7d39b492befc7f3c7a3ee4b3151fa" translate="yes" xml:space="preserve">
          <source>border-inline-start</source>
          <target state="translated">border-inline-start</target>
        </trans-unit>
        <trans-unit id="be25b11afa8aad9715b8f26c4802eeccfa82211c" translate="yes" xml:space="preserve">
          <source>border-inline-start-color</source>
          <target state="translated">border-inline-start-color</target>
        </trans-unit>
        <trans-unit id="81e9b60340e648513450e8b7182976d24e6ecc45" translate="yes" xml:space="preserve">
          <source>border-inline-start-style</source>
          <target state="translated">border-inline-start-style</target>
        </trans-unit>
        <trans-unit id="d943488feafbc543cc9e306658d7d87d1da8f3a7" translate="yes" xml:space="preserve">
          <source>border-inline-start-width</source>
          <target state="translated">border-inline-start-width</target>
        </trans-unit>
        <trans-unit id="2add66785e3a44d6e906bb355d8da006a2e94bcd" translate="yes" xml:space="preserve">
          <source>border-inline-style</source>
          <target state="translated">border-inline-style</target>
        </trans-unit>
        <trans-unit id="e334f04034445c95a9c936a3abbd8dcd6f73589c" translate="yes" xml:space="preserve">
          <source>border-inline-width</source>
          <target state="translated">border-inline-width</target>
        </trans-unit>
        <trans-unit id="651632d76b367ff9050943012c74d114d7781f43" translate="yes" xml:space="preserve">
          <source>border-left</source>
          <target state="translated">border-left</target>
        </trans-unit>
        <trans-unit id="51edf487c88b6ee0f2c6f7979b20639d91e9bc91" translate="yes" xml:space="preserve">
          <source>border-left-color</source>
          <target state="translated">border-left-color</target>
        </trans-unit>
        <trans-unit id="ea6c014e181aee3528ea18bb38e5b6496e15e043" translate="yes" xml:space="preserve">
          <source>border-left-style</source>
          <target state="translated">border-left-style</target>
        </trans-unit>
        <trans-unit id="9cd225143a8cbb4a04cac4709cf8036c30e68812" translate="yes" xml:space="preserve">
          <source>border-left-width</source>
          <target state="translated">border-left-width</target>
        </trans-unit>
        <trans-unit id="a416069e35bb022099422829b80cfe646910fa16" translate="yes" xml:space="preserve">
          <source>border-radius</source>
          <target state="translated">border-radius</target>
        </trans-unit>
        <trans-unit id="546b50dc6d35c7aa8c22e6b6d19ece66fd758b36" translate="yes" xml:space="preserve">
          <source>border-right</source>
          <target state="translated">border-right</target>
        </trans-unit>
        <trans-unit id="85ed5e585f8455be82acf3e8b4e38aefd022f8ed" translate="yes" xml:space="preserve">
          <source>border-right-color</source>
          <target state="translated">border-right-color</target>
        </trans-unit>
        <trans-unit id="3bfd1bccc0be19bb70d42255970f2fc234796f67" translate="yes" xml:space="preserve">
          <source>border-right-style</source>
          <target state="translated">border-right-style</target>
        </trans-unit>
        <trans-unit id="69bf4ec4977ec193dbdc9b90468b4376fa77717e" translate="yes" xml:space="preserve">
          <source>border-right-width</source>
          <target state="translated">border-right-width</target>
        </trans-unit>
        <trans-unit id="fd68a27adf7d270d4283a145699cb7c03e9f5855" translate="yes" xml:space="preserve">
          <source>border-spacing</source>
          <target state="translated">border-spacing</target>
        </trans-unit>
        <trans-unit id="9199ec89b982ca00076a0b221cea0855353df755" translate="yes" xml:space="preserve">
          <source>border-style</source>
          <target state="translated">border-style</target>
        </trans-unit>
        <trans-unit id="be138b1738504fda53a166947102ffbc12bd074a" translate="yes" xml:space="preserve">
          <source>border-top</source>
          <target state="translated">border-top</target>
        </trans-unit>
        <trans-unit id="96928ca57bf5ab3bcf7a731caaea1cfdc43c904c" translate="yes" xml:space="preserve">
          <source>border-top-color</source>
          <target state="translated">border-top-color</target>
        </trans-unit>
        <trans-unit id="cb78bede77972340ef52ae576bfdf97e1f7e6d07" translate="yes" xml:space="preserve">
          <source>border-top-left-radius</source>
          <target state="translated">border-top-left-radius</target>
        </trans-unit>
        <trans-unit id="bb0c131f1aba1e158d4bcf9111800a2ec820e85d" translate="yes" xml:space="preserve">
          <source>border-top-right-radius</source>
          <target state="translated">border-top-right-radius</target>
        </trans-unit>
        <trans-unit id="0d3539eeb7a7bf22b8be399b9868d4eb8115cfb9" translate="yes" xml:space="preserve">
          <source>border-top-style</source>
          <target state="translated">border-top-style</target>
        </trans-unit>
        <trans-unit id="96d4edce65c325ebcb14d7f84a7f4d94c664b593" translate="yes" xml:space="preserve">
          <source>border-top-width</source>
          <target state="translated">border-top-width</target>
        </trans-unit>
        <trans-unit id="611f48d680a57bdf5c925b754c88880b8630b912" translate="yes" xml:space="preserve">
          <source>border-width</source>
          <target state="translated">border-width</target>
        </trans-unit>
        <trans-unit id="c267c77933301b053e561ee53fe4d9370107c51e" translate="yes" xml:space="preserve">
          <source>borderBottom</source>
          <target state="translated">borderBottom</target>
        </trans-unit>
        <trans-unit id="41b5f1ff15076c8fe2dd69a9f03f1d26d2852ddd" translate="yes" xml:space="preserve">
          <source>borderBottomColor</source>
          <target state="translated">borderBottomColor</target>
        </trans-unit>
        <trans-unit id="84b89c2ae0e0a63abecc82e3c7ed7eafa3236e42" translate="yes" xml:space="preserve">
          <source>borderBottomStyle</source>
          <target state="translated">borderBottomStyle</target>
        </trans-unit>
        <trans-unit id="c1a944cfca441d1eb34aced0cccd717f6d7ba8e1" translate="yes" xml:space="preserve">
          <source>borderBottomWidth</source>
          <target state="translated">borderBottomWidth</target>
        </trans-unit>
        <trans-unit id="53770bc29026e0d9f832055faccbc5c0460c30b9" translate="yes" xml:space="preserve">
          <source>borderColor</source>
          <target state="translated">borderColor</target>
        </trans-unit>
        <trans-unit id="297f728039cc515731e42a08baa4b6783379341e" translate="yes" xml:space="preserve">
          <source>borderLeft</source>
          <target state="translated">borderLeft</target>
        </trans-unit>
        <trans-unit id="e0120a18bf1bcb3d51d153828ab0f4e777ebdacb" translate="yes" xml:space="preserve">
          <source>borderLeftColor</source>
          <target state="translated">borderLeftColor</target>
        </trans-unit>
        <trans-unit id="5eec91c995e6123ce663d8d2b88af18d2e488f1b" translate="yes" xml:space="preserve">
          <source>borderLeftStyle</source>
          <target state="translated">borderLeftStyle</target>
        </trans-unit>
        <trans-unit id="01062b9acfb628732970d519a6c2b642a38db6c2" translate="yes" xml:space="preserve">
          <source>borderLeftWidth</source>
          <target state="translated">borderLeftWidth</target>
        </trans-unit>
        <trans-unit id="3779c55ecd0b595ce84930ec2200acb0cc117cb1" translate="yes" xml:space="preserve">
          <source>borderRight</source>
          <target state="translated">borderRight</target>
        </trans-unit>
        <trans-unit id="ff725118f21ba1c7dd4c2b2de60ab18211207cf2" translate="yes" xml:space="preserve">
          <source>borderRightColor</source>
          <target state="translated">borderRightColor</target>
        </trans-unit>
        <trans-unit id="aaf4bd82962da7306d91f6fe5148c279d964c1d0" translate="yes" xml:space="preserve">
          <source>borderRightStyle</source>
          <target state="translated">borderRightStyle</target>
        </trans-unit>
        <trans-unit id="656e7c5c9f0ad9f411f808f0377986fc25475255" translate="yes" xml:space="preserve">
          <source>borderRightWidth</source>
          <target state="translated">borderRightWidth</target>
        </trans-unit>
        <trans-unit id="32a8dc83485854f7312c30064ae415341d71a952" translate="yes" xml:space="preserve">
          <source>borderStyle</source>
          <target state="translated">borderStyle</target>
        </trans-unit>
        <trans-unit id="79783c37425c7dbaf2e7b55e0d1af96a0f2934b8" translate="yes" xml:space="preserve">
          <source>borderTop</source>
          <target state="translated">borderTop</target>
        </trans-unit>
        <trans-unit id="5574f290917ff420e299a66a1d94809662b73197" translate="yes" xml:space="preserve">
          <source>borderTopColor</source>
          <target state="translated">borderTopColor</target>
        </trans-unit>
        <trans-unit id="ae9a730d8a3bf8c975992126335c3a5f48033e9a" translate="yes" xml:space="preserve">
          <source>borderTopStyle</source>
          <target state="translated">borderTopStyle</target>
        </trans-unit>
        <trans-unit id="83a2e3bc240a62ce8e4ce4b998efb356d26d70da" translate="yes" xml:space="preserve">
          <source>borderTopWidth</source>
          <target state="translated">borderTopWidth</target>
        </trans-unit>
        <trans-unit id="aeb46169aa5c71a4ec38ee9bf454b8c51836ad99" translate="yes" xml:space="preserve">
          <source>borderWidth</source>
          <target state="translated">borderWidth</target>
        </trans-unit>
        <trans-unit id="f7ef07b89fd9c4e12d6f27f6d224c30268eb781a" translate="yes" xml:space="preserve">
          <source>both the keyword values &lt;code&gt;weight&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03e9099aad17cb58e4fff1d93d751105735c9c2" translate="yes" xml:space="preserve">
          <source>bottom</source>
          <target state="translated">bottom</target>
        </trans-unit>
        <trans-unit id="27664d3d33530223653d2facdebe5add9d6d5e07" translate="yes" xml:space="preserve">
          <source>box model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8d9a43c3d4c8f349be4654153d713fa2c87be0" translate="yes" xml:space="preserve">
          <source>box-decoration-break</source>
          <target state="translated">box-decoration-break</target>
        </trans-unit>
        <trans-unit id="e7814a0f5f90eab1990a587aa8d0b343e6f06efa" translate="yes" xml:space="preserve">
          <source>box-shadow</source>
          <target state="translated">box-shadow</target>
        </trans-unit>
        <trans-unit id="064c06d8d35e9d7d2e4fc3851194ace664454dd8" translate="yes" xml:space="preserve">
          <source>box-shadow generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c024b6f3a6df33bd3d3fc4b090580fae08a239dd" translate="yes" xml:space="preserve">
          <source>box-shadow test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af13c0c541d713b1aa55317aff1d597798a44144" translate="yes" xml:space="preserve">
          <source>box-shadow tutorial and examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b243e786e378d1d927beabecbf57342f81288837" translate="yes" xml:space="preserve">
          <source>box-sizing</source>
          <target state="translated">box-sizing</target>
        </trans-unit>
        <trans-unit id="f60f555c47003c3245dbb305a619aea9a9d78940" translate="yes" xml:space="preserve">
          <source>break-after</source>
          <target state="translated">break-after</target>
        </trans-unit>
        <trans-unit id="d2ec4ad184ba36d58404d6c2e88e77bff970de71" translate="yes" xml:space="preserve">
          <source>break-before</source>
          <target state="translated">break-before</target>
        </trans-unit>
        <trans-unit id="1e47c06d11cfd4cf0da2bb18254d936f3b5ba65a" translate="yes" xml:space="preserve">
          <source>break-inside</source>
          <target state="translated">break-inside</target>
        </trans-unit>
        <trans-unit id="1f2d1ae70ddc0ee76fb496820adbe62373af7dfe" translate="yes" xml:space="preserve">
          <source>brightness()</source>
          <target state="translated">brightness()</target>
        </trans-unit>
        <trans-unit id="532d3c1492b925a3e979ed4f2366a35c148e7582" translate="yes" xml:space="preserve">
          <source>bug 346189</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a099bd518ac92ccc452d51b42082a3567499b92" translate="yes" xml:space="preserve">
          <source>bug 418521</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24134e021ce06b66ffe54fbce9f783bd623f14b6" translate="yes" xml:space="preserve">
          <source>bug 432891</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb363ffc64c168239c7caea5ab3870f43330788b" translate="yes" xml:space="preserve">
          <source>bug 58646</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b994c5b4e43e7c52453a50c5eb3dad6226bda8" translate="yes" xml:space="preserve">
          <source>by computed value type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a516841ba77a5b4648de2cd0dfcb30ea46dbb4" translate="yes" xml:space="preserve">
          <source>c</source>
          <target state="translated">c</target>
        </trans-unit>
        <trans-unit id="a4193cbe6d8914752708a443e2857631ee009c90" translate="yes" xml:space="preserve">
          <source>c. Three</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c87a66b83b52aff859c9f609ff5192f21d2fcd3" translate="yes" xml:space="preserve">
          <source>c. Two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f22765d04931a078909145ca628d2264c852d7d" translate="yes" xml:space="preserve">
          <source>c1</source>
          <target state="translated">c1</target>
        </trans-unit>
        <trans-unit id="6b1f53303a732ccc8c6aae6640399827c15250e3" translate="yes" xml:space="preserve">
          <source>c2</source>
          <target state="translated">c2</target>
        </trans-unit>
        <trans-unit id="a625406f6977d45c1391b078f4d3656e0b75bfcb" translate="yes" xml:space="preserve">
          <source>c3</source>
          <target state="translated">c3</target>
        </trans-unit>
        <trans-unit id="e4666a670f042877c67a84473a71675ee0950a08" translate="yes" xml:space="preserve">
          <source>c4</source>
          <target state="translated">c4</target>
        </trans-unit>
        <trans-unit id="6ed7d4b725848dbc7f6dcf8ed4c0945e19a45088" translate="yes" xml:space="preserve">
          <source>ca. Six</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d3145739206173b63a93aed1b765706bb3ac42" translate="yes" xml:space="preserve">
          <source>calc()</source>
          <target state="translated">calc()</target>
        </trans-unit>
        <trans-unit id="cc259e3f32d31bd8806ca87ca7775293de91985d" translate="yes" xml:space="preserve">
          <source>calculated with respect to the width of the line box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828e5617170e4df276ef6a81c8029b8b40cc6ccc" translate="yes" xml:space="preserve">
          <source>caption-side</source>
          <target state="translated">caption-side</target>
        </trans-unit>
        <trans-unit id="38d5ab0d8a574cd0545df08e243bfba5e2cde8f6" translate="yes" xml:space="preserve">
          <source>caret-color</source>
          <target state="translated">caret-color</target>
        </trans-unit>
        <trans-unit id="e36429f0c27a063e67a3f2bf07b4b2d4edfd240a" translate="yes" xml:space="preserve">
          <source>cb. Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be94e1b34e1c367f719020b21acced7af4f8a2e5" translate="yes" xml:space="preserve">
          <source>cc. Eight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e239ce3a4778a530712032e825c6a462b53686dc" translate="yes" xml:space="preserve">
          <source>cc. Six</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
