<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="e50b7c8fce20053f557756eb03b5bf7ac9b856e6" translate="yes" xml:space="preserve">
          <source>Depending on the requested action, the server may or may not return a representation to the client. Representations may be encoded in any one of a number of Internet media types, such as JSON and HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="6323d445a5409f452a72eb8270bc538077905e2e" translate="yes" xml:space="preserve">
          <source>Deprecated alias of &lt;a href=&quot;#falcon.Request.get_param_as_json&quot;&gt;&lt;code&gt;get_param_as_json()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef0fd90f9c4c55ce1c372e15b54aa639ccc836f" translate="yes" xml:space="preserve">
          <source>Deserialize the &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt;&lt;code&gt;falcon.Request&lt;/code&gt;&lt;/a&gt; body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0299df69519745ac509aaf71de243d99707f67aa" translate="yes" xml:space="preserve">
          <source>Design Philosophy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bdd0d149e362c043f926983ccdddac9f21f2cc" translate="yes" xml:space="preserve">
          <source>Destructor, unittest-style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7609e929a44556809fd4e890e3583331d74511" translate="yes" xml:space="preserve">
          <source>Determine whether or not the client accepts a given media type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1dbb02e0e2077d6b22d60c0740afd0dfedcc20" translate="yes" xml:space="preserve">
          <source>Direct the client to only return the cookie in subsequent requests if they are made over HTTPS (default: &lt;code&gt;True&lt;/code&gt;). This prevents attackers from reading sensitive cookie data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88edb6420768d175ccdffa45fb8843480c5a139e" translate="yes" xml:space="preserve">
          <source>Direct the client to only transfer the cookie with unscripted HTTP requests (default: &lt;code&gt;True&lt;/code&gt;). This is intended to mitigate some forms of cross-site scripting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9453e2cbe8751ce3af537387a9b66a0af7d69c6d" translate="yes" xml:space="preserve">
          <source>Disallowed characters are percent-encoded in a way that models &lt;code&gt;urllib.parse.quote(safe=&quot;~&quot;)&lt;/code&gt;. However, the Falcon function is faster in the average case than the similar &lt;code&gt;quote&lt;/code&gt; function found in urlib. It also strives to be easier to use by assuming a sensible default of allowed characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="333272f4e9f2cff00edea32074481a620157e72f" translate="yes" xml:space="preserve">
          <source>Does Falcon set Content-Length or do I need to do that explicitly?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86ca5300d5d9b26968a342f6624405b9094fc7f" translate="yes" xml:space="preserve">
          <source>Does Falcon support WebSocket?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433816f574ded160cec7e99a85ad5bd601572a17" translate="yes" xml:space="preserve">
          <source>Does Falcon support asyncio?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17c8e44f565b0f86049e467380a5969f33ca0ba" translate="yes" xml:space="preserve">
          <source>Does Falcon work with HTTP/2?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c6fdd97981e24b2bcf53bec7e2cea827bec567" translate="yes" xml:space="preserve">
          <source>Due to the limitations of WSGI, Falcon is unable to support &lt;code&gt;asyncio&lt;/code&gt; at this time. However, we are exploring alternatives to WSGI (such as &lt;a href=&quot;https://github.com/django/asgiref/blob/master/specs/asgi.rst&quot;&gt;ASGI&lt;/a&gt;) that will allow us to support asyncio natively in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da446339868958f4e1cc59fafdca99f23d6ca74f" translate="yes" xml:space="preserve">
          <source>Due to the limitations of WSGI, Falcon is unable to support the WebSocket protocol as stated above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6156a516dbfc6ea31bca7b52f7d996c965a0b36f" translate="yes" xml:space="preserve">
          <source>EMC</source>
          <target state="translated">EMC</target>
        </trans-unit>
        <trans-unit id="a59688eba337a50736da76d745806f1f667fc91e" translate="yes" xml:space="preserve">
          <source>Each API instance provides a callable WSGI interface and a routing engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5e53b022ed9dc5fe0bdeb568aeb8bd562852fd" translate="yes" xml:space="preserve">
          <source>Each component&amp;rsquo;s &lt;em&gt;process_request&lt;/em&gt;, &lt;em&gt;process_resource&lt;/em&gt;, and &lt;em&gt;process_response&lt;/em&gt; methods are executed hierarchically, as a stack, following the ordering of the list passed via the &lt;code&gt;middleware&lt;/code&gt; kwarg of &lt;a href=&quot;api#api&quot;&gt;falcon.API&lt;/a&gt;. For example, if a list of middleware objects are passed as &lt;code&gt;[mob1, mob2, mob3]&lt;/code&gt;, the order of execution is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f406d0d1f99daf1740b0ed19bec1a7cb264b54d8" translate="yes" xml:space="preserve">
          <source>Each field is converted to a named group, so that when a match is found, the fields can be easily extracted using &lt;a href=&quot;https://docs.python.org/2/library/re.html#re.MatchObject.groupdict&quot;&gt;&lt;code&gt;re.MatchObject.groupdict()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165753f601fa09554ba2c8a0a48eea9b6027512a" translate="yes" xml:space="preserve">
          <source>Each resource class defines various &amp;ldquo;responder&amp;rdquo; methods, one for each HTTP method the resource allows. Responder names start with &lt;code&gt;on_&lt;/code&gt; and are named according to which HTTP method they handle, as in &lt;code&gt;on_get()&lt;/code&gt;, &lt;code&gt;on_post()&lt;/code&gt;, &lt;code&gt;on_put()&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646f2e2ef01e4f55d9b4cc42a9104c1afb835ef4" translate="yes" xml:space="preserve">
          <source>Each responder also receives a &lt;code&gt;Response&lt;/code&gt; object that can be used for setting the status code, headers, and body of the response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c0844abd55a9bfb6c5b8339fb95f7bbe1bee95" translate="yes" xml:space="preserve">
          <source>Each responder in a resource receives a &lt;code&gt;Request&lt;/code&gt; object that can be used to read the headers, query parameters, and body of the request. You can use the standard &lt;code&gt;help()&lt;/code&gt; function or IPython&amp;rsquo;s magic &lt;code&gt;?&lt;/code&gt; function to list the attributes and methods of Falcon&amp;rsquo;s &lt;code&gt;Request&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55ab0140edbfbb58e34e829e02c6d18e88152f2" translate="yes" xml:space="preserve">
          <source>Earlier we pointed out that our POST test relied heavily on mocking, relying on assumptions that may or may not hold true as the code evolves. To mitigate this problem, we&amp;rsquo;ll not only have to refactor the tests, but also the application itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5cfd205582374128d08fa3eed383f40815420b" translate="yes" xml:space="preserve">
          <source>Easy access to headers and bodies through request and response classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca0878681522886c271137626bb93f0dc36a138" translate="yes" xml:space="preserve">
          <source>Either a file-like object with a &lt;code&gt;read()&lt;/code&gt; method that takes an optional size argument and returns a block of bytes, or an iterable object, representing response content, and yielding blocks as byte strings. Falcon will use &lt;em&gt;wsgi.file_wrapper&lt;/em&gt;, if provided by the WSGI server, in order to efficiently serve file-like objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2f8fde4a791557c2d695ee3100ad40ba255251" translate="yes" xml:space="preserve">
          <source>Either a single object or a list of objects (instantiated classes) that implement the following middleware component interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f029b2ac6838e372f0fa401b3a39ec9d5ca678e2" translate="yes" xml:space="preserve">
          <source>Enabling this option makes the form parameters accessible via &lt;a href=&quot;request_and_response#falcon.Request.params&quot;&gt;&lt;code&gt;params&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;request_and_response#falcon.Request.get_param&quot;&gt;&lt;code&gt;get_param()&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfe17979242954f01820bab666a1248faf47f85" translate="yes" xml:space="preserve">
          <source>Encapsulates the result of a simulated WSGI request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7cebcbcce845f1caf1a867178ff8f9f746cfc4" translate="yes" xml:space="preserve">
          <source>Encodes a full or relative URI according to RFC 3986.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32866acddd5ac64d35a4e2a319c5b20321a865cb" translate="yes" xml:space="preserve">
          <source>Encodes a value string according to RFC 3986.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d371f28bfea1e852f448381bb4f0bdfccaa7149e" translate="yes" xml:space="preserve">
          <source>Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee20c6a8f3c82704b0c724ac8d99c26e4e40e19c" translate="yes" xml:space="preserve">
          <source>Error handlers are matched in LIFO order. In other words, when searching for an error handler to match a raised exception, and more than one handler matches the exception type, the framework will choose the one that was most recently registered. Therefore, more general error handlers (e.g., for the standard &lt;code&gt;Exception&lt;/code&gt; type) should be added first, to avoid masking more specific handlers for subclassed types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bf342ec90ed3bf74e2871976342e87b0fccbb1" translate="yes" xml:space="preserve">
          <source>Error handlers may be registered for any type, including &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;. This feature provides a central location for logging and otherwise handling exceptions raised by responders, hooks, and middleware components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66245aa64a86154ca6a2ea42b381f9d26b64b3c7" translate="yes" xml:space="preserve">
          <source>Error handlers may be registered for any type, including &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;. This feature provides a central location for logging and otherwise handling exceptions raised by responders, hooks, and middleware components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde86c7f4b7dc767f358479138f8cb086c648eda" translate="yes" xml:space="preserve">
          <source>Errors are anticipated, detected, and handled appropriately within each responder and with the aid of custom error handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5b9b756db80059caf4778cf1f03df3e7182963" translate="yes" xml:space="preserve">
          <source>Errors are anticipated, detected, logged, and handled appropriately within each responder or by global error handling hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="75f06aa13c189adf2f5019fbbfe4710304a99656" translate="yes" xml:space="preserve">
          <source>Extends &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; to support WSGI functional testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c94538d1874480a4371b6ab14ef1e2eea48fb4" translate="yes" xml:space="preserve">
          <source>Extensibility</source>
          <target state="translated">Extensibility</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="63f5c347ef158500f121d78160b7a92c3c94ee35" translate="yes" xml:space="preserve">
          <source>Falcon</source>
          <target state="translated">Falcon</target>
        </trans-unit>
        <trans-unit id="ff48f03e1496cdfcab9efde703a6ff29f4c06783" translate="yes" xml:space="preserve">
          <source>Falcon &lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;lives on GitHub&lt;/a&gt;, making the code easy to browse, download, fork, etc. Pull requests are always welcome! Also, please remember to star the project if it makes you happy. :)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f985cf6a12e639ab0c0d300aa39acb655162eae9" translate="yes" xml:space="preserve">
          <source>Falcon &lt;a href=&quot;middleware#middleware&quot;&gt;middleware components&lt;/a&gt; can also be used to insert logic before and after requests. However, unlike hooks, &lt;a href=&quot;middleware#middleware&quot;&gt;middleware components&lt;/a&gt; are triggered &lt;strong&gt;globally&lt;/strong&gt; for all requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a06e2be7aac7c96da06e023e8b6c51baf9ba19" translate="yes" xml:space="preserve">
          <source>Falcon License</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff92c93236f195dd672d7d5152b84a0ce77a3ac" translate="yes" xml:space="preserve">
          <source>Falcon add-ons and complementary packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e56cf3c6bb3d12c9fc3ce9b0c73701bf0c08dd" translate="yes" xml:space="preserve">
          <source>Falcon allows for easy and customizable internet media type handling. By default Falcon only enables a single JSON handler. However, additional handlers can be configured through the &lt;a href=&quot;api#falcon.RequestOptions&quot;&gt;&lt;code&gt;falcon.RequestOptions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#falcon.ResponseOptions&quot;&gt;&lt;code&gt;falcon.ResponseOptions&lt;/code&gt;&lt;/a&gt; objects specified on your &lt;a href=&quot;api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f672f0128390601d121f95602600d2c84ad96d" translate="yes" xml:space="preserve">
          <source>Falcon also fully supports &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;CPython&lt;/a&gt; 2.6-2.7, and 3.3+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b15873bbe86c4e87696ba5782f4adcfc5427ceb" translate="yes" xml:space="preserve">
          <source>Falcon also provides a generic &lt;code&gt;HTTPStatus&lt;/code&gt; class. Raise this class from a hook, middleware, or a responder to stop handling the request and skip to the response handling. It takes status, additional headers and body as input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04fb937268d26a387dd343dc484a3b4a6f67c71" translate="yes" xml:space="preserve">
          <source>Falcon also supports more complex parameterized path segments that contain multiple values. For example, a version control API might use the following route template for diffing two code branches:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfee5f0c0c8cdbc7927b7371d72f84d6a292203" translate="yes" xml:space="preserve">
          <source>Falcon apps work with any WSGI server, and run great under CPython 2.7, PyPy, and CPython 3.3+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ff7f06ee541aa1bfc890408dff2d83e05b1ddb" translate="yes" xml:space="preserve">
          <source>Falcon attempts to serialize the &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; instance using its &lt;a href=&quot;../api/errors#falcon.HTTPError.to_json&quot;&gt;&lt;code&gt;to_json()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../api/errors#falcon.HTTPError.to_xml&quot;&gt;&lt;code&gt;to_xml()&lt;/code&gt;&lt;/a&gt; methods, according to the Accept header in the request. If neither JSON nor XML is acceptable, no response body will be generated. You can override this behavior if needed via &lt;a href=&quot;../api/api#falcon.API.set_error_serializer&quot;&gt;&lt;code&gt;set_error_serializer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce0df4c5f0585e0379acc2e86a5c07583ed7f3b" translate="yes" xml:space="preserve">
          <source>Falcon can process a list of &lt;code&gt;tuple&lt;/code&gt; slightly faster than a &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4c286f6834327372f62f90146b2f304b8c7fc9" translate="yes" xml:space="preserve">
          <source>Falcon can process a list of tuples slightly faster than a dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e190e5b799c3b82e2170b9965b1ae27cddb2a45" translate="yes" xml:space="preserve">
          <source>Falcon currently only provides a JSON Schema media validator; however, JSON Schema is very versatile and can be used to validate any deserialized media type that JSON also supports (i.e. dicts, lists, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70472072a8b2328159abb8119444c3bff614b91" translate="yes" xml:space="preserve">
          <source>Falcon currently only supports partial negotiation out of the box. By default, when the &lt;code&gt;media&lt;/code&gt; attribute is used it attempts to de/serialize based on the &lt;code&gt;Content-Type&lt;/code&gt; header value. The missing link that Falcon doesn&amp;rsquo;t provide is the connection between the &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt;&lt;code&gt;falcon.Request&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Accept&lt;/code&gt; header provided by a user and the &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;falcon.Response&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc0369a56969f0cee94796a740ef9a8bea55713" translate="yes" xml:space="preserve">
          <source>Falcon defaults to treating commas in a query string as literal characters delimiting a comma separated list. For example, given the query string &lt;code&gt;?c=1,2,3&lt;/code&gt;, Falcon defaults to adding this to your &lt;code&gt;request.params&lt;/code&gt; dictionary as &lt;code&gt;{'c': ['1', '2', '3']}&lt;/code&gt;. If you attempt to use JSON in the value of the query string, for example &lt;code&gt;?c={'a':1,'b':2}&lt;/code&gt;, the value will get added to your &lt;code&gt;request.params&lt;/code&gt; in a way that you probably don&amp;rsquo;t expect: &lt;code&gt;{'c': [&quot;{'a':1&quot;, &quot;'b':2}&quot;]}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19700eeabd9858730b3a56693543cccf728c68d1" translate="yes" xml:space="preserve">
          <source>Falcon defines a set of exceptions that can be raised within a middleware method, hook, or responder in order to trigger a 3xx (Redirection) response to the client. Raising one of these classes short-circuits request processing in a manner similar to raising an instance or subclass of &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041110baeb8cec21e5eb2d4fcbf01352e7364e95" translate="yes" xml:space="preserve">
          <source>Falcon depends on &lt;code&gt;six&lt;/code&gt; and &lt;code&gt;python-mimeparse&lt;/code&gt;. &lt;code&gt;python-mimeparse&lt;/code&gt; is a better-maintained fork of the similarly named &lt;code&gt;mimeparse&lt;/code&gt; project. Normally the correct package will be selected by Falcon&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;. However, if you are using an alternate strategy to manage dependencies, please take care to install the correct package in order to avoid errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc109fe672187d17f3ee0103d06304b59bf42a0" translate="yes" xml:space="preserve">
          <source>Falcon does not currently support parsing files submitted by an HTTP form (&lt;code&gt;multipart/form-data&lt;/code&gt;), although we do plan to add this feature in a future version. In the meantime, you can use the standard &lt;code&gt;cgi.FieldStorage&lt;/code&gt; class to parse the request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178a7f28b5f4652fbfd18ffcf548fb18a2a0551b" translate="yes" xml:space="preserve">
          <source>Falcon expects form-encoded request bodies to be encoded according to the standard W3C algorithm (see also &lt;a href=&quot;http://goo.gl/6rlcux&quot;&gt;http://goo.gl/6rlcux&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f09e0064f3e01c26b36cb0375af89d26a5a5266" translate="yes" xml:space="preserve">
          <source>Falcon generally tries to minimize the number of objects that it instantiates. It does this for two reasons: first, to avoid the expense of creating the object, and second to reduce memory usage. Therefore, when adding a route, Falcon requires an &lt;em&gt;instance&lt;/em&gt; of your resource class, rather than the class type. That same instance will be used to serve all requests coming in on that route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b91eb49c14b6998d3fd7c99d4b838195c4670f" translate="yes" xml:space="preserve">
          <source>Falcon is a WSGI framework and as such does not serve HTTP requests directly. However, you can get most of the benefits of HTTP/2 by simply deploying any HTTP/2-compliant web server or load balancer in front of your app to translate between HTTP/2 and HTTP/1.1. Eventually we expect that Python web servers (such as uWSGI) will support HTTP/2 natively, eliminating the need for a translation layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08add0fc9564a2148338ad5c29cc77a0f80535ad" translate="yes" xml:space="preserve">
          <source>Falcon is a minimalist WSGI library for building speedy web APIs and app backends. We like to think of Falcon as the &lt;code&gt;Dieter Rams&lt;/code&gt; of web frameworks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce64070b7a41f29416d6b0a95631568828ed2fe6" translate="yes" xml:space="preserve">
          <source>Falcon is designed for applications that require a high level of customization or performance tuning. The framework&amp;rsquo;s minimalist design frees the developer to select the best strategies and 3rd-party packages for the task at hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08927384fe350eda2d01fb26bf3840a05b37b6fe" translate="yes" xml:space="preserve">
          <source>Falcon is released under the terms of the &lt;a href=&quot;http://opensource.org/licenses/Apache-2.0&quot;&gt;Apache 2.0 License&lt;/a&gt;. This means that you can use it in your commercial applications without having to also open-source your own code. It also means that if someone happens to contribute code that is associated with a patent, you are granted a free license to use said patent. That&amp;rsquo;s a pretty sweet deal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e693fff89fba4cc021a57b3ebb6d7f3af5f9c8c5" translate="yes" xml:space="preserve">
          <source>Falcon is used around the world by a growing number of organizations, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebec94c9185cdd938b233168f02d7f9a44883e86" translate="yes" xml:space="preserve">
          <source>Falcon makes it easy to efficiently serve static files by simply assigning an open file to &lt;code&gt;resp.stream&lt;/code&gt;&lt;a href=&quot;tutorial#tutorial-serving-images&quot;&gt;as demonstrated in the tutorial&lt;/a&gt;. You can also serve an entire directory of files via &lt;a href=&quot;../api/api#falcon.API.add_static_route&quot;&gt;&lt;code&gt;falcon.API.add_static_route()&lt;/code&gt;&lt;/a&gt;. However, if possible, it is best to serve static files directly from a web server like Nginx, or from a CDN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579f5aec8b920abd906a5ff47a0e1cda2ece2346" translate="yes" xml:space="preserve">
          <source>Falcon provides a list of constants for common &lt;a href=&quot;http://httpstatus.es&quot;&gt;HTTP response status codes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8849afcd8ec22e51fd14346744d2d18826e039" translate="yes" xml:space="preserve">
          <source>Falcon provides a number of constants for common status codes. They all start with the &lt;code&gt;HTTP_&lt;/code&gt; prefix, as in: &lt;code&gt;falcon.HTTP_204&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca003e1b7eda3901a9295ddc490c2fe136e79263" translate="yes" xml:space="preserve">
          <source>Falcon provides a number of exception classes that can be raised to redirect the client to a different location (see also &lt;a href=&quot;../api/redirects#redirects&quot;&gt;Redirection&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc047f388844ceeb1fdcecbb806c60707a5a94b4" translate="yes" xml:space="preserve">
          <source>Falcon routes incoming requests to resources based on a set of URI templates. If the path requested by the client matches the template for a given route, the request is then passed on to the associated resource for processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0974014c5d0f223b7da30099352aa5920a97f31b" translate="yes" xml:space="preserve">
          <source>Falcon skips processing the response body when, according to the HTTP spec, no body should be returned. If the client sends a HEAD request, the framework will always return an empty body. Falcon will also return an empty body whenever the response status is any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2cf57886dfd94a138ab528debe4d7f89ff1901" translate="yes" xml:space="preserve">
          <source>Falcon speaks WSGI, and so in order to serve a Falcon app, you will need a WSGI server. Gunicorn and uWSGI are some of the more popular ones out there, but anything that can load a WSGI app will do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd572600798963641bc96fba40722fd2b796abec" translate="yes" xml:space="preserve">
          <source>Falcon supports &lt;a href=&quot;../api/testing#testing&quot;&gt;testing&lt;/a&gt; its &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;API&lt;/code&gt;&lt;/a&gt; object by simulating HTTP requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b608045782856dd0f7366d158830c89a6ab6a0a" translate="yes" xml:space="preserve">
          <source>Falcon supports &lt;em&gt;before&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt; hooks. You install a hook simply by applying one of the decorators below, either to an individual responder or to an entire resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778cb5db8ddb4c6be8b25e475991ac9b618ec18c" translate="yes" xml:space="preserve">
          <source>Falcon supports using any callable as a hook. This allows for using a class instead of a function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b805955b6ca46c1f5fe233004ea2255ebc74ef" translate="yes" xml:space="preserve">
          <source>Falcon talks, podcasts, and blog posts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37cf1ea3e0d8774208499ede0becf96035ae0a06" translate="yes" xml:space="preserve">
          <source>Falcon tries to do as little as possible while remaining highly effective.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04545ece9eb984bf88daa8ff2b345a998f56134" translate="yes" xml:space="preserve">
          <source>Falcon uses Python classes to represent resources. In practice, these classes act as controllers in your application. They convert an incoming request into one or more internal actions, and then compose a response back to the client based on the results of those actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849a3798efb24ec9d4b33aa623a6966d5bca2413" translate="yes" xml:space="preserve">
          <source>Falcon will convert any instance or subclass of &lt;a href=&quot;#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; raised by a responder, hook, or middleware component into an appropriate HTTP response. The default error serializer supports both JSON and XML. If the client indicates acceptance of both JSON and XML with equal weight, JSON will be chosen. Other media types may be supported by overriding the default serializer via &lt;a href=&quot;api#falcon.API.set_error_serializer&quot;&gt;&lt;code&gt;set_error_serializer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f168ede4e3323e698d737ecdc8c5ad127f9aa0f6" translate="yes" xml:space="preserve">
          <source>Falcon will format the &lt;code&gt;datetime&lt;/code&gt; as an HTTP date string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faca0002c3cb4cdaf6aba6e84c1ade8a03ce44a7" translate="yes" xml:space="preserve">
          <source>Falcon will re-raise errors that do not inherit from &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; unless you have registered a custom error handler for that type (see also: &lt;a href=&quot;../api/api#api&quot;&gt;falcon.API&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2b0a1663ec6d97a20405737934843e795698cc" translate="yes" xml:space="preserve">
          <source>Falcon will re-raise errors that do not inherit from &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;falcon.HTTPError&lt;/code&gt;&lt;/a&gt; unless you have registered a custom error handler for that type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd4c4a98fb8d43cb5324130f210e9c9146752d1" translate="yes" xml:space="preserve">
          <source>Falcon will try to do this for you, based on the value of &lt;code&gt;resp.body&lt;/code&gt;, &lt;code&gt;resp.data&lt;/code&gt;, or &lt;code&gt;resp.stream_len&lt;/code&gt; (whichever is set in the response, checked in that order.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab423a3cc5948032bd50d9ab9b30f959f1c8dfb9" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s API class is a WSGI &amp;ldquo;application&amp;rdquo; that you can host with any standard-compliant WSGI server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4590a30c4fd9f3d471e4df058b81f264f33d48ca" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s default router supports the use of field converters to transform a URI template field value. Field converters may also perform simple input validation. For example, the following URI template uses the &lt;code&gt;int&lt;/code&gt; converter to convert the value of &lt;code&gt;tid&lt;/code&gt; to a Python &lt;code&gt;int&lt;/code&gt;, but only if it has exactly eight digits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10d744fcc92ada624416d23e7d377cb1dd9cce9" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s default router uses Python classes to represent resources. In practice, these classes act as controllers in your application. They convert an incoming request into one or more internal actions, and then compose a response back to the client based on the results of those actions. (See also: &lt;a href=&quot;../user/tutorial#tutorial-resources&quot;&gt;Tutorial: Creating Resources&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e631bb1721b80046b8797d90b1e9502bc17fd1" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s default routing engine is based on a decision tree that is first compiled into Python code, and then evaluated by the runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34603de04425064250bd5a732a2557fc5c5ac97" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s design borrows several key concepts from the REST architectural style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5347790147b10c48d6a28d2156722f19b998e0a" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s middleware interface is defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4930d01484a2d41a9c1cec1fc1539c197da8b35c" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s testing framework supports both &lt;code&gt;unittest&lt;/code&gt; and &lt;code&gt;pytest&lt;/code&gt;. In fact, the tutorial in the docs provides an excellent introduction to &lt;a href=&quot;http://falcon.readthedocs.io/en/stable/user/tutorial.html#testing-your-application&quot;&gt;testing Falcon apps with pytest&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9474f3f31577298d109e6165417fc8c0009ebd5" translate="yes" xml:space="preserve">
          <source>Falcon&amp;rsquo;s testing module contains various test classes and utility functions to support functional testing for both Falcon-based apps and the Falcon framework itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="ba9e0d7f6e416856c1efeafa1a9defd902f95ee7" translate="yes" xml:space="preserve">
          <source>Field Converters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efcf860a76a2093db8b28c2f5d9f80bbf7592a4" translate="yes" xml:space="preserve">
          <source>File-like input object for reading the body of the request, if any. This object provides direct access to the server&amp;rsquo;s data stream and is non-seekable. In order to avoid unintended side effects, and to provide maximum flexibility to the application, Falcon itself does not buffer or spool the data in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d16028b31f615db31eed649289cd6734da0ae72" translate="yes" xml:space="preserve">
          <source>File-like wrapper around &lt;code&gt;stream&lt;/code&gt; to normalize certain differences between the native input objects employed by different WSGI servers. In particular, &lt;code&gt;bounded_stream&lt;/code&gt; is aware of the expected Content-Length of the body, and will never block on out-of-bounds reads, assuming the client does not stall while transmitting the data to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aee5479c01361915b11f6475cf1d3098722f7fb" translate="yes" xml:space="preserve">
          <source>Finally, if one of the &lt;em&gt;process_response&lt;/em&gt; methods raises an error, or the routed on_* responder method itself raises an error, the exception will be handled in a similar manner as above. Then, the framework will execute any remaining middleware on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2062f22f892474a055e42a67082eb1e65e2679b3" translate="yes" xml:space="preserve">
          <source>Finally, restart Gunicorn and then try sending a POST request to the resource from the command line (substituting &lt;code&gt;test.png&lt;/code&gt; for a path to any PNG you like.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c711251063e4abf5f1ad85c6cc6e8d8c49986a95" translate="yes" xml:space="preserve">
          <source>Finally, to build Falcon&amp;rsquo;s docs from source, simply run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9d82f77c6b3f084561de3044e7ac19b2e49691" translate="yes" xml:space="preserve">
          <source>Finally, we need to update the test code. Modify &lt;code&gt;test_app.py&lt;/code&gt; to look similar to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058bfd44e6c504c52fbe2877760c624f7fed27e4" translate="yes" xml:space="preserve">
          <source>First Steps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041010aa1d1724de15abf3bf3c4d85802c02cbe2" translate="yes" xml:space="preserve">
          <source>First, create a &lt;code&gt;tests&lt;/code&gt; directory with &lt;code&gt;__init__.py&lt;/code&gt; and a test module (&lt;code&gt;test_app.py&lt;/code&gt;) inside it. The project&amp;rsquo;s structure should now look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb0897f5b5514300c14b7b964e8e8d400348082" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s check the incoming media type when something is posted to make sure it is a common image type. We&amp;rsquo;ll implement this with a &lt;code&gt;before&lt;/code&gt; hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbb4a98e2aaf92a1011f190525ebfa76a55f0f8" translate="yes" xml:space="preserve">
          <source>Flags a method as deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255a145f34e8afe2b573a9b10d240f6a23db5466" translate="yes" xml:space="preserve">
          <source>For Python 2, you will also need to install the &lt;code&gt;mock&lt;/code&gt; package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e6ed15dfcbc969ed7ad440d0b1cd59e4d7755b" translate="yes" xml:space="preserve">
          <source>For a slight performance cost, you may instead wish to use &lt;a href=&quot;#falcon.Request.bounded_stream&quot;&gt;&lt;code&gt;bounded_stream&lt;/code&gt;&lt;/a&gt;, which wraps the native WSGI input object to normalize its behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf9f267637b2c329df93fff3076285d054119f7" translate="yes" xml:space="preserve">
          <source>For byte ranges, failing to overlap the current extent means that the first-byte-pos of all of the byte-range-spec values were greater than the current length of the selected representation. When this status code is generated in response to a byte-range request, the sender SHOULD generate a Content-Range header field specifying the current length of the selected representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda90eb3fe1e5e905586c5529ea3e4f2a417a925" translate="yes" xml:space="preserve">
          <source>For dynamically-generated content, you can choose to not set &lt;code&gt;stream_len&lt;/code&gt;, in which case Falcon will then leave off the Content-Length header, and hopefully your WSGI server will do the Right Thing&amp;trade; (assuming you&amp;rsquo;ve told it to enable keep-alive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3643e5122ea4ac2aad60cb92defa1d10e5a4cf24" translate="yes" xml:space="preserve">
          <source>For example, consider this hook that validates a POST request for an image resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221fc3e4cfe443d6a21587b5183e78490e353c8e" translate="yes" xml:space="preserve">
          <source>For example, the following will not block when Content-Length is 0 or the header is missing altogether:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b427f81dcfd712a7c5da04118efe6dffe8e737" translate="yes" xml:space="preserve">
          <source>For example, this error condition may occur if an XML request body contains well-formed (i.e., syntactically correct), but semantically erroneous, XML instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bce093ce3bbf6ade2bae939dfac6cee9debb82" translate="yes" xml:space="preserve">
          <source>For historical reasons, a user agent MAY change the request method from POST to GET for the subsequent request. If this behavior is undesired, the 307 (Temporary Redirect) status code can be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae27e90a22cf332be3824c6826ec68d81952688" translate="yes" xml:space="preserve">
          <source>For historical reasons, a user agent MAY change the request method from POST to GET for the subsequent request. If this behavior is undesired, the 308 (Permanent Redirect) status code can be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4dffc7260ca916d7f11e9ebc856e2ed603e171" translate="yes" xml:space="preserve">
          <source>For more sophisticated use cases, have a look at Falcon add-ons from the community, such as &lt;a href=&quot;https://github.com/lwcolton/falcon-cors&quot;&gt;falcon-cors&lt;/a&gt;, or try one of the generic &lt;a href=&quot;https://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=cors&amp;amp;submit=search&quot;&gt;WSGI CORS libraries available on PyPI&lt;/a&gt;. If you use an API gateway, you might also look into what CORS functionaly it provides at that level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d14ccff58aa87b156e3428ef02a686b7e84cec0" translate="yes" xml:space="preserve">
          <source>For setting cookies, see &lt;a href=&quot;#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac53b9260c4ee0c293b6552a0de400aa75706e9" translate="yes" xml:space="preserve">
          <source>For setting cookies, see instead &lt;a href=&quot;#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544cc5dc603722508f8d3b50cc46f77c2a60a2fa" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;secure&lt;/code&gt; cookie attribute to be effective, your application will need to enforce HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6b83d507a693fe2d475f11151ec7472ef971f9" translate="yes" xml:space="preserve">
          <source>For this attribute to be effective, your web server or load balancer will need to enforce HTTPS when setting the cookie, as well as in all subsequent requests that require the cookie to be sent back from the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a85e86191485a14dc336d7d44ba6667043b9136" translate="yes" xml:space="preserve">
          <source>From the main project directory, exercise your new test by running pytest against the &lt;code&gt;tests&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdd32ada41f2c934920302feb5dd0666cc082d6" translate="yes" xml:space="preserve">
          <source>Full Unicode support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9303b0a252dc2ac0eb81f969a7ccf0d5678e03" translate="yes" xml:space="preserve">
          <source>Fully exercising your code is critical to creating a robust application. Let&amp;rsquo;s take a moment to write a test for what&amp;rsquo;s been implemented so far.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9182b5f484c16d68476ad0e76ae49a9936dc25" translate="yes" xml:space="preserve">
          <source>Functional testing framework for Falcon apps and Falcon itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db391822e28226377a1e6e34d41886f0089f87f2" translate="yes" xml:space="preserve">
          <source>Functional tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804eeb7d7f6dd7bdc678cf2d9c452916c6e20adf" translate="yes" xml:space="preserve">
          <source>Functional tests define the application&amp;rsquo;s behavior from the outside. When using TDD, this can be a more natural place to start as opposed to lower-level unit testing, since it is difficult to anticipate what internal interfaces and components are needed in advance of defining the application&amp;rsquo;s user-facing functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb28232c5649bf80e5b132a565afdea85dc0469" translate="yes" xml:space="preserve">
          <source>GET responder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d9dc6100d29fbc3e17784e3524cc33c739d170" translate="yes" xml:space="preserve">
          <source>GMT offset, which is equivalent to UTC and so is aways 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2087739644c1ed19a2b5f05439c1feb34cb2b5" translate="yes" xml:space="preserve">
          <source>GMT timezone class implementing the &lt;a href=&quot;https://docs.python.org/2/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;datetime.tzinfo&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f459ff0e724da57621747ebae67e25b18f6d0be" translate="yes" xml:space="preserve">
          <source>GameState may be thought of as a sub-resource of Game. It is a distinct logical entity encapsulated within a more general Game concept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0cd963d88e66dc3f2f2545a55f5be3771c0ace" translate="yes" xml:space="preserve">
          <source>Generally speaking, Falcon assumes that resource responders (&lt;code&gt;on_get()&lt;/code&gt;, &lt;code&gt;on_post()&lt;/code&gt;, etc.) will, for the most part, do the right thing. In other words, Falcon doesn&amp;rsquo;t try very hard to protect responder code from itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cb25fbb11d16eb1e5978d5c482c4cb86a9d261" translate="yes" xml:space="preserve">
          <source>Generally speaking, Falcon assumes that resource responders (such as &lt;code&gt;on_get()&lt;/code&gt;, &lt;code&gt;on_post()&lt;/code&gt;, etc.) will, for the most part, do the right thing. In other words, Falcon doesn&amp;rsquo;t try very hard to protect responder code from itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e570be774d63fbe92ec6be0f1f7936f6f9da8a70" translate="yes" xml:space="preserve">
          <source>Get Help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb8a23e40c4b83ce13aee431aaf2ad64d22240c" translate="yes" xml:space="preserve">
          <source>Get a bound method of the given object by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0decb86a6b1cccf19ae53419c0d2a59ae3952163" translate="yes" xml:space="preserve">
          <source>Get the name of this timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15056d31920113c824e17488676d3df1279a400e" translate="yes" xml:space="preserve">
          <source>Get the offset from UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af0beaaa89a8a653ae9bcb84936b517ccf50047" translate="yes" xml:space="preserve">
          <source>Gets both the http status code and description from just a code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a514a6fadc5324d1356de25696484687f6f994" translate="yes" xml:space="preserve">
          <source>Getting Cookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207c7dd0038af9ca412da6559dd3d407efdc77e0" translate="yes" xml:space="preserve">
          <source>Given a JSON value, decode it to an appropriate Python type, (e.g., &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da08cc8ffd531f39c85100abde3816296096747f" translate="yes" xml:space="preserve">
          <source>Global, resource, and method hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb84f6989f67fc00b5ea2a19e8557df1df9eef92" translate="yes" xml:space="preserve">
          <source>Go ahead and edit your &lt;code&gt;images.py&lt;/code&gt; file to look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="cd3a82fd6705b54f8fb334a7dcd3c47633d6edef" translate="yes" xml:space="preserve">
          <source>HTTPBadRequest: The param was not found in the request, even though</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f54d504445ecf5ddb6be219662b25f552c465d" translate="yes" xml:space="preserve">
          <source>HTTPStatus</source>
          <target state="translated">HTTPStatus</target>
        </trans-unit>
        <trans-unit id="185434ef08177b5f6e4b2f54c1806599d820828d" translate="yes" xml:space="preserve">
          <source>HTTPie won&amp;rsquo;t display the image, but you can see that the response headers were set correctly. Just for fun, go ahead and paste the above URI into your browser. The image should display correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74206995902f4d32b97f064af370c4a682ce655" translate="yes" xml:space="preserve">
          <source>Handler built using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/2/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e711da3916da77c0800bf8cb5f7b36d4f5ee00e7" translate="yes" xml:space="preserve">
          <source>Handler built using the &lt;code&gt;msgpack&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362f233bfd36bbe9ffba21ece507104cececa24e" translate="yes" xml:space="preserve">
          <source>Handlers</source>
          <target state="translated">Handlers</target>
        </trans-unit>
        <trans-unit id="f234992da49bd3af66ca0628cee98d2bb88a0fec" translate="yes" xml:space="preserve">
          <source>Headers can be forged by any client or proxy. Use this property with caution and validate all values before using them. Do not rely on the access route to authorize requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cbc952e8c63914134e2eede89ef63a1c732924d" translate="yes" xml:space="preserve">
          <source>Here is a more involved example that demonstrates reading headers and query parameters, handling errors, and working with request and response bodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8152a6393525a5e7e3dac478683d885ec5438d8b" translate="yes" xml:space="preserve">
          <source>Here is a simple example from Falcon&amp;rsquo;s README, showing how to get started writing an API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a7fa14e78fec4c849ca098f2a89191dfd3578a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a quick example to show how all the pieces fit together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c764fba7f0ff6cdb79f8d9ac8fe3052d5b821e23" translate="yes" xml:space="preserve">
          <source>Highly-optimized, extensible code base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1960acf57d01884941dad63407fee0e4a1984e81" translate="yes" xml:space="preserve">
          <source>Hmm, it looks like we forgot to update &lt;code&gt;app.py&lt;/code&gt;. Let&amp;rsquo;s do that now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="7b0018779bb47a9dcc13f761cf958056725365c3" translate="yes" xml:space="preserve">
          <source>Hooks and middleware components can be used together to authenticate and authorize requests. For example, a middleware component could be used to parse incoming credentials and place the results in &lt;code&gt;req.context&lt;/code&gt;. Downstream components or hooks could then use this information to authorize the request, taking into account the user&amp;rsquo;s role and the requested resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18d7cf08fffc070bf93293ab30b6d8519ee7285" translate="yes" xml:space="preserve">
          <source>Hooks may inject extra params as needed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4c5c11f2b021533848ba507e5b431926b61592" translate="yes" xml:space="preserve">
          <source>Hosting Your App</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3284516fc702aa3381ee91f529fb505a6a9b4f90" translate="yes" xml:space="preserve">
          <source>How can I access POSTed files?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333ab3af3faf1249f2db5ff570cb4ea8d9410ed5" translate="yes" xml:space="preserve">
          <source>How can I access POSTed form params?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d19bff5a287794a39072e75b8acc621bfd9338" translate="yes" xml:space="preserve">
          <source>How can I handle forward slashes within a route template field?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1aaa736f830829609114b2c3f429cacd8ade10" translate="yes" xml:space="preserve">
          <source>How can I pass data from a hook to a responder, and between hooks?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3216e9aea9f643cd6106e9f208765e6a6e515671" translate="yes" xml:space="preserve">
          <source>How can I serve a downloadable file with falcon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6ed4aab870412831ea6988ea299b61c4c34405" translate="yes" xml:space="preserve">
          <source>How can I use resp.media with types like datetime?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6194dc1a48a2280c65125c3f83d9c4985b0617" translate="yes" xml:space="preserve">
          <source>How can I write a custom handler for 404 and 500 pages in falcon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b21860522f30f3dc475f19c70f084a454f119e0" translate="yes" xml:space="preserve">
          <source>How do I authenticate requests?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ce3a35816ed1faa867206cf9038fbb151fff21" translate="yes" xml:space="preserve">
          <source>How do I consume a query string that has a JSON value?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66deef7e3e0990bcf9267b9b045b758236b5d2c4" translate="yes" xml:space="preserve">
          <source>How do I generate API documentation for my Falcon API?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed4543802c869649472aba006c6c54d69cd7f11" translate="yes" xml:space="preserve">
          <source>How do I implement CORS with Falcon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb8ab326292bae6d1d935024aba7806b75dc322" translate="yes" xml:space="preserve">
          <source>How do I implement both POSTing and GETing items for the same resource?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb5e7125b22f89c2219059dc5be892639856a4d" translate="yes" xml:space="preserve">
          <source>How do I implement redirects within Falcon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d45e83926ddbc8737d8fe21969f88071ba9b8c" translate="yes" xml:space="preserve">
          <source>How do I manage my database connections?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede76eecc9c16803e237e5ffd7622d91e8b3350c" translate="yes" xml:space="preserve">
          <source>How do I test my Falcon app? Can I use pytest?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2e017967a8cbe44943a76e68fc099c42031585" translate="yes" xml:space="preserve">
          <source>How do I use WSGI middleware with Falcon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26ce7a6a8f8a0a32d2f8b9b0ba0d6c85be14533" translate="yes" xml:space="preserve">
          <source>How is Falcon different?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843d7bd0a3c1afa93060c8650324bda7c63c03a6" translate="yes" xml:space="preserve">
          <source>Hurricane Electric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb39d4003af70c1800436fc685b665d78da11c6" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;m setting a cookie, but it isn&amp;rsquo;t being returned in subsequent requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bc6a3458332df1533ce4adcbfeac79e73c463e" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;m setting a response body, but it isn&amp;rsquo;t getting returned. What&amp;rsquo;s going on?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes" xml:space="preserve">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="771a30ef0179eb30ea16cf6b0020491e841d1b2b" translate="yes" xml:space="preserve">
          <source>Identifier: &lt;code&gt;dt&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd58f3dd470acd6284b430edeb2cb929d550e96d" translate="yes" xml:space="preserve">
          <source>Identifier: &lt;code&gt;int&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf17d27b8fa866f8c33bc4429991365203d6696f" translate="yes" xml:space="preserve">
          <source>Identifier: &lt;code&gt;uuid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8414b4fd22c852e869cd79ac92f078aafd072b6f" translate="yes" xml:space="preserve">
          <source>Idiomatic HTTP error responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c74a037657cdf698222b96f80f9e150f4c86fb4" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://pypi.python.org/pypi/ujson&quot;&gt;ujson&lt;/a&gt; is available, Falcon will use it to speed up media (de)serialization, error serialization, and query string parsing. Note that &lt;code&gt;ujson&lt;/code&gt; can actually be slower on PyPy than the standard &lt;code&gt;json&lt;/code&gt; module due to ctypes overhead, and so we recommend only using &lt;code&gt;ujson&lt;/code&gt; with CPython deployments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a047f2705427027e640b6027aba5fe610b1dc1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;resp.status&lt;/code&gt; is not set explicitly, it defaults to &lt;code&gt;200 OK&lt;/code&gt;, which is exactly what we want &lt;code&gt;on_get()&lt;/code&gt; to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f4df4c3e1711835fd178e372a4e0bf62cb8d92" translate="yes" xml:space="preserve">
          <source>If Falcon doesn&amp;rsquo;t have an internet media type handler that supports your use case, you can easily implement your own using the abstract base class provided by Falcon:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d59ab4dd400b9422f6a9f940638e3c4220dd25" translate="yes" xml:space="preserve">
          <source>If JSON Schema does not meet your needs, a custom validator may be implemented in a similar manner to the one above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c249cdaef977d215f15022f3ed7709777e4acdf3" translate="yes" xml:space="preserve">
          <source>If a custom media type is used and the type includes a &amp;ldquo;+json&amp;rdquo; or &amp;ldquo;+xml&amp;rdquo; suffix, the default serializer will convert the error to JSON or XML, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c3b50ac0992e4e173edb54b07d8c7101094f47" translate="yes" xml:space="preserve">
          <source>If a query param does not have a value, Falcon will by default ignore that parameter. For example, passing &lt;code&gt;'foo'&lt;/code&gt; or &lt;code&gt;'foo='&lt;/code&gt; will result in the parameter being ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010a287f7be8095ef272dc51c7b37f154272d1f6" translate="yes" xml:space="preserve">
          <source>If an HTML form is POSTed to the API using the &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; media type, Falcon can automatically parse the parameters from the request body and merge them into the query string parameters. To enable this functionality, set &lt;a href=&quot;api#falcon.RequestOptions.auto_parse_form_urlencoded&quot;&gt;&lt;code&gt;auto_parse_form_urlencoded&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt; via &lt;a href=&quot;api#falcon.API.req_options&quot;&gt;&lt;code&gt;API.req_options&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d644b155276d34eaf6f7a7d8d03d7ccd4551b24c" translate="yes" xml:space="preserve">
          <source>If an HTML form is POSTed to the API using the &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; media type, and the &lt;a href=&quot;api#falcon.RequestOptions.auto_parse_form_urlencoded&quot;&gt;&lt;code&gt;auto_parse_form_urlencoded&lt;/code&gt;&lt;/a&gt; option is set, the framework will consume &lt;code&gt;stream&lt;/code&gt; in order to parse the parameters and merge them into the query string parameters. In this case, the stream will be left at EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0dc1f017112cc413532ee9ab63140ab30313f5f" translate="yes" xml:space="preserve">
          <source>If authentication credentials were provided in the request, the server considers them insufficient to grant access. The client SHOULD NOT automatically repeat the request with the same credentials. The client MAY repeat the request with new or different credentials. However, a request might be forbidden for reasons unrelated to the credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7012f0f2569a51c838d52d6540b453eb32d8eb32" translate="yes" xml:space="preserve">
          <source>If available, uses &lt;code&gt;testtools&lt;/code&gt; in lieu of &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33ae9ad6ee1d2731ea5c0e2c530352861cfd704" translate="yes" xml:space="preserve">
          <source>If no route matches a request, but the path in the requested URI matches a sink prefix, Falcon will pass control to the associated sink, regardless of the HTTP method requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd17f9e67525b2d4b6894e5e9e813eb1cd784d27" translate="yes" xml:space="preserve">
          <source>If no route matches the request, control then passes to a default responder that simply raises an instance of &lt;a href=&quot;errors#falcon.HTTPNotFound&quot;&gt;&lt;code&gt;HTTPNotFound&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c919be2f98eedf331520725c41503747ff532a5" translate="yes" xml:space="preserve">
          <source>If no route matches the request, control then passes to a default responder that simply raises an instance of &lt;a href=&quot;errors#falcon.HTTPNotFound&quot;&gt;&lt;code&gt;HTTPNotFound&lt;/code&gt;&lt;/a&gt;. Normally this will result in sending a 404 response back to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4975a951fad347357444e95be1bfd50a220595cb" translate="yes" xml:space="preserve">
          <source>If none of the above headers are available, or if the Forwarded header is available but the &amp;ldquo;host&amp;rdquo; parameter is not included in the first hop, the value of &lt;a href=&quot;#falcon.Request.host&quot;&gt;&lt;code&gt;host&lt;/code&gt;&lt;/a&gt; is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c681478047dcafd1d7fbded49f1fa6d4595d09b" translate="yes" xml:space="preserve">
          <source>If none of these headers are available, or if the Forwarded header is available but does not contain a &amp;ldquo;proto&amp;rdquo; parameter in the first hop, the value of &lt;a href=&quot;#falcon.Request.scheme&quot;&gt;&lt;code&gt;scheme&lt;/code&gt;&lt;/a&gt; is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cd08e95e58cb0ddfc6be32290c9cc40a2cfb62" translate="yes" xml:space="preserve">
          <source>If none of these headers are available, the value of &lt;a href=&quot;#falcon.Request.remote_addr&quot;&gt;&lt;code&gt;remote_addr&lt;/code&gt;&lt;/a&gt; is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8dcfc6c203738eadb6e67647a5dff554e68fd7" translate="yes" xml:space="preserve">
          <source>If not set explicitly, the status defaults to &amp;lsquo;200 OK&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85fab0101c7c0d3ca83c24349755737e4113c7c" translate="yes" xml:space="preserve">
          <source>If not specified explicitly, the handler will default to &lt;code&gt;exception.handle&lt;/code&gt;, where &lt;code&gt;exception&lt;/code&gt; is the error type specified above, and &lt;code&gt;handle&lt;/code&gt; is a static method (i.e., decorated with @staticmethod) that accepts the same params just described. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da55f8a981dfcec3d1cba69584dc69e89d19f94" translate="yes" xml:space="preserve">
          <source>If one of the &lt;em&gt;process_request&lt;/em&gt; middleware methods raises an error, it will be processed according to the error type. If the type matches a registered error handler, that handler will be invoked and then the framework will begin to unwind the stack, skipping any lower layers. The error handler may itself raise an instance of HTTPError, in which case the framework will use the latter exception to update the &lt;em&gt;resp&lt;/em&gt; object. Regardless, the framework will continue unwinding the middleware stack. For example, if &lt;em&gt;mob2.process_request&lt;/em&gt; were to raise an error, the framework would execute the stack as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e7034b99d083b93742d87c470a032abe3d7f81" translate="yes" xml:space="preserve">
          <source>If pytest reports any errors, take a moment to fix them up before proceeding to the next section of the tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cecd8f7833db200efce14cf931b9a5df676f46" translate="yes" xml:space="preserve">
          <source>If range requests are not supported for the target resource, the header may be set to &amp;ldquo;none&amp;rdquo; to advise the client not to attempt any such requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee4a240a216a4fd8f4f07084f631a1cbf43684b" translate="yes" xml:space="preserve">
          <source>If set to a Unicode type (&lt;code&gt;unicode&lt;/code&gt; in Python 2, or &lt;code&gt;str&lt;/code&gt; in Python 3), Falcon will encode the text as UTF-8 in the response. If the content is already a byte string, use the &lt;a href=&quot;#falcon.Response.data&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; attribute instead (it&amp;rsquo;s faster).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573d02ffdadba443b074a6b8aad734c25b906555" translate="yes" xml:space="preserve">
          <source>If the condition is temporary, the server SHOULD generate a Retry- After header field to indicate that it is temporary and after what time the client MAY try again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fc003e9a743de3e85bb1d466ef3edf7227ecc8" translate="yes" xml:space="preserve">
          <source>If the header already exists, the new value will be appended to it, delimited by a comma. Most header specifications support this format, Set-Cookie being the notable exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a13e5fdcb43c7d74f4ffd6b953e6c3ccbde5c58" translate="yes" xml:space="preserve">
          <source>If the header was not previously set, nothing is done (no error is raised).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9772480c43cb209bccd442bfcbc289c19755f4" translate="yes" xml:space="preserve">
          <source>If the hostname in the request is an IP address, the value for &lt;code&gt;subdomain&lt;/code&gt; is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84520a364d77e696a0bf33ec0a9ed1eff03e3f2" translate="yes" xml:space="preserve">
          <source>If the origin server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 Not Found ought to be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71db10bd4d9062f56e1d2a1efd89bbd86c02c188" translate="yes" xml:space="preserve">
          <source>If the prefix overlaps a registered route template, the route will take precedence and mask the sink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79d8369e2fb021095a1979c95ecf8c47ef07edb" translate="yes" xml:space="preserve">
          <source>If the request included authentication credentials, then the 401 response indicates that authorization has been refused for those credentials. The user agent MAY repeat the request with a new or replaced Authorization header field. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user agent SHOULD present the enclosed representation to the user, since it usually contains relevant diagnostic information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a9371621efb0f45399e1e0594ff1695b6da6f5" translate="yes" xml:space="preserve">
          <source>If the request was proxied, the scheme may not match what was originally requested by the client. &lt;a href=&quot;#falcon.Request.forwarded_scheme&quot;&gt;&lt;code&gt;forwarded_scheme&lt;/code&gt;&lt;/a&gt; can be used, instead, to handle such cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37fc2ccc6e55e89b6b38804bee9e12e61e6dd3b" translate="yes" xml:space="preserve">
          <source>If the stream length is unknown, you can set &lt;code&gt;stream&lt;/code&gt; directly, and ignore &lt;code&gt;stream_len&lt;/code&gt;. In this case, the WSGI server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a03c52f9e1d02aa0b2d67bc43208c8fc234338f" translate="yes" xml:space="preserve">
          <source>If the value is malformed and can not be converted, Falcon will reject the request with a 404 response to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c53504913222c9b54265dc76fd90a2a9af8e3cc" translate="yes" xml:space="preserve">
          <source>If you are a Windows user, Waitress can be used in lieu of Gunicorn, since the latter doesn&amp;rsquo;t work under Windows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5ef66b026a9cf19aa1ee5ad855b60a1a04dcef" translate="yes" xml:space="preserve">
          <source>If you are interested in the design-first approach mentioned above, you may also want to check out API design and gateway services such as Tyk, Apiary, Amazon API Gateway, or Google Cloud Endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df4e83e5b0f2301e105772694047456e209f5a1" translate="yes" xml:space="preserve">
          <source>If you are using the Falcon framework for a community or commercial project, please consider adding your information to our wiki under &lt;a href=&quot;https://github.com/falconry/falcon/wiki/Who's-using-Falcon%3F&quot;&gt;Who&amp;rsquo;s Using Falcon?&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e61dee0a701c16ae6015bb9e84e2c8ac4aaddf" translate="yes" xml:space="preserve">
          <source>If you do need full negotiation, it is very easy to bridge the gap using middleware. Here is an example of how this can be done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab26131a66550b6534bac04a3cddb0b76b3dff9" translate="yes" xml:space="preserve">
          <source>If you do not know the size of the stream in advance, you can work around that by using chunked encoding, but that&amp;rsquo;s beyond the scope of this tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59dfd6d6a339e830a9dd45a3b0274c2f1b5603e3" translate="yes" xml:space="preserve">
          <source>If you have a lot of experience with other Python web frameworks, you may be used to using decorators to set up your routes. Falcon&amp;rsquo;s particular approach provides the following benefits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6a4d5cd1d3c6fa0be1573dd4e468726f25282f" translate="yes" xml:space="preserve">
          <source>If you have another case where the body isn&amp;rsquo;t being returned, it&amp;rsquo;s probably a bug! &lt;a href=&quot;https://falcon.readthedocs.io/en/1.4.1/community/help.html#help&quot;&gt;Let us know&lt;/a&gt; so we can help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df8938df467581163f7a19a49d3423f788271e7" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t done so already, please take a moment to &lt;a href=&quot;install#install&quot;&gt;install&lt;/a&gt; the Falcon web framework before continuing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa56520df6b2c0a058a4c82690e830a7988bb0d0" translate="yes" xml:space="preserve">
          <source>If you need to transparently handle reconnecting after an error, or for other use cases that may not be supported by your client library, simply encapsulate the client library within a management class that handles all the tricky bits, and pass that around instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b82853ed33efde97ccb0facaf66ac6cc3a1461" translate="yes" xml:space="preserve">
          <source>If you want to verify that Cython is being invoked, simply pass &lt;code&gt;-v&lt;/code&gt; to pip in order to echo the compilation commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d595cfaa96b4a0ee743786285905f1a24bbd99" translate="yes" xml:space="preserve">
          <source>If you would like to recognize such parameters, you must set the &lt;code&gt;keep_blank_qs_values&lt;/code&gt; request option to &lt;code&gt;True&lt;/code&gt;. Request options are set globally for each instance of &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; via the &lt;a href=&quot;../api/api#falcon.API.req_options&quot;&gt;&lt;code&gt;req_options&lt;/code&gt;&lt;/a&gt; property. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706fdc336d4337d1d3a80c35412523d4cbae971b" translate="yes" xml:space="preserve">
          <source>If your application is behind one or more reverse proxies, you can use &lt;a href=&quot;#falcon.Request.access_route&quot;&gt;&lt;code&gt;access_route&lt;/code&gt;&lt;/a&gt; to retrieve the real IP address of the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2190b48a14dc2a699a6aad020c2a0dbd189cfd6" translate="yes" xml:space="preserve">
          <source>If your resource does not support a particular HTTP method, simply omit the corresponding responder and Falcon will use a default responder that raises an instance of &lt;a href=&quot;errors#falcon.HTTPMethodNotAllowed&quot;&gt;&lt;code&gt;HTTPMethodNotAllowed&lt;/code&gt;&lt;/a&gt; when that method is requested. Normally this results in sending a 405 response back to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7dc7dff960ceff451714f29b61b5a89bb8feac" translate="yes" xml:space="preserve">
          <source>In Falcon 1.3 we shipped initial support for &lt;a href=&quot;http://falcon.readthedocs.io/en/stable/api/routing.html#field-converters&quot;&gt;field converters&lt;/a&gt;. We&amp;rsquo;ve discussed building on this feature to support consuming multiple path segments ala Flask. This work is currently planned for 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b074282024ac499a013305835e3e031bb0cfb61" translate="yes" xml:space="preserve">
          <source>In Falcon, these resources would be implemented with standard classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699b30bf1419460c9c124e24a30aff5107606e6e" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;http://ipython.org/&quot;&gt;IPython&lt;/a&gt;, the Python community maintains several other super-powered REPLs that you may wish to try, including &lt;a href=&quot;http://bpython-interpreter.org/&quot;&gt;bpython&lt;/a&gt; and &lt;a href=&quot;https://github.com/jonathanslenders/ptpython&quot;&gt;ptpython&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1c6a570d3ec19e21bb42d5ed57b3ba48de9a24" translate="yes" xml:space="preserve">
          <source>In addition to the standard &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;resp&lt;/code&gt; parameters, if the route&amp;rsquo;s template contains field expressions, any responder that desires to receive requests for that route must accept arguments named after the respective field names defined in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e503948302dfd5c658e47f034c52504db7765b" translate="yes" xml:space="preserve">
          <source>In addition to the standard HTML form-based method for specifying lists by repeating a given param multiple times, Falcon supports a more compact form in which the param may be given a single time but set to a &lt;code&gt;list&lt;/code&gt; of comma-separated elements (e.g., &amp;lsquo;foo=a,b,c&amp;rsquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc561c9406795f72910b06f0cde0dcec2756b1d4" translate="yes" xml:space="preserve">
          <source>In order for a website or SPA to access an API hosted under a different domain name, that API must implement &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;. For a public API, implementing CORS in Falcon can be as simple as implementing a middleware component similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6213bb775f037b434893a45a6eec78751b157a" translate="yes" xml:space="preserve">
          <source>In order to be converted, the field value must consist of a string of 32 hexadecimal digits, as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc4122#section-3.&quot;&gt;RFC 4122, Section 3.&lt;/a&gt; Note, however, that hyphens and the URN prefix are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c9cb03432f148c56e64d7ca8a147d7e31670cc" translate="yes" xml:space="preserve">
          <source>In order to successfully remove a cookie, both the path and the domain must match the values that were used when the cookie was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e501ae12333b379bf363ec7e4648c1a4eb5663" translate="yes" xml:space="preserve">
          <source>In response, you should get a &lt;code&gt;404 Not Found&lt;/code&gt;. This is the default response given by Falcon when it can not find a resource that matches the requested URL path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7948b083d6be47d62a0ad48412dc61fedcbc69f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;on_get()&lt;/code&gt; responder method for the resource, you can tell the user agent to download the file by setting the Content-Disposition header. Falcon includes the &lt;code&gt;downloadable_as&lt;/code&gt; property to make this easy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373ae6e6a8be00aa191900f524e9305e8991c978" translate="yes" xml:space="preserve">
          <source>In the REST architectural style, the URL only identifies the resource; it does not specify what action to take on that resource. Instead, users choose from a set of standard methods. For HTTP, these are the familiar GET, POST, HEAD, etc. Clients can query a resource to discover which methods it supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e62020562ee28dc1c16fd409fe7232d06420ea" translate="yes" xml:space="preserve">
          <source>In the case of the refactoring work from the last section, we could have inadvertently introduced a functional bug into the application that our unit tests would not have caught. This can happen when a bug is a result of an unexpected interaction between multiple units, between the application and the web server, or between the application and any external services it depends on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5a58deb98f7460cd79f3ba8813acde5d9c5a7e" translate="yes" xml:space="preserve">
          <source>In the future, we hope to support an alternative approach, using the proposal from &lt;a href=&quot;https://github.com/falconry/falcon/issues/584&quot;&gt;#584 on GitHub&lt;/a&gt;, that will afford combining all of these resources into a single class like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a08e3abce469512002fe63f94802055640cf2b" translate="yes" xml:space="preserve">
          <source>In the meantime, the workaround is to percent-encode the forward slash. If you don&amp;rsquo;t control the clients and can&amp;rsquo;t enforce this, you can implement a Falcon middleware component to rewrite the path before it is routed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45105a33fb9edabeec9b7961005f2ff5dc0439a" translate="yes" xml:space="preserve">
          <source>In the meantime, we recommend using &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; via Gunicorn or uWSGI in order to scale IO-bound services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5399eb35ba2879b341be4a158190a7043d1c78" translate="yes" xml:space="preserve">
          <source>In the meantime, you might try leveraging &lt;a href=&quot;http://uwsgi.readthedocs.io/en/latest/WebSockets.html&quot;&gt;uWSGI&amp;rsquo;s native WebSocket support&lt;/a&gt;, or implementing a standalone service via Aymeric Augustin&amp;rsquo;s handy &lt;a href=&quot;https://pypi.python.org/pypi/websockets/4.0.1&quot;&gt;websockets&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06cb31aa2791af21a83c68c38c391bc709aa6e7c" translate="yes" xml:space="preserve">
          <source>In this tutorial we&amp;rsquo;ll walk through building an API for a simple image sharing service. Along the way, we&amp;rsquo;ll discuss Falcon&amp;rsquo;s major features and introduce the terminology used by the framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c470cfbc90aab3d139aa58a6aabdd0ba91fefdd5" translate="yes" xml:space="preserve">
          <source>Individual path segments may contain one or more field expressions, and fields need not span the entire path segment. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbf2381b5d95ec911e583415ac5ecdcfae76cbd" translate="yes" xml:space="preserve">
          <source>Initializer, unittest-style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2df83f3d4ca21e7ac476c414bcbe86b6611038" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;on_get()&lt;/code&gt; responder, we set the Content-Type header based on the filename extension, and then stream out the image directly from an open file handle. Note the use of &lt;code&gt;resp.stream_len&lt;/code&gt;. Whenever using &lt;code&gt;resp.stream&lt;/code&gt; instead of &lt;code&gt;resp.body&lt;/code&gt; or &lt;code&gt;resp.data&lt;/code&gt;, you typically also specify the expected length of the stream so that the web client knows how much data to read from the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="7a6ba0c4cabfe0d4ac09c7674094d6af47707925" translate="yes" xml:space="preserve">
          <source>Installing the Falcon wheel is a great way to get up and running quickly in a development environment, but for an extra speed boost when deploying your application in production, Falcon can compile itself with Cython.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa93fdc6f201f73f4afdef23e97413631072207" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; are first-class WSGI apps, so you can use the standard pattern outlined in PEP-3333. In your main &amp;ldquo;app&amp;rdquo; file, you would simply wrap your api instance with a middleware app. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb9336afe3f21a9e34bd3dec2c9d2162079e9ff" translate="yes" xml:space="preserve">
          <source>Instances of the Request and Response classes are passed into responders as the second and third arguments, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6752670ac4fd3d43c072341f57aeec0c7e6fa7d6" translate="yes" xml:space="preserve">
          <source>Introducing Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="2da3b0cc715468e0f6e1467eeba3124b57f629bd" translate="yes" xml:space="preserve">
          <source>Intuitive request and response objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10567ff32e2cdcd410d4f313e69bc56c6cb04b6" translate="yes" xml:space="preserve">
          <source>Intuitive routing via URI templates and REST-inspired resource classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a4083cf1417f95583341860b00e4cf980825bb" translate="yes" xml:space="preserve">
          <source>Is Falcon thread-safe?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcce22f9dbdcd7f672921f0d5c996d42b39040c" translate="yes" xml:space="preserve">
          <source>It can be used both when the set of request header fields in total is too large, and when a single header field is at fault. In the latter case, the response representation SHOULD specify which header field was too large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd3e7889014966b85509bbfdb14e86f5f393702" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s customary for the project&amp;rsquo;s top-level module to be called the same as the project, so let&amp;rsquo;s create another &amp;ldquo;look&amp;rdquo; folder inside the first one and mark it as a python module by creating an empty &lt;code&gt;__init__.py&lt;/code&gt; file in it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a18558f9fd3156504b7e98d5be725724e68270" translate="yes" xml:space="preserve">
          <source>Its typical use is to avoid the &amp;ldquo;lost update&amp;rdquo; problem, where a client GETs a resource&amp;rsquo;s state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. By requiring requests to be conditional, the server can assure that clients are working with the correct copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3e1dccbf3c2728522d139cac9df12544cd39e0" translate="yes" xml:space="preserve">
          <source>Keyword Arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ee8e7c3e291db43f99c5ce645f3f9d498b40ca" translate="yes" xml:space="preserve">
          <source>Leadpages</source>
          <target state="translated">Leadpages</target>
        </trans-unit>
        <trans-unit id="852c5992c9af765f2beab8da287de2b470773866" translate="yes" xml:space="preserve">
          <source>Learning by Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f42be1ee25dbd07296612129ccc7a07c94d2953" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s address this by creating a separate class to represent a single image resource. We will then add an &lt;code&gt;on_get()&lt;/code&gt; method to respond to the path above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee08a574d1a802ee6f530ff24345e9f9274786b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s check our progress:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7dc3b2cbbfb10b4e2d4c87098b225d7debfbba" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s check to see if we broke anything with the changes above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ba237fdbf25479947322a67780dc7a619a4728" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we have the following URL schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02033b9978d2121520a8c3527e3b8bf0755df92" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see a quick example of how this works. Try requesting an invalid image name from your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f668615d2a0c52f258debdb2c85756f9e38298d2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see this in action. Create a new test module, &lt;code&gt;tests/test_integration.py&lt;/code&gt; with the following contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88757d25a7e9d64fa5a5893d5b32a8ae3b0e36ee" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by adding an additional import statement to &lt;code&gt;test_app.py&lt;/code&gt;. We need to import two modules from &lt;code&gt;unittest.mock&lt;/code&gt; if you are using Python 3, or from &lt;code&gt;mock&lt;/code&gt; if you are using Python 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d104822353ccb1cd987c76fc7132820bb6d1a262" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by installing the &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2629c03dee9892b0ea3aafbf0d883450e32aba" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f85d751b68a2181f83f9c5fe071b221863b873" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try it. Restart Gunicorn (unless you&amp;rsquo;re using &lt;code&gt;--reload&lt;/code&gt;), and send a GET request to the resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720914fd632105ac2f8ba3fd36f070522568f1e9" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License, Version 2.0 (the &amp;ldquo;License&amp;rdquo;); you may not use this file except in compliance with the License. You may obtain a copy of the License at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec793eb7fd1d6c9106d97e622f4fcbf89e666960" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License, Version 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65464c2e405228ec556cfe55dd96c47826c69912" translate="yes" xml:space="preserve">
          <source>Like the former test, this one still uses mocks. But the structure of the code has been improved through the techniques of componentization and dependency inversion, making the application more flexible and testable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a08658b70389680910d35a95cc829f66b2b4cbf" translate="yes" xml:space="preserve">
          <source>List items must be comma-separated or must be provided as multiple instances of the same param in the query string ala &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb2d6ecb7b5eb5f1cd3829261340b7dd62fe433" translate="yes" xml:space="preserve">
          <source>Localized title describing the destination of the link (default &lt;code&gt;None&lt;/code&gt;). The value must be a two-member tuple in the form of (&lt;em&gt;language-tag&lt;/em&gt;, &lt;em&gt;text&lt;/em&gt;), where &lt;em&gt;language-tag&lt;/em&gt; is a standard language identifier as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc5646#section-2.1&quot;&gt;RFC 5646, Section 2.1&lt;/a&gt;, and &lt;em&gt;text&lt;/em&gt; is a Unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90586903c62a446d0bc9d65174e9dba59693c18e" translate="yes" xml:space="preserve">
          <source>Make a note of the path returned in the Location header, and use it to GET the image:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2cabcf63c1e67ad03e2f45ca284498a3b9d2d1" translate="yes" xml:space="preserve">
          <source>Many developers choose to write tests like the above to sanity-check their application&amp;rsquo;s primary functionality, while leaving the bulk of testing to simulated requests and unit tests. These latter types of tests generally execute much faster and facilitate more fine-grained test assertions as compared to higher-level functional and system tests. That being said, testing strategies vary widely and you should choose the one that best suits your needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc06d01f95d26366da8c2b7eb2441cca4b925ac" translate="yes" xml:space="preserve">
          <source>Maps HTTP methods (e.g., &amp;lsquo;GET&amp;rsquo;, &amp;lsquo;POST&amp;rsquo;) to methods of a resource object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fea1178c6c75a68937b02e8fd968c1d1278005" translate="yes" xml:space="preserve">
          <source>Maps HTTP methods not explicitly defined on a resource to default responders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c77aeece8c258113148c6fb487946bf97b34672" translate="yes" xml:space="preserve">
          <source>Media</source>
          <target state="translated">Media</target>
        </trans-unit>
        <trans-unit id="ca27d35ad3e3980222af003a4fc24313141850e1" translate="yes" xml:space="preserve">
          <source>Media Type Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="a814d9bc1b088977b052c9b4a1d76a3643ee9bf4" translate="yes" xml:space="preserve">
          <source>Middleware components provide a way to execute logic before the framework routes each request, after each request is routed but before the target responder is called, or just before the response is returned for each request. Components are registered with the &lt;code&gt;middleware&lt;/code&gt; kwarg when instantiating Falcon&amp;rsquo;s &lt;a href=&quot;api#api&quot;&gt;API class&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1789e8099dd1eca9325abfa793416ee1d4f92e" translate="yes" xml:space="preserve">
          <source>Minimal attack surface for writing secure APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548f449b63ff41eaaff5a2d679ffa56b2015fc20" translate="yes" xml:space="preserve">
          <source>Misc.</source>
          <target state="translated">Misc.</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="18a66692db95621eeac4cf868e07e123b8c17157" translate="yes" xml:space="preserve">
          <source>Mixin for &lt;code&gt;HTTPError&lt;/code&gt; child classes that have no representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="translated">Mixins</target>
        </trans-unit>
        <trans-unit id="57f32177faf3fe398357213955472adc14244ae6" translate="yes" xml:space="preserve">
          <source>Mock object representing a WSGI &lt;code&gt;start_response&lt;/code&gt; callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d907ecbaf81629879335721ae59305b05f7d36e1" translate="yes" xml:space="preserve">
          <source>Mock resource for functional testing of framework components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ada82816dfe2e0269ece2ee6874e24ee123b79d" translate="yes" xml:space="preserve">
          <source>Mock resource for functional testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243f2cfc43bc372259c8987781f3df52a9f5d12d" translate="yes" xml:space="preserve">
          <source>More Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8afd3c596f156c633397c752f4089b6e646ccc" translate="yes" xml:space="preserve">
          <source>Multiple instances of a header in the response are currently not supported; it is unspecified which value will &amp;ldquo;win&amp;rdquo; and be represented in &lt;code&gt;headers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5691cfb1dbb0e884359880488ab13de4bf56817a" translate="yes" xml:space="preserve">
          <source>Named groups are converted to kwargs and passed to the sink as such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7969e43451a120c70b8e5d07110ba4ad27195b7" translate="yes" xml:space="preserve">
          <source>New &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; objects are created for each incoming HTTP request. However, a single instance of each resource class attached to a route is shared among all requests. Therefore, as long as you are careful about the way responders access class member variables to avoid conflicts, your WSGI app should be thread-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6866423bbaa10f59e29cb66c0edc110fe67dd9d" translate="yes" xml:space="preserve">
          <source>Next let&amp;rsquo;s take a look at the &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; class. Install &lt;a href=&quot;http://ipython.org/&quot;&gt;IPython&lt;/a&gt; and fire it up:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e494b824e11d9d622e32a4a565a6443d8a3e095" translate="yes" xml:space="preserve">
          <source>Next let&amp;rsquo;s wire up this resource and see it in action. Go back to &lt;code&gt;app.py&lt;/code&gt; and modify it so that it looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddacfc1661cfeb685db5bd25390532f48419c70a" translate="yes" xml:space="preserve">
          <source>Next, edit &lt;code&gt;test_app.py&lt;/code&gt; to look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7499c9553e8201168cd3cda6c25fd9dc1c69664c" translate="yes" xml:space="preserve">
          <source>Next, install the &lt;code&gt;requests&lt;/code&gt; package (as required by the new test) and make sure Gunicorn is up and running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba085c247dcbacb5400d9c16895f8dfd47bf409" translate="yes" xml:space="preserve">
          <source>Next, just for fun, let&amp;rsquo;s modify our resource to use &lt;a href=&quot;http://msgpack.org/&quot;&gt;MessagePack&lt;/a&gt; instead of JSON. Start by installing the relevant package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f66dba4d7edbc257d74d9ca7e32ff9337b6df7" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s create a hook that will run before each request to post a message. Add this method below the definition of &lt;code&gt;ALLOWED_IMAGE_TYPES&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7da3c6f00cf356a744d0b4531f6b00a2e8303a" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s create a new file that will be the entry point into your app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c18f456a6d04471bd59ac6cfc9034a5e24fdcd" translate="yes" xml:space="preserve">
          <source>None of the ranges in the request&amp;rsquo;s Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="0cc489a90a364043364ddfd58c307e3bcd78a435" translate="yes" xml:space="preserve">
          <source>Note also that any exception (not just instances of &lt;a href=&quot;#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;) can be caught, logged, and otherwise handled at the global level by registering one or more custom error handlers. See also &lt;a href=&quot;api#falcon.API.add_error_handler&quot;&gt;&lt;code&gt;add_error_handler()&lt;/code&gt;&lt;/a&gt; to learn more about this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9376671dd97b6dfe70024e34cf69a93a4f4303a" translate="yes" xml:space="preserve">
          <source>Note also that routing is also normalized, so adding a route for &amp;ldquo;/foo/bar&amp;rdquo; also implicitly adds a route for &amp;ldquo;/foo/bar/&amp;rdquo;. Requests coming in for either path will be sent to the same resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af56060e2ad136105d5f57d6e6ea5d263917ca3" translate="yes" xml:space="preserve">
          <source>Note also that you can pass additional arguments to your hook function as needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63082acee31325f8c8d1ef3357c092c52915e84" translate="yes" xml:space="preserve">
          <source>Note that calling this method is equivalent to setting the corresponding header property (when said property is available) to &lt;code&gt;None&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c6a3b23f16436dd6f6588ed90a03d5ddc6c6a5" translate="yes" xml:space="preserve">
          <source>Note that each component need not implement all &lt;code&gt;process_*&lt;/code&gt; methods; in the case that one of the three methods is missing, it is treated as a noop in the stack. For example, if &lt;code&gt;mob2&lt;/code&gt; did not implement &lt;em&gt;process_request&lt;/em&gt; and &lt;code&gt;mob3&lt;/code&gt; did not implement &lt;em&gt;process_response&lt;/em&gt;, the execution order would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fceccbaaba2c4e1d9ebffaac1d7f3f2826f8df" translate="yes" xml:space="preserve">
          <source>Note that in many cases clients can still access the denied resource by using technical countermeasures such as a VPN or the Tor network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d475bd08d5adbf2c515dd7ccf5b3e8bc98571274" translate="yes" xml:space="preserve">
          <source>Note that static routes are matched in LIFO order, and are only attempted after checking dynamic routes and sinks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66ff60a49f68bbc89dc53af6e4c8a1b815fca59" translate="yes" xml:space="preserve">
          <source>Note that the 511 response SHOULD NOT contain a challenge or the authentication interface itself, because clients would show the interface as being associated with the originally requested URL, which may cause confusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93012d2afb2c25cd3cc6058c1c61dff35d327fe" translate="yes" xml:space="preserve">
          <source>Note the method signature. &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;start_response&lt;/code&gt; are standard WSGI params. Falcon adds a thin abstraction on top of these params so you don&amp;rsquo;t have to interact with them directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e9e35ded1fcb694b65fd0f633df85308336b46" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;falcon.HTTP_201&lt;/code&gt; for setting the response status to &amp;ldquo;201 Created&amp;rdquo;. We could have also used the &lt;code&gt;falcon.HTTP_CREATED&lt;/code&gt; alias. For a full list of predefined status strings, simply call &lt;code&gt;help()&lt;/code&gt; on &lt;code&gt;falcon.status_codes&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d61684c386cf1357212f71687449cd6b93662a" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;resp.data&lt;/code&gt; in lieu of &lt;code&gt;resp.body&lt;/code&gt;. If you assign a bytestring to the latter, Falcon will figure it out, but you can realize a small performance gain by assigning directly to &lt;code&gt;resp.data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2b7a93b8c067b65f95460059125d0d3334ddb1" translate="yes" xml:space="preserve">
          <source>Note, however, that it is more efficient to handle permanent redirects directly with your web server, if possible, rather than placing additional load on your app for such requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecff5eaabb3037179de7dc9547660f73b541900" translate="yes" xml:space="preserve">
          <source>Note: The existence of the 503 status code does not imply that a server has to use it when becoming overloaded. Some servers might simply refuse the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c4d15abddf9325d73ca18f18551f31059e5666" translate="yes" xml:space="preserve">
          <source>Now add the following test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d8aca9faa254fe883d9f972dd0e17b781893fc" translate="yes" xml:space="preserve">
          <source>Now give it a try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e4a0570b7b50b22c55214d53531c71113414ce" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s try that request again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf0f3d4096127fd2f148d2712bce50cd315ab0b" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s wire everything up and give it a try. Edit &lt;code&gt;app.py&lt;/code&gt; to look similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bd0e17feeeae9ce2e92ccf9d171ea0f4c9d9e1" translate="yes" xml:space="preserve">
          <source>Now re-run your app and try to POST another picture:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98619ab3e90c40f4dec5deb685153f51baa0a5f5" translate="yes" xml:space="preserve">
          <source>Now that we have a way of getting images into the service, we of course need a way to get them back out. What we want to do is return an image when it is requested, using the path that came back in the Location header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd505283733ba9915b48c0398501818491056d9d" translate="yes" xml:space="preserve">
          <source>Now that you have a simple Falcon app, you can take it for a spin with a WSGI server. Python includes a reference server for self-hosting, but let&amp;rsquo;s use something more robust that you might use in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a01f63f486459ed34617ea6d081761561d7696d" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve added a hook to validate the media type, you can see it in action by attempting to POST something nefarious:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb09b7e68f160c179881e1be238fcab1ae3d14a7" translate="yes" xml:space="preserve">
          <source>Now you can re-run the app against the desired storage directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e2f3d05172882aecebf31917977a53c313d4ae" translate="yes" xml:space="preserve">
          <source>Now you should see a failed test assertion regarding &lt;code&gt;mock_file_open&lt;/code&gt;. To fix this, we need to switch our strategy from monkey-patching to dependency injection. Return to &lt;code&gt;app.py&lt;/code&gt; and modify it to look similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0d7bb971bdb5c08bedbfac07fd1c1c425a74e5" translate="yes" xml:space="preserve">
          <source>Now, before every call to that responder, Falcon will first invoke &lt;code&gt;validate_image_type()&lt;/code&gt;. There isn&amp;rsquo;t anything special about this function, other than it must accept four arguments. Every hook takes, as its first two arguments, a reference to the same &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;resp&lt;/code&gt; objects that are passed into responders. The &lt;code&gt;resource&lt;/code&gt; argument is a Resource instance associated with the request. The fourth argument, named &lt;code&gt;params&lt;/code&gt; by convention, is a reference to the kwarg dictionary Falcon creates for each request. &lt;code&gt;params&lt;/code&gt; will contain the route&amp;rsquo;s URI template params and their values, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6c6ddd10a2465ece51ef4ceaca3f984e2c46ae" translate="yes" xml:space="preserve">
          <source>Now, if you check your storage directory, it should contain a copy of the image you just POSTed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc654d076aee6522061c2f914572bdb32eed5ea" translate="yes" xml:space="preserve">
          <source>Now, if you do make changes to Falcon itself, please consider contributing your awesome work back to the community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8530beb9e731d4423fc757ab1d956b564b22f5d0" translate="yes" xml:space="preserve">
          <source>Now, in a different terminal, try querying the running app with curl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4645c8ed3135645d62a0315b3ea44a255c61a254" translate="yes" xml:space="preserve">
          <source>Now, open &lt;code&gt;app.py&lt;/code&gt; in your favorite text editor and add the following lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c45fddb2fc5eb950e43270255aba702e6e8612" translate="yes" xml:space="preserve">
          <source>Now, type the following to introspect the &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542e2878291f6dfa04257a48e2c5d435711bb67a" translate="yes" xml:space="preserve">
          <source>Now, when a request comes in for &lt;code&gt;/images&lt;/code&gt;, Falcon will call the responder on the images resource that corresponds to the requested HTTP method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ce1e4316147895f11091181c84e46cd56c6589" translate="yes" xml:space="preserve">
          <source>Now, you might imagine that such a hook should apply to all responders for a resource. In fact, hooks can be applied to an entire resource by simply decorating the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86fc1c4601765aeab55471f454ffc192454be653" translate="yes" xml:space="preserve">
          <source>On Windows where Gunicorn and uWSGI don&amp;rsquo;t work yet you can use Waitress server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f468da57ab95ccfea60accc1f063e882b32c98" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;media&lt;/code&gt; is called on a request, it&amp;rsquo;ll consume the request&amp;rsquo;s stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fc352cefc141d44ae45888de551723388e2571" translate="yes" xml:space="preserve">
          <source>Once the docs have been built, you can view them by opening the following index page in your browser. On OS X it&amp;rsquo;s as simple as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6f9bc1cfe0a36fa875aa95eae59b41d61bd809" translate="yes" xml:space="preserve">
          <source>Once you have cloned the repo or downloaded a tarball from GitHub, you can install Falcon like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235a19fcfad1734633adce481044cbccef2ee6e8" translate="yes" xml:space="preserve">
          <source>One of the headers in the request is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da69c5adfc9a6bc07f069bc69f0693cea5f84cf" translate="yes" xml:space="preserve">
          <source>One or more authentication challenges to use as the value of the WWW-Authenticate header in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae7c0235075906063857c63fb8a07d47ea15a3e" translate="yes" xml:space="preserve">
          <source>One or more conditions given in the request header fields evaluated to false when tested on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f051c3e9d0e520323a23d1d17763302fa635a56" translate="yes" xml:space="preserve">
          <source>Only continous ranges are supported (e.g., &amp;ldquo;bytes=0-0,-1&amp;rdquo; would result in an HTTPBadRequest exception when the attribute is accessed.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81857be8c8acd02b58bbe58a7acec1b652fc7776" translate="yes" xml:space="preserve">
          <source>Only depends on six and mimeparse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd55528500ce82ff43d207937034ac2da5afd6c" translate="yes" xml:space="preserve">
          <source>Only noop &lt;code&gt;on_get()&lt;/code&gt; and &lt;code&gt;on_post()&lt;/code&gt; responders are implemented; when overriding these, or adding additional responders in child classes, they can be decorated with the &lt;a href=&quot;#falcon.testing.capture_responder_args&quot;&gt;&lt;code&gt;falcon.testing.capture_responder_args()&lt;/code&gt;&lt;/a&gt; hook in order to capture the &lt;em&gt;req&lt;/em&gt;, &lt;em&gt;resp&lt;/em&gt;, and &lt;em&gt;params&lt;/em&gt; arguments that are passed to the responder. Responders may also be decorated with the &lt;code&gt;falcon.testing.set_resp_defaults()&lt;/code&gt; hook in order to set &lt;em&gt;resp&lt;/em&gt; properties to default &lt;em&gt;status&lt;/em&gt;, &lt;em&gt;body&lt;/em&gt;, and &lt;em&gt;header&lt;/em&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48798cb183cf71bdfdbb384f61ed66137cdbe86" translate="yes" xml:space="preserve">
          <source>Open a new terminal and run the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8bd6f9a145c81ba3f59062586c5cf6108400d0" translate="yes" xml:space="preserve">
          <source>OpenStack</source>
          <target state="translated">OpenStack</target>
        </trans-unit>
        <trans-unit id="ec88fcb6d25d5b1be71e82bce96f86acb7be89b1" translate="yes" xml:space="preserve">
          <source>Opera Software</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed83cc1138b01c27b6845a510ae0c03e6fb942b4" translate="yes" xml:space="preserve">
          <source>Or on Linux:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f4768f2d0bf2d9493d3f638e85e7c78f3db953" translate="yes" xml:space="preserve">
          <source>Or, if you want to edit the code, first fork the main repo, clone the fork to your desktop, and then run the following to install it using symbolic linking, so that when you change your code, the changes will be automagically available to your app without having to reinstall the package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc6030c819ec58b4a1eddf77d6a9473a099d9ac" translate="yes" xml:space="preserve">
          <source>Or, suppose you had a hook that you would like to apply to &lt;em&gt;all&lt;/em&gt; responders for a given resource. In that case, you would simply decorate the resource class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b258f43418d6aa5bca2b2f7856e2cbaa25764b" translate="yes" xml:space="preserve">
          <source>Or, to install the latest beta or release candidate, if any:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9e852068a0bd991030aaafb5a1ac94af3ec5cf" translate="yes" xml:space="preserve">
          <source>Or, to run the default set of tests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78f60c2a75e929d3b7552a83d56bd7bba189fa6" translate="yes" xml:space="preserve">
          <source>Or, using the more verbose name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96792ae315e80ddbda2f275f15c9fb3301e95776" translate="yes" xml:space="preserve">
          <source>Other than that, it&amp;rsquo;s pretty much up to you if you want to use the standard library config library or something like &lt;code&gt;aumbry&lt;/code&gt; as demonstrated by this &lt;a href=&quot;https://github.com/jmvrbanac/falcon-example/tree/master/example&quot;&gt;falcon example app&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44677569902b8e1dd4f4ca1c518818f4b58fb88" translate="yes" xml:space="preserve">
          <source>Our friendly community is available to answer your questions and help you work through sticky problems. See also: &lt;a href=&quot;https://falcon.readthedocs.io/en/1.4.1/community/help.html#help&quot;&gt;Getting Help&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17acddc840349fb8886d576a04d8c12a81a4815" translate="yes" xml:space="preserve">
          <source>Override the default serializer for instances of &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f116c51115119a5ea38854471c1f660c684883c0" translate="yes" xml:space="preserve">
          <source>PEP-3333 prohibits apps from setting hop-by-hop headers itself, such as Transfer-Encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="6b8d507f2a1de117b2f5c96164b6a17e0a6908ca" translate="yes" xml:space="preserve">
          <source>Parse a canonical &amp;lsquo;host:port&amp;rsquo; string into parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da47e55a4ec2c81f08f769255b984760e95bf13a" translate="yes" xml:space="preserve">
          <source>Parse a host string (which may or may not contain a port) into parts, taking into account that the string may contain either a domain name or an IP address. In the latter case, both IPv4 and IPv6 addresses are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794acc47b5b414480d4f807db1da691652637acd" translate="yes" xml:space="preserve">
          <source>Parse a query string into a dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8beeff300f6e467f3968347959cf64955a6b5da7" translate="yes" xml:space="preserve">
          <source>People usually fall into two camps when it comes to this question. The first camp likes to instantiate a config object and pass that around to the initializers of the resource classes so the data sharing is explicit. The second camp likes to create a config module and import that wherever it&amp;rsquo;s needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f053abcaaa8688a58983a4832717942f512943eb" translate="yes" xml:space="preserve">
          <source>Per &lt;a href=&quot;https://tools.ietf.org/html/rfc7239&quot;&gt;RFC 7239&lt;/a&gt;, the access route may contain &amp;ldquo;unknown&amp;rdquo; and obfuscated identifiers, in addition to IPv4 and IPv6 addresses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89285d2a833db68bbdb2e0703c2fb6bfb0962ec3" translate="yes" xml:space="preserve">
          <source>Perfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="13ae0851548193d6ae5c1c4b8902349072c22425" translate="yes" xml:space="preserve">
          <source>Performs a request against a WSGI application. Uses &lt;a href=&quot;https://docs.python.org/2/library/wsgiref.html#module-wsgiref.validate&quot;&gt;&lt;code&gt;wsgiref.validate&lt;/code&gt;&lt;/a&gt; to ensure the response is valid WSGI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bab01c023d2077a254f644d1fe205a96f1293cc" translate="yes" xml:space="preserve">
          <source>Predefined Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7060d72f8fb4f22922cca3ef2ed4df2d353b0505" translate="yes" xml:space="preserve">
          <source>Prepends timestamp and request info to message, and writes the result out to the WSGI server&amp;rsquo;s error stream (&lt;code&gt;wsgi.error&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2421f489b5b7558f687867e88178a61e4b70c292" translate="yes" xml:space="preserve">
          <source>PyPy</source>
          <target state="translated">PyPy</target>
        </trans-unit>
        <trans-unit id="ce4e6deef8cc3411fc3342199975127ef1306f40" translate="yes" xml:space="preserve">
          <source>Python 2.6 users will need to use the deprecated &lt;code&gt;msgpack-python&lt;/code&gt; package instead, pinned to version 0.4.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1681600dfaf6395933fb4f4c22eb26e6c933fb23" translate="yes" xml:space="preserve">
          <source>Query string parameters are assumed to use standard form-encoding. Only parameters with values are returned. For example, given &amp;lsquo;foo=bar&amp;amp;flag&amp;rsquo;, this function would ignore &amp;lsquo;flag&amp;rsquo; unless the &lt;code&gt;keep_blank_qs_values&lt;/code&gt; option is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917bcf00a5f43df11b199071267499daef7275d9" translate="yes" xml:space="preserve">
          <source>Quick Links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="7812e97529b97228418b8e9d2caee1b9c24b60b7" translate="yes" xml:space="preserve">
          <source>REST-inspired mapping of URIs to resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7045f5c4f9c161d93eae2b540395e77901b82a" translate="yes" xml:space="preserve">
          <source>RFC 3986 defines a set of &amp;ldquo;unreserved&amp;rdquo; characters as well as a set of &amp;ldquo;reserved&amp;rdquo; characters used as delimiters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541ffc79a5e55a66dd8de3d93bc1bbba599b1808" translate="yes" xml:space="preserve">
          <source>RFC 3986 defines a set of &amp;ldquo;unreserved&amp;rdquo; characters as well as a set of &amp;ldquo;reserved&amp;rdquo; characters used as delimiters. This function escapes all other &amp;ldquo;disallowed&amp;rdquo; characters by percent-encoding them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2637a04add25ca378ec74004768868e8b4d48576" translate="yes" xml:space="preserve">
          <source>Rackspace</source>
          <target state="translated">Rackspace</target>
        </trans-unit>
        <trans-unit id="8a37b05fb0be969ec08c7778fb7fdd021f4bdc7a" translate="yes" xml:space="preserve">
          <source>Raise an instance of this class from a hook, middleware, or responder to short-circuit request processing in a manner similar to &lt;code&gt;falcon.HTTPError&lt;/code&gt;, but for non-error status codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9f30eaa15c7dc4d3318b7af1c18f170c156554" translate="yes" xml:space="preserve">
          <source>Raise an instance or subclass of &lt;code&gt;HTTPError&lt;/code&gt; to have Falcon return a formatted error response and an appropriate HTTP status code to the client when something goes wrong. JSON and XML media types are supported by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36d9458e0d1baae7403b5ce642a78b09e4acc7f" translate="yes" xml:space="preserve">
          <source>Raises</source>
          <target state="translated">Raises</target>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="translated">Raises:</target>
        </trans-unit>
        <trans-unit id="73ecf11b986d536b02cca27af69e039bfda48560" translate="yes" xml:space="preserve">
          <source>Rather than directly manipulate the &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, a responder may raise an instance of either &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;status#falcon.HTTPStatus&quot;&gt;&lt;code&gt;HTTPStatus&lt;/code&gt;&lt;/a&gt;. Falcon will convert these exceptions to appropriate HTTP responses. Alternatively, you can handle them youself via &lt;a href=&quot;api#falcon.API.add_error_handler&quot;&gt;&lt;code&gt;add_error_handler()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a74b503a1543250fe9facd1ec8c2b031a7e575" translate="yes" xml:space="preserve">
          <source>Read the docs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77aad5fb24921ef76ac8f3e500ed93fddae8f2a" translate="yes" xml:space="preserve">
          <source>Redirection</source>
          <target state="translated">Redirection</target>
        </trans-unit>
        <trans-unit id="fcf937319f333e7df4ec12406025be63bde6549b" translate="yes" xml:space="preserve">
          <source>Redirects</source>
          <target state="translated">Redirects</target>
        </trans-unit>
        <trans-unit id="8ff9100a6b0fb062918bd6373a9727a022cc5db6" translate="yes" xml:space="preserve">
          <source>Refactoring for testability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="e3ad26172e38902bb7ea57aefccd9929e0b56e09" translate="yes" xml:space="preserve">
          <source>Register a handler for a given exception error type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bde4aaf5943224b0a47976ee1d30df52125140" translate="yes" xml:space="preserve">
          <source>Register a sink method for the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8ab1ba78a0f2d5acda2bd71f86eb9c6c54e642" translate="yes" xml:space="preserve">
          <source>Relation type of the link, such as &amp;ldquo;next&amp;rdquo; or &amp;ldquo;bookmark&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4f66ae4acdbb2c4e43a46421d42629ff63f38c" translate="yes" xml:space="preserve">
          <source>Release v1.4 (&lt;a href=&quot;user/install#install&quot;&gt;Installation&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7badc88c22ef66f3695121b211fa9ca0b248bc3" translate="yes" xml:space="preserve">
          <source>Replacing the Default Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2464af0a89128a10b68558c0a4129f46198114a" translate="yes" xml:space="preserve">
          <source>Represents a client&amp;rsquo;s HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9aba2fc12d8bfb2e24ce401c1a9e0e79d85ba05" translate="yes" xml:space="preserve">
          <source>Represents a cookie returned by a simulated request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd0cadceadf4122b69f568c81e0565f4531391a" translate="yes" xml:space="preserve">
          <source>Represents a generic HTTP error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8e9d56e793453dd7f40680bb211a84977b9f27" translate="yes" xml:space="preserve">
          <source>Represents a generic HTTP status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfc4e9d1e730dcdc62161a5732a5b0eab7b6322" translate="yes" xml:space="preserve">
          <source>Represents a parsed Forwarded header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8c956871f584f974a8dd1e3ff0defa2f447d92" translate="yes" xml:space="preserve">
          <source>Represents an HTTP response to a client request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09aecefd1d349d481af2e97012491a0d9f35b13d" translate="yes" xml:space="preserve">
          <source>Represents the collection of named converters that may be referenced in URI template field expressions. Adding additional converters is simply a matter of mapping an identifier to a converter class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aed03cac49d5e43da4e855a967286931a4d621a" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="translated">Request</target>
        </trans-unit>
        <trans-unit id="ba7f7130b023657b84f984949de69cdd9a2909d1" translate="yes" xml:space="preserve">
          <source>Request &amp;amp; Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d392c04224d3067d4165670b3ae0f79d59b1a1c5" translate="yes" xml:space="preserve">
          <source>Request Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fad55a98a9dd0e93de14214b50a92bce240602" translate="yes" xml:space="preserve">
          <source>Request and Response Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f32495064a86ea6bdd90ee73ef8760773803adb" translate="yes" xml:space="preserve">
          <source>Resource class methods provide a uniform interface that does not have to be reinvented (and maintained) from class to class and application to application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba0c55e65823aa40b58ed06e305debd11813c93" translate="yes" xml:space="preserve">
          <source>Resource responders set response variables to sane values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd46939d4b44ec47328a35d137f09dcdf7fde5c" translate="yes" xml:space="preserve">
          <source>Responders must always define at least two arguments to receive &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; objects, respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e617e4fc9da3de9693eac5990613543b86c63f9" translate="yes" xml:space="preserve">
          <source>Response</source>
          <target state="translated">Response</target>
        </trans-unit>
        <trans-unit id="aed6b088abecc3c4895e8313ebe4404020e21a3c" translate="yes" xml:space="preserve">
          <source>Response Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a769830cefa7afca40c1594b4a873695ab16bd91" translate="yes" xml:space="preserve">
          <source>Responses using this status code SHOULD explain how to resubmit the request successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9944efbf8d68374ae7fb162a946a2cb7bc130271" translate="yes" xml:space="preserve">
          <source>Responses using this status code SHOULD include an explanation, in the response body, of the details of the legal demand: the party making it, the applicable legislation or regulation, and what classes of person and resource it applies to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa58806549852b977066c63216f52a253b14d0b7" translate="yes" xml:space="preserve">
          <source>Responses with the 429 status code MUST NOT be stored by a cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e55fbc2beef24fe783a6479c6de0dc874b13f5e" translate="yes" xml:space="preserve">
          <source>Responses with the 431 status code MUST NOT be stored by a cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93c035ceb7e90b680b0affddd58a5c0da45d0b1" translate="yes" xml:space="preserve">
          <source>Responses with the 511 status code MUST NOT be stored by a cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc287332e9f26139be40387008356d9731082ca" translate="yes" xml:space="preserve">
          <source>Restart Gunicorn (unless you&amp;rsquo;re using &lt;code&gt;--reload&lt;/code&gt;), and then try sending a GET request to the revised resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a3b811dd14f0228a9de20bdade995de2c41bc6" translate="yes" xml:space="preserve">
          <source>Restricts the cookie to a specific domain and any subdomains of that domain. By default, the user agent will return the cookie only to the origin server. When overriding this default behavior, the specified domain must include the origin server. Otherwise, the user agent will reject the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71147b496964a6cc73382ffcc89e53917ec9ceaf" translate="yes" xml:space="preserve">
          <source>Retrieve the raw string value for the given header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf77305919f153f67fe36d823de2ce029588c7c0" translate="yes" xml:space="preserve">
          <source>Return a basic dictionary representing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8fd3864bc3691b557d40e0ab1c66a69be2619a" translate="yes" xml:space="preserve">
          <source>Return a pretty-printed JSON representation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d9791e368536beec5ca2e8cae6fde4aff7314d" translate="yes" xml:space="preserve">
          <source>Return an HTTP header with HTTP-Date values as a datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1866245f8cd18a317b44c9d1efe90bae956587d8" translate="yes" xml:space="preserve">
          <source>Return an XML-encoded representation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1db989282bc57fdadea7d9200f95ddfe4a5c8de" translate="yes" xml:space="preserve">
          <source>Return the client&amp;rsquo;s preferred media type, given several choices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e64aeebf2ae4857577a6634ee9e5eaf30ca4f36" translate="yes" xml:space="preserve">
          <source>Return the daylight saving time (DST) adjustment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2994881f096972937659fad257e153b2ee43292" translate="yes" xml:space="preserve">
          <source>Return the decoded JSON value of a query string parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db668a80d799bb60fe236bf9a77e13bf528d409a" translate="yes" xml:space="preserve">
          <source>Return the raw value of a query string parameter as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f700eb143c1aa41869b44a2b9b175d98a95b5932" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bfdf180e15eb030ea66cad36c545e69a24a87e" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54c773588a438154ba97a3617a14ceb372ce886" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8288e12ac673c73f03b9cd7516311c052eb147d" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e591ed68dbf91047b27a5d434b839aeed7a015ab" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as an UUID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255b0f05faf2337c7baf1c1af19894585d17f1bf" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as an int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8246453c6e901bbc2e4288b43a47949404da068a" translate="yes" xml:space="preserve">
          <source>Return type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d1cdaaf9cd46fc16f2e360843330d1776abfbb" translate="yes" xml:space="preserve">
          <source>Returns a randomly-generated string, of a random length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880bab60c588dc4babefd930af5c38450e59df4f" translate="yes" xml:space="preserve">
          <source>Returns the current UTC time as an IMF-fixdate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="a2e2861fa816b96268d3d43f635cdcb63aa20fc7" translate="yes" xml:space="preserve">
          <source>Reverse proxies are often configured to set the Host header directly to the one that was originally requested by the user agent; in that case, using &lt;a href=&quot;#falcon.Request.host&quot;&gt;&lt;code&gt;host&lt;/code&gt;&lt;/a&gt; is sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab64c7383188709ea526bd09343f63a6a92e2eaa" translate="yes" xml:space="preserve">
          <source>Right now, the image resource responds to GET requests with a simple &lt;code&gt;200 OK&lt;/code&gt; and a JSON body. Falcon&amp;rsquo;s Internet media type defaults to &lt;code&gt;application/json&lt;/code&gt; but you can set it to whatever you like. Noteworthy JSON alternatives include &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; and &lt;a href=&quot;http://msgpack.org/&quot;&gt;MessagePack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd2150013147b397fa44a2d4f596dd3e162e892" translate="yes" xml:space="preserve">
          <source>Routes based on URI templates RFC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="00ae55c2616ea16a9afa0d1977d3c64a38d23e37" translate="yes" xml:space="preserve">
          <source>Routing Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a75f5b8b305be0c0f0e27bb85465e10f330bb0" translate="yes" xml:space="preserve">
          <source>Scopes the cookie to the given path plus any subdirectories under that path (the &amp;ldquo;/&amp;rdquo; character is interpreted as a directory separator). If the cookie does not specify a path, the user agent defaults to the path component of the requested URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edd4e1df72d3aace22438d83bb38f124bf0a43a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;media#media&quot;&gt;Media&lt;/a&gt; for more information regarding media handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">参照</target>
        </trans-unit>
        <trans-unit id="cd5024cdd958df478f96e23b02b7cde852f39f71" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://github.com/falconry/falcon/blob/master/tox.ini&quot;&gt;tox.ini&lt;/a&gt; file for a full list of available environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6e2ecf7dfe22a2c6c4610c6773ca4f2811a637" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides&quot;&gt;WSGI middleware example&lt;/a&gt; given in PEP-3333.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f90c01b3ccfe4460d975bb72266d13f3309f9c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../api/api#falcon.API.add_error_handler&quot;&gt;&lt;code&gt;add_error_handler()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43183d53f31190c631421abb971e11340a5c22c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://tools.ietf.org/html/rfc6265#section-4.1.2.5&quot;&gt;RFC 6265, Section 4.1.2.5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cebdb06f4cc83807e41a08e8af9e45d2eb3b751" translate="yes" xml:space="preserve">
          <source>Serialize the media object on a &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;falcon.Response&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46cd88bd8695dc7923d7eca97daba11572b661f" translate="yes" xml:space="preserve">
          <source>Serving Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0dd7cd0617a2bb10539769d872732abf30e4bb" translate="yes" xml:space="preserve">
          <source>Serving files directly from the web server, rather than through the Python app, will always be more efficient, and therefore should be preferred in production deployments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebad7462677862644cebd44c5002f349807f5d9" translate="yes" xml:space="preserve">
          <source>Set a header for this response to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc29830af6088117cf5b1d94564aaaf53bc0322" translate="yes" xml:space="preserve">
          <source>Set a response cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59086db4fa7be57662b83c84aeef0eb195a0c1a" translate="yes" xml:space="preserve">
          <source>Set or append a header for this response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1972779ac5b95baabe27e049d88742dd5e8db41e" translate="yes" xml:space="preserve">
          <source>Set several headers at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26215380254873eacfdb1d8bec8440421cef8243" translate="yes" xml:space="preserve">
          <source>Set the Accept-Ranges header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e9c349af7267226a11f9a33aaf885a65b206a6" translate="yes" xml:space="preserve">
          <source>Set the Cache-Control header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b68d18b392bfec63a51f76b9a143b6d9a6369b5" translate="yes" xml:space="preserve">
          <source>Set the Content-Disposition header using the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbba708a8fcbbe116624ce2d985711295569859" translate="yes" xml:space="preserve">
          <source>Set the Content-Location header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eecd52727a85f04541bc9183e87293cc14fc3c7" translate="yes" xml:space="preserve">
          <source>Set the ETag header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34165f27eb77ffb7a8d4a30f71f305e273982895" translate="yes" xml:space="preserve">
          <source>Set the Last-Modified header. Set to a &lt;code&gt;datetime&lt;/code&gt; (UTC) instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4606ae3801abe36a4a26c28b8bf4853df54bfea" translate="yes" xml:space="preserve">
          <source>Set the Location header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecc73c3a314abbadb86555e49c699ea80146143" translate="yes" xml:space="preserve">
          <source>Set the Retry-After header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45171ce26d5baa2a2634799948356c570c5b1b88" translate="yes" xml:space="preserve">
          <source>Set this property to an iterable of header names. For a single asterisk or field value, simply pass a single-element &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a8a22238ef7de5ea1a3f32eae86001b2211662" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;False&lt;/code&gt; in order to retain a trailing slash, if present, at the end of the URL path (default &lt;code&gt;True&lt;/code&gt;). When this option is enabled, the URL path is normalized by stripping the trailing slash character. This lets the application define a single route to a resource for a path that may or may not end in a forward slash. However, this behavior can be problematic in certain cases, such as when working with authentication schemes that employ URL-based signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abcd3394f28fd96c7b36292a4e10e472214b758" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;False&lt;/code&gt; to treat commas in a query string value as literal characters, rather than as a comma- separated list (default &lt;code&gt;True&lt;/code&gt;). When this option is enabled, the value will be split on any non-percent-encoded commas. Disable this option when encoding lists as multiple occurrences of the same parameter, and when values may be encoded in alternative formats in which the comma character is significant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3fd9ba55a0c65c774515ae69eb003d44a6d1a5" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;True&lt;/code&gt; in order to automatically consume the request stream and merge the results into the request&amp;rsquo;s query string params when the request&amp;rsquo;s content type is &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; (default &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe1a1be3ab9ce3c5b5518e740b5f5c1a18332b5" translate="yes" xml:space="preserve">
          <source>Sets the Content-Type header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812e1510dc3a69bba7169d046432d0ac229b769f" translate="yes" xml:space="preserve">
          <source>Setting Cookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8aea2755b74bfe18b18b8045d2bb9805310e69" translate="yes" xml:space="preserve">
          <source>Setting cookies on a response is done via &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b98c2c148cc55f43358c84052c0a677a5b68fef" translate="yes" xml:space="preserve">
          <source>Shiftgig</source>
          <target state="translated">Shiftgig</target>
        </trans-unit>
        <trans-unit id="bbf5e0faccce9f4212fd27e220404de17fcaccb8" translate="yes" xml:space="preserve">
          <source>Similar logic can be applied globally with middleware. (See also: &lt;a href=&quot;../api/middleware#middleware&quot;&gt;falcon.middleware&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaf2f9ce9f0c0a0bd96c1ed0494cd06d4830358" translate="yes" xml:space="preserve">
          <source>Similar to the way multiple keys in form data is handled, if a query parameter is assigned a comma-separated list of values (e.g., &lt;code&gt;foo=a,b,c&lt;/code&gt;), only one of those values will be returned, and it is undefined which one. Use &lt;a href=&quot;#falcon.Request.get_param_as_list&quot;&gt;&lt;code&gt;get_param_as_list()&lt;/code&gt;&lt;/a&gt; to retrieve all the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86908d09bd9d22561b8032f4362cb1ed2e837e66" translate="yes" xml:space="preserve">
          <source>Simply inherit from this class in your test case classes instead of &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;testtools.TestCase&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efe3729516697080fa3b31c3cef6c25e4944ad4" translate="yes" xml:space="preserve">
          <source>Simulates a DELETE request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c88d03b65011d898a0f67608343b138639a3131" translate="yes" xml:space="preserve">
          <source>Simulates a GET request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f65072cc15597ea07ed04c5f330c07749452b25" translate="yes" xml:space="preserve">
          <source>Simulates a HEAD request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a274d9d17eb05ebbadd3c81df6552244131d1a17" translate="yes" xml:space="preserve">
          <source>Simulates a PATCH request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4026afbf34de290320ef825ed8bc8002afa4427c" translate="yes" xml:space="preserve">
          <source>Simulates a POST request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b020551ee2a87787d04649de4b52ea03354c6858" translate="yes" xml:space="preserve">
          <source>Simulates a PUT request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c437ea208d8a355140917299f3fd6dbbc59f3b7" translate="yes" xml:space="preserve">
          <source>Simulates a request to &lt;code&gt;self.api&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba77c20647151932a4a9d1d6cd46c18dd60a06ad" translate="yes" xml:space="preserve">
          <source>Simulates a request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00af3ff2c255abf767fc2dcd20c3dd2488a1660e" translate="yes" xml:space="preserve">
          <source>Simulates an OPTIONS request to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974b8e9c9333ccb3135405015d459ba83e89d75f" translate="yes" xml:space="preserve">
          <source>Simulates requests to a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88824c2a99b73ac27b74cb09de3fdb3efd111f18" translate="yes" xml:space="preserve">
          <source>Since this object is provided by the WSGI server itself, rather than by Falcon, it may behave differently depending on how you host your app. For example, attempting to read more bytes than are expected (as determined by the Content-Length header) may or may not block indefinitely. It&amp;rsquo;s a good idea to test your WSGI server to find out how it behaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d0de9421139e06ca3049737a4da5165914c73d" translate="yes" xml:space="preserve">
          <source>Since we are building an image-sharing API, let&amp;rsquo;s start by creating an &amp;ldquo;images&amp;rdquo; resource. Create a new module, &lt;code&gt;images.py&lt;/code&gt; next to &lt;code&gt;app.py&lt;/code&gt;, and add the following code to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a540a31340238b7255a499672950eb2f1bd6896" translate="yes" xml:space="preserve">
          <source>Snappy unit testing through WSGI helpers and mocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662dd5ad7e76c16c0d67c23b86e41dc092cd7afb" translate="yes" xml:space="preserve">
          <source>So far we have only implemented a responder for GET. Let&amp;rsquo;s see what happens when a different method is requested:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0450c161e801905e3f771af7fcb01580c22414f6" translate="yes" xml:space="preserve">
          <source>So-called &amp;ldquo;link-extension&amp;rdquo; elements, as defined by RFC 5988, are not yet supported. See also Issue #288.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb74b9ae4ba084aa93615c1403c54d982f1ccfb" translate="yes" xml:space="preserve">
          <source>Specifies when the cookie should expire. By default, cookies expire when the user agent exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c6f12fa0503103d2502596ed6f908c43fa25d9" translate="yes" xml:space="preserve">
          <source>Start by defining a list of media types the service will accept. Place this constant near the top, just after the import statements in &lt;code&gt;images.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc37e6d911befd4a4898219a8d9270e2772191e8" translate="yes" xml:space="preserve">
          <source>Static routes are matched in LIFO order. Therefore, if the same prefix is used for two routes, the second one will override the first. This also means that more specific routes should be added &lt;em&gt;after&lt;/em&gt; less specific ones. For example, the following sequence would result in &lt;code&gt;'/foo/bar/thing.js'&lt;/code&gt; being mapped to the &lt;code&gt;'/foo/bar'&lt;/code&gt; route, and &lt;code&gt;'/foo/xyz/thing.js'&lt;/code&gt; being mapped to the &lt;code&gt;'/foo'&lt;/code&gt; route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e20fcad0088815384ca7643b86b510910b6d898" translate="yes" xml:space="preserve">
          <source>Static routes provide a way to serve files directly. This feature provides an alternative to serving files at the web server level when you don&amp;rsquo;t have that option, when authorization is required, or for testing purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5583f5096a76c834c0bcc4f4885ffca8fe34cd" translate="yes" xml:space="preserve">
          <source>Status Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ae3ef33e83e257a6d9f01f8f5e3b2c8b064a1d" translate="yes" xml:space="preserve">
          <source>Straightforward exception handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025dc49987125a2f8778cd153f13e51b92f75079" translate="yes" xml:space="preserve">
          <source>Support for CPython 2.6 is deprecated and will be removed in Falcon 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0bfe9d44c9040a72d2a1656f382faee40c5063" translate="yes" xml:space="preserve">
          <source>Supported Handler Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6278ad6514f28afb3102e7328e3136c1abe2c689" translate="yes" xml:space="preserve">
          <source>Supports Python 2.6, 2.7, 3.3, 3.4 and 3.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec6ee98efbd89d4f4f05a322d3afa1bf0a589b3" translate="yes" xml:space="preserve">
          <source>Suppose you have the following routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4800e348d69f9583c064ceda96039ce27d1f83d4" translate="yes" xml:space="preserve">
          <source>Take a moment to run pytest again to check your progress:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="caba85a38659d35c5f12809be3024b3ed7677165" translate="yes" xml:space="preserve">
          <source>Testing your application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e74a777f6f08e831eebf8c1a6642d5c1d71643" translate="yes" xml:space="preserve">
          <source>Tests can either be written using Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module, or with any of a number of third-party testing frameworks, such as &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;. For this tutorial we&amp;rsquo;ll use &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; since it allows for more pythonic test code as compared to the JUnit-inspired &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14f108604f9b9cb80e71415bbf3b0e54ea374ff" translate="yes" xml:space="preserve">
          <source>That being said, IO-bound Falcon APIs are usually scaled via green threads (courtesy of the &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; library or similar) which aren&amp;rsquo;t truly running concurrently, so there may be some edge cases where Falcon is not thread-safe that haven&amp;rsquo;t been discovered yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91760a57ebb6de47220f664ed3fe52a2307b831d" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Vary&amp;rdquo; header field in a response describes what parts of a request message, aside from the method, Host header field, and request target, might influence the origin server&amp;rsquo;s process for selecting and representing this response. The value consists of either a single asterisk (&amp;ldquo;*&amp;rdquo;) or a list of header field names (case-insensitive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5569cd35f7571a8587db177ee937a538bed7742" translate="yes" xml:space="preserve">
          <source>The 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3d47e4c8b5075186c10d4422e75e9fd42136d0" translate="yes" xml:space="preserve">
          <source>The 302 (Found) status code indicates that the target resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client ought to continue to use the effective request URI for future requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726b4242ef422047aeb3d20c6ce4e902ac145e3c" translate="yes" xml:space="preserve">
          <source>The 303 (See Other) status code indicates that the server is redirecting the user agent to a &lt;em&gt;different&lt;/em&gt; resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e2e62bbd068fa3a3dc4c65a18c4d3e392cb9eb" translate="yes" xml:space="preserve">
          <source>The 307 (Temporary Redirect) status code indicates that the target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI. Since the redirection can change over time, the client ought to continue using the original effective request URI for future requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d685714d7f7c4aa8d639d8628cfc53dac9a432e" translate="yes" xml:space="preserve">
          <source>The 308 (Permanent Redirect) status code indicates that the target resource has been assigned a new permanent URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3384e0a60969e2be04db6337b00636752c28c0" translate="yes" xml:space="preserve">
          <source>The 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer associated with the origin server&amp;rsquo;s site. It is not necessary to mark all permanently unavailable resources as &amp;ldquo;gone&amp;rdquo; or to keep the mark for any length of time &amp;ndash; that is left to the discretion of the server owner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d41634e1486182ae5ed330e8da9002cbdd8832" translate="yes" xml:space="preserve">
          <source>The 423 (Locked) status code means the source or destination resource of a method is locked. This response SHOULD contain an appropriate precondition or postcondition code, such as &amp;lsquo;lock-token-submitted&amp;rsquo; or &amp;lsquo;no-conflicting-lock&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a2e06651b68836701d3a7cb603b045c6e96900" translate="yes" xml:space="preserve">
          <source>The 424 (Failed Dependency) status code means that the method could not be performed on the resource because the requested action depended on another action and that action failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f699dbe1affd27bc27a1c4e9c8c3bf1b9d1409af" translate="yes" xml:space="preserve">
          <source>The 428 status code indicates that the origin server requires the request to be conditional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340983f703bea50cbcfa389827e03f93960292cc" translate="yes" xml:space="preserve">
          <source>The 431 status code indicates that the server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecb4ba8dba027dd2009504727fa8640f03dc45e" translate="yes" xml:space="preserve">
          <source>The 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5a6e6224a6befed044cf459ac3ad6b9a312b3f" translate="yes" xml:space="preserve">
          <source>The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3e56bd7be8142221a29289658a2e3d7346bb69" translate="yes" xml:space="preserve">
          <source>The 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message. The server is indicating that it is unable or unwilling to complete the request using the same major version as the client (as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-2.6&quot;&gt;RFC 7230, Section 2.6&lt;/a&gt;), other than with this error message. The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfe58d6c6aa1b9a0d0a3a747564d201b045f349" translate="yes" xml:space="preserve">
          <source>The 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request that received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57373a3fd3bc21f998e825b6baefc168ab517736" translate="yes" xml:space="preserve">
          <source>The 508 (Loop Detected) status code indicates that the server terminated an operation because it encountered an infinite loop while processing a request with &amp;ldquo;Depth: infinity&amp;rdquo;. This status indicates that the entire operation failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd7b38dbe1a6e26eb4ce50115f5dc8d8ec3b5d7" translate="yes" xml:space="preserve">
          <source>The 511 status SHOULD NOT be generated by origin servers; it is intended for use by intercepting proxies that are interposed as a means of controlling access to the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2021f09cffdfd7e8e3c2b6e4af6afc876e3ba4" translate="yes" xml:space="preserve">
          <source>The 511 status code indicates that the client needs to authenticate to gain network access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b375b386cad2cf0c706ec29c2501981f15368a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#falcon.API.add_route&quot;&gt;&lt;code&gt;add_route()&lt;/code&gt;&lt;/a&gt; method is used to associate a URI template with a resource. Falcon then maps incoming requests to resources based on these templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16e989ab1e7195020236dcccbd9b80ae4c1fe1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; class contains helper methods, such as &lt;code&gt;to_json()&lt;/code&gt; and &lt;code&gt;to_dict()&lt;/code&gt;, that can be used from within custom serializers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b25e21bae5e9d50ada2a93cc95a03e94707ebe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object represents the incoming HTTP request. It exposes properties and methods for examining headers, query string parameters, and other metadata associated with the request. A file-like stream object is also provided for reading any data that was included in the body of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64cdea96b1a83d53287b37a25f2434d0d8aa000" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Request.cookies&quot;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; attribute is a regular &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4734fa80d7bfc7dbe4727753201a6b446e9166c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Request.cookies&quot;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; attribute returns a copy of the response cookie dictionary. Assign it to a variable, as shown in the above example, to improve performance when you need to look up more than one cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888cea72316f9cddd409828c37a637a4cf7684e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object represents the application&amp;rsquo;s HTTP response to the above request. It provides properties and methods for setting status, header and body data. The &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object also exposes a dict-like &lt;a href=&quot;request_and_response#falcon.Response.context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; property for passing arbitrary data to hooks and middleware methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad7b66e61b91a5b2444c8aea097a08dd5c31f62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt; method should be used instead of &lt;a href=&quot;request_and_response#falcon.Response.set_header&quot;&gt;&lt;code&gt;set_header()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt;&lt;code&gt;append_header()&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;request_and_response#falcon.Response.set_header&quot;&gt;&lt;code&gt;set_header()&lt;/code&gt;&lt;/a&gt; you cannot set multiple headers with the same name (which is how multiple cookies are sent to the client). Furthermore, &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt;&lt;code&gt;append_header()&lt;/code&gt;&lt;/a&gt; appends multiple values to the same header field in a way that is not compatible with the special format required by the &lt;code&gt;Set-Cookie&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6cd0120941e3e305c5928f34ca490f077e2361e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; character is often used instead of &lt;code&gt;%20&lt;/code&gt; to represent spaces in query string params, due to the historical conflation of form parameter encoding (&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;) and URI percent-encoding. Therefore, Falcon, converts &lt;code&gt;+&lt;/code&gt; to a space when decoding strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234169c00df14981c9c02886b9808f15714759f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;falcon&lt;/code&gt; module provides a number of constants for common media types, including &lt;code&gt;falcon.MEDIA_JSON&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_MSGPACK&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_YAML&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_XML&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_HTML&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_JS&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_TEXT&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_JPEG&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_PNG&lt;/code&gt;, and &lt;code&gt;falcon.MEDIA_GIF&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fdec9cfe6f041a3303843d674dec970b0300b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;falcon&lt;/code&gt; module provides a number of constants for common media types, including the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc9aab31febdd84ad6937c4d9698f52c521ed55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jsonschema`&lt;/code&gt; package must be installed separately in order to use this decorator, as Falcon does not install it by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7465499e051900ef082b21f12b081150aac7d688" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;falcon.routing&lt;/em&gt; module contains the following utilities that may be used by custom routing engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaebffd33aa1a0bdb9a7d943508e46ac0926bb2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;process_resource&lt;/em&gt; method is only called when the request matches a route to a resource. To take action when a route is not found, a &lt;a href=&quot;api#falcon.API.add_sink&quot;&gt;&lt;code&gt;sink&lt;/code&gt;&lt;/a&gt; may be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6e6f00641c89010271ad2ba362bf0c155117f0" translate="yes" xml:space="preserve">
          <source>The API Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad83fcf5ee047fa29ae27e82f64261064513f8a" translate="yes" xml:space="preserve">
          <source>The Accept-Ranges header field indicates to the client which range units are supported (e.g. &amp;ldquo;bytes&amp;rdquo;) for the target resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20146bf024b68a12263443a68324850d8be45c3" translate="yes" xml:space="preserve">
          <source>The Clang compiler treats unrecognized command-line options as errors; this can cause problems under Python 2.6, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b9f7fad1411e66089824de7709062d0f9c944e" translate="yes" xml:space="preserve">
          <source>The Content-Type header, if present, will be overridden. If you wish to return custom error messages, you can create your own HTTP error class, and install an error handler to convert it into an appropriate HTTP response for the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ddac2b2a870aaf2a0e0d40984dc0e7f390490e" translate="yes" xml:space="preserve">
          <source>The Falcon Web Framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccedec1abcc82034a9e90fd97f39e6f7c6bfe3c" translate="yes" xml:space="preserve">
          <source>The Falcon framework contains extensive inline documentation that you can query using the above technique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355d726619940776341f0ae2510b4d6b3a789917" translate="yes" xml:space="preserve">
          <source>The Python ecosystem offers a number of great packages that you can use from within your responders, hooks, and middleware components. As a starting point, the community maintains a list of &lt;a href=&quot;https://github.com/falconry/falcon/wiki&quot;&gt;Falcon add-ons and complementary packages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc3db4d907e501e1bae6cceef917c9995b0f458" translate="yes" xml:space="preserve">
          <source>The Secure Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11dfb2e2176014b2b369487df050512b8d71196e" translate="yes" xml:space="preserve">
          <source>The URL structure of the application is centralized. This makes it easier to reason about and maintain the API over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21dd72604e094689c8df9381f73c0748ceb807d9" translate="yes" xml:space="preserve">
          <source>The above process of starting, testing, stopping, and cleaning up after each test run can (and really should be) automated. Depending on your needs, you can develop your own automation fixtures, or use a library such as &lt;a href=&quot;https://github.com/butla/mountepy&quot;&gt;mountepy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae7a70db69d16eef24d08f8eaea3dcbb7600a7c" translate="yes" xml:space="preserve">
          <source>The character encoding for fields, before percent-encoding non-ASCII bytes, is assumed to be UTF-8. The special &lt;code&gt;_charset_&lt;/code&gt; field is ignored if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ed64cdabeb7a6c0190f4ce9a46145b79a5e8eb" translate="yes" xml:space="preserve">
          <source>The client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message body in the request message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096820ebedfe55a0f653a3b13390687140f22682" translate="yes" xml:space="preserve">
          <source>The client&amp;rsquo;s preferred media type, based on the Accept header. Returns &lt;code&gt;None&lt;/code&gt; if the client does not accept any of the given types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf6b2ca4e0eecc451258847cd2cfd02990b1c21" translate="yes" xml:space="preserve">
          <source>The command to run the application is now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9ddf1419e66a8abe968368bef4cc3083ff911b" translate="yes" xml:space="preserve">
          <source>The current UTC time as an IMF-fixdate, e.g., &amp;lsquo;Tue, 15 Nov 1994 12:45:26 GMT&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6018dc87f65236389972dedf88f10138906dc0f4" translate="yes" xml:space="preserve">
          <source>The default JSON handler for &lt;code&gt;resp.media&lt;/code&gt; only supports the objects and types listed in the table documented under &lt;a href=&quot;https://docs.python.org/3.6/library/json.html#json.JSONEncoder&quot;&gt;json.JSONEncoder&lt;/a&gt;. To handle additional types, you can either serialize them beforehand, or create a custom JSON media handler that sets the &lt;code&gt;default&lt;/code&gt; param for &lt;code&gt;json.dumps()&lt;/code&gt;. When deserializing an incoming request body, you may also wish to implement &lt;code&gt;object_hook&lt;/code&gt; for &lt;code&gt;json.loads()&lt;/code&gt;. Note, however, that setting the &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;object_hook&lt;/code&gt; params can negatively impact the performance of (de)serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d1c6f6a3a3c25fec420afd6a2b179fcc59b4d7" translate="yes" xml:space="preserve">
          <source>The default value for this argument is normally &lt;code&gt;True&lt;/code&gt;, but can be modified by setting &lt;a href=&quot;api#falcon.ResponseOptions.secure_cookies_by_default&quot;&gt;&lt;code&gt;secure_cookies_by_default&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;api#falcon.API.resp_options&quot;&gt;&lt;code&gt;API.resp_options&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9741400c80f98a463b42fa5553e22068183d5b40" translate="yes" xml:space="preserve">
          <source>The expected value is an integral number of seconds to use as the value for the header. The HTTP-date syntax is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b152017ca59b8d5565927fa54ae8827036534f" translate="yes" xml:space="preserve">
          <source>The file hierarchy should now look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb04c8c501207a44e1c5aa40b13287a50cadd90c" translate="yes" xml:space="preserve">
          <source>The first thing we&amp;rsquo;ll do is &lt;a href=&quot;install#install&quot;&gt;install&lt;/a&gt; Falcon inside a fresh &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtualenv&lt;/a&gt;. To that end, let&amp;rsquo;s create a new project folder called &amp;ldquo;look&amp;rdquo;, and set up a virtual environment within it that we can use for the tutorial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6911f562a13bbc195dd8c8084800b639b52434" translate="yes" xml:space="preserve">
          <source>The following boolean strings are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f17a9a749571d7f0424d740c1b1649c07f2bf7" translate="yes" xml:space="preserve">
          <source>The following commands tell pip to install Cython, and then to invoke Falcon&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;, which will in turn detect the presence of Cython and then compile (AKA cythonize) the Falcon framework with the system&amp;rsquo;s default C compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f043d59ee870371ba4af577fad20c908a4875876" translate="yes" xml:space="preserve">
          <source>The following request headers are checked, in order of preference, to determine the addresses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2ffd59ed82fcb42354aa0f4c57eeb72fb69e98" translate="yes" xml:space="preserve">
          <source>The following request headers are checked, in order of preference, to determine the forwarded scheme:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56febda00897b4c7c8a76d4da3cedcb77763a5e3" translate="yes" xml:space="preserve">
          <source>The format problem might be due to the request&amp;rsquo;s indicated Content- Type or Content-Encoding, or as a result of inspecting the data directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b172d7ca1742380833db7420354bc403e29916a" translate="yes" xml:space="preserve">
          <source>The header&amp;rsquo;s value if set, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cab95eeeaea077b80fccbfb3cba746626f1d9cc" translate="yes" xml:space="preserve">
          <source>The idea here is to only accept GIF, JPEG, and PNG images. You can add others to the list if you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59ab72bc748edec524b503a34e77a5d201e6cb0" translate="yes" xml:space="preserve">
          <source>The identifier can then be used to employ the converter within a URI template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69966743f91a9eca444b74a1d7fd8e259495034f" translate="yes" xml:space="preserve">
          <source>The image resource above defines a single method, &lt;code&gt;on_get()&lt;/code&gt;. For any HTTP method you want your resource to support, simply add an &lt;code&gt;on_*()&lt;/code&gt; method to the class, where &lt;code&gt;*&lt;/code&gt; is any one of the standard HTTP methods, lowercased (e.g., &lt;code&gt;on_get()&lt;/code&gt;, &lt;code&gt;on_put()&lt;/code&gt;, &lt;code&gt;on_head()&lt;/code&gt;, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9195108770b6c549887275ea2f9e30ae5f97b0" translate="yes" xml:space="preserve">
          <source>The last line in the &lt;code&gt;on_post()&lt;/code&gt; responder sets the Location header for the newly created resource. (We will create a route for that path in just a minute.) The &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; classes contain convent attributes for reading and setting common headers, but you can always access any header by name with the &lt;code&gt;req.get_header()&lt;/code&gt; and &lt;code&gt;resp.set_header()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49b9ebb554e404f8649f14848772fa46d70388a" translate="yes" xml:space="preserve">
          <source>The method received in the request-line is known by the origin server but not supported by the target resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8fda2627f67ba1f06ba95f7c064e644c85b8a0" translate="yes" xml:space="preserve">
          <source>The methods all call &lt;code&gt;self.simulate_request()&lt;/code&gt; for convenient overriding of request preparation by child classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f712cc078ed640970a18e9fc668cddfdc82cf9" translate="yes" xml:space="preserve">
          <source>The new URI in the Location header field is not considered equivalent to the effective request URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e294887b3bed9e4a046dec5682df3777a9b4ea" translate="yes" xml:space="preserve">
          <source>The origin server MUST generate an Allow header field in a 405 response containing a list of the target resource&amp;rsquo;s currently supported methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6fb34b8ea78b6fbeca2b2e317e9ef726d69fed" translate="yes" xml:space="preserve">
          <source>The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34c761e769bf51db8fe8807c38ff55b38e20605" translate="yes" xml:space="preserve">
          <source>The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77e8ad519a79ebb8e35ae3f6641f422e91f2f95" translate="yes" xml:space="preserve">
          <source>The path prefix to match for this route. If the path in the requested URI starts with this string, the remainder of the path will be appended to the source directory to determine the file to serve. This is done in a secure manner to prevent an attacker from requesting a file outside the specified directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0078e136c81b27abb7bd345b478b834e8c6ff0d1" translate="yes" xml:space="preserve">
          <source>The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00867c1953ecaf6baf1550c3cc4ed9f59332f743" translate="yes" xml:space="preserve">
          <source>The request has not been applied because it lacks valid authentication credentials for the target resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b78db4ab9118cc4d9395bc6624fa9077a703af" translate="yes" xml:space="preserve">
          <source>The response representation SHOULD contain a link to a resource that allows the user to submit credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8446631eb3a62fa0aca910b0b54fcb954f879889" translate="yes" xml:space="preserve">
          <source>The response representations SHOULD include details explaining the condition, and MAY include a Retry-After header indicating how long to wait before making a new request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0731854ce07d2f5e30293ebd1a7e6d8309971c2" translate="yes" xml:space="preserve">
          <source>The result of the request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31781f607b998fb61249cad17bc93825af2f7ce" translate="yes" xml:space="preserve">
          <source>The resulting serialized bytes from the input object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af666108381c242146bcdcd35e7d167de334e5fc" translate="yes" xml:space="preserve">
          <source>The server MAY close the connection to prevent the client from continuing the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac1710f3b36c5dbb6a09e2a65fdda2f2afb8e4e" translate="yes" xml:space="preserve">
          <source>The server MAY send a Retry-After header field to suggest an appropriate amount of time for the client to wait before retrying the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e7c1beafd0016689e0db441e53eea4df8c11cd" translate="yes" xml:space="preserve">
          <source>The server SHOULD generate a payload containing a list of available representation characteristics and corresponding resource identifiers from which the user or user agent can choose the one most appropriate. A user agent MAY automatically select the most appropriate choice from that list. However, this specification does not define any standard for such automatic selection, as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.4.1&quot;&gt;RFC 7231, Section 6.4.1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ee680d6eb3408c02f31d764090d264b0e17d54" translate="yes" xml:space="preserve">
          <source>The server SHOULD generate a payload that includes enough information for a user to recognize the source of the conflict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaf9f23ec983dd85ab1a278a64450cd85aa44cd" translate="yes" xml:space="preserve">
          <source>The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2738f3ee171ecbfe4de6890004f5afd82b3a2139" translate="yes" xml:space="preserve">
          <source>The server encountered an unexpected condition that prevented it from fulfilling the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7add0f800abbbd1e66c60f6069c92792837f55" translate="yes" xml:space="preserve">
          <source>The server generating a 401 response MUST send a WWW-Authenticate header field containing at least one challenge applicable to the target resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a2d9f5661258161ce73028169bd11725906a95" translate="yes" xml:space="preserve">
          <source>The server in question might not be an origin server. This type of legal demand typically most directly affects the operations of ISPs and search engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68af0c18b8da8b50b98dab365e6c44bda0a1c0cd" translate="yes" xml:space="preserve">
          <source>The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dda833aeaa6eec15f7e431b7af24cbb15ca852" translate="yes" xml:space="preserve">
          <source>The server is denying access to the resource as a consequence of a legal demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535642727fdc8b05ddf05462e53eb1fd72f395b8" translate="yes" xml:space="preserve">
          <source>The server is refusing to process a request because the request payload is larger than the server is willing or able to process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e835932fee03c296bcb72aa909e221b2d76df64" translate="yes" xml:space="preserve">
          <source>The server is refusing to service the request because the request- target is longer than the server is willing to interpret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4600a172dd46594584138ffb4cdeee256ec3eab" translate="yes" xml:space="preserve">
          <source>The server refuses to accept the request without a defined Content- Length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc1d18d1de8086e00c33e14e7fbb9d98447499e" translate="yes" xml:space="preserve">
          <source>The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00efdb0f4aeceed7ddf3062cf505b924f1c16f43" translate="yes" xml:space="preserve">
          <source>The server understood the request but refuses to authorize it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc7b5094022e10cd3f5974753072f15a6924c81" translate="yes" xml:space="preserve">
          <source>The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad5ea6a882bec7a2333c040e57cc408b262dbcc" translate="yes" xml:space="preserve">
          <source>The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84928f27c78f4d3dd3859d6e787340fd92b3293c" translate="yes" xml:space="preserve">
          <source>The target resource is no longer available at the origin server and this condition is likely to be permanent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560ef3168387f14d4c503a6c7e672693a800eea4" translate="yes" xml:space="preserve">
          <source>The test will fail since it expects the image file to reside under &lt;code&gt;/tmp&lt;/code&gt;. To fix this, modify &lt;code&gt;app.py&lt;/code&gt; to add the ability to configure the image storage directory with an environment variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63226da4e48b2753f9c00270082318c99e2075c" translate="yes" xml:space="preserve">
          <source>The testing framework supports both unittest and pytest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21ed17654736dc2f507cb0fc27a983c93509271" translate="yes" xml:space="preserve">
          <source>The tuple has the form (&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;end&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt;, [&lt;em&gt;unit&lt;/em&gt;]), where &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; designate the range (inclusive), and &lt;em&gt;length&lt;/em&gt; is the total length, or &amp;lsquo;*&amp;rsquo; if unknown. You may pass &lt;code&gt;int&lt;/code&gt;&amp;rsquo;s for these numbers (no need to convert to &lt;code&gt;str&lt;/code&gt; beforehand). The optional value &lt;em&gt;unit&lt;/em&gt; describes the range unit and defaults to &amp;lsquo;bytes&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e542f74360d3b19f30c86cf27581abf2b0937e7" translate="yes" xml:space="preserve">
          <source>The two different ways of specifying lists may not be mixed in a single query string for the same parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3229a7f8d1c9ec14f29035b3656c407de7855779" translate="yes" xml:space="preserve">
          <source>The two members correspond to the first and last byte positions of the requested resource, inclusive. Negative indices indicate offset from the end of the resource, where -1 is the last byte, -2 is the second-to-last byte, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe94a101ecb954714958d80e536d52312ee6544" translate="yes" xml:space="preserve">
          <source>The use of resource classes maps somewhat naturally to the REST architectural style, in which a URL is used to identify a resource only, not the action to perform on that resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d74bfe58e769d4f1b69188a4defa69daa66991d" translate="yes" xml:space="preserve">
          <source>The user has sent too many requests in a given amount of time (&amp;ldquo;rate limiting&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb8620ba5c44a1cfc855c78a2df03ace6f5c9a0" translate="yes" xml:space="preserve">
          <source>The value of the param as a string, or &lt;code&gt;None&lt;/code&gt; if param is not found and is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23427a9edf8da3ab8c4e45367ce71a37e75fc1c" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;UUID&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt;, unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141af8d14c2db9bc948d3ea3a43dbcfc3f949355" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;bool&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61aada73962caa6ee95a077deea6836b15fcb56" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;date&lt;/code&gt; according to the supplied format string. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003871e937e399cc9fd3cce149ac07e189cb62a6" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;datetime&lt;/code&gt; according to the supplied format string. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a04e40fabb0363acc0fd95c2220173a0b5339fd" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to an &lt;code&gt;int&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt;, unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edf547580040ef96e52ce854deb6a35c38d2ae6" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found. Otherwise, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d19a65947f61ee924072efddefb40f45b95692" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found. Otherwise, returns &lt;code&gt;None&lt;/code&gt; unless required is True. Empty list elements will be discarded. For example, the following query strings would both result in &lt;code&gt;[&amp;lsquo;1&amp;rsquo;, &amp;lsquo;3&amp;rsquo;]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74ca400152e8b06eb7f5405a98421e0e569b44f" translate="yes" xml:space="preserve">
          <source>The value of the specified header if it exists, or &lt;code&gt;None&lt;/code&gt; if the header is not found and is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dea009c39601f4179b06d38cec442d76bb7f30" translate="yes" xml:space="preserve">
          <source>The value of the specified header if it exists, or the default value if the header is not found and is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790b5d3d63196f60f863de5f299fd2dd40f6704a" translate="yes" xml:space="preserve">
          <source>The value to convert must conform to the standard UUID string representation per RFC 4122. For example, the following strings are all valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1372f83ebe6b2c30954a57346db8a03c2f87bbd" translate="yes" xml:space="preserve">
          <source>The value will be used for the &lt;em&gt;filename&lt;/em&gt; directive. For example, given &lt;code&gt;'report.pdf'&lt;/code&gt;, the Content-Disposition header would be set to: &lt;code&gt;'attachment; filename=&quot;report.pdf&quot;'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856d32bcc87da698ed07c5840a22d1f12723ae41" translate="yes" xml:space="preserve">
          <source>The workaround is fairly straightforward, if verbose:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e710dd0f5ea5fb473740119a58eb640ed1794dff" translate="yes" xml:space="preserve">
          <source>Then, in another terminal, try running the new test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058ff83bf433fdce34d17ad46cb30fd2b9c0f837" translate="yes" xml:space="preserve">
          <source>Then, in another terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea446e4aed260aeac1ea4108515a92392503fb68" translate="yes" xml:space="preserve">
          <source>Then, update the responder to use the new media type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd31e3411e006ec0faad400ac680109665df979" translate="yes" xml:space="preserve">
          <source>Then, within &lt;code&gt;SomeResource&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0468dcf4b5be0721986ed4c45b049ebe65c3b358" translate="yes" xml:space="preserve">
          <source>This approach reduces the number of (often) extraneous checks that Falcon would otherwise have to perform, making the framework more efficient. With that in mind, writing a high-quality API based on Falcon requires that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6ef8fcde3b7971f8ad9f43dec093d58e153493" translate="yes" xml:space="preserve">
          <source>This approach reduces the number of checks that Falcon would otherwise have to perform, making the framework more efficient. With that in mind, writing a high-quality API based on Falcon requires that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de18ed0edd3b4aca2fe609cbad145d38cd03dc8" translate="yes" xml:space="preserve">
          <source>This base class provides some extra plumbing for unittest-style test cases, to help simulate WSGI calls without having to spin up an actual web server. Simply inherit from this class in your test case classes instead of &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;testtools.TestCase&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb37faa802d15d2ef35c1f3857902ea4e87b3f0" translate="yes" xml:space="preserve">
          <source>This base class provides some extra plumbing for unittest-style test cases, to help simulate WSGI calls without having to spin up an actual web server. Various simulation methods are derived from &lt;a href=&quot;#falcon.testing.TestClient&quot;&gt;&lt;code&gt;falcon.testing.TestClient&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83db430eaf0691c925d9163a816c8faa18a83903" translate="yes" xml:space="preserve">
          <source>This behavior is an unfortunate artifact of the request body mechanics not being fully defined by the WSGI spec (PEP-3333). This is discussed in the reference documentation for &lt;a href=&quot;../api/request_and_response#falcon.Request.stream&quot;&gt;&lt;code&gt;stream&lt;/code&gt;&lt;/a&gt;, and a workaround is provided in the form of &lt;a href=&quot;../api/request_and_response#falcon.Request.bounded_stream&quot;&gt;&lt;code&gt;bounded_stream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575831cdc881e2c205f21ddb1875abef45352fbb" translate="yes" xml:space="preserve">
          <source>This can be particulary problematic when a request body is expected, but none is given. In this case, the following call blocks under certain WSGI servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a37dd36e16db22a7706a17bca1712e3fd6f0da7" translate="yes" xml:space="preserve">
          <source>This class can be mixed in when inheriting from &lt;code&gt;HTTPError&lt;/code&gt;, in order to override the &lt;code&gt;has_representation&lt;/code&gt; property such that it always returns &lt;code&gt;False&lt;/code&gt;. This, in turn, will cause Falcon to return an empty response body to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d8858f685a8ded21353732192737a29def0c0e" translate="yes" xml:space="preserve">
          <source>This class has been deprecated and will be removed in a future release. Please use &lt;a href=&quot;#falcon.testing.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5b0095b7b30ccbb9703087a824cb40cf6b1f36" translate="yes" xml:space="preserve">
          <source>This class implements a simple test resource that can be extended as needed to test middleware, hooks, and the Falcon framework itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b8134b6fbe09022de3424bd9b9967809980cd5" translate="yes" xml:space="preserve">
          <source>This class implements the &lt;code&gt;on_get&lt;/code&gt; responder, captures request data, and sets response body and headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d2d1fe375d7a7963ea3acc36c9ad2ba168baa2" translate="yes" xml:space="preserve">
          <source>This class is deprecated and will be removed in a future release. Please use &lt;a href=&quot;#falcon.testing.SimpleTestResource&quot;&gt;&lt;code&gt;SimpleTestResource&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351cdfeec80935d64fb2d071bc70465e3812d318" translate="yes" xml:space="preserve">
          <source>This class is the main entry point into a Falcon-based app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a02a423c96eb71f1e38d9c3c2977a19e9708a8" translate="yes" xml:space="preserve">
          <source>This class provides a contextual wrapper for Falcon&amp;rsquo;s &lt;code&gt;simulate_*&lt;/code&gt; test functions. It lets you replace this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6c8f9e435bda115a0f1e3103cb8f7afa2083f5" translate="yes" xml:space="preserve">
          <source>This code creates your WSGI application and aliases it as &lt;code&gt;api&lt;/code&gt;. You can use any variable names you like, but we&amp;rsquo;ll use &lt;code&gt;application&lt;/code&gt; since that is what Gunicorn, by default, expects it to be called (we&amp;rsquo;ll see how this works in the next section of the tutorial).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a11756512de7471b7c1e0f0cd0da07645562ca3" translate="yes" xml:space="preserve">
          <source>This decorator provides standard JSON Schema validation via the &lt;code&gt;jsonschema&lt;/code&gt; package available from PyPI. Semantic validation via the &lt;em&gt;format&lt;/em&gt; keyword is enabled for the default checkers implemented by &lt;code&gt;jsonschema.FormatChecker&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c485b2df49824fb9f013b4e676fa393c36e40266" translate="yes" xml:space="preserve">
          <source>This function can be used to construct custom routing engines that iterate through a list of possible routes, attempting to match an incoming request against each route&amp;rsquo;s compiled regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04608fac3cce4799bded346700d0a81ca00edf9c" translate="yes" xml:space="preserve">
          <source>This function does not support the more flexible templating syntax used in the default router. Only simple paths with bracketed field expressions are recognized. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba2990369210f2a25e64c463aea8561bef3b2b4" translate="yes" xml:space="preserve">
          <source>This function models the behavior of &lt;code&gt;urllib.unquote_plus&lt;/code&gt;, but is faster. It is also more robust, in that it will decode escaped UTF-8 mutibyte sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed0cba5df06330c80b757635826207bb3546de9" translate="yes" xml:space="preserve">
          <source>This function returns a decorator which can be used to mark deprecated functions. Applying this decorator will result in a warning being emitted when the function is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60d56668c7f47706ebf7f20635cf74c840165a1" translate="yes" xml:space="preserve">
          <source>This handler requires the extra &lt;code&gt;msgpack&lt;/code&gt; package, which must be installed in addition to &lt;code&gt;falcon&lt;/code&gt; from PyPI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d15a8d0863c33e2f5906ebb658a07ff7d363dc" translate="yes" xml:space="preserve">
          <source>This handler uses &lt;code&gt;msgpack.unpackb()&lt;/code&gt; and &lt;code&gt;msgpack.packb()&lt;/code&gt;. The MessagePack &lt;code&gt;bin&lt;/code&gt; type is used to distinguish between Unicode strings (&lt;code&gt;str&lt;/code&gt; on Python 3, &lt;code&gt;unicode&lt;/code&gt; on Python 2) and byte strings (&lt;code&gt;bytes&lt;/code&gt; on Python 2/3, or &lt;code&gt;str&lt;/code&gt; on Python 2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214db402f72586b0835fc9540be5fee0eb1c673f" translate="yes" xml:space="preserve">
          <source>This is also safe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1096d75a4c74e2ff67bbdda84e1d86249f5916a" translate="yes" xml:space="preserve">
          <source>This is generated automatically by Falcon based on the set of methods implemented by the target resource. If a resource does not include its own OPTIONS responder, the framework provides a default implementation. Therefore, OPTIONS is always included in the list of allowable methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54258c9780f73bba6721118365a2c63c9c900bc" translate="yes" xml:space="preserve">
          <source>This is one of the key differences between the REST and RPC architectural styles. REST applies a standard set of verbs across any number of resources, as opposed to having each application define its own unique set of methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3d159d093d5f3f64b5c184f2ee9fa42d687ddc" translate="yes" xml:space="preserve">
          <source>This method can be called multiple times to add one or more cookies to the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f01c9adf8ef88f379a5d015519e9e41b2a503de" translate="yes" xml:space="preserve">
          <source>This method can be useful when serializing the error to hash-like media types, such as YAML, JSON, and MessagePack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0582b3e3ed01018d1c0698bbd82f51d18ad3c1e4" translate="yes" xml:space="preserve">
          <source>This method has been deprecated and will be removed in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96161489153be8796208732566c8a6f3921896df" translate="yes" xml:space="preserve">
          <source>This method is deprecated and will be removed in a future release. Please use &lt;a href=&quot;#falcon.routing.map_http_methods&quot;&gt;&lt;code&gt;map_http_methods()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#falcon.routing.map_http_methods&quot;&gt;&lt;code&gt;map_http_methods()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cd18be45da31ff2d32fa091b9fc5a197ecf3d2" translate="yes" xml:space="preserve">
          <source>This mixin class must appear before &lt;code&gt;HTTPError&lt;/code&gt; in the base class list when defining the child; otherwise, it will not override the &lt;code&gt;has_representation&lt;/code&gt; property as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6180722d18e73a8a5c55f85aed9d2bed0aaeaa87" translate="yes" xml:space="preserve">
          <source>This module provides utility functions to parse, encode, decode, and otherwise manipulate a URI. These functions are not available directly in the &lt;code&gt;falcon&lt;/code&gt; module, and so must be explicitly imported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1efc76481c003bbe435b715451a6bf56bd1be96" translate="yes" xml:space="preserve">
          <source>This operation will consume the request stream the first time it&amp;rsquo;s called and cache the results. Follow-up calls will just retrieve a cached version of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1355279adc09b08a5bf566a08dc757aa293bd7c9" translate="yes" xml:space="preserve">
          <source>This property is determined by the value of &lt;code&gt;REMOTE_ADDR&lt;/code&gt; in the WSGI environment dict. Since this address is not derived from an HTTP header, clients and proxies can not forge it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c9e0ec02ed118a193d716c52418291eb23388d" translate="yes" xml:space="preserve">
          <source>This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a &amp;ldquo;black hole&amp;rdquo; of redirection (e.g., a redirected URI prefix that points to a suffix of itself) or when the server is under attack by a client attempting to exploit potential security holes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02f0958ff93b5ce14d8ee29f8adf7d4415aa166" translate="yes" xml:space="preserve">
          <source>This response code allows the client to place preconditions on the current resource state (its current representations and metadata) and, thus, prevent the request method from being applied if the target resource is in an unexpected state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ed799c0a5556073d44f18ee9829382b62cf221" translate="yes" xml:space="preserve">
          <source>This status code is similar to 301 (Moved Permanently), except that it does not allow changing the request method from POST to GET.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb350f8840e12956cd2735dc6b2e5035c5e47b8" translate="yes" xml:space="preserve">
          <source>This status code is similar to 302 (Found), except that it does not allow changing the request method from POST to GET.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aade9c997727eb85db542b7b00d3954e70222e0" translate="yes" xml:space="preserve">
          <source>This time you should get back &lt;code&gt;405 Method Not Allowed&lt;/code&gt;, since the resource does not support the &lt;code&gt;PUT&lt;/code&gt; method. Note the value of the Allow header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8456960a933ab83810e07e09c95d3a5bebd3a81" translate="yes" xml:space="preserve">
          <source>This utility is faster in the average case than the similar &lt;code&gt;quote&lt;/code&gt; function found in &lt;code&gt;urlib&lt;/code&gt;. It also strives to be easier to use by assuming a sensible default of allowed characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7875c02ed00683a74753216d4257c015a1dcc582" translate="yes" xml:space="preserve">
          <source>This value will be URI encoded per RFC 3986. If the value that is being set is already URI encoded it should be decoded first or the header should be set manually using the set_header method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c65c066261de5a75c91cf877351767d694e4d8" translate="yes" xml:space="preserve">
          <source>This will be useful when creating a POST endpoint in the application that can add new image resources to our collection. We&amp;rsquo;ll tackle this functionality next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="3c2984e4e70e730cfc6f0babe984a2d9daaf48db" translate="yes" xml:space="preserve">
          <source>To avoid unnecessary overhead, Falcon will only process request media the first time the media property is referenced. Once it has been referenced, it&amp;rsquo;ll use the cached result for subsequent interactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cce23c468a4657925493b1b2f347fff376a18f0" translate="yes" xml:space="preserve">
          <source>To customize the error presentation, implement a custom error serializer and set it on the &lt;a href=&quot;api#falcon.API&quot;&gt;&lt;code&gt;API&lt;/code&gt;&lt;/a&gt; instance via &lt;a href=&quot;api#falcon.API.set_error_serializer&quot;&gt;&lt;code&gt;set_error_serializer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ee0411fa4ecb63785397e328d283cadcdbdf1e" translate="yes" xml:space="preserve">
          <source>To customize what data is passed to the serializer, subclass &lt;a href=&quot;#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; or any of its child classes, and override the &lt;a href=&quot;#falcon.HTTPError.to_dict&quot;&gt;&lt;code&gt;to_dict()&lt;/code&gt;&lt;/a&gt; method. To also support XML, override the &lt;a href=&quot;#falcon.HTTPError.to_xml&quot;&gt;&lt;code&gt;to_xml()&lt;/code&gt;&lt;/a&gt; method. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0858657dcd844dca6515f7700d7655e269dafc" translate="yes" xml:space="preserve">
          <source>To customize what data is passed to the serializer, subclass &lt;code&gt;HTTPError&lt;/code&gt; and override the &lt;code&gt;to_dict()&lt;/code&gt; method (&lt;code&gt;to_json()&lt;/code&gt; is implemented via &lt;code&gt;to_dict()&lt;/code&gt;). To also support XML, override the &lt;code&gt;to_xml()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d908b2d890e345b72f4d7418cd64ce389eaaefe5" translate="yes" xml:space="preserve">
          <source>To fix this, simply edit &lt;code&gt;app.py&lt;/code&gt; and pass in a path to the initializer. For now, just use the working directory from which you started the service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6d8d1c423b819dca1d426a146a15f3e2fbc463" translate="yes" xml:space="preserve">
          <source>To learn more about TDD, you may wish to check out one of the many books on the topic, such as &lt;a href=&quot;http://www.obeythetestinggoat.com/pages/book.html&quot;&gt;Test Driven Development with Python&lt;/a&gt;. The examples in this particular book use the Django framework and even JavaScript, but the author covers a number of testing principles that are widely applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b490dc41e827609d6d215c1ca260b9d2987d559" translate="yes" xml:space="preserve">
          <source>To learn more about setting cookies, see &lt;a href=&quot;cookies#setting-cookies&quot;&gt;Setting Cookies&lt;/a&gt;. The parameters listed below correspond to those defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a091be808a116ed42feee6115d09c997b7038bea" translate="yes" xml:space="preserve">
          <source>To make the new test pass, we need to add a new method for handling POSTs. Open &lt;code&gt;images.py&lt;/code&gt; and add a POST responder to the &lt;code&gt;Resource&lt;/code&gt; class as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f075b71ee1f0a8ecfc3079311dd870008c1fe75" translate="yes" xml:space="preserve">
          <source>To test this example go to the another terminal and run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaf408f108b958a95337a23ca8c8dc57fe72264" translate="yes" xml:space="preserve">
          <source>To work around this, RFC 3986 specifies &lt;code&gt;+&lt;/code&gt; as a reserved character, and recommends percent-encoding any such characters when their literal value is desired (&lt;code&gt;%2B&lt;/code&gt; in the case of &lt;code&gt;+&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b6df82bf73a656f50ab1e70b9c2eeacae1c6e9" translate="yes" xml:space="preserve">
          <source>Try executing the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec61eef14ea59a4d5b0288e2be9ae99fdbcdff2e" translate="yes" xml:space="preserve">
          <source>Try running the tests again. This time, they should pass with flying colors!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="77dbbe969278a4a76b3a545f1daaf93d087e2ea8" translate="yes" xml:space="preserve">
          <source>URI Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c179ef01c2467c00442c91909f98b2587e0440" translate="yes" xml:space="preserve">
          <source>URI utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d281ac63b121ed81137d88b2854573c7464a22" translate="yes" xml:space="preserve">
          <source>URLs provide a way for the client to uniquely identify resources. For example, &lt;code&gt;/players&lt;/code&gt; might identify the &amp;ldquo;list of all players&amp;rdquo; resource, while &lt;code&gt;/players/45301f54&lt;/code&gt; might identify the &amp;ldquo;individual player with ID 45301f54&amp;rdquo;, and &lt;code&gt;/players/45301f54/achievements&lt;/code&gt; the &amp;ldquo;list of all achievements for the player resource with ID 45301f54&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bf75a5255af008f6315cb6aca4bb3bdccee521" translate="yes" xml:space="preserve">
          <source>UUID</source>
          <target state="translated">UUID</target>
        </trans-unit>
        <trans-unit id="36551329945cf2d4f69f47a2e48542b71242727a" translate="yes" xml:space="preserve">
          <source>Under Python 2.x, if your content is of type &lt;code&gt;str&lt;/code&gt;, using the &lt;code&gt;data&lt;/code&gt; attribute instead of &lt;code&gt;body&lt;/code&gt; is the most efficient approach. However, if your text is of type &lt;code&gt;unicode&lt;/code&gt;, you will need to use the &lt;code&gt;body&lt;/code&gt; attribute instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9186b62f6629cc54aaec261451fff3551169042c" translate="yes" xml:space="preserve">
          <source>Under Python 3.x, on the other hand, the 2.x &lt;code&gt;str&lt;/code&gt; type can be thought of as having been replaced by what was once the &lt;code&gt;unicode&lt;/code&gt; type, and so you will need to always use the &lt;code&gt;body&lt;/code&gt; attribute for strings to ensure Unicode characters are properly encoded in the HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf36c74e851db7c2ce95b5900cf8acc21ac10271" translate="yes" xml:space="preserve">
          <source>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;ldquo;AS IS&amp;rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a017948c567109be5608efb518882e99231cb44b" translate="yes" xml:space="preserve">
          <source>Unlike hooks, middleware methods apply globally to the entire API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075a6caa06099c7bf3a201c8df9d83db7ce42ff4" translate="yes" xml:space="preserve">
          <source>Unquote an RFC 7320 &amp;ldquo;quoted-string&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a55d91487d32e499d29801011e31507f72db23" translate="yes" xml:space="preserve">
          <source>Unset a cookie in the response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b022fd4205d3b503a70e035a72eceb5222b065" translate="yes" xml:space="preserve">
          <source>Untrusted input (i.e., input from an external client or service) is validated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aaf33dc6b1c08e0c1fed0611853aa50c296bc3b" translate="yes" xml:space="preserve">
          <source>Upward and onward!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="608e04c768061d38c80d1a3e6baed1d4408e88f8" translate="yes" xml:space="preserve">
          <source>Use this attribute in lieu of &lt;code&gt;body&lt;/code&gt; when your content is already a byte string (&lt;code&gt;str&lt;/code&gt; or &lt;code&gt;bytes&lt;/code&gt; in Python 2, or simply &lt;code&gt;bytes&lt;/code&gt; in Python 3). See also the note below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c8541b4996920925216f70917012d01caf9531" translate="yes" xml:space="preserve">
          <source>Used to set a list of cache directives to use as the value of the Cache-Control header. The list will be joined with &amp;ldquo;, &amp;rdquo; to produce the value for the header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec249e659662f7d5947bf09a1ea1d4a552885b0" translate="yes" xml:space="preserve">
          <source>User Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b4114eb22e4012955db64bea630b07e5787029" translate="yes" xml:space="preserve">
          <source>User agent interfaces do not always isolate cookies by path, and so this should not be considered an effective security measure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0650ef3acb809d5f2ed8947cb6731fe8a5590c01" translate="yes" xml:space="preserve">
          <source>Using sinks, you can drain and dynamically handle a large number of routes, when creating static resources and responders would be impractical. For example, you might use a sink to create a smart proxy that forwards requests to one or more backend services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7154685c0e27d59e31175c4d54067b392382c507" translate="yes" xml:space="preserve">
          <source>Using these constants helps avoid typos and cuts down on the number of string objects that must be created when preparing responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="e33c0f237d7f92d0c9d5cdf68a91fab5acef1a35" translate="yes" xml:space="preserve">
          <source>Validating Media</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58877aa135af87c6152d35bec12d56ac77317795" translate="yes" xml:space="preserve">
          <source>Value to use for the Vary header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7fda5d092b0a9b1af3f0f496ee105b32f8db7e" translate="yes" xml:space="preserve">
          <source>WSGI Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="921f206c14d5e5353fc2466ffd92e059e0b949a3" translate="yes" xml:space="preserve">
          <source>We call these well-known methods &amp;ldquo;responders&amp;rdquo;. Each responder takes (at least) two params, one representing the HTTP request, and one representing the HTTP response to that request. By convention, these are called &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;resp&lt;/code&gt;, respectively. Route templates and hooks can inject extra params, as we shall see later on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed54f7acdf60b84dde096f38150eef60d5a84539" translate="yes" xml:space="preserve">
          <source>We can break this down into three resources:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c1278fd3553d645ff750d02cd067ccb361bc86" translate="yes" xml:space="preserve">
          <source>We designed Falcon to support the demanding needs of large-scale microservices and responsive app backends. Falcon complements more general Python web frameworks by providing bare-metal performance, reliability, and flexibility wherever you need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea9a6603619cf677fb68f11cd2fadad2c8ffe66" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll start by factoring out the business logic from the resource&amp;rsquo;s POST responder in &lt;code&gt;images.py&lt;/code&gt; so that it can be tested independently. In this case, the resource&amp;rsquo;s &amp;ldquo;business logic&amp;rdquo; is simply the image-saving operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c37380f9bc00d7afaf107ed7f9050e1280832f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll use TDD this time around, to demonstrate how to apply this particular testing strategy when developing a Falcon application. Via tests, we&amp;rsquo;ll first define precisely what we want the application to do, and then code until the tests tell us that we&amp;rsquo;re done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b149bbb13ee375cda12062f4a351f9bf2dd2c4f1" translate="yes" xml:space="preserve">
          <source>What Now?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc23e9126d4d3ffedcd374faff18887fd6788e1" translate="yes" xml:space="preserve">
          <source>What People are Saying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c315f7351633a034058ba60fbe5d0afe8e89e2c" translate="yes" xml:space="preserve">
          <source>What is the recommended approach for making configuration variables available to multiple resource classes?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c342921f40fd555419aabc1a30de71e798639647" translate="yes" xml:space="preserve">
          <source>What is the recommended way to map related routes to resource classes?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c7c16081c6f6c86d432287d2502f004f405047" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/api#falcon.RequestOptions.auto_parse_qs_csv&quot;&gt;&lt;code&gt;auto_parse_qs_csv&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;, the value of the query string &lt;code&gt;?c={'a':1,'b':2}&lt;/code&gt; will be added to the &lt;code&gt;req.params&lt;/code&gt; dictionary as &lt;code&gt;{'c': &quot;{'a':1,'b':2}&quot;}&lt;/code&gt;. This lets you consume JSON whether or not the client chooses to escape commas in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146da74fd2f2c5dff41da45caec5d2b12c5afe1f" translate="yes" xml:space="preserve">
          <source>When a responder raises an instance of &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;, Falcon converts it to an HTTP response automatically. The default serializer supports JSON and XML, but may be overridden by this method to use a custom serializer in order to support other media types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10698d1d5e916886e696ed0ff1baf39f1a9692a" translate="yes" xml:space="preserve">
          <source>When a route can not be found for an incoming request, Falcon uses a default responder that simply raises an instance of &lt;a href=&quot;../api/errors#falcon.HTTPNotFound&quot;&gt;&lt;code&gt;falcon.HTTPNotFound&lt;/code&gt;&lt;/a&gt;. You can use &lt;a href=&quot;../api/api#falcon.API.add_error_handler&quot;&gt;&lt;code&gt;falcon.API.add_error_handler()&lt;/code&gt;&lt;/a&gt; to register a custom error handler for this exception type. Alternatively, you may be able to configure your web server to transform the response for you (e.g., using Nginx&amp;rsquo;s &lt;code&gt;error_page&lt;/code&gt; directive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68822bf6a4714306a0c114035505efd0246cf116" translate="yes" xml:space="preserve">
          <source>When creating your API object you can either add or completely replace all of the handlers. For example, lets say you want to write an API that sends and receives MessagePack. We can easily do this by telling our Falcon API that we want a default media-type of &lt;code&gt;application/msgpack&lt;/code&gt; and then create a new &lt;a href=&quot;#falcon.media.Handlers&quot;&gt;&lt;code&gt;Handlers&lt;/code&gt;&lt;/a&gt; object specifying the desired media type and a handler that can process that data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca97a77a11943662f4fa8b170359d5482b8d461" translate="yes" xml:space="preserve">
          <source>When it comes to API documentation, some developers prefer to use the API implementation as the user contract or source of truth (taking an implementation-first approach), while other developers prefer to use the API spec itself as the contract, implementing and testing the API against that spec (taking a design-first approach).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e28b8953f401936ecb44577cd982868d1d8bb4" translate="yes" xml:space="preserve">
          <source>When it comes to building HTTP APIs, other frameworks weigh you down with tons of dependencies and unnecessary abstractions. Falcon cuts to the chase with a clean design that embraces HTTP and the REST architectural style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba93f2b287f4dfe3bc7fb2254181d43cea8c316" translate="yes" xml:space="preserve">
          <source>When it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the &lt;code&gt;resp&lt;/code&gt; object. However, Falcon tries to make things a little easier by providing a &lt;a href=&quot;../api/errors#predefined-errors&quot;&gt;set of error classes&lt;/a&gt; you can raise when something goes wrong. Falcon will convert any instance or subclass of &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;falcon.HTTPError&lt;/code&gt;&lt;/a&gt; raised by a responder, hook, or middleware component into an appropriate HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e2c6591d99f44113c21ad6fa99ab0edeb6afab" translate="yes" xml:space="preserve">
          <source>When it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the &lt;code&gt;resp&lt;/code&gt; object. However, Falcon tries to make things a little easier by providing a set of error classes you can raise when something goes wrong. All of these classes inherit from &lt;a href=&quot;#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2097a1d2d83b753e8f269d9b3a67ee85da8e241" translate="yes" xml:space="preserve">
          <source>When overriding &lt;code&gt;context_type&lt;/code&gt; with a factory function (as opposed to a class), the function is called like a method of the current Request instance. Therefore the first argument is the Request instance itself (self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e22b5c366357a57be3445e205c88d270af1bff" translate="yes" xml:space="preserve">
          <source>When overriding &lt;code&gt;context_type&lt;/code&gt; with a factory function (as opposed to a class), the function is called like a method of the current Response instance. Therefore the first argument is the Response instance itself (self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccb41c7ebb828d3737b32ee0de7a373beeecd82" translate="yes" xml:space="preserve">
          <source>When running your application in a development environment, you can disable this default behavior by setting &lt;a href=&quot;api#falcon.ResponseOptions.secure_cookies_by_default&quot;&gt;&lt;code&gt;secure_cookies_by_default&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; via &lt;a href=&quot;api#falcon.API.resp_options&quot;&gt;&lt;code&gt;API.resp_options&lt;/code&gt;&lt;/a&gt;. This lets you test your app locally without having to set up TLS. You can make this option configurable to easily switch between development and production environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16af961f30779e3c118487082703c9712f8795e4" translate="yes" xml:space="preserve">
          <source>When something goes wrong, you usually want to give your users some info to help them resolve the issue. The exception to this rule is when an error occurs because the user is requested something they are not authorized to access. In that case, you may wish to simply return &lt;code&gt;404 Not Found&lt;/code&gt; with an empty body, in case a malicious user is fishing for information that will help them crack your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aed7f61912114b0a68bae7e0c831a33fc6ecfd" translate="yes" xml:space="preserve">
          <source>When this option is enabled, the request&amp;rsquo;s body stream will be left at EOF. The original data is not retained by the framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645cb66a61c738cb5427f46a7100d0e53aa4d1ab" translate="yes" xml:space="preserve">
          <source>When using a data access layer, simply pass the engine into your data access objects instead. See also &lt;a href=&quot;https://github.com/jmvrbanac/falcon-example&quot;&gt;this sample Falcon project&lt;/a&gt; that demonstrates using an ORM with Falcon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9528403cfffd1324ef25630afc7cff183293f431" translate="yes" xml:space="preserve">
          <source>When using the above approach, OPTIONS requests must also be special-cased in any other middleware or hooks you use for auth, content-negotiation, etc. For example, you will typically skip auth for preflight requests because it is simply unnecessary; note that such request do not include the Authorization header in any case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22af9b191ecdcaf8063a1cd60db2ca2f0b4c8578" translate="yes" xml:space="preserve">
          <source>When using this format, all commas uri-encoded will not be treated by Falcon as a delimiter. If the client wants to send a value as a list, it must not encode the commas with the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40baddaa5c88f3019ba49dcb2fe16c3eb9b08fc" translate="yes" xml:space="preserve">
          <source>While curl certainly gets the job done, it can be a bit crufty to use. &lt;a href=&quot;https://github.com/jkbr/httpie&quot;&gt;HTTPie&lt;/a&gt; is a modern, user-friendly alternative. Let&amp;rsquo;s install HTTPie and use it from now on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cb97c392a99daad01e60de73a0ba6de2e7eea7" translate="yes" xml:space="preserve">
          <source>Who&amp;rsquo;s Using Falcon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cd5fbcd56d7cb5a299305ead356cd06a6166b3" translate="yes" xml:space="preserve">
          <source>Why are &amp;lsquo;+&amp;rsquo; characters in my params being converted to spaces?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8096d5fab46a9a3d03316c3614ac42daeab5daa2" translate="yes" xml:space="preserve">
          <source>Why are trailing slashes trimmed from req.path?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74b9e055e78884c7a0ea3a19e2b6cf35a53bfd6" translate="yes" xml:space="preserve">
          <source>Why does raising an error inside a resource crash my app?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eabbff5f4a5b1f6242cffdb031389507269c20" translate="yes" xml:space="preserve">
          <source>Why does req.stream.read() hang for certain requests?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c571bf6f6d76aa4b97a767b6085981a5a49f539c" translate="yes" xml:space="preserve">
          <source>Why doesn&amp;rsquo;t Falcon come with batteries included?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3ff26f23d68d00ada68e3cf74f6794e88ebada" translate="yes" xml:space="preserve">
          <source>Why doesn&amp;rsquo;t Falcon create a new Resource instance for every request?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9032619c9647c23f488136bb9afcbc39b0b13b0f" translate="yes" xml:space="preserve">
          <source>Why is an empty response body returned when I raise an instance of HTTPError?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddb9245cca26f6459be92a0fff734ff5fb0b688" translate="yes" xml:space="preserve">
          <source>Why is my query parameter missing from the req object?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37905a6478159e9e621100e9148b19c3cccf280" translate="yes" xml:space="preserve">
          <source>With test helpers such as &lt;code&gt;simulate_get()&lt;/code&gt; and &lt;code&gt;simulate_post()&lt;/code&gt;, we can create tests that span multiple units. But we can also go one step further and run the application as a normal, separate process (e.g. with Gunicorn). We can then write tests that interact with the running process through HTTP, behaving like a normal client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ccd517ee9f09422d29e269708c0d6b789bedaa" translate="yes" xml:space="preserve">
          <source>With the latter approach, to control when the config is actually loaded, it&amp;rsquo;s best not to instantiate it at the top level of the config module&amp;rsquo;s namespace. This avoids any problematic side-effects that may be caused by loading the config whenever Python happens to process the first import of the config module. Instead, consider implementing a function in the module that returns a new or cached config object on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e301725039830fd5643f844501d991e2bfcf65f0" translate="yes" xml:space="preserve">
          <source>Works great with async libraries like gevent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf378e8acef00c8d6949f4d777fbf1a330ec53e" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;#falcon.testing.simulate_request&quot;&gt;&lt;code&gt;falcon.testing.simulate_request()&lt;/code&gt;&lt;/a&gt; to perform a WSGI request directly against &lt;code&gt;self.app&lt;/code&gt;. Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630f5f95d6ec652e020b684565b2492cfb456439" translate="yes" xml:space="preserve">
          <source>Write an error message to the server&amp;rsquo;s log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dbb48f79311b945d143d6838d8a92702053301" translate="yes" xml:space="preserve">
          <source>Xcode Command Line Tools are required to compile Cython. Install them with this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60f75a250258dedcf5016aa5cc04c550b8f8a79" translate="yes" xml:space="preserve">
          <source>You can also create a middleware component to automatically check out database connections for each request, but this can make it harder to track down errors, or to tune for the needs of individual requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980a90aa68dc0e276f956287011d35fe5c025d46" translate="yes" xml:space="preserve">
          <source>You can also instruct the client to remove a cookie with the &lt;a href=&quot;request_and_response#falcon.Response.unset_cookie&quot;&gt;&lt;code&gt;unset_cookie()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14a2d35bb07bdbd0f3e8b7418efbcaa540d26c7" translate="yes" xml:space="preserve">
          <source>You can implement this sort of API by simply using two Python classes, one to represent a single resource, and another to represent the collection of said resources. It is common to place both classes in the same module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f735d8674e2de5cfcdbdf00cd9e9f855b2ed552" translate="yes" xml:space="preserve">
          <source>You can inject extra responder kwargs from a hook by adding them to the &lt;em&gt;params&lt;/em&gt; dict passed into the hook. You can also add custom data to the &lt;code&gt;req.context&lt;/code&gt; dict, as a way of passing contextual information around.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536278b7175149e76eeaaf6ea6df40dd2dce2ae6" translate="yes" xml:space="preserve">
          <source>You can manually test changes to the Falcon framework by switching to the directory of the cloned repo and then running pytest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9d37c044435ad9485949c1e5b3271834115f1f" translate="yes" xml:space="preserve">
          <source>You can of course also set the domain, path and lifetime of the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8213796246cc13c7a664c2b4cff5b6ee3472e803" translate="yes" xml:space="preserve">
          <source>You can run the above example using any WSGI server, such as uWSGI or Gunicorn. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fb6ff96745c5f1646439add75c67fd70380190" translate="yes" xml:space="preserve">
          <source>You can use this mixin when defining errors that either should not have a body (as dictated by HTTP standards or common practice), or in the case that a detailed error response may leak information to an attacker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1f3825ed9f85c82ca1095819f6834f45037bed" translate="yes" xml:space="preserve">
          <source>You may raise an instance of &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;falcon.HTTPError&lt;/code&gt;&lt;/a&gt; directly, or use any one of a number of &lt;a href=&quot;../api/errors#predefined-errors&quot;&gt;predefined errors&lt;/a&gt; that are designed to set the response headers and body appropriately for each error type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab748215e4a08b84f6e6d239604cb6df099862e" translate="yes" xml:space="preserve">
          <source>You might also like to view our &lt;a href=&quot;https://github.com/falconry/falcon/wiki/Add-on-Catalog&quot;&gt;Add-on Catalog&lt;/a&gt;, where you can find a list of add-ons maintained by the community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68093482c3d1393ed1022814b68c7d5988e22976" translate="yes" xml:space="preserve">
          <source>You might also see warnings about unused functions. You can work around these issues by setting additional Clang C compiler flags as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef956ed2f1ddeb4894205c896971bcbe1375f7a" translate="yes" xml:space="preserve">
          <source>You might also try this &lt;a href=&quot;https://streaming-form-data.readthedocs.io/en/latest/&quot;&gt;streaming_form_data&lt;/a&gt; package by Siddhant Goel, or searching PyPI for additional options from the community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b49ad2a5fe6075b147d65ca4f46f01b010b179" translate="yes" xml:space="preserve">
          <source>You only need to use the alternate form, &amp;lsquo;bytes */1234&amp;rsquo;, for responses that use the status &amp;lsquo;416 Range Not Satisfiable&amp;rsquo;. In this case, raising &lt;code&gt;falcon.HTTPRangeNotSatisfiable&lt;/code&gt; will do the right thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f91513fb63afe28b5cce9c48866fa360096281f" translate="yes" xml:space="preserve">
          <source>You should get a 404. That&amp;rsquo;s actually OK, because we haven&amp;rsquo;t specified any routes yet. Falcon includes a default 404 response handler that will fire for any requested path for which a route does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6ad4a9c30834116292de2f74b288644dff911e" translate="yes" xml:space="preserve">
          <source>You should get back a &lt;code&gt;400 Bad Request&lt;/code&gt; status and a nicely structured error body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d979d8dddb74508a627a3baf2396ea37f146b1ad" translate="yes" xml:space="preserve">
          <source>You should now be able to re-run the test and see it succeed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceea30f0f00a45ae419f410e484e1a6f06df365d" translate="yes" xml:space="preserve">
          <source>You should receive a &lt;code&gt;200 OK&lt;/code&gt; response, including a JSON-encoded representation of the &amp;ldquo;images&amp;rdquo; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f6e1d28afc0ac0212f6101df094b071181e3e2" translate="yes" xml:space="preserve">
          <source>You should see a &lt;code&gt;TypeError&lt;/code&gt; as a consequence of adding the &lt;code&gt;storage_path&lt;/code&gt; parameter to &lt;code&gt;Resource.__init__()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126a3300d6835c9b340758a88a9d1da96964ce06" translate="yes" xml:space="preserve">
          <source>You would attach this hook to an &lt;code&gt;on_post&lt;/code&gt; responder like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387a0f004258ddb8e71a64032869344bad02674e" translate="yes" xml:space="preserve">
          <source>Your code is well-tested, with high code coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606b3dcbbd39e2bb17d50bbae4ee2319f70ce136" translate="yes" xml:space="preserve">
          <source>Zero configuration is needed if you&amp;rsquo;re creating a JSON API. Just access or set the &lt;code&gt;media&lt;/code&gt; attribute as appropriate and let Falcon do the heavy lifting for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5aee47bb3c6f19c802da6b38b1b64eb80952a94" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;#falcon.testing.StartResponseMock&quot;&gt;&lt;code&gt;StartResponseMock&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c56758791cb43e65ce47a0c133ae3cbe2c21a7" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29a4e6f49c8665e526a59be66fd37b7baee710d" translate="yes" xml:space="preserve">
          <source>alias of &lt;code&gt;API&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5039d155a71c0a5f7a2b2654ad49cb7ee47a8980" translate="yes" xml:space="preserve">
          <source>bool</source>
          <target state="translated">bool</target>
        </trans-unit>
        <trans-unit id="daf529a73101c2be626b99fc6938163e7a27620b" translate="yes" xml:space="preserve">
          <source>bytes</source>
          <target state="translated">bytes</target>
        </trans-unit>
        <trans-unit id="de9c72801733194831e17b9b87aa8e6dbdefbeae" translate="yes" xml:space="preserve">
          <source>can not be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c262eb1a29fe5bc38ddeb9c0ee8a09151aa79da6" translate="yes" xml:space="preserve">
          <source>captured_kwargs</source>
          <target state="translated">captured_kwargs</target>
        </trans-unit>
        <trans-unit id="48511e86b4ad8da546c40fcc260597bc3c691395" translate="yes" xml:space="preserve">
          <source>captured_req</source>
          <target state="translated">captured_req</target>
        </trans-unit>
        <trans-unit id="5b8e028110db1e1db225fff0a866cc0279233287" translate="yes" xml:space="preserve">
          <source>captured_resp</source>
          <target state="translated">captured_resp</target>
        </trans-unit>
        <trans-unit id="89ffad089c042f31dcc81269da38bef3ca44ab1f" translate="yes" xml:space="preserve">
          <source>datetime</source>
          <target state="translated">datetime</target>
        </trans-unit>
        <trans-unit id="e6efbb61348f24afba1c8ddd30d2ad8be7bcb213" translate="yes" xml:space="preserve">
          <source>datetime.date</source>
          <target state="translated">datetime.date</target>
        </trans-unit>
        <trans-unit id="53910fb46a116dbf1909866b879783e783b61217" translate="yes" xml:space="preserve">
          <source>datetime.datetime</source>
          <target state="translated">datetime.datetime</target>
        </trans-unit>
        <trans-unit id="3f0104c3ae690c900897cfff32dcdbbb5ba029cd" translate="yes" xml:space="preserve">
          <source>datetime.timedelta</source>
          <target state="translated">datetime.timedelta</target>
        </trans-unit>
        <trans-unit id="76e94348139b788d21edc7b9cd011af238d0de03" translate="yes" xml:space="preserve">
          <source>dict</source>
          <target state="translated">dict</target>
        </trans-unit>
        <trans-unit id="4f7f64c1613218412d7173f07c7407d18b5776a8" translate="yes" xml:space="preserve">
          <source>e.g.:</source>
          <target state="translated">e.g.:</target>
        </trans-unit>
        <trans-unit id="c590afa9bb59191ffab30f223791e82d3fd3e3af" translate="yes" xml:space="preserve">
          <source>falcon</source>
          <target state="translated">falcon</target>
        </trans-unit>
        <trans-unit id="d3ef3ca87c676fc4d7094450194cbf2fa0164ba8" translate="yes" xml:space="preserve">
          <source>falcon.API</source>
          <target state="translated">falcon.API</target>
        </trans-unit>
        <trans-unit id="00f06f73e37d07abc785f9701f81e7470745dd8d" translate="yes" xml:space="preserve">
          <source>falcon.http_error</source>
          <target state="translated">falcon.http_error</target>
        </trans-unit>
        <trans-unit id="3c21b206aadf450b92be33de294904f14a908d0f" translate="yes" xml:space="preserve">
          <source>falcon.media</source>
          <target state="translated">falcon.media</target>
        </trans-unit>
        <trans-unit id="2f1a5b71245f7ce590c3bf1a51bcc88f0b0b3c56" translate="yes" xml:space="preserve">
          <source>falcon.media.validators.jsonschema</source>
          <target state="translated">falcon.media.validators.jsonschema</target>
        </trans-unit>
        <trans-unit id="d5f6b3e61b8a2197513182e229f1b062f0871556" translate="yes" xml:space="preserve">
          <source>falcon.routing</source>
          <target state="translated">falcon.routing</target>
        </trans-unit>
        <trans-unit id="ee982cec8deb0cb1c68ef3bd0c3236199acd49bf" translate="yes" xml:space="preserve">
          <source>falcon.testing</source>
          <target state="translated">falcon.testing</target>
        </trans-unit>
        <trans-unit id="a5667ba70a60a487e5b0a1f2d9e999c755e4263b" translate="yes" xml:space="preserve">
          <source>falcon.uri</source>
          <target state="translated">falcon.uri</target>
        </trans-unit>
        <trans-unit id="46f8ab7c0cff9df7cd124852e26022a6bf89e315" translate="yes" xml:space="preserve">
          <source>int</source>
          <target state="translated">int</target>
        </trans-unit>
        <trans-unit id="d30dbe0537c2c09dfccbe31c864115a796a2aba7" translate="yes" xml:space="preserve">
          <source>it was required to be there, or it was found but could not be converted to a &lt;code&gt;UUID&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d81c4df317bfab85f65c9f2994992354bc6b6d5" translate="yes" xml:space="preserve">
          <source>it was required to be there, or it was found but could not be converted to an &lt;code&gt;int&lt;/code&gt;. Also raised if the param&amp;rsquo;s value falls outside the given interval, i.e., the value must be in the interval: min &amp;lt;= value &amp;lt;= max to avoid triggering an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b62be4bddaa5661c7d6b8e36e28159314df5c7" translate="yes" xml:space="preserve">
          <source>list</source>
          <target state="translated">list</target>
        </trans-unit>
        <trans-unit id="1615307cc4523f183e777df67f168c86908e8007" translate="yes" xml:space="preserve">
          <source>object</source>
          <target state="translated">object</target>
        </trans-unit>
        <trans-unit id="a454c3eeb05372d65db8974663884adbcdfe0e0b" translate="yes" xml:space="preserve">
          <source>status code e.g. &amp;ldquo;404 Not Found&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3442496b96dd01591a8cd44b1eec1368ab728aba" translate="yes" xml:space="preserve">
          <source>str</source>
          <target state="translated">str</target>
        </trans-unit>
        <trans-unit id="91a58bbf6422870801d8bf676712611df0dc19ca" translate="yes" xml:space="preserve">
          <source>tempfil.es</source>
          <target state="translated">tempfil.es</target>
        </trans-unit>
        <trans-unit id="49f80ea5aacfb5a957337dc906635fccbde446fc" translate="yes" xml:space="preserve">
          <source>tuple</source>
          <target state="translated">tuple</target>
        </trans-unit>
        <trans-unit id="65fab00dbe412afe5b428b51f6d5d3c7bfccb378" translate="yes" xml:space="preserve">
          <source>unquoted string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7013f74e318b89f5559deba7d2dc1e1ab3b9d133" translate="yes" xml:space="preserve">
          <source>with redirected(stderr=os.devnull):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31aecd6741069fc1fdae0e4eb1c2a4bd36357d36" translate="yes" xml:space="preserve">
          <source>with this:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
