<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="vue_router">
    <body>
      <group id="vue_router">
        <trans-unit id="bbc943a2e601e6b13b22293e246af47a7e54b1bd" translate="yes" xml:space="preserve">
          <source>$route</source>
          <target state="translated">$route</target>
        </trans-unit>
        <trans-unit id="ae47c41f673b2d58768b8be64b33f63e643a81b0" translate="yes" xml:space="preserve">
          <source>$route.fullPath</source>
          <target state="translated">$route.fullPath</target>
        </trans-unit>
        <trans-unit id="bd933596293770a6a74175a52ae61bad2c0805eb" translate="yes" xml:space="preserve">
          <source>$route.hash</source>
          <target state="translated">$route.hash</target>
        </trans-unit>
        <trans-unit id="1b2f0bcf5085a69565f7f3dd9b2669dccab0aedd" translate="yes" xml:space="preserve">
          <source>$route.matched</source>
          <target state="translated">$route.matched</target>
        </trans-unit>
        <trans-unit id="2dcfeb60738fd374f4147229df77d39ff75b2dee" translate="yes" xml:space="preserve">
          <source>$route.name</source>
          <target state="translated">$route.name</target>
        </trans-unit>
        <trans-unit id="2ef5c591965bcc329c5ebc1dfcb687114f817e1e" translate="yes" xml:space="preserve">
          <source>$route.params</source>
          <target state="translated">$route.params</target>
        </trans-unit>
        <trans-unit id="a32363633914d08a7464643f6fd716fb4787a5a1" translate="yes" xml:space="preserve">
          <source>$route.path</source>
          <target state="translated">$route.path</target>
        </trans-unit>
        <trans-unit id="356305ca6d453ad02b108afe16317e19fef48b63" translate="yes" xml:space="preserve">
          <source>$route.query</source>
          <target state="translated">$route.query</target>
        </trans-unit>
        <trans-unit id="fb7ea86b30882f9789be7514b521bc39b211fc50" translate="yes" xml:space="preserve">
          <source>$route.redirectedFrom</source>
          <target state="translated">$route.redirectedFrom</target>
        </trans-unit>
        <trans-unit id="e2b54aaf637a706167ffdbc58bf59fe6f6ebb14c" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2013&amp;ndash;present Evan You</source>
          <target state="translated">&amp;copy;2013&amp;ndash;present Evan You</target>
        </trans-unit>
        <trans-unit id="17056c6f3b828e55a0714e10813195205ded5f4a" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt;</source>
          <target state="translated">&amp;lt;router-link&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9e5f35bd4b348475e6427871362480610fedb18d" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `active-class` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `active-class`プロップ</target>
        </trans-unit>
        <trans-unit id="0919d275fffa1249415d2c149b2fcf4833a87845" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `append` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `append`プロップ</target>
        </trans-unit>
        <trans-unit id="8e5bcf9a8806af0c5517632e7a22fc8c6b301e4e" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `event` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `event`プロップ</target>
        </trans-unit>
        <trans-unit id="64256a593489293bc997bac113451c603807527c" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `exact-active-class` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `exact-active-class`プロップ</target>
        </trans-unit>
        <trans-unit id="dcacc42c9c63ee714569aa3e93438661925b20a6" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `exact` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `exact`プロップ</target>
        </trans-unit>
        <trans-unit id="62a59864940863d5f5f310c91b2015056dcfe20d" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `replace` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `replace`プロップ</target>
        </trans-unit>
        <trans-unit id="17c934050ccdd19eab898c5be992e0f077075433" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `tag` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `tag`プロップ</target>
        </trans-unit>
        <trans-unit id="62afbd0360009766d040dcd101d2ac55aad87577" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `to` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `to`プロップ</target>
        </trans-unit>
        <trans-unit id="b717f260fbb5dd71166ff6f87fc04bafa674fdeb" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-view&amp;gt;</source>
          <target state="translated">&amp;lt;router-view&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4917556424377e1bac5bec47f7e51fcce47c92c8" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-view&amp;gt; `name` prop</source>
          <target state="translated">&amp;lt;router-view&amp;gt; `name`プロップ</target>
        </trans-unit>
        <trans-unit id="d980089e856205bcec5547594f80529b4bb2dbf4" translate="yes" xml:space="preserve">
          <source>/user/:username</source>
          <target state="translated">/user/:username</target>
        </trans-unit>
        <trans-unit id="8e473671079d8bf355ffb5aeaa2520e6e19a39c5" translate="yes" xml:space="preserve">
          <source>/user/:username/post/:post_id</source>
          <target state="translated">/user/:username/post/:post_id</target>
        </trans-unit>
        <trans-unit id="3e68ca614f1e2a458bd8cee024e17ec781d46d7f" translate="yes" xml:space="preserve">
          <source>/user/evan</source>
          <target state="translated">/user/evan</target>
        </trans-unit>
        <trans-unit id="8355ca333b10656272c592da956843def0d8c9b8" translate="yes" xml:space="preserve">
          <source>/user/evan/post/123</source>
          <target state="translated">/user/evan/post/123</target>
        </trans-unit>
        <trans-unit id="a3c37385e6b17ff0279b3d5ab84993b537814527" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;guide/index&quot;&gt;Get started&lt;/a&gt; or play with the &lt;a href=&quot;https://github.com/vuejs/vue-router/tree/dev/examples&quot;&gt;examples&lt;/a&gt; (see &lt;a href=&quot;https://github.com/vuejs/vue-router/&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; to run them).</source>
          <target state="translated">&lt;a href=&quot;guide/index&quot;&gt;始めましょう&lt;/a&gt;か、&lt;a href=&quot;https://github.com/vuejs/vue-router/tree/dev/examples&quot;&gt;例で&lt;/a&gt;遊んでください（それらを実行するには、&lt;a href=&quot;https://github.com/vuejs/vue-router/&quot;&gt; &lt;code&gt;README.md&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="5f568f5d151a701cff64bbb17fc3099dac774ab9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; provides npm-based CDN links. The above link will always point to the latest release on npm. You can also use a specific version/tag via URLs like &lt;code&gt;https://unpkg.com/vue-router@2.0.0/dist/vue-router.js&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt;は、npmベースのCDNリンクを提供します。上記のリンクは常にnpmの最新リリースを指します。 &lt;code&gt;https://unpkg.com/vue-router@2.0.0/dist/vue-router.js&lt;/code&gt; のようなURLを介して特定のバージョン/タグを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="adc059da745e5ec5d6cb942898d0e5f4e41769a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://vuejs.org/guide/transitions.html&quot;&gt;All transition APIs&lt;/a&gt; work the same here.</source>
          <target state="translated">&lt;a href=&quot;https://vuejs.org/guide/transitions.html&quot;&gt;ここではすべての移行API&lt;/a&gt;が同じように機能します。</target>
        </trans-unit>
        <trans-unit id="ee5023e7150c1db9bd8af9a146a524ca3c97c6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; Props</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 小道具</target>
        </trans-unit>
        <trans-unit id="fcb64e7180cfede93521de20cc5070e7faf2f0d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; is preferred over hard-coded &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; for the following reasons:</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; は、次の理由により、ハードコードされた &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="391a8cb2c3e0dcdc37873698e88d0be707ba1503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; is the component for enabling user navigation in a router-enabled app. The target location is specified with the &lt;code&gt;to&lt;/code&gt; prop. It renders as an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag with correct &lt;code&gt;href&lt;/code&gt; by default, but can be configured with the &lt;code&gt;tag&lt;/code&gt; prop. In addition, the link automatically gets an active CSS class when the target route is active.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; は、ルーター対応アプリでユーザーナビゲーションを有効にするためのコンポーネントです。ターゲットの場所は &lt;code&gt;to&lt;/code&gt; プロパティで指定されます。デフォルトでは正しい &lt;code&gt;href&lt;/code&gt; を持つ &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグとしてレンダリングされますが、 &lt;code&gt;tag&lt;/code&gt; propを使用して構成できます。さらに、ターゲットルートがアクティブな場合、リンクは自動的にアクティブなCSSクラスを取得します。</target>
        </trans-unit>
        <trans-unit id="751d371787cc9b4f7b424a9cbedecf5d396458eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; Props</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 小道具</target>
        </trans-unit>
        <trans-unit id="aa40192fa2b6ce9811978688ea693865c7a66fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nav&lt;/code&gt; is just a regular component</source>
          <target state="translated">&lt;code&gt;Nav&lt;/code&gt; は単なる通常のコンポーネントです</target>
        </trans-unit>
        <trans-unit id="d4d4da5b1052cfaa8e18ae6636b0a0bdb2226cf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserEmailsSubscriptions&lt;/code&gt;, &lt;code&gt;UserProfile&lt;/code&gt;, &lt;code&gt;UserProfilePreview&lt;/code&gt; are nested view components</source>
          <target state="translated">&lt;code&gt;UserEmailsSubscriptions&lt;/code&gt; 、 &lt;code&gt;UserProfile&lt;/code&gt; 、 &lt;code&gt;UserProfilePreview&lt;/code&gt; はネストされたビューコンポーネントです</target>
        </trans-unit>
        <trans-unit id="339bb7bce4bdd7501eede7218e8fffaf06787009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSettings&lt;/code&gt; is the view component</source>
          <target state="translated">&lt;code&gt;UserSettings&lt;/code&gt; はビューコンポーネントです</target>
        </trans-unit>
        <trans-unit id="c248d8bb241f09ffb6fbc7f22d684eb0a1d8b67a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abstract&lt;/code&gt;: works in all JavaScript environments, e.g. server-side with Node.js. &lt;strong&gt;The router will automatically be forced into this mode if no browser API is present.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;abstract&lt;/code&gt; ：すべてのJavaScript環境で機能します（Node.jsのサーバー側など）。&lt;strong&gt;ブラウザーAPIが存在しない場合、ルーターは自動的にこのモードになります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af3a1eca3ef1a5555c0872eef167faab0dbff5fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; allows you to append the path to the &lt;code&gt;current&lt;/code&gt; route (as with &lt;a href=&quot;#router-link-props&quot;&gt;&lt;code&gt;router-link&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; を使用すると、パスを &lt;code&gt;current&lt;/code&gt; ルートに追加できます（&lt;a href=&quot;#router-link-props&quot;&gt; &lt;code&gt;router-link&lt;/code&gt; &lt;/a&gt;と同様）</target>
        </trans-unit>
        <trans-unit id="129408f980a6f71e8252a2b7d310994da58b1f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current&lt;/code&gt; is the current Route by default (most of the time you don't need to change this)</source>
          <target state="translated">&lt;code&gt;current&lt;/code&gt; はデフォルトで現在のルートです（ほとんどの場合、これを変更する必要はありません）。</target>
        </trans-unit>
        <trans-unit id="189c0025be7509058d16e090465cd0385f78be80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt;: uses the URL hash for routing. Works in all Vue-supported browsers, including those that do not support HTML5 History API.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; ：ルーティングにURLハッシュを使用します。HTML5 History APIをサポートしないブラウザーを含め、Vueがサポートするすべてのブラウザーで機能します。</target>
        </trans-unit>
        <trans-unit id="97eed375fc42f919f4e9b643c4bb1890cb0f7295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;: requires HTML5 History API and server config. See &lt;a href=&quot;../guide/essentials/history-mode&quot;&gt;HTML5 History Mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; ：HTML5 History APIとサーバー構成が必要です。&lt;a href=&quot;../guide/essentials/history-mode&quot;&gt;HTML5履歴モードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c58b2dbc0bef12a78d609ec7bf08b4f7f8e93325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt;: resolved url. This would be the &lt;code&gt;href&lt;/code&gt; attribute of an &lt;code&gt;a&lt;/code&gt; element</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; ：解決されたURL。これは &lt;code&gt;a&lt;/code&gt; 要素の &lt;code&gt;href&lt;/code&gt; 属性になります</target>
        </trans-unit>
        <trans-unit id="611ffa6d9619afb4b3249c4b1280720afdac83a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#active-class&quot;&gt;active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class</source>
          <target state="translated">&lt;code&gt;isActive&lt;/code&gt; ：&lt;a href=&quot;#active-class&quot;&gt;アクティブなクラス&lt;/a&gt;を適用する必要が &lt;code&gt;true&lt;/code&gt; 場合はtrue。任意のクラスを適用できます</target>
        </trans-unit>
        <trans-unit id="9656f6654118175ebf382e9f9c1431925bcd1855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isExactActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#exact-active-class&quot;&gt;exact active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class</source>
          <target state="translated">&lt;code&gt;isExactActive&lt;/code&gt; ：&lt;a href=&quot;#exact-active-class&quot;&gt;正確なアクティブクラス&lt;/a&gt;を適用する必要が &lt;code&gt;true&lt;/code&gt; 場合はtrue。任意のクラスを適用できます</target>
        </trans-unit>
        <trans-unit id="d2d504eaad212b1e406054d3192107cdebdcc5d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;navigate&lt;/code&gt;: function to trigger the navigation. &lt;strong&gt;It will automatically prevent events when necessary&lt;/strong&gt;, the same way &lt;code&gt;router-link&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;navigate&lt;/code&gt; ：ナビゲーションをトリガーする関数。&lt;strong&gt;必要なときに自動的にイベントを防ぐことができます&lt;/strong&gt;、同様の &lt;code&gt;router-link&lt;/code&gt; ありません</target>
        </trans-unit>
        <trans-unit id="f6fbbf7066c3d9354554b2609da08e7517fcebc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized location</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; ：解決された正規化された場所</target>
        </trans-unit>
        <trans-unit id="ad4ae5a9e39a806af75882e2b086e5d5bfb57f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router-link&lt;/code&gt; exposes a low level customization through a &lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots&quot;&gt;scoped slot&lt;/a&gt;. This is a more advanced API that primarily targets library authors but can come in handy for developers as well, most of the time in a custom component like a &lt;em&gt;NavLink&lt;/em&gt; or other.</source>
          <target state="translated">&lt;code&gt;router-link&lt;/code&gt; は、&lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots&quot;&gt;スコープスロット&lt;/a&gt;を通じて低レベルのカスタマイズを公開します。これは主にライブラリ作成者を対象とするより高度なAPIですが、ほとんどの場合、&lt;em&gt;NavLink&lt;/em&gt;などのカスタムコンポーネントで開発者にも&lt;em&gt;役立ち&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1b33026ea8fd215f12d789371dfb8a1ad6610cf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v-slot&lt;/code&gt; API (3.1.0+)</source>
          <target state="translated">&lt;code&gt;v-slot&lt;/code&gt; API（3.1.0+）</target>
        </trans-unit>
        <trans-unit id="105a0b4759b072acbf3f5caad5c732de1378b383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vue-router&lt;/code&gt; uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; as its path matching engine, so it supports many advanced matching patterns such as optional dynamic segments, zero or more / one or more requirements, and even custom regex patterns. Check out its &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot;&gt;documentation&lt;/a&gt; for these advanced patterns, and &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js&quot;&gt;this example&lt;/a&gt; of using them in &lt;code&gt;vue-router&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; は、パスマッチングエンジンとして&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt;を使用するため、オプションの動的セグメント、ゼロ以上/ 1つ以上の要件、カスタム正規表現パターンなど、多くの高度なマッチングパターンをサポートしています。そのチェックアウト&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot;&gt;のドキュメントを&lt;/a&gt;これらの高度なパターンのために、そして&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js&quot;&gt;この例&lt;/a&gt;では、それらを使用しての &lt;code&gt;vue-router&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b313cd5c52caaa6485f1073613beebd813f00bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ selector: string, offset? : { x: number, y: number }}&lt;/code&gt; (offset only supported in 2.6.0+)</source>
          <target state="translated">&lt;code&gt;{ selector: string, offset? : { x: number, y: number }}&lt;/code&gt; （オフセットは2.6.0以降でのみサポートされます）</target>
        </trans-unit>
        <trans-unit id="d1dbe6ec2fcc5cc583f066d2d323aa23374ef4ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The nested view components are omitted here but you can find the complete source code for the example above &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ネストされたビューコンポーネントはここでは省略されていますが、上記の例の完全なソースコードは&lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;ここにあります&lt;/a&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fac0bef8a644d999b3cad91a9f9a5acc91a6ebb" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-fullPath&quot;&gt;$route.fullPath&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-fullPath&quot;&gt;$route.fullPath&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c11e00b2564886e95f2e3e968183b169b9fe441" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-hash&quot;&gt;$route.hash&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-hash&quot;&gt;$route.hash&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b71dfa4baecd89c7ee1f8419263541f945c335dd" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-matched&quot;&gt;$route.matched&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-matched&quot;&gt;$route.matched&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92ef7643f2712e5f5409f9b0a9fc20ea4b43afec" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-name&quot;&gt;$route.name&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-name&quot;&gt;$route.name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96d1157695c4bd399db774e48518889c47570451" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-params&quot;&gt;$route.params&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-params&quot;&gt;$route.params&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a7a8d8937c8e4e28bc63d5b8e6b813189ae0e8c0" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-path&quot;&gt;$route.path&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-path&quot;&gt;$route.path&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6573b6281dec720e4ab3018e24b58c4b5df19e23" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-query&quot;&gt;$route.query&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-query&quot;&gt;$route.query&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc3d56099f87e0d1e43e14294c252e742db988e5" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-redirectedFrom&quot;&gt;$route.redirectedFrom&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-redirectedFrom&quot;&gt;$route.redirectedFrom&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73c15197133db1ce9671a21babe5d55ac33756df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;from: Route&lt;/code&gt;&lt;/strong&gt;: the current route being navigated away from.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;from: Route&lt;/code&gt; &lt;/strong&gt;：ナビゲートされている現在のルート。</target>
        </trans-unit>
        <trans-unit id="5d867643772e9ef0f90dca26d991bd61e7d2d09a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next('/')&lt;/code&gt; or &lt;code&gt;next({ path: '/' })&lt;/code&gt;&lt;/strong&gt;: redirect to a different location. The current navigation will be aborted and a new one will be started. You can pass any location object to &lt;code&gt;next&lt;/code&gt;, which allows you to specify options like &lt;code&gt;replace: true&lt;/code&gt;, &lt;code&gt;name: 'home'&lt;/code&gt; and any option used in &lt;a href=&quot;../../api/index#to&quot;&gt;&lt;code&gt;router-link&lt;/code&gt;'s &lt;code&gt;to&lt;/code&gt; prop&lt;/a&gt; or &lt;a href=&quot;../../api/index#router-push&quot;&gt;&lt;code&gt;router.push&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next('/')&lt;/code&gt; または &lt;code&gt;next({ path: '/' })&lt;/code&gt; &lt;/strong&gt;：別の場所にリダイレクトします。現在のナビゲーションは中止され、新しいナビゲーションが開始されます。あなたは、任意の場所にオブジェクトを渡すことができ &lt;code&gt;next&lt;/code&gt; あなたのようなオプションを指定することができ、 &lt;code&gt;replace: true&lt;/code&gt; 、 &lt;code&gt;name: 'home'&lt;/code&gt; とで使用される任意のオプション&lt;a href=&quot;../../api/index#to&quot;&gt; &lt;code&gt;router-link&lt;/code&gt; の &lt;code&gt;to&lt;/code&gt; 小道具&lt;/a&gt;や&lt;a href=&quot;../../api/index#router-push&quot;&gt; &lt;code&gt;router.push&lt;/code&gt; を&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d10de2ce08935b888355cfc5209983856ceabc72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/strong&gt;: move on to the next hook in the pipeline. If no hooks are left, the navigation is &lt;strong&gt;confirmed&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/strong&gt;：パイプラインの次のフックに移動します。フックが残っていない場合は、ナビゲーションが&lt;strong&gt;確認され&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bd5f2287807263c04bce722222c123698b327757" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next(error)&lt;/code&gt;&lt;/strong&gt;: (2.4.0+) if the argument passed to &lt;code&gt;next&lt;/code&gt; is an instance of &lt;code&gt;Error&lt;/code&gt;, the navigation will be aborted and the error will be passed to callbacks registered via &lt;a href=&quot;../../api/index#router-onerror&quot;&gt;&lt;code&gt;router.onError()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next(error)&lt;/code&gt; &lt;/strong&gt;：（2.4.0+） &lt;code&gt;next&lt;/code&gt; に渡される引数が &lt;code&gt;Error&lt;/code&gt; のインスタンスである場合、ナビゲーションは中止され、エラーは&lt;a href=&quot;../../api/index#router-onerror&quot;&gt; &lt;code&gt;router.onError()&lt;/code&gt; を&lt;/a&gt;介して登録されたコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="35a20b24c354c5ad8d363a0a6cc7cbb4955efc25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next(false)&lt;/code&gt;&lt;/strong&gt;: abort the current navigation. If the browser URL was changed (either manually by the user or via back button), it will be reset to that of the &lt;code&gt;from&lt;/code&gt; route.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next(false)&lt;/code&gt; &lt;/strong&gt;：現在のナビゲーションを中止します。ブラウザーのURLが変更された場合（ユーザーが手動で、または[戻る]ボタンを使用して）、それは &lt;code&gt;from&lt;/code&gt; ルートのURLにリセットされます。</target>
        </trans-unit>
        <trans-unit id="8d4fd6417cf648085f5a319fa87e224269455b3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next: Function&lt;/code&gt;&lt;/strong&gt;: this function must be called to &lt;strong&gt;resolve&lt;/strong&gt; the hook. The action depends on the arguments provided to &lt;code&gt;next&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next: Function&lt;/code&gt; &lt;/strong&gt;：この関数は、フックを&lt;strong&gt;解決するために&lt;/strong&gt;呼び出す必要があります。アクションは、 &lt;code&gt;next&lt;/code&gt; 提供される引数によって異なります。</target>
        </trans-unit>
        <trans-unit id="692c595e63b46ccc3431b621082e8fa5bef1f3d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;to: Route&lt;/code&gt;&lt;/strong&gt;: the target &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;Route Object&lt;/a&gt; being navigated to.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;to: Route&lt;/code&gt; &lt;/strong&gt;：ナビゲートされるターゲット&lt;a href=&quot;../../api/index#the-route-object&quot;&gt; Routeオブジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5b7c8ca4a999bad33b5831545e1788c63dc6d8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An alias of &lt;code&gt;/a&lt;/code&gt; as &lt;code&gt;/b&lt;/code&gt; means when the user visits &lt;code&gt;/b&lt;/code&gt;, the URL remains &lt;code&gt;/b&lt;/code&gt;, but it will be matched as if the user is visiting &lt;code&gt;/a&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;エイリアス &lt;code&gt;/a&lt;/code&gt; として &lt;code&gt;/b&lt;/code&gt; の手段、ユーザーが訪問 &lt;code&gt;/b&lt;/code&gt; 、URLの遺跡 &lt;code&gt;/b&lt;/code&gt; が、ユーザが訪問しているかのようにマッチします &lt;code&gt;/a&lt;/code&gt; 。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da8185af2453502d2a6d21a954b64a48f5e8d3af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Decouple it by using &lt;code&gt;props&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;props&lt;/code&gt; を使用してそれを分離する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1bfb124a5c007d689be864e3a2ebd16e3664c182" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fetching After Navigation&lt;/strong&gt;: perform the navigation first, and fetch data in the incoming component's lifecycle hook. Display a loading state while data is being fetched.</source>
          <target state="translated">&lt;strong&gt;ナビゲーション後のフェッチ&lt;/strong&gt;：最初にナビゲーションを実行し、受信コンポーネントのライフサイクルフックでデータをフェッチします。データのフェッチ中に読み込み状態を表示します。</target>
        </trans-unit>
        <trans-unit id="784e78a4a863c42db56de5d99730217f98191764" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fetching Before Navigation&lt;/strong&gt;: Fetch data before navigation in the route enter guard, and perform the navigation after data has been fetched.</source>
          <target state="translated">&lt;strong&gt;ナビゲーション前のフェッチ&lt;/strong&gt;：ルート内のナビゲーションがガードに入る前にデータをフェッチし、データがフェッチされた後にナビゲーションを実行します。</target>
        </trans-unit>
        <trans-unit id="85aa166ff434e379c8599f4624e12e78defa0f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instead of coupling to &lt;code&gt;$route&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;$route&lt;/code&gt; に結合する代わりに：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d0ba4307d3d286e8917735285562ed5f0feb93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make sure to always call the &lt;code&gt;next&lt;/code&gt; function, otherwise the hook will never be resolved.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;常に &lt;code&gt;next&lt;/code&gt; 関数を呼び出すようにしてください。そうしないと、フックが解決されません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fed409cff95e4d497045c8e930679df562a355d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that nested paths that start with &lt;code&gt;/&lt;/code&gt; will be treated as a root path. This allows you to leverage the component nesting without having to use a nested URL.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;/&lt;/code&gt; で始まるネストされたパスはルートパスとして扱われることに注意してください。これにより、ネストされたURLを使用しなくても、コンポーネントのネストを活用できます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0aec4cdffd53c36dfc090da8e974a1be937b9a80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: Inside of a Vue instance, you have access to the router instance as &lt;code&gt;$router&lt;/code&gt;. You can therefore call &lt;code&gt;this.$router.push&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;注：Vueインスタンス内では、 &lt;code&gt;$router&lt;/code&gt; としてルーターインスタンスにアクセスできます。したがって、 &lt;code&gt;this.$router.push&lt;/code&gt; 呼び出すことができます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d064eb0fb56e93c57a44a1fe432eca814279295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: this feature only works if the browser supports &lt;code&gt;history.pushState&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;注：この機能は、ブラウザーが &lt;code&gt;history.pushState&lt;/code&gt; をサポートしている場合にのみ機能します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8c987a4ff8744b98065a5eaac261bda80334b61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the destination is the same as the current route and only params are changing (e.g. going from one profile to another &lt;code&gt;/users/1&lt;/code&gt; -&amp;gt; &lt;code&gt;/users/2&lt;/code&gt;), you will have to use &lt;a href=&quot;dynamic-matching#reacting-to-params-changes&quot;&gt;&lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;/a&gt; to react to changes (e.g. fetching the user information).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;宛先が現在のルートと同じで、&lt;a href=&quot;dynamic-matching#reacting-to-params-changes&quot;&gt; &lt;code&gt;beforeRouteUpdate&lt;/code&gt; &lt;/a&gt;のみが変更されている場合（たとえば、あるプロファイルから別の &lt;code&gt;/users/1&lt;/code&gt; - &amp;gt; &lt;code&gt;/users/2&lt;/code&gt; に移動する場合）、変更に対応するためにbeforeRouteUpdateを使用する必要があります（たとえば、フェッチユーザー情報）。</target>
        </trans-unit>
        <trans-unit id="f2cd00a05c4e51c80b150666326157914820525e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f731a0483e5d55c7ef53ce77b71cd21cc581fa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;params&lt;/code&gt; are ignored if a &lt;code&gt;path&lt;/code&gt; is provided, which is not the case for &lt;code&gt;query&lt;/code&gt;, as shown in the example above. Instead, you need to provide the &lt;code&gt;name&lt;/code&gt; of the route or manually specify the whole &lt;code&gt;path&lt;/code&gt; with any parameter:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：上記の例に示すように、 &lt;code&gt;path&lt;/code&gt; が指定されている場合、 &lt;code&gt;params&lt;/code&gt; は無視されます。これは &lt;code&gt;query&lt;/code&gt; には当てはまりません。代わりに、ルートの &lt;code&gt;name&lt;/code&gt; を指定するか、任意のパラメーターを使用して &lt;code&gt;path&lt;/code&gt; 全体を手動で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f44bc5cde0a86679734bccf41236b30399e35e60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Let's forget about how the HTML/CSS should look like to represent such layout and focus on the components used.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;em&gt;HTML / CSSがこのようなレイアウトを表し、使用するコンポーネントに焦点を当てるためにどのように見えるかについては忘れましょう。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="49cd92a540f8d5ddaf089011afae080a463c00bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TIP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TIP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f12251e037ac26f45b1cdd71584a9346e1ac384" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VERSION NOTE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バージョンノート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56d6254e7cba0f476d3d275412f956128f1ae309" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When using the &lt;code&gt;v-slot&lt;/code&gt; API, it is required to pass one single child to &lt;code&gt;router-link&lt;/code&gt;&lt;/strong&gt;. If you don't, &lt;code&gt;router-link&lt;/code&gt; will wrap its children in a &lt;code&gt;span&lt;/code&gt; element.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;v-slot&lt;/code&gt; API を使用する場合、1つの子を &lt;code&gt;router-link&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;に渡す必要があり&lt;/strong&gt;&lt;strong&gt;ます&lt;/strong&gt;。そうしないと、 &lt;code&gt;router-link&lt;/code&gt; は子を &lt;code&gt;span&lt;/code&gt; 要素でラップします。</target>
        </trans-unit>
        <trans-unit id="6651e38d4a3763e7779e24d7dae0f0aba6d5a8a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteEnter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteEnter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf400eb99af38983093f201712bffd8645fddfaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteLeave&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteLeave&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="61b1e414f09221f5876897f91853a1684f2da844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteUpdate&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteUpdate&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="203651569c6adf2d7bf9feeba3de1e6bf672d10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this.$route&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;this.$route&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6cab0895dec254016a0b4192af900a73d674e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this.$router&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;this.$router&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9880655df0348048352e89351ab27e9a1587740" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;route object&lt;/strong&gt; represents the state of the current active route. It contains parsed information of the current URL and the &lt;strong&gt;route records&lt;/strong&gt; matched by the URL.</source>
          <target state="translated">&lt;strong&gt;ルートオブジェクトは、&lt;/strong&gt;現在アクティブなルートの状態を表しています。これには、現在のURLの解析された情報と、URLに一致する&lt;strong&gt;ルートレコード&lt;/strong&gt;が含まれます。</target>
        </trans-unit>
        <trans-unit id="db78120123d41c4b39ab69d8274419abba6f5c5c" translate="yes" xml:space="preserve">
          <source>A dynamic segment is denoted by a colon &lt;code&gt;:&lt;/code&gt;. When a route is matched, the value of the dynamic segments will be exposed as &lt;code&gt;this.$route.params&lt;/code&gt; in every component. Therefore, we can render the current user ID by updating &lt;code&gt;User&lt;/code&gt;'s template to this:</source>
          <target state="translated">動的セグメントはコロンで示され &lt;code&gt;:&lt;/code&gt; 。ルートが一致すると、動的セグメントの値がすべてのコンポーネントで &lt;code&gt;this.$route.params&lt;/code&gt; として公開されます。したがって、 &lt;code&gt;User&lt;/code&gt; のテンプレートを次のように更新することで、現在のユーザーIDをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="156b2b9ae12f81d9512005ec2d0d3037c4a7e252" translate="yes" xml:space="preserve">
          <source>A redirect means when the user visits &lt;code&gt;/a&lt;/code&gt;, the URL will be replaced by &lt;code&gt;/b&lt;/code&gt;, and then matched as &lt;code&gt;/b&lt;/code&gt;. But what is an alias?</source>
          <target state="translated">リダイレクトとは、ユーザーが &lt;code&gt;/a&lt;/code&gt; にアクセスすると、URLが &lt;code&gt;/b&lt;/code&gt; に置き換えられ、次に &lt;code&gt;/b&lt;/code&gt; として照合されることを意味します。しかし、エイリアスとは何ですか？</target>
        </trans-unit>
        <trans-unit id="6a97a71775a961a8fa29e1af5fbe06b5cf8aac91" translate="yes" xml:space="preserve">
          <source>A string that equals the path of the current route, always resolved as an absolute path. e.g. &lt;code&gt;&quot;/foo/bar&quot;&lt;/code&gt;.</source>
          <target state="translated">現在のルートのパスと等しい文字列。常に絶対パスとして解決されます。例： &lt;code&gt;&quot;/foo/bar&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3adc69887814392cf8b2d46cce9a44b4e624c105" translate="yes" xml:space="preserve">
          <source>A view is rendered by using a component, therefore multiple views require multiple components for the same route. Make sure to use the &lt;code&gt;components&lt;/code&gt; (with an s) option:</source>
          <target state="translated">ビューはコンポーネントを使用してレンダリングされるため、複数のビューには同じルートに複数のコンポーネントが必要です。 &lt;code&gt;components&lt;/code&gt; （s付き）オプションを必ず使用してください。</target>
        </trans-unit>
        <trans-unit id="11155a31d243422200f48fd2d8cc4952c34d02fe" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">この例の実用的なデモは&lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a50bb9b5e99e675cac89d89fca695cf654e6c9a" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">この例の実用的なデモは&lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d676fbfda78cccf76196a5a6fb7ab7d0650c2b1a" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/yyx990803/L7hscd8h/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">この例の実用的なデモは&lt;a href=&quot;https://jsfiddle.net/yyx990803/L7hscd8h/&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API リファレンス</target>
        </trans-unit>
        <trans-unit id="ea2defa3a9b3b8557a3da80eb0d8f457b531b7a4" translate="yes" xml:space="preserve">
          <source>Add global navigation guards. See &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; for more details.</source>
          <target state="translated">グローバルナビゲーションガードを追加します。詳細については、&lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;ナビゲーションガード&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="182f7d7f84ac28b85cefada3d8096af7dff435a8" translate="yes" xml:space="preserve">
          <source>Add this to your &lt;code&gt;firebase.json&lt;/code&gt;:</source>
          <target state="translated">これを &lt;code&gt;firebase.json&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="072891203234508378cabfbdc97d9e0e3f7d7693" translate="yes" xml:space="preserve">
          <source>Advanced Matching Patterns</source>
          <target state="translated">高度なマッチングパターン</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="c315b4e50c639fe7a19ef97c5ef2a6fe0f4ddd9b" translate="yes" xml:space="preserve">
          <source>All route records matched by a route are exposed on the &lt;code&gt;$route&lt;/code&gt; object (and also route objects in navigation guards) as the &lt;code&gt;$route.matched&lt;/code&gt; Array. Therefore, we will need to iterate over &lt;code&gt;$route.matched&lt;/code&gt; to check for meta fields in route records.</source>
          <target state="translated">ルートに一致するすべてのルートレコードは、 &lt;code&gt;$route.matched&lt;/code&gt; Array として &lt;code&gt;$route&lt;/code&gt; オブジェクト（およびナビゲーションガードのルートオブジェクト）に公開されます。したがって、ルートレコードのメタフィールドを確認するには、 &lt;code&gt;$route.matched&lt;/code&gt; を反復処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="35bc64fe5ce112af8a785974fd7adaceb66968ee" translate="yes" xml:space="preserve">
          <source>All three methods return a function that removes the registered guard/hook.</source>
          <target state="translated">3つのメソッドはすべて、登録されたガード/フックを削除する関数を返します。</target>
        </trans-unit>
        <trans-unit id="f687baf76efd583ba0ef8e00c797ebd3606ba953" translate="yes" xml:space="preserve">
          <source>Also, all examples will be using the full version of Vue to make on-the-fly template compilation possible. See more details &lt;a href=&quot;https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">また、すべての例では、Vueのフルバージョンを使用して、オンザフライテンプレートのコンパイルを可能にしています。詳細は&lt;a href=&quot;https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="8d774c1d9d8403ab8fadec6dd85f65a1f6379db5" translate="yes" xml:space="preserve">
          <source>Alternatively, if you are using a Node.js server, you can implement the fallback by using the router on the server side to match the incoming URL and respond with 404 if no route is matched. Check out the &lt;a href=&quot;https://ssr.vuejs.org/en/&quot;&gt;Vue server side rendering documentation&lt;/a&gt; for more information.</source>
          <target state="translated">あるいは、Node.jsサーバーを使用している場合は、サーバー側のルーターを使用してフォールバックを実装し、着信URLを照合し、一致するルートがない場合は404で応答することができます。詳細については、&lt;a href=&quot;https://ssr.vuejs.org/en/&quot;&gt;Vueサーバー側レンダリングのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bc481c13f192125008dd5b760fe07cb50cef941a" translate="yes" xml:space="preserve">
          <source>An Array containing &lt;strong&gt;route records&lt;/strong&gt; for all nested path segments of the current route. Route records are the copies of the objects in the &lt;code&gt;routes&lt;/code&gt; configuration Array (and in &lt;code&gt;children&lt;/code&gt; Arrays):</source>
          <target state="translated">現在のルートのすべてのネストされたパスセグメントの&lt;strong&gt;ルートレコード&lt;/strong&gt;を含む配列。ルートレコードは、 &lt;code&gt;routes&lt;/code&gt; 構成配列（および &lt;code&gt;children&lt;/code&gt; 配列）のオブジェクトのコピーです。</target>
        </trans-unit>
        <trans-unit id="e258ee9f428616628018a4e303bafec2ed1d1719" translate="yes" xml:space="preserve">
          <source>An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration's nesting structure.</source>
          <target state="translated">エイリアスを使用すると、設定のネスティング構造に制約されることなく、UI 構造を任意の URL にマップすることができます。</target>
        </trans-unit>
        <trans-unit id="1f3739e791fa19d2d317437f3ee57f9500444cd8" translate="yes" xml:space="preserve">
          <source>An error occurred when trying to resolve an async component that is required to render a route.</source>
          <target state="translated">ルートをレンダリングするために必要な非同期コンポーネントを解決しようとすると、エラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="d3cc39b59db1700be7d035e2588f46cc66fbf241" translate="yes" xml:space="preserve">
          <source>An example use case is checking for a meta field in the global navigation guard:</source>
          <target state="translated">使用例としては、グローバルナビゲーションガードのメタフィールドのチェックがあります。</target>
        </trans-unit>
        <trans-unit id="71da084f036eb26c37015ce8d4360c5a8d73a895" translate="yes" xml:space="preserve">
          <source>An object that contains key/value pairs of dynamic segments and star segments. If there are no params the value will be an empty object.</source>
          <target state="translated">ダイナミックセグメントとスターセグメントのキーと値のペアを含むオブジェクト。パラメータがない場合は空のオブジェクトとなります。</target>
        </trans-unit>
        <trans-unit id="14a69c21f7224d348475851000b8f3ad2545a273" translate="yes" xml:space="preserve">
          <source>An object that contains key/value pairs of the query string. For example, for a path &lt;code&gt;/foo?user=1&lt;/code&gt;, we get &lt;code&gt;$route.query.user == 1&lt;/code&gt;. If there is no query the value will be an empty object.</source>
          <target state="translated">クエリ文字列のキーと値のペアを含むオブジェクト。たとえば、パス &lt;code&gt;/foo?user=1&lt;/code&gt; の場合、 &lt;code&gt;$route.query.user == 1&lt;/code&gt; ます。クエリがない場合、値は空のオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="a9c1de7dc1047d71f67c38a050edbdf38b437ae0" translate="yes" xml:space="preserve">
          <source>Any non-name props will be passed along to the rendered component, however most of the time the per-route data is contained in the route's params.</source>
          <target state="translated">名前のない小道具はすべてレンダリングされたコンポーネントに渡されますが、ほとんどの場合、ルートごとのデータはルートのパラメータに含まれています。</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="085554440a61484dcc1f7f1b33296afe385a8f75" translate="yes" xml:space="preserve">
          <source>As the name suggests, the navigation guards provided by &lt;code&gt;vue-router&lt;/code&gt; are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</source>
          <target state="translated">名前が示すように、 &lt;code&gt;vue-router&lt;/code&gt; によって提供されるナビゲーションガードは、リダイレクトまたはキャンセルすることによってナビゲーションを保護するために主に使用されます。ルートナビゲーションプロセスにフックする方法はいくつかあります。グローバル、ルートごと、またはコンポーネント内です。</target>
        </trans-unit>
        <trans-unit id="8f0d70c190fc4a8136b23e7c202d297fe902db8a" translate="yes" xml:space="preserve">
          <source>As the return value of calling &lt;code&gt;router.match(location)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;router.match(location)&lt;/code&gt; の呼び出しの戻り値として</target>
        </trans-unit>
        <trans-unit id="c7f4dd01c3d7db0526d49b5cbafc444aab559129" translate="yes" xml:space="preserve">
          <source>As you can see the &lt;code&gt;children&lt;/code&gt; option is just another Array of route configuration objects like &lt;code&gt;routes&lt;/code&gt; itself. Therefore, you can keep nesting views as much as you need.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;children&lt;/code&gt; オプションは、 &lt;code&gt;routes&lt;/code&gt; 自体のようなルート構成オブジェクトのもう1つの配列です。したがって、必要なだけビューをネストすることができます。</target>
        </trans-unit>
        <trans-unit id="ec41d6e2df2143b34eb02cee62d58dd44a178637" translate="yes" xml:space="preserve">
          <source>Aside from using &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to create anchor tags for declarative navigation, we can do this programmatically using the router's instance methods.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; を使用して宣言型ナビゲーション用のアンカータグを作成する以外に、ルーターのインスタンスメソッドを使用してプログラムでこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="6892b3141eb3858e6e6734f0568f78454577256f" translate="yes" xml:space="preserve">
          <source>Async Scrolling</source>
          <target state="translated">非同期スクロール</target>
        </trans-unit>
        <trans-unit id="560d9ddb225f90c85a47caeebc767f3890a40408" translate="yes" xml:space="preserve">
          <source>At this point, with the above configuration, when you visit &lt;code&gt;/user/foo&lt;/code&gt;, nothing will be rendered inside &lt;code&gt;User&lt;/code&gt;'s outlet, because no sub route is matched. Maybe you do want to render something there. In such case you can provide an empty subroute path:</source>
          <target state="translated">この時点で、上記の構成では、 &lt;code&gt;/user/foo&lt;/code&gt; にアクセスしても、一致するサブルートがないため、 &lt;code&gt;User&lt;/code&gt; のアウトレット内には何もレンダリングされません。たぶん、そこに何かをレンダリングしたいでしょう。そのような場合、空のサブルートパスを指定できます。</target>
        </trans-unit>
        <trans-unit id="0fd122c84cb00b96ba0c759ebc8ca3844d91ee84" translate="yes" xml:space="preserve">
          <source>Basic Guides</source>
          <target state="translated">基本ガイド</target>
        </trans-unit>
        <trans-unit id="61e692507c61c133f149855270ff0ed201204f76" translate="yes" xml:space="preserve">
          <source>Boolean mode</source>
          <target state="translated">ブールモード</target>
        </trans-unit>
        <trans-unit id="371e23371f040d46377c93e80323577b039227a1" translate="yes" xml:space="preserve">
          <source>By injecting the router, we get access to it as &lt;code&gt;this.$router&lt;/code&gt; as well as the current route as &lt;code&gt;this.$route&lt;/code&gt; inside of any component:</source>
          <target state="translated">ルーターを挿入することで、 &lt;code&gt;this.$router&lt;/code&gt; としてアクセスし、コンポーネント内の &lt;code&gt;this.$route&lt;/code&gt; として現在のルートにアクセスします。</target>
        </trans-unit>
        <trans-unit id="3f503c9d423abd93075704f88db9bb761be6157d" translate="yes" xml:space="preserve">
          <source>Caddy</source>
          <target state="translated">Caddy</target>
        </trans-unit>
        <trans-unit id="634dbb9a22c3a338c47024d7abe85b658ba519d0" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeEnter&lt;/code&gt; in route configs.</source>
          <target state="translated">ルート設定で &lt;code&gt;beforeEnter&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4249140880ca52e7ef11d9503d69924589f207c9" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteEnter&lt;/code&gt; in activated components.</source>
          <target state="translated">アクティブ化されたコンポーネントで &lt;code&gt;beforeRouteEnter&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ff7e90ad58713ac0a25e678176802f3fa200decb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteUpdate&lt;/code&gt; guards in reused components.</source>
          <target state="translated">再利用されたコンポーネントで &lt;code&gt;beforeRouteUpdate&lt;/code&gt; ガードを呼び出します。</target>
        </trans-unit>
        <trans-unit id="8e5a58466233e6c803ddbe25aba939e739eb3019" translate="yes" xml:space="preserve">
          <source>Call callbacks passed to &lt;code&gt;next&lt;/code&gt; in &lt;code&gt;beforeRouteEnter&lt;/code&gt; guards with instantiated instances.</source>
          <target state="translated">&lt;code&gt;beforeRouteEnter&lt;/code&gt; がインスタンス化されたインスタンスでガードする &lt;code&gt;next&lt;/code&gt; に渡されるコールコールバック。</target>
        </trans-unit>
        <trans-unit id="b9a8c6f5621a1b9d78881b4558f1e7afa9d9ea72" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;afterEach&lt;/code&gt; hooks.</source>
          <target state="translated">グローバルな &lt;code&gt;afterEach&lt;/code&gt; フックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="637f232310f9b20f4e6cf7008a301ce8a37fc2d2" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;beforeEach&lt;/code&gt; guards.</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt; ガードをグローバルに呼び出します。</target>
        </trans-unit>
        <trans-unit id="7f706c0b8eaadca091201ae841597e18c20f22a2" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;beforeResolve&lt;/code&gt; guards.</source>
          <target state="translated">グローバル &lt;code&gt;beforeResolve&lt;/code&gt; ガードを呼び出します。</target>
        </trans-unit>
        <trans-unit id="05385d5830e5c072c1827ed4365f6efdd71ed73d" translate="yes" xml:space="preserve">
          <source>Call leave guards in deactivated components.</source>
          <target state="translated">非アクティブ化された部品に警備員を呼べ</target>
        </trans-unit>
        <trans-unit id="5bbc0d73488282dd93b70e27cef933e4b1ea6db0" translate="yes" xml:space="preserve">
          <source>Catch all / 404 Not found Route</source>
          <target state="translated">すべてをキャッチ/404 見つかりませんでした ルート</target>
        </trans-unit>
        <trans-unit id="09dbd187de708ee21b01806ae5b0ca883102654a" translate="yes" xml:space="preserve">
          <source>Caveat</source>
          <target state="translated">Caveat</target>
        </trans-unit>
        <trans-unit id="c329ed52a2e5ffe770b15cad6d57d47667dc76c8" translate="yes" xml:space="preserve">
          <source>Check out more examples explaining active link class &lt;a href=&quot;https://jsfiddle.net/8xrk1n9f/&quot;&gt;live&lt;/a&gt;.</source>
          <target state="translated">アクティブリンククラス&lt;a href=&quot;https://jsfiddle.net/8xrk1n9f/&quot;&gt;liveを&lt;/a&gt;説明する他の例を確認してください。</target>
        </trans-unit>
        <trans-unit id="be9d53e0a04f1a7d92239dc5d0a8c7339bfa0b13" translate="yes" xml:space="preserve">
          <source>Combining Vue's &lt;a href=&quot;https://vuejs.org/guide/components.html#Async-Components&quot;&gt;async component feature&lt;/a&gt; and webpack's &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/&quot;&gt;code splitting feature&lt;/a&gt;, it's trivially easy to lazy-load route components.</source>
          <target state="translated">Vueの&lt;a href=&quot;https://vuejs.org/guide/components.html#Async-Components&quot;&gt;非同期コンポーネント機能&lt;/a&gt;とwebpackの&lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/&quot;&gt;コード分​​割機能&lt;/a&gt;を組み合わせると、ルートコンポーネントをレイジーロードするのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="538f73ebb0f2283ee510d20e22c8b3dc2611a725" translate="yes" xml:space="preserve">
          <source>Combining the two, this is how to define an async component that will be automatically code-split by webpack:</source>
          <target state="translated">この2つを組み合わせて、webpackによって自動的にコード分割される非同期コンポーネントを定義する方法です。</target>
        </trans-unit>
        <trans-unit id="c21b56685e74ee34e112c6265f95d4660855489e" translate="yes" xml:space="preserve">
          <source>Component Enabled Options</source>
          <target state="translated">コンポーネント有効化オプション</target>
        </trans-unit>
        <trans-unit id="6f1e4ac04228a38b2df9f816ebdf9943fc476cbc" translate="yes" xml:space="preserve">
          <source>Component Injected Properties</source>
          <target state="translated">コンポーネントに注入されたプロパティ</target>
        </trans-unit>
        <trans-unit id="68473142532c241b6b4d87aa608c7dcf5c7b3829" translate="yes" xml:space="preserve">
          <source>Component Injections</source>
          <target state="translated">コンポーネントの注入</target>
        </trans-unit>
        <trans-unit id="447504d07a309bf4f61ba3d1b8acc798c1179562" translate="yes" xml:space="preserve">
          <source>Configure the active CSS class applied when the link is active with exact match. Note the default value can also be configured globally via the &lt;code&gt;linkExactActiveClass&lt;/code&gt; router constructor option.</source>
          <target state="translated">リンクがアクティブであるときに適用されるアクティブCSSクラスを完全一致で構成します。デフォルト値は &lt;code&gt;linkExactActiveClass&lt;/code&gt; ルーターコンストラクタオプションを介してグローバルに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="598c83f3c40328d106949afdf0610e818376f591" translate="yes" xml:space="preserve">
          <source>Configure the active CSS class applied when the link is active. Note the default value can also be configured globally via the &lt;code&gt;linkActiveClass&lt;/code&gt; router constructor option.</source>
          <target state="translated">リンクがアクティブなときに適用されるアクティブなCSSクラスを構成します。デフォルト値は、 &lt;code&gt;linkActiveClass&lt;/code&gt; ルーターコンストラクタオプションを介してグローバルに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="08c47906bf83e39ad87e06aca0fe381d685ab20a" translate="yes" xml:space="preserve">
          <source>Configure the router mode.</source>
          <target state="translated">ルーターモードを設定します。</target>
        </trans-unit>
        <trans-unit id="179589cabbf6e5556838d12a18510a83d0e5840f" translate="yes" xml:space="preserve">
          <source>Controls whether the router should fallback to &lt;code&gt;hash&lt;/code&gt; mode when the browser does not support &lt;code&gt;history.pushState&lt;/code&gt; but mode is set to &lt;code&gt;history&lt;/code&gt;.</source>
          <target state="translated">ブラウザーが &lt;code&gt;history.pushState&lt;/code&gt; をサポートしていないが、モードが &lt;code&gt;history&lt;/code&gt; に設定されている場合に、ルーターが &lt;code&gt;hash&lt;/code&gt; モードにフォールバックするかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="604a3713372f436d1cb20925918b04c41010dfd1" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;web.config&lt;/code&gt; file in the root directory of your site with the following:</source>
          <target state="translated">次のようにして、サイトのルートディレクトリに &lt;code&gt;web.config&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="a1b0a80537d0b93c4c92d2861e9bbeb03c1a7f33" translate="yes" xml:space="preserve">
          <source>Creating a Single-page Application with Vue + Vue Router is dead simple. With Vue.js, we are already composing our application with components. When adding Vue Router to the mix, all we need to do is map our components to the routes and let Vue Router know where to render them. Here's a basic example:</source>
          <target state="translated">Vue+Vue Routerでシングルページのアプリケーションを作成するのは致命的に簡単です。Vue.js では、すでにコンポーネントを使用してアプリケーションを構成しています。そこに Vue Router を追加すると、必要なのはコンポーネントをルートにマッピングして、Vue Router にどこでレンダリングするかを知らせるだけです。以下に基本的な例を示します。</target>
        </trans-unit>
        <trans-unit id="5f31f9c9de48f97cd9f14f9d5e4b1227ebfaf383" translate="yes" xml:space="preserve">
          <source>Customizable Scroll Behavior</source>
          <target state="translated">カスタマイズ可能なスクロール動作</target>
        </trans-unit>
        <trans-unit id="126e1bff33bc4a33979dcd9da131a2801aeb7664" translate="yes" xml:space="preserve">
          <source>DOM updates triggered.</source>
          <target state="translated">DOM の更新が発生しました。</target>
        </trans-unit>
        <trans-unit id="890e1257a40dfb0f216d69df75d9cda18023d0bb" translate="yes" xml:space="preserve">
          <source>Data Fetching</source>
          <target state="translated">データ取得</target>
        </trans-unit>
        <trans-unit id="3484c6fcb53ac09a3fead481f71e452bc3f9e097" translate="yes" xml:space="preserve">
          <source>Declarative</source>
          <target state="translated">Declarative</target>
        </trans-unit>
        <trans-unit id="785cf0391e1a17613040723181ad0242ee7dbb32" translate="yes" xml:space="preserve">
          <source>Denotes the target route of the link. When clicked, the value of the &lt;code&gt;to&lt;/code&gt; prop will be passed to &lt;code&gt;router.push()&lt;/code&gt; internally, so the value can be either a string or a location descriptor object.</source>
          <target state="translated">リンクのターゲットルートを示します。クリックすると、の値 &lt;code&gt;to&lt;/code&gt; 支柱がに渡されます &lt;code&gt;router.push()&lt;/code&gt; 内部で、その値は文字列または位置記述オブジェクトのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="40d9b9f619dbd27ad649a2fb2ed512704a8498dc" translate="yes" xml:space="preserve">
          <source>Dev Build</source>
          <target state="translated">デブビルド</target>
        </trans-unit>
        <trans-unit id="3802d9202faed1ee478163e33ce9ddf939795ae9" translate="yes" xml:space="preserve">
          <source>Direct Download / CDN</source>
          <target state="translated">直接ダウンロード/CDN</target>
        </trans-unit>
        <trans-unit id="ec5741bbff94960e62ed6fcda2ffbc8bf291509f" translate="yes" xml:space="preserve">
          <source>Dynamic Route Matching</source>
          <target state="translated">動的ルートマッチング</target>
        </trans-unit>
        <trans-unit id="8f3d8ec9f1affbff8f734f537e37271abb248165" translate="yes" xml:space="preserve">
          <source>Dynamically add more routes to the router. The argument must be an Array using the same route config format with the &lt;code&gt;routes&lt;/code&gt; constructor option.</source>
          <target state="translated">ルーターに動的にルートを追加します。引数は、 &lt;code&gt;routes&lt;/code&gt; コンストラクターオプションと同じルート構成形式を使用する配列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="24c467ae21d128d7193caebbe399b812abbf159e" translate="yes" xml:space="preserve">
          <source>Every guard function receives three arguments:</source>
          <target state="translated">すべてのガード関数は3つの引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="d8bac23f28aec2ade8b77c4f238e7a22aa94fe46" translate="yes" xml:space="preserve">
          <source>Example Server Configurations</source>
          <target state="translated">サーバー設定例</target>
        </trans-unit>
        <trans-unit id="ea90a9028e4260b0b7f6845eac8160877c8ae4dd" translate="yes" xml:space="preserve">
          <source>Example: Applying Active Class to Outer Element</source>
          <target state="translated">例 アクティブクラスを外部要素に適用する</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="6ea555d5143dcddf991fec16297649cdb9c9c9e9" translate="yes" xml:space="preserve">
          <source>Express with Node.js</source>
          <target state="translated">Node.jsで表現する</target>
        </trans-unit>
        <trans-unit id="61cf55a69f4df4c161869ea8e2d7b9a4330c5741" translate="yes" xml:space="preserve">
          <source>Fetching After Navigation</source>
          <target state="translated">ナビゲーション後のフェッチ</target>
        </trans-unit>
        <trans-unit id="d7886fbab1b4f934f0a1de4803c3c7bec7bd522d" translate="yes" xml:space="preserve">
          <source>Fetching Before Navigation</source>
          <target state="translated">ナビゲーションの前に取得</target>
        </trans-unit>
        <trans-unit id="12968f6b0d3abadd283ff066759a7b791258a0e4" translate="yes" xml:space="preserve">
          <source>Finally, you can directly define route navigation guards inside route components (the ones passed to the router configuration) with the following options:</source>
          <target state="translated">最後に、以下のオプションを使用して、ルートコンポーネント(ルータ設定に渡されるもの)内のルートナビゲーションガードを直接定義することができます。</target>
        </trans-unit>
        <trans-unit id="a01db2ae475f14b70ac1d75463ca58257cfa1529" translate="yes" xml:space="preserve">
          <source>Fine-grained navigation control</source>
          <target state="translated">細かいナビゲーション制御</target>
        </trans-unit>
        <trans-unit id="5f133c80f125f45ee0dbdf789783d6285b5c326c" translate="yes" xml:space="preserve">
          <source>Firebase hosting</source>
          <target state="translated">ファイアーベースホスティング</target>
        </trans-unit>
        <trans-unit id="373ebcfb47d28107cdb989722313264dd872952e" translate="yes" xml:space="preserve">
          <source>First, an async component can be defined as a factory function that returns a Promise (which should resolve to the component itself):</source>
          <target state="translated">まず、非同期コンポーネントは、プロミスを返すファクトリ関数として定義することができます(これは、コンポーネント自体に解決する必要があります)。</target>
        </trans-unit>
        <trans-unit id="df0806b24093e99d864f17e99384efbe1d25e90c" translate="yes" xml:space="preserve">
          <source>First, each route object in the &lt;code&gt;routes&lt;/code&gt; configuration is called a &lt;strong&gt;route record&lt;/strong&gt;. Route records may be nested. Therefore when a route is matched, it can potentially match more than one route record.</source>
          <target state="translated">まず、 &lt;code&gt;routes&lt;/code&gt; 構成の各ルートオブジェクトは、&lt;strong&gt;ルートレコード&lt;/strong&gt;と呼ばれます。ルートレコードはネストできます。したがって、ルートが一致すると、複数のルートレコードと一致する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6a65bf6fcf34175ff79aaa50332ab88e3c4fdbde" translate="yes" xml:space="preserve">
          <source>For Node.js/Express, consider using &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallback middleware&lt;/a&gt;.</source>
          <target state="translated">Node.js / Expressの場合は、&lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallbackミドルウェアの&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="b1e8e9f52767f0036500ce99a480baa669242b2c" translate="yes" xml:space="preserve">
          <source>For TypeScript users, &lt;code&gt;vue-router@3.0+&lt;/code&gt; requires &lt;code&gt;vue@2.5+&lt;/code&gt;, and vice versa.</source>
          <target state="translated">活字体のユーザーの場合、 &lt;code&gt;vue-router@3.0+&lt;/code&gt; が必要です &lt;code&gt;vue@2.5+&lt;/code&gt; 、およびその逆を。</target>
        </trans-unit>
        <trans-unit id="b84487772f3e0cb7184255459fbb540893ece7a9" translate="yes" xml:space="preserve">
          <source>For advanced usage, check out the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">高度な使用法については、&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js&quot;&gt;例を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="489c0c70c863fa104256940ebe3fe288f47435b7" translate="yes" xml:space="preserve">
          <source>For advanced usage, check out the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">高度な使用法については、&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js&quot;&gt;例を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="57531f3c0d6aa0bea14c7b9b683c5a03f5eb3b51" translate="yes" xml:space="preserve">
          <source>For example, with the above route config, the URL &lt;code&gt;/foo/bar&lt;/code&gt; will match both the parent route record and the child route record.</source>
          <target state="translated">たとえば、上記のルート構成では、URL &lt;code&gt;/foo/bar&lt;/code&gt; は親ルートレコードと子ルートレコードの両方に一致します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="036a717afd24a521f1446cb57757a166d602dd99" translate="yes" xml:space="preserve">
          <source>For more details see &lt;a href=&quot;../guide/advanced/scroll-behavior&quot;&gt;Scroll Behavior&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/advanced/scroll-behavior&quot;&gt;スクロール動作を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ac4e81a56cc8dc13ec2ca3b54c9e2e00def537b9" translate="yes" xml:space="preserve">
          <source>For other advanced usage, checkout the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">その他の高度な使用法については、&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js&quot;&gt;例を確認してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="28f8c3f2cdac27443d5de2aaa51cb565413b312b" translate="yes" xml:space="preserve">
          <source>Full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js&quot;&gt;ここに&lt;/a&gt;完全な例があります。</target>
        </trans-unit>
        <trans-unit id="56e2a78217e3fd68618113a0c15dbe403b951d96" translate="yes" xml:space="preserve">
          <source>Function mode</source>
          <target state="translated">機能モード</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="4e8ab6c07a3acf4c2204d6b70bcb472586550981" translate="yes" xml:space="preserve">
          <source>Given the app we created in the last chapter:</source>
          <target state="translated">最終章で作成したアプリを考えると</target>
        </trans-unit>
        <trans-unit id="04b81c50025b47abd4de06d5d2d43a3f431b8b3e" translate="yes" xml:space="preserve">
          <source>Global After Hooks</source>
          <target state="translated">グローバルアフターフック</target>
        </trans-unit>
        <trans-unit id="39fe16e37e3132d15e0fbf4f80ae9c736ada4b64" translate="yes" xml:space="preserve">
          <source>Global Before Guards</source>
          <target state="translated">グローバル ビフォアガード</target>
        </trans-unit>
        <trans-unit id="c78825b4c48ff8948dc48798ccc5fe8425bd6e4d" translate="yes" xml:space="preserve">
          <source>Global Resolve Guards</source>
          <target state="translated">グローバルリゾルブガード</target>
        </trans-unit>
        <trans-unit id="571bfb07cac37435662705c30ebba47b6a968777" translate="yes" xml:space="preserve">
          <source>Global before guards are called in creation order, whenever a navigation is triggered. Guards may be resolved asynchronously, and the navigation is considered &lt;strong&gt;pending&lt;/strong&gt; before all hooks have been resolved.</source>
          <target state="translated">ナビゲーションがトリガーされるたびに、グローバルbefore beforeガードが作成順に呼び出されます。ガードは非同期に解決される可能性があり、ナビゲーションはすべてのフックが解決さ&lt;strong&gt;れる&lt;/strong&gt;前に&lt;strong&gt;保留中&lt;/strong&gt;と見なされます。</target>
        </trans-unit>
        <trans-unit id="dd9c40ae1404d776848a122807b1c216f9fd4ff8" translate="yes" xml:space="preserve">
          <source>Globally configure &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; default active class for exact matches. Also see &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;.</source>
          <target state="translated">完全一致の &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; デフォルトアクティブクラスをグローバルに設定します。&lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="bad55014845b46b06bee9764378d62ab9c019c1a" translate="yes" xml:space="preserve">
          <source>Globally configure &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; default active class. Also see &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; のデフォルトのアクティブクラスをグローバルに設定します。&lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ea78ebe08d1386045a768205f28719d8bbea6c68" translate="yes" xml:space="preserve">
          <source>Grouping Components in the Same Chunk</source>
          <target state="translated">同じチャンク内でのコンポーネントのグループ化</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="d0af1b42be6477058b4fe3d76bd1657cbdda202b" translate="yes" xml:space="preserve">
          <source>HTML5 History Mode</source>
          <target state="translated">HTML5 ヒストリーモード</target>
        </trans-unit>
        <trans-unit id="66f998d2f920d7fa8d57fe7e8745ef748da09071" translate="yes" xml:space="preserve">
          <source>HTML5 history mode or hash mode, with auto-fallback in IE9</source>
          <target state="translated">HTML5 の履歴モードまたはハッシュモード、IE9 でのオートフォールバック付き</target>
        </trans-unit>
        <trans-unit id="b0d68b54e7e4109ad893204b6f26e0708c9cc4d6" translate="yes" xml:space="preserve">
          <source>Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; directly in their browser. Now that's ugly.</source>
          <target state="translated">ただし、ここで問題が発生します。私たちのアプリは単一ページのクライアント側アプリであり、適切なサーバー構成がないため、ユーザーがブラウザーで &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; に直接アクセスすると、404エラーが発生します。今それは醜いです。</target>
        </trans-unit>
        <trans-unit id="a34e0feba7b9eeabcd77ca390cdeaec4a234b764" translate="yes" xml:space="preserve">
          <source>History Manipulation</source>
          <target state="translated">歴史の操作</target>
        </trans-unit>
        <trans-unit id="0246196abd9134d11e797df909a2239577c70d5a" translate="yes" xml:space="preserve">
          <source>However, you can access the instance by passing a callback to &lt;code&gt;next&lt;/code&gt;. The callback will be called when the navigation is confirmed, and the component instance will be passed to the callback as the argument:</source>
          <target state="translated">ただし、コールバックを &lt;code&gt;next&lt;/code&gt; に渡すことでインスタンスにアクセスできます。ナビゲーションが確認されるとコールバックが呼び出され、コンポーネントインスタンスが引数としてコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="f7c32e5e91730c7288c256a7228e1273afb0bdd4" translate="yes" xml:space="preserve">
          <source>If a falsy value or an empty object is returned, no scrolling will happen.</source>
          <target state="translated">誤った値や空のオブジェクトが返された場合、スクロールは行われません。</target>
        </trans-unit>
        <trans-unit id="49910c5f3a09c1a2a5644b36aaa9d21c610f608b" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; to your &lt;code&gt;a&lt;/code&gt; element, you must omit the &lt;code&gt;@click=&quot;navigate&quot;&lt;/code&gt; handler.</source>
          <target state="translated">あなたが追加した場合 &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; あなたに要素は、省略しなければなりません &lt;code&gt;@click=&quot;navigate&quot;&lt;/code&gt; ハンドラを。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cf49d509e0a3607c76d7e53f4e62c0f9c2c6cc1" translate="yes" xml:space="preserve">
          <source>If you want to simulate the &quot;scroll to anchor&quot; behavior:</source>
          <target state="translated">アンカーへのスクロール」の動作をシミュレートしたい場合。</target>
        </trans-unit>
        <trans-unit id="8ae10a7d8459debcadacac2bb97288eee8b865ff" translate="yes" xml:space="preserve">
          <source>In 2.2.0+, optionally provide &lt;code&gt;onComplete&lt;/code&gt; and &lt;code&gt;onAbort&lt;/code&gt; callbacks to &lt;code&gt;router.push&lt;/code&gt; or &lt;code&gt;router.replace&lt;/code&gt; as the 2nd and 3rd arguments. These callbacks will be called when the navigation either successfully completed (after all async hooks are resolved), or aborted (navigated to the same route, or to a different route before current navigation has finished), respectively. In 3.1.0+, you can omit the 2nd and 3rd parameter and &lt;code&gt;router.push&lt;/code&gt;/&lt;code&gt;router.replace&lt;/code&gt; will return a promise instead if Promises are supported.</source>
          <target state="translated">2.2.0以降では、オプションで、2番目と3番目の引数として &lt;code&gt;router.push&lt;/code&gt; または &lt;code&gt;router.replace&lt;/code&gt; への &lt;code&gt;onComplete&lt;/code&gt; および &lt;code&gt;onAbort&lt;/code&gt; コールバックを提供します。これらのコールバックは、ナビゲーションが正常に完了したとき（すべての非同期フックが解決された後）、または中止されたとき（同じルートに移動したり、現在のナビゲーションが完了する前に別のルートに移動したり）に呼び出されます。3.1.0以降では、2番目と3番目のパラメーターを省略でき、Promiseがサポートされている場合は &lt;code&gt;router.push&lt;/code&gt; / &lt;code&gt;router.replace&lt;/code&gt; が代わりにpromiseを返します。</target>
        </trans-unit>
        <trans-unit id="ed362c80e4a0c1d90cf802b990d676db62248b7d" translate="yes" xml:space="preserve">
          <source>In HTML5 history mode, &lt;code&gt;router-link&lt;/code&gt; will intercept the click event so that the browser doesn't try to reload the page.</source>
          <target state="translated">HTML5履歴モードでは、ブラウザーがページを再読み込みしないように、 &lt;code&gt;router-link&lt;/code&gt; がクリックイベントをインターセプトします。</target>
        </trans-unit>
        <trans-unit id="123c58d7d20c981fdc7b0a2f037f2f3fb1149e14" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;$route.params&lt;/code&gt;, the &lt;code&gt;$route&lt;/code&gt; object also exposes other useful information such as &lt;code&gt;$route.query&lt;/code&gt; (if there is a query in the URL), &lt;code&gt;$route.hash&lt;/code&gt;, etc. You can check out the full details in the &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$route.params&lt;/code&gt; に加えて、 &lt;code&gt;$route&lt;/code&gt; オブジェクトは &lt;code&gt;$route.query&lt;/code&gt; （URLにクエリがある場合）、 &lt;code&gt;$route.hash&lt;/code&gt; などの他の有用な情報も公開します。詳細については、&lt;a href=&quot;../../api/index#the-route-object&quot;&gt;APIリファレンス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24c9352ede93756918856c618a17b8a9c6356bed" translate="yes" xml:space="preserve">
          <source>In both cases, the router will navigate to the path &lt;code&gt;/user/123&lt;/code&gt;.</source>
          <target state="translated">どちらの場合も、ルーターはパス &lt;code&gt;/user/123&lt;/code&gt; に移動します。</target>
        </trans-unit>
        <trans-unit id="aaf00c4093074d65696e6e9ab00bb1db82826baf" translate="yes" xml:space="preserve">
          <source>In-Component Guards</source>
          <target state="translated">コンポーネント内ガード</target>
        </trans-unit>
        <trans-unit id="ab960247ddc5acc97d8c2a113b63893d536bcf7c" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;vue-router&lt;/code&gt; after Vue and it will install itself automatically:</source>
          <target state="translated">Vueの後に &lt;code&gt;vue-router&lt;/code&gt; を含めると、自動的にインストールされます。</target>
        </trans-unit>
        <trans-unit id="ad7ae3fbd0a8cc0491d2e986f5c89a82826853c5" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;$route&lt;/code&gt; watcher callbacks</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; ウォッチャーのコールバック内</target>
        </trans-unit>
        <trans-unit id="d820495ee5f4040175aec835f4a5b5a33ef1fa06" translate="yes" xml:space="preserve">
          <source>Inside components as &lt;code&gt;this.$route&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;this.$route&lt;/code&gt; としてコンポーネントの内部</target>
        </trans-unit>
        <trans-unit id="6b74dc7409c8cacfbc49aeb2ec96c522df9be3f7" translate="yes" xml:space="preserve">
          <source>Inside navigation guards as the first two arguments:</source>
          <target state="translated">最初の2つの引数としてナビゲーションの内側にガードします。</target>
        </trans-unit>
        <trans-unit id="c876f7b6d25954e644f1c0f79615345a5db0f583" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;scrollBehavior&lt;/code&gt; function as the first two arguments:</source>
          <target state="translated">最初の2つの引数としての &lt;code&gt;scrollBehavior&lt;/code&gt; 関数内：</target>
        </trans-unit>
        <trans-unit id="bd040edfed95e6068f33b83c57406115b80d4532" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;IIS UrlRewrite&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;IIS UrlRewrite&lt;/a&gt;をインストールする</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="91d60654c70276c1f55519257a6b16f94cdd53b8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;mod_rewrite&lt;/code&gt;, you could also use &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource&quot;&gt;&lt;code&gt;FallbackResource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mod_rewrite&lt;/code&gt; の代わりに、&lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource&quot;&gt; &lt;code&gt;FallbackResource&lt;/code&gt; を&lt;/a&gt;使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f2f94321c0c12321807b0fb675d4b99213d9f776" translate="yes" xml:space="preserve">
          <source>Internet Information Services (IIS)</source>
          <target state="translated">インターネット情報サービス(IIS)</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="7b38a0e68956f86b8611c4bc859e451a256e5d62" translate="yes" xml:space="preserve">
          <source>It acts like &lt;code&gt;router.push&lt;/code&gt;, the only difference is that it navigates without pushing a new history entry, as its name suggests - it replaces the current entry.</source>
          <target state="translated">&lt;code&gt;router.push&lt;/code&gt; のように動作します。唯一の違いは、名前が示すように、新しい履歴エントリをプッシュせずにナビゲートすることです。現在のエントリを置き換えます。</target>
        </trans-unit>
        <trans-unit id="3b0a42d5487908d2325dff65c967d5d5a60b2223" translate="yes" xml:space="preserve">
          <source>It is also possible to determine the transition to use dynamically based on the relationship between the target route and current route:</source>
          <target state="translated">また、対象経路と現在の経路との関係に基づいて、動的に使用する遷移を決定することも可能である。</target>
        </trans-unit>
        <trans-unit id="a7b7d69c290b5bd596fb28a4ccea84635c6bdac7" translate="yes" xml:space="preserve">
          <source>It is possible to create complex layouts using named views with nested views. When doing so, you will also need to name nested &lt;code&gt;router-view&lt;/code&gt; components used. Let's take a Settings panel example:</source>
          <target state="translated">ネストされたビューを持つ名前付きビューを使用して、複雑なレイアウトを作成することが可能です。その際、使用するネストされた &lt;code&gt;router-view&lt;/code&gt; コンポーネントにも名前を付ける必要があります。設定パネルの例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="dd1b5f5c29b6497f61ce7508d8bab18e0dd25a54" translate="yes" xml:space="preserve">
          <source>It is worth mentioning that Vue Router navigation methods (&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;) work consistently in all router modes (&lt;code&gt;history&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;abstract&lt;/code&gt;).</source>
          <target state="translated">Vueルーターのナビゲーションメソッド（ &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;replace&lt;/code&gt; 、 &lt;code&gt;go&lt;/code&gt; ）は、すべてのルーターモード（ &lt;code&gt;history&lt;/code&gt; 、 &lt;code&gt;hash&lt;/code&gt; 、 &lt;code&gt;abstract&lt;/code&gt; ）で一貫して機能することに言及する価値があります。</target>
        </trans-unit>
        <trans-unit id="3d7b30b16b9eb13c34964f528c2928fc9569c73c" translate="yes" xml:space="preserve">
          <source>It works the same way in both HTML5 history mode and hash mode, so if you ever decide to switch mode, or when the router falls back to hash mode in IE9, nothing needs to be changed.</source>
          <target state="translated">それは、HTML5の歴史モードとハッシュモードの両方で同じように動作します,あなたが今までにモードを切り替えることにした場合,またはルータがIE9でハッシュモードに戻って落ちるとき,何も変更する必要はありません.</target>
        </trans-unit>
        <trans-unit id="ebdf11f436055ccb0f4e6d63818ee613b025039c" translate="yes" xml:space="preserve">
          <source>It's possible to hook this up with events from a page-level transition component to make the scroll behavior play nicely with your page transitions, but due to the possible variance and complexity in use cases, we simply provide this primitive to enable specific userland implementations.</source>
          <target state="translated">これをページレベルの遷移コンポーネントからのイベントでフックアップして、スクロールの動作をページ遷移とうまく連動させることも可能ですが、ユースケースには多様性と複雑性があるため、特定のユーザーランドの実装を可能にするために、このプリミティブを提供しています。</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="2023893211646b38329738f0c75758b66f90c972" translate="yes" xml:space="preserve">
          <source>Lazy Loading Routes</source>
          <target state="translated">遅延読み込みルート</target>
        </trans-unit>
        <trans-unit id="960763001b8d9b9065802f6e1547e28eeab1142a" translate="yes" xml:space="preserve">
          <source>Let's assume we have a &lt;code&gt;Post&lt;/code&gt; component that needs to fetch the data for a post based on &lt;code&gt;$route.params.id&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;$route.params.id&lt;/code&gt; 基づいて投稿のデータをフェッチする必要がある &lt;code&gt;Post&lt;/code&gt; コンポーネントがあるとしましょう：</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="4915ca87eec25d13d5ac866672b6c4238dab8b71" translate="yes" xml:space="preserve">
          <source>Links with automatic active CSS classes</source>
          <target state="translated">自動的にアクティブなCSSクラスを持つリンク</target>
        </trans-unit>
        <trans-unit id="92680ca040170e2f3c165102fde3e8bf6487a0ea" translate="yes" xml:space="preserve">
          <source>Matching Priority</source>
          <target state="translated">マッチング優先度</target>
        </trans-unit>
        <trans-unit id="3211dfc6706021083577bbc609b0178a57df986b" translate="yes" xml:space="preserve">
          <source>Modular, component-based router configuration</source>
          <target state="translated">モジュール型、コンポーネントベースのルータ構成</target>
        </trans-unit>
        <trans-unit id="b33d0a16416aadff4b68e3238fad1ab174a916bb" translate="yes" xml:space="preserve">
          <source>Named Routes</source>
          <target state="translated">指定されたルート</target>
        </trans-unit>
        <trans-unit id="4b4baaa726aeae2df5efab33c30dccfc59484a03" translate="yes" xml:space="preserve">
          <source>Named Views</source>
          <target state="translated">名前付きビュー</target>
        </trans-unit>
        <trans-unit id="af41b08c1d868960ee0e9d9af1ed763d0fb61bc6" translate="yes" xml:space="preserve">
          <source>Native Node.js</source>
          <target state="translated">ネイティブNode.js</target>
        </trans-unit>
        <trans-unit id="07230c4db479422597919304a18bd14cae18e95e" translate="yes" xml:space="preserve">
          <source>Navigation Guards</source>
          <target state="translated">ナビゲーションガード</target>
        </trans-unit>
        <trans-unit id="ad97c58c21ae3ad462c67b621752398d8cf7de88" translate="yes" xml:space="preserve">
          <source>Navigation confirmed.</source>
          <target state="translated">ナビゲーションを確認しました。</target>
        </trans-unit>
        <trans-unit id="1aaed24547504400177ecf8ccb6c88025b631a06" translate="yes" xml:space="preserve">
          <source>Navigation triggered.</source>
          <target state="translated">ナビゲーションがトリガーされました。</target>
        </trans-unit>
        <trans-unit id="0b5ff356281045481c2265d94104931fc97e4610" translate="yes" xml:space="preserve">
          <source>Nested Named Views</source>
          <target state="translated">入れ子になった名前付きビュー</target>
        </trans-unit>
        <trans-unit id="bef32b44309c819256ef91505f3ce46153114806" translate="yes" xml:space="preserve">
          <source>Nested Routes</source>
          <target state="translated">入れ子になったルート</target>
        </trans-unit>
        <trans-unit id="2f30bbc93aff9a021a6bb7d40bb01c7e1a30b727" translate="yes" xml:space="preserve">
          <source>Nested route/view mapping</source>
          <target state="translated">入れ子になったルート/ビューマップ</target>
        </trans-unit>
        <trans-unit id="cfb4b21b400ed7bdabab34b9e79d6404c608dbeb" translate="yes" xml:space="preserve">
          <source>New in 2.8.0</source>
          <target state="translated">2.8.0の新機能</target>
        </trans-unit>
        <trans-unit id="72a0e8bd8ba8cfc1de48c1ade52eb80e3b492ce5" translate="yes" xml:space="preserve">
          <source>Not to worry: To fix the issue, all you need to do is add a simple catch-all fallback route to your server. If the URL doesn't match any static assets, it should serve the same &lt;code&gt;index.html&lt;/code&gt; page that your app lives in. Beautiful, again!</source>
          <target state="translated">心配する必要はありません。問題を修正するには、サーバーに簡単なキャッチオールフォールバックルートを追加するだけです。URLがどの静的アセットとも一致しない場合、アプリが存在するのと同じ &lt;code&gt;index.html&lt;/code&gt; ページを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="42e1c28f71b271e74095cb412d9718f1a1dd3d89" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; are not applied on the route that redirects, only on its target. In the example below, adding a &lt;code&gt;beforeEnter&lt;/code&gt; or &lt;code&gt;beforeLeave&lt;/code&gt; guard to the &lt;code&gt;/a&lt;/code&gt; route would not have any effect.</source>
          <target state="translated">&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;ナビゲーションガード&lt;/a&gt;はリダイレクトするルートには適用されず、そのターゲットにのみ適用されることに注意してください。以下の例では、 &lt;code&gt;beforeEnter&lt;/code&gt; または &lt;code&gt;beforeLeave&lt;/code&gt; ガードを &lt;code&gt;/a&lt;/code&gt; ルートに追加しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="b0e81fa927ae576a7a77d7347aa93d6d3b675c08" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;beforeRouteEnter&lt;/code&gt; is the only guard that supports passing a callback to &lt;code&gt;next&lt;/code&gt;. For &lt;code&gt;beforeRouteUpdate&lt;/code&gt; and &lt;code&gt;beforeRouteLeave&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; is already available, so passing a callback is unnecessary and therefore &lt;em&gt;not supported&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;beforeRouteEnter&lt;/code&gt; は、コールバックを &lt;code&gt;next&lt;/code&gt; に渡すことをサポートする唯一のガードであることに注意してください。 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; と &lt;code&gt;beforeRouteLeave&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; すでに利用可能であるので、コールバックを渡すことは不要であるため、&lt;em&gt;サポートされていません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="66819e4b27a76327ff3f7f1554dfc32762722dc5" translate="yes" xml:space="preserve">
          <source>Nothing needs to change in the route config, just use &lt;code&gt;Foo&lt;/code&gt; as usual:</source>
          <target state="translated">ルート設定を変更する必要はありません。通常どおり &lt;code&gt;Foo&lt;/code&gt; を使用してください：</target>
        </trans-unit>
        <trans-unit id="b9854b4ee72e20cf46424b31f8fb60496aa9d57a" translate="yes" xml:space="preserve">
          <source>Notice that a &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; automatically gets the &lt;code&gt;.router-link-active&lt;/code&gt; class when its target route is matched. You can learn more about it in its &lt;a href=&quot;../api/index#router-link&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">お知らせこと &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 、自動的に取得します &lt;code&gt;.router-link-active&lt;/code&gt; のターゲットルートがマッチしたクラスを。詳細については、&lt;a href=&quot;../api/index#router-link&quot;&gt;APIリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="40eddaef857ef5cfaedb727b42037014203c4199" translate="yes" xml:space="preserve">
          <source>Now URLs like &lt;code&gt;/user/foo&lt;/code&gt; and &lt;code&gt;/user/bar&lt;/code&gt; will both map to the same route.</source>
          <target state="translated">これで、 &lt;code&gt;/user/foo&lt;/code&gt; や &lt;code&gt;/user/bar&lt;/code&gt; などのURL は両方とも同じルートにマップされます。</target>
        </trans-unit>
        <trans-unit id="7f58022f766261caffba5edc95b9a9f6abe4cafe" translate="yes" xml:space="preserve">
          <source>Object mode</source>
          <target state="translated">オブジェクトモード</target>
        </trans-unit>
        <trans-unit id="cbe6bf860b85b361d427ae111c8df54a68d83e74" translate="yes" xml:space="preserve">
          <source>One consequence of this is that &lt;code&gt;&amp;lt;router-link to=&quot;/&quot;&amp;gt;&lt;/code&gt; will be active for every route! To force the link into &quot;exact match mode&quot;, use the &lt;code&gt;exact&lt;/code&gt; prop:</source>
          <target state="translated">この結果、 &lt;code&gt;&amp;lt;router-link to=&quot;/&quot;&amp;gt;&lt;/code&gt; がすべてのルートでアクティブになります。リンクを「完全一致モード」に強制するには、 &lt;code&gt;exact&lt;/code&gt; プロップを使用します。</target>
        </trans-unit>
        <trans-unit id="22cb362145457cd718598c267d42d98d75403097" translate="yes" xml:space="preserve">
          <source>One thing to note when using routes with params is that when the user navigates from &lt;code&gt;/user/foo&lt;/code&gt; to &lt;code&gt;/user/bar&lt;/code&gt;, &lt;strong&gt;the same component instance will be reused&lt;/strong&gt;. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. &lt;strong&gt;However, this also means that the lifecycle hooks of the component will not be called&lt;/strong&gt;.</source>
          <target state="translated">paramsでルートを使用する際に注意すべき点の1つは、ユーザーが &lt;code&gt;/user/foo&lt;/code&gt; から &lt;code&gt;/user/bar&lt;/code&gt; に移動&lt;strong&gt;すると、同じコンポーネントインスタンスが再利用されること&lt;/strong&gt;です。両方のルートが同じコンポーネントをレンダリングするため、古いインスタンスを破棄して新しいインスタンスを作成するよりも効率的です。&lt;strong&gt;ただし、これは、コンポーネントのライフサイクルフックが呼び出されないことも意味します&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="046793d8826f7ce628a8c0fe40b3cbce54497fb1" translate="yes" xml:space="preserve">
          <source>Or even use a function for dynamic redirecting:</source>
          <target state="translated">あるいは、動的リダイレクトのための関数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="3d1f5ce248d4fbbc0d11f219d548dfc5dd5adf41" translate="yes" xml:space="preserve">
          <source>Or, use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;navigation guard&lt;/a&gt; introduced in 2.2:</source>
          <target state="translated">または、2.2で導入された &lt;code&gt;beforeRouteUpdate&lt;/code&gt; &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;ナビゲーションガードを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="91249dc20c49d676cce833a9923195f2e2d486ef" translate="yes" xml:space="preserve">
          <source>Other Guides</source>
          <target state="translated">その他のガイド</target>
        </trans-unit>
        <trans-unit id="c2019c2002b88d1423b00871a4756c80a3a2781e" translate="yes" xml:space="preserve">
          <source>Passing Props to Route Components</source>
          <target state="translated">小道具をルートコンポーネントに渡す</target>
        </trans-unit>
        <trans-unit id="4b26aba5cee750beb1314811649192d3f41dcc61" translate="yes" xml:space="preserve">
          <source>Per-Route Guard</source>
          <target state="translated">ルートごとのガード</target>
        </trans-unit>
        <trans-unit id="9c95ba720f7490c64c5284e62aabf2337f81bd7a" translate="yes" xml:space="preserve">
          <source>Per-Route Transition</source>
          <target state="translated">経路ごとの遷移</target>
        </trans-unit>
        <trans-unit id="bc84978ebebfacb7e5a7426cf2bc186f4e115de6" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="translated">Programmatic</target>
        </trans-unit>
        <trans-unit id="6ac41420921db4b82a6fc5a064c1c845ef1ef7bc" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation</source>
          <target state="translated">プログラムナビゲーション</target>
        </trans-unit>
        <trans-unit id="94ea926127d780e977ef91fb29c2e11e32ef8f1a" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL. See &lt;a href=&quot;../guide/essentials/navigation&quot;&gt;Programmatic Navigation&lt;/a&gt; for more details.</source>
          <target state="translated">プログラムで新しいURLに移動します。詳細については、&lt;a href=&quot;../guide/essentials/navigation&quot;&gt;プログラムによるナビゲーション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe8d3baced9c5e7884c8c86724de198f8f80e16a" translate="yes" xml:space="preserve">
          <source>Provide custom query string parse / stringify functions. Overrides the default.</source>
          <target state="translated">カスタムのクエリ文字列パース/文字列化関数を提供します。デフォルトを上書きします。</target>
        </trans-unit>
        <trans-unit id="96f0529aa6c0b6cd2083e3a6368bba819840a7d7" translate="yes" xml:space="preserve">
          <source>Reacting to Params Changes</source>
          <target state="translated">パラムの変更への対応</target>
        </trans-unit>
        <trans-unit id="526ba9b15d7e0af70c58f07b6eccd992ee1bc4bb" translate="yes" xml:space="preserve">
          <source>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</source>
          <target state="translated">実際のアプリUIは、通常、複数のレベルの深いネストされたコンポーネントで構成されています。また、例えばURLのセグメントがネストされたコンポーネントの特定の構造に対応していることも非常によくあります。</target>
        </trans-unit>
        <trans-unit id="58cfcdca5ed542240131e60e7a5af5e83f61e786" translate="yes" xml:space="preserve">
          <source>Redirect</source>
          <target state="translated">Redirect</target>
        </trans-unit>
        <trans-unit id="872a53613a6cd7a171894de65cd005be5a189f12" translate="yes" xml:space="preserve">
          <source>Redirect and Alias</source>
          <target state="translated">リダイレクトとエイリアス</target>
        </trans-unit>
        <trans-unit id="05cef8495ed3efecc490bc4d66c9957eb645c538" translate="yes" xml:space="preserve">
          <source>Redirecting is also done in the &lt;code&gt;routes&lt;/code&gt; configuration. To redirect from &lt;code&gt;/a&lt;/code&gt; to &lt;code&gt;/b&lt;/code&gt;:</source>
          <target state="translated">リダイレクトは &lt;code&gt;routes&lt;/code&gt; 設定でも行われます。 &lt;code&gt;/a&lt;/code&gt; から &lt;code&gt;/b&lt;/code&gt; にリダイレクトするには：</target>
        </trans-unit>
        <trans-unit id="5e03acae55c659588b259583338e24a88915601b" translate="yes" xml:space="preserve">
          <source>Register a callback which will be called when an error is caught during a route navigation. Note for an error to be called, it must be one of the following scenarios:</source>
          <target state="translated">ルートナビゲーション中にエラーが発生したときに呼び出されるコールバックを登録します。エラーがコールされるためには、以下のシナリオのいずれかでなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="44643ea5c5697be4b30047afe003b8f7dc43c4d9" translate="yes" xml:space="preserve">
          <source>Regular params will only match characters in between url fragments, separated by &lt;code&gt;/&lt;/code&gt;. If we want to match &lt;strong&gt;anything&lt;/strong&gt;, we can use the asterisk (&lt;code&gt;*&lt;/code&gt;):</source>
          <target state="translated">通常のパラメータは、 &lt;code&gt;/&lt;/code&gt; で区切られた、URLフラグメント間の文字のみに一致します。&lt;strong&gt;何とでも&lt;/strong&gt;一致させたい場合は、アスタリスク（ &lt;code&gt;*&lt;/code&gt; ）を使用できます。</target>
        </trans-unit>
        <trans-unit id="2cb1e457692275b0cbe497b5cdfa463b963b481c" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;params or query changes won't trigger enter/leave navigation guards&lt;/strong&gt;. You can either &lt;a href=&quot;../essentials/dynamic-matching#reacting-to-params-changes&quot;&gt;watch the &lt;code&gt;$route&lt;/code&gt; object&lt;/a&gt; to react to those changes, or use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt; in-component guard.</source>
          <target state="translated">&lt;strong&gt;パラメータまたはクエリの変更は、Enter / Leaveナビゲーションガードをトリガーしない&lt;/strong&gt;ことに&lt;strong&gt;注意して&lt;/strong&gt;ください。あなたは、どちらかの可能&lt;a href=&quot;../essentials/dynamic-matching#reacting-to-params-changes&quot;&gt;観 &lt;code&gt;$route&lt;/code&gt; オブジェクトは&lt;/a&gt;、それらの変化に対応するために、または使用 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; における成分ガードを。</target>
        </trans-unit>
        <trans-unit id="88429579c754b2e4d3683288db9f7a924c0974c7" translate="yes" xml:space="preserve">
          <source>Resolve async route components.</source>
          <target state="translated">非同期ルートコンポーネントを解決します。</target>
        </trans-unit>
        <trans-unit id="e78584839e5838f29b10c37405eaf8a6ac7c76fe" translate="yes" xml:space="preserve">
          <source>Returning the &lt;code&gt;savedPosition&lt;/code&gt; will result in a native-like behavior when navigating with back/forward buttons:</source>
          <target state="translated">&lt;code&gt;savedPosition&lt;/code&gt; を返すと、戻る/進むボタンで移動するときにネイティブのような動作になります。</target>
        </trans-unit>
        <trans-unit id="cd3ad3cf949ec4b3e1af61f8f3065866b05512ce" translate="yes" xml:space="preserve">
          <source>Returns an Array of the components (definition/constructor, not instances) matched by the provided location or the current route. This is mostly used during server-side rendering to perform data prefetching.</source>
          <target state="translated">指定した場所または現在のルートにマッチしたコンポーネント(インスタンスではなく、定義やコンストラクタ)の配列を返します。これは、主にサーバサイドのレンダリングでデータのプリフェッチを行う際に使用します。</target>
        </trans-unit>
        <trans-unit id="08f96c7a98ceba257c7a2cba704c62f75cb87b83" translate="yes" xml:space="preserve">
          <source>Reverse URL resolving. Given location in form same as used in &lt;code&gt;&amp;lt;router-link/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">逆URL解決。 &lt;code&gt;&amp;lt;router-link/&amp;gt;&lt;/code&gt; 使用されるのと同じ形式の場所を指定します。</target>
        </trans-unit>
        <trans-unit id="f178d9cbdaadbfcdce35cc4e0b16c043f79ef6fd" translate="yes" xml:space="preserve">
          <source>Route Meta Fields</source>
          <target state="translated">ルートメタフィールド</target>
        </trans-unit>
        <trans-unit id="efaaab5dc398bef87cbcd2fcea3d10d70d8bbd86" translate="yes" xml:space="preserve">
          <source>Route Object Properties</source>
          <target state="translated">ルート オブジェクトのプロパティ</target>
        </trans-unit>
        <trans-unit id="fdf24b2ac491ab4f0861f5f876118c8447caa002" translate="yes" xml:space="preserve">
          <source>Route params, query, wildcards</source>
          <target state="translated">ルートパラメータ、クエリ、ワイルドカード</target>
        </trans-unit>
        <trans-unit id="aa1effcfd004511edf487558b241065fd6c6c439" translate="yes" xml:space="preserve">
          <source>Route-Based Dynamic Transition</source>
          <target state="translated">ルートベースの動的遷移</target>
        </trans-unit>
        <trans-unit id="61c1d27f7171536b1ecc5df8e1f3d8c5c9fefc7a" translate="yes" xml:space="preserve">
          <source>Router Construction Options</source>
          <target state="translated">ルーター建設オプション</target>
        </trans-unit>
        <trans-unit id="2e1838554fec8632f2e27e2232f0a9c553143110" translate="yes" xml:space="preserve">
          <source>Router Instance Methods</source>
          <target state="translated">ルータインスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="e7f39db9665e9e7b15d490cea293333b9ca9f2fb" translate="yes" xml:space="preserve">
          <source>Router Instance Properties</source>
          <target state="translated">ルータインスタンスのプロパティ</target>
        </trans-unit>
        <trans-unit id="833b49319798dd3229365eff801afcd66c753ef8" translate="yes" xml:space="preserve">
          <source>RouterOptions.base</source>
          <target state="translated">RouterOptions.base</target>
        </trans-unit>
        <trans-unit id="5c94ab4afd451a6c75be941ba1a332f700c7b271" translate="yes" xml:space="preserve">
          <source>RouterOptions.fallback</source>
          <target state="translated">RouterOptions.fallback</target>
        </trans-unit>
        <trans-unit id="a6a71a3c615b71fa18dfabe16958efe8a954be43" translate="yes" xml:space="preserve">
          <source>RouterOptions.linkActiveClass</source>
          <target state="translated">RouterOptions.linkActiveClass</target>
        </trans-unit>
        <trans-unit id="a3b414a25a718d66edd0a60b09fe7e8b14feeced" translate="yes" xml:space="preserve">
          <source>RouterOptions.linkExactActiveClass</source>
          <target state="translated">RouterOptions.linkExactActiveClass</target>
        </trans-unit>
        <trans-unit id="b1f3441c2a652d1c9f341126405e100b126d5dda" translate="yes" xml:space="preserve">
          <source>RouterOptions.mode</source>
          <target state="translated">RouterOptions.mode</target>
        </trans-unit>
        <trans-unit id="02a0c6b6ad7ff83236c43f2b27e906e5d1da56b2" translate="yes" xml:space="preserve">
          <source>RouterOptions.parseQuery / stringifyQuery</source>
          <target state="translated">RouterOptions.parseQuery/stringifyQuery</target>
        </trans-unit>
        <trans-unit id="ed78fca5da829ceec546e652b1cb232072966088" translate="yes" xml:space="preserve">
          <source>RouterOptions.routes</source>
          <target state="translated">RouterOptions.routes</target>
        </trans-unit>
        <trans-unit id="2c66f8accea4c1855450a7c83268642fa0656f71" translate="yes" xml:space="preserve">
          <source>RouterOptions.scrollBehavior</source>
          <target state="translated">RouterOptions.scrollBehavior</target>
        </trans-unit>
        <trans-unit id="e0596a1adc9bfd16283229a08fe714c7f0e636b8" translate="yes" xml:space="preserve">
          <source>Scroll Behavior</source>
          <target state="translated">スクロール動作</target>
        </trans-unit>
        <trans-unit id="71d0912e026dc7a009be1e6e16b6c856427233a5" translate="yes" xml:space="preserve">
          <source>Second, in webpack 2, we can use the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;dynamic import&lt;/a&gt; syntax to indicate a code-split point:</source>
          <target state="translated">次に、webpack 2では、&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;動的インポート&lt;/a&gt;構文を使用してコード分割ポイントを示すことができます。</target>
        </trans-unit>
        <trans-unit id="910d9257f1da3a588d7c110055be4d2d58d59a55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guide/advanced/navigation-guards#in-component-guards&quot;&gt;In Component Guards&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/advanced/navigation-guards#in-component-guards&quot;&gt;In Component Guardsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0cdbee57c9d61aea21d3f61df384d5d286dbae09" translate="yes" xml:space="preserve">
          <source>See full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/transitions/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/transitions/app.js&quot;&gt;ここで&lt;/a&gt;完全な例を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c263edad49b6f4c271aeaa49c2421987156874d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;append&lt;/code&gt; prop always appends the relative path to the current path. For example, assuming we are navigating from &lt;code&gt;/a&lt;/code&gt; to a relative link &lt;code&gt;b&lt;/code&gt;, without &lt;code&gt;append&lt;/code&gt; we will end up at &lt;code&gt;/b&lt;/code&gt;, but with &lt;code&gt;append&lt;/code&gt; we will end up at &lt;code&gt;/a/b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; propを設定すると、常に相対パスが現在のパスに追加されます。例えば、我々はからナビゲートしていると仮定 &lt;code&gt;/a&lt;/code&gt; 相対リンクに &lt;code&gt;b&lt;/code&gt; ことなく、 &lt;code&gt;append&lt;/code&gt; 我々が終わるであろう &lt;code&gt;/b&lt;/code&gt; が、で &lt;code&gt;append&lt;/code&gt; 我々は、で終わるであろう &lt;code&gt;/a/b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2df78320bc495352bdf39a1085d854418e6cac2" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;replace&lt;/code&gt; prop will call &lt;code&gt;router.replace()&lt;/code&gt; instead of &lt;code&gt;router.push()&lt;/code&gt; when clicked, so the navigation will not leave a history record.</source>
          <target state="translated">設定 &lt;code&gt;replace&lt;/code&gt; 小道具すると呼び出されます &lt;code&gt;router.replace()&lt;/code&gt; の代わりに、 &lt;code&gt;router.push()&lt;/code&gt; をクリックすると、ナビゲーションが履歴を残さないようにします。</target>
        </trans-unit>
        <trans-unit id="46a94dbbd4790f8205b0a817760e72fa622a2361" translate="yes" xml:space="preserve">
          <source>Setting this to &lt;code&gt;false&lt;/code&gt; essentially makes every &lt;code&gt;router-link&lt;/code&gt; navigation a full page refresh in IE9. This is useful when the app is server-rendered and needs to work in IE9, because a hash mode URL does not work with SSR.</source>
          <target state="translated">これを &lt;code&gt;false&lt;/code&gt; に設定すると、IE9ですべての &lt;code&gt;router-link&lt;/code&gt; ナビゲーションが完全にページ更新されます。これは、アプリがサーバーレンダリングされ、IE9で動作する必要がある場合に便利です。ハッシュモードのURLはSSRでは動作しないためです。</target>
        </trans-unit>
        <trans-unit id="671048db110a3469e52979ba873e1f31f52b0adc" translate="yes" xml:space="preserve">
          <source>Signature:</source>
          <target state="translated">Signature:</target>
        </trans-unit>
        <trans-unit id="0a009f19aef724da25b633c4e8ec74c1e6c57a83" translate="yes" xml:space="preserve">
          <source>Signatures:</source>
          <target state="translated">Signatures:</target>
        </trans-unit>
        <trans-unit id="b309129b0928ab5637f1329cc9b1622c1899eda7" translate="yes" xml:space="preserve">
          <source>Since it's just a component, it works with &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;. When using the both together, make sure to use &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; inside:</source>
          <target state="translated">これは単なるコンポーネントであるため、 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; で動作します。両方を併用する場合は、必ず &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; を内部で使用してください。</target>
        </trans-unit>
        <trans-unit id="67617841112e8fc88adea7ca66ce82c7f040a26e" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; is essentially a dynamic component, we can apply transition effects to it the same way using the &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">以来 &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 動的成分は、本質的に、我々はそれを使用して同じ方法トランジション効果を適用することができる &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 成分：</target>
        </trans-unit>
        <trans-unit id="99967819e7c344898b7f5cd24d01b88f4a531300" translate="yes" xml:space="preserve">
          <source>So how do we access this &lt;code&gt;meta&lt;/code&gt; field?</source>
          <target state="translated">では、この &lt;code&gt;meta&lt;/code&gt; フィールドにアクセスするにはどうすればよいでしょうか。</target>
        </trans-unit>
        <trans-unit id="a47509bf5c58ce57a092a288e1bf085394866b2a" translate="yes" xml:space="preserve">
          <source>Sometimes it is more convenient to identify a route with a name, especially when linking to a route or performing navigations. You can give a route a name in the &lt;code&gt;routes&lt;/code&gt; options while creating the Router instance:</source>
          <target state="translated">特にルートにリンクしたり、ナビゲーションを実行する場合は、名前でルートを識別する方が便利な場合があります。ルーターインスタンスの作成中に、 &lt;code&gt;routes&lt;/code&gt; オプションでルートに名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="a6e252d9e94a641f7201be6ee56e2627c06169f7" translate="yes" xml:space="preserve">
          <source>Sometimes the same URL may be matched by multiple routes. In such a case the matching priority is determined by the order of route definition: the earlier a route is defined, the higher priority it gets.</source>
          <target state="translated">同じ URL が複数のルートでマッチすることもあります。このような場合、マッチングの優先度はルート定義の順番によって決定されます:ルートの定義が早いほど優先度が高くなります。</target>
        </trans-unit>
        <trans-unit id="d6c78fa18c05228aa3988fe7758e8dfdfee27b6f" translate="yes" xml:space="preserve">
          <source>Sometimes we may want the active class to be applied to an outer element rather than the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag itself, in that case, you can wrap that element inside a &lt;code&gt;router-link&lt;/code&gt; and use the &lt;code&gt;v-slot&lt;/code&gt; properties to create your link:</source>
          <target state="translated">&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグ自体ではなく、外側の要素にアクティブクラスを適用したい場合があります。その場合、その要素を &lt;code&gt;router-link&lt;/code&gt; 内にラップし、 &lt;code&gt;v-slot&lt;/code&gt; プロパティを使用してリンクを作成できます。</target>
        </trans-unit>
        <trans-unit id="332b325341fba64b850ebd8f2eeaa0d19560cae7" translate="yes" xml:space="preserve">
          <source>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/#chunk-names&quot;&gt;named chunks&lt;/a&gt; by providing a chunk name using a special comment syntax (requires webpack &amp;gt; 2.4):</source>
          <target state="translated">同じルートの下にネストされているすべてのコンポーネントを同じ非同期チャンクにグループ化したい場合があります。これを実現するには、特別なコメント構文を使用してチャンク名を指定することにより、&lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/#chunk-names&quot;&gt;名前付きチャンク&lt;/a&gt;を使用する必要があります（webpack&amp;gt; 2.4が必要）。</target>
        </trans-unit>
        <trans-unit id="0b2711d8ebe3a7a6248cdb5416c095b9588b27d5" translate="yes" xml:space="preserve">
          <source>Sometimes we want &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to render as another tag, e.g &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. Then we can use &lt;code&gt;tag&lt;/code&gt; prop to specify which tag to render to, and it will still listen to click events for navigation.</source>
          <target state="translated">場合によっては、 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; を別のタグとしてレンダリングしたい場合があります（例： &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; )。次に、 &lt;code&gt;tag&lt;/code&gt; propを使用して、どのタグにレンダリングするかを指定できます。それでも、ナビゲーションのためにクリックイベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="559e629883f73acac255b3a777bfc5ed36572151" translate="yes" xml:space="preserve">
          <source>Sometimes you need to display multiple views at the same time instead of nesting them, e.g. creating a layout with a &lt;code&gt;sidebar&lt;/code&gt; view and a &lt;code&gt;main&lt;/code&gt; view. This is where named views come in handy. Instead of having one single outlet in your view, you can have multiple and give each of them a name. A &lt;code&gt;router-view&lt;/code&gt; without a name will be given &lt;code&gt;default&lt;/code&gt; as its name.</source>
          <target state="translated">&lt;code&gt;sidebar&lt;/code&gt; ビューと &lt;code&gt;main&lt;/code&gt; ビューのあるレイアウトを作成するなど、複数のビューをネストするのではなく、同時に表示する必要がある場合があります。これは、名前付きビューが便利な場所です。ビューに単一のコンセントを配置する代わりに、複数のコンセントを使用して、それぞれに名前を付けることができます。 &lt;code&gt;router-view&lt;/code&gt; 名なしで与えられます &lt;code&gt;default&lt;/code&gt; の名前などを。</target>
        </trans-unit>
        <trans-unit id="80c22a281f2411a826028def672b188a9db5ba37" translate="yes" xml:space="preserve">
          <source>Sometimes you need to fetch data from the server when a route is activated. For example, before rendering a user profile, you need to fetch the user's data from the server. We can achieve this in two different ways:</source>
          <target state="translated">ルートがアクティブになったときに、サーバーからデータをフェッチする必要があることがあります。たとえば、ユーザープロファイルをレンダリングする前に、サーバーからユーザーのデータをフェッチする必要があります。これを実現するには、2つの異なる方法があります。</target>
        </trans-unit>
        <trans-unit id="05477b7e20cf8c615743b4d1d92c7caf91c8dcd1" translate="yes" xml:space="preserve">
          <source>Specify the event(s) that can trigger the link navigation.</source>
          <target state="translated">リンクナビゲーションのトリガーとなるイベントを指定します。</target>
        </trans-unit>
        <trans-unit id="068a22f61f3db94269ab675efff014f3fb75087b" translate="yes" xml:space="preserve">
          <source>Technically, both are valid choices - it ultimately depends on the user experience you are aiming for.</source>
          <target state="translated">技術的には、どちらも有効な選択肢ですが、最終的にはあなたが目指すユーザーエクスペリエンスに依存します。</target>
        </trans-unit>
        <trans-unit id="687d29fbc88ced0c0b4cc5e85f3cdff8a6d730b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index#mode&quot;&gt;mode&lt;/a&gt; the router is using.</source>
          <target state="translated">&lt;a href=&quot;index#mode&quot;&gt;モード&lt;/a&gt;ルータが使用しています。</target>
        </trans-unit>
        <trans-unit id="04e697c4c0982279fe937992c14787c25b1f00ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; component is a functional component that renders the matched component for the given path. Components rendered in &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; can also contain its own &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, which will render components for nested paths.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 成分は、与えられたパスの整合コンポーネントを描画する機能要素です。でレンダリングコンポーネント &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 、独自含めることができます &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 、ネストされたパスのコンポーネントをレンダリングしますました。</target>
        </trans-unit>
        <trans-unit id="08608ef6a2b61ff5e3d12ea1a2a5973072989475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; here is a top-level outlet. It renders the component matched by a top level route. Similarly, a rendered component can also contain its own, nested &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. For example, if we add one inside the &lt;code&gt;User&lt;/code&gt; component's template:</source>
          <target state="translated">ここの &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; はトップレベルのアウトレットです。最上位のルートに一致するコンポーネントをレンダリングします。同様に、レンダリングされたコンポーネントには、独自のネストされた &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; を含めることもできます。たとえば、 &lt;code&gt;User&lt;/code&gt; コンポーネントのテンプレート内に1つ追加すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="f1f5eb58ebb5f1684f4b310363e94f6347277589" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; section for &lt;code&gt;UserSettings&lt;/code&gt; component in the above layout would look something like this:</source>
          <target state="translated">上記のレイアウトの &lt;code&gt;UserSettings&lt;/code&gt; コンポーネントの &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; セクションは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="0ffac73304a3247ab71d5acf0d0089b4643469ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeRouteEnter&lt;/code&gt; guard does &lt;strong&gt;NOT&lt;/strong&gt; have access to &lt;code&gt;this&lt;/code&gt;, because the guard is called before the navigation is confirmed, thus the new entering component has not even been created yet.</source>
          <target state="translated">&lt;code&gt;beforeRouteEnter&lt;/code&gt; のガードがない&lt;strong&gt;、NOT&lt;/strong&gt;へのアクセス持って &lt;code&gt;this&lt;/code&gt; ナビゲーションが確認される前に、ガードがこのように新たに入ってくるコンポーネントもまだ作成されていない、と呼ばれているので、。</target>
        </trans-unit>
        <trans-unit id="4e51fe4a377c162aa9aa7660ecf5294ec09a28c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollBehavior&lt;/code&gt; function receives the &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; route objects. The third argument, &lt;code&gt;savedPosition&lt;/code&gt;, is only available if this is a &lt;code&gt;popstate&lt;/code&gt; navigation (triggered by the browser's back/forward buttons).</source>
          <target state="translated">&lt;code&gt;scrollBehavior&lt;/code&gt; の機能は、受信 &lt;code&gt;to&lt;/code&gt; 及び &lt;code&gt;from&lt;/code&gt; ルートオブジェクト。3番目の引数 &lt;code&gt;savedPosition&lt;/code&gt; は、これが &lt;code&gt;popstate&lt;/code&gt; ナビゲーション（ブラウザーの戻る/進むボタンによってトリガーされる）の場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="b201105a82e6b1036d079ab3dadf0d77a44a591c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;leave guard&lt;/strong&gt; is usually used to prevent the user from accidentally leaving the route with unsaved edits. The navigation can be canceled by calling &lt;code&gt;next(false)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;休暇ガードは&lt;/strong&gt;通常、誤って保存されていない編集してルートを残してからユーザーを防ぐために使用されます。 &lt;code&gt;next(false)&lt;/code&gt; を呼び出すことにより、ナビゲーションをキャンセルできます。</target>
        </trans-unit>
        <trans-unit id="dab97ce9509d6e41f417491fa98ce232a056e404" translate="yes" xml:space="preserve">
          <source>The Full Navigation Resolution Flow</source>
          <target state="translated">フルナビゲーション解像度の流れ</target>
        </trans-unit>
        <trans-unit id="2ce5d364b93ce99ee04526a5645a7a0786cdf33e" translate="yes" xml:space="preserve">
          <source>The Route Object</source>
          <target state="translated">ルートオブジェクト</target>
        </trans-unit>
        <trans-unit id="6a5791c2e4084ff3c184ea22c374183b77459d77" translate="yes" xml:space="preserve">
          <source>The URL &lt;code&gt;/search?q=vue&lt;/code&gt; would pass &lt;code&gt;{query: 'vue'}&lt;/code&gt; as props to the &lt;code&gt;SearchUser&lt;/code&gt; component.</source>
          <target state="translated">URL &lt;code&gt;/search?q=vue&lt;/code&gt; は、 &lt;code&gt;{query: 'vue'}&lt;/code&gt; を小道具として &lt;code&gt;SearchUser&lt;/code&gt; コンポーネントに渡します。</target>
        </trans-unit>
        <trans-unit id="555c4d2ce807e9566e32519437eb61e3c547687c" translate="yes" xml:space="preserve">
          <source>The above can be expressed in the route configuration as:</source>
          <target state="translated">上記のようにルート構成で表現することができます。</target>
        </trans-unit>
        <trans-unit id="cf700d0b596efe64523dfdfd3077fd79cdb6d201" translate="yes" xml:space="preserve">
          <source>The above usage will apply the same transition for all routes. If you want each route's component to have different transitions, you can instead use &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; with different names inside each route component:</source>
          <target state="translated">上記の使用法は、すべてのルートに同じ遷移を適用します。各ルートのコンポーネントに異なる遷移を持たせたい場合は、代わりに各ルートコンポーネント内で異なる名前の &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="2082f4f8778f7c6a06e0469829d19c0acde7c5a4" translate="yes" xml:space="preserve">
          <source>The argument can be a string path, or a location descriptor object. Examples:</source>
          <target state="translated">引数には、文字列のパス、または位置記述子オブジェクトを指定することができます。例を示します。</target>
        </trans-unit>
        <trans-unit id="d51405a3849a5f1aa494f8064229450ca2126ed2" translate="yes" xml:space="preserve">
          <source>The base URL of the app. For example, if the entire single page application is served under &lt;code&gt;/app/&lt;/code&gt;, then &lt;code&gt;base&lt;/code&gt; should use the value &lt;code&gt;&quot;/app/&quot;&lt;/code&gt;.</source>
          <target state="translated">アプリのベースURL。全体の単一ページのアプリケーションは下に提供されている場合たとえば、 &lt;code&gt;/app/&lt;/code&gt; 、その後、 &lt;code&gt;base&lt;/code&gt; 値を使用する必要があります &lt;code&gt;&quot;/app/&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e9b668edfbb90c8dd8566bc19351395810269f0" translate="yes" xml:space="preserve">
          <source>The current active &lt;a href=&quot;#the-route-object&quot;&gt;Route&lt;/a&gt;. This property is read-only and its properties are immutable, but it can be watched.</source>
          <target state="translated">現在アクティブな&lt;a href=&quot;#the-route-object&quot;&gt;ルート&lt;/a&gt;。このプロパティは読み取り専用であり、そのプロパティは不変ですが、監視することができます。</target>
        </trans-unit>
        <trans-unit id="3f7bab8a351710813a1792361d32a5a6df1ae38e" translate="yes" xml:space="preserve">
          <source>The current route represented as a &lt;a href=&quot;#the-route-object&quot;&gt;Route Object&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#the-route-object&quot;&gt;ルートオブジェクト&lt;/a&gt;として表される現在のルート。</target>
        </trans-unit>
        <trans-unit id="a4ee70db8e60fe3e3ae0c4e3f48b36f4ea00269d" translate="yes" xml:space="preserve">
          <source>The default active class matching behavior is &lt;strong&gt;inclusive match&lt;/strong&gt;. For example, &lt;code&gt;&amp;lt;router-link to=&quot;/a&quot;&amp;gt;&lt;/code&gt; will get this class applied as long as the current path starts with &lt;code&gt;/a/&lt;/code&gt; or is &lt;code&gt;/a&lt;/code&gt;.</source>
          <target state="translated">デフォルトのアクティブクラスマッチング動作は、&lt;strong&gt;包括的マッチング&lt;/strong&gt;です。たとえば、 &lt;code&gt;&amp;lt;router-link to=&quot;/a&quot;&amp;gt;&lt;/code&gt; このクラスを取得することで、現在のパスが開始されている限り適用 &lt;code&gt;/a/&lt;/code&gt; またはあります &lt;code&gt;/a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fc018db58291e889985ef9f6a90a3d9035b1b0e" translate="yes" xml:space="preserve">
          <source>The default mode for &lt;code&gt;vue-router&lt;/code&gt; is &lt;em&gt;hash mode&lt;/em&gt; - it uses the URL hash to simulate a full URL so that the page won't be reloaded when the URL changes.</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; のデフォルトモードは&lt;em&gt;ハッシュモードです&lt;/em&gt;。URLハッシュを使用して完全なURLをシミュレートし、URLが変更されたときにページがリロードされないようにします。</target>
        </trans-unit>
        <trans-unit id="9a016caa76d4a05870f99a4eed3dee7033ee46f7" translate="yes" xml:space="preserve">
          <source>The error is caught and asynchronously handled by calling &lt;code&gt;next(err)&lt;/code&gt; inside a route guard function;</source>
          <target state="translated">ルートガード関数内で &lt;code&gt;next(err)&lt;/code&gt; を呼び出すことにより、エラーがキャッチされ、非同期的に処理されます。</target>
        </trans-unit>
        <trans-unit id="0f2f86ab65bf1970fdb56cd32d84972e49a6c8f2" translate="yes" xml:space="preserve">
          <source>The error is thrown synchronously inside a route guard function;</source>
          <target state="translated">ルートガード機能の内部で同期的にエラーが発生する。</target>
        </trans-unit>
        <trans-unit id="61cff4ca13414860678d49874e056e8f8749345f" translate="yes" xml:space="preserve">
          <source>The full resolved URL including query and hash.</source>
          <target state="translated">クエリとハッシュを含む完全な解決済みURL。</target>
        </trans-unit>
        <trans-unit id="d1c04a5b16accbdac8df1dd93e195c169aaf7ac6" translate="yes" xml:space="preserve">
          <source>The function can return a scroll position object. The object could be in the form of:</source>
          <target state="translated">この関数は、スクロール位置オブジェクトを返すことができます。オブジェクトは次のような形になります。</target>
        </trans-unit>
        <trans-unit id="e93691fb604f98a02503f006adee0c664623afde" translate="yes" xml:space="preserve">
          <source>The hash of the current route (with the &lt;code&gt;#&lt;/code&gt;), if it has one. If no hash is present the value will be an empty string.</source>
          <target state="translated">現在のルートのハッシュ（ &lt;code&gt;#&lt;/code&gt; 付き）（ある場合）。ハッシュが存在しない場合、値は空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="97562970847680561b46ccccb1070fa6a1adf666" translate="yes" xml:space="preserve">
          <source>The name of the current route, if it has one. (See &lt;a href=&quot;../guide/essentials/named-routes&quot;&gt;Named Routes&lt;/a&gt;)</source>
          <target state="translated">現在のルートの名前（存在する場合）。（&lt;a href=&quot;../guide/essentials/named-routes&quot;&gt;名前付きルートを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="5bf899b9e668624d6f5b32ffbaed72a551c9d02d" translate="yes" xml:space="preserve">
          <source>The name of the route being redirected from, if there were one. (See &lt;a href=&quot;../guide/essentials/redirect-and-alias&quot;&gt;Redirect and Alias&lt;/a&gt;)</source>
          <target state="translated">リダイレクト元のルートの名前（存在する場合）。（&lt;a href=&quot;../guide/essentials/redirect-and-alias&quot;&gt;リダイレクトとエイリアスを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="e707eb7100daabaf223a4d0e5e9741dbce85d94a" translate="yes" xml:space="preserve">
          <source>The redirect can also be targeting a named route:</source>
          <target state="translated">リダイレクトは指定されたルートをターゲットにすることもできます。</target>
        </trans-unit>
        <trans-unit id="1fbc13eca1bdc9570369c8131c1580d7dac0f41c" translate="yes" xml:space="preserve">
          <source>The root Vue instance the &lt;code&gt;router&lt;/code&gt; was injected into.</source>
          <target state="translated">&lt;code&gt;router&lt;/code&gt; が挿入されたルートVueインスタンス。</target>
        </trans-unit>
        <trans-unit id="9e6a4b5957343fea0ebfd0bd1d19e4759dbd35bf" translate="yes" xml:space="preserve">
          <source>The route object can be found in multiple places:</source>
          <target state="translated">ルートオブジェクトは複数の場所で見つけることができます。</target>
        </trans-unit>
        <trans-unit id="922d7fca7f2e145286ae58b5a3c707147df2c6ec" translate="yes" xml:space="preserve">
          <source>The route object is immutable. Every successful navigation will result in a fresh route object.</source>
          <target state="translated">ルートオブジェクトは不変です。ナビゲーションが成功するたびに、新しいルートオブジェクトが生成されます。</target>
        </trans-unit>
        <trans-unit id="faa4bc3d702668e81503a764428cce9b603c0348" translate="yes" xml:space="preserve">
          <source>The router instance.</source>
          <target state="translated">ルータのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="9fa790e3bac7002dcf74356b703b8218c4bd2fcc" translate="yes" xml:space="preserve">
          <source>The same rules apply for the &lt;code&gt;to&lt;/code&gt; property of the &lt;code&gt;router-link&lt;/code&gt; component.</source>
          <target state="translated">同じルールが &lt;code&gt;router-link&lt;/code&gt; コンポーネントの &lt;code&gt;to&lt;/code&gt; プロパティにも適用されます。</target>
        </trans-unit>
        <trans-unit id="e47ac241f5fdf160dc18347b31d6fb75fc4cab74" translate="yes" xml:space="preserve">
          <source>The second argument &lt;code&gt;errorCallback&lt;/code&gt; is only supported in 2.4+. It will be called when the initial route resolution runs into an error (e.g. failed to resolve an async component).</source>
          <target state="translated">2番目の引数 &lt;code&gt;errorCallback&lt;/code&gt; は2.4以降でのみサポートされています。最初のルート解決でエラーが発生したときに呼び出されます（非同期コンポーネントの解決に失敗したなど）。</target>
        </trans-unit>
        <trans-unit id="f6934271e865a3a534a429938bddac1f8100b037" translate="yes" xml:space="preserve">
          <source>The user will stay on the previous view while the resource is being fetched for the incoming view. It is therefore recommended to display a progress bar or some kind of indicator while the data is being fetched. If the data fetch fails, it's also necessary to display some kind of global warning message.</source>
          <target state="translated">ユーザーは、受信ビューのためにリソースがフェッチされている間、前のビューにとどまります。そのため、データがフェッチされている間は、プログレスバーや何らかのインジケータを表示することをお勧めします。データの取得に失敗した場合は、何らかのグローバルな警告メッセージを表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="248801da37f4ea250f622f78c57cb1786b096bd9" translate="yes" xml:space="preserve">
          <source>Then you can achieve the layout above with this route configuration:</source>
          <target state="translated">そして、このルート構成で上記のようなレイアウトを実現することができます。</target>
        </trans-unit>
        <trans-unit id="f584628b0b3a8bd05f38486c74f1e218c10c40f3" translate="yes" xml:space="preserve">
          <source>There is a caveat to this: Your server will no longer report 404 errors as all not-found paths now serve up your &lt;code&gt;index.html&lt;/code&gt; file. To get around the issue, you should implement a catch-all route within your Vue app to show a 404 page:</source>
          <target state="translated">これには注意が必要です。すべての見つからないパスが &lt;code&gt;index.html&lt;/code&gt; ファイルを提供するようになったため、サーバーは404エラーを報告しなくなります。この問題を回避するには、Vueアプリ内にキャッチオールルートを実装して404ページを表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="1894f2b9422130da979408591dea6e5ebe3fb654" translate="yes" xml:space="preserve">
          <source>Therefore, if you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;Browser History APIs&lt;/a&gt;, manipulating history will be super easy with Vue Router.</source>
          <target state="translated">したがって、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;ブラウザ履歴APIに&lt;/a&gt;既に慣れている場合は、Vueルーターを使用すると、履歴の操作が非常に簡単になります。</target>
        </trans-unit>
        <trans-unit id="3704ec0f80059da1d6bb85860c2e3810beffce8a" translate="yes" xml:space="preserve">
          <source>These guards have the exact same signature as global before guards.</source>
          <target state="translated">これらのガードは、ガード前のグローバルと全く同じシグネチャを持っています。</target>
        </trans-unit>
        <trans-unit id="f6ea9002e72e16715aa79b230300c2f7a726c70a" translate="yes" xml:space="preserve">
          <source>These properties are injected into every child component by passing the router instance to the root instance as the &lt;code&gt;router&lt;/code&gt; option.</source>
          <target state="translated">これらのプロパティは、ルーターインスタンスを &lt;code&gt;router&lt;/code&gt; オプションとしてルートインスタンスに渡すことにより、すべての子コンポーネントに挿入されます。</target>
        </trans-unit>
        <trans-unit id="d77b18ab4c745157e070e1084b72b6f83fc376c5" translate="yes" xml:space="preserve">
          <source>This allows you to use the component anywhere, which makes the component easier to reuse and test.</source>
          <target state="translated">これにより、どこでもコンポーネントを使用できるようになり、コンポーネントの再利用やテストが容易になります。</target>
        </trans-unit>
        <trans-unit id="e322a7cbf99e7b1e44e569d75dface178a8d5435" translate="yes" xml:space="preserve">
          <source>This is the exact same object used programatically with &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;router.push()&lt;/code&gt; でプログラム的に使用されるまったく同じオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="884da4433efc5d1a2324d6a582da71f5cc8a01cb" translate="yes" xml:space="preserve">
          <source>This is the method called internally when you click a &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;, so clicking &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt; is the equivalent of calling &lt;code&gt;router.push(...)&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; をクリックしたときに内部的に呼び出されるメソッドであるため、 &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt; クリックすることは &lt;code&gt;router.push(...)&lt;/code&gt; を呼び出すことと同等です。</target>
        </trans-unit>
        <trans-unit id="451711dc47c7c6f517891ef01d44526a904aae93" translate="yes" xml:space="preserve">
          <source>This is useful in server-side rendering to ensure consistent output on both the server and the client.</source>
          <target state="translated">これは、サーバーサイドのレンダリングにおいて、サーバーとクライアントの両方で一貫した出力を確保するのに便利です。</target>
        </trans-unit>
        <trans-unit id="35e6ca582a7ffb3b4a27b7a236e09e3c39fedba3" translate="yes" xml:space="preserve">
          <source>This method queues a callback to be called when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route.</source>
          <target state="translated">このメソッドは、ルータが最初のナビゲーションを完了したときに呼び出されるコールバックをキューに入れます。</target>
        </trans-unit>
        <trans-unit id="1ae2228ce7503030d2468a6c7972b2ad671c498c" translate="yes" xml:space="preserve">
          <source>This method takes a single integer as parameter that indicates by how many steps to go forwards or go backwards in the history stack, similar to &lt;code&gt;window.history.go(n)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;window.history.go(n)&lt;/code&gt; と同様に、履歴スタックで進むまたは戻るステップ数を示す単一の整数をパラメーターとして受け取ります。</target>
        </trans-unit>
        <trans-unit id="bbe5d8369ea8f01c36cb95214d652370c92181ae" translate="yes" xml:space="preserve">
          <source>This will simply make the page scroll to top for all route navigations.</source>
          <target state="translated">これにより、すべてのルートナビゲーションのために、ページがトップにスクロールするようになります。</target>
        </trans-unit>
        <trans-unit id="2f198ff0bc070b0417c58edb952e48f722940e00" translate="yes" xml:space="preserve">
          <source>Throughout the docs, we will often use the &lt;code&gt;router&lt;/code&gt; instance. Keep in mind that &lt;code&gt;this.$router&lt;/code&gt; is exactly the same as using &lt;code&gt;router&lt;/code&gt;. The reason we use &lt;code&gt;this.$router&lt;/code&gt; is because we don't want to import the router in every single component that needs to manipulate routing.</source>
          <target state="translated">ドキュメント全体を通して、 &lt;code&gt;router&lt;/code&gt; インスタンスを使用することがよくあります。ことを覚えておいてください &lt;code&gt;this.$router&lt;/code&gt; 使用するのとまったく同じである &lt;code&gt;router&lt;/code&gt; 。 &lt;code&gt;this.$router&lt;/code&gt; を使用するのは、ルーティングを操作する必要があるすべてのコンポーネントにルーターをインポートしたくないためです。</target>
        </trans-unit>
        <trans-unit id="14b124764e161f705cb1898a04f2d1f2ddffb40e" translate="yes" xml:space="preserve">
          <source>To decouple this component from the router use option &lt;code&gt;props&lt;/code&gt;:</source>
          <target state="translated">このコンポーネントをルーターから分離するには、オプション &lt;code&gt;props&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="40a21d40bf366489567fe26e35bb7f8cdb0ea8a6" translate="yes" xml:space="preserve">
          <source>To get rid of the hash, we can use the router's &lt;strong&gt;history mode&lt;/strong&gt;, which leverages the &lt;code&gt;history.pushState&lt;/code&gt; API to achieve URL navigation without a page reload:</source>
          <target state="translated">ハッシュを取り除くために、ルーターの&lt;strong&gt;履歴モードを&lt;/strong&gt;使用できます &lt;code&gt;history.pushState&lt;/code&gt; これは、history.pushState APIを利用して、ページをリロードせずにURLナビゲーションを実現します。</target>
        </trans-unit>
        <trans-unit id="f968e79f3bebc79ac6accd649e1b80b5c03e62a5" translate="yes" xml:space="preserve">
          <source>To link to a named route, you can pass an object to the &lt;code&gt;router-link&lt;/code&gt; component's &lt;code&gt;to&lt;/code&gt; prop:</source>
          <target state="translated">名前付きルートにリンクするには、オブジェクトを &lt;code&gt;router-link&lt;/code&gt; コンポーネントの &lt;code&gt;to&lt;/code&gt; propに渡します。</target>
        </trans-unit>
        <trans-unit id="8d2ac39b7f1eaeb6260ec962194235aea944d778" translate="yes" xml:space="preserve">
          <source>To navigate to a different URL, use &lt;code&gt;router.push&lt;/code&gt;. This method pushes a new entry into the history stack, so when the user clicks the browser back button they will be taken to the previous URL.</source>
          <target state="translated">別のURLに移動するには、 &lt;code&gt;router.push&lt;/code&gt; を使用します。このメソッドは新しいエントリを履歴スタックにプッシュするため、ユーザーがブラウザーの戻るボタンをクリックすると、前のURLに移動します。</target>
        </trans-unit>
        <trans-unit id="a814a90fe9d7eb161bb19c80c4d6453392d66e1c" translate="yes" xml:space="preserve">
          <source>To react to params changes in the same component, you can simply watch the &lt;code&gt;$route&lt;/code&gt; object:</source>
          <target state="translated">同じコンポーネントでのparamsの変更に対応するには、 &lt;code&gt;$route&lt;/code&gt; オブジェクトを監視するだけです。</target>
        </trans-unit>
        <trans-unit id="deb37c7b821c62ffa66d4da832925e5c201bf1f7" translate="yes" xml:space="preserve">
          <source>To render components into this nested outlet, we need to use the &lt;code&gt;children&lt;/code&gt; option in &lt;code&gt;VueRouter&lt;/code&gt; constructor config:</source>
          <target state="translated">コンポーネントをこのネストされたアウトレットにレンダリングするには、 &lt;code&gt;VueRouter&lt;/code&gt; コンストラクター構成の &lt;code&gt;children&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ab39260fea78bd5cdfde4b98ccfd4bc7bd02a43c" translate="yes" xml:space="preserve">
          <source>Transitions</source>
          <target state="translated">Transitions</target>
        </trans-unit>
        <trans-unit id="dd4444a66fb6e0b58af45061a5485da34a09bc09" translate="yes" xml:space="preserve">
          <source>Try to keep the &lt;code&gt;props&lt;/code&gt; function stateless, as it's only evaluated on route changes. Use a wrapper component if you need state to define the props, that way vue can react to state changes.</source>
          <target state="translated">それがルート変更でのみ評価されるので、 &lt;code&gt;props&lt;/code&gt; 機能をステートレスに保つようにしてください。プロップを定義するために状態が必要な場合は、ラッパーコンポーネントを使用します。これにより、vueは状態の変化に対応できます。</target>
        </trans-unit>
        <trans-unit id="5855e1223cedf94ad0b6dc47625105b33a541e19" translate="yes" xml:space="preserve">
          <source>Type declaration for &lt;code&gt;RouteConfig&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;RouteConfig&lt;/code&gt; の型宣言：</target>
        </trans-unit>
        <trans-unit id="5751afb337c680e5e84da3851f1bca73258d946a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$route&lt;/code&gt; in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs.</source>
          <target state="translated">コンポーネントで &lt;code&gt;$route&lt;/code&gt; を使用すると、ルートとの緊密な結合が作成され、特定のURLでのみ使用できるため、コンポーネントの柔軟性が制限されます。</target>
        </trans-unit>
        <trans-unit id="77d26897a43db04ce923013721681c90785d2c00" translate="yes" xml:space="preserve">
          <source>Very often we will need to map routes with the given pattern to the same component. For example we may have a &lt;code&gt;User&lt;/code&gt; component which should be rendered for all users but with different user IDs. In &lt;code&gt;vue-router&lt;/code&gt; we can use a dynamic segment in the path to achieve that:</source>
          <target state="translated">多くの場合、特定のパターンを持つルートを同じコンポーネントにマッピングする必要があります。たとえば、すべてのユーザーに対してレンダリングする必要があるが、ユーザーIDが異なる &lt;code&gt;User&lt;/code&gt; コンポーネントがあるとします。では &lt;code&gt;vue-router&lt;/code&gt; 、我々はそれを達成するために、パスに動的セグメントを使用することができます。</target>
        </trans-unit>
        <trans-unit id="375cf55f91216e77b508717797d05fb22beefd2a" translate="yes" xml:space="preserve">
          <source>View transition effects powered by Vue.js' transition system</source>
          <target state="translated">Vue.jsのトランジション システムを利用したトランジション効果を表示する</target>
        </trans-unit>
        <trans-unit id="bf53a6c36521f7bfb85181c1e488fc3bdefe2160" translate="yes" xml:space="preserve">
          <source>Vue Router</source>
          <target state="translated">ルータービュー</target>
        </trans-unit>
        <trans-unit id="2ca5266265ed3aea3483c13e9476203377ffc810" translate="yes" xml:space="preserve">
          <source>Vue Router is the official router for &lt;a href=&quot;http://vuejs.org&quot;&gt;Vue.js&lt;/a&gt;. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</source>
          <target state="translated">Vueルーターは&lt;a href=&quot;http://vuejs.org&quot;&gt;Vue.js&lt;/a&gt;の公式ルーターです。Vue.jsコアと深く統合して、Vue.jsを使用したシングルページアプリケーションの構築を簡単にします。機能は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c6e38605a4a493c27c8a5d6ee9d645fba14a9a9a" translate="yes" xml:space="preserve">
          <source>We can also use &lt;a href=&quot;meta&quot;&gt;route meta fields&lt;/a&gt; to implement fine-grained scroll behavior control. Check out a full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;meta&quot;&gt;ルートメタフィールド&lt;/a&gt;を使用して、細かいスクロール動作の制御を実装することもできます。&lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js&quot;&gt;ここで&lt;/a&gt;完全な例を確認してください。</target>
        </trans-unit>
        <trans-unit id="0352badf3e41913c3f3e9620f942cb5077ecbe2c" translate="yes" xml:space="preserve">
          <source>We will be using &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES2015&lt;/a&gt; in the code samples in the guide.</source>
          <target state="translated">ガイドのコードサンプルでは&lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES2015&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="15b474187c7078074aa9ed72c9112ae1156c52a0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;props&lt;/code&gt; is an object, this will be set as the component props as-is. Useful for when the props are static.</source>
          <target state="translated">場合 &lt;code&gt;props&lt;/code&gt; 対象であり、これをそのまま成分小道具として設定されます。小道具が静的な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d2513a78af894fa1eaf54225e0979827f5c12641" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;props&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;route.params&lt;/code&gt; will be set as the component props.</source>
          <target state="translated">場合 &lt;code&gt;props&lt;/code&gt; に設定されている &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;route.params&lt;/code&gt; は成分小道具として設定されます。</target>
        </trans-unit>
        <trans-unit id="f8ccecf482f54b6d805c179314065a64f0b2d6b9" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; has a name, it will render the component with the corresponding name in the matched route record's &lt;code&gt;components&lt;/code&gt; option. See &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;Named Views&lt;/a&gt; for an example.</source>
          <target state="translated">とき &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; 名前を持って、それが一致したルートのレコードの中で対応する名前を持つコンポーネントをレンダリングします &lt;code&gt;components&lt;/code&gt; オプション。例については、&lt;a href=&quot;../guide/essentials/named-views&quot;&gt;名前付きビュー&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="370e9eb49967d3c0b483f412401dc604f33c8a96" translate="yes" xml:space="preserve">
          <source>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route's components into a separate chunk, and only load them when the route is visited.</source>
          <target state="translated">バンドルを使ってアプリを構築する場合、JavaScriptのバンドルがかなり大きくなってしまい、ページの読み込み時間に影響が出てしまうことがあります。ルートの構成要素をそれぞれ別のチャンクに分割して、ルートが訪問されたときだけ読み込むようにすれば効率的です。</target>
        </trans-unit>
        <trans-unit id="9a598ced62d3edd035797f59b8e377213dd56ff0" translate="yes" xml:space="preserve">
          <source>When creating the router instance, you can provide the &lt;code&gt;scrollBehavior&lt;/code&gt; function:</source>
          <target state="translated">ルーターインスタンスを作成するときに、 &lt;code&gt;scrollBehavior&lt;/code&gt; 関数を指定できます。</target>
        </trans-unit>
        <trans-unit id="d1e714346832e17cf65c274f305abc3b1e0ad285" translate="yes" xml:space="preserve">
          <source>When the URL is &lt;code&gt;/foo/bar&lt;/code&gt;, &lt;code&gt;$route.matched&lt;/code&gt; will be an Array containing both objects (cloned), in parent to child order.</source>
          <target state="translated">URLが &lt;code&gt;/foo/bar&lt;/code&gt; の場合、 &lt;code&gt;$route.matched&lt;/code&gt; は、親から子の順序で両方のオブジェクト（クローン）を含む配列になります。</target>
        </trans-unit>
        <trans-unit id="5c2b30c6d5f6b6c51b2aeb5be92ba203bf029dab" translate="yes" xml:space="preserve">
          <source>When used with a module system, you must explicitly install the router via &lt;code&gt;Vue.use()&lt;/code&gt;:</source>
          <target state="translated">モジュールシステムで使用する場合は、 &lt;code&gt;Vue.use()&lt;/code&gt; を使用してルーターを明示的にインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="f93aaa65612ef60babed2aa9e05813e5850debcf" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;asterisk&lt;/em&gt; routes, make sure to correctly order your routes so that &lt;em&gt;asterisk&lt;/em&gt; ones are at the end. The route &lt;code&gt;{ path: '*' }&lt;/code&gt; is usually used to 404 client side. If you are using &lt;em&gt;History mode&lt;/em&gt;, make sure to &lt;a href=&quot;history-mode&quot;&gt;correctly configure your server&lt;/a&gt; as well.</source>
          <target state="translated">使用する場合は&lt;em&gt;、アスタリスクの&lt;/em&gt;ルートを、正しくすることを確認するように、あなたのルートを注文&lt;em&gt;アスタリスク&lt;/em&gt;ものは終わりです。ルート &lt;code&gt;{ path: '*' }&lt;/code&gt; は通常、404クライアント側で使用されます。使用している場合は&lt;em&gt;履歴モードを&lt;/em&gt;、することを確認し&lt;a href=&quot;history-mode&quot;&gt;、正しくサーバーを設定する&lt;/a&gt;だけでなく。</target>
        </trans-unit>
        <trans-unit id="d09a113e124c947936cc9ed9cc36a71326cb4a50" translate="yes" xml:space="preserve">
          <source>When using an &lt;em&gt;asterisk&lt;/em&gt;, a param named &lt;code&gt;pathMatch&lt;/code&gt; is automatically added to &lt;code&gt;$route.params&lt;/code&gt;. It contains the rest of the url matched by the &lt;em&gt;asterisk&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;アスタリスク&lt;/em&gt;を使用すると、 &lt;code&gt;pathMatch&lt;/code&gt; という名前のパラメーターが &lt;code&gt;$route.params&lt;/code&gt; 自動的に追加されます。&lt;em&gt;アスタリスクに&lt;/em&gt;一致する残りのURLが含まれてい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="654d7b5318472e61b7ba9786645ee2ba53c15acf" translate="yes" xml:space="preserve">
          <source>When using client-side routing, we may want to scroll to top when navigating to a new route, or preserve the scrolling position of history entries just like real page reload does. &lt;code&gt;vue-router&lt;/code&gt; allows you to achieve these and even better, allows you to completely customize the scroll behavior on route navigation.</source>
          <target state="translated">クライアント側ルーティングを使用する場合、新しいルートに移動するときに上にスクロールしたり、実際のページのリロードと同じように履歴エントリのスクロール位置を保持したりできます。 &lt;code&gt;vue-router&lt;/code&gt; を使用すると、これらを実現できます。さらに、ルートナビゲーションのスクロール動作を完全にカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="a60314411ff9cac02192073319927dc1ca2221dd" translate="yes" xml:space="preserve">
          <source>When using history mode, the URL will look &quot;normal,&quot; e.g. &lt;code&gt;http://oursite.com/user/id&lt;/code&gt;. Beautiful!</source>
          <target state="translated">履歴モードを使用する場合、URLは「通常」のようになります（例： &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; : //oursite.com/user/id）。綺麗な！</target>
        </trans-unit>
        <trans-unit id="5cc02aef8c3b391db93840118b90dec2b415d224" translate="yes" xml:space="preserve">
          <source>When using this approach, we navigate and render the incoming component immediately, and fetch data in the component's &lt;code&gt;created&lt;/code&gt; hook. It gives us the opportunity to display a loading state while the data is being fetched over the network, and we can also handle loading differently for each view.</source>
          <target state="translated">このアプローチを使用する場合、受信コンポーネントをすぐにナビゲートしてレンダリングし、コンポーネントの &lt;code&gt;created&lt;/code&gt; フックでデータをフェッチします。これにより、ネットワーク経由でデータがフェッチされている間に読み込み状態を表示する機会が得られ、ビューごとに異なる読み込みを処理することもできます。</target>
        </trans-unit>
        <trans-unit id="a7cc117fab6263f7211081d22d65df80783ceb89" translate="yes" xml:space="preserve">
          <source>When you are using the &lt;code&gt;base&lt;/code&gt; option in HTML5 history mode, you don't need to include it in &lt;code&gt;to&lt;/code&gt; prop's URLs.</source>
          <target state="translated">使用している場合は &lt;code&gt;base&lt;/code&gt; HTML5履歴モードのオプションを、あなたはそれを含める必要はありません &lt;code&gt;to&lt;/code&gt; 小道具のURLを。</target>
        </trans-unit>
        <trans-unit id="4446df79d1370319467592e28dbebd4c3d82d6b8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;vue-router&lt;/code&gt;, it is very simple to express this relationship using nested route configurations.</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; 、ネストされたルートの設定を使用して、この関係を表現するために非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="d288e66c2b04e3ae98f5a06ccc29b5c1455471d4" translate="yes" xml:space="preserve">
          <source>With this approach we fetch the data before actually navigating to the new route. We can perform the data fetching in the &lt;code&gt;beforeRouteEnter&lt;/code&gt; guard in the incoming component, and only call &lt;code&gt;next&lt;/code&gt; when the fetch is complete:</source>
          <target state="translated">このアプローチでは、実際に新しいルートに移動する前にデータをフェッチします。着信コンポーネントの &lt;code&gt;beforeRouteEnter&lt;/code&gt; ガードでデータのフェッチを実行し、フェッチが完了したときにのみ &lt;code&gt;next&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d9a994c42f35fd2e9f8464db0415b1e50c5c315d" translate="yes" xml:space="preserve">
          <source>You can also check out this example &lt;a href=&quot;https://jsfiddle.net/yyx990803/xgrjzsup/&quot;&gt;live&lt;/a&gt;.</source>
          <target state="translated">この例を&lt;a href=&quot;https://jsfiddle.net/yyx990803/xgrjzsup/&quot;&gt;ライブで&lt;/a&gt;確認することもできます。</target>
        </trans-unit>
        <trans-unit id="c2e815d06584fa57837db82d17e57326a9d3123d" translate="yes" xml:space="preserve">
          <source>You can also register global after hooks, however unlike guards, these hooks do not get a &lt;code&gt;next&lt;/code&gt; function and cannot affect the navigation:</source>
          <target state="translated">フックの後でグローバルに登録することもできますが、ガードとは異なり、これらのフックは &lt;code&gt;next&lt;/code&gt; 関数を取得せず、ナビゲーションに影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="dceb3c719a2affde3934cc32a255fb6e8bac211f" translate="yes" xml:space="preserve">
          <source>You can also return a Promise that resolves to the desired position descriptor:</source>
          <target state="translated">また、希望する位置記述子に解決するプロミスを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="87372b6a91ff376092ecc00b583afd4e75bf1fef" translate="yes" xml:space="preserve">
          <source>You can check out a live example &lt;a href=&quot;https://jsfiddle.net/yyx990803/4xfa2f19/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://jsfiddle.net/yyx990803/4xfa2f19/&quot;&gt;ここで&lt;/a&gt;ライブの例を確認できます。</target>
        </trans-unit>
        <trans-unit id="52a45f015af3c7e89ae621b8c057c43ce893c17a" translate="yes" xml:space="preserve">
          <source>You can create a function that returns props. This allows you to cast parameters into other types, combine static values with route-based values, etc.</source>
          <target state="translated">propsを返す関数を作成することができます。これにより、パラメータを他の型にキャストしたり、静的な値をルートベースの値と組み合わせたりすることができます。</target>
        </trans-unit>
        <trans-unit id="b1adba09890f98c1b3ec7486a6a2350042ffe55e" translate="yes" xml:space="preserve">
          <source>You can define &lt;code&gt;beforeEnter&lt;/code&gt; guards directly on a route's configuration object:</source>
          <target state="translated">&lt;code&gt;beforeEnter&lt;/code&gt; ガードは、ルートの構成オブジェクトに直接定義できます。</target>
        </trans-unit>
        <trans-unit id="54f861ad07b617f0765fc567107e9e603992caea" translate="yes" xml:space="preserve">
          <source>You can have multiple dynamic segments in the same route, and they will map to corresponding fields on &lt;code&gt;$route.params&lt;/code&gt;. Examples:</source>
          <target state="translated">同じルートに複数の動的セグメントを &lt;code&gt;$route.params&lt;/code&gt; ことができ、それらは$ route.paramsの対応するフィールドにマップされます。例：</target>
        </trans-unit>
        <trans-unit id="91c9c8c9c91650676c169a76575a2310ebc323bc" translate="yes" xml:space="preserve">
          <source>You can include a &lt;code&gt;meta&lt;/code&gt; field when defining a route:</source>
          <target state="translated">ルートを定義するときに &lt;code&gt;meta&lt;/code&gt; フィールドを含めることができます。</target>
        </trans-unit>
        <trans-unit id="dcaa153c3e42e4b62970046f5ffaf744b8c7954d" translate="yes" xml:space="preserve">
          <source>You can register a global guard with &lt;code&gt;router.beforeResolve&lt;/code&gt;. This is similar to &lt;code&gt;router.beforeEach&lt;/code&gt;, with the difference that resolve guards will be called right before the navigation is confirmed, &lt;strong&gt;after all in-component guards and async route components are resolved&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;router.beforeResolve&lt;/code&gt; でグローバルガードを登録できます。これは &lt;code&gt;router.beforeEach&lt;/code&gt; に似ていますが、&lt;strong&gt;すべてのコンポーネント内ガードと非同期ルートコンポーネントが解決された後&lt;/strong&gt;、ナビゲーションが確認される直前に解決ガードが呼び出されるという違いがあります。</target>
        </trans-unit>
        <trans-unit id="91d70ca0e20247f409fa0d7f3606c443e7d0d92e" translate="yes" xml:space="preserve">
          <source>You can register global before guards using &lt;code&gt;router.beforeEach&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;router.beforeEach&lt;/code&gt; を使用してガードの前にグローバルを登録できます：</target>
        </trans-unit>
        <trans-unit id="360fc60f946b0e1fb46441c21ec094cefc382a47" translate="yes" xml:space="preserve">
          <source>You don't need to do this when using global script tags.</source>
          <target state="translated">グローバルスクリプトタグを使用している場合は必要ありません。</target>
        </trans-unit>
        <trans-unit id="fdc0308691390af461887e831e2f5799b218ef4e" translate="yes" xml:space="preserve">
          <source>You may have noticed that &lt;code&gt;router.push&lt;/code&gt;, &lt;code&gt;router.replace&lt;/code&gt; and &lt;code&gt;router.go&lt;/code&gt; are counterparts of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;&lt;code&gt;window.history.pushState&lt;/code&gt;, &lt;code&gt;window.history.replaceState&lt;/code&gt; and &lt;code&gt;window.history.go&lt;/code&gt;&lt;/a&gt;, and they do imitate the &lt;code&gt;window.history&lt;/code&gt; APIs.</source>
          <target state="translated">&lt;code&gt;router.push&lt;/code&gt; 、 &lt;code&gt;router.replace&lt;/code&gt; 、 &lt;code&gt;router.go&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt; &lt;code&gt;window.history.pushState&lt;/code&gt; 、 &lt;code&gt;window.history.replaceState&lt;/code&gt; 、 &lt;code&gt;window.history.go&lt;/code&gt; の&lt;/a&gt;対応物であり、これらは &lt;code&gt;window.history&lt;/code&gt; APIを模倣していることに気づいたかもしれません。</target>
        </trans-unit>
        <trans-unit id="42001955a4630b11faa63d03b789c8381c402c78" translate="yes" xml:space="preserve">
          <source>You will have to clone directly from GitHub and build &lt;code&gt;vue-router&lt;/code&gt; yourself if you want to use the latest dev build.</source>
          <target state="translated">最新の開発ビルドを使用する場合は、GitHubから直接クローンを作成し、 &lt;code&gt;vue-router&lt;/code&gt; を自分でビルドする必要があります。</target>
        </trans-unit>
        <trans-unit id="22c922a7722e225567a4b9082890a1c0a2a34dc0" translate="yes" xml:space="preserve">
          <source>active-class</source>
          <target state="translated">active-class</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="e34aac5c6849fdb3570b660a5e774a81c616a4a9" translate="yes" xml:space="preserve">
          <source>available values: &lt;code&gt;&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;&lt;/code&gt;</source>
          <target state="translated">利用可能な値： &lt;code&gt;&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="99b10c37b942ce1bc4a061b17674e700284477fc" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;/&quot;&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;&quot;/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5b86475c5ce19d01e0cac89c9799c7283c7d817" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;a&quot;&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;&quot;a&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32d04dbda316ea929438d99dc5deb9bfed79c294" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;default&quot;&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;&quot;default&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc7e54a97eb660f817218b1cedc02e8d9e783123" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;hash&quot; (in browser) | &quot;abstract&quot; (in Node.js)&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;&quot;hash&quot; (in browser) | &quot;abstract&quot; (in Node.js)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f018a79ddcbe226a0fa236f8257a7f90261a2b33" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a09a446c9b3680978568555d5a02876f163d4278" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c5e5af919de42d74014a2fd8d7af6f3238aba66" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;'click'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'click'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b853518a7253a67751993712323af2afe8d26a75" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6fd6e8dec26869827df393505cdc6fbe0e5b3f8" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5006ed0248a019713b762563076292379daf07b4" translate="yes" xml:space="preserve">
          <source>event</source>
          <target state="translated">event</target>
        </trans-unit>
        <trans-unit id="b55e22fe7830e8fe49f48f834b913ef8618f0521" translate="yes" xml:space="preserve">
          <source>exact</source>
          <target state="translated">exact</target>
        </trans-unit>
        <trans-unit id="de8dc393f32ea87cda6843c8979f8bc15f115a5a" translate="yes" xml:space="preserve">
          <source>exact-active-class</source>
          <target state="translated">exact-active-class</target>
        </trans-unit>
        <trans-unit id="5d288ad264adcc2a70039c116c397be72c30fe76" translate="yes" xml:space="preserve">
          <source>fallback</source>
          <target state="translated">fallback</target>
        </trans-unit>
        <trans-unit id="4df0e6a21ec6a23a3721f71c0e947871720c309f" translate="yes" xml:space="preserve">
          <source>if you are using Babel, you will need to add the &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import&lt;/a&gt; plugin so that Babel can properly parse the syntax.</source>
          <target state="translated">Babelを使用している場合、Babelが構文を正しく解析できるように&lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import&lt;/a&gt;プラグインを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d175db7336b4deaf3b1a69b2f762ee3bed67cb20" translate="yes" xml:space="preserve">
          <source>linkActiveClass</source>
          <target state="translated">linkActiveClass</target>
        </trans-unit>
        <trans-unit id="e41ac53cf69868bc1c3a7ee6ef65c73237c62040" translate="yes" xml:space="preserve">
          <source>linkExactActiveClass</source>
          <target state="translated">linkExactActiveClass</target>
        </trans-unit>
        <trans-unit id="89f41168b29a18bea64d6f6cdc32335cd79cb41b" translate="yes" xml:space="preserve">
          <source>matched path</source>
          <target state="translated">マッチドパス</target>
        </trans-unit>
        <trans-unit id="e78fe7049341b36116d8054f5a3e00d01f245fcc" translate="yes" xml:space="preserve">
          <source>mode</source>
          <target state="translated">mode</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="58a3ed6f2965252c6ac4957d95f7a3bdfca47101" translate="yes" xml:space="preserve">
          <source>nginx</source>
          <target state="translated">nginx</target>
        </trans-unit>
        <trans-unit id="660051d15ac64cec704cfacca2c2eab008f657e8" translate="yes" xml:space="preserve">
          <source>npm</source>
          <target state="translated">npm</target>
        </trans-unit>
        <trans-unit id="953c0c236f2356b54ee370e347c14c3865381884" translate="yes" xml:space="preserve">
          <source>parseQuery / stringifyQuery</source>
          <target state="translated">parseQuery/stringifyQuery</target>
        </trans-unit>
        <trans-unit id="91cc2e927b3bfb1d4477b744f7c70221ddb86ef1" translate="yes" xml:space="preserve">
          <source>pattern</source>
          <target state="translated">pattern</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="1a77d416224cbbe77a439cfd6c198030cb522872" translate="yes" xml:space="preserve">
          <source>required</source>
          <target state="translated">required</target>
        </trans-unit>
        <trans-unit id="2725c5af8e0788b3abc52d1ceb4ac9ce7f72148a" translate="yes" xml:space="preserve">
          <source>router.addRoutes</source>
          <target state="translated">router.addRoutes</target>
        </trans-unit>
        <trans-unit id="3f47556d256c26578295cea37371201686604978" translate="yes" xml:space="preserve">
          <source>router.addRoutes()</source>
          <target state="translated">router.addRoutes()</target>
        </trans-unit>
        <trans-unit id="2662e68dc8326e33c695ebbf8d9188d9c4a7ba17" translate="yes" xml:space="preserve">
          <source>router.afterEach</source>
          <target state="translated">router.afterEach</target>
        </trans-unit>
        <trans-unit id="4a0c91379e8288b021c3d98a0217fa0a56e46f9e" translate="yes" xml:space="preserve">
          <source>router.afterEach()</source>
          <target state="translated">router.afterEach()</target>
        </trans-unit>
        <trans-unit id="a2236cfcb1f47bd17fb9604a1695bc4698b4d938" translate="yes" xml:space="preserve">
          <source>router.app</source>
          <target state="translated">router.app</target>
        </trans-unit>
        <trans-unit id="741805ccbc5038382908b2fbd5ca94662306229d" translate="yes" xml:space="preserve">
          <source>router.back</source>
          <target state="translated">router.back</target>
        </trans-unit>
        <trans-unit id="455210ecf6a0e738bbd8e8d0fd5d2d9228d45d3b" translate="yes" xml:space="preserve">
          <source>router.back()</source>
          <target state="translated">router.back()</target>
        </trans-unit>
        <trans-unit id="8e4d0e56bbcb0b0c86b8b861ee370213135e6c93" translate="yes" xml:space="preserve">
          <source>router.beforeEach</source>
          <target state="translated">router.beforeEach</target>
        </trans-unit>
        <trans-unit id="1e0edd04aad9408325c3ba1792733b9609c32bba" translate="yes" xml:space="preserve">
          <source>router.beforeEach()</source>
          <target state="translated">router.beforeEach()</target>
        </trans-unit>
        <trans-unit id="d0ee0d6ea72bf05a3b8a32cba7d50a765c8272fe" translate="yes" xml:space="preserve">
          <source>router.beforeResolve</source>
          <target state="translated">router.beforeResolve</target>
        </trans-unit>
        <trans-unit id="f11efdb46222361f366683bc92f8239a1c6b9a31" translate="yes" xml:space="preserve">
          <source>router.beforeResolve()</source>
          <target state="translated">router.beforeResolve()</target>
        </trans-unit>
        <trans-unit id="b9b484c1b0caf585a0c4c0133a7317ac37c1f231" translate="yes" xml:space="preserve">
          <source>router.currentRoute</source>
          <target state="translated">router.currentRoute</target>
        </trans-unit>
        <trans-unit id="e0bb03bcd4c4a283cbf56d64937ef2f95c19def3" translate="yes" xml:space="preserve">
          <source>router.forward</source>
          <target state="translated">router.forward</target>
        </trans-unit>
        <trans-unit id="0a3c17512db6aba88397681690527ee9ad857caa" translate="yes" xml:space="preserve">
          <source>router.forward()</source>
          <target state="translated">router.forward()</target>
        </trans-unit>
        <trans-unit id="3ae47561293b9dfeb20a96309074a684f8f6422f" translate="yes" xml:space="preserve">
          <source>router.getMatchedComponents</source>
          <target state="translated">router.getMatchedComponents</target>
        </trans-unit>
        <trans-unit id="cb1490dd1ae07e5608556fe5569586f268752565" translate="yes" xml:space="preserve">
          <source>router.getMatchedComponents()</source>
          <target state="translated">router.getMatchedComponents()</target>
        </trans-unit>
        <trans-unit id="3a9bd917f6142f0ebac12aa7629558793b8eed68" translate="yes" xml:space="preserve">
          <source>router.go</source>
          <target state="translated">router.go</target>
        </trans-unit>
        <trans-unit id="93d836104a643f1ad3e29a704ad19d57778d799a" translate="yes" xml:space="preserve">
          <source>router.go()</source>
          <target state="translated">router.go()</target>
        </trans-unit>
        <trans-unit id="4b98e5dc820e27eeda1bd4a395a5576fc48805ad" translate="yes" xml:space="preserve">
          <source>router.mode</source>
          <target state="translated">router.mode</target>
        </trans-unit>
        <trans-unit id="ac96d346f75b0e8019c8407448728adc4a49768f" translate="yes" xml:space="preserve">
          <source>router.onError</source>
          <target state="translated">router.onError</target>
        </trans-unit>
        <trans-unit id="16e71d29e1cd6a61478e34cd1ee243d8e0f50b06" translate="yes" xml:space="preserve">
          <source>router.onError()</source>
          <target state="translated">router.onError()</target>
        </trans-unit>
        <trans-unit id="69cc793b354e98df015e979bf45e960883e135f6" translate="yes" xml:space="preserve">
          <source>router.onReady</source>
          <target state="translated">router.onReady</target>
        </trans-unit>
        <trans-unit id="747e333d66e77593b0042df265ee53b603de3ac8" translate="yes" xml:space="preserve">
          <source>router.onReady()</source>
          <target state="translated">router.onReady()</target>
        </trans-unit>
        <trans-unit id="8bf8844bb164c8ded182c7ca26c14cb206d03917" translate="yes" xml:space="preserve">
          <source>router.push</source>
          <target state="translated">router.push</target>
        </trans-unit>
        <trans-unit id="80f54f4dd6b09a95476a59b10a3041938dd2086f" translate="yes" xml:space="preserve">
          <source>router.push()</source>
          <target state="translated">router.push()</target>
        </trans-unit>
        <trans-unit id="a83f0578ae911969f306f03252e5bdcc36fd43db" translate="yes" xml:space="preserve">
          <source>router.replace</source>
          <target state="translated">router.replace</target>
        </trans-unit>
        <trans-unit id="66c9650ee951a77299972461032c18f207e18399" translate="yes" xml:space="preserve">
          <source>router.replace()</source>
          <target state="translated">router.replace()</target>
        </trans-unit>
        <trans-unit id="66503abbc72af3e9eee4cfbda80393ae76ff207e" translate="yes" xml:space="preserve">
          <source>router.resolve</source>
          <target state="translated">router.resolve</target>
        </trans-unit>
        <trans-unit id="b2730b57953abee3878f9caceb52c8664aa8f340" translate="yes" xml:space="preserve">
          <source>router.resolve()</source>
          <target state="translated">router.resolve()</target>
        </trans-unit>
        <trans-unit id="9e2c05b0ce117ad468d9a4e577e7ae96c67e4bb4" translate="yes" xml:space="preserve">
          <source>routes</source>
          <target state="translated">routes</target>
        </trans-unit>
        <trans-unit id="7dad025296b38526ffa33e53caf5c3ec238d3648" translate="yes" xml:space="preserve">
          <source>scrollBehavior</source>
          <target state="translated">scrollBehavior</target>
        </trans-unit>
        <trans-unit id="5e9b60f69165f32f8930843ca718e10fdee30c52" translate="yes" xml:space="preserve">
          <source>tag</source>
          <target state="translated">tag</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">to</target>
        </trans-unit>
        <trans-unit id="f98b78095dd7b6a2ea54a7d58d1e5ed84b325054" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;Array&amp;lt;RouteConfig&amp;gt;&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array&amp;lt;RouteConfig&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a339ba8c08de47ad40266bde7e4690567b147b9" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;Array&amp;lt;RouteRecord&amp;gt;&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array&amp;lt;RouteRecord&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39142a28070b085653427668d9c37ef93acf9c11" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;Function&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="459de9ab6bbb747b424aa86431b8923f3e3cebed" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e49ccf3e90dd6c142dcb29c663e37d4f589ea818" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;Route&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Route&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96e3dc3437eced554868a86f2e58a2a356edfc3c" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;Vue instance&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Vue instance&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e0800374f05dce7addc4f97d5a68d2e7b35b3ef4" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f26b9b47c7d30af061500feb8871343139f93178" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;string | Array&amp;lt;string&amp;gt;&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;string | Array&amp;lt;string&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15860fc2382d6e91f8672b59a2f4aaf28b7c0c06" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;string | Location&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;string | Location&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e994060b7624ea12312bbedbc8627d4c31002cf" translate="yes" xml:space="preserve">
          <source>type: &lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="285a211f0f9d5799f4ec4b2694fc5040a7a120fc" translate="yes" xml:space="preserve">
          <source>v-slot</source>
          <target state="translated">v-slot</target>
        </trans-unit>
        <trans-unit id="33d0fd54fb3557d5daf7d54b93d487b1185643b4" translate="yes" xml:space="preserve">
          <source>webpack will group any async module with the same chunk name into the same async chunk.</source>
          <target state="translated">webpack は、同じチャンク名を持つ任意の非同期モジュールを同じ非同期チャンクにグループ化します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
