<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="2129521b769d915727dcb1e653df38210cfe3143" translate="yes" xml:space="preserve">
          <source>This method takes a &lt;code&gt;bool&lt;/code&gt; as first argument. In order for the data to be processed the &lt;code&gt;bool&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;LogLevel&lt;/code&gt; of the Logger must be greater or equal to the global &lt;code&gt;LogLevel&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、最初の引数として &lt;code&gt;bool&lt;/code&gt; を取ります。 データを処理するには、 &lt;code&gt;bool&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であり、ロガーの &lt;code&gt;LogLevel&lt;/code&gt; がグローバル &lt;code&gt;LogLevel&lt;/code&gt; 以上である必要があります。</target>
        </trans-unit>
        <trans-unit id="d0cb43593777a49c6e95ba5b0dcc72f45a57113c" translate="yes" xml:space="preserve">
          <source>This methods get and set the global &lt;code&gt;LogLevel&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、グローバル &lt;code&gt;LogLevel&lt;/code&gt; を取得および設定します。</target>
        </trans-unit>
        <trans-unit id="a7803a9c22a232513790fa103468328fa0b2565b" translate="yes" xml:space="preserve">
          <source>This might affect your application if it has threads that are not suspended during the mark phase of the collection. You can configure the number of additional threads used for marking by GC option &lt;code&gt;parallel&lt;/code&gt;, e.g. by passing &lt;code&gt;--DRT-gcopt=parallel:2&lt;/code&gt; on the command line or embedding the option into the binary via &lt;code&gt;rt_options&lt;/code&gt;. The number of threads actually created is limited to &lt;a href=&quot;https://dlang.org/library/core/cpuid/threads_per_cpu.html&quot;&gt;&lt;code&gt;core.cpuid.threadsPerCPU-1&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;0&lt;/code&gt; disables parallel marking completely.</source>
          <target state="translated">コレクションのマークフェーズ中に中断されていないスレッドがある場合、これはアプリケーションに影響を与える可能性があります。 たとえば、コマンドラインで &lt;code&gt;--DRT-gcopt=parallel:2&lt;/code&gt; を渡すか、rt_optionsを介してオプションをバイナリに埋め込むことにより、GCオプション &lt;code&gt;parallel&lt;/code&gt; によるマーキングに使用される追加のスレッドの数を構成できます。 実際に作成されるスレッドの数は、 &lt;a href=&quot;https://dlang.org/library/core/cpuid/threads_per_cpu.html&quot;&gt; &lt;code&gt;core.cpuid.threadsPerCPU-1&lt;/code&gt; に&lt;/a&gt;制限されています。 値 &lt;code&gt;0&lt;/code&gt; は、並行マーキングを完全に無効にします。</target>
        </trans-unit>
        <trans-unit id="abf107b5c6e2c3e95aef57b0f00ce4199d6e77e4" translate="yes" xml:space="preserve">
          <source>This module allows content to be iterated by record stored in a struct, class, associative array, or as a range of fields. Upon detection of an error an CSVException is thrown (can be disabled). csvNextToken has been made public to allow for attempted recovery.  Disabling exceptions will lift many restrictions specified above. A quote can appear in a field if the field was not quoted. If in a quoted field any quote by itself, not at the end of a field, will end processing for that field. The field is ended when there is no input, even if the quote was not closed.</source>
          <target state="translated">このモジュールでは、構造体、クラス、連想配列、またはフィールドの範囲に格納されたレコードごとにコンテンツを反復処理することができます。エラーが検出されると CSVException がスローされます (無効にすることもできます)。csvNextToken は復旧を試みることができるように公開されています。例外を無効にすることで、上記で指定した多くの制限が解除されます。フィールドが引用符で囲まれていない場合、フィールド内に引用符が表示されることがあります。引用符で囲まれたフィールドの場合、フィールドの最後ではなく、それ自体が引用符である場合、そのフィールドの処理は終了します。引用符が閉じられていなくても、入力がなければそのフィールドの処理は終了します。</target>
        </trans-unit>
        <trans-unit id="0c12be692d1a1b6196ff193f230f2b2b54e371d1" translate="yes" xml:space="preserve">
          <source>This module and its documentation are inspired by Perl's &lt;a href=&quot;http://%20%20%20%20%20%20%20%20%20%20%20perldoc.perl.org/Getopt/Long.html&quot;&gt;Getopt::Long&lt;/a&gt; module. The syntax of D's &lt;code&gt;getopt&lt;/code&gt; is simpler than its Perl counterpart because &lt;code&gt; getopt&lt;/code&gt; infers the expected parameter types from the static types of the passed-in pointers.</source>
          <target state="translated">このモジュールとそのドキュメントは、Perlの&lt;a href=&quot;http://%20%20%20%20%20%20%20%20%20%20%20perldoc.perl.org/Getopt/Long.html&quot;&gt;Getopt :: Long&lt;/a&gt;モジュールに触発されています。 Dの &lt;code&gt;getopt&lt;/code&gt; の構文は、対応するPerlよりも単純です。これは、 &lt;code&gt; getopt&lt;/code&gt; が、渡されたポインターの静的型から予期されるパラメーター型を推測するためです。</target>
        </trans-unit>
        <trans-unit id="7f09ec381e380d7513f44d1a9c117509cf562d32" translate="yes" xml:space="preserve">
          <source>This module centers around two functions:</source>
          <target state="translated">このモジュールは、2つの機能を中心に構成されています。</target>
        </trans-unit>
        <trans-unit id="20c669a98c4868307d434ad05bfdc4a3a51a1300" translate="yes" xml:space="preserve">
          <source>This module conforms to the APIs defined in &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;.  This module publicly imports &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt; and can be used as a stand-alone module.</source>
          <target state="translated">このモジュールは、 &lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; で&lt;/a&gt;定義されたAPIに準拠しています。 このモジュールは&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; &lt;/a&gt;をパブリックにインポートし、スタンドアロンモジュールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="f7a16008011138e31550b797755a77e5d03cd02e" translate="yes" xml:space="preserve">
          <source>This module conforms to the APIs defined in &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;. To understand the differences between the template and the OOP API, see &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、 &lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; で&lt;/a&gt;定義されたAPIに準拠しています。 テンプレートとOOP APIの違いを理解するには、 &lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17ae71bfaa531ddd2da20bee8e617777975ac653" translate="yes" xml:space="preserve">
          <source>This module conforms to the APIs defined in &lt;code&gt;std.digest&lt;/code&gt;. To understand the differences between the template and the OOP API, see &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;std.digest&lt;/code&gt; で定義されたAPIに準拠しています。 テンプレートとOOP APIの違いを理解するには、 &lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5d23cc75f3120c33113ac064a49eabf3de54b0fa" translate="yes" xml:space="preserve">
          <source>This module consists of the following submodules:</source>
          <target state="translated">このモジュールは以下のサブモジュールで構成されています。</target>
        </trans-unit>
        <trans-unit id="acafb5c32c70d9aae6c63b01f760110057442f4d" translate="yes" xml:space="preserve">
          <source>This module contains UDA's (User Defined Attributes) either used in the runtime or special UDA's recognized by compiler.</source>
          <target state="translated">このモジュールには、ランタイムで使用されるUDA(User Defined Attributes)やコンパイラで認識される特別なUDAが含まれています。</target>
        </trans-unit>
        <trans-unit id="85899b400fb24fe82d032611b825cbfb9b44e4d4" translate="yes" xml:space="preserve">
          <source>This module contains a collection of bit-level operations.</source>
          <target state="translated">このモジュールには、ビットレベルの操作のコレクションが含まれています。</target>
        </trans-unit>
        <trans-unit id="c1389c215e1a5264fea083894c94780e9d38b766" translate="yes" xml:space="preserve">
          <source>This module contains all functions related to an object's lifetime: allocation, resizing, deallocation, and finalization.</source>
          <target state="translated">このモジュールには、オブジェクトの寿命に関連するすべての関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="2e22ee3bb8cbf087613e536d6224ea16946bb6a9" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/assert.h.html&quot;&gt;&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/assert.h.html&quot;&gt; &lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0790e73d68257f0feac07da73031d54a40efb1ec" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/complex.h.html&quot;&gt;&lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/complex.h.html&quot;&gt; &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="977e99994de35a20a0e314dc2374362a82960544" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/ctype.h.html&quot;&gt;&lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/ctype.h.html&quot;&gt; &lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="12b921fc7078621d7eaa8b76c016bec3d37b2ea8" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/errno.h.html&quot;&gt;&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準Cヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/errno.h.html&quot;&gt; &lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3184aa12179289bb1bc9cc36d8ce4348bfa946fe" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/fenv.h.html&quot;&gt;&lt;code&gt;&amp;lt;fenv.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/fenv.h.html&quot;&gt; &lt;code&gt;&amp;lt;fenv.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8eb2c62940c679e140d89cb9017957cd6a4ba64f" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/float.h.html&quot;&gt;&lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/float.h.html&quot;&gt; &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="82e3f25e60216c815c395312071e29f7c8ca0ddd" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/inttypes.h.html&quot;&gt;&lt;code&gt;&amp;lt;inttypes.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/inttypes.h.html&quot;&gt; &lt;code&gt;&amp;lt;inttypes.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f313b0f4d7c80470b377169af784edeeb810ec9d" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html&quot;&gt;&lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html&quot;&gt; &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="889ac9c43694fc79bd24e61dceed4e6fda688b35" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/locale.h.html&quot;&gt;&lt;code&gt;&amp;lt;locale.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/locale.h.html&quot;&gt; &lt;code&gt;&amp;lt;locale.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8bd014e9d5a4fdbad34dcb7fb8420e937c0abc85" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/math.h.html&quot;&gt;&lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/math.h.html&quot;&gt; &lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fc16180c80d567a16457d88550f7aa27a1b419aa" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html&quot;&gt;&lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html&quot;&gt; &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5971b6bf8e57282688ff4449029781d4b3a236d4" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdarg.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdarg.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b580515d9fbf0a4ef7b9e421dec5768897b813d8" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stddef.h.html&quot;&gt;&lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stddef.h.html&quot;&gt; &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="95281628a03db4872107318eb8c99b1bea13ccc2" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdint.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdint.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="51ba870a61bb5fb732f12f00ebdf0f6bdf33ab08" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdio.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdio.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b6d9cbc1fb19908d75c057b6e010d377eada4d77" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html&quot;&gt;&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html&quot;&gt; &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="050d1037c01667ef5f3b8f67c4951211e12ccacf" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/string.h.html&quot;&gt;&lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/string.h.html&quot;&gt; &lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f549cd509c6cf2035fd5afdb0920eaa5d4d5e84e" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/tgmath.h.html&quot;&gt;&lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準Cヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/tgmath.h.html&quot;&gt; &lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="62c64533f70dfc4fd8955bc0b3a2834ad07751af" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/time.h.html&quot;&gt;&lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/time.h.html&quot;&gt; &lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="92aabdabf0e70387e5a38f4c231411efd14217e3" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wchar.h.html&quot;&gt;&lt;code&gt;&amp;lt;wchar.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wchar.h.html&quot;&gt; &lt;code&gt;&amp;lt;wchar.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択された型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0ec277ffc9998ff3f0f63d9eedcde3635f0eb758" translate="yes" xml:space="preserve">
          <source>This module contains bindings to selected types and functions from the standard C header &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wctype.h.html&quot;&gt;&lt;code&gt;&amp;lt;wctype.h&amp;gt;&lt;/code&gt;&lt;/a&gt;. Note that this is not automatically generated, and may omit some types/functions from the original C header.</source>
          <target state="translated">このモジュールには、標準のCヘッダー&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/basedefs/wctype.h.html&quot;&gt; &lt;code&gt;&amp;lt;wctype.h&amp;gt;&lt;/code&gt; &lt;/a&gt;から選択した型と関数へのバインディングが含まれています。 これは自動的には生成されず、元のCヘッダーから一部のタイプ/関数が省略される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4332c56ae7f44bffd58f114ac37e892a2b103dd8" translate="yes" xml:space="preserve">
          <source>This module contains compiler support determining equality of dynamic arrays.</source>
          <target state="translated">このモジュールには,動的配列の均等性を判定するためのコンパイラのサポートが含まれています.</target>
        </trans-unit>
        <trans-unit id="a9409989c24e53c52350805b177653fd011bfa05" translate="yes" xml:space="preserve">
          <source>This module contains compiler support for casting dynamic arrays</source>
          <target state="translated">このモジュールには、動的配列をキャストするためのコンパイラのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="98da9476138dd631b9aa80ca4972d86126ed52a1" translate="yes" xml:space="preserve">
          <source>This module contains compiler support for comparing dynamic arrays</source>
          <target state="translated">このモジュールには、動的配列を比較するためのコンパイラのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="ea25ff08ceea8b6974ce0811b1a4d3c03f3a2b61" translate="yes" xml:space="preserve">
          <source>This module contains compiler support for constructing dynamic arrays</source>
          <target state="translated">このモジュールには、動的配列を構築するためのコンパイラのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="130d46533e13acaf0b0f736ae469ff9f68d6ff23" translate="yes" xml:space="preserve">
          <source>This module contains high-level interfaces for interacting with DMD as a library.</source>
          <target state="translated">このモジュールには、ライブラリとしてDMDと対話するための高レベルのインタフェースが含まれています。</target>
        </trans-unit>
        <trans-unit id="7df04f2ddca174e21d081429f9f3c53ebccb78b8" translate="yes" xml:space="preserve">
          <source>This module contains some common utilities used by containers.</source>
          <target state="translated">このモジュールには、コンテナで使用される一般的なユーティリティが含まれています。</target>
        </trans-unit>
        <trans-unit id="dcac3a1b4da6941734058525116d97065268b549" translate="yes" xml:space="preserve">
          <source>This module contains support for controlling dynamic arrays' appending</source>
          <target state="translated">このモジュールには、動的配列の追加を制御するためのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="c49eb9ff2d1c37482fee0bb60748312c2292f298" translate="yes" xml:space="preserve">
          <source>This module contains support for controlling dynamic arrays' capacity and length</source>
          <target state="translated">このモジュールには、動的配列の容量と長さを制御するためのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="5a472e4841c397ed8a20c7da34116a395a9f78db" translate="yes" xml:space="preserve">
          <source>This module contains support for controlling dynamic arrays' concatenation</source>
          <target state="translated">このモジュールには、動的配列の連結を制御するためのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="d58f6f902fb5917dee8fa5b768555a18fd9ff404" translate="yes" xml:space="preserve">
          <source>This module contains the &lt;a href=&quot;#Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt; type, which is used to represent complex numbers, along with related mathematical operations and functions.</source>
          <target state="translated">このモジュールには、関連する数学演算および関数とともに、複素数を表すために使用される&lt;a href=&quot;#Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; &lt;/a&gt;型が含まれています。</target>
        </trans-unit>
        <trans-unit id="1cafe10d55f1a2961b685e59594325a88af3e24c" translate="yes" xml:space="preserve">
          <source>This module contains the &lt;code&gt;Id&lt;/code&gt; struct with a list of predefined symbols the compiler knows about.</source>
          <target state="translated">このモジュールには、コンパイラーが認識している事前定義されたシンボルのリストを含む &lt;code&gt;Id&lt;/code&gt; 構造体が含まれています。</target>
        </trans-unit>
        <trans-unit id="99093b5cfdcc5707f50f9cafa8f212b7442853a6" translate="yes" xml:space="preserve">
          <source>This module contains utilities for TypeInfo implementation.</source>
          <target state="translated">このモジュールには、TypeInfoの実装のためのユーティリティが含まれています。</target>
        </trans-unit>
        <trans-unit id="a058b7e236eb5ab7c537629e84966c190eced743" translate="yes" xml:space="preserve">
          <source>This module contains utility functions to help the implementation of the runtime hook</source>
          <target state="translated">このモジュールには、ランタイムフックの実装を支援するユーティリティ関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="7d6317f5849751724969636691ef1f8625b672f7" translate="yes" xml:space="preserve">
          <source>This module contains various string related functions.</source>
          <target state="translated">このモジュールには、文字列関連の様々な関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="9a531226ad2342a85a7cda80bcc56003e90c7e5a" translate="yes" xml:space="preserve">
          <source>This module defines &lt;code&gt;TypedAllocator&lt;/code&gt;, a statically-typed allocator that aggregates multiple untyped allocators and uses them depending on the static properties of the types allocated. For example, distinct allocators may be used for thread-local vs. thread-shared data, or for fixed-size data (&lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; objects) vs. resizable data (arrays).</source>
          <target state="translated">このモジュールは &lt;code&gt;TypedAllocator&lt;/code&gt; を定義します。これは、複数の型なしアロケーターを集約し、割り当てられた型の静的プロパティに応じてそれらを使用する静的型付きアロケーターです。 たとえば、スレッドローカルデータとスレッド共有データ、または固定サイズデータ（ &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; オブジェクト）とサイズ変更可能なデータ（配列）には、個別のアロケーターを使用できます。</target>
        </trans-unit>
        <trans-unit id="259e74bca77eb48b491beebe7a35554776cb2efb" translate="yes" xml:space="preserve">
          <source>This module defines a number of primitives that work with graphemes: &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#decodeGrapheme&quot;&gt;&lt;code&gt;decodeGrapheme&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#graphemeStride&quot;&gt;&lt;code&gt;graphemeStride&lt;/code&gt;&lt;/a&gt;. All of them are using</source>
          <target state="translated">このモジュールは、書記素で動作するいくつかのプリミティブを定義します： &lt;a href=&quot;#decodeGrapheme&quot;&gt; &lt;code&gt;decodeGrapheme&lt;/code&gt; &lt;/a&gt; 、 decodeGrapheme 、および&lt;a href=&quot;#graphemeStride&quot;&gt; &lt;code&gt;graphemeStride&lt;/code&gt; &lt;/a&gt; 。 それらのすべてが使用しています</target>
        </trans-unit>
        <trans-unit id="99bc02ede476ad853ab518e42294b5202a998289" translate="yes" xml:space="preserve">
          <source>This module defines facilities for efficient checking of integral operations against overflow, casting with loss of precision, unexpected change of sign, etc. The checking (and possibly correction) can be done at operation level, for example &lt;a href=&quot;#opChecked&quot;&gt;&lt;code&gt;opChecked&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!&quot;+&quot;(x, y, overflow)&lt;/code&gt; adds two integrals &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and sets &lt;code&gt;overflow&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if an overflow occurred. The flag &lt;code&gt;overflow&lt;/code&gt; (a &lt;code&gt;bool&lt;/code&gt; passed by reference) is not touched if the operation succeeded, so the same flag can be reused for a sequence of operations and tested at the end.</source>
          <target state="translated">このモジュールは、オーバーフロー、精度の損失を伴うキャスト、予期しない符号の変更などに対する積分演算の効率的なチェックのための機能を定義します。チェック（および場合によっては修正）は、たとえば&lt;a href=&quot;#opChecked&quot;&gt; &lt;code&gt;opChecked&lt;/code&gt; &lt;/a&gt; &lt;code&gt;!&quot;+&quot;(x, y, overflow)&lt;/code&gt; は、2つの積分 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を加算し、オーバーフローが発生した場合に &lt;code&gt;overflow&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します 。 フラグ &lt;code&gt;overflow&lt;/code&gt; （参照によって渡される &lt;code&gt;bool&lt;/code&gt; ）は、操作が成功した場合は変更されないため、同じフラグを一連の操作に再利用して、最後にテストできます。</target>
        </trans-unit>
        <trans-unit id="8e33eb3468c635b3f1b1bf8d7ab1a84f24b11f39" translate="yes" xml:space="preserve">
          <source>This module defines functions related to exceptions and general error handling. It also defines functions intended to aid in unit testing.</source>
          <target state="translated">本モジュールでは、例外や一般的なエラー処理に関する機能を定義しています。また、ユニットテストを支援するための関数も定義しています。</target>
        </trans-unit>
        <trans-unit id="2f439ece9b3ae412ebb6e407781c8a8d19e803e8" translate="yes" xml:space="preserve">
          <source>This module defines generic containers.</source>
          <target state="translated">このモジュールは、汎用コンテナを定義します。</target>
        </trans-unit>
        <trans-unit id="7716ef353856b8c8fdc336f0f551c1520abef4d6" translate="yes" xml:space="preserve">
          <source>This module defines the notion of a range. Ranges generalize the concept of arrays, lists, or anything that involves sequential access. This abstraction enables the same set of algorithms (see &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt;) to be used with a vast variety of different concrete types. For example, a linear search algorithm such as &lt;a href=&quot;std_algorithm_searching#find&quot;&gt;&lt;code&gt;std.algorithm.searching.find&lt;/code&gt;&lt;/a&gt; works not just for arrays, but for linked-lists, input files, incoming network data, etc.</source>
          <target state="translated">このモジュールは、範囲の概念を定義します。 範囲は、配列、リスト、またはシーケンシャルアクセスを伴うものの概念を一般化します。 この抽象化により、同じアルゴリズムのセット（ &lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; を&lt;/a&gt;参照）をさまざまな異なる具象タイプで使用できるようになります。 たとえば、 &lt;a href=&quot;std_algorithm_searching#find&quot;&gt; &lt;code&gt;std.algorithm.searching.find&lt;/code&gt; &lt;/a&gt;などの線形検索アルゴリズムは、配列だけでなく、リンクリスト、入力ファイル、受信ネットワークデータなどにも機能します。</target>
        </trans-unit>
        <trans-unit id="0c2b133a65c34666134047443b875c3c6bf1823e" translate="yes" xml:space="preserve">
          <source>This module describes the digest APIs used in Phobos. All digests follow these APIs. Additionally, this module contains useful helper methods which can be used with every digest type.</source>
          <target state="translated">このモジュールは Phobos で使用されるダイジェスト API について説明します。すべてのダイジェストはこれらの API に従います。さらに、このモジュールには、すべてのダイジェストタイプで使用できる有用なヘルパーメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="9eac267b2bca3c4e62e74376d6d1858e8b30f305" translate="yes" xml:space="preserve">
          <source>This module extracts debug info from the currently running Mach-O executable.</source>
          <target state="translated">現在実行中のMach-O実行ファイルからデバッグ情報を抽出します。</target>
        </trans-unit>
        <trans-unit id="2b3bde835b97011d3a24374bdd792ad0a067b596" translate="yes" xml:space="preserve">
          <source>This module has two submodules:</source>
          <target state="translated">このモジュールには2つのサブモジュールがあります。</target>
        </trans-unit>
        <trans-unit id="c364d07bb94ddbade750564cb1b9de747e163c33" translate="yes" xml:space="preserve">
          <source>This module implements a &lt;a href=&quot;http://erdani.org/publications/cuj-04-2002.html&quot;&gt;discriminated union&lt;/a&gt; type (a.k.a. &lt;a href=&quot;http://en.wikipedia.org/wiki/Tagged_union&quot;&gt;tagged union&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;algebraic type&lt;/a&gt;). Such types are useful for type-uniform binary interfaces, interfacing with scripting languages, and comfortable exploratory programming.</source>
          <target state="translated">このモジュールは、 &lt;a href=&quot;http://erdani.org/publications/cuj-04-2002.html&quot;&gt;識別&lt;/a&gt;された共用体型（別名： &lt;a href=&quot;http://en.wikipedia.org/wiki/Tagged_union&quot;&gt;タグ付き共用体&lt;/a&gt; 、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;代数型&lt;/a&gt; ）を実装します。 このような型は、型が統一されたバイナリインターフェイス、スクリプト言語とのインターフェース、快適な探索的プログラミングに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dcf874427a131dcde8af3f16bcfbe7028972cb86" translate="yes" xml:space="preserve">
          <source>This module implements a generic doubly-linked list container. It can be used as a queue, dequeue or stack.</source>
          <target state="translated">このモジュールは、汎用的な二重リンクリストコンテナを実装しています。キュー、デキュー、スタックとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="276f012505f8a462f31b45a6f4a35457a2d35dbc" translate="yes" xml:space="preserve">
          <source>This module implements a red-black tree container.</source>
          <target state="translated">このモジュールは、赤黒い木のコンテナを実装しています。</target>
        </trans-unit>
        <trans-unit id="7870ea3fc10596df955abb619b60da2851a384ad" translate="yes" xml:space="preserve">
          <source>This module implements a singly-linked list container. It can be used as a stack.</source>
          <target state="translated">このモジュールは、シングルリンクのリストコンテナを実装しています。スタックとして使うことができます。</target>
        </trans-unit>
        <trans-unit id="b8ec77e995992fa015630679195d60252ee43e89" translate="yes" xml:space="preserve">
          <source>This module implements a variety of type constructors, i.e., templates that allow construction of new, useful general-purpose types.</source>
          <target state="translated">このモジュールは、様々な型コンストラクタ、すなわち、新しく有用な汎用型の構築を可能にするテンプレートを実装しています。</target>
        </trans-unit>
        <trans-unit id="64f274b864d84b8337845eb1c9cfcbc24ac5038e" translate="yes" xml:space="preserve">
          <source>This module implements experimental additions/modifications to &lt;a href=&quot;std_typecons&quot;&gt;&lt;code&gt;std.typecons&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、 &lt;a href=&quot;std_typecons&quot;&gt; &lt;code&gt;std.typecons&lt;/code&gt; &lt;/a&gt;への実験的な追加/変更を実装しています。</target>
        </trans-unit>
        <trans-unit id="eaa4498639b5fb5cabef3038967389ce127f79a8" translate="yes" xml:space="preserve">
          <source>This module implements integral arithmetic primitives that check for out-of-range results.</source>
          <target state="translated">このモジュールは、範囲外の結果をチェックする積分演算プリミティブを実装しています。</target>
        </trans-unit>
        <trans-unit id="19bff9c3e2a27e1a7382004762c10f34a531050a" translate="yes" xml:space="preserve">
          <source>This module implements the formatting functionality for strings and I/O. It's comparable to C99's &lt;code&gt;vsprintf()&lt;/code&gt; and uses a similar format encoding scheme.</source>
          <target state="translated">このモジュールは、文字列とI / Oのフォーマット機能を実装します。 これはC99の &lt;code&gt;vsprintf()&lt;/code&gt; に相当し、同様のフォーマットエンコーディングスキームを使用します。</target>
        </trans-unit>
        <trans-unit id="c014fbea053ad61d3a5ae1fc743fb6c3131c1dfb" translate="yes" xml:space="preserve">
          <source>This module is a port of a growing fragment of the numeric header in Alexander Stepanov's &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_Template_Library&quot;&gt;Standard Template Library&lt;/a&gt;, with a few additions.</source>
          <target state="translated">このモジュールは、アレクサンダーステパノフの&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_Template_Library&quot;&gt;標準テンプレートライブラリ&lt;/a&gt;の数値ヘッダーの断片の移植版であり、いくつか追加されています。</target>
        </trans-unit>
        <trans-unit id="186b66046159293951af2f7bf5b6d370eaa1c7f1" translate="yes" xml:space="preserve">
          <source>This module is a submodule of &lt;a href=&quot;std_container&quot;&gt;&lt;code&gt;std.container&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは&lt;a href=&quot;std_container&quot;&gt; &lt;code&gt;std.container&lt;/code&gt; の&lt;/a&gt;サブモジュールです。</target>
        </trans-unit>
        <trans-unit id="b888919ea96721208483544ffecc9a20b885369e" translate="yes" xml:space="preserve">
          <source>This module is a submodule of &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; の&lt;/a&gt;サブモジュールです。</target>
        </trans-unit>
        <trans-unit id="66276a22645692b59d3aafb558b5c8800653b392" translate="yes" xml:space="preserve">
          <source>This module is used to manipulate path strings.</source>
          <target state="translated">パス文字列を操作するためのモジュールです。</target>
        </trans-unit>
        <trans-unit id="676c0f1d3f6966f52d6837dedf54ff7909b0c357" translate="yes" xml:space="preserve">
          <source>This module provides a &lt;code&gt;BinaryHeap&lt;/code&gt; (aka priority queue) adaptor that makes a binary heap out of any user-provided random-access range.</source>
          <target state="translated">このモジュールは、ユーザーが指定したランダムアクセス範囲からバイナリヒープを作成する &lt;code&gt;BinaryHeap&lt;/code&gt; （別名優先キュー）アダプターを提供します。</target>
        </trans-unit>
        <trans-unit id="71c4856d53f3e5b6efc2d0b1e712b1b6dc800220" translate="yes" xml:space="preserve">
          <source>This module provides a few predefined hooks (below) that add useful behavior to &lt;code&gt;Checked&lt;/code&gt;:</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Checked&lt;/code&gt; に有用な動作を追加するいくつかの事前定義されたフック（以下）を提供します。</target>
        </trans-unit>
        <trans-unit id="b737fcac62cfd177fb2788c39a8e794c75cf3e63" translate="yes" xml:space="preserve">
          <source>This module provides all kinds of functions to create, manipulate or convert arrays:</source>
          <target state="translated">このモジュールは、配列を作成、操作、変換するためのあらゆる種類の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="744c3d7cd21f0164caf9f95d6fbb778bc3ca3903" translate="yes" xml:space="preserve">
          <source>This module provides an &lt;code&gt;Array&lt;/code&gt; type with deterministic memory usage not reliant on the GC, as an alternative to the built-in arrays.</source>
          <target state="translated">このモジュールは、組み込み配列の代わりに、GCに依存しない確定的なメモリ使用量を持つ &lt;code&gt;Array&lt;/code&gt; 型を提供します。</target>
        </trans-unit>
        <trans-unit id="223a76451a573bc8bae5a7f8a3df3aee7f1c9bdf" translate="yes" xml:space="preserve">
          <source>This module provides an interface to the garbage collector used by applications written in the D programming language. It allows the garbage collector in the runtime to be swapped without affecting binary compatibility of applications.</source>
          <target state="translated">このモジュールは、D プログラミング言語で書かれたアプリケーションで使用されるガベージコレクタへのインターフェイスを提供します。これにより、アプリケーションのバイナリ互換性に影響を与えることなく、ランタイムのガベージコレクタをスワップすることができます。</target>
        </trans-unit>
        <trans-unit id="45492b4e65c39718d334c504b40cf5ab9383e9f9" translate="yes" xml:space="preserve">
          <source>This module provides functions for compile time function composition. These functions are helpful when constructing predicates for the algorithms in &lt;a href=&quot;std_algorithm&quot;&gt;&lt;code&gt;std.algorithm&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_range&quot;&gt;&lt;code&gt;std.range&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、コンパイル時関数構成のための関数を提供します。 これらの関数は、 &lt;a href=&quot;std_algorithm&quot;&gt; &lt;code&gt;std.algorithm&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;std_range&quot;&gt; &lt;code&gt;std.range&lt;/code&gt; で&lt;/a&gt;アルゴリズムの述語を作成するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5d2a6ed25bc583d8e01cfa972338639c00d25698" translate="yes" xml:space="preserve">
          <source>This module provides two default implementations of Base64 encoding, &lt;a href=&quot;#Base64&quot;&gt;&lt;code&gt;Base64&lt;/code&gt;&lt;/a&gt; with a standard encoding alphabet, and a variant &lt;a href=&quot;#Base64URL&quot;&gt;&lt;code&gt;Base64URL&lt;/code&gt;&lt;/a&gt; that has a modified encoding alphabet designed to be safe for embedding in URLs and filenames.</source>
          <target state="translated">このモジュールは、Base64エンコーディングの2つのデフォルト実装を提供します&lt;a href=&quot;#Base64URL&quot;&gt; &lt;code&gt;Base64URL&lt;/code&gt; &lt;/a&gt;は、標準エンコーディングアルファベットを使用し、 Base64URLは、エンコーディングアルファベットを変更して、URLとファイル名に安全に埋め込むことができるように設計されています。</target>
        </trans-unit>
        <trans-unit id="14ea77a508973ad119aa38dedb9cc8889215b5e7" translate="yes" xml:space="preserve">
          <source>This module publicly imports &lt;a href=&quot;std_digest&quot;&gt;&lt;code&gt;std.digest&lt;/code&gt;&lt;/a&gt; and can be used as a stand-alone module.</source>
          <target state="translated">このモジュールは&lt;a href=&quot;std_digest&quot;&gt; &lt;code&gt;std.digest&lt;/code&gt; &lt;/a&gt;をパブリックにインポートし、スタンドアロンモジュールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="821aad4a4d60f837d17e068e658c2b293af2fa2e" translate="yes" xml:space="preserve">
          <source>This module publicly imports &lt;code&gt;std.digest&lt;/code&gt; and can be used as a stand-alone module.</source>
          <target state="translated">このモジュールは &lt;code&gt;std.digest&lt;/code&gt; をパブリックにインポートし、スタンドアロンモジュールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="b024b98a208b935e325d89f7c0523c717e6fc717" translate="yes" xml:space="preserve">
          <source>This module tells the garbage collector about the static data and bss segments, so the GC can scan them for roots. It does not deal with thread local static data.</source>
          <target state="translated">このモジュールは、静的データと bss セグメントについてガベージコレクタに伝え、GC がそれらをスキャンしてルートを探すことができるようにします。スレッドローカルの静的データは扱いません。</target>
        </trans-unit>
        <trans-unit id="463dc59b1d8043356600fc31e94afe8ce61592b7" translate="yes" xml:space="preserve">
          <source>This modules defines some utility functions for DMD.</source>
          <target state="translated">このモジュールでは、DMDのユーティリティ機能を定義しています。</target>
        </trans-unit>
        <trans-unit id="43097636fc7721cda69a3011b02706b476fb53a5" translate="yes" xml:space="preserve">
          <source>This modules defines the entry point (main) for DMD, as well as related utilities needed for arguments parsing, path manipulation, etc... This file is not shared with other compilers which use the DMD front-end.</source>
          <target state="translated">このモジュールはDMDのエントリーポイント(メイン)と、引数の解析やパス操作などに必要な関連ユーティリティを定義します。このファイルは DMD フロントエンドを使用する他のコンパイラとは共有されません。</target>
        </trans-unit>
        <trans-unit id="8c5c0a58905cfb5b439b5201a82885c00dee51e2" translate="yes" xml:space="preserve">
          <source>This modules defines the help texts for the CLI options offered by DMD. This file is not shared with other compilers which use the DMD front-end. However, this file will be used to generate the &lt;a href=&quot;https://dlang.org/dmd-linux.html&quot;&gt;online documentation&lt;/a&gt; and MAN pages.</source>
          <target state="translated">このモジュールは、DMDが提供するCLIオプションのヘルプテキストを定義します。 このファイルは、DMDフロントエンドを使用する他のコンパイラと共有されません。 ただし、このファイルは、 &lt;a href=&quot;https://dlang.org/dmd-linux.html&quot;&gt;オンラインドキュメント&lt;/a&gt;とMANページの生成に使用されます。</target>
        </trans-unit>
        <trans-unit id="d366277495521395d02d0e8919a008889699c8b6" translate="yes" xml:space="preserve">
          <source>This modules implements the serialization of a lambda function. The serialization is computed by visiting the abstract syntax subtree of the given lambda function. The serialization is a string which contains the type of the parameters and the string represantation of the lambda expression.</source>
          <target state="translated">このモジュールはラムダ関数のシリアライズを実装します。シリアライズは、与えられたラムダ関数の抽象構文サブツリーを参照して計算されます。シリアライズは文字列で、パラメータの型とラムダ式の文字列表現を含みます。</target>
        </trans-unit>
        <trans-unit id="4686239dc1c916453ca8175a0c8f0fd5b10fd0f8" translate="yes" xml:space="preserve">
          <source>This mostly means checking that the &lt;a href=&quot;http://www.digitalmars.com/rtl/stdio.html#printf&quot;&gt;printf format specifier&lt;/a&gt; matches the corresponding D data type. Although printf is designed to handle 0 terminated strings, not D dynamic arrays of chars, it turns out that since D dynamic arrays are a length followed by a pointer to the data, the &lt;code&gt;%.*s&lt;/code&gt; format works:</source>
          <target state="translated">これは主に、 &lt;a href=&quot;http://www.digitalmars.com/rtl/stdio.html#printf&quot;&gt;printf書式指定子&lt;/a&gt;が対応するDデータ型と一致することを確認することを意味します 。 printfは、文字のD動的配列ではなく、0で終了する文字列を処理するように設計されていますが、D動的配列は長さの後にデータへのポインターが続くため、 &lt;code&gt;%.*s&lt;/code&gt; 形式が機能することがわかります。</target>
        </trans-unit>
        <trans-unit id="d2a9ab8f340972eb23caaae774d32f80fccc2570" translate="yes" xml:space="preserve">
          <source>This must be called when a scheduled thread terminates. It tears down the messaging system for the thread and notifies interested parties of the thread's termination.</source>
          <target state="translated">これはスケジュールされたスレッドが終了するときに呼ばれなければなりません。スレッドのメッセージングシステムを破壊し、スレッドの終了を関係者に通知します。</target>
        </trans-unit>
        <trans-unit id="a87fd9a7f939391e41bf76be573f03fa79c258b5" translate="yes" xml:space="preserve">
          <source>This opcode is not supported by the assembler, instead use</source>
          <target state="translated">このオペコードはアセンブラではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5080314419c68e07e9fbf46cb969bb8f7aec2b87" translate="yes" xml:space="preserve">
          <source>This overload converts a character input range to a &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">このオーバーロードは、文字入力範囲を &lt;code&gt;bool&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="d2f77cb81e183ee70aaac158a6010f060479e211" translate="yes" xml:space="preserve">
          <source>This overload of the digest function handles arrays.</source>
          <target state="translated">このダイジェスト関数のオーバーロードは配列を扱います。</target>
        </trans-unit>
        <trans-unit id="5b5704e7eb61d0c1141594f127f54400ac726629" translate="yes" xml:space="preserve">
          <source>This overload of the hexDigest function handles arrays.</source>
          <target state="translated">この hexDigest 関数のオーバーロードは配列を扱います。</target>
        </trans-unit>
        <trans-unit id="9b517602563a0a0437638b7de42771ba24220c9c" translate="yes" xml:space="preserve">
          <source>This override handles the following two cases: static foreach (i, i; [0]) { ... } and static foreach (i; [0]) { enum i = 2; }</source>
          <target state="translated">このオーバーライドは、次の2つのケースを処理します:static foreach (i,i;[0]){...と、static foreach (i;[0]){enum i=2;}です。}</target>
        </trans-unit>
        <trans-unit id="4b5c72b79cb5cdac8aa14be60be09b9790cb2ce2" translate="yes" xml:space="preserve">
          <source>This package also implements untyped composable memory allocators. They are</source>
          <target state="translated">本パッケージは、型なしのコンポーザブルメモリアロケータも実装しています。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5b7998033b82c18a421be4c93bdff9f111ea8e70" translate="yes" xml:space="preserve">
          <source>This package implements generic algorithms oriented towards the processing of sequences. Sequences processed by these functions define range-based interfaces. See also &lt;a href=&quot;std_range&quot;&gt;Reference on ranges&lt;/a&gt; and &lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;tutorial on ranges&lt;/a&gt;.</source>
          <target state="translated">このパッケージは、シーケンスの処理に向けられた一般的なアルゴリズムを実装します。 これらの関数によって処理されるシーケンスは、範囲ベースのインターフェースを定義します。 &lt;a href=&quot;std_range&quot;&gt;範囲に関するリファレンスと範囲に関する&lt;/a&gt; &lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;チュートリアル&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="58c7d9c8a3cee8b3cf80c6b3b4132f86a95f5343" translate="yes" xml:space="preserve">
          <source>This package implements the hash-based message authentication code (HMAC) algorithm as defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc2104&quot;&gt;RFC2104&lt;/a&gt;. See also the corresponding &lt;a href=&quot;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;Wikipedia article&lt;/a&gt;.</source>
          <target state="translated">このパッケージは、RFC2104で定義されているハッシュベースのメッセージ認証コード（HMAC）アルゴリズムを&lt;a href=&quot;http://tools.ietf.org/html/rfc2104&quot;&gt;実装し&lt;/a&gt;ます。 対応する&lt;a href=&quot;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;ウィキペディアの記事&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b54b15a9491f8b22812d70e97f6e30656fbe4637" translate="yes" xml:space="preserve">
          <source>This points to a linked list of headers, struct curl_slist kind</source>
          <target state="translated">これは、ヘッダのリンクされたリスト、構造体 curl_slist kind を指します。</target>
        </trans-unit>
        <trans-unit id="4fa3e3f63776b5b0936a2fb2bebc42c79d485368" translate="yes" xml:space="preserve">
          <source>This points to a linked list of post entries, struct curl_httppost</source>
          <target state="translated">これは、記事エントリのリンクされたリスト、構造体 curl_httppost</target>
        </trans-unit>
        <trans-unit id="4709ade7923d0d8282a3479562e2dbd3f6142a8c" translate="yes" xml:space="preserve">
          <source>This points to a linked list of telnet options</source>
          <target state="translated">これは telnet オプションのリンク先リストを指しています。</target>
        </trans-unit>
        <trans-unit id="62f59d77929e72a8f25d40e635e0a3a32957778c" translate="yes" xml:space="preserve">
          <source>This predicate must be an equivalence relation, that is, it must be reflexive (&lt;code&gt;pred(x,x)&lt;/code&gt; is always true), symmetric (&lt;code&gt;pred(x,y) == pred(y,x)&lt;/code&gt;), and transitive (&lt;code&gt;pred(x,y) &amp;amp;&amp;amp; pred(y,z)&lt;/code&gt; implies &lt;code&gt;pred(x,z)&lt;/code&gt;). If this is not the case, the range returned by chunkBy may assert at runtime or behave erratically.</source>
          <target state="translated">この述語は同値関係である必要があります。つまり、再帰的（ &lt;code&gt;pred(x,x)&lt;/code&gt; は常にtrue）、対称的（ &lt;code&gt;pred(x,y) == pred(y,x)&lt;/code&gt; ）、および推移的（ &lt;code&gt;pred(x,y) &amp;amp;&amp;amp; pred(y,z)&lt;/code&gt; &lt;code&gt;pred(x,z)&lt;/code&gt; 意味します）。 そうでない場合、chunkByによって返される範囲は実行時にアサートするか、不規則に動作する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0a267b44ef886d9c8baf429e8671183b625c8796" translate="yes" xml:space="preserve">
          <source>This program reads standard in and writes it to standard out, pretty-printing any found D mangled names.</source>
          <target state="translated">このプログラムは、標準で読み込んだものを標準アウトに書き出し、見つかったDの変な名前をきれいに印刷します。</target>
        </trans-unit>
        <trans-unit id="afdb5e2e48fdacd7a6c8694592ad8b718667d89f" translate="yes" xml:space="preserve">
          <source>This property is overridden because the local time of the system could change while the program is running and we need to determine it dynamically rather than it being fixed like it would be with most time zones.</source>
          <target state="translated">このプロパティは、プログラムの実行中にシステムのローカル時間が変更される可能性があり、ほとんどのタイムゾーンのように固定されるのではなく、動的に決定する必要があるため、オーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="6d74dd10b5c800dca0bea3aabcacb84d776dbed7" translate="yes" xml:space="preserve">
          <source>This property sets and gets the default &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="translated">このプロパティは、デフォルトの &lt;code&gt;Logger&lt;/code&gt; を設定および取得します。</target>
        </trans-unit>
        <trans-unit id="233904e9ff09001991edcef153035ddd2dc72e31" translate="yes" xml:space="preserve">
          <source>This property should not be used, but is supported for legacy purposes.</source>
          <target state="translated">このプロパティは使用すべきではありませんが、レガシー目的でサポートされています。</target>
        </trans-unit>
        <trans-unit id="0c0985b965d550bee9a97d40f84d906e5dd41300" translate="yes" xml:space="preserve">
          <source>This prototype applies to all conversion callbacks</source>
          <target state="translated">このプロトタイプはすべての変換コールバックに適用されます。</target>
        </trans-unit>
        <trans-unit id="362936247c39185758bfe185928298d458cd1898" translate="yes" xml:space="preserve">
          <source>This provides a transition from the non-promoting behavior of unary + - ~ to the C-like integral promotion behavior.</source>
          <target state="translated">これは、単項+-~の非推進動作から、Cのような積分推進動作への移行を提供します。</target>
        </trans-unit>
        <trans-unit id="42fdb37f7871dd64abfac735f6f1948def69313b" translate="yes" xml:space="preserve">
          <source>This provides a way to add functions to a class externally as if they were public final member functions, which enables &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/component-programming-in-d/240008321&quot;&gt; function chaining and component programming&lt;/a&gt;.</source>
          <target state="translated">これにより、関数を外部のクラスにパブリック最終メンバー関数であるかのように外部に追加でき、 &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/component-programming-in-d/240008321&quot;&gt;関数の連鎖とコンポーネントのプログラミングが可能になります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5e3135a675f967dd5c5470ea386f16d7ad31f41" translate="yes" xml:space="preserve">
          <source>This range iterates over fixed-sized chunks of size &lt;code&gt;chunkSize&lt;/code&gt; of a &lt;code&gt;source&lt;/code&gt; range. &lt;code&gt;Source&lt;/code&gt; must be an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;. &lt;code&gt;chunkSize&lt;/code&gt; must be greater than zero.</source>
          <target state="translated">この範囲は、 &lt;code&gt;source&lt;/code&gt; 範囲のサイズ &lt;code&gt;chunkSize&lt;/code&gt; の固定サイズのチャンクを反復処理します。 &lt;code&gt;Source&lt;/code&gt; は&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲で&lt;/a&gt;なければなりません。 &lt;code&gt;chunkSize&lt;/code&gt; はゼロより大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="ffdad1d5b9cd516ba877128f5377fd43732ba01e" translate="yes" xml:space="preserve">
          <source>This range splits a &lt;code&gt;source&lt;/code&gt; range into &lt;code&gt;chunkCount&lt;/code&gt; chunks of approximately equal length. &lt;code&gt;Source&lt;/code&gt; must be a forward range with known length.</source>
          <target state="translated">この範囲は、 &lt;code&gt;source&lt;/code&gt; 範囲をほぼ同じ長さの &lt;code&gt;chunkCount&lt;/code&gt; チャンクに分割します。 &lt;code&gt;Source&lt;/code&gt; は、長さがわかっている前方範囲である必要があります。</target>
        </trans-unit>
        <trans-unit id="99784cdd841b29b6c6c458a6a98700cdba67e67d" translate="yes" xml:space="preserve">
          <source>This range will be a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; if the underlying data source is at least a forward range.</source>
          <target state="translated">基になるデータソースが少なくとも&lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;前方の範囲である&lt;/a&gt;場合、この範囲は前方の範囲になります。</target>
        </trans-unit>
        <trans-unit id="87508ea3111ce555c431f5b202f7db1e58a43a32" translate="yes" xml:space="preserve">
          <source>This range will receive elements of &lt;code&gt;inputRange&lt;/code&gt; progressively as iteration proceeds.</source>
          <target state="translated">この範囲は、反復が進むにつれて徐々に &lt;code&gt;inputRange&lt;/code&gt; の要素を受け取ります。</target>
        </trans-unit>
        <trans-unit id="76aba1f55c69e82481c98e4e2c1338584cc1691e" translate="yes" xml:space="preserve">
          <source>This represents the category of &lt;code&gt;Throwable&lt;/code&gt; objects that are &lt;b&gt;not&lt;/b&gt; safe to catch and handle. In principle, one should not catch Error objects, as they represent unrecoverable runtime errors. Certain runtime guarantees may fail to hold when these errors are thrown, making it unsafe to continue execution after catching them.</source>
          <target state="translated">これは、安全にキャッチして処理&lt;b&gt;できない&lt;/b&gt; &lt;code&gt;Throwable&lt;/code&gt; オブジェクトのカテゴリを表します。 原則として、エラーオブジェクトは回復できない実行時エラーを表すため、キャッチしないでください。 これらのエラーがスローされると、特定のランタイム保証が保持されず、エラーをキャッチした後で実行を継続することが安全でなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f5f588659c6a58c1ddf047b3a2039449d9c56d1c" translate="yes" xml:space="preserve">
          <source>This returns the evaluation value of performance as the ratio of baseFunc's time over targetFunc's time. If performance is high, this returns a high value.</source>
          <target state="translated">パフォーマンスの評価値を、baseFunc の時間と targetFunc の時間の比で返す。パフォーマンスが高い場合は、高い値を返す。</target>
        </trans-unit>
        <trans-unit id="f6949b897dc88b2038c4de24c6845ff78a726d87" translate="yes" xml:space="preserve">
          <source>This routine allows the runtime to process any special per-thread handling for the GC. This is needed for taking into account any memory that is referenced by non-scanned pointers but is about to be freed. That currently means the array append cache.</source>
          <target state="translated">このルーチンは、ランタイムが GC のための特別なスレッドごとの処理を処理することを可能にします。これは、非スキャンポインタによって参照されるが解放されようとしているメモリを考慮に入れるために必要です。これは現在、配列の追加キャッシュを意味します。</target>
        </trans-unit>
        <trans-unit id="08f408a77465437e08636b8afacc3919eb737cd7" translate="yes" xml:space="preserve">
          <source>This routine does not run thread-local static constructors when called. If full functionality as a D thread is desired, the following function must be called after thread_attachThis:</source>
          <target state="translated">このルーチンは、呼び出されてもスレッドローカルのスタティック・コンストラクタを実行しません。D スレッドとしての完全な機能が必要な場合は、thread_attachThis の後に以下の関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="29f29aed6bb63f2bb71ea82e3247723ea06a2ff1" translate="yes" xml:space="preserve">
          <source>This routine does not run thread-local static destructors when called. If full functionality as a D thread is desired, the following function must be called after thread_detachThis, particularly if the thread is being detached at some indeterminate time before program termination:</source>
          <target state="translated">このルーチンは、呼び出されてもスレッドローカルのスタティック・デストラクタを実行しません。D スレッドとしての完全な機能が望まれる場合、以下の関数は thread_detachThis の後に呼ばれなければなりません、特にプログラム終了前の不確定な時間にスレッドが切り離されている場合には。</target>
        </trans-unit>
        <trans-unit id="e2210ae223e7d7387e02e70f648478605beed923" translate="yes" xml:space="preserve">
          <source>This routine does not run thread-local static destructors when called. If full functionality as a D thread is desired, the following function must be called by the detached thread, particularly if the thread is being detached at some indeterminate time before program termination:</source>
          <target state="translated">このルーチンは、呼び出されてもスレッドローカルのスタティック・デストラクタを実行しません。D スレッドとしての完全な機能が必要な場合、以下の関数は、特にプログラム終了前の不確定な時間にスレッドが切り離されている場合には、切り離されたスレッドによって呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="47826c4895a3860e96fcff125901760f36d390ea" translate="yes" xml:space="preserve">
          <source>This routine is called at various points within concurrency-aware APIs to provide a scheduler a chance to yield execution when using some sort of cooperative multithreading model. If this is not appropriate, such as when each logical thread is backed by a dedicated kernel thread, this routine may be a no-op.</source>
          <target state="translated">このルーチンは、ある種の協調マルチスレッドモデルを使用している場合に、スケジューラに実行の機会を提供するために、同時実行対応API内の様々なポイントで呼び出されます。各論理スレッドが専用のカーネルスレッドによってバックアップされている場合など、これが適切でない場合、このルーチンは実行されないかもしれません。</target>
        </trans-unit>
        <trans-unit id="09474f394a8e3b0e692c20bd617ea5e90dedaeea" translate="yes" xml:space="preserve">
          <source>This routine is called by spawn. It is expected to instantiate a new logical thread and run the supplied operation. This thread must call thisInfo.cleanup() when the thread terminates if the scheduled thread is not a kernel thread--all kernel threads will have their ThreadInfo cleaned up automatically by a thread-local destructor.</source>
          <target state="translated">このルーチンは spawn によって呼び出されます。新しい論理スレッドをインスタンス化し、指定された操作を実行することが期待されます。このスレッドは、スケジューリングされたスレッドがカーネルスレッドでない場合、スレッドが終了するときに thisInfo.cleanup()をコールしなければなりません --すべてのカーネルスレッドは、スレッドローカルのデストラクタによって自動的に ThreadInfo がクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="df7600e8a5ce5c3ece105f6eb175adf2b4921aaa" translate="yes" xml:space="preserve">
          <source>This routine is called by the runtime to run module unit tests on startup. The user-supplied unit tester will be called if one has been set, otherwise all unit tests will be run in sequence.</source>
          <target state="translated">このルーチンは、起動時にモジュールのユニットテストを実行するためにランタイムによって呼び出されます。ユーザが提供したユニットテストが設定されていれば呼び出され、そうでなければすべてのユニットテストが順番に実行されます。</target>
        </trans-unit>
        <trans-unit id="f8232f4d22c940d991cfdba88d087083634996f9" translate="yes" xml:space="preserve">
          <source>This routine may only be called once per thread instance.</source>
          <target state="translated">このルーチンは、スレッドインスタンスごとに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5878411090cc704550555efc36dc55fc7cf0dd39" translate="yes" xml:space="preserve">
          <source>This routine must be called just prior to resuming all threads.</source>
          <target state="translated">このルーチンは、すべてのスレッドを再開する直前に呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="53cb6dbac5dae389abe55edf28bc4109aaf707d5" translate="yes" xml:space="preserve">
          <source>This routine must be preceded by a call to thread_suspendAll.</source>
          <target state="translated">このルーチンは、thread_suspendAllを呼び出す前に実行しなければなりません。</target>
        </trans-unit>
        <trans-unit id="cb9fbb3e9cb5f0e9bf7804e870b0289aa3f2cc00" translate="yes" xml:space="preserve">
          <source>This rule precludes any associative or commutative reordering of floating point expressions.</source>
          <target state="translated">この規則では、浮動小数点式の連想的な並び替えや可換的な並び替えは禁止されています。</target>
        </trans-unit>
        <trans-unit id="a889c8b355f9d26b9d8f09416cc5c638f19cc1bc" translate="yes" xml:space="preserve">
          <source>This scheduler does no explicit multiplexing, so this is a no-op.</source>
          <target state="translated">このスケジューラは明示的な多重化を行いませんので、これは実行できません。</target>
        </trans-unit>
        <trans-unit id="101357cb2b96f04e1249bc15480608aae10e36fd" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;ANSI_X3.4-1968&quot;, &quot;ANSI_X3.4-1986&quot;, &quot;ASCII&quot;, &quot;IBM367&quot;, &quot;ISO646-US&quot;, &quot;ISO_646.irv:1991&quot;, &quot;US-ASCII&quot;, &quot;cp367&quot;, &quot;csASCII&quot; &quot;iso-ir-6&quot;, &quot;us&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;ANSI_X3.4-1968&quot;,&quot;ANSI_X3.4-1986&quot;,&quot;ASCII&quot;,&quot;IBM367&quot;,&quot;ISO646-US&quot;,&quot;ISO_646.irv:1991&quot;,&quot;US-ASCII&quot;,&quot;cp367&quot;,&quot;csASCII&quot; &quot;iso-ir-6&quot;,&quot;us&quot;。</target>
        </trans-unit>
        <trans-unit id="f19febfbd6afd5a3316429731972510fc66c030b" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;CP819&quot;, &quot;IBM819&quot;, &quot;ISO-8859-1&quot;, &quot;ISO_8859-1&quot;, &quot;ISO_8859-1:1987&quot;, &quot;csISOLatin1&quot;, &quot;iso-ir-100&quot;, &quot;l1&quot;, &quot;latin1&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;CP819&quot;,&quot;IBM819&quot;,&quot;ISO-8859-1&quot;,&quot;ISO_8859-1&quot;,&quot;ISO_8859-1:1987&quot;,&quot;csISOLatin1&quot;,&quot;iso-ir-100&quot;,&quot;l1&quot;,&quot;latin1&quot;</target>
        </trans-unit>
        <trans-unit id="664030e2fd624069f198afd088ac055c78bd6022" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;Latin 2&quot;, &quot;ISO-8859-2&quot;, &quot;ISO_8859-2&quot;, &quot;ISO_8859-2:1999&quot;, &quot;Windows-28592&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;Latin 2&quot;,&quot;ISO-8859-2&quot;,&quot;ISO_8859-2&quot;,&quot;ISO_8859-2:1999&quot;,&quot;Windows-28592&quot;</target>
        </trans-unit>
        <trans-unit id="ade669f4e0479a561d644cf792664ebe8c58b7f3" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;UTF-16LE&quot; (little-endian architecture only) &quot;UTF-16BE&quot; (big-endian architecture only)</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;UTF-16LE」 (リトルエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16LE」 (リトルエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ)「UTF-16BE」 (ビッグエンディアンアーキテクチャのみ</target>
        </trans-unit>
        <trans-unit id="270ab7b02be7a6bde21e8c3a620aecc09d063e99" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;UTF-32LE&quot; (little-endian architecture only) &quot;UTF-32BE&quot; (big-endian architecture only)</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;UTF-32LE」(リトルエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32LE」(リトルエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ)「UTF-32BE」(ビッグエンディアンアーキテクチャのみ</target>
        </trans-unit>
        <trans-unit id="bced95f493391cc0c075fc9dc4db4804161c397b" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;UTF-8&quot;</source>
          <target state="translated">このスキームでは、以下の名前を認識します。&quot;UTF-8&quot;</target>
        </trans-unit>
        <trans-unit id="c947e47deb508176a3928ec96e6e69a35c074c39" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;windows-1250&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;windows-1250&quot;</target>
        </trans-unit>
        <trans-unit id="a3402a215c1529c61ece58d5fce0d4798222c23b" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;windows-1251&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;windows-1251&quot;</target>
        </trans-unit>
        <trans-unit id="ded1d5e22b73a1f4af6cf6f2d1b37c6532f710c1" translate="yes" xml:space="preserve">
          <source>This scheme recognises the following names: &quot;windows-1252&quot;</source>
          <target state="translated">このスキームは以下の名前を認識します。&quot;windows-1252&quot;</target>
        </trans-unit>
        <trans-unit id="d2dfa0f433df9d45239ecc782eb245fb19fd21d2" translate="yes" xml:space="preserve">
          <source>This seed function gives 2^w starting points (the lowest w bits of the value provided will be used). To allow the RNG to be started in any one of its internal states use the seed overload taking an InputRange.</source>
          <target state="translated">この seed 関数は 2^w の開始点を与えます(与えられた値の最下位 w ビットが使用されます)。RNG の内部状態のいずれかで開始できるようにするには,InputRange を引数とするシードオーバーロードを利用します.</target>
        </trans-unit>
        <trans-unit id="94a54cee12f5bd9b51532e5452c5a4a484e54378" translate="yes" xml:space="preserve">
          <source>This sets the current source line number to &lt;a href=&quot;#IntegerLiteral&quot;&gt;&lt;i&gt;IntegerLiteral&lt;/i&gt;&lt;/a&gt;, and optionally the current source file name to &lt;a href=&quot;#Filespec&quot;&gt;&lt;i&gt;Filespec&lt;/i&gt;&lt;/a&gt;, beginning with the next line of source text.</source>
          <target state="translated">これにより、現在のソース行番号が&lt;a href=&quot;#IntegerLiteral&quot;&gt;&lt;i&gt;IntegerLiteral&lt;/i&gt;&lt;/a&gt;に設定され、オプションで現在のソースファイル名がソーステキストの次の行から始まる&lt;a href=&quot;#Filespec&quot;&gt;&lt;i&gt;Filespec&lt;/i&gt;&lt;/a&gt;に設定されます。</target>
        </trans-unit>
        <trans-unit id="4be50da9e108662a57689b8ace75d7581f5375c8" translate="yes" xml:space="preserve">
          <source>This should be used to avoid dead-locks when the init expression waits for the result of another thread that might also call initOnce. Use with care.</source>
          <target state="translated">これは、init式がinitOnceを呼び出す可能性のある別のスレッドの結果を待っているときに、デッドロックを避けるために使用しなければなりません。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="fe2d190a50345872c262cf5d3029bd911309ce44" translate="yes" xml:space="preserve">
          <source>This simply runs op directly, since no real scheduling is needed by this approach.</source>
          <target state="translated">このアプローチでは実際のスケジューリングは必要ないので、これは単純に op を直接実行します。</target>
        </trans-unit>
        <trans-unit id="c1f36fea04df939005e7ae3b3481769a9d3881d4" translate="yes" xml:space="preserve">
          <source>This software is distributed on an &quot;AS IS&quot; basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.</source>
          <target state="translated">このソフトウェアは「現状有姿」で配布されており、明示または黙示を問わず、いかなる種類の保証もありません。</target>
        </trans-unit>
        <trans-unit id="cce69bf7cc8f89b41a07f3aa1ac572a9417bd871" translate="yes" xml:space="preserve">
          <source>This software is licensed as described in the file COPYING, which you should have received as part of this distribution. The terms are also available at &lt;a href=&quot;http://curl.haxx.se/docs/copyright.html&quot;&gt;http://curl.haxx.se/docs/copyright.html&lt;/a&gt;.</source>
          <target state="translated">このソフトウェアは、COPYINGファイルで説明されているとおりにライセンスされています。このファイルは、この配布の一部として受け取る必要があります。 これらの条件は、 &lt;a href=&quot;http://curl.haxx.se/docs/copyright.html&quot;&gt;http://curl.haxx.se/docs/copyright.html&lt;/a&gt;でも入手できます 。</target>
        </trans-unit>
        <trans-unit id="5a35b5b2fcea0cd5e1372a50fcdb64c90186c1d8" translate="yes" xml:space="preserve">
          <source>This string mixin generator allows one to create tagged class reference inside structs and classes.</source>
          <target state="translated">この文字列混合生成器を使用すると、構造体やクラスの内部にタグ付きのクラス参照を作成することができます。</target>
        </trans-unit>
        <trans-unit id="89b88529e193e34ffae54fa1436ac384d8a51298" translate="yes" xml:space="preserve">
          <source>This string mixin generator allows one to create tagged pointers inside structs and classes.</source>
          <target state="translated">この文字列混合ジェネレータを使用すると、構造体やクラスの内部にタグ付きポインタを作成することができます。</target>
        </trans-unit>
        <trans-unit id="fa44f8a37539dd0c481f757fd2c6c916db973189" translate="yes" xml:space="preserve">
          <source>This struct encapsulates all functionality related to the underlying runtime module for the calling context.</source>
          <target state="translated">この構造体は、呼び出しコンテキストの基礎となるランタイム・モジュールに関連するすべての機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="93192c346919e8c29838bf372e377e45a2bf11e8" translate="yes" xml:space="preserve">
          <source>This struct encapsulates all garbage collection functionality for the D programming language.</source>
          <target state="translated">この構造体は、D プログラミング言語のすべてのガベージコレクション機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="c0b4243b7a8d23b55f18ae71ce114f500fc9e037" translate="yes" xml:space="preserve">
          <source>This struct is needed for TemplateInstance to be the key in an associative array. Fixing &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15812&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15812&lt;/a&gt; and &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15813&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15813&lt;/a&gt; would make it unnecessary.</source>
          <target state="translated">この構造体は、TemplateInstanceが連想配列のキーになるために必要です。 &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15812&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15812&lt;/a&gt;および&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=15813&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=15813&lt;/a&gt;を修正すると、不要になります。</target>
        </trans-unit>
        <trans-unit id="ba71ab789db33d9d41fe31ac671b08fc2ff9a27c" translate="yes" xml:space="preserve">
          <source>This struct is not intended to be created in user code directly; use the &lt;a href=&quot;#decoder&quot;&gt;&lt;code&gt;decoder&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">この構造体は、ユーザーコードで直接作成するためのものではありません。 代わりに&lt;a href=&quot;#decoder&quot;&gt; &lt;code&gt;decoder&lt;/code&gt; &lt;/a&gt;機能を使用してください。</target>
        </trans-unit>
        <trans-unit id="c808480f164a9ce60af47373128f270ece2f4c37" translate="yes" xml:space="preserve">
          <source>This struct is not intended to be created in user code directly; use the &lt;a href=&quot;#encoder&quot;&gt;&lt;code&gt;encoder&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">この構造体は、ユーザーコードで直接作成するためのものではありません。 代わりに&lt;a href=&quot;#encoder&quot;&gt; &lt;code&gt;encoder&lt;/code&gt; &lt;/a&gt;関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="bf5472fdbac439d01e7f55c549978ae9fe484216" translate="yes" xml:space="preserve">
          <source>This struct takes two ranges, &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;indices&lt;/code&gt;, and creates a view of &lt;code&gt;source&lt;/code&gt; as if its elements were reordered according to &lt;code&gt;indices&lt;/code&gt;. &lt;code&gt;indices&lt;/code&gt; may include only a subset of the elements of &lt;code&gt;source&lt;/code&gt; and may also repeat elements.</source>
          <target state="translated">この構造体は、 &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;indices&lt;/code&gt; 2つの範囲を取り、要素が &lt;code&gt;indices&lt;/code&gt; に従って並べ替えられているかのように &lt;code&gt;source&lt;/code&gt; ビューを作成します 。 &lt;code&gt;indices&lt;/code&gt; は、 &lt;code&gt;source&lt;/code&gt; の要素のサブセットのみを含めることができ、要素を繰り返すこともできます。</target>
        </trans-unit>
        <trans-unit id="321a83cb6c2189fda5f0740151e0077549cc346c" translate="yes" xml:space="preserve">
          <source>This struct uses interior pointers for callbacks. Only allocate it on the stack if you never move or copy it. This also means passing by reference when passing Curl to other functions. Otherwise always allocate on the heap.</source>
          <target state="translated">この構造体は、コールバックに内部ポインタを使用します。移動やコピーを行わない場合はスタック上にのみ確保してください。これは、Curl を他の関数に渡す際に参照で渡すことも意味します。それ以外の場合は、常にヒープ上で確保してください。</target>
        </trans-unit>
        <trans-unit id="9b4fde43b38a0e50f9025a0370a796c10515fd4f" translate="yes" xml:space="preserve">
          <source>This template defines a simple struct to represent bitwise OR combinations of enum values. It can be used if all the enum values are integral constants with a bit count of at most 1, or if the &lt;code&gt;unsafe&lt;/code&gt; parameter is explicitly set to Yes. This is much safer than using the enum itself to store the OR combination, which can produce surprising effects like this:</source>
          <target state="translated">このテンプレートは、列挙値のビットごとのOR組み合わせを表す単純な構造体を定義します。 すべての列挙値が最大1のビット数の整数定数である場合、または &lt;code&gt;unsafe&lt;/code&gt; パラメーターが明示的にYesに設定されている場合に使用できます。 これは、列挙型自体を使用してORの組み合わせを格納するよりもはるかに安全です。これにより、次のような驚くべき効果が得られます。</target>
        </trans-unit>
        <trans-unit id="ed7a16b135cb8df8ef4a3a540a84c393a96223c7" translate="yes" xml:space="preserve">
          <source>This template evaluates if the passed &lt;code&gt;LogLevel&lt;/code&gt; is active. The previously described version statements are used to decide if the &lt;code&gt;LogLevel&lt;/code&gt; is active. The version statements only influence the compile unit they are used with, therefore this function can only disable logging this specific compile unit.</source>
          <target state="translated">このテンプレートは、渡された &lt;code&gt;LogLevel&lt;/code&gt; がアクティブかどうかを評価します。 前述のバージョンステートメントは、 &lt;code&gt;LogLevel&lt;/code&gt; がアクティブかどうかを決定するために使用されます。 バージョンステートメントは、それらが使用されるコンパイル単位にのみ影響を与えるため、この関数は、この特定のコンパイル単位のロギングのみを無効にできます。</target>
        </trans-unit>
        <trans-unit id="bf1947986c71233faa898611680a1e6ac855b2d0" translate="yes" xml:space="preserve">
          <source>This template is used instead of &lt;code&gt;cmpTimeUnits&lt;/code&gt; because exceptions can't be thrown at compile time and &lt;code&gt;cmpTimeUnits&lt;/code&gt; must enforce that the strings it's given are valid time unit strings. This template uses a template constraint instead.</source>
          <target state="translated">コンパイル時に例外をスローすることができず、 &lt;code&gt;cmpTimeUnits&lt;/code&gt; は指定された文字列が有効な時間単位の文字列であることを強制する必要があるため、このテンプレートは &lt;code&gt;cmpTimeUnits&lt;/code&gt; の代わりに使用されます。 このテンプレートは、代わりにテンプレート制約を使用します。</target>
        </trans-unit>
        <trans-unit id="721049b2d1b7c17de4953e979423c5d9509ce4dc" translate="yes" xml:space="preserve">
          <source>This template provides the global &lt;code&gt;printf&lt;/code&gt;-style log functions with the &lt;code&gt;LogLevel&lt;/code&gt; is encoded in the function name.</source>
          <target state="translated">このテンプレートは、グローバルな &lt;code&gt;printf&lt;/code&gt; スタイルのログ関数を提供し、 &lt;code&gt;LogLevel&lt;/code&gt; は関数名にエンコードされます。</target>
        </trans-unit>
        <trans-unit id="95faefdf67a9c230f11cf5997976bb55047f6e84" translate="yes" xml:space="preserve">
          <source>This template provides the global log functions with the &lt;code&gt;LogLevel&lt;/code&gt; is encoded in the function name.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;LogLevel&lt;/code&gt; が関数名にエンコードされたグローバルログ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="a660b19c7d186bc39b4f6c265fe64cdd5e100bb7" translate="yes" xml:space="preserve">
          <source>This template provides the log functions for the &lt;code&gt;Logger&lt;/code&gt;&lt;code&gt;class&lt;/code&gt; with the &lt;code&gt;LogLevel&lt;/code&gt; encoded in the function name.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;LogLevel&lt;/code&gt; が関数名にエンコードされた &lt;code&gt;Logger&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; ログ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="649dff2094ef00bc31b9858d34965ac9fc9b644e" translate="yes" xml:space="preserve">
          <source>This template returns the &lt;code&gt;LogLevel&lt;/code&gt; named &quot;logLevel&quot; of type &lt;code&gt;LogLevel&lt;/code&gt; defined in a user defined module where the filename has the suffix &quot;loggerconfig.d&quot;. This &lt;code&gt;LogLevel&lt;/code&gt; sets the minimal &lt;code&gt;LogLevel&lt;/code&gt; of the module.</source>
          <target state="translated">このテンプレートは、ファイル名に「loggerconfig.d」というサフィックスが付いたユーザー定義モジュールで定義されたタイプ &lt;code&gt;LogLevel&lt;/code&gt; の 「logLevel」という名前の &lt;code&gt;LogLevel&lt;/code&gt; を返します。 この &lt;code&gt;LogLevel&lt;/code&gt; は、モジュールの最小 &lt;code&gt;LogLevel&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="965d72a63b18d413b5715e4a973525a9b52a396c" translate="yes" xml:space="preserve">
          <source>This time zone's offset from UTC with west of UTC being negative (it is added to UTC to get the adjusted time).</source>
          <target state="translated">このタイムゾーンのUTCからのオフセットは、UTCの西が負になっています(調整された時間を得るためにUTCに加算されます)。</target>
        </trans-unit>
        <trans-unit id="b7456f76fa17160c9c0587cc7d1c50d1dbf69825" translate="yes" xml:space="preserve">
          <source>This type is only used by the interpreter.</source>
          <target state="translated">この型はインタプリタでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="bfaad68c51bc3ac5b55f9911a6ad3e337bcd2001" translate="yes" xml:space="preserve">
          <source>This type is returned by the module unit test handler to indicate testing results.</source>
          <target state="translated">この型は、モジュールのユニットテストハンドラによって返され、テスト結果を示します。</target>
        </trans-unit>
        <trans-unit id="fe05b2c35b150ac51e9c5a58b58b8bdf4deb8005" translate="yes" xml:space="preserve">
          <source>This uniformly outdents the text as much as possible. Whitespace-only lines are always converted to blank lines.</source>
          <target state="translated">これにより、テキストは可能な限り一様にアウトデントされます。空白のみの行は常に空白行に変換されます。</target>
        </trans-unit>
        <trans-unit id="1b0c762aaeeda93028fb7042712ade026276dad3" translate="yes" xml:space="preserve">
          <source>This unittest verifies that &lt;code&gt;myFunc&lt;/code&gt; contains only &lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;nothrow&lt;/code&gt; code. Although this can also be accomplished by attaching these attributes to &lt;code&gt;myFunc&lt;/code&gt; itself, that would prevent &lt;code&gt;myFunc&lt;/code&gt; from being instantiated with types &lt;code&gt;T&lt;/code&gt; that have &lt;code&gt;@system&lt;/code&gt; or throwing code in their &lt;code&gt;opAssign&lt;/code&gt; method, or other methods that &lt;code&gt;myFunc&lt;/code&gt; may call. The above idiom allows &lt;code&gt;myFunc&lt;/code&gt; to be instantiated with such types, yet at the same time verify that the &lt;code&gt;@system&lt;/code&gt; and throwing behavior is not introduced by the code within &lt;code&gt;myFunc&lt;/code&gt; itself.</source>
          <target state="translated">この単体テストでは、 &lt;code&gt;myFunc&lt;/code&gt; に &lt;code&gt;@safe&lt;/code&gt; の &lt;code&gt;nothrow&lt;/code&gt; コードのみが含まれていることを確認します。 これは、これらの属性を &lt;code&gt;myFunc&lt;/code&gt; 自体にアタッチすることによっても実現できますが、 &lt;code&gt;myFunc&lt;/code&gt; が含まれる &lt;code&gt;T&lt;/code&gt; 型でmyFuncがインスタンス化されないか、 &lt;code&gt;opAssign&lt;/code&gt; メソッドまたは &lt;code&gt;myFunc&lt;/code&gt; が呼び出す可能性のある他のメソッドでコードがスローされます。 上記のイディオムを使用すると、 &lt;code&gt;myFunc&lt;/code&gt; をそのようなタイプでインスタンス化できますが、同時に、 &lt;code&gt;@system&lt;/code&gt; とスロー動作が &lt;code&gt;myFunc&lt;/code&gt; 内のコードによって導入されていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="6d997c4734cfeb63e2eb24775621ef1b07f282bd" translate="yes" xml:space="preserve">
          <source>This used to be in druntime, but contained a reference to Dmain which didn't work when druntime was made into a dll and was linked to a program, such as a C++ program, that didn't have a Dmain.</source>
          <target state="translated">これは druntime に含まれていましたが、druntime を dll にして Dmain を持たない C++プログラムなどのプログラムにリンクした場合には動作しない Dmain への参照が含まれていました。</target>
        </trans-unit>
        <trans-unit id="630760402237caac7d04f49e204e2dbcf15d6147" translate="yes" xml:space="preserve">
          <source>This uses the underlying C calls to adjust the time rather than using specific D code based off of system settings to calculate the time such as &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#WindowsTimeZone&quot;&gt;&lt;code&gt;WindowsTimeZone&lt;/code&gt;&lt;/a&gt; do. That also means that it will use whatever the current time zone is on the system, even if the system's time zone changes while the program is running.</source>
          <target state="translated">これは、 &lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#WindowsTimeZone&quot;&gt; &lt;code&gt;WindowsTimeZone&lt;/code&gt; &lt;/a&gt;などの時間を計算するためにシステム設定に基づいた特定のDコードを使用するのではなく、基になるC呼び出しを使用して時間を調整します。 これは、プログラムの実行中にシステムのタイムゾーンが変更された場合でも、システム上の現在のタイムゾーンを使用することも意味します。</target>
        </trans-unit>
        <trans-unit id="222ffc2d96135317dcd7f4e64432ee48d6b47aca" translate="yes" xml:space="preserve">
          <source>This variable sets the Scheduler behavior within this program. Typically, when setting a Scheduler, scheduler.start() should be called in main. This routine will not return until program execution is complete.</source>
          <target state="translated">この変数は、プログラム内でのスケジューラの動作を設定します。通常、スケジューラを設定する際には、メインでscheduler.start()を呼び出す必要があります。このルーチンは、プログラムの実行が完了するまで戻りません。</target>
        </trans-unit>
        <trans-unit id="350617ff126e41fac846ab28e60173b84f0e36ad" translate="yes" xml:space="preserve">
          <source>This version does a merge even if the deco is already computed. Necessary for types that have a deco, but are not merged.</source>
          <target state="translated">このバージョンでは、デコが既に計算されている場合でもマージを行います。デコを持っていてもマージされない型に必要です。</target>
        </trans-unit>
        <trans-unit id="ca9704bfd218246a881b4d0fdbb145b4f7ed6074" translate="yes" xml:space="preserve">
          <source>This version manages its own read buffer, which means one memory allocation per call. If you are not retaining a reference to the read data, consider the &lt;code&gt;File.readln(buf)&lt;/code&gt; version, which may offer better performance as it can reuse its read buffer.</source>
          <target state="translated">このバージョンは、独自の読み取りバッファーを管理します。つまり、呼び出しごとに1つのメモリが割り当てられます。 読み取りデータへの参照を保持しない場合は、読み取りバッファーを再利用できるため、パフォーマンスが向上する &lt;code&gt;File.readln(buf)&lt;/code&gt; バージョンを検討してください 。</target>
        </trans-unit>
        <trans-unit id="4730e8481a2bf9923ca7e3e571c62d109e3d3d83" translate="yes" xml:space="preserve">
          <source>This version manages its own read buffer, which means one memory allocation per call. If you are not retaining a reference to the read data, consider the &lt;code&gt;readln(buf)&lt;/code&gt; version, which may offer better performance as it can reuse its read buffer.</source>
          <target state="translated">このバージョンは、独自の読み取りバッファーを管理します。つまり、呼び出しごとに1つのメモリが割り当てられます。 読み取りデータへの参照を保持しない場合は、読み取りバッファーを再利用できるため、パフォーマンスが向上する可能性がある &lt;code&gt;readln(buf)&lt;/code&gt; バージョンを検討してください 。</target>
        </trans-unit>
        <trans-unit id="5d0ffd1140b6bdea2f557dabf439528af74c3f10" translate="yes" xml:space="preserve">
          <source>This version replaces all of the matches found in &lt;code&gt;input&lt;/code&gt;, see &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt; to replace the first match only.</source>
          <target state="translated">このバージョンは、 &lt;code&gt;input&lt;/code&gt; で見つかったすべての一致を置き換えます。最初の一致のみを置き換えるには、 &lt;a href=&quot;#replaceFirst&quot;&gt; &lt;code&gt;replaceFirst&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="58e4144e8bfe93d9e0c64e9b4fdfd2a6a17871d2" translate="yes" xml:space="preserve">
          <source>This version replaces the first match in &lt;code&gt;input&lt;/code&gt;, see &lt;a href=&quot;#replaceAll&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt; to replace the all of the matches.</source>
          <target state="translated">このバージョンは &lt;code&gt;input&lt;/code&gt; の最初の一致を置き換えます。すべての一致を置き換えるには&lt;a href=&quot;#replaceAll&quot;&gt; &lt;code&gt;replaceAll&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff770a07d7fe1b2d8549b2bfe1914ce344e62c1a" translate="yes" xml:space="preserve">
          <source>This way negative spans until 10, then positive until 50, then negative until 60, then positive until 61, and so on. As seen this provides a space-efficient storage of highly redundant data that comes in long runs. A description which Unicode &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; properties fit nicely. The technique itself could be seen as a variation on &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot;&gt;RLE encoding&lt;/a&gt;.</source>
          <target state="translated">このようにして、負は10まで、次に50までは正、次に60までは負、次に61までは正、というように続きます。 見てわかるように、これは長期的に実行される非常に冗長なデータのスペース効率の良いストレージを提供します。 Unicode &lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;プロパティが適切に適合する説明。 この手法自体は、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot;&gt;RLEエンコーディングの&lt;/a&gt;バリエーションと見なすことができます。</target>
        </trans-unit>
        <trans-unit id="9d7e80d5423ced31332c30ecab9af5e8333da350" translate="yes" xml:space="preserve">
          <source>This will print a message to the &lt;code&gt;stderr&lt;/code&gt; device. The message will contain the filename, the line number, the name of the surrounding function, the time and the message.  More complex log call can go along the lines like:</source>
          <target state="translated">これにより、メッセージが &lt;code&gt;stderr&lt;/code&gt; デバイスに出力されます。 メッセージには、ファイル名、行番号、周囲の関数の名前、時間、メッセージが含まれます。 より複雑なログ呼び出しは次のような行に沿って進むことができます：</target>
        </trans-unit>
        <trans-unit id="7bbc11a96caae26edcdd1170876c310429d5242c" translate="yes" xml:space="preserve">
          <source>This wrapper function documents commitment on the part of the caller that the appropriate steps have been taken to avoid whatever conditions may trigger an exception during the evaluation of &lt;code&gt;expr&lt;/code&gt;. If it turns out that the expression</source>
          <target state="translated">このラッパー関数は、 &lt;code&gt;expr&lt;/code&gt; の評価中に例外をトリガーする可能性のある条件を回避するために適切な手順が実行された呼び出し側のコミットメントを文書化します。 その式が</target>
        </trans-unit>
        <trans-unit id="e1c33135ff86972a6ed3b9c446ccc19496208487" translate="yes" xml:space="preserve">
          <source>Though any arbitrary D code is allowed in the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; contract blocks, their only function should be to verify incoming and outgoing data. It is important to ensure that the code has no side effects, and that the release version of the code will not depend on any effects of the code. For a release build of the code, &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; contracts are not inserted.</source>
          <target state="translated">任意のDコードが入出力コントラクトブロック &lt;code&gt;in&lt;/code&gt; 許可されていますが、それらの唯一の機能は、受信データと送信データを検証することです。 コードに副作用がないこと、およびコードのリリースバージョンがコードの影響に依存しないことを確認することが重要です。 コードのリリースビルドの場合、 &lt;code&gt;in&lt;/code&gt; コントラクトと &lt;code&gt;out&lt;/code&gt; コントラクトは挿入されません。</target>
        </trans-unit>
        <trans-unit id="820043383b2d6abecf10763532e4c82a66d9247e" translate="yes" xml:space="preserve">
          <source>Thread &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">スレッド &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04c6d1513db9ed02d67521add8386801a5b34539" translate="yes" xml:space="preserve">
          <source>Thread &lt;strong id=&quot;thread_attachThis&quot;&gt;thread_attachThis&lt;/strong&gt;();</source>
          <target state="translated">スレッド&lt;strong id=&quot;thread_attachThis&quot;&gt;thread_attachThis&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="1f330e4c64cef67c5a0e2c92e690f07993e4d060" translate="yes" xml:space="preserve">
          <source>Thread Local Redirection</source>
          <target state="translated">スレッドローカルリダイレクション</target>
        </trans-unit>
        <trans-unit id="84f19dfef7c6980d5ce82fb1aaa5685b925bb278" translate="yes" xml:space="preserve">
          <source>Thread creation and management.</source>
          <target state="translated">スレッドの作成と管理。</target>
        </trans-unit>
        <trans-unit id="35ec6af76df19383c52b8f66c7369b7f13dd32d0" translate="yes" xml:space="preserve">
          <source>ThreadError if the resume operation fails for a running thread.</source>
          <target state="translated">実行中のスレッドで再開操作に失敗した場合の ThreadError</target>
        </trans-unit>
        <trans-unit id="9e4b42c8be29f1c6cbd83e3ca1f8a1f5acbf80c3" translate="yes" xml:space="preserve">
          <source>ThreadError if the suspend operation fails for a running thread.</source>
          <target state="translated">実行中のスレッドでサスペンド操作に失敗した場合の ThreadError</target>
        </trans-unit>
        <trans-unit id="2464c0788d3d18de94ad9135c7e0e048ee525f11" translate="yes" xml:space="preserve">
          <source>ThreadException if the operation fails. Any exception not handled by the joined thread.</source>
          <target state="translated">操作に失敗した場合のThreadException。結合されたスレッドで処理されない例外。</target>
        </trans-unit>
        <trans-unit id="988c5cc71109eafcf99c8ab21fce21fe97ec770d" translate="yes" xml:space="preserve">
          <source>ThreadException if the thread fails to start.</source>
          <target state="translated">スレッドの開始に失敗した場合のThreadException</target>
        </trans-unit>
        <trans-unit id="1cf40193fb824b4f6ad8cb26327d035d6a028786" translate="yes" xml:space="preserve">
          <source>ThreadID &lt;code&gt;addr&lt;/code&gt;</source>
          <target state="translated">ThreadID &lt;code&gt;addr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7ed723eeac4df5e125f2b0678ab67abc0922b8b" translate="yes" xml:space="preserve">
          <source>ThreadID &lt;code&gt;tid&lt;/code&gt;</source>
          <target state="translated">ThreadID &lt;code&gt;tid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f726da94b243f6df0f10d0a1927ff4f089c0ce2" translate="yes" xml:space="preserve">
          <source>Three Valued Logic on Wikipedia</source>
          <target state="translated">ウィキペディアに掲載されている3つの価値あるロジック</target>
        </trans-unit>
        <trans-unit id="041271075c6e4b6b2987479db37b359cf95b9df5" translate="yes" xml:space="preserve">
          <source>Throw Statement</source>
          <target state="translated">スローステートメント</target>
        </trans-unit>
        <trans-unit id="a99ee7b003bda4ab0516b744e02d6d8979581b73" translate="yes" xml:space="preserve">
          <source>Throw a D object.</source>
          <target state="translated">Dオブジェクトを投げる。</target>
        </trans-unit>
        <trans-unit id="811a07f7fa5dfaadc18e11fed4ce882015f391d7" translate="yes" xml:space="preserve">
          <source>Throw a MailboxFull exception.</source>
          <target state="translated">MailboxFull例外をスローします。</target>
        </trans-unit>
        <trans-unit id="57315ab12c3532377a724ba12831fde623b6e79a" translate="yes" xml:space="preserve">
          <source>ThrowOnError &lt;code&gt;throwOnError&lt;/code&gt;</source>
          <target state="translated">ThrowOnError &lt;code&gt;throwOnError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8abf11297f412ee4fff55514bb434f634e293565" translate="yes" xml:space="preserve">
          <source>Throwable</source>
          <target state="translated">Throwable</target>
        </trans-unit>
        <trans-unit id="d49a4962de645ce124e96bde4ce448c93911dad9" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;e1&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;e1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8bea49f69b95bd4c7986b53182b30e586c968d01" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;e2&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;e2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3508159ea74e593b1f8f83bb63c996e12b6d4b0" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">スローアブル &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="181dadb1ebd21977fc70a4734b2c296e2903f089" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;ex&lt;/code&gt;</source>
          <target state="translated">スロー可能 &lt;code&gt;ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bd2954e71e7cefaff13ce8e463c354cbaac4f4d" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;next&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 投げる</target>
        </trans-unit>
        <trans-unit id="7daca6bf6d530d9a8e0dd28e96710df7d9ed3bc1" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;o&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;o&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5722462feb7ab62b6beb25519312de887c65befc" translate="yes" xml:space="preserve">
          <source>Throwable &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">スロー可能な &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3bf36d01f399602316eb8550fa8ea67915755f2" translate="yes" xml:space="preserve">
          <source>Throwable &lt;strong id=&quot;__dmd_begin_catch&quot;&gt;__dmd_begin_catch&lt;/strong&gt;(_Unwind_Exception* exceptionObject);</source>
          <target state="translated">&lt;strong id=&quot;__dmd_begin_catch&quot;&gt;スロー可能な__dmd_begin_catch&lt;/strong&gt; （_Unwind_Exception * exceptionObject）;</target>
        </trans-unit>
        <trans-unit id="ad43afcb02ba70a606fef1b16e48cd558c53facc" translate="yes" xml:space="preserve">
          <source>Throwable &lt;strong id=&quot;_d_newThrowable&quot;&gt;_d_newThrowable&lt;/strong&gt;(const TypeInfo_Class ci);</source>
          <target state="translated">Throwable &lt;strong id=&quot;_d_newThrowable&quot;&gt;_d_newThrowable&lt;/strong&gt; （const TypeInfo_Class ci）;</target>
        </trans-unit>
        <trans-unit id="8b0b716c6a4da9650ea963345d9f03fa5190cefb" translate="yes" xml:space="preserve">
          <source>Throwable &lt;strong id=&quot;bypassedException&quot;&gt;bypassedException&lt;/strong&gt;;</source>
          <target state="translated">スロー可能な&lt;strong id=&quot;bypassedException&quot;&gt;bypassedException&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="aeb265277be0ed46b320d4bee447dd1287a5e503" translate="yes" xml:space="preserve">
          <source>Throwable that is at the start of the chain; null if both &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are null</source>
          <target state="translated">チェーンの最初にあるスロー可能。 &lt;code&gt;e1&lt;/code&gt; と &lt;code&gt;e2&lt;/code&gt; の両方がnullの場合はnull</target>
        </trans-unit>
        <trans-unit id="329a88fde5ec9ba12b2a662751a9fce532d8dd80" translate="yes" xml:space="preserve">
          <source>Throwable.TraceInfo &lt;strong id=&quot;_d_traceContext&quot;&gt;_d_traceContext&lt;/strong&gt;(void* ptr = null);</source>
          <target state="translated">Throwable.TraceInfo &lt;strong id=&quot;_d_traceContext&quot;&gt;_d_traceContext&lt;/strong&gt; （void * ptr = null）;</target>
        </trans-unit>
        <trans-unit id="d96037e204c51c808042650da8a6d05d2f5c0fd2" translate="yes" xml:space="preserve">
          <source>Throwable.TraceInfo &lt;strong id=&quot;defaultTraceHandler&quot;&gt;defaultTraceHandler&lt;/strong&gt;(void* ptr = null);</source>
          <target state="translated">Throwable.TraceInfo &lt;strong id=&quot;defaultTraceHandler&quot;&gt;defaultTraceHandler&lt;/strong&gt; （void * ptr = null）;</target>
        </trans-unit>
        <trans-unit id="b63ae3eec5f24e1fd1c64ed1289ae0f818654562" translate="yes" xml:space="preserve">
          <source>Thrown during CData constructor</source>
          <target state="translated">CData コンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="84c89a52cbdc1ec28b439af4dc893b9b91ec7840" translate="yes" xml:space="preserve">
          <source>Thrown during Comment constructor</source>
          <target state="translated">Comment コンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="35729b43847e49168c803e1563bb3cc31ad4a437" translate="yes" xml:space="preserve">
          <source>Thrown during ProcessingInstruction constructor</source>
          <target state="translated">ProcessingInstruction のコンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="3f251cad502f4c0805742ab01450a6da94826b64" translate="yes" xml:space="preserve">
          <source>Thrown during Text constructor</source>
          <target state="translated">テキストのコンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="c92a5bfc11a555b169a0a27ab74990b80319893a" translate="yes" xml:space="preserve">
          <source>Thrown during XMLInstruction constructor</source>
          <target state="translated">XMLInstruction のコンストラクタ中にスローされる</target>
        </trans-unit>
        <trans-unit id="6bb5956cc1d8626088d792baf8b347e8b18e899c" translate="yes" xml:space="preserve">
          <source>Thrown during check()</source>
          <target state="translated">check()の際にスローされる</target>
        </trans-unit>
        <trans-unit id="86110bc7ee50ca60178c35406ca162fd7743b4e8" translate="yes" xml:space="preserve">
          <source>Thrown during decode()</source>
          <target state="translated">decode()の間にスローされます。</target>
        </trans-unit>
        <trans-unit id="c5aba430c55d417364422428a9f362472f91604b" translate="yes" xml:space="preserve">
          <source>Thrown if I/O errors happen.</source>
          <target state="translated">IOエラーが発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="6372ea6ded1ced271f30bfc67bb4f1080dda6330" translate="yes" xml:space="preserve">
          <source>Thrown if a linked thread has terminated.</source>
          <target state="translated">リンクされたスレッドが終了した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="91f2c1021f927e931dd4a9bfa5d4cb0938ead33e" translate="yes" xml:space="preserve">
          <source>Thrown if a message was sent to a thread via &lt;a href=&quot;std_concurrency#prioritySend&quot;&gt;&lt;code&gt;std.concurrency.prioritySend&lt;/code&gt;&lt;/a&gt; and the receiver does not have a handler for a message of this type.</source>
          <target state="translated">メッセージが&lt;a href=&quot;std_concurrency#prioritySend&quot;&gt; &lt;code&gt;std.concurrency.prioritySend&lt;/code&gt; &lt;/a&gt;を介してスレッドに送信され、レシーバーにこのタイプのメッセージのハンドラーがない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="6ae8d47d33d71e65b4335fb509b682ebfeb58c62" translate="yes" xml:space="preserve">
          <source>Thrown if comparing with wrong type</source>
          <target state="translated">間違った型と比較すると投げられる</target>
        </trans-unit>
        <trans-unit id="7cf0300c5ba15c42524d147daa6bffbdb893c34b" translate="yes" xml:space="preserve">
          <source>Thrown if errors that set &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt;&lt;/a&gt; occur.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt; &lt;/a&gt;を設定するエラーが発生した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="be91161c0d8489393a798c2ad672cda178b1f826" translate="yes" xml:space="preserve">
          <source>Thrown if errors that set &lt;code&gt;errno&lt;/code&gt; occur.</source>
          <target state="translated">&lt;code&gt;errno&lt;/code&gt; を設定するエラーが発生した場合にスローされます 。</target>
        </trans-unit>
        <trans-unit id="d5a85f8afbd62c38c087ce3656815cdc461fe61e" translate="yes" xml:space="preserve">
          <source>Thrown in three cases:</source>
          <target state="translated">3つのケースで投げた。</target>
        </trans-unit>
        <trans-unit id="a1a94163addf8ed9aeb98b45ad38a50ceb43b8d6" translate="yes" xml:space="preserve">
          <source>Thrown objects derived from</source>
          <target state="translated">から派生したスローオブジェクト</target>
        </trans-unit>
        <trans-unit id="1b617604610b1e1a6d54699cece22c41ffbacef5" translate="yes" xml:space="preserve">
          <source>Thrown on a range error.</source>
          <target state="translated">範囲エラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="b565d21ffa55aff8807f89b443feb9fd6f91d085" translate="yes" xml:space="preserve">
          <source>Thrown on a switch error.</source>
          <target state="translated">スイッチエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="e2a9b6920e3c3f67cbd3cb688ecd5615035c5221" translate="yes" xml:space="preserve">
          <source>Thrown on a unicode conversion error.</source>
          <target state="translated">unicode変換エラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="7dea37b71e3f163a1d2f5bf641ee7dc124d30397" translate="yes" xml:space="preserve">
          <source>Thrown on an assert error.</source>
          <target state="translated">アサートエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="86c6bfd21c61151f3be7775d602fc143c1a57943" translate="yes" xml:space="preserve">
          <source>Thrown on an invalid memory operation.</source>
          <target state="translated">無効なメモリ操作でスローされます。</target>
        </trans-unit>
        <trans-unit id="16e3cf208858e40592c9d2d38ed8e64cdeeb978f" translate="yes" xml:space="preserve">
          <source>Thrown on an out of memory error.</source>
          <target state="translated">メモリ切れのエラーで投げられました。</target>
        </trans-unit>
        <trans-unit id="3d00baaee4bcf2f35b15a207e7685eb27dac105f" translate="yes" xml:space="preserve">
          <source>Thrown on calls to &lt;code&gt;receive&lt;/code&gt; if the thread that spawned the receiving thread has terminated and no more messages exist.</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; スレッドを生成したスレッドが終了し、それ以上メッセージが存在しない場合にreceiveの呼び出しでスローされます。</target>
        </trans-unit>
        <trans-unit id="2324a54efe11d589ff8d54fcc1b56a073a6a5882" translate="yes" xml:space="preserve">
          <source>Thrown on calls to &lt;code&gt;receiveOnly&lt;/code&gt; if a message other than the type the receiving thread expected is sent.</source>
          <target state="translated">受信スレッドが予期したタイプ以外のメッセージが送信された場合に &lt;code&gt;receiveOnly&lt;/code&gt; の呼び出しでスローされます。</target>
        </trans-unit>
        <trans-unit id="3129f3e1668dc67a58429ffa0cef7d5a14bcbb14" translate="yes" xml:space="preserve">
          <source>Thrown on conversion errors.</source>
          <target state="translated">変換エラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="29878d6640bc6d1eaad971922e0aa1d911c88d3a" translate="yes" xml:space="preserve">
          <source>Thrown on conversion overflow errors.</source>
          <target state="translated">変換オーバーフローエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="5b47b72e06e1d04f8e2399d1acfde860c151b623" translate="yes" xml:space="preserve">
          <source>Thrown on error.</source>
          <target state="translated">エラーで投げられました。</target>
        </trans-unit>
        <trans-unit id="a4752cf51c73b5b3850abf244753cdd8e6632e42" translate="yes" xml:space="preserve">
          <source>Thrown on finalize error.</source>
          <target state="translated">finalizeエラーでスローされます。</target>
        </trans-unit>
        <trans-unit id="36d88aa95deaa8eb68ccf7623cd01071911543b5" translate="yes" xml:space="preserve">
          <source>Thrown on mailbox crowding if the mailbox is configured with &lt;code&gt;OnCrowding.throwException&lt;/code&gt;.</source>
          <target state="translated">メールボックスが &lt;code&gt;OnCrowding.throwException&lt;/code&gt; で構成されている場合、メールボックスの混雑時にスローされます。</target>
        </trans-unit>
        <trans-unit id="79b810076b73721a41a2673482bdf7baf7ec2c8a" translate="yes" xml:space="preserve">
          <source>Thrown on one of the following conditions:</source>
          <target state="translated">以下のいずれかの条件で投げられる。</target>
        </trans-unit>
        <trans-unit id="5ab114d73446a9ce4d36fd9f522df3a1eebc6c65" translate="yes" xml:space="preserve">
          <source>Thrown when a Tid is missing, e.g. when &lt;code&gt;ownerTid&lt;/code&gt; doesn't find an owner thread.</source>
          <target state="translated">Tidが欠落している場合、たとえば &lt;code&gt;ownerTid&lt;/code&gt; が所有者スレッドを見つけられない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="1e6ce338b7ac50ade34d3b28700ff70b8d4a7605" translate="yes" xml:space="preserve">
          <source>Thrown when parsing for Tags</source>
          <target state="translated">タグの解析時にスローされる</target>
        </trans-unit>
        <trans-unit id="f3f52f3792a4bcc4f042510f3988510a62c2449d" translate="yes" xml:space="preserve">
          <source>Throws an exception.</source>
          <target state="translated">例外をスローします。</target>
        </trans-unit>
        <trans-unit id="9c1b3e348c5e658c9f04296e21ad3e2315006119" translate="yes" xml:space="preserve">
          <source>Throws:</source>
          <target state="translated">Throws:</target>
        </trans-unit>
        <trans-unit id="ff6fea9d058e3c0f1cc7f0adf3f77f4b9520cb7a" translate="yes" xml:space="preserve">
          <source>Thunks adjust the incoming 'this' pointer by 'offset'.</source>
          <target state="translated">Thunksは、入力された'this'ポインタを'offset'で調整します。</target>
        </trans-unit>
        <trans-unit id="681bc8d0be931a268296c48f3f9e40f73e12b3a8" translate="yes" xml:space="preserve">
          <source>Thus, a static array always has the dimension statically available as part of the type, and so it is implemented like in C. Static arrays and Dynamic arrays can be easily converted back and forth to each other.</source>
          <target state="translated">このように,静的配列は常に静的に利用可能な次元を型の一部として持っているので,C言語のように実装されています.静的配列と動的配列は,簡単に相互に変換して行き来することができます.</target>
        </trans-unit>
        <trans-unit id="8b6a4f79c67e1c0cfc398c2295408f2eb4b88ca9" translate="yes" xml:space="preserve">
          <source>Tibetan</source>
          <target state="translated">Tibetan</target>
        </trans-unit>
        <trans-unit id="62fac526b50cebc251a6af759bfe5d5bd018bff6" translate="yes" xml:space="preserve">
          <source>TickDuration</source>
          <target state="translated">TickDuration</target>
        </trans-unit>
        <trans-unit id="c0d2d45e63dc40fd88c7a14b1c2358a160a7833d" translate="yes" xml:space="preserve">
          <source>TickDuration &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">TickDuration &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ce36a6b212a9b591eeb95689defcb8d1ae88308" translate="yes" xml:space="preserve">
          <source>TickDuration[fun.length] &lt;strong id=&quot;benchmark&quot;&gt;benchmark&lt;/strong&gt;(fun...)(uint n);</source>
          <target state="translated">TickDuration [fun.length] &lt;strong id=&quot;benchmark&quot;&gt;ベンチマーク&lt;/strong&gt; （fun ...）（uint n）;</target>
        </trans-unit>
        <trans-unit id="dc7acc903cfca8ef291e395f7b085edc57885861" translate="yes" xml:space="preserve">
          <source>Tid &lt;code&gt;tid&lt;/code&gt;</source>
          <target state="translated">Tid &lt;code&gt;tid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1f074e4e94dc8553442f6182f62fea84786f05c" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;locate&quot;&gt;locate&lt;/strong&gt;(string name);</source>
          <target state="translated">Tid Locate（文字列名）;</target>
        </trans-unit>
        <trans-unit id="3e99e02f714335d73cd91fb8d55900b4d5bd1b70" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;spawn&quot;&gt;spawn&lt;/strong&gt;(F, T...)(F fn, T args)</source>
          <target state="translated">Tid &lt;strong id=&quot;spawn&quot;&gt;spawn&lt;/strong&gt; （F、T ...）（F fn、T args）</target>
        </trans-unit>
        <trans-unit id="25d02d5a84c7931ece10b93795e423a694986b38" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;spawnLinked&quot;&gt;spawnLinked&lt;/strong&gt;(F, T...)(F fn, T args)</source>
          <target state="translated">Tid &lt;strong id=&quot;spawnLinked&quot;&gt;spawnLinked&lt;/strong&gt; （F、T ...）（F fn、T args）</target>
        </trans-unit>
        <trans-unit id="5b2248c38faf525d4aa66c5d69e86959be2e64dd" translate="yes" xml:space="preserve">
          <source>Tid &lt;strong id=&quot;threadId&quot;&gt;threadId&lt;/strong&gt;;</source>
          <target state="translated">Tid &lt;strong id=&quot;threadId&quot;&gt;threadId&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="cf46deb14abc3ae4a0180bd680085f5421becb62" translate="yes" xml:space="preserve">
          <source>Tifinagh</source>
          <target state="translated">Tifinagh</target>
        </trans-unit>
        <trans-unit id="bf7505fef58bfd49abbc3421a5a8a317c819906e" translate="yes" xml:space="preserve">
          <source>Time Measurement and Benchmarking</source>
          <target state="translated">時間計測とベンチマーク</target>
        </trans-unit>
        <trans-unit id="d8b561572b4c6d9af712780047246b7bc740a0d4" translate="yes" xml:space="preserve">
          <source>Time condition enumeration as an alias of &lt;a href=&quot;etc_c_curl#CurlTimeCond&quot;&gt;&lt;code&gt;etc.c.curl.CurlTimeCond&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;etc_c_curl#CurlTimeCond&quot;&gt; &lt;code&gt;etc.c.curl.CurlTimeCond&lt;/code&gt; の&lt;/a&gt;エイリアスとしての時間条件の列挙</target>
        </trans-unit>
        <trans-unit id="c4aa3d14f701bba1ce181f3ec53ab695e0ade4da" translate="yes" xml:space="preserve">
          <source>Time the file was created.</source>
          <target state="translated">ファイルが作成された時間。</target>
        </trans-unit>
        <trans-unit id="e359a0b0bd880a8c9076e3b462259fa4ca22d2f6" translate="yes" xml:space="preserve">
          <source>Time the file was last accessed.</source>
          <target state="translated">ファイルが最後にアクセスされた時間。</target>
        </trans-unit>
        <trans-unit id="36c7dbef3cde666059933c227164a5d18726f66b" translate="yes" xml:space="preserve">
          <source>Time the file was last modified.</source>
          <target state="translated">ファイルが最終的に修正された時刻。</target>
        </trans-unit>
        <trans-unit id="27cd174e9f8cc698cbd69056f98a77a3a55cb471" translate="yes" xml:space="preserve">
          <source>Time the file/folder was last accessed.</source>
          <target state="translated">ファイルフォルダが最後にアクセスされた時間。</target>
        </trans-unit>
        <trans-unit id="4f227039843bc9b22d4f838b81ed18e54bb7b1a9" translate="yes" xml:space="preserve">
          <source>Time the file/folder was last modified.</source>
          <target state="translated">ファイルフォルダが最終更新された時刻。</target>
        </trans-unit>
        <trans-unit id="aa5f4600d3071981a08116aeac1a782767d2276f" translate="yes" xml:space="preserve">
          <source>Time to use with the above condition. Specified in number of seconds since 1 Jan 1970</source>
          <target state="translated">上記の条件で使用する時間 1970年1月1日以降の秒数で指定</target>
        </trans-unit>
        <trans-unit id="d4cc22c8986572ffe1c232ea2044aac4c6d79f91" translate="yes" xml:space="preserve">
          <source>Time units</source>
          <target state="translated">時間単位</target>
        </trans-unit>
        <trans-unit id="27745ce39165b24aa9162930c4465ce642154b42" translate="yes" xml:space="preserve">
          <source>Time zone is irrelevant when comparing &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; を&lt;/a&gt;比較する場合、タイムゾーンは無関係です。</target>
        </trans-unit>
        <trans-unit id="9699f4eda399b03a7b8d7d0af76df9f2a6323ecf" translate="yes" xml:space="preserve">
          <source>Time zone offsets will be in the form +HH:MM or -HH:MM.</source>
          <target state="translated">タイムゾーンのオフセットは、+HH:MMまたは-HH:MMの形式になります。</target>
        </trans-unit>
        <trans-unit id="cbdea8478f6e24b16a22dfabfcf393abc2b6f5b4" translate="yes" xml:space="preserve">
          <source>Time zone offsets will be in the form +HHMM or -HHMM.</source>
          <target state="translated">タイムゾーンのオフセットは、+HHMMまたは-HHMMの形式になります。</target>
        </trans-unit>
        <trans-unit id="fa9aac4028931969e4e43d5926f21c1c02b03737" translate="yes" xml:space="preserve">
          <source>Time zones</source>
          <target state="translated">タイムゾーン</target>
        </trans-unit>
        <trans-unit id="25ea0fb6ef66b02b90f259085a72c5aa3a1cb38b" translate="yes" xml:space="preserve">
          <source>Time-out connect operations after this amount of seconds, if connects are OK within this time, then fine... This only aborts the connect phase. [Only works on unix-style/SIGALRM operating systems]</source>
          <target state="translated">この秒数が経過した後の接続操作をタイムアウトさせ、この時間内に接続が成功すればOKです。接続フェーズを中断するだけです。unixスタイルのSIGALRMオペレーティングシステムでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="7898ff5a29bdccadbf6ffe3af05c0479d1dfccc9" translate="yes" xml:space="preserve">
          <source>Time-out the read operation after this amount of seconds</source>
          <target state="translated">この秒数が経過した後、読み出し動作をタイムアウトさせます。</target>
        </trans-unit>
        <trans-unit id="3a383c209c07d7ddd4a20a832e5e3183c6735122" translate="yes" xml:space="preserve">
          <source>TimeOfDay</source>
          <target state="translated">TimeOfDay</target>
        </trans-unit>
        <trans-unit id="931ede6287bc0e0bd7fe601fddba6e76758a6ca6" translate="yes" xml:space="preserve">
          <source>TimeOfDay &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">TimeOfDay &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1555a6cfeedd9ca84067267bcd651953c04210d9" translate="yes" xml:space="preserve">
          <source>TimeOfDay &lt;code&gt;tod&lt;/code&gt;</source>
          <target state="translated">TimeOfDay &lt;code&gt;tod&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab9bed73cb84a17cfdff14b6f7c15cb12325d572" translate="yes" xml:space="preserve">
          <source>TimeZone &lt;code&gt;timezone&lt;/code&gt;</source>
          <target state="translated">TimeZone &lt;code&gt;timezone&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1fda33f37c23c6bf9d7fa6e3c06b399f2722e4e9" translate="yes" xml:space="preserve">
          <source>TimeZone &lt;code&gt;tz&lt;/code&gt;</source>
          <target state="translated">TimeZone &lt;code&gt;tz&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19eabc961735d78f12fc7be906ffcb033853cf85" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="translated">Timestamp</target>
        </trans-unit>
        <trans-unit id="a05f35aebea6d90bfd4a149a3c110d0ba93cf063" translate="yes" xml:space="preserve">
          <source>Timestamp for the condition  &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25&quot;&gt;RFC2616 Section 14.25&lt;/a&gt;</source>
          <target state="translated">条件&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25&quot;&gt;RFC2616セクション14.25の&lt;/a&gt;タイムスタンプ</target>
        </trans-unit>
        <trans-unit id="791214dda21a45673e6a00a407416e403372c00e" translate="yes" xml:space="preserve">
          <source>Timezones</source>
          <target state="translated">Timezones</target>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="c554ef7e0f768a7921e2d8ca33350a8183049302" translate="yes" xml:space="preserve">
          <source>Tip: &lt;code&gt;cache&lt;/code&gt; is eager when evaluating elements. If calling front on the underlying range has a side effect, it will be observable before calling front on the actual cached range.  Furthermore, care should be taken composing &lt;code&gt;cache&lt;/code&gt; with &lt;a href=&quot;std_range#take&quot;&gt;&lt;code&gt;std.range.take&lt;/code&gt;&lt;/a&gt;. By placing &lt;code&gt;take&lt;/code&gt; before &lt;code&gt;cache&lt;/code&gt;, then &lt;code&gt;cache&lt;/code&gt; will be &quot;aware&quot; of when the range ends, and correctly stop caching elements when needed. If calling front has no side effect though, placing &lt;code&gt;take&lt;/code&gt; after &lt;code&gt;cache&lt;/code&gt; may yield a faster range.  Either way, the resulting ranges will be equivalent, but maybe not at the same cost or side effects.</source>
          <target state="translated">ヒント：要素を評価するとき、 &lt;code&gt;cache&lt;/code&gt; は熱心です。 基になる範囲でフロントを呼び出すと副作用が発生する場合は、実際にキャッシュされた範囲でフロントを呼び出す前に確認できます。 さらに、 &lt;a href=&quot;std_range#take&quot;&gt; &lt;code&gt;std.range.take&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;cache&lt;/code&gt; を構成する場合は注意が必要です 。 &lt;code&gt;take&lt;/code&gt; before &lt;code&gt;cache&lt;/code&gt; を配置すると、 &lt;code&gt;cache&lt;/code&gt; は範囲がいつ終了するかを「認識」し、必要に応じて要素のキャッシュを正しく停止します。 ただし、frontを呼び出しても副作用がない場合 &lt;code&gt;take&lt;/code&gt; 、 &lt;code&gt;cache&lt;/code&gt; 後にテイクを配置すると 、より高速な範囲が得られる場合があります。 どちらの方法でも、結果の範囲は同等になりますが、コストや副作用が同じになるとは限りません。</target>
        </trans-unit>
        <trans-unit id="a22acb5aeb0a04605632e4e842da9793f03544b7" translate="yes" xml:space="preserve">
          <source>Tip: &lt;code&gt;equal&lt;/code&gt; can itself be used as a predicate to other functions. This can be very useful when the element type of a range is itself a range. In particular, &lt;code&gt;equal&lt;/code&gt; can be its own predicate, allowing range of range (of range...) comparisons.</source>
          <target state="translated">ヒント： &lt;code&gt;equal&lt;/code&gt; 自体を他の関数の述語として使用できます。 これは、範囲の要素タイプ自体が範囲である場合に非常に役立ちます。 特に、 &lt;code&gt;equal&lt;/code&gt; はそれ自体の述語である場合があり、（range ...の）範囲の比較を可能にします。</target>
        </trans-unit>
        <trans-unit id="4cf1b54b003a59c279d1ba0b615a8a5f3459ca8c" translate="yes" xml:space="preserve">
          <source>Tips</source>
          <target state="translated">Tips</target>
        </trans-unit>
        <trans-unit id="c5a0e0828626901459115ce06aafb77df7b91db7" translate="yes" xml:space="preserve">
          <source>Titlecase_Letter</source>
          <target state="translated">Titlecase_Letter</target>
        </trans-unit>
        <trans-unit id="ae79ea1e9c6391a9ed83a2e18a031b835feec0c9" translate="yes" xml:space="preserve">
          <source>To</source>
          <target state="translated">To</target>
        </trans-unit>
        <trans-unit id="6494691e25f78cf9ccf69f1c60778c2c794c2372" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#Duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="108e81f625c0fab42d496ad348b5d4bf286b22ec" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#FracSec&quot;&gt;&lt;code&gt;FracSec&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#FracSec&quot;&gt; &lt;code&gt;FracSec&lt;/code&gt; へ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="551da37cf37171dc3ce54406334d09a8cfda8b37" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#TickDuration&quot;&gt;&lt;code&gt;TickDuration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#TickDuration&quot;&gt; &lt;code&gt;TickDuration&lt;/code&gt; へ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="64a71b7026dcf6ae8a460197932fea36a34976f6" translate="yes" xml:space="preserve">
          <source>To access members of an aggregate, given a pointer to the aggregate is in a register, use the &lt;code&gt;.offsetof&lt;/code&gt; property of the qualified name of the member:</source>
          <target state="translated">アグリゲートのメンバーにアクセスするには、アグリゲートへのポインターがレジスターにある場合、メンバーの修飾名の &lt;code&gt;.offsetof&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="acccbbe3599b947ae29100cb34a4d4f21d373721" translate="yes" xml:space="preserve">
          <source>To access them, the following import is required:</source>
          <target state="translated">それらにアクセスするには、以下のようなインポートが必要です。</target>
        </trans-unit>
        <trans-unit id="e706ae3f9491e98dd5256ff2e4c4957c44c28316" translate="yes" xml:space="preserve">
          <source>To alias more than one thing at once, use &lt;a href=&quot;#AliasSeq&quot;&gt;&lt;code&gt;AliasSeq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一度に複数のエイリアスを作成するには、 &lt;a href=&quot;#AliasSeq&quot;&gt; &lt;code&gt;AliasSeq&lt;/code&gt; を&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="39e9b604b80a0ec5108d41826ff96040f90f8ef1" translate="yes" xml:space="preserve">
          <source>To allocate multidimensional arrays, the declaration reads in the same order as the prefix array declaration order.</source>
          <target state="translated">多次元配列を割り当てるために、宣言はプレフィックス配列の宣言順序と同じ順序で読み込みます。</target>
        </trans-unit>
        <trans-unit id="6af61f245522dedf48b1b3d8a204655196724e93" translate="yes" xml:space="preserve">
          <source>To allocate the nested arrays, multiple arguments can be used:</source>
          <target state="translated">入れ子になった配列を割り当てるには、複数の引数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="bf5996d93a7b5a9d8df4050814c45a9661fdd6d1" translate="yes" xml:space="preserve">
          <source>To avoid dynamic binding on member function call, insert base class name before the member function name. For example:</source>
          <target state="translated">メンバ関数呼び出し時の動的バインディングを回避するには、メンバ関数名の前にベース・クラス名を挿入します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="df138afd646bec9cd5ef16ca5a7a9ffa6dca6b3a" translate="yes" xml:space="preserve">
          <source>To avoid performance overhead, &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bi-directionality&lt;/a&gt; is only available when &lt;a href=&quot;std_range_primitives#hasSlicing&quot;&gt;&lt;code&gt;std.range.primitives.hasSlicing&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_range_primitives#hasLength&quot;&gt;&lt;code&gt;std.range.primitives.hasLength&lt;/code&gt;&lt;/a&gt; are true.</source>
          <target state="translated">パフォーマンスのオーバーヘッドを回避するために、 &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向性&lt;/a&gt;は&lt;a href=&quot;std_range_primitives#hasSlicing&quot;&gt; &lt;code&gt;std.range.primitives.hasSlicing&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;std_range_primitives#hasLength&quot;&gt; &lt;code&gt;std.range.primitives.hasLength&lt;/code&gt; &lt;/a&gt;がtrueの場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e1b64ed586a51e4f5bb9e2b8e69de6ea4cbf1eb9" translate="yes" xml:space="preserve">
          <source>To avoid this from happening, either</source>
          <target state="translated">これを避けるためには、以下のいずれかの方法があります。</target>
        </trans-unit>
        <trans-unit id="fb6c2b246e5caf09e7ad4ac345e30c3e0c4946f9" translate="yes" xml:space="preserve">
          <source>To consider the base class's functions in the overload resolution process, use an</source>
          <target state="translated">オーバーロード解決処理で基底クラスの関数を考慮するには</target>
        </trans-unit>
        <trans-unit id="3cb5d4aaed3b2fe5d4443f21b6ff9f49e40d7fc2" translate="yes" xml:space="preserve">
          <source>To copy at most &lt;code&gt;n&lt;/code&gt; elements from a range, you may want to use &lt;a href=&quot;std_range#take&quot;&gt;&lt;code&gt;std.range.take&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">範囲から最大 &lt;code&gt;n&lt;/code&gt; 個の要素をコピーするには、 &lt;a href=&quot;std_range#take&quot;&gt; &lt;code&gt;std.range.take&lt;/code&gt; &lt;/a&gt;を使用することができます。</target>
        </trans-unit>
        <trans-unit id="d66375110d390ecdb959eb48abc4793e5606ed6b" translate="yes" xml:space="preserve">
          <source>To copy just those elements from a range that satisfy a predicate, use &lt;a href=&quot;#filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">述語を満たす範囲からそれらの要素のみをコピーするには、 &lt;a href=&quot;#filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; を&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="a57c46e45190814579474a4cac7131c8e3ca8e36" translate="yes" xml:space="preserve">
          <source>To create a documented unit test just add three forward slashes before the unittest block, like this:</source>
          <target state="translated">文書化されたユニットテストを作成するには、以下のようにunittestブロックの前に3つのスラッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="eeb898e0497caa20850f724cd4cb92b13730b597" translate="yes" xml:space="preserve">
          <source>To create a horizontal rule with hyphens, add spaces between the hyphens. Without the spaces they would be treated as the start or end of an &lt;a href=&quot;#embedded_code&quot;&gt;embedded code block&lt;/a&gt;. Note that any horizontal rule may contain spaces:</source>
          <target state="translated">ハイフンを含む水平方向の罫線を作成するには、ハイフンの間にスペースを追加します。 スペースがない場合、 &lt;a href=&quot;#embedded_code&quot;&gt;埋め込みコードブロックの&lt;/a&gt;開始または終了として扱われます 。 水平方向の罫線にはスペースを含めることができます。</target>
        </trans-unit>
        <trans-unit id="bc19837608d956da40f53510498a517f1210860d" translate="yes" xml:space="preserve">
          <source>To customize the &lt;code&gt;Logger&lt;/code&gt; behavior, create a new &lt;code&gt;class&lt;/code&gt; that inherits from the abstract &lt;code&gt;Logger&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;, and implements the &lt;code&gt;writeLogMsg&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; 動作をカスタマイズするには、抽象 &lt;code&gt;Logger&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; を継承し、 &lt;code&gt;writeLogMsg&lt;/code&gt; メソッドを実装する新しい &lt;code&gt;class&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="2abc1d47025179e8b25ad0d252e787e5f2f4b0e4" translate="yes" xml:space="preserve">
          <source>To deal with these possible errors, tedious error handling code must be added to each function call. If an error happened, code must be written to recover from the error, and the error must be reported to the user in some user friendly fashion. If an error cannot be handled locally, it must be explicitly propagated back to its caller. The long list of errno values needs to be converted into appropriate text to be displayed. Adding all the code to do this can consume a large part of the time spent coding a project - and still, if a new errno value is added to the runtime system, the old code can not properly display a meaningful error message.</source>
          <target state="translated">これらの可能性のあるエラーに対処するためには、各関数呼び出しに面倒なエラー処理コードを追加しなければなりません。エラーが発生した場合は、エラーから回復するためのコードを記述しなければならず、エラーはユーザーに優しい方法でユーザーに報告されなければなりません。エラーをローカルで処理できない場合は、明示的に呼び出し元に伝搬させなければなりません。errno 値の長いリストを表示するために適切なテキストに変換する必要があります。これを行うためのすべてのコードを追加することは、プロジェクトのコーディングに費やされた時間の大部分を消費することになります。</target>
        </trans-unit>
        <trans-unit id="0840e11f513cf9d6a67586541ed4c39bc7f43411" translate="yes" xml:space="preserve">
          <source>To define how one type can be cast to another, define the &lt;code&gt;opCast&lt;/code&gt; template method, which is used as follows:</source>
          <target state="translated">あるタイプを別のタイプにキャストする方法を定義するには、 &lt;code&gt;opCast&lt;/code&gt; テンプレートメソッドを定義します。これは次のように使用されます。</target>
        </trans-unit>
        <trans-unit id="69db67f87737bda086a681af3ab5a4a2b512d66e" translate="yes" xml:space="preserve">
          <source>To distinguish between the type of the back reference a look-up of the back referenced character is necessary: An identifier back reference always points to a digit &lt;b&gt;0&lt;/b&gt; to &lt;b&gt;9&lt;/b&gt;, while a type back reference always points to a letter.</source>
          <target state="translated">後方参照のタイプを区別するには、後方参照文字のルックアップが必要です。識別子後方参照は常に数字&lt;b&gt;0〜9&lt;/b&gt;を指し、タイプ後方参照は常に文字を指します。</target>
        </trans-unit>
        <trans-unit id="04d9771dcd4d104db6559e0305a6f19443a680de" translate="yes" xml:space="preserve">
          <source>To do them all en masse:</source>
          <target state="translated">一斉にやること。</target>
        </trans-unit>
        <trans-unit id="dcfefb9ac665ea68efebc3194f27ebac0436a51d" translate="yes" xml:space="preserve">
          <source>To ease debugging, in a &lt;a href=&quot;version#ConditionalStatement&quot;&gt;&lt;i&gt;ConditionalStatement&lt;/i&gt;&lt;/a&gt; controlled by a &lt;a href=&quot;version#DebugCondition&quot;&gt;&lt;i&gt;DebugCondition&lt;/i&gt;&lt;/a&gt;&lt;code&gt;@nogc&lt;/code&gt; functions can call functions that are not &lt;code&gt;@nogc&lt;/code&gt;.</source>
          <target state="translated">デバッグを容易にするために、 &lt;a href=&quot;version#DebugCondition&quot;&gt;&lt;i&gt;DebugCondition&lt;/i&gt;&lt;/a&gt;によって制御される&lt;i&gt;ConditionalStatement&lt;/i&gt; &lt;code&gt;@nogc&lt;/code&gt; 、 &lt;i&gt;@&lt;/i&gt; nogc関数は&lt;i&gt;@nogc&lt;/i&gt; 以外の関数を呼び出すことができ &lt;code&gt;@nogc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d4c7d82f37671d49bf06ba7162803fca2ebe085" translate="yes" xml:space="preserve">
          <source>To experiment with alternative allocators, set &lt;a href=&quot;#theAllocator&quot;&gt;&lt;code&gt;theAllocator&lt;/code&gt;&lt;/a&gt; for the current thread. For example, consider an application that allocates many 8-byte objects. These are not well supported by the default allocator, so a &lt;a href=&quot;std_experimental_allocator_building_blocks_free_list&quot;&gt;free list allocator&lt;/a&gt; would be recommended. To install one in &lt;code&gt;main&lt;/code&gt;, the application would use:</source>
          <target state="translated">代替アロケータを&lt;a href=&quot;#theAllocator&quot;&gt; &lt;code&gt;theAllocator&lt;/code&gt; &lt;/a&gt;は、現在のスレッドにtheAllocatorを設定します。 たとえば、8バイトのオブジェクトを多数割り当てるアプリケーションを考えてみましょう。 これらはデフォルトのアロケーターでは十分にサポートされていないため、 &lt;a href=&quot;std_experimental_allocator_building_blocks_free_list&quot;&gt;フリーリストアロケーター&lt;/a&gt;をお勧めします。 1つを &lt;code&gt;main&lt;/code&gt; にインストールするには、アプリケーションは次のものを使用します。</target>
        </trans-unit>
        <trans-unit id="8d9e12dc536b1565bc9fda436c93ff675e8dc213" translate="yes" xml:space="preserve">
          <source>To find the last occurrence of &lt;code&gt;needle&lt;/code&gt; in a &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional&lt;/a&gt;&lt;code&gt;haystack&lt;/code&gt;, call &lt;code&gt;find(retro(haystack), needle)&lt;/code&gt;. See &lt;a href=&quot;std_range#retro&quot;&gt;&lt;code&gt;std.range.retro&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向の&lt;/a&gt; &lt;code&gt;haystack&lt;/code&gt; で最後に見つかった &lt;code&gt;needle&lt;/code&gt; を見つけるには、 &lt;code&gt;find(retro(haystack), needle)&lt;/code&gt; 呼び出します 。 &lt;a href=&quot;std_range#retro&quot;&gt; &lt;code&gt;std.range.retro&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="940d35064ca2c064467578facb6ad445a27bab6b" translate="yes" xml:space="preserve">
          <source>To gain more precise control over the logging process, additionally to overriding the &lt;code&gt;writeLogMsg&lt;/code&gt; method the methods &lt;code&gt;beginLogMsg&lt;/code&gt;, &lt;code&gt;logMsgPart&lt;/code&gt; and &lt;code&gt;finishLogMsg&lt;/code&gt; can be overridden.</source>
          <target state="translated">ロギングプロセスをより正確に制御するには、 &lt;code&gt;writeLogMsg&lt;/code&gt; メソッドをオーバーライドすることに加えて、メソッド &lt;code&gt;beginLogMsg&lt;/code&gt; 、 &lt;code&gt;logMsgPart&lt;/code&gt; 、 &lt;code&gt;finishLogMsg&lt;/code&gt; をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="266f2a903ad8aca0a8023659715c707ee628d78a" translate="yes" xml:space="preserve">
          <source>To get a &lt;code&gt;PosixTimeZone&lt;/code&gt;, call &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; (which allows specifying the location the time zone files).</source>
          <target state="translated">&lt;code&gt;PosixTimeZone&lt;/code&gt; を取得するには、 PosixTimeZone.getTimeZoneを呼び出し &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; （これにより、タイムゾーンファイルの場所を指定できます）。</target>
        </trans-unit>
        <trans-unit id="2ed14e678985f0d95b56a32019f42872453c2e19" translate="yes" xml:space="preserve">
          <source>To get a &lt;code&gt;WindowsTimeZone&lt;/code&gt;, call &lt;code&gt;WindowsTimeZone.getTimeZone&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WindowsTimeZone&lt;/code&gt; を取得するには、 WindowsTimeZone.getTimeZoneを呼び出し &lt;code&gt;WindowsTimeZone.getTimeZone&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a52fa8889b7712f63349220576c00248419ac6ec" translate="yes" xml:space="preserve">
          <source>To get the difference in years, subtract the year property of two &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;s. To get the difference in days or weeks, subtract the &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;s themselves and use the &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; that results. Because converting between months and smaller units requires a specific date (which &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;s don't have), getting the difference in months requires some math using both the year and month properties, so this is a convenience function for getting the difference in months.</source>
          <target state="translated">年の違いを取得するには、2つの&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;のyearプロパティを減算します。 日または週の差を取得するには、 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;自体を減算し、結果の&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;を使用します。 月と小さい単位の間の変換には特定の日付（ &lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; に&lt;/a&gt;はない）が必要なため、月の差を取得するには、年と月の両方のプロパティを使用して計算する必要があるため、これは月の違い。</target>
        </trans-unit>
        <trans-unit id="611f6f04377a68cee3f9ad63b2b1775dac313cf8" translate="yes" xml:space="preserve">
          <source>To get the difference in years, subtract the year property of two &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;s. To get the difference in days or weeks, subtract the &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;s themselves and use the &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; that results. Because converting between months and smaller units requires a specific date (which &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;s don't have), getting the difference in months requires some math using both the year and month properties, so this is a convenience function for getting the difference in months.</source>
          <target state="translated">年の違いを取得するには、2つの&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;のyearプロパティを減算します。 日または週の差を取得するには、 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;自体を減算し、結果の&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;を使用します。 月と小さい単位の間の変換には特定の日付（ &lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; に&lt;/a&gt;はない）が必要なため、月の差を取得するには、年と月の両方のプロパティを使用して計算する必要があるため、これは月の違い。</target>
        </trans-unit>
        <trans-unit id="ca114625afe6909751302b60256cce50a6455f6b" translate="yes" xml:space="preserve">
          <source>To get the difference in years, subtract the year property of two &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;s. To get the difference in days or weeks, subtract the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;s themselves and use the &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; that results. Because converting between months and smaller units requires a specific date (which &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;s don't have), getting the difference in months requires some math using both the year and month properties, so this is a convenience function for getting the difference in months.</source>
          <target state="translated">年の差を取得するには、2つの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の年のプロパティを減算します。 日または週の差を取得するには、 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;自体を減算し、結果の&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;を使用します。 月と小さい単位の間の変換には特定の日付（ &lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; に&lt;/a&gt;はない）が必要なため、月の差を取得するには、年と月の両方のプロパティを使用して計算する必要があるため、これは月の違い。</target>
        </trans-unit>
        <trans-unit id="9044e06c13b847070ef5dcf4834092817fbca12b" translate="yes" xml:space="preserve">
          <source>To guarantee copying behavior, use the .dup property to ensure a unique array that can be resized. Also, one may use the &lt;code&gt;.capacity&lt;/code&gt; property to determine how many elements can be appended to the array without reallocating.</source>
          <target state="translated">コピー動作を保証するには、.dupプロパティを使用して、サイズ変更可能な一意の配列を確保します。 また、 &lt;code&gt;.capacity&lt;/code&gt; プロパティを使用して、再割り当てせずに配列に追加できる要素の数を決定することもできます。</target>
        </trans-unit>
        <trans-unit id="233d724da932399f4e00f061e832a34896042f59" translate="yes" xml:space="preserve">
          <source>To implement the different containers both struct and class based approaches have been used. &lt;a href=&quot;std_container_util#make&quot;&gt;&lt;code&gt;std.container.util.make&lt;/code&gt;&lt;/a&gt; allows for uniform construction with either approach.</source>
          <target state="translated">異なるコンテナーを実装するために、構造ベースとクラスベースの両方のアプローチが使用されています。 &lt;a href=&quot;std_container_util#make&quot;&gt; &lt;code&gt;std.container.util.make&lt;/code&gt; &lt;/a&gt;は、どちらのアプローチでも均一な構築を可能にします。</target>
        </trans-unit>
        <trans-unit id="ee9b559376db4a1e8468c6848a3ba5a71bc8dfb5" translate="yes" xml:space="preserve">
          <source>To improve the speed of the factorial function,</source>
          <target state="translated">階乗関数の速度を向上させること。</target>
        </trans-unit>
        <trans-unit id="4e375b9e257d51069f4250fe3867302e9a258fcf" translate="yes" xml:space="preserve">
          <source>To link D functions and libraries into C programs, it's necessary to only require the C runtime library to be linked in. This is accomplished by defining a subset of D that fits this requirement, called &lt;b&gt;BetterC&lt;/b&gt;.</source>
          <target state="translated">D関数とライブラリをCプログラムにリンクするには、Cランタイムライブラリのリンクのみを要求する必要があります。これは、 &lt;b&gt;BetterC&lt;/b&gt;と呼ばれる、この要件に適合するDのサブセットを定義することで実現され&lt;b&gt;ます&lt;/b&gt; 。</target>
        </trans-unit>
        <trans-unit id="418e30d51bb596772e9d5629c8d43dd500ddc9a6" translate="yes" xml:space="preserve">
          <source>To maintain accuracy at values of x near 1.0, use normalDistribution(x) = 1.0 - normalDistribution(-x).</source>
          <target state="translated">1.0に近いxの値で精度を維持するには、normalDistribution(x)=1.0-normalDistribution(-x)を使用します。</target>
        </trans-unit>
        <trans-unit id="5b3b3d7bbc8b8e87f34fef0c04e823aed7dd8943" translate="yes" xml:space="preserve">
          <source>To make a D function accessible from C++, give it C++ linkage:</source>
          <target state="translated">C++からD関数にアクセスできるようにするには、C++連携を与える。</target>
        </trans-unit>
        <trans-unit id="85053099cfb1e1260b205f5910c452e424126760" translate="yes" xml:space="preserve">
          <source>To make a copy of a container, use the &lt;code&gt;c.dup&lt;/code&gt; container primitive.</source>
          <target state="translated">コンテナのコピーを作成するには、 &lt;code&gt;c.dup&lt;/code&gt; コンテナプリミティブを使用します。</target>
        </trans-unit>
        <trans-unit id="4330151dd0a4b250164d66c145c77b530d3ed205" translate="yes" xml:space="preserve">
          <source>To make both the return type and the method immutable, you can write:</source>
          <target state="translated">戻り値の型とメソッドの両方を不変にするには、以下のように書きます。</target>
        </trans-unit>
        <trans-unit id="57e902cb18fc9ae8488bd57a41a216b45b84b7c6" translate="yes" xml:space="preserve">
          <source>To make the return type immutable, you need to surround the return type with parentheses:</source>
          <target state="translated">戻り値の型を不変にするには、戻り値の型を括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="eb050bb6aba36c3b829cdba22de5651eceed94cb" translate="yes" xml:space="preserve">
          <source>To match the Objective-C semantics, &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; methods are virtual. &lt;code&gt;static&lt;/code&gt; methods are overridable as well.</source>
          <target state="translated">Objective-Cのセマンティクスに合わせるため、 &lt;code&gt;static&lt;/code&gt; メソッドと &lt;code&gt;final&lt;/code&gt; メソッドは仮想です。 &lt;code&gt;static&lt;/code&gt; メソッドもオーバーライド可能です。</target>
        </trans-unit>
        <trans-unit id="399f378b17e04ab3e088842cfc946bfa37190fec" translate="yes" xml:space="preserve">
          <source>To maximize efficiency, the runtime always tries to resize the array in place to avoid extra copying. It will always do a copy if the new size is larger and the array was not allocated via the new operator or resizing in place would overwrite valid data in the array. For example:</source>
          <target state="translated">効率を最大化するために、ランタイムは余分なコピーを避けるために常にその場で配列のサイズを変更しようとします。新しいサイズがより大きく、新しい演算子を使って配列が確保されていない場合や、その場でリサイズすると配列内の有効なデータが上書きされてしまう場合には、常にコピーが行われます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6e630a6f0fbc69f96409d719fe2bf8debbee2ea5" translate="yes" xml:space="preserve">
          <source>To memoize a recursive function, simply insert the memoized call in lieu of the plain recursive call. For example, to transform the exponential-time Fibonacci implementation into a linear-time computation:</source>
          <target state="translated">再帰関数をメモするには、単純に単純な再帰呼び出しの代わりにメモされた呼び出しを挿入します。例えば、指数時間のフィボナッチ実装を線形時間の計算に変換します。</target>
        </trans-unit>
        <trans-unit id="3516e14bd92ad99d31558a33d40a58c99908579a" translate="yes" xml:space="preserve">
          <source>To output a backslash, simply use two backslashes in a row: &lt;code&gt;\\&lt;/code&gt;. Note that backslashes inside embedded or inline code do &lt;em&gt;not&lt;/em&gt; escape punctuation and are included in the output as-is. Backslashes before non-punctation are also included in the output as-is. For example, &lt;code&gt;C:\dmd2\bin\dmd.exe&lt;/code&gt; does not require escaping its embedded backslashes.</source>
          <target state="translated">バックスラッシュを出力するには、続けて2つのバックスラッシュを使用します： &lt;code&gt;\\&lt;/code&gt; 。 埋め込みコードまたはインラインコード内のバックスラッシュは句読点をエスケープせ&lt;em&gt;ず&lt;/em&gt; 、そのまま出力に含まれることに注意してください。 句読点以外の前のバックスラッシュもそのまま出力に含まれます。 たとえば、 &lt;code&gt;C:\dmd2\bin\dmd.exe&lt;/code&gt; では、埋め込まれた円記号をエスケープする必要はありません。</target>
        </trans-unit>
        <trans-unit id="8f1374001cf71d8c7f16d7eec671343030bcedf0" translate="yes" xml:space="preserve">
          <source>To overload &lt;code&gt;a[]&lt;/code&gt;, simply define &lt;code&gt;opIndex&lt;/code&gt; with no parameters:</source>
          <target state="translated">&lt;code&gt;a[]&lt;/code&gt; をオーバーロードするには、パラメーターなしで &lt;code&gt;opIndex&lt;/code&gt; を定義するだけです。</target>
        </trans-unit>
        <trans-unit id="15d95aac44624f17ec16bbbfbc71490c6fbf287e" translate="yes" xml:space="preserve">
          <source>To overload array indexing of the form &lt;code&gt;a[&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a[&lt;/code&gt; の形式の配列インデックスをオーバーロードするには</target>
        </trans-unit>
        <trans-unit id="000e88e7e58bbba47a3e6a8c3ea25f6d7d08d6b5" translate="yes" xml:space="preserve">
          <source>To parallelize the copying of a range with expensive to evaluate elements to an array, pass an identity function (a function that just returns whatever argument is provided to it) to &lt;code&gt;amap&lt;/code&gt;.  &lt;b&gt;Exception Handling&lt;/b&gt;:  When at least one exception is thrown from inside the map functions, the submission of additional &lt;code&gt;Task&lt;/code&gt; objects is terminated as soon as possible, in a non-deterministic manner. All currently executing or enqueued work units are allowed to complete. Then, all exceptions that were thrown from any work unit are chained using &lt;code&gt;Throwable.next&lt;/code&gt; and rethrown. The order of the exception chaining is non-deterministic.</source>
          <target state="translated">要素を配列に評価するのにコストがかかる範囲のコピーを並列化するには、アイデンティティー関数（渡された引数を返す関数）を &lt;code&gt;amap&lt;/code&gt; に渡します。 &lt;b&gt;例外処理&lt;/b&gt; ：マップ関数の内部から少なくとも1つの例外がスローされると、追加の &lt;code&gt;Task&lt;/code&gt; オブジェクトの送信は、非決定的な方法でできるだけ早く終了します。 現在実行中またはエンキューされているすべての作業単位は完了できます。 次に、任意のワークユニットからスローされたすべての例外は、 &lt;code&gt;Throwable.next&lt;/code&gt; を使用してチェーンされ、再スローされます。 例外チェーンの順序は非決定的です。</target>
        </trans-unit>
        <trans-unit id="87b4b285bca7df049293dca955a7cff806c39c54" translate="yes" xml:space="preserve">
          <source>To perform the mapping operation in place, provide the same range for the input and output range.</source>
          <target state="translated">マッピング動作をその場で行う場合は、入力範囲と出力範囲を同じにしてください。</target>
        </trans-unit>
        <trans-unit id="b6f84739ea0309b309811ceae01cf81f2836b095" translate="yes" xml:space="preserve">
          <source>To prevent mutation, D offers the &lt;code&gt;immutable&lt;/code&gt; type qualifier. If all of a &lt;code&gt;pure&lt;/code&gt; function's parameters are &lt;code&gt;immutable&lt;/code&gt; or copied values without any indirections (e.g. &lt;code&gt;int&lt;/code&gt;), the type system guarantees no side effects.</source>
          <target state="translated">変異を防ぐために、Dは &lt;code&gt;immutable&lt;/code&gt; 型修飾子を提供します。 &lt;code&gt;pure&lt;/code&gt; 関数のすべてのパラメーターが &lt;code&gt;immutable&lt;/code&gt; またはコピーされた値であり、間接指定がない場合（例： &lt;code&gt;int&lt;/code&gt; ）、型システムは副作用を保証しません。</target>
        </trans-unit>
        <trans-unit id="510e8a37c94f1fddd48f494b45f9c445ac13386e" translate="yes" xml:space="preserve">
          <source>To replace all matches use &lt;a href=&quot;#replaceAll&quot;&gt;&lt;code&gt;replaceAll&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての一致を置き換えるには、 &lt;a href=&quot;#replaceAll&quot;&gt; &lt;code&gt;replaceAll&lt;/code&gt; を&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="32637bfed038dc3b07de78cef61a544d88ceed68" translate="yes" xml:space="preserve">
          <source>To replace only the first match use &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最初の一致のみを置き換えるには、 &lt;a href=&quot;#replaceFirst&quot;&gt; &lt;code&gt;replaceFirst&lt;/code&gt; を&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="0d699e84d4ef2358f78c4907449972ca3c8ecaf0" translate="yes" xml:space="preserve">
          <source>To set &lt;code&gt;color&lt;/code&gt; to &lt;code&gt;Color.yes&lt;/code&gt;, invoke the program with either &lt;code&gt;--color=yes&lt;/code&gt; or &lt;code&gt;--color yes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;color&lt;/code&gt; を &lt;code&gt;Color.yes&lt;/code&gt; に設定するには、-- &lt;code&gt;--color=yes&lt;/code&gt; または &lt;code&gt;--color yes&lt;/code&gt; を 指定してプログラムを呼び出します 。</target>
        </trans-unit>
        <trans-unit id="6bda9df29c966af1a72e8a5182df74509b8e721a" translate="yes" xml:space="preserve">
          <source>To set &lt;code&gt;timeout&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;, invoke the program with either &lt;code&gt;--timeout=5&lt;/code&gt; or &lt;code&gt;--timeout 5&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; を &lt;code&gt;5&lt;/code&gt; に設定するには、-- timeout &lt;code&gt;--timeout=5&lt;/code&gt; または &lt;code&gt;--timeout 5&lt;/code&gt; を指定してプログラムを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7233a698292e0a276de835ff862d037b155c9056" translate="yes" xml:space="preserve">
          <source>To set &lt;code&gt;timeout&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;, use either of the following: &lt;code&gt;--timeout=5&lt;/code&gt;, &lt;code&gt;--timeout 5&lt;/code&gt;, &lt;code&gt;--t=5&lt;/code&gt;, &lt;code&gt;--t 5&lt;/code&gt;, or &lt;code&gt;-t5&lt;/code&gt;. Forms such as &lt;code&gt;-t 5&lt;/code&gt; and &lt;code&gt;-timeout=5&lt;/code&gt; will be not accepted.  For more details about short options, refer also to the next section.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; を &lt;code&gt;5&lt;/code&gt; に設定するには、-- timeout &lt;code&gt;--t=5&lt;/code&gt; 、-- &lt;code&gt;--t 5&lt;/code&gt; 、-- t = 5 、-- t 5 、または &lt;code&gt;-t5&lt;/code&gt; のいずれかを使用します。 &lt;code&gt;-t 5&lt;/code&gt; や &lt;code&gt;-timeout=5&lt;/code&gt; などの形式は受け付けられません。 短いオプションの詳細については、次のセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="ddaae0a344d10b36be801991a765088949e60549" translate="yes" xml:space="preserve">
          <source>To set &lt;code&gt;verbose&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, invoke the program with either &lt;code&gt;--verbose&lt;/code&gt; or &lt;code&gt;--verbose=true&lt;/code&gt;.  To set &lt;code&gt;debugging&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, invoke the program with &lt;code&gt;--debugging=false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定するには、-- verboseまたは &lt;code&gt;--verbose=true&lt;/code&gt; を &lt;code&gt;--verbose&lt;/code&gt; てプログラムを呼び出します 。 &lt;code&gt;debugging&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定するには、-- &lt;code&gt;--debugging=false&lt;/code&gt; を指定してプログラムを呼び出します 。</target>
        </trans-unit>
        <trans-unit id="90aeb9b368ec13053b28da39579d017a147e76dd" translate="yes" xml:space="preserve">
          <source>To solve the fragile base class problem, instance variables in Objective-C has a dynamic offset. That means that the base class can change (add or remove instance variables) without the subclasses needing to recompile or relink. Thanks to this feature it's not necessary to declare instance variables when creating bindings to Objective-C classes.</source>
          <target state="translated">壊れやすい基底クラスの問題を解決するために、Objective-C のインスタンス変数には動的なオフセットがあります。つまり、サブクラスが再コンパイルや再リンクをしなくても、基底クラスが変更(インスタンス変数の追加や削除)できるということです。この機能のおかげで、Objective-C クラスへのバインディングを作成する際にインスタンス変数を宣言する必要がありません。</target>
        </trans-unit>
        <trans-unit id="120e7e0cecbea01188056698938dba51c73d2ca2" translate="yes" xml:space="preserve">
          <source>To understand what &lt;code&gt;gapWeightedSimilarity(s, t, lambda)&lt;/code&gt; computes, consider first the case &lt;code&gt;lambda = 1&lt;/code&gt; and the strings &lt;code&gt;s = [&quot;Hello&quot;, &quot;brave&quot;, &quot;new&quot;, &quot;world&quot;]&lt;/code&gt; and &lt;code&gt;t = [&quot;Hello&quot;, &quot;new&quot;, &quot;world&quot;]&lt;/code&gt;. In that case, &lt;code&gt;gapWeightedSimilarity&lt;/code&gt; counts the following matches:</source>
          <target state="translated">&lt;code&gt;gapWeightedSimilarity(s, t, lambda)&lt;/code&gt; 計算するものを理解するには、まず &lt;code&gt;lambda = 1&lt;/code&gt; の場合と文字列 &lt;code&gt;s = [&quot;Hello&quot;, &quot;brave&quot;, &quot;new&quot;, &quot;world&quot;]&lt;/code&gt; および &lt;code&gt;t = [&quot;Hello&quot;, &quot;new&quot;, &quot;world&quot;]&lt;/code&gt; 。 その場合、 &lt;code&gt;gapWeightedSimilarity&lt;/code&gt; は次の一致をカウントします。</target>
        </trans-unit>
        <trans-unit id="94904fa76d4f11340da03fec0a15c494a85ffea1" translate="yes" xml:space="preserve">
          <source>To units</source>
          <target state="translated">単位へ</target>
        </trans-unit>
        <trans-unit id="b3ba6419dc9ea2b78f83db771b45536f87338e59" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;isInstanceOf&lt;/code&gt; to check the identity of a template while inside of said template, use &lt;a href=&quot;#TemplateOf&quot;&gt;&lt;code&gt;TemplateOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;isInstanceOf&lt;/code&gt; を使用して、テンプレート内でテンプレートのIDを確認するには、TemplateOfを使用します。</target>
        </trans-unit>
        <trans-unit id="0ccc24a097574057226e86500cf33d397fb42f61" translate="yes" xml:space="preserve">
          <source>To use a different comparison than &lt;code&gt;&quot;a &amp;lt; b&quot;&lt;/code&gt;, pass a different operator string that can be used by &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt;, or pass in a function, delegate, functor, or any type where &lt;code&gt;less(a, b)&lt;/code&gt; results in a &lt;code&gt;bool&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;&quot;a &amp;lt; b&quot;&lt;/code&gt; とは異なる比較を使用するには、 &lt;a href=&quot;std_functional#binaryFun&quot;&gt; &lt;code&gt;std.functional.binaryFun&lt;/code&gt; &lt;/a&gt;で使用できる別の演算子文字列を渡すか、関数、デリゲート、ファンクター、または &lt;code&gt;less(a, b)&lt;/code&gt; 結果となる任意の型を渡します &lt;code&gt;bool&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="ec17d2b0393d701bb378fb92b5f34cc43ec1456a" translate="yes" xml:space="preserve">
          <source>To use it:</source>
          <target state="translated">それを使うために</target>
        </trans-unit>
        <trans-unit id="ccbeeee07e1df8ffe8c8184d16795dcbbad96d59" translate="yes" xml:space="preserve">
          <source>To use the registered GC, it's name must be specified gcopt runtime option, e.g. by passing &lt;em&gt;, --DRT-gcopt=gc:my_gc_name&lt;/em&gt; as application argument.</source>
          <target state="translated">登録されたGCを使用するには、アプリケーションの引数として&lt;em&gt;--DRT-gcopt = gc：my_gc_name&lt;/em&gt;を渡す&lt;em&gt;など&lt;/em&gt;して&lt;em&gt;、その&lt;/em&gt;名前をgcoptランタイムオプションで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="66efb9234157955b960a3139060c665ce5882658" translate="yes" xml:space="preserve">
          <source>To use this template, it must first be instantiated with a specific type:</source>
          <target state="translated">このテンプレートを使用するには、まず特定の型でインスタンス化する必要があります。</target>
        </trans-unit>
        <trans-unit id="0773afb54ea37c47bd380cce3db76b12cb278887" translate="yes" xml:space="preserve">
          <source>To use, put the line: response_expand(&amp;amp;argc,&amp;amp;argv); as the first executable statement in main(int argc, char **argv). argc and argv are adjusted to be the new command line arguments after response file expansion.</source>
          <target state="translated">使用するには、次の行を挿入します：response_expand（＆argc、＆argv）; main（int argc、char ** argv）の最初の実行可能ステートメントとして。 argcとargvは、応答ファイルの展開後に新しいコマンドライン引数になるように調整されます。</target>
        </trans-unit>
        <trans-unit id="6054d88f6fd53a5005771519db583793dcab79e9" translate="yes" xml:space="preserve">
          <source>To what precision is x equal to y?</source>
          <target state="translated">xはどのくらいの精度でyと等しくなりますか?</target>
        </trans-unit>
        <trans-unit id="fdebf667212089ea7017a4b5425a561bdb3a30b0" translate="yes" xml:space="preserve">
          <source>Todo</source>
          <target state="translated">Todo</target>
        </trans-unit>
        <trans-unit id="fca57aee253e291d0ee9aa5ecbb555afdc35567c" translate="yes" xml:space="preserve">
          <source>Token Strings</source>
          <target state="translated">トークン文字列</target>
        </trans-unit>
        <trans-unit id="fed427b1f3d3ef7e65fc5054b2e5e854301b06b4" translate="yes" xml:space="preserve">
          <source>Token strings open with the characters &lt;code&gt;q&lt;/code&gt;&lt;code&gt;{&lt;/code&gt; and close with the token &lt;code&gt;}&lt;/code&gt;. In between must be valid D tokens. The &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; tokens nest. The string is formed of all the characters between the opening and closing of the token string, including comments.</source>
          <target state="translated">トークン文字列は文字 &lt;code&gt;q&lt;/code&gt; &lt;code&gt;{&lt;/code&gt; で始まり、トークン &lt;code&gt;}&lt;/code&gt; で終わります。 その間に有効なDトークンが必要です。 &lt;code&gt;{&lt;/code&gt; および &lt;code&gt;}&lt;/code&gt; トークンはネストします。 文字列は、コメントを含むトークン文字列の開始と終了の間のすべての文字で構成されます。</target>
        </trans-unit>
        <trans-unit id="c38c6c1f3a2743f8626703abb302e403d20ff81c" translate="yes" xml:space="preserve">
          <source>Tokens</source>
          <target state="translated">Tokens</target>
        </trans-unit>
        <trans-unit id="052c92ab74e0edce8a8ddb051550d404ed7fea5b" translate="yes" xml:space="preserve">
          <source>Total Number Of Rows Modified</source>
          <target state="translated">変更された行の総数</target>
        </trans-unit>
        <trans-unit id="acfc1c14180f3c75b37d492cbf0679b8f5397d5e" translate="yes" xml:space="preserve">
          <source>Trace handler</source>
          <target state="translated">トレースハンドラ</target>
        </trans-unit>
        <trans-unit id="339bd194ea0514f6931ef3cb54a8ab0164d4cdd4" translate="yes" xml:space="preserve">
          <source>TraceGC wrapper around &lt;a href=&quot;core_internal_array_concat#d_arraycatnTX&quot;&gt;&lt;code&gt;core.internal.array.concat.d_arraycatnTX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">core.internal.array.concat.d_arraycatnTXのTraceGCラッパー。</target>
        </trans-unit>
        <trans-unit id="d0e0642895405b7e1549bc202853dc5cb0187b5b" translate="yes" xml:space="preserve">
          <source>TraceGC wrapper around &lt;a href=&quot;core_internal_array_core.internal.array.capacity#d_arraysetlengthT&quot;&gt;&lt;code&gt;core.internal.array.core.internal.array.capacity.d_arraysetlengthT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">core.internal.array.core.internal.array.capacity.d_arraysetlengthTのTraceGCラッパー。</target>
        </trans-unit>
        <trans-unit id="b368b80c6345f7eb3fde3e057ff304366850fb39" translate="yes" xml:space="preserve">
          <source>TraceGC wrapper around &lt;a href=&quot;rt_array_appending_d_arrayappendctximpl#d_arrayappendcTX&quot;&gt;&lt;code&gt;rt.array.appending.d_arrayappendcTXImpl.d_arrayappendcTX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">rt.array.appending.d_arrayappendcTXImpl.d_arrayappendcTXのTraceGCラッパー。</target>
        </trans-unit>
        <trans-unit id="80dd4794746522d5a6319b62ffeb07ebb7212a09" translate="yes" xml:space="preserve">
          <source>TraceGC wrapper around &lt;a href=&quot;rt_array_appending_d_arrayappendtimpl#d_arrayappendT&quot;&gt;&lt;code&gt;rt.array.appending.d_arrayappendTImpl.d_arrayappendT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">rt.array.appending.d_arrayappendTImpl.d_arrayappendTのTraceGCラッパー。</target>
        </trans-unit>
        <trans-unit id="75a5d485e29e7339691a82c35666d01ee9e99be8" translate="yes" xml:space="preserve">
          <source>TraceGC wrapper around runtime hook &lt;code&gt;Hook&lt;/code&gt;.</source>
          <target state="translated">ランタイムフック &lt;code&gt;Hook&lt;/code&gt; の TraceGCラッパー。</target>
        </trans-unit>
        <trans-unit id="968e231f347833476137cde0bb130f49fd1066a0" translate="yes" xml:space="preserve">
          <source>TraceHandler &lt;code&gt;h&lt;/code&gt;</source>
          <target state="translated">TraceHandler &lt;code&gt;h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40795f513f85788543dae6b9a0f0c645b802b300" translate="yes" xml:space="preserve">
          <source>TraceHandler &lt;strong id=&quot;rt_getTraceHandler&quot;&gt;rt_getTraceHandler&lt;/strong&gt;();</source>
          <target state="translated">TraceHandler &lt;strong id=&quot;rt_getTraceHandler&quot;&gt;rt_getTraceHandler&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="3ff2cf2928371330c202528a4ec623af7dd4183d" translate="yes" xml:space="preserve">
          <source>TraceInfo &lt;strong id=&quot;info&quot;&gt;info&lt;/strong&gt;;</source>
          <target state="translated">TraceInfo &lt;strong id=&quot;info&quot;&gt;info&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="97acc1b59f9ec17c88715b436c8c28883bd4892f" translate="yes" xml:space="preserve">
          <source>Tracing And Profiling Functions</source>
          <target state="translated">トレースとプロファイリング機能</target>
        </trans-unit>
        <trans-unit id="b94fe6610b8c5aab12f91b0905d8d39edb892d87" translate="yes" xml:space="preserve">
          <source>Tracks bytes currently allocated by this allocator. This number goes up and down as memory is allocated and deallocated, and is zero if the allocator currently has no active allocation.</source>
          <target state="translated">このアロケータによって現在割り当てられているバイト数を追跡します。この数値は、メモリが割り当てられたり解放されたりすると上下し、アロケータが現在アクティブな割り当てをしていない場合はゼロになります。</target>
        </trans-unit>
        <trans-unit id="3ec8a086c7378a608bd7ab5887414689898832b0" translate="yes" xml:space="preserve">
          <source>Tracks the sum of all &lt;code&gt;b.length - s&lt;/code&gt; with &lt;code&gt;b.length &amp;gt; s&lt;/code&gt; in calls of the form &lt;code&gt;realloc(b, s)&lt;/code&gt; that succeed (return &lt;code&gt;true&lt;/code&gt;). In per-call statistics, also unambiguously counts the bytes deallocated with &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="translated">すべての &lt;code&gt;b.length - s&lt;/code&gt; 合計を追跡し、成功した（return &lt;code&gt;true&lt;/code&gt; を返す &lt;code&gt;realloc(b, s)&lt;/code&gt; 形式の呼び出しで &lt;code&gt;b.length &amp;gt; s&lt;/code&gt; します。 呼び出しごとの統計では、deallocateで &lt;code&gt;deallocate&lt;/code&gt; 解除されたバイトも明確にカウントされます 。</target>
        </trans-unit>
        <trans-unit id="b241e803ff9fd9ce02dd41f6d962d259eca7d1cc" translate="yes" xml:space="preserve">
          <source>Tracks the sum of all &lt;code&gt;delta&lt;/code&gt; values in calls of the form &lt;code&gt;expand(b, delta)&lt;/code&gt; that succeed (return &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;expand(b, delta)&lt;/code&gt; 形式の呼び出しで成功した（ &lt;code&gt;true&lt;/code&gt; を返す）すべての &lt;code&gt;delta&lt;/code&gt; 値の合計を追跡します 。</target>
        </trans-unit>
        <trans-unit id="5008e18d38dabcd09c748f97cdb5eb01dccc1e39" translate="yes" xml:space="preserve">
          <source>Tracks the sum of all bytes NOT moved as result of calls to &lt;code&gt;realloc&lt;/code&gt; that managed to reallocate in place. A large number (relative to &lt;code&gt; bytesAllocated&lt;/code&gt;) indicates that the application is expansion-intensive and is saving a good amount of moves. However, if this number is relatively small and &lt;code&gt;bytesSlack&lt;/code&gt; is high, it means the application is overallocating for little benefit.</source>
          <target state="translated">所定の位置に再割り当てできた &lt;code&gt;realloc&lt;/code&gt; の呼び出しの結果として移動されなかったすべてのバイトの合計を追跡します。 （ &lt;code&gt; bytesAllocated&lt;/code&gt; に比べて ）数値が大きい場合は、アプリケーションが拡張を集中的に使用しており、大量の移動を節約していることを示しています。 ただし、この数が比較的少なく、 &lt;code&gt;bytesSlack&lt;/code&gt; が高い場合は、アプリケーションが全体的な割り当てを行っているため、ほとんどメリットがありません。</target>
        </trans-unit>
        <trans-unit id="7955ac7f466b43052c0744fbaca4b335f62263c8" translate="yes" xml:space="preserve">
          <source>Tracks the sum of all bytes moved as a result of calls to &lt;code&gt;realloc&lt;/code&gt; that were unable to reallocate in place. A large number (relative to &lt;code&gt; bytesAllocated&lt;/code&gt;) indicates that the application should use larger preallocations.</source>
          <target state="translated">所定の位置に再割り当てできなかった &lt;code&gt;realloc&lt;/code&gt; の呼び出しの結果として移動したすべてのバイトの合計を追跡します。 （ &lt;code&gt; bytesAllocated&lt;/code&gt; と比較して）大きな数値は、アプリケーションがより大きな事前割り当てを使用する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="faf9f30dc9aae03a78ac2b0d759eee7f02feabde" translate="yes" xml:space="preserve">
          <source>Tracks total cumulative bytes allocated by means of &lt;code&gt;allocate&lt;/code&gt;, &lt;code&gt;expand&lt;/code&gt;, and &lt;code&gt;reallocate&lt;/code&gt; (when resulting in an expansion). This number always grows and indicates allocation traffic. To compute bytes deallocated cumulatively, subtract &lt;code&gt;bytesUsed&lt;/code&gt; from &lt;code&gt;bytesAllocated&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;allocate&lt;/code&gt; 、 &lt;code&gt;expand&lt;/code&gt; 、および &lt;code&gt;reallocate&lt;/code&gt; によって割り当てられた累積バイトの合計を追跡します（結果として展開された場合）。 この数は常に増加し、割り当てトラフィックを示します。 累積的に割り当て解除されたバイトを計算するには、 &lt;code&gt;bytesUsed&lt;/code&gt; から &lt;code&gt;bytesAllocated&lt;/code&gt; 減算します 。</target>
        </trans-unit>
        <trans-unit id="05e8d1a3538b3e90690cad906240b5fa54e138df" translate="yes" xml:space="preserve">
          <source>Trademarks</source>
          <target state="translated">Trademarks</target>
        </trans-unit>
        <trans-unit id="a65c761b81d8b95898721c08b732f21414baa36d" translate="yes" xml:space="preserve">
          <source>Traditionally, programs accepted single-letter options preceded by only one dash (e.g. &lt;code&gt;-t&lt;/code&gt;). &lt;code&gt;getopt&lt;/code&gt; accepts such parameters seamlessly. When used with a double-dash (e.g. &lt;code&gt;--t&lt;/code&gt;), a single-letter option behaves the same as a multi-letter option. When used with a single dash, a single-letter option is accepted. If the option has a parameter, that must be &quot;stuck&quot; to the option without any intervening space or &quot;=&quot;:</source>
          <target state="translated">伝統的に、プログラムはダッシュが1つだけ &lt;code&gt;-t&lt;/code&gt; 1文字のオプションを受け入れました（例： -t ）。 &lt;code&gt;getopt&lt;/code&gt; はそのようなパラメータをシームレスに受け入れます。 ダブルダッシュ（ &lt;code&gt;--t&lt;/code&gt; など ）とともに使用すると、1文字オプションは複数文字オプションと同じように動作します。 ダッシュを1つ使用すると、1文字のオプションが受け入れられます。 オプションにパラメーターがある場合は、スペースや「=」を介さずにオプションに「スタック」する必要があります。</target>
        </trans-unit>
        <trans-unit id="32a79a3c4d4b7259d08b26cc56e7bb87a9fe9843" translate="yes" xml:space="preserve">
          <source>Trailing template parameters can be given default values:</source>
          <target state="translated">後続のテンプレートパラメータにはデフォルト値を与えることができます。</target>
        </trans-unit>
        <trans-unit id="c05d0571a965a586c4e7efe02429db2afdc8c356" translate="yes" xml:space="preserve">
          <source>Trailing_Jamo</source>
          <target state="translated">Trailing_Jamo</target>
        </trans-unit>
        <trans-unit id="d1a616085a1a99a58e14bafaa350abc6783a3160" translate="yes" xml:space="preserve">
          <source>Traits</source>
          <target state="translated">Traits</target>
        </trans-unit>
        <trans-unit id="3eb508881f4d401ebe62236f9dc8c80c61228925" translate="yes" xml:space="preserve">
          <source>Traits are extensions to the language to enable programs, at compile time, to get at information internal to the compiler. This is also known as compile time reflection. It is done as a special, easily extended syntax (similar to Pragmas) so that new capabilities can be added as required.</source>
          <target state="translated">Traitsは、コンパイル時にプログラムがコンパイラの内部情報を取得できるようにするための言語の拡張機能です。これはコンパイル時の反映としても知られています。これは、必要に応じて新しい機能を追加できるように、特別で簡単に拡張できる構文として行われます(Pragmasに似ています)。</target>
        </trans-unit>
        <trans-unit id="45ce7caaed05d2b5c0efd3ebab2b970cdb17b248" translate="yes" xml:space="preserve">
          <source>TraitsExp &lt;strong id=&quot;exp&quot;&gt;exp&lt;/strong&gt;;</source>
          <target state="translated">TraitsExp &lt;strong id=&quot;exp&quot;&gt;exp&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="776df5d3d02b2f2502c0ba9fde683a6ac4564118" translate="yes" xml:space="preserve">
          <source>Transfer ownership from a &lt;code&gt;Unique&lt;/code&gt; of a type that is convertible to our type.</source>
          <target state="translated">私たちのタイプに変換可能なタイプの &lt;code&gt;Unique&lt;/code&gt; から所有権を譲渡します。</target>
        </trans-unit>
        <trans-unit id="b3f957b52d56c1cbf2d25e123eda610314928a9b" translate="yes" xml:space="preserve">
          <source>Transfer ownership to a &lt;code&gt;Unique&lt;/code&gt; rvalue. Nullifies the current contents. Same as calling std.algorithm.move on it.</source>
          <target state="translated">所有権を &lt;code&gt;Unique&lt;/code&gt; 右辺値に転送します。 現在の内容を無効にします。 std.algorithm.moveを呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="1f1886aabb4342f3629dbcd769504a41bfa676c8" translate="yes" xml:space="preserve">
          <source>Transfers execution to this fiber object. The calling context will be suspended until the fiber calls Fiber.yield() or until it terminates via an unhandled exception.</source>
          <target state="translated">実行をこの fiber オブジェクトに転送します。呼び出したコンテキストは、ファイバーが Fiber.yield()を呼び出すまで、あるいは未処理の例外によって終了するまで中断されます。</target>
        </trans-unit>
        <trans-unit id="31251528682bcb8b77a91ffbd3b05ea524c5340e" translate="yes" xml:space="preserve">
          <source>Transfers ownership of the buffer to the caller.</source>
          <target state="translated">バッファの所有権を呼び出し元に転送します。</target>
        </trans-unit>
        <trans-unit id="188eeca51b370b3f079cb0e0ef0721398bd7bd93" translate="yes" xml:space="preserve">
          <source>Transforms &lt;code&gt;path&lt;/code&gt; into a path relative to &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; を &lt;code&gt;base&lt;/code&gt; からの相対パスに変換します 。</target>
        </trans-unit>
        <trans-unit id="00ded035b85d9ff7c01b323b06df130cfc1720ab" translate="yes" xml:space="preserve">
          <source>Transforms &lt;code&gt;path&lt;/code&gt; into an absolute path.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; を絶対パスに変換します 。</target>
        </trans-unit>
        <trans-unit id="34fc8e092bab0ba38ba7f911f332353c9a7c0772" translate="yes" xml:space="preserve">
          <source>Transforms a &lt;code&gt;string&lt;/code&gt; representing an expression into a binary function. The &lt;code&gt;string&lt;/code&gt; must either use symbol names &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as the parameters or provide the symbols via the &lt;code&gt;parm1Name&lt;/code&gt; and &lt;code&gt;parm2Name&lt;/code&gt; arguments.</source>
          <target state="translated">式を表す &lt;code&gt;string&lt;/code&gt; をバイナリ関数に変換します 。 &lt;code&gt;string&lt;/code&gt; は、パラメータとしてシンボル名 &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; を使用するか、 &lt;code&gt;parm1Name&lt;/code&gt; および &lt;code&gt;parm2Name&lt;/code&gt; 引数を介してシンボルを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="5e4574331dd9213dff75e0c56ce82cdfa938b199" translate="yes" xml:space="preserve">
          <source>Transforms a &lt;code&gt;string&lt;/code&gt; representing an expression into a unary function. The &lt;code&gt;string&lt;/code&gt; must either use symbol name &lt;code&gt;a&lt;/code&gt; as the parameter or provide the symbol via the &lt;code&gt;parmName&lt;/code&gt; argument.</source>
          <target state="translated">式を表す &lt;code&gt;string&lt;/code&gt; を単項関数に変換します 。 &lt;code&gt;string&lt;/code&gt; は、パラメータとしてシンボル名 &lt;code&gt;a&lt;/code&gt; を使用するか、 &lt;code&gt;parmName&lt;/code&gt; 引数を介してシンボルを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="7b88afb73f270a00af5effe51e0f8272f4aa3e3a" translate="yes" xml:space="preserve">
          <source>Translate init to an &lt;code&gt;Expression&lt;/code&gt; in order to infer the type.</source>
          <target state="translated">タイプを推測するには、initを &lt;code&gt;Expression&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="959a6d1def925aa5efa951960e2388ce3ff0f34b" translate="yes" xml:space="preserve">
          <source>Translate init to an &lt;code&gt;Expression&lt;/code&gt;.</source>
          <target state="translated">initを &lt;code&gt;Expression&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="4b87d9bdcb57690f52a1f26d8df3d98e87cf8b7e" translate="yes" xml:space="preserve">
          <source>Translates &lt;code&gt;path&lt;/code&gt; into a relative path.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; を相対パスに変換します 。</target>
        </trans-unit>
        <trans-unit id="98dc0425ab3f9caa6b04fd152b154f235170a331" translate="yes" xml:space="preserve">
          <source>Translation to D of Linux's melf.h</source>
          <target state="translated">Linux の melf.h の D への翻訳</target>
        </trans-unit>
        <trans-unit id="a4f515edfc4806822304c5e5ba93f1584400280b" translate="yes" xml:space="preserve">
          <source>Transmission Control Protocol</source>
          <target state="translated">でんそうせいぎょプロトコル</target>
        </trans-unit>
        <trans-unit id="65ee3b2fd39b9602bb0e6c467c899854326f9080" translate="yes" xml:space="preserve">
          <source>Transmission Control Protocol level</source>
          <target state="translated">でんそうせいぎょプロトコルレベル</target>
        </trans-unit>
        <trans-unit id="392746932775e052b533e7404ac34fc0d43420a8" translate="yes" xml:space="preserve">
          <source>Transport And Map Symbols</source>
          <target state="translated">交通機関と地図記号</target>
        </trans-unit>
        <trans-unit id="bb1493e21daf9bc01d2c8bbab57c14f37d6e777e" translate="yes" xml:space="preserve">
          <source>Transposed!(RangeOfRanges, opt) &lt;strong id=&quot;transposed&quot;&gt;transposed&lt;/strong&gt;(TransverseOptions opt = TransverseOptions.assumeJagged, RangeOfRanges)(RangeOfRanges rr)</source>
          <target state="translated">Transposed！（RangeOfRanges、opt） &lt;strong id=&quot;transposed&quot;&gt;transposed&lt;/strong&gt; （TransverseOptions opt = TransverseOptions.assumeJagged、RangeOfRanges）（RangeOfRanges rr）</target>
        </trans-unit>
        <trans-unit id="2cb4af12ae00a70b772cd041efc803dad1d5d955" translate="yes" xml:space="preserve">
          <source>Transposes a range of ranges.</source>
          <target state="translated">範囲を転置します。</target>
        </trans-unit>
        <trans-unit id="4bca179998de8185466d7b4948059e2b6d46a32a" translate="yes" xml:space="preserve">
          <source>Transversal!(RangeOfRanges, opt) &lt;strong id=&quot;transversal&quot;&gt;transversal&lt;/strong&gt;(TransverseOptions opt = TransverseOptions.assumeJagged, RangeOfRanges)(RangeOfRanges rr, size_t n);</source>
          <target state="translated">Transversal！（RangeOfRanges、opt） &lt;strong id=&quot;transversal&quot;&gt;transversal&lt;/strong&gt; （TransverseOptions opt = TransverseOptions.assumeJagged、RangeOfRanges）（RangeOfRanges rr、size_t n）;</target>
        </trans-unit>
        <trans-unit id="89cf6770d26bcadaba07c91c703d1d100d7ecf19" translate="yes" xml:space="preserve">
          <source>Treap container for internal usage.</source>
          <target state="translated">内部で使用するためのTreapコンテナ。</target>
        </trans-unit>
        <trans-unit id="0a9f92517de5b94ca2202e73bfb4ff1ae0e96219" translate="yes" xml:space="preserve">
          <source>Treat wildcard bind as AF_INET6-only</source>
          <target state="translated">ワイルドカードバインドを AF_INET6 のみとして扱う</target>
        </trans-unit>
        <trans-unit id="2b931f6f03ddf3f11b6a931c301cd688e5837818" translate="yes" xml:space="preserve">
          <source>Treatment of invalid UTF encodings is implementation defined.</source>
          <target state="translated">無効なUTFエンコーディングの扱いは実装で定義されています。</target>
        </trans-unit>
        <trans-unit id="7ca6b4d5d472cc8ae3e80819b582f65c3b7ce26a" translate="yes" xml:space="preserve">
          <source>Triangular numbers, using function in lambda form:</source>
          <target state="translated">三角数、ラムダ形式の関数を使って</target>
        </trans-unit>
        <trans-unit id="9b543ca20b4da0104d2324c842cb2ec287022816" translate="yes" xml:space="preserve">
          <source>Trie</source>
          <target state="translated">Trie</target>
        </trans-unit>
        <trans-unit id="80d0235fc8480eef2ad4552832fe178049a6c3b3" translate="yes" xml:space="preserve">
          <source>Tries to receive but will give up if no matches arrive within duration. Won't wait at all if provided &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; is negative.</source>
          <target state="translated">受け取りを試みますが、期間内に一致が到着しない場合はあきらめます。 指定された&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;が負の場合、まったく待機しません。</target>
        </trans-unit>
        <trans-unit id="c45198e3a1cef5be9e9ea6378e5c328265a866c6" translate="yes" xml:space="preserve">
          <source>Trigger Name Table Name</source>
          <target state="translated">トリガー名 テーブル名</target>
        </trans-unit>
        <trans-unit id="bcd455ee5ad5e27e2fed7e5f2b4d193ba5b2dc98" translate="yes" xml:space="preserve">
          <source>Trigonometric functions on complex numbers.</source>
          <target state="translated">複素数上の三角関数。</target>
        </trans-unit>
        <trans-unit id="89225146f512abd9863323c7f96ee652306f95de" translate="yes" xml:space="preserve">
          <source>Trigonometry</source>
          <target state="translated">Trigonometry</target>
        </trans-unit>
        <trans-unit id="9324b1be3eab89aaa4331826e321fe950cd6f28d" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;S&lt;/code&gt; or any type directly embedded in the representation of &lt;code&gt;S&lt;/code&gt; defines an elaborate assignment. Elaborate assignments are introduced by defining &lt;code&gt;opAssign(typeof(this))&lt;/code&gt; or &lt;code&gt;opAssign(ref typeof(this))&lt;/code&gt; for a &lt;code&gt;struct&lt;/code&gt; or when there is a compiler-generated &lt;code&gt;opAssign&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; またはSの表現に直接埋め込まれた任意の型が精巧な割り当てを定義する場合は真。 &lt;code&gt;struct&lt;/code&gt; に対して &lt;code&gt;opAssign(typeof(this))&lt;/code&gt; または &lt;code&gt;opAssign(ref typeof(this))&lt;/code&gt; を定義することにより、またはコンパイラーが生成した &lt;code&gt;opAssign&lt;/code&gt; がある場合に、 複雑な割り当てが導入されます。</target>
        </trans-unit>
        <trans-unit id="435f68d9ae71393e298d71580ab5403b39c6eeb4" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;S&lt;/code&gt; or any type directly embedded in the representation of &lt;code&gt;S&lt;/code&gt; defines an elaborate destructor. Elaborate destructors are introduced by defining &lt;code&gt;~this()&lt;/code&gt; for a &lt;code&gt; struct&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; またはSの表現に直接埋め込まれた任意の型が複雑なデストラクタを定義している場合はtrue。 複雑なデストラクタは、 &lt;code&gt; struct&lt;/code&gt; &lt;code&gt;~this()&lt;/code&gt; を定義することで導入されます。</target>
        </trans-unit>
        <trans-unit id="a05d6bcd95b9d55e986b0af7bf4aba60806b34ed" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;S&lt;/code&gt; or any type embedded directly in the representation of &lt;code&gt;S&lt;/code&gt; defines an elaborate copy constructor. Elaborate copy constructors are introduced by defining &lt;code&gt;this(this)&lt;/code&gt; for a &lt;code&gt;struct&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; またはSの表現に直接埋め込まれた任意の型が精巧なコピーコンストラクターを定義する場合はTrue。 &lt;code&gt;struct&lt;/code&gt; &lt;code&gt;this(this)&lt;/code&gt; を定義することにより、精巧なコピーコンストラクターが導入されます。</target>
        </trans-unit>
        <trans-unit id="db144774838df48d1aab2237df1c1431f648dde1" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;S&lt;/code&gt; or any type embedded directly in the representation of &lt;code&gt;S&lt;/code&gt; defines elaborate move semantics. Elaborate move semantics are introduced by defining &lt;code&gt;opPostMove(ref typeof(this))&lt;/code&gt; for a &lt;code&gt;struct&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; またはSの表現に直接埋め込まれた任意の型が精巧な移動セマンティクスを定義している場合はtrue。 &lt;code&gt;struct&lt;/code&gt; &lt;code&gt;opPostMove(ref typeof(this))&lt;/code&gt; を定義することにより、手の込んだ移動のセマンティクスが導入されます。</target>
        </trans-unit>
        <trans-unit id="83286feea43cbdff092efa76ecf7b71ba2f88e52" translate="yes" xml:space="preserve">
          <source>True if output is already ordered</source>
          <target state="translated">出力が既に順序付けされている場合は真</target>
        </trans-unit>
        <trans-unit id="a07b7fa9f3e40c77f1c67f20db579672485bc6b7" translate="yes" xml:space="preserve">
          <source>True if the element existed and was successfully removed, false otherwise.</source>
          <target state="translated">要素が存在し、削除に成功した場合はTrue、そうでない場合はFalseとなります。</target>
        </trans-unit>
        <trans-unit id="9ce4971f7bab09ad8525733035042183aaa85004" translate="yes" xml:space="preserve">
          <source>True if the instance is stopped. A stopped instance is not usable.</source>
          <target state="translated">インスタンスが停止している場合は真。停止しているインスタンスは使用できません。</target>
        </trans-unit>
        <trans-unit id="a4d0aeb9232f48bb1fab12af59602ee0a168f2c0" translate="yes" xml:space="preserve">
          <source>True if this object contains valid extended grapheme cluster. Decoding primitives of this module always return a valid &lt;code&gt;Grapheme&lt;/code&gt;.</source>
          <target state="translated">このオブジェクトに有効な拡張書記素クラスターが含まれている場合はtrue。 このモジュールのプリミティブをデコードすると、常に有効な &lt;code&gt;Grapheme&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="741d78e7c1f0bffb06939bcb7022d56f2f3604a6" translate="yes" xml:space="preserve">
          <source>True if this set doesn't contain any &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt;.</source>
          <target state="translated">このセットに&lt;a href=&quot;#Code%20point&quot;&gt;コードポイント&lt;/a&gt;が含まれていない場合はTrue。</target>
        </trans-unit>
        <trans-unit id="a7044bfa031ab131bad87130e1755ca8c06a8fda" translate="yes" xml:space="preserve">
          <source>True when the archive is in Zip64 format.</source>
          <target state="translated">アーカイブが Zip64 形式の場合は真。</target>
        </trans-unit>
        <trans-unit id="f9be005b0435403e870851df7d4131f3a0109ac9" translate="yes" xml:space="preserve">
          <source>Trusted Functions</source>
          <target state="translated">信頼された機能</target>
        </trans-unit>
        <trans-unit id="40f12844940629afacea122912b44fee54a96dc6" translate="yes" xml:space="preserve">
          <source>Trusted functions are covariant with safe or system functions.</source>
          <target state="translated">信頼された機能は、安全な機能やシステム機能と共分散しています。</target>
        </trans-unit>
        <trans-unit id="b81cf6c642ef243859e62c2673b1273c1506df41" translate="yes" xml:space="preserve">
          <source>Trusted functions are guaranteed to not exhibit any undefined behavior if called by a safe function. Furthermore, calls to trusted functions cannot lead to undefined behavior in &lt;code&gt;@safe&lt;/code&gt; code that is executed afterwards. It is the responsibility of the programmer to ensure that these guarantees are upheld.</source>
          <target state="translated">信頼できる関数は、安全な関数から呼び出された場合、未定義の動作をしないことが保証されています。 さらに、信頼された関数の呼び出しは、 &lt;code&gt;@safe&lt;/code&gt; 実行される@safeコードで未定義の動作を引き起こすことはありません。 これらの保証が守られることを保証するのはプログラマの責任です。</target>
        </trans-unit>
        <trans-unit id="e99ece345b7d4461848926cc1472e577d410e5e4" translate="yes" xml:space="preserve">
          <source>Trusted functions are marked with the &lt;code&gt;@trusted&lt;/code&gt; attribute.</source>
          <target state="translated">信頼できる関数は、 &lt;code&gt;@trusted&lt;/code&gt; 属性でマークされます。</target>
        </trans-unit>
        <trans-unit id="44bf3c1616a6357f7a131b6c0a39fc313c94e84c" translate="yes" xml:space="preserve">
          <source>Trusted functions may call safe, trusted, or system functions.</source>
          <target state="translated">信頼された関数は、安全な関数、信頼された関数、またはシステム関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="459c8d9a1e6d3847007459ddd42920c4db61b906" translate="yes" xml:space="preserve">
          <source>Truth table for logical operations</source>
          <target state="translated">論理演算の真理値テーブル</target>
        </trans-unit>
        <trans-unit id="13da7fbcb3f25e75b715c9fd87fc1fcc65959500" translate="yes" xml:space="preserve">
          <source>Try Statement</source>
          <target state="translated">ステートメントを試す</target>
        </trans-unit>
        <trans-unit id="1ed4257452c884a8b0797028299d6b533a605ed8" translate="yes" xml:space="preserve">
          <source>Try to canonically compose 2 &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt;. Returns the composed &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; if they do compose and dchar.init otherwise.</source>
          <target state="translated">2 &lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;を標準的に構成するようにしてください。 作成する場合は合成&lt;a href=&quot;#Character&quot;&gt;文字を&lt;/a&gt;返し、それ以外の場合はdchar.initを返します。</target>
        </trans-unit>
        <trans-unit id="af1dc631a797cf3323aa1ab6b455b4f41ff959a7" translate="yes" xml:space="preserve">
          <source>Try to compose hangul syllable out of a leading consonant (&lt;code&gt;lead&lt;/code&gt;), a &lt;code&gt;vowel&lt;/code&gt; and optional &lt;code&gt;trailing&lt;/code&gt; consonant jamos.</source>
          <target state="translated">先頭の子音（ &lt;code&gt;lead&lt;/code&gt; ）、 &lt;code&gt;vowel&lt;/code&gt; 、およびオプションの &lt;code&gt;trailing&lt;/code&gt; 子音jamoからハングル音節を作成してみます。</target>
        </trans-unit>
        <trans-unit id="2f882d1c819b2be8fca22d9247747ab281b24bcf" translate="yes" xml:space="preserve">
          <source>Try to get arg as a type.</source>
          <target state="translated">argを型として取得してみてください。</target>
        </trans-unit>
        <trans-unit id="4cb5c2463fdeee729189be2318f4a45f82417dad" translate="yes" xml:space="preserve">
          <source>Try to run semantic routines. If they fail, return NULL.</source>
          <target state="translated">セマンティックルーチンを実行してみてください。失敗した場合はNULLを返します。</target>
        </trans-unit>
        <trans-unit id="2e3437da5d7c211579a17d9d89d77ab06ca5cfe0" translate="yes" xml:space="preserve">
          <source>Try to stop forgetting to remove the breakpoints from release builds.</source>
          <target state="translated">リリースビルドからブレークポイントを削除することを忘れないようにしてください。</target>
        </trans-unit>
        <trans-unit id="bd89ac0e2f8d21f48d2dd844d0cfaadc52595afa" translate="yes" xml:space="preserve">
          <source>TryFinallyStatement &lt;strong id=&quot;tf&quot;&gt;tf&lt;/strong&gt;;</source>
          <target state="translated">TryFinallyStatement &lt;strong id=&quot;tf&quot;&gt;tf&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7b1fdcae82a3bda8500a782276a90907df015b0b" translate="yes" xml:space="preserve">
          <source>TryStatement</source>
          <target state="translated">TryStatement</target>
        </trans-unit>
        <trans-unit id="db36ec316b7f2d3519063434cfdeb6b15e62e78d" translate="yes" xml:space="preserve">
          <source>Trying to use returned value will result in a &quot;Symbol Undefined&quot; error at link time.</source>
          <target state="translated">返された値を使用しようとすると、リンク時に &quot;Symbol Undefined &quot;エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c41a2be51027c17da2914785c19c9af65da7231f" translate="yes" xml:space="preserve">
          <source>Tuple</source>
          <target state="translated">Tuple</target>
        </trans-unit>
        <trans-unit id="81493a4efae126007a86642029f330ea19b00d39" translate="yes" xml:space="preserve">
          <source>Tuple containing the remainder portions of r1 and r2 that were not swapped</source>
          <target state="translated">r1とr2のスワップされなかった残りの部分を含むタプル</target>
        </trans-unit>
        <trans-unit id="0334a3ee71c30886045ce944919d843672b82a98" translate="yes" xml:space="preserve">
          <source>Tuple of result identifier (possibly null) and statement. This is used to store out contracts: out(id){ ensure }</source>
          <target state="translated">結果識別子(nullの場合もあります)とステートメントのタプル。これは、契約書の出力を格納するために使用されます:out(id){ensure }</target>
        </trans-unit>
        <trans-unit id="fe605913e40c1b2d66822716dc9acacaef59b4a5" translate="yes" xml:space="preserve">
          <source>Tuple of values, for example &lt;code&gt;Tuple!(int, string)&lt;/code&gt; is a record that stores an &lt;code&gt;int&lt;/code&gt; and a &lt;code&gt;string&lt;/code&gt;. &lt;code&gt;Tuple&lt;/code&gt; can be used to bundle values together, notably when returning multiple values from a function. If &lt;code&gt;obj&lt;/code&gt; is a &lt;code&gt;Tuple&lt;/code&gt;, the individual members are accessible with the syntax &lt;code&gt;obj[0]&lt;/code&gt; for the first field, &lt;code&gt;obj[1]&lt;/code&gt; for the second, and so on.</source>
          <target state="translated">値の &lt;code&gt;Tuple!(int, string)&lt;/code&gt; たとえば、 Tuple！（int、string）は、 &lt;code&gt;int&lt;/code&gt; と &lt;code&gt;string&lt;/code&gt; を格納するレコードです。 &lt;code&gt;Tuple&lt;/code&gt; は、特に関数から複数の値を返すときに、値をまとめるために使用できます。 &lt;code&gt;obj&lt;/code&gt; が &lt;code&gt;Tuple&lt;/code&gt; の場合、個々のメンバーは、最初のフィールドに &lt;code&gt;obj[1]&lt;/code&gt; &lt;code&gt;obj[0]&lt;/code&gt; 、2番目にobj [1]という構文でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0a9986e9aa2ae5162b29264e46abc7e827c1fef4" translate="yes" xml:space="preserve">
          <source>Tuple with the first element being the minimal amount of edits to transform s into t and the second element being the sequence of edits to effect this transformation.  Allocates GC memory for the returned EditOp[] array.</source>
          <target state="translated">1 番目の要素は s を t に変換するための最小の編集量であり、2 番目の要素はこの変換を行うための編集のシーケンスです。返された EditOp[]配列のためにGCメモリを確保します。</target>
        </trans-unit>
        <trans-unit id="ca82eca51bdda72eb0ed74065cca566ee0b72807" translate="yes" xml:space="preserve">
          <source>Tuple!(ElementType!Range, size_t) &lt;strong id=&quot;maxCount&quot;&gt;maxCount&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">&lt;strong id=&quot;maxCount&quot;&gt;Tuple&lt;/strong&gt; ！（ElementType！Range、size_t） &lt;strong id=&quot;maxCount&quot;&gt;maxCount&lt;/strong&gt; （エイリアスpred = &quot;a &amp;lt;b&quot;、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="c94a9ad6dc26bde095208b9742dea8d55cd74e36" translate="yes" xml:space="preserve">
          <source>Tuple!(ElementType!Range, size_t) &lt;strong id=&quot;minCount&quot;&gt;minCount&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">&lt;strong id=&quot;minCount&quot;&gt;Tuple&lt;/strong&gt; ！（ElementType！Range、size_t） &lt;strong id=&quot;minCount&quot;&gt;minCount&lt;/strong&gt; （エイリアスpred = &quot;a &amp;lt;b&quot;、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="5b8d3e9bf7e07ed5d350fa5b6dce75fa73629a67" translate="yes" xml:space="preserve">
          <source>Tuple!(InputRange1, InputRange2) &lt;strong id=&quot;moveSome&quot;&gt;moveSome&lt;/strong&gt;(InputRange1, InputRange2)(InputRange1 src, InputRange2 tgt)</source>
          <target state="translated">Tuple！（InputRange1、InputRange2） &lt;strong id=&quot;moveSome&quot;&gt;moveSome&lt;/strong&gt; （InputRange1、InputRange2）（InputRange1 src、InputRange2 tgt）</target>
        </trans-unit>
        <trans-unit id="06252b12aadc6855e3f6a48094435d5ba0fef2ac" translate="yes" xml:space="preserve">
          <source>Tuple!(InputRange1, InputRange2) &lt;strong id=&quot;swapRanges&quot;&gt;swapRanges&lt;/strong&gt;(InputRange1, InputRange2)(InputRange1 r1, InputRange2 r2)</source>
          <target state="translated">Tuple！（InputRange1、InputRange2） &lt;strong id=&quot;swapRanges&quot;&gt;swapRanges&lt;/strong&gt; （InputRange1、InputRange2）（InputRange1 r1、InputRange2 r2）</target>
        </trans-unit>
        <trans-unit id="bce2cc2678db91fbec2284d40957048f616f80c5" translate="yes" xml:space="preserve">
          <source>Tuple!(Module, &quot;module_&quot;, Diagnostics, &quot;diagnostics&quot;) &lt;strong id=&quot;parseModule&quot;&gt;parseModule&lt;/strong&gt;(AST = ASTCodegen)(const(char)[] fileName, const(char)[] code = null, DiagnosticReporter diagnosticReporter = defaultDiagnosticReporter);</source>
          <target state="translated">Tuple！（Module、 &quot;module_&quot;、Diagnostics、 &quot;diagnostics&quot;） &lt;strong id=&quot;parseModule&quot;&gt;parseModule&lt;/strong&gt; （AST = ASTCodegen）（const（char）[] fileName、const（char）[] code = null、DiagnosticReporter diagnosticReporter = defaultDiagnosticReporter）;</target>
        </trans-unit>
        <trans-unit id="ecf8ee3baa7b9c5aeb7e04fdf957e2203fbab0aa" translate="yes" xml:space="preserve">
          <source>Tuple!(Range, size_t) &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range, Ranges...)(Range haystack, Ranges needles)</source>
          <target state="translated">Tuple！（Range、size_t） &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt; （エイリアスpred = &quot;a == b&quot;、Range、Ranges ...）（Range haystack、Ranges needles）</target>
        </trans-unit>
        <trans-unit id="95cc77bd73a8dcdc8783b1903366dc167f6f0405" translate="yes" xml:space="preserve">
          <source>Tuple!(Range1, Range2) &lt;strong id=&quot;mismatch&quot;&gt;mismatch&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range1, Range2)(Range1 r1, Range2 r2)</source>
          <target state="translated">Tuple！（Range1、Range2）の&lt;strong id=&quot;mismatch&quot;&gt;不一致&lt;/strong&gt; （エイリアスpred = &quot;a == b&quot;、Range1、Range2）（Range1 r1、Range2 r2）</target>
        </trans-unit>
        <trans-unit id="000cf2a61823c3534d53f39458b33b8bdccf2670" translate="yes" xml:space="preserve">
          <source>Tuple!(T, &quot;x&quot;, Unqual!(ReturnType!DF), &quot;y&quot;, T, &quot;error&quot;) &lt;strong id=&quot;findLocalMin&quot;&gt;findLocalMin&lt;/strong&gt;(T, DF)(scope DF f, in T ax, in T bx, in T relTolerance = sqrt(T.epsilon), in T absTolerance = sqrt(T.epsilon))</source>
          <target state="translated">Tuple！（T、 &quot;x&quot;、Unqual！（ReturnType！DF）、 &quot;y&quot;、T、 &quot;error&quot;） &lt;strong id=&quot;findLocalMin&quot;&gt;findLocalMin&lt;/strong&gt; （T、DF）（scope DF f、in T ax、in T bx、in T relTolerance = sqrt（T.epsilon）、in T absTolerance = sqrt（T.epsilon））</target>
        </trans-unit>
        <trans-unit id="840acdf57ba98e4920f2fbec545eb130df4593a8" translate="yes" xml:space="preserve">
          <source>Tuple!(T, T, R, R) &lt;strong id=&quot;findRoot&quot;&gt;findRoot&lt;/strong&gt;(T, R, DF)(scope DF f, in T ax, in T bx, in R fax, in R fbx);</source>
          <target state="translated">タプル！（T、T、R、R） &lt;strong id=&quot;findRoot&quot;&gt;findRoot&lt;/strong&gt; （T、R、DF）（スコープDF f、T ax、T bx、R fax、R fbx）;</target>
        </trans-unit>
        <trans-unit id="51994771db6a3d28fa759af046d2c850390305a5" translate="yes" xml:space="preserve">
          <source>Tuple!(T, T, R, R) &lt;strong id=&quot;findRoot&quot;&gt;findRoot&lt;/strong&gt;(T, R, DF, DT)(scope DF f, in T ax, in T bx, in R fax, in R fbx, scope DT tolerance)</source>
          <target state="translated">タプル！（T、T、R、R） &lt;strong id=&quot;findRoot&quot;&gt;findRoot&lt;/strong&gt; （T、R、DF、DT）（スコープDF f、T ax、T bx、R fax、R fbx、スコープDT許容値）</target>
        </trans-unit>
        <trans-unit id="639ddd2f21c13c7af4c3fc3a46fe3e1d7b82673a" translate="yes" xml:space="preserve">
          <source>Tuple!(size_t, EditOp[]) &lt;strong id=&quot;levenshteinDistanceAndPath&quot;&gt;levenshteinDistanceAndPath&lt;/strong&gt;(alias equals = (a, b) =&amp;gt; a == b, Range1, Range2)(Range1 s, Range2 t)</source>
          <target state="translated">Tuple！（size_t、EditOp []） &lt;strong id=&quot;levenshteinDistanceAndPath&quot;&gt;levenshteinDistanceAndPath&lt;/strong&gt; （エイリアスは=（a、b）=&amp;gt; a == b、Range1、Range2）（Range1 s、Range2 t）</target>
        </trans-unit>
        <trans-unit id="c0c86644914e59cf3e95dc2d9e3358d7adb8b024" translate="yes" xml:space="preserve">
          <source>Tuple!(size_t, EditOp[]) &lt;strong id=&quot;levenshteinDistanceAndPath&quot;&gt;levenshteinDistanceAndPath&lt;/strong&gt;(alias equals = (a, b) =&amp;gt; a == b, Range1, Range2)(auto ref Range1 s, auto ref Range2 t)</source>
          <target state="translated">Tuple！（size_t、EditOp []） &lt;strong id=&quot;levenshteinDistanceAndPath&quot;&gt;levenshteinDistanceAndPath&lt;/strong&gt; （エイリアスは=（a、b）=&amp;gt; a == b、Range1、Range2）（auto ref Range1 s、auto ref Range2 t）</target>
        </trans-unit>
        <trans-unit id="b4ce998808efbe7007c7ba094a0ff589456afbc6" translate="yes" xml:space="preserve">
          <source>TupleDeclaration &lt;strong id=&quot;isAliasThisTuple&quot;&gt;isAliasThisTuple&lt;/strong&gt;(Expression e);</source>
          <target state="translated">TupleDeclaration &lt;strong id=&quot;isAliasThisTuple&quot;&gt;isAliasThisTuple&lt;/strong&gt; （式e）;</target>
        </trans-unit>
        <trans-unit id="80678cb1445455517d232f6976a2ee0f4da0533a" translate="yes" xml:space="preserve">
          <source>TupleForeachRet!(isStatic, isDecl) &lt;strong id=&quot;makeTupleForeach&quot;&gt;makeTupleForeach&lt;/strong&gt;(bool isStatic, bool isDecl)(Scope* sc, ForeachStatement fs, TupleForeachArgs!(isStatic, isDecl) args);</source>
          <target state="translated">TupleForeachRet！（isStatic、isDecl） &lt;strong id=&quot;makeTupleForeach&quot;&gt;makeTupleForeach&lt;/strong&gt; （bool isStatic、bool isDecl）（Scope * sc、ForeachStatement fs、TupleForeachArgs！（isStatic、isDecl）args）;</target>
        </trans-unit>
        <trans-unit id="6584111cad42d4105dd8e9be93a1310902d91e92" translate="yes" xml:space="preserve">
          <source>Tuples of two integral offsets can be used to remove an indices range:</source>
          <target state="translated">2つの積分オフセットのタプルは、インデックス範囲を削除するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d9a474dda4f883ffd7fcbe2488c48bb66a58fbd7" translate="yes" xml:space="preserve">
          <source>Turn DT_azeros into DTcommon</source>
          <target state="translated">DT_azerosをDTcommonにする</target>
        </trans-unit>
        <trans-unit id="b124a21a659b94416124a0c6d11837b408eec822" translate="yes" xml:space="preserve">
          <source>Turn StringExp into Symbol.</source>
          <target state="translated">StringExpをSymbolに変換します。</target>
        </trans-unit>
        <trans-unit id="e5fc19e75828d2a9872def0cc347c568479bfe06" translate="yes" xml:space="preserve">
          <source>Turn bundling off (default)</source>
          <target state="translated">バンドルをオフにする(デフォルト</target>
        </trans-unit>
        <trans-unit id="bba5b8eb4f9f33288234c4eea8f1ef87433a4f05" translate="yes" xml:space="preserve">
          <source>Turn bundling on</source>
          <target state="translated">束ねをオンにする</target>
        </trans-unit>
        <trans-unit id="902547bf87091225cc20e88f552ffa5d6f0ad9d8" translate="yes" xml:space="preserve">
          <source>Turn case sensitivity off (default)</source>
          <target state="translated">ケース感度をオフにする(デフォルト</target>
        </trans-unit>
        <trans-unit id="62ba7010a40283d77918d8073bba5d1ed5b505cc" translate="yes" xml:space="preserve">
          <source>Turn case sensitivity on</source>
          <target state="translated">ケース感度をオンにする</target>
        </trans-unit>
        <trans-unit id="74f2dbf84af28045a37d376cd4e1edd3fa01e659" translate="yes" xml:space="preserve">
          <source>Turn next token in buffer into a token.</source>
          <target state="translated">バッファ内の次のトークンをトークンにします。</target>
        </trans-unit>
        <trans-unit id="5e3e0a4844ec64b01594e006a743ab91237a31f0" translate="yes" xml:space="preserve">
          <source>Turn off &lt;code&gt;STC.maybescope&lt;/code&gt; for variable &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">変数 &lt;code&gt;v&lt;/code&gt; の &lt;code&gt;STC.maybescope&lt;/code&gt; をオフにします。</target>
        </trans-unit>
        <trans-unit id="84cccbe55a872601d865bab8ec58d82539ff0a07" translate="yes" xml:space="preserve">
          <source>Turn on wildcard matching</source>
          <target state="translated">ワイルドカードのマッチングをオンにする</target>
        </trans-unit>
        <trans-unit id="a87d900130ba3c16a326f82759f1060e5ae35223" translate="yes" xml:space="preserve">
          <source>Turn symbol &lt;code&gt;s&lt;/code&gt; into the expression it represents.</source>
          <target state="translated">シンボル &lt;code&gt;s&lt;/code&gt; を、それが表す式に変えます。</target>
        </trans-unit>
        <trans-unit id="e5a454f3b1345dd58c63efa8e881a860cfb32111" translate="yes" xml:space="preserve">
          <source>Two adjacent separators are considered to surround an empty element in the split range. Use &lt;code&gt;filter!(a =&amp;gt; !a.empty)&lt;/code&gt; on the result to compress empty elements.</source>
          <target state="translated">2つの隣接するセパレーターは、分割範囲の空の要素を囲むと見なされます。 結果に対して &lt;code&gt;filter!(a =&amp;gt; !a.empty)&lt;/code&gt; して、空の要素を圧縮します。</target>
        </trans-unit>
        <trans-unit id="e3ed11541d2964198473ed0a82426d9b49c8d63f" translate="yes" xml:space="preserve">
          <source>Two format specifiers are supported:</source>
          <target state="translated">2つのフォーマット指定子がサポートされています。</target>
        </trans-unit>
        <trans-unit id="f728c436a5d60ae7a74a1fb01d9c670443ddbdc1" translate="yes" xml:space="preserve">
          <source>Two functions have been added for convenience:</source>
          <target state="translated">便利なように2つの機能を追加しました。</target>
        </trans-unit>
        <trans-unit id="241f31fb40e72ec287fecd2a2aa243010af09b63" translate="yes" xml:space="preserve">
          <source>Two local variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are in different contexts, but outer context is indirectly accessible from innter context, so nested template instance &lt;code&gt;sum!(a, b)&lt;/code&gt; will capture only inner context.</source>
          <target state="translated">2つのローカル変数 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; は異なるコンテキストにありますが、外部コンテキストは内部コンテキストから間接的にアクセスできるため、ネストされたテンプレートインスタンス &lt;code&gt;sum!(a, b)&lt;/code&gt; は内部コンテキストのみをキャプチャします。</target>
        </trans-unit>
        <trans-unit id="7344649ec3349339576b149dc016e926290914de" translate="yes" xml:space="preserve">
          <source>Two or more non-infinite forward ranges</source>
          <target state="translated">2つ以上の無限ではないフォワードレンジ</target>
        </trans-unit>
        <trans-unit id="541bef60f707acc034ee30fb6ceb5b604a068f40" translate="yes" xml:space="preserve">
          <source>Two versions of programs are commonly built, a release build and a debug build. The debug build includes extra error checking code, test harnesses, pretty-printing code, etc. The debug statement conditionally compiles in its statement body. It is D's way of what in C is done with &lt;code&gt;#ifdef DEBUG&lt;/code&gt; / &lt;code&gt;#endif&lt;/code&gt; pairs.</source>
          <target state="translated">通常、プログラムの2つのバージョン、リリースビルドとデバッグビルドがビルドされます。 デバッグビルドには、追加のエラーチェックコード、テストハーネス、pretty-printingコードなどが含まれます。デバッグステートメントは、ステートメント本体で条件付きでコンパイルされます。 これは、Cで &lt;code&gt;#ifdef DEBUG&lt;/code&gt; / &lt;code&gt;#endif&lt;/code&gt; のペアを使用して行われるDの方法です 。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="96e4f0ac6a824b3c4a6ad224979d9909d711bd86" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;T&lt;/code&gt; can be one of:</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="074961b98338169a77631354ecc98de531ee94fd" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;itype&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;itype&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abcae8ebd4b965d368a249e36f4d23c1e65f3bc6" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;mt&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;mt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96b17264511c000a8d2d312a068c77228139ea5b" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;stype&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;stype&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b088eef787c263bc72b35d7bf8bffb02250f35af" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;t1&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;t1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7dce03ad43b5e48ad6926eff66da1dc0fbd992e8" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;t2&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;t2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f8a5d9f738e3ec7573a4c3d2bfa71c9dab55055" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c297c055e8021da1038d32c6451a431dc0cd79a4" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;tfrom&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tfrom&lt;/code&gt; と入力します</target>
        </trans-unit>
        <trans-unit id="be5260cde80d2a83f5fa8c9f051bba7fb9b67140" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;torig&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;torig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="265bebeeaa74df34bb2463a7ccd6495a2fd2b3e7" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;tthis&lt;/code&gt;</source>
          <target state="translated">これを入力</target>
        </trans-unit>
        <trans-unit id="d90e13e3fed6c33599ffe3adfef07d6fecfb113f" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;tto&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;tto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac37939248da7ca7fc509e594e3e1162b28e7f03" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;type&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;type&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa75b76e3b4d199eb5bf1cbe330006d90e593043" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;addStorageClass&quot;&gt;addStorageClass&lt;/strong&gt;(StorageClass stc);</source>
          <target state="translated">「 &lt;strong id=&quot;addStorageClass&quot;&gt;addStorageClass&lt;/strong&gt; （StorageClass stc）;」と入力します。</target>
        </trans-unit>
        <trans-unit id="d84d22937a28d260576af02a61a011cb7b2b2cc5" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;compileTypeMixin&quot;&gt;compileTypeMixin&lt;/strong&gt;(TypeMixin tm, Loc loc, Scope* sc);</source>
          <target state="translated">タイプ&lt;strong id=&quot;compileTypeMixin&quot;&gt;compileTypeMixin&lt;/strong&gt; （TypeMixin tm、Loc loc、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="c24f3c59131a7c5a8bc5e783fc5e665af1b32a5e" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;getIndirection&quot;&gt;getIndirection&lt;/strong&gt;(Type t);</source>
          <target state="translated">タイプ&lt;strong id=&quot;getIndirection&quot;&gt;getIndirection&lt;/strong&gt; （タイプt）;</target>
        </trans-unit>
        <trans-unit id="c2b92e082fd5a3ac4a7a6baf60cbd699edacc254" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;getTypeInfoType&quot;&gt;getTypeInfoType&lt;/strong&gt;(Loc loc, Type t, Scope* sc);</source>
          <target state="translated">タイプ&lt;strong id=&quot;getTypeInfoType&quot;&gt;getTypeInfoType&lt;/strong&gt; （Loc loc、Type t、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="7988a8b265a00347de81079da3fe4590a68ee7ca" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;isLazyArray&quot;&gt;isLazyArray&lt;/strong&gt;();</source>
          <target state="translated">タイプ&lt;strong id=&quot;isLazyArray&quot;&gt;isLazyArray&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="f4d3b40b91dc28c4e5940a35bf69a0bbb241540d" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;merge&quot;&gt;merge&lt;/strong&gt;(Type type);</source>
          <target state="translated">タイプ&lt;strong id=&quot;merge&quot;&gt;マージ&lt;/strong&gt; （タイプタイプ）;</target>
        </trans-unit>
        <trans-unit id="35806f9ee47f3dd812d869bb49adecc56fab810b" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;nextOf&quot;&gt;nextOf&lt;/strong&gt;();</source>
          <target state="translated">「 &lt;strong id=&quot;nextOf&quot;&gt;nextOf&lt;/strong&gt; （）;」と入力します。</target>
        </trans-unit>
        <trans-unit id="87e0a9680f0eea47764ac3ffa10dd8d73e88aeee" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;parameterType&quot;&gt;parameterType&lt;/strong&gt;(Parameter p);</source>
          <target state="translated">タイプ&lt;strong id=&quot;parameterType&quot;&gt;parameterType&lt;/strong&gt; （パラメーターp）;</target>
        </trans-unit>
        <trans-unit id="7016ea73ad39a852ab2478cb095dfe5d455408a3" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;stype&quot;&gt;stype&lt;/strong&gt;;</source>
          <target state="translated">タイプ&lt;strong id=&quot;stype&quot;&gt;stype&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="deae4e726d62ba433ff0fa85c1e57f1770faea08" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;tintro&quot;&gt;tintro&lt;/strong&gt;;</source>
          <target state="translated">タイプ&lt;strong id=&quot;tintro&quot;&gt;tintro&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="1eadd5370543a51dcc388d2fe2066cef28052c13" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;toBasetype&quot;&gt;toBasetype&lt;/strong&gt;();</source>
          <target state="translated">タイプ&lt;strong id=&quot;toBasetype&quot;&gt;toBasetype&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="a8533c3e5233456fb672ac9c547f329a114136e2" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;toHeadMutable&quot;&gt;toHeadMutable&lt;/strong&gt;();</source>
          <target state="translated">タイプ&lt;strong id=&quot;toHeadMutable&quot;&gt;toHeadMutable&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="96b0f23e070ede5bec63f5e83cdeac74f8089165" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;typeSemantic&quot;&gt;typeSemantic&lt;/strong&gt;(Type t, Loc loc, Scope* sc);</source>
          <target state="translated">タイプ&lt;strong id=&quot;typeSemantic&quot;&gt;typeSemantic&lt;/strong&gt; （タイプt、Loc loc、Scope * sc）;</target>
        </trans-unit>
        <trans-unit id="5d4688f5531e8a08ef8e0ff730f862cace988d3d" translate="yes" xml:space="preserve">
          <source>Type &lt;strong id=&quot;va_listType&quot;&gt;va_listType&lt;/strong&gt;();</source>
          <target state="translated">タイプ&lt;strong id=&quot;va_listType&quot;&gt;va_listType&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="4f59c6d42771bbb84c27a2121ad3681f0bb72d20" translate="yes" xml:space="preserve">
          <source>Type AST node</source>
          <target state="translated">タイプASTノード</target>
        </trans-unit>
        <trans-unit id="5e1573953474c6c0a25673b1f064154b46a8a93e" translate="yes" xml:space="preserve">
          <source>Type Conversion</source>
          <target state="translated">タイプ変換</target>
        </trans-unit>
        <trans-unit id="c6b7ec08c1e42e9023620d7d964ae0eef2d20644" translate="yes" xml:space="preserve">
          <source>Type Mangling</source>
          <target state="translated">タイプマングリング</target>
        </trans-unit>
        <trans-unit id="264ee4dfa69c98ad557b3342fe8cc1e2b97db3e7" translate="yes" xml:space="preserve">
          <source>Type Qualifiers</source>
          <target state="translated">タイプ修飾子</target>
        </trans-unit>
        <trans-unit id="edc9c0e21717c816a5ec56b1e42647baf2336f1d" translate="yes" xml:space="preserve">
          <source>Type Qualifiers vs. Storage Classes</source>
          <target state="translated">タイプ修飾子とストレージクラス</target>
        </trans-unit>
        <trans-unit id="931cf893dd7787c77998acad492a0ecb55e589ff" translate="yes" xml:space="preserve">
          <source>Type behaviours</source>
          <target state="translated">タイプ別行動</target>
        </trans-unit>
        <trans-unit id="25bae51139cada12199444a9e1b243f934dd5a35" translate="yes" xml:space="preserve">
          <source>Type checking can be done when fmt is known at compile-time:</source>
          <target state="translated">コンパイル時にfmtが既知の場合、型チェックを行うことができます。</target>
        </trans-unit>
        <trans-unit id="e3ba04dc56b4f38a8765f8f4d22b580ca485aa27" translate="yes" xml:space="preserve">
          <source>Type constructor for final (aka head-const) variables.</source>
          <target state="translated">最終的な変数 (別名 head-const)の型コンストラクタ。</target>
        </trans-unit>
        <trans-unit id="5bf7d2b202fca4883a92f0548ad74fcbd4972ddc" translate="yes" xml:space="preserve">
          <source>Type constructors for scoped variables, ref counted types, etc.</source>
          <target state="translated">スコープされた変数や ref カウントされた型などの型コンストラクタ。</target>
        </trans-unit>
        <trans-unit id="8b9b79043e64613a9793b392102a5c4ae4b65fe0" translate="yes" xml:space="preserve">
          <source>Type containing symbol &lt;code&gt;member&lt;/code&gt;.</source>
          <target state="translated">シンボル &lt;code&gt;member&lt;/code&gt; を含む型。</target>
        </trans-unit>
        <trans-unit id="cb30eafbd228209766b8a8bef60c18b615f0e87b" translate="yes" xml:space="preserve">
          <source>Type for the &lt;code&gt;va_list&lt;/code&gt; type for the target.</source>
          <target state="translated">ターゲットの &lt;code&gt;va_list&lt;/code&gt; タイプのタイプ。</target>
        </trans-unit>
        <trans-unit id="ef47c7ac43e7255929d6c306077f07f47b722eec" translate="yes" xml:space="preserve">
          <source>Type of Trie generated by codepointSetTrie function.</source>
          <target state="translated">codepointSetTrie関数で生成されたTrieの型。</target>
        </trans-unit>
        <trans-unit id="4dccd7a2bbd9b94a92f0a8c92cf9c4faa4852cf6" translate="yes" xml:space="preserve">
          <source>Type of a factory object that returns new allocators on a need basis. For an object &lt;code&gt;sweatshop&lt;/code&gt; of type &lt;code&gt;Factory&lt;/code&gt;, &lt;code&gt;sweatshop(n)&lt;/code&gt; should return an allocator able to allocate at least &lt;code&gt;n&lt;/code&gt; bytes (i.e. &lt;code&gt;Factory&lt;/code&gt; must define &lt;code&gt;opCall(size_t)&lt;/code&gt; to return an allocator object). Usually the capacity of allocators created should be much larger than &lt;code&gt;n&lt;/code&gt; such that an allocator can be used for many subsequent allocations. &lt;code&gt;n&lt;/code&gt; is passed only to ensure the minimum necessary for the next allocation. The factory object is allowed to hold state, which will be stored inside &lt;code&gt;AllocatorList&lt;/code&gt; as a direct &lt;code&gt;public&lt;/code&gt; member called &lt;code&gt;factory&lt;/code&gt;.</source>
          <target state="translated">必要に応じて新しいアロケータを返すファクトリオブジェクトのタイプ。 タイプ &lt;code&gt;Factory&lt;/code&gt; のオブジェクト &lt;code&gt;sweatshop&lt;/code&gt; の場合、 &lt;code&gt;sweatshop(n)&lt;/code&gt; は少なくとも &lt;code&gt;n&lt;/code&gt; バイトを割り当てることができるアロケータを返す必要があります（つまり、 &lt;code&gt;Factory&lt;/code&gt; は &lt;code&gt;opCall(size_t)&lt;/code&gt; を定義してアロケータオブジェクトを返す必要があります）。 通常、作成されるアロケータの容量は &lt;code&gt;n&lt;/code&gt; よりも大きくする必要があります。これにより、アロケータを後続の多くの割り当てに使用できます。 &lt;code&gt;n&lt;/code&gt; は、次の割り当てに必要な最小値を確保するためにのみ渡されます。 ファクトリオブジェクトは状態を保持することが許可されており、 &lt;code&gt;factory&lt;/code&gt; と呼ばれる直接の &lt;code&gt;public&lt;/code&gt; メンバーとして &lt;code&gt;AllocatorList&lt;/code&gt; 内に格納されます。</target>
        </trans-unit>
        <trans-unit id="53b3c45deaab965f30fbaf51880e1afc49233e18" translate="yes" xml:space="preserve">
          <source>Type of hook to report to accumulate</source>
          <target state="translated">蓄積するために報告するフックのタイプ</target>
        </trans-unit>
        <trans-unit id="15e383896d707844d0eca91f8b6889d73b97fbb0" translate="yes" xml:space="preserve">
          <source>Type of proxy</source>
          <target state="translated">プロキシの種類</target>
        </trans-unit>
        <trans-unit id="c83110b1d2db2259adf4200ec37888cbc9846639" translate="yes" xml:space="preserve">
          <source>Type of tag</source>
          <target state="translated">タグの種類</target>
        </trans-unit>
        <trans-unit id="d3fa4f954ab06add7bd749b7bdea58934c993aaa" translate="yes" xml:space="preserve">
          <source>Type of the object being created.</source>
          <target state="translated">作成されるオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="a0daf2f1b22dd08dc29f641bae271010f9baf166" translate="yes" xml:space="preserve">
          <source>Type parameter deduction is not influenced by the order of function arguments.</source>
          <target state="translated">型パラメータの推論は、関数の引数の順序に影響されません。</target>
        </trans-unit>
        <trans-unit id="6589b7ca4f64019c13d806f181e6e2f0d2a12efe" translate="yes" xml:space="preserve">
          <source>Type qualifer and storage classes are distinct.</source>
          <target state="translated">型修飾子とストレージクラスは区別されています。</target>
        </trans-unit>
        <trans-unit id="6be815ee4e71cdcd2fdc1b9f5a931c3396cc2ae9" translate="yes" xml:space="preserve">
          <source>Type qualifiers modify a type by applying a &lt;a href=&quot;declaration#TypeCtor&quot;&gt;&lt;i&gt;TypeCtor&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">型修飾子は&lt;a href=&quot;declaration#TypeCtor&quot;&gt;&lt;i&gt;TypeCtorを&lt;/i&gt;&lt;/a&gt;適用して型を変更します。</target>
        </trans-unit>
        <trans-unit id="a70515f861481e8dc4615de28615ff7366fcc202" translate="yes" xml:space="preserve">
          <source>Type representing the DOS file date/time format.</source>
          <target state="translated">DOSファイルの日付時間形式を表すタイプ。</target>
        </trans-unit>
        <trans-unit id="8707ce3b635eb9df5d025d3f0450b4a8fd3eb48d" translate="yes" xml:space="preserve">
          <source>Type sequences can also be deduced from the type of a delegate or function parameter list passed as a function argument:</source>
          <target state="translated">型シーケンスは、関数の引数として渡されたデリゲートや関数パラメータリストの型からも推論できます。</target>
        </trans-unit>
        <trans-unit id="733ee898e1598d12bae36c91271af1529e4fcaa2" translate="yes" xml:space="preserve">
          <source>Type sequences can be deduced from the trailing parameters of an implicitly instantiated function template:</source>
          <target state="translated">型シーケンスは,暗黙的にインスタンス化された関数テンプレートの末尾のパラメータから推論することができます.</target>
        </trans-unit>
        <trans-unit id="a8e4656cb8d277115469c8e6ecd03e51fd9b8df7" translate="yes" xml:space="preserve">
          <source>Type to check</source>
          <target state="translated">チェックするタイプ</target>
        </trans-unit>
        <trans-unit id="f741a0744a1572f9886a07067ea02acc1834b951" translate="yes" xml:space="preserve">
          <source>Type to check against existing types</source>
          <target state="translated">既存のタイプと照合するタイプ</target>
        </trans-unit>
        <trans-unit id="de396937e60ad29356ea188a9c5d9ea651e367c0" translate="yes" xml:space="preserve">
          <source>Type tuple with 0, 1 or 2 types in it.</source>
          <target state="translated">0,1,2型を含むタプルをタイプします。</target>
        </trans-unit>
        <trans-unit id="011c9eabb9ffe20e7e22482cfbe2286b6120bfa9" translate="yes" xml:space="preserve">
          <source>Type* &lt;code&gt;pt&lt;/code&gt;</source>
          <target state="translated">タイプ* &lt;code&gt;pt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58d77e6f74277f79b951803afbe1ddf1b35734df" translate="yes" xml:space="preserve">
          <source>TypeCtor</source>
          <target state="translated">TypeCtor</target>
        </trans-unit>
        <trans-unit id="ac9e1cc0b26d4033ad5c959b5f820850ea93475b" translate="yes" xml:space="preserve">
          <source>TypeCtors</source>
          <target state="translated">TypeCtors</target>
        </trans-unit>
        <trans-unit id="3928ee67b003a61e2825045ee7c6856586fe197b" translate="yes" xml:space="preserve">
          <source>TypeDotIdExp</source>
          <target state="translated">TypeDotIdExp</target>
        </trans-unit>
        <trans-unit id="0019be4cb34cff2695b5aff262952fd301c46685" translate="yes" xml:space="preserve">
          <source>TypeFunction &lt;code&gt;tf&lt;/code&gt;</source>
          <target state="translated">TypeFunction &lt;code&gt;tf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db700355f8924fab7eada69ef0fe0e550c49d3a6" translate="yes" xml:space="preserve">
          <source>TypeFunction which holds parameter.</source>
          <target state="translated">パラメータを保持するTypeFunction。</target>
        </trans-unit>
        <trans-unit id="5ca2910cf68fdd66a12e3e8220178f8b4cc5a0db" translate="yes" xml:space="preserve">
          <source>TypeIdentifier &lt;strong id=&quot;getException&quot;&gt;getException&lt;/strong&gt;();</source>
          <target state="translated">TypeIdentifier &lt;strong id=&quot;getException&quot;&gt;getException&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="42f5b285fc85964089e7dc297caf59c7103f1888" translate="yes" xml:space="preserve">
          <source>TypeIdentifier &lt;strong id=&quot;getThrowable&quot;&gt;getThrowable&lt;/strong&gt;();</source>
          <target state="translated">TypeIdentifier &lt;strong id=&quot;getThrowable&quot;&gt;getThrowable&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="f9d611bfddd3405f459de10a0cf6d218aa6287a1" translate="yes" xml:space="preserve">
          <source>TypeIdentifier corresponding to &lt;code&gt;object.Exception&lt;/code&gt;</source>
          <target state="translated">object.Exceptionに対応する &lt;code&gt;object.Exception&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ea8bcbfb0a4687ca07a5f9448fa2692699ee114" translate="yes" xml:space="preserve">
          <source>TypeInfo &lt;code&gt;info&lt;/code&gt;</source>
          <target state="translated">TypeInfo &lt;code&gt;info&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1b8e2e2628fbdb6b877b9991519908026efcaf7" translate="yes" xml:space="preserve">
          <source>TypeInfo &lt;code&gt;keyti&lt;/code&gt;</source>
          <target state="translated">TypeInfo &lt;code&gt;keyti&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5dec97b284949d704d7ee4541006a5521ba97794" translate="yes" xml:space="preserve">
          <source>TypeInfo &lt;code&gt;ti&lt;/code&gt;</source>
          <target state="translated">TypeInfo &lt;code&gt;ti&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67c22ded6663e84767a53e56d998760516256038" translate="yes" xml:space="preserve">
          <source>TypeInfo &lt;strong id=&quot;source&quot;&gt;source&lt;/strong&gt;;</source>
          <target state="translated">TypeInfo &lt;strong id=&quot;source&quot;&gt;ソース&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="c1278db525adc97eab488999431f521bd14cee3e" translate="yes" xml:space="preserve">
          <source>TypeInfo &lt;strong id=&quot;target&quot;&gt;target&lt;/strong&gt;;</source>
          <target state="translated">TypeInfo &lt;strong id=&quot;target&quot;&gt;ターゲット&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="79ae15533fd627996ea193ee400334ad48f0ffa1" translate="yes" xml:space="preserve">
          <source>TypeInfo &lt;strong id=&quot;ti&quot;&gt;ti&lt;/strong&gt;;</source>
          <target state="translated">TypeInfo &lt;strong id=&quot;ti&quot;&gt;ti&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="472c2c18b4ef0579bcce9fff2441baed8006d608" translate="yes" xml:space="preserve">
          <source>TypeInfo and ModuleInfo</source>
          <target state="translated">TypeInfoとModuleInfo</target>
        </trans-unit>
        <trans-unit id="f93be7833a3f5791fae09a639aee73a46e387e3c" translate="yes" xml:space="preserve">
          <source>TypeInfo for the associative array</source>
          <target state="translated">連想配列の TypeInfo</target>
        </trans-unit>
        <trans-unit id="7c7bfccff9046ef36445ee4c709ff7d995d70ab8" translate="yes" xml:space="preserve">
          <source>TypeInfo for the key</source>
          <target state="translated">キーの TypeInfo</target>
        </trans-unit>
        <trans-unit id="23d395400e74ed54a9281933209acee2f90cbe4e" translate="yes" xml:space="preserve">
          <source>TypeInfo for this member</source>
          <target state="translated">このメンバの TypeInfo</target>
        </trans-unit>
        <trans-unit id="6cae780f43ad1913cc11d46eaafdb1d914a0fecd" translate="yes" xml:space="preserve">
          <source>TypeInfo operations</source>
          <target state="translated">TypeInfo 演算子</target>
        </trans-unit>
        <trans-unit id="0c903e4430a6af28fc4a701dcf89fccf74b52c8e" translate="yes" xml:space="preserve">
          <source>TypeInfo support code.</source>
          <target state="translated">TypeInfoのサポートコード。</target>
        </trans-unit>
        <trans-unit id="7bac08fb0ecc35c0c1645fa9688ec0c7cbb7320b" translate="yes" xml:space="preserve">
          <source>TypeInfo to describe the full memory block. The GC might use this information to improve scanning for pointers or to call finalizers.</source>
          <target state="translated">完全なメモリブロックを記述するための TypeInfo。GC 2011 は、ポインタのスキャンを改善したり、ファイナライザを呼び出すためにこの情報を使用することがあります。</target>
        </trans-unit>
        <trans-unit id="e6a910dc0d5bf54bb8bb28b4e2782c2fac837ad2" translate="yes" xml:space="preserve">
          <source>TypeInfo to describe the memory. The GC might use this information to improve scanning for pointers or to call finalizers</source>
          <target state="translated">メモリを記述するための TypeInfo。GC 2011 は、ポインタのスキャンを改善したり、ファイナライザを呼び出すためにこの情報を使用することがあります。</target>
        </trans-unit>
        <trans-unit id="8c13cb9891545ae558cb22a55266091cadf68bb8" translate="yes" xml:space="preserve">
          <source>TypeInfo to describe the memory. The GC might use this information to improve scanning for pointers or to call finalizers.</source>
          <target state="translated">メモリを記述するための TypeInfo。GC は、ポインタのスキャンを改善したり、ファイナライザを呼び出すためにこの情報を使用することがあります。</target>
        </trans-unit>
        <trans-unit id="aff0fe6a2bf6b7e4ef9a8e4a029e01a4aeb8762f" translate="yes" xml:space="preserve">
          <source>TypeInfo_AssociativeArray &lt;code&gt;ti&lt;/code&gt;</source>
          <target state="translated">TypeInfo_AssociativeArray &lt;code&gt;ti&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e25e4540ada3cc921bdd8d8fd0d8e1e7b7781066" translate="yes" xml:space="preserve">
          <source>TypeInfo_Class &lt;strong id=&quot;base&quot;&gt;base&lt;/strong&gt;;</source>
          <target state="translated">TypeInfo_Class &lt;strong id=&quot;base&quot;&gt;ベース&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9239ac5fb46ce2e24e9298817e7012c20bc78405" translate="yes" xml:space="preserve">
          <source>TypeInfo_Class &lt;strong id=&quot;classinfo&quot;&gt;classinfo&lt;/strong&gt;;</source>
          <target state="translated">TypeInfo_Class &lt;strong id=&quot;classinfo&quot;&gt;classinfo&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2bd0ed90864a622e90192ec41cb245073bc3a096" translate="yes" xml:space="preserve">
          <source>TypeMixin &lt;code&gt;tm&lt;/code&gt;</source>
          <target state="translated">TypeMixin &lt;code&gt;tm&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="773e0bc0cc8840334c10f79e302767527cb23cf4" translate="yes" xml:space="preserve">
          <source>TypeSeq</source>
          <target state="translated">TypeSeq</target>
        </trans-unit>
        <trans-unit id="2485569c283c3e15dcdf66b2941cf2585cfbb0fb" translate="yes" xml:space="preserve">
          <source>TypeSpecialization</source>
          <target state="translated">TypeSpecialization</target>
        </trans-unit>
        <trans-unit id="d5bc30e762df0213573cbaddbf2be54ecff91c7a" translate="yes" xml:space="preserve">
          <source>TypeTuple &lt;strong id=&quot;toArgTypes&quot;&gt;toArgTypes&lt;/strong&gt;(Type t);</source>
          <target state="translated">TypeTuple &lt;strong id=&quot;toArgTypes&quot;&gt;toArgTypes&lt;/strong&gt; （タイプt）;</target>
        </trans-unit>
        <trans-unit id="0a55489e3ecfb05595ff8f54b93c8573e3ce85a8" translate="yes" xml:space="preserve">
          <source>TypeTuple &lt;strong id=&quot;toArgTypes_sysv_x64&quot;&gt;toArgTypes_sysv_x64&lt;/strong&gt;(Type t);</source>
          <target state="translated">TypeTuple &lt;strong id=&quot;toArgTypes_sysv_x64&quot;&gt;toArgTypes_sysv_x64&lt;/strong&gt; （Type t）;</target>
        </trans-unit>
        <trans-unit id="e642a3765f89fbde01f0a2276d7abdf9b70ab3cf" translate="yes" xml:space="preserve">
          <source>Typed alias parameters</source>
          <target state="translated">タイプされたエイリアスパラメータ</target>
        </trans-unit>
        <trans-unit id="b30db53a60d0c35c43aeee9bc4f602733c935e33" translate="yes" xml:space="preserve">
          <source>Typedef creates a new type</source>
          <target state="translated">Typedefは新しい型を作成します。</target>
        </trans-unit>
        <trans-unit id="6201a322fae660c45cd9849605bc8c759be0c5b0" translate="yes" xml:space="preserve">
          <source>Typeid Expressions</source>
          <target state="translated">タイプIDの表現</target>
        </trans-unit>
        <trans-unit id="bf3662203dcf0ffc0db3cb9a25590ff39043990d" translate="yes" xml:space="preserve">
          <source>Typeof</source>
          <target state="translated">Typeof</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="98208c2d7d35bb6c2bec43c9c9c8b3b514bcabb3" translate="yes" xml:space="preserve">
          <source>Types &lt;code&gt;values&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;values&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad7fbb5ff653b4fb1310a106afd7d4d247c60fc4" translate="yes" xml:space="preserve">
          <source>Types &lt;strong id=&quot;expand&quot;&gt;expand&lt;/strong&gt;;</source>
          <target state="translated">タイプは&lt;strong id=&quot;expand&quot;&gt;展開し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d33ff32e1c661c88ebc3ad3634169408689bdb2c" translate="yes" xml:space="preserve">
          <source>Types affected</source>
          <target state="translated">影響を受けるタイプ</target>
        </trans-unit>
        <trans-unit id="8b8ed26fa191ff295582e384bddd39585a3f8db2" translate="yes" xml:space="preserve">
          <source>Types are mangled using a simple linear scheme:</source>
          <target state="translated">型は単純な線形スキームを用いて揶揄されています。</target>
        </trans-unit>
        <trans-unit id="056fa98818fde905c87d68b5a8122d7a217fa627" translate="yes" xml:space="preserve">
          <source>Types for C Debuggers</source>
          <target state="translated">C デバッガの種類</target>
        </trans-unit>
        <trans-unit id="a317ddf00723db3897d96406a7af0777748b751e" translate="yes" xml:space="preserve">
          <source>Typesafe PIMPL idiom so we can keep CompiledCtfeFunction private.</source>
          <target state="translated">CompiledCtfeFunctionをプライベートにしておくためのタイプセーフなPIMPLイディオム。</target>
        </trans-unit>
        <trans-unit id="8c1a6486831bba104b5c93d116efda5decae0955" translate="yes" xml:space="preserve">
          <source>Typesafe Variadic Functions</source>
          <target state="translated">タイプセーフ可変関数</target>
        </trans-unit>
        <trans-unit id="9c18f7085ca663e2eeeb1ab419e11c946cc281e9" translate="yes" xml:space="preserve">
          <source>Typesafe variadic functions</source>
          <target state="translated">タイプセーフなバリアディック関数</target>
        </trans-unit>
        <trans-unit id="c158adeb6705f4b21c628caabe72dc1f58ae0f9b" translate="yes" xml:space="preserve">
          <source>Typesafe variadic functions are used when the variable argument portion of the arguments are used to construct an array or class object.</source>
          <target state="translated">型安全なバリアディック関数は、変数引数の部分が配列やクラスオブジェクトを構築するために使用される場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="e6941e6087f5c747e81f3548ced3b053ce9e7b28" translate="yes" xml:space="preserve">
          <source>Typically updating a value in an associative array is simply done with an assign statement.</source>
          <target state="translated">通常、連想配列の値の更新は単純に代入文で行います。</target>
        </trans-unit>
        <trans-unit id="db183258f807139f91ca3be4ce6506a44b76a64e" translate="yes" xml:space="preserve">
          <source>Typically used to transfer a &lt;code&gt;Unique&lt;/code&gt; rvalue of derived type to a &lt;code&gt;Unique&lt;/code&gt; of base type.</source>
          <target state="translated">通常、派生型の &lt;code&gt;Unique&lt;/code&gt; 右辺値を基本型の一意の右辺値に転送するために使用されます。</target>
        </trans-unit>
        <trans-unit id="733f934ae56c1f7d0fdf7d7b634f135f6d1638cd" translate="yes" xml:space="preserve">
          <source>Typically, &lt;code&gt;assumeUnique&lt;/code&gt; is used to return arrays from functions that have allocated and built them.</source>
          <target state="translated">通常、 &lt;code&gt;assumeUnique&lt;/code&gt; は、配列を割り当てて構築した関数から配列を返すために使用されます。</target>
        </trans-unit>
        <trans-unit id="22c79bf41fa01646983d0e1c75126cd457c1bd02" translate="yes" xml:space="preserve">
          <source>Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST</source>
          <target state="translated">一般的には、DST</target>
        </trans-unit>
        <trans-unit id="b795aa6d3d9c14054ccb6a6aea11b3269a8595b3" translate="yes" xml:space="preserve">
          <source>Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is</source>
          <target state="translated">一般的には、DSTの時のタイムゾーンの略語(一般的には3文字または4文字)を</target>
        </trans-unit>
        <trans-unit id="b7f34bb41388ea7e3fb767468d24019362880e11" translate="yes" xml:space="preserve">
          <source>Typically, the first element of &lt;code&gt;argv&lt;/code&gt; is the command being executed, i.e. &lt;code&gt;argv[0] == pathname&lt;/code&gt;. The 'p' versions of &lt;code&gt;exec&lt;/code&gt; search the PATH environment variable for &lt;code&gt; pathname&lt;/code&gt;. The 'e' versions additionally take the new process' environment variables as an array of strings of the form key=value.</source>
          <target state="translated">通常、 &lt;code&gt;argv&lt;/code&gt; の最初の要素は実行されるコマンド、つまり &lt;code&gt;argv[0] == pathname&lt;/code&gt; です。 &lt;code&gt;exec&lt;/code&gt; の「p」バージョンは、PATH環境変数で &lt;code&gt; pathname&lt;/code&gt; を検索します。 'e'バージョンは、key = valueの形式の文字列の配列として、新しいプロセスの環境変数を追加で受け取ります。</target>
        </trans-unit>
        <trans-unit id="de16dec91e0419147faeea7cdd994e0d6a8f8d25" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;another&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;another&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3fb667fdcab211117158dd3ce9d3203d725af2f1" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;argument&lt;/code&gt;</source>
          <target state="translated">U &lt;code&gt;argument&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="697f0c45a847f453216f051a5a6ee69d25e04ed2" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;end&lt;/code&gt;</source>
          <target state="translated">U &lt;code&gt;end&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63a11922fe248c81fbee9848ffa1f8b4dfbc12bd" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;item&lt;/code&gt;</source>
          <target state="translated">U &lt;code&gt;item&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39dcf3fde6cc76619903303aa59a8ee79c73ff4f" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">U &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd1523b1327c39f05597e30713c7dff5a3ff10c0" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;stuff&lt;/code&gt;</source>
          <target state="translated">U &lt;code&gt;stuff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14d2ebb04ddb126790e90698955610cc1aa2858f" translate="yes" xml:space="preserve">
          <source>U &lt;code&gt;update&lt;/code&gt;</source>
          <target state="translated">U &lt;code&gt;update&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5fa4864c90d6d362e77a889c4b5d08bf8651a60b" translate="yes" xml:space="preserve">
          <source>U &lt;strong id=&quot;opCast&quot;&gt;opCast&lt;/strong&gt;(U, this _)()</source>
          <target state="translated">U &lt;strong id=&quot;opCast&quot;&gt;opCast&lt;/strong&gt; （U、これ_）（）</target>
        </trans-unit>
        <trans-unit id="dc24734c978d9bb3d649f59ea57f6fbfebb04938" translate="yes" xml:space="preserve">
          <source>UDAs can be extracted into an expression tuple using &lt;code&gt;__traits&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;__traits&lt;/code&gt; を使用して、UDAを式タプルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="8c9a445b357a8879b87fe2a26129a13cff925174" translate="yes" xml:space="preserve">
          <source>UDAs cannot be attached to template parameters.</source>
          <target state="translated">テンプレートパラメータにUDAをアタッチすることはできません。</target>
        </trans-unit>
        <trans-unit id="4196b39d1eebc6a19e223c4aac2d97a9aacf8120" translate="yes" xml:space="preserve">
          <source>UIntType</source>
          <target state="translated">UIntType</target>
        </trans-unit>
        <trans-unit id="c05d8b4022a5b33bdfe1da8ac44209fadee29acb" translate="yes" xml:space="preserve">
          <source>UIntType &lt;code&gt;x0&lt;/code&gt;</source>
          <target state="translated">UIntType &lt;code&gt;x0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf1134895e9b29127e491e75b96f85825dd4e274" translate="yes" xml:space="preserve">
          <source>UNIX 98 requires that errno be set to ENOMEM upon failure. &lt;a href=&quot;https://linux.die.net/man/3/malloc&quot;&gt;https://linux.die.net/man/3/malloc&lt;/a&gt; However, this is irrelevant for DMD's purposes, and best practice protocol for using errno is to treat it as an &lt;code&gt;out&lt;/code&gt; parameter, and not something with state that can be relied on across function calls. So, we'll ignore it.</source>
          <target state="translated">UNIX 98では、障害発生時にerrnoをENOMEMに設定する必要があります。 &lt;a href=&quot;https://linux.die.net/man/3/malloc&quot;&gt;https://linux.die.net/man/3/malloc&lt;/a&gt;ただし、これはDMDの目的には無関係であり、errnoを使用するためのベストプラクティスプロトコルは、それを &lt;code&gt;out&lt;/code&gt; パラメーターとして扱うことであり、信頼できる状態のものではありません。関数呼び出し全体。 したがって、無視します。</target>
        </trans-unit>
        <trans-unit id="beccb674b27af0ddeedf12b4de67513a39156f03" translate="yes" xml:space="preserve">
          <source>UNIX 98 requires that errno be set to ENOMEM upon failure. Purity is achieved by saving and restoring the value of &lt;code&gt;errno&lt;/code&gt;, thus behaving as if it were never changed.</source>
          <target state="translated">UNIX 98では、障害発生時にerrnoをENOMEMに設定する必要があります。 純粋さは、 &lt;code&gt;errno&lt;/code&gt; の値を保存および復元することによって達成され、したがって、変更されていないかのように動作します。</target>
        </trans-unit>
        <trans-unit id="fd4c42e93b798f843e95525ca51904fccdadcf92" translate="yes" xml:space="preserve">
          <source>UNIX(7)</source>
          <target state="translated">UNIX(7)</target>
        </trans-unit>
        <trans-unit id="f9fc2ebde19b1bdca47e809441ff08ef908d85ea" translate="yes" xml:space="preserve">
          <source>UTF Byte Order Marks</source>
          <target state="translated">UTFバイトオーダーマーク</target>
        </trans-unit>
        <trans-unit id="9f8129fc3aa0089cfcf72b031ad3d481df53b04d" translate="yes" xml:space="preserve">
          <source>UTF character support is restricted to &lt;code&gt;'\u0000' &amp;lt;= character &amp;lt;= '\U0010FFFF'&lt;/code&gt;.</source>
          <target state="translated">UTF文字のサポートは &lt;code&gt;'\u0000' &amp;lt;= character &amp;lt;= '\U0010FFFF'&lt;/code&gt; 制限されています。</target>
        </trans-unit>
        <trans-unit id="f5411953a4d42cf12809bd4464e6d4db7776d601" translate="yes" xml:space="preserve">
          <source>UTF sequences that cannot be converted to the specified encoding are replaced by U+FFFD per &quot;5.22 Best Practice for U+FFFD Substitution&quot; of the Unicode Standard 6.2. Hence byUTF is not symmetric. This algorithm is lazy, and does not allocate memory. &lt;code&gt;@nogc&lt;/code&gt;, &lt;code&gt;pure&lt;/code&gt;-ity, &lt;code&gt;nothrow&lt;/code&gt;, and &lt;code&gt;@safe&lt;/code&gt;-ty are inferred from the &lt;code&gt;r&lt;/code&gt; parameter.</source>
          <target state="translated">指定されたエンコードに変換できないUTFシーケンスは、Unicode標準6.2の「5.22 U + FFFD置換のベストプラクティス」に従ってU + FFFDに置き換えられます。 したがって、byUTFは対称的ではありません。 このアルゴリズムは遅延しており、メモリを割り当てません。 &lt;code&gt;@nogc&lt;/code&gt; 、 &lt;code&gt;pure&lt;/code&gt; -ity、 &lt;code&gt;nothrow&lt;/code&gt; 、および &lt;code&gt;@safe&lt;/code&gt; -tyは、 &lt;code&gt;r&lt;/code&gt; パラメーターから推測されます。</target>
        </trans-unit>
        <trans-unit id="815b5d137b049f840a84ea779942f380fee2d1b2" translate="yes" xml:space="preserve">
          <source>UTF-16 sequence</source>
          <target state="translated">エッチエフディーエルエルシーケンサ</target>
        </trans-unit>
        <trans-unit id="de4a45e716017695cfee4bc84f1a4e0c8e1e9b9a" translate="yes" xml:space="preserve">
          <source>UTF-16BE</source>
          <target state="translated">UTF-16BE</target>
        </trans-unit>
        <trans-unit id="6af12beb19d40aa853839c482e864ce703f4d2a9" translate="yes" xml:space="preserve">
          <source>UTF-16LE</source>
          <target state="translated">UTF-16LE</target>
        </trans-unit>
        <trans-unit id="9e4d8d4f017185a065b570c771eb332a1c842bec" translate="yes" xml:space="preserve">
          <source>UTF-32BE</source>
          <target state="translated">UTF-32BE</target>
        </trans-unit>
        <trans-unit id="35cabe85c31dfe3f6b86974de33fef51a0f7276a" translate="yes" xml:space="preserve">
          <source>UTF-32LE</source>
          <target state="translated">UTF-32LE</target>
        </trans-unit>
        <trans-unit id="663b90c899fa25a111067be0c22ffc64dcf581c2" translate="yes" xml:space="preserve">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>
        </trans-unit>
        <trans-unit id="f9496a431551e339492736948b4e238922bacdef" translate="yes" xml:space="preserve">
          <source>UTF-8 sequence</source>
          <target state="translated">エッチエフエイトシーケンス</target>
        </trans-unit>
        <trans-unit id="877994f4b4067d2a1f1f0f6bd6384f2638fcb6f8" translate="yes" xml:space="preserve">
          <source>UTF-8 string to convert.</source>
          <target state="translated">変換する文字列はUTF-8です。</target>
        </trans-unit>
        <trans-unit id="4ec698a623934218d006f758f60cc65200b7e5d5" translate="yes" xml:space="preserve">
          <source>UUID &lt;strong id=&quot;parseUUID&quot;&gt;parseUUID&lt;/strong&gt;(Range)(ref Range uuidRange)</source>
          <target state="translated">UUID &lt;strong id=&quot;parseUUID&quot;&gt;parseUUID&lt;/strong&gt; （範囲）（参照範囲uuidRange）</target>
        </trans-unit>
        <trans-unit id="67faabd33b533aa2705b030a23deec418ddc4531" translate="yes" xml:space="preserve">
          <source>UUID &lt;strong id=&quot;parseUUID&quot;&gt;parseUUID&lt;/strong&gt;(T)(T uuidString)</source>
          <target state="translated">UUID &lt;strong id=&quot;parseUUID&quot;&gt;parseUUID&lt;/strong&gt; （T）（T uuidString）</target>
        </trans-unit>
        <trans-unit id="cc9e30340d1753d3d85fd300f0e9b269c9de763e" translate="yes" xml:space="preserve">
          <source>UUID &lt;strong id=&quot;randomUUID&quot;&gt;randomUUID&lt;/strong&gt;(RNG)(ref RNG randomGen)</source>
          <target state="translated">UUID &lt;strong id=&quot;randomUUID&quot;&gt;randomUUID&lt;/strong&gt; （RNG）（ref RNG randomGen）</target>
        </trans-unit>
        <trans-unit id="a772ba2e5a42ae80f2c9272ebcf1178fcfb9d897" translate="yes" xml:space="preserve">
          <source>UUID namespaces</source>
          <target state="translated">ユーユーアイディー名前空間</target>
        </trans-unit>
        <trans-unit id="5138cdf5aa51c8e0f95889706fc9ee1e7f17902c" translate="yes" xml:space="preserve">
          <source>UUID uses a 16-ubyte representation for the UUID data. RFC 4122 defines a UUID as a special structure in big-endian format. These 16-ubytes always equal the big-endian structure defined in RFC 4122.</source>
          <target state="translated">UUIDは、UUIDデータに16バイトの表現を使用します。RFC 4122では、UUIDをビッグエンディアン形式の特別な構造として定義しています。これらの16バイトは常にRFC 4122で定義されたビッグエンディアン構造と等しい。</target>
        </trans-unit>
        <trans-unit id="97f3c3a3c12b841a2a4769e7f1a5d3a8268ab30f" translate="yes" xml:space="preserve">
          <source>UUIDs have many applications. Some examples follow: Databases may use UUIDs to identify rows or records in order to ensure that they are unique across different databases, or for publication/subscription services. Network messages may be identified with a UUID to ensure that different parts of a message are put back together again. Distributed computing may use UUIDs to identify a remote procedure call. Transactions and classes involved in serialization may be identified by UUIDs. Microsoft's component object model (COM) uses UUIDs to distinguish different software component interfaces. UUIDs are inserted into documents from Microsoft Office programs. UUIDs identify audio or video streams in the Advanced Systems Format (ASF). UUIDs are also a basis for OIDs (object identifiers), and URNs (uniform resource name).</source>
          <target state="translated">UUIDには多くのアプリケーションがあります。以下にいくつかの例を示します。データベースは、異なるデータベース間で一意であることを保証するために、あるいは出版物の購読サービスのために、行やレコードを識別するためにUUIDを使用することがあります。ネットワークメッセージは、メッセージの異なる部分が再び元に戻されることを確実にするために、UUIDで識別されることがあります。分散コンピューティングは、リモートプロシージャコールを識別するためにUUIDを使用してもよい。シリアライゼーションに関与するトランザクションやクラスは、UUIDによって識別されることがあります。マイクロソフトのコンポーネント・オブジェクト・モデル(COM)は、異なるソフトウェア・コンポーネント・インターフェースを区別するためにUUIDを使用しています。UUIDは、Microsoft Officeプログラムのドキュメントに挿入されます。UUIDは、ASF(Advanced Systems Format)のオーディオまたはビデオストリームを識別します。UUID は、OID (オブジェクト識別子)や URN (統一リソース名)の基礎にもなります。</target>
        </trans-unit>
        <trans-unit id="7cfb32627383e93254e644d1ee41cde2752bcfaa" translate="yes" xml:space="preserve">
          <source>U[] &lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">U [] &lt;code&gt;b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5a8724faaa7b7c394cdf13e24050e05ae9df5e7" translate="yes" xml:space="preserve">
          <source>U[n] &lt;code&gt;values&lt;/code&gt;</source>
          <target state="translated">U [n] &lt;code&gt;values&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6328bc9f36f37764a79ddabe4b86ab6e97f09add" translate="yes" xml:space="preserve">
          <source>Ugaritic</source>
          <target state="translated">Ugaritic</target>
        </trans-unit>
        <trans-unit id="b338855e51e0be5b8018fcc6c3c8f1fb58ef1ed1" translate="yes" xml:space="preserve">
          <source>UnaExp &lt;code&gt;ue&lt;/code&gt;</source>
          <target state="translated">UnaExp &lt;code&gt;ue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7362d38845d769ab9292607291056855e2183b1" translate="yes" xml:space="preserve">
          <source>Unable to open the database file</source>
          <target state="translated">データベースファイルを開くことができません</target>
        </trans-unit>
        <trans-unit id="33bd9ce85f04d2d2b0510e3bbb94561d4ef14386" translate="yes" xml:space="preserve">
          <source>Unary Expressions</source>
          <target state="translated">単項式</target>
        </trans-unit>
        <trans-unit id="591cb6d4ab93ebc2d2043b2cb411e0fb42e0f3f7" translate="yes" xml:space="preserve">
          <source>Unary Operator Overloading</source>
          <target state="translated">単項演算子のオーバーロード</target>
        </trans-unit>
        <trans-unit id="f513f3dda804c19713470f3838e16096aa4d57eb" translate="yes" xml:space="preserve">
          <source>Unary SIMD instructions.</source>
          <target state="translated">単項SIMD命令。</target>
        </trans-unit>
        <trans-unit id="d4b656c31bdca61d3708bf6436103a5e4c87af7f" translate="yes" xml:space="preserve">
          <source>UnaryExpression</source>
          <target state="translated">UnaryExpression</target>
        </trans-unit>
        <trans-unit id="e57016edceec7e7b4449fe027bb35d1ba319eb9f" translate="yes" xml:space="preserve">
          <source>Unassigned</source>
          <target state="translated">Unassigned</target>
        </trans-unit>
        <trans-unit id="eb5d4c5516fc1c059de7a6392f9c37511d73768b" translate="yes" xml:space="preserve">
          <source>Unavailable Features</source>
          <target state="translated">利用できない機能</target>
        </trans-unit>
        <trans-unit id="68af9ad2189921beb26a800d338b2a6b4e676cf3" translate="yes" xml:space="preserve">
          <source>Unclosed comment</source>
          <target state="translated">非公開コメント</target>
        </trans-unit>
        <trans-unit id="f6243a69cb62441fa6d87afa14c8d5e89b20730a" translate="yes" xml:space="preserve">
          <source>Unclosed quoted string</source>
          <target state="translated">閉じられた引用符で囲まれた文字列</target>
        </trans-unit>
        <trans-unit id="bf324c3d5f2f1b78051107d12302e948c629d468" translate="yes" xml:space="preserve">
          <source>Underlying ranges</source>
          <target state="translated">基礎となる範囲</target>
        </trans-unit>
        <trans-unit id="83480b867507019f42179ab37987dcdb4c62cd97" translate="yes" xml:space="preserve">
          <source>Unescapes URL encoding in strings (converts all %XX codes to their 8bit versions). This function returns a new allocated string or NULL if an error occurred. Conversion Note: On non-ASCII platforms the ASCII %XX codes are converted into the host encoding.</source>
          <target state="translated">文字列内の URL エンコーディングをエスケープ解除します (すべての %XX コードを 8 ビット版に変換します)。この関数は、新しい割り当て文字列を返すか、エラーが発生した場合は NULL を返します。変換ノート:非 ASCII プラットフォームでは、ASCII %XX コードはホスト・エンコーディングに変換されます。</target>
        </trans-unit>
        <trans-unit id="1043e7d94fb950dfc41b004ced60f3e79b56ed17" translate="yes" xml:space="preserve">
          <source>Unfortunately, there is no way to do it on Windows using the TZ Database name, so this function only exists on Posix systems.</source>
          <target state="translated">残念ながらWindows上でTZデータベース名を使って行う方法はないので、この機能はPosixシステム上にしか存在しません。</target>
        </trans-unit>
        <trans-unit id="c7e823b88e4feebda781e31901fb8ed6b6646bbd" translate="yes" xml:space="preserve">
          <source>Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252</source>
          <target state="translated">Unicode 5.0、ASCII、ISO-8859-1、ISO-8859-2、WINDOWS-1250、WINDOWS-1251、WINDOWS-1252</target>
        </trans-unit>
        <trans-unit id="b81efb17a923e74f971664cf6551b29e3911eb7f" translate="yes" xml:space="preserve">
          <source>Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252</source>
          <target state="translated">Unicode 5.0、ASCII、ISO-8859-1、WINDOWS-1252</target>
        </trans-unit>
        <trans-unit id="9efb04e249cf52e825a2ae577ec002967cfd9907" translate="yes" xml:space="preserve">
          <source>Unicode character U+</source>
          <target state="translated">ユニコード文字U+</target>
        </trans-unit>
        <trans-unit id="86d5346f841497e1a9a9e132b4794f45dbdd869c" translate="yes" xml:space="preserve">
          <source>Unicode character decomposition type.</source>
          <target state="translated">Unicode 文字分解型。</target>
        </trans-unit>
        <trans-unit id="85292ebf0b3cae013871cb556874cf9db932ca12" translate="yes" xml:space="preserve">
          <source>Unicode integrity is not preserved:</source>
          <target state="translated">Unicode の整合性は保存されません。</target>
        </trans-unit>
        <trans-unit id="3ec807b074593d04a3ef86db0a4d24fa457b2e5f" translate="yes" xml:space="preserve">
          <source>Unicode properties</source>
          <target state="translated">ユニコードプロパティ</target>
        </trans-unit>
        <trans-unit id="5be5c9fefc535768d2b96dd8780acd22043ffcf7" translate="yes" xml:space="preserve">
          <source>Unicode properties such as Scripts, Blocks and common binary properties e.g Alphabetic, White_Space, Hex_Digit etc.</source>
          <target state="translated">Scripts ・ Blocks などの Unicode プロパティや、Alphabetic ・ White_Space ・ Hex_Digit などの一般的なバイナリプロパティ。</target>
        </trans-unit>
        <trans-unit id="4247bd31bdb74c5074c844a1f51c93a859ff8578" translate="yes" xml:space="preserve">
          <source>Unicode support</source>
          <target state="translated">ユニコード対応</target>
        </trans-unit>
        <trans-unit id="b82773bc5411a43a67f701a9ac627a06c1cb6db2" translate="yes" xml:space="preserve">
          <source>Unicode v6.2</source>
          <target state="translated">ユニコードv6.2</target>
        </trans-unit>
        <trans-unit id="7e2aea9a1091a65f50509009229ce4d23b5ee960" translate="yes" xml:space="preserve">
          <source>Unicode(tm) is a trademark of Unicode, Inc.</source>
          <target state="translated">Unicode(tm)はUnicode,Inc.の商標です。</target>
        </trans-unit>
        <trans-unit id="91c29c138dfa854b43a9c50a2f9ff956dcfd1401" translate="yes" xml:space="preserve">
          <source>Unified Canadian Aboriginal Syllabics</source>
          <target state="translated">統一されたカナダのアボリジニのシラバス</target>
        </trans-unit>
        <trans-unit id="0f85f583bbf512091ad1e17cda1699402ef799e1" translate="yes" xml:space="preserve">
          <source>Unified Canadian Aboriginal Syllabics Extended</source>
          <target state="translated">統一されたカナディアンアボリジナルシラバス拡張版</target>
        </trans-unit>
        <trans-unit id="4f290c277dbce6544950d95c7ffc983b5b870a4c" translate="yes" xml:space="preserve">
          <source>Unified_Ideograph</source>
          <target state="translated">Unified_Ideograph</target>
        </trans-unit>
        <trans-unit id="5ea2f727e179d06cc6c0064064aea5ee05d170fa" translate="yes" xml:space="preserve">
          <source>Uniform Function Call Syntax (UFCS)</source>
          <target state="translated">統一関数呼び出し構文 (UFCS)</target>
        </trans-unit>
        <trans-unit id="367b834ab9bc6ea15eef6f05af78776738e3081a" translate="yes" xml:space="preserve">
          <source>Uniform construction syntax for built-in scalar types</source>
          <target state="translated">組み込みスカラ型のための統一された構文</target>
        </trans-unit>
        <trans-unit id="bf061382e10d6798c2517c28e31d8d381de29d04" translate="yes" xml:space="preserve">
          <source>Uniform sampling</source>
          <target state="translated">均一なサンプリング</target>
        </trans-unit>
        <trans-unit id="14c21961b2726c16163dc7492f677c46d510610a" translate="yes" xml:space="preserve">
          <source>UniformRNG &lt;code&gt;rng&lt;/code&gt;</source>
          <target state="translated">UniformRNG &lt;code&gt;rng&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1dc2d8aa43cf4b7523681bf7a9d62b6503ab053" translate="yes" xml:space="preserve">
          <source>UniformRandomNumberGenerator &lt;code&gt;urng&lt;/code&gt;</source>
          <target state="translated">UniformRandomNumberGenerator &lt;code&gt;urng&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e68b9abd8444d542ee7ea49339a9fa1aecc4ff1" translate="yes" xml:space="preserve">
          <source>Union Constructors</source>
          <target state="translated">ユニオン建設業者</target>
        </trans-unit>
        <trans-unit id="b97025b5c9cabc7c40bfa14c6e38d256fa91fedc" translate="yes" xml:space="preserve">
          <source>Union of all data types. Storage allocated must be the right size of the data on the TARGET, not the host.</source>
          <target state="translated">すべてのデータタイプの連合。割り当てられたストレージは、ホストではなく、TARGET上のデータの適切なサイズでなければなりません。</target>
        </trans-unit>
        <trans-unit id="7fb0a0c24f714a3c6908f62d1750b60678074165" translate="yes" xml:space="preserve">
          <source>UnionExp &lt;code&gt;ue&lt;/code&gt;</source>
          <target state="translated">UnionExp &lt;code&gt;ue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40c214e69699ab35dd26f2aea53893c65df5da1a" translate="yes" xml:space="preserve">
          <source>UnionExp &lt;strong id=&quot;changeArrayLiteralLength&quot;&gt;changeArrayLiteralLength&lt;/strong&gt;(ref const Loc loc, TypeArray arrayType, Expression oldval, size_t oldlen, size_t newlen);</source>
          <target state="translated">UnionExp &lt;strong id=&quot;changeArrayLiteralLength&quot;&gt;changeArrayLiteralLength&lt;/strong&gt; （ref const Loc loc、TypeArray arrayType、Expression oldval、size_t oldlen、size_t newlen）;</target>
        </trans-unit>
        <trans-unit id="1331c179350671227b2059c060f0fb6cc96a01f6" translate="yes" xml:space="preserve">
          <source>UnionExp &lt;strong id=&quot;voidInitLiteral&quot;&gt;voidInitLiteral&lt;/strong&gt;(Type t, VarDeclaration var);</source>
          <target state="translated">UnionExp &lt;strong id=&quot;voidInitLiteral&quot;&gt;voidInitLiteral&lt;/strong&gt; （タイプt、VarDeclaration var）;</target>
        </trans-unit>
        <trans-unit id="573f8fc1579ee858b3690058c2822e4646fa3070" translate="yes" xml:space="preserve">
          <source>UnionExp* &lt;code&gt;pue&lt;/code&gt;</source>
          <target state="translated">UnionExp * &lt;code&gt;pue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01e4d3a9b6c2a2f384ce5dac1eab2350dbb93588" translate="yes" xml:space="preserve">
          <source>Unions and Special Member Functions</source>
          <target state="translated">組合と特別会員機能</target>
        </trans-unit>
        <trans-unit id="a0102ec82c0bb90d78b643d15cf3fa6be00c6e25" translate="yes" xml:space="preserve">
          <source>Unions are a variation on structs.</source>
          <target state="translated">ユニオンは構造体のバリエーションです。</target>
        </trans-unit>
        <trans-unit id="a62d59993aea7f6e6c355a91c3f289c9e8b350b1" translate="yes" xml:space="preserve">
          <source>Unions are by default initialized to whatever the &lt;a href=&quot;declaration#Initializer&quot;&gt;&lt;i&gt;Initializer&lt;/i&gt;&lt;/a&gt; for the first field is, and if none is supplied, to the default initializer for the first field's type.</source>
          <target state="translated">ユニオンはデフォルトで、最初のフィールドの&lt;a href=&quot;declaration#Initializer&quot;&gt;&lt;i&gt;初期&lt;/i&gt;&lt;/a&gt;化子が何であっても&lt;i&gt;初期化さ&lt;/i&gt;れ、何も指定されていない場合は、最初のフィールドのタイプのデフォルトの初期化子に初期化されます。</target>
        </trans-unit>
        <trans-unit id="4a6e457080b0b859845bccdbe95da2d70fb71565" translate="yes" xml:space="preserve">
          <source>Unions are constructed in the same way as structs.</source>
          <target state="translated">ユニオンは構造体と同じように構築されています。</target>
        </trans-unit>
        <trans-unit id="f20d83de9444f44397049b15f04bc93ca6fb349d" translate="yes" xml:space="preserve">
          <source>Unions are initialized similarly to structs, except that only one initializer is allowed.</source>
          <target state="translated">ユニオンは構造体と同様に初期化されますが、イニシャライザは 1 つしか使用できません。</target>
        </trans-unit>
        <trans-unit id="0b47874cdb794bfd2c5c4b866c3d58b4a7e2e1c5" translate="yes" xml:space="preserve">
          <source>Unions may have fields that have destructors. However, a union itself never has a destructor. When a union goes out of scope, destructors for it's fields are not called. If those calls are desired, they must be inserted explicitly by the programmer:</source>
          <target state="translated">ユニオンはデストラクタを持つフィールドを持つことがあります。しかし、ユニオン自体がデストラクタを持つことはありません。ユニオンがスコープ外になると、そのフィールドのデストラクタは呼び出されません。それらの呼び出しが必要な場合は、プログラマが明示的に挿入しなければなりません。</target>
        </trans-unit>
        <trans-unit id="2269a14097f76a4ebedc600cc449a6625817e305" translate="yes" xml:space="preserve">
          <source>Unions may have fields that have postblits. However, a union itself never has a postblit. Copying a union does not result in postblit calls for any fields. If those calls are desired, they must be inserted explicitly by the programmer:</source>
          <target state="translated">組合にはポストブリットを持つフィールドがあるかもしれません。しかし、ユニオン自体がポストブリットを持つことはありません。ユニオンをコピーしても、フィールドのポストブリット呼び出しは発生しません。これらの呼び出しが必要な場合は、プログラマが明示的に挿入する必要があります。</target>
        </trans-unit>
        <trans-unit id="b87fbd8e5787af83ccbd207ba527d5b29aa8f496" translate="yes" xml:space="preserve">
          <source>Unions may not have postblits, destructors, or invariants.</source>
          <target state="translated">ユニオンは、ポストブリット、デストラクタ、インバリアントを持たないことができる。</target>
        </trans-unit>
        <trans-unit id="8298d2824bd021c0211d1ca231e5f2a363ecb036" translate="yes" xml:space="preserve">
          <source>Uniprocessor Garbage Collector Techniques</source>
          <target state="translated">ユニプロセッサのゴミコレクタ技術</target>
        </trans-unit>
        <trans-unit id="27f5b1d97be4caf26df5cfa5ab8e2560a4fec6a2" translate="yes" xml:space="preserve">
          <source>Unique &lt;strong id=&quot;release&quot;&gt;release&lt;/strong&gt;();</source>
          <target state="translated">ユニークな&lt;strong id=&quot;release&quot;&gt;リリース&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="4be5d0f640b96963a935995d6fcf68492057bc00" translate="yes" xml:space="preserve">
          <source>Unique Expression</source>
          <target state="translated">ユニークな表現</target>
        </trans-unit>
        <trans-unit id="5ff1a5fc9718890c18a9173ea983ebaa427e76cf" translate="yes" xml:space="preserve">
          <source>Unique!T &lt;strong id=&quot;create&quot;&gt;create&lt;/strong&gt;(A...)(auto ref A args)</source>
          <target state="translated">Unique！T &lt;strong id=&quot;create&quot;&gt;create&lt;/strong&gt; （A ...）（auto ref A args）</target>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="3db9bdfab0f022f13a4bb48d254cae9da8cb6639" translate="yes" xml:space="preserve">
          <source>Unit separator</source>
          <target state="translated">ユニットセパレータ</target>
        </trans-unit>
        <trans-unit id="b3da7cee02b824a66bc3ea485a41f342035764bb" translate="yes" xml:space="preserve">
          <source>Unit tests are a builtin framework of test cases applied to a module to determine if it is working properly. A D program can be run with unit tests enabled or disabled.</source>
          <target state="translated">ユニットテストは、モジュールが正しく動作しているかどうかを判断するためにモジュールに適用されるテストケースの組み込みフレームワークです。D プログラムは、ユニットテストを有効または無効にした状態で実行することができます。</target>
        </trans-unit>
        <trans-unit id="fefa6220ed6b9dc9a0e4d5cb4616b291bfab064b" translate="yes" xml:space="preserve">
          <source>Unit tests are a special function defined like:</source>
          <target state="translated">ユニットテストとは、ユニットテストのように定義された特殊な関数のことです。</target>
        </trans-unit>
        <trans-unit id="ad9b402c3f3372b26a20431c0ca8997a9ad0b7f1" translate="yes" xml:space="preserve">
          <source>Unit tests are run in the lexical order in which they appear within a module.</source>
          <target state="translated">ユニットテストは、モジュール内に現れる語彙順に実行されます。</target>
        </trans-unit>
        <trans-unit id="a5c1e04fbed64b862e97e53f2641fe2ab46a7d9e" translate="yes" xml:space="preserve">
          <source>Unit tests, when enabled, are run after all static initialization is complete and before the &lt;code&gt;main()&lt;/code&gt; function is called.</source>
          <target state="translated">単体テストが有効になっている場合、すべての静的初期化が完了した後、 &lt;code&gt;main()&lt;/code&gt; 関数が呼び出される前に実行されます。</target>
        </trans-unit>
        <trans-unit id="055cf0570e66f2eea5181aa00a5c52d90e010552" translate="yes" xml:space="preserve">
          <source>UnitTestResult &lt;strong id=&quot;runModuleUnitTests&quot;&gt;runModuleUnitTests&lt;/strong&gt;();</source>
          <target state="translated">UnitTestResult &lt;strong id=&quot;runModuleUnitTests&quot;&gt;runModuleUnitTests&lt;/strong&gt; （）;</target>
        </trans-unit>
        <trans-unit id="277414d40589e8e43fb1bb639e3eda546d3a39fa" translate="yes" xml:space="preserve">
          <source>Universally-unique identifiers for resources in distributed systems.</source>
          <target state="translated">分散システムにおけるリソースのための普遍的に一意な識別子。</target>
        </trans-unit>
        <trans-unit id="b65181ba4f28882f88c26feebc5a1054a0622a74" translate="yes" xml:space="preserve">
          <source>Unknown opcode in sqlite3_file_control()</source>
          <target state="translated">sqlite3_file_control()の不明なオペコード。</target>
        </trans-unit>
        <trans-unit id="1931c3a0db3408e15d30035b5b64b4f6292dfc44" translate="yes" xml:space="preserve">
          <source>Unknown version</source>
          <target state="translated">不明なバージョン</target>
        </trans-unit>
        <trans-unit id="33daa36ae00d362b5c2c8e9facf98bab576abcff" translate="yes" xml:space="preserve">
          <source>Unless a directory is specified in &lt;code&gt;args[0]&lt;/code&gt; or &lt;code&gt;program&lt;/code&gt;, &lt;code&gt;spawnProcess&lt;/code&gt; will search for the program in a platform-dependent manner. On POSIX systems, it will look for the executable in the directories listed in the PATH environment variable, in the order they are listed. On Windows, it will search for the executable in the following sequence:</source>
          <target state="translated">&lt;code&gt;args[0]&lt;/code&gt; または &lt;code&gt;program&lt;/code&gt; でディレクトリが指定されていない限り、 &lt;code&gt;spawnProcess&lt;/code&gt; はプラットフォームに依存する方法でプログラムを検索します。 POSIXシステムでは、PATH環境変数にリストされているディレクトリで、リストされている順に実行可能ファイルを探します。 Windowsでは、次の順序で実行可能ファイルを検索します。</target>
        </trans-unit>
        <trans-unit id="b365da39577f92d7cfe9d00eec2c0518ddb0e1eb" translate="yes" xml:space="preserve">
          <source>Unless marked as &lt;code&gt;@trusted&lt;/code&gt; or &lt;code&gt;@safe&lt;/code&gt;, artifacts in this module allow implicit data sharing between threads and cannot guarantee that client code is free from low level data races.</source>
          <target state="translated">&lt;code&gt;@trusted&lt;/code&gt; または &lt;code&gt;@safe&lt;/code&gt; としてマークされていない限り、このモジュールのアーティファクトは、スレッド間の暗黙的なデータ共有を許可し、クライアントコードに低レベルのデータ競合がないことを保証できません。</target>
        </trans-unit>
        <trans-unit id="2fa828ccd66084db8a03f15b05f0b611fac7ce01" translate="yes" xml:space="preserve">
          <source>Unless the child process inherits the standard input/output/error streams of its parent, one almost always wants the streams closed in the parent when &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; returns. Therefore, by default, this is done. If this is not desirable, pass any of these options to spawnProcess.</source>
          <target state="translated">子プロセスがその親の標準の入力/出力/エラーストリームを継承しない限り、 &lt;a href=&quot;#spawnProcess&quot;&gt; &lt;code&gt;spawnProcess&lt;/code&gt; &lt;/a&gt;が戻るときに、ほとんどの場合、親でストリームを閉じる必要があります。 したがって、デフォルトではこれが行われます。 これが望ましくない場合は、これらのオプションのいずれかをspawnProcessに渡します。</target>
        </trans-unit>
        <trans-unit id="0408692a5b5d8444ca9b8f0092ac439bf7234efa" translate="yes" xml:space="preserve">
          <source>Unless your system's local time zone deals with leap seconds (which is highly unlikely), then the only way to get a time zone which takes leap seconds into account is to use &lt;code&gt;PosixTimeZone&lt;/code&gt; with a time zone whose name starts with &quot;right/&quot;. Those time zone files do include leap seconds, and &lt;code&gt;PosixTimeZone&lt;/code&gt; will take them into account (though posix systems which use a &quot;right/&quot; time zone as their local time zone will</source>
          <target state="translated">システムのローカルタイムゾーンがうるう秒を扱う場合を除いて（これは非常にまれです）、うるう秒を考慮に入れるタイムゾーンを取得する唯一の方法は、名前が「right /」で始まるタイムゾーンで &lt;code&gt;PosixTimeZone&lt;/code&gt; を使用することです 。 これらのタイムゾーンファイルにはうるう秒が含まれ、 &lt;code&gt;PosixTimeZone&lt;/code&gt; はそれらを考慮に入れます（ただし、ローカルタイムゾーンとして「right /」タイムゾーンを使用するposixシステムは</target>
        </trans-unit>
        <trans-unit id="64deb7f976a8cd98e26158b9c8e43cd6ab842a23" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;evenChunks&lt;/code&gt; takes a chunk count (not size). The returned range will contain zero or more &lt;code&gt;source.length / chunkCount + 1&lt;/code&gt; elements followed by &lt;code&gt;source.length / chunkCount&lt;/code&gt; elements. If &lt;code&gt;source.length &amp;lt; chunkCount&lt;/code&gt;, some chunks will be empty.</source>
          <target state="translated">&lt;a href=&quot;#chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;evenChunks&lt;/code&gt; はチャンクカウント（サイズではない）を取ります。 返される範囲には、0個以上の &lt;code&gt;source.length / chunkCount + 1&lt;/code&gt; 要素が含まれ、その後に &lt;code&gt;source.length / chunkCount&lt;/code&gt; 要素が続きます。 &lt;code&gt;source.length &amp;lt; chunkCount&lt;/code&gt; 場合、一部のチャンクは空になります。</target>
        </trans-unit>
        <trans-unit id="dcac2deafdbf1d1c8f905ae685dd247664bd1125" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#environment.opIndex&quot;&gt;&lt;code&gt;environment.opIndex&lt;/code&gt;&lt;/a&gt;, this function never throws on Posix.</source>
          <target state="translated">&lt;a href=&quot;#environment.opIndex&quot;&gt; &lt;code&gt;environment.opIndex&lt;/code&gt; &lt;/a&gt;とは異なり、この関数はPosixをスローしません。</target>
        </trans-unit>
        <trans-unit id="78c9b1ecfc17a2d5366ab58d22803f6df68d29c3" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#popFrontN&quot;&gt;&lt;code&gt;popFrontN&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;popFrontExactly&lt;/code&gt; will assume that the range holds at least &lt;code&gt;n&lt;/code&gt; elements. This makes &lt;code&gt;popFrontExactly&lt;/code&gt; faster than &lt;code&gt;popFrontN&lt;/code&gt;, but it also means that if &lt;code&gt;range&lt;/code&gt; does not contain at least &lt;code&gt;n&lt;/code&gt; elements, it will attempt to call &lt;code&gt;popFront&lt;/code&gt; on an empty range, which is undefined behavior. So, only use &lt;code&gt;popFrontExactly&lt;/code&gt; when it is guaranteed that &lt;code&gt;range&lt;/code&gt; holds at least &lt;code&gt;n&lt;/code&gt; elements.</source>
          <target state="translated">&lt;a href=&quot;#popFrontN&quot;&gt; &lt;code&gt;popFrontN&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;popFrontExactly&lt;/code&gt; は、範囲が少なくとも &lt;code&gt;n&lt;/code&gt; 個の要素を保持していると想定します。 これにより &lt;code&gt;popFrontExactly&lt;/code&gt; はpopFrontNよりも高速になり &lt;code&gt;popFrontN&lt;/code&gt; 、 &lt;code&gt;range&lt;/code&gt; に少なくとも &lt;code&gt;n&lt;/code&gt; 個の要素が含まれていない場合、未定義の動作である空の範囲で &lt;code&gt;popFront&lt;/code&gt; を呼び出そうとします。 したがって、 &lt;code&gt;range&lt;/code&gt; が少なくとも &lt;code&gt;n&lt;/code&gt; 個の要素を保持することが保証されている場合にのみ、 &lt;code&gt;popFrontExactly&lt;/code&gt; を使用してください 。</target>
        </trans-unit>
        <trans-unit id="ca26f78b889208702d57ff1d787f37620c2c7d92" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt;, however, it is illegal to pass a range with less than &lt;code&gt;n&lt;/code&gt; elements to &lt;code&gt;takeExactly&lt;/code&gt;; this will cause an assertion failure.</source>
          <target state="translated">ただし、 &lt;a href=&quot;#take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;n&lt;/code&gt; 要素未満の範囲を &lt;code&gt;takeExactly&lt;/code&gt; に渡すことはできません 。 これにより、アサーションエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="59fe163f287d88736da3589233f0c4e6d80fde94" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#takeExactly&quot;&gt;&lt;code&gt;takeExactly&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;take&lt;/code&gt; does not require that there are &lt;code&gt;n&lt;/code&gt; or more elements in &lt;code&gt;input&lt;/code&gt;. As a consequence, length information is not applied to the result unless &lt;code&gt;input&lt;/code&gt; also has length information.</source>
          <target state="translated">&lt;a href=&quot;#takeExactly&quot;&gt; &lt;code&gt;takeExactly&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;take&lt;/code&gt; は &lt;code&gt;input&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 個以上の要素があることを必要としません。 結果として、 &lt;code&gt;input&lt;/code&gt; に長さ情報も含まれていない限り、長さ情報は結果に適用されません。</target>
        </trans-unit>
        <trans-unit id="b8426ded2da3debb58d04add3a4a2ee0a01cedef" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;s,</source>
          <target state="translated">&lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;とは異なり、</target>
        </trans-unit>
        <trans-unit id="3c0a127638c1aa0ed774f4d832ca5f66eb374213" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;, underscores (&lt;code&gt;_&lt;/code&gt;) are not supported for emphasizing text because it would break snake_case names and underscore prefix processing in &lt;a href=&quot;#emphasis&quot;&gt;identifier emphasis&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;とは異なり、アンダースコア（ &lt;code&gt;_&lt;/code&gt; ）は、テキストを強調するためにサポートされていません。これは、 &lt;a href=&quot;#emphasis&quot;&gt;識別子強調で&lt;/a&gt; snake_case名とアンダースコアプレフィックス処理が機能しなくなるためです。</target>
        </trans-unit>
        <trans-unit id="62d6e6c303937f42cfdcfdeece835bc7d820f2ce" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;dropExactly&lt;/code&gt; will assume that the range holds at least &lt;code&gt;n&lt;/code&gt; elements. This makes &lt;code&gt;dropExactly&lt;/code&gt; faster than &lt;code&gt;drop&lt;/code&gt;, but it also means that if &lt;code&gt;range&lt;/code&gt; does not contain at least &lt;code&gt;n&lt;/code&gt; elements, it will attempt to call &lt;code&gt;popFront&lt;/code&gt; on an empty range, which is undefined behavior. So, only use &lt;code&gt;popFrontExactly&lt;/code&gt; when it is guaranteed that &lt;code&gt;range&lt;/code&gt; holds at least &lt;code&gt;n&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;drop&lt;/code&gt; とは異なり、 &lt;code&gt;dropExactly&lt;/code&gt; は、範囲に少なくとも &lt;code&gt;n&lt;/code&gt; 個の要素があることを前提としています。 これにより、 &lt;code&gt;dropExactly&lt;/code&gt; は &lt;code&gt;drop&lt;/code&gt; よりも高速になりますが 、 &lt;code&gt;range&lt;/code&gt; に少なくとも &lt;code&gt;n&lt;/code&gt; 個の要素が含まれていない場合、未定義の動作である空の範囲で &lt;code&gt;popFront&lt;/code&gt; を呼び出そうとします。 したがって、 &lt;code&gt;range&lt;/code&gt; が少なくとも &lt;code&gt;n&lt;/code&gt; 個の要素を保持することが保証されている場合にのみ、 &lt;code&gt;popFrontExactly&lt;/code&gt; を使用してください 。</target>
        </trans-unit>
        <trans-unit id="2dc495b4828660cfb1a6c926b761c16a9be27525" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;isSorted&lt;/code&gt;, &lt;code&gt;isStrictlyMonotonic&lt;/code&gt; does not allow for equal values, i.e. values for which both &lt;code&gt;less(a, b)&lt;/code&gt; and &lt;code&gt;less(b, a)&lt;/code&gt; are false.</source>
          <target state="translated">&lt;code&gt;isSorted&lt;/code&gt; とは異なり、 &lt;code&gt;isStrictlyMonotonic&lt;/code&gt; は等しい値、つまり &lt;code&gt;less(a, b)&lt;/code&gt; と &lt;code&gt;less(b, a)&lt;/code&gt; 両方がfalseである値を許可しません。</target>
        </trans-unit>
        <trans-unit id="d9f03ddd3a521372a8aeb68d3750dc19aca654fd" translate="yes" xml:space="preserve">
          <source>Unlike C, there is no global 'errno' variable. Consequently, almost all of these functions are pure nothrow.</source>
          <target state="translated">C とは異なり、グローバルな 'errno' 変数はありません。その結果、これらの関数のほとんどすべては純粋なノットローです。</target>
        </trans-unit>
        <trans-unit id="48065da6c19826224a06652b7752de447906d1e2" translate="yes" xml:space="preserve">
          <source>Unlike a template instantiation, a template mixin's body is evaluated within the scope where the mixin appears, not where the template declaration is defined. It is analogous to cutting and pasting the body of the template into the location of the mixin into a &lt;a href=&quot;#mixin_scope&quot;&gt;nested scope&lt;/a&gt;. It is useful for injecting parameterized &amp;lsquo;boilerplate&amp;rsquo; code, as well as for creating templated nested functions, which is not possible with template instantiations.</source>
          <target state="translated">テンプレートのインスタンス化とは異なり、テンプレートミックスインの本体は、テンプレート宣言が定義されている場所ではなく、ミックスインが表示されるスコープ内で評価されます。 これは、テンプレートの本体を&lt;a href=&quot;#mixin_scope&quot;&gt;入れ子のスコープ内の&lt;/a&gt;ミックスインの場所にカットアンドペーストすることに似ています 。 これは、パラメーター化された「ボイラープレート」コードを挿入する場合や、テンプレートのインスタンス化では不可能なテンプレート化されたネストされた関数を作成する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b78dd4d0c28721d6f33da60e8a9c5d426e8812c8" translate="yes" xml:space="preserve">
          <source>Unlike classes and interfaces with D linkage, &lt;code&gt;extern (C++)&lt;/code&gt; classes and interfaces are not rooted in &lt;code&gt;Object&lt;/code&gt; and cannot be used with &lt;code&gt;typeid&lt;/code&gt;.</source>
          <target state="translated">Dリンケージのあるクラスおよびインターフェースとは異なり、 &lt;code&gt;extern (C++)&lt;/code&gt; クラスおよびインターフェースは &lt;code&gt;Object&lt;/code&gt; をルートとせず、 &lt;code&gt;typeid&lt;/code&gt; と一緒に使用できません。</target>
        </trans-unit>
        <trans-unit id="c4a06fb407933b874e0e43772b69d5b66b0d98d0" translate="yes" xml:space="preserve">
          <source>Unlike module level declarations, declarations within function scope are processed in order. This means that two nested functions cannot mutually call each other:</source>
          <target state="translated">モジュールレベルの宣言とは異なり、関数スコープ内の宣言は順番に処理されます。これは、入れ子になった 2 つの関数が相互に呼び出すことができないことを意味します。</target>
        </trans-unit>
        <trans-unit id="1e921c8f35a8b97ca5f6203bfbaa7a401ab85c77" translate="yes" xml:space="preserve">
          <source>Unlike other functional programming languages, D's &lt;code&gt;pure&lt;/code&gt; functions allow modification of the caller state through their mutable parameters.</source>
          <target state="translated">他の関数型プログラミング言語とは異なり、Dの &lt;code&gt;pure&lt;/code&gt; 関数では、変更可能なパラメーターを使用して呼び出し元の状態を変更できます。</target>
        </trans-unit>
        <trans-unit id="0b036ee20c8407122782725738b7cc625cbeaae0" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;shared&lt;/code&gt; attribute, &lt;code&gt;__gshared&lt;/code&gt; provides no safe-guards against data races or other multi-threaded synchronization issues. It is the responsibility of the programmer to ensure that access to variables marked &lt;code&gt;__gshared&lt;/code&gt; is synchronized correctly.</source>
          <target state="translated">&lt;code&gt;shared&lt;/code&gt; 属性とは異なり、 &lt;code&gt;__gshared&lt;/code&gt; は、データの競合やその他のマルチスレッド同期の問題に対する安全手段を提供しません。 &lt;code&gt;__gshared&lt;/code&gt; とマークされた変数へのアクセスが正しく同期されるようにするのは、プログラマーの責任です。</target>
        </trans-unit>
        <trans-unit id="c04836bfb0781712a35902e55ee66bab09a7b952" translate="yes" xml:space="preserve">
          <source>Unlike the allocators for the C and C++ programming languages, which manage the allocated size internally, these allocators require that the client maintains (or knows</source>
          <target state="translated">割り当てられたサイズを内部で管理する C や C++プログラミング言語のアロケータとは異なり、これらのアロケータはクライアントが維持する (あるいは</target>
        </trans-unit>
        <trans-unit id="4328a809b4119b5d1cdcaad1f63f238165209f39" translate="yes" xml:space="preserve">
          <source>Unlike the other modules in std.datetime, this module is not currently publicly imported in std.datetime.package, because the old versions of this functionality which use &lt;a href=&quot;core_time#TickDuration&quot;&gt;&lt;code&gt;core.time.TickDuration&lt;/code&gt;&lt;/a&gt; are in std.datetime.package and would conflict with the symbols in this module. After the old symbols have gone through the deprecation cycle and have been fully removed, then this module will be publicly imported in std.datetime.package. The old, deprecated symbols are currently scheduled to be removed from the documentation in October 2018 and fully removed from Phobos in October 2019.</source>
          <target state="translated">std.datetimeの他のモジュールとは異なり、core.time.TickDurationを使用するこの機能の古いバージョンはstd.datetime.packageにあり、シンボルと競合するため、このモジュールは現在std.datetime.packageにパブリックにインポートされていません。このモジュールで。 古いシンボルが非推奨サイクルを経て完全に削除された後、このモジュールはstd.datetime.packageにパブリックにインポートされます。 古い非推奨のシンボルは現在、2018年10月にドキュメントから削除され、2019年10月にPhobosから完全に削除される予定です。</target>
        </trans-unit>
        <trans-unit id="7a96be23bb834e45b7c6ec859f0a33bbc2f1ea04" translate="yes" xml:space="preserve">
          <source>Unlike the other overloads of &lt;a href=&quot;#translate&quot;&gt;&lt;code&gt;translate&lt;/code&gt;&lt;/a&gt;, this one does not take an AA. Rather, it takes a &lt;code&gt;string&lt;/code&gt; generated by &lt;a href=&quot;#makeTransTable&quot;&gt;&lt;code&gt;makeTransTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#translate&quot;&gt; &lt;code&gt;translate&lt;/code&gt; &lt;/a&gt;の他のオーバーロードとは異なり、これはAAを取りません。 むしろ、 &lt;a href=&quot;#makeTransTable&quot;&gt; &lt;code&gt;makeTransTable&lt;/code&gt; &lt;/a&gt;によって生成された &lt;code&gt;string&lt;/code&gt; を取ります。</target>
        </trans-unit>
        <trans-unit id="a2e414f9a9014ee44b7edd2f5c74b2ba99d64ccc" translate="yes" xml:space="preserve">
          <source>Unlike the rint functions, nearbyint does not raise the FE_INEXACT exception.</source>
          <target state="translated">rint関数とは異なり、neigherintはFE_INEXACT例外を発生させません。</target>
        </trans-unit>
        <trans-unit id="57cc5a44978b2a56fd0b72e29be98d16b0472af0" translate="yes" xml:space="preserve">
          <source>Unloads the dynamic library referenced by p. If this library contains a D runtime then any necessary finalization or cleanup of that runtime will be performed.</source>
          <target state="translated">このライブラリにDランタイムが含まれている場合は、そのランタイムの必要な最終化やクリーンアップが実行されます。</target>
        </trans-unit>
        <trans-unit id="2e66bd886206de5f2b17ce23c8df1ed8d25d65b5" translate="yes" xml:space="preserve">
          <source>Unlock Notification</source>
          <target state="translated">通知のロックを解除する</target>
        </trans-unit>
        <trans-unit id="664d16b3bbd5ce740428335dc91179d8203f0409" translate="yes" xml:space="preserve">
          <source>Unpacks the content of a &lt;code&gt;Nullable&lt;/code&gt;, performs an operation and packs it again. Does nothing if isNull.</source>
          <target state="translated">Nullableのコンテンツを解凍し、操作を実行して再度パックします。 isNullの場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="cc345a9119374c547d811f8c7da41c9ef92ad2fe" translate="yes" xml:space="preserve">
          <source>Unpadded variation of Base64 encoding that is safe for use in URLs and filenames, as used in RFCs 4648 and 7515 (JWS/JWT/JWE).</source>
          <target state="translated">RFC 4648 および 7515 (JWSJWTJWE)で使用されているように、URL やファイル名で使用しても安全な Base64 エンコーディングの非パッド版。</target>
        </trans-unit>
        <trans-unit id="f88d720623b583f1cffc913373fdcc3a60ba2726" translate="yes" xml:space="preserve">
          <source>Unqual!(ElementEncodingType!R)[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt;(Allocator, R)(auto ref Allocator alloc, R range)</source>
          <target state="translated">Unqual！（ElementEncodingType！R）[] &lt;strong id=&quot;makeArray&quot;&gt;makeArray&lt;/strong&gt; （ &lt;strong id=&quot;makeArray&quot;&gt;Allocator&lt;/strong&gt; 、R）（auto ref Allocator alloc、R range）</target>
        </trans-unit>
        <trans-unit id="3c02fdbec5f33d0e592b953502081d961d449bb0" translate="yes" xml:space="preserve">
          <source>Unqual!(Largest!(F, H)) &lt;strong id=&quot;powmod&quot;&gt;powmod&lt;/strong&gt;(F, G, H)(F x, G n, H m)</source>
          <target state="translated">Unqual！（Largest！（F、H）） &lt;strong id=&quot;powmod&quot;&gt;powmod&lt;/strong&gt; （F、G、H）（F x、G n、H m）</target>
        </trans-unit>
        <trans-unit id="2bcb32fecdb532acd729e7486f0232969b7c3e9c" translate="yes" xml:space="preserve">
          <source>Unqual!F &lt;strong id=&quot;quantize&quot;&gt;quantize&lt;/strong&gt;(alias rfunc = rint, F)(const F val, const F unit)</source>
          <target state="translated">Unqual！F &lt;strong id=&quot;quantize&quot;&gt;量子化&lt;/strong&gt; （エイリアスrfunc = rint、F）（const F val、const F unit）</target>
        </trans-unit>
        <trans-unit id="9a98f2e85574e76d68401f4ce73c39509c4a2933" translate="yes" xml:space="preserve">
          <source>Unqual!F &lt;strong id=&quot;quantize&quot;&gt;quantize&lt;/strong&gt;(real base, alias rfunc = rint, F, E)(const F val, const E exp)</source>
          <target state="translated">Unqual！F &lt;strong id=&quot;quantize&quot;&gt;量子化&lt;/strong&gt; （実ベース、エイリアスrfunc = rint、F、E）（const F val、const E exp）</target>
        </trans-unit>
        <trans-unit id="1e2635e37463787b5dba88522830617f525b628d" translate="yes" xml:space="preserve">
          <source>Unqual!F &lt;strong id=&quot;quantize&quot;&gt;quantize&lt;/strong&gt;(real base, long exp = 1, alias rfunc = rint, F)(const F val)</source>
          <target state="translated">Unqual！F &lt;strong id=&quot;quantize&quot;&gt;量子化&lt;/strong&gt; （実数ベース、長いexp = 1、エイリアスrfunc = rint、F）（const F val）</target>
        </trans-unit>
        <trans-unit id="5a8d3ca0e300be0d25c318a263a03af4f2fff63d" translate="yes" xml:space="preserve">
          <source>Unqualified data has unqualified affixes.</source>
          <target state="translated">未修飾データには未修飾の接頭辞があります。</target>
        </trans-unit>
        <trans-unit id="c723d38c4fa3b7930c545d9e405d1f146212a63e" translate="yes" xml:space="preserve">
          <source>Unrestricted use of compile-time features</source>
          <target state="translated">コンパイル時機能の無制限使用</target>
        </trans-unit>
        <trans-unit id="80cfb4a037726fdae410bbf6df144554bff220d4" translate="yes" xml:space="preserve">
          <source>Unsafe function that wraps an existing &lt;code&gt;FILE*&lt;/code&gt;. The resulting &lt;code&gt;File&lt;/code&gt; never takes the initiative in closing the file. Note that the created file has no &lt;a href=&quot;#name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">既存の &lt;code&gt;FILE*&lt;/code&gt; をラップする安全でない関数。 結果の &lt;code&gt;File&lt;/code&gt; は、ファイルを閉じる際に主導権を取ることはありません。 作成されたファイルには&lt;a href=&quot;#name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;がないことに注意してください</target>
        </trans-unit>
        <trans-unit id="65422cb666169d3f3987078a0c14c3573d3c2445" translate="yes" xml:space="preserve">
          <source>Unsigned long divide.</source>
          <target state="translated">符号なしのロングディバイド。</target>
        </trans-unit>
        <trans-unit id="0b87e9858f088c1c3ef7326a4daa7bc92af7a7dd" translate="yes" xml:space="preserve">
          <source>Unsigned or signed integers to strings.</source>
          <target state="translated">未符号または符号付き整数を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="7dd2dae7076eed8003f9916d0a11ef6b86330446" translate="yes" xml:space="preserve">
          <source>Unsigned types are forwarded</source>
          <target state="translated">符号なし型は転送されます。</target>
        </trans-unit>
        <trans-unit id="db264537a77391b4d1ffa4ba5078dbd65e89c632" translate="yes" xml:space="preserve">
          <source>Unsigned!T &lt;strong id=&quot;absUnsign&quot;&gt;absUnsign&lt;/strong&gt;(T)(T x)</source>
          <target state="translated">署名なし！T &lt;strong id=&quot;absUnsign&quot;&gt;absUnsign&lt;/strong&gt; （T）（T x）</target>
        </trans-unit>
        <trans-unit id="ee28505eeae48ed21fb9c1a0cf9d2afe5eb71525" translate="yes" xml:space="preserve">
          <source>Unspecified address family</source>
          <target state="translated">住所不定の家族</target>
        </trans-unit>
        <trans-unit id="12a25d56dc3fd00254d1725dedadf02ca44b6632" translate="yes" xml:space="preserve">
          <source>Until!(pred, Range, Sentinel) &lt;strong id=&quot;until&quot;&gt;until&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range, Sentinel)(Range range, Sentinel sentinel, OpenRight openRight = Yes.openRight)</source>
          <target state="translated">Until！（pred、Range、Sentinel） &lt;strong id=&quot;until&quot;&gt;until&lt;/strong&gt; （alias pred = &quot;a == b&quot;、Range、Sentinel）（Range range、Sentinel sentinel、OpenRight openRight = Yes.openRight）</target>
        </trans-unit>
        <trans-unit id="4b4508b4a6bcff851bf86982a2055c2003b1fa47" translate="yes" xml:space="preserve">
          <source>Until!(pred, Range, void) &lt;strong id=&quot;until&quot;&gt;until&lt;/strong&gt;(alias pred, Range)(Range range, OpenRight openRight = Yes.openRight);</source>
          <target state="translated">Until！（pred、Range、void） &lt;strong id=&quot;until&quot;&gt;until&lt;/strong&gt; （alias pred、Range）（Range range、OpenRight openRight = Yes.openRight）;</target>
        </trans-unit>
        <trans-unit id="9c59dea84fd569db02119fea1a063859bf29b83a" translate="yes" xml:space="preserve">
          <source>Untyped array of bytes read.</source>
          <target state="translated">読み込んだバイトの型なし配列。</target>
        </trans-unit>
        <trans-unit id="4136979d06ff082f9f315b1eebb740ff6c03f3f6" translate="yes" xml:space="preserve">
          <source>Unused</source>
          <target state="translated">Unused</target>
        </trans-unit>
        <trans-unit id="b6935e98e40b6e21b32a31ee8441a03644c81e5c" translate="yes" xml:space="preserve">
          <source>Update real environment with our copy.</source>
          <target state="translated">当社のコピーで実環境を更新します。</target>
        </trans-unit>
        <trans-unit id="9bfdc7ffd31c3f1d9f8a46b9030a47cb21f4a6a6" translate="yes" xml:space="preserve">
          <source>Upload file from local files system using the HTTP or FTP protocol.</source>
          <target state="translated">HTTP または FTP プロトコルを使用してローカルファイルシステムからファイルをアップロードします。</target>
        </trans-unit>
        <trans-unit id="d92a94252ae6e6e7308555bfab068876b651496a" translate="yes" xml:space="preserve">
          <source>Upon a correct comparison, returns the result of the comparison. Otherwise, the function terminates the application so it never returns.</source>
          <target state="translated">比較が正しく行われた場合、比較の結果を返します。それ以外の場合は、この関数はアプリケーションを終了させ、決して戻りません。</target>
        </trans-unit>
        <trans-unit id="635a8d59b65d6fe6e79727c2b607e63e7021a7fc" translate="yes" xml:space="preserve">
          <source>Upon a mistaken comparison such as &lt;code&gt;int(-1) &amp;lt; uint(0)&lt;/code&gt;, the function never returns because it throws a &lt;code&gt;Throw.CheckedFailure&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;int(-1) &amp;lt; uint(0)&lt;/code&gt; などの誤った比較では、関数は &lt;code&gt;Throw.CheckedFailure&lt;/code&gt; 例外をスローするため、戻りません。</target>
        </trans-unit>
        <trans-unit id="fa0a038d12e10d6ea11977030e0079027d88a558" translate="yes" xml:space="preserve">
          <source>Upon deallocation, the deallocated block is inserted in the internally maintained free tree (not returned to the parent). The free tree is not kept balanced. Instead, it has a last-in-first-out flavor because newly inserted blocks are rotated to the root of the tree. That way allocations are cache friendly and also frequently used sizes are more likely to be found quickly, whereas seldom used sizes migrate to the leaves of the tree.</source>
          <target state="translated">解放されると、解放されたブロックは内部的に管理されているフリーツリーに挿入されます(親には戻りません)。フリーツリーはバランスが保たれているわけではありません。その代わり、新しく挿入されたブロックはツリーのルートにローテーションされるため、ラストインファストアウトのようになります。このようにして割り当てがキャッシュフレンドリーになり、使用頻度の高いサイズはすぐに見つかる可能性が高くなりますが、使用頻度の低いサイズはツリーの葉に移動してしまいます。</target>
        </trans-unit>
        <trans-unit id="5f1bf936fc97a8f0474440921cf17c9bca92dd9a" translate="yes" xml:space="preserve">
          <source>Upper case letters</source>
          <target state="translated">大文字</target>
        </trans-unit>
        <trans-unit id="83087183cf2fc461034d823bb990cf31750aea63" translate="yes" xml:space="preserve">
          <source>Uppercase</source>
          <target state="translated">Uppercase</target>
        </trans-unit>
        <trans-unit id="7a4164382331e68559c0554c6d69676b3cadeb03" translate="yes" xml:space="preserve">
          <source>Uppercase_Letter</source>
          <target state="translated">Uppercase_Letter</target>
        </trans-unit>
        <trans-unit id="c697647e510548f93776f9aafa822873da30eacb" translate="yes" xml:space="preserve">
          <source>UprExpression</source>
          <target state="translated">UprExpression</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="607204c2f99f603cd34be761bcbeaa8343288f47" translate="yes" xml:space="preserve">
          <source>Usage is otherwise identical to &lt;code&gt;task&lt;/code&gt;.</source>
          <target state="translated">それ以外の使い方は &lt;code&gt;task&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="47d7700c39adc856cd703ac849cd6f7a58cd58a0" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#DigestType&quot;&gt;&lt;code&gt;DigestType&lt;/code&gt;&lt;/a&gt; to obtain the actual return type.</source>
          <target state="translated">&lt;a href=&quot;#DigestType&quot;&gt; &lt;code&gt;DigestType&lt;/code&gt; &lt;/a&gt;を使用して、実際の戻り値の型を取得します。</target>
        </trans-unit>
        <trans-unit id="adbbdb084a9fb0ec3254af6094f4eb6c04b801eb" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#digestLength&quot;&gt;&lt;code&gt;digestLength&lt;/code&gt;&lt;/a&gt; to obtain the length of the ubyte array.</source>
          <target state="translated">&lt;a href=&quot;#digestLength&quot;&gt; &lt;code&gt;digestLength&lt;/code&gt; &lt;/a&gt;を使用して、ubyte配列の長さを取得します。</target>
        </trans-unit>
        <trans-unit id="b3231f8622cd090ef9e587f5edbb465aca7b09c8" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#feqrel&quot;&gt;&lt;code&gt;feqrel&lt;/code&gt;&lt;/a&gt; to get the number of equal bits in the mantissa.</source>
          <target state="translated">&lt;a href=&quot;#feqrel&quot;&gt; &lt;code&gt;feqrel&lt;/code&gt; &lt;/a&gt;を使用して、仮数の等しいビットの数を取得します。</target>
        </trans-unit>
        <trans-unit id="6d9307c326b8942333b6c398ebd4c07ddf71f566" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#isFunctionPointer&quot;&gt;&lt;code&gt;isFunctionPointer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#isDelegate&quot;&gt;&lt;code&gt;isDelegate&lt;/code&gt;&lt;/a&gt; for detecting those types respectively.</source>
          <target state="translated">これらのタイプをそれぞれ検出するには、 &lt;a href=&quot;#isFunctionPointer&quot;&gt; &lt;code&gt;isFunctionPointer&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#isDelegate&quot;&gt; &lt;code&gt;isDelegate&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="05ceeae1c0ec5acb33be5d48da2dcb40fadf69b9" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#makeTransTable&quot;&gt;&lt;code&gt;makeTransTable&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">代わりに&lt;a href=&quot;#makeTransTable&quot;&gt; &lt;code&gt;makeTransTable&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="f0a91d81a9ba5ac4e99ca49d89974cc7a9058e19" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;std_range#only&quot;&gt;&lt;code&gt;std.range.only&lt;/code&gt;&lt;/a&gt; to find single elements:</source>
          <target state="translated">&lt;a href=&quot;std_range#only&quot;&gt; &lt;code&gt;std.range.only&lt;/code&gt; &lt;/a&gt;を使用して、単一の要素を検索します。</target>
        </trans-unit>
        <trans-unit id="48dd858d3ce799ecfe17031cfb5c7e47121b6231" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Yes.keepTerminator&lt;/code&gt; to include the terminator at the end of each line.</source>
          <target state="translated">&lt;code&gt;Yes.keepTerminator&lt;/code&gt; の終わりにターミネーターを含めるには、 Yes.keepTerminatorを使用します。</target>
        </trans-unit>
        <trans-unit id="8b6c1674d2f204c22694f576b979cd1814df2141" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;fold&lt;/code&gt; instead of &lt;code&gt;reduce&lt;/code&gt; to use the seed version in a UFCS chain.</source>
          <target state="translated">UFCSチェーンでシードバージョンを使用 &lt;code&gt;reduce&lt;/code&gt; には、 reduceの代わりに &lt;code&gt;fold&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ffd1556b516ef1f66dbe93c932b16f01c4bc9667" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ptrdiff_t&lt;/code&gt; as an alias for a signed integral type that can span the address space. A type representing the difference between two pointers should be of type &lt;code&gt;ptrdiff_t&lt;/code&gt;.</source>
          <target state="translated">アドレス空間にまたがることができる符号付き整数型のエイリアスとして &lt;code&gt;ptrdiff_t&lt;/code&gt; を使用します。 2つのポインターの違いを表す型は、 &lt;code&gt;ptrdiff_t&lt;/code&gt; 型でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7fdf440fcaae93b5efe254ec61870d973ace818a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;size_t&lt;/code&gt; as an alias for an unsigned integral type that can span the address space. Array indices should be of type &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">アドレス空間にまたがる符号なし整数型のエイリアスとして &lt;code&gt;size_t&lt;/code&gt; を使用します。 配列のインデックスは &lt;code&gt;size_t&lt;/code&gt; 型である必要があります。</target>
        </trans-unit>
        <trans-unit id="0c8e53d39e2a0f98ecbcc400dea4845b6223508c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;t.expand&lt;/code&gt; for a &lt;code&gt;Tuple&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to expand it into its components. The result of &lt;code&gt;expand&lt;/code&gt; acts as if the &lt;code&gt;Tuple&lt;/code&gt;'s components were listed as a list of values. (Ordinarily, a &lt;code&gt;Tuple&lt;/code&gt; acts as a single value.)</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; の &lt;code&gt;t.expand&lt;/code&gt; を使用して、コンポーネントに展開します。 &lt;code&gt;expand&lt;/code&gt; の結果は、 &lt;code&gt;Tuple&lt;/code&gt; のコンポーネントが値のリストとしてリストされているかのように機能します。 （通常、 &lt;code&gt;Tuple&lt;/code&gt; は単一の値として機能します。）</target>
        </trans-unit>
        <trans-unit id="48d884b7ca15aa475ec50789ca2ff3e23d86c484" translate="yes" xml:space="preserve">
          <source>Use EnumMembers to generate a switch statement using static foreach.</source>
          <target state="translated">EnumMembersを使用して、static foreachを使用してswitch文を生成します。</target>
        </trans-unit>
        <trans-unit id="ea3185b41d0b5eef9ea7299e9eaac7a36af0572e" translate="yes" xml:space="preserve">
          <source>Use a delegate:</source>
          <target state="translated">代議員を使う。</target>
        </trans-unit>
        <trans-unit id="0c1e0d0bf9ac652eb81fddab0fdf99124b593eff" translate="yes" xml:space="preserve">
          <source>Use a lambda to get the thrown object.</source>
          <target state="translated">投げられたオブジェクトを取得するためにラムダを使用します。</target>
        </trans-unit>
        <trans-unit id="873a141220012e552838fdcfee0dd363789fe021" translate="yes" xml:space="preserve">
          <source>Use a range for splitting</source>
          <target state="translated">範囲を使って分割する</target>
        </trans-unit>
        <trans-unit id="743a812236b290eb42a4bbf575f256526d81c48f" translate="yes" xml:space="preserve">
          <source>Use a separate mutex when init blocks on another thread that might also call initOnce.</source>
          <target state="translated">initOnceを呼び出す可能性のある別のスレッドでブロックをinitする場合は、別のミューテックスを使用します。</target>
        </trans-unit>
        <trans-unit id="b175392fd564ac3cefbc17dfb5b685defa989e44" translate="yes" xml:space="preserve">
          <source>Use a union to share storage with a pointer:</source>
          <target state="translated">ポインタとストレージを共有するためにユニオンを使用します。</target>
        </trans-unit>
        <trans-unit id="b01dba754a5979101f473d00f0a72b08eaa453e0" translate="yes" xml:space="preserve">
          <source>Use an automated tool such as SWIG to construct a C wrapper.</source>
          <target state="translated">SWIGのような自動化されたツールを使用してCのラッパーを構築します。</target>
        </trans-unit>
        <trans-unit id="391314ce9442e0f12875856e20c62869fdd57c69" translate="yes" xml:space="preserve">
          <source>Use an existing socket handle.</source>
          <target state="translated">既存のソケットハンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="a7f84b37a52370f02dd55991fe07b971f3630397" translate="yes" xml:space="preserve">
          <source>Use bitwise OR to combine flags.</source>
          <target state="translated">フラグを結合するにはビット単位のORを使用します。</target>
        </trans-unit>
        <trans-unit id="d8684aed3619612b2b8756065eb3877a3a2f839f" translate="yes" xml:space="preserve">
          <source>Use dynamic arrays for larger arrays.</source>
          <target state="translated">より大きな配列には動的配列を使用します。</target>
        </trans-unit>
        <trans-unit id="666b47896c954d06222547665bcbfad2b613e2cd" translate="yes" xml:space="preserve">
          <source>Use dynamic arrays instead of pointers to arrays as much as practical. Indexing of dynamic arrays are bounds checked, avoiding buffer underflow and overflow problems.</source>
          <target state="translated">配列へのポインタの代わりに、実用的な範囲で動的配列を使用します。動的配列のインデキシングは境界チェックされ、バッファアンダーフローやオーバーフローの問題を回避します。</target>
        </trans-unit>
        <trans-unit id="7d2098c363acbeebbd0189589ce87c1539461b35" translate="yes" xml:space="preserve">
          <source>Use exceptions when input has incorrect CSV.</source>
          <target state="translated">入力にCSVが正しくない場合は例外を使用します。</target>
        </trans-unit>
        <trans-unit id="4f7a702bd6e584b41d91d0f760813b556c810824" translate="yes" xml:space="preserve">
          <source>Use instead:</source>
          <target state="translated">代わりに使ってください。</target>
        </trans-unit>
        <trans-unit id="a0bd8b9fd1352e9a7ee83b86e96f850112dd5cf1" translate="yes" xml:space="preserve">
          <source>Use leading zeros to pad rather than spaces (except for the floating point values &lt;code&gt;nan&lt;/code&gt; and &lt;code&gt;infinity&lt;/code&gt;). Ignore if there's a</source>
          <target state="translated">スペースではなく先行ゼロを使用して埋め込みます（浮動小数点値 &lt;code&gt;nan&lt;/code&gt; および &lt;code&gt;infinity&lt;/code&gt; を除く）。 ある場合は無視します</target>
        </trans-unit>
        <trans-unit id="e9eb0693d837d691dc401377d0b5f372d6ba7c76" translate="yes" xml:space="preserve">
          <source>Use native byte order</source>
          <target state="translated">ネイティブバイトオーダーを使用</target>
        </trans-unit>
        <trans-unit id="494d644b4cea82b0f2a11f12d31fe2c2c6340bb0" translate="yes" xml:space="preserve">
          <source>Use of this facility may invalidate grapheme cluster, see also &lt;a href=&quot;#Grapheme.valid&quot;&gt;&lt;code&gt;Grapheme.valid&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この機能を使用すると、書記素クラスターが無効になる可能性があります&lt;a href=&quot;#Grapheme.valid&quot;&gt; &lt;code&gt;Grapheme.valid&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b875251d6eb81c5967bf6e62329a54f26bfa6687" translate="yes" xml:space="preserve">
          <source>Use of this facility may invalidate grapheme cluster, see also &lt;code&gt;valid&lt;/code&gt;.</source>
          <target state="translated">この機能を使用すると書記素クラスタが無効になる場合があり &lt;code&gt;valid&lt;/code&gt; 。「」も参照してください。</target>
        </trans-unit>
        <trans-unit id="884a243fefd8e60fe323817fec2a996c8bebbfbc" translate="yes" xml:space="preserve">
          <source>Use of void initializers is rarely useful for individual local variables, as a modern optimizer will remove the dead store of its initialization if it is initialized later.</source>
          <target state="translated">最近のオプティマイザは、後から初期化された場合、その初期化のデッドストアを削除してしまうからです。</target>
        </trans-unit>
        <trans-unit id="5f23be35fdcc7ad601fb3afd85d59caa262fe40f" translate="yes" xml:space="preserve">
          <source>Use of with object symbols that shadow local symbols with the same identifier are not allowed. This is to reduce the risk of inadvertent breakage of with statements when new members are added to the object declaration.</source>
          <target state="translated">同じ識別子を持つローカルシンボルの影になるオブジェクトシンボルのwithの使用は認められていません。これは、オブジェクト宣言に新しいメンバが追加されたときに、with文が不用意に壊れてしまうリスクを減らすためです。</target>
        </trans-unit>
        <trans-unit id="191654677e98da602653c371d9dfd799ee8ada8a" translate="yes" xml:space="preserve">
          <source>Use only if you have waited on every &lt;code&gt;Task&lt;/code&gt; and therefore know the queue is empty, or if you speculatively executed some tasks and no longer need the results.</source>
          <target state="translated">すべての &lt;code&gt;Task&lt;/code&gt; 待機したためにキューが空であることがわかっている場合、または一部のタスクを投機的に実行して結果が不要になった場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="6a3134f25820d6e9b99efcc040afa78a19060e81" translate="yes" xml:space="preserve">
          <source>Use opSlice() from now on.</source>
          <target state="translated">これからはopSlice()を使いましょう。</target>
        </trans-unit>
        <trans-unit id="0f7ce138690e71e3a3dfa4ced6f5458ab1f5899d" translate="yes" xml:space="preserve">
          <source>Use splitter without a separator</source>
          <target state="translated">セパレータを使用せずにスプリッタを使用する</target>
        </trans-unit>
        <trans-unit id="18386a6712ddd2e90ccdfcddd96ef23c786f1142" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#RangePrimitive&quot;&gt;&lt;code&gt;RangePrimitive&lt;/code&gt;&lt;/a&gt; enum to specify which primitives to handle. Multiple range primitives can be handled at once by using the &lt;code&gt;OR&lt;/code&gt; operator or the pseudo-primitives &lt;code&gt;RangePrimitive.access&lt;/code&gt; and &lt;code&gt;RangePrimitive.pop&lt;/code&gt;. All handled primitives must have return types or values compatible with the user-supplied handler.</source>
          <target state="translated">&lt;a href=&quot;#RangePrimitive&quot;&gt; &lt;code&gt;RangePrimitive&lt;/code&gt; &lt;/a&gt;列挙型を使用して、処理するプリミティブを指定します。 &lt;code&gt;OR&lt;/code&gt; 演算子または疑似プリミティブ &lt;code&gt;RangePrimitive.access&lt;/code&gt; および &lt;code&gt;RangePrimitive.pop&lt;/code&gt; を使用して、複数の範囲プリミティブを一度に処理できます。 処理されるすべてのプリミティブには、ユーザー指定のハンドラーと互換性のある戻り値の型または値が必要です。</target>
        </trans-unit>
        <trans-unit id="0b5f27af6328268d2605eb68f81d45548b5054bd" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#dur&quot;&gt;&lt;code&gt;dur&lt;/code&gt;&lt;/a&gt; function or one of its non-generic aliases to create &lt;code&gt;Duration&lt;/code&gt;s.</source>
          <target state="translated">関数&lt;a href=&quot;#dur&quot;&gt; &lt;code&gt;dur&lt;/code&gt; &lt;/a&gt;またはその非汎用エイリアスの1つを使用して、 &lt;code&gt;Duration&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="78a059e1d81c669061770e6ebc73b731a6af9efd" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;arrayPtr&lt;/code&gt; overload of &lt;a href=&quot;#appender&quot;&gt;&lt;code&gt;appender&lt;/code&gt;&lt;/a&gt; for construction with type-inference.</source>
          <target state="translated">型推論による構築には &lt;code&gt;arrayPtr&lt;/code&gt; オーバーロードを使用します。</target>
        </trans-unit>
        <trans-unit id="d09a4630f154886909155b3e1ae35f59cb094891" translate="yes" xml:space="preserve">
          <source>Use the ForwardingScopeDsymbol as the parent symbol for members.</source>
          <target state="translated">ForwardingScopeDsymbol をメンバの親シンボルとして使用します。</target>
        </trans-unit>
        <trans-unit id="225bd24669abe9be158ae39e2ef06005821005b8" translate="yes" xml:space="preserve">
          <source>Use the SOCKS5 protocol but pass along the host name rather than the IP address. added in 7.18.0</source>
          <target state="translated">SOCKS5 プロトコルを使用しますが、IP アドレスではなくホスト名を渡します。</target>
        </trans-unit>
        <trans-unit id="5ad265a5408a557c8739bbf477749f03fe8edee2" translate="yes" xml:space="preserve">
          <source>Use the attributes &lt;code&gt;@nogc&lt;/code&gt; as much as possible on the &lt;code&gt;toHash&lt;/code&gt; and &lt;code&gt;opEquals&lt;/code&gt; overrides.</source>
          <target state="translated">&lt;code&gt;toHash&lt;/code&gt; と &lt;code&gt;opEquals&lt;/code&gt; オーバーライドで属性 &lt;code&gt;@nogc&lt;/code&gt; をできるだけ使用します。</target>
        </trans-unit>
        <trans-unit id="fa837e971bab06ebe9fa8cced0faa302241fa259" translate="yes" xml:space="preserve">
          <source>Use the attributes &lt;code&gt;@safe&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt;, &lt;code&gt;pure&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, and &lt;code&gt;scope&lt;/code&gt; as much as possible on the &lt;code&gt;toHash&lt;/code&gt; and &lt;code&gt;opEquals&lt;/code&gt; overrides.</source>
          <target state="translated">&lt;code&gt;toHash&lt;/code&gt; と &lt;code&gt;opEquals&lt;/code&gt; のオーバーライドでは、属性 &lt;code&gt;@safe&lt;/code&gt; 、 &lt;code&gt;@nogc&lt;/code&gt; 、 &lt;code&gt;pure&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、および &lt;code&gt;scope&lt;/code&gt; を可能な限り使用します。</target>
        </trans-unit>
        <trans-unit id="73f4ee5c163a4b03bed0243fb0edd865f02a04da" translate="yes" xml:space="preserve">
          <source>Use the coarse clock, not the normal one (e.g. on Linux, that would be &lt;code&gt;CLOCK_REALTIME_COARSE&lt;/code&gt; instead of &lt;code&gt;CLOCK_REALTIME&lt;/code&gt; for &lt;code&gt;clock_gettime&lt;/code&gt; if a function is using the realtime clock). It's generally faster to get the time with the coarse clock than the normal clock, but it's less precise (e.g. 1 msec instead of 1 usec or 1 nsec). Howeover, it</source>
          <target state="translated">通常のクロックではなく、粗いクロックを使用します（たとえば、Linuxでは、関数がリアルタイムクロックを使用している場合、 &lt;code&gt;CLOCK_REALTIME&lt;/code&gt; &lt;code&gt;CLOCK_REALTIME_COARSE&lt;/code&gt; ではなくCLOCK_REALTIME_COARSEになります）。 一般的に、通常のクロックよりも粗いクロックで時間を取得する方が高速ですが、精度は低くなります（たとえば、1 usecまたは1ナノ秒ではなく1ミリ秒）。 ほら、それ</target>
        </trans-unit>
        <trans-unit id="b5e0f9bdfa9016956fef4c6395c40953244dbc05" translate="yes" xml:space="preserve">
          <source>Use the faster compile-time overload</source>
          <target state="translated">より高速なコンパイル時オーバーロードを使用します。</target>
        </trans-unit>
        <trans-unit id="003ec607e3d7cca9e027c3ee29178ae85ad8baeb" translate="yes" xml:space="preserve">
          <source>Use the most visible overload to check visibility. Later perform an access check on the resolved overload. This function is similar to overloadApply, but doesn't recurse nor resolve aliases because protection/visibility is an attribute of the alias not the aliasee.</source>
          <target state="translated">最も視認性の高いオーバーロードを使用して、視認性をチェックします。その後、解決されたオーバーロードに対してアクセスチェックを行います。この関数は overloadApply に似ていますが、protectionvisibility はエイリアスの属性であってエイリアス対象ではないため、再帰もエイリアスの解決も行いません。</target>
        </trans-unit>
        <trans-unit id="ecea27e7268c13a18f824b4741edffcbd21384fd" translate="yes" xml:space="preserve">
          <source>Use the normal clock.</source>
          <target state="translated">通常の時計を使用します。</target>
        </trans-unit>
        <trans-unit id="2decee5fdcb2e6abe0efae775d6d245ceb48d907" translate="yes" xml:space="preserve">
          <source>Use the optional &lt;code&gt;cookie&lt;/code&gt; argument to create different types of the same base type</source>
          <target state="translated">オプションの &lt;code&gt;cookie&lt;/code&gt; 引数を使用して、同じ基本タイプの異なるタイプを作成します</target>
        </trans-unit>
        <trans-unit id="199dc20b591ee68d927b26f24f29015b8587604c" translate="yes" xml:space="preserve">
          <source>Use the two operand form of the instruction format;</source>
          <target state="translated">命令フォーマットの2オペランド形式を使用します。</target>
        </trans-unit>
        <trans-unit id="95a7b20ad88258a006cdce3eb4a48069b1dcaa41" translate="yes" xml:space="preserve">
          <source>Use this attribute to attach an Objective-C selector to a method.</source>
          <target state="translated">この属性を使用して、Objective-C セレクタをメソッドにアタッチします。</target>
        </trans-unit>
        <trans-unit id="eb7ee948a98daed0fa240ed47144ff4132b6001e" translate="yes" xml:space="preserve">
          <source>Use this constructor for string mixins.</source>
          <target state="translated">文字列ミックスインには、このコンストラクタを使用します。</target>
        </trans-unit>
        <trans-unit id="5b498b0856e978dcbbf4e0ffb7b97a34e638161a" translate="yes" xml:space="preserve">
          <source>Use this expression for error recovery. It should behave as a 'sink' to prevent further cascaded error messages.</source>
          <target state="translated">エラー回復のためにこの式を使用します。これ以上のカスケードされたエラーメッセージを防ぐために、'シンク'として動作しなければなりません。</target>
        </trans-unit>
        <trans-unit id="bd06c192db7792c4cf00ede209798b786767b1ca" translate="yes" xml:space="preserve">
          <source>Use this for multipart formpost building</source>
          <target state="translated">multipart formpost の建物のためにこれを使用して下さい</target>
        </trans-unit>
        <trans-unit id="7c6ab14342528c5b12e30f0b33b6f65a5c654581" translate="yes" xml:space="preserve">
          <source>Use this instead of creating new instances for commonly used literals such as 0 or 1.</source>
          <target state="translated">0 や 1 のような一般的に使用されるリテラルのために新しいインスタンスを作成する代わりに、これを使用します。</target>
        </trans-unit>
        <trans-unit id="f3c0cff7dd757ca5c15bd47e9f720de6ca2a6e5e" translate="yes" xml:space="preserve">
          <source>Use this module to test out new functionality for &lt;a href=&quot;std_typecons#wrap&quot;&gt;&lt;code&gt;std.typecons.wrap&lt;/code&gt;&lt;/a&gt; which allows for a struct to be wrapped against an interface; the implementation in &lt;a href=&quot;std_typecons&quot;&gt;&lt;code&gt;std.typecons&lt;/code&gt;&lt;/a&gt; only allows for classes to use the wrap functionality.</source>
          <target state="translated">このモジュールを使用して、構造体をインターフェイスに対してラップできるようにする&lt;a href=&quot;std_typecons#wrap&quot;&gt; &lt;code&gt;std.typecons.wrap&lt;/code&gt; の&lt;/a&gt;新機能をテストします。 &lt;a href=&quot;std_typecons&quot;&gt; &lt;code&gt;std.typecons&lt;/code&gt; &lt;/a&gt;の実装は、クラスがラップ機能を使用することのみを許可します。</target>
        </trans-unit>
        <trans-unit id="a95cb1b3a079b5ec85c4f5f432209f3bba70e39c" translate="yes" xml:space="preserve">
          <source>Use this only when it is certain there are no elements in use beyond the array in the memory block. If there are, those elements will be overwritten by appending to this array.</source>
          <target state="translated">これは、メモリブロック内の配列以外に使用中の要素がないことが確実な場合にのみ使用します。存在する場合は、その要素はこの配列に追加することで上書きされます。</target>
        </trans-unit>
        <trans-unit id="a582381933463d5deb51e05bf545416141895fa5" translate="yes" xml:space="preserve">
          <source>Use this template to get the type which is returned by a digest's &lt;a href=&quot;#finish&quot;&gt;&lt;code&gt;finish&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このテンプレートを使用して、ダイジェストの&lt;a href=&quot;#finish&quot;&gt; &lt;code&gt;finish&lt;/code&gt; &lt;/a&gt;メソッドによって返されるタイプを取得します。</target>
        </trans-unit>
        <trans-unit id="f759a1693042701634c4658a13cab1e8618f57f7" translate="yes" xml:space="preserve">
          <source>Use this to check if a type is a digest. See &lt;a href=&quot;#ExampleDigest&quot;&gt;&lt;code&gt;ExampleDigest&lt;/code&gt;&lt;/a&gt; to see what a type must provide to pass this check.</source>
          <target state="translated">これを使用して、タイプがダイジェストであるかどうかを確認します。 このチェックに合格するために型が何を提供する必要があるかについては、 &lt;a href=&quot;#ExampleDigest&quot;&gt; &lt;code&gt;ExampleDigest&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc036b8b38f636a8da26f31247bb9aaf42862d52" translate="yes" xml:space="preserve">
          <source>Use this to feed the digest with data. Also implements the &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;&lt;code&gt;std.range.primitives.isOutputRange&lt;/code&gt;&lt;/a&gt; interface for &lt;code&gt;ubyte&lt;/code&gt; and &lt;code&gt;const(ubyte)[]&lt;/code&gt;.</source>
          <target state="translated">これを使用して、ダイジェストにデータを供給します。 また、 &lt;code&gt;ubyte&lt;/code&gt; および &lt;code&gt;const(ubyte)[]&lt;/code&gt; の&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt; &lt;code&gt;std.range.primitives.isOutputRange&lt;/code&gt; &lt;/a&gt;インターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="4716d195c3662fddb3b8f04d5d336c547d5e1633" translate="yes" xml:space="preserve">
          <source>Use this to feed the digest with data. Also implements the &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;&lt;code&gt;std.range.primitives.isOutputRange&lt;/code&gt;&lt;/a&gt; interface for &lt;code&gt;ubyte&lt;/code&gt; and &lt;code&gt;const(ubyte)[]&lt;/code&gt;. The following usages of &lt;code&gt;put&lt;/code&gt; must work for any type which passes &lt;a href=&quot;#isDigest&quot;&gt;&lt;code&gt;isDigest&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">これを使用して、ダイジェストにデータを供給します。 また、 &lt;code&gt;ubyte&lt;/code&gt; および &lt;code&gt;const(ubyte)[]&lt;/code&gt; の&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt; &lt;code&gt;std.range.primitives.isOutputRange&lt;/code&gt; &lt;/a&gt;インターフェースを実装します。 次の &lt;code&gt;put&lt;/code&gt; の使用法は、 &lt;a href=&quot;#isDigest&quot;&gt; &lt;code&gt;isDigest&lt;/code&gt; &lt;/a&gt;を渡すすべての型で機能する必要があります 。</target>
        </trans-unit>
        <trans-unit id="f0c5e9e55d90ec5f58114e5393a0956447e2f3df" translate="yes" xml:space="preserve">
          <source>Use tuples as ranges</source>
          <target state="translated">タプルを範囲として使用する</target>
        </trans-unit>
        <trans-unit id="27f93c20b3a083f74d82c63db067812d27ea3722" translate="yes" xml:space="preserve">
          <source>Use when we prefer the default initializer to be a literal, rather than a global immutable variable.</source>
          <target state="translated">デフォルトのイニシャライザをグローバル不変変数ではなくリテラルにしたい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="8d5ca1642ce1a35cb57a7b97089dfc54c5486ae4" translate="yes" xml:space="preserve">
          <source>Use with care as the sub-matcher won't match any &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; that have encoded length that doesn't belong to the selected set of lengths. Also the sub-matcher object references the parent matcher and must not be used past the liftetime of the latter.</source>
          <target state="translated">サブマッチャーは、選択された長さのセットに属さない、エンコードされた長さを持つ&lt;a href=&quot;#Code%20point&quot;&gt;コードポイントに&lt;/a&gt;は一致しないため、注意して使用してください。 また、サブマッチャーオブジェクトは親マッチャーを参照するため、後者のリフトタイムを超えて使用しないでください。</target>
        </trans-unit>
        <trans-unit id="83af243aeee73279b4357b44c2865c0c312de9ce" translate="yes" xml:space="preserve">
          <source>Use with care for relatively small or regular sets. It could end up being slower then just using multi-staged tables.</source>
          <target state="translated">比較的小さなセットや通常のセットには注意して使用してください。多段テーブルを使用するだけでは遅くなってしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c271740e0ce7eb2e00647fa4da41721ca1e00a1" translate="yes" xml:space="preserve">
          <source>Used as a way to import a set of functions from another scope into this one.</source>
          <target state="translated">別のスコープからこのスコープに一連の関数をインポートするために使用します。</target>
        </trans-unit>
        <trans-unit id="9aff366f8817a8d85016a5af2ffa72cb41c12ea4" translate="yes" xml:space="preserve">
          <source>Used by PRAGMA temp_store_directory</source>
          <target state="translated">PRAGMA temp_store_directoryで使用されます。</target>
        </trans-unit>
        <trans-unit id="c0d28c0a10bf62a3760e12afc8a7ed5df5261d7b" translate="yes" xml:space="preserve">
          <source>Used by StopWatch to indicate whether it should start immediately upon construction.</source>
          <target state="translated">StopWatchでは、工事中にすぐに開始するかどうかを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="d77cd63df95be5f8257fdd3b6685af113cfcac98" translate="yes" xml:space="preserve">
          <source>Used by scp/sftp to do public/private key authentication</source>
          <target state="translated">公開秘密鍵認証を行うために scpsftp が使用します。</target>
        </trans-unit>
        <trans-unit id="62d064b18e4792e174e1c38c7f164d4b65412e06" translate="yes" xml:space="preserve">
          <source>Used for empty tags</source>
          <target state="translated">空のタグに使用</target>
        </trans-unit>
        <trans-unit id="948c35e8d2024f482ef61469edc1997c031e7684" translate="yes" xml:space="preserve">
          <source>Used for end tags</source>
          <target state="translated">エンドタグに使用</target>
        </trans-unit>
        <trans-unit id="6de76570eb43640d4d9e5b45038a00acc6b2bb9d" translate="yes" xml:space="preserve">
          <source>Used for reordering elem trees to minimize register usage.</source>
          <target state="translated">レジスタの使用量を最小限に抑えるために、エレムツリーを並べ替えるために使用します。</target>
        </trans-unit>
        <trans-unit id="f4030c3289de70676f4cc6c0e214e32db123298d" translate="yes" xml:space="preserve">
          <source>Used for start tags</source>
          <target state="translated">スタートタグに使用</target>
        </trans-unit>
        <trans-unit id="522e09bb5920f3c467bc6428b962e366709a3220" translate="yes" xml:space="preserve">
          <source>Used to (re)initialize the MD5 digest.</source>
          <target state="translated">MD5 ダイジェストを(再)初期化するために使用します。</target>
        </trans-unit>
        <trans-unit id="d8ae013d8b394207c78281137c668f2dfc3c43cf" translate="yes" xml:space="preserve">
          <source>Used to (re)initialize the RIPEMD160 digest.</source>
          <target state="translated">RIPEMD160のダイジェストを(再)初期化するために使用します。</target>
        </trans-unit>
        <trans-unit id="f62bf8f2aca98cad054cf426c5476cfd425e9977" translate="yes" xml:space="preserve">
          <source>Used to check if a digest supports the &lt;code&gt;peek&lt;/code&gt; method. Peek has exactly the same function signatures as finish, but it doesn't reset the digest's internal state.</source>
          <target state="translated">ダイジェストが &lt;code&gt;peek&lt;/code&gt; メソッドをサポートしているかどうかを確認するために使用されます。 Peekは、finishとまったく同じ関数シグネチャを持っていますが、ダイジェストの内部状態をリセットしません。</target>
        </trans-unit>
        <trans-unit id="b2ca2eff17dd582e5ff65726409ecb0158897554" translate="yes" xml:space="preserve">
          <source>Used to convert a hash value (a static or dynamic array of ubytes) to a string. Can be used with the OOP and with the template API.</source>
          <target state="translated">ハッシュ値(静的または動的なバイト数の配列)を文字列に変換するために使用します。OOPとテンプレートAPIで使用できます。</target>
        </trans-unit>
        <trans-unit id="46222499a18dfe951ecc78e1c9590456d26ad7e4" translate="yes" xml:space="preserve">
          <source>Used to convert the argument to a lazy parameter.</source>
          <target state="translated">引数を遅延パラメータに変換するために使用します。</target>
        </trans-unit>
        <trans-unit id="65abc6a52a7ca50f9b90aca875b02f4b756c4a7a" translate="yes" xml:space="preserve">
          <source>Used to get the metaclass of an Objective-C class, &lt;code&gt;NSObject.Class&lt;/code&gt;.</source>
          <target state="translated">Objective-Cクラスのメタクラス &lt;code&gt;NSObject.Class&lt;/code&gt; を取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="87b79b0e524609461d16e79324d5b506d0bd2f97" translate="yes" xml:space="preserve">
          <source>Used to indicate whether &lt;code&gt;popFront&lt;/code&gt; should be called immediately upon creating a range. The idea is that for some functions used to generate a range for an interval, &lt;code&gt;front&lt;/code&gt; is not necessarily a time point which would ever be generated by the range (e.g. if the range were every Sunday within an interval, but the interval started on a Monday), so there needs to be a way to deal with that. To get the first time point in the range to match what the function generates, then use &lt;code&gt;PopFirst.yes&lt;/code&gt; to indicate that the range should have &lt;code&gt;popFront&lt;/code&gt; called on it before the range is returned so that &lt;code&gt;front&lt;/code&gt; is a time point which the function would generate. To let the first time point not match the generator function, use &lt;code&gt;PopFront.no&lt;/code&gt;.</source>
          <target state="translated">範囲を作成した直後に &lt;code&gt;popFront&lt;/code&gt; を呼び出すかどうかを示すために使用されます。 アイデアは、ある間隔の範囲を生成するために使用される一部の関数では、 &lt;code&gt;front&lt;/code&gt; は必ずしも範囲によって生成される時点ではないということです（たとえば、範囲が間隔内の毎週日曜日で、間隔が月曜日に始まった場合） ）、それに対処する方法が必要です。 関数が生成するものと一致する範囲の最初の時点を取得するには、 &lt;code&gt;PopFirst.yes&lt;/code&gt; を使用して、範囲が &lt;code&gt;popFront&lt;/code&gt; れる前にpopFront.yesでpopFrontを呼び出して、関数が生成する時点になるように範囲を返すように指示します。 最初の時点がジェネレーター関数と一致しないようにするには、 &lt;code&gt;PopFront.no&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="401f8606923b6b90d5e6990af08c1ea19653cfb5" translate="yes" xml:space="preserve">
          <source>Used to initialize the CRC32 digest.</source>
          <target state="translated">CRC32 ダイジェストの初期化に使用されます。</target>
        </trans-unit>
        <trans-unit id="9956d500692d633ff2d3c01404cd742cd7a59cd4" translate="yes" xml:space="preserve">
          <source>Used to specify the lock type for &lt;code&gt;File.lock&lt;/code&gt; and &lt;code&gt;File.tryLock&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;File.lock&lt;/code&gt; および &lt;code&gt;File.tryLock&lt;/code&gt; のロックタイプを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="063f3cd8cbb18d78d982d0fe8406f2b8aad31844" translate="yes" xml:space="preserve">
          <source>Used to work around syntactic limitations of D with regard to instantiating a template from an alias sequence (e.g. &lt;code&gt;T[0]!(...)&lt;/code&gt; is not valid) or a template returning another template (e.g. &lt;code&gt;Foo!(Bar)!(Baz)&lt;/code&gt; is not allowed).</source>
          <target state="translated">エイリアスシーケンスからテンプレートをインスタンス化すること（たとえば &lt;code&gt;T[0]!(...)&lt;/code&gt; は無効）または別のテンプレートを返すテンプレート（たとえば &lt;code&gt;Foo!(Bar)!(Baz)&lt;/code&gt; は許可されません）。</target>
        </trans-unit>
        <trans-unit id="9c84f45b498b0d39f128dcbb45ac2921760d01ee" translate="yes" xml:space="preserve">
          <source>Used when the data to be compressed is not all in one buffer.</source>
          <target state="translated">圧縮するデータが1つのバッファにまとめられていない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="5bb82bdca5155ef6b15ec62c178c8aa8ec5a96b1" translate="yes" xml:space="preserve">
          <source>Used when the data to be decompressed is not all in one buffer.</source>
          <target state="translated">解凍するデータが1つのバッファに全て入っていない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="c12660b5a95dd9583c836ce084d3eaa0c55a6813" translate="yes" xml:space="preserve">
          <source>Useful for converting the result to a string after doing operations on graphemes.</source>
          <target state="translated">グレープスキームに対する操作を行った後、結果を文字列に変換するのに便利です。</target>
        </trans-unit>
        <trans-unit id="7652b35b91d37f1b6a3e33d8a155a1f2c6064611" translate="yes" xml:space="preserve">
          <source>Useful for doing string manipulation that needs to be aware of graphemes.</source>
          <target state="translated">グレープスキームを意識する必要がある文字列操作をするのに便利です。</target>
        </trans-unit>
        <trans-unit id="314d8fb768e706877d004a50cc06fd222bca9e32" translate="yes" xml:space="preserve">
          <source>Useful for error messages</source>
          <target state="translated">エラーメッセージに便利</target>
        </trans-unit>
        <trans-unit id="6dc0953ee871790fa8f35a1a09d04c414cbf0ea7" translate="yes" xml:space="preserve">
          <source>Useful for using &lt;code&gt;foreach&lt;/code&gt; with an index loop variable:</source>
          <target state="translated">インデックスループ変数で &lt;code&gt;foreach&lt;/code&gt; を使用する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="4db4c19014a191f09a1cb0e5ee4b594d36a17fa5" translate="yes" xml:space="preserve">
          <source>Useful when a single value or multiple disconnected values must be passed to an algorithm expecting a range, without having to perform dynamic memory allocation.</source>
          <target state="translated">単一の値または複数の切断された値を、動的なメモリ割り当てを実行することなく、範囲を期待するアルゴリズムに渡さなければならない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="83a28142d94277b9f824e8d439d35c64935809cf" translate="yes" xml:space="preserve">
          <source>User Data For Functions</source>
          <target state="translated">機能のユーザデータ</target>
        </trans-unit>
        <trans-unit id="0ada253ac93105524488fa0636dd4f599ad803cd" translate="yes" xml:space="preserve">
          <source>User Datagram Protocol</source>
          <target state="translated">ユーザーデータグラムプロトコル</target>
        </trans-unit>
        <trans-unit id="663967dca54d1f5a78a7cc7579aff26c92ec0848" translate="yes" xml:space="preserve">
          <source>User Datagram Protocol level</source>
          <target state="translated">ユーザーデータグラムプロトコルレベル</target>
        </trans-unit>
        <trans-unit id="7f12f4404ca8d6331a7dda600211516b88689808" translate="yes" xml:space="preserve">
          <source>User Defined Logger</source>
          <target state="translated">ユーザー定義ロガー</target>
        </trans-unit>
        <trans-unit id="41b70159aa80a814a1c6708051f3c2cd54f55274" translate="yes" xml:space="preserve">
          <source>User defined attributes look like: @foo(args, ...) @(args, ...)</source>
          <target state="translated">ユーザ定義の属性は以下のようになります。foo(args,....)@(args,....)</target>
        </trans-unit>
        <trans-unit id="6911ae8d9122e09ba3672b9fc7a2f5a03117c4b5" translate="yes" xml:space="preserve">
          <source>User-Defined Attributes</source>
          <target state="translated">ユーザー定義属性</target>
        </trans-unit>
        <trans-unit id="53dcd43d2037ced97e920ab7c52c6c2b3f1d4b5b" translate="yes" xml:space="preserve">
          <source>User-Defined Attributes (UDA) are compile-time expressions that can be attached to a declaration. These attributes can then be queried, extracted, and manipulated at compile time. There is no runtime component to them.</source>
          <target state="translated">ユーザー定義属性(UDA)は、宣言にアタッチできるコンパイル時の式です。これらの属性は、コンパイル時に問い合わせ、抽出、操作することができます。これらの属性にはランタイムコンポーネントはありません。</target>
        </trans-unit>
        <trans-unit id="79c69632c5bdcde773a2213887dfa8de28b97fcd" translate="yes" xml:space="preserve">
          <source>User-Defined Attributes for Parameters</source>
          <target state="translated">パラメータのユーザー定義属性</target>
        </trans-unit>
        <trans-unit id="f97038e5aef05b8d6da775ac91f3df3186383a15" translate="yes" xml:space="preserve">
          <source>User-Defined Properties</source>
          <target state="translated">ユーザー定義プロパティ</target>
        </trans-unit>
        <trans-unit id="a481ec805686b1111f45e923c0482b9b383bb80f" translate="yes" xml:space="preserve">
          <source>User-Defined Types</source>
          <target state="translated">ユーザー定義タイプ</target>
        </trans-unit>
        <trans-unit id="df398272c254dd9772b28c77026104de0cb4813e" translate="yes" xml:space="preserve">
          <source>User-defined properties can be created using &lt;a href=&quot;function#property-functions&quot;&gt;Property Functions&lt;/a&gt;.</source>
          <target state="translated">ユーザー定義プロパティは、 &lt;a href=&quot;function#property-functions&quot;&gt;プロパティ関数&lt;/a&gt;を使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="ad57ad15c0703a0e0107ec919b23c65c4cb01b03" translate="yes" xml:space="preserve">
          <source>User-defined type names</source>
          <target state="translated">ユーザー定義型名</target>
        </trans-unit>
        <trans-unit id="e276f7847775a88fc2abcad4667b89c9759a4155" translate="yes" xml:space="preserve">
          <source>User-defined types that support comparison with &amp;lt; are supported.</source>
          <target state="translated">&amp;lt;との比較をサポートするユーザー定義型がサポートされています。</target>
        </trans-unit>
        <trans-unit id="e23e2a8ab594792759d1b60610fa3c8b02dd3e4d" translate="yes" xml:space="preserve">
          <source>User-provided store backing up the region. If &lt;code&gt; ParentAllocator&lt;/code&gt; is different from &lt;a href=&quot;std_experimental_allocator_building_blocks_null_allocator#NullAllocator&quot;&gt;&lt;code&gt;NullAllocator&lt;/code&gt;&lt;/a&gt;, memory is assumed to have been allocated with &lt;code&gt;ParentAllocator&lt;/code&gt;.</source>
          <target state="translated">リージョンをバックアップするユーザー提供のストア。 &lt;code&gt; ParentAllocator&lt;/code&gt; がNullAllocatorと異なる場合、メモリは&lt;a href=&quot;std_experimental_allocator_building_blocks_null_allocator#NullAllocator&quot;&gt; &lt;code&gt;NullAllocator&lt;/code&gt; &lt;/a&gt;で割り当てられたと &lt;code&gt;ParentAllocator&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5092e979a5a593d67b4e82f9d2bbd095571e3d50" translate="yes" xml:space="preserve">
          <source>User-provided store backing up the region. If &lt;code&gt;ParentAllocator&lt;/code&gt; is different from &lt;a href=&quot;std_experimental_allocator_building_blocks_null_allocator#NullAllocator&quot;&gt;&lt;code&gt;NullAllocator&lt;/code&gt;&lt;/a&gt;, memory is assumed to have been allocated with &lt;code&gt;ParentAllocator&lt;/code&gt;.</source>
          <target state="translated">リージョンをバックアップするユーザー提供のストア。 &lt;code&gt;ParentAllocator&lt;/code&gt; がNullAllocatorと異なる場合、メモリは&lt;a href=&quot;std_experimental_allocator_building_blocks_null_allocator#NullAllocator&quot;&gt; &lt;code&gt;NullAllocator&lt;/code&gt; &lt;/a&gt;で割り当てられたと &lt;code&gt;ParentAllocator&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e82338a943d21a1789251b44a5bd82afdadd9523" translate="yes" xml:space="preserve">
          <source>Users should prefer &lt;a href=&quot;object#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; to explicitly finalize objects, and only resort to &lt;a href=&quot;core_memory#_delete&quot;&gt;&lt;code&gt;core.memory._delete&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;object_#destroy&quot;&gt;&lt;code&gt;object.destroy&lt;/code&gt;&lt;/a&gt; wouldn't be a feasible option.</source>
          <target state="translated">ユーザーは、オブジェクトを明示的にファイナライズ&lt;a href=&quot;object#destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;core_memory#_delete&quot;&gt; &lt;code&gt;core.memory._delete&lt;/code&gt; &lt;/a&gt; 、 &lt;a href=&quot;object_#destroy&quot;&gt; &lt;code&gt;object.destroy&lt;/code&gt; &lt;/a&gt;が実現可能なオプションではない場合にのみcore.memory._deleteに頼る必要があります。</target>
        </trans-unit>
        <trans-unit id="b4005d61c7d8ff0cb653333de46ae3789f1d31fe" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;http://man7.org/linux/man-pages/man3/posix_memalign.3.html&quot;&gt; &lt;code&gt;posix_memalign&lt;/code&gt;&lt;/a&gt; on Posix and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/8z34s9c6(v=vs.80).aspx&quot;&gt; &lt;code&gt;__aligned_malloc&lt;/code&gt;&lt;/a&gt; on Windows.</source>
          <target state="translated">Posixでは&lt;a href=&quot;http://man7.org/linux/man-pages/man3/posix_memalign.3.html&quot;&gt; &lt;code&gt;posix_memalign&lt;/code&gt; &lt;/a&gt; 、Windowsでは&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/8z34s9c6(v=vs.80).aspx&quot;&gt; &lt;code&gt;__aligned_malloc&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="431691e401faf58fb8c19131908c69ff710b059d" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_BOOTTIME&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_BOOTTIME&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="5a50d919e60bef0f60af91bbb8d114a0afe4665d" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_MONOTONIC_RAW&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_MONOTONIC_RAW&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="668062aef7777a80761a341372c3e3e366c83d67" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_PROCESS_CPUTIME_ID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_PROCESS_CPUTIME_ID&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="8b6a765f3682873a0a6c777b9f9c93d6e30d47aa" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_THREAD_CPUTIME_ID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_THREAD_CPUTIME_ID&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a32c41537d0762601fcb3b8547ba1c5f0e90c61b" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_UPTIME&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_UPTIME&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="d155d55219e59719f96afbc402b6fce30fe7decd" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_UPTIME_FAST&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_UPTIME_FAST&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="32cbdb3659578d385f11021d0324dc0968ef7d2b" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;CLOCK_UPTIME_PRECISE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLOCK_UPTIME_PRECISE&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="21b474dd996ab465a4609dacd8af3f0c2c6b9e0a" translate="yes" xml:space="preserve">
          <source>Uses Horner's rule A(x) = a&lt;sub&gt;0&lt;/sub&gt; + x(a&lt;sub&gt;1&lt;/sub&gt; + x(a&lt;sub&gt;2&lt;/sub&gt; + x(a&lt;sub&gt;3&lt;/sub&gt; + ...)))</source>
          <target state="translated">ホーナーの法則A（x）= a &lt;sub&gt;0&lt;/sub&gt; + x（a &lt;sub&gt;1&lt;/sub&gt; + x（a &lt;sub&gt;2&lt;/sub&gt; + x（a &lt;sub&gt;3&lt;/sub&gt; + ...）））を使用</target>
        </trans-unit>
        <trans-unit id="89865df2ae553e13ce078a7680590fe066489642" translate="yes" xml:space="preserve">
          <source>Uses OS features not supported on host</source>
          <target state="translated">ホストでサポートされていないOSの機能を使用</target>
        </trans-unit>
        <trans-unit id="d43174ab3f2c7ceb67637889035614b690710449" translate="yes" xml:space="preserve">
          <source>Uses a clock that has a precision of one second (contrast to the coarse clock, which has sub-second precision like the normal clock does).</source>
          <target state="translated">1秒の精度を持つ時計を使用しています(通常の時計のように1秒以下の精度を持つ粗い時計とは対照的です)。</target>
        </trans-unit>
        <trans-unit id="660abbaeae3754fa828725fdd746d4c8c7d904f7" translate="yes" xml:space="preserve">
          <source>Uses a more precise clock than the normal one (which is already very precise), but it takes longer to get the time. Similarly to &lt;code&gt;ClockType.coarse&lt;/code&gt;, if it's used on a system that does not support a more precise clock than the normal one, it's treated as equivalent to &lt;code&gt;ClockType.normal&lt;/code&gt;.</source>
          <target state="translated">通常の時計（既に非常に正確な時計）よりも正確な時計を使用しますが、時間の取得に時間がかかります。 &lt;code&gt;ClockType.coarse&lt;/code&gt; と同様に、通常のクロックよりも正確なクロックをサポートしていないシステムで使用された場合、 &lt;code&gt;ClockType.normal&lt;/code&gt; と同等として扱われます。</target>
        </trans-unit>
        <trans-unit id="4810f4cffe0fe4e539877249a5f80a146a9437e8" translate="yes" xml:space="preserve">
          <source>Uses an algorithm based on TOMS748, which uses inverse cubic interpolation whenever possible, otherwise reverting to parabolic or secant interpolation. Compared to TOMS748, this implementation improves worst-case performance by a factor of more than 100, and typical performance by a factor of 2. For 80-bit reals, most problems require 8 to 15 calls to &lt;code&gt;f(x)&lt;/code&gt; to achieve full machine precision. The worst-case performance (pathological cases) is approximately twice the number of bits.</source>
          <target state="translated">TOMS748に基づくアルゴリズムを使用します。これは、可能な場合は常に逆3次補間を使用します。それ以外の場合は、放物線または割線補間に戻ります。 TOMS748と比較して、この実装はワーストケースのパフォーマンスを100倍以上、通常のパフォーマンスを2倍改善します。80ビットの実数の場合、完全なマシンを実現するには、ほとんどの問題で &lt;code&gt;f(x)&lt;/code&gt; を8〜15回呼び出す必要があります。精度。 ワーストケースのパフォーマンス（病理学的ケース）は、ビット数の約2倍です。</target>
        </trans-unit>
        <trans-unit id="4498cdd81a3af92be5d71f0feb7499f91526eda6" translate="yes" xml:space="preserve">
          <source>Uses static address range/handler tables. It is not compatible with the ELF/Mach-O exception handling tables. The stack is walked assuming it uses the EBP/RBP stack frame convention. The EBP/RBP convention must be used for every function that has an associated EH (Exception Handler) table.</source>
          <target state="translated">静的なアドレスレンジハンドラテーブルを使用します。ELFMach-Oの例外処理テーブルとは互換性がありません。スタックは、EBPRBPスタックフレーム規則を使用していると仮定してウォークされます。EBPRBP規約は、関連するEH(例外ハンドラ)テーブルを持つすべての関数で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="29fa78ad0c4fcffa6a248e751ed5f9b54e278c81" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;delete&lt;/code&gt; to free memory not allocated by the garbage collector.</source>
          <target state="translated">ガベージコレクターによって割り当てられていないメモリを &lt;code&gt;delete&lt;/code&gt; ための削除の使用。</target>
        </trans-unit>
        <trans-unit id="dbc2fb498947c6d15c4f030eec28a604eed13c66" translate="yes" xml:space="preserve">
          <source>Using Allocators without &lt;code&gt;IAllocator&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IAllocator&lt;/code&gt; なしでアロケーターを使用する</target>
        </trans-unit>
        <trans-unit id="f74c7aa68c43b38fd906d3d9eab694820f7c02be" translate="yes" xml:space="preserve">
          <source>Using C++ Classes From D</source>
          <target state="translated">DからのC++クラスの使用</target>
        </trans-unit>
        <trans-unit id="5d2653c4926bb52d976ff78e98c04428994e66ea" translate="yes" xml:space="preserve">
          <source>Using Classes as the KeyType</source>
          <target state="translated">クラスをKeyTypeとして使う</target>
        </trans-unit>
        <trans-unit id="42a76c4e6e5c83e56266b53307bd6eb59b5b616d" translate="yes" xml:space="preserve">
          <source>Using D Classes From C++</source>
          <target state="translated">C++からDクラスを使う</target>
        </trans-unit>
        <trans-unit id="5de7af94f529ff0a340538c931f4aeeba8137b89" translate="yes" xml:space="preserve">
          <source>Using Ddoc for other Documentation</source>
          <target state="translated">Ddoc を他のドキュメントに使う</target>
        </trans-unit>
        <trans-unit id="a452f39b71d34befc0278e622c50c8e1b7016ce7" translate="yes" xml:space="preserve">
          <source>Using Ddoc to generate examples from unit tests</source>
          <target state="translated">ユニットテストからサンプルを生成するための Ddoc の使用</target>
        </trans-unit>
        <trans-unit id="ffcf84b5292979d6d33051f4fd30a1a26f6708e4" translate="yes" xml:space="preserve">
          <source>Using Existing C Libraries</source>
          <target state="translated">既存の C ライブラリの使用</target>
        </trans-unit>
        <trans-unit id="ca7da0d401d332ac17ab9ac27d6baa37cb6bed49" translate="yes" xml:space="preserve">
          <source>Using Structs or Unions as the KeyType</source>
          <target state="translated">構造体やユニオンをKeyTypeとして使用する</target>
        </trans-unit>
        <trans-unit id="ac95e41bbb29ad991114a19ec2ec8a9eb2e7d8d1" translate="yes" xml:space="preserve">
          <source>Using UUIDs</source>
          <target state="translated">UUIDの使用</target>
        </trans-unit>
        <trans-unit id="5fa5d3e48800cfb7875c91e382ef8e4590ba92ea" translate="yes" xml:space="preserve">
          <source>Using a struct with modified delimiter:</source>
          <target state="translated">区切り文字を変更した構造体を使用しています。</target>
        </trans-unit>
        <trans-unit id="04602bc03bbc945a58891e81ee57c8cb19c96764" translate="yes" xml:space="preserve">
          <source>Using alias template parameter in &lt;code&gt;how&lt;/code&gt; and/or &lt;code&gt;what&lt;/code&gt; may cause strange compile error. Use template tuple parameter instead to workaround this problem. [&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=4217&quot;&gt;Bugzilla 4217&lt;/a&gt;]</source>
          <target state="translated">&lt;code&gt;how&lt;/code&gt; および/または &lt;code&gt;what&lt;/code&gt; でエイリアステンプレートパラメーターを使用すると、奇妙なコンパイルエラーが発生する可能性があります。 この問題を回避するには、代わりにテンプレートタプルパラメータを使用してください。 [ &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=4217&quot;&gt;Bugzilla 4217&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a2607c615db72ef7bb05726a2cf4b245712b98a0" translate="yes" xml:space="preserve">
          <source>Using an uninitialized struct-based container will work, because the struct intializes itself upon use; however, up to this point the container will not have an identity and assignment does not create two references to the same data.</source>
          <target state="translated">初期化されていない構造体ベースのコンテナを使用すると、構造体は使用時にそれ自身を初期化するため、機能します。しかし、この時点まではコンテナは ID を持たず、代入によって同じデータへの 2 つの参照が作成されることはありません。</target>
        </trans-unit>
        <trans-unit id="35a44b902e18d805798c2c1e89fd00d153fbd20b" translate="yes" xml:space="preserve">
          <source>Using asNormalizedPath on empty paths will always return an empty path.</source>
          <target state="translated">空のパスで asNormalizedPath を使用すると、常に空のパスが返されます。</target>
        </trans-unit>
        <trans-unit id="0290f4a41ecd4a75dc3439f50553b7b4b3cab521" translate="yes" xml:space="preserve">
          <source>Using buildNormalizedPath on null paths will always return null.</source>
          <target state="translated">nullパスでbuildNormalizedPathを使用すると、常にnullを返します。</target>
        </trans-unit>
        <trans-unit id="6805f8dde5047fa0a76de0b0a48672e08cbc9fdb" translate="yes" xml:space="preserve">
          <source>Using builtin &lt;code&gt;typeof&lt;/code&gt; on a property function yields the types of the property value, not of the property function itself. Still, &lt;code&gt;FunctionTypeOf&lt;/code&gt; is able to obtain function types of properties.</source>
          <target state="translated">プロパティ関数で組み込みの &lt;code&gt;typeof&lt;/code&gt; を使用すると、プロパティ関数自体ではなく、プロパティ値のタイプが得られます。 それでも、 &lt;code&gt;FunctionTypeOf&lt;/code&gt; はプロパティの関数タイプを取得できます。</target>
        </trans-unit>
        <trans-unit id="7eb690c3ef3a1529c909411cf3d35c20b241fbf3" translate="yes" xml:space="preserve">
          <source>Using exceptions to handle errors leads to another issue - how to write exception safe programs. &lt;a href=&quot;https://dlang.org/exception-safe.html&quot;&gt;Here's how&lt;/a&gt;.</source>
          <target state="translated">例外を使用してエラーを処理すると、別の問題が発生します-例外安全なプログラムの作成方法。 &lt;a href=&quot;https://dlang.org/exception-safe.html&quot;&gt;方法は次のとおり&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="48badfbf8cc430bc5e24fa5412476d41eda3ceaf" translate="yes" xml:space="preserve">
          <source>Using functions and more types than the template:</source>
          <target state="translated">関数を使ったり、テンプレートよりも多くの型を使ったり。</target>
        </trans-unit>
        <trans-unit id="4eca2488380272881b9de30c76f64561c55803ca" translate="yes" xml:space="preserve">
          <source>Using group, an associative array can be easily generated with the count of each unique element in the range.</source>
          <target state="translated">groupを使うと、範囲内の各ユニークな要素をカウントした連想配列を簡単に生成することができます。</target>
        </trans-unit>
        <trans-unit id="e894da306300d7264b04f9bbeb317a07ad4c4216" translate="yes" xml:space="preserve">
          <source>Using the above flag, the linker will search in the standard framework paths. The standard search paths for frameworks are:</source>
          <target state="translated">上記のフラグを使用すると、リンカは標準のフレームワーク・パスで検索します。フレームワークの標準的な検索パスは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e137a8793cb9aa11c5797755fd5b985067bcda9f" translate="yes" xml:space="preserve">
          <source>Using the range returned by this function in a parallel foreach loop will not work because buffers may be overwritten while the task that processes them is in queue. This is checked for at compile time and will result in a static assertion failure.</source>
          <target state="translated">この関数が返す範囲を並列 foreach ループで使用すると、それらを処理するタスクがキューに入っている間にバッファが上書きされる可能性があるため、動作しません。これはコンパイル時にチェックされ、静的アサーションの失敗につながります。</target>
        </trans-unit>
        <trans-unit id="b6ed578893f11c816c086498ada4c56ae14083de" translate="yes" xml:space="preserve">
          <source>Using this delegate allows iteration over successive time points which are all the same day of the week. e.g. passing &lt;code&gt;DayOfWeek.mon&lt;/code&gt; to &lt;code&gt;everyDayOfWeek&lt;/code&gt; would result in a delegate which could be used to iterate over all of the Mondays in a range.</source>
          <target state="translated">このデリゲートを使用すると、すべて同じ曜日である連続した時点で反復を行うことができます。 たとえば、 &lt;code&gt;DayOfWeek.mon&lt;/code&gt; を &lt;code&gt;everyDayOfWeek&lt;/code&gt; に渡すと、デリゲートが生成され、範囲内のすべての月曜日を反復するために使用できます。</target>
        </trans-unit>
        <trans-unit id="01e4a295ee1f89ba313532d06753451f037e5d2d" translate="yes" xml:space="preserve">
          <source>Using this delegate allows iteration over successive time points which are apart by the given duration e.g. passing &lt;code&gt;dur!&quot;days&quot;(3)&lt;/code&gt; to &lt;code&gt;everyDuration&lt;/code&gt; would result in a delegate which could be used to iterate over a range of days which are each 3 days apart.</source>
          <target state="translated">このデリゲートを使用すると、与えられた期間だけ離れている連続する時点での反復が可能になります &lt;code&gt;dur!&quot;days&quot;(3)&lt;/code&gt; たとえば、 dur！ &quot;days&quot;（3）を &lt;code&gt;everyDuration&lt;/code&gt; に渡すと、デリゲートが生成され、それぞれ3日間隔の日数の範囲で反復できます。 。</target>
        </trans-unit>
        <trans-unit id="c6ec51f5ced2a1c1be894f86e670f88f6e1b3f63" translate="yes" xml:space="preserve">
          <source>Using this module is not necessary in typical D code. It is mostly useful when doing low-level memory management.</source>
          <target state="translated">このモジュールを使用することは、典型的なDコードでは必要ありません。低レベルのメモリ管理を行う場合に便利です。</target>
        </trans-unit>
        <trans-unit id="631bc23f5ec2b24f0267b7cee38a13c6b70e0b32" translate="yes" xml:space="preserve">
          <source>Using unit tests in conjuction with coverage testing (such as &lt;a href=&quot;https://dlang.org/dmd.html#switch-cov&quot;&gt;&lt;b&gt;-cov&lt;/b&gt;&lt;/a&gt;) is effective.</source>
          <target state="translated">単体テストとカバレッジテスト（ &lt;a href=&quot;https://dlang.org/dmd.html#switch-cov&quot;&gt;&lt;b&gt;-cov&lt;/b&gt;&lt;/a&gt;など）を&lt;b&gt;併用する&lt;/b&gt;と効果的です。</target>
        </trans-unit>
        <trans-unit id="d387cfce482bd0157645391025dc0dab84b81bed" translate="yes" xml:space="preserve">
          <source>Using with void handlers:</source>
          <target state="translated">void ハンドラとの併用。</target>
        </trans-unit>
        <trans-unit id="9d57966a5fe4d9e61b9bd2b025a52cea4116ac88" translate="yes" xml:space="preserve">
          <source>Usual Arithmetic Conversions</source>
          <target state="translated">通常の算術変換</target>
        </trans-unit>
        <trans-unit id="375fab11fc70c98c677eac17e0744c53564be0ee" translate="yes" xml:space="preserve">
          <source>Usual decimal notation</source>
          <target state="translated">通常の10進表記法</target>
        </trans-unit>
        <trans-unit id="189e13a83ee98c7852ba58517289e900a3678612" translate="yes" xml:space="preserve">
          <source>Usually &lt;code&gt;CAllocatorImpl&lt;/code&gt; is used indirectly by calling &lt;a href=&quot;#theAllocator&quot;&gt;&lt;code&gt;theAllocator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;CAllocatorImpl&lt;/code&gt; はtheAllocatorを呼び出すことで間接的に使用されます。</target>
        </trans-unit>
        <trans-unit id="5a3ab50d8476aca67a9de9d6b2f04749ce4d85ba" translate="yes" xml:space="preserve">
          <source>Usually &lt;code&gt;CSharedAllocatorImpl&lt;/code&gt; is used indirectly by calling &lt;a href=&quot;#processAllocator&quot;&gt;&lt;code&gt;processAllocator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;CSharedAllocatorImpl&lt;/code&gt; は、 &lt;a href=&quot;#processAllocator&quot;&gt; &lt;code&gt;processAllocator&lt;/code&gt; &lt;/a&gt;を呼び出すことによって間接的に使用されます。</target>
        </trans-unit>
        <trans-unit id="fcec0c4180b39c4ca2dae249c28eee53727aacb0" translate="yes" xml:space="preserve">
          <source>Usually one would use &lt;code&gt;expression.checkDeprecated(scope, aliasthis)&lt;/code&gt; to check if &lt;code&gt;expression&lt;/code&gt; uses a deprecated &lt;code&gt;aliasthis&lt;/code&gt;, but this calls &lt;code&gt;toPrettyChars&lt;/code&gt; which lead to the following message: &quot;Deprecation: alias this &lt;code&gt;fullyqualified.aggregate.__anonymous&lt;/code&gt; is deprecated&quot;</source>
          <target state="translated">通常 &lt;code&gt;expression.checkDeprecated(scope, aliasthis)&lt;/code&gt; を使用して、 &lt;code&gt;expression&lt;/code&gt; が非推奨の &lt;code&gt;aliasthis&lt;/code&gt; を使用しているかどうかを確認しますが、これにより 、 PrettyCharsが呼び出され、次のメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="56e90d07707b3458a805a4bacd63daec2c432b02" translate="yes" xml:space="preserve">
          <source>Utf8Matcher</source>
          <target state="translated">Utf8Matcher</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="7ad38c788cc45a5074b9ffb9432c47c67a220b54" translate="yes" xml:space="preserve">
          <source>Utilities for manipulating files and scanning directories. Functions in this module handle files as a unit, e.g., read or write one file at a time. For opening files and manipulating them via handles refer to module &lt;a href=&quot;std_stdio&quot;&gt;&lt;code&gt;std.stdio&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルを操作し、ディレクトリをスキャンするためのユーティリティ。 このモジュールの関数は、ファイルを1つの単位として扱います。たとえば、一度に1つのファイルを読み書きします。 ファイルを開いてハンドルで操作する方法については、モジュール&lt;a href=&quot;std_stdio&quot;&gt; &lt;code&gt;std.stdio&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5cb76eeaae4889cbc133d348ffc75221ffb8b4b7" translate="yes" xml:space="preserve">
          <source>Utility and ancillary artifacts of &lt;code&gt;std.experimental.allocator&lt;/code&gt;. This module shouldn't be used directly; its functionality will be migrated into more appropriate parts of &lt;code&gt;std&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std.experimental.allocator&lt;/code&gt; のユーティリティおよび補助アーティファクト。 このモジュールは直接使用しないでください。 その機能は &lt;code&gt;std&lt;/code&gt; のより適切な部分に移行されます。</target>
        </trans-unit>
        <trans-unit id="b9867d3a9c49162da041043a50cf7008b982e4ef" translate="yes" xml:space="preserve">
          <source>Utility to build a function call out of this reference and argument.</source>
          <target state="translated">この参照と引数から関数呼び出しをビルドするユーティリティ。</target>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="6cf0c0c7f5bb0a5a5c7282f8cd30993e76deb2f0" translate="yes" xml:space="preserve">
          <source>V &lt;code&gt;exchangeWith&lt;/code&gt;</source>
          <target state="translated">V &lt;code&gt;exchangeWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="996b87ed0fe8487bff29a2dec4722ab527ea5a40" translate="yes" xml:space="preserve">
          <source>V &lt;code&gt;maxAbsDiff&lt;/code&gt;</source>
          <target state="translated">V &lt;code&gt;maxAbsDiff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58e6f841de246b5933aae9d3dc5868627507c120" translate="yes" xml:space="preserve">
          <source>V &lt;code&gt;maxRelDiff&lt;/code&gt;</source>
          <target state="translated">V &lt;code&gt;maxRelDiff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebf6b2708f752f3849720cb5f4bb150990c142ea" translate="yes" xml:space="preserve">
          <source>V &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">V &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7aa9428cf99ed21c9b2d50259bb210fc9c6653b" translate="yes" xml:space="preserve">
          <source>V &lt;strong id=&quot;loadUnaligned&quot;&gt;loadUnaligned&lt;/strong&gt;(V)(const V* p)</source>
          <target state="translated">V &lt;strong id=&quot;loadUnaligned&quot;&gt;loadUnaligned&lt;/strong&gt; （V）（const V * p）</target>
        </trans-unit>
        <trans-unit id="ea4bf31a65b803e6d5e8754862432a804bcf1f21" translate="yes" xml:space="preserve">
          <source>V &lt;strong id=&quot;storeUnaligned&quot;&gt;storeUnaligned&lt;/strong&gt;(V)(V* p, V value)</source>
          <target state="translated">V &lt;strong id=&quot;storeUnaligned&quot;&gt;storeUnaligned&lt;/strong&gt; （V）（V * p、V value）</target>
        </trans-unit>
        <trans-unit id="942a90c9bec88d5207a1a5060881571e2b1fe393" translate="yes" xml:space="preserve">
          <source>V* &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">V * &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3bd3be2bbc21bec248542658e53653f18b36f05" translate="yes" xml:space="preserve">
          <source>V1 &lt;code&gt;ifThis&lt;/code&gt;</source>
          <target state="translated">V1 &lt;code&gt;ifThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="049a85cf151f96bcc540c68c5cd2d1eea3c1509d" translate="yes" xml:space="preserve">
          <source>V1 &lt;code&gt;mod&lt;/code&gt;</source>
          <target state="translated">V1 &lt;code&gt;mod&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4053c68a54663b4758120d92e86ef8bfc8c214a" translate="yes" xml:space="preserve">
          <source>V1 &lt;code&gt;newval&lt;/code&gt;</source>
          <target state="translated">V1 &lt;code&gt;newval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e0d2c6ab8c00acf411a44e6002c81ee87fc3e301" translate="yes" xml:space="preserve">
          <source>V1* &lt;code&gt;ifThis&lt;/code&gt;</source>
          <target state="translated">V1 * &lt;code&gt;ifThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40135827f1648afd73698821e7495e8c2df48b20" translate="yes" xml:space="preserve">
          <source>V2 &lt;code&gt;writeThis&lt;/code&gt;</source>
          <target state="translated">V2 &lt;code&gt;writeThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="025198e42a319f7e1b7d4e566d6832369521d744" translate="yes" xml:space="preserve">
          <source>VFS only</source>
          <target state="translated">VFSのみ</target>
        </trans-unit>
        <trans-unit id="76bc45e6071b6bf840834c3190d06cac0f7b7fac" translate="yes" xml:space="preserve">
          <source>V[K] &lt;code&gt;aa&lt;/code&gt;</source>
          <target state="translated">V [K] &lt;code&gt;aa&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84f91d8df4169488a6e5b0c8d99b4bcf85ff79ce" translate="yes" xml:space="preserve">
          <source>V[K] &lt;strong id=&quot;dup&quot;&gt;dup&lt;/strong&gt;(T : V[K], K, V)(T aa);</source>
          <target state="translated">V [K] &lt;strong id=&quot;dup&quot;&gt;dup&lt;/strong&gt; （T：V [K]、K、V）（T aa）;</target>
        </trans-unit>
        <trans-unit id="4f374392fc8216fb266b35c7afa3c5383908a973" translate="yes" xml:space="preserve">
          <source>Vai</source>
          <target state="translated">Vai</target>
        </trans-unit>
        <trans-unit id="83f96f97d6bbb741686c832649fe36d1655e12f1" translate="yes" xml:space="preserve">
          <source>Validates an email address according to RFCs 5321, 5322 and others.</source>
          <target state="translated">RFC5321、5322などに準拠したメールアドレスを検証します。</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="cde694e20f6f1970e02f61b4fe4c250aab2573eb" translate="yes" xml:space="preserve">
          <source>Value &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">値 &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40e4777c3c9339aee0e1471542316f607e20c0b4" translate="yes" xml:space="preserve">
          <source>Value getter for &lt;code&gt;JSONType.array&lt;/code&gt;. Unlike &lt;code&gt;array&lt;/code&gt;, this retrieves the array by value and can be used in @safe code.</source>
          <target state="translated">&lt;code&gt;JSONType.array&lt;/code&gt; の値ゲッター。 &lt;code&gt;array&lt;/code&gt; とは異なり、これは値によって配列を取得し、@ safeコードで使用できます。</target>
        </trans-unit>
        <trans-unit id="debaeee666e351d6eab3b4f3c90b3aa9118a0ea0" translate="yes" xml:space="preserve">
          <source>Value getter for &lt;code&gt;JSONType.object&lt;/code&gt;. Unlike &lt;code&gt;object&lt;/code&gt;, this retrieves the object by value and can be used in @safe code.</source>
          <target state="translated">&lt;code&gt;JSONType.object&lt;/code&gt; の値ゲッター。 &lt;code&gt;object&lt;/code&gt; とは異なり、これは値によってオブジェクトを取得し、@ safeコードで使用できます。</target>
        </trans-unit>
        <trans-unit id="0d34b60081d5920e95d26de3b14e5976c483a6c8" translate="yes" xml:space="preserve">
          <source>Value getter/setter for &lt;code&gt;JSONType.array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONType.array&lt;/code&gt; の値ゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="06d88a23659d2106a272fc3c2a0cbf425061e548" translate="yes" xml:space="preserve">
          <source>Value getter/setter for &lt;code&gt;JSONType.float_&lt;/code&gt;. Note that despite the name, this is a &lt;b&gt;64&lt;/b&gt;-bit &lt;code&gt;double&lt;/code&gt;, not a 32-bit &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONType.float_&lt;/code&gt; の値ゲッター/セッター。 名前にもかかわらず、これは&lt;b&gt;64&lt;/b&gt;ビット &lt;code&gt;double&lt;/code&gt; であり、32ビット &lt;code&gt;float&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="682193cf221d6f67ac3388d98af6c6643d6280c0" translate="yes" xml:space="preserve">
          <source>Value getter/setter for &lt;code&gt;JSONType.integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONType.integer&lt;/code&gt; の値ゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="b856cf95a7918cf8c4713730d8144e2773a78ad5" translate="yes" xml:space="preserve">
          <source>Value getter/setter for &lt;code&gt;JSONType.object&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONType.object&lt;/code&gt; の値ゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="f77315c89ea8901db907f7202a186401d954a3ab" translate="yes" xml:space="preserve">
          <source>Value getter/setter for &lt;code&gt;JSONType.string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONType.string&lt;/code&gt; の値ゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="04d25aeadd95822d75f9e6c63a59113dd6ae997a" translate="yes" xml:space="preserve">
          <source>Value getter/setter for &lt;code&gt;JSONType.uinteger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSONType.uinteger&lt;/code&gt; の値ゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="c903c7f6e0c9717a3204ee2e6392ffb91a1e532e" translate="yes" xml:space="preserve">
          <source>Value getter/setter for boolean stored in JSON.</source>
          <target state="translated">JSONに格納されたブール値のゲッターセッター。</target>
        </trans-unit>
        <trans-unit id="f6a96ca6f671cd62067e2694b2efd9807e5523cb" translate="yes" xml:space="preserve">
          <source>Value of &lt;code&gt;f(ax)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f(ax)&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="6f84944c7f8eab7774fddf4925d08c76461c466b" translate="yes" xml:space="preserve">
          <source>Value of &lt;code&gt;f(bx)&lt;/code&gt;. &lt;code&gt;fax&lt;/code&gt; and &lt;code&gt;fbx&lt;/code&gt; should have opposite signs. (&lt;code&gt;f(ax)&lt;/code&gt; and &lt;code&gt;f(bx)&lt;/code&gt; are commonly known in advance.)</source>
          <target state="translated">&lt;code&gt;f(bx)&lt;/code&gt; の値。 &lt;code&gt;fax&lt;/code&gt; と &lt;code&gt;fbx&lt;/code&gt; には反対の符号が必要です。 （ &lt;code&gt;f(ax)&lt;/code&gt; と &lt;code&gt;f(bx)&lt;/code&gt; は一般に事前に知られています。）</target>
        </trans-unit>
        <trans-unit id="d1610fa402b56db1bc6c44e14091878669be03b2" translate="yes" xml:space="preserve">
          <source>Value that collectExceptionMsg returns when it catches an exception with an empty exception message.</source>
          <target state="translated">空の例外メッセージで例外をキャッチした場合に collectExceptionMsg が返す値。</target>
        </trans-unit>
        <trans-unit id="640fc9d1038f173d9ff4e515bd951053c5419590" translate="yes" xml:space="preserve">
          <source>Value to return from &lt;code&gt;onSend&lt;/code&gt;/&lt;code&gt;onReceive&lt;/code&gt; delegates in order to pause a request</source>
          <target state="translated">リクエストを一時停止するために &lt;code&gt;onSend&lt;/code&gt; / &lt;code&gt;onReceive&lt;/code&gt; デリゲートから返す値</target>
        </trans-unit>
        <trans-unit id="436caeedb105a260006f5d9f53f71e6eb7af184e" translate="yes" xml:space="preserve">
          <source>Value to return from onSend delegate in order to abort a request</source>
          <target state="translated">リクエストを中止するために onSend デリゲートから返す値</target>
        </trans-unit>
        <trans-unit id="ed85e45d389cbb4acbbfe9be4b8d5516228b0f43" translate="yes" xml:space="preserve">
          <source>Value type demonstration</source>
          <target state="translated">値の種類のデモ</target>
        </trans-unit>
        <trans-unit id="ad0bdabc6c843c169a4bd7ec05f40c7999e6699f" translate="yes" xml:space="preserve">
          <source>Value value</source>
          <target state="translated">値の値</target>
        </trans-unit>
        <trans-unit id="5fb5308fe6160bec01a01fc2fea5f665d1701122" translate="yes" xml:space="preserve">
          <source>ValueSeq</source>
          <target state="translated">ValueSeq</target>
        </trans-unit>
        <trans-unit id="cff7efaccf1f82a33020670f421492cb87dbc329" translate="yes" xml:space="preserve">
          <source>Values &lt;code&gt;values&lt;/code&gt;</source>
          <target state="translated">値 &lt;code&gt;values&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e66a2fd88968dd1905cd7e88ccfa7f4decf710b7" translate="yes" xml:space="preserve">
          <source>Values for Tflags:</source>
          <target state="translated">Tflagsの値。</target>
        </trans-unit>
        <trans-unit id="d65dbad78909b2a5a1065f983fcd9dc730699c3f" translate="yes" xml:space="preserve">
          <source>Values representing all properties for floating point types</source>
          <target state="translated">浮動小数点型のすべてのプロパティを表す値</target>
        </trans-unit>
        <trans-unit id="f93686df732b3fd8135c18d6d396b9ab2d76ddbc" translate="yes" xml:space="preserve">
          <source>Values that have no mutable indirections (including structs that don't contain any field with mutable indirections) can be implicitly converted across</source>
          <target state="translated">変異可能な間接要素を持たない値 (変異可能な間接要素を持つフィールドを含まない構造体を含む)は、暗黙のうちに</target>
        </trans-unit>
        <trans-unit id="6dae52b6d63731f1974b82b7571f6c94a8ffe05e" translate="yes" xml:space="preserve">
          <source>Values to initialize the &lt;code&gt;Tuple&lt;/code&gt; with. The &lt;code&gt;Tuple&lt;/code&gt;'s type will be inferred from the types of the values given.</source>
          <target state="translated">&lt;code&gt;Tuple&lt;/code&gt; を初期化する値。 &lt;code&gt;Tuple&lt;/code&gt; のタイプは、指定された値のタイプから推測されます。</target>
        </trans-unit>
        <trans-unit id="a08087f5493c6ce5a8e9b48863d20de7128f05b2" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">VarDeclaration &lt;code&gt;v&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09a1466d563df21a998ae094ed1211927a8bb608" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;copyToTemp&quot;&gt;copyToTemp&lt;/strong&gt;(StorageClass stc, const char* name, Expression e);</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;copyToTemp&quot;&gt;copyToTemp&lt;/strong&gt; （StorageClass stc、const char * name、Expression e）;</target>
        </trans-unit>
        <trans-unit id="8b0928059a3c63031609334a2150b3e8d06084c2" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;expToVariable&quot;&gt;expToVariable&lt;/strong&gt;(Expression e);</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;expToVariable&quot;&gt;expToVariable&lt;/strong&gt; （式e）;</target>
        </trans-unit>
        <trans-unit id="90f8642275d9fc08bf7503b4c8af023eb923bdfb" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;lastVar&quot;&gt;lastVar&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;lastVar&quot;&gt;lastVar&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="93a7a74d06aa15956fd41f9b3c8c0f88bdfeb09e" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;makeThis2Argument&quot;&gt;makeThis2Argument&lt;/strong&gt;(ref const Loc loc, Scope* sc, FuncDeclaration fd);</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;makeThis2Argument&quot;&gt;makeThis2Argument&lt;/strong&gt; （ref const Loc loc、Scope * sc、FuncDeclaration fd）;</target>
        </trans-unit>
        <trans-unit id="f8436ac83c71ac8d42475febc7871f32c710c99c" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;nrvo_var&quot;&gt;nrvo_var&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;nrvo_var&quot;&gt;nrvo_var&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="18c616e0fbbc261b725f83621064accc3a1deeea" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;selectorParameter&quot;&gt;selectorParameter&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;selectorParameter&quot;&gt;selectorParameter&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="12d50a347dabe7e15bb22e20811c56593e1bcae1" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;v_argptr&quot;&gt;v_argptr&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;v_argptr&quot;&gt;v_argptr&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f56d1a786ffb7ff06d7bb5bfa04d51b1b21ab644" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;v_arguments&quot;&gt;v_arguments&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;v_arguments&quot;&gt;v_arguments&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="876239d27c5e57e358e8556afab8f0538d5c97fc" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;var&quot;&gt;var&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;var&quot;&gt;var&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="42355f26f4ab9b91101680194f5be4e62a6fe977" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;vresult&quot;&gt;vresult&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;vresult&quot;&gt;vresult&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2e565c7d36ce463afb9fc418f5d295a5bbc339dc" translate="yes" xml:space="preserve">
          <source>VarDeclaration &lt;strong id=&quot;vthis&quot;&gt;vthis&lt;/strong&gt;;</source>
          <target state="translated">VarDeclaration &lt;strong id=&quot;vthis&quot;&gt;vthis&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="cbb4632d198d84986be1df6e34c6a01f8e53f3c6" translate="yes" xml:space="preserve">
          <source>VarDeclaration[] &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">VarDeclaration [] &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3cd372ff99770eda36a8d3e2dcd3e16f4cd0b425" translate="yes" xml:space="preserve">
          <source>VarDeclarations &lt;strong id=&quot;closureVars&quot;&gt;closureVars&lt;/strong&gt;;</source>
          <target state="translated">VarDeclarations &lt;strong id=&quot;closureVars&quot;&gt;ClosureVars&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="d1b9876e8a834a3e9b9e89838f595256e4706851" translate="yes" xml:space="preserve">
          <source>VarDeclarations* &lt;code&gt;vars&lt;/code&gt;</source>
          <target state="translated">VarDeclarations * &lt;code&gt;vars&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12d65fd05a8f0de9525a8aab22e9d373bb1f9c2e" translate="yes" xml:space="preserve">
          <source>VarDeclarations* &lt;strong id=&quot;parameters&quot;&gt;parameters&lt;/strong&gt;;</source>
          <target state="translated">VarDeclarations * &lt;strong id=&quot;parameters&quot;&gt;パラメータ&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="8de05a295df0a022b8c2f74c1c4b8846fa725f50" translate="yes" xml:space="preserve">
          <source>Variable Templates</source>
          <target state="translated">変数テンプレート</target>
        </trans-unit>
        <trans-unit id="9ac503641226541343accfe90a0e5126b2011089" translate="yes" xml:space="preserve">
          <source>Variable declarations with the storage class &lt;code&gt;extern&lt;/code&gt; are not allocated storage within the module. They must be defined in some other object file with a matching name which is then linked in.</source>
          <target state="translated">ストレージクラス &lt;code&gt;extern&lt;/code&gt; を使用した変数宣言には、モジュール内のストレージは割り当てられません。 それらは、リンクされる他のオブジェクトファイルで一致する名前で定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d65e9595c5fe8cf9c55be3b01afd1c068462a4a" translate="yes" xml:space="preserve">
          <source>Variadic Function Templates can have parameters with default values. These parameters are always set to their default value in case of IFTI.</source>
          <target state="translated">可変関数テンプレートは、デフォルト値を持つパラメータを持つことができます。これらのパラメータはIFTIの場合、常にデフォルト値に設定されます。</target>
        </trans-unit>
        <trans-unit id="816e535fd41b8ae59e68e3a0203deed34e57e3f0" translate="yes" xml:space="preserve">
          <source>Variadic Functions</source>
          <target state="translated">可変関数</target>
        </trans-unit>
        <trans-unit id="3ce44260db47b27a0765a58fa46f6799200c7452" translate="yes" xml:space="preserve">
          <source>Variadic argument list.</source>
          <target state="translated">可変引数リスト。</target>
        </trans-unit>
        <trans-unit id="7587c77875817ada8a5026c856c2f1518162a905" translate="yes" xml:space="preserve">
          <source>Variadic argument lists &lt;a href=&quot;https://dlang.org/spec/function.html#variadic&quot;&gt;https://dlang.org/spec/function.html#variadic&lt;/a&gt;</source>
          <target state="translated">可変個引数リスト&lt;a href=&quot;https://dlang.org/spec/function.html#variadic&quot;&gt;https://dlang.org/spec/function.html#variadic&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2baf171f268c7ff8a5516278ea308ebe744eee6a" translate="yes" xml:space="preserve">
          <source>Variadic arguments to constructors are not forwarded to super.</source>
          <target state="translated">コンストラクタへの可変引数は super には転送されません。</target>
        </trans-unit>
        <trans-unit id="032728a05fbda40894355d391ba66d41db7dfa0b" translate="yes" xml:space="preserve">
          <source>Variadic constructor</source>
          <target state="translated">可変コンストラクタ</target>
        </trans-unit>
        <trans-unit id="399c0cba694f3cc4563013462fe2f380391903d2" translate="yes" xml:space="preserve">
          <source>Variadic functions with argument and type info are declared as taking a parameter of ... after the required function parameters. It has D linkage, and need not have any non-variadic parameters declared:</source>
          <target state="translated">引数と型情報を持つ多項式関数は、必要な関数パラメータの後に ...のパラメータを取るように宣言されます。これはDリンケージを持ち、非多項式パラメータを宣言する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e4ee6519876a792c801d55be8e1784d8bf29d4ef" translate="yes" xml:space="preserve">
          <source>Variadic functions with type info</source>
          <target state="translated">型情報を持つ多項式関数</target>
        </trans-unit>
        <trans-unit id="5d2a300261f6a90712ba60d1554b5378b1469844" translate="yes" xml:space="preserve">
          <source>Variadic list of arguments to format into returned string.</source>
          <target state="translated">返される文字列にフォーマットする引数の可変リスト。</target>
        </trans-unit>
        <trans-unit id="1cacd55c63e5681b498a2a8e79b74af695379b94" translate="yes" xml:space="preserve">
          <source>Variadic skipOver</source>
          <target state="translated">可変スキップオーバー</target>
        </trans-unit>
        <trans-unit id="3ec54f528a04bfb78ded9b978c3382ebd1084d0f" translate="yes" xml:space="preserve">
          <source>Variant &lt;strong id=&quot;message&quot;&gt;message&lt;/strong&gt;;</source>
          <target state="translated">バリアント&lt;strong id=&quot;message&quot;&gt;メッセージ&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="32ee207e01c00b2bfe4113ac9e48d0adc0d9a6ad" translate="yes" xml:space="preserve">
          <source>Variant &lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt;(T, N)(T value, N i);</source>
          <target state="translated">バリアント&lt;strong id=&quot;opIndexAssign&quot;&gt;opIndexAssign&lt;/strong&gt; （T、N）（T value、N i）;</target>
        </trans-unit>
        <trans-unit id="39996f79d077e561bfc7c4efc30631527277acc7" translate="yes" xml:space="preserve">
          <source>Variant &lt;strong id=&quot;opIndexOpAssign&quot;&gt;opIndexOpAssign&lt;/strong&gt;(string op, T, N)(T value, N i);</source>
          <target state="translated">バリアント&lt;strong id=&quot;opIndexOpAssign&quot;&gt;opIndexOpAssign&lt;/strong&gt; （string op、T、N）（T value、N i）;</target>
        </trans-unit>
        <trans-unit id="54c59e2064d684bcdbd701d33a0bcca0d124521f" translate="yes" xml:space="preserve">
          <source>VariantN &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt;(T)(T rhs);</source>
          <target state="translated">VariantN &lt;strong id=&quot;opAssign&quot;&gt;opAssign&lt;/strong&gt; （T）（T rhs）;</target>
        </trans-unit>
        <trans-unit id="a89006b66590fbcedb1cf804abc7dcc4a7855324" translate="yes" xml:space="preserve">
          <source>VariantN &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, T)(T rhs)</source>
          <target state="translated">VariantN &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt; （string op、T）（T rhs）</target>
        </trans-unit>
        <trans-unit id="d50bd63e988142a8ed68771d6708dd3a3ef38a9f" translate="yes" xml:space="preserve">
          <source>VariantN &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, T)(T lhs)</source>
          <target state="translated">VariantN &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt; （string op、T）（T lhs）</target>
        </trans-unit>
        <trans-unit id="dcf8ce2200e09370d71e1c6c556f440c7178243e" translate="yes" xml:space="preserve">
          <source>VariantN &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;(string op, T)(T rhs);</source>
          <target state="translated">VariantN &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt; （string op、T）（T rhs）;</target>
        </trans-unit>
        <trans-unit id="61d3a42cae9e2aa7a2127354c8d2a82e31e5f69f" translate="yes" xml:space="preserve">
          <source>Variant[] &lt;strong id=&quot;variantArray&quot;&gt;variantArray&lt;/strong&gt;(T...)(T args);</source>
          <target state="translated">Variant [] &lt;strong id=&quot;variantArray&quot;&gt;variantArray&lt;/strong&gt; （T ...）（T args）;</target>
        </trans-unit>
        <trans-unit id="901dc81724f513c6e370e0d8b34b4fa85efd9490" translate="yes" xml:space="preserve">
          <source>Variation Selectors</source>
          <target state="translated">バリエーションセレクタ</target>
        </trans-unit>
        <trans-unit id="c842f577712c9ce569d8ca8213f4583b78433b04" translate="yes" xml:space="preserve">
          <source>Variation Selectors Supplement</source>
          <target state="translated">バリエーションセレクターの補足</target>
        </trans-unit>
        <trans-unit id="66283c9058f793e57afbf6f12f5f67c2782019ef" translate="yes" xml:space="preserve">
          <source>Variation of Base64 encoding that is safe for use in URLs and filenames.</source>
          <target state="translated">URL やファイル名に使用しても安全な Base64 エンコーディングのバリエーション。</target>
        </trans-unit>
        <trans-unit id="85213404cd60884f4a897dfadd72c6565a384b83" translate="yes" xml:space="preserve">
          <source>Variation_Selector</source>
          <target state="translated">Variation_Selector</target>
        </trans-unit>
        <trans-unit id="37d044e9653fde1af3399c03c94f78dbe8624404" translate="yes" xml:space="preserve">
          <source>Various different debug builds can be built with a parameter to debug:</source>
          <target state="translated">デバッグするパラメータを指定して、さまざまなデバッグビルドを構築することができます。</target>
        </trans-unit>
        <trans-unit id="fdc4922db0ff01d0b7edd8e9b629bfcad196b8fd" translate="yes" xml:space="preserve">
          <source>Various different version builds can be built with a parameter to version:</source>
          <target state="translated">version にパラメータを指定することで、様々なバージョンのビルドが可能です。</target>
        </trans-unit>
        <trans-unit id="e63f884e9cb15e3080b00623367fb3234dfb09e6" translate="yes" xml:space="preserve">
          <source>Various functions take a string (or strings) to represent a unit of time (e.g. &lt;code&gt;convert!(&quot;days&quot;, &quot;hours&quot;)(numDays)&lt;/code&gt;). The valid strings to use with such functions are &quot;years&quot;, &quot;months&quot;, &quot;weeks&quot;, &quot;days&quot;, &quot;hours&quot;, &quot;minutes&quot;, &quot;seconds&quot;, &quot;msecs&quot; (milliseconds), &quot;usecs&quot; (microseconds), &quot;hnsecs&quot; (hecto-nanoseconds - i.e. 100 ns) or some subset thereof. There are a few functions that also allow &quot;nsecs&quot;, but very little actually has precision greater than hnsecs.</source>
          <target state="translated">さまざまな関数が1つまたは複数の文字列を取り、時間の単位を表します（例： &lt;code&gt;convert!(&quot;days&quot;, &quot;hours&quot;)(numDays)&lt;/code&gt; ）。 このような関数で使用できる有効な文字列は、「年」、「月」、「週」、「日」、「時間」、「分」、「秒」、「ミリ秒」（ミリ秒）、「usecs」（マイクロ秒）です。 、「hnsecs」（ヘクトナノ秒-つまり100 ns）またはそのサブセット。 「nsecs」も許可する関数はいくつかありますが、実際にはhnsecsより高い精度を持つ関数はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="0e7432cf190c6da3860c9d822a4eb7ba1045ce6c" translate="yes" xml:space="preserve">
          <source>Vector Extensions</source>
          <target state="translated">ベクトル拡張機能</target>
        </trans-unit>
        <trans-unit id="10629e605ca0729fbf04887a08544de5fca2798c" translate="yes" xml:space="preserve">
          <source>Vector Operation Intrinsics</source>
          <target state="translated">ベクトル演算の本質</target>
        </trans-unit>
        <trans-unit id="c92e264e05e71f98aeb7e123b045932363360044" translate="yes" xml:space="preserve">
          <source>Vector Type Properties</source>
          <target state="translated">ベクトルタイプのプロパティ</target>
        </trans-unit>
        <trans-unit id="2e86fbb68d6a32b094e97ddedce6b62c4721cb9e" translate="yes" xml:space="preserve">
          <source>Vector Types</source>
          <target state="translated">ベクトルタイプ</target>
        </trans-unit>
        <trans-unit id="07181b72545f73b7288ae34baa8a686beb32c758" translate="yes" xml:space="preserve">
          <source>Vector types and operations are introduced by importing &lt;a href=&quot;https://dlang.org/phobos/core_simd.html&quot;&gt;&lt;code&gt;core.simd&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/phobos/core_simd.html&quot;&gt; &lt;code&gt;core.simd&lt;/code&gt; &lt;/a&gt;をインポートすることにより、ベクタータイプと操作が導入されます 。</target>
        </trans-unit>
        <trans-unit id="c049990f0c907a0b35a257826bc00e0b75b1e2f2" translate="yes" xml:space="preserve">
          <source>Vector types have the property:</source>
          <target state="translated">ベクトル型にはプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="b74915db3cd649e1a4f2705d1b61481a4f84d736" translate="yes" xml:space="preserve">
          <source>Vector types of the same size can be implicitly converted among each other. Vector types can be cast to their &lt;a href=&quot;declaration#VectorBaseType&quot;&gt;&lt;i&gt;VectorBaseType&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">同じサイズのベクトル型は、相互に暗黙的に変換できます。 ベクター型は&lt;a href=&quot;declaration#VectorBaseType&quot;&gt;&lt;i&gt;VectorBaseTypeに&lt;/i&gt;&lt;/a&gt;キャストできます。</target>
        </trans-unit>
        <trans-unit id="18c53b8bedaa759385d9a1d0719db45a3122d467" translate="yes" xml:space="preserve">
          <source>Vedic Extensions</source>
          <target state="translated">ヴェーダの拡張</target>
        </trans-unit>
        <trans-unit id="1414b2c627a4af94b45e0a6f7329a9caaa64d766" translate="yes" xml:space="preserve">
          <source>Vendor Specific Pragmas</source>
          <target state="translated">ベンダー固有のプラグマ</target>
        </trans-unit>
        <trans-unit id="643648d81a8af7bf6b4f73a64885b12b7476a866" translate="yes" xml:space="preserve">
          <source>Vendor specific pragma</source>
          <target state="translated">ベンダ固有のプラグマ</target>
        </trans-unit>
        <trans-unit id="9200d77a5dd8fafeec19ec715fa8db6a41135a49" translate="yes" xml:space="preserve">
          <source>Vendor specific string naming the compiler, for example: &quot;Digital Mars D&quot;.</source>
          <target state="translated">コンパイラを指定するベンダ固有の文字列。&quot;Digital Mars D&quot;。</target>
        </trans-unit>
        <trans-unit id="db3cbc01da600701b9fe4a497fe328e71fa7022f" translate="yes" xml:space="preserve">
          <source>Version 1</source>
          <target state="translated">バージョン1</target>
        </trans-unit>
        <trans-unit id="57ce28f628abe360a4bb4a57891d0472e82ed0fe" translate="yes" xml:space="preserve">
          <source>Version 2</source>
          <target state="translated">バージョン2</target>
        </trans-unit>
        <trans-unit id="075d8b625649c8aff29ec9c2a1b5610d7c109764" translate="yes" xml:space="preserve">
          <source>Version 3 (Name based + MD5)</source>
          <target state="translated">バージョン3(名前ベース+MD5</target>
        </trans-unit>
        <trans-unit id="ddcc753d5e82e42538acd5fc16f4473c5257f4b4" translate="yes" xml:space="preserve">
          <source>Version 4 (Random)</source>
          <target state="translated">バージョン4(ランダム</target>
        </trans-unit>
        <trans-unit id="319868a4751c2b346e9dfe64ab6429818b302223" translate="yes" xml:space="preserve">
          <source>Version 5 (Name based + SHA-1)</source>
          <target state="translated">バージョン5(名前ベース+SHA-1</target>
        </trans-unit>
        <trans-unit id="e66316ca12a840f1988c4b94ab525a7f42bae2cc" translate="yes" xml:space="preserve">
          <source>Version Condition</source>
          <target state="translated">バージョン条件</target>
        </trans-unit>
        <trans-unit id="4d10083d98ea26e265f0014436dbfce2fa1927ba" translate="yes" xml:space="preserve">
          <source>Version Specification</source>
          <target state="translated">バージョン仕様</target>
        </trans-unit>
        <trans-unit id="60cbe77612285f77722795eaf486e9077345ff6b" translate="yes" xml:space="preserve">
          <source>Version identifiers are in their own unique name space, they do not conflict with debug identifiers or other symbols in the module. Version identifiers defined in one module have no influence over other imported modules.</source>
          <target state="translated">バージョン識別子は独自の名前空間にあり、デバッグ識別子やモジュール内の他のシンボルと競合することはありません。あるモジュールで定義されたバージョン識別子は、インポートされた他のモジュールに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="8452f9b655098d440b8bbfefe1781b61039f888f" translate="yes" xml:space="preserve">
          <source>Version identifiers or levels may not be forward referenced:</source>
          <target state="translated">バージョン識別子やレベルを前方参照することはできません。</target>
        </trans-unit>
        <trans-unit id="8639bd1e7277675ae42f2185af060f18565b1cba" translate="yes" xml:space="preserve">
          <source>Version of &lt;code&gt;task&lt;/code&gt; usable from &lt;code&gt;@safe&lt;/code&gt; code. Usage mechanics are identical to the non-@safe case, but safety introduces some restrictions:</source>
          <target state="translated">&lt;code&gt;@safe&lt;/code&gt; コードから使用できる &lt;code&gt;task&lt;/code&gt; バージョン。 使用方法は、@ safe以外の場合と同じですが、安全性にはいくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="9f49127025fb5873ad1bd738867c76e3725ffeaa" translate="yes" xml:space="preserve">
          <source>Version:</source>
          <target state="translated">Version:</target>
        </trans-unit>
        <trans-unit id="8ba6c0ad00aab5da97cc5e9d2ce6ef4a16d6e35f" translate="yes" xml:space="preserve">
          <source>VersionCondition</source>
          <target state="translated">VersionCondition</target>
        </trans-unit>
        <trans-unit id="d5945a6259445f6d607383ec1208b7b2bf5b1920" translate="yes" xml:space="preserve">
          <source>VersionSpecification</source>
          <target state="translated">VersionSpecification</target>
        </trans-unit>
        <trans-unit id="7870ecf513f546adaa9964ca9e10d00cc0c279a8" translate="yes" xml:space="preserve">
          <source>VersionSymbol's happen for statements like: version = identifier; version = integer;</source>
          <target state="translated">VersionSymbol は、次のようなステートメントで発生します:version=identifier;version=integer。</target>
        </trans-unit>
        <trans-unit id="3f4a4fcd926f6c485e563d96d221a73c6f637a3b" translate="yes" xml:space="preserve">
          <source>Versions enable multiple versions of a module to be implemented with a single source file.</source>
          <target state="translated">バージョンによって、1つのソースファイルで複数のバージョンのモジュールを実装することができます。</target>
        </trans-unit>
        <trans-unit id="6fd4c427e710fed77db57126b79deded3402ad4f" translate="yes" xml:space="preserve">
          <source>Vertical Forms</source>
          <target state="translated">縦型フォーム</target>
        </trans-unit>
        <trans-unit id="f26a73edd5911cc59d619f45a8244a225ed70c75" translate="yes" xml:space="preserve">
          <source>Vertical tab</source>
          <target state="translated">垂直タブ</target>
        </trans-unit>
        <trans-unit id="783de7e5b7d2118dade416730da300df060f3cbb" translate="yes" xml:space="preserve">
          <source>Vertical tab (U+000B).</source>
          <target state="translated">縦タブ(U+000B)。</target>
        </trans-unit>
        <trans-unit id="b5a83b3d5b0ebbd94dda9282d36df61edd71daee" translate="yes" xml:space="preserve">
          <source>Very good at doing absolutely nothing. A good starting point for defining other allocators or for studying the API.</source>
          <target state="translated">何もしないことが非常に得意です。他のアロケータを定義したり、APIを勉強するのに良い出発点です。</target>
        </trans-unit>
        <trans-unit id="83b6b08c6edd1287fdcd6c32741f985b4501a4d1" translate="yes" xml:space="preserve">
          <source>View Name NULL</source>
          <target state="translated">表示名NULL</target>
        </trans-unit>
        <trans-unit id="7661d9e884510184f3115feaa61daa7fb90ab554" translate="yes" xml:space="preserve">
          <source>Virtual File System Objects</source>
          <target state="translated">仮想ファイルシステムオブジェクト</target>
        </trans-unit>
        <trans-unit id="b0befb20b7c19afcab0b8606b1eb82ff57c76c58" translate="yes" xml:space="preserve">
          <source>Virtual Function Pointer Table Layout</source>
          <target state="translated">仮想関数ポインタテーブルレイアウト</target>
        </trans-unit>
        <trans-unit id="7dcd32ac0fb832374c32b25d413091959d3ff701" translate="yes" xml:space="preserve">
          <source>Virtual Functions</source>
          <target state="translated">仮想関数</target>
        </trans-unit>
        <trans-unit id="0f4f4c40c9b657d040c9a5a3549b3c5d32fbc234" translate="yes" xml:space="preserve">
          <source>Virtual Table Configuration Options</source>
          <target state="translated">仮想テーブル構成オプション</target>
        </trans-unit>
        <trans-unit id="d3cabefe217e8ae9513576669d0630c721003893" translate="yes" xml:space="preserve">
          <source>Virtual Table Cursor Object</source>
          <target state="translated">仮想テーブルカーソルオブジェクト</target>
        </trans-unit>
        <trans-unit id="02d05d9b66c15b554ca60cadbe6ddd8d5a77642f" translate="yes" xml:space="preserve">
          <source>Virtual Table Indexing Information</source>
          <target state="translated">仮想テーブルインデックス情報</target>
        </trans-unit>
        <trans-unit id="80548cb099ad243dfef606537d8cb425cbe7b21c" translate="yes" xml:space="preserve">
          <source>Virtual Table Instance Object</source>
          <target state="translated">仮想テーブルインスタンスオブジェクト</target>
        </trans-unit>
        <trans-unit id="c7613e2461269638f02a689a01bdfb20ef96932a" translate="yes" xml:space="preserve">
          <source>Virtual Table Object</source>
          <target state="translated">仮想テーブルオブジェクト</target>
        </trans-unit>
        <trans-unit id="aff3c69afbe7a90d7ffde690777408380726fb5f" translate="yes" xml:space="preserve">
          <source>Virtual functions all have a hidden parameter called the</source>
          <target state="translated">仮想関数はすべて</target>
        </trans-unit>
        <trans-unit id="e1c58c4269e8592749612ae3da0cd7b360ba819a" translate="yes" xml:space="preserve">
          <source>Virtual functions are functions that are called indirectly through a function pointer table, called a vtbl[], rather than directly. All &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; member functions which are non-static and are not templatized are virtual unless the compiler can determine that they will never be overridden (e.g. they are marked with &lt;code&gt;final&lt;/code&gt; and do not override any functions in a base class), in which case, it will make them non-virtual. Static or &lt;code&gt;final&lt;/code&gt; functions with &lt;code&gt;Objective-C&lt;/code&gt; linkage are virtual as well. This results in fewer bugs caused by not declaring a function virtual and then overriding it anyway.</source>
          <target state="translated">仮想関数は、直接ではなく、vtbl []と呼ばれる関数ポインターテーブルを介して間接的に呼び出される関数です。 静的ではなく、テンプレート化されていないすべての &lt;code&gt;public&lt;/code&gt; および &lt;code&gt;protected&lt;/code&gt; メンバー関数は、オーバーライドできないことをコンパイラーが判断できない限り、仮想です（たとえば、それらは &lt;code&gt;final&lt;/code&gt; でマークされ、基本クラスの関数をオーバーライドしません）。 、それはそれらを非仮想にします。 &lt;code&gt;Objective-C&lt;/code&gt; リンケージを備えた静的関数または &lt;code&gt;final&lt;/code&gt; 関数も仮想です。 これにより、関数をvirtualと宣言せずにオーバーライドすることによって引き起こされるバグが少なくなります。</target>
        </trans-unit>
        <trans-unit id="14cc5cce0a54264b12497e056c1917afd19e7eb7" translate="yes" xml:space="preserve">
          <source>Virtual interface member functions do not have implementations. Interfaces are expected to implement static or final functions.</source>
          <target state="translated">仮想インタフェースのメンバ関数には実装がありません。インターフェースは、静的関数または最終的な関数を実装することが期待されています。</target>
        </trans-unit>
        <trans-unit id="23ecb6a10d1b99be3019a63076a2464bbfbb2301" translate="yes" xml:space="preserve">
          <source>Virtual table of this cursor</source>
          <target state="translated">このカーソルの仮想テーブル</target>
        </trans-unit>
        <trans-unit id="1c1672376b6b5ed02995bff06fe4feb7630511fb" translate="yes" xml:space="preserve">
          <source>Visibility Attribute</source>
          <target state="translated">可視性属性</target>
        </trans-unit>
        <trans-unit id="770309d5c2e0f2778ba518ab224adafe114b41f4" translate="yes" xml:space="preserve">
          <source>Visibility is an attribute that is one of &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, or &lt;code&gt;export&lt;/code&gt;. They may be referred to as protection attributes in documents predating &lt;a href=&quot;http://wiki.dlang.org/DIP22&quot;&gt;DIP22&lt;/a&gt;.</source>
          <target state="translated">可視性は、 &lt;code&gt;private&lt;/code&gt; 、 &lt;code&gt;package&lt;/code&gt; 、 &lt;code&gt;protected&lt;/code&gt; 、 &lt;code&gt;public&lt;/code&gt; 、または &lt;code&gt;export&lt;/code&gt; いずれかの属性です。 これらは、 &lt;a href=&quot;http://wiki.dlang.org/DIP22&quot;&gt;DIP22&lt;/a&gt;より前の文書では保護属性と呼ばれる場合があります。</target>
        </trans-unit>
        <trans-unit id="6c05960b386f26ee3e915fac197d378f3ebcb6a8" translate="yes" xml:space="preserve">
          <source>Visibility participates in &lt;a href=&quot;module#name_lookup&quot;&gt;symbol name lookup&lt;/a&gt;.</source>
          <target state="translated">可視性は&lt;a href=&quot;module#name_lookup&quot;&gt;シンボル名の検索に&lt;/a&gt;関与します 。</target>
        </trans-unit>
        <trans-unit id="1c92fbe0bbb759a09c0faa29208bb88b78b9b6f8" translate="yes" xml:space="preserve">
          <source>Visit each overloaded function/template in turn, and call dg(s) on it. Exit when no more, or dg(s) returns nonzero.</source>
          <target state="translated">オーバーロードされた各関数テンプレートを順番に訪れ、その上で dg(s)を呼び出す。これ以上ない場合、または dg(s)が 0 以外の値を返した場合は終了します。</target>
        </trans-unit>
        <trans-unit id="095d4e1da0ccccf0f23cb7d7417321dea1d13b5b" translate="yes" xml:space="preserve">
          <source>Visitor &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">訪問者 &lt;code&gt;v&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed75e8e2064c0cf00a947caba1ce28a6fe75f18b" translate="yes" xml:space="preserve">
          <source>Visitor that implements the AST traversal logic. The nodes just accept their children.</source>
          <target state="translated">ASTトラバーサルロジックを実装したvisitorです。ノードはその子を受け入れるだけです。</target>
        </trans-unit>
        <trans-unit id="15fa187dd92efb368750787f933eb6c9f5cdd9fe" translate="yes" xml:space="preserve">
          <source>Visits this AST node using the given visitor.</source>
          <target state="translated">指定された訪問者を使ってこのASTノードを訪問します。</target>
        </trans-unit>
        <trans-unit id="7e76fe40efd36819ad4216cae6d472d259442ebf" translate="yes" xml:space="preserve">
          <source>Void Arrays</source>
          <target state="translated">ボイド配列</target>
        </trans-unit>
        <trans-unit id="a3b9953f805ebbaefa9422b2c296b873ff21f42c" translate="yes" xml:space="preserve">
          <source>Void Initialization</source>
          <target state="translated">ボイド初期化</target>
        </trans-unit>
        <trans-unit id="bf3edd1e4d2a01f42d21c6548696eea61602c39b" translate="yes" xml:space="preserve">
          <source>Void Initializations</source>
          <target state="translated">Void の初期化</target>
        </trans-unit>
        <trans-unit id="ccfd4941fe26581cb178fed9382832c4cba184df" translate="yes" xml:space="preserve">
          <source>Void arrays can also be static if their length is known at compile-time. The length is specified in bytes:</source>
          <target state="translated">コンパイル時に長さが既知であれば、Void 配列は静的な配列にすることもできます。長さはバイト単位で指定します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
