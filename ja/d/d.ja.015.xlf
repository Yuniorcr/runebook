<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="33874d4fed4fab1462ae102319663b9a069aac22" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c90742e8cb6203dd2bfb9d9c4ee46c6e76e62bea" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;withThis&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;withThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78316945c53052fc58821336460ed4634e4ff00a" translate="yes" xml:space="preserve">
          <source>RAII (yes, it can work without exceptions)</source>
          <target state="translated">RAII(はい、例外なく動くことができます。</target>
        </trans-unit>
        <trans-unit id="09dca383176e1e45e99b3ee60b7d74333cc1901f" translate="yes" xml:space="preserve">
          <source>RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;(A)(A* pa);</source>
          <target state="translated">RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;（A）（A * pa）;</target>
        </trans-unit>
        <trans-unit id="91d7fa94c935a86a5398825578e63ee422be5ec3" translate="yes" xml:space="preserve">
          <source>RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;(A)(auto ref A a)</source>
          <target state="translated">RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;（A）（自動参照A a）</target>
        </trans-unit>
        <trans-unit id="7fcf7b01d91c0309ab3dab25512ada436e2044db" translate="yes" xml:space="preserve">
          <source>RCISharedAllocator &lt;strong id=&quot;sharedAllocatorObject&quot;&gt;sharedAllocatorObject&lt;/strong&gt;(A)(A* pa);</source>
          <target state="translated">RCISharedAllocator &lt;strong id=&quot;sharedAllocatorObject&quot;&gt;sharedAllocatorObject&lt;/strong&gt;（A）（A * pa）;</target>
        </trans-unit>
        <trans-unit id="9a0b08a17aafe0f3eeef32e8158e597e5049b0db" translate="yes" xml:space="preserve">
          <source>REM is the value of x - y * n, where n is the integer nearest the exact value of x / y. If |n - x / y| == 0.5, n is even. If the result is zero, it has the same sign as x. Otherwise, the sign of the result is the sign of x / y. Precision mode has no effect on the remainder functions.</source>
          <target state="translated">REM は x-y*n の値であり、ここで n は x y の正確な値に最も近い整数です。 y y.精密モードは剰余関数に影響を与えません。</target>
        </trans-unit>
        <trans-unit id="8c1185861af34828e57540e154679254cc1de862" translate="yes" xml:space="preserve">
          <source>RET &lt;strong id=&quot;retStyle&quot;&gt;retStyle&lt;/strong&gt;(TypeFunction tf, bool needsThis);</source>
          <target state="translated">RET &lt;strong id=&quot;retStyle&quot;&gt;retStyle&lt;/strong&gt;（TypeFunction tf、bool needsThis）;</target>
        </trans-unit>
        <trans-unit id="d19cf5985fafdd0a13c43f47452c23390522b7bc" translate="yes" xml:space="preserve">
          <source>RET.stack if return value from function is on the stack, RET.regs otherwise</source>
          <target state="translated">関数の戻り値がスタック上にある場合はRET.stack、そうでない場合はRET.regs</target>
        </trans-unit>
        <trans-unit id="f3ae8b4785072e6df524d9714369c48076e4136a" translate="yes" xml:space="preserve">
          <source>RF &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; RF</target>
        </trans-unit>
        <trans-unit id="cf48f3d5bf7ea08ce5e6f45d9f362f9581e8b3b2" translate="yes" xml:space="preserve">
          <source>RFC 3986</source>
          <target state="translated">RFC3986</target>
        </trans-unit>
        <trans-unit id="49e1bc88b1068da52ec405c6f119b166edb798fc" translate="yes" xml:space="preserve">
          <source>RFC 4122</source>
          <target state="translated">RFC41222</target>
        </trans-unit>
        <trans-unit id="bc2b02e103b8e9f27fd35f47002cfdd117ae54d6" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name.</source>
          <target state="translated">RFC 4122では、異なるUUIDのバージョンを定義している。例えば、バージョン4のUUIDは乱数から、バージョン3のUUIDは名前のMD5ハッシュから生成されています。</target>
        </trans-unit>
        <trans-unit id="5bd1d852604ecbde96eb1630eca7b030029c114a" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name. Returns the version used by this UUID.</source>
          <target state="translated">RFC 4122では、異なるUUIDのバージョンを定義している。例えば、バージョン4のUUIDは乱数から生成されたもので、バージョン3のUUIDは名前のMD5ハッシュから生成されたものです。この UUID が使用しているバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="573781f662bff5ee3bf9c4d12104558f4082fb6a" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different internal data layouts for UUIDs. Returns the format used by this UUID.</source>
          <target state="translated">RFC 4122では、UUIDの異なる内部データレイアウトを定義しています。このUUIDで使用されているフォーマットを返します。</target>
        </trans-unit>
        <trans-unit id="2a95bd082af00e19a4610e5ef939415c5ce11021" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different internal data layouts for UUIDs. These are the UUID formats supported by this module. It's possible to read, compare and use all these Variants, but UUIDs generated by this module will always be in rfc4122 format.</source>
          <target state="translated">RFC 4122 は、UUID の異なる内部データレイアウトを定義しています。これらは、このモジュールがサポートする UUID フォーマットです。これらのすべてのバリアントを読み取ったり、比較したり、使用したりすることは可能ですが、このモジュールによって生成されたUUIDは常にrfc4122形式になります。</target>
        </trans-unit>
        <trans-unit id="0cc5b6f4e8fb3030bdcc57b4e95bb25566697f85" translate="yes" xml:space="preserve">
          <source>RFC 4122 isn't very clear on how UUIDs should be generated from names. It is possible that different implementations return different UUIDs for the same input, so be warned. The implementation for UTF-8 strings and byte arrays used by &lt;code&gt;std.uuid&lt;/code&gt; is compatible with Boost's implementation. &lt;code&gt;std.uuid&lt;/code&gt; guarantees that the same input to this function will generate the same output at any time, on any system (this especially means endianness doesn't matter).</source>
          <target state="translated">RFC 4122は、名前からUUIDを生成する方法についてあまり明確ではありません。異なる実装が同じ入力に対して異なるUUIDを返す可能性があるため、警告されます。 &lt;code&gt;std.uuid&lt;/code&gt; で使用されるUTF-8文字列とバイト配列の実装は、Boostの実装と互換性があります。 &lt;code&gt;std.uuid&lt;/code&gt; は、この関数への同じ入力が任意のシステムでいつでも同じ出力を生成することを保証します（これは、特にエンディアンが問題ではないことを意味します）。</target>
        </trans-unit>
        <trans-unit id="2c7a893b503cfc38ba16ceb5692dcd724ac88416" translate="yes" xml:space="preserve">
          <source>RFC 4122 recommends to use Version 5 UUIDs (SHA-1) instead of Version 3 UUIDs (MD5) for new applications.</source>
          <target state="translated">RFC 4122では、新しいアプリケーションではバージョン3のUUID(MD5)の代わりにバージョン5のUUID(SHA-1)を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="1a2e2c899753e0a3c51ae9565a6de46bc63deb6f" translate="yes" xml:space="preserve">
          <source>RFC 4648 - The Base16, Base32, and Base64 Data Encodings</source>
          <target state="translated">RFC 4648-Base16、Base32、および Base64 データエンコーディング</target>
        </trans-unit>
        <trans-unit id="aa203fcac8070f03e3861b552ee96fa7f237bae2" translate="yes" xml:space="preserve">
          <source>RFC 5321</source>
          <target state="translated">RFC5321</target>
        </trans-unit>
        <trans-unit id="17c58504badf8c1787c4ac4f95c466fc696f2e50" translate="yes" xml:space="preserve">
          <source>RFC 5322</source>
          <target state="translated">RFC53222</target>
        </trans-unit>
        <trans-unit id="735daace003912b5fecc445075fdfb455d272749" translate="yes" xml:space="preserve">
          <source>RFC 822 was the original spec (hence the function's name), whereas RFC 5322 is the current spec.</source>
          <target state="translated">RFC 822 は元々の仕様 (それがこの関数の名前の由来)であり、RFC 5322 は現在の仕様です。</target>
        </trans-unit>
        <trans-unit id="34df16ec4e939a336be88d7c573d53bfe4242745" translate="yes" xml:space="preserve">
          <source>RFC2616</source>
          <target state="translated">RFC2616</target>
        </trans-unit>
        <trans-unit id="3b6ff39841eb9f66194b85cd2a429c407a8477ca" translate="yes" xml:space="preserve">
          <source>RFC2616 Section 14.25</source>
          <target state="translated">RFC2616 セクション14.25</target>
        </trans-unit>
        <trans-unit id="bb23083cf84c9e20bfaaa1a7cafd26ba2c9a83c9" translate="yes" xml:space="preserve">
          <source>RFC2821</source>
          <target state="translated">RFC2821</target>
        </trans-unit>
        <trans-unit id="42ae0d93633168fee4fb705fef08465852bd57ff" translate="yes" xml:space="preserve">
          <source>RFC2822</source>
          <target state="translated">RFC2822</target>
        </trans-unit>
        <trans-unit id="3a9c7d888d2bed3deb431ff0cc9d29e832520d5d" translate="yes" xml:space="preserve">
          <source>RFC959</source>
          <target state="translated">RFC959</target>
        </trans-unit>
        <trans-unit id="2266413cb2b4c8845ed65b52f018ce1dc3aa89f6" translate="yes" xml:space="preserve">
          <source>RL &lt;code&gt;link&lt;/code&gt;</source>
          <target state="translated">RL &lt;code&gt;link&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a27ea486b7c697c55d2af33caf990409623e9366" translate="yes" xml:space="preserve">
          <source>RNG &lt;code&gt;randomGen&lt;/code&gt;</source>
          <target state="translated">RNG &lt;code&gt;randomGen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="938b07b987d5d15811806534d8bfeeabeb06c72a" translate="yes" xml:space="preserve">
          <source>RO &lt;code&gt;original&lt;/code&gt;</source>
          <target state="translated">RO &lt;code&gt;original&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39d1aa776b7a255f3d807b5b8897d1bed0511d44" translate="yes" xml:space="preserve">
          <source>RR &lt;code&gt;otherRanges&lt;/code&gt;</source>
          <target state="translated">RR &lt;code&gt;otherRanges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a850436297b1d82629832bb29adfcf30f1fc1cd8" translate="yes" xml:space="preserve">
          <source>RR &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">RR &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16de3e81671885dc0f6c6bce4baf66346a366ed5" translate="yes" xml:space="preserve">
          <source>RSA Data Security, Inc. MD5 Message-Digest Algorithm</source>
          <target state="translated">RSA Data Security,Inc.MD5 メッセージダイジェストアルゴリズム</target>
        </trans-unit>
        <trans-unit id="b8f6115b2e975b7d1e3bf5fac034e18302031d6e" translate="yes" xml:space="preserve">
          <source>RT &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">RT &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd5f8a5117f61c39a5204172f35f9cae1983e553" translate="yes" xml:space="preserve">
          <source>RTSP request method (OPTIONS, SETUP, PLAY, etc...)</source>
          <target state="translated">RTSPリクエスト方法(OPTIONS、SETUP、PLAYなど)。</target>
        </trans-unit>
        <trans-unit id="371bf1c52e812b6b49ae51cbb46d07593674f96f" translate="yes" xml:space="preserve">
          <source>Radical</source>
          <target state="translated">Radical</target>
        </trans-unit>
        <trans-unit id="204a8eb40a4bd8af4678da109de683c6a1f65eb0" translate="yes" xml:space="preserve">
          <source>Rainer Schuetze</source>
          <target state="translated">ライナー・シュエッツェ</target>
        </trans-unit>
        <trans-unit id="d019a6997366fd64d4e2e18529510a7f45eb8edb" translate="yes" xml:space="preserve">
          <source>Raises an error if a version identifier is reserved.</source>
          <target state="translated">バージョン識別子が予約されている場合にエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="4dc5d6b0d4a5b8f3e3b4cbc848f0214ae661809b" translate="yes" xml:space="preserve">
          <source>Random access range with slicing and everything</source>
          <target state="translated">ランダムアクセス範囲にスライシングやなんでもあり</target>
        </trans-unit>
        <trans-unit id="daf87088c3240e4a9a9584a1049d3548474219fc" translate="yes" xml:space="preserve">
          <source>Random number generators for internal usage.</source>
          <target state="translated">内部で使用するための乱数発生器。</target>
        </trans-unit>
        <trans-unit id="a894f9ef66fee642a62aec7c8de8b1d7ab1bb2ee" translate="yes" xml:space="preserve">
          <source>Random variate drawn from the index values [0, ... &lt;code&gt;proportions.length&lt;/code&gt; - 1], with the probability of getting an individual index value &lt;code&gt;i&lt;/code&gt; being proportional to &lt;code&gt;proportions[i]&lt;/code&gt;.</source>
          <target state="translated">インデックス値[0、... &lt;code&gt;proportions.length&lt;/code&gt; -1] から抽出されたランダムな変量。個々のインデックス値 &lt;code&gt;i&lt;/code&gt; を得る確率は、 &lt;code&gt;proportions[i]&lt;/code&gt; に比例します。</target>
        </trans-unit>
        <trans-unit id="fe974058f76f0bd197fe8cd84da0586782e2e9ca" translate="yes" xml:space="preserve">
          <source>Random variate drawn from the uniform distribution across all possible values of the integral, character or enum type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数、文字、または列挙型 &lt;code&gt;T&lt;/code&gt; のすべての可能な値にわたる均一分布から抽出されたランダム変量。</target>
        </trans-unit>
        <trans-unit id="9c0ab3c4414e6a52d0de45047951538395311a24" translate="yes" xml:space="preserve">
          <source>Random-access primitive. It is offered if &lt;code&gt; isRandomAccessRange!RangeOfRanges &amp;amp;&amp;amp; (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)&lt;/code&gt;.</source>
          <target state="translated">ランダムアクセスプリミティブ。 &lt;code&gt; isRandomAccessRange!RangeOfRanges &amp;amp;&amp;amp; (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)&lt;/code&gt; 場合に提供されます。</target>
        </trans-unit>
        <trans-unit id="a5f170f45a67325667fa9e118360d9450236d377" translate="yes" xml:space="preserve">
          <source>Random-access range over Grapheme's &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt;.</source>
          <target state="translated">書記素の&lt;a href=&quot;#Character&quot;&gt;キャラクターの&lt;/a&gt;ランダムアクセス範囲。</target>
        </trans-unit>
        <trans-unit id="05605c8f58501d21613f455df459e82081c3cdc7" translate="yes" xml:space="preserve">
          <source>RandomAccessFinite!E &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t, size_t);</source>
          <target state="translated">RandomAccessFinite！E &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t、size_t）;</target>
        </trans-unit>
        <trans-unit id="2558f9c390a433acd2a5f9d5a6cda985cdc6b00a" translate="yes" xml:space="preserve">
          <source>RandomAccessRange &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">RandomAccessRange &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36786d6240b8deeb5c7ce659046f8b88c692e5ce" translate="yes" xml:space="preserve">
          <source>RandomAccessRange &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;(RandomAccessRange, alias pred, InputRange)(RandomAccessRange haystack, scope BoyerMooreFinder!(pred, InputRange) needle);</source>
          <target state="translated">RandomAccessRange &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;（RandomAccessRange、alias pred、InputRange）（RandomAccessRange haystack、scope BoyerMooreFinder！（pred、InputRange）needle）;</target>
        </trans-unit>
        <trans-unit id="222ef9f907f129a56ec254183f3ff4dc6d45278d" translate="yes" xml:space="preserve">
          <source>RandomGen &lt;code&gt;gen&lt;/code&gt;</source>
          <target state="translated">RandomGen &lt;code&gt;gen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b77d02793d6a139d9a2b3d2d97494bc2270ca425" translate="yes" xml:space="preserve">
          <source>RandomGen &lt;code&gt;urng&lt;/code&gt;</source>
          <target state="translated">RandomGen &lt;code&gt;urng&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="bdc00a10e731625034468db23e692559a5ae1f69" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;doesThisEnd&lt;/code&gt;</source>
          <target state="translated">範囲はこの &lt;code&gt;doesThisEnd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6459a8a608d380da143d17584f95660d532fc6d" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;doesThisStart&lt;/code&gt;</source>
          <target state="translated">範囲はこの &lt;code&gt;doesThisStart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ae8a55dd9bb3b7d6c3722fe1726f400b996eba3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">範囲の &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b893bf3e72d1de5c2698b1bf1165ebf7ba8ea021" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fab70957ac55da835b218bcbb7da119da5da0694" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;input&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b449f4abbe52b829a268a0611f72dbd66bf08520" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;items&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;items&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc112cfba33c9e26d641dc22c4809b4b608180e3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1e47737bbac3975754a3eca700ddd881c3a70e7" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="765b7acfeb236a5d946cff8513b18b77080f38e3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8cb3e3f4922e3ac872f84f7fbe039683f1fc007" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7730cf02532e3c48c2cc95f48183a04b086e350b" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c59c250a7f0c3582bafe2d7cc9507cd1bfb2b4c" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;segments&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;segments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98caacb48def81b9a800ce6e242ac737eae9b7e6" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b223975eedc441a181b2d83e0a620e372555573" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;str&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;str&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="942c1c1d42b71f9968f58bccd5c762229b58a106" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;stuff&lt;/code&gt;</source>
          <target state="translated">レンジの &lt;code&gt;stuff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="958dc324f88870b31b40c243dd1ecf447384d41c" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;tgt&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;tgt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd6d020deb1cc093e6b3d4f3f4c6acba70a62219" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;（Range）（Range str）</target>
        </trans-unit>
        <trans-unit id="958a969c8d619dd2e21dd942e24dc74bfc9137eb" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;(Range, C2)(Range str, const(C2)[] delimiter)</source>
          <target state="translated">Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;（Range、C2）（Range str、const（C2）[] delimiter）</target>
        </trans-unit>
        <trans-unit id="387b549e3439c27c5968eadec0e4210d080a7d80" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chompPrefix&quot;&gt;chompPrefix&lt;/strong&gt;(Range, C2)(Range str, const(C2)[] delimiter)</source>
          <target state="translated">Range &lt;strong id=&quot;chompPrefix&quot;&gt;chompPrefix&lt;/strong&gt;（Range、C2）（Range str、const（C2）[] delimiter）</target>
        </trans-unit>
        <trans-unit id="7d750d9399cda1002cbc697092da98fe61feb3fa" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chop&quot;&gt;chop&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">レンジ&lt;strong id=&quot;chop&quot;&gt;チョップ&lt;/strong&gt;（Range）（Range str）</target>
        </trans-unit>
        <trans-unit id="5374aa394be302873be7b9e5f298b412424fd0c2" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;findAdjacent&quot;&gt;findAdjacent&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;findAdjacent&quot;&gt;findAdjacent&lt;/strong&gt;（エイリアスpred = &quot;a == b&quot;、Range）（範囲r）</target>
        </trans-unit>
        <trans-unit id="c61e9a986955ab73c7c51b7c6290309881a726d0" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;(Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;linearRemove&quot;&gt;線形削除&lt;/strong&gt;（範囲r）;</target>
        </trans-unit>
        <trans-unit id="8a4737705e7cd61fe5be23dbe69e47363f785ea9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;(Take!Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;linearRemove&quot;&gt;線形削除&lt;/strong&gt;（Take！Range r）;</target>
        </trans-unit>
        <trans-unit id="483463cf9312055d259a327156d9725d80165b39" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">範囲&lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;（要素e）;</target>
        </trans-unit>
        <trans-unit id="daf2b8c4e51410249a2cddb780dde47dfd56c9f2" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;maxPos&quot;&gt;maxPos&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">範囲&lt;strong id=&quot;maxPos&quot;&gt;maxPos&lt;/strong&gt;（エイリアスpred = &quot;a &amp;lt;b&quot;、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="8d001c4e9b0a367012727ac2d8a9eff83c387f7b" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;minPos&quot;&gt;minPos&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">範囲&lt;strong id=&quot;minPos&quot;&gt;minPos&lt;/strong&gt;（エイリアスpred = &quot;a &amp;lt;b&quot;、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="d284bc77e731a0b9a6d12df2a5238c3a06464947" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（）;</target>
        </trans-unit>
        <trans-unit id="bc2a5d0466c36ffd67337b24e664ae0f79c874ca" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t a, size_t b);</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t a、size_t b）;</target>
        </trans-unit>
        <trans-unit id="c11b4e7b6b47c28df5004fd6ddf7a545a426ca49" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t i, size_t j);</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t i、size_t j）;</target>
        </trans-unit>
        <trans-unit id="39f32596eb8aca6da2ab14245d948d6847ce050e" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t low, size_t high);</source>
          <target state="translated">範囲&lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;（size_t低、size_t高）;</target>
        </trans-unit>
        <trans-unit id="d42de6f1841b39c620b9c8a2ea05d1f76c726764" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;(Range)(Range r, in size_t n)</source>
          <target state="translated">Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;（Range）（Range r、in size_t n）</target>
        </trans-unit>
        <trans-unit id="6903f88dabb579ebb843ddd5140458c35c9704e5" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;(Range, RandomGen)(Range r, in size_t n, ref RandomGen gen)</source>
          <target state="translated">Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;（Range、RandomGen）（Range r、in size_t n、ref RandomGen gen）</target>
        </trans-unit>
        <trans-unit id="9142d2d0e717f4080c77ae59566752d24bd34d36" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt;(alias predicate, SwapStrategy ss = SwapStrategy.unstable, Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;partition&quot;&gt;パーティション&lt;/strong&gt;（エイリアス述語、SwapStrategy ss = SwapStrategy.unstable、Range）（範囲r）</target>
        </trans-unit>
        <trans-unit id="3bcc5c63d8cc77c95d8df1c024b2432266bd79b7" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt;(alias predicate, SwapStrategy ss, Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;partition&quot;&gt;パーティション&lt;/strong&gt;（エイリアス述語、SwapStrategy ss、Range）（範囲r）</target>
        </trans-unit>
        <trans-unit id="341436ba0e810d212a6a1812137bb20b5c206fc6" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">範囲&lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;（Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="9bfa4950aa7b637010c51a6ca464ea0c1b28b280" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;(Range, RandomGen)(Range r, ref RandomGen gen)</source>
          <target state="translated">範囲&lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;（Range、RandomGen）（Range r、ref RandomGen gen）</target>
        </trans-unit>
        <trans-unit id="be8785c63fd8f14c56f2f13abbae759e756c0a19" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（範囲r）;</target>
        </trans-unit>
        <trans-unit id="e2981773ba184620c192e5177874cbcd5df9d535" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(SwapStrategy s = SwapStrategy.stable, Range, Offset...)(Range range, Offset offset)</source>
          <target state="translated">範囲の&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（SwapStrategy s = SwapStrategy.stable、Range、Offset ...）（Range range、Offset offset）</target>
        </trans-unit>
        <trans-unit id="f70143fb0f43c9d5f880ec91b1b8e94d2535149a" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Take!Range r);</source>
          <target state="translated">範囲&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（Take！Range r）;</target>
        </trans-unit>
        <trans-unit id="dc8629ec9f5b7067218b999012871cedb67cee47" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(alias pred, SwapStrategy s = SwapStrategy.stable, Range)(Range range);</source>
          <target state="translated">範囲&lt;strong id=&quot;remove&quot;&gt;削除&lt;/strong&gt;（エイリアスpred、SwapStrategy s = SwapStrategy.stable、Range）（範囲範囲）;</target>
        </trans-unit>
        <trans-unit id="59fdc553edeb4d0d3d3ac64cb93ae52f0640a2d9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;reverse&quot;&gt;reverse&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">レンジ&lt;strong id=&quot;reverse&quot;&gt;反転&lt;/strong&gt;（Range）（Range r）</target>
        </trans-unit>
        <trans-unit id="1f67ade8615231c9e6f1eceec74eb881945beec1" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">レンジ&lt;strong id=&quot;strip&quot;&gt;ストリップ&lt;/strong&gt;（レンジ、E）（レンジレンジ、Eエレメント）</target>
        </trans-unit>
        <trans-unit id="1fb46d0c90f5b292ffca7c031b1dc38906b51867" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">レンジ&lt;strong id=&quot;strip&quot;&gt;ストリップ&lt;/strong&gt;（エイリアスプレド、レンジ）（レンジレンジ）</target>
        </trans-unit>
        <trans-unit id="3614af376bd06ba88949586c27df5bf9080807f7" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;（Range、E）（Range range、E element）</target>
        </trans-unit>
        <trans-unit id="6885e77726b545d7302e685cf148f4d98fbe84a1" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;（エイリアスpred、Range）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="ce33d5d4abc1be9b6b923d9319b04bb93b60e3b9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;（Range、E）（Range range、E element）</target>
        </trans-unit>
        <trans-unit id="22cc986d97351e10d1dbeeba473b9aeec680758f" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">範囲&lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;（エイリアスpred、範囲）（範囲の範囲）</target>
        </trans-unit>
        <trans-unit id="8922aa2733c368de22e8bfd1b73084f8c48c862f" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">範囲&lt;strong id=&quot;upperBound&quot;&gt;上限&lt;/strong&gt;（&lt;strong id=&quot;upperBound&quot;&gt;要素&lt;/strong&gt; e）;</target>
        </trans-unit>
        <trans-unit id="4e07b5b6833aaedcc15663d77743676b9312f065" translate="yes" xml:space="preserve">
          <source>Range Y</source>
          <target state="translated">レンジ Y</target>
        </trans-unit>
        <trans-unit id="f48019e5bf7ec363745690f4e315480b20a5136a" translate="yes" xml:space="preserve">
          <source>Range error?</source>
          <target state="translated">レンジエラー?</target>
        </trans-unit>
        <trans-unit id="7fe97179ce97a6e49548e8ed3307493377b319d0" translate="yes" xml:space="preserve">
          <source>Range for Lists.</source>
          <target state="translated">リストの範囲。</target>
        </trans-unit>
        <trans-unit id="eba68d314890b6f6a70e36a43c74d5ce32405e46" translate="yes" xml:space="preserve">
          <source>Range for blocks.</source>
          <target state="translated">ブロックの範囲</target>
        </trans-unit>
        <trans-unit id="c89a73bed4c8cbf35f6dcfd9a40f20e25db682af" translate="yes" xml:space="preserve">
          <source>Range from which the chunks will be selected</source>
          <target state="translated">チャンクが選択される範囲</target>
        </trans-unit>
        <trans-unit id="817d0998dd4c5bb46a7e6021d86c9c99c245a844" translate="yes" xml:space="preserve">
          <source>Range from which the slide will be selected</source>
          <target state="translated">スライドを選択する範囲</target>
        </trans-unit>
        <trans-unit id="a0f235889bbcb32d2a6ce4f5c086ecc8aaff6b64" translate="yes" xml:space="preserve">
          <source>Range functions</source>
          <target state="translated">レンジ機能</target>
        </trans-unit>
        <trans-unit id="985230fe57670eee6d480371e5539885e9d2193e" translate="yes" xml:space="preserve">
          <source>Range interface.</source>
          <target state="translated">レンジインターフェース。</target>
        </trans-unit>
        <trans-unit id="581a55513996060c488e2dcd565e8b46f3a2b154" translate="yes" xml:space="preserve">
          <source>Range of all sliding windows with propagated bi-directionality, forwarding, random access, and slicing.</source>
          <target state="translated">伝搬型双方向性、転送、ランダムアクセス、スライシングを備えたすべてのスライディングウィンドウの範囲。</target>
        </trans-unit>
        <trans-unit id="137cc21ae1fc638dcb51e74df73a2d56e1f9c67b" translate="yes" xml:space="preserve">
          <source>Range of chunks.</source>
          <target state="translated">チャンクの範囲。</target>
        </trans-unit>
        <trans-unit id="a7a76727b30bcd8da9b8a6edd30afc51c870bcb3" translate="yes" xml:space="preserve">
          <source>Range of ranges</source>
          <target state="translated">範囲の範囲</target>
        </trans-unit>
        <trans-unit id="5555dfd39b2edc98ced9f7334c9a6392f14cf52b" translate="yes" xml:space="preserve">
          <source>Range or string specifying the directory name</source>
          <target state="translated">ディレクトリ名を指定する範囲または文字列</target>
        </trans-unit>
        <trans-unit id="a1ddf1e045360a472de28705a5205e74f1573574" translate="yes" xml:space="preserve">
          <source>Range over bit set. Each element is the bit number that is set.</source>
          <target state="translated">セットされたビットの範囲。各要素は設定されているビット番号です。</target>
        </trans-unit>
        <trans-unit id="77e67487e9cb8bf2a5778f171bf816c7161b5db1" translate="yes" xml:space="preserve">
          <source>Range primitives</source>
          <target state="translated">レンジプリミティブ</target>
        </trans-unit>
        <trans-unit id="3c31ca8b15dc9b218b4e66fc66e0b896406fabf3" translate="yes" xml:space="preserve">
          <source>Range primitives are carried over to the returned range if all of the ranges provide them</source>
          <target state="translated">すべての範囲が範囲プリミティブを提供している場合、範囲プリミティブは返される範囲に持ち越されます。</target>
        </trans-unit>
        <trans-unit id="b16f736ad7fe0991fb122f8c903cf0a4cbbbe6fb" translate="yes" xml:space="preserve">
          <source>Range primitives for worker-local storage. The purpose of this is to access results produced by each worker thread from a single thread once you are no longer using the worker-local storage from multiple threads. Do not use this struct in the parallel portion of your algorithm.</source>
          <target state="translated">ワーカーローカルストレージ用のレンジプリミティブです。これの目的は、複数のスレッドからワーカローカル ストレージを使用しなくなったら、各ワーカースレッドが生成した結果に単一のスレッドからアクセスすることです。アルゴリズムの並列部分ではこの構造体を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="31dcddbb1c2c353cd8249a666fee5a2f0432234f" translate="yes" xml:space="preserve">
          <source>Range primitives may throw &lt;code&gt;StdioException&lt;/code&gt; on I/O error.</source>
          <target state="translated">範囲プリミティブは、I / Oエラー時に &lt;code&gt;StdioException&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="5386fccbcb76f4112f36ee49b1376281ebad0cc7" translate="yes" xml:space="preserve">
          <source>Range primitives.</source>
          <target state="translated">レンジプリミティブ。</target>
        </trans-unit>
        <trans-unit id="a23d722689f8ff7700f014fabb7100a7edace801" translate="yes" xml:space="preserve">
          <source>Range r</source>
          <target state="translated">範囲 r</target>
        </trans-unit>
        <trans-unit id="a188ed7de729e7ba08e4510d12d5fbc93676c14c" translate="yes" xml:space="preserve">
          <source>Range sampling</source>
          <target state="translated">レンジサンプリング</target>
        </trans-unit>
        <trans-unit id="bdb3b810511da6b4ebbfc639e29a1653d7944da1" translate="yes" xml:space="preserve">
          <source>Range that iterates the indices of the set bits in &lt;code&gt;value&lt;/code&gt;. Index 0 corresponds to the least significant bit. For signed integers, the highest index corresponds to the sign bit.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; に設定されたビットのインデックスを反復する範囲。インデックス0は最下位ビットに対応します。符号付き整数の場合、最大のインデックスは符号ビットに対応します。</target>
        </trans-unit>
        <trans-unit id="2cd92460ddb1556aa3ff68a514d0c6002ee43410" translate="yes" xml:space="preserve">
          <source>Range to get, specified as an ASCII string.</source>
          <target state="translated">取得する範囲をASCII文字列で指定します。</target>
        </trans-unit>
        <trans-unit id="707606956aa2aad968b9a1b08feec62ccba19236" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of a randomly selected subset of the elements of &lt;code&gt;r&lt;/code&gt;, in the same order as these elements appear in &lt;code&gt;r&lt;/code&gt; itself. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an input range otherwise.  &lt;code&gt;RandomSample&lt;/code&gt; implements Jeffrey Scott Vitter's Algorithm D (see Vitter &lt;a href=&quot;http://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;, &lt;a href=&quot;http://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;), which selects a sample of size &lt;code&gt;n&lt;/code&gt; in O(n) steps and requiring O(n) random variates, regardless of the size of the data being sampled. The exception to this is if traversing k elements on the input range is itself an O(k) operation (e.g. when sampling lines from an input file), in which case the sampling calculation will inevitably be of O(total).  RandomSample will throw an exception if &lt;code&gt;total&lt;/code&gt; is verifiably less than the total number of elements available in the input, or if &lt;code&gt;n &amp;gt; total&lt;/code&gt;.  If no random number generator is passed to &lt;code&gt;randomSample&lt;/code&gt;, the thread-global RNG rndGen will be used internally.</source>
          <target state="translated">要素が &lt;code&gt;r&lt;/code&gt; の要素のランダムに選択されたサブセットで構成される範囲。これらの要素は &lt;code&gt;r&lt;/code&gt; 自体に現れるのと同じ順序です。 &lt;code&gt;r&lt;/code&gt; と &lt;code&gt;rng&lt;/code&gt; の両方が前方範囲の場合は前方範囲になり、そうでない場合は入力範囲になります。 &lt;code&gt;RandomSample&lt;/code&gt; 実装ジェフリー・スコットVitterのアルゴリズムD（Vitter参照&lt;a href=&quot;http://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;、&lt;a href=&quot;http://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;サイズのサンプルを選択する）、 &lt;code&gt;n&lt;/code&gt; はサンプリングされるデータのサイズに関係なく、O（n）ステップでO（n）ランダム変量を必要とします。これの例外は、入力範囲のk要素のトラバース自体がO（k）演算である場合（たとえば、入力ファイルからラインをサンプリングする場合）、その場合、サンプリング計算は必然的にO（合計）になります。 RandomSampleは、 &lt;code&gt;total&lt;/code&gt; が入力で使用可能な要素の総数よりも確実に少ない場合、または &lt;code&gt;n &amp;gt; total&lt;/code&gt; 場合に例外をスローします。 &lt;code&gt;randomSample&lt;/code&gt; に乱数ジェネレータが渡されない場合、スレッドグローバルRNG rndGenが内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="da898b85342ec8bed1bcedc57734a9570d8506e9" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of the elements of &lt;code&gt;r&lt;/code&gt;, in random order. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; otherwise.</source>
          <target state="translated">要素がランダムな順序で &lt;code&gt;r&lt;/code&gt; の要素で構成される範囲。 &lt;code&gt;r&lt;/code&gt; と &lt;code&gt;rng&lt;/code&gt; の両方が前方範囲の場合は前方範囲になり、そうでない場合は&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5e28d7706622cb0ade852ece3b071a320897761a" translate="yes" xml:space="preserve">
          <source>Range with &lt;code&gt;path&lt;/code&gt;'s extension (if any) replaced with &lt;code&gt;ext&lt;/code&gt;. The element encoding type of the returned range will be the same as &lt;code&gt;path&lt;/code&gt;'s.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; の拡張子（存在する場合）が &lt;code&gt;ext&lt;/code&gt; に置き換えられた範囲。返される範囲の要素のエンコードタイプは、 &lt;code&gt;path&lt;/code&gt; と同じになります。</target>
        </trans-unit>
        <trans-unit id="116ac105826a244bad9f22ac660f735b392e1f85" translate="yes" xml:space="preserve">
          <source>Range-checking integral arithmetic primitives.</source>
          <target state="translated">積分演算プリミティブのレンジチェック。</target>
        </trans-unit>
        <trans-unit id="63b0dce7a81bbf27d07ec74cffd13b62bccbd329" translate="yes" xml:space="preserve">
          <source>Range-generating function.</source>
          <target state="translated">レンジ生成機能。</target>
        </trans-unit>
        <trans-unit id="776b24fc4d7da279e8b47ad2f5463b819a8f755a" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;filename1&lt;/code&gt;</source>
          <target state="translated">範囲1 &lt;code&gt;filename1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47df8501644cae0437fd342841ac8295a7fd91e1" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">Range1 &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0980e211f154684c7c46a51fe24ce8151e9f12d8" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">範囲1 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="530d96382074b2a96b8d2dbeb5513c5515282c2c" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;filename2&lt;/code&gt;</source>
          <target state="translated">範囲2 &lt;code&gt;filename2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="146251698eace2c34854524a27ab059a70e0d910" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">Range2 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71efb0fda574fd881c8571530c85ca491f3c5777" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">範囲2 &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b36f6cc426c7e4986d8d9dc005e3e53da9e0cf17" translate="yes" xml:space="preserve">
          <source>RangeElementType &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="translated">RangeElementType &lt;code&gt;seed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ee35853bdc357f54f009f3a254a4c03179806f1" translate="yes" xml:space="preserve">
          <source>RangeIndex &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">RangeIndex &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cf9b28262ece92730f8184b32499cd27d72d4c2" translate="yes" xml:space="preserve">
          <source>RangeOfRanges &lt;code&gt;ror&lt;/code&gt;</source>
          <target state="translated">RangeOfRanges &lt;code&gt;ror&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b442bcb1aa8cfdb401a404b0f481728a04ecf1b4" translate="yes" xml:space="preserve">
          <source>RangeOfRanges &lt;code&gt;rr&lt;/code&gt;</source>
          <target state="translated">RangeOfRanges &lt;code&gt;rr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b53699547b38575c831f9690dd54cd38036de3a0" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;needles&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;needles&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d1121f255b3ef8af7acd07bdf41b901a70672ba" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2480f843b2cebe904b4544aa5e115caedcfbd07f" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;rs&lt;/code&gt;</source>
          <target state="translated">レンジ &lt;code&gt;rs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af1fe47aab0c9297bebfe22698519fd0f658a583" translate="yes" xml:space="preserve">
          <source>Ranges whose elements are sorted afford better efficiency with certain operations. For this, the &lt;a href=&quot;#assumeSorted&quot;&gt;&lt;code&gt;assumeSorted&lt;/code&gt;&lt;/a&gt; function can be used to construct a &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; from a pre-sorted range. The &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt; function also conveniently returns a &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; objects provide some additional range operations that take advantage of the fact that the range is sorted.</source>
          <target state="translated">要素が並べ替えられている範囲は、特定の操作で効率を向上させます。このため、&lt;a href=&quot;#assumeSorted&quot;&gt; &lt;code&gt;assumeSorted&lt;/code&gt; &lt;/a&gt;関数を使用して、事前にソートされた範囲から&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt;を構築できます。&lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt; の&lt;/a&gt;機能も便利返し&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; を&lt;/a&gt;。&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt;オブジェクトは、範囲がソートされているという事実を利用する追加の範囲操作をいくつか提供します。</target>
        </trans-unit>
        <trans-unit id="4740ea44823bfbe9405519b4bac22e0e17b64f14" translate="yes" xml:space="preserve">
          <source>Raw IP packet level</source>
          <target state="translated">生のIPパケットレベル</target>
        </trans-unit>
        <trans-unit id="dbbd161ce31773e9cd7b945bc7c7210cbae7218a" translate="yes" xml:space="preserve">
          <source>Raw IP packets</source>
          <target state="translated">生のIPパケット</target>
        </trans-unit>
        <trans-unit id="e4b566448bd7650313465965b6cfafb1bb7cafcb" translate="yes" xml:space="preserve">
          <source>Raw protocol access</source>
          <target state="translated">生のプロトコルアクセス</target>
        </trans-unit>
        <trans-unit id="dd5b5b23b8ce8fa52896e2ac4a4a4e0047ad5df9" translate="yes" xml:space="preserve">
          <source>Re-initializes a CURL handle to the default values. This puts back the handle to the same state as it was in when it was just created.</source>
          <target state="translated">CURLハンドルをデフォルト値に再初期化します。これは、ハンドルを作成時と同じ状態に戻します。</target>
        </trans-unit>
        <trans-unit id="0204268fc36b05e74ba6d24bf32f0f7225031176" translate="yes" xml:space="preserve">
          <source>Read Comma Separated Values and its variants from an input range of &lt;code&gt;dchar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dchar&lt;/code&gt; の入力範囲からカンマ区切り値とそのバリアントを読み取ります。</target>
        </trans-unit>
        <trans-unit id="7bf4a534bd19935da933046f9a9ff7be5b6a7965" translate="yes" xml:space="preserve">
          <source>Read Data From A BLOB Incrementally</source>
          <target state="translated">BLOBからのデータの読み込みを段階的に行う</target>
        </trans-unit>
        <trans-unit id="2a6216eecafd2c0e1689cf072f1f9d4d4eff5c9c" translate="yes" xml:space="preserve">
          <source>Read Only</source>
          <target state="translated">読み取り専用</target>
        </trans-unit>
        <trans-unit id="f13b46f1bcaa3336f76a4bb1c927333935e045b8" translate="yes" xml:space="preserve">
          <source>Read Only: 0 since multi-disk zip archives are not supported</source>
          <target state="translated">読み取り専用。0 マルチディスク zip アーカイブはサポートされていないため</target>
        </trans-unit>
        <trans-unit id="daeb93574c14c16e847fb4873cf6dd9d978f1654" translate="yes" xml:space="preserve">
          <source>Read Only: 0 since multi-disk zip archives are not supported.</source>
          <target state="translated">読み取り専用。マルチディスクの zip アーカイブはサポートされていないため、0。</target>
        </trans-unit>
        <trans-unit id="aeb6efe451bea0c8d7d3781b81b4f628fe0b1d54" translate="yes" xml:space="preserve">
          <source>Read Only: array indexed by the name of each member of the archive. All the members of the archive can be accessed with a foreach loop:</source>
          <target state="translated">Read Only:アーカイブの各メンバーの名前でインデックスを付けた配列。アーカイブのすべてのメンバーは、foreach ループでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="941b068be2efd168f5138f0b0c523d28d89195f0" translate="yes" xml:space="preserve">
          <source>Read Only: array representing the entire contents of the archive.</source>
          <target state="translated">Read Only:アーカイブの全内容を表す配列。</target>
        </trans-unit>
        <trans-unit id="c707160f130f3d61727e553912479baa11023fa3" translate="yes" xml:space="preserve">
          <source>Read Only: cyclic redundancy check (CRC) value</source>
          <target state="translated">読み取り専用:周期的冗長検査(CRC)値</target>
        </trans-unit>
        <trans-unit id="37523ba068074fb34f80a786c59f0949a0bd4bfe" translate="yes" xml:space="preserve">
          <source>Read Only: data of member in compressed form.</source>
          <target state="translated">読み取り専用:圧縮された形でのメンバーのデータ。</target>
        </trans-unit>
        <trans-unit id="f7d00fd7a00060d6f384892e8759fd7504161cf5" translate="yes" xml:space="preserve">
          <source>Read Only: number of ArchiveMembers in the directory.</source>
          <target state="translated">Read Only:ディレクトリ内の ArchiveMembers の数。</target>
        </trans-unit>
        <trans-unit id="500f35484e9abbf530f32db5d83ac4f5091547c0" translate="yes" xml:space="preserve">
          <source>Read Only: should be 0.</source>
          <target state="translated">読み取り専用:0でなければなりません。</target>
        </trans-unit>
        <trans-unit id="76fa98f53d73cc0c406390c18045e7868350c349" translate="yes" xml:space="preserve">
          <source>Read Only: size of data of member in compressed form.</source>
          <target state="translated">読み取り専用:メンバーのデータのサイズを圧縮したもの。</target>
        </trans-unit>
        <trans-unit id="65f6768887290d477790036287a9bbef818da0b4" translate="yes" xml:space="preserve">
          <source>Read Only: size of data of member in expanded form.</source>
          <target state="translated">読み取り専用:メンバーのデータのサイズを展開したもの。</target>
        </trans-unit>
        <trans-unit id="bcb56aa9801ff39c7c5c53b9416551690e5ddef9" translate="yes" xml:space="preserve">
          <source>Read and analyze .ini file. Write the entries into environment as well as any entries in one of the specified section(s).</source>
          <target state="translated">.ini ファイルを読み込んで解析します。指定されたセクションのいずれかのエントリと同様に、環境にエントリを書き込みます。</target>
        </trans-unit>
        <trans-unit id="6482d751184571d336715e5ce98ca71e679af2fb" translate="yes" xml:space="preserve">
          <source>Read and extract information from the LSDA (aka gcc_except_table section). The dmd Call Site Table is structurally different from other implementations. It is organized as nested ranges, and one ip can map to multiple ranges. The most nested candidate is selected when searched. Other implementations have one candidate per ip.</source>
          <target state="translated">LSDA(別名gcc_except_tableセクション)から情報を読み込んで抽出します。dmd コールサイトテーブルは他の実装とは構造的に異なります。それはネストされた範囲として構成されており、1つのIPが複数の範囲にマッピングすることができます。検索されると、最もネストした候補が選択されます。他の実装では ip ごとに 1 つの候補があります。</target>
        </trans-unit>
        <trans-unit id="1ca36a6d1a8024ba4e6382a71d1b05bf29a17256" translate="yes" xml:space="preserve">
          <source>Read and write memory mapped files.</source>
          <target state="translated">メモリマップされたファイルを読み書きします。</target>
        </trans-unit>
        <trans-unit id="b5129a39480a3d2b242d64db6d87355e637b5720" translate="yes" xml:space="preserve">
          <source>Read compression method used for this member</source>
          <target state="translated">このメンバーに使用されている圧縮方法を読み取る</target>
        </trans-unit>
        <trans-unit id="a11dbc73850fcef58bf265b2adb7abd5a96fb618" translate="yes" xml:space="preserve">
          <source>Read data of member in uncompressed form.</source>
          <target state="translated">メンバーのデータを非圧縮で読み込みます。</target>
        </trans-unit>
        <trans-unit id="15e729183b6bbb3c96de02707732c85d58fc57e3" translate="yes" xml:space="preserve">
          <source>Read entire contents of file &lt;code&gt;name&lt;/code&gt; and returns it as an untyped array. If the file size is larger than &lt;code&gt;upTo&lt;/code&gt;, only &lt;code&gt;upTo&lt;/code&gt; bytes are read.</source>
          <target state="translated">ファイル &lt;code&gt;name&lt;/code&gt; 内容全体を読み取り、それを型なし配列として返します。ファイルサイズが &lt;code&gt;upTo&lt;/code&gt; よりも大きい場合、 &lt;code&gt;upTo&lt;/code&gt; バイトのみが読み取られます。</target>
        </trans-unit>
        <trans-unit id="e50a3835e7ed3805683e79e2f0b67243a73a025e" translate="yes" xml:space="preserve">
          <source>Read existing file</source>
          <target state="translated">既存のファイルの読み込み</target>
        </trans-unit>
        <trans-unit id="d2bd0cb4091355445f011133c7426913211afbad" translate="yes" xml:space="preserve">
          <source>Read file with UTF-8 text.</source>
          <target state="translated">UTF-8テキストでファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="7255add54c8b431c5ee373b24cdada7d3a659620" translate="yes" xml:space="preserve">
          <source>Read from environment, looking for cached value first.</source>
          <target state="translated">環境から読み込み、最初にキャッシュされた値を探します。</target>
        </trans-unit>
        <trans-unit id="a47b81ebcf1543263ad72fe2f768ac67a71b73dc" translate="yes" xml:space="preserve">
          <source>Read line from &lt;code&gt;stdin&lt;/code&gt; and write it to buf[], including terminating character.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; から行を読み取り、終了文字を含めてbuf []に書き込みます。</target>
        </trans-unit>
        <trans-unit id="d8f811ca8b7536e2bd18e121930035ea9d87e604" translate="yes" xml:space="preserve">
          <source>Read line from &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; から行を読み取ります。</target>
        </trans-unit>
        <trans-unit id="7167a92897a624e8504adb4cd2a5a34e4de7474b" translate="yes" xml:space="preserve">
          <source>Read line from the file handle and return it as a specified type.</source>
          <target state="translated">ファイルハンドルから行を読み込み、指定した型で返す。</target>
        </trans-unit>
        <trans-unit id="3626936104de340f9dc657d57e3e205a91742a48" translate="yes" xml:space="preserve">
          <source>Read line from the file handle and write it to &lt;code&gt;buf[]&lt;/code&gt;, including terminating character.</source>
          <target state="translated">ファイルハンドルから行を読み取り、それを終了文字を含めて &lt;code&gt;buf[]&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="f126d6e5ba18f6b69cd4a89774a06f3c5bbdb803" translate="yes" xml:space="preserve">
          <source>Read only column &quot;b&quot;</source>
          <target state="translated">列 &quot;b &quot;のみを読み取る</target>
        </trans-unit>
        <trans-unit id="3bdb33401fe4b455f64f2355674da6381ea3dcf1" translate="yes" xml:space="preserve">
          <source>Read the full content of a file.</source>
          <target state="translated">ファイルの全内容を読む。</target>
        </trans-unit>
        <trans-unit id="fe36e093f9131fcd50814e2c651fcef59428379e" translate="yes" xml:space="preserve">
          <source>Read while rearranging the columns by specifying a header with a different order&quot;</source>
          <target state="translated">順番の違うヘッダーを指定して列を並べ替えながら読む&quot;</target>
        </trans-unit>
        <trans-unit id="be7bf71bf64bf5ca7c3921558df8d8639ad9a2a3" translate="yes" xml:space="preserve">
          <source>Read-only property returning the file mode.</source>
          <target state="translated">ファイルモードを返す読み取り専用のプロパティです。</target>
        </trans-unit>
        <trans-unit id="54fbc1f4a81c75722e5054ba2699b77b89eb33d4" translate="yes" xml:space="preserve">
          <source>Read/Write</source>
          <target state="translated">Read/Write</target>
        </trans-unit>
        <trans-unit id="793ac345cad21d2b3a829536767f3b084b7fcb7b" translate="yes" xml:space="preserve">
          <source>Read/Write existing file, copy on write</source>
          <target state="translated">ReadWrite 既存のファイルの書き込み、書き込み時のコピー</target>
        </trans-unit>
        <trans-unit id="571a60bf0099eb1f30ed179832005e81ec663545" translate="yes" xml:space="preserve">
          <source>Read/Write existing file, create if not existing</source>
          <target state="translated">ReadWrite 既存のファイルを読み込み、既存のファイルがなければ作成します。</target>
        </trans-unit>
        <trans-unit id="7fe06b399c58642e4de81a3f82d07fbe4afe74a1" translate="yes" xml:space="preserve">
          <source>Read/Write: Usually the file name of the archive member; it is used to index the archive directory for the member. Each member must have a unique name[]. Do not change without removing member from the directory first.</source>
          <target state="translated">ReadWrite。通常は、アーカイブ・メンバーのファイル名です。各メンバーは一意の名前[]を持つ必要があります。最初にディレクトリからメンバーを削除しない限り、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="3a008a6fccbdd299dfd851251b1534db30fd0f3e" translate="yes" xml:space="preserve">
          <source>Read/Write: comment associated with this member.</source>
          <target state="translated">ReadWrite:このメンバーに関連付けられたコメント。</target>
        </trans-unit>
        <trans-unit id="d383128b0f051fe35d791444c1d6fe4cd41e3c05" translate="yes" xml:space="preserve">
          <source>Read/Write: extra data for this member.</source>
          <target state="translated">ReadWrite:このメンバの追加データ。</target>
        </trans-unit>
        <trans-unit id="98a17bcae0cd7700026db1303aefc632686b92aa" translate="yes" xml:space="preserve">
          <source>Read/Write: normally set to 0</source>
          <target state="translated">ReadWrite:通常は0に設定されています。</target>
        </trans-unit>
        <trans-unit id="3a672fd0925e6494dab48c64aa0ff9efb8bb8842" translate="yes" xml:space="preserve">
          <source>Read/Write: the archive comment. Must be less than 65536 bytes in length.</source>
          <target state="translated">ReadWrite:アーカイブのコメント。長さ65536バイト以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a34abcab13dc3b37844a4a869596072b4312f7c5" translate="yes" xml:space="preserve">
          <source>Read/write data in JSON format.</source>
          <target state="translated">JSON形式でデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="2d37d83a47a9d418dccdd946b1e2fcc90f05a71a" translate="yes" xml:space="preserve">
          <source>Read/write data in XML format.</source>
          <target state="translated">XML形式でデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="8c46f78031b7950f9e7d9673ba0df2dfe13afc98" translate="yes" xml:space="preserve">
          <source>Read/write data in the &lt;a href=&quot;http://www.info-zip.org&quot;&gt;zip archive&lt;/a&gt; format. Makes use of the etc.c.zlib compression library.</source>
          <target state="translated">&lt;a href=&quot;http://www.info-zip.org&quot;&gt;zipアーカイブ&lt;/a&gt;形式でデータを読み書きします。etc.c.zlib圧縮ライブラリを使用します。</target>
        </trans-unit>
        <trans-unit id="bcb7a7d852fe72a0b67997abe377c1452bcf06c2" translate="yes" xml:space="preserve">
          <source>Read/write data in the ZIP archive format.</source>
          <target state="translated">ZIPアーカイブ形式のデータを読み書きします。</target>
        </trans-unit>
        <trans-unit id="896a8af6369e03daade58ae0948e0a69e86551d9" translate="yes" xml:space="preserve">
          <source>Read/write value from/to the memory location indicated by ptr.</source>
          <target state="translated">ptr で指定されたメモリ位置に値を読み書きします。</target>
        </trans-unit>
        <trans-unit id="29320f79883d1853fbce071c212f5c5744be2f6e" translate="yes" xml:space="preserve">
          <source>Readers get preference. This may starve writers.</source>
          <target state="translated">読者が優先される。これは作家を飢えさせるかもしれない。</target>
        </trans-unit>
        <trans-unit id="cffa2af0a3a67cf2123e3411d020161abc01fc05" translate="yes" xml:space="preserve">
          <source>Reading</source>
          <target state="translated">Reading</target>
        </trans-unit>
        <trans-unit id="18d8a220aa279e4eb04bfb2f9eda0af845a3d548" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt; with a argument counter.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; を読み取り、それを引数カウンターとともに &lt;code&gt;stdout&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="26b3984875d670d5e743016573bc157db0855be6" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt; with an argument counter.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; を読み取り、それを引数カウンターとともに &lt;code&gt;stdout&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="c03ee569a80e822a17cdfa9040b93b3d08ce8229" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; を読み取り、それを &lt;code&gt;stdout&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="d108f6e16abea10d9fb4947ccc236e24041d31dd" translate="yes" xml:space="preserve">
          <source>Reads I/O port at port_address.</source>
          <target state="translated">port_addressでIOポートを読み込みます。</target>
        </trans-unit>
        <trans-unit id="49cb4212fc28223325da7d9c58c5aaefd148c02c" translate="yes" xml:space="preserve">
          <source>Reads a file line by line and parses the line into a single value or a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; of values depending on the length of &lt;code&gt;Types&lt;/code&gt;. The lines are parsed using the specified format string. The format string is passed to &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;, and therefore must conform to the format string specification outlined in &lt;a href=&quot;std_format&quot;&gt;&lt;code&gt;std.format&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルを1行&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt;読み取り、その行を解析して、 &lt;code&gt;Types&lt;/code&gt; の長さに応じて単一の値またはstd.typecons.Tupleの値にします。行は、指定されたフォーマット文字列を使用して解析されます。フォーマット文字列は&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;に渡されるため、&lt;a href=&quot;std_format&quot;&gt; &lt;code&gt;std.format&lt;/code&gt; で&lt;/a&gt;説明されているフォーマット文字列仕様に準拠する必要があります。</target>
        </trans-unit>
        <trans-unit id="f40a973dcb25e5ede27e5aac103cea1b0db87b35" translate="yes" xml:space="preserve">
          <source>Reads a file, terminate the program on error</source>
          <target state="translated">ファイルを読み込んで、エラーでプログラムを終了する</target>
        </trans-unit>
        <trans-unit id="d8bb597f2dda425a5e5ea130e0bc100fab704034" translate="yes" xml:space="preserve">
          <source>Reads a value from the given input range according to spec and returns it as type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">仕様に従って指定された入力範囲から値を読み取り、タイプ &lt;code&gt;T&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="fe9af776ce0213a2d633f3fe45cfb534ec9ac7fb" translate="yes" xml:space="preserve">
          <source>Reads an object module from base[] and passes the names of any exported symbols to (*pAddSymbol)().</source>
          <target state="translated">base[]からオブジェクトモジュールを読み込み、エクスポートされたシンボルの名前を(*pAddSymbol)に渡します。</target>
        </trans-unit>
        <trans-unit id="a9a36b275679d0e70daad4cad40c7a7d537f1582" translate="yes" xml:space="preserve">
          <source>Reads and validates (using &lt;a href=&quot;std_utf#validate&quot;&gt;&lt;code&gt;std.utf.validate&lt;/code&gt;&lt;/a&gt;) a text file. S can be an array of any character type. However, no width or endian conversions are performed. So, if the width or endianness of the characters in the given file differ from the width or endianness of the element type of S, then validation will fail.</source>
          <target state="translated">（&lt;a href=&quot;std_utf#validate&quot;&gt; &lt;code&gt;std.utf.validate&lt;/code&gt; &lt;/a&gt;を使用して）テキストファイルを読み取り、検証します。Sは、任意の文字型の配列です。ただし、幅またはエンディアンの変換は実行されません。したがって、指定されたファイル内の文字の幅またはエンディアンが、Sの要素タイプの幅またはエンディアンと異なる場合、検証は失敗します。</target>
        </trans-unit>
        <trans-unit id="9873cf676e4ad0a9b2f4951a3e2128cef4ddc619" translate="yes" xml:space="preserve">
          <source>Reads characters from &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;&lt;code&gt;r&lt;/code&gt;, converts them according to &lt;code&gt;fmt&lt;/code&gt;, and writes them to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt; &lt;code&gt;r&lt;/code&gt; から文字を読み取り、それらを &lt;code&gt;fmt&lt;/code&gt; に従って変換し、それらを &lt;code&gt;args&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="72a110505374f57a1f54b6f7fdd1bd89dff1480a" translate="yes" xml:space="preserve">
          <source>Reads formatted data from &lt;code&gt;stdin&lt;/code&gt; using &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;stdin&lt;/code&gt; からフォーマット済みデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="f0b3e3d070da32ebbebc915ce449f0f887bdc340" translate="yes" xml:space="preserve">
          <source>Reads formatted data from the file using &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; &lt;/a&gt;を使用して、ファイルからフォーマット済みデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="b8de846f2f646cdf61597148ce44078d0aec9ef3" translate="yes" xml:space="preserve">
          <source>Reads one full grapheme cluster from an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of dchar &lt;code&gt;inp&lt;/code&gt;.</source>
          <target state="translated">dchar &lt;code&gt;inp&lt;/code&gt; の&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;から1つの完全な書記素クラスターを読み取ります。</target>
        </trans-unit>
        <trans-unit id="63176e821ee6fb97ffd79dbfd971c2e359909db2" translate="yes" xml:space="preserve">
          <source>Reads the file from &lt;code&gt;srcfile&lt;/code&gt; and loads the source buffer.</source>
          <target state="translated">&lt;code&gt;srcfile&lt;/code&gt; からファイルを読み取り、ソースバッファをロードします。</target>
        </trans-unit>
        <trans-unit id="d66adb30a59f74a0595960a81c8fa1185e3cac95" translate="yes" xml:space="preserve">
          <source>Reads values according to the format string from an InputRange.</source>
          <target state="translated">InputRangeからフォーマット文字列に従って値を読み込みます。</target>
        </trans-unit>
        <trans-unit id="fab1e24f991774bddf40367f9e156ce01d7843b7" translate="yes" xml:space="preserve">
          <source>Ready-made predicate functions to compare two values.</source>
          <target state="translated">2つの値を比較するためのレディメイドの述語関数。</target>
        </trans-unit>
        <trans-unit id="cab51a15bffa042cbc4510d8ab0c3275285bc68c" translate="yes" xml:space="preserve">
          <source>Reallocates &lt;code&gt;b&lt;/code&gt; to new size &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; を新しいサイズ &lt;code&gt;s&lt;/code&gt; に再割り当てします。</target>
        </trans-unit>
        <trans-unit id="23686a2e44a73b949efd61ec6a53e06f541eaa5e" translate="yes" xml:space="preserve">
          <source>Reallocates &lt;code&gt;b&lt;/code&gt; to size &lt;code&gt;s&lt;/code&gt;, possibly moving memory around. &lt;code&gt;b&lt;/code&gt; must be &lt;code&gt;null&lt;/code&gt; or a buffer allocated with the same allocator. If reallocation was successful, &lt;code&gt;reallocate&lt;/code&gt; changes &lt;code&gt;b&lt;/code&gt; appropriately and returns &lt;code&gt;true&lt;/code&gt;. Upon failure, the call effects no change upon the allocator object, leaves &lt;code&gt;b&lt;/code&gt; unchanged, and returns &lt;code&gt;false&lt;/code&gt;. An allocator should implement &lt;code&gt;reallocate&lt;/code&gt; if it can derive some advantage from doing so; otherwise, this module defines a &lt;code&gt;reallocate&lt;/code&gt; free function implemented in terms of &lt;code&gt;expand&lt;/code&gt;, &lt;code&gt;allocate&lt;/code&gt;, and &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; をサイズ &lt;code&gt;s&lt;/code&gt; に再割り当てし、メモリを移動する可能性があります。 &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; または同じアロケータで割り当てられたバッファでなければなりません。再割り当てが成功した場合、変更 &lt;code&gt;b&lt;/code&gt; を適切に &lt;code&gt;reallocate&lt;/code&gt; し、 &lt;code&gt;true&lt;/code&gt; を返します。失敗した場合、呼び出しはアロケータオブジェクトに変更を加えず、 &lt;code&gt;b&lt;/code&gt; を変更せずに &lt;code&gt;false&lt;/code&gt; を返します。アロケータは、そうすることからいくつかの利点を引き出すことができる場合、 &lt;code&gt;reallocate&lt;/code&gt; を実装する必要があります。それ以外の場合、このモジュールは、 &lt;code&gt;expand&lt;/code&gt; 、 &lt;code&gt;allocate&lt;/code&gt; 、およびに関して実装された &lt;code&gt;reallocate&lt;/code&gt; free関数を定義します &lt;code&gt;deallocate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d23aabd138f3b9a3380f8a3c9397aa4757a27130" translate="yes" xml:space="preserve">
          <source>Reallocates a block previously allocated with &lt;code&gt;alignedAllocate&lt;/code&gt;. Contractions do not occur in place.</source>
          <target state="translated">以前に &lt;code&gt;alignedAllocate&lt;/code&gt; 割り当てられたブロックを再割り当てします。収縮は行われません。</target>
        </trans-unit>
        <trans-unit id="e0477ffd1001aa8fef0b44f8b7b7bfdbdd0f52b7" translate="yes" xml:space="preserve">
          <source>Reallocates a memory block with specified alignment.</source>
          <target state="translated">指定されたアラインメントでメモリブロックを再確保します。</target>
        </trans-unit>
        <trans-unit id="bb582920b89e35f47891a53d95ae14c32e375aab" translate="yes" xml:space="preserve">
          <source>Reallocates a memory block.</source>
          <target state="translated">メモリブロックを再割り当てします。</target>
        </trans-unit>
        <trans-unit id="255724aaef111ccd96dea7a8cd7a8bf558ede2b3" translate="yes" xml:space="preserve">
          <source>Reallocates a previously-allocated block. Contractions occur in place.</source>
          <target state="translated">以前に割り当てられたブロックを再割り当てします。縮退はその場で発生します。</target>
        </trans-unit>
        <trans-unit id="8f515dad658f77a733680500f8d84e939a8562c8" translate="yes" xml:space="preserve">
          <source>Rearranges elements in &lt;code&gt;r&lt;/code&gt; in three adjacent ranges and returns them. The first and leftmost range only contains elements in &lt;code&gt;r&lt;/code&gt; less than &lt;code&gt;pivot&lt;/code&gt;. The second and middle range only contains elements in &lt;code&gt;r&lt;/code&gt; that are equal to &lt;code&gt;pivot&lt;/code&gt;. Finally, the third and rightmost range only contains elements in &lt;code&gt;r&lt;/code&gt; that are greater than &lt;code&gt;pivot&lt;/code&gt;. The less-than test is defined by the binary function &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の要素を3つの隣接する範囲に再配置して返します。最初と左端の範囲には、 &lt;code&gt;pivot&lt;/code&gt; よりも小さい &lt;code&gt;r&lt;/code&gt; の要素のみが含まれます。2番目と中間の範囲には、 &lt;code&gt;pivot&lt;/code&gt; と等しい &lt;code&gt;r&lt;/code&gt; の要素のみが含まれます。最後に、3番目の右端の範囲には、 &lt;code&gt;pivot&lt;/code&gt; より大きい &lt;code&gt;r&lt;/code&gt; の要素のみが含まれます。小なりテストは、バイナリ関数 &lt;code&gt;less&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="028e13bd0298376bf31316a3db976d1f8d73160a" translate="yes" xml:space="preserve">
          <source>Reason &lt;strong id=&quot;reason&quot;&gt;reason&lt;/strong&gt;;</source>
          <target state="translated">理由&lt;strong id=&quot;reason&quot;&gt;理由&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="38a2132f7d06a3de3c8f482a30348e738425b184" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;code&gt;obj&lt;/code&gt;</source>
          <target state="translated">再バインド可能！T &lt;code&gt;obj&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7dfd63b70a6c7e705a4445213f0cca37c1792b78" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;(T)(Rebindable!T obj);</source>
          <target state="translated">Rebindable！T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;（T）（Rebindable！T obj）;</target>
        </trans-unit>
        <trans-unit id="1bc1917f2d07d2c9a111dd45e98efe3841e1c509" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;(T)(T obj)</source>
          <target state="translated">Rebindable！T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;（T）（T obj）</target>
        </trans-unit>
        <trans-unit id="d331e630b2896b20a876047a4c30e580c4e0b158" translate="yes" xml:space="preserve">
          <source>Receive a message from another thread, or block if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found.</source>
          <target state="translated">他のスレッドからのメッセージを受信するか、指定したタイプのメッセージが利用できない場合はブロックします。この関数は、メッセージをデリゲートのセットに対してパターンマッチさせ、最初に見つかったマッチを実行することで動作します。</target>
        </trans-unit>
        <trans-unit id="9965bf28e85415bb8f63bacd2e9f47d2c22ec76b" translate="yes" xml:space="preserve">
          <source>Receive buffer size</source>
          <target state="translated">受信バッファサイズ</target>
        </trans-unit>
        <trans-unit id="8b1387a64dcd22aaaab5eec91298777b523da5ea" translate="yes" xml:space="preserve">
          <source>Receive data and get the remote endpoint &lt;code&gt;Address&lt;/code&gt;. If the socket is blocking, &lt;code&gt;receiveFrom&lt;/code&gt; waits until there is data to be received.</source>
          <target state="translated">データを受信し、リモートエンドポイントの &lt;code&gt;Address&lt;/code&gt; を取得します。ソケットがブロックしている場合、 &lt;code&gt;receiveFrom&lt;/code&gt; は受信するデータがあるまで待機します。</target>
        </trans-unit>
        <trans-unit id="1d55cf19e7769478d5e838fbbb6306259dd64f58" translate="yes" xml:space="preserve">
          <source>Receive data on the connection. If the socket is blocking, &lt;code&gt;receive&lt;/code&gt; waits until there is data to be received.</source>
          <target state="translated">接続でデータを受信します。ソケットがブロックしている場合、 &lt;code&gt;receive&lt;/code&gt; は受信するデータがあるまで待機します。</target>
        </trans-unit>
        <trans-unit id="84f50b3ba0f36e6f16be3df90ac3abf9c5a37ad4" translate="yes" xml:space="preserve">
          <source>Receive out-of-band data in band</source>
          <target state="translated">バンド内の帯域外データを受信する</target>
        </trans-unit>
        <trans-unit id="e48814461f501b48cd0f2672a164a1c8547c1c5a" translate="yes" xml:space="preserve">
          <source>Receive timeout</source>
          <target state="translated">受信タイムアウト</target>
        </trans-unit>
        <trans-unit id="c8c96dab7a595e26ee5bfe55d132ef127b4461ed" translate="yes" xml:space="preserve">
          <source>Receives a message from another thread.</source>
          <target state="translated">他のスレッドからのメッセージを受信する。</target>
        </trans-unit>
        <trans-unit id="1ef50d47b70da48b55093a57f6ce6bbce8de63f5" translate="yes" xml:space="preserve">
          <source>Receives a string key as argument. The result is an expression describing the requested target information.</source>
          <target state="translated">引数として文字列キーを受け取ります。結果は、要求された対象情報を記述した式です。</target>
        </trans-unit>
        <trans-unit id="7e73f9083a3fcdc41737d365f5ca155b818a6aec" translate="yes" xml:space="preserve">
          <source>Receives data from the connected socket. Use after successful curl_easy_perform() with CURLOPT_CONNECT_ONLY option.</source>
          <target state="translated">接続されたソケットからデータを受信します。CURLOPT_CONNECT_ONLY オプションで curl_easy_perform()に成功した後に使用します。</target>
        </trans-unit>
        <trans-unit id="033c316ca5ee67eb25d34d41cddc41a48f5386f5" translate="yes" xml:space="preserve">
          <source>Receives only messages with arguments of types &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 型の引数を持つメッセージのみを受信します。</target>
        </trans-unit>
        <trans-unit id="347a8e34dcdfe0c261bbae1b232251ad673cf4a9" translate="yes" xml:space="preserve">
          <source>Record debugging information</source>
          <target state="translated">デバッグ情報の記録</target>
        </trans-unit>
        <trans-unit id="1f96545aca9f95a449dc3f5d1c56c54871ec8af3" translate="yes" xml:space="preserve">
          <source>Record separator</source>
          <target state="translated">レコードセパレータ</target>
        </trans-unit>
        <trans-unit id="b867c7900a8ddf139368afe948cced43cd8de4b0" translate="yes" xml:space="preserve">
          <source>Rectangular Arrays</source>
          <target state="translated">長方形配列</target>
        </trans-unit>
        <trans-unit id="6e974f9bd66c81587b1db5a9b54ad777181a0b76" translate="yes" xml:space="preserve">
          <source>Recurrence!(fun, CommonType!State, State.length) &lt;strong id=&quot;recurrence&quot;&gt;recurrence&lt;/strong&gt;(alias fun, State...)(State initial);</source>
          <target state="translated">Recurrence！（fun、CommonType！State、State.length）&lt;strong id=&quot;recurrence&quot;&gt;recurrence&lt;/strong&gt;（alias fun、State ...）（State initial）;</target>
        </trans-unit>
        <trans-unit id="4a622afbcf711dd746ebf0dc2eb33902db5a905a" translate="yes" xml:space="preserve">
          <source>Recursive Templates</source>
          <target state="translated">再帰的なテンプレート</target>
        </trans-unit>
        <trans-unit id="fd645005541e35822634b62f9cf07c4841702213" translate="yes" xml:space="preserve">
          <source>Recursively calls the &lt;code&gt;opPostMove&lt;/code&gt; callbacks of a struct and its members if they're defined.</source>
          <target state="translated">構造体とそのメンバーが定義されている場合は、それらの &lt;code&gt;opPostMove&lt;/code&gt; コールバックを再帰的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="f7ddc39eecf352c1e235c0728bb6fd43812d50da" translate="yes" xml:space="preserve">
          <source>Recursively look at every module this module imports, return true if it imports m. Can be used to detect circular imports.</source>
          <target state="translated">このモジュールがインポートするすべてのモジュールを再帰的に調べ、m をインポートしている場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="9c08948c7f09d89104efa65883fc39648db73808" translate="yes" xml:space="preserve">
          <source>Recursively scanning all allocated memory pointed to by roots looking for more pointers into GC allocated memory.</source>
          <target state="translated">GC の割り当てられたメモリへのより多くのポインタを探すために、ルーツが指すすべての割り当てられたメモリを再帰的にスキャンします。</target>
        </trans-unit>
        <trans-unit id="c1a0c000cb1b2ae85456d0a51e79e682d551f1f8" translate="yes" xml:space="preserve">
          <source>Recycling temporary buffers across iterations of a parallel foreach loop.</source>
          <target state="translated">並列foreachループの反復に渡る一時的なバッファをリサイクルします。</target>
        </trans-unit>
        <trans-unit id="8dcc8f0ea09d6b329c32ee33bce8b233e4de04a7" translate="yes" xml:space="preserve">
          <source>Redirect &lt;code&gt;redirect&lt;/code&gt;</source>
          <target state="translated">リダイレクト &lt;code&gt;redirect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e46b7f03c259fa26e24f1d796394f5dca85e2df6" translate="yes" xml:space="preserve">
          <source>Redirect all three streams. This is equivalent to &lt;code&gt;Redirect.stdin | Redirect.stdout | Redirect.stderr&lt;/code&gt;.</source>
          <target state="translated">3つのストリームすべてをリダイレクトします。これは、 &lt;code&gt;Redirect.stdin | Redirect.stdout | Redirect.stderr&lt;/code&gt; と同等です。Redirect.stdout | Redirect.stderr。</target>
        </trans-unit>
        <trans-unit id="9845ed195b026191f64bea3adcb719aff1093dda" translate="yes" xml:space="preserve">
          <source>Redirect the standard error stream into the standard output stream. This can not be combined with &lt;code&gt;Redirect.stderr&lt;/code&gt;.</source>
          <target state="translated">標準エラーストリームを標準出力ストリームにリダイレクトします。これは &lt;code&gt;Redirect.stderr&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="42baec091b8bacb781758c8fc0c08592e8ffddc3" translate="yes" xml:space="preserve">
          <source>Redirect the standard input, output or error streams, respectively.</source>
          <target state="translated">標準入力、標準出力、エラーストリームをそれぞれリダイレクトする。</target>
        </trans-unit>
        <trans-unit id="80fbb398850ffc67d552f8c380bb4aa84a0ac302" translate="yes" xml:space="preserve">
          <source>Redirect the standard output stream into the standard error stream. This can not be combined with &lt;code&gt;Redirect.stdout&lt;/code&gt;.</source>
          <target state="translated">標準出力ストリームを標準エラーストリームにリダイレクトします。これは &lt;code&gt;Redirect.stdout&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="9ced0df5f00cdd338d0d1abe97f8c296ab289eda" translate="yes" xml:space="preserve">
          <source>Reduces the length of the &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt;&lt;code&gt;range&lt;/code&gt; by removing elements that satisfy &lt;code&gt;pred&lt;/code&gt;. If &lt;code&gt;s = SwapStrategy.unstable&lt;/code&gt;, elements are moved from the right end of the range over the elements to eliminate. If &lt;code&gt;s = SwapStrategy.stable&lt;/code&gt; (the default), elements are moved progressively to front such that their relative order is preserved. Returns the filtered range.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; を満たす要素を削除することにより、&lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;双方向範囲の&lt;/a&gt; &lt;code&gt;range&lt;/code&gt; 長さを短くします。 &lt;code&gt;s = SwapStrategy.unstable&lt;/code&gt; 場合、要素は範囲の右端から削除する要素の上に移動します。場合 &lt;code&gt;s = SwapStrategy.stable&lt;/code&gt; （デフォルト）、要素は、それらの相対的順序が保存されるフロントように漸進的に移動されます。フィルタリングされた範囲を返します。</target>
        </trans-unit>
        <trans-unit id="a38ed0ebd88e5865ccf3df6d0f1c1a6214e613a7" translate="yes" xml:space="preserve">
          <source>Ref Functions</source>
          <target state="translated">参照機能</target>
        </trans-unit>
        <trans-unit id="93a3795b3f7bea3488bc980a00ebb42b7f194f23" translate="yes" xml:space="preserve">
          <source>Ref Return Scope Parameters</source>
          <target state="translated">参照 リターンスコープパラメータ</target>
        </trans-unit>
        <trans-unit id="ffb8735c2880ff82932bdca464eb4f0ca4ed037e" translate="yes" xml:space="preserve">
          <source>Ref functions allow functions to return by reference. This is analogous to ref function parameters.</source>
          <target state="translated">ref関数は、関数が参照によって返すことを可能にします。これは ref 関数のパラメータと類似しています。</target>
        </trans-unit>
        <trans-unit id="218cfb31767f23e1b298ff28247fa438c5c3eba2" translate="yes" xml:space="preserve">
          <source>RefAppender!(E[]) &lt;strong id=&quot;appender&quot;&gt;appender&lt;/strong&gt;(P : E[]*, E)(P arrayPtr);</source>
          <target state="translated">！RefAppender（E []）&lt;strong id=&quot;appender&quot;&gt;アペンダ&lt;/strong&gt;（P：E [] *、E）（P arrayPtr）。</target>
        </trans-unit>
        <trans-unit id="2e3d9fdbfb40928983e19824181527eeea7cd51c" translate="yes" xml:space="preserve">
          <source>RefCounted!(T, RefCountedAutoInitialize.no) &lt;strong id=&quot;refCounted&quot;&gt;refCounted&lt;/strong&gt;(T)(T val);</source>
          <target state="translated">RefCounted！（T、RefCountedAutoInitialize.no）&lt;strong id=&quot;refCounted&quot;&gt;refCounted&lt;/strong&gt;（T）（T val）;</target>
        </trans-unit>
        <trans-unit id="c7095fa996b8aea93416332641555e8ef550acca" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;std_uni&quot;&gt;&lt;code&gt;std.uni&lt;/code&gt;&lt;/a&gt; docs for a reference on Unicode terminology.  For a range that iterates by grapheme cluster (written character) see &lt;a href=&quot;std_uni#byGrapheme&quot;&gt;&lt;code&gt;std.uni.byGrapheme&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Unicode用語のリファレンスについては、&lt;a href=&quot;std_uni&quot;&gt; &lt;code&gt;std.uni&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。書記素クラスタ（書き込まれた文字）で反復する範囲については、&lt;a href=&quot;std_uni#byGrapheme&quot;&gt; &lt;code&gt;std.uni.byGrapheme&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5c95d85c5af695bcdab44f180e8c12e772a641c9" translate="yes" xml:space="preserve">
          <source>Refer to the page for &lt;a href=&quot;lex&quot;&gt;lexical syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lex&quot;&gt;字句構文&lt;/a&gt;については、ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="b526c61314d0201e1fe9face79911a4659cd51ac" translate="yes" xml:space="preserve">
          <source>Reference Links</source>
          <target state="translated">参考リンク</target>
        </trans-unit>
        <trans-unit id="5f8843090009dc1b1594827e9439fcc612a46af4" translate="yes" xml:space="preserve">
          <source>Reference Types</source>
          <target state="translated">リファレンスタイプ</target>
        </trans-unit>
        <trans-unit id="bda0985509ec7a10650d2f5fca41cb601751ac0d" translate="yes" xml:space="preserve">
          <source>Reference counting is a common solution to solve explicit memory allocation problems. The code to implement the increment and decrement operations whenever assignments are made is one source of slowdown. Hiding it behind smart pointer classes doesn't help the speed. (Reference counting methods are not a general solution anyway, as circular references never get deleted.)</source>
          <target state="translated">参照カウントは、明示的なメモリ割り当て問題を解決するための一般的な解決策です。割り当てが行われるたびにインクリメントとデクリメント演算を実装するコードは、速度低下の原因の1つです。これをスマートポインタクラスの後ろに隠しても、速度の改善にはなりません。(参照カウントメソッドは、循環参照が削除されることがないので、いずれにせよ一般的な解決策ではありません)。</target>
        </trans-unit>
        <trans-unit id="3795199e8f73e2699416b487db6aaeec12a18d75" translate="yes" xml:space="preserve">
          <source>Reference definitions start with a label in square brackets, followed by a colon, a URL and an optional title wrapped in single or double quotes, or in parentheses. If a reference label would match both a D symbol and a reference definition then the reference definition is used.</source>
          <target state="translated">参照定義は、角括弧内のラベルで始まり、その後にコロン、URL、およびオプションのタイトルが一重引用符または二重引用符で、または括弧で囲まれています。参照ラベルが D シンボルと参照定義の両方に一致する場合は、参照定義が使用されます。</target>
        </trans-unit>
        <trans-unit id="54b77a25f697c22c19da5ef6e50539b70edbf0ba" translate="yes" xml:space="preserve">
          <source>Reference implementation</source>
          <target state="translated">リファレンス実装</target>
        </trans-unit>
        <trans-unit id="df573c8374802ff7828171ecfa830069f2e20d19" translate="yes" xml:space="preserve">
          <source>Reference semantics</source>
          <target state="translated">リファレンスセマンティクス</target>
        </trans-unit>
        <trans-unit id="1e3df644b1a1f905d3fe996f46169357b5db04a5" translate="yes" xml:space="preserve">
          <source>Reference type demonstration</source>
          <target state="translated">リファレンスタイプのデモ</target>
        </trans-unit>
        <trans-unit id="9c7eb20a38241775d11ec59ff96fa6049a5057e8" translate="yes" xml:space="preserve">
          <source>Reference-style links enclose a reference label in square brackets. They may optionally be preceeded by some link text, also enclosed in square brackets.</source>
          <target state="translated">参照スタイルのリンクは、参照ラベルを角括弧で囲みます。これらのリンクは、オプションでリンクテキストの前に角括弧で囲まれたリンクテキストを付けることができます。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="c04696f070001bb45d8888b617ed2619a4af2b35" translate="yes" xml:space="preserve">
          <source>References are returned as pointers in EAX.</source>
          <target state="translated">EAXでは、参照はポインタとして返されます。</target>
        </trans-unit>
        <trans-unit id="8d0e6a6826b7d67307b20fb43d95d4dff93aa1ec" translate="yes" xml:space="preserve">
          <source>References cannot be upcast to the enclosing class object, nor can they be downcast to a derived interface.</source>
          <target state="translated">参照先を囲むクラス・オブジェクトにアップキャストしたり、派生インターフェイスにダウンキャストしたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="6669ef424ffa4627fac553bacbabacd10635aac0" translate="yes" xml:space="preserve">
          <source>References cannot be upcast to the enclosing class object, nor can they be downcast to a derived interface. To accomplish this, an appropriate &lt;code&gt;QueryInterface()&lt;/code&gt; would have to be implemented for that interface in standard COM fashion.</source>
          <target state="translated">参照は、それを囲むクラスオブジェクトにアップキャストすることも、派生インターフェースにダウンキャストすることもできません。これを行うには、適切な &lt;code&gt;QueryInterface()&lt;/code&gt; を標準のCOM方式でそのインターフェースに実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="4adc5738020ba312244b8258df3427e9630d5d4e" translate="yes" xml:space="preserve">
          <source>References to qualified objects can be implicitly converted according to the following rules:</source>
          <target state="translated">資格のあるオブジェクトへの参照は、以下のルールに従って暗黙のうちに変換することができます。</target>
        </trans-unit>
        <trans-unit id="f33780efd6728fcd99948641510ca4e234624e70" translate="yes" xml:space="preserve">
          <source>Referring to data that has been the operand of &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; のオペランドであったデータを参照します。</target>
        </trans-unit>
        <trans-unit id="aaf0bd26771aff6f50e1ae9c308ad3ffcf6e4371" translate="yes" xml:space="preserve">
          <source>RegEx &lt;code&gt;pat&lt;/code&gt;</source>
          <target state="translated">RegEx &lt;code&gt;pat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="848bb51730ef072173b58615dfd1973ad43dc475" translate="yes" xml:space="preserve">
          <source>RegEx &lt;code&gt;re&lt;/code&gt;</source>
          <target state="translated">RegEx &lt;code&gt;re&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69be2807346525566191c968086f61243d7e70d6" translate="yes" xml:space="preserve">
          <source>Regardless of the overload, &lt;code&gt;count&lt;/code&gt; will not accept infinite ranges for &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">過負荷に関係なく、 &lt;code&gt;count&lt;/code&gt; は &lt;code&gt;haystack&lt;/code&gt; の無限範囲を受け入れません。</target>
        </trans-unit>
        <trans-unit id="47288da0c24aadd7ef41246fbb262ce667ca883e" translate="yes" xml:space="preserve">
          <source>Regardless of the type of the operands, floating point constant folding is done in &lt;code&gt;real&lt;/code&gt; or greater precision. It is always done following IEEE 754 rules and round-to-nearest is used.</source>
          <target state="translated">オペランドのタイプに関係なく、浮動小数点定数の畳み込みは &lt;code&gt;real&lt;/code&gt; またはそれ以上の精度で行われます。これは常にIEEE 754規則に従って行われ、最近傍への丸めが使用されます。</target>
        </trans-unit>
        <trans-unit id="a6a1edfebd5a70df8537ef07e2e286ead2d3f845" translate="yes" xml:space="preserve">
          <source>Regex flags</source>
          <target state="translated">正規表現フラグ</target>
        </trans-unit>
        <trans-unit id="6d1ba653d653ecbd9c15e355d9133be994f123db" translate="yes" xml:space="preserve">
          <source>Regex string to extract UUIDs from text.</source>
          <target state="translated">テキストからUUIDを抽出するためのリージェックス文字列。</target>
        </trans-unit>
        <trans-unit id="12b60328a2fd45d355e7273c8c9ae9964c151e58" translate="yes" xml:space="preserve">
          <source>Regex!char (wchar/dchar) that contains a pattern in the form of compiled bytecode.</source>
          <target state="translated">コンパイルされたバイトコードの形でパターンを含む Regex!char (wchardchar)。</target>
        </trans-unit>
        <trans-unit id="85d320fbafaf5ef943535d080c82dd16ad56fafb" translate="yes" xml:space="preserve">
          <source>Region allocator organizes a chunk of memory as a simple bump-the-pointer allocator.</source>
          <target state="translated">領域アロケータは、単純なバンプ・ザ・ポインタ・アロケータとしてメモリの塊を整理します。</target>
        </trans-unit>
        <trans-unit id="79beea57b62dcf23132f27bfe4b48bf4320df97d" translate="yes" xml:space="preserve">
          <source>Region holding its own allocation, most often on the stack. Has statically-determined size.</source>
          <target state="translated">独自の割り当てを保持する領域で、多くの場合スタック上にあります。静的に決定されたサイズを持っています。</target>
        </trans-unit>
        <trans-unit id="66ecfb00e68a58fbfcd954a0645b5e8762c0c475" translate="yes" xml:space="preserve">
          <source>Region using &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; for allocating memory.</source>
          <target state="translated">メモリの割り当てに &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; を使用する領域。</target>
        </trans-unit>
        <trans-unit id="16168729e57b855923c7a71a802959676ea3a2be" translate="yes" xml:space="preserve">
          <source>Register A Callback To Handle SQLITE_BUSY Errors</source>
          <target state="translated">SQLITE_BUSY エラーを処理するためのコールバックの登録</target>
        </trans-unit>
        <trans-unit id="d7ada71741a5c5efe7fce5b9acb6e7cf75421e75" translate="yes" xml:space="preserve">
          <source>Register A Virtual Table Implementation</source>
          <target state="translated">仮想テーブルの実装を登録する</target>
        </trans-unit>
        <trans-unit id="dec56350bae0a4e19968f3a800e057cd6e40fed8" translate="yes" xml:space="preserve">
          <source>Register Conventions</source>
          <target state="translated">登録規約</target>
        </trans-unit>
        <trans-unit id="d6a9176e21963e771db7ce035be039cfe634a245" translate="yes" xml:space="preserve">
          <source>Register a GC factory under the given &lt;code&gt;name&lt;/code&gt;. This function must be called from a C constructor before druntime is initialized.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; でGCファクトリを登録します。この関数は、druntimeを初期化する前にCコンストラクターから呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="27e9d001ff844d0976d90d94aa0606ae2ed35c58" translate="yes" xml:space="preserve">
          <source>Register a geometry callback named zGeom that can be used as part of an R-Tree geometry query as follows:</source>
          <target state="translated">R-Tree ジオメトリクエリの一部として使用できる zGeom という名前のジオメトリコールバックを以下のように登録します。</target>
        </trans-unit>
        <trans-unit id="f7cd9ee60c35e855fd66e1ccd4c6ccf8e5a9a9d2" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a character data segment is encountered.</source>
          <target state="translated">文字データセグメントに遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="3f86fc9f835fccf504415dd945037249586048b2" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a comment is encountered.</source>
          <target state="translated">コメントに遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="5f49cc41b1a6ebd2be84f56709ff95c463e05d78" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a processing instruction is encountered.</source>
          <target state="translated">処理命令に遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="53ed0b4171eece2331ed206c51947ec94b63e3db" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a start tag is encountered which matches the specified name. You can also pass null as the name, in which case the handler will be called for any unmatched start tag.</source>
          <target state="translated">指定された名前にマッチする開始タグがあった場合に呼び出されるハンドラを登録します。名前にnullを渡すこともできますが、その場合、ハンドラは一致しない開始タグに対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e39c563e7a313c1ade7ea45c931c9334285e8ae0" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever an XML instruction is encountered.</source>
          <target state="translated">XML命令に遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="efed3344dfe3f1bba75833c0811baa022c7151ab" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever an end tag is encountered which matches the specified name. You can also pass null as the name, in which case the handler will be called for any unmatched end tag.</source>
          <target state="translated">指定した名前に一致するエンドタグが見つかった場合に呼び出されるハンドラを登録します。名前にはnullを渡すこともできますが、その場合は一致しないエンドタグに対してハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3cae7781266253f344125f060ac6212ca49c80d9" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever text is encountered.</source>
          <target state="translated">テキストに遭遇したときに呼び出されるハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="6955c69b515fc5975384fa61e641237d355e91b3" translate="yes" xml:space="preserve">
          <source>Register an alternative handler which will be called whenever text is encountered. This differs from onText in that onText will decode the text, whereas onTextRaw will not. This allows you to make design choices, since onText will be more accurate, but slower, while onTextRaw will be faster, but less accurate. Of course, you can still call decode() within your handler, if you want, but you'd probably want to use onTextRaw only in circumstances where you know that decoding is unnecessary.</source>
          <target state="translated">テキストに遭遇したときに呼び出される代替ハンドラを登録します。これは onText とは異なり、onText はテキストをデコードしますが、onTextRaw はデコードしません。これにより、設計上の選択が可能になります。 onText はより正確になりますが遅くなり、一方 onTextRaw はより高速になりますが正確性は低くなります。もちろん、必要であればハンドラ内で decode()を呼び出すこともできますが、おそらく onTextRaw を使用したいのは、デコードが不要であることがわかっている状況でのみでしょう。</target>
        </trans-unit>
        <trans-unit id="6a0a5ccb889da412cbc873c52366af12314ec3cd" translate="yes" xml:space="preserve">
          <source>Register an event handler that gets called to inform of upload/download progress.</source>
          <target state="translated">アップロードダウンロードの進捗状況を通知するために呼び出されるイベントハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="ff1854677201186d9c9212f2b4e865b72f837176" translate="yes" xml:space="preserve">
          <source>Register save state.</source>
          <target state="translated">保存状態を登録します。</target>
        </trans-unit>
        <trans-unit id="01d6516676cc4761c62be5bf5476c1abfdd730cf" translate="yes" xml:space="preserve">
          <source>Register the thread with the GC using &lt;a href=&quot;core_thread#thread_attachThis&quot;&gt;&lt;code&gt;core.thread.thread_attachThis&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;core_thread#thread_detachThis&quot;&gt;&lt;code&gt;core.thread.thread_detachThis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用したGCとスレッドの登録&lt;a href=&quot;core_thread#thread_attachThis&quot;&gt; &lt;code&gt;core.thread.thread_attachThis&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;core_thread#thread_detachThis&quot;&gt; &lt;code&gt;core.thread.thread_detachThis&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="edea0b832f387410c45fe6d1c0257549b09c8463" translate="yes" xml:space="preserve">
          <source>Register/unregister such data with calls to &lt;a href=&quot;#addRoot&quot;&gt;&lt;code&gt;addRoot&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#removeRoot&quot;&gt;&lt;code&gt;removeRoot&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#addRange&quot;&gt;&lt;code&gt;addRange&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#removeRange&quot;&gt;&lt;code&gt;removeRange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#addRoot&quot;&gt; &lt;code&gt;addRoot&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#removeRoot&quot;&gt; &lt;code&gt;removeRoot&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#addRange&quot;&gt; &lt;code&gt;addRange&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#removeRange&quot;&gt; &lt;code&gt;removeRange&lt;/code&gt; &lt;/a&gt;を呼び出して、このようなデータを登録/登録解除します。</target>
        </trans-unit>
        <trans-unit id="b897a95101b262c6489ef352de771c8b1571a339" translate="yes" xml:space="preserve">
          <source>Registering the pointer with the garbage collector using the &lt;code&gt;core.memory.GC.addRoot&lt;/code&gt; or &lt;code&gt;core.memory.GC.addRange&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;core.memory.GC.addRoot&lt;/code&gt; または &lt;code&gt;core.memory.GC.addRange&lt;/code&gt; 関数を使用して、ガベージコレクターにポインターを登録します。</target>
        </trans-unit>
        <trans-unit id="9456a7585dbba6618e38e2cf0c1b40317705af1f" translate="yes" xml:space="preserve">
          <source>Registering the pointer with the garbage collector with the  &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRoot&quot;&gt;std.gc.addRoot()&lt;/a&gt; or  &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRange&quot;&gt;std.gc.addRange()&lt;/a&gt; calls.</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRoot&quot;&gt;std.gc.addRoot（）&lt;/a&gt;または &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRange&quot;&gt;std.gc.addRange（）&lt;/a&gt;呼び出しを使用して、ガベージコレクターにポインターを登録します 。</target>
        </trans-unit>
        <trans-unit id="90bf4d614bb16f0559935e0886c7ffb4188be7a3" translate="yes" xml:space="preserve">
          <source>Registers a subclass of EncodingScheme.</source>
          <target state="translated">EncodingScheme のサブクラスを登録します。</target>
        </trans-unit>
        <trans-unit id="b7e857971158f12b16058966ec09aca7b8486cbc" translate="yes" xml:space="preserve">
          <source>Registers the calling thread for use with the D Runtime. If this routine is called for a thread which is already registered, no action is performed.</source>
          <target state="translated">D ランタイムで使用するために、呼び出したスレッドを登録します。既に登録されているスレッドに対してこのルーチンが呼び出された場合、アクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="0d807038b92eb05d2d4d996579e00a6bf77015a3" translate="yes" xml:space="preserve">
          <source>Registers, the stack, and any other memory locations added through the &lt;code&gt;GC.&lt;a href=&quot;#addRange&quot;&gt;addRange&lt;/a&gt;&lt;/code&gt; function are always scanned conservatively. This means that even if a variable is e.g. of type &lt;code&gt;float&lt;/code&gt;, it will still be scanned for possible GC pointers. And, if the word-interpreted representation of the variable matches a GC-managed memory block's address, that memory block is considered live.</source>
          <target state="translated">レジスタ、スタック、および &lt;code&gt;GC.&lt;a href=&quot;#addRange&quot;&gt;addRange&lt;/a&gt;&lt;/code&gt; を通じて追加されたその他のメモリ位置。addRange関数は常に保守的にスキャンされます。つまり、変数のタイプが &lt;code&gt;float&lt;/code&gt; などの場合でも、GCポインターの可能性がないかスキャンされます。また、変数の単語解釈表現がGC管理のメモリブロックのアドレスと一致する場合、そのメモリブロックはライブと見なされます。</target>
        </trans-unit>
        <trans-unit id="5b77408c10909bc0e4a1441a15652a3747f0e210" translate="yes" xml:space="preserve">
          <source>Regular &lt;code&gt;const&lt;/code&gt; object references cannot be reassigned.</source>
          <target state="translated">通常の &lt;code&gt;const&lt;/code&gt; オブジェクト参照は再割り当てできません。</target>
        </trans-unit>
        <trans-unit id="cdfc76a8a310b7e8a9f6d61d4031ccd974b4fe97" translate="yes" xml:space="preserve">
          <source>Regular expression</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="088c8e28a39e0058c13e1b8ee79195564f351b32" translate="yes" xml:space="preserve">
          <source>Regular expressions.</source>
          <target state="translated">正規表現。</target>
        </trans-unit>
        <trans-unit id="fd6d66abf1a8ee45e161caa22d14d8ff00b9253c" translate="yes" xml:space="preserve">
          <source>Rehash AA</source>
          <target state="translated">リハッシュAA</target>
        </trans-unit>
        <trans-unit id="06c2ca43698227e0fcb6a7292c225e67ef6b66a5" translate="yes" xml:space="preserve">
          <source>Reimplement the C++ code in the other language.</source>
          <target state="translated">他の言語のC++コードを再実装します。</target>
        </trans-unit>
        <trans-unit id="84b24ec52a5a43fadddf1e2db347899274e99845" translate="yes" xml:space="preserve">
          <source>Reinitializes the digest, making it ready for reuse.</source>
          <target state="translated">ダイジェストを再初期化し、再利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="317e3bbd4de02d1f0fdb5403ae3e2fd76d3e03bc" translate="yes" xml:space="preserve">
          <source>Reinterpretation of overlapped fields in a Union is not permitted.</source>
          <target state="translated">ユニオン内で重複するフィールドの再解釈は許されません。</target>
        </trans-unit>
        <trans-unit id="13bed85e379f26741bf756020202c97a912d20f5" translate="yes" xml:space="preserve">
          <source>Rejang</source>
          <target state="translated">Rejang</target>
        </trans-unit>
        <trans-unit id="57b70c2469abaef03dad4e83ea9bb219f9fc54a1" translate="yes" xml:space="preserve">
          <source>Relational Expressions</source>
          <target state="translated">関係性のある表現</target>
        </trans-unit>
        <trans-unit id="150f549109a3258102c45788bb4ad19927962624" translate="yes" xml:space="preserve">
          <source>Relative tolerance.</source>
          <target state="translated">相対的な許容範囲。</target>
        </trans-unit>
        <trans-unit id="319ce06e27d0813f037c481a41b87a9a39ab0a62" translate="yes" xml:space="preserve">
          <source>Release and deallocate the string.</source>
          <target state="translated">文字列を解放して解放します。</target>
        </trans-unit>
        <trans-unit id="12ce12c0a47c490c07a3f2a6fc77a3c4d085937a" translate="yes" xml:space="preserve">
          <source>Releases a read lock on the enclosing mutex.</source>
          <target state="translated">封入されているミューテックスのリードロックを解除します。</target>
        </trans-unit>
        <trans-unit id="407ba71dd655b8bec16ad1bb13ead45c2966e1d4" translate="yes" xml:space="preserve">
          <source>Releases a write lock on the enclosing mutex.</source>
          <target state="translated">封入されているミューテックスの書き込みロックを解除します。</target>
        </trans-unit>
        <trans-unit id="77b301bef933459296e302975b05bd47a1ea9666" translate="yes" xml:space="preserve">
          <source>Releases the controlled range and returns it.</source>
          <target state="translated">制御されている範囲を解放し、それを返します。</target>
        </trans-unit>
        <trans-unit id="fe5cc4d52ac22fbad50329229957a797b645b197" translate="yes" xml:space="preserve">
          <source>Reliably-delivered message datagrams</source>
          <target state="translated">確実に配信されたメッセージデータグラム</target>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarks</target>
        </trans-unit>
        <trans-unit id="b685a7378dfdac22312b42db0dd99b4c40578868" translate="yes" xml:space="preserve">
          <source>Remote endpoint &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="translated">リモートエンドポイント &lt;code&gt;Address&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b863d8a2db82afa5de2c971ac69ebf4948e3391" translate="yes" xml:space="preserve">
          <source>Remove TemplateInstance from table of instances.</source>
          <target state="translated">インスタンスのテーブルからTemplateInstanceを削除します。</target>
        </trans-unit>
        <trans-unit id="b9f1335d8dabb3f2ac77dc497547d4995b437d34" translate="yes" xml:space="preserve">
          <source>Remove a slot from the list of slots to be called when emit() is called.</source>
          <target state="translated">emit()が呼び出されたときに呼び出されるスロットのリストからスロットを削除します。</target>
        </trans-unit>
        <trans-unit id="75c75293ff88caf368db2e508c8e1161c864acea" translate="yes" xml:space="preserve">
          <source>Remove all elements from AA.</source>
          <target state="translated">AAからすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="eb8a35f077465bebcc48319892d3eb238d336255" translate="yes" xml:space="preserve">
          <source>Remove an element from the container and return its value.</source>
          <target state="translated">コンテナから要素を削除し、その値を返します。</target>
        </trans-unit>
        <trans-unit id="2ef8e1749b1fc437ff3dd8997a6863e34ef9b467" translate="yes" xml:space="preserve">
          <source>Remove current item from the target.</source>
          <target state="translated">ターゲットから現在のアイテムを削除します。</target>
        </trans-unit>
        <trans-unit id="ef520f86e83572f8100d972f9ff0fca73044fe5b" translate="yes" xml:space="preserve">
          <source>Remove directory &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="translated">ディレクトリ &lt;code&gt;pathname&lt;/code&gt; 削除します。</target>
        </trans-unit>
        <trans-unit id="fc42c333904a152e0371e3be4d6f7919bec779ea" translate="yes" xml:space="preserve">
          <source>Remove directory and all of its content and subdirectories, recursively.</source>
          <target state="translated">ディレクトリとそのすべてのコンテンツとサブディレクトリを再帰的に削除します。</target>
        </trans-unit>
        <trans-unit id="631a5717be79d54a0f16f3bed5d4ad090c4d25b3" translate="yes" xml:space="preserve">
          <source>Remove extension from path.</source>
          <target state="translated">パスから拡張子を削除します。</target>
        </trans-unit>
        <trans-unit id="cd762caea3eabb789e6ab4d0e09af278ebb8a90b" translate="yes" xml:space="preserve">
          <source>Remove first element in list pointed to by *plist.</source>
          <target state="translated">リストの最初の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="a1d96d78926d702cadc6baa739e5e800797a01cf" translate="yes" xml:space="preserve">
          <source>Remove ptr from the list pointed to by *plist.</source>
          <target state="translated">plistが指すリストからptrを削除します。</target>
        </trans-unit>
        <trans-unit id="0c6e9538ea69883d3ecf28f9d62eeee3a4133338" translate="yes" xml:space="preserve">
          <source>Remove the back element from the container.</source>
          <target state="translated">容器からバックエレメントを取り外します。</target>
        </trans-unit>
        <trans-unit id="5f6f354b54c230d18d3298b80d72e9218a763a5c" translate="yes" xml:space="preserve">
          <source>Remove the front element from the container.</source>
          <target state="translated">フロントエレメントを容器から取り外します。</target>
        </trans-unit>
        <trans-unit id="6900d371c19fc14c228483aaf602f3b566bac1e3" translate="yes" xml:space="preserve">
          <source>Remove this &lt;code&gt;Socket&lt;/code&gt; from the collection. Does nothing if the socket is not in the collection already.</source>
          <target state="translated">この &lt;code&gt;Socket&lt;/code&gt; をコレクションから削除します。ソケットがまだコレクションにない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="e3559a0d3d649dde4006e69577d56dd5d58334be" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;howMany&lt;/code&gt; values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove &lt;code&gt;howMany&lt;/code&gt; elements. Instead, if &lt;code&gt;howMany &amp;gt; n&lt;/code&gt;, all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナの前面または背面の &lt;code&gt;howMany&lt;/code&gt; 値を削除します。上記のパラメーター化されていないバージョンとは異なり、これらの関数は、 &lt;code&gt;howMany&lt;/code&gt; 要素を削除できなかった場合にスローされません。代わりに、 &lt;code&gt;howMany &amp;gt; n&lt;/code&gt; 、すべての要素が削除されます。戻り値は、削除された要素の有効数です。安定版は同じように動作しますが、コンテナを反復する範囲が無効化されないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="fd9a9235e5cccef072272c7923dca8d8b8f07aae" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;howMany&lt;/code&gt; values from the back of the array. Unlike the unparameterized versions above, these functions do not throw if they could not remove &lt;code&gt;howMany&lt;/code&gt; elements. Instead, if &lt;code&gt;howMany &amp;gt; n&lt;/code&gt;, all elements are removed. The returned value is the effective number of elements removed. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">配列の後ろから &lt;code&gt;howMany&lt;/code&gt; 値を削除します。上記のパラメーター化されていないバージョンとは異なり、これらの関数は、 &lt;code&gt;howMany&lt;/code&gt; 要素を削除できなかった場合にスローされません。代わりに、 &lt;code&gt;howMany &amp;gt; n&lt;/code&gt; 、すべての要素が削除されます。戻り値は、削除された要素の有効数です。安定バージョンと非安定バージョンの両方が同じように動作し、配列を反復する範囲が無効化されないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="addb914fa84c3dfd2a72159ee45446c0b9555156" translate="yes" xml:space="preserve">
          <source>Removes a &lt;code&gt;Take!Range&lt;/code&gt; from the list in linear time.</source>
          <target state="translated">リストから &lt;code&gt;Take!Range&lt;/code&gt; を線形時間で削除します。</target>
        </trans-unit>
        <trans-unit id="dc8eb20e88cf67b206b1391540476e846637572f" translate="yes" xml:space="preserve">
          <source>Removes a range from the list in linear time.</source>
          <target state="translated">リニアタイムでリストから範囲を削除します。</target>
        </trans-unit>
        <trans-unit id="1a9007b9058ef9a3903e0d1fb414c46ab4c82ff7" translate="yes" xml:space="preserve">
          <source>Removes adjacent duplicates in the replaced characters</source>
          <target state="translated">置換された文字内の隣接する重複を削除します。</target>
        </trans-unit>
        <trans-unit id="82e07e864b86b15ec0cc3fba83690f2c78c43614" translate="yes" xml:space="preserve">
          <source>Removes all contents from the &lt;code&gt;DList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DList&lt;/code&gt; からすべてのコンテンツを削除します。</target>
        </trans-unit>
        <trans-unit id="8175fe2e2ec533fb2f3ea71d6a45a80e5440f359" translate="yes" xml:space="preserve">
          <source>Removes all contents from the &lt;code&gt;SList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SList&lt;/code&gt; からすべてのコンテンツを削除します。</target>
        </trans-unit>
        <trans-unit id="75a0a6b20196bebd245c2ff665536f61dadef567" translate="yes" xml:space="preserve">
          <source>Removes all elements belonging to &lt;code&gt;r&lt;/code&gt;, which must be a range obtained originally from this array.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; に属するすべての要素を削除します。これは、この配列から最初に取得された範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0e97a7143be5fd7ae56f54b099fdd911c66752ab" translate="yes" xml:space="preserve">
          <source>Removes all elements belonging to &lt;code&gt;r&lt;/code&gt;, which must be a range obtained originally from this container.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; に属するすべての要素を削除します。これは、このコンテナから最初に取得された範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="074271442d6e43c7b52454c97a1ae8585ac07608" translate="yes" xml:space="preserve">
          <source>Removes all elements from the container.</source>
          <target state="translated">コンテナからすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="cfe7abf427175ea51be638f2e8dcfba88e79ecb6" translate="yes" xml:space="preserve">
          <source>Removes all elements in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; のすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="1820e48ea8075f93dbc2ec4a43a2a49c33ceea08" translate="yes" xml:space="preserve">
          <source>Removes all qualifiers, if any, from type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; からすべての修飾子を削除します。</target>
        </trans-unit>
        <trans-unit id="fd8f4dfcc1465521c65a643873e1ea126d72af99" translate="yes" xml:space="preserve">
          <source>Removes all remaining keys and values from an associative array.</source>
          <target state="translated">残りのすべてのキーと値を連想配列から削除します。</target>
        </trans-unit>
        <trans-unit id="be15e0fe1f9b54312d80c112a03dc732d3756fc0" translate="yes" xml:space="preserve">
          <source>Removes all remaining keys and values from an associative array. The array is not rehashed after removal, to allow for the existing storage to be reused. This will affect all references to the same instance and is not equivalent to &lt;code&gt;destroy(aa)&lt;/code&gt; which only sets the current reference to &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">残りのすべてのキーと値を連想配列から削除します。既存のストレージを再利用できるようにするために、アレイは削除後に再ハッシュされません。これは、同じインスタンスへのすべての参照に影響し、現在の参照を &lt;code&gt;null&lt;/code&gt; に設定するだけの &lt;code&gt;destroy(aa)&lt;/code&gt; と同等ではありません</target>
        </trans-unit>
        <trans-unit id="2539889e4a74104395775fc90c686d35222e93f9" translate="yes" xml:space="preserve">
          <source>Removes all the elements from the array and releases allocated memory.</source>
          <target state="translated">配列からすべての要素を削除し、割り当てられたメモリを解放します。</target>
        </trans-unit>
        <trans-unit id="47e7efc48f66745492317dd0c9d48a2d48b3f8e8" translate="yes" xml:space="preserve">
          <source>Removes an element from &lt;code&gt;c&lt;/code&gt; by using its key &lt;code&gt;k&lt;/code&gt;. The key's type is defined by the container.</source>
          <target state="translated">キー &lt;code&gt;k&lt;/code&gt; を使用して &lt;code&gt;c&lt;/code&gt; から要素を削除します。キーのタイプはコンテナによって定義されます。</target>
        </trans-unit>
        <trans-unit id="dae543f0af9eec290f3eb7fdbbc40f6e017b4fb3" translate="yes" xml:space="preserve">
          <source>Removes elements from a range in-place, and returns the shortened range.</source>
          <target state="translated">範囲内の要素を削除し、短縮された範囲を返します。</target>
        </trans-unit>
        <trans-unit id="c493f84cfc3c4feee7c79564596fe7fdcb5c63bf" translate="yes" xml:space="preserve">
          <source>Removes elements from the container that are equal to the given values according to the less comparator. One element is removed for each value given which is in the container. If &lt;code&gt;allowDuplicates&lt;/code&gt; is true, duplicates are removed only if duplicate values are given.</source>
          <target state="translated">lessコンパレーターに従って、指定された値に等しい要素をコンテナーから削除します。コンテナ内にある指定された値ごとに1つの要素が削除されます。場合 &lt;code&gt;allowDuplicates&lt;/code&gt; が真で、重複が重複する値が与えられている場合にのみ削除されます。</target>
        </trans-unit>
        <trans-unit id="d3a3a979612bf67fc2aa4b68f4c12df6bbd7d178" translate="yes" xml:space="preserve">
          <source>Removes first element of &lt;code&gt;r&lt;/code&gt;, wich must be a range obtained originally from this container, from both DList instance and range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の最初の要素を削除します。これは、DListインスタンスと範囲 &lt;code&gt;r&lt;/code&gt; の両方から、このコンテナから最初に取得された範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="95935f8457aff7b5a968195ed76aa4bcc48a8f64" translate="yes" xml:space="preserve">
          <source>Removes last element of &lt;code&gt;r&lt;/code&gt;, wich must be a range obtained originally from this container, from both DList instance and range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の最後の要素を削除します。これは、DListインスタンスと範囲 &lt;code&gt;r&lt;/code&gt; の両方から、このコンテナから最初に取得した範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6684e70de240c57633f3587686dfebd4c3d3a9a9" translate="yes" xml:space="preserve">
          <source>Removes matching characters with no corresponding replacement in &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">なしで交換を対応する文字にマッチ削除し &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a36e8bc52f0cb7fc5c28528b40cbb5d9beca0a7" translate="yes" xml:space="preserve">
          <source>Removes one level of indentation from a multi-line string.</source>
          <target state="translated">複数行の文字列から1レベルのインデントを削除します。</target>
        </trans-unit>
        <trans-unit id="c9ac994ea3d66d3ae9bb1c1409c6a95c45a3430a" translate="yes" xml:space="preserve">
          <source>Removes one level of indentation from an array of single-line strings.</source>
          <target state="translated">単一行文字列の配列から1レベルのインデントを削除します。</target>
        </trans-unit>
        <trans-unit id="8d03d645309a888edd15ae678f3a8f2547f961ab" translate="yes" xml:space="preserve">
          <source>Removes range &lt;code&gt;r&lt;/code&gt; from &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; から範囲 &lt;code&gt;r&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="c41329deed9a4efcf10b2176fe664a54a868889b" translate="yes" xml:space="preserve">
          <source>Removes some element from &lt;code&gt;c&lt;/code&gt; and returns it.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; から要素を削除して返します。</target>
        </trans-unit>
        <trans-unit id="795d2a2abe70d609076ec29434081e4af8f7996d" translate="yes" xml:space="preserve">
          <source>Removes t from the list of tracked threads. No operation will be performed if t is not currently being tracked by this object.</source>
          <target state="translated">追跡されているスレッドのリストから t を削除します。t が現在このオブジェクトによって追跡されていない場合、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="70aedbf39f8f6fcd708877752a1af453718e4db0" translate="yes" xml:space="preserve">
          <source>Removes the</source>
          <target state="translated">を削除します。</target>
        </trans-unit>
        <trans-unit id="13848bdb3a5c4c945e8d9cbbcd02b78456d6dbbc" translate="yes" xml:space="preserve">
          <source>Removes the back element of a bidirectional range.</source>
          <target state="translated">双方向範囲のバックエレメントを削除します。</target>
        </trans-unit>
        <trans-unit id="9b25f64637087f5bc835983e78f87843694c7284" translate="yes" xml:space="preserve">
          <source>Removes the element at the front of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; の前にある要素を削除します。</target>
        </trans-unit>
        <trans-unit id="fca4fdd739d47d6c1b34541a0791727eff309f4b" translate="yes" xml:space="preserve">
          <source>Removes the environment variable with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; 環境変数を削除します。</target>
        </trans-unit>
        <trans-unit id="6324e03d9ca2678306eaf46ea102878a3613739d" translate="yes" xml:space="preserve">
          <source>Removes the first occurence of an element from the list in linear time.</source>
          <target state="translated">リストから要素の最初の出現を線形時間で削除します。</target>
        </trans-unit>
        <trans-unit id="652d4bcd6c0fc440c5d0b59e40bce2ada610fab1" translate="yes" xml:space="preserve">
          <source>Removes the front element of a range.</source>
          <target state="translated">範囲のフロントエレメントを削除します。</target>
        </trans-unit>
        <trans-unit id="31c8ae15c1926b56286e17a3190d64eeb4f25b68" translate="yes" xml:space="preserve">
          <source>Removes the given &lt;code&gt;Take!Range&lt;/code&gt; from the container</source>
          <target state="translated">コンテナから指定された &lt;code&gt;Take!Range&lt;/code&gt; を削除します</target>
        </trans-unit>
        <trans-unit id="c383d74900ae2bcccad5a644d221fce85c312a43" translate="yes" xml:space="preserve">
          <source>Removes the given range from the container.</source>
          <target state="translated">指定した範囲をコンテナから削除します。</target>
        </trans-unit>
        <trans-unit id="86c9b1ac5622dfeb8165992599f02a61fa32e5d6" translate="yes" xml:space="preserve">
          <source>Removes the largest element from the heap and returns a copy of it. The element still resides in the heap's store. For performance reasons you may want to use &lt;code&gt;removeFront&lt;/code&gt; with heaps of objects that are expensive to copy.</source>
          <target state="translated">ヒープから最大の要素を削除し、そのコピーを返します。要素はまだヒープのストアにあります。パフォーマンス上の理由から、コピーにコストがかかるオブジェクトのヒープで &lt;code&gt;removeFront&lt;/code&gt; を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="472ee9cd76c07924e78135a137e5d8d96adefe30" translate="yes" xml:space="preserve">
          <source>Removes the largest element from the heap.</source>
          <target state="translated">ヒープから最大の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="8b4b3acb6c78ef961701e3874973b44eb7f03d0b" translate="yes" xml:space="preserve">
          <source>Removes the last element from the array and returns it. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">配列から最後の要素を削除して返します。安定版と非安定版のどちらも同じ動作をし、配列を反復する範囲が決して無効にならないことを保証します。</target>
        </trans-unit>
        <trans-unit id="cbfc6a524cbf983c49e24e9a353029ae2447c16d" translate="yes" xml:space="preserve">
          <source>Removes the lock over the specified file segment.</source>
          <target state="translated">指定したファイルセグメントのロックを解除します。</target>
        </trans-unit>
        <trans-unit id="9f480d4e378340c1a84ecb186d38dcd03da28157" translate="yes" xml:space="preserve">
          <source>Removes the memory block referenced by p from an internal list of roots to be scanned during a collection. If p is null or is not a value previously passed to addRoot() then no operation is performed.</source>
          <target state="translated">コレクション中にスキャンされるルートの内部リストから p で参照されるメモリブロックを削除します。p が NULL であるか、以前に addRoot()に渡された値でない場合は、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="39ee0e4eeade1b792b1844870c943280497316dc" translate="yes" xml:space="preserve">
          <source>Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed.</source>
          <target state="translated">メモリマッピングを削除して、すべての物理メモリがデコミッションされ、仮想アドレス空間が再生されるようにします。</target>
        </trans-unit>
        <trans-unit id="ba9c920fa73d4e35936a77ebc5bf0f649f228b82" translate="yes" xml:space="preserve">
          <source>Removes the memory range starting at p from an internal list of ranges to be scanned during a collection. If p is null or does not represent a value previously passed to addRange() then no operation is performed.</source>
          <target state="translated">コレクション中にスキャンされる範囲の内部リストから p から始まるメモリ範囲を削除します。p が NULL であるか、以前に addRange()に渡された値を表していない場合は、操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="81d852ce25ceb246e735f784209b6e858afa3347" translate="yes" xml:space="preserve">
          <source>Removes the registered name associated with a tid.</source>
          <target state="translated">tidに関連付けられた登録名を削除します。</target>
        </trans-unit>
        <trans-unit id="0c60420ccfdbfc083a2df49308225876e57a8c42" translate="yes" xml:space="preserve">
          <source>Removes the value at the back of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; の後ろの値を削除します。</target>
        </trans-unit>
        <trans-unit id="c9a77b02f79effe6f57835d97c27484ed5fcbae5" translate="yes" xml:space="preserve">
          <source>Removes the value at the front of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナの先頭にある値を削除します。安定版の動作は同じですが、コンテナを反復する範囲が決して無効にならないことを保証します。</target>
        </trans-unit>
        <trans-unit id="eadd2b6a6ae0fdbbe767f971e4e3f148b99d9df6" translate="yes" xml:space="preserve">
          <source>Removes the value at the front/back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">コンテナのフロントバックの値を削除します。安定版の動作は同じですが、コンテナを反復する範囲が無効にならないことを保証します。</target>
        </trans-unit>
        <trans-unit id="d900deb1527f0011ed753db4ca48cefc07c96afd" translate="yes" xml:space="preserve">
          <source>Removes the value from the back of the array. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">配列の後ろから値を削除します。安定版と非安定版のどちらも同じ動作をし、配列を反復する範囲が決して無効にならないことを保証します。</target>
        </trans-unit>
        <trans-unit id="4436837a957bd66609b37183ee307dcfa2107e76" translate="yes" xml:space="preserve">
          <source>Removing Immutable or Const with a Cast</source>
          <target state="translated">キャストでの不変またはコンスタの削除</target>
        </trans-unit>
        <trans-unit id="1956e1d291b4925492f6f19c22212b769e17b004" translate="yes" xml:space="preserve">
          <source>Removing Keys</source>
          <target state="translated">キーの削除</target>
        </trans-unit>
        <trans-unit id="a8c4af8493e80b02a246117533ff5d93a66f0ed0" translate="yes" xml:space="preserve">
          <source>Removing the need to ensure that Druntime is properly initialized on calls to the library, for situations when an initialization step is not performed or would be difficult to insert before the library is used.</source>
          <target state="translated">初期化ステップが実行されない場合や、ライブラリを使用する前に挿入することが困難な状況のために、ライブラリの呼び出し時にDruntimeが適切に初期化されるようにする必要性を削除しました。</target>
        </trans-unit>
        <trans-unit id="72d2ea7d71c7337c5f32dfe9de60569c8bb4f7e7" translate="yes" xml:space="preserve">
          <source>Rename file &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;. If the target file exists, it is overwritten.</source>
          <target state="translated">ファイルの名前を &lt;code&gt;from&lt;/code&gt; に変更 &lt;code&gt;to&lt;/code&gt; ます。対象ファイルが存在する場合は上書きされます。</target>
        </trans-unit>
        <trans-unit id="a6a2b2ae27b46e065f541c1730f231403c853815" translate="yes" xml:space="preserve">
          <source>Renamed Imports</source>
          <target state="translated">輸入品に名称変更</target>
        </trans-unit>
        <trans-unit id="195092f497acfd79b395280ba71e508accf6a5d3" translate="yes" xml:space="preserve">
          <source>Renamed and Selective Imports</source>
          <target state="translated">名称変更と選択輸入</target>
        </trans-unit>
        <trans-unit id="85da1ab2956f6cb95897f3c01f96cccb6210bd74" translate="yes" xml:space="preserve">
          <source>Renames the elements of a &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Tupleの要素の&lt;a href=&quot;#Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6cd7560b9ee83b5295805b38930388ee9edbeb39" translate="yes" xml:space="preserve">
          <source>Reorders the random-access range &lt;code&gt;r&lt;/code&gt; such that the range &lt;code&gt;r[0 .. mid]&lt;/code&gt; is the same as if the entire &lt;code&gt;r&lt;/code&gt; were sorted, and leaves the range &lt;code&gt;r[mid .. r.length]&lt;/code&gt; in no particular order. Performs &amp;Omicron;(&lt;code&gt;r.length * log(mid)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;. The implementation simply calls &lt;code&gt;topN!(less, ss)(r, n)&lt;/code&gt; and then &lt;code&gt;sort!(less, ss)(r[0 .. n])&lt;/code&gt;.</source>
          <target state="translated">範囲 &lt;code&gt;r[0 .. mid]&lt;/code&gt; が &lt;code&gt;r&lt;/code&gt; 全体をソートした場合と同じになるようにランダムアクセス範囲 &lt;code&gt;r&lt;/code&gt; を並べ替え、範囲 &lt;code&gt;r[mid .. r.length]&lt;/code&gt; を特定の順序のままにします。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;r.length * log(mid)&lt;/code&gt; ）評価を実行します。実装は単に &lt;code&gt;topN!(less, ss)(r, n)&lt;/code&gt; を呼び出し、次に &lt;code&gt;sort!(less, ss)(r[0 .. n])&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="8038fb87bf153233f30456c9053a8cdde880ad70" translate="yes" xml:space="preserve">
          <source>Reorders the range &lt;code&gt;r&lt;/code&gt; using &lt;code&gt;swap&lt;/code&gt; such that &lt;code&gt;r[nth]&lt;/code&gt; refers to the element that would fall there if the range were fully sorted. In addition, it also partitions &lt;code&gt;r&lt;/code&gt; such that all elements &lt;code&gt;e1&lt;/code&gt; from &lt;code&gt;r[0]&lt;/code&gt; to &lt;code&gt;r[nth]&lt;/code&gt; satisfy &lt;code&gt;!less(r[nth], e1)&lt;/code&gt;, and all elements &lt;code&gt;e2&lt;/code&gt; from &lt;code&gt;r[nth]&lt;/code&gt; to &lt;code&gt;r[r.length]&lt;/code&gt; satisfy &lt;code&gt;!less(e2, r[nth])&lt;/code&gt;. Effectively, it finds the nth smallest (according to &lt;code&gt;less&lt;/code&gt;) elements in &lt;code&gt;r&lt;/code&gt;. Performs an expected &amp;Omicron;(&lt;code&gt;r.length&lt;/code&gt;) (if unstable) or &amp;Omicron;(&lt;code&gt;r.length * log(r.length)&lt;/code&gt;) (if stable) evaluations of &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="translated">範囲 &lt;code&gt;r&lt;/code&gt; が完全にソートされた場合に &lt;code&gt;r[nth]&lt;/code&gt; がそこに該当する要素を参照するように、 &lt;code&gt;swap&lt;/code&gt; を使用して範囲rを並べ替えます。加えて、それはまた、パーティションが &lt;code&gt;r&lt;/code&gt; のすべての要素があるよう &lt;code&gt;e1&lt;/code&gt; から &lt;code&gt;r[0]&lt;/code&gt; に &lt;code&gt;r[nth]&lt;/code&gt; を満たす &lt;code&gt;!less(r[nth], e1)&lt;/code&gt; 、およびすべての要素が &lt;code&gt;e2&lt;/code&gt; から &lt;code&gt;r[nth]&lt;/code&gt; を &lt;code&gt;r[r.length]&lt;/code&gt; &lt;code&gt;!less(e2, r[nth])&lt;/code&gt; 満たします。事実上、 &lt;code&gt;r&lt;/code&gt; のn番目に小さい（ &lt;code&gt;less&lt;/code&gt; によると）要素を見つけます。予想される&amp;Omicron;（ &lt;code&gt;r.length&lt;/code&gt; ）（不安定な場合）または&amp;Omicron;（ &lt;code&gt;r.length * log(r.length)&lt;/code&gt; ）（安定している場合） &lt;code&gt;less&lt;/code&gt; および &lt;code&gt;swap&lt;/code&gt; の評価。</target>
        </trans-unit>
        <trans-unit id="de24de649aea23a9bd651f6497986efa24e8227f" translate="yes" xml:space="preserve">
          <source>Reorganizes the associative array in place so that lookups are more efficient.</source>
          <target state="translated">連想配列を所定の位置に再編成し、検索がより効率的になるようにします。</target>
        </trans-unit>
        <trans-unit id="98df419e01e1f124bfb5c8dae37de763c48f0fe0" translate="yes" xml:space="preserve">
          <source>Reorganizes the associative array in place so that lookups are more efficient. &lt;code&gt;rehash&lt;/code&gt; is effective when, for example, the program is done loading up a symbol table and now needs fast lookups in it. Returns a reference to the reorganized array.</source>
          <target state="translated">ルックアップがより効率的になるように、結合配列を所定の位置に再編成します。 &lt;code&gt;rehash&lt;/code&gt; は、たとえば、プログラムがシンボルテーブルのロードを完了し、高速な検索が必要になった場合に効果的です。再編成された配列への参照を返します。</target>
        </trans-unit>
        <trans-unit id="99a71dbb730bee0ec8b3946c012b2412dfb67ac6" translate="yes" xml:space="preserve">
          <source>Repeat a list of dt_t's count times.</source>
          <target state="translated">dt_tのカウント回数のリストを繰り返す。</target>
        </trans-unit>
        <trans-unit id="fa5270aa9f7862a9975dafc310721f15e957c201" translate="yes" xml:space="preserve">
          <source>Repeat the process for each character until the attacker has the whole correct token and the server accepts the harmful data. This can be done in a week with the attacker pacing the attack to 10 requests per second with only one client.</source>
          <target state="translated">攻撃者が全ての正しいトークンを手に入れ、サーバが有害なデータを受け入れるまで、各文字についてプロセスを繰り返す。これは、攻撃者が1つのクライアントだけで1秒間に10回のリクエストを行うことで、1週間で行うことができます。</target>
        </trans-unit>
        <trans-unit id="cdb1a2a478b2a5cb7ca163524e5848919392e356" translate="yes" xml:space="preserve">
          <source>Repeat!T &lt;strong id=&quot;repeat&quot;&gt;repeat&lt;/strong&gt;(T)(T value);</source>
          <target state="translated">Repeat！T &lt;strong id=&quot;repeat&quot;&gt;repeat&lt;/strong&gt;（T）（T value）;</target>
        </trans-unit>
        <trans-unit id="7067badd8dd97b0c84af9ca2ddae890cba0074e1" translate="yes" xml:space="preserve">
          <source>Repeated calls to this function will return a new struct each time, until a special &quot;end of msgs&quot; struct is returned as a signal that there is no more to get at this point.  The data the returned pointer points to will not survive calling curl_multi_cleanup().  The 'CURLMsg' struct is meant to be very simple and only contain very basic informations. If more involved information is wanted, we will provide the particular &quot;transfer handle&quot; in that struct and that should/could/would be used in subsequent curl_easy_getinfo() calls (or similar). The point being that we must never expose complex structs to applications, as then we'll undoubtably get backwards compatibility problems in the future.</source>
          <target state="translated">この関数を繰り返し呼び出すと、この時点で取得するものがなくなったことを示す特別な &quot;end of msgs&quot; 構造体が返されるまで、毎回新しい構造体が返されます。返されたポインタが指すデータは、curl_multi_cleanup()の呼び出しに耐えられません。CURLMsg' 構造体は非常にシンプルで、非常に基本的な情報しか含まれていません。より複雑な情報が必要な場合は、その構造体内の特定の &quot;転送ハンドル&quot; を提供し、それ以降の curl_easy_getinfo()コール (または同様のもの)で使用されるはずです。ポイントは、複雑な構造体を決してアプリケーションに公開してはいけないということです。</target>
        </trans-unit>
        <trans-unit id="d7112e0d287788ea5f4451548ee0fc207ecdc29d" translate="yes" xml:space="preserve">
          <source>Repeats the given forward range ad infinitum. If the original range is infinite (fact that would make &lt;code&gt;Cycle&lt;/code&gt; the identity application), &lt;code&gt;Cycle&lt;/code&gt; detects that and aliases itself to the range type itself. That works for non-forward ranges too. If the original range has random access, &lt;code&gt;Cycle&lt;/code&gt; offers random access and also offers a constructor taking an initial position &lt;code&gt;index&lt;/code&gt;. &lt;code&gt;Cycle&lt;/code&gt; works with static arrays in addition to ranges, mostly for performance reasons.</source>
          <target state="translated">指定された前方範囲を無限に繰り返します。元の範囲が無限の場合（ &lt;code&gt;Cycle&lt;/code&gt; がアイデンティティーアプリケーションになる事実）、 &lt;code&gt;Cycle&lt;/code&gt; はそれを検出し、それ自体を範囲タイプ自体にエイリアスします。これは非フォワード範囲でも機能します。元の範囲にランダムアクセスがある場合、 &lt;code&gt;Cycle&lt;/code&gt; はランダムアクセスを提供し、初期位置 &lt;code&gt;index&lt;/code&gt; を取るコンストラクタも提供します。 &lt;code&gt;Cycle&lt;/code&gt; は、主にパフォーマンス上の理由から、範囲に加えて静的配列でも機能します。</target>
        </trans-unit>
        <trans-unit id="a7cf7b25a703b308887c7f1d100c4326ef20ac46" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="translated">Replace</target>
        </trans-unit>
        <trans-unit id="33c10388cfe9be7baae806c9effeecf88bf645c8" translate="yes" xml:space="preserve">
          <source>Replace call to GC allocator with call to tracing GC allocator.</source>
          <target state="translated">GC アロケータへの呼び出しをトレースGCアロケータへの呼び出しに置き換えます。</target>
        </trans-unit>
        <trans-unit id="1ff95b2b7bbcf8ce58f88097e74c325fa1730e9f" translate="yes" xml:space="preserve">
          <source>Replace each tab character in &lt;code&gt;r&lt;/code&gt; with the number of spaces necessary to align the following character at the next tab stop.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; の各タブ文字を、次のタブストップで次の文字を揃えるために必要なスペースの数に置き換えます。</target>
        </trans-unit>
        <trans-unit id="ef40c4ff7d6a1b668fd3f06a49a8871d21fae529" translate="yes" xml:space="preserve">
          <source>Replace each tab character in &lt;code&gt;s&lt;/code&gt; with the number of spaces necessary to align the following character at the next tab stop.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の各タブ文字を、次のタブストップで次の文字を揃えるために必要なスペースの数に置き換えます。</target>
        </trans-unit>
        <trans-unit id="f49a854f543f88eda87bf74688858dc39878b2f9" translate="yes" xml:space="preserve">
          <source>Replace existing extension on filespec with new one.</source>
          <target state="translated">filespec上の既存の拡張子を新しいものに置き換えます。</target>
        </trans-unit>
        <trans-unit id="0cdc355d0ae07533d5cb199d26f7afde21eadacb" translate="yes" xml:space="preserve">
          <source>Replace filename portion of path.</source>
          <target state="translated">パスのファイル名部分を置換します。</target>
        </trans-unit>
        <trans-unit id="92d1c292c2daecbb83e4e323e2b960d187e80417" translate="yes" xml:space="preserve">
          <source>Replace format string</source>
          <target state="translated">フォーマット文字列の置換</target>
        </trans-unit>
        <trans-unit id="70ea7b845eb8a19cdbf746d15b0bb9479f589172" translate="yes" xml:space="preserve">
          <source>Replace next in chain with &lt;code&gt;tail&lt;/code&gt;. Use &lt;code&gt;chainTogether&lt;/code&gt; instead if at all possible.</source>
          <target state="translated">チェーンの次を &lt;code&gt;tail&lt;/code&gt; 置き換えます。 &lt;code&gt;chainTogether&lt;/code&gt; 代わりにchainTogetherを使用してください。</target>
        </trans-unit>
        <trans-unit id="c4d2e965595586bd1d65b369659c32a9fb3f221a" translate="yes" xml:space="preserve">
          <source>Replace occurrences of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt; and output the result into &lt;code&gt;sink&lt;/code&gt;.</source>
          <target state="translated">出現置き換える &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; に &lt;code&gt;subject&lt;/code&gt; に結果と出力 &lt;code&gt;sink&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d3607275774f4c09d1155f81daaa8e260ff7594" translate="yes" xml:space="preserve">
          <source>Replace occurrences of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt; in a new array.</source>
          <target state="translated">新しい配列内の &lt;code&gt;from&lt;/code&gt; の出現を &lt;code&gt;to&lt;/code&gt; inの &lt;code&gt;subject&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="e7e220393c76af6d6fb391eec888ad956f8e84d1" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of &lt;code&gt;From&lt;/code&gt; into &lt;code&gt;To&lt;/code&gt;, in one or more types &lt;code&gt;T&lt;/code&gt;. For example, &lt;code&gt;ReplaceType!(int, uint, Tuple!(int, float)[string])&lt;/code&gt; yields &lt;code&gt;Tuple!(uint, float)[string]&lt;/code&gt;. The types in which replacement is performed may be arbitrarily complex, including qualifiers, built-in type constructors (pointers, arrays, associative arrays, functions, and delegates), and template instantiations; replacement proceeds transitively through the type definition. However, member types in &lt;code&gt;struct&lt;/code&gt;s or &lt;code&gt;class&lt;/code&gt;es are not replaced because there are no ways to express the types resulting after replacement.</source>
          <target state="translated">出現するすべての置き換え &lt;code&gt;From&lt;/code&gt; に &lt;code&gt;To&lt;/code&gt; 、1つまたは複数のタイプでは、 &lt;code&gt;T&lt;/code&gt; 。たとえば、 &lt;code&gt;ReplaceType!(int, uint, Tuple!(int, float)[string])&lt;/code&gt; は &lt;code&gt;Tuple!(uint, float)[string]&lt;/code&gt; ます。置換が実行される型は、修飾子、組み込み型コンストラクター（ポインター、配列、連想配列、関数、デリゲート）、およびテンプレートのインスタンス化を含め、任意に複雑になる可能性があります。置換は型定義を通じて推移的に進行します。ただし、 &lt;code&gt;struct&lt;/code&gt; または &lt;code&gt;class&lt;/code&gt; es のメンバー型は置き換えられません。これは、置き換え後の型を表現する方法がないためです。</target>
        </trans-unit>
        <trans-unit id="a4b6beb7a0a463fb9056fff096906a36b6d0941f" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of a certain subrange and puts the result into a given array.</source>
          <target state="translated">特定のサブレンジのすべての出現を置換し、その結果を指定された配列に入れます。</target>
        </trans-unit>
        <trans-unit id="bf828817df8146a134e38863d3145a56771d5f8a" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of a certain subrange and puts the result into an output range.</source>
          <target state="translated">特定のサブレンジのすべての出現を置換し、その結果を出力範囲に入れます。</target>
        </trans-unit>
        <trans-unit id="55ccf52982737ac1fda98a235d9e0724b221555b" translate="yes" xml:space="preserve">
          <source>Replaces elements from &lt;code&gt;array&lt;/code&gt; with indices ranging from &lt;code&gt;from&lt;/code&gt; (inclusive) to &lt;code&gt;to&lt;/code&gt; (exclusive) with the range &lt;code&gt;stuff&lt;/code&gt;.</source>
          <target state="translated">置き換え要素 &lt;code&gt;array&lt;/code&gt; の範囲の指数を有する &lt;code&gt;from&lt;/code&gt; （を含む）まで &lt;code&gt;to&lt;/code&gt; 範囲と（排他的） &lt;code&gt;stuff&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfd1260e1bd773dfd9e919a9dfabe839a5a20bb2" translate="yes" xml:space="preserve">
          <source>Replaces elements from &lt;code&gt;array&lt;/code&gt; with indices ranging from &lt;code&gt;from&lt;/code&gt; (inclusive) to &lt;code&gt;to&lt;/code&gt; (exclusive) with the range &lt;code&gt;stuff&lt;/code&gt;. Expands or shrinks the array as needed.</source>
          <target state="translated">置き換え要素 &lt;code&gt;array&lt;/code&gt; の範囲の指数を有する &lt;code&gt;from&lt;/code&gt; （を含む）まで &lt;code&gt;to&lt;/code&gt; 範囲と（排他的） &lt;code&gt;stuff&lt;/code&gt; 。必要に応じて配列を拡大または縮小します。</target>
        </trans-unit>
        <trans-unit id="1947ec58f5d919ec2b4a4834cc9c7502d8a2dc55" translate="yes" xml:space="preserve">
          <source>Replaces spaces in &lt;code&gt;s&lt;/code&gt; with the optimal number of tabs. All spaces and tabs at the end of a line are removed.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; のスペースを最適な数のタブに置き換えます。行末のスペースとタブはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="664cf6cd043b2df4d63c3eb11246f8f03ec929f4" translate="yes" xml:space="preserve">
          <source>Replaces spaces in range &lt;code&gt;r&lt;/code&gt; with the optimal number of tabs. All spaces and tabs at the end of a line are removed.</source>
          <target state="translated">範囲 &lt;code&gt;r&lt;/code&gt; のスペースを最適な数のタブに置き換えます。行末のスペースとタブはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="184818cdd37cead38c95b37b3c881bb052eed284" translate="yes" xml:space="preserve">
          <source>Replaces the characters in &lt;code&gt;str&lt;/code&gt; which are in &lt;code&gt;from&lt;/code&gt; with the the corresponding characters in &lt;code&gt;to&lt;/code&gt; and returns the resulting string.</source>
          <target state="translated">文字置き換え &lt;code&gt;str&lt;/code&gt; にある &lt;code&gt;from&lt;/code&gt; で対応する文字を &lt;code&gt;to&lt;/code&gt; 、得られた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="bbb6ea7a2e39be3f3f162a9089a3b3b6a5f6a339" translate="yes" xml:space="preserve">
          <source>Replaces the characters in &lt;code&gt;str&lt;/code&gt; which are keys in &lt;code&gt;transTable&lt;/code&gt; with their corresponding values in &lt;code&gt;transTable&lt;/code&gt;. &lt;code&gt;transTable&lt;/code&gt; is an AA where its keys are &lt;code&gt;dchar&lt;/code&gt; and its values are either &lt;code&gt;dchar&lt;/code&gt; or some type of string. Also, if &lt;code&gt;toRemove&lt;/code&gt; is given, the characters in it are removed from &lt;code&gt;str&lt;/code&gt; prior to translation. &lt;code&gt;str&lt;/code&gt; itself is unaltered. A copy with the changes is returned.</source>
          <target state="translated">&lt;code&gt;transTable&lt;/code&gt; のキーである &lt;code&gt;str&lt;/code&gt; の文字を、transTableの対応する値に &lt;code&gt;transTable&lt;/code&gt; ます。 &lt;code&gt;transTable&lt;/code&gt; はAAであり、そのキーは &lt;code&gt;dchar&lt;/code&gt; であり、その値は &lt;code&gt;dchar&lt;/code&gt; またはなんらかのタイプのストリングです。また、 &lt;code&gt;toRemove&lt;/code&gt; が指定されている場合、その中の文字は、変換前に &lt;code&gt;str&lt;/code&gt; から削除されます。 &lt;code&gt;str&lt;/code&gt; 自体は変更されません。変更を加えたコピーが返されます。</target>
        </trans-unit>
        <trans-unit id="b67c7d6419c0b6d65cce4096b33223cdb74d94dc" translate="yes" xml:space="preserve">
          <source>Replaces the current process by executing a command, &lt;code&gt;pathname&lt;/code&gt;, with the arguments in &lt;code&gt;argv&lt;/code&gt;.</source>
          <target state="translated">コマンド &lt;code&gt;pathname&lt;/code&gt; を &lt;code&gt;argv&lt;/code&gt; の引数で実行することにより、現在のプロセスを置き換えます。</target>
        </trans-unit>
        <trans-unit id="de6da5c60de5b4049095b17ff61908901be4b1c4" translate="yes" xml:space="preserve">
          <source>Replaces the first occurrence of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; の最初に出現する &lt;code&gt;from&lt;/code&gt; を &lt;code&gt;to&lt;/code&gt; で置き換えます。</target>
        </trans-unit>
        <trans-unit id="9d3a3bb457bba010b3b52570b9bb0a550ae3615e" translate="yes" xml:space="preserve">
          <source>Replaces the largest element in the store with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">ストア内の最大の要素を &lt;code&gt;value&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="c36a9864cb0a1cd773ab41f070bdc81b08637be8" translate="yes" xml:space="preserve">
          <source>Replaces the last occurrence of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; の最後の &lt;code&gt;from&lt;/code&gt; を &lt;code&gt;to&lt;/code&gt; で置き換えます。</target>
        </trans-unit>
        <trans-unit id="65c45a14662409a9d291ba06667b4b3194f648f2" translate="yes" xml:space="preserve">
          <source>Reports a deprecation message.</source>
          <target state="translated">非推奨のメッセージを報告します。</target>
        </trans-unit>
        <trans-unit id="05358ad0b424161c32a66a44e0020bb807267356" translate="yes" xml:space="preserve">
          <source>Reports a warning message.</source>
          <target state="translated">警告メッセージを報告します。</target>
        </trans-unit>
        <trans-unit id="7a48be9d9eb142198b9a33e6a7aaf8aa49ec8c1b" translate="yes" xml:space="preserve">
          <source>Reports additional details about a deprecation message.</source>
          <target state="translated">非推奨メッセージに関する追加の詳細を報告します。</target>
        </trans-unit>
        <trans-unit id="2a4d2035187510232a3473688b6375c5eb79f697" translate="yes" xml:space="preserve">
          <source>Reports additional details about a warning message.</source>
          <target state="translated">警告メッセージに関する追加の詳細を報告します。</target>
        </trans-unit>
        <trans-unit id="a03879877c2a56ddc9a9590c7c4c5a5c5aaf9cb8" translate="yes" xml:space="preserve">
          <source>Reports additional details about an error message.</source>
          <target state="translated">エラーメッセージに関する追加の詳細を報告します。</target>
        </trans-unit>
        <trans-unit id="ec241f1e6c9915f6c6293da092090ed4d21a4bbb" translate="yes" xml:space="preserve">
          <source>Reports an error message.</source>
          <target state="translated">エラーメッセージを報告します。</target>
        </trans-unit>
        <trans-unit id="478f99752de9b4f7cb081cc52d1232afb58024ab" translate="yes" xml:space="preserve">
          <source>Reports per instance statistics to &lt;code&gt;output&lt;/code&gt; (e.g. &lt;code&gt;stdout&lt;/code&gt;). The format is simple: one kind and value per line, separated by a colon, e.g. &lt;code&gt;bytesAllocated:7395404&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; インスタンスごとの統計を報告します（例： &lt;code&gt;stdout&lt;/code&gt; ）。形式は単純です：コロンで区切られた、1行に1つの種類と値、たとえば &lt;code&gt;bytesAllocated:7395404&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="d21307f7991db0e3fc8f33a263ac9d7f2b5db9b8" translate="yes" xml:space="preserve">
          <source>Representation of a CLI &lt;code&gt;Option&lt;/code&gt;</source>
          <target state="translated">CLI &lt;code&gt;Option&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f92787a18e484b1f06aa503c11813f8381ada33" translate="yes" xml:space="preserve">
          <source>Representation of a CLI feature</source>
          <target state="translated">CLI機能の表現</target>
        </trans-unit>
        <trans-unit id="a41ccd008f21cc3982d56b449404fb2d0eedc651" translate="yes" xml:space="preserve">
          <source>Represents a date in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;Proleptic Gregorian Calendar&lt;/a&gt; ranging from 32,768 B.C. to 32,767 A.D. Positive years are A.D. Non-positive years are B.C.</source>
          <target state="translated">紀元前32,768〜32,767の範囲の&lt;a href=&quot;http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;Proleptic Gregorian Calendarの&lt;/a&gt;日付を表しますAD正の年はAD正でない年はBC</target>
        </trans-unit>
        <trans-unit id="871a404467b23544526d5d0d73e9c4edf6a9c058" translate="yes" xml:space="preserve">
          <source>Represents a duration of time in system clock ticks, using the highest precision that the system provides.</source>
          <target state="translated">システムが提供する最高の精度を使用して、システムクロックの目盛りの時間を表します。</target>
        </trans-unit>
        <trans-unit id="c840abcc54eb77d8ea1c639dc35b7df6160fc73e" translate="yes" xml:space="preserve">
          <source>Represents a duration of time in system clock ticks.</source>
          <target state="translated">システムクロックの目盛りの時間を表します。</target>
        </trans-unit>
        <trans-unit id="69976046e97e811393a3d9cb1d39633bdaf4173e" translate="yes" xml:space="preserve">
          <source>Represents a duration of time of weeks or less (kept internally as hnsecs). (e.g. 22 days or 700 seconds).</source>
          <target state="translated">週間以下の期間を表します(内部ではhnsecsとして保持されます)。(例:22日または700秒)。</target>
        </trans-unit>
        <trans-unit id="263f8bb3c0db9af3066ba4528d3da4d266b09197" translate="yes" xml:space="preserve">
          <source>Represents a list of predefined symbols the compiler knows about.</source>
          <target state="translated">コンパイラが知っている定義済みのシンボルのリストを表します。</target>
        </trans-unit>
        <trans-unit id="af9de86424e71110be890008e402a1244b1288d6" translate="yes" xml:space="preserve">
          <source>Represents a monotonic timestamp in system clock ticks, using the highest precision that the system provides.</source>
          <target state="translated">システムが提供する最高精度を用いて、システムのクロックティックにおける単調なタイムスタンプを表現します。</target>
        </trans-unit>
        <trans-unit id="2aaffeda235d62749f5afc55a2b2b3ade5271bd5" translate="yes" xml:space="preserve">
          <source>Represents a reference to &lt;code&gt;T&lt;/code&gt;. Resolves to &lt;code&gt;T*&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a value type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; への参照を表します。 &lt;code&gt;T&lt;/code&gt; が値型の場合、 &lt;code&gt;T*&lt;/code&gt; 解決されます。</target>
        </trans-unit>
        <trans-unit id="675c8aab11817ec1f023800d80f3d56a8cd24056" translate="yes" xml:space="preserve">
          <source>Represents a sorted range. In addition to the regular range primitives, supports additional operations that take advantage of the ordering, such as merge and binary search. To obtain a &lt;code&gt;SortedRange&lt;/code&gt; from an unsorted range &lt;code&gt;r&lt;/code&gt;, use &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt; which sorts &lt;code&gt;r&lt;/code&gt; in place and returns the corresponding &lt;code&gt;SortedRange&lt;/code&gt;. To construct a &lt;code&gt;SortedRange&lt;/code&gt; from a range &lt;code&gt;r&lt;/code&gt; that is known to be already sorted, use &lt;a href=&quot;#assumeSorted&quot;&gt;&lt;code&gt;assumeSorted&lt;/code&gt;&lt;/a&gt; described below.</source>
          <target state="translated">並べ替えられた範囲を表します。通常の範囲プリミティブに加えて、マージやバイナリ検索などの順序付けを利用する追加の操作をサポートします。 &lt;code&gt;SortedRange&lt;/code&gt; られていない範囲 &lt;code&gt;r&lt;/code&gt; からSortedRangeを取得するには、std.algorithm.sorting.sortを使用します&lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt; &lt;/a&gt;これは、 &lt;code&gt;r&lt;/code&gt; をその場で並べ替え、対応する &lt;code&gt;SortedRange&lt;/code&gt; を返します。すでにソートされていることがわかっている範囲 &lt;code&gt;r&lt;/code&gt; から &lt;code&gt;SortedRange&lt;/code&gt; を構築するには、以下で説明する&lt;a href=&quot;#assumeSorted&quot;&gt; &lt;code&gt;assumeSorted&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4683c526686e490d8e710633c776f72b86b86126" translate="yes" xml:space="preserve">
          <source>Represents a time of day with hours, minutes, and seconds. It uses 24 hour time.</source>
          <target state="translated">時、分、秒で一日の時間を表します。24時間の時間を使用します。</target>
        </trans-unit>
        <trans-unit id="810410978c698991ef4eb4c9ef7a97a314fab610" translate="yes" xml:space="preserve">
          <source>Represents a time zone from a TZ Database time zone file. Files from the TZ Database are how Posix systems hold their time zone information. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use &lt;code&gt;PosixTimeZone&lt;/code&gt; (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; where the directory holding them is.</source>
          <target state="translated">TZデータベースのタイムゾーンファイルのタイムゾーンを表します。 TZデータベースのファイルは、Posixシステムがタイムゾーン情報を保持する方法です。残念ながら、WindowsはTZデータベースを使用しません。 TZデータベースを使用するには、TZデータベースファイルを提供し、それらを保持するディレクトリの場所を &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; に通知することにより、Windowsで &lt;code&gt;PosixTimeZone&lt;/code&gt; （ディスク上のTZデータベースファイルから情報を読み取る）を使用します。</target>
        </trans-unit>
        <trans-unit id="b54798fff510046bc6fca58ccdbefaeeca610e06" translate="yes" xml:space="preserve">
          <source>Represents a time zone from the Windows registry. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt; (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; where the directory holding them is.</source>
          <target state="translated">Windowsレジストリからのタイムゾーンを表します。残念ながら、WindowsはTZデータベースを使用しません。TZデータベースを使用するには、&lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt;（ディスク上のTZデータベースファイルから情報を読み取る）を使用して、TZデータベースファイルを提供し、 &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; にそれらを保持するディレクトリの場所を伝えます。</target>
        </trans-unit>
        <trans-unit id="e60b7030b2ce1a65110e9777db7c8df88b7b17a4" translate="yes" xml:space="preserve">
          <source>Represents a time zone with an offset (in minutes, west is negative) from UTC but no DST.</source>
          <target state="translated">UTCからのオフセット(分単位、西は負)を持つタイムゾーンを表しますが、DSTはありません。</target>
        </trans-unit>
        <trans-unit id="92f2f3f34a9bb6cd26c387edc0c38b2e94b17c7e" translate="yes" xml:space="preserve">
          <source>Represents a time zone. It is used with &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt;&lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt;&lt;/a&gt; to indicate the time zone of a &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt;&lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タイムゾーンを表します。一緒に使用され&lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt; &lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt; &lt;/a&gt;のタイムゾーンを示すために、&lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt; &lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="abac93691afbfe26bfc279c427091400b5a61da6" translate="yes" xml:space="preserve">
          <source>Represents a timestamp of the system's monotonic clock.</source>
          <target state="translated">システムの単調時計のタイムスタンプを表します。</target>
        </trans-unit>
        <trans-unit id="7c5e078407eec9db2ab1960187d144ea3f3ab12f" translate="yes" xml:space="preserve">
          <source>Represents an interval of time which has negative infinity as its starting point.</source>
          <target state="translated">負の無限大を起点とする時間間隔を表します。</target>
        </trans-unit>
        <trans-unit id="1aaad8c85cc38e4f5132fe337e5717985acbb7ee" translate="yes" xml:space="preserve">
          <source>Represents an interval of time which has positive infinity as its end point.</source>
          <target state="translated">正の無限大を終点とする時間間隔を表します。</target>
        </trans-unit>
        <trans-unit id="f47e3054af7c4a67ba742112accf07afc3d56019" translate="yes" xml:space="preserve">
          <source>Represents an interval of time.</source>
          <target state="translated">時間の間隔を表します。</target>
        </trans-unit>
        <trans-unit id="2d721bcbf347e19a4d297b8d77ad757d2ffbda05" translate="yes" xml:space="preserve">
          <source>Represents fractional seconds (portions of time smaller than a second).</source>
          <target state="translated">小数秒(1秒よりも小さい時間の部分)を表します。</target>
        </trans-unit>
        <trans-unit id="a99c9af937a58a8fe433fd7c418c634ff3532cc9" translate="yes" xml:space="preserve">
          <source>Represents the 12 months of the Gregorian year (January is 1).</source>
          <target state="translated">グレゴリオ暦の12ヶ月(1月は1)を表します。</target>
        </trans-unit>
        <trans-unit id="cafb2741e0101355880a4369d423d57cbeaca7a1" translate="yes" xml:space="preserve">
          <source>Represents the 7 days of the Gregorian week (Sunday is 0).</source>
          <target state="translated">グレゴリオ暦の週の7日を表します(日曜日は0)。</target>
        </trans-unit>
        <trans-unit id="3cfcc553f5907a03417254ec92d33a339d24d302" translate="yes" xml:space="preserve">
          <source>Represents the ID of a thread, as returned by &lt;code&gt;Thread.&lt;/code&gt;&lt;a href=&quot;#id&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/a&gt;. The exact type varies from platform to platform.</source>
          <target state="translated">&lt;code&gt;Thread.&lt;/code&gt; によって返されるスレッドのIDを表します。&lt;a href=&quot;#id&quot;&gt; &lt;code&gt;id&lt;/code&gt; &lt;/a&gt;。正確なタイプはプラットフォームごとに異なります。</target>
        </trans-unit>
        <trans-unit id="79592dd80802f56e45673837462680efc10a659d" translate="yes" xml:space="preserve">
          <source>Represents the program counter of the start of the next instruction. So,</source>
          <target state="translated">次の命令の開始時のプログラムカウンタを表します。つまり、次の命令の開始時のプログラムカウンタを表します。</target>
        </trans-unit>
        <trans-unit id="9612141a5f05008d3fc5bfabff3f29e0c723430f" translate="yes" xml:space="preserve">
          <source>Represents the status of an email address</source>
          <target state="translated">メールアドレスの状態を表します。</target>
        </trans-unit>
        <trans-unit id="66c903fc3505843fc3f5a55e911bfe6cb8fd51ea" translate="yes" xml:space="preserve">
          <source>Request additional semantic analysis for TypeInfo generation.</source>
          <target state="translated">TypeInfo生成のためのセマンティック解析を追加で依頼する。</target>
        </trans-unit>
        <trans-unit id="5129f8c370fa885b85ac26897f294272ff8ac1e9" translate="yes" xml:space="preserve">
          <source>Request internal information from the curl session with this function. The third argument MUST be a pointer to a long, a pointer to a char * or a pointer to a double (as the documentation describes elsewhere). The data pointed to will be filled in accordingly and can be relied upon only if the function returns CURLE_OK. This function is intended to get used &lt;em&gt;AFTER&lt;/em&gt; a performed transfer, all results from this function are undefined until the transfer is completed.</source>
          <target state="translated">この関数を使用して、curlセッションから内部情報を要求します。3番目の引数は、longへのポインター、char *へのポインター、またはdoubleへのポインターでなければなりません（ドキュメントで他の場所で説明されています）。指されたデータはそれに応じて入力され、関数がCURLE_OKを返す場合にのみ信頼できます。この機能は、慣れるために意図され&lt;em&gt;、AFTER&lt;/em&gt;転送が完了するまで実行転送、この関数からのすべての結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="6d4fbad80cc3367d293c2d0f03d7f36df4053772" translate="yes" xml:space="preserve">
          <source>Requested target field alignment size of the given type.</source>
          <target state="translated">指定されたタイプの要求されたターゲットフィールドのアラインメントサイズ。</target>
        </trans-unit>
        <trans-unit id="4e550276bb6c1cdbcf2e2907624ca453de5cd98a" translate="yes" xml:space="preserve">
          <source>Requested target memory alignment size of the given type.</source>
          <target state="translated">指定されたタイプの要求されたターゲット・メモリ・アライメント・サイズ。</target>
        </trans-unit>
        <trans-unit id="b6b39777910b6aa0f8bea5d47f04ada6b3d29ea9" translate="yes" xml:space="preserve">
          <source>Requesting a system service that is not supported.</source>
          <target state="translated">サポートされていないシステムサービスを要求する。</target>
        </trans-unit>
        <trans-unit id="cedd2e25c6537b54aec40e6247f1349ccc85d882" translate="yes" xml:space="preserve">
          <source>Requests an aligned block of managed memory from the garbage collector, which is initialized with all bits set to zero. This memory may be deleted at will with a call to free, or it may be discarded and cleaned up automatically during a collection run. If allocation fails, this function will call onOutOfMemory which is expected to throw an OutOfMemoryError.</source>
          <target state="translated">ガベージコレクタから管理メモリのアラインメントされたブロックを要求し、すべてのビットがゼロに設定された状態で初期化される。このメモリは、free への呼び出しで任意に削除されるか、またはコレクションの実行中に廃棄されて自動的にクリーンアップされることがあります。割り当てに失敗した場合、この関数は onOutOfMemory を呼び出し、OutOfMemoryError をスローすることが予想されます。</target>
        </trans-unit>
        <trans-unit id="3372c028eacd246cc56044aa7a3733e04a6d6f6f" translate="yes" xml:space="preserve">
          <source>Requests an aligned block of managed memory from the garbage collector. This memory may be deleted at will with a call to free, or it may be discarded and cleaned up automatically during a collection run. If allocation fails, this function will call onOutOfMemory which is expected to throw an OutOfMemoryError.</source>
          <target state="translated">ガベージコレクタに管理メモリの整列されたブロックを要求します。このメモリは、free の呼び出しで任意に削除されるか、またはコレクションの実行中に破棄されて自動的にクリーンアップされます。割り当てに失敗した場合、この関数は、OutOfMemoryError を投げることが予想される onOutOfMemory を呼び出します。</target>
        </trans-unit>
        <trans-unit id="0f27acb273e8e867abce7f89b11502031e9b54ef" translate="yes" xml:space="preserve">
          <source>Requests that at least sz bytes of memory be obtained from the operating system and marked as free.</source>
          <target state="translated">少なくとも sz バイトのメモリをオペレーティングシステムから取得し、フリーとマークすることを要求します。</target>
        </trans-unit>
        <trans-unit id="139378ece9cc043d995703caf8c0d054566cc3a2" translate="yes" xml:space="preserve">
          <source>Requests that the managed memory block referenced by p be extended in place by at least mx bytes, with a desired extension of sz bytes. If an extension of the required size is not possible or if p references memory not originally allocated by this garbage collector, no action will be taken.</source>
          <target state="translated">p によって参照される管理されたメモリブロックを、sz バイトの拡張を希望して、その場で少なくとも mx バイト拡張することを要求する。必要なサイズの拡張が不可能な場合、または p がこのガベージコレクタによって元々割り当てられていないメモリを参照している場合、アクションは実行されない。</target>
        </trans-unit>
        <trans-unit id="52c504ab52de6623939f9c90c2748efd2ee46879" translate="yes" xml:space="preserve">
          <source>Require that all ranges are equal</source>
          <target state="translated">すべての範囲が等しいことを要求する</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="4d3f97223e0e772af6b4e15662af447e7861d0d7" translate="yes" xml:space="preserve">
          <source>Requiring errno to be checked.</source>
          <target state="translated">errnoをチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="b7605a40c901f4f03a81488eb7f88474e985a327" translate="yes" xml:space="preserve">
          <source>Requiring that a function be called to check if the previous function failed.</source>
          <target state="translated">前の関数が失敗したかどうかを確認するために関数を呼び出すことを要求する。</target>
        </trans-unit>
        <trans-unit id="2c7bb842b37a84d17d9f3688eaa255e6c0f8625b" translate="yes" xml:space="preserve">
          <source>Reserve at least newCapacity elements for appending. Note that more elements may be reserved than requested. If &lt;code&gt;newCapacity &amp;lt;= capacity&lt;/code&gt;, then nothing is done.</source>
          <target state="translated">追加用に少なくともnewCapacity要素を予約します。リクエストされたよりも多くの要素が予約される場合があることに注意してください。場合 &lt;code&gt;newCapacity &amp;lt;= capacity&lt;/code&gt; は、何も行われません。</target>
        </trans-unit>
        <trans-unit id="7bc2f0e2bcb2ad253290193bf73eb0c5a63f16c2" translate="yes" xml:space="preserve">
          <source>Reserved for future use</source>
          <target state="translated">将来の使用のために予約</target>
        </trans-unit>
        <trans-unit id="f6fc57a2e78be889f385b7b6aa59f1f303e40117" translate="yes" xml:space="preserve">
          <source>Reserves capacity for a slice. The capacity is the size that the slice can grow to before the underlying array must be reallocated or extended.</source>
          <target state="translated">スライスの容量を確保します。容量とは、基盤となるアレイの再割り当てや拡張が必要になる前に、スライスが成長できるサイズのことです。</target>
        </trans-unit>
        <trans-unit id="d95494e07a6a9549bcea26b9d9f2fbf0deb1f69a" translate="yes" xml:space="preserve">
          <source>Reset A Prepared Statement Object</source>
          <target state="translated">準備されたステートメントオブジェクトのリセット</target>
        </trans-unit>
        <trans-unit id="42eeaddac57cdadd9740ee6589dcc8b8aa539cc7" translate="yes" xml:space="preserve">
          <source>Reset All Bindings On A Prepared Statement</source>
          <target state="translated">作成されたステートメントのすべてのバインディングをリセットする</target>
        </trans-unit>
        <trans-unit id="73a14bd471f06173f0ae50ee3cde4ad48b429415" translate="yes" xml:space="preserve">
          <source>Reset Automatic Extension Loading</source>
          <target state="translated">自動延長の読み込みをリセット</target>
        </trans-unit>
        <trans-unit id="8523ebb069ab7e3bc472ae3359c34dc47b6ce750" translate="yes" xml:space="preserve">
          <source>Reset stringTab[] between object files being emitted, because the symbols are local.</source>
          <target state="translated">シンボルはローカルであるため、放出されるオブジェクトファイル間でstringTab[]をリセットします。</target>
        </trans-unit>
        <trans-unit id="f2111437cc95f234e7f61c74a64fa99a6e79c53e" translate="yes" xml:space="preserve">
          <source>Reset the &lt;code&gt;SocketSet&lt;/code&gt; so that there are 0 &lt;code&gt;Socket&lt;/code&gt;s in the collection.</source>
          <target state="translated">コレクションに &lt;code&gt;Socket&lt;/code&gt; が0になるように &lt;code&gt;SocketSet&lt;/code&gt; をリセットします。</target>
        </trans-unit>
        <trans-unit id="6acfbb95f80f439e77f66baaa4feda1989c06608" translate="yes" xml:space="preserve">
          <source>Reset the event manually</source>
          <target state="translated">イベントを手動でリセット</target>
        </trans-unit>
        <trans-unit id="d0e6ffc296492170be6eaac941a0209ac5feb33f" translate="yes" xml:space="preserve">
          <source>Reset this status line</source>
          <target state="translated">このステータスラインをリセット</target>
        </trans-unit>
        <trans-unit id="c5f2b07df79684f7e6099777d42617cad068c5ee" translate="yes" xml:space="preserve">
          <source>Resets the StopWatch.</source>
          <target state="translated">ストップウォッチをリセットします。</target>
        </trans-unit>
        <trans-unit id="1dd9486f880f808a919c8718480623a1605b1ba6" translate="yes" xml:space="preserve">
          <source>Resets the digest and returns the finished hash.</source>
          <target state="translated">ダイジェストをリセットし、終了したハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="471712629a58202496aecedf4cc8cd07ce039c66" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the digest.</source>
          <target state="translated">ダイジェストの内部状態をリセットします。</target>
        </trans-unit>
        <trans-unit id="29105a822505923cb74156d62ee974c45964160f" translate="yes" xml:space="preserve">
          <source>Resets the stop watch.</source>
          <target state="translated">ストップウォッチをリセットします。</target>
        </trans-unit>
        <trans-unit id="3c746f0be60df50f256627441fa28d9489afec36" translate="yes" xml:space="preserve">
          <source>Resets this fiber so that it may be re-used, optionally with a new function/delegate. This routine should only be called for fibers that have terminated, as doing otherwise could result in scope-dependent functionality that is not executed. Stack-based classes, for example, may not be cleaned up properly if a fiber is reset before it has terminated.</source>
          <target state="translated">このファイバーをリセットして再利用できるようにします。このルーチンは、終了したファイバーに対してのみ呼び出されるべきです。そうしないと、スコープに依存した機能が実行されなくなる可能性があるからです。そうしないとスコープ依存の機能が実行されなくなる可能性があるからです。例えば、スタック・ベースのクラスでは、終了する前にファイバーがリセットされると、適切にクリーンアップされない可能性があります。</target>
        </trans-unit>
        <trans-unit id="7c6950b5d0d5619c182f3a5ca7fbf452af59df0e" translate="yes" xml:space="preserve">
          <source>Resize an allocation</source>
          <target state="translated">割り当てのサイズ変更</target>
        </trans-unit>
        <trans-unit id="b7bd018ef0421ace4cb12ea37baabb0ca4638f29" translate="yes" xml:space="preserve">
          <source>Resize arrays for non-zero initializers. p pointer to array lvalue to be updated newlength new .length property of array sizeelem size of each element of array initsize size of initializer ... initializer</source>
          <target state="translated">p 更新される配列 lvalue へのポインタ newlength 配列の new .length プロパティ sizeelem 配列の各要素のサイズ initsize イニシャライザのサイズ ...イニシャライザ</target>
        </trans-unit>
        <trans-unit id="065447bf2ca7decda27ef1819524c1a96f73dfc5" translate="yes" xml:space="preserve">
          <source>Resize dynamic array</source>
          <target state="translated">動的配列のサイズ変更</target>
        </trans-unit>
        <trans-unit id="1d5f16a39b451a1be358daae7e9ae7fdd49590f3" translate="yes" xml:space="preserve">
          <source>Resize dynamic arrays with 0 initializers.</source>
          <target state="translated">0イニシャライザで動的配列のサイズを変更します。</target>
        </trans-unit>
        <trans-unit id="5dfe5740d7a2956a571c9a469730fb7c99e7b009" translate="yes" xml:space="preserve">
          <source>Resizing a dynamic array is a relatively expensive operation. So, while the following method of filling an array:</source>
          <target state="translated">動的配列のサイズ変更は比較的高価な操作です。そのため、次のような方法で配列を埋めながら</target>
        </trans-unit>
        <trans-unit id="d6c383a5217dccf2c0952e72df95ef983342db52" translate="yes" xml:space="preserve">
          <source>Resolve &lt;code&gt;exp&lt;/code&gt; as a compile-time known string.</source>
          <target state="translated">&lt;code&gt;exp&lt;/code&gt; をコンパイル時の既知の文字列として解決します。</target>
        </trans-unit>
        <trans-unit id="add8852f4a8b9d5cd73a4a3a41a11636bdfefb85" translate="yes" xml:space="preserve">
          <source>Resolve IPv4 address number.</source>
          <target state="translated">IPv4アドレス番号を解決します。</target>
        </trans-unit>
        <trans-unit id="f2816c55ac2f1ed78c8b9a440f1edb45919393c5" translate="yes" xml:space="preserve">
          <source>Resolve __FILE__, __LINE__, __MODULE__, __FUNCTION__, __PRETTY_FUNCTION__, _FILE_FULL_PATH__ to loc.</source>
          <target state="translated">FILE__,__LINE__,__MODULE__,__FUNCTION__,__PRETTY_FUNCTION__,_FILE_FULL_PATH__を loc に解決します。</target>
        </trans-unit>
        <trans-unit id="4294036a0eac97bbc8b92b3759fc5cad311871ac" translate="yes" xml:space="preserve">
          <source>Resolve forward reference of function body. Returns false if any errors exist in the body.</source>
          <target state="translated">関数本体の前方参照を解決します。bodyにエラーがある場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="a6291a59121e164606457ba4c505c08e2b5452ce" translate="yes" xml:space="preserve">
          <source>Resolve forward reference of function signature - parameter types, return type, and attributes. Returns false if any errors exist in the signature.</source>
          <target state="translated">関数シグネチャの前方参照(パラメータ型、戻り値の型、属性)を解決します。シグネチャにエラーがある場合は false を返します。</target>
        </trans-unit>
        <trans-unit id="23e626fe9c2ba60d897513a49a174cca86f33c64" translate="yes" xml:space="preserve">
          <source>Resolve host name.</source>
          <target state="translated">ホスト名を解決します。</target>
        </trans-unit>
        <trans-unit id="b746fa36d41b47804bf593057295da4f57fde063" translate="yes" xml:space="preserve">
          <source>Resolve recursive tuple expansion in eponymous template.</source>
          <target state="translated">同名テンプレートでの再帰的なタプル展開を解決します。</target>
        </trans-unit>
        <trans-unit id="d171f89f8496b90f48d29067d7a3b8eeb38cbfd1" translate="yes" xml:space="preserve">
          <source>Resolve type 'mt' to either type, symbol, or expression. If errors happened, resolved to Type.terror.</source>
          <target state="translated">mt' の型を型、記号、式のいずれかに解決します。エラーが発生した場合は、Type.terrorに解決されます。</target>
        </trans-unit>
        <trans-unit id="480c7d8304d6e54ca530b156b2111b7eaf5daca1" translate="yes" xml:space="preserve">
          <source>Resolves an internal pointer to the full block allocated. Implementations that don't support this primitive should always return &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">割り当てられたブロック全体への内部ポインタを解決します。このプリミティブをサポートしない実装は、常に &lt;code&gt;Ternary.unknown&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="0d7b2996046749e7b1014897e894a93ba894c735" translate="yes" xml:space="preserve">
          <source>Restore the original environment.</source>
          <target state="translated">元の環境に戻す。</target>
        </trans-unit>
        <trans-unit id="0e3a9c5b62f2be2064d3d964a9ef961f37a03948" translate="yes" xml:space="preserve">
          <source>Result Values From A Query</source>
          <target state="translated">クエリの結果値</target>
        </trans-unit>
        <trans-unit id="14e9a8a65f95d4830439c26d294fabe9a68ef5c5" translate="yes" xml:space="preserve">
          <source>Result of &lt;code&gt;prefix&lt;/code&gt;/&lt;code&gt;suffix&lt;/code&gt; depending on argument (&lt;code&gt;U&lt;/code&gt; is any unqualified type, &lt;code&gt;Affix&lt;/code&gt; is &lt;code&gt;Prefix&lt;/code&gt; or &lt;code&gt;Suffix&lt;/code&gt;)</source>
          <target state="translated">引数に応じた &lt;code&gt;prefix&lt;/code&gt; / &lt;code&gt;suffix&lt;/code&gt; 結果（ &lt;code&gt;U&lt;/code&gt; は任意の非修飾型、 &lt;code&gt;Affix&lt;/code&gt; は &lt;code&gt;Prefix&lt;/code&gt; または &lt;code&gt;Suffix&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="00745696fca51d33fca520d4f9fe669ebe681576" translate="yes" xml:space="preserve">
          <source>Results are undefined if |x| &amp;gt;= 2&lt;sup&gt;64&lt;/sup&gt;.</source>
          <target state="translated">| x |の場合、結果は未定義です。&amp;gt; = 2 &lt;sup&gt;64&lt;/sup&gt;。</target>
        </trans-unit>
        <trans-unit id="20a4ed4ef565e8f5c963baf1f9915922d80dd17b" translate="yes" xml:space="preserve">
          <source>Resume all threads but the calling thread for &quot;stop the world&quot; garbage collection runs. This function must be called once for each preceding call to thread_suspendAll before the threads are actually resumed.</source>
          <target state="translated">stop the world&quot; ガベージコレクションを実行するための呼び出しスレッド以外のすべてのスレッドを再開します。この関数は、スレッドが実際に再開される前に thread_suspendAll を呼び出すたびに一度だけ呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc0928161ff41e4d7d7a001aa80dafe900b42465" translate="yes" xml:space="preserve">
          <source>Resuming all other threads.</source>
          <target state="translated">他のスレッドを全て再開</target>
        </trans-unit>
        <trans-unit id="703e161b48645d69ebec4c98b02ec6d09910e568" translate="yes" xml:space="preserve">
          <source>Retained Features</source>
          <target state="translated">リテインドの特徴</target>
        </trans-unit>
        <trans-unit id="9436610ae339b49f56637a6888f78a3bf39116b2" translate="yes" xml:space="preserve">
          <source>Rethrow &lt;code&gt;rethrow&lt;/code&gt;</source>
          <target state="translated">再スロー &lt;code&gt;rethrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98d578ae439e1b092e4a4e615d7b7397ef0334e7" translate="yes" xml:space="preserve">
          <source>Rethrow any unhandled exception which may have caused the current thread to terminate.</source>
          <target state="translated">現在のスレッドを終了させる原因となった未処理の例外を再スローします。</target>
        </trans-unit>
        <trans-unit id="9130a10856483bfab6387863e636df689c68f2a7" translate="yes" xml:space="preserve">
          <source>Rethrow any unhandled exception which may have caused this fiber to terminate.</source>
          <target state="translated">このファイバーが終了する原因となった処理されていない例外を再スローします。</target>
        </trans-unit>
        <trans-unit id="b192f2c54c63617f6ccccf4f1ccbcc987da3dfb4" translate="yes" xml:space="preserve">
          <source>Rethrow any unhandled exception which may have caused this thread to terminate.</source>
          <target state="translated">このスレッドを終了させる原因となった未処理の例外を再スローします。</target>
        </trans-unit>
        <trans-unit id="f5afb7b65ef8795be2a474133d2b845f5c63d16f" translate="yes" xml:space="preserve">
          <source>Rethrows any exception thrown during the execution of the &lt;code&gt;Task&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; の実行中にスローされた例外を再スローします。</target>
        </trans-unit>
        <trans-unit id="04939179a95512f6a50b3cd0097445c75c03c0c5" translate="yes" xml:space="preserve">
          <source>Retrieve and clear error status</source>
          <target state="translated">エラーステータスの取得とクリア</target>
        </trans-unit>
        <trans-unit id="fb1a4d2ddb091e2ed5c1df8126e43168969a2ea2" translate="yes" xml:space="preserve">
          <source>Retrieve the error message for the most recently encountered network error.</source>
          <target state="translated">最近発生したネットワーク・エラーのエラーメッセージを取得します。</target>
        </trans-unit>
        <trans-unit id="3ccfcce95184dd63b688eab71bd3c81c72b77f02" translate="yes" xml:space="preserve">
          <source>Retrieve the mutex for a database connection</source>
          <target state="translated">データベース接続のミューテックスを取得します。</target>
        </trans-unit>
        <trans-unit id="fd054d14944b7f8962b0dae166fba959f6ef5524" translate="yes" xml:space="preserve">
          <source>Retrieves the members of an enumerated type &lt;code&gt;enum E&lt;/code&gt;.</source>
          <target state="translated">列挙型 &lt;code&gt;enum E&lt;/code&gt; のメンバーを取得します。</target>
        </trans-unit>
        <trans-unit id="07a895e230fd42b88e4f200ba2424bd521ff0150" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the environment variable with the given &lt;code&gt;name&lt;/code&gt;, or a default value if the variable doesn't exist.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; の環境変数の値を取得します。変数が存在しない場合はデフォルト値を取得します。</target>
        </trans-unit>
        <trans-unit id="fe03c3b4a6a960b5acf0f284f07d69430246cd47" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the environment variable with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; 環境変数の値を取得します。</target>
        </trans-unit>
        <trans-unit id="d1327c9133feffd8b254491a96ec4b023b23972e" translate="yes" xml:space="preserve">
          <source>Retrieving Statement SQL</source>
          <target state="translated">ステートメントSQLを取得する</target>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="5076efac4add13272bee6ddd5339fd9cda299560" translate="yes" xml:space="preserve">
          <source>Return !=0 if expression is an lvalue.</source>
          <target state="translated">式が lvalue の場合は !=0 を返します。</target>
        </trans-unit>
        <trans-unit id="8e1581a5f169c76fa8c14988eaaae171290c12aa" translate="yes" xml:space="preserve">
          <source>Return !=0 if extensions match.</source>
          <target state="translated">拡張子が一致した場合は !=0 を返します。</target>
        </trans-unit>
        <trans-unit id="dacbd18f9e3c60c211bc1336b50a6100f6993589" translate="yes" xml:space="preserve">
          <source>Return !=0 if modfrom can be implicitly converted to modto</source>
          <target state="translated">modfrom が暗黙のうちに modto に変換できる場合は !=0 を返します。</target>
        </trans-unit>
        <trans-unit id="5eaea1adde418b1924b1f691d2ffcede135bc038" translate="yes" xml:space="preserve">
          <source>Return !=0 if the type or any of its subtypes is wild.</source>
          <target state="translated">型またはそのサブ型がワイルドな場合は !=0 を返します。</target>
        </trans-unit>
        <trans-unit id="813830fa39348b3cac6aa17105d4deb19aac21bb" translate="yes" xml:space="preserve">
          <source>Return !=0 if type has pointers that need to be scanned by the GC during a collection cycle.</source>
          <target state="translated">タイプが、収集サイクル中に GC によってスキャンされる必要があるポインタを持っている場合、 !=0 を返す。</target>
        </trans-unit>
        <trans-unit id="2d22ef1555d405cb20620e62b486706f65de39cb" translate="yes" xml:space="preserve">
          <source>Return !=0 if unicode alpha. Use table from C99 Appendix D.</source>
          <target state="translated">unicode alpha の場合は !=0 を返す。C99 付録Dの表を使用してください。</target>
        </trans-unit>
        <trans-unit id="7fb67cbae9c13ed76633b46abf739b76f9c294e1" translate="yes" xml:space="preserve">
          <source>Return 0 from the callback to signal success, return 1 to signal error and make curl close the socket</source>
          <target state="translated">コールバックから 0 を返して成功を通知し、1 を返してエラーを通知し、curl がソケットを閉じるようにします。</target>
        </trans-unit>
        <trans-unit id="466cf5e4eacffab4b5439c5f4c484cff12bded87" translate="yes" xml:space="preserve">
          <source>Return 0 from the callback to signal success, return non-zero to abort transfer</source>
          <target state="translated">コールバックから 0 を返して成功を示し、0 以外の値を返して転送を中止します。</target>
        </trans-unit>
        <trans-unit id="3363b44414c7c859cdedb1714e3b8af576d7fa24" translate="yes" xml:space="preserve">
          <source>Return 0 from the callback to signal success, return non-zero to abort transfer.</source>
          <target state="translated">コールバックから 0 を返して成功を知らせ、0 以外の値を返して転送を中止します。</target>
        </trans-unit>
        <trans-unit id="c9646219088fb7ede96a566f8d70a3a4eec4c914" translate="yes" xml:space="preserve">
          <source>Return 0 to signal success, return non-zero to abort transfer.</source>
          <target state="translated">0 を返すと成功のシグナル、0 以外の値を返すと転送を中止します。</target>
        </trans-unit>
        <trans-unit id="5735756d12a32be153ec40823e5e91495fbf0fff" translate="yes" xml:space="preserve">
          <source>Return 1 if sign bit of e is set, 0 if not.</source>
          <target state="translated">e の符号ビットがセットされている場合は 1 を返し、セットされていない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="82f89a6b75799e6fbe68dea890823428de349d71" translate="yes" xml:space="preserve">
          <source>Return MATCH level of implicitly converting e to type t. Don't do the actual cast; don't change e.</source>
          <target state="translated">暗黙のうちにeをt型に変換するMATCHレベルを返します。</target>
        </trans-unit>
        <trans-unit id="24e287b96c21c16dc00195e6a2518bac14d25d32" translate="yes" xml:space="preserve">
          <source>Return MATCH.exact or MATCH.constant if a method of type '() modfrom' can call a method of type '() modto'.</source>
          <target state="translated">'()modfrom' 型のメソッドが '()modto' 型のメソッドを呼び出すことができる場合、MATCH.accust または MATCH.constant を返します。</target>
        </trans-unit>
        <trans-unit id="6b5a1d52cb44bff3d519554e6603c5f2ef79882f" translate="yes" xml:space="preserve">
          <source>Return Ref Parameters</source>
          <target state="translated">戻り値 Ref パラメータ</target>
        </trans-unit>
        <trans-unit id="40f3a4705ebbb407ee0cdc99059fa5fe5300eb28" translate="yes" xml:space="preserve">
          <source>Return Scope Parameters</source>
          <target state="translated">リターンスコープパラメータ</target>
        </trans-unit>
        <trans-unit id="b568fd0cda9a73719dc7007f78b5366b6ca2051e" translate="yes" xml:space="preserve">
          <source>Return Statement</source>
          <target state="translated">リターンステートメント</target>
        </trans-unit>
        <trans-unit id="8cfd6fed2b7cd44c8a1d3921d26de3c89f4137b3" translate="yes" xml:space="preserve">
          <source>Return The Filename For A Database Connection</source>
          <target state="translated">データベース接続のファイル名を返す</target>
        </trans-unit>
        <trans-unit id="7605e4b76df0d8f628e31f2c3d6b09f231afd493" translate="yes" xml:space="preserve">
          <source>Return The Size Of An Open BLOB</source>
          <target state="translated">開いている BLOB のサイズを返す</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="dd6416148e17adaeaccfc9b6b7d1e682c603bb71" translate="yes" xml:space="preserve">
          <source>Return a GC allocated array of all keys</source>
          <target state="translated">すべてのキーの GC 割り当て配列を返す</target>
        </trans-unit>
        <trans-unit id="e51ad1ab975119086f7ac92aca0a3e9b0bc6500f" translate="yes" xml:space="preserve">
          <source>Return a GC allocated array of all values</source>
          <target state="translated">すべての値の GC 割り当て配列を返します。</target>
        </trans-unit>
        <trans-unit id="85b29e7222f48991ae7292690eb4ff4d837309db" translate="yes" xml:space="preserve">
          <source>Return a copy of this type with all attributes null-initialized. Useful for creating a type with different modifiers.</source>
          <target state="translated">すべての属性がヌル初期化されたこの型のコピーを返します。異なる修飾子を持つ型を作成するのに便利です。</target>
        </trans-unit>
        <trans-unit id="f10d29706c4a0fdf4790fac9d2887fe37bc15218" translate="yes" xml:space="preserve">
          <source>Return a lazy range of the indices of set bits.</source>
          <target state="translated">セットされたビットのインデックスの遅延範囲を返します。</target>
        </trans-unit>
        <trans-unit id="3c3bd314993cb4f7ebe64ce8ccdfda96b5e89c4f" translate="yes" xml:space="preserve">
          <source>Return a range advanced to within &lt;code&gt;_n&lt;/code&gt; elements of the end of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">範囲の終わりの &lt;code&gt;_n&lt;/code&gt; 要素内に進んだ範囲を返し &lt;code&gt;range&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5347c17867337569c491fc8294864697ba1401bd" translate="yes" xml:space="preserve">
          <source>Return a range advanced to within &lt;code&gt;n&lt;/code&gt; elements of the end of the given range.</source>
          <target state="translated">指定された範囲の終わりから &lt;code&gt;n&lt;/code&gt; 要素以内に進んだ範囲を返します。</target>
        </trans-unit>
        <trans-unit id="64584cef9fbdd944a607b7c32156e3abfbfa767a" translate="yes" xml:space="preserve">
          <source>Return a string representation of this BitArray.</source>
          <target state="translated">このBitArrayの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="909366bd83575cfd59995d950c2eec03f130a564" translate="yes" xml:space="preserve">
          <source>Return aligned 'offset' if it is of size 'size'.</source>
          <target state="translated">サイズ 'size' の場合は、整列された 'offset' を返します。</target>
        </trans-unit>
        <trans-unit id="7bac63114467240663566e592e5e86e0bef9bef2" translate="yes" xml:space="preserve">
          <source>Return alignment of type</source>
          <target state="translated">型のアライメントを返します。</target>
        </trans-unit>
        <trans-unit id="14099585f9505605deb2190e1aae416384628c38" translate="yes" xml:space="preserve">
          <source>Return alignment to use for this type.</source>
          <target state="translated">この型に使用するアライメントを返します。</target>
        </trans-unit>
        <trans-unit id="78bd5594d8bf94c5bb250c8135cb0038193e109d" translate="yes" xml:space="preserve">
          <source>Return back end type corresponding to D front end type.</source>
          <target state="translated">Dフロントエンドタイプに対応するバックエンドタイプを返します。</target>
        </trans-unit>
        <trans-unit id="82367e299b290bd0a098fc1001f08ec0e0513303" translate="yes" xml:space="preserve">
          <source>Return canonical version of name in a malloc'd buffer. This code is high risk.</source>
          <target state="translated">malloc'd バッファ内の name の正規バージョンを返します。このコードはリスクが高いです。</target>
        </trans-unit>
        <trans-unit id="9c156771844298d98d35a5f40c30a796e519426a" translate="yes" xml:space="preserve">
          <source>Return code of the application</source>
          <target state="translated">アプリケーションのリターンコード</target>
        </trans-unit>
        <trans-unit id="944e1e4d489d2d2acdea588d0a19a936485871df" translate="yes" xml:space="preserve">
          <source>Return default initializer. If the type should be initialized to all zeros, an array with a null ptr and a length equal to the type size will be returned. For static arrays, this returns the default initializer for a single element of the array, use &lt;code&gt;tsize&lt;/code&gt; to get the correct size.</source>
          <target state="translated">デフォルトの初期化子を返します。型をすべてゼロに初期化する必要がある場合、ptrがnullで長さが型のサイズと等しい配列が返されます。静的配列の場合、これは配列の単一要素のデフォルトの初期化子を返します。正しいサイズを取得するには、 &lt;code&gt;tsize&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4053dc0e9bdb3ffb335d94322fd6ee14fabd7bb6" translate="yes" xml:space="preserve">
          <source>Return elem that evaluates to the static frame pointer for function fd. If fd is a member function, the returned expression will compute the value of fd's 'this' variable. 'fdp' is the parent of 'fd' if the frame pointer is being used to call 'fd'. 'origSc' is the original scope we inlined from. This routine is critical for implementing nested functions.</source>
          <target state="translated">関数fdの静的フレームポインタを評価するelemを返します。fdがメンバ関数の場合、返される式はfdの変数'this'の値を計算します。フレームポインタが 'fd' の呼び出しに使用されている場合、'fdp' は 'fd' の親となります。'origSc' はインライン化した元のスコープです。このルーチンは入れ子になった関数を実装するために重要です。</target>
        </trans-unit>
        <trans-unit id="9fd03b424640910e6278c70e669b1d4e876e9f5f" translate="yes" xml:space="preserve">
          <source>Return file name without extension.</source>
          <target state="translated">拡張子のないファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="07fe9514789d2f4cd0e9b4e57ce0ed5505c13b37" translate="yes" xml:space="preserve">
          <source>Return filename name excluding path (read-only).</source>
          <target state="translated">パスを除いたファイル名を返します(読み取り専用)。</target>
        </trans-unit>
        <trans-unit id="22c4aed7f4185313b77e553930796acded83814f" translate="yes" xml:space="preserve">
          <source>Return first parameter &lt;code&gt;p&lt;/code&gt; that passes an &lt;code&gt;if (p)&lt;/code&gt; test, e.g. &lt;code&gt;either(0, 42, 43)&lt;/code&gt; returns &lt;code&gt;42&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if (p)&lt;/code&gt; テストに合格する最初のパラメーター &lt;code&gt;p&lt;/code&gt; を返します。たとえば &lt;code&gt;either(0, 42, 43)&lt;/code&gt; は &lt;code&gt;42&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="161ebf2251616309e44b6d0f705eb7df9207ac30" translate="yes" xml:space="preserve">
          <source>Return info used by the garbage collector to do precise collection.</source>
          <target state="translated">正確な収集を行うためにガベージコレクタが使用する情報を返します。</target>
        </trans-unit>
        <trans-unit id="1edd17a195e17c6d1c9dfaec1964d158a7594886" translate="yes" xml:space="preserve">
          <source>Return internal info on arguments fitting into 8byte. See X86-64 ABI 3.2.3</source>
          <target state="translated">8バイトに収まる引数の内部情報を返します。X86-64 ABI 3.2.3 を参照。</target>
        </trans-unit>
        <trans-unit id="52ee2244a124dcf6a3442090efe2b150aad23b24" translate="yes" xml:space="preserve">
          <source>Return nonzero if this &lt;code&gt;Socket&lt;/code&gt; is in the collection.</source>
          <target state="translated">この &lt;code&gt;Socket&lt;/code&gt; がコレクション内にある場合はゼロ以外を返します。</target>
        </trans-unit>
        <trans-unit id="5bcb75882578fa152d0a3b8228a6bba059bb03c0" translate="yes" xml:space="preserve">
          <source>Return number of bytes in UTF character.</source>
          <target state="translated">UTF 文字のバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="6b00e7eeba7dd7b1983912d6619513007b5842a8" translate="yes" xml:space="preserve">
          <source>Return path portion of str. returned string is newly allocated Path does not include trailing path separator.</source>
          <target state="translated">返された文字列は新たに確保された文字列である。</target>
        </trans-unit>
        <trans-unit id="9e32c0be2d58d4be865d007c41bc8ed55177dfba" translate="yes" xml:space="preserve">
          <source>Return ref parameters are used with &lt;a href=&quot;#ref-functions&quot;&gt;ref functions&lt;/a&gt; to ensure that the returned reference will not outlive the matching argument's lifetime.</source>
          <target state="translated">返される参照パラメーターは、返される参照が一致する引数の存続期間を超えないようにするために、&lt;a href=&quot;#ref-functions&quot;&gt;参照関数で&lt;/a&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="618c532a610bb89f14f3a07343fb126a0476acfe" translate="yes" xml:space="preserve">
          <source>Return size of data.</source>
          <target state="translated">データのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="6d6fc86109cd8c5c3e47783737daf2ca750d004d" translate="yes" xml:space="preserve">
          <source>Return string that is the 'successor' to s[]. If the rightmost character is a-zA-Z0-9, it is incremented within its case or digits. If it generates a carry, the process is repeated with the one to its immediate left.</source>
          <target state="translated">s[]の「後継」となる文字列を返します。右端の文字が a-zA-Z0-9 の場合は、大文字と小文字の区別なくインクリメントされます。キャリーを生成した場合は、その直後の左端の文字で処理が繰り返されます。</target>
        </trans-unit>
        <trans-unit id="44c54a5951a97047f68a283b62e636ee8bfac1cb" translate="yes" xml:space="preserve">
          <source>Return the Tid of the thread which spawned the caller's thread.</source>
          <target state="translated">呼び出し元のスレッドをスポーンしたスレッドの Tid を返します。</target>
        </trans-unit>
        <trans-unit id="dae6425ebb00694c8e2b8f43749eb65eb305e7fc" translate="yes" xml:space="preserve">
          <source>Return the UUID as a string in the canonical form.</source>
          <target state="translated">UUIDを正規表現の文字列として返します。</target>
        </trans-unit>
        <trans-unit id="f5d15e798ef426e1020ac0483edb55fff7505a66" translate="yes" xml:space="preserve">
          <source>Return the current trace handler</source>
          <target state="translated">現在のトレースハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="5124903d5287a5fa60d6aa7723c70c0683f914e9" translate="yes" xml:space="preserve">
          <source>Return the given name as an absolute path</source>
          <target state="translated">与えられた名前を絶対パスとして返します。</target>
        </trans-unit>
        <trans-unit id="6712230d551ab31ce097306bbbc187117b86954e" translate="yes" xml:space="preserve">
          <source>Return the greatest number less than x that is representable as a real; thus, it gives the previous point on the IEEE number line.</source>
          <target state="translated">実数として表現可能な x より小さい最大の数を返します。</target>
        </trans-unit>
        <trans-unit id="50cbdb762f2bb55c31094ad5fc1de24f5b8a351f" translate="yes" xml:space="preserve">
          <source>Return the least number greater than x that is representable as a real; thus, it gives the next point on the IEEE number line.</source>
          <target state="translated">実数として表現可能な x よりも大きい最小の数を返します。</target>
        </trans-unit>
        <trans-unit id="9961e81d7ecf72d3873e2aee6f0f99fd21867c8e" translate="yes" xml:space="preserve">
          <source>Return the mask that an integral type will fit into.</source>
          <target state="translated">積分型が収まるマスクを返します。</target>
        </trans-unit>
        <trans-unit id="b37d2aa3fd3373873e57e3b908a867dc0ec62fd7" translate="yes" xml:space="preserve">
          <source>Return the number of code units the string would be if it were re-encoded as tynto.</source>
          <target state="translated">文字列をtyntoとして再エンコードした場合のコード単位数を返します。</target>
        </trans-unit>
        <trans-unit id="64be8221f99567047f7d41a30b0f7a629422450c" translate="yes" xml:space="preserve">
          <source>Return the size of an allocation</source>
          <target state="translated">割り当てのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="e3de1268dd617a3c170c29afc19a38c699eb49aa" translate="yes" xml:space="preserve">
          <source>Return the value of x rounded to the nearest integer.</source>
          <target state="translated">x の値を、最も近い整数に丸めた値を返します。</target>
        </trans-unit>
        <trans-unit id="77386a55b3af47db5d6720fdbb34821632594ea1" translate="yes" xml:space="preserve">
          <source>Return the value of x rounded to the nearest integer. If the fractional part of x is exactly 0.5, the return value is rounded away from zero.</source>
          <target state="translated">x の値を、最も近い整数に丸めた値を返します。x の端数部分が正確に 0.5 の場合、戻り値はゼロから四捨五入されます。</target>
        </trans-unit>
        <trans-unit id="eba0bf1594868083254398a7aeb4b4f670dfbd1e" translate="yes" xml:space="preserve">
          <source>Return this type's modifier name.</source>
          <target state="translated">この型の修飾子名を返します。</target>
        </trans-unit>
        <trans-unit id="815f69369aee2a4e4634f0ce87bd2dced618858c" translate="yes" xml:space="preserve">
          <source>Return true if agg1 and agg2 are pointers to the same memory block</source>
          <target state="translated">agg1 と agg2 が同じメモリブロックへのポインタである場合に true を返します。</target>
        </trans-unit>
        <trans-unit id="bb42b6838897246be79e8ac1836c1c9893f5258e" translate="yes" xml:space="preserve">
          <source>Return true if any of the members are static ctors or static dtors, or if any members have members that are.</source>
          <target state="translated">メンバのいずれかがスタティックなctorsまたはスタティックなdtorsである場合、またはスタティックなdtorsであるメンバがある場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="a2affd967703203aa22f06ba3f47f616207aaf70" translate="yes" xml:space="preserve">
          <source>Return true if dt contains pointers (requires relocations).</source>
          <target state="translated">dtにポインタが含まれていれば真を返します(再配置が必要です)。</target>
        </trans-unit>
        <trans-unit id="a704680e5a2358a4b21f56a8e14e64261e3a1fb8" translate="yes" xml:space="preserve">
          <source>Return true if dt is all zeros.</source>
          <target state="translated">dtがすべて0の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="a4b6c1fc0091c1a3a5bb73cc9fc2a1b7c342228c" translate="yes" xml:space="preserve">
          <source>Return true if e could be valid only as a template value parameter. Return false if it might be an alias or tuple. (Note that even in this case, it could still turn out to be a value).</source>
          <target state="translated">eがテンプレート値のパラメータとしてのみ有効な場合はtrueを返します。エイリアスやタプルである可能性がある場合は、falseを返します(この場合でも値になる可能性があることに注意してください)。(この場合でも、値であることが判明する可能性があることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="84791c44b623e37860c47666951c5280ba6fc7be" translate="yes" xml:space="preserve">
          <source>Return true if module imports itself.</source>
          <target state="translated">モジュール自身がインポートされている場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="dc1399a76e32df10691c532a68ee824eb2a87c93" translate="yes" xml:space="preserve">
          <source>Return true if module imports root module.</source>
          <target state="translated">モジュールがルートモジュールをインポートしている場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="b8d1cff003fcd386ae3bf958175ea899758e9ab2" translate="yes" xml:space="preserve">
          <source>Return true if size of data is 0.</source>
          <target state="translated">データのサイズが0の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="6e045f7f2adea7c61e3f3faafea8ac2112270ae8" translate="yes" xml:space="preserve">
          <source>Return true if there are lazy parameters.</source>
          <target state="translated">遅延パラメータがある場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="e83369e1edea2b1de00e12e9114bab39ec8a35b1" translate="yes" xml:space="preserve">
          <source>Return true if variable needs to call the destructor.</source>
          <target state="translated">変数がデストラクタを呼び出す必要がある場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="e6f382b6d6732c45656ed7d192c05094bace1124" translate="yes" xml:space="preserve">
          <source>Return true if we can take the address of this variable.</source>
          <target state="translated">この変数のアドレスを取ることができれば真を返します。</target>
        </trans-unit>
        <trans-unit id="96335248606b0ff777f182f31ffdf9d3299473ff" translate="yes" xml:space="preserve">
          <source>Return type with the top level of it being mutable.</source>
          <target state="translated">最上位のレベルが mutable であることを示す戻り値の型。</target>
        </trans-unit>
        <trans-unit id="e7370338afdd3f0d3caf67e9c25b67a935b91773" translate="yes" xml:space="preserve">
          <source>Return whether &lt;code&gt;c&lt;/code&gt; is a Unicode lowercase &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;.</source>
          <target state="translated">かどうか戻り値 &lt;code&gt;c&lt;/code&gt; が Unicodeの小文字である&lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d5dd30c83ee35b4f635ccc0ec48b106e9b9c166" translate="yes" xml:space="preserve">
          <source>Return whether &lt;code&gt;c&lt;/code&gt; is a Unicode uppercase &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;.</source>
          <target state="translated">かどうか戻り値 &lt;code&gt;c&lt;/code&gt; が Unicodeの大文字である&lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa6f79138c08ba3706b95a32d76889ad1576f327" translate="yes" xml:space="preserve">
          <source>ReturnStatement</source>
          <target state="translated">ReturnStatement</target>
        </trans-unit>
        <trans-unit id="9fee2a258147624ebdf57aeaaa981ddfd6b4674c" translate="yes" xml:space="preserve">
          <source>ReturnType!fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt;(alias fun)(Parameters!fun args);</source>
          <target state="translated">ReturnType！fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt;（エイリアスfun）（Parameters！fun args）;</target>
        </trans-unit>
        <trans-unit id="f0413c4ab273e98a4edc165fa833c49ffe92fc6d" translate="yes" xml:space="preserve">
          <source>ReturnType!fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt;(alias fun, uint maxSize)(Parameters!fun args);</source>
          <target state="translated">ReturnType！fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt;（エイリアスfun、uint maxSize）（Parameters！fun args）;</target>
        </trans-unit>
        <trans-unit id="9c6c9e9250bee2a67f71ce0b8269b7c304840e28" translate="yes" xml:space="preserve">
          <source>Returned values are strictly typed with &lt;code&gt;E&lt;/code&gt;. Thus, the following code does not work without the explicit cast:</source>
          <target state="translated">戻り値は厳密に &lt;code&gt;E&lt;/code&gt; で型付けされます。したがって、次のコードは明示的なキャストなしでは機能しません。</target>
        </trans-unit>
        <trans-unit id="a6ac97e5a779ad777b193998ab3efe07d29d58c5" translate="yes" xml:space="preserve">
          <source>Returning a 0 value.</source>
          <target state="translated">0の値を返します。</target>
        </trans-unit>
        <trans-unit id="c73e68bfada258b418ac816e2d5d678f4463decc" translate="yes" xml:space="preserve">
          <source>Returning a &lt;code&gt;ubyte[n]&lt;/code&gt; helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values).</source>
          <target state="translated">&lt;code&gt;ubyte[n]&lt;/code&gt; を返すことは、交換された値を誤って通常の値として使用することを防ぐのに役立ちます（浮動小数点値の場合は、FPUが交換された浮動小数点値を混乱させるため、これが必要です。したがって、実際には浮動小数点値として浮動小数点値を交換）。</target>
        </trans-unit>
        <trans-unit id="93145fea4e51302eb070f8da6bb9a6d60e8f08fa" translate="yes" xml:space="preserve">
          <source>Returning a NULL pointer.</source>
          <target state="translated">NULLポインタを返します。</target>
        </trans-unit>
        <trans-unit id="c2b3f353baca74d789f1759c6379b6dde0b73242" translate="yes" xml:space="preserve">
          <source>Returning a non-zero error code.</source>
          <target state="translated">ゼロ以外のエラーコードを返します。</target>
        </trans-unit>
        <trans-unit id="2e985b58b9c2ef6cf6a8831e1ffcc745302653df" translate="yes" xml:space="preserve">
          <source>Returning a subtype of &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; enables the following convenient idiom:</source>
          <target state="translated">&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; の&lt;/a&gt;サブタイプを返すと、次の便利なイディオムが有効になります。</target>
        </trans-unit>
        <trans-unit id="182cd17c7c23cdc09eba2a4f2e7e149460a4f29b" translate="yes" xml:space="preserve">
          <source>Returning the address of a &lt;code&gt;ref&lt;/code&gt; variable is also checked.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 変数のアドレスを返すこともチェックされます。</target>
        </trans-unit>
        <trans-unit id="6c27c79f2e4552af535e1d49e91664f690a08cee" translate="yes" xml:space="preserve">
          <source>Returning the current thread to whatever work it was doing.</source>
          <target state="translated">現在のスレッドを、それが行っていた仕事に戻す。</target>
        </trans-unit>
        <trans-unit id="6984d70f1bef25da719e6dc8594bb161e58e8dd9" translate="yes" xml:space="preserve">
          <source>Returning values in registers is often faster, so this can be used as a check on a hot function to ensure it is using the fastest method.</source>
          <target state="translated">レジスタ内の値を返す方が高速であることが多いので、これはホット関数が最速の方法を使用しているかどうかを確認するためのチェックとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="ed1d0baa1befb7365f80c956f685b4164ce4abc4" translate="yes" xml:space="preserve">
          <source>Returns (x * y) + z, rounding only once according to the current rounding mode.</source>
          <target state="translated">(x*y)+z を返し、現在の丸めモードに従って一度だけ丸めます。</target>
        </trans-unit>
        <trans-unit id="60778e683e6a3e85209303f22d279d8091b6677d" translate="yes" xml:space="preserve">
          <source>Returns -1 if &amp;Gamma;(x) &amp;lt; 0, +1 if &amp;Gamma;(x) &amp;gt; 0, NAN if sign is indeterminate.</source>
          <target state="translated">&amp;Gamma;（x）&amp;lt;0の場合は-1、&amp;Gamma;（x）&amp;gt; 0の場合は+1、符号が不定の場合はNANを返します。</target>
        </trans-unit>
        <trans-unit id="ec98e787d4dd28ab0e557aa099033d515eca2e4c" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;http://en.wikipedia.org/wiki/Sine&quot;&gt;sine&lt;/a&gt; of x. x is in &lt;a href=&quot;http://en.wikipedia.org/wiki/Radian&quot;&gt;radians&lt;/a&gt;.</source>
          <target state="translated">xの&lt;a href=&quot;http://en.wikipedia.org/wiki/Sine&quot;&gt;正弦&lt;/a&gt;を返します。xは&lt;a href=&quot;http://en.wikipedia.org/wiki/Radian&quot;&gt;ラジアン&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="534252ff9584903ee29007cae24024402e5d5549" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;x &amp;lt; 0&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x == 0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;x &amp;gt; 0&lt;/code&gt;, and NAN if x==NAN.</source>
          <target state="translated">戻り値 &lt;code&gt;-1&lt;/code&gt; であれば &lt;code&gt;x &amp;lt; 0&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; の場合 &lt;code&gt;x == 0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; の場合 &lt;code&gt;x &amp;gt; 0&lt;/code&gt; 、およびNANのx == NAN場合。</target>
        </trans-unit>
        <trans-unit id="56ad949e95f8129ac1bdde6e3c05a3b620f35036" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.no&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ternary.no&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="162c4b360f19eb0223970b32348aa2468143ae82" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; belongs to the &lt;code&gt;BitmappedBlock&lt;/code&gt; object, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. Never returns &lt;code&gt;Ternary.unkown&lt;/code&gt;. (This method is somewhat tolerant in that accepts an interior slice.)</source>
          <target state="translated">返し &lt;code&gt;Ternary.yes&lt;/code&gt; を場合 &lt;code&gt;b&lt;/code&gt; はに属し &lt;code&gt;BitmappedBlock&lt;/code&gt; のオブジェクト、 &lt;code&gt;Ternary.no&lt;/code&gt; そう。 &lt;code&gt;Ternary.unkown&lt;/code&gt; を返しません。（この方法は、内部スライスを受け入れるという点で多少寛容です。）</target>
        </trans-unit>
        <trans-unit id="8ceb97bd9a5df5ae709b59070999702eafaa3c90" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; belongs to the &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; object, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. Never returns &lt;code&gt;Ternary.unkown&lt;/code&gt;. (This method is somewhat tolerant in that accepts an interior slice.)</source>
          <target state="translated">返し &lt;code&gt;Ternary.yes&lt;/code&gt; を場合 &lt;code&gt;b&lt;/code&gt; はに属し &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; のオブジェクト、 &lt;code&gt;Ternary.no&lt;/code&gt; そう。 &lt;code&gt;Ternary.unkown&lt;/code&gt; を返しません。（この方法は、内部スライスを受け入れるという点で多少寛容です。）</target>
        </trans-unit>
        <trans-unit id="aa0ae7e27a4d74ee8d3cc9b782715b16198cb676" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; has been allocated with this allocator. An allocator should define this method only if it can decide on ownership precisely and fast (in constant time, logarithmic time, or linear time with a low multiplication factor). Traditional allocators such as the C heap do not define such functionality. If &lt;code&gt;b is null&lt;/code&gt;, the allocator shall return &lt;code&gt;Ternary.no&lt;/code&gt;, i.e. no allocator owns the &lt;code&gt;null&lt;/code&gt; slice.</source>
          <target state="translated">このアロケータで &lt;code&gt;b&lt;/code&gt; が割り当てられている場合は &lt;code&gt;Ternary.yes&lt;/code&gt; を返します。アロケータは、所有権を正確かつ高速に（一定の時間、対数時間、または乗算係数の低い線形時間で）決定できる場合にのみ、このメソッドを定義する必要があります。Cヒープなどの従来のアロケータは、そのような機能を定義していません。場合 &lt;code&gt;b is null&lt;/code&gt; 、アロケータは返還しなければならない &lt;code&gt;Ternary.no&lt;/code&gt; を一切アロケータが所有していない、つまり、 &lt;code&gt;null&lt;/code&gt; スライスを。</target>
        </trans-unit>
        <trans-unit id="cc43b850aae4fdfc4d7d9d18eab4228e8c3f8f7a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; is the result of a previous allocation, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise.</source>
          <target state="translated">戻り値は &lt;code&gt;Ternary.yes&lt;/code&gt; 場合 &lt;code&gt;b&lt;/code&gt; は、前の割り当ての結果である &lt;code&gt;Ternary.no&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="1428bbb4302db4dd1b3f636985f6ddcbfc4d61a2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if and only if the allocator holds no memory (i.e. no allocation has occurred, or all allocations have been deallocated).</source>
          <target state="translated">アロケータがメモリを保持していない場合（つまり、割り当てが発生していない場合、またはすべての割り当てが割り当て解除されている場合）に限り、 &lt;code&gt;Ternary.yes&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c1c97d1779f0a6a9209ed489a0132919b1507b6d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no allocators are currently active, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. This methods never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;Ternary.yes&lt;/code&gt; 何アロケータが現在アクティブでない場合は、 &lt;code&gt;Ternary.no&lt;/code&gt; をそう。このメソッドが &lt;code&gt;Ternary.unknown&lt;/code&gt; を返すことはありません。</target>
        </trans-unit>
        <trans-unit id="0df29a7d41d84a915ace0d89d94e1699b80dcff7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory has been allocated in this region, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. (Never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.)</source>
          <target state="translated">戻り値は &lt;code&gt;Ternary.yes&lt;/code&gt; 何のメモリがこの領域に割り当てられていない場合 &lt;code&gt;Ternary.no&lt;/code&gt; そう。（決して &lt;code&gt;Ternary.unknown&lt;/code&gt; を返しません。）</target>
        </trans-unit>
        <trans-unit id="22641d942273ad1a77fc2a90f950d47345bb9533" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory is currently allocated from this allocator, &lt;code&gt;Ternary.no&lt;/code&gt; if some allocations are currently active, or &lt;code&gt;Ternary.unknown&lt;/code&gt; if not supported.</source>
          <target state="translated">返し &lt;code&gt;Ternary.yes&lt;/code&gt; を全くメモリが現在このアロケータから割り当てられない場合 &lt;code&gt;Ternary.no&lt;/code&gt; いくつかの割り当てが現在アクティブである場合、又は &lt;code&gt;Ternary.unknown&lt;/code&gt; サポートされていない場合。</target>
        </trans-unit>
        <trans-unit id="28f123241a0a7eec0cc32c965f3372769e98b360" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory is currently allocated with this allocator, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. This method never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">返し &lt;code&gt;Ternary.yes&lt;/code&gt; を全くメモリが現在このアロケータで割り当てられていない場合 &lt;code&gt;Ternary.no&lt;/code&gt; そう。このメソッドが &lt;code&gt;Ternary.unknown&lt;/code&gt; を返すことはありません。</target>
        </trans-unit>
        <trans-unit id="576821022eb07e0ae2aa13aa41f01f8ddabdaa3d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory is currently allocated with this allocator, otherwise &lt;code&gt;Ternary.no&lt;/code&gt;. This method never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">現在このアロケータでメモリが割り当てられていない場合は &lt;code&gt;Ternary.yes&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;Ternary.no&lt;/code&gt; を返します。このメソッドが &lt;code&gt;Ternary.unknown&lt;/code&gt; を返すことはありません。</target>
        </trans-unit>
        <trans-unit id="e8e5a2d686354e28ac99624b57803cbe311a5bfc" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the allocator does not contain any alive objects and &lt;code&gt;Ternary.no&lt;/code&gt; otherwise.</source>
          <target state="translated">返し &lt;code&gt;Ternary.yes&lt;/code&gt; をアロケータは、任意の生きているオブジェクトと含まれていない場合 &lt;code&gt;Ternary.no&lt;/code&gt; をそう。</target>
        </trans-unit>
        <trans-unit id="5c75eda55e19b85a866dcdacb4846513741b45d7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the allocator owns &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;Ternary.no&lt;/code&gt; if the allocator doesn't own &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;Ternary.unknown&lt;/code&gt; if ownership cannot be determined. Implementations that don't support this primitive should always return &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">戻り値 &lt;code&gt;Ternary.yes&lt;/code&gt; をアロケータが所有している場合 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;Ternary.no&lt;/code&gt; をアロケータが所有していない場合は &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;Ternary.unknown&lt;/code&gt; の所有権が決定できない場合。このプリミティブをサポートしない実装は、常に &lt;code&gt;Ternary.unknown&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7c3466939fa67b53a7a75df18791cd8a27669629" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the buffer belongs to the parent allocator and &lt;code&gt;Ternary.no&lt;/code&gt; otherwise.</source>
          <target state="translated">返し &lt;code&gt;Ternary.yes&lt;/code&gt; をバッファが親アロケータとに属している場合 &lt;code&gt;Ternary.no&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="39020cc870cb247dce8f9c94879adcaa6a57c96a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid.</source>
          <target state="translated">渡されたバッファが仮想アドレスの範囲内にある場合、 &lt;code&gt;Ternary.yes&lt;/code&gt; を返します。渡されたバッファがまだ有効であることを保証しません。</target>
        </trans-unit>
        <trans-unit id="303082f8c158d6170e928d785a87c6c26ee45a1e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if this allocator is not responsible for any memory, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. (Never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.)</source>
          <target state="translated">戻り値 &lt;code&gt;Ternary.yes&lt;/code&gt; このアロケータは、任意のメモリを担当していない場合、 &lt;code&gt;Ternary.no&lt;/code&gt; はそうでありません。（決して &lt;code&gt;Ternary.unknown&lt;/code&gt; を返しません。）</target>
        </trans-unit>
        <trans-unit id="3e0da7ed620f30a5c0b0c0b0cc2ad4c453d99eeb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ternary.yes&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="171e90d1a5e9b217cfbadc1fe4981e6e561b6e1f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, &lt;code&gt;lhs == rhs&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt; 場合は &lt;code&gt;false&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;lhs == rhs&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="6b531ec06a4a58e5849f228457943c156e4c192c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.alignment&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.alignment&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2321cc4ffc700d49cca6939f5369564e066de21e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.allocate(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.allocate(s)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aa2eecf7d0145c17dcaf88a38b4e20c63af0f54a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.allocateAll()&lt;/code&gt; if present, &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">存在する場合は &lt;code&gt;impl.allocateAll()&lt;/code&gt; を返し、存在しない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5a1226dde654c77a4a80edc348feb411c699d92f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.expand(b, s)&lt;/code&gt; if defined, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">定義されている場合は &lt;code&gt;impl.expand(b, s)&lt;/code&gt; 返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="59e12fcd550e930e0350a5b77d09a89da92d5237" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.goodAllocSize(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.goodAllocSize(s)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a9ab643c87da7f4f802b4b6f621bd1cdf5d2cafd" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.reallocate(b, s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.reallocate(b, s)&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="297f733fd8829c297b46be1b6dbcda567e215b5e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;input&lt;/code&gt; string normalized to the chosen form. Form C is used by default.</source>
          <target state="translated">選択したフォームに正規化された &lt;code&gt;input&lt;/code&gt; 文字列を返します。デフォルトではフォームCが使用されます。</target>
        </trans-unit>
        <trans-unit id="f65e4dedfaf54f3f539e6a37bd3034786d7d9e2d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0fd314bf9de358fea53410f95a2f026dab84699d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;parent.goodAllocSize(max(Node.sizeof, s))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parent.goodAllocSize(max(Node.sizeof, s))&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="72d8fb1eb1b6183b12d4ee09405418cca7db2cac" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;roundingFunction(n)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;roundingFunction(n)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6abd4a9b1f3a77730da058c3f5c3e546560b2ae" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;str&lt;/code&gt; without its last character, if there is one. If &lt;code&gt;str&lt;/code&gt; ends with &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt;, then both are removed. If &lt;code&gt;str&lt;/code&gt; is empty, then it is returned unchanged.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; がある場合、最後の文字なしでstrを返します。 &lt;code&gt;str&lt;/code&gt; が &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; で終わる場合、両方が削除されます。 &lt;code&gt;str&lt;/code&gt; が空の場合、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="c1c161f31f56a32344444a0b2419c5d4c9202e0b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is a bidirectional range. A bidirectional range is a forward range that also offers the primitives &lt;code&gt;back&lt;/code&gt; and &lt;code&gt;popBack&lt;/code&gt;. The following code should compile for any bidirectional range.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が双方向範囲の場合、 &lt;code&gt;true&lt;/code&gt; を返します。双方向範囲は、プリミティブ &lt;code&gt;back&lt;/code&gt; および &lt;code&gt;popBack&lt;/code&gt; も提供する前方範囲です。次のコードは、双方向の範囲でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="2f059b10cfb16deb0e5638727bb38a6b9ac52201" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is a forward range. A forward range is an input range &lt;code&gt;r&lt;/code&gt; that can save &quot;checkpoints&quot; by saving &lt;code&gt;r.save&lt;/code&gt; to another value of type &lt;code&gt;R&lt;/code&gt;. Notable examples of input ranges that are</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が前方範囲の場合、 &lt;code&gt;true&lt;/code&gt; を返します。フォワードレンジは、 &lt;code&gt;r.save&lt;/code&gt; をタイプ &lt;code&gt;R&lt;/code&gt; の別の値に保存することで「チェックポイント」を保存できる入力レンジ &lt;code&gt;r&lt;/code&gt; です。ある入力範囲の注目すべき例</target>
        </trans-unit>
        <trans-unit id="3b467330b4203940d2a4e8d37c8f0a276e36681b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is a random-access range. A random-access range is a bidirectional range that also offers the primitive &lt;code&gt;opIndex&lt;/code&gt;, OR an infinite forward range that offers &lt;code&gt;opIndex&lt;/code&gt;. In either case, the range must either offer &lt;code&gt;length&lt;/code&gt; or be infinite. The following code should compile for any random-access range.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; がランダムアクセス範囲の場合、 &lt;code&gt;true&lt;/code&gt; を返します。ランダムアクセス範囲は、プリミティブ &lt;code&gt;opIndex&lt;/code&gt; を提供する双方向範囲、または &lt;code&gt;opIndex&lt;/code&gt; を提供する無限前方範囲です。どちらの場合も、範囲は &lt;code&gt;length&lt;/code&gt; 提供するか、無限でなければなりません。次のコードは、ランダムアクセス範囲に対してコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="f7149a6f275dcde465622cbefd719bfe0d50441e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an infinite input range. An infinite input range is an input range that has a statically-defined enumerated member called &lt;code&gt;empty&lt;/code&gt; that is always &lt;code&gt;false&lt;/code&gt;, for example:</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が無限入力範囲の場合、 &lt;code&gt;true&lt;/code&gt; を返します。無限の入力範囲とは、静的に定義された &lt;code&gt;empty&lt;/code&gt; と呼ばれる列挙型メンバーがあり、常に &lt;code&gt;false&lt;/code&gt; である入力範囲です。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="fbe9c1eac882faaa1dcf8e8f6dece76a2c0658c1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an input range and has mutable elements. The following code should compile for any range with assignable elements.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が入力範囲であり、変更可能な要素がある場合、 &lt;code&gt;true&lt;/code&gt; を返します。次のコードは、割り当て可能な要素のある任意の範囲でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="92a385254815ac53aec42359b923e3af33cc4d6e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an input range and has swappable elements. The following code should compile for any range with swappable elements.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が入力範囲であり、交換可能な要素がある場合は &lt;code&gt;true&lt;/code&gt; を返します。次のコードは、スワップ可能な要素を持つ任意の範囲でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="a58ab4a20ee140833f55835772fc3940265454f2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an input range. An input range must define the primitives &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;popFront&lt;/code&gt;, and &lt;code&gt;front&lt;/code&gt;. The following code should compile for any input range.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が入力範囲の場合、 &lt;code&gt;true&lt;/code&gt; を返します。入力範囲は、プリミティブ &lt;code&gt;empty&lt;/code&gt; 、 &lt;code&gt;popFront&lt;/code&gt; 、および &lt;code&gt;front&lt;/code&gt; を定義する必要があります。次のコードは、任意の入力範囲でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="bf713c5ba61ab267f431d59647761609af6d7365" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an output range for elements of type &lt;code&gt;E&lt;/code&gt;. An output range is defined functionally as a range that supports the operation &lt;code&gt;put(r, e)&lt;/code&gt; as defined above.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; がタイプ &lt;code&gt;E&lt;/code&gt; の要素の出力範囲である場合、 &lt;code&gt;true&lt;/code&gt; を返します。出力範囲は、上記で定義された操作 &lt;code&gt;put(r, e)&lt;/code&gt; をサポートする範囲として機能的に定義されます。</target>
        </trans-unit>
        <trans-unit id="4f58a311b2afe419c192251695a872d19ddd072e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; offers a slicing operator with integral boundaries that returns a forward range type.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が前方範囲型を返す整数境界を持つスライスオペレーターを提供する場合、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="be2339a5e762f38e486b357b996cc8c0afa8d2ab" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if T can be iterated over using a &lt;code&gt;foreach&lt;/code&gt; loop with a single loop variable of automatically inferred type, regardless of how the &lt;code&gt;foreach&lt;/code&gt; loop is implemented. This includes ranges, structs/classes that define &lt;code&gt;opApply&lt;/code&gt; with a single loop variable, and builtin dynamic, static and associative arrays.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; ループの実装方法に関係なく、自動的に推論される型の単一のループ変数を持つ &lt;code&gt;foreach&lt;/code&gt; ループを使用してTを反復できる場合、 &lt;code&gt;true&lt;/code&gt; を返します。これには、範囲、単一のループ変数で &lt;code&gt;opApply&lt;/code&gt; を定義する構造体/クラス、組み込みの動的、静的、および連想配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="19db28355f8adaae7fe54281e6a7169d6254e95e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if</source>
          <target state="translated">次の場合にのみ &lt;code&gt;true&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="e866f26aa80809c3ecd57b506c084fc3221ce4c4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;T&lt;/code&gt; is an instance of &lt;code&gt;std.typecons.Tuple&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;std.typecons.Tuple&lt;/code&gt; のインスタンスで &lt;code&gt;true&lt;/code&gt; 場合にのみtrueを返します。</target>
        </trans-unit>
        <trans-unit id="91662a20ad55e5e239dca338af4ceba2ee60f7b9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;T&lt;/code&gt;'s representation includes at least one of the following:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の表現に次の少なくとも1つが含まれている場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f748607acecd90cf140bfeadc5d3b94f97aeb287" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;needle&lt;/code&gt; can be found in &lt;code&gt; range&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; が &lt;code&gt; range&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; 場合にのみtrueを返します。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;haystack.length&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="8347b9ae1247a48045e91dfed1e8ae3a959989ce" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;this&lt;/code&gt; is in the null state.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; がnull状態の場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4f8617e5b686b8968816a74420a58a1764a1a20e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;value&lt;/code&gt; can be found in &lt;code&gt;range&lt;/code&gt;, which is assumed to be sorted. Performs &amp;Omicron;(&lt;code&gt;log(r.length)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;range&lt;/code&gt; にある場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。これはソートされていると見なされます。 &lt;code&gt;pred&lt;/code&gt; の &amp;Omicron;（ &lt;code&gt;log(r.length)&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="99281d985e62377f2701006146fe6b1540d92251" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if any value &lt;code&gt;v&lt;/code&gt; found in the input range &lt;code&gt;range&lt;/code&gt; satisfies the predicate &lt;code&gt;pred&lt;/code&gt;. Performs (at most) &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">入力範囲の &lt;code&gt;range&lt;/code&gt; 見つかった値 &lt;code&gt;v&lt;/code&gt; が述語 &lt;code&gt;pred&lt;/code&gt; を満たす場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。 &lt;code&gt;pred&lt;/code&gt; の（最大で）&amp;Omicron;（ &lt;code&gt;haystack.length&lt;/code&gt; ）評価を実行します。</target>
        </trans-unit>
        <trans-unit id="340045aa6f5419b6c3fb24aa3c63b00d481f7099" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if the &lt;code&gt;VariantN&lt;/code&gt; object holds an object implicitly convertible to type &lt;code&gt;T&lt;/code&gt;. Implicit convertibility is defined as per &lt;a href=&quot;std_traits#ImplicitConversionTargets&quot;&gt;ImplicitConversionTargets&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; オブジェクトが &lt;code&gt;T&lt;/code&gt; 型に暗黙的に変換可能なオブジェクトを保持している場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。暗黙的な変換可能性は、&lt;a href=&quot;std_traits#ImplicitConversionTargets&quot;&gt;ImplicitConversionTargets&lt;/a&gt;に従って定義されます。</target>
        </trans-unit>
        <trans-unit id="dcf1ed6589d8954612b9eba8096e270605501dd0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if the underlying store has been allocated and initialized.</source>
          <target state="translated">基本となるストアが割り当てられ、初期化されている場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="502c0e6d9996c8a042d2f011a9cb56c056f24a67" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Allocator&lt;/code&gt; has the alignment known at compile time; otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator&lt;/code&gt; がコンパイル時に既知の配置を持っている場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7fd5d1f607579d73eccdba6a3b899b6b84dae6e8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Task&lt;/code&gt; is finished executing.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; 実行が終了した場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="44dbc6fa301e5cd342bc3c260e5ae09d5b2e4f74" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the container has no elements, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">コンテナに要素がない場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="81df5d82b8bc145a8725b6ceb8cab02d15e7cc84" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the file is at end (see &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/feof.html&quot;&gt;feof&lt;/a&gt;).</source>
          <target state="translated">ファイルが最後に &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します（&lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/feof.html&quot;&gt;feofを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5e8ab4a2d65c2af4af5b6475b8db6edfd8781050" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the file is opened.</source>
          <target state="translated">ファイルが開かれている場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ab57a086ed171ce09531125c96424a6adc9c55f8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the heap is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">ヒープが空の場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4abb8088d0bc3163191e40379de13d1ecff0fd98" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the range is at end. The test depends on the stopping policy.</source>
          <target state="translated">範囲が終了している場合は &lt;code&gt;true&lt;/code&gt; を返します。テストは停止ポリシーに依存します。</target>
        </trans-unit>
        <trans-unit id="d4d3ed4fff3e3f0475cffd560a4e179d73353fb1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;R&lt;/code&gt; is an input range that supports the &lt;code&gt;moveFront&lt;/code&gt; primitive, as well as &lt;code&gt;moveBack&lt;/code&gt; and &lt;code&gt;moveAt&lt;/code&gt; if it's a bidirectional or random access range. These may be explicitly implemented, or may work via the default behavior of the module level functions &lt;code&gt;moveFront&lt;/code&gt; and friends. The following code should compile for any range with mobile elements.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が &lt;code&gt;moveFront&lt;/code&gt; プリミティブをサポートする入力範囲である場合は &lt;code&gt;true&lt;/code&gt; を返します。双方向またはランダムアクセス範囲の場合は &lt;code&gt;moveBack&lt;/code&gt; および &lt;code&gt;moveAt&lt;/code&gt; をサポートします。これらは明示的に実装することも、モジュールレベルの関数 &lt;code&gt;moveFront&lt;/code&gt; およびそのフレンドのデフォルトの動作を介して機能することもできます。次のコードは、モバイル要素を含む任意の範囲でコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="b3920946f073a05433b592c6d88bad79ae413585" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; iff a value of type &lt;code&gt;Rhs&lt;/code&gt; can be assigned to a variable of type &lt;code&gt;Lhs&lt;/code&gt;.</source>
          <target state="translated">戻り値 &lt;code&gt;true&lt;/code&gt; の型の値IFF &lt;code&gt;Rhs&lt;/code&gt; 型の変数に割り当てることができます &lt;code&gt;Lhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be6a353019484efaaa663c32966fbd10e552629c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;val&lt;/code&gt;, if it is between &lt;code&gt;lower&lt;/code&gt; and &lt;code&gt;upper&lt;/code&gt;. Otherwise returns the nearest of the two.</source>
          <target state="translated">&lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; の間にある場合は、 &lt;code&gt;val&lt;/code&gt; を返します。それ以外の場合は、2つの最も近いものを返します。</target>
        </trans-unit>
        <trans-unit id="5e77f105096e10dff599ded9fcbbd0ec957a4b39" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;x&lt;/code&gt; rounded to a &lt;code&gt;long&lt;/code&gt; value using the &lt;code&gt;FE_TONEAREST&lt;/code&gt; rounding mode. If the integer value of &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;long.max&lt;/code&gt;, the result is indeterminate.</source>
          <target state="translated">&lt;code&gt;FE_TONEAREST&lt;/code&gt; 丸めモードを使用して、 &lt;code&gt;x&lt;/code&gt; を &lt;code&gt;long&lt;/code&gt; 値に丸めて返します。 &lt;code&gt;x&lt;/code&gt; の整数値が &lt;code&gt;long.max&lt;/code&gt; より大きい場合、結果は不確定です。</target>
        </trans-unit>
        <trans-unit id="191bae5fc0041b9a2f632c289a94cb1fad5c5888" translate="yes" xml:space="preserve">
          <source>Returns T if the type is one of the following forms: T delegate()[] T delegate()[dim]</source>
          <target state="translated">型が以下のいずれかの形式の場合にTを返します。T delegate()[]T delegate()[dim]</target>
        </trans-unit>
        <trans-unit id="1ae9eec54bc5f2bb441d40598d1cfc8da340394c" translate="yes" xml:space="preserve">
          <source>Returns ThreadInfo.thisInfo, since it is a thread-local instance of ThreadInfo, which is the correct behavior for this scheduler.</source>
          <target state="translated">ThreadInfo.thisInfoを返します。これは、このスケジューラの正しい動作であるThreadInfoのスレッドローカルインスタンスであるため、 ThreadInfo.thisInfoを返します。</target>
        </trans-unit>
        <trans-unit id="17845a5485dfed66e424a7ba2c7281d3c351c812" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; with the same number of hnsecs as this &lt;code&gt;TickDuration&lt;/code&gt;. Note that the conventional way to convert between &lt;code&gt;TickDuration&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt; is using &lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;std.conv.to&lt;/code&gt;&lt;/a&gt;, e.g.: &lt;code&gt;tickDuration.to!Duration()&lt;/code&gt;</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; と同じhnsecsの数の&lt;a href=&quot;#Duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;を返します。注間の変換を、従来の方法であること &lt;code&gt;TickDuration&lt;/code&gt; と &lt;code&gt;Duration&lt;/code&gt; 使用している&lt;a href=&quot;std_conv#to&quot;&gt; &lt;code&gt;std.conv.to&lt;/code&gt; を&lt;/a&gt;、例えば： &lt;code&gt;tickDuration.to!Duration()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="632ed79f72c9b3ce7cf08f75c7d5bad1099d1a33" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; with the same std time as this one, but with &lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt;&lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt;&lt;/a&gt; as its time zone.</source>
          <target state="translated">これと同じstd時刻を&lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt; &lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt; &lt;/a&gt;が、タイムゾーンとして&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;持つSysTimeを返します。</target>
        </trans-unit>
        <trans-unit id="eb485c36046da604f605fa92ea00c815c886fefb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; with the same std time as this one, but with &lt;code&gt;UTC&lt;/code&gt; as its time zone.</source>
          <target state="translated">これと同じstd時間で&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を返しますが、タイムゾーンは &lt;code&gt;UTC&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="71b042c5535eceb8a0181a5120d750356c50df5f" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; with the same std time as this one, but with given time zone as its time zone.</source>
          <target state="translated">これと同じstd時間で、指定されたタイムゾーンをそのタイムゾーンとして持つ&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="4c42c4ffa645f14b85ca525e085d8ad6101ea548" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#TickDuration&quot;&gt;&lt;code&gt;TickDuration&lt;/code&gt;&lt;/a&gt; with the same number of hnsecs as this &lt;code&gt;Duration&lt;/code&gt;. Note that the conventional way to convert between &lt;code&gt;Duration&lt;/code&gt; and &lt;code&gt;TickDuration&lt;/code&gt; is using &lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;std.conv.to&lt;/code&gt;&lt;/a&gt;, e.g.: &lt;code&gt;duration.to!TickDuration()&lt;/code&gt;</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; と同じ&lt;a href=&quot;#TickDuration&quot;&gt; &lt;code&gt;TickDuration&lt;/code&gt; &lt;/a&gt;を返します。間の変換を、従来の方法ことを注意 &lt;code&gt;Duration&lt;/code&gt; と &lt;code&gt;TickDuration&lt;/code&gt; が使用している&lt;a href=&quot;std_conv#to&quot;&gt; &lt;code&gt;std.conv.to&lt;/code&gt; を&lt;/a&gt;、例えば： &lt;code&gt;duration.to!TickDuration()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5ea13434018601f6e922ebff9fdd27c660b68bd" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#TimeZone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; with the give name per the TZ Database. The time zone information is fetched from the TZ Database time zone files in the given directory.</source>
          <target state="translated">TZデータベースごとに名前を付けて&lt;a href=&quot;#TimeZone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt;を返します。タイムゾーン情報は、指定されたディレクトリのTZデータベースタイムゾーンファイルからフェッチされます。</target>
        </trans-unit>
        <trans-unit id="09668336c60b52b4ed1aa2667de901b8a5329540" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#TimeZone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; with the given name per the Windows time zone names. The time zone information is fetched from the Windows registry.</source>
          <target state="translated">Windowsタイムゾーン名ごとに、指定された名前の&lt;a href=&quot;#TimeZone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt;を返します。タイムゾーン情報は、Windowsレジストリからフェッチされます。</target>
        </trans-unit>
        <trans-unit id="90051d586b426535fb226d796a0084dfa240e45a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; of 0.</source>
          <target state="translated">0の&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="6f58268073e6b6ab3643180e88e877c65456ef76" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; equivalent to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; の&lt;/a&gt;本に相当&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="215ca70788743fb43bffe630def0286fd5de28ba" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt; equivalent to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; &lt;/a&gt;これに相当&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f45b89cde1bd0f7cfd15e8eea90e50fcbe5d6c6a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;std_datetime_date#TimeOfDay&quot;&gt;&lt;code&gt;std.datetime.date.TimeOfDay&lt;/code&gt;&lt;/a&gt; equivalent to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;std_datetime_date#TimeOfDay&quot;&gt; &lt;code&gt;std.datetime.date.TimeOfDay&lt;/code&gt; の&lt;/a&gt;本に相当&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a275216af63e773f0fb7362f374c9e89a80a46d3" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;AliasSeq&lt;/code&gt; of the template arguments used to instantiate &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のインスタンス化に使用されるテンプレート引数の &lt;code&gt;AliasSeq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1aa0bc9c6fc6bf59c35507a0a3dd271e25109fab" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;BOMSeq&lt;/code&gt; for a given &lt;code&gt;input&lt;/code&gt;. If no &lt;code&gt;BOM&lt;/code&gt; is present the &lt;code&gt;BOMSeq&lt;/code&gt; for &lt;code&gt;BOM.none&lt;/code&gt; is returned. The &lt;code&gt;BOM&lt;/code&gt; sequence at the beginning of the range will not be comsumed from the passed range. If you pass a reference type range make sure that &lt;code&gt;save&lt;/code&gt; creates a deep copy.</source>
          <target state="translated">指定された &lt;code&gt;input&lt;/code&gt; &lt;code&gt;BOMSeq&lt;/code&gt; を返します。 &lt;code&gt;BOM&lt;/code&gt; が存在しない場合、 &lt;code&gt;BOMSeq&lt;/code&gt; の &lt;code&gt;BOM.none&lt;/code&gt; が返されます。範囲の最初の &lt;code&gt;BOM&lt;/code&gt; シーケンスは、渡された範囲から消費されません。参照タイプの範囲を渡す場合は、 &lt;code&gt;save&lt;/code&gt; でディープコピーが作成されることを確認してください。</target>
        </trans-unit>
        <trans-unit id="271a5129a4614264e0826270bc01f1ec9a6666bf" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;timespec&lt;/code&gt; which represents this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を表す &lt;code&gt;timespec&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a975692c0ad818e3dbbf204ae9adcd7dc55e218b" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;timeval&lt;/code&gt; which represents this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を表す &lt;code&gt;timeval&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ca13d4c66a0e5eb5f62a8c851e391479433ab671" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;tm&lt;/code&gt; which represents this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;を表す &lt;code&gt;tm&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0b68167263e8112959a914b6724f23bf4be1a30c" translate="yes" xml:space="preserve">
          <source>Returns a C-style zero-terminated string equivalent to &lt;code&gt;str&lt;/code&gt;. &lt;code&gt;str&lt;/code&gt; must not contain embedded &lt;code&gt;'\0'&lt;/code&gt;'s as any C function will treat the first &lt;code&gt;'\0'&lt;/code&gt; that it sees as the end of the string. If &lt;code&gt;str.empty&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then a string containing only &lt;code&gt;'\0'&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; と同等のCスタイルのゼロで終了する文字列を返します。 &lt;code&gt;str&lt;/code&gt; には、埋め込まれた &lt;code&gt;'\0'&lt;/code&gt; が含まれていてはなりません。C関数は、最初に見た最初の &lt;code&gt;'\0'&lt;/code&gt; を文字列の終わりとして扱います。場合 &lt;code&gt;str.empty&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、そして唯一含む文字列 &lt;code&gt;'\0'&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="22582f61782b071673de2012022abb41b3a88086" translate="yes" xml:space="preserve">
          <source>Returns a Condition analog that yields when wait or notify is called.</source>
          <target state="translated">waitやnotifyが呼ばれたときに生成される条件のアナログを返します。</target>
        </trans-unit>
        <trans-unit id="391290c4a753b240f1d69b198a696aac936ffc55" translate="yes" xml:space="preserve">
          <source>Returns a GC-allocated string with the formatting result.</source>
          <target state="translated">GC-allocated 文字列を書式設定の結果とともに返します。</target>
        </trans-unit>
        <trans-unit id="2d011ef5c1a2c68b3a67ff25c14a92bd9bd1228f" translate="yes" xml:space="preserve">
          <source>Returns a ThreadInfo instance specific to the calling Fiber if the Fiber was created by this dispatcher, otherwise it returns ThreadInfo.thisInfo.</source>
          <target state="translated">ファイバがこのディスパッチャによって作成された場合は、その呼び出し元のファイバーに固有の ThreadInfo インスタンスを返し、そうでない場合は ThreadInfo.thisInfo を返します。</target>
        </trans-unit>
        <trans-unit id="c5dcf9c5990afb4cfa134627952c63721d7c2b80" translate="yes" xml:space="preserve">
          <source>Returns a bit field representing all block attributes set for the memory referenced by p. If p references memory not originally allocated by this garbage collector, points to the interior of a memory block, or if p is null, zero will be returned.</source>
          <target state="translated">p がこのガベージコレクタによってもともと割り当てられていないメモリを参照している場合、 メモリブロックの内部を指す場合、または p が NULL の場合、ゼロが返されます。</target>
        </trans-unit>
        <trans-unit id="254edba3b71eec2c6ba87bea00c8d6db0a877e9f" translate="yes" xml:space="preserve">
          <source>Returns a bool &lt;code&gt;true&lt;/code&gt; if all of the arguments compile (are semantically correct). The arguments can be symbols, types, or expressions that are syntactically correct. The arguments cannot be statements or declarations.</source>
          <target state="translated">すべての引数がコンパイルされた場合（意味的に正しい場合）、ブール値 &lt;code&gt;true&lt;/code&gt; を返します。引数は、構文的に正しい記号、型、または式にすることができます。引数をステートメントまたは宣言にすることはできません。</target>
        </trans-unit>
        <trans-unit id="ffd13d4440c5733a6fe8f0131e774995e4323d49" translate="yes" xml:space="preserve">
          <source>Returns a chunk of memory of size &lt;code&gt;n&lt;/code&gt; It finds the first node in the &lt;code&gt;AlignedBlockNode&lt;/code&gt; list which has available memory, and moves it to the front of the list.</source>
          <target state="translated">サイズ &lt;code&gt;n&lt;/code&gt; のメモリのチャンクを返します &lt;code&gt;AlignedBlockNode&lt;/code&gt; リスト内で使用可能なメモリがある最初のノードを見つけ、それをリストの先頭に移動します。</target>
        </trans-unit>
        <trans-unit id="ca5f3b79353818150cbba86f5b049bf05770db58" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="2fe881c498a908bed43ec9dadc634df537aa888f" translate="yes" xml:space="preserve">
          <source>Returns a copy of the front of the heap, which is the largest element according to &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">ヒープの最前面のコピーを返します。これは、 &lt;code&gt;less&lt;/code&gt; によると最大の要素です。</target>
        </trans-unit>
        <trans-unit id="6286d1351fccddad37f0656a2a2cd1cc7539ba85" translate="yes" xml:space="preserve">
          <source>Returns a copy of the input in a newly allocated dynamic array.</source>
          <target state="translated">新しく割り当てられた動的配列内の入力のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="60d8d877d89b38bd95e1988b71e936bdc4210ca0" translate="yes" xml:space="preserve">
          <source>Returns a copy of the underlying value.</source>
          <target state="translated">基底値のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="3a7d4c032948f3c6a5acf16d0e41938ff551815c" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point which is the given duration later.</source>
          <target state="translated">指定された時間の次の時点を後から返すデリゲートを返します。</target>
        </trans-unit>
        <trans-unit id="bbe4a37c066b825fa1932453b9b1f48a3c29ebb9" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point which is the given number of years, month, and duration later.</source>
          <target state="translated">指定された年数、月、期間の次の時点を返すデリゲートを返します。</target>
        </trans-unit>
        <trans-unit id="c953b23de84d9eb4ce510c7dbce5e764946b8318" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point with the given &lt;code&gt;DayOfWeek&lt;/code&gt; in a range.</source>
          <target state="translated">範囲内の指定された &lt;code&gt;DayOfWeek&lt;/code&gt; の次の時点を返すデリゲートを返します。</target>
        </trans-unit>
        <trans-unit id="35590143903b1dbbbd2749e2bbedfd5bb37ef887" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point with the given month which would be reached by adding months to the given time point.</source>
          <target state="translated">与えられた時点に月を足すことで到達するであろう、与えられた月の次の時点を返すデリゲートを返します。</target>
        </trans-unit>
        <trans-unit id="aef8aee5d89e4d89effa37afed2b636d43a3cb23" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of the container.</source>
          <target state="translated">コンテナの複製を返します。</target>
        </trans-unit>
        <trans-unit id="2284455b20a74066c9b69f2df1803a0a15701997" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of the heap. The &lt;code&gt;dup&lt;/code&gt; method is available only if the underlying store supports it.</source>
          <target state="translated">ヒープの複製を返します。 &lt;code&gt;dup&lt;/code&gt; 方法は、基礎となるストアがそれをサポートしている場合にのみ使用可能です。</target>
        </trans-unit>
        <trans-unit id="6516a2d44fbc6e2b5df03f5721ee57c58059e4d8" translate="yes" xml:space="preserve">
          <source>Returns a dynamic array, the elements of which are the keys in the associative array.</source>
          <target state="translated">その要素が連想配列のキーとなります。</target>
        </trans-unit>
        <trans-unit id="b196a2fb8c2fc705d4c1259ee071e1f46e4c626a" translate="yes" xml:space="preserve">
          <source>Returns a dynamic array, the elements of which are the values in the associative array.</source>
          <target state="translated">ダイナミックな配列を返します。</target>
        </trans-unit>
        <trans-unit id="11bef7ff752edd080a72e6a67e1c0c034d43ed83" translate="yes" xml:space="preserve">
          <source>Returns a dynamically-typed &lt;code&gt;CAllocator&lt;/code&gt; built around a given statically- typed allocator &lt;code&gt;a&lt;/code&gt; of type &lt;code&gt;A&lt;/code&gt;. Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows.</source>
          <target state="translated">タイプ &lt;code&gt;A&lt;/code&gt; の静的に型指定されたアロケーター &lt;code&gt;a&lt;/code&gt; を中心に構築された、動的に型指定された &lt;code&gt;CAllocator&lt;/code&gt; を返します。アロケータにポインタを渡すと、コピーまたは移動することなく、ポインタが指すアロケータの周囲に動的アロケータが作成されます。アロケータを値または参照で渡すと、次のように動作します。</target>
        </trans-unit>
        <trans-unit id="cc9a6befd23b881d297f7e49adb40f16660fb0b3" translate="yes" xml:space="preserve">
          <source>Returns a dynamically-typed &lt;code&gt;CSharedAllocator&lt;/code&gt; built around a given statically- typed allocator &lt;code&gt;a&lt;/code&gt; of type &lt;code&gt;A&lt;/code&gt;. Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows.</source>
          <target state="translated">タイプ &lt;code&gt;A&lt;/code&gt; の静的に型指定されたアロケーター &lt;code&gt;a&lt;/code&gt; を中心に構築された、動的に型指定された &lt;code&gt;CSharedAllocator&lt;/code&gt; を返します。アロケータにポインタを渡すと、コピーまたは移動することなく、ポインタが指すアロケータの周囲に動的アロケータが作成されます。アロケータを値または参照で渡すと、次のように動作します。</target>
        </trans-unit>
        <trans-unit id="61a5d295f782705eb1946d051714c5c361203f4e" translate="yes" xml:space="preserve">
          <source>Returns a foreachable struct which can bidirectionally iterate over all code points in a string.</source>
          <target state="translated">文字列内のすべてのコードポイントを双方向に反復処理できる foreachable 構造体を返します。</target>
        </trans-unit>
        <trans-unit id="7fa0f26c7b91c94b3e5dbd456e87a043fa5e41de" translate="yes" xml:space="preserve">
          <source>Returns a foreachable struct which can bidirectionally iterate over all code units in a code point.</source>
          <target state="translated">コードポイント内のすべてのコード単位を双方向に反復処理できるforeachable構造体を返します。</target>
        </trans-unit>
        <trans-unit id="b76c0e62da6014dae96a44335ca5d6aeb5506838" translate="yes" xml:space="preserve">
          <source>Returns a forward range over the key value pairs of the associative array.</source>
          <target state="translated">連想配列のキー値のペアの前方範囲を返します。</target>
        </trans-unit>
        <trans-unit id="7b5dba5e7f3a556437ea8f8c8d90dbd433af0a1f" translate="yes" xml:space="preserve">
          <source>Returns a forward range over the keys of the associative array.</source>
          <target state="translated">連想配列のキーの前方の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="84185358b377de7a023911467b7342401fc77869" translate="yes" xml:space="preserve">
          <source>Returns a forward range over the values of the associative array.</source>
          <target state="translated">連想配列の値の前方の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="3fffeecef265b33c3680f96e5357d15268e0b6f0" translate="yes" xml:space="preserve">
          <source>Returns a forward range suitable for use as a</source>
          <target state="translated">として使用するのに適したフォワード範囲を返します。</target>
        </trans-unit>
        <trans-unit id="9cb54cf24074402c237bfc551792b63c2a094850" translate="yes" xml:space="preserve">
          <source>Returns a full &lt;a href=&quot;#Canonical%20decomposition&quot;&gt;Canonical&lt;/a&gt; (by default) or &lt;a href=&quot;#Compatibility%20decomposition&quot;&gt;Compatibility&lt;/a&gt; decomposition of &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;&lt;code&gt;ch&lt;/code&gt;. If no decomposition is available returns a &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;ch&lt;/code&gt; itself.</source>
          <target state="translated">&lt;a href=&quot;#Character&quot;&gt;文字&lt;/a&gt; &lt;code&gt;ch&lt;/code&gt; の完全な&lt;a href=&quot;#Canonical%20decomposition&quot;&gt;正規&lt;/a&gt;（デフォルト）または&lt;a href=&quot;#Compatibility%20decomposition&quot;&gt;互換性&lt;/a&gt;分解を返します。分解できない場合は、 &lt;code&gt;ch&lt;/code&gt; 自体を含む&lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="ce840e5c8fdaeae1dd38ef04182625583e131205" translate="yes" xml:space="preserve">
          <source>Returns a lazily initialized global instantiation of &lt;code&gt;TaskPool&lt;/code&gt;. This function can safely be called concurrently from multiple non-worker threads. The worker threads in this pool are daemon threads, meaning that it is not necessary to call &lt;code&gt;TaskPool.stop&lt;/code&gt; or &lt;code&gt;TaskPool.finish&lt;/code&gt; before terminating the main thread.</source>
          <target state="translated">&lt;code&gt;TaskPool&lt;/code&gt; の遅延初期化されたグローバルインスタンスを返します。この関数は、複数の非ワーカースレッドから同時に安全に呼び出すことができます。このプールのワーカースレッドはデーモンスレッドです。つまり、メインスレッドを終了する前に &lt;code&gt;TaskPool.stop&lt;/code&gt; または &lt;code&gt;TaskPool.finish&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="d07334167a74510fcb87a0bbe4b54cb005c1171d" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of the time zones installed on the system.</source>
          <target state="translated">システムにインストールされているタイムゾーンの名前のリストを返します。</target>
        </trans-unit>
        <trans-unit id="3fb9a85a3bd5fb10fa0810307dc66461f5fc1035" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of the time zones installed on the system. The list returned by WindowsTimeZone contains the Windows TZ names, not the TZ Database names. However, &lt;code&gt;TimeZone.getinstalledTZNames&lt;/code&gt; will return the TZ Database names which are equivalent to the Windows TZ names.</source>
          <target state="translated">システムにインストールされているタイムゾーンの名前のリストを返します。WindowsTimeZoneによって返されるリストには、TZデータベース名ではなく、Windows TZ名が含まれています。ただし、 &lt;code&gt;TimeZone.getinstalledTZNames&lt;/code&gt; は、Windows TZ名と同等のTZデータベース名を返します。</target>
        </trans-unit>
        <trans-unit id="7990a271946971aeb81924fa28441f7c1a9d6465" translate="yes" xml:space="preserve">
          <source>Returns a malloc()'ed string that MUST be curl_free()ed after usage is complete. DEPRECATED - see lib/README.curlx</source>
          <target state="translated">使用が完了した後に curl_free()でなければならない malloc()'ed 文字列を返します。非推奨-libREADME.curlx を参照してください。</target>
        </trans-unit>
        <trans-unit id="3e1fa45142e060d0d318087ea05ea86bb02a6066" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;a href=&quot;#Appender&quot;&gt;&lt;code&gt;Appender&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#RefAppender&quot;&gt;&lt;code&gt;RefAppender&lt;/code&gt;&lt;/a&gt; initialized with a given array.</source>
          <target state="translated">指定された配列で初期化された新しい&lt;a href=&quot;#Appender&quot;&gt; &lt;code&gt;Appender&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#RefAppender&quot;&gt; &lt;code&gt;RefAppender&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="e52e719b9f80569172479c3836f702a9fcb768c9" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;DList&lt;/code&gt; that's the concatenation of &lt;code&gt;this&lt;/code&gt; and its argument &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; とその引数 &lt;code&gt;rhs&lt;/code&gt; を連結した新しい &lt;code&gt;DList&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="229384c3a62e6e998762e855ba510b0f93fb0231" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;DList&lt;/code&gt; that's the concatenation of the argument &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;this&lt;/code&gt; を連結した新しい &lt;code&gt;DList&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fcd633998e8e6235f98b482e529ca8ae6f2d5f66" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;SList&lt;/code&gt; that's the concatenation of &lt;code&gt;this&lt;/code&gt; and its argument. &lt;code&gt;opBinaryRight&lt;/code&gt; is only defined if &lt;code&gt;Stuff&lt;/code&gt; does not define &lt;code&gt;opBinary&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; とその引数を連結した新しい &lt;code&gt;SList&lt;/code&gt; を返します。 &lt;code&gt;opBinaryRight&lt;/code&gt; は、 &lt;code&gt;Stuff&lt;/code&gt; が &lt;code&gt;opBinary&lt;/code&gt; を定義しない場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="53d930f3d86b0f613238f01d6141ea696149dd69" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt; allocated on the garbage collected heap without initializing its elements. This can be a useful optimization if every element will be immediately initialized. &lt;code&gt;T&lt;/code&gt; may be a multidimensional array. In this case sizes may be specified for any number of dimensions from 0 to the number in &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">要素を初期化せずに、ガベージコレクションされたヒープに割り当てられたタイプ &lt;code&gt;T&lt;/code&gt; の新しい配列を返します。これは、すべての要素がすぐに初期化される場合に便利な最適化になります。 &lt;code&gt;T&lt;/code&gt; は多次元配列にすることができます。この場合、サイズは0から &lt;code&gt;T&lt;/code&gt; の数までの任意の数の次元に対して指定できます。</target>
        </trans-unit>
        <trans-unit id="b9a0023d51da997f35311b6d254c0383fc9e1dc6" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt; allocated on the garbage collected heap.</source>
          <target state="translated">ガベージコレクションされたヒープに割り当てられたタイプ &lt;code&gt;T&lt;/code&gt; の新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="abf7392fba549c659e501fb5a0955fa6c151e1c3" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt; without initializing its elements.</source>
          <target state="translated">要素を初期化せずに &lt;code&gt;T&lt;/code&gt; 型の新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="ec8b7d3a89d7573b011ce662e56a466678333f35" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 型の新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="fb460665d1aa8cdb9eb35459df7f67c5dae4e9fd" translate="yes" xml:space="preserve">
          <source>Returns a new array with a given slice replaced.</source>
          <target state="translated">指定したスライスを置換した新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="f398156d6d51631038e97ecfa3f6419a052d13bb" translate="yes" xml:space="preserve">
          <source>Returns a new array with all occurrences of a certain subrange replaced.</source>
          <target state="translated">特定のサブレンジのすべての出現箇所を置換した新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="32eea38fcf0e52b318aafbc12837466730e446ea" translate="yes" xml:space="preserve">
          <source>Returns a new array with the first occurrence of a certain subrange replaced.</source>
          <target state="translated">特定のサブレンジの最初の出現を置換した新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="9f0b4b62fab60c86a583814c0b0cddc8d07616c9" translate="yes" xml:space="preserve">
          <source>Returns a new array with the last occurrence of a certain subrange replaced.</source>
          <target state="translated">特定のサブレンジの最後の出現を置換した新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="c3459f8069902eb0604e4fe85b03e28ea6da536c" translate="yes" xml:space="preserve">
          <source>Returns a newly allocated associative array from a range of key/value tuples or from a range of keys and a range of values.</source>
          <target state="translated">新しく割り当てられた連想配列を、 key-value タプルの範囲、あるいは key と value の範囲から返します。</target>
        </trans-unit>
        <trans-unit id="ff59becca2ed801e30637f44c1bffce2ee1a27f6" translate="yes" xml:space="preserve">
          <source>Returns a newly allocated associative array from a range of key/value tuples.</source>
          <target state="translated">キー値の範囲のタプルから、新たに割り当てられた連想配列を返します。</target>
        </trans-unit>
        <trans-unit id="b90c85529c4d19d03fce05ef3fb359ef230d8513" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first element of the array.</source>
          <target state="translated">配列の最初の要素へのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="f98a854ad963487f4f4ca41ba1b7b32cdd1b8cbf" translate="yes" xml:space="preserve">
          <source>Returns a random, uniformly chosen, element &lt;code&gt;e&lt;/code&gt; from the supplied &lt;code&gt;Range range&lt;/code&gt;. If no random number generator is passed, the default &lt;code&gt;rndGen&lt;/code&gt; is used.</source>
          <target state="translated">指定された &lt;code&gt;Range range&lt;/code&gt; からランダムに均一に選択された要素 &lt;code&gt;e&lt;/code&gt; を返します。乱数ジェネレータが渡されない場合、デフォルトの &lt;code&gt;rndGen&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="bf8faeebafd2d68821de1399878ebab570453980" translate="yes" xml:space="preserve">
          <source>Returns a range iterating over the entire container, in a container-defined order.</source>
          <target state="translated">コンテナ定義の順序で、コンテナ全体を反復して返す範囲を返します。</target>
        </trans-unit>
        <trans-unit id="c77aca72cb7dd37b81c1c03fc57dea6c00d19c65" translate="yes" xml:space="preserve">
          <source>Returns a range of all elements in &lt;code&gt;c&lt;/code&gt; that are equal to &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; に等しい &lt;code&gt;c&lt;/code&gt; のすべての要素の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="7b408d250a95e25681c58f0fc9865b83e81a9a32" translate="yes" xml:space="preserve">
          <source>Returns a range of all elements strictly greater than &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">厳密に &lt;code&gt;v&lt;/code&gt; より大きいすべての要素の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="b8b0b648f4bf17a28c57ddf30b04786a54a23191" translate="yes" xml:space="preserve">
          <source>Returns a range of all elements strictly less than &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">厳密に &lt;code&gt;v&lt;/code&gt; 未満のすべての要素の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="78abb6e57a58770219e4d3f846f04d97912f8a9b" translate="yes" xml:space="preserve">
          <source>Returns a range of subranges of elements that are equivalent according to the sorting relation.</source>
          <target state="translated">ソート関係に応じて等価な要素のサブレンジの範囲を返します。</target>
        </trans-unit>
        <trans-unit id="6c2a75d33659bb11b9aeec9563041ac1635f2987" translate="yes" xml:space="preserve">
          <source>Returns a range that iterates over all elements of the container, in forward order.</source>
          <target state="translated">コンテナのすべての要素を順に反復処理する範囲を返します。</target>
        </trans-unit>
        <trans-unit id="4effc5e0a10068b4c02001d5d1ad7c0cc2ba897f" translate="yes" xml:space="preserve">
          <source>Returns a range view of the values for all threads, which can be used to further process the results of each thread after running the parallel part of your algorithm. Do not use this method in the parallel portion of your algorithm.</source>
          <target state="translated">これは、アルゴリズムの並列部分を実行した後に各スレッドの結果をさらに処理するために使用することができます。アルゴリズムの並列部分ではこのメソッドを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c965d435a8b64438b242d03d8b509ef207bed8c4" translate="yes" xml:space="preserve">
          <source>Returns a range which iterates backwards over the interval, starting at &lt;code&gt;end&lt;/code&gt;, using func to generate each successive time point.</source>
          <target state="translated">funcを使用して連続する各時点を生成し、 &lt;code&gt;end&lt;/code&gt; から開始して、間隔を逆方向に反復する範囲を返します。</target>
        </trans-unit>
        <trans-unit id="eefca2b162eae18d961fd1f9e644b6e3aef6c85c" translate="yes" xml:space="preserve">
          <source>Returns a range which iterates forward over the interval, starting at &lt;code&gt;begin&lt;/code&gt;, using func to generate each successive time point.</source>
          <target state="translated">funcを使用して連続する各時点を生成し、 &lt;code&gt;begin&lt;/code&gt; から開始して、間隔を越えて順方向に反復する範囲を返します。</target>
        </trans-unit>
        <trans-unit id="ec14721454b609e82da95155553e35ebce3fc48a" translate="yes" xml:space="preserve">
          <source>Returns a range with all occurrences of &lt;code&gt;substs&lt;/code&gt; in &lt;code&gt;r&lt;/code&gt;. replaced with their substitution.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 内のすべての &lt;code&gt;substs&lt;/code&gt; 範囲を返します。それらの置換に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="336708258920b687458732523280df42e0072783" translate="yes" xml:space="preserve">
          <source>Returns a range with at most one element; for example, &lt;code&gt;takeOne([42, 43, 44])&lt;/code&gt; returns a range consisting of the integer &lt;code&gt;42&lt;/code&gt;. Calling &lt;code&gt;popFront()&lt;/code&gt; off that range renders it empty.</source>
          <target state="translated">最大で1つの要素を含む範囲を返します。たとえば、 &lt;code&gt;takeOne([42, 43, 44])&lt;/code&gt; は、整数 &lt;code&gt;42&lt;/code&gt; で構成される範囲を返します。その範囲外で &lt;code&gt;popFront()&lt;/code&gt; を呼び出すと、空になります。</target>
        </trans-unit>
        <trans-unit id="c4e2977b61b18f0458c1a4e9748ec5cc5c064c39" translate="yes" xml:space="preserve">
          <source>Returns a reference to the payload. If (autoInit == RefCountedAutoInitialize.yes), calls &lt;code&gt; refCountedStore.ensureInitialized&lt;/code&gt;. Otherwise, just issues &lt;code&gt; assert(refCountedStore.isInitialized)&lt;/code&gt;. Used with &lt;code&gt;alias refCountedPayload this;&lt;/code&gt;, so callers can just use the &lt;code&gt;RefCounted&lt;/code&gt; object as a &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">ペイロードへの参照を返します。（autoInit == RefCountedAutoInitialize.yes）の場合、refCountedStore.ensureInitializedを呼び出し &lt;code&gt; refCountedStore.ensureInitialized&lt;/code&gt; 。それ以外の場合は、 &lt;code&gt; assert(refCountedStore.isInitialized)&lt;/code&gt; を発行するだけです。 &lt;code&gt;alias refCountedPayload this;&lt;/code&gt; をエイリアスrefCountedPayloadとともに使用します。なので、呼び出し元は &lt;code&gt;RefCounted&lt;/code&gt; オブジェクトを &lt;code&gt;T&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="9045b10d14b481e711cada67087362b1682054da" translate="yes" xml:space="preserve">
          <source>Returns a slice of the range. Defined only if all range define slicing.</source>
          <target state="translated">範囲のスライスを返します。すべての範囲がスライスを定義している場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="f64251d3015e05479b9426febfe95d2f0401ef9d" translate="yes" xml:space="preserve">
          <source>Returns a static ascii string of the libcurl version.</source>
          <target state="translated">libcurl のバージョンの静的な ascii 文字列を返します。</target>
        </trans-unit>
        <trans-unit id="beccf3ad45d4948b358959975f27759c4561af07" translate="yes" xml:space="preserve">
          <source>Returns a string of all available CLI options for the current targetOS. Options are separated by newlines.</source>
          <target state="translated">現在のtargetOSで利用可能なすべてのCLIオプションの文字列を返します。オプションは改行で区切られています。</target>
        </trans-unit>
        <trans-unit id="3158e51069f70338fe6f0f3c3a6731a2ead51cfd" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this CData section</source>
          <target state="translated">この CData セクションの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="97f28b169cc066e4b567fd10b57b028837bab1c0" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this ProcessingInstruction</source>
          <target state="translated">この ProcessingInstruction の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="c0855bdf6807250230f6b7b764ed38b8f25f5814" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this Text section</source>
          <target state="translated">このテキストセクションの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="7dc7a2b9391879e36c5974df49f174a86ccc960d" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this XmlInstruction</source>
          <target state="translated">この XmlInstruction の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="855a592ad52a573b2270f2cd4e9eb6e24d8b6d14" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this comment</source>
          <target state="translated">このコメントの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="3c9e30fc57574cb8186eb91b3136b92cd5023cc1" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this item</source>
          <target state="translated">この項目の文字列表現を返します</target>
        </trans-unit>
        <trans-unit id="90bd32093189453221779ee2ccd338845cc232a4" translate="yes" xml:space="preserve">
          <source>Returns a temporary file by calling &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/tmpfile.html&quot;&gt;tmpfile&lt;/a&gt;. Note that the created file has no &lt;a href=&quot;#name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/tmpfile.html&quot;&gt;tmpfile&lt;/a&gt;を呼び出して一時ファイルを返します。作成されたファイルには&lt;a href=&quot;#name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8c8af7d3856b0bbd9bc3cc92813854b9973b7c1" translate="yes" xml:space="preserve">
          <source>Returns a tuple &lt;code&gt;r&lt;/code&gt; such that &lt;code&gt;r[0]&lt;/code&gt; is the same as the result of &lt;code&gt;lowerBound(value)&lt;/code&gt;, &lt;code&gt;r[1]&lt;/code&gt; is the same as the result of &lt;code&gt;equalRange(value)&lt;/code&gt;, and &lt;code&gt;r[2]&lt;/code&gt; is the same as the result of &lt;code&gt;upperBound(value)&lt;/code&gt;. The call is faster than computing all three separately. Uses a search schedule similar to &lt;code&gt;equalRange&lt;/code&gt;. Completes the entire search in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time.</source>
          <target state="translated">&lt;code&gt;r[0]&lt;/code&gt; が &lt;code&gt;lowerBound(value)&lt;/code&gt; の結果と同じであり、 &lt;code&gt;r[1]&lt;/code&gt; が &lt;code&gt;equalRange(value)&lt;/code&gt; の結果と同じであり、 &lt;code&gt;r[2]&lt;/code&gt; がの結果と同じであるようなタプル &lt;code&gt;r&lt;/code&gt; を返します &lt;code&gt;upperBound(value)&lt;/code&gt; 。この呼び出しは、3つすべてを個別に計算するよりも高速です。 &lt;code&gt;equalRange&lt;/code&gt; と同様の検索スケジュールを使用します。検索全体を&amp;Omicron;（ &lt;code&gt;log(n)&lt;/code&gt; ）時間で完了します。</target>
        </trans-unit>
        <trans-unit id="790d773d570c5e954a4674836170e4f431d2f7c1" translate="yes" xml:space="preserve">
          <source>Returns a tuple of non-static functions with the name &lt;code&gt;name&lt;/code&gt; declared in the class or interface &lt;code&gt;C&lt;/code&gt;. Covariant duplicates are shrunk into the most derived one.</source>
          <target state="translated">クラスまたはインターフェース &lt;code&gt;C&lt;/code&gt; で宣言された名前 &lt;code&gt;name&lt;/code&gt; の非静的関数のタプルを返します。共変の重複は、最も派生したものに縮小されます。</target>
        </trans-unit>
        <trans-unit id="72aa67a13c982eedb6f77841d173bc55ab7adbc6" translate="yes" xml:space="preserve">
          <source>Returns actual size of underlying &lt;code&gt;sockaddr&lt;/code&gt; structure.</source>
          <target state="translated">基本となる &lt;code&gt;sockaddr&lt;/code&gt; 構造の実際のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="3d4e6f0dcafeee9acfc42b3956c272aaeda9e313" translate="yes" xml:space="preserve">
          <source>Returns aggregate information about the memory block containing p. If p references memory not originally allocated by this garbage collector, if p is null, or if the garbage collector does not support this operation, BlkInfo.init will be returned. Typically, support for this operation is dependent on support for addrOf.</source>
          <target state="translated">p がこのガベージコレクタによってもともと割り当てられていないメモリを参照している場合、 p が NULL の場合、またはガベージコレクタがこの操作をサポートしていない場合、BlkInfo.init が返されます。通常、この操作のサポートは addrOf のサポートに依存します。</target>
        </trans-unit>
        <trans-unit id="547f2030a516f33d20565081851ea6d38f393ab1" translate="yes" xml:space="preserve">
          <source>Returns all available CLI options</source>
          <target state="translated">利用可能なすべてのCLIオプションを返します</target>
        </trans-unit>
        <trans-unit id="e3e291fc50b149bf34d2e99f3491379752d7871b" translate="yes" xml:space="preserve">
          <source>Returns all available previews</source>
          <target state="translated">利用可能なすべてのプレビューを返します。</target>
        </trans-unit>
        <trans-unit id="49cd6455b1d4a20296abe2aa926ff0fde3d659c1" translate="yes" xml:space="preserve">
          <source>Returns all available reverts</source>
          <target state="translated">利用可能なすべてのリバースを返します。</target>
        </trans-unit>
        <trans-unit id="f9ae2fbd398addbe739b6c44bfa43ba201627972" translate="yes" xml:space="preserve">
          <source>Returns all available transitions</source>
          <target state="translated">利用可能なすべての遷移を返します。</target>
        </trans-unit>
        <trans-unit id="de8280489e19586a87adf21d1db50e77b285274b" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; for iterating over records found in &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;の入力範囲を&lt;/a&gt;で見つかったレコードを反復処理するために &lt;code&gt;input&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="948ee06c9c866197d5eb7dfe97ceda73ffae4bb4" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of &lt;code&gt;DirEntry&lt;/code&gt; that lazily iterates a given directory, also provides two ways of foreach iteration. The iteration variable can be of type &lt;code&gt;string&lt;/code&gt; if only the name is needed, or &lt;code&gt;DirEntry&lt;/code&gt; if additional details are needed. The span mode dictates how the directory is traversed. The name of each iterated directory entry contains the absolute or relative path (depending on pathname).</source>
          <target state="translated">指定された &lt;code&gt;DirEntry&lt;/code&gt; を遅延反復するDirEntryの&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲&lt;/a&gt;を返します。また、foreach反復の2つの方法を提供します。反復変数は、名前のみが必要な場合は &lt;code&gt;string&lt;/code&gt; 型、追加の詳細が必要な場合は &lt;code&gt;DirEntry&lt;/code&gt; にすることができます。スパンモードは、ディレクトリの走査方法を決定します。各反復ディレクトリエントリの名前には、絶対パスまたは相対パスが含まれます（パス名に依存）。</target>
        </trans-unit>
        <trans-unit id="f82c2424c6fff8b7a7a516bb19ee2710d86285bc" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to read from the file handle a chunk at a time.</source>
          <target state="translated">一度にファイルハンドルチャンクを読み取るように設定された&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="e9c75cc67698ecc1945008a92df85a5774f6335f" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to read from the file handle one line at a time.</source>
          <target state="translated">ファイルハンドルから一度に1行ずつ読み取るように設定された&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="637bd45f69dbff13a464ee7d0b167448d7fd0753" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to read from the file handle one line at a time. Each line will be newly allocated. &lt;code&gt;front&lt;/code&gt; will cache its value to allow repeated calls without unnecessary allocations.</source>
          <target state="translated">ファイルハンドルから一度に1行ずつ読み取るように設定された&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;入力範囲を&lt;/a&gt;返します。各行は新しく割り当てられます。 &lt;code&gt;front&lt;/code&gt; はその値をキャッシュして、不必要な割り当てをせずに繰り返し呼び出しできるようにします。</target>
        </trans-unit>
        <trans-unit id="a9ba3b84333b451cddeb0f31f90a974eae02222d" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with all occurrences of type T, if found, replaced with type U.</source>
          <target state="translated">TListから作成された &lt;code&gt;AliasSeq&lt;/code&gt; を返します。T型が見つかった場合は、すべてU型に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="95ffa9932c89a1a2c78114fd151186b2a3fa7044" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the all duplicate types removed.</source>
          <target state="translated">TListから作成された、すべての重複するタイプが削除された &lt;code&gt;AliasSeq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0ec9178bff2b45f05e74fcd30f72b2cd23ed61b5" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the all occurrences, if any, of T removed.</source>
          <target state="translated">TListから作成された &lt;code&gt;AliasSeq&lt;/code&gt; を返します。Tのすべてのオカレンスがある場合は、それを削除します。</target>
        </trans-unit>
        <trans-unit id="8c3320bad74eb24381bb4132ab3e05ebdeb849d9" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the first occurrence of type T, if found, replaced with type U.</source>
          <target state="translated">T型が最初に出現した場合、T型からU型に置き換えられたTListから作成された &lt;code&gt;AliasSeq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="87b0bceb710648d9eaefe66e839ee1fa911e3037" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the first occurrence, if any, of T removed.</source>
          <target state="translated">TListから作成された &lt;code&gt;AliasSeq&lt;/code&gt; を返します。Tの最初の出現がある場合は、それを削除します。</target>
        </trans-unit>
        <trans-unit id="81769798ab1d8e4547d87293fde0e9f953d5950b" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the order reversed.</source>
          <target state="translated">順序を逆にしてTListから作成された &lt;code&gt;AliasSeq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d223fedb93decc9e25baa0f1772f6e2a622b8c8e" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; expression of &lt;code&gt;Func&lt;/code&gt; being applied to every variadic template argument.</source>
          <target state="translated">&lt;code&gt;AliasSeq&lt;/code&gt; テンプレート引数に適用されている &lt;code&gt;Func&lt;/code&gt; のAliasSeq式を返します。</target>
        </trans-unit>
        <trans-unit id="02adeee6d7a4139da18cf929102784cddbcce11d" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; with the elements of TList sorted so that the most derived types come first.</source>
          <target state="translated">最も派生した型が最初になるようにTListの要素を並べ替えた &lt;code&gt;AliasSeq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4f261cd72136edc2dc9d06ce0f0820a1f9e43f21" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParent() is that.</source>
          <target state="translated">toParent()がそれである場合のAggregateDeclarationを返します。</target>
        </trans-unit>
        <trans-unit id="c66e70830bf3581ee05b63fa397c6a247650d99c" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParent2() is that.</source>
          <target state="translated">toParent2()がそれである場合のAggregateDeclarationを返します。</target>
        </trans-unit>
        <trans-unit id="b63a2bef70d49ca42f41b2f703578a4b160c47e3" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParentDecl() is that.</source>
          <target state="translated">toParentDecl()がそれである場合のAggregateDeclarationを返します。</target>
        </trans-unit>
        <trans-unit id="a24ebb418526d4ea1c9c523a5550f2f492ebfb54" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParentLocal() is that.</source>
          <target state="translated">toParentLocal()がそれである場合のAggregateDeclarationを返します。</target>
        </trans-unit>
        <trans-unit id="8bd6ee4aba8d8369c0390b34882aa7518acea2d6" translate="yes" xml:space="preserve">
          <source>Returns an alias to the template that &lt;code&gt;T&lt;/code&gt; is an instance of. It will return &lt;code&gt;void&lt;/code&gt; if a symbol without a template is given.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; がインスタンスであるテンプレートのエイリアスを返します。テンプレートのないシンボルが指定された場合は &lt;code&gt;void&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="32eeaebd0b9b4b2e20a6c1415518d77091f44840" translate="yes" xml:space="preserve">
          <source>Returns an appropriate ThreadInfo instance.</source>
          <target state="translated">適切な ThreadInfo インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="bcc12ef4c76afdb516aeb007ed7aa8abad047604" translate="yes" xml:space="preserve">
          <source>Returns an array literal with each element of the literal being the &lt;code&gt;.init&lt;/code&gt; property of the array element type.</source>
          <target state="translated">リテラルの各要素が配列要素型の &lt;code&gt;.init&lt;/code&gt; プロパティである配列リテラルを返します。</target>
        </trans-unit>
        <trans-unit id="d9e5f612e7beec996567db962234883ae6bc99de" translate="yes" xml:space="preserve">
          <source>Returns an array of all known names for this encoding scheme</source>
          <target state="translated">このエンコーディング方式のすべての既知の名前の配列を返します。</target>
        </trans-unit>
        <trans-unit id="d9060005afabd71371b4c96b9e17f7a9dd77986e" translate="yes" xml:space="preserve">
          <source>Returns an array of variants constructed from &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; から構築されたバリアントの配列を返します。</target>
        </trans-unit>
        <trans-unit id="50a5ba547b51f3721f191cd04b59276c858d2120" translate="yes" xml:space="preserve">
          <source>Returns an empty range which is statically known to be empty and is guaranteed to have &lt;code&gt;length&lt;/code&gt; and be random access regardless of &lt;code&gt;R&lt;/code&gt;'s capabilities.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; の機能に関係なく、静的に空であることがわかっており、 &lt;code&gt;length&lt;/code&gt; およびランダムアクセスが保証されている空の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="a2db67fddaa2ff9367099794304809390991b8c9" translate="yes" xml:space="preserve">
          <source>Returns an indented string representation of this item</source>
          <target state="translated">この項目のインデントされた文字列表現を返します</target>
        </trans-unit>
        <trans-unit id="90d2752e4e2d3333f90b26bff116e635c498afb5" translate="yes" xml:space="preserve">
          <source>Returns an indirect type one step from t.</source>
          <target state="translated">tから一歩進んだ間接型を返します。</target>
        </trans-unit>
        <trans-unit id="0032b41f11fc5c384912ed7a8525357ea39f9f6e" translate="yes" xml:space="preserve">
          <source>Returns an initialized object. This function is mainly for eliminating construction differences between structs and classes. It allows code to not worry about whether the type it's constructing is a struct or a class.</source>
          <target state="translated">初期化されたオブジェクトを返します。この関数は主に構造体とクラスの間の構築の違いをなくすためのものです。これにより、コードは構築している型が構造体なのかクラスなのかを気にする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="b1c2d5368d6347f59a26a11ee3d9835dd0af0dc8" translate="yes" xml:space="preserve">
          <source>Returns an instance of ThreadInfo specific to the logical thread that is calling this routine or, if the calling thread was not create by this scheduler, returns ThreadInfo.thisInfo instead.</source>
          <target state="translated">このルーチンを呼び出している論理スレッドに固有の ThreadInfo のインスタンスを返すか、このスケジューラによって呼び出されたスレッドが作成されていない場合は、代わりに ThreadInfo.thisInfo を返します。</target>
        </trans-unit>
        <trans-unit id="0ae0415de0ccef54833a72e85f53f9141a38fdb3" translate="yes" xml:space="preserve">
          <source>Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals.</source>
          <target state="translated">2つの間隔のうち最も古い時点から、2つの間隔のうち最も新しい時点までをカバーする間隔を返します(ただし、これは含まれません)。</target>
        </trans-unit>
        <trans-unit id="e7d37bf7d60fa80601c3b31ae0851a49b472889a" translate="yes" xml:space="preserve">
          <source>Returns an output range that locks the file and allows fast writing to it.</source>
          <target state="translated">ファイルをロックし、ファイルへの高速書き込みを可能にする出力範囲を返します。</target>
        </trans-unit>
        <trans-unit id="a0c5ef877564042ce05279bfaa0058766c89f7af" translate="yes" xml:space="preserve">
          <source>Returns byte at index i in file.</source>
          <target state="translated">ファイル内のインデックス i のバイトを返します。</target>
        </trans-unit>
        <trans-unit id="8077519e3d799a5540868221c3fd94b5e38799f1" translate="yes" xml:space="preserve">
          <source>Returns class instance alignment.</source>
          <target state="translated">クラスインスタンスのアラインメントを返します。</target>
        </trans-unit>
        <trans-unit id="d0d8ee3e2d3218aaa364d114f57797b2d90dd17d" translate="yes" xml:space="preserve">
          <source>Returns cmp OP 0; where OP is ==, !=, &amp;lt;, &amp;gt;=, etc. Result is 0 or 1</source>
          <target state="translated">cmp OP 0を返します。ここで、OPは==、！=、&amp;lt;、&amp;gt; =などです。結果は0または1です。</target>
        </trans-unit>
        <trans-unit id="4b2d520bcd5b7fe413af70438b8b9387edccb14f" translate="yes" xml:space="preserve">
          <source>Returns code for curl_formadd()</source>
          <target state="translated">curl_formadd()のコードを返します。</target>
        </trans-unit>
        <trans-unit id="3271d44e1d89579a34e8e621ef6a5dadbc24c6be" translate="yes" xml:space="preserve">
          <source>Returns cosine of x. x is in radians.</source>
          <target state="translated">xの余弦を返します。</target>
        </trans-unit>
        <trans-unit id="ec7b9a230e216f026f6bbc20d87e29fe18cbb8d4" translate="yes" xml:space="preserve">
          <source>Returns dynamic array, the elements of which are the keys in the associative array.</source>
          <target state="translated">その要素が連想配列のキーとなります。</target>
        </trans-unit>
        <trans-unit id="a321b50df478fd8b75cbeb825d72294b4d8afe42" translate="yes" xml:space="preserve">
          <source>Returns dynamic array, the elements of which are the values in the associative array.</source>
          <target state="translated">ダイナミックな配列を返します。</target>
        </trans-unit>
        <trans-unit id="992f29577d41e3669ad205a1ac555feb12d094bc" translate="yes" xml:space="preserve">
          <source>Returns e1 OP e2; where OP is ==, !=, &amp;lt;, &amp;gt;=, etc. Result is 0 or 1</source>
          <target state="translated">e1 OP e2を返します。ここで、OPは==、！=、&amp;lt;、&amp;gt; =などです。結果は0または1です。</target>
        </trans-unit>
        <trans-unit id="25fc6148e44f0a204beb233c0e998d8935f66a07" translate="yes" xml:space="preserve">
          <source>Returns entire file contents as an array.</source>
          <target state="translated">ファイル全体の内容を配列で返します。</target>
        </trans-unit>
        <trans-unit id="2302eb686d55db1684e3931086ac4fa5129c134d" translate="yes" xml:space="preserve">
          <source>Returns exact mangled name of function.</source>
          <target state="translated">正確にマングルされた関数名を返します。</target>
        </trans-unit>
        <trans-unit id="740a3ce35c35ab6f2d1182323a12c3dce61abfd8" translate="yes" xml:space="preserve">
          <source>Returns false always</source>
          <target state="translated">常に false を返します。</target>
        </trans-unit>
        <trans-unit id="ff2f90368a361d1c8bc3d23da1c1ddaf975121dc" translate="yes" xml:space="preserve">
          <source>Returns hnsecs in the local time zone using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to the appropriate time zone from std time.</source>
          <target state="translated">Posixシステムでは標準的なC関数の呼び出し、Windowsシステムでは標準的なWindowsシステムの呼び出しを使用して、標準時間から適切なタイムゾーンに調整するために、ローカルタイムゾーンのhnsecsを返します。</target>
        </trans-unit>
        <trans-unit id="324edb56de4911b04cacfe0a8f3e5388ba66e6ed" translate="yes" xml:space="preserve">
          <source>Returns incomplete beta integral of the arguments, evaluated from zero to x. The regularized incomplete beta function is defined as</source>
          <target state="translated">0からxまで評価された引数の不完全ベータ積分を返します。</target>
        </trans-unit>
        <trans-unit id="2a90c38cdc48542d6a62371935faec39ef5c38bb" translate="yes" xml:space="preserve">
          <source>Returns midnight.</source>
          <target state="translated">深夜に戻ります。</target>
        </trans-unit>
        <trans-unit id="97f87cbe8cd887a66a7de26e9826323b7e508d02" translate="yes" xml:space="preserve">
          <source>Returns nonzero if e is found in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; で eが見つかった場合はゼロ以外を返します。</target>
        </trans-unit>
        <trans-unit id="e49c58203f85f22a358092aadf3e729bbc5db241" translate="yes" xml:space="preserve">
          <source>Returns number of cores in CPU</source>
          <target state="translated">CPUのコア数を返します。</target>
        </trans-unit>
        <trans-unit id="32ab6c0900cf2cafed0d6cd4b43b8557f44a75d7" translate="yes" xml:space="preserve">
          <source>Returns number of threads per CPU</source>
          <target state="translated">CPUあたりのスレッド数を返します。</target>
        </trans-unit>
        <trans-unit id="bab2cb38d1f647405ab83bfb5ea8dfd3e2ed714a" translate="yes" xml:space="preserve">
          <source>Returns number of values in the associative array. Unlike for dynamic arrays, it is read-only.</source>
          <target state="translated">連想配列の値の数を返します。動的配列とは異なり、読み込み専用です。</target>
        </trans-unit>
        <trans-unit id="21d708c58ed912c7bc21c2298cf5655f917be8b9" translate="yes" xml:space="preserve">
          <source>Returns one of a collection of expressions based on the value of the switch expression.</source>
          <target state="translated">スイッチ式の値に基づいて、式のコレクションのいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="deca66d33e8a1dd7d736a253db97e7667b9e6b34" translate="yes" xml:space="preserve">
          <source>Returns one second short of midnight.</source>
          <target state="translated">真夜中の1秒足らずの時間を返します。</target>
        </trans-unit>
        <trans-unit id="e5f064227947f38ad15a46c5756f86fcec988d4d" translate="yes" xml:space="preserve">
          <source>Returns pointer to underlying &lt;code&gt;sockaddr&lt;/code&gt; structure.</source>
          <target state="translated">基本となる &lt;code&gt;sockaddr&lt;/code&gt; 構造へのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="9306efcd51f99fec396c2c46d81607172571eed7" translate="yes" xml:space="preserve">
          <source>Returns processor string, for display purposes only</source>
          <target state="translated">表示のみを目的としたプロセッサ文字列を返します。</target>
        </trans-unit>
        <trans-unit id="cc0b14fb53d2f5a5602879c4de2b3a707c7529ef" translate="yes" xml:space="preserve">
          <source>Returns runtime profile stats for currently active GC implementation See &lt;code&gt;core.memory.GC.ProfileStats&lt;/code&gt; for list of available metrics.</source>
          <target state="translated">現在アクティブなGC実装の​​実行時プロファイル統計を返します。使用可能なメトリックのリストについては、 &lt;code&gt;core.memory.GC.ProfileStats&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d3e62d6037c0e63f8a83fb2003a74125453d61ef" translate="yes" xml:space="preserve">
          <source>Returns runtime stats for currently active GC implementation See &lt;code&gt;core.memory.GC.Stats&lt;/code&gt; for list of available metrics.</source>
          <target state="translated">現在アクティブなGC実装の​​ランタイム統計を返します。使用可能なメトリックのリストについては、 &lt;code&gt;core.memory.GC.Stats&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="80a001519cbf8d51d6bfe95b96c1bf1bc2a2240e" translate="yes" xml:space="preserve">
          <source>Returns sine of x. x is in radians.</source>
          <target state="translated">xのサインを返します。</target>
        </trans-unit>
        <trans-unit id="661c398de9351ae7788c64f5c998cd25ac7e5e45" translate="yes" xml:space="preserve">
          <source>Returns size of the type.</source>
          <target state="translated">型のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="f88530269c33a2ecb15b4c398506263adb7194e7" translate="yes" xml:space="preserve">
          <source>Returns slice of file contents as an array.</source>
          <target state="translated">ファイルの内容のスライスを配列で返します。</target>
        </trans-unit>
        <trans-unit id="bbe508fc76d05bfe400089b46c25ef1854e4f576" translate="yes" xml:space="preserve">
          <source>Returns static array representation</source>
          <target state="translated">静的な配列表現を返します。</target>
        </trans-unit>
        <trans-unit id="6a04d3cce76b0b9fa6130ec7125341d85c2586b8" translate="yes" xml:space="preserve">
          <source>Returns std time using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to UTC from the appropriate time zone.</source>
          <target state="translated">Posixシステムでは標準C関数の呼び出しを、Windowsシステムでは標準Windowsシステムの呼び出しを使用して、適切なタイムゾーンからUTCに時間を調整するための標準時間を返します。</target>
        </trans-unit>
        <trans-unit id="049ab194623f5b5d997c099672563eb20601b1e9" translate="yes" xml:space="preserve">
          <source>Returns storage implementation struct.</source>
          <target state="translated">ストレージの実装構造体を返します。</target>
        </trans-unit>
        <trans-unit id="4d11cb1f5285eace9f0da6f72821436f23103eff" translate="yes" xml:space="preserve">
          <source>Returns tangent of x. x is in radians.</source>
          <target state="translated">xの正接を返します。</target>
        </trans-unit>
        <trans-unit id="ba66f3be48c6467f353f5efd9891c6627cdb89ab" translate="yes" xml:space="preserve">
          <source>Returns that part of the element which has already been parsed</source>
          <target state="translated">既に解析済みの要素のその部分を返します。</target>
        </trans-unit>
        <trans-unit id="b608edc397452544804144ad78bbe52ab5fc2029" translate="yes" xml:space="preserve">
          <source>Returns the 1-based index of the first needle found in &lt;code&gt;haystack&lt;/code&gt;. If no needle is found, then &lt;code&gt;0&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; で見つかった最初の針の1から始まるインデックスを返します。針が見つからない場合は、 &lt;code&gt;0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7aaa8e97c1413fd2bd543e9004e05b5cf5c4f371" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#Combining%20class&quot;&gt;combining class&lt;/a&gt; of &lt;code&gt;ch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ch&lt;/code&gt; の&lt;a href=&quot;#Combining%20class&quot;&gt;結合クラス&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="d8be721db94c04e472c94307aecfdfe427375b92" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; farthest in the future which is representable by &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;によって表現され、将来的に最も遠い&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c1def76d6ce884cce4d4c98ab3a2fabda5822d2" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; farthest in the past which is representable by &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;で表現され、過去に最も遠い&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab0c4a5962794ed68c3814267d8b274bfc7e912b" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; farthest in the future which is representable by &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;で表現され、将来的に最も遠い&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d6cfbf56336eb14c68e9c4e005d3c238efe7d8a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; farthest in the past which is representable by &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は、&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; のは&lt;/a&gt;で表現され、過去に最も遠い&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="509916d34bf387cddcb67bcb14780b3e260c02f2" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; farthest in the future which is representable by &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;で表現され、将来的に最も遠い&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1e9fb79b3cb15b2a01f1101a7e66c7413cf60d04" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; farthest in the past which is representable by &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は、&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;で表現され、過去に最も遠い&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6098d975abe5b5502583c0eb337b8cf5e7991403" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;http://wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; between &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. The Levenshtein distance computes the minimal amount of edit operations necessary to transform &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) evaluations of &lt;code&gt;equals&lt;/code&gt; and occupies &amp;Omicron;(&lt;code&gt;min(s.length, t.length)&lt;/code&gt;) storage.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; と &lt;code&gt;t&lt;/code&gt; の間の&lt;a href=&quot;http://wikipedia.org/wiki/Levenshtein_distance&quot;&gt;レーベンシュタイン距離を&lt;/a&gt;返します。レーベンシュタイン距離は、 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;t&lt;/code&gt; に変換するために必要な編集操作の最小量を計算します。 &lt;code&gt;equals&lt;/code&gt; （ &lt;code&gt;s.length * t.length&lt;/code&gt; ）評価を実行し、&amp;Omicron;（ &lt;code&gt;min(s.length, t.length)&lt;/code&gt; ）ストレージを占有します。</target>
        </trans-unit>
        <trans-unit id="1f6a32a8e8e296b1d3ccd0da949b1aac7471ca63" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;FILE*&lt;/code&gt; corresponding to this object.</source>
          <target state="translated">このオブジェクトに対応する &lt;code&gt;FILE*&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="257f9050b4dfb4d53f237029d2536b3e3101b2ba" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element in the composite range. Defined if all ranges offer random access.</source>
          <target state="translated">合成範囲の &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。すべての範囲がランダムアクセスを提供するかどうかを定義します。</target>
        </trans-unit>
        <trans-unit id="0b59ae7fbd96d7d27b3f0e2f2cf1c051ba985c19" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;shared&lt;/code&gt; global instance of the &lt;code&gt;NullAllocator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NullAllocator&lt;/code&gt; の &lt;code&gt;shared&lt;/code&gt; グローバルインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="ce6e1c2ff99eaab11519ce3ee941b2f29633ee4b" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;typeid&lt;/code&gt; of the currently held value.</source>
          <target state="translated">現在保持されている値の &lt;code&gt;typeid&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9ca240f5c1017fb9b7d3e3febde06ae0b4f5b4d4" translate="yes" xml:space="preserve">
          <source>Returns the FunctionAttribute mask for function &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;func&lt;/code&gt; の FunctionAttributeマスクを返します。</target>
        </trans-unit>
        <trans-unit id="1d42a93b48c21969d8cb340934a7c100cc9b7231" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 address number (in host byte order).</source>
          <target state="translated">IPv4 アドレス番号(ホストバイト順)を返します。</target>
        </trans-unit>
        <trans-unit id="45baaf9601220b1e25ad558814402648ada571ca" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 port number (in host byte order).</source>
          <target state="translated">IPv4 のポート番号を返します(ホストバイト順)。</target>
        </trans-unit>
        <trans-unit id="23c37a04b925d1835fba17fa23f45825ee624aa3" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 address.</source>
          <target state="translated">IPv6アドレスを返します。</target>
        </trans-unit>
        <trans-unit id="cbe7a9fcaba392224d10bfe292c3ee68c2a2a8ee" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 port number.</source>
          <target state="translated">IPv6 のポート番号を返します。</target>
        </trans-unit>
        <trans-unit id="58c93b39819a6af0f07c9d344cc49d548d1bf175" translate="yes" xml:space="preserve">
          <source>Returns the JSONType of the value stored in this structure.</source>
          <target state="translated">この構造体に格納されている値のJSONTypeを返します。</target>
        </trans-unit>
        <trans-unit id="e743c49645b9efc621fefcedde424e322a718efa" translate="yes" xml:space="preserve">
          <source>Returns the Levenshtein distance and the edit path between &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">レーベンシュタイン距離と &lt;code&gt;s&lt;/code&gt; と &lt;code&gt;t&lt;/code&gt; の間の編集パスを返します。</target>
        </trans-unit>
        <trans-unit id="81b4aeabdccf76b9b4ea6ea89fc307eb4334e212" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of a duration.</source>
          <target state="translated">持続時間の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="e570495f978a68cd4bcc7ebeafb6cd038aae9b65" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of x converted to the corresponding unsigned type.</source>
          <target state="translated">x の絶対値を対応する符号なし型に変換した値を返します。</target>
        </trans-unit>
        <trans-unit id="1cc10390f78435ed9830cbc4df9f01154f2f0b33" translate="yes" xml:space="preserve">
          <source>Returns the actual bytes allocated when &lt;code&gt;n&lt;/code&gt; bytes are requested, i.e. &lt;code&gt;n.roundUpToMultipleOf(blockSize)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイトが要求されたときに割り当てられた実際のバイト、つまり &lt;code&gt;n.roundUpToMultipleOf(blockSize)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6997f16ab28630fa41ce604ab7a7c130397f707" translate="yes" xml:space="preserve">
          <source>Returns the alignment offered.</source>
          <target state="translated">提供されたアライメントを返します。</target>
        </trans-unit>
        <trans-unit id="196851e7c8f7265b2099a4234f1e49f8e2183ee7" translate="yes" xml:space="preserve">
          <source>Returns the argument, x, for which the area under the Normal probability density function (integrated from minus infinity to x) is equal to p.</source>
          <target state="translated">正規確率密度関数(マイナス無限大からxまで積分したもの)の下の面積がpに等しい引数xを返します。</target>
        </trans-unit>
        <trans-unit id="57478ab50bf3787cb5fea44777273680e0c4914f" translate="yes" xml:space="preserve">
          <source>Returns the arguments supplied when the process was started.</source>
          <target state="translated">プロセスの開始時に与えられた引数を返します。</target>
        </trans-unit>
        <trans-unit id="caddd809a5c7082d66bc12eafd8233866c8fdd55" translate="yes" xml:space="preserve">
          <source>Returns the array index at which the (n+1)th code point begins.</source>
          <target state="translated">(n+1)番目のコードポイントが始まる配列のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="c32d42172aeb065d7243d264818252792375c5cc" translate="yes" xml:space="preserve">
          <source>Returns the array length multiplied by the number of bytes per array element.</source>
          <target state="translated">配列の長さに配列要素ごとのバイト数を乗じた値を返します。</target>
        </trans-unit>
        <trans-unit id="c9d41878aa69ec140443d5bdd50b1df8caa2f4c8" translate="yes" xml:space="preserve">
          <source>Returns the attributes of the file represented by this &lt;code&gt;DirEntry&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; によって表されるファイルの属性を返します。</target>
        </trans-unit>
        <trans-unit id="094eb86ed26e7ff7b39ed1c60d218ec0cb6f8669" translate="yes" xml:space="preserve">
          <source>Returns the attributes of the given file.</source>
          <target state="translated">指定したファイルの属性を返します。</target>
        </trans-unit>
        <trans-unit id="f46326e3c81a7e2aa110ff84039dd607a22b74f5" translate="yes" xml:space="preserve">
          <source>Returns the available disk space based on a given path. On Windows, &lt;code&gt;path&lt;/code&gt; must be a directory; on Posix systems, it can be a file or directory.</source>
          <target state="translated">指定されたパスに基づいて使用可能なディスク容量を返します。Windowsでは、 &lt;code&gt;path&lt;/code&gt; はディレクトリでなければなりません。Posixシステムでは、ファイルまたはディレクトリです。</target>
        </trans-unit>
        <trans-unit id="a5a77c34a5774ea86ceddcc9f783845770a9aa8d" translate="yes" xml:space="preserve">
          <source>Returns the available size for further allocations in bytes.</source>
          <target state="translated">バイト単位で、追加の割り当てに利用可能なサイズを返します。</target>
        </trans-unit>
        <trans-unit id="33db445e3ce8a2d6d803f52279746f7aa60d2fc5" translate="yes" xml:space="preserve">
          <source>Returns the base address of the memory block containing p. This value is useful to determine whether p is an interior pointer, and the result may be passed to routines such as sizeOf which may otherwise fail. If p references memory not originally allocated by this garbage collector, if p is null, or if the garbage collector does not support this operation, null will be returned.</source>
          <target state="translated">この値は、p が内部ポインタであるかどうかを判断するのに便利であり、その結果は sizeOf などのルーチンに渡されることがあります。p がもともとこのガベージコレクタによって割り当てられていないメモリを参照している場合、p が NULL の場合、またはガベージコレクタがこの操作をサポートしていない場合、NULL が返されます。</target>
        </trans-unit>
        <trans-unit id="d829600059cc6d895e0a04268346ed1bba620a88" translate="yes" xml:space="preserve">
          <source>Returns the base e (2.718...) logarithm of the absolute value of the gamma function of the argument.</source>
          <target state="translated">引数のガンマ関数の絶対値の基底e(2.718...)対数を返します。</target>
        </trans-unit>
        <trans-unit id="93475ffa06ff0a318625b6980908fdc9945ae0b4" translate="yes" xml:space="preserve">
          <source>Returns the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, &lt;code&gt;capacity&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">配列の容量を返します（再割り当てをトリガーする前に管理配列が対応できる要素の最大数）。追加によって再割り当てされる場合、 &lt;code&gt;capacity&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7cd88ebd34fb9d666f1281686d2cf10bd812d12f" translate="yes" xml:space="preserve">
          <source>Returns the capacity of the heap, which is the length of the underlying store (if the store is a range) or the capacity of the underlying store (if the store is a container).</source>
          <target state="translated">ヒープの容量を返します。これは、基礎となるストアの長さ (ストアが範囲の場合)、または基礎となるストアの容量 (ストアがコンテナの場合)です。</target>
        </trans-unit>
        <trans-unit id="5544e04dfcc3c86cc8c55e7a6573acb213f91559" translate="yes" xml:space="preserve">
          <source>Returns the code length of c in code units for the encoding. sz is the encoding: 1 = utf8, 2 = utf16, 4 = utf32.</source>
          <target state="translated">c のコード長をエンコーディングのコード単位で返します。1=utf8,2=utf16,4=utf32。</target>
        </trans-unit>
        <trans-unit id="6a077755062985e986914e8c259ac848491d8b8e" translate="yes" xml:space="preserve">
          <source>Returns the code length of c in code units.</source>
          <target state="translated">cのコード長をコード単位で返します。</target>
        </trans-unit>
        <trans-unit id="219b4c31cab22d2577f34d0a0da0c17190131039" translate="yes" xml:space="preserve">
          <source>Returns the common prefix of two ranges.</source>
          <target state="translated">2つの範囲の共通接頭辞を返します。</target>
        </trans-unit>
        <trans-unit id="728b4e05fb8b0f9c59e347e6977095f89332001f" translate="yes" xml:space="preserve">
          <source>Returns the concatenation of &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; may be a single element or an input range.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; と &lt;code&gt;r&lt;/code&gt; の連結を返します。 &lt;code&gt;x&lt;/code&gt; は、単一の要素または入力範囲です。</target>
        </trans-unit>
        <trans-unit id="ea0c4e9d22c1a50602a0199f4850469755760e82" translate="yes" xml:space="preserve">
          <source>Returns the concatenation of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; may be a single element or an input range type.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;c&lt;/code&gt; の連結を返します。 &lt;code&gt;x&lt;/code&gt; は、単一の要素または入力範囲タイプです。</target>
        </trans-unit>
        <trans-unit id="5e42c6644bd4a3579479c7e0bc4f63694376ecd9" translate="yes" xml:space="preserve">
          <source>Returns the corresponding signed type for T. T must be a numeric integral type, otherwise a compile-time error occurs.</source>
          <target state="translated">Tに対応する符号付き型を返します。 Tは数値積分型でなければならず、そうでない場合はコンパイル時エラーとなります。</target>
        </trans-unit>
        <trans-unit id="79e5c0231d51031f2d202e464e73ae44600f2359" translate="yes" xml:space="preserve">
          <source>Returns the corresponding signed value for &lt;code&gt;x&lt;/code&gt; (e.g. if &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;uint&lt;/code&gt;, it returns &lt;code&gt;cast(int) x&lt;/code&gt;). The advantage compared to the cast is that you do not need to rewrite the cast if &lt;code&gt;x&lt;/code&gt; later changes type (e.g from &lt;code&gt;uint&lt;/code&gt; to &lt;code&gt;ulong&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; に対応する符号付き値を返します（たとえば、 &lt;code&gt;x&lt;/code&gt; の型が &lt;code&gt;uint&lt;/code&gt; の場合は、 &lt;code&gt;cast(int) x&lt;/code&gt; 返します）。キャストと比較した利点は、 &lt;code&gt;x&lt;/code&gt; が後でタイプを変更した場合（たとえば &lt;code&gt;uint&lt;/code&gt; から &lt;code&gt;ulong&lt;/code&gt; ）にキャストを書き直す必要がないことです。</target>
        </trans-unit>
        <trans-unit id="e0c7cfaa654c9cafcf15a0f23f1488d7a5472921" translate="yes" xml:space="preserve">
          <source>Returns the corresponding unsigned value for &lt;code&gt;x&lt;/code&gt; (e.g. if &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;int&lt;/code&gt;, it returns &lt;code&gt;cast(uint) x&lt;/code&gt;). The advantage compared to the cast is that you do not need to rewrite the cast if &lt;code&gt;x&lt;/code&gt; later changes type (e.g from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;long&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; に対応する符号なしの値を返します（たとえば、 &lt;code&gt;x&lt;/code&gt; の型が &lt;code&gt;int&lt;/code&gt; の場合は、 &lt;code&gt;cast(uint) x&lt;/code&gt; 返します）。キャストと比較した場合の利点は、後で &lt;code&gt;x&lt;/code&gt; が型を変更した場合（たとえば、 &lt;code&gt;int&lt;/code&gt; から &lt;code&gt;long&lt;/code&gt; に）にキャストを書き直す必要がないことです。</target>
        </trans-unit>
        <trans-unit id="93c8ff19291982433fb8e58bc74d1305cf3d3d6b" translate="yes" xml:space="preserve">
          <source>Returns the creation time of the file represented by this &lt;code&gt;DirEntry&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; で表されるファイルの作成時刻を返します。</target>
        </trans-unit>
        <trans-unit id="0bc5e97841eee44f7e192aec2d0c900432b1d24f" translate="yes" xml:space="preserve">
          <source>Returns the current hashed value as an ubyte array.</source>
          <target state="translated">現在のハッシュ値をバイト配列で返します。</target>
        </trans-unit>
        <trans-unit id="68e5edc996727c03a46e20f3828e25d19770ed5d" translate="yes" xml:space="preserve">
          <source>Returns the current iterated element.</source>
          <target state="translated">現在の反復要素を返します。</target>
        </trans-unit>
        <trans-unit id="694c91992a7cd9a589268dc0b599c9e30217ee47" translate="yes" xml:space="preserve">
          <source>Returns the current number in the random sequence.</source>
          <target state="translated">ランダムシーケンスの現在の数値を返します。</target>
        </trans-unit>
        <trans-unit id="cf614e2cf305b5a6c219be7d0f159e463b6a471a" translate="yes" xml:space="preserve">
          <source>Returns the current random value.</source>
          <target state="translated">現在のランダムな値を返します。</target>
        </trans-unit>
        <trans-unit id="bd225b42fd192befda1703e4a048ac4c02f68a09" translate="yes" xml:space="preserve">
          <source>Returns the current time in the given time zone.</source>
          <target state="translated">指定したタイムゾーンの現在時刻を返します。</target>
        </trans-unit>
        <trans-unit id="667c7645c12244d2978ecd63544e99b3b04e054e" translate="yes" xml:space="preserve">
          <source>Returns the decoded interior of an element.</source>
          <target state="translated">要素の内部をデコードして返します。</target>
        </trans-unit>
        <trans-unit id="a8a27e3ff6fcfae053871df190c003ba8b0decb7" translate="yes" xml:space="preserve">
          <source>Returns the difference between the two &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;s in months.</source>
          <target state="translated">2つの&lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;の差を月単位で返します。</target>
        </trans-unit>
        <trans-unit id="ace8ca94508ab7b3c40df8f7c875267d12ce842b" translate="yes" xml:space="preserve">
          <source>Returns the difference between the two &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;s in months.</source>
          <target state="translated">2つの&lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;の差を月単位で返します。</target>
        </trans-unit>
        <trans-unit id="b1a5d62e20b24fe7c30bfb712ac567819896873f" translate="yes" xml:space="preserve">
          <source>Returns the difference between the two &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;s in months.</source>
          <target state="translated">2つの&lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt;の差を月単位で返します。</target>
        </trans-unit>
        <trans-unit id="08265990114304116123a83a291ea4f348f1c3a1" translate="yes" xml:space="preserve">
          <source>Returns the duration between &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; の間の期間を返します。</target>
        </trans-unit>
        <trans-unit id="a353d4f8b3242008c7d6549132f8ef2dcdd8363e" translate="yes" xml:space="preserve">
          <source>Returns the element type of a given range.</source>
          <target state="translated">指定した範囲の要素の型を返します。</target>
        </trans-unit>
        <trans-unit id="85bc1cdc4a1c465dc09c15d9aad74129f2ed9a69" translate="yes" xml:space="preserve">
          <source>Returns the encoding element type of a given range.</source>
          <target state="translated">指定した範囲のエンコーディング要素の型を返します。</target>
        </trans-unit>
        <trans-unit id="c652de2806a607191d794853e018776beb310aa3" translate="yes" xml:space="preserve">
          <source>Returns the file number corresponding to this object.</source>
          <target state="translated">このオブジェクトに対応するファイル番号を返します。</target>
        </trans-unit>
        <trans-unit id="037c9b8f48e4fe12a5d5c13bebaf2bfd864713de" translate="yes" xml:space="preserve">
          <source>Returns the finished CRC hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">完了したCRCハッシュを返します。これは、内部状態をリセットするために&lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt;も呼び出します。</target>
        </trans-unit>
        <trans-unit id="1b806b45f0f49c45cfe5429b9d0a5ecd137b2191" translate="yes" xml:space="preserve">
          <source>Returns the finished MD5 hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">完成したMD5ハッシュを返します。これは、内部状態をリセットするために&lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt;も呼び出します。</target>
        </trans-unit>
        <trans-unit id="b7c7d50613428f96baa5c9b9724d5388e68313dc" translate="yes" xml:space="preserve">
          <source>Returns the finished RIPEMD160 hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">完成したRIPEMD160ハッシュを返します。これは、内部状態をリセットするために&lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt;も呼び出します。</target>
        </trans-unit>
        <trans-unit id="dea8c0070ef5fe4ab0db856146f0106a3e3562dd" translate="yes" xml:space="preserve">
          <source>Returns the finished SHA hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">完成したSHAハッシュを返します。これは、内部状態をリセットするために&lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt;も呼び出します。</target>
        </trans-unit>
        <trans-unit id="28e136de73953fc61a3a088d3f57bebe2d0e4e54" translate="yes" xml:space="preserve">
          <source>Returns the first element of the container, in a container-defined order.</source>
          <target state="translated">コンテナの最初の要素を、コンテナで定義された順序で返します。</target>
        </trans-unit>
        <trans-unit id="4714e9158c318abdd86a87254da5520e1a86d92a" translate="yes" xml:space="preserve">
          <source>Returns the full path of the current executable.</source>
          <target state="translated">現在の実行ファイルのフルパスを返します。</target>
        </trans-unit>
        <trans-unit id="7ff4d778149aefa73277256ef7b4774ab307cc89" translate="yes" xml:space="preserve">
          <source>Returns the given hnsecs without changing them at all.</source>
          <target state="translated">与えられた hnsecs を全く変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="0630a073d930fd678380d4e8dc6ef00af366e6ac" translate="yes" xml:space="preserve">
          <source>Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and &lt;code&gt;instance&lt;/code&gt; itself are &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">このアロケータタイプのグローバルインスタンスを返します。Cヒープアロケータはスレッドセーフであるため、そのすべてのメソッドと &lt;code&gt;instance&lt;/code&gt; 自体が &lt;code&gt;shared&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="532b7a8ef32828945116d58255668b248151d31a" translate="yes" xml:space="preserve">
          <source>Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and &lt;code&gt;it&lt;/code&gt; itself are &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">このアロケータタイプのグローバルインスタンスを返します。Cヒープアロケーターはスレッドセーフであるため、そのすべてのメソッドと &lt;code&gt;it&lt;/code&gt; 自体が &lt;code&gt;shared&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2895802e94fc2b99238a662c48e664762c727c4c" translate="yes" xml:space="preserve">
          <source>Returns the global instance of this allocator type. The garbage collected allocator is thread-safe, therefore all of its methods and &lt;code&gt;instance&lt;/code&gt; itself are &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">このアロケータタイプのグローバルインスタンスを返します。ガベージコレクションされたアロケータはスレッドセーフであるため、そのメソッドと &lt;code&gt;instance&lt;/code&gt; 自体はすべて &lt;code&gt;shared&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="7e7e95e8836e55e0ec878d1ca0df5344c77da1b1" translate="yes" xml:space="preserve">
          <source>Returns the good allocation size that guarantees zero internal fragmentation.</source>
          <target state="translated">内部の断片化がゼロであることを保証する、良好な割り当てサイズを返します。</target>
        </trans-unit>
        <trans-unit id="761ce3cb0c363cd752d6f37bf64ee9bf23d20ff3" translate="yes" xml:space="preserve">
          <source>Returns the hash as an uint value.</source>
          <target state="translated">ハッシュをuint値で返します。</target>
        </trans-unit>
        <trans-unit id="43702045b3eca7cf2498797e1306c82ad1750c21" translate="yes" xml:space="preserve">
          <source>Returns the hash of a CData</source>
          <target state="translated">CDataのハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="2f9ae23bc6367b9df14868b1db260da7bcf8721c" translate="yes" xml:space="preserve">
          <source>Returns the hash of a Comment</source>
          <target state="translated">コメントのハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="2ecb60c7d5597660ed6f2efa04c3fa44f7526861" translate="yes" xml:space="preserve">
          <source>Returns the hash of a Document</source>
          <target state="translated">ドキュメントのハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="c18bf4f15890b55835846a7ee93b31c53d4df9fc" translate="yes" xml:space="preserve">
          <source>Returns the hash of a ProcessingInstruction</source>
          <target state="translated">ProcessingInstructionのハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="36fc578ccf9adb115f7ba61024828b87b4f3726b" translate="yes" xml:space="preserve">
          <source>Returns the hash of a Tag</source>
          <target state="translated">タグのハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="fc39c8c90907974b818c8e42b40d3d4678023682" translate="yes" xml:space="preserve">
          <source>Returns the hash of a text section</source>
          <target state="translated">テキストセクションのハッシュを返します</target>
        </trans-unit>
        <trans-unit id="f122d9bed5829b092eff21cc9e0e5455257e65a2" translate="yes" xml:space="preserve">
          <source>Returns the hash of an Element</source>
          <target state="translated">要素のハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="d90b5c3a81082239c4289ae3ace4f9dbff839e8d" translate="yes" xml:space="preserve">
          <source>Returns the hash of an XMLInstruction</source>
          <target state="translated">XMLInstruction のハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="f538327a2675d7baf16cb9ba4c2248eda2a819ca" translate="yes" xml:space="preserve">
          <source>Returns the hash of this item</source>
          <target state="translated">この項目のハッシュを返します</target>
        </trans-unit>
        <trans-unit id="5d679540ab0aea358f64b4706760d37047c35ebd" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of any character not an elements in &lt;code&gt;needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If all element of &lt;code&gt;haystack&lt;/code&gt; are element of &lt;code&gt;needles&lt;/code&gt;&lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">任意の文字ではないの要素が最初に出現する位置のインデックスを返し &lt;code&gt;needles&lt;/code&gt; で &lt;code&gt;haystack&lt;/code&gt; 。すべての要素場合は &lt;code&gt;haystack&lt;/code&gt; の要素で &lt;code&gt;needles&lt;/code&gt; &lt;code&gt;-1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="d67bbb7827ae15fb753424306aaec63cc979ea9e" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of any of the elements in &lt;code&gt; needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If no element of &lt;code&gt;needles&lt;/code&gt; is found, then &lt;code&gt;-1&lt;/code&gt; is returned. The &lt;code&gt;startIdx&lt;/code&gt; slices &lt;code&gt;haystack&lt;/code&gt; in the following way &lt;code&gt;haystack[startIdx .. $]&lt;/code&gt;. &lt;code&gt;startIdx&lt;/code&gt; represents a codeunit index in &lt;code&gt;haystack&lt;/code&gt;. If the sequence ending at &lt;code&gt;startIdx&lt;/code&gt; does not represent a well formed codepoint, then a &lt;a href=&quot;std_utf#UTFException&quot;&gt;&lt;code&gt;std.utf.UTFException&lt;/code&gt;&lt;/a&gt; may be thrown.</source>
          <target state="translated">要素のいずれかの最初の出現の指標を返し &lt;code&gt; needles&lt;/code&gt; で &lt;code&gt;haystack&lt;/code&gt; 。 &lt;code&gt;needles&lt;/code&gt; の要素が見つからない場合は、 &lt;code&gt;-1&lt;/code&gt; が返されます。 &lt;code&gt;startIdx&lt;/code&gt; スライス &lt;code&gt;haystack&lt;/code&gt; 、次の方法の中に &lt;code&gt;haystack[startIdx .. $]&lt;/code&gt; 。 &lt;code&gt;startIdx&lt;/code&gt; はでcodeunitインデックスを表し &lt;code&gt;haystack&lt;/code&gt; 。 &lt;code&gt;startIdx&lt;/code&gt; で終わるシーケンスが整形式のコードポイントを表していない場合、&lt;a href=&quot;std_utf#UTFException&quot;&gt; &lt;code&gt;std.utf.UTFException&lt;/code&gt; &lt;/a&gt;がスローされることがあります。</target>
        </trans-unit>
        <trans-unit id="889c0950d259fdd1770d4352caaa61ee9bbab7af" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of type T in the sequence of zero or more types TList. If not found, -1 is returned.</source>
          <target state="translated">TList 型が 0 個以上あるシーケンスの中で、T 型が最初に出現したときのインデックスを返します。見つからない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="e931d883ec5d22b5c4835731ae9c1d50e68c80c7" translate="yes" xml:space="preserve">
          <source>Returns the index of the last occurrence of any of the elements in &lt;code&gt; needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If no element of &lt;code&gt;needles&lt;/code&gt; is found, then &lt;code&gt;-1&lt;/code&gt; is returned. The &lt;code&gt;stopIdx&lt;/code&gt; slices &lt;code&gt;haystack&lt;/code&gt; in the following way &lt;code&gt;s[0 .. stopIdx]&lt;/code&gt;. &lt;code&gt;stopIdx&lt;/code&gt; represents a codeunit index in &lt;code&gt;haystack&lt;/code&gt;. If the sequence ending at &lt;code&gt;startIdx&lt;/code&gt; does not represent a well formed codepoint, then a &lt;a href=&quot;std_utf#UTFException&quot;&gt;&lt;code&gt;std.utf.UTFException&lt;/code&gt;&lt;/a&gt; may be thrown.</source>
          <target state="translated">要素のいずれかが最後に出現する位置のインデックスを返し &lt;code&gt; needles&lt;/code&gt; で &lt;code&gt;haystack&lt;/code&gt; 。 &lt;code&gt;needles&lt;/code&gt; の要素が見つからない場合は、 &lt;code&gt;-1&lt;/code&gt; が返されます。 &lt;code&gt;stopIdx&lt;/code&gt; スライス &lt;code&gt;haystack&lt;/code&gt; 、次のように &lt;code&gt;s[0 .. stopIdx]&lt;/code&gt; 。 &lt;code&gt;stopIdx&lt;/code&gt; はでcodeunitインデックスを表し &lt;code&gt;haystack&lt;/code&gt; 。 &lt;code&gt;startIdx&lt;/code&gt; で終わるシーケンスが整形式のコードポイントを表していない場合、&lt;a href=&quot;std_utf#UTFException&quot;&gt; &lt;code&gt;std.utf.UTFException&lt;/code&gt; &lt;/a&gt;がスローされることがあります。</target>
        </trans-unit>
        <trans-unit id="44899dea6e6a128d15b3d41dff6d69cd60cf0bad" translate="yes" xml:space="preserve">
          <source>Returns the index of the visited record.</source>
          <target state="translated">訪問したレコードのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="f6209ce86a43f6337d98185a61c24687906bf36b" translate="yes" xml:space="preserve">
          <source>Returns the indices range.</source>
          <target state="translated">インデックスの範囲を返します。</target>
        </trans-unit>
        <trans-unit id="b915b1c9abc6423470a88454652ad086fbaa08c5" translate="yes" xml:space="preserve">
          <source>Returns the inferred type of the loop variable when a variable of type T is iterated over using a &lt;code&gt;foreach&lt;/code&gt; loop with a single loop variable and automatically inferred return type. Note that this may not be the same as &lt;code&gt;std.range.ElementType!Range&lt;/code&gt; in the case of narrow strings, or if T has both opApply and a range interface.</source>
          <target state="translated">T型の変数が、単一のループ変数と自動的に推論された戻り値の型を持つ &lt;code&gt;foreach&lt;/code&gt; ループを使用して反復される場合、ループ変数の推論された型を返します。幅の狭い文字列の場合、またはTにopApplyと範囲インターフェイスの両方がある場合、これは &lt;code&gt;std.range.ElementType!Range&lt;/code&gt; と同じでない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fd94a60676de8ad7ed4575e7867ec54c92dcf156" translate="yes" xml:space="preserve">
          <source>Returns the integer portion of x, dropping the fractional portion. This is also known as &quot;chop&quot; rounding. &lt;code&gt;pure&lt;/code&gt; on all platforms.</source>
          <target state="translated">小数部分を削除して、xの整数部分を返します。これは「チョップ」丸めとも呼ばれます。すべてのプラットフォームで &lt;code&gt;pure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e46b47aed6b380cc1ff8e57b7645e1319703edf2" translate="yes" xml:space="preserve">
          <source>Returns the interface type that best matches &lt;code&gt;R&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; に最も一致するインターフェースタイプを返します。</target>
        </trans-unit>
        <trans-unit id="671b7d7586b93eba9a32749549e3f1c69838f496" translate="yes" xml:space="preserve">
          <source>Returns the interface type that best matches the range.</source>
          <target state="translated">範囲に最もよくマッチするインターフェースの型を返します。</target>
        </trans-unit>
        <trans-unit id="05299cf602d66c99fc042a596c6adba159f570dc" translate="yes" xml:space="preserve">
          <source>Returns the intersection of two intervals</source>
          <target state="translated">2つの区間の交点を返します</target>
        </trans-unit>
        <trans-unit id="774530114a94286cd0a12e5cfdbef5af41dda063" translate="yes" xml:space="preserve">
          <source>Returns the larger of x and y.</source>
          <target state="translated">xとyのどちらか大きい方を返します。</target>
        </trans-unit>
        <trans-unit id="b82b6b14a6999ef79ef83d3e6cd2bc95774d605f" translate="yes" xml:space="preserve">
          <source>Returns the largest allocation size eligible for allocation from the freelist. (If &lt;code&gt;maxSize != chooseAtRuntime&lt;/code&gt;, this is simply an alias for &lt;code&gt;maxSize&lt;/code&gt;.) All allocation requests for sizes greater than or equal to &lt;code&gt;min&lt;/code&gt; and less than or equal to &lt;code&gt;max&lt;/code&gt; are rounded to &lt;code&gt; max&lt;/code&gt; and forwarded to the parent allocator. When the block fitting the same constraint gets deallocated, it is put in the freelist with the allocated size assumed to be &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">フリーリストからの割り当てに適した最大割り当てサイズを返します。 （場合 &lt;code&gt;maxSize != chooseAtRuntime&lt;/code&gt; 、これは単にの別名である &lt;code&gt;maxSize&lt;/code&gt; の。）より大きいか等しいサイズのすべての割り当て要求 &lt;code&gt;min&lt;/code&gt; 未満又は等しい &lt;code&gt;max&lt;/code&gt; がに丸められ &lt;code&gt; max&lt;/code&gt; 親アロケータに転送されます。同じ制約に適合するブロックの割り当てが解除されると、割り当てられたサイズが &lt;code&gt;max&lt;/code&gt; であると想定して、フリーリストに入れられます。</target>
        </trans-unit>
        <trans-unit id="36bda4b3c965a21e06a23f18801ae5d094e0d776" translate="yes" xml:space="preserve">
          <source>Returns the largest type, i.e. T such that T.sizeof is the largest. If more than one type is of the same size, the leftmost argument of these in will be returned.</source>
          <target state="translated">最大の型、すなわち T.sizeof が最大となるような T を返します。同じサイズの型が複数ある場合は、これらのinの左端の引数が返されます。</target>
        </trans-unit>
        <trans-unit id="25d9f1c295934166f494926a87ba1444dd4c6d91" translate="yes" xml:space="preserve">
          <source>Returns the last element of the container, in a container-defined order.</source>
          <target state="translated">コンテナの最後の要素を、コンテナで定義された順序で返します。</target>
        </trans-unit>
        <trans-unit id="99fd077dd70806ab6bf64e940a35ff0e09376df5" translate="yes" xml:space="preserve">
          <source>Returns the last index of the first occurence of any character that is not an elements in &lt;code&gt;needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If all element of &lt;code&gt;haystack&lt;/code&gt; are element of &lt;code&gt;needles&lt;/code&gt;&lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">要素ではない任意の文字の最初の出現の最後のインデックスを返し &lt;code&gt;needles&lt;/code&gt; で &lt;code&gt;haystack&lt;/code&gt; 。すべての要素場合は &lt;code&gt;haystack&lt;/code&gt; の要素で &lt;code&gt;needles&lt;/code&gt; &lt;code&gt;-1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c7ea8577a6f254fdcb3635f541103bf57268587d" translate="yes" xml:space="preserve">
          <source>Returns the length of the first encoded sequence.</source>
          <target state="translated">最初にエンコードされたシーケンスの長さを返します。</target>
        </trans-unit>
        <trans-unit id="1aa3226fa62013c37bb0b319518a9fd77b811ebf" translate="yes" xml:space="preserve">
          <source>Returns the length of the heap.</source>
          <target state="translated">ヒープの長さを返します。</target>
        </trans-unit>
        <trans-unit id="c18db291eab47f7cea157698943589f9d164feda" translate="yes" xml:space="preserve">
          <source>Returns the length of the last encoded sequence.</source>
          <target state="translated">最後にエンコードされたシーケンスの長さを返します。</target>
        </trans-unit>
        <trans-unit id="d282c9f383d2a33ead62f10ecc5e1ac3d569e223" translate="yes" xml:space="preserve">
          <source>Returns the length of the longest possible substring, starting from the first code unit, which is validly encoded.</source>
          <target state="translated">有効にエンコードされた最初のコード単位から始まる、可能な限り長い部分文字列の長さを返します。</target>
        </trans-unit>
        <trans-unit id="3344cd849734a78abc071ab3b801f34d9c70a4a0" translate="yes" xml:space="preserve">
          <source>Returns the length of the longest possible substring, starting from the first element, which is validly encoded.</source>
          <target state="translated">有効にエンコードされた最初の要素から始まる可能性のある最長の部分文字列の長さを返します。</target>
        </trans-unit>
        <trans-unit id="d80b3e23eca7f81cdfc8fe4a3741af9f063e0987" translate="yes" xml:space="preserve">
          <source>Returns the length of this range. Defined only if all ranges define &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="translated">この範囲の長さを返します。すべての範囲が &lt;code&gt;length&lt;/code&gt; 定義する場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="f375ec26e829d0c6341e7bdb2dac4c8cd869d04b" translate="yes" xml:space="preserve">
          <source>Returns the mangled name of symbol or type &lt;code&gt;sth&lt;/code&gt;.</source>
          <target state="translated">記号のマングル名または &lt;code&gt;sth&lt;/code&gt; 型を返します。</target>
        </trans-unit>
        <trans-unit id="249712de91cee0e6e352a45df0d10104d9153b82" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of elements that can be stored in the container without triggering a reallocation.</source>
          <target state="translated">再割り当てをトリガーせずにコンテナ内に格納できる要素の最大数を返します。</target>
        </trans-unit>
        <trans-unit id="f6bcc56ddd4b16c4ee0924ae1ede125e43f8b6cc" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of milliseconds the app is allowed to wait before curl_multi_socket() or curl_multi_perform() must be called (to allow libcurl's timed events to take place).</source>
          <target state="translated">curl_multi_socket()または curl_multi_perform()が呼び出されなければならない (libcurl の時限イベントが行われるようにするために)までにアプリが待つことができる最大ミリ秒数を返します。</target>
        </trans-unit>
        <trans-unit id="d01eb1576c0fd6a07fe4aff157995910714f0579" translate="yes" xml:space="preserve">
          <source>Returns the minimum alignment of all data returned by the allocator. An allocator may implement &lt;code&gt;alignment&lt;/code&gt; as a statically-known &lt;code&gt;enum&lt;/code&gt; value only. Applications that need dynamically-chosen alignment values should use the &lt;code&gt;alignedAllocate&lt;/code&gt; and &lt;code&gt;alignedReallocate&lt;/code&gt; APIs.</source>
          <target state="translated">アロケータによって返されたすべてのデータの最小配置を返します。アロケータは、静的に既知の &lt;code&gt;enum&lt;/code&gt; 値としてのみ &lt;code&gt;alignment&lt;/code&gt; を実装できます。動的に選択された配置値を必要とするアプリケーションは、 &lt;code&gt;alignedReallocate&lt;/code&gt; API およびalignmentReallocate APIを使用する &lt;code&gt;alignedAllocate&lt;/code&gt; あります。</target>
        </trans-unit>
        <trans-unit id="92eeacc8559b5212b274f6522dbca789ac07ae56" translate="yes" xml:space="preserve">
          <source>Returns the most negative value of the numeric type T.</source>
          <target state="translated">数値型Tの最も負の値を返します。</target>
        </trans-unit>
        <trans-unit id="6e703aa68d3677a6418df0b63a2e273835fbb77c" translate="yes" xml:space="preserve">
          <source>Returns the most recently generated value by shallow copy.</source>
          <target state="translated">浅いコピーで最近生成された値を返します。</target>
        </trans-unit>
        <trans-unit id="5c299edf68821ee75ebc479b8a7d41e944e4f992" translate="yes" xml:space="preserve">
          <source>Returns the most recently generated value without executing a copy contructor. Will not compile for element types defining a postblit, because Generator does not return by reference.</source>
          <target state="translated">コピーコントラクタを実行せずに、直近に生成された値を返します。ジェネレータは参照で返さないので、ポストブリットを定義している要素型の場合はコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="16eace4791215ab06073b1dcea3407f98975712f" translate="yes" xml:space="preserve">
          <source>Returns the name of an encoding.</source>
          <target state="translated">エンコーディングの名前を返します。</target>
        </trans-unit>
        <trans-unit id="4f014efde2b3af5b22e278b2fe5bbf58862e18c6" translate="yes" xml:space="preserve">
          <source>Returns the name of the last opened file, if any. If a &lt;code&gt;File&lt;/code&gt; was created with &lt;a href=&quot;#tmpfile&quot;&gt;&lt;code&gt;tmpfile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wrapFile&quot;&gt;&lt;code&gt;wrapFile&lt;/code&gt;&lt;/a&gt; it has no name.</source>
          <target state="translated">最後に開いたファイルがあれば、その名前を返します。 &lt;code&gt;File&lt;/code&gt; が&lt;a href=&quot;#tmpfile&quot;&gt; &lt;code&gt;tmpfile&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#wrapFile&quot;&gt; &lt;code&gt;wrapFile&lt;/code&gt; &lt;/a&gt;で作成された場合、名前はありません。</target>
        </trans-unit>
        <trans-unit id="95b9032427f64ceb299627ebe4699571e45b3ca8" translate="yes" xml:space="preserve">
          <source>Returns the negation of this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; の否定を返します。</target>
        </trans-unit>
        <trans-unit id="9ed1896d37e33436313b41b09305da4a2f64f069" translate="yes" xml:space="preserve">
          <source>Returns the negation of this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; の否定を返します。</target>
        </trans-unit>
        <trans-unit id="84f861de072e3568536c62569d2e605a957f3f3c" translate="yes" xml:space="preserve">
          <source>Returns the number of arguments of function &lt;code&gt;func&lt;/code&gt;. arity is undefined for variadic functions.</source>
          <target state="translated">関数 &lt;code&gt;func&lt;/code&gt; の引数の数を返します。可変性関数のアリティは未定義です。</target>
        </trans-unit>
        <trans-unit id="8bee738dc938b7cdffacfbf7540aaaf7c9d8d8f6" translate="yes" xml:space="preserve">
          <source>Returns the number of code units required to encode a single code point.</source>
          <target state="translated">1つのコードポイントをエンコードするのに必要なコード単位の数を返します。</target>
        </trans-unit>
        <trans-unit id="f042289c8e7065924d012ee4a845daf060371493" translate="yes" xml:space="preserve">
          <source>Returns the number of code units that are required to encode &lt;code&gt;str&lt;/code&gt; in a string whose character type is &lt;code&gt;C&lt;/code&gt;. This is particularly useful when slicing one string with the length of another and the two string types use different character types.</source>
          <target state="translated">文字型が &lt;code&gt;C&lt;/code&gt; の文字列に &lt;code&gt;str&lt;/code&gt; をエンコードするために必要なコード単位の数を返します。これは、ある文字列を別の長さでスライスし、2つの文字列タイプが異なる文字タイプを使用する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="77d4f76badcda8e9ded16546440aeb406137898c" translate="yes" xml:space="preserve">
          <source>Returns the number of code units that are required to encode the code point &lt;code&gt;c&lt;/code&gt; when &lt;code&gt;C&lt;/code&gt; is the character type used to encode it.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; がエンコードに使用される文字タイプの場合、コードポイント &lt;code&gt;c&lt;/code&gt; をエンコードするために必要なコード単位の数を返します。</target>
        </trans-unit>
        <trans-unit id="ca33c0bd21f5610ff9748493c387c61f2fda847c" translate="yes" xml:space="preserve">
          <source>Returns the number of days from the current day of the week to the given day of the week. If they are the same, then the result is 0.</source>
          <target state="translated">現在の曜日から指定した曜日までの日数を返します。これらが同じであれば、結果は0となります。</target>
        </trans-unit>
        <trans-unit id="2d4beed58f26f66976d2d26980a8559d762abfa2" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the array.</source>
          <target state="translated">配列の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="8a57716287a6a9521e772d7a1fd31448a83d0c77" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the array. This is a fixed quantity for static arrays. It is of type &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">配列の要素数を返します。これは、静的配列の固定量です。タイプは &lt;code&gt;size_t&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1106e6d14a4d6f822e0e0f8561de2bb8ca0c3ec8" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the container.</source>
          <target state="translated">コンテナ内の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="199c64409bc79be2571c309155abb0254bfd3129" translate="yes" xml:space="preserve">
          <source>Returns the number of hnsecs since midnight, January 1st, 1 A.D. for the current time.</source>
          <target state="translated">現在の時刻の西暦1月1日午前0時からのhnsecs数を返します。</target>
        </trans-unit>
        <trans-unit id="00b2ac0315bafc2024b732f9828782865eb3741e" translate="yes" xml:space="preserve">
          <source>Returns the number of months from the current months of the year to the given month of the year. If they are the same, then the result is 0.</source>
          <target state="translated">年の現在の月から指定した月までの月数を返します。それらが同じであれば、結果は0となります。</target>
        </trans-unit>
        <trans-unit id="4d054fab054046589eb612181607ff62f554a611" translate="yes" xml:space="preserve">
          <source>Returns the number of ubytes required to encode this code point.</source>
          <target state="translated">このコードポイントをエンコードするのに必要なバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="81661f7f4bce89ee3210938161109929ef601ef8" translate="yes" xml:space="preserve">
          <source>Returns the number of worker threads in the pool.</source>
          <target state="translated">プール内のワーカースレッドの数を返します。</target>
        </trans-unit>
        <trans-unit id="ec295b8b797d90565601839fb8e33f1e2e669939" translate="yes" xml:space="preserve">
          <source>Returns the overlapping portion, if any, of two arrays. Unlike &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;overlap&lt;/code&gt; only compares the pointers and lengths in the ranges, not the values referred by them. If &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; have an overlapping slice, returns that slice. Otherwise, returns the null slice.</source>
          <target state="translated">2つの配列の重複部分がある場合は、それを返します。 &lt;code&gt;equal&lt;/code&gt; とは異なり、 &lt;code&gt;overlap&lt;/code&gt; は範囲内のポインターと長さのみを比較し、それらが参照する値は比較しません。 &lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; に重複するスライスがある場合、そのスライスを返します。それ以外の場合は、nullスライスを返します。</target>
        </trans-unit>
        <trans-unit id="4578fae06fb06a91735f645190d40809e2f11b95" translate="yes" xml:space="preserve">
          <source>Returns the parent directory of path. On Windows, this includes the drive letter if present.</source>
          <target state="translated">path の親ディレクトリを返します。Windowsの場合、これはドライブレターがある場合にはドライブレターを含みます。</target>
        </trans-unit>
        <trans-unit id="9512270ccd2cfcb2d7f82e03f39252859250ba10" translate="yes" xml:space="preserve">
          <source>Returns the path to a directory for temporary files.</source>
          <target state="translated">一時ファイル用のディレクトリへのパスを返します。</target>
        </trans-unit>
        <trans-unit id="56224efa181d714853658dcc0e19b52cef28aa09" translate="yes" xml:space="preserve">
          <source>Returns the path to the file pointed to by a symlink. Note that the path could be either relative or absolute depending on the symlink. If the path is relative, it's relative to the symlink, not the current working directory.</source>
          <target state="translated">シンボリックリンクが指すファイルへのパスを返します。パスは、シンボリックリンクに依存して相対パスか絶対パスのどちらかになることに注意してください。パスが相対パスの場合は、現在の作業ディレクトリではなく、シンボリックリンクからの相対パスとなります。</target>
        </trans-unit>
        <trans-unit id="3c71e7cca19c90198675c769f0518c4563bf0bf6" translate="yes" xml:space="preserve">
          <source>Returns the path to the file represented by this &lt;code&gt;DirEntry&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; で表されるファイルへのパスを返します。</target>
        </trans-unit>
        <trans-unit id="73f82fd82f087a2d8b1562865447419684dd7227" translate="yes" xml:space="preserve">
          <source>Returns the physical index into the source range corresponding to a given logical index. This is useful, for example, when indexing an &lt;code&gt;Indexed&lt;/code&gt; without adding another layer of indirection.</source>
          <target state="translated">指定された論理インデックスに対応するソース範囲への物理インデックスを返します。これは、たとえば、別の間接層を追加せずに &lt;code&gt;Indexed&lt;/code&gt; にインデックスを付ける場合に便利です。</target>
        </trans-unit>
        <trans-unit id="09b8ad97be41c76b883bd81d1751cfdd2c8451a4" translate="yes" xml:space="preserve">
          <source>Returns the positive difference between x and y.</source>
          <target state="translated">xとyの正の差を返します。</target>
        </trans-unit>
        <trans-unit id="6db0cbcc3cc3604c5299ef581ce233e24c1d82b6" translate="yes" xml:space="preserve">
          <source>Returns the process ID of the calling process, which is guaranteed to be unique on the system. This call is always successful.</source>
          <target state="translated">システム上で一意であることが保証されている、呼び出し元のプロセスのプロセスIDを返します。この呼び出しは常に成功します。</target>
        </trans-unit>
        <trans-unit id="8dd04640c0b938a634b031ccbda38f7904013729" translate="yes" xml:space="preserve">
          <source>Returns the process ID of the current process, which is guaranteed to be unique on the system.</source>
          <target state="translated">現在のプロセスのプロセスIDを返します。</target>
        </trans-unit>
        <trans-unit id="4e9bc0a024c6ee761be8d5d5c4e1e0821e589fa4" translate="yes" xml:space="preserve">
          <source>Returns the process ID of the current thread, which is guaranteed to be unique within the current process.</source>
          <target state="translated">現在のスレッドのプロセス ID を返します。</target>
        </trans-unit>
        <trans-unit id="96fdff33f644f52d834920298f651dfa04b1b8f5" translate="yes" xml:space="preserve">
          <source>Returns the representation of a string, which has the same type as the string except the character type is replaced by &lt;code&gt;ubyte&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, or &lt;code&gt;uint&lt;/code&gt; depending on the character width.</source>
          <target state="translated">文字列の表現を返します。これは、文字型が文字幅に応じて &lt;code&gt;ubyte&lt;/code&gt; 、 &lt;code&gt;ushort&lt;/code&gt; 、または &lt;code&gt;uint&lt;/code&gt; に置き換えられることを除いて、文字列と同じ型です。</target>
        </trans-unit>
        <trans-unit id="fbfb1494265bb90efa067ca3a8d809221a83c406" translate="yes" xml:space="preserve">
          <source>Returns the representation of an enumerated value, i.e. the value converted to the base type of the enumeration.</source>
          <target state="translated">列挙された値の表現、つまり列挙の基底型に変換された値を返します。</target>
        </trans-unit>
        <trans-unit id="eacbf053d05df4a98ab19bdf1a2baacfc82885bb" translate="yes" xml:space="preserve">
          <source>Returns the rightmost element.</source>
          <target state="translated">一番右端の要素を返します。</target>
        </trans-unit>
        <trans-unit id="d1aaff92f7ac14d8d8413f0b432ac0871d86e2ef" translate="yes" xml:space="preserve">
          <source>Returns the root directory of the specified path, or &lt;code&gt;null&lt;/code&gt; if the path is not rooted.</source>
          <target state="translated">指定されたパスのルートディレクトリを返します。パスがルート化されていない場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7ac3232dbb34dd85e2aafffdad48fc59828f2927" translate="yes" xml:space="preserve">
          <source>Returns the scoped object.</source>
          <target state="translated">スコープされたオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="493325a3d5dab747bf95d9f4e75f748c30885086" translate="yes" xml:space="preserve">
          <source>Returns the sequence of ubytes to be used to represent any character which cannot be represented in the encoding scheme.</source>
          <target state="translated">エンコーディング方式で表現できない文字を表現するために使用するバイト列を返します。</target>
        </trans-unit>
        <trans-unit id="96303d78aae7a3eb2d5802a6d0222688f9d3ce90" translate="yes" xml:space="preserve">
          <source>Returns the size in bytes of the state that needs to be allocated to hold an object of type &lt;code&gt;T&lt;/code&gt;. &lt;code&gt;stateSize!T&lt;/code&gt; is zero for &lt;code&gt;struct&lt;/code&gt;s that are not nested and have no nonstatic member variables.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 型のオブジェクトを保持するために割り当てる必要がある状態のサイズをバイト単位で返します。ネストされておらず、非静的メンバー変数を持たない &lt;code&gt;struct&lt;/code&gt; の場合、 &lt;code&gt;stateSize!T&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="e87852a3e8a4a6fc449246d5c78ae917e2c7c8b9" translate="yes" xml:space="preserve">
          <source>Returns the size of the dynamic array reference, which is 8 in 32-bit builds and 16 on 64-bit builds.</source>
          <target state="translated">32 ビットビルドでは 8、64 ビットビルドでは 16 の動的配列参照のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="f79656b0cc42593d4401d973a3d027503402e732" translate="yes" xml:space="preserve">
          <source>Returns the size of the reference to the associative array; it is 4 in 32-bit builds and 8 on 64-bit builds.</source>
          <target state="translated">32 ビット版では 4、64 ビット版では 8 となります。</target>
        </trans-unit>
        <trans-unit id="601c25350e5245a238d4b931b4d1fddb2b7ecc83" translate="yes" xml:space="preserve">
          <source>Returns the size of the the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; in bytes.</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; で表されるファイルのサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="1e59811a73811118f24b9562e672888954bba9c3" translate="yes" xml:space="preserve">
          <source>Returns the smaller of x and y.</source>
          <target state="translated">xとyの小さい方を返します。</target>
        </trans-unit>
        <trans-unit id="e603fd939a4c87b988df58c7cfb79623f4360f1e" translate="yes" xml:space="preserve">
          <source>Returns the smallest allocation size eligible for allocation from the freelist. (If &lt;code&gt;minSize != chooseAtRuntime&lt;/code&gt;, this is simply an alias for &lt;code&gt;minSize&lt;/code&gt;.)</source>
          <target state="translated">フリーリストからの割り当てに適した最小の割り当てサイズを返します。（ &lt;code&gt;minSize != chooseAtRuntime&lt;/code&gt; 場合、これは単に &lt;code&gt;minSize&lt;/code&gt; のエイリアスです。）</target>
        </trans-unit>
        <trans-unit id="ef6232c466247ae9de666013ca5c3a93a69fa2ba" translate="yes" xml:space="preserve">
          <source>Returns the source range.</source>
          <target state="translated">ソースの範囲を返します。</target>
        </trans-unit>
        <trans-unit id="591f6c56efd9acbfdec07185df39a5b4a3e28087" translate="yes" xml:space="preserve">
          <source>Returns the stack bottom of the currently active stack within the calling thread.</source>
          <target state="translated">呼び出し元のスレッド内で現在アクティブなスタックの一番下のスタックを返します。</target>
        </trans-unit>
        <trans-unit id="93c6bbcacf562ff819cd9ac347d742eb0bf6819b" translate="yes" xml:space="preserve">
          <source>Returns the stack top of the currently active stack within the calling thread.</source>
          <target state="translated">呼び出し元のスレッド内で現在アクティブなスタックの先頭を返します。</target>
        </trans-unit>
        <trans-unit id="d690f4e2e0ce175d0cb0849639d9c24d3eb70975" translate="yes" xml:space="preserve">
          <source>Returns the standard name of the encoding scheme</source>
          <target state="translated">エンコーディング方式の標準名を返します。</target>
        </trans-unit>
        <trans-unit id="32420c2bb7df1a4f61f11f0c93c63a3593e1b183" translate="yes" xml:space="preserve">
          <source>Returns the string representation of a Document. (That is, the complete XML of a document).</source>
          <target state="translated">ドキュメントの文字列表現を返します。(つまり、ドキュメントの完全な XML)。</target>
        </trans-unit>
        <trans-unit id="f48a3f0285b5c3854854b7d954a862bbf8dc6fa1" translate="yes" xml:space="preserve">
          <source>Returns the string representation of a Tag</source>
          <target state="translated">タグの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="7adbfbc0dd01ac5fbde4a960d0c7893ef13eef88" translate="yes" xml:space="preserve">
          <source>Returns the string representation of an Element</source>
          <target state="translated">要素の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="3feae15df05810e505c4845a2fe9c2db9e1ab993" translate="yes" xml:space="preserve">
          <source>Returns the subrange containing all elements &lt;code&gt;e&lt;/code&gt; for which both &lt;code&gt; pred(e, value)&lt;/code&gt; and &lt;code&gt;pred(value, e)&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt; (e.g., if &lt;code&gt;pred&lt;/code&gt; is &quot;less than&quot;, returns the portion of the range with elements equal to &lt;code&gt;value&lt;/code&gt;). Uses a classic binary search with interval halving until it finds a value that satisfies the condition, then uses &lt;code&gt;SearchPolicy.gallopBackwards&lt;/code&gt; to find the left boundary and &lt;code&gt;SearchPolicy.gallop&lt;/code&gt; to find the right boundary. These policies are justified by the fact that the two boundaries are likely to be near the first found value (i.e., equal ranges are relatively small). Completes the entire search in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time.</source>
          <target state="translated">&lt;code&gt; pred(e, value)&lt;/code&gt; と &lt;code&gt;pred(value, e)&lt;/code&gt; 両方が &lt;code&gt;false&lt;/code&gt; と評価されるすべての要素 &lt;code&gt;e&lt;/code&gt; を含む部分範囲を返します（たとえば、 &lt;code&gt;pred&lt;/code&gt; が「未満」の場合、要素が &lt;code&gt;value&lt;/code&gt; と等しい範囲の部分を返します）。それが条件を満たすという値が見つかるまで、間隔半減と古典的なバイナリ検索を使用するには、次に使用する &lt;code&gt;SearchPolicy.gallopBackwards&lt;/code&gt; を左側の境界と見つけること &lt;code&gt;SearchPolicy.gallop&lt;/code&gt; を右側の境界を見つけること。これらのポリシーは、2つの境界が最初に見つかった値に近い可能性が高い（つまり、等しい範囲が比較的小さい）ことで正当化されます。the（ &lt;code&gt;log(n)&lt;/code&gt; で検索全体を完了します）時間。</target>
        </trans-unit>
        <trans-unit id="888f212e68c70b549e5a35b8b7b97bff1b381c73" translate="yes" xml:space="preserve">
          <source>Returns the tail of &lt;code&gt;range&lt;/code&gt; augmented with length information</source>
          <target state="translated">長さ情報で拡張された &lt;code&gt;range&lt;/code&gt; の末尾を返します</target>
        </trans-unit>
        <trans-unit id="9244c816e0f2c52d4d4ee859f67b142bc1bf8cc7" translate="yes" xml:space="preserve">
          <source>Returns the target type of a pointer.</source>
          <target state="translated">ポインタのターゲット型を返します。</target>
        </trans-unit>
        <trans-unit id="d8c28e5955ca04b50866b4585fe591a09c3f37a3" translate="yes" xml:space="preserve">
          <source>Returns the time that the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; was last accessed.</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; によって表されるファイルが最後にアクセスされた時刻を返します。</target>
        </trans-unit>
        <trans-unit id="5f119cf7d21455fbe20f1d432bc51a054d2388b1" translate="yes" xml:space="preserve">
          <source>Returns the time that the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; was last changed (not only in contents, but also in permissions or ownership).</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; によって表されるファイルが最後に変更された時刻を返します（内容だけでなく、権限または所有権も）。</target>
        </trans-unit>
        <trans-unit id="ac35c19630d6ddeda76160c5b47e01dc09e4a04d" translate="yes" xml:space="preserve">
          <source>Returns the time that the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; was last modified.</source>
          <target state="translated">この &lt;code&gt;DirEntry&lt;/code&gt; によって表されるファイルが最後に変更された時刻を返します。</target>
        </trans-unit>
        <trans-unit id="6688282669b705a2b55a3647db89fd9441e933d5" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last accessed.</source>
          <target state="translated">指定したファイルが最後にアクセスされた時刻を返します。</target>
        </trans-unit>
        <trans-unit id="1ff602a4bf2c63582b21dac98a0d7e10d15ff14a" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last changed.</source>
          <target state="translated">指定したファイルが最後に変更された時刻を返します。</target>
        </trans-unit>
        <trans-unit id="688f9686503d322c7ee15caecd64dff61aa00317" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last modified.</source>
          <target state="translated">指定したファイルが最後に変更された時刻を返します。</target>
        </trans-unit>
        <trans-unit id="a44c44de2d516914dc5397a80c7b4afcba2dc3a5" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last modified. If the file does not exist, returns &lt;code&gt;returnIfMissing&lt;/code&gt;.</source>
          <target state="translated">指定されたファイルが最後に変更された時刻を返します。ファイルが存在しない場合は、 &lt;code&gt;returnIfMissing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0ddf312cc43f1db53aed7724668c2e84910528ab" translate="yes" xml:space="preserve">
          <source>Returns the time, in seconds since 1 Jan 1970 of the time string given in the first argument. The time argument in the second parameter is unused and should be set to NULL.</source>
          <target state="translated">第1引数で指定した時刻文字列の1970年1月1日以降の時刻を秒単位で返します。2 番目のパラメータの time 引数は未使用なので、NULL に設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="89c704f29b2f36050d81767dc5fd00a04bedc644" translate="yes" xml:space="preserve">
          <source>Returns the total number of code points encoded in &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; でエンコードされたコードポイントの総数を返します。</target>
        </trans-unit>
        <trans-unit id="f03f9b4a973225346d2de60b005a12c3a18a7233" translate="yes" xml:space="preserve">
          <source>Returns the total number of code points encoded in a ubyte array.</source>
          <target state="translated">Uバイト配列でエンコードされたコードポイントの総数を返します。</target>
        </trans-unit>
        <trans-unit id="432c8ff552adeafe874cdfb7c72ef94e4a6306de" translate="yes" xml:space="preserve">
          <source>Returns the total number of hecto-nanoseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; のヘクトナノ秒の合計数を返します。</target>
        </trans-unit>
        <trans-unit id="6c865f4d77e9800572e98a2f1a5d9b39a0d7efc0" translate="yes" xml:space="preserve">
          <source>Returns the total number of microseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; のマイクロ秒の合計数を返します。</target>
        </trans-unit>
        <trans-unit id="648fc3b3189535dd15c9a6a00e81e8095cc6bed5" translate="yes" xml:space="preserve">
          <source>Returns the total number of milliseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; の合計ミリ秒数を返します。</target>
        </trans-unit>
        <trans-unit id="a8cd34fbc38761c3f13e5c165c425b258ccd54b6" translate="yes" xml:space="preserve">
          <source>Returns the total number of nanoseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; のナノ秒の合計数を返します。</target>
        </trans-unit>
        <trans-unit id="8854f536858e89b78eb3d04de3465d6d35dea0b7" translate="yes" xml:space="preserve">
          <source>Returns the total number of seconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TickDuration&lt;/code&gt; の合計秒数を返します。</target>
        </trans-unit>
        <trans-unit id="9abcff9844851c2944de9152e2bcfed4b6e58b33" translate="yes" xml:space="preserve">
          <source>Returns the total number of the given units in this &lt;code&gt;Duration&lt;/code&gt;. So, unlike &lt;code&gt;split&lt;/code&gt;, it does not strip out the larger units.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; 内の指定されたユニットの総数を返します。そのため、 &lt;code&gt;split&lt;/code&gt; とは異なり、より大きなユニットを取り除きません。</target>
        </trans-unit>
        <trans-unit id="37e7f4820738c99b6518e081fb070ea7c6f748f3" translate="yes" xml:space="preserve">
          <source>Returns the true size of the memory block referenced by p. This value represents the maximum number of bytes for which a call to realloc may resize the existing block in place. If p references memory not originally allocated by this garbage collector, points to the interior of a memory block, or if p is null, zero will be returned.</source>
          <target state="translated">この値は、realloc の呼び出しで既存のブロックのサイズを変更できる最大バイト数を表す。p がこのガベージコレクタによってもともと割り当てられていないメモリを参照している場合、 メモリブロックの内部を指している場合、または p が NULL の場合、ゼロが返されます。</target>
        </trans-unit>
        <trans-unit id="5d9315a66df13738ae6d32b7a4329655f0950696" translate="yes" xml:space="preserve">
          <source>Returns the type from TList that is the most derived from type T. If none are found, T is returned.</source>
          <target state="translated">TListから、T型から最も派生した型を返します。見つからなかった場合は T を返します。</target>
        </trans-unit>
        <trans-unit id="7dab75c2d8a3b6409914b5370705b9824076cf3b" translate="yes" xml:space="preserve">
          <source>Returns the type of &lt;code&gt;Target&lt;/code&gt; with the &quot;constness&quot; of &lt;code&gt;Source&lt;/code&gt;. A type's &lt;b&gt;constness&lt;/b&gt; refers to whether it is &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, or &lt;code&gt;inout&lt;/code&gt;. If &lt;code&gt;source&lt;/code&gt; has no constness, the returned type will be the same as &lt;code&gt;Target&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; の「constness」を持つ &lt;code&gt;Target&lt;/code&gt; のタイプを返します。型の&lt;b&gt;constness&lt;/b&gt;は、それが &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;immutable&lt;/code&gt; 、または &lt;code&gt;inout&lt;/code&gt; のいずれであるかを示します。 &lt;code&gt;source&lt;/code&gt; に定数がない場合、返されるタイプは &lt;code&gt;Target&lt;/code&gt; と同じになります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a2aeb4e0b982459aef2c815d392bf403ce3c4473" translate="yes" xml:space="preserve">
          <source>Returns the underlying operating system &lt;code&gt;HANDLE&lt;/code&gt; (Windows only).</source>
          <target state="translated">基本となるオペレーティングシステムの &lt;code&gt;HANDLE&lt;/code&gt; 返します（Windowsのみ）。</target>
        </trans-unit>
        <trans-unit id="17b2b4a9c5c7bcd9a7354071cc3a5232d4231e10" translate="yes" xml:space="preserve">
          <source>Returns the union of two intervals</source>
          <target state="translated">2つの区間の和を返します。</target>
        </trans-unit>
        <trans-unit id="e7c501dac1b7268ced06dc85b80d7924de744411" translate="yes" xml:space="preserve">
          <source>Returns the unprocessed C arguments supplied when the process was started. Use this when you need to supply argc and argv to C libraries.</source>
          <target state="translated">プロセスの開始時に供給された未処理のC引数を返します。C ライブラリに argc と argv を供給する必要がある場合に使用します。</target>
        </trans-unit>
        <trans-unit id="c007f1a37fe33fed3c561280b7a895e57a158e23" translate="yes" xml:space="preserve">
          <source>Returns the value of x rounded downward to the next integer (toward negative infinity).</source>
          <target state="translated">xの値を次の整数(負の無限大に向かって)に丸めて返します。</target>
        </trans-unit>
        <trans-unit id="c0c00c639831eba70113ddd96d75683fb58d7421" translate="yes" xml:space="preserve">
          <source>Returns the value of x rounded upward to the next integer (toward positive infinity).</source>
          <target state="translated">xの値を次の整数(正の無限大に向かって)に丸めて返します。</target>
        </trans-unit>
        <trans-unit id="445a499f1640526d65d5a8f139903046c3786ff6" translate="yes" xml:space="preserve">
          <source>Returns the value stored in the &lt;code&gt;VariantN&lt;/code&gt; object, either by specifying the needed type or the index in the list of allowed types. The latter overload only applies to bounded variants (e.g. &lt;a href=&quot;#Algebraic&quot;&gt;&lt;code&gt;Algebraic&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">必要なタイプまたは許可されたタイプのリスト内のインデックスを指定することにより、 &lt;code&gt;VariantN&lt;/code&gt; オブジェクトに格納されている値を返します。後者のオーバーロードは、境界のあるバリアント（たとえば、&lt;a href=&quot;#Algebraic&quot;&gt; &lt;code&gt;Algebraic&lt;/code&gt; &lt;/a&gt;）にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="53f9fd0298da963256576aa88b5974b5fec2ec49" translate="yes" xml:space="preserve">
          <source>Returns the value stored in the &lt;code&gt;VariantN&lt;/code&gt; object, explicitly converted (coerced) to the requested type &lt;code&gt; T&lt;/code&gt;. If &lt;code&gt;T&lt;/code&gt; is a string type, the value is formatted as a string. If the &lt;code&gt;VariantN&lt;/code&gt; object is a string, a parse of the string to type &lt;code&gt;T&lt;/code&gt; is attempted. If a conversion is not possible, throws a &lt;code&gt; VariantException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; オブジェクトに格納されている値を、要求された型 &lt;code&gt; T&lt;/code&gt; に明示的に変換（強制）して返します。場合 &lt;code&gt;T&lt;/code&gt; は、文字列型であり、値が文字列としてフォーマットされます。 &lt;code&gt;VariantN&lt;/code&gt; オブジェクトが文字列の場合、文字列を解析して &lt;code&gt;T&lt;/code&gt; と入力します。変換が不可能な場合は、 &lt;code&gt; VariantException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="48189500a40f8c94061c43ce5944a3669d6bfa4e" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;fn&lt;/code&gt; accepts variables of type T1 and T2 in any order. The following code should compile:</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; が T1型とT2型の変数を任意の順序で受け入れる場合、trueを返します。次のコードはコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="d870c305b9b513fe09e9c721a070b449320af29c" translate="yes" xml:space="preserve">
          <source>Returns true if T can be converted to boolean value.</source>
          <target state="translated">Tをブール値に変換できる場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="92392ba9585b402967ab099601644ad8bd94b55e" translate="yes" xml:space="preserve">
          <source>Returns true if T is an instance of the template S.</source>
          <target state="translated">TがテンプレートSのインスタンスである場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="6539c25106b4f2005acb105be2b679719cddee45" translate="yes" xml:space="preserve">
          <source>Returns true if T is not const or immutable. Note that isMutable is true for string, or immutable(char)[], because the 'head' is mutable.</source>
          <target state="translated">Tがconstまたはimmutableでない場合に真を返します。文字列やimmutable(char)[]の場合はisMutableが真であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2198152aab84ea1a6b609fc9bd4b6cc95d387179" translate="yes" xml:space="preserve">
          <source>Returns true if all input data has been decompressed and no further data can be decompressed (inflate() returned Z_STREAM_END)</source>
          <target state="translated">すべての入力データが解凍され、それ以上のデータが解凍できない場合に真を返します (inflate()は Z_STREAM_END を返します)。</target>
        </trans-unit>
        <trans-unit id="fd36125606afbfcb1797e463d3605d76f3b24284" translate="yes" xml:space="preserve">
          <source>Returns true if and only if the &lt;code&gt;VariantN&lt;/code&gt; object holds a valid value (has been initialized with, or assigned from, a valid value).</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; オブジェクトが有効な値を保持している（有効な値で初期化されている、または有効な値から割り当てられている）場合にのみ、trueを返します。</target>
        </trans-unit>
        <trans-unit id="d43c784814e287a641bf4db270b5cbd743297de6" translate="yes" xml:space="preserve">
          <source>Returns true if and only if the UUID is equal to {00000000-0000-0000-0000-000000000000}</source>
          <target state="translated">UUID が {00000000-0000-0000-0000-0000-000000000000}と等しい場合にのみ真を返します。</target>
        </trans-unit>
        <trans-unit id="c0dbc3cc30ee131794229d2fb5db22ec243b5fb1" translate="yes" xml:space="preserve">
          <source>Returns true if any of the symbols &lt;code&gt;p&lt;/code&gt; resides in the enclosing instantiation scope of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">シンボル &lt;code&gt;p&lt;/code&gt; のいずれかが &lt;code&gt;s&lt;/code&gt; の囲んでいるインスタンス化スコープ内にある場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="22613bad77cef50f9c9046836f0a47434aa4b19c" translate="yes" xml:space="preserve">
          <source>Returns true if c is a valid code point</source>
          <target state="translated">cが有効なコードポイントである場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="23810ab31c324d9a98c14b96b7f48dbc629ea7e1" translate="yes" xml:space="preserve">
          <source>Returns true if function was declared directly or indirectly in a unittest block</source>
          <target state="translated">unittestブロック内で関数が直接または間接的に宣言されている場合に真を返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
