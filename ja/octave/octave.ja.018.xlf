<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="octave">
    <body>
      <group id="octave">
        <trans-unit id="e191ebadaef53acf169ddf6fd8ef1bf5d4e121cc" translate="yes" xml:space="preserve">
          <source>The filter string can also contain a semicolon separated list of filter extensions. Example: &lt;code&gt;uiputfile ({&quot;*.gif;*.png;*.jpg&quot;,
&quot;Supported Picture Formats&quot;})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c748114ea343f34fb1d69e2f52fa7f2d22f0a75" translate="yes" xml:space="preserve">
          <source>The final optional argument &lt;var&gt;opt&lt;/var&gt; controls the behavior of the dialog. If &lt;var&gt;opt&lt;/var&gt; is a string, it may be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21029e4c665c1fde379fd314a6fb7fb085578957" translate="yes" xml:space="preserve">
          <source>The final optional argument determines the class of the resulting matrix. Possible values for &lt;var&gt;class&lt;/var&gt;: &lt;code&gt;&quot;single&quot;&lt;/code&gt;, &lt;code&gt;&quot;double&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;double&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d1e2008172d715d88ebf0d16e5ca932a8d4a1d" translate="yes" xml:space="preserve">
          <source>The final optional argument determines the class of the resulting matrix. Possible values for &lt;var&gt;class&lt;/var&gt;: &lt;code&gt;&quot;uint8&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint16&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint32&quot;&lt;/code&gt;, &lt;code&gt;&quot;int8&quot;&lt;/code&gt;, &lt;code&gt;&quot;int16&quot;&lt;/code&gt;, int32&quot;, &lt;code&gt;&quot;single&quot;&lt;/code&gt;, &lt;code&gt;&quot;double&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;double&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef08cf19b0d28fadf527de9f10689172e3ee5ae6" translate="yes" xml:space="preserve">
          <source>The final output &lt;var&gt;fjac&lt;/var&gt; contains the value of the Jacobian evaluated at &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d13b57299fd13db4b07ef1e6336c3aa1478245" translate="yes" xml:space="preserve">
          <source>The first &lt;var&gt;value&lt;/var&gt; number of lines of &lt;var&gt;fid&lt;/var&gt; are skipped. Note that this does not refer to the first non-comment lines, but the first lines of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42db6506888a1781ac38c2f6749017f8be5a6d1" translate="yes" xml:space="preserve">
          <source>The first argument &lt;var&gt;tree&lt;/var&gt; is a vector of predecessors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ae82800fa402f5fae4b2b33e96ac75eb4cfbb7" translate="yes" xml:space="preserve">
          <source>The first argument can also be a valid graphics handle &lt;var&gt;h&lt;/var&gt;, in which case &lt;code&gt;brighten&lt;/code&gt; is applied to the colormap associated with this handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a75bb0ce243ca6475732e8b6a25ca5ce9fe2dd" translate="yes" xml:space="preserve">
          <source>The first argument is the initial guess for the vector &lt;var&gt;x0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e856db31b4c520af5f4b6ac05e37a946ae25b1" translate="yes" xml:space="preserve">
          <source>The first argument is vector of predecessors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3f4261a55079a282871ce97e15fc3ea4f78d1a" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;var&gt;fcn&lt;/var&gt;, is a string, inline, or function handle that names the function &lt;em&gt;f&lt;/em&gt; to call to compute the vector of residuals for the set of equations. It must have the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768e477508f1c34626e66353f24c7315e0e3ee71" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;var&gt;fcn&lt;/var&gt;, is a string, inline, or function handle that names the function &lt;em&gt;f&lt;/em&gt; to call to compute the vector of right hand sides for the set of equations. The function must have the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9928177fc1442ede69dd4bbb77176ef640ca019f" translate="yes" xml:space="preserve">
          <source>The first call form uses a template &lt;var&gt;template&lt;/var&gt; and optional additional arguments to display a message on the &lt;code&gt;stderr&lt;/code&gt; stream. The message is formatted using the same rules as the &lt;code&gt;printf&lt;/code&gt; family of functions (see &lt;a href=&quot;formatted-output#Formatted-Output&quot;&gt;Formatted Output&lt;/a&gt;) and prefixed by the character string &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5074d86a0145937b8f1064a072a3d1b1400366" translate="yes" xml:space="preserve">
          <source>The first calling form computes the partial fraction expansion for the quotient of the polynomials, &lt;var&gt;b&lt;/var&gt; and &lt;var&gt;a&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa21f5c8b2613e926e36280a84002f800f156b8" translate="yes" xml:space="preserve">
          <source>The first case is an ordinary scalar struct&amp;mdash;one field, one value. The second produces an empty struct array with one field and no values, since being passed an empty cell array of struct array values. When the value is a cell array containing a single entry, this becomes a scalar struct with that single entry as the value of the field. That single entry happens to be an empty cell array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3acccf779c93da3249a217c8975c9ef2fe4021" translate="yes" xml:space="preserve">
          <source>The first critical line is &lt;code&gt;#include &amp;lt;octave/oct.h&amp;gt;&lt;/code&gt; which makes available most of the definitions necessary for a C++ oct-file. Note that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e68b2069c3899ff83b51e780d6f2e3de9110c75" translate="yes" xml:space="preserve">
          <source>The first example below creates an uninitialized object, while the second example supplies an initial argument to the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab4858d47a59d16f1056f95d16b58989a2ef959" translate="yes" xml:space="preserve">
          <source>The first form of the &lt;code&gt;fopen&lt;/code&gt; function opens the named file with the specified mode (read-write, read-only, etc.) and architecture interpretation (IEEE big endian, IEEE little endian, etc.), and returns an integer value that may be used to refer to the file later. If an error occurs, &lt;var&gt;fid&lt;/var&gt; is set to -1 and &lt;var&gt;msg&lt;/var&gt; contains the corresponding system error message. The &lt;var&gt;mode&lt;/var&gt; is a one or two character string that specifies whether the file is to be opened for reading, writing, or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2aa69e8aa9a38fdcc2e3ad2f1de84cbbb00395" translate="yes" xml:space="preserve">
          <source>The first form uses the unpivoted algorithm, which is faster, but less stable. The second form uses a slower pivoted algorithm, which is more stable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4368ad7b8a01f01171f9b43681538b216e7f8e1" translate="yes" xml:space="preserve">
          <source>The first four calls above get information about the current settings, while the others change the current settings. The parameters are stored as pairs of keys and values, where the values are all floats and the keys are one of the following strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28be2c8484b3fc4adf9ae28aa20093616c14115c" translate="yes" xml:space="preserve">
          <source>The first input argument &lt;var&gt;func&lt;/var&gt; can be a string, a function handle, an inline function, or an anonymous function. The input argument &lt;var&gt;A&lt;/var&gt; can be a logic array, a numeric array, a string array, a structure array, or a cell array. By a call of the function &lt;code&gt;arrayfun&lt;/code&gt; all elements of &lt;var&gt;A&lt;/var&gt; are passed on to the named function &lt;var&gt;func&lt;/var&gt; individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed36c9242b557dab419df0729f2063f9e276d239" translate="yes" xml:space="preserve">
          <source>The first input is a matrix of dimensions describing the size of the output. The dimensions can also be input as comma-separated arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df575ef3bd4961495c5c00450e20acb55d24253a" translate="yes" xml:space="preserve">
          <source>The first input to the demonstration code is a user-supplied function and the remaining arguments are all passed to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0354feff1fb2fb4918b4fcfaf4c09651861bad" translate="yes" xml:space="preserve">
          <source>The first line &lt;code&gt;#include &quot;mex.h&quot;&lt;/code&gt; makes available all of the definitions necessary for a mex-file. One important difference between Octave and &lt;small&gt;MATLAB&lt;/small&gt; is that the header file &lt;code&gt;&quot;matrix.h&quot;&lt;/code&gt; is implicitly included through the inclusion of &lt;code&gt;&quot;mex.h&quot;&lt;/code&gt;. This is necessary to avoid a conflict with the Octave file &lt;code&gt;&quot;Matrix.h&quot;&lt;/code&gt; for operating systems and compilers that don&amp;rsquo;t distinguish between filenames in upper and lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a56628ffe67cfedaecb71bb81a7b3c5f36ee1d9" translate="yes" xml:space="preserve">
          <source>The first line demonstrates again that the size of the output in a given dimension is equal to the number of elements in the respective indexing component. In this case, the output has three elements in the second dimension (which corresponds to columns), so the result is a row vector. The example also shows how repeating entries in the index expression can be used to replicate elements in the output. The last example further proves that the shape of the indexing component is irrelevant, it is only the number of elements (2x2 = 4) which is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186279c3f3fd1f066e5132c02547996257c5fea4" translate="yes" xml:space="preserve">
          <source>The first non-comment line should look like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edb9c126aa5396d2c90bb2d12d5a7e664b53e92" translate="yes" xml:space="preserve">
          <source>The first output &lt;var&gt;x&lt;/var&gt; is the solution while the second output &lt;var&gt;fval&lt;/var&gt; contains the value of the function &lt;var&gt;fcn&lt;/var&gt; evaluated at &lt;var&gt;x&lt;/var&gt; (ideally a vector of all zeros).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7aa1f40e4c06a1295a8cd9256185c0287d6e9d0" translate="yes" xml:space="preserve">
          <source>The first output is the total time spent executing your process and is equal to the sum of second and third outputs, which are the number of CPU seconds spent executing in user mode and the number of CPU seconds spent executing in system mode, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda47d51e4a2aab5ed58c7e190d7c092bc81bdee" translate="yes" xml:space="preserve">
          <source>The first sentence is defined as the text after the function declaration until either the first period (&quot;.&quot;) or the first appearance of two consecutive newlines (&quot;\n\n&quot;). The text is truncated to a maximum length of &lt;var&gt;max_len&lt;/var&gt;, which defaults to 80. If the text must be truncated the last three characters of the text are replaced with &lt;code&gt;&quot;...&quot;&lt;/code&gt; to indicate that more text was available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e51f44948d4889e72a05a8c0fe76529159f0c3a" translate="yes" xml:space="preserve">
          <source>The first step in most image processing tasks is to load an image into Octave which is done with the &lt;code&gt;imread&lt;/code&gt; function. The &lt;code&gt;imwrite&lt;/code&gt; function is the corresponding function for writing images to the disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e201d1fe26ae25f15a3e3b2d98e12a7d6a65b30" translate="yes" xml:space="preserve">
          <source>The first step is to define the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cab923f2ac4530ae07267895ce8d6f91c58898c" translate="yes" xml:space="preserve">
          <source>The first thing the &lt;code&gt;while&lt;/code&gt; statement does is test &lt;var&gt;condition&lt;/var&gt;. If &lt;var&gt;condition&lt;/var&gt; is true, it executes the statement &lt;var&gt;body&lt;/var&gt;. After &lt;var&gt;body&lt;/var&gt; has been executed, &lt;var&gt;condition&lt;/var&gt; is tested again, and if it is still true, &lt;var&gt;body&lt;/var&gt; is executed again. This process repeats until &lt;var&gt;condition&lt;/var&gt; is no longer true. If &lt;var&gt;condition&lt;/var&gt; is initially false, the body of the loop is never executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8262785dccbd1cdddbc16b679c2841cda30b822" translate="yes" xml:space="preserve">
          <source>The first word of the input is matched to the first specifier of the format and placed in the first column of the output; the second is matched to the second specifier and placed in the second column and so forth. If there are more words than specifiers then the process is repeated until all words have been processed or the limit imposed by &lt;var&gt;repeat&lt;/var&gt; has been met (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51f4843ac05fec46edaa05de7b68b5344ea0a7a" translate="yes" xml:space="preserve">
          <source>The fitted spline is returned as a piecewise polynomial, &lt;var&gt;pp&lt;/var&gt;, and may be evaluated using &lt;code&gt;ppval&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2247f2f1f60b69b0efbf156716d004e78e2565" translate="yes" xml:space="preserve">
          <source>The flag &lt;var&gt;algorithm&lt;/var&gt; can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e012d6c1ddbecbc551e689a9e9445e4bb816f42" translate="yes" xml:space="preserve">
          <source>The flag &lt;var&gt;balanceOption&lt;/var&gt; can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9adb72d4c6e543ff89f68f26aa6c2de58fbe8e" translate="yes" xml:space="preserve">
          <source>The flag &lt;var&gt;eigvalOption&lt;/var&gt; can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb99a8cd339f40a4c020fe3c95e4d6981f55d1a" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;accumarray&lt;/code&gt; example constructs a frequency table that in the first column counts how many occurrences each number in the second column has, taken from the vector &lt;var&gt;x&lt;/var&gt;. Note the usage of &lt;code&gt;unique&lt;/code&gt; for assigning to all repeated elements of &lt;var&gt;x&lt;/var&gt; the same index (see &lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d473726769f5f6bef0470f2c66826e3054401be" translate="yes" xml:space="preserve">
          <source>The following are examples of vectorization questions asked by actual users of Octave and their solutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8286d4dfcfb4cccb7f37ba253e62caf8957765" translate="yes" xml:space="preserve">
          <source>The following are valid options, but may not be combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ae760b01cebde8790beb1945fe2485e2d0e3d2" translate="yes" xml:space="preserve">
          <source>The following arithmetic operators are available, and work on scalars and matrices. The element-by-element operators and functions broadcast (see &lt;a href=&quot;broadcasting#Broadcasting&quot;&gt;Broadcasting&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab151b17ed4aa4656226a76741b3cef6e702266" translate="yes" xml:space="preserve">
          <source>The following can be used to solve a linear system &lt;code&gt;A*x = b&lt;/code&gt; using the pivoted LU factorization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d039df8c2b023f5101cce2272e459ebcc3bcde0" translate="yes" xml:space="preserve">
          <source>The following chapters describe all of Octave&amp;rsquo;s features in detail, but before doing that, it might be helpful to give a sampling of some of its capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f106ac960813411f641dcf72c68b721951c385" translate="yes" xml:space="preserve">
          <source>The following code demonstrates reshaping a 1x4 row vector into a 2x2 square matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0240bf775f9c222924b5f0a0f13e9b0e08c74a6" translate="yes" xml:space="preserve">
          <source>The following command restores the default camera roll:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed782f4a25b37e102aefdd5065ded9777bf7fe9c" translate="yes" xml:space="preserve">
          <source>The following command sequences are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfd75bf4cf1a03cea81a1ccc52591251977fb40" translate="yes" xml:space="preserve">
          <source>The following commands allow Octave to complete command and variable names for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6505ecf910c77e5aff4fcd19243c86a302d88df1" translate="yes" xml:space="preserve">
          <source>The following commands allow you to position the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f721a4d47739653cca9c351dfe43d0704d200cb6" translate="yes" xml:space="preserve">
          <source>The following commands can be used for entering characters that would otherwise have a special meaning (e.g.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08de547e8e1044040ef948fbbf5d3ed7fe9266be" translate="yes" xml:space="preserve">
          <source>The following control fields are used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f27a03dcc8d3785f62713a5f79765b69679df24" translate="yes" xml:space="preserve">
          <source>The following convenience functions are available for conversion between image formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424d7aa2cfe4dcd761708f0cbca7a7ce9c96b739" translate="yes" xml:space="preserve">
          <source>The following customizations are available using &lt;var&gt;option&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6120270381e17e6e1fd86c6bcecc7cee338a1955" translate="yes" xml:space="preserve">
          <source>The following defaults are used for unspecified arguments: &lt;var&gt;win_size&lt;/var&gt; = 80, &lt;var&gt;inc&lt;/var&gt; = 24, &lt;var&gt;num_coef&lt;/var&gt; = 64, and &lt;var&gt;win_type&lt;/var&gt; = 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fce84811df0c4cffd71827273a29f5ba70e3059" translate="yes" xml:space="preserve">
          <source>The following example creates a simple rectangular 2-D electrically conductive medium with 10 V and 20 V imposed on opposite sides (Dirichlet boundary conditions). All other edges are electrically isolated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a010ec7d3211dcfc9b4ce5fbe30e84da9486234" translate="yes" xml:space="preserve">
          <source>The following example creates the variable &lt;var&gt;A&lt;/var&gt; with the approximate value of 3.1416 in the current workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbde0341f5192b2e4223ec90ed5e6e654a91ea1a" translate="yes" xml:space="preserve">
          <source>The following example indicates that in Octave empty brackets &lt;code&gt;[]&lt;/code&gt; represent Java&amp;rsquo;s &lt;code&gt;null&lt;/code&gt; value and how Java exceptions are represented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ec63b80d83e5a57c4cc37ce72d14920493cf73" translate="yes" xml:space="preserve">
          <source>The following example is a simple-minded function using &lt;code&gt;feval&lt;/code&gt; that finds the root of a user-supplied function of one variable using Newton&amp;rsquo;s method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2f439e4debce4bb58773e8083e8ff7da6e1296" translate="yes" xml:space="preserve">
          <source>The following example modifies the face and edge colors using property/value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473d43c9e6ba103d75077b62374f19c6ce4fd724" translate="yes" xml:space="preserve">
          <source>The following example plots filled contours of the &lt;code&gt;peaks&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e32dc9d65b2e7eca998ed6821f4992022054ee" translate="yes" xml:space="preserve">
          <source>The following example prints a message and then waits 5 seconds before clearing the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fc37bc85cce512b7b094237e604dc8eff00800" translate="yes" xml:space="preserve">
          <source>The following example reads a file and writes an untabified version of the same file with trailing spaces stripped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0f7360b4195f3f7fcc6285070f8bea8081bbdf" translate="yes" xml:space="preserve">
          <source>The following example returns 150 integers in the range 1&amp;ndash;10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0131f9fc11a46dee6ba91ae6edeefde91272d523" translate="yes" xml:space="preserve">
          <source>The following example shows another way to create a vector containing the first ten elements of the Fibonacci sequence, this time using the &lt;code&gt;for&lt;/code&gt; statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0902515e66e5b564ecb3a258703b5cd4f91b482" translate="yes" xml:space="preserve">
          <source>The following example shows how to combine two linear functions and a quadratic into one function. Each of these functions is expressed on adjoined intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188411a12aa5af89ea619241027214d6592cd78e" translate="yes" xml:space="preserve">
          <source>The following example shows how to convert the linear indices &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;8&lt;/code&gt; in a 3-by-3 matrix into subscripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ee3c3b29d82c7cc8407d02775215448dcc1088" translate="yes" xml:space="preserve">
          <source>The following example shows how to convert the two-dimensional indices &lt;code&gt;(2,1)&lt;/code&gt; and &lt;code&gt;(2,3)&lt;/code&gt; of a 3-by-3 matrix to linear indices with a single call to &lt;code&gt;sub2ind&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02161dd141da22a1f8a889cc33ce17b2cbbc5b2" translate="yes" xml:space="preserve">
          <source>The following example shows how to extract the first two columns of a matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30d9fc51d6f4bbfee2ce9f61ec2a42d72f7a35c" translate="yes" xml:space="preserve">
          <source>The following example shows how to invoke the constructors &lt;code&gt;BigDecimal(double)&lt;/code&gt; and &lt;code&gt;BigDecimal(String)&lt;/code&gt; of the builtin Java class &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fcfac0950e7fead9a34ae1e453f5286547143b" translate="yes" xml:space="preserve">
          <source>The following example shows how to just remove the contents of cell array elements but not delete the space for them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1243f5a350e91d43bfa344c659f93222a0309af5" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the two first columns of a 3-by-3 matrix to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53979da2fcd34367e84d0113e06fa7d9d95e8e53" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65a438ed33213195beb7d42c827577ac2fe75ce" translate="yes" xml:space="preserve">
          <source>The following example stores the current file position in the variable &lt;code&gt;marker&lt;/code&gt;, moves the pointer to the beginning of the file, reads four characters, and then returns to the original position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954466f0c61f46388134ded53c72a8b2ac20b0a2" translate="yes" xml:space="preserve">
          <source>The following example uses a persistent variable to create a function that prints the number of times it has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311ae1ff6bb5f33f0ceb0c03b0dcc0c4f41edf50" translate="yes" xml:space="preserve">
          <source>The following example will create an audioplayer object that will play back one second of white noise at 44100 sample rate using 8 bits per sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae49c6c55f8020406894297146d1e27b81cc9e61" translate="yes" xml:space="preserve">
          <source>The following expression is a way to efficiently calculate the sign of a permutation, given by a permutation vector &lt;var&gt;p&lt;/var&gt;. It will also work in earlier versions of Octave, but slowly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8aa01c1351081f1539133b012228cc07bec2f3c" translate="yes" xml:space="preserve">
          <source>The following expressions all produce the same result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5de1b3c1c49da50e27f464c0b2665bf4dacc9c0" translate="yes" xml:space="preserve">
          <source>The following external package is optional but strongly recommended:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789edad1fed9cd4aaba525cfe1057770f92125ff" translate="yes" xml:space="preserve">
          <source>The following external packages are required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359e8a1039076bc851c7143b55c22d37b0abaf0a" translate="yes" xml:space="preserve">
          <source>The following external software packages are optional but recommended:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375970b31453f674e3d000f151e872ba07d25043" translate="yes" xml:space="preserve">
          <source>The following flags are meaningful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24d3120e4cca4032e08e336379da3a2e7ac5c6b" translate="yes" xml:space="preserve">
          <source>The following flags can be used to modify the behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dea4271fcadca559f37060b57c6a3afef93af99" translate="yes" xml:space="preserve">
          <source>The following formats affect all numeric output (floating point and integer types).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505a5c5917d8180549935dace4c11a193aaa6731" translate="yes" xml:space="preserve">
          <source>The following functions allow you to determine the size of a variable or expression. These functions are defined for all objects. They return -1 when the operation doesn&amp;rsquo;t make sense. For example, Octave&amp;rsquo;s data structure type doesn&amp;rsquo;t have rows or columns, so the &lt;code&gt;rows&lt;/code&gt; and &lt;code&gt;columns&lt;/code&gt; functions return -1 for structure arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994963024fb5343ca9b534272e3343e0fa6167e0" translate="yes" xml:space="preserve">
          <source>The following functions allow you to read, write and retrieve information about audio files. Various formats are supported including wav, flac and ogg vorbis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5580a978bc640353a4a9fd3f5683189a1de19f83" translate="yes" xml:space="preserve">
          <source>The following functions are available for determining the type of a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052d58f14d6ec8bd1c6877a59b99008806db4943" translate="yes" xml:space="preserve">
          <source>The following functions are available for formatted output. They are modeled after the C language functions of the same name, but they interpret the format template differently in order to improve the performance of printing vector and matrix values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d09ee5c91d2389a3a9a7f8116312605892b0258" translate="yes" xml:space="preserve">
          <source>The following functions are principally used internally by Octave for generating the documentation. They are documented here for completeness and because they may occasionally be useful for users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcbb1b4a4e363f8d1988e62f08147debde678ea" translate="yes" xml:space="preserve">
          <source>The following functions are the core of the Java Interface. They provide a way to create a Java object, get and set its data fields, and call Java methods which return results to Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a44e73a427daf2eae568304983d49ae911aaa9" translate="yes" xml:space="preserve">
          <source>The following functions can be used to change which programs are used for displaying the documentation, and where the documentation can be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9814440d6eba563071d4ed0894100e952f8d2774" translate="yes" xml:space="preserve">
          <source>The following functions can be used to manipulate colormaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c0f7ac8122814088d0fb7a69d2de69bec5c29c" translate="yes" xml:space="preserve">
          <source>The following functions provide information and control over the interface between Octave and the Java Virtual Machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c29274e68a8b1d4e17ff9cc661a99cae696818a" translate="yes" xml:space="preserve">
          <source>The following functions return famous matrix forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677a167db8b90ca9b9ff108351465cb2ce13f03c" translate="yes" xml:space="preserve">
          <source>The following functions return predefined colormaps, the same that can be requested by name using the &lt;code&gt;colormap&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336c5ad0dd0bf05428f5a94178dfc0bf83ed2efe" translate="yes" xml:space="preserve">
          <source>The following identifiers are keywords, and may not be used as variable or function names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c185d21656f322ad3a552d18eb5a11f24d0a17d0" translate="yes" xml:space="preserve">
          <source>The following instructions were tested with the development version of Octave and GCC 4.3.4 on an x86_64 Debian system and may be out of date now. Please report any problems or corrections on the Octave bug tracker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ce51c013d430226e9d2778d0820d7efa158e13" translate="yes" xml:space="preserve">
          <source>The following is a complete example. To solve the set of equations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7483b782d6c5431ad24f02988bcffb9b0b40baba" translate="yes" xml:space="preserve">
          <source>The following is a list of all the function file subdirectories, and the types of functions you will find there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6bbd48a3ac2b23a6f35682137cab915473c80f" translate="yes" xml:space="preserve">
          <source>The following is a more complex example. If there was an original version of &lt;code&gt;xcorr&lt;/code&gt; using for loops and a second version using an FFT, then one could compare the run speed for various lags as follows, or for a fixed lag with varying vector lengths as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150598ada2ba40c43cf1a5ff815b00cd5058c12a" translate="yes" xml:space="preserve">
          <source>The following is a simple example of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3fcc9f384466dc35bca891b037a7636b8fe50d" translate="yes" xml:space="preserve">
          <source>The following methods allow you to retrieve recorded audio data in various ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b75625fecc12f7bc01543151358f43b7daf6967" translate="yes" xml:space="preserve">
          <source>The following methods are used to control player playback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2011da4b225de8a658ca0a64567d963242c5ec" translate="yes" xml:space="preserve">
          <source>The following methods are used to create and use audioplayer objects. These objects can be used to play back audio data stored in Octave matrices and arrays. The audioplayer object supports playback from various devices available to the system, blocking and non-blocking playback, convenient pausing and resuming and much more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea95ef7f01913bedd2e88f8b2b9224bae30d70c" translate="yes" xml:space="preserve">
          <source>The following methods are used to create and use audiorecorder objects. These objects can be used to record audio data from various devices available to the system. You can use convenient methods to retrieve that data or audioplayer objects created from that data. Methods for blocking and non-blocking recording, pausing and resuming recording and much more is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b89dc572b960a9a5115fc9b234a1904fc6f44e5" translate="yes" xml:space="preserve">
          <source>The following methods control the recording process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e5489b3dd044c692dfe115f71012c686eeadde" translate="yes" xml:space="preserve">
          <source>The following options affect the appearance of tick marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee2e20944379de6e2b46acdc2b7f5131069f3b5" translate="yes" xml:space="preserve">
          <source>The following options affect the direction of increasing values on the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad11558cfc8f1030104e59502248521a90412e01" translate="yes" xml:space="preserve">
          <source>The following options affects the visibility of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0186fa5cb6fc9bc3da1535ddf39aa7d66240a4" translate="yes" xml:space="preserve">
          <source>The following options are available in both long and short form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1551395f2bf02c48bc808fdcecd2100fb26cfe7c" translate="yes" xml:space="preserve">
          <source>The following options can be passed for &lt;var&gt;feature&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d026f64a31c153bd51e6ae67a81e7fa2e34db0d" translate="yes" xml:space="preserve">
          <source>The following options control the aspect ratio of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc20617fec09895fa0dca674dbaaaf00a4bde1e1" translate="yes" xml:space="preserve">
          <source>The following options control the way axis limits are interpreted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c31437f1c0e859981fe30e5c99046dcf5c1c4ba" translate="yes" xml:space="preserve">
          <source>The following problem demonstrates how to factorize a sample symmetric positive definite matrix with the full Cholesky decomposition and with the incomplete one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7baa0ca67f1a42a53a0029ace6d611e6892c06" translate="yes" xml:space="preserve">
          <source>The following specifiers are valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2061c0ab31a3a090dea095da8a8ee256dec030d6" translate="yes" xml:space="preserve">
          <source>The following string functions support cell arrays of strings: &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;strvcat&lt;/code&gt;, &lt;code&gt;strcat&lt;/code&gt; (see &lt;a href=&quot;concatenating-strings#Concatenating-Strings&quot;&gt;Concatenating Strings&lt;/a&gt;), &lt;code&gt;strcmp&lt;/code&gt;, &lt;code&gt;strncmp&lt;/code&gt;, &lt;code&gt;strcmpi&lt;/code&gt;, &lt;code&gt;strncmpi&lt;/code&gt; (see &lt;a href=&quot;comparing-strings#Comparing-Strings&quot;&gt;Comparing Strings&lt;/a&gt;), &lt;code&gt;str2double&lt;/code&gt;, &lt;code&gt;deblank&lt;/code&gt;, &lt;code&gt;strtrim&lt;/code&gt;, &lt;code&gt;strtrunc&lt;/code&gt;, &lt;code&gt;strfind&lt;/code&gt;, &lt;code&gt;strmatch&lt;/code&gt;, , &lt;code&gt;regexp&lt;/code&gt;, &lt;code&gt;regexpi&lt;/code&gt; (see &lt;a href=&quot;manipulating-strings#Manipulating-Strings&quot;&gt;Manipulating Strings&lt;/a&gt;) and &lt;code&gt;str2double&lt;/code&gt; (see &lt;a href=&quot;string-conversions#String-Conversions&quot;&gt;String Conversions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3b201c476e1e573036c0b5ffdb341dcf9f82e2" translate="yes" xml:space="preserve">
          <source>The following table shows, for each built-in numerical operation, the corresponding function name to use when providing an overloaded method for a user class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6720e7d08d824b58c05adf471401ebec0998920a" translate="yes" xml:space="preserve">
          <source>The following table summarizes the available random number generators (in alphabetical order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a736aa1044d03ed2c68551071f6df2dd947dff5" translate="yes" xml:space="preserve">
          <source>The following table summarizes the supported distributions (in alphabetical order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafc8baa7dfe0b11af7060e2cdca242f2c1ee22a" translate="yes" xml:space="preserve">
          <source>The following three functions are used to display and modify the class path used by the Java Virtual Machine. This is entirely separate from Octave&amp;rsquo;s &lt;code&gt;PATH&lt;/code&gt; variable and is used by the JVM to find the correct code to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74c0a9a0e91c7335f5b7ac6b64e57d7e255645b" translate="yes" xml:space="preserve">
          <source>The following three functions modify the existing colormap rather than replace it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fcb73ca35ddfd1da20789952f8497a24b39df3" translate="yes" xml:space="preserve">
          <source>The following tools are required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8869261b7164aeda04bd14074d02fa0717eaba" translate="yes" xml:space="preserve">
          <source>The following trivial code snippet provides examples for the use of fail, assert, error, and xtest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb0407d04c29fec57875d605c80b52cb44781b3" translate="yes" xml:space="preserve">
          <source>The following two options affect the display of all matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5961062f1822d82e89b1eb9e90ccea629e3c23" translate="yes" xml:space="preserve">
          <source>The following values may be passed as &lt;var&gt;request&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1eec3fde468de057064817aa5293270781a9471" translate="yes" xml:space="preserve">
          <source>The following variables are available for customizing the appearance of the command-line prompts. Octave allows the prompt to be customized by inserting a number of backslash-escaped special characters that are decoded as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fab332fd151c16d0cebaf8e567e003547c08c35" translate="yes" xml:space="preserve">
          <source>The for Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8b77b03c7831eb4a9ec99648921c74f35050bd" translate="yes" xml:space="preserve">
          <source>The form specifying &lt;var&gt;event&lt;/var&gt; does not cause a specific breakpoint at a given function and line number. Instead it causes debug mode to be entered when certain unexpected events are encountered. Possible values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423982316ba39b9730a16358f2500b01dafe35c9" translate="yes" xml:space="preserve">
          <source>The format can be summarized with the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43164f0ef1e1ce976f3e4b2cc9c05ed2872900c" translate="yes" xml:space="preserve">
          <source>The format of the current machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574c2bd90c13723219075f4dd965c8a6d9c21314" translate="yes" xml:space="preserve">
          <source>The format string is passed to &lt;code&gt;strftime&lt;/code&gt; and must begin with the character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04176e7082d531a969eda7f020d26f889815095f" translate="yes" xml:space="preserve">
          <source>The format string is passed to &lt;code&gt;strftime&lt;/code&gt;. The default value is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ff28ee86f1523da6e57f8898a36003b7627cf7" translate="yes" xml:space="preserve">
          <source>The formatted input functions are not used as frequently as the formatted output functions. Partly, this is because it takes some care to use them properly. Another reason is that it is difficult to recover from a matching error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778cbb78c76cc20989ccdf710a4846404a125036" translate="yes" xml:space="preserve">
          <source>The formatted polynomial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de678c8e633d2713a3b2639cea34dd6ff21854d6" translate="yes" xml:space="preserve">
          <source>The formatting of the labels is determined by the variable &lt;var&gt;date_format&lt;/var&gt;, which can either be a string or positive integer that &lt;code&gt;datestr&lt;/code&gt; accepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4227de2d1e076eb3275cd34080d28ccc9c7184e4" translate="yes" xml:space="preserve">
          <source>The fourth argument is optional, and may be used to specify a set of times that the ODE solver should not integrate past. It is useful for avoiding difficulties with singularities and points where there is a discontinuity in the derivative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da56694efab729eab486f7f9e033cb5405c4173c" translate="yes" xml:space="preserve">
          <source>The fourth output is a structure &lt;var&gt;output&lt;/var&gt; containing runtime about the algorithm. Fields in the structure are &lt;code&gt;funcCount&lt;/code&gt; containing the number of function calls to &lt;var&gt;fun&lt;/var&gt;, &lt;code&gt;iterations&lt;/code&gt; containing the number of iteration steps, &lt;code&gt;algorithm&lt;/code&gt; with the name of the search algorithm (always: &lt;code&gt;&quot;Nelder-Mead simplex direct search&quot;&lt;/code&gt;), and &lt;code&gt;message&lt;/code&gt; with the exit message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a0e136f2eda7759f092adbb384999bf5c95982" translate="yes" xml:space="preserve">
          <source>The fractional part, &lt;code&gt;rem (&lt;var&gt;days&lt;/var&gt;, 1)&lt;/code&gt; corresponds to the time on the given day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48622f90f858bd7c2ca436fb47c232cf22f57877" translate="yes" xml:space="preserve">
          <source>The fractional part, &lt;code&gt;rem (now, 1)&lt;/code&gt; corresponds to the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931edb1020ef74a20e66c39a24e8cdb9f0438421" translate="yes" xml:space="preserve">
          <source>The frequencies from &lt;em&gt;[2*pi*a/t, 2*pi*b/T]&lt;/em&gt; are used for the estimation. If &lt;var&gt;b&lt;/var&gt; is omitted, the interval &lt;em&gt;[2*pi/T, 2*pi*a/T]&lt;/em&gt; is used. If both &lt;var&gt;b&lt;/var&gt; and &lt;var&gt;a&lt;/var&gt; are omitted then &lt;em&gt;a = 0.5 * sqrt (T)&lt;/em&gt; and &lt;em&gt;b = 1.5 * sqrt (T)&lt;/em&gt; is used, where &lt;em&gt;T&lt;/em&gt; is the sample size. If &lt;var&gt;x&lt;/var&gt; is a matrix, the differencing parameter of each column is estimated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7bf79f32c1a9eba4a226dc8394680bb6c353cf" translate="yes" xml:space="preserve">
          <source>The full list of properties is documented at &lt;a href=&quot;uimenu-properties#Uimenu-Properties&quot;&gt;Uimenu Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9162fd612208fe8a811a1e49683d531bb16d0f" translate="yes" xml:space="preserve">
          <source>The full name of the image file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18517944a2e77a2490fd3001d04460fe3fe7bc8" translate="yes" xml:space="preserve">
          <source>The full path of the downloaded file is returned in &lt;var&gt;f&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcd5651b4a3c3852d5bf2e169a477e3f9a0a22b" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;java-interface-functions#XREFjavaObject&quot;&gt;javaObject&lt;/a&gt; creates Java objects. In fact it invokes the public constructor of the class with the given name and with the given parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f4d79ce74f16fae29f16586b7990d991284fd4" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&quot;f&quot;&lt;/code&gt; can be the string name of a function, a function handle, or an inline function. These options make it quite easy to do integration without having to fully define a function in an m-file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a125a25a63edc47fb9afc19aa5b18d7be001544" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;clc&lt;/code&gt; will allow you to clear the screen from within Octave programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3487c03c63b3e1e921c45b5199271411b18b9be" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;ctime (time)&lt;/code&gt; is equivalent to &lt;code&gt;asctime (localtime (time))&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4d76dbb08f03cf3a1125b5bb016c0f8650f263" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;daspk&lt;/code&gt; can be used to solve DAEs of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2e06a80b8beb65adc0ee1e7bf0affc556c0082" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fclose&lt;/code&gt; may also be used for the same purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75da9440c23fff144339d5194b1ffb4a4170666e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;feval&lt;/code&gt; can also be used with function handles of any sort (see &lt;a href=&quot;function-handles#Function-Handles&quot;&gt;Function Handles&lt;/a&gt;). Historically, &lt;code&gt;feval&lt;/code&gt; was the only way to call user-supplied functions in strings, but function handles are now preferred due to the cleaner syntax they offer. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5f7f6283cd735aca6b8bb141636a1aee2f338f" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;gcf&lt;/code&gt; returns an index to the current figure object, or creates one if none exists. Similarly, &lt;code&gt;gca&lt;/code&gt; returns the current axes object, or creates one (and its parent figure object) if none exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6aa513e86f7ece3dde3c81a6aedbc266ad3e49e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;gsvd&lt;/code&gt; normally returns just the vector of generalized singular values &lt;code&gt;sqrt (diag (C'*C) ./ diag (S'*S))&lt;/code&gt;. If asked for five return values, it also computes U, V, X, and C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2142ff464c4e9f1a3735216bad3878f469506e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;humps&lt;/code&gt; is a useful function for testing zero and extrema finding functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f93e7507b865e67b0913d41dbd13b85500c5cbf" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;iscellstr&lt;/code&gt; can be used to test if an object is a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae3ac087cca691f10d9a0894cec41b5fed55553" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;ischar&lt;/code&gt; can be used to test if an object is a character matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33eea99c5fb12d8a2e512ac5a7b382f9e264ef85" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;iskeyword&lt;/code&gt; can be used to quickly check whether an identifier is reserved by Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100cb46bbe8dded70807817116f0b257c810c27f" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;isstruct&lt;/code&gt; can be used to test if an object is a structure or a structure array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ce73d5edf03a8265cbf763a710791f080eea0e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;line&lt;/code&gt; differs from &lt;code&gt;plot&lt;/code&gt; in that line objects are inserted in to the current axes without first clearing the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f576b8a5d86c0d94de50e981a384795819162a2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;loadobj&lt;/code&gt; is called when the object &lt;var&gt;a&lt;/var&gt; is loaded using the &lt;code&gt;load&lt;/code&gt; function. An example of the use of &lt;code&gt;saveobj&lt;/code&gt; might be to add fields to an object that don&amp;rsquo;t make sense to be saved. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a371cc24ecf422ee6ec4c720497a630bf1e427" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;lsode&lt;/code&gt; can be used to solve ODEs of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93bc03f3b7769440bd51931ac7abd7bafc82232" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;lsode&lt;/code&gt; uses the Livermore Solver for Ordinary Differential Equations, described in A. C. Hindmarsh,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372851991c6affd9bd437224023b035657e36512" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mesh&lt;/code&gt; produces mesh surface plots. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22035088c5ef7934e8f9a3e87574935b1fbdc6da" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;publish&lt;/code&gt; provides a dynamic possibility to document your script file. Unlike static documentation, &lt;code&gt;publish&lt;/code&gt; runs the script file, saves any figures and output while running the script, and presents them alongside static documentation in a desired output format. The static documentation can make use of &lt;a href=&quot;publishing-markup#Publishing-Markup&quot;&gt;Publishing Markup&lt;/a&gt; to enhance and customize the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25292e7f923a1aa23d16aa1b49a04ebe1c703f25" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;quad_options&lt;/code&gt; can set other optional parameters for &lt;code&gt;quad&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c981f0db749b25fea1362b832afe03b27c0eca84" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;saveobj&lt;/code&gt; is called when the object &lt;var&gt;a&lt;/var&gt; is saved using the &lt;code&gt;save&lt;/code&gt; function. An example of the use of &lt;code&gt;saveobj&lt;/code&gt; might be to remove fields of the object that don&amp;rsquo;t make sense to be saved or it might be used to ensure that certain fields of the object are initialized before the object is saved. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9065aafafd06b1652e3d6c3af947945aa2504ab1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;size&lt;/code&gt; will return the size of the structure. For the example above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af389f4d7adc1e76733aea0e931d087381f6c158" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;svd&lt;/code&gt; normally returns only the vector of singular values. When called with three return values, it computes &lt;var&gt;U&lt;/var&gt;, &lt;var&gt;S&lt;/var&gt;, and &lt;var&gt;V&lt;/var&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dada1db95327076d4507320c9ea1ac0eff033e00" translate="yes" xml:space="preserve">
          <source>The function &lt;em&gt;sparse&lt;/em&gt; allows a sparse matrix to be constructed from three vectors representing the row, column and data. Alternatively, the function &lt;em&gt;spconvert&lt;/em&gt; uses a three column matrix format to allow easy importation of data from elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffb2f5b129e37b25306862c63df8374d6f79000" translate="yes" xml:space="preserve">
          <source>The function &lt;em&gt;sparse&lt;/em&gt; or &lt;em&gt;spalloc&lt;/em&gt; can be used to create an empty matrix that is then filled by the user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c31c25e9f5b1adb67438a9c1b484b1df218db5e" translate="yes" xml:space="preserve">
          <source>The function &lt;em&gt;spconvert&lt;/em&gt; takes a three or four column real matrix. The first two columns represent the row and column index respectively and the third and four columns, the real and imaginary parts of the sparse matrix. The matrix can contain zero elements and the elements can be sorted in any order. Adding zero elements is a convenient way to define the size of the sparse matrix. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e813e733c6e31db73a46f43d36270352e3ec63d6" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;body&lt;/var&gt; consists of Octave statements. It is the most important part of the definition, because it says what the function should actually &lt;em&gt;do&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7dbdec829396f0271c30b794cf6d75092fe8f9" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;f&lt;/var&gt; is a string, inline function, or function handle with a single argument. The expected form of the function is &lt;code&gt;&lt;var&gt;rho&lt;/var&gt; = &lt;var&gt;f&lt;/var&gt;(&lt;var&gt;theta&lt;/var&gt;)&lt;/code&gt;. By default the plot is over the domain &lt;code&gt;0 &amp;lt;= &lt;var&gt;theta&lt;/var&gt; &amp;lt;= 2*pi&lt;/code&gt; with 500 points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a9414ba54c631704b431e2ec8cb5a1dbfca5d" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;f&lt;/var&gt; may be a string, inline function, or function handle and can have either one or two variables. If &lt;var&gt;f&lt;/var&gt; has one variable, then the function is plotted over the domain &lt;code&gt;-2*pi &amp;lt; &lt;var&gt;x&lt;/var&gt; &amp;lt; 2*pi&lt;/code&gt; with 500 points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918c1a47a2a9ba22dc3f4984e9085c070b8a5e61" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;fcn&lt;/var&gt; must be the same variable (not just the same value), as was passed to the original call to &lt;code&gt;addlistener&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8baae8b046d572ce0d8f0f35873f5fcc3d02c0e8" translate="yes" xml:space="preserve">
          <source>The function being debugged may be the leaf node of a series of function calls. After examining values in the current subroutine it may turn out that the problem occurred in earlier pieces of code. Use &lt;code&gt;dbup&lt;/code&gt; and &lt;code&gt;dbdown&lt;/code&gt; to move up and down through the series of function calls to locate where variables first took on the wrong values. &lt;code&gt;dbstack&lt;/code&gt; shows the entire series of function calls and at what level debugging is currently taking place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddd8d1bdcc1a086f3d5ac3b3b1ec452666f10c5" translate="yes" xml:space="preserve">
          <source>The function call &lt;code&gt;airy (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; is equivalent to &lt;code&gt;airy (0, &lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9023c325e5cef6d8423bd4061a1b2bf34a5a54d3" translate="yes" xml:space="preserve">
          <source>The function call &lt;code&gt;graphics_toolkit (&quot;qt&quot;)&lt;/code&gt; selects the Qt/OpenGL system, &lt;code&gt;graphics_toolkit (&quot;fltk&quot;)&lt;/code&gt; selects the FLTK/OpenGL system, and &lt;code&gt;graphics_toolkit (&quot;gnuplot&quot;)&lt;/code&gt; selects the gnuplot system. The three systems may be used selectively through the use of the &lt;code&gt;graphics_toolkit&lt;/code&gt; property of the graphics handle for each figure. This is explained in &lt;a href=&quot;graphics-data-structures#Graphics-Data-Structures&quot;&gt;Graphics Data Structures&lt;/a&gt;. &lt;strong&gt;Caution:&lt;/strong&gt; The OpenGL-based toolkits use single precision variables internally which limits the maximum value that can be displayed to approximately &lt;em&gt;10^{38}&lt;/em&gt;. If your data contains larger values you must use the gnuplot toolkit which supports values up to &lt;em&gt;10^{308}&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056203bb8dfb94473840d17de7a5ed750bde9baa" translate="yes" xml:space="preserve">
          <source>The function can be provided as a function handle to a plain Octave function, as an anonymous function, or as a string representing an Octave command. The latter syntax is not recommended since syntax errors will only occur when the string is evaluated. See &lt;a href=&quot;function-handles-anonymous-functions-inline-functions#Function-Handles-Anonymous-Functions-Inline-Functions&quot;&gt;Function Handles section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e466c89facb7b07b7daf60e3e9b2f4cbafe1f9b8" translate="yes" xml:space="preserve">
          <source>The function can do anything necessary for cleanup such as closing open file handles, printing an error message, or restoring global variables to their initial values. The last example is a very convenient idiom for Octave code. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0265a6ef2bb760cb4c289ef6b70ddaba6dcafd0c" translate="yes" xml:space="preserve">
          <source>The function has the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36d0f830de12b3b5928f57b30f0fc853f88c7a0" translate="yes" xml:space="preserve">
          <source>The function is a built-in or m-file function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbb3e1e956223fbda6b79a6dc9a8ecf187af792" translate="yes" xml:space="preserve">
          <source>The function is a subfunction within an m-file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f36400818d39c79f64535e378d170ce9fbcf18c" translate="yes" xml:space="preserve">
          <source>The function is anonymous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b53c7025eee37895e050173b51b63453e0d1f4" translate="yes" xml:space="preserve">
          <source>The function is computed by standard Newton&amp;rsquo;s method, by solving</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a38b794f41615c744e25adbde4ee91f488b7052" translate="yes" xml:space="preserve">
          <source>The function is computed with Newton&amp;rsquo;s method by solving</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ca69299ade68319dc92c32801db0fcbea20b58" translate="yes" xml:space="preserve">
          <source>The function is defined by &lt;code&gt;&lt;var&gt;v&lt;/var&gt; = f (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;. The interpolation points are specified by &lt;var&gt;xi&lt;/var&gt;, &lt;var&gt;yi&lt;/var&gt;, &lt;var&gt;zi&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc251ff5cb07081226e2e3fd8634a6608de5a398" translate="yes" xml:space="preserve">
          <source>The function is defined by &lt;code&gt;&lt;var&gt;y&lt;/var&gt; = f (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;. The interpolation points are all &lt;var&gt;xi&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c6ffd66c3459f649ff6d427bed2f079c12a2c0" translate="yes" xml:space="preserve">
          <source>The function is defined by &lt;code&gt;&lt;var&gt;z&lt;/var&gt; = f (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. Inputs &lt;code&gt;&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;&lt;/code&gt; are vectors of the same length or &lt;code&gt;&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are vectors and &lt;code&gt;&lt;var&gt;z&lt;/var&gt;&lt;/code&gt; is matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2602ce90947e4c41045d77927ff1f2bbab687c60" translate="yes" xml:space="preserve">
          <source>The function is private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83d0ab2bf380194480fe16d0a63f7ac2c7fe028" translate="yes" xml:space="preserve">
          <source>The function name as it will be seen in Octave,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def2ccc85a41ad702124162c0e86b28b2738d5fc" translate="yes" xml:space="preserve">
          <source>The function name. For an anonymous function (no name) this will be the actual function definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa95756d145095124bd69e1158ebbc86a1ca9671" translate="yes" xml:space="preserve">
          <source>The function overloads an existing function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb35fe06069212b8aa4e156f0cc5818c4cda221" translate="yes" xml:space="preserve">
          <source>The function plotted is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b255599f07710a7d27e0446f4a9ed0c4a334e0b3" translate="yes" xml:space="preserve">
          <source>The function returns &lt;var&gt;hlink&lt;/var&gt; which is a special object describing the link. As long as the reference &lt;var&gt;hlink&lt;/var&gt; exists, the link between graphic objects will be active. This means that &lt;var&gt;hlink&lt;/var&gt; must be preserved in a workspace variable, a global variable, or otherwise stored using a function such as &lt;code&gt;setappdata&lt;/code&gt; or &lt;code&gt;guidata&lt;/code&gt;. To unlink properties, execute &lt;code&gt;clear &lt;var&gt;hlink&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1508c1f5c3e970237c7d4f7f9aabcd5ddc5318" translate="yes" xml:space="preserve">
          <source>The function should have the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b431ef2bb54cf725b95fac97ceacdab2f138773f" translate="yes" xml:space="preserve">
          <source>The function state input may be either &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;. If it is omitted, the current grid state is toggled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af9725fd7ab61631c65af6cb6e4e019d96663f4" translate="yes" xml:space="preserve">
          <source>The function to use for each of the plots can be independently defined with &lt;var&gt;fun1&lt;/var&gt; and &lt;var&gt;fun2&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b43680c3b740e94070869462884c6fb554c233" translate="yes" xml:space="preserve">
          <source>The function typically returns two outputs. Variable &lt;var&gt;t&lt;/var&gt; is a column vector and contains the times where the solution was found. The output &lt;var&gt;y&lt;/var&gt; is a matrix in which each column refers to a different unknown of the problem and each row corresponds to a time in &lt;var&gt;t&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e6b48faa528abf3b107edd47fb59b71bce4ffc" translate="yes" xml:space="preserve">
          <source>The function typically returns two outputs. Variable &lt;var&gt;y0_new&lt;/var&gt; is a column vector and contains the consistent initial value of &lt;var&gt;y&lt;/var&gt;. The output &lt;var&gt;yp0_new&lt;/var&gt; is a column vector and contains the consistent initial value of &lt;var&gt;yp&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6770715492bed09b2e1c4e82fafff21dd0eee87f" translate="yes" xml:space="preserve">
          <source>The function, &lt;code&gt;ppval&lt;/code&gt;, evaluates the piecewise polynomials, created by &lt;code&gt;mkpp&lt;/code&gt; or other means, and &lt;code&gt;unmkpp&lt;/code&gt; returns detailed information about the piecewise polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0427bdf9102b95439c000614feebe32c53e35413" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt; are useful for determining whether any or all of the elements of a matrix satisfy some condition. The &lt;code&gt;find&lt;/code&gt; function is also useful in determining which elements of a matrix meet a specified condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd68c847ca9696d84b7c2a3771eec9a731d3870" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;barh&lt;/code&gt;, &lt;code&gt;stairs&lt;/code&gt;, and &lt;code&gt;stem&lt;/code&gt; are useful for displaying discrete data. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d0187be14d5b912171f995272c49b10c5b0810" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;grid&lt;/code&gt; and &lt;code&gt;box&lt;/code&gt; may also be used to add grid and border lines to the plot. By default, the grid is off and the border lines are on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0939ce05cceaacc28750142d4fc67564c3e2fe5" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;linspace&lt;/code&gt; and &lt;code&gt;logspace&lt;/code&gt; make it very easy to create vectors with evenly or logarithmically spaced elements. See &lt;a href=&quot;ranges#Ranges&quot;&gt;Ranges&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fee2feed063d1811c769369574ba273c05c31d2" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;semilogx&lt;/code&gt;, &lt;code&gt;semilogy&lt;/code&gt;, and &lt;code&gt;loglog&lt;/code&gt; are similar to the &lt;code&gt;plot&lt;/code&gt; function, but produce plots in which one or both of the axes use log scales.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307313a96ec1b895cf46944cf5cea9ff9b481888" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;sombrero&lt;/code&gt; and &lt;code&gt;peaks&lt;/code&gt; provide a way to check that plotting is working. Typing either &lt;code&gt;sombrero&lt;/code&gt; or &lt;code&gt;peaks&lt;/code&gt; at the Octave prompt should display a three-dimensional plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a93491b470a6539ccd9606b60fa5ccf74ccc740" translate="yes" xml:space="preserve">
          <source>The functions distributed with Octave can issue one of the following errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7ade81e47cc84e554ee648d33245bfa1d5e0c4" translate="yes" xml:space="preserve">
          <source>The functions distributed with Octave can issue one of the following warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48cec1a8926cfdca666b129254fc27edc21a054" translate="yes" xml:space="preserve">
          <source>The functions for set operations all work in the same way by accepting two input sets and returning a third set. As an example, assume that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; contains two sets, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7b78da90b497a0b16c5b80331ce60fe635aa23" translate="yes" xml:space="preserve">
          <source>The functions that analyze data all assume that multi-dimensional data is arranged in a matrix where each row is an observation, and each column is a variable. Thus, the matrix defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4191ba1a7940d751103eb850b12335afd07211" translate="yes" xml:space="preserve">
          <source>The fundamental idea (Pareto principle) behind the use of Pareto diagrams is that the majority of an effect is due to a small subset of the causes. For quality improvement, the first few contributing causes (leftmost bars as presented on the diagram) to a problem usually account for the majority of the result. Thus, targeting these &quot;major causes&quot; for elimination results in the most cost-effective improvement scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff726a2600f708f2fc20063bcb76b3d8d5c04a2d" translate="yes" xml:space="preserve">
          <source>The fundamental principle of reporting bugs usefully is this: &lt;strong&gt;report all the facts&lt;/strong&gt;. If you are not sure whether to state a fact or leave it out, state it!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36117bcd8a703fcc41e51d11132bb2ba20ab4206" translate="yes" xml:space="preserve">
          <source>The general form of a command call is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6413d25778dabe015dc6f9d063c24edcb5a010" translate="yes" xml:space="preserve">
          <source>The general form of an &lt;code&gt;unwind_protect&lt;/code&gt; block looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75be70a43648abef1bba6eb788dded6ab81d74a" translate="yes" xml:space="preserve">
          <source>The general form of the &lt;code&gt;switch&lt;/code&gt; statement is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0c4d64b8c83fb093e15b7aecabf14fc95f4ab2" translate="yes" xml:space="preserve">
          <source>The general form of the function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b027b43d3ce2c735b1edba431853f12be287f1" translate="yes" xml:space="preserve">
          <source>The generalized eigenvalue problem is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a12db0d443d6838e53f16ebdd7037ef0ab6e4e" translate="yes" xml:space="preserve">
          <source>The generalized singular value decomposition is defined by the following relations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402ae08c095d286c49c41e96fc19db3ff210593d" translate="yes" xml:space="preserve">
          <source>The generated array is uninitialized. All elements are set to null if &lt;var&gt;classname&lt;/var&gt; is a reference type, or to a default value (usually 0) if &lt;var&gt;classname&lt;/var&gt; is a primitive type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61509c43eff76811c9872664f850c6c43ff60cd3" translate="yes" xml:space="preserve">
          <source>The generated reports interpret any Publishing Markup in comments, which is explained in detail in the GNU Octave manual. Assume the following example, using some Publishing Markup, to be the contents of the script file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de0abdbddf3f4afcc6e18d693196e8efba2f15c" translate="yes" xml:space="preserve">
          <source>The generators are initialized with random states at start-up, so that the sequences of random numbers are not the same each time you run Octave.&lt;a href=&quot;#FOOT7&quot; name=&quot;DOCF7&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; If you really do need to reproduce a sequence of numbers exactly, you can set the state or seed to a specific value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e3a91ed79486b302b4dba80e5871ea06a891b8" translate="yes" xml:space="preserve">
          <source>The generators operate in the new or old style together, it is not possible to mix the two. Initializing any generator with &lt;code&gt;&quot;state&quot;&lt;/code&gt; or &lt;code&gt;&quot;seed&quot;&lt;/code&gt; causes the others to switch to the same style for future calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c22bc7fac662c0398dfe56e763643d557f918db" translate="yes" xml:space="preserve">
          <source>The grabbed code inside the published report must be enclosed by the strings &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c72762a1cadd5566f10e345df4f9d6cee10c29" translate="yes" xml:space="preserve">
          <source>The graphics functions use pointers, which are of class graphics_handle, in order to address the data structures which control visual display. A graphics handle may point to any one of a number of different base object types and these objects are the graphics data structures themselves. The primitive graphic object types are: &lt;code&gt;figure&lt;/code&gt;, &lt;code&gt;axes&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;surface&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, and &lt;code&gt;light&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c60e65257b95d01f69f0f65e7e668c137fbe8e" translate="yes" xml:space="preserve">
          <source>The graphics handle of the legend object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418cb1583abf68c84b926b1bdbb1faf7443b3e89" translate="yes" xml:space="preserve">
          <source>The graphics objects are arranged in a hierarchy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cba3d4c66bb5e39b73297ce09a0824f13b0ef0" translate="yes" xml:space="preserve">
          <source>The handle &lt;var&gt;h&lt;/var&gt; must be the same as the on specified in &lt;code&gt;uiwait&lt;/code&gt;. If the handle is invalid or there is no &lt;code&gt;uiwait&lt;/code&gt; call pending for the figure with handle &lt;var&gt;h&lt;/var&gt;, this function does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422c777f947698f42388050710bb627ce595d309" translate="yes" xml:space="preserve">
          <source>The handle of the line object which implements the baseline. Use &lt;code&gt;set&lt;/code&gt; with the returned handle to change graphic properties of the baseline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed534487045493008aaca862fe6f2e129ba3473b" translate="yes" xml:space="preserve">
          <source>The handle to the object that holds the callback being executed can be obtained with the &lt;code&gt;gcbo&lt;/code&gt; function. The handle to the ancestor figure of this object may be obtained using the &lt;code&gt;gcbf&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d0f1937359a0b70bd4a1645a76080b0acc3802" translate="yes" xml:space="preserve">
          <source>The height of the elimination tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674a4976d5fd72b9f714a9631f80bbd060582942" translate="yes" xml:space="preserve">
          <source>The help command can provide information about most operators, but &lt;var&gt;name&lt;/var&gt; must be enclosed by single or double quotes to prevent the Octave interpreter from acting on &lt;var&gt;name&lt;/var&gt;. For example, &lt;code&gt;help &quot;+&quot;&lt;/code&gt; displays help on the addition operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c4af1d924f1b07210460fef93b2afc1e1698ce" translate="yes" xml:space="preserve">
          <source>The help message may have multiple lines separated by newline characters (&quot;\n&quot;), or it may be a cellstr array with one element for each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06af73b4c1a3bc99335ca7b3b5ce60cd8717e1a2" translate="yes" xml:space="preserve">
          <source>The hierarchy of graphics objects was explained above. See &lt;a href=&quot;introduction-to-graphics-structures#Introduction-to-Graphics-Structures&quot;&gt;Introduction to Graphics Structures&lt;/a&gt;. Here the specific objects are described, and the properties contained in these objects are discussed. Keep in mind that graphics objects are always referenced by &lt;em&gt;handle&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8adebd82e670d6749b8ed1c3089b6ab2a8a0a04" translate="yes" xml:space="preserve">
          <source>The histogram&amp;rsquo;s appearance may be modified by specifying property/value pairs. For example, the face and edge color may be modified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8bd1e4aa50cc9ed748fa111798a8811324cd5c" translate="yes" xml:space="preserve">
          <source>The histogram&amp;rsquo;s colors also depend upon the current colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3991f9712d76f02126bc458f8ad0e3f089f811d2" translate="yes" xml:space="preserve">
          <source>The history number of this command. This differs from &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569d198a8b7e1e9811865521fcdd6c716a30ac66" translate="yes" xml:space="preserve">
          <source>The home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf22d37ba1a9a7823fc6f2dac9ddc3c51a97db3" translate="yes" xml:space="preserve">
          <source>The hook function is expected to be of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a95f3a85c30ffe4471233d330866926e2d5a35" translate="yes" xml:space="preserve">
          <source>The hostname, up to the first &amp;lsquo;.&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c751fdbb38c77c9e0a00c4631f7273f61e129b7" translate="yes" xml:space="preserve">
          <source>The hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4828d994ccdb1b13cd05ab60baea54dcf1724307" translate="yes" xml:space="preserve">
          <source>The hull &lt;var&gt;H&lt;/var&gt; is a linear index vector into the original set of points that specifies which points form the enclosing hull. For 2-D inputs only, the output is ordered in a counterclockwise manner around the hull.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a29ef32c58312b71e271456beef97de23b0fb3" translate="yes" xml:space="preserve">
          <source>The hull &lt;var&gt;h&lt;/var&gt; is an index vector into the set of points and specifies which points form the enclosing hull.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a676911447a08e9e299d1f4434e60b586dc6348a" translate="yes" xml:space="preserve">
          <source>The i-th row of &lt;var&gt;coefs&lt;/var&gt;, &lt;code&gt;&lt;var&gt;coefs&lt;/var&gt;(&lt;var&gt;i&lt;/var&gt;,:)&lt;/code&gt;, contains the coefficients for the polynomial over the &lt;var&gt;i&lt;/var&gt;-th interval, ordered from highest (&lt;var&gt;m&lt;/var&gt;) to lowest (&lt;var&gt;0&lt;/var&gt;) degree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea38bdca38c12584cdab6406cdd5c1cde94b0dfc" translate="yes" xml:space="preserve">
          <source>The if Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a708152d5153bc57237e21de6257347a82d55f95" translate="yes" xml:space="preserve">
          <source>The image &lt;var&gt;img&lt;/var&gt; can be a binary, grayscale, RGB, or multi-dimensional image. The size and class of &lt;var&gt;img&lt;/var&gt; should be the same as what should be expected when reading it with &lt;code&gt;imread&lt;/code&gt;: the 3rd and 4th dimensions reserved for color space, and multiple pages respectively. If it&amp;rsquo;s an indexed image, the colormap &lt;var&gt;map&lt;/var&gt; must also be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8f9697fdd953fb3f36bc9a5ffd120e656524d6" translate="yes" xml:space="preserve">
          <source>The image &lt;var&gt;x&lt;/var&gt; must be an indexed image which will be converted using the colormap &lt;var&gt;map&lt;/var&gt;. If &lt;var&gt;map&lt;/var&gt; does not contain enough colors for the image, pixels in &lt;var&gt;x&lt;/var&gt; outside the range are mapped to the last color in the map before conversion to grayscale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da19a248209a9a128de50f2f4d17a2d6d1dcdd1" translate="yes" xml:space="preserve">
          <source>The image &lt;var&gt;x&lt;/var&gt; must be an indexed image which will be converted using the colormap &lt;var&gt;map&lt;/var&gt;. If &lt;var&gt;map&lt;/var&gt; does not contain enough colors for the image, pixels in &lt;var&gt;x&lt;/var&gt; outside the range are mapped to the last color in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5ee5d216966297adaebcabd766db58f68734ca" translate="yes" xml:space="preserve">
          <source>The imaginary error function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92855bc100f7003a3a6d71680951e7f93fab4f1" translate="yes" xml:space="preserve">
          <source>The implementation is significantly more efficient than &lt;code&gt;sparse (eye (&lt;var&gt;m&lt;/var&gt;))&lt;/code&gt; as the full matrix is not constructed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d64a8f9079705b49a41ccf8c7ac9cd51485c9c" translate="yes" xml:space="preserve">
          <source>The implementation is straightforward: &lt;code&gt;sum (diag (&lt;var&gt;A&lt;/var&gt;))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d712f9a74d751eb85c8ebc02cdbd4f2f25229b5" translate="yes" xml:space="preserve">
          <source>The implementation of this operator needs to be improved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03465b61135d23bd951336c1d885ffe0544b622e" translate="yes" xml:space="preserve">
          <source>The implementation utilizes a Pad&amp;eacute; approximant and the identity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c46764c658d287059e27fd4cb9ec28d5242f26" translate="yes" xml:space="preserve">
          <source>The index of the subplot to make active may also be specified by its axes handle, &lt;var&gt;hax&lt;/var&gt;, returned from a previous &lt;code&gt;subplot&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7bcf5688a78a70028fe9dec44f57f3bf98ba7f" translate="yes" xml:space="preserve">
          <source>The indexed image will consist of &lt;var&gt;n&lt;/var&gt; different intensity values. If not given &lt;var&gt;n&lt;/var&gt; defaults to 64 for grayscale images or 2 for binary black and white images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cce636c201b04ca5773f3872add58ce9011d068" translate="yes" xml:space="preserve">
          <source>The indexing arguments may be scalar (&lt;code&gt;2&lt;/code&gt;), arrays (&lt;code&gt;[1, 3]&lt;/code&gt;), ranges (&lt;code&gt;1:3&lt;/code&gt;), or the colon operator (&lt;code&gt;&quot;:&quot;&lt;/code&gt;). However, the indexing keyword &lt;code&gt;end&lt;/code&gt; is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a594c7d6d553644c04a5b286f967e3640e1331" translate="yes" xml:space="preserve">
          <source>The indexing operations operate on the cell array and not on the objects within the cell array. By contrast, &lt;code&gt;cellindexmat&lt;/code&gt; applies matrix indexing to the objects within each cell array entry and returns the requested values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff53c494f7ac17910fcd15b67cb1102e5ab2c00e" translate="yes" xml:space="preserve">
          <source>The indexing operators can also be used to insert or overwrite elements of a cell array. The following code inserts the scalar 3 on the third place of the previously created cell array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6511f89635b48d39ff6078272e21f77dba2063" translate="yes" xml:space="preserve">
          <source>The indices in &lt;var&gt;sel&lt;/var&gt; are 1-based.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954989bdc7bfe10fba23499412c81ec64278cb2e" translate="yes" xml:space="preserve">
          <source>The initial matrix &lt;var&gt;x0&lt;/var&gt; should have columns of unit 1-norm. The default initial matrix &lt;var&gt;x0&lt;/var&gt; has the first column &lt;code&gt;ones (&lt;var&gt;n&lt;/var&gt;, 1) / &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; and, if &lt;var&gt;t&lt;/var&gt; &amp;gt; 1, the remaining columns with random elements &lt;code&gt;-1 / &lt;var&gt;n&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;1 / &lt;var&gt;n&lt;/var&gt;&lt;/code&gt;, divided by &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e142840a6549e2987da5634a92330dfac21cd05" translate="yes" xml:space="preserve">
          <source>The initial point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e481c7c49f4c7c911223d416276b30659835c3" translate="yes" xml:space="preserve">
          <source>The initial shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed7b45f4ceec8c04ecd4cfaffd622380f7ee4d6" translate="yes" xml:space="preserve">
          <source>The initial value of is taken from the environment variable &lt;code&gt;OCTAVE_EXEC_PATH&lt;/code&gt;, but that value can be overridden by the command line argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fef231dc4a28ca78e74aeb1edbf9ed7702e262" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;a&lt;/var&gt; must be a square numeric matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95166c6e03298ef449959bb755b5b8defa5c9ce5" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;c&lt;/var&gt; determines the color of the polygon. The simplest form is a single color specification such as a &lt;code&gt;plot&lt;/code&gt; format or an RGB-triple. In this case the polygon(s) will have one unique color. If &lt;var&gt;c&lt;/var&gt; is a vector or matrix then the color data is first scaled using &lt;code&gt;caxis&lt;/code&gt; and then indexed into the current colormap. A row vector will color each polygon (a column from matrices &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;) with a single computed color. A matrix &lt;var&gt;c&lt;/var&gt; of the same size as &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; will compute the color of each vertex and then interpolate the face color between the vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f26da584a85eed61c4c9d0cd09a6449b7a822bf" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;data&lt;/var&gt; is the structure returned by &lt;code&gt;profile (&quot;info&quot;)&lt;/code&gt;. If unspecified, &lt;code&gt;profexport&lt;/code&gt; will use the current profile dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1a3e12e7c450af2651d6904a45ca54ed6e3bc9" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;data&lt;/var&gt; is the structure returned by &lt;code&gt;profile (&quot;info&quot;)&lt;/code&gt;. If unspecified, &lt;code&gt;profshow&lt;/code&gt; will use the current profile dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5824e85e52dae63cc635bce145c84beb34fb225" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;deg&lt;/var&gt; must be a scalar, vector, or N-dimensional array of double or single floating point values. &lt;var&gt;deg&lt;/var&gt; may be complex in which case the real and imaginary components are converted separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50caf6730c01291969eb24440805c41a0368740c" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;dims&lt;/var&gt; is a dimension vector where each element is the size of the array in the respective dimension (see &lt;a href=&quot;object-sizes#XREFsize&quot;&gt;size&lt;/a&gt;). The remaining inputs are scalars or vectors of subscripts to be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c75052f049b6f1b620a1ffc9c94ab010f4021d" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;dims&lt;/var&gt; is a dimension vector where each element is the size of the array in the respective dimension (see &lt;a href=&quot;object-sizes#XREFsize&quot;&gt;size&lt;/a&gt;). The second input &lt;var&gt;ind&lt;/var&gt; contains linear indies to be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d15cbb1bd93257fad2dcd16a86dd48658ab551" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;filename&lt;/var&gt; is a string which is parsed. There is no attempt to check whether the filename or directory specified actually exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81d079dea9a887ff2ce1dfb142867c76e4450fc" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;h&lt;/var&gt; is a vector of graphic handles to link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5096b848f639c765c3ccab0877d7e42d121f3f82" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;h&lt;/var&gt; may also be a vector of graphic handles in which case each individual object will be reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7223f2603e531485f76dc0e45afd377723218e9b" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;isoval&lt;/var&gt; is a scalar that specifies the value for the isosurface. If &lt;var&gt;isoval&lt;/var&gt; is omitted or empty, a &quot;good&quot; value for an isosurface is determined from &lt;var&gt;v&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991b11ad192bef1180fd2a30445d093b2cf7c323" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;j&lt;/var&gt; is an integer index in the range [0, 2^32-1]. The values of the output matrix are always exactly the same (reproducibility) for a given size input and &lt;var&gt;j&lt;/var&gt; index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f0b2a1ea3b10c5bcb891763dc801a2ac8909c5" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;m&lt;/var&gt; is either a 3 or 4 column real matrix, containing the row, column, real, and imaginary parts of the elements of the sparse matrix. An element with a zero real and imaginary part can be used to force a particular matrix size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396dcaf28fcd0465270dbb9302db1c5a89c4b965" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;rad&lt;/var&gt; must be a scalar, vector, or N-dimensional array of double or single floating point values. &lt;var&gt;rad&lt;/var&gt; may be complex in which case the real and imaginary components are converted separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0abfd3f608460604c4d81a6b9a45973d84a5584" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;str&lt;/var&gt; must be a string or a cell array of strings. The output &lt;var&gt;uniqstr&lt;/var&gt; will be of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca20a450045bac4a38a8a43253b99ff3ddc67e48" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;str&lt;/var&gt; must be a string or a cell array of strings. The output &lt;var&gt;varname&lt;/var&gt; will be of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a557b9fec5b95bc79fb2b6460ddd8f83dcdef33" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;t&lt;/var&gt; must be a column vector of length 2 with the first and last time step (&lt;code&gt;[&lt;var&gt;tfirst&lt;/var&gt; &lt;var&gt;tlast&lt;/var&gt;]&lt;/code&gt;. The input &lt;var&gt;y&lt;/var&gt; contains the initial conditions for the ode problem (&lt;var&gt;y0&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1fc3f267c62f1da90ffd7534e7000fdec1f46e" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;t&lt;/var&gt; must be a scalar double specifying the time for which the solution in input &lt;var&gt;y&lt;/var&gt; was calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55356d031c6d21680c724c3bd06a3c193e98066f" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;x&lt;/var&gt; may also be a matrix with two or three columns where the first column contains x-data, the second y-data, and the optional third column contains z-data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30649e14c2ff4360e9d137ad88d107ed2c34ad8" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;x&lt;/var&gt; must be a numeric scalar, vector, or array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731ed29f67e236a093f6d2f92709bd5eb1a6de79" translate="yes" xml:space="preserve">
          <source>The input &lt;var&gt;x&lt;/var&gt; should be a vector of integers. Any non-integer values will be converted to integer by &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = fix (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;. By default each element of &lt;var&gt;x&lt;/var&gt; will be plotted with the last digit of the element as a leaf value and the remaining digits as the stem. For example, 123 will be plotted with the stem &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7171165e172e9fbfb632f15524f605b5ef57517" translate="yes" xml:space="preserve">
          <source>The input argument &lt;var&gt;v&lt;/var&gt; is a three-dimensional array that contains data sampled over a volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1519a8deacf4a871ce15dec06c5e775e824b41a" translate="yes" xml:space="preserve">
          <source>The input arguments are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2185be7eac652627e1a1c53d118bfabb8856ff3e" translate="yes" xml:space="preserve">
          <source>The input arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ebd317575bd9b536f26401fe4ca1340bb658c2" translate="yes" xml:space="preserve">
          <source>The input can be both a colormap or RGB image. In the case of floating point input, values are expected to be on the [0 1] range. In the case of hue (azimuth), since the value corresponds to an angle, &lt;code&gt;mod (h, 1)&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea3a14955ee5e6416ff782dc5301d4d8adb2d79" translate="yes" xml:space="preserve">
          <source>The input image &lt;var&gt;rgb&lt;/var&gt; can be specified as a single matrix of size MxNx3, or as three separate variables, &lt;var&gt;R&lt;/var&gt;, &lt;var&gt;G&lt;/var&gt;, and &lt;var&gt;B&lt;/var&gt;, its three color channels, red, green, and blue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fd3e0a376ef80ca5fa981e4e1570a5ee00e46a" translate="yes" xml:space="preserve">
          <source>The input is either a string &lt;code&gt;&quot;&lt;var&gt;type&lt;/var&gt;&quot;&lt;/code&gt; specifying an integer type, or it is an existing integer variable &lt;var&gt;var&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c80e346db161abe74fc4c2583fbdd1ee41dd76a" translate="yes" xml:space="preserve">
          <source>The input is either a string specifying a floating point type, or it is an existing floating point variable &lt;var&gt;var&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0acecc45b624dde1641748f9b84ce62a3a227b" translate="yes" xml:space="preserve">
          <source>The input is interpreted as a sequence of words, delimiters (such as whitespace), and literals. The characters that form delimiters and whitespace are determined by the options. The format consists of format specifiers interspersed between literals. In the format, whitespace forms a delimiter between consecutive literals, but is otherwise ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e8c4694f3ae0111bd29e8dfe39e302e21c4b0b" translate="yes" xml:space="preserve">
          <source>The input matrix &lt;var&gt;pts&lt;/var&gt; of size [n, dim] contains n points in a space of dimension dim.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a839e329f67fa2817204fb2f2093eb4a0a993713" translate="yes" xml:space="preserve">
          <source>The input matrix &lt;var&gt;pts&lt;/var&gt; of size [n, dim] contains n points in a space of dimension dim. The return matrix &lt;var&gt;T&lt;/var&gt; has size [m, dim+1]. Each row of &lt;var&gt;T&lt;/var&gt; contains a set of indices back into the original set of points &lt;var&gt;pts&lt;/var&gt; which describes a simplex of dimension dim. For example, a 2-D simplex is a triangle and 3-D simplex is a tetrahedron.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445d5b9eb438e6aafe6fc058f5b7c017d0761c8b" translate="yes" xml:space="preserve">
          <source>The input may be a date vector (see &lt;code&gt;datevec&lt;/code&gt;), datestr (see &lt;code&gt;datestr&lt;/code&gt;), or directly specified as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e96fff5335642a7324dd85909c7ad7a6083613" translate="yes" xml:space="preserve">
          <source>The input may be of class uint8, int8, uint16, int16, single, or double. The output is of the same class as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73891a04a50190e5b0b6bfd5b90c1eea4293f384" translate="yes" xml:space="preserve">
          <source>The input parameters are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1cb737bfd3b7cfa8360f66f57c5e9497ac41a3" translate="yes" xml:space="preserve">
          <source>The input patch can be represented by a structure &lt;var&gt;fv&lt;/var&gt; with the fields &lt;code&gt;faces&lt;/code&gt; and &lt;code&gt;vertices&lt;/code&gt;, by two matrices &lt;var&gt;faces&lt;/var&gt; and &lt;var&gt;vertices&lt;/var&gt; (see, e.g., the result of &lt;code&gt;isosurface&lt;/code&gt;), or by a handle to a patch object &lt;var&gt;patch_handle&lt;/var&gt; (see &lt;a href=&quot;graphics-objects#XREFpatch&quot;&gt;patch&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a44040973a8206f39b61e4224675947da04119e" translate="yes" xml:space="preserve">
          <source>The input variables &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;, must have the same dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78aad8c326bb7f7b928c38b524bd526451a26796" translate="yes" xml:space="preserve">
          <source>The input variables are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d9b2a59b7ff0d41e1525b0745d9de66f10d5d5" translate="yes" xml:space="preserve">
          <source>The input, &lt;var&gt;t&lt;/var&gt;, may be either a 2-D character array, or a cell array of character strings. The output is the same class as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b849533d7a9b4b3a1cae0257aac1739c4fd1b1" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;T&lt;/var&gt; and &lt;var&gt;N&lt;/var&gt; must be non-negative numeric scalars. If &lt;var&gt;N&lt;/var&gt; is unspecified it defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33a363e32abe0c9a7b26586fa20590c0e531016" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;s&lt;/var&gt; may also be cell arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac32852c6d91e06f06c440ad24608754c2d75a7e" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;theta&lt;/var&gt;, &lt;var&gt;phi&lt;/var&gt;, and &lt;var&gt;r&lt;/var&gt; must be the same shape, or scalar. If called with a single matrix argument then each row of &lt;var&gt;S&lt;/var&gt; represents the spherical coordinate (&lt;var&gt;theta&lt;/var&gt;, &lt;var&gt;phi&lt;/var&gt;, &lt;var&gt;r&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18e3b92e93bcd61fc5a053ca67fbfe0929f43c9" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;theta&lt;/var&gt;, &lt;var&gt;r&lt;/var&gt;, (and &lt;var&gt;z&lt;/var&gt;) must be the same shape, or scalar. If called with a single matrix argument then each row of &lt;var&gt;P&lt;/var&gt; represents the polar/(cylindrical) coordinate (&lt;var&gt;theta&lt;/var&gt;, &lt;var&gt;r&lt;/var&gt; (, &lt;var&gt;z&lt;/var&gt;)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7e4218017c024c3b843037830a38828bdd36d5" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are the coordinates of the polygon vertices. If the inputs are matrices then the rows represent different vertices and each column produces a different polygon. &lt;code&gt;fill&lt;/code&gt; will close any open polygons before plotting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be25c6aa781ab1f5e80a5c988b84db8d4a5df128" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; (, and &lt;var&gt;z&lt;/var&gt;) must be the same shape, or scalar. If called with a single matrix argument then each row of &lt;var&gt;C&lt;/var&gt; represents the Cartesian coordinate (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; (, &lt;var&gt;z&lt;/var&gt;)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d3a45e9b3f595a9619aa9f15a1b7ea406b5a73" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, and &lt;var&gt;z&lt;/var&gt; must be the same shape, or scalar. If called with a single matrix argument then each row of &lt;var&gt;C&lt;/var&gt; represents the Cartesian coordinate (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3a58d457bee27f9438d95a90f79573bd0482a4" translate="yes" xml:space="preserve">
          <source>The inputs &lt;var&gt;xc&lt;/var&gt;, &lt;var&gt;yc&lt;/var&gt;, &lt;var&gt;zc&lt;/var&gt; specify the center of the ellipsoid. The inputs &lt;var&gt;xr&lt;/var&gt;, &lt;var&gt;yr&lt;/var&gt;, &lt;var&gt;zr&lt;/var&gt; specify the semi-major axis lengths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cfa16d226a85faab76a53ad1dc268fb3a9d55c" translate="yes" xml:space="preserve">
          <source>The inputs should be empty, but are ignored if they are present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2e921020c1a3b1393e17cad86727ce9f6483e3" translate="yes" xml:space="preserve">
          <source>The integer part, &lt;code&gt;floor (&lt;var&gt;days&lt;/var&gt;)&lt;/code&gt; counts the number of complete days in the date input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d96fc120767052477192761b0e095d997be46d" translate="yes" xml:space="preserve">
          <source>The integer range may optionally be described by a two element matrix with a lower and upper bound in which case the returned integers will be on the interval [&lt;var&gt;imin&lt;/var&gt;, &lt;var&gt;imax&lt;/var&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f7d1f31a5e50910a5623a37b19a55fc0f870ab" translate="yes" xml:space="preserve">
          <source>The integral part, &lt;code&gt;floor (now)&lt;/code&gt; corresponds to the number of days between today and Jan 1, 0000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3059fcf147cc67db7fabb225179a64965b39f273" translate="yes" xml:space="preserve">
          <source>The intended use &lt;code&gt;nthargout&lt;/code&gt; is to avoid intermediate variables. For example, when finding the indices of the maximum entry of a matrix, the following two compositions of nthargout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b424cf7e4dd7b8a3a587012fc45f212d8f408519" translate="yes" xml:space="preserve">
          <source>The interface is centered around supporting the languages C++, C, and Fortran. Octave itself is written in C++ and can call external C++/C code through its native oct-file interface. The C language is also supported through the mex-file interface for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;. Fortran code is easiest to reach through the oct-file interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0661bee9e295548487c4cc1c97b3cd913c84886" translate="yes" xml:space="preserve">
          <source>The interpolation &lt;var&gt;method&lt;/var&gt; is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa8505785be64035602952c17a293ba597ee62b" translate="yes" xml:space="preserve">
          <source>The interpolation method can be &lt;code&gt;&quot;nearest&quot;&lt;/code&gt; or &lt;code&gt;&quot;linear&quot;&lt;/code&gt;. If method is omitted it defaults to &lt;code&gt;&quot;linear&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4be53421c1bad06976bd0a28e4907eb3789087" translate="yes" xml:space="preserve">
          <source>The interpolation method can be &lt;code&gt;&quot;nearest&quot;&lt;/code&gt;, &lt;code&gt;&quot;cubic&quot;&lt;/code&gt; or &lt;code&gt;&quot;linear&quot;&lt;/code&gt;. If method is omitted it defaults to &lt;code&gt;&quot;linear&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ab6181fc5604ecbb6d9ee4c658779457ce665a" translate="yes" xml:space="preserve">
          <source>The interpolation points are all &lt;code&gt;(&lt;var&gt;xi&lt;/var&gt;, &lt;var&gt;yi&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;xi&lt;/var&gt;, &lt;var&gt;yi&lt;/var&gt; are vectors then they are made into a 2-D mesh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5319fb26b141aeaf634d54f89a8ebb0ee25370" translate="yes" xml:space="preserve">
          <source>The interpreter property can take three values: &lt;code&gt;&quot;none&quot;&lt;/code&gt;, &lt;code&gt;&quot;tex&quot;&lt;/code&gt;, &lt;code&gt;&quot;latex&quot;&lt;/code&gt;. If the interpreter is set to &lt;code&gt;&quot;none&quot;&lt;/code&gt; then no special rendering occurs&amp;mdash;the displayed text is a verbatim copy of the specified text. Currently, the &lt;code&gt;&quot;latex&quot;&lt;/code&gt; interpreter is not implemented for on-screen display and is equivalent to &lt;code&gt;&quot;none&quot;&lt;/code&gt;. Note that Octave does not parse or validate the text strings when in &lt;code&gt;&quot;latex&quot;&lt;/code&gt; mode&amp;mdash;it is the responsibility of the programmer to generate valid strings which may include wrapping sections that should appear in Math mode with &lt;code&gt;'$'&lt;/code&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f1c76a664591cff19b9a00f219813faba2fe49" translate="yes" xml:space="preserve">
          <source>The interrupting callback is discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3317aca5eebe4822f19a86da6c79b8408b89b89a" translate="yes" xml:space="preserve">
          <source>The interrupting callback is executed after the executing callback has returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4696302c24cad424a02f2e178fc021e556713146" translate="yes" xml:space="preserve">
          <source>The introductory example (see &lt;a href=&quot;basic-usage-of-cell-arrays#Basic-Usage-of-Cell-Arrays&quot;&gt;Basic Usage of Cell Arrays&lt;/a&gt;) showed how to create a cell array containing currently available variables. In many situations, however, it is useful to create a cell array and then fill it with data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9dad7697d4a663ac48126383d7a794f15c6337" translate="yes" xml:space="preserve">
          <source>The inverse FFT is calculated along the first non-singleton dimension of the array. Thus if &lt;var&gt;x&lt;/var&gt; is a matrix, &lt;code&gt;fft (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; computes the inverse FFT for each column of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ab0bc2c3dd50eeb2f7cda45e9462a415c20447" translate="yes" xml:space="preserve">
          <source>The inverse complementary error function is defined such that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6634817618929486c46319d6698c4e128c0ade0" translate="yes" xml:space="preserve">
          <source>The inverse error function is defined such that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f81b62528f04e4deeb1950b7d3f47110259a50" translate="yes" xml:space="preserve">
          <source>The inverse of the &lt;code&gt;permute&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ceff133850a4653181dea3d051822019b93945" translate="yes" xml:space="preserve">
          <source>The last error structure may be set by passing a scalar structure, &lt;var&gt;err&lt;/var&gt;, as input. Any fields of &lt;var&gt;err&lt;/var&gt; that match those above are set while any unspecified fields are initialized with default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacc150aa01c9b9ffda6364a38831e081bfd3e64" translate="yes" xml:space="preserve">
          <source>The last six characters of &lt;var&gt;template&lt;/var&gt; must be &lt;code&gt;&quot;XXXXXX&quot;&lt;/code&gt; and these are replaced with a string that makes the filename unique. The file is then created with mode read/write and permissions that are system dependent (on GNU/Linux systems, the permissions will be 0600 for versions of glibc 2.0.7 and later). The file is opened in binary mode and with the &lt;code&gt;O_EXCL&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fef20698267a84268f1722b66a78e584a7a46a" translate="yes" xml:space="preserve">
          <source>The leaf digits are not sorted. If sorted leaf values are desired, use &lt;code&gt;&lt;var&gt;xs&lt;/var&gt; = sort (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; before calling &lt;code&gt;stemleaf (&lt;var&gt;xs&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b1d46ca0bd341a815d6617741813d600197367" translate="yes" xml:space="preserve">
          <source>The least significant bit is &lt;var&gt;n&lt;/var&gt; = 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f5c424e851de44e4bc7a538dd9a636fbbeabca" translate="yes" xml:space="preserve">
          <source>The least significant bit is &lt;var&gt;n&lt;/var&gt; = 1. &lt;var&gt;val&lt;/var&gt; = 0 resets bits and &lt;var&gt;val&lt;/var&gt; = 1 sets bits. If no &lt;var&gt;val&lt;/var&gt; is specified it defaults to 1 (set bit). All inputs must be the same size or scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c43cd61966f727c0fee901f082383eafa9c88bc" translate="yes" xml:space="preserve">
          <source>The left division &lt;code&gt;\&lt;/code&gt; and right division &lt;code&gt;/&lt;/code&gt; operators, discussed in the previous section, use direct solvers to resolve a linear equation of the form &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;A&lt;/var&gt; \ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;b&lt;/var&gt; / &lt;var&gt;A&lt;/var&gt;&lt;/code&gt;. Octave also includes a number of functions to solve sparse linear equations using iterative techniques.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6592614b9e3af05a8ef7f7be6719a6508ddedf8" translate="yes" xml:space="preserve">
          <source>The left matrix contains the linear indices for each matrix element. The right matrix shows the subscript tuples for the same matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7ce296ced70dc52c40aabd12940b3805d69836" translate="yes" xml:space="preserve">
          <source>The left matrix contains the subscript tuples for each matrix element. The right matrix shows the linear indices for the same matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e8d3cfe55b1a6925f232fc8b75ae5a0984557c" translate="yes" xml:space="preserve">
          <source>The left side of a multiple assignment expression is itself a list of expressions, that is, a list of variable names potentially qualified by index expressions. See also &lt;a href=&quot;index-expressions#Index-Expressions&quot;&gt;Index Expressions&lt;/a&gt;, and &lt;a href=&quot;assignment-ops#Assignment-Ops&quot;&gt;Assignment Ops&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3fcedd74e41e703f7009cdbb12f7442d17f972" translate="yes" xml:space="preserve">
          <source>The left-hand operand of an assignment need not be a variable (see &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;). It can also be an element of a matrix (see &lt;a href=&quot;index-expressions#Index-Expressions&quot;&gt;Index Expressions&lt;/a&gt;) or a list of return values (see &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;Calling Functions&lt;/a&gt;). These are all called &lt;em&gt;lvalues&lt;/em&gt;, which means they can appear on the left-hand side of an assignment operator. The right-hand operand may be any expression. It produces the new value which the assignment stores in the specified variable, matrix element, or list of return values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af568643a7e883a2cb222f968cbd4a2e09d8a10" translate="yes" xml:space="preserve">
          <source>The legend &lt;code&gt;FontSize&lt;/code&gt; property is initially set to 90% of the axes &lt;code&gt;FontSize&lt;/code&gt; to which it is attached. Use &lt;code&gt;set&lt;/code&gt; to override this if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66972b3a07ccb752b288cb1108af36bc534f4ef9" translate="yes" xml:space="preserve">
          <source>The length is 0 for empty objects, 1 for scalars, and the number of elements for vectors. For matrix or N-dimensional objects, the length is the number of elements along the largest dimension (equivalent to &lt;code&gt;max&amp;nbsp;(size&amp;nbsp;(&lt;var&gt;a&lt;/var&gt;))&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c208955ba49cd2dfc2abb8aee803104b4ce7e078" translate="yes" xml:space="preserve">
          <source>The length of the recording in seconds (&lt;var&gt;length&lt;/var&gt;) must be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84762786a9f36ecdb6162be583006d03c25c364f" translate="yes" xml:space="preserve">
          <source>The level curves are taken from the contour matrix &lt;var&gt;c&lt;/var&gt; computed by &lt;code&gt;contourc&lt;/code&gt; for the same arguments; see the latter for their interpretation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2a63992244d802713fa8e3c15c73551d96cc9a" translate="yes" xml:space="preserve">
          <source>The level of diagnostic printout (0|1|2). If &lt;code&gt;disp&lt;/code&gt; is 0 then diagnostics are disabled. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7279d47a561864e07b46bf52bf44230c26fdb74a" translate="yes" xml:space="preserve">
          <source>The level of verbosity of the warning system may also be controlled by two modes &lt;var&gt;mode&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36aad80cac31d03ec470631fa1bc480d269ce23" translate="yes" xml:space="preserve">
          <source>The libraries Octave uses itself can be utilized in standalone applications. These applications then have access, for example, to the array and matrix classes, as well as to all of the Octave algorithms. The following C++ program, uses class Matrix from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba6023d71ccc6680f11dc16a8bce7975f7a3eb5" translate="yes" xml:space="preserve">
          <source>The light source location and viewer location vectors are specified using parameters &lt;var&gt;lv&lt;/var&gt; and &lt;var&gt;vv&lt;/var&gt; respectively. The location vectors can given as 2-element vectors [azimuth, elevation] in degrees or as 3-element vectors [x, y, z].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1101f6dc240c59f8579f968c5ef5f4b31d8b529" translate="yes" xml:space="preserve">
          <source>The light source location may be specified using &lt;var&gt;lsrc&lt;/var&gt; which can be a 2-element vector [azimuth, elevation] in degrees, or a 3-element vector [lx, ly, lz]. The default value is rotated 45 degrees counterclockwise to the current view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b008ff56f6c595f0ba4c5560ec42ef9325f467" translate="yes" xml:space="preserve">
          <source>The light source location vector &lt;var&gt;lv&lt;/var&gt; can be given as a 2-element vector [azimuth, elevation] in degrees or as a 3-element vector [x, y, z].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9de02b0848c7e6834958b72ac831cf938714e0f" translate="yes" xml:space="preserve">
          <source>The lighting effects are only visible if at least one light object is present and visible in the same axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69aced8752c3551e8dee21fcfe617ab387241e96" translate="yes" xml:space="preserve">
          <source>The limit is measured in kilobytes and is applied to the top-level workspace. The name of the crash dump file is specified by &lt;var&gt;octave_core_file_name&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c09eaa79fc22930c6b6b64fecdb6607b0eac46" translate="yes" xml:space="preserve">
          <source>The limits argument should be a 2-element vector specifying the lower and upper limits to assign to the first and last value in the colormap. Data values outside this range are clamped to the first and last colormap entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89350a63dae1196e901dabd63929586d2ebf5c11" translate="yes" xml:space="preserve">
          <source>The limits of the plot are of the form &lt;code&gt;[&lt;var&gt;xlo&lt;/var&gt;,&amp;nbsp;&lt;var&gt;xhi&lt;/var&gt;]&lt;/code&gt; or &lt;code&gt;[&lt;var&gt;xlo&lt;/var&gt;,&amp;nbsp;&lt;var&gt;xhi&lt;/var&gt;,&amp;nbsp;&lt;var&gt;ylo&lt;/var&gt;,&amp;nbsp;&lt;var&gt;yhi&lt;/var&gt;]&lt;/code&gt;. If no limits are specified the default is &lt;code&gt;[-5, 5]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83dd7081ef284953a62063e9b7023497e84b5ef9" translate="yes" xml:space="preserve">
          <source>The line and fill color of the marker objects at the original of the arrows. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034894e4bfe1db786ccf235e00e6fdf06e33474a" translate="yes" xml:space="preserve">
          <source>The line and fill color of the markers of the points. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f825a423f48a66558b58eec21dd270348a78e8" translate="yes" xml:space="preserve">
          <source>The line and fill color of the markers on the error bars. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894a52dc3cad5e5e9ce6947ea5e8abc6ce407feb" translate="yes" xml:space="preserve">
          <source>The line and fill color of the markers on the stairs. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b38b7fb00b6c046e9b7e0c8c18c84696b86d1c" translate="yes" xml:space="preserve">
          <source>The line and fill color of the markers on the stems. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc10e05c3bf030783d16d640b5577504aa136e64" translate="yes" xml:space="preserve">
          <source>The line and fill color of the markers on the surface. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fa2500a811f1d0bcc0bb1fe4d143277ad166fc" translate="yes" xml:space="preserve">
          <source>The line and fill color of the markers. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7207fb389a3a04cea805ae1d8dd95ffc19fe3d70" translate="yes" xml:space="preserve">
          <source>The line and fill color of the patch objects making up the areas. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b54e4b89625786793cceae847b7270023d80ca" translate="yes" xml:space="preserve">
          <source>The line and fill color of the patch objects making up the bars. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e34f458a5992673163a743785b505a477ddd11" translate="yes" xml:space="preserve">
          <source>The line and the arrowhead can be customized as for arrow annotations, but some property names are duplicated: &lt;code&gt;&quot;head1length&quot;&lt;/code&gt;/&lt;code&gt;&quot;head2length&quot;&lt;/code&gt;, &lt;code&gt;&quot;head1width&quot;&lt;/code&gt;/&lt;code&gt;&quot;head2width&quot;&lt;/code&gt;, etc. The index 1 marks the properties of the arrowhead at the first point in &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2123009e3139ae6ab439dd84f3194812abc112bd" translate="yes" xml:space="preserve">
          <source>The line beginning with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7ac969d85262901f7e8b035bd514b7da494483" translate="yes" xml:space="preserve">
          <source>The line can be customized using &lt;code&gt;&quot;linewidth&quot;&lt;/code&gt;, &lt;code&gt;&quot;linestyle&quot;&lt;/code&gt;, and &lt;code&gt;&quot;color&quot;&lt;/code&gt; properties the same way as for &lt;code&gt;line&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd679e9e0ba3bbd8009eccf33048ee3fd790f12" translate="yes" xml:space="preserve">
          <source>The line number at which the error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3934d90ee2491235f8dc9fed6d175efc6a5a8e" translate="yes" xml:space="preserve">
          <source>The line number of an active breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f490adcd43379284e777b513ac409ec67db3ce" translate="yes" xml:space="preserve">
          <source>The line number with the breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a068ec4dd3b45dbbf5ad8d1d5e079a3ae5efc642" translate="yes" xml:space="preserve">
          <source>The line style can be altered by the &lt;var&gt;linespec&lt;/var&gt; argument in the same manner as the &lt;code&gt;plot&lt;/code&gt; command. If the &lt;code&gt;&quot;filled&quot;&lt;/code&gt; argument is present the markers at the top of the stems will be filled in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d481a48c882c853e573e7c63338af7b96711fb" translate="yes" xml:space="preserve">
          <source>The line width and style of the edge of the patch objects making up the areas. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e4ca82a05f03bf5048d7fb64cb2d0b74cded64" translate="yes" xml:space="preserve">
          <source>The line width and style of the edge of the patch objects making up the bars. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d391ccbd6d8fd0841d5d2a9ce005dfeb4563b1" translate="yes" xml:space="preserve">
          <source>The line width and style of the line objects of the error bars. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ade7c2921ba2c4afbd6f59a444c84bd717c48d" translate="yes" xml:space="preserve">
          <source>The line width and style of the line objects of the quiver. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16378226c3636fb8910fd04293aefa444b6f1051" translate="yes" xml:space="preserve">
          <source>The line width and style of the line objects of the stairs. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f07ed779fc9b5bbe03e394ae9404e1afb02f335" translate="yes" xml:space="preserve">
          <source>The line width and style of the line objects of the stems. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12a4e9b5bc3d3ed7adad993d37c78d5388d50c4" translate="yes" xml:space="preserve">
          <source>The line width and style of the line objects. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c5d8a3dece69040bcf31d28150bf4bb89d901f" translate="yes" xml:space="preserve">
          <source>The line width and style of the lines on the surface. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c4c670755e8f9900e2b36bf05a90cd8efb5506" translate="yes" xml:space="preserve">
          <source>The line width of the line objects of the points. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dde169f5c2fb6416ebefdd1ffc00ea322337385" translate="yes" xml:space="preserve">
          <source>The linear index traverses dimension 1 (rows), then dimension 2 (columns), then dimension 3 (pages), etc. until it has numbered all of the elements. Consider the following 3-by-3 matrices:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1f65eac96b167ac72854fa0e56848c452a2416" translate="yes" xml:space="preserve">
          <source>The lines following &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196a0df260a240abbf1ad271a8baac1bf6edb0b6" translate="yes" xml:space="preserve">
          <source>The linestyle of the stem. (Default: &lt;code&gt;&quot;-&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847acbb01e733985c756c20a96859d12a88f9bbf" translate="yes" xml:space="preserve">
          <source>The linestyle to use for the plot can be defined with the argument &lt;var&gt;linespec&lt;/var&gt; of the same format as the &lt;code&gt;plot&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9a0a9aa6daea1b3dca2a6e7b345405c62584e1" translate="yes" xml:space="preserve">
          <source>The list of actions for an FTP object are shown below. All functions require an FTP object as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6490d2a9c2426ad397a80173f0f4ece33a0bd223" translate="yes" xml:space="preserve">
          <source>The list of arguments to the function of type &lt;code&gt;octave_value_list&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fea097f1fb8592e0b11bb60da4ca31c8a3a100" translate="yes" xml:space="preserve">
          <source>The list of built-in colormaps is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965ec9e5dfbb941dfab5fd3134a57e6dd93b56ce" translate="yes" xml:space="preserve">
          <source>The list of statements contained between keywords like &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; and the corresponding end statement is called the &lt;em&gt;body&lt;/em&gt; of a control statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d668ade13532d073ff1ed7bcfdbaa576ef9326d6" translate="yes" xml:space="preserve">
          <source>The list of variables to save may use wildcard patterns containing the following special characters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81d4bcd9dfc40c737c2a60f2349653729e3cc01" translate="yes" xml:space="preserve">
          <source>The local error test applied at each integration step is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2286d350dc5383385f458105998e96c1502da78" translate="yes" xml:space="preserve">
          <source>The location in which to install the architecture dependent files can be independently specified with an addition argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5f538d260e8b53ac4e7b1af8c01cfc61f2289a" translate="yes" xml:space="preserve">
          <source>The logical size of the variable. A scalar is 1x1, a vector is 1xN or Nx1, a 2-D matrix is MxN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f463fc4fb42d0d81acebb7589c34994448bab0c" translate="yes" xml:space="preserve">
          <source>The logical vector &lt;var&gt;select&lt;/var&gt; specifies the selected eigenvalues as they appear along &lt;var&gt;S&lt;/var&gt;&amp;rsquo;s diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b0d3ec80a2c2a4dbbad635c8a295030675c2e2" translate="yes" xml:space="preserve">
          <source>The loop works like this: first, the value of &lt;code&gt;i&lt;/code&gt; is set to 3. Then, the &lt;code&gt;while&lt;/code&gt; tests whether &lt;code&gt;i&lt;/code&gt; is less than or equal to 10. This is the case when &lt;code&gt;i&lt;/code&gt; equals 3, so the value of the &lt;code&gt;i&lt;/code&gt;-th element of &lt;code&gt;fib&lt;/code&gt; is set to the sum of the previous two values in the sequence. Then the &lt;code&gt;i++&lt;/code&gt; increments the value of &lt;code&gt;i&lt;/code&gt; and the loop repeats. The loop terminates when &lt;code&gt;i&lt;/code&gt; reaches 11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e76ce39c0f6501bbfda0a09d97c1b0d27e0925b" translate="yes" xml:space="preserve">
          <source>The lower/upper bandwidth of a matrix is the number of subdiagonals/superdiagonals with nonzero entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7832f005dfefd9879a98c93d9a2944839d50116c" translate="yes" xml:space="preserve">
          <source>The m-file that will be called to perform the function. This field is empty for anonymous and built-in functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3aa165429bc3aeeffa7ed7ae142afc3651dadf" translate="yes" xml:space="preserve">
          <source>The magnitude is defined as |&lt;var&gt;z&lt;/var&gt;| = &lt;code&gt;sqrt (x^2 + y^2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41d53f71321cd6322805bfd89a8b1a3e7394ca7" translate="yes" xml:space="preserve">
          <source>The mailing list &lt;a href=&quot;mailto:help@octave.org&quot;&gt;help@octave.org&lt;/a&gt; exists for the discussion of matters related to using and installing Octave. If would like to join the discussion, please send a short note to &lt;a href=&quot;mailto:help-request@octave.org&quot;&gt;help-request@octave.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ba7153d649dd24ce6c277bf9da79c9735fc4bb" translate="yes" xml:space="preserve">
          <source>The main command for profiling is &lt;code&gt;profile&lt;/code&gt;, which can be used to start or stop the profiler and also to query collected data afterwards. The data is returned in an Octave data structure which can then be examined or further processed by other routines or tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197836bac273944a8f06a6a95d7cf75096d1ffb5" translate="yes" xml:space="preserve">
          <source>The major issue is that the help string will typically be longer than a single line of text, and so the formatting of long multi-line help strings needs to be taken into account. There are several possible solutions, but the most common is illustrated in the following example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2a49959c0a80ca484fff3bdac509447736ea51" translate="yes" xml:space="preserve">
          <source>The manufacturer of the recording equipment. This is the manufacture of the DSC, scanner, video digitizer or other equipment that generated the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733b14495ba42232a373ece66e8e887d07338a78" translate="yes" xml:space="preserve">
          <source>The map may also be specified by a string, &lt;var&gt;map_name&lt;/var&gt;, which is the name of a function that returns a colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e33a495aad6eedf9f97a4ae700d7c466eb8b38" translate="yes" xml:space="preserve">
          <source>The marker symbol to use at the top of each stem. (Default: &lt;code&gt;&quot;o&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad53d1021fe6fb4222c03ec68dff8b8c51d800c" translate="yes" xml:space="preserve">
          <source>The marker to use can be changed with the &lt;var&gt;style&lt;/var&gt; argument, that is a string defining a marker in the same manner as the &lt;code&gt;plot&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef3814bd7512cbd5f8b8e3f8ff319ccad0ec6e4" translate="yes" xml:space="preserve">
          <source>The marker to use can be changed with the &lt;var&gt;style&lt;/var&gt; argument, that is a string defining a marker in the same manner as the &lt;code&gt;plot&lt;/code&gt; command. If no marker is specified it defaults to &lt;code&gt;&quot;o&quot;&lt;/code&gt; or circles. If the argument &lt;code&gt;&quot;filled&quot;&lt;/code&gt; is given then the markers are filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70930c47a7e2f1e0c3b4f363ad36bdc94ff8cab5" translate="yes" xml:space="preserve">
          <source>The marker to use can be changed with the &lt;var&gt;style&lt;/var&gt; argument; it is a string defining a marker in the same manner as the &lt;code&gt;plot&lt;/code&gt; command. If no marker is specified it defaults to &lt;code&gt;&quot;o&quot;&lt;/code&gt; or circles. If the argument &lt;code&gt;&quot;filled&quot;&lt;/code&gt; is given then the markers are filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76508c16b6b45597430952ce790e8a2009926ba" translate="yes" xml:space="preserve">
          <source>The match is performed at the end of each path element. For example, if &lt;var&gt;dir&lt;/var&gt; is &lt;code&gt;&quot;foo/bar&quot;&lt;/code&gt;, it matches the path element &lt;code&gt;&quot;/some/dir/foo/bar&quot;&lt;/code&gt;, but not &lt;code&gt;&quot;/some/dir/foo/bar/baz&quot;&lt;/code&gt;&lt;code&gt;&quot;/some/dir/allfoo/bar&quot;&lt;/code&gt;. When &lt;var&gt;dir&lt;/var&gt; is an absolute name, rather than just a path fragment, it is matched against the file system instead of Octave&amp;rsquo;s loadpath. In this case, if &lt;var&gt;dir&lt;/var&gt; exists it will be returned in &lt;var&gt;dirname&lt;/var&gt;, otherwise an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4218fed22c8f903d20e48b54002b2d7b0f14053d" translate="yes" xml:space="preserve">
          <source>The matched pattern &lt;var&gt;pat&lt;/var&gt; can include any of the standard regex operators, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0043aa92f26c6ea46e9070c6c4821753e4d98b63" translate="yes" xml:space="preserve">
          <source>The matching of options is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a91101681454d04bd47e458aedfbda6ac35b207" translate="yes" xml:space="preserve">
          <source>The material properties of the surface can specified using a 4-element vector &lt;var&gt;P&lt;/var&gt; = [&lt;var&gt;AM&lt;/var&gt;&lt;var&gt;D&lt;/var&gt;&lt;var&gt;SP&lt;/var&gt;&lt;var&gt;exp&lt;/var&gt;] which defaults to &lt;var&gt;p&lt;/var&gt; = [0.55 0.6 0.4 10].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cf8f635bbc59855e90cbb3b842be5acd9f24ed" translate="yes" xml:space="preserve">
          <source>The matrix &lt;var&gt;A&lt;/var&gt; must not be sparse. If the matrix is sparse then &lt;code&gt;condest (&lt;var&gt;A&lt;/var&gt;)&lt;/code&gt; or &lt;code&gt;rcond (full (&lt;var&gt;A&lt;/var&gt;))&lt;/code&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347d58fbf1db08c45eef75dbfac1df028a9bcd69" translate="yes" xml:space="preserve">
          <source>The matrix &lt;var&gt;D&lt;/var&gt; may also be rectangular, m-by-n where &lt;code&gt;m != n&lt;/code&gt;. If &lt;code&gt;m &amp;lt; n&lt;/code&gt;, then the expression &lt;code&gt;D*M&lt;/code&gt; is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf2e1fb6e09a94fbad1a0ff46f38bce87433a3a" translate="yes" xml:space="preserve">
          <source>The matrix &lt;var&gt;z&lt;/var&gt; contains height values above the rectangular grid determined by &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;. If only a single input &lt;var&gt;z&lt;/var&gt; is provided then &lt;var&gt;x&lt;/var&gt; is taken to be &lt;code&gt;1:columns (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; and &lt;var&gt;y&lt;/var&gt; is taken to be &lt;code&gt;1:rows (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;. The minimum data size is 2x2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bad9e788219719dba8d2fba1f7af2a0006e645" translate="yes" xml:space="preserve">
          <source>The matrix case is done as a sequence of rank-1 updates; thus, for large enough k, it will be both faster and more accurate to recompute the factorization from scratch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991c11ab8c411cf5146df2fbd695c00cf9a1f38a" translate="yes" xml:space="preserve">
          <source>The matrix exponential is defined as the infinite Taylor series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12ec774b7fdc591a1bce7ee03be3fb66cf1a821" translate="yes" xml:space="preserve">
          <source>The matrix is assumed to be singular and will be treated with a minimum norm solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392773183bac9a88826dfbbe2f9d61e816f0cc03" translate="yes" xml:space="preserve">
          <source>The matrix is not required to be square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939c601643ff7abc3d623157e0dfa6704e535e21" translate="yes" xml:space="preserve">
          <source>The matrix of GLS residuals, &lt;em&gt;&lt;var&gt;r&lt;/var&gt; = &lt;var&gt;y&lt;/var&gt; - &lt;var&gt;x&lt;/var&gt;*&lt;var&gt;beta&lt;/var&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef39132787f23dc01816021505f4077490950faf" translate="yes" xml:space="preserve">
          <source>The matrix of OLS residuals, &lt;code&gt;&lt;var&gt;r&lt;/var&gt; = &lt;var&gt;y&lt;/var&gt; - &lt;var&gt;x&lt;/var&gt;*&lt;var&gt;beta&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa51959018af9a4e48baab10dcec33605e4accc8" translate="yes" xml:space="preserve">
          <source>The maximum allowable memory usage can be configured using the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99dd3c69410310a1f48366744916de5adf750c56" translate="yes" xml:space="preserve">
          <source>The maximum number of elements in a matrix is fixed when Octave is compiled. The allowable number can be queried with the function &lt;code&gt;sizemax&lt;/code&gt;. Note that other factors, such as the amount of memory available on your machine, may limit the maximum size of matrices to something smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9de0f8cc9b63cc4a146e777f5afb939e70b210" translate="yes" xml:space="preserve">
          <source>The maximum number of function calls to the vectorized function &lt;var&gt;f&lt;/var&gt;. The default value is 5000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa256ab91877bca9cd70c9cb47eaf043b7d601e" translate="yes" xml:space="preserve">
          <source>The maximum number of iterations was reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a5b277d3307e1fb9d3ed83f1f24f726f845f63" translate="yes" xml:space="preserve">
          <source>The maximum number of iterations. The default is 300.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0605595cfaf340b8e092eb6082401b59b3610ccc" translate="yes" xml:space="preserve">
          <source>The maximum possible amount of memory depends on your system. On a Windows system with 2 Gigabytes main memory you should be able to set this maximum to about 1 Gigabyte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e2d7e64ec23e50658248f140b9f0a276306e12" translate="yes" xml:space="preserve">
          <source>The maximum test length to run. The default value is 100. Alternatively, use &lt;code&gt;[min_n, max_n]&lt;/code&gt; or specify the &lt;var&gt;n&lt;/var&gt; exactly with &lt;code&gt;[n1, n2, &amp;hellip;, nk]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735ef1bcea994f039d810fd8296bdc066edfc423" translate="yes" xml:space="preserve">
          <source>The mean absolute deviation is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e97935df8b694874d3e205062899719c0e3fa0e" translate="yes" xml:space="preserve">
          <source>The mean is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd72a4e317af3b7654423874b2f5cbd195dbe792" translate="yes" xml:space="preserve">
          <source>The mean square is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0031cd9fff66d3ffad8569857294d14d8c2b4ed" translate="yes" xml:space="preserve">
          <source>The median absolute deviation is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93bcb802fb5fb773d844e08a706995a562ee118" translate="yes" xml:space="preserve">
          <source>The members of the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6214dc460de8dd2a3c999a2325d7a2608b75cb4c" translate="yes" xml:space="preserve">
          <source>The message identifier of this error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5470d0842b4f3dc6de3167f4e6cce97d6d134057" translate="yes" xml:space="preserve">
          <source>The message may have multiple lines separated by newline characters (&quot;\n&quot;), or it may be a cellstr array with one element for each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30554549c077b92658e949f54643cc9578058ca4" translate="yes" xml:space="preserve">
          <source>The method used is described in: A. Pothen &amp;amp; C.-J. Fan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f6fe3cab4ab3e964a8601e9376a0d74692bc19" translate="yes" xml:space="preserve">
          <source>The methods available to calculate sample quantiles are the nine methods used by R (&lt;a href=&quot;https://www.r-project.org/&quot;&gt;https://www.r-project.org/&lt;/a&gt;). The default value is &lt;var&gt;method&lt;/var&gt; = 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abdb3a977bef234378955a3b64305a28848782f" translate="yes" xml:space="preserve">
          <source>The methods can be accessed from everywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6b9708f016974aa04a697064e965fb39f5c1c5" translate="yes" xml:space="preserve">
          <source>The methods can only be accessed from other class methods and from subclasses of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0430d325168f39eecc943b9e9056638edb0e2a" translate="yes" xml:space="preserve">
          <source>The methods can only be accessed from other class methods. Subclasses of that class cannot access them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86658dd866560b482dd3c8416eea56ee0f4e8985" translate="yes" xml:space="preserve">
          <source>The mex-file interface, in addition to using &lt;code&gt;mxGetM&lt;/code&gt;, &lt;code&gt;mxGetN&lt;/code&gt;, &lt;code&gt;mxSetM&lt;/code&gt;, &lt;code&gt;mxSetN&lt;/code&gt;, &lt;code&gt;mxGetPr&lt;/code&gt;, &lt;code&gt;mxGetPi&lt;/code&gt;, &lt;code&gt;mxSetPr&lt;/code&gt;, and &lt;code&gt;mxSetPi&lt;/code&gt;, also supplies the following functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b978e6d3918f4fcb249e920a9f886eb81fec4e1" translate="yes" xml:space="preserve">
          <source>The minimum absolute step size allowed (default is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722d6d2a4e2c2045d8a9b63a09f10b5d4a7349c3" translate="yes" xml:space="preserve">
          <source>The minimum attained model value, &lt;code&gt;1/2*&lt;var&gt;xmin&lt;/var&gt;'*&lt;var&gt;c&lt;/var&gt;*&lt;var&gt;xmin&lt;/var&gt; + &lt;var&gt;d&lt;/var&gt;'*&lt;var&gt;xmin&lt;/var&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602298d7dc421af5cf9bbc099beb4fc744fdc3c9" translate="yes" xml:space="preserve">
          <source>The minimum requirement, as previously discussed, is to check the number of input arguments before using them to avoid referencing a nonexistent argument. However, in some cases this might not be sufficient as the underlying code imposes further constraints. For example, an external function call might be undefined if the input arguments are not integers, or if one of the arguments is zero, or if the input is complex and a real value was expected. Therefore, oct-files often need additional input parameter checking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d58b1d77d9b1d54567b328e7397f0799ac83903" translate="yes" xml:space="preserve">
          <source>The model is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9795c2eb8eb54242c424daa97125ecab98a0eb" translate="yes" xml:space="preserve">
          <source>The model name or model number of the recording equipment as mentioned on the field &lt;code&gt;&quot;Make&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8fe7782481b548bc3ce5d2d290138c082b825d" translate="yes" xml:space="preserve">
          <source>The modified Jacobian function must have the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefac7616ae48d0f695d4731b66aff1230386835" translate="yes" xml:space="preserve">
          <source>The most common and easiest way to create a diagonal matrix is using the built-in function &lt;em&gt;diag&lt;/em&gt;. The expression &lt;code&gt;diag (v)&lt;/code&gt;, with &lt;var&gt;v&lt;/var&gt; a vector, will create a square diagonal matrix with elements on the main diagonal given by the elements of &lt;var&gt;v&lt;/var&gt;, and size equal to the length of &lt;var&gt;v&lt;/var&gt;. &lt;code&gt;diag (v, m, n)&lt;/code&gt; can be used to construct a rectangular diagonal matrix. The result of these expressions will be a special diagonal matrix object, rather than a general matrix object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2828960165ad096506d111c8a2ef6f0d75504f7" translate="yes" xml:space="preserve">
          <source>The most common use of errors is for checking input arguments to functions. The following example calls the &lt;code&gt;error&lt;/code&gt; function if the function &lt;code&gt;f&lt;/code&gt; is called without any input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b577b404e1d8e7459cd20dd00c244ede65bac93b" translate="yes" xml:space="preserve">
          <source>The most commonly used ODE options, which are always assigned a value by &lt;code&gt;odeset&lt;/code&gt;, are the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4a5b0971a8d838a69f230293ae91979b5e652e" translate="yes" xml:space="preserve">
          <source>The most recently computed result that was not explicitly assigned to a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c35b61cfe39c24032bed5376ac7ba5dbf92e8d" translate="yes" xml:space="preserve">
          <source>The movie &lt;var&gt;mov&lt;/var&gt; must be a struct array of frames with fields &lt;code&gt;&quot;cdata&quot;&lt;/code&gt; and &lt;code&gt;&quot;colormap&quot;&lt;/code&gt;, as returned by the &lt;code&gt;getframe&lt;/code&gt; function. By default all images are displayed once, at 12 fps, in the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856e07dd585d25dc54168df2d75e439ac219351a" translate="yes" xml:space="preserve">
          <source>The name &lt;var&gt;f1&lt;/var&gt; may contain globbing patterns, or may be a cell array of strings. If &lt;var&gt;f1&lt;/var&gt; expands to multiple filenames, &lt;var&gt;f2&lt;/var&gt; must be a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e35a6fe1d3bdedf8d2b52440db4909bc3a52d49" translate="yes" xml:space="preserve">
          <source>The name of function in which the error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573c9adc7002f9e22d7cf30f06505f369fa49f95" translate="yes" xml:space="preserve">
          <source>The name of the command to run is given by &lt;var&gt;command&lt;/var&gt;. The argument &lt;var&gt;mode&lt;/var&gt; may be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec25e43ce8c934955d32a27b23c5c8b6de36bbc0" translate="yes" xml:space="preserve">
          <source>The name of the file format. This may match the file extension but Octave will automatically detect the file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df6926671267cc843b90d2254b75ad554f20416" translate="yes" xml:space="preserve">
          <source>The name of the file where the error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca161aaf2e8373253b5ef617dce02b30a82841d8" translate="yes" xml:space="preserve">
          <source>The name of the function with a breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dab54d2e85abc216f9336f2e3aabeef4540be0" translate="yes" xml:space="preserve">
          <source>The name of the function with a breakpoint. A subfunction, say &lt;code&gt;func2&lt;/code&gt; within an m-file, say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d522a8e66fbf6d02af2d66efd37745930ceb8c" translate="yes" xml:space="preserve">
          <source>The name of the m-file where the function code is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b5cccfc708030efd58a18de878c6e8703f7d88" translate="yes" xml:space="preserve">
          <source>The name of the process is given by &lt;var&gt;command&lt;/var&gt;, and &lt;var&gt;args&lt;/var&gt; is an array or cell array of strings containing options for the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f177448ea56ed4f31c0aa502063a0ffcb870c5" translate="yes" xml:space="preserve">
          <source>The name of the program (usually just &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5c171e470acee77d3e646d7c9294e8b30feb42" translate="yes" xml:space="preserve">
          <source>The name of the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79122b499199ce4e1735bf2fa2e4d4df56d01660" translate="yes" xml:space="preserve">
          <source>The named function can also take more than two input arguments, with the input arguments given as third input argument &lt;var&gt;b&lt;/var&gt;, fourth input argument &lt;var&gt;c&lt;/var&gt;, &amp;hellip; If given more than one array input argument then all input arguments must have the same sizes, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c261115ddf47feffeebd90e21a3322407427f40e" translate="yes" xml:space="preserve">
          <source>The named preference group must be a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62daf70a179e65f812eee015116a4bcf2ab21c72" translate="yes" xml:space="preserve">
          <source>The negative imaginary complex numbers are placed first within each pair. All real numbers (those with &lt;code&gt;abs (imag (&lt;var&gt;z&lt;/var&gt;)) / abs (&lt;var&gt;z&lt;/var&gt;) &amp;lt; &lt;var&gt;tol&lt;/var&gt;&lt;/code&gt;) are placed after the complex pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a0ff321c5e2c1992e006616015cd4e312b049f" translate="yes" xml:space="preserve">
          <source>The new broadcasting semantics almost never affect code that worked in previous versions of Octave. Consequently, all code inherited from &lt;small&gt;MATLAB&lt;/small&gt; that worked in previous versions of Octave should still work without change in Octave. The only exception is code such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508258e3ab71f1cbda73afbaab999e09322f4596" translate="yes" xml:space="preserve">
          <source>The newer &lt;code&gt;gesdd&lt;/code&gt; routine is based on a Divide-and-Conquer algorithm that is 5X faster than the alternative &lt;code&gt;gesvd&lt;/code&gt;, which is based on QR factorization. However, the new algorithm can use significantly more memory. For an MxN input matrix the memory usage is of order O(min(M,N) ^ 2), whereas the alternative is of order O(max(M,N)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db54de8f7f82234061e437e190a51d1391b7632" translate="yes" xml:space="preserve">
          <source>The next argument is treated as a filename. All variables found within the specified file are listed. No patterns are accepted when reading variables from a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89607e349d54fe49877d245d43d2820df44f110b" translate="yes" xml:space="preserve">
          <source>The next character of the input is read. This includes delimiters, whitespace, and end-of-line characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e149ad19a7d5c3cd8f40455ccee45edad6b894d" translate="yes" xml:space="preserve">
          <source>The next example counts indexing errors. The errors are caught using the field identifier of the structure returned by the function &lt;code&gt;lasterror&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20505fc5fde77a604c8e316f543c1c19c772202a" translate="yes" xml:space="preserve">
          <source>The next three arguments are all optional and any number of them may be given in any order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8d894ebc423ad156b58dae48ee659b74560008" translate="yes" xml:space="preserve">
          <source>The nominal x positions of the bars. Changes in this property and propagated to the other members of the bar series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bc253bc15378138079feba4a85e5c89fbd1a35" translate="yes" xml:space="preserve">
          <source>The nonzero elements of this matrix are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6760c66224016afc05db9e27d899f5e4f3be99d5" translate="yes" xml:space="preserve">
          <source>The nonzero execution times recorded for the expression &lt;var&gt;f2&lt;/var&gt; in seconds. If required, the mean time ratio is simply &lt;code&gt;mean (T_f ./ T_f2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8973a2f9e50b3d57b57dd8175103d426a980e7e8" translate="yes" xml:space="preserve">
          <source>The nonzero execution times recorded for the expression &lt;var&gt;f&lt;/var&gt; in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824defc9fe1d01540b3a8fc817b41455557a4663" translate="yes" xml:space="preserve">
          <source>The norm of the residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2559b7206c2be9a951cfe7dff29ab21cfbb97ab" translate="yes" xml:space="preserve">
          <source>The normal command-line editing and history functions are available in debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72144c53bd029f11c326734e2c81d45c843d6c53" translate="yes" xml:space="preserve">
          <source>The normalized incomplete beta function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20520454a6e5163850a2be0b951a5c8d42fdb6d4" translate="yes" xml:space="preserve">
          <source>The normalized incomplete gamma function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ca2b451b60607dece1157765afc56093e80e2c" translate="yes" xml:space="preserve">
          <source>The number of &lt;var&gt;breaks&lt;/var&gt; (or knots) used to construct the piecewise polynomial is a significant factor in suppressing the noise present in the input data, &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;. This is demonstrated by the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e912f0c2012bcb4ecfde83894a97d7fc4a0c8a" translate="yes" xml:space="preserve">
          <source>The number of Lanzcos basis vectors to use. More vectors will result in faster convergence, but a greater use of memory. The optimal value of &lt;code&gt;p&lt;/code&gt; is problem dependent and should be in the range &lt;code&gt;&lt;var&gt;k&lt;/var&gt; + 1&lt;/code&gt; to &lt;var&gt;n&lt;/var&gt;. The default value is &lt;code&gt;2 * &lt;var&gt;k&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867bf9db5bb4384293cfb04f81aeb27d3930380b" translate="yes" xml:space="preserve">
          <source>The number of bytes used to store the matrix or array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4606ffe2e4512a328f35616bcdceeee8dc233606" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the matrix or array. Matrices are always 2-D, but arrays can be N-dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3691ce15853bcd940bb2347ec23c55eea8a67a2" translate="yes" xml:space="preserve">
          <source>The number of eigenvalues and eigenvectors to calculate is given by &lt;var&gt;k&lt;/var&gt; and defaults to 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0188f69fa0c311d38796b8588a494c51c601d9" translate="yes" xml:space="preserve">
          <source>The number of elements in a sparse matrix is considered to be the number of nonzero elements, rather than the product of the dimensions. Therefore,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f8433fc30ddd0b9b03ad9a3e2ca92e43cc8ef7" translate="yes" xml:space="preserve">
          <source>The number of elements of &lt;var&gt;x&lt;/var&gt; should be divisible by the bit length of &lt;var&gt;class&lt;/var&gt;. If it is not, excess bits are discarded. Bits come in increasing order of significance, i.e., &lt;code&gt;x(1)&lt;/code&gt; is bit 0, &lt;code&gt;x(2)&lt;/code&gt; is bit 1, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac55e176527c86618685ad5fc5a9f9d3d777344" translate="yes" xml:space="preserve">
          <source>The number of faces and vertices in the patch is reduced by iteratively collapsing the shortest edge of the patch to its midpoint (as discussed, e.g., here: &lt;a href=&quot;https://libigl.github.io/libigl/tutorial/tutorial.html#meshdecimation&quot;&gt;https://libigl.github.io/libigl/tutorial/tutorial.html#meshdecimation&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322157e68167337535cdd6d5bbbeee51f9ef5056" translate="yes" xml:space="preserve">
          <source>The number of fields in &lt;var&gt;fields&lt;/var&gt; must match the number of elements in &lt;var&gt;cell&lt;/var&gt; along dimension &lt;var&gt;dim&lt;/var&gt;, that is &lt;code&gt;numel (&lt;var&gt;fields&lt;/var&gt;) == size (&lt;var&gt;cell&lt;/var&gt;, &lt;var&gt;dim&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;dim&lt;/var&gt; is omitted, a value of 1 is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919c6312a170500d6bfef37f705e31a1eeb7bd44" translate="yes" xml:space="preserve">
          <source>The number of input arguments (# of right-hand side args).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50edec689808a282d4f2aeea339490399dd103f5" translate="yes" xml:space="preserve">
          <source>The number of items successfully read is returned in &lt;var&gt;count&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a261f5342b42df104a8fabace2e24723418e57" translate="yes" xml:space="preserve">
          <source>The number of iterations required to find the solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8127d6ea9bcb137b57afee40540128766c46a0af" translate="yes" xml:space="preserve">
          <source>The number of output arguments of &lt;code&gt;cellfun&lt;/code&gt; matches the number of output arguments of the function. The outputs of the function will be collected into the output arguments of &lt;code&gt;cellfun&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7d00bc6979cce17183710c2bcbaa8f321a9449" translate="yes" xml:space="preserve">
          <source>The number of output arguments, which can be&amp;mdash;and often is&amp;mdash;omitted if not used, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab6a5ecb340ade1d28287530cbda537725419df" translate="yes" xml:space="preserve">
          <source>The number of return arguments (# of left-hand side args).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481fa0ccb2976f0e720e9899c7002428816e09af" translate="yes" xml:space="preserve">
          <source>The number of return arguments, their size, and their class depend on the expression entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959b6942869b9111dc821a687223f5ff520c4abc" translate="yes" xml:space="preserve">
          <source>The number of threads used for computing the plans and executing the transforms can be set with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a847ac422ab718f96876a7a52b1d7c4ec4894355" translate="yes" xml:space="preserve">
          <source>The number of values on the left side of the expression can, however, not exceed the number of values on the right side. For example, the following will produce an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12ea8c9f1df6fc3be236d720cda4a40522820c5" translate="yes" xml:space="preserve">
          <source>The numbers in the vector &lt;var&gt;native_bytes&lt;/var&gt; are rounded and clipped to integers between 0 and 255. This byte stream is then mapped into the code page given by the string &lt;var&gt;codepage&lt;/var&gt; and returned in the string &lt;var&gt;utf8_str&lt;/var&gt;. Octave uses UTF-8 as its internal encoding. The string &lt;var&gt;codepage&lt;/var&gt; must be an identifier of a valid code page. Examples for valid code pages are &lt;code&gt;&quot;ISO-8859-1&quot;&lt;/code&gt;, &lt;code&gt;&quot;Shift-JIS&quot;&lt;/code&gt;, or &lt;code&gt;&quot;UTF-16&quot;&lt;/code&gt;. For a list of supported code pages, see &lt;a href=&quot;https://www.gnu.org/software/libiconv&quot;&gt;https://www.gnu.org/software/libiconv&lt;/a&gt;. If &lt;var&gt;codepage&lt;/var&gt; is omitted or empty, the system default codepage is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba19cb2a1788f14c12418ae79c5ecdfaf1fee46" translate="yes" xml:space="preserve">
          <source>The numeric group id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e6b22c1e183333c7a734d0886515308ccaace2" translate="yes" xml:space="preserve">
          <source>The numeric user id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a3ebb4cd3c0b3c8b87f9603b9605b9fb168135" translate="yes" xml:space="preserve">
          <source>The objective function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba899cd9606ee639bde210266b4c87b04d32874f" translate="yes" xml:space="preserve">
          <source>The observation errors, &lt;var&gt;e&lt;/var&gt;, are assumed to originate from an underlying &lt;em&gt;p&lt;/em&gt;-variate distribution with zero mean and &lt;em&gt;p&lt;/em&gt;-by-&lt;em&gt;p&lt;/em&gt; covariance matrix &lt;var&gt;S&lt;/var&gt;, both constant conditioned on &lt;var&gt;x&lt;/var&gt;. Furthermore, the matrix &lt;var&gt;S&lt;/var&gt; is constant with respect to each observation such that &lt;code&gt;mean (&lt;var&gt;e&lt;/var&gt;) = 0&lt;/code&gt; and &lt;code&gt;cov (vec (&lt;var&gt;e&lt;/var&gt;)) = kron (&lt;var&gt;s&lt;/var&gt;, &lt;var&gt;I&lt;/var&gt;)&lt;/code&gt;. (For cases that don&amp;rsquo;t meet this criteria, such as autocorrelated errors, see generalized least squares, gls, for more efficient estimations.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3b4b214a584efe6ac8b04d73f47c46e4d73a53" translate="yes" xml:space="preserve">
          <source>The observation errors, &lt;var&gt;e&lt;/var&gt;, are assumed to originate from an underlying &lt;em&gt;p&lt;/em&gt;-variate distribution with zero mean but possibly heteroscedastic observations. That is, in general, &lt;code&gt;&lt;em&gt;mean (&lt;var&gt;e&lt;/var&gt;) = 0&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;cov (vec (&lt;var&gt;e&lt;/var&gt;)) = (&lt;em&gt;s&lt;/em&gt;^2)*&lt;var&gt;o&lt;/var&gt;&lt;/em&gt;&lt;/code&gt; in which &lt;em&gt;s&lt;/em&gt; is a scalar and &lt;var&gt;o&lt;/var&gt; is a &lt;em&gt;t*p&lt;/em&gt;-by-&lt;em&gt;t*p&lt;/em&gt; matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e654a11f2a5171fa8135b8417ba3aa01440e8b7" translate="yes" xml:space="preserve">
          <source>The old versions of &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;randn&lt;/code&gt; obtain their initial seeds from the system clock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7945613bf9d20e700880ca88d67431e3780b5fb6" translate="yes" xml:space="preserve">
          <source>The only thing remaining to make this class usable is a method for processing data. But before that, it is usually desirable to also have a way of changing the data stored in a class. Since the fields in the underlying struct are private by default, it is necessary to provide a mechanism to access the fields. The &lt;code&gt;subsref&lt;/code&gt; method may be used for both tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d6d33e39b45bb19f3ba95b5f26d6558c3c6c1b" translate="yes" xml:space="preserve">
          <source>The operator can be any logical operator from the set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107109a8c93162b4daa9c8e439ffdd466d5b451d" translate="yes" xml:space="preserve">
          <source>The optimizer (the value of the decision variables at the optimum).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9353ba007cf365bc8c6695b0c2bcd97974d799e" translate="yes" xml:space="preserve">
          <source>The optimum value of the objective function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbba425e1cb1b870203b6af5598f1206d6c2f1de" translate="yes" xml:space="preserve">
          <source>The option input &lt;var&gt;method&lt;/var&gt; determines which convolution kernel is used for the smoothing process. Possible choices:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76530938af66fc05ab40f7c309e715d0fb463814" translate="yes" xml:space="preserve">
          <source>The option output &lt;var&gt;output_file&lt;/var&gt; is a string with path and file name of the generated report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b9f1ce4c729b2ded7edcf5db48cd7ab36a842d" translate="yes" xml:space="preserve">
          <source>The optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485952acdd94c8a62c71669c976fd03448a38b20" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;&quot;type&quot;&lt;/code&gt; input determines the class of the variable used for calculations. By default, operations on floating point inputs (double or single) are performed in their native data type, while operations on integer, logical, and character data types are performed using doubles. If the argument &lt;code&gt;&quot;native&quot;&lt;/code&gt; is given, then the operation is performed in the same type as the original argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff5375a8339eaad0b09e84902d5e47096712c87" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;&quot;type&quot;&lt;/code&gt; input determines the class of the variable used for calculations. If the argument &lt;code&gt;&quot;native&quot;&lt;/code&gt; is given, then the operation is performed in the same type as the original argument, rather than the default double type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b384adfdc0b9ab0e5ef65b0f403e6d131195366c" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;dim&lt;/var&gt; argument can be used to limit the dimension along which the permutation occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eab72161762ff62d10781a46671283b398be4bd" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;title&lt;/var&gt; (character string) can be used to specify the dialog caption. It defaults to &lt;code&gt;&quot;Question Dialog&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f83327f6d6fbc89236f6f157e501e67f8ca491d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;code&gt;&quot;nanflag&quot;&lt;/code&gt; defaults to &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; which does not include NaN values in the result. If the argument &lt;code&gt;&quot;includenan&quot;&lt;/code&gt; is given, and there is a NaN present, then the result for both smallest (&lt;var&gt;s&lt;/var&gt;) and largest (&lt;var&gt;l&lt;/var&gt;) elements will be NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1178efcc11d50ad43319093c9cc576a79fe00640" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;code&gt;&quot;overlaps&quot;&lt;/code&gt; determines whether the pattern can match at every position in &lt;var&gt;str&lt;/var&gt; (true), or only for unique occurrences of the complete pattern (false). The default is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37af708bff1bcc2fab6856a5c2858d3438ab89ec" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;arch&lt;/var&gt; is a string specifying the data format for the file. Valid values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e998102dcdeddbc1fdce7ae01e1073e0add1666e" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;chars&lt;/var&gt; specifies a list of 3 characters to use for printing values greater than zero, less than zero, and equal to zero. For example, with the format &lt;code&gt;&quot;+&quot; &quot;+-.&quot;&lt;/code&gt;, the matrix &lt;code&gt;[1, 0, -1; -1, 0, 1]&lt;/code&gt; is displayed as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b108bd971cc27a9248d1b0ec07a450c228951062" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;class&lt;/var&gt; specifies the class of the return array and defaults to double. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ecccba881bc1b4e0683e08a12cc1ea4c9e8d41" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;class&lt;/var&gt; specifies the return type and may be either &lt;code&gt;&quot;double&quot;&lt;/code&gt; or &lt;code&gt;&quot;single&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fae61c125c7c26a322dde05de60b69649023ab6" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;class&lt;/var&gt; will return a matrix of the requested type. The default is &lt;code&gt;&quot;double&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811bca4b722a9f0ffef8837679c65facefc94c4d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;class&lt;/var&gt;, allows &lt;code&gt;eye&lt;/code&gt; to return an array of the specified type, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f135af1d81597a5b33d83c8ca67c464d6f395de" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;datatype&lt;/var&gt; specifies the datatype to return. If it is &lt;code&gt;&quot;native&quot;&lt;/code&gt;, then the type of data depends on how the data is stored in the audio file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f077b5ea3874c8681e004539d2b60a54397b7a4" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;dim&lt;/var&gt; determines the dimension along which the percentiles are calculated. If &lt;var&gt;dim&lt;/var&gt; is omitted it defaults to the first non-singleton dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352639178f4964bc510af7922f3d5a1c6e8029a3" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;dim&lt;/var&gt; forces the cross product to be calculated along the specified dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bbd13b3f25fe0a13ed533e1a88b4b690435436" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;flag&lt;/var&gt; controls which normalization is used. If &lt;var&gt;flag&lt;/var&gt; is equal to 1 (default value, used when &lt;var&gt;flag&lt;/var&gt; is omitted or empty), return the sample kurtosis as defined above. If &lt;var&gt;flag&lt;/var&gt; is equal to 0, return the &quot;bias-corrected&quot; kurtosis coefficient instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d95a4d8a8f26b110e3f0252f03586b78ecf4fea" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;flag&lt;/var&gt; controls which normalization is used. If &lt;var&gt;flag&lt;/var&gt; is equal to 1 (default value, used when &lt;var&gt;flag&lt;/var&gt; is omitted or empty), return the sample skewness as defined above. If &lt;var&gt;flag&lt;/var&gt; is equal to 0, return the adjusted skewness coefficient instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f133c8f3a858632e05fb00dcb3885cb68dee2b2e" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;fmt&lt;/var&gt; specifies the line format in the same way as &lt;code&gt;plot&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d85b4eede6018ce9e2c8960047859a1e81d338" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;icon&lt;/var&gt; selects a dialog icon. It can be one of &lt;code&gt;&quot;none&quot;&lt;/code&gt; (default), &lt;code&gt;&quot;error&quot;&lt;/code&gt;, &lt;code&gt;&quot;help&quot;&lt;/code&gt;, &lt;code&gt;&quot;warn&quot;&lt;/code&gt;, or &lt;code&gt;&quot;custom&quot;&lt;/code&gt;. The latter must be followed by an image array &lt;var&gt;cdata&lt;/var&gt;, and for indexed images the associated colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc0aae30ecba0efb7530cf66cdc4777f3abfbaa" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;n&lt;/var&gt; is a scalar or vector of integers that controls the number of times the movie is displayed and which particular frames are shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6624a72f187170b964bcdf52049355ed8d6caa" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;nbits&lt;/var&gt; specifies the bit depth to play to the audio device and defaults to 8 bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fe11329be99f3deda0399fba252805c59a46e4" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;normalization&lt;/var&gt; may be one of &lt;code&gt;&quot;unnorm&quot;&lt;/code&gt;, &lt;code&gt;&quot;sch&quot;&lt;/code&gt;, or &lt;code&gt;&quot;norm&quot;&lt;/code&gt;. The default if no normalization is given is &lt;code&gt;&quot;unnorm&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53b7ed0f4a1355b2133a99f36317d2e8ab6c0b9" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;opt&lt;/var&gt; determines whether mean or median absolute deviation is calculated. The default is 0 which corresponds to mean absolute deviation; A value of 1 corresponds to median absolute deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9592c56aff49ec555f879b8a1781e100d14c27a3" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;opt&lt;/var&gt; selects the type of mean to compute. The following options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921805b32cebd9d1f1b81bbefac0f1568861f6c0" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;options&lt;/var&gt; is passed directly to Qhull when computing the Delaunay triangulation used for interpolation. See &lt;code&gt;delaunayn&lt;/code&gt; for information on the defaults and how to pass different values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94900e758127d449f65c0f625eca27e5e2410c0" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;outtype&lt;/var&gt; selects the data type of the output value. The following options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bdede6dd92751469b0c394851e01bc740f9070" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;precision&lt;/var&gt; is a string specifying the type of data to read and may be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e87906a7be6eb7cbbd571277b1e0216ec276a41" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;quadf&lt;/var&gt; specifies which underlying integrator function to use. Any choice but &lt;code&gt;quad&lt;/code&gt; is available and the default is &lt;code&gt;quadcc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f4adaebcda467c29e5bcbba87aaa69329706ed" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;sing&lt;/var&gt; contains a list of points where the integrand has known singularities, or discontinuities in any of its derivatives, inside the integration interval. For the example above, which has a discontinuity at x=1, the call to &lt;code&gt;quadcc&lt;/code&gt; would be as follows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4569ad47024db7ad5a935592cd302f556e64e8b7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;sing&lt;/var&gt; is a vector of values at which the integrand is known to be singular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b154ccef4fa16656c371406912ae0d56efe7d5" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;size&lt;/var&gt; specifies the amount of data to read and may be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749d190cfd4585321922ade1834b7a99d81476f9" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;skip&lt;/var&gt; specifies the number of bytes to skip after each element (or block of elements) is read. If it is not specified, a value of 0 is assumed. If the final block read is not complete, the final skip is omitted. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88df4c6de53439dc2ac8d0b40846ab937194e74f" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;tol&lt;/var&gt; defines the absolute tolerance used to integrate each sub-integral. The default value is 1e-6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24779e9576a20d668493acb3c9c6d2eb7e92f81" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;tol&lt;/var&gt; defines the absolute tolerance used to stop the adaptation procedure. The default value is 1e-6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f59256cfe4c34503f3d52f99baec7f0113a4ae7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;tol&lt;/var&gt; defines the absolute tolerance used to stop the integration procedure. The default value is 1e-10 (1e-5 for single).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93eef5a5f4a63227426168767ea5566a8771f2a" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;tol&lt;/var&gt; defines the absolute tolerance with which to perform the integration. The default value is 1e-6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897e1db5bec11d978d46152f997affa363777387" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;tol&lt;/var&gt; is a 1- or 2-element vector that specifies the desired accuracy of the result. The first element of the vector is the desired absolute tolerance, and the second element is the desired relative tolerance. To choose a relative test only, set the absolute tolerance to zero. To choose an absolute test only, set the relative tolerance to zero. The default absolute tolerance is 1e-10 (1e-5 for single), and the default relative tolerance is 1e-6 (1e-4 for single).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21374c03fa020f1ee1b6f3dd22f1c07873f63778" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;tol&lt;/var&gt; is a vector that specifies the desired accuracy of the result. The first element of the vector is the desired absolute tolerance, and the second element is the desired relative tolerance. To choose a relative test only, set the absolute tolerance to zero. To choose an absolute test only, set the relative tolerance to zero. Both tolerances default to &lt;code&gt;sqrt (eps)&lt;/code&gt; or approximately 1.5e-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc847364d3e30c1cfa65d3bac4c42cc22e96b803" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;fs&lt;/var&gt;, &lt;var&gt;nbits&lt;/var&gt;, &lt;var&gt;channels&lt;/var&gt;, and &lt;var&gt;id&lt;/var&gt; specify the sample rate, bit depth, number of channels and recording device id, respectively. Device IDs may be found using the audiodevinfo function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fda1183ea4c3e4c01df643e7ee9bd787d07bd8" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;m&lt;/var&gt; and &lt;var&gt;n&lt;/var&gt; may be used specify the number of rows and columns of &lt;var&gt;A&lt;/var&gt; to use. If either of these is larger than the size of &lt;var&gt;A&lt;/var&gt;, &lt;var&gt;A&lt;/var&gt; is resized and padded with zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bcca960f8ce485013db424d14b81f03f8e3b48" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;nbits&lt;/var&gt;, and &lt;var&gt;id&lt;/var&gt; specify the bit depth and player device id, respectively. Device IDs may be found using the audiodevinfo function. Given an audioplayer object, use the data from the object to initialize the player.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6473ad314f0a80c4112a0312f7a004fd99655499" translate="yes" xml:space="preserve">
          <source>The optional fifth argument &lt;var&gt;ode_opt&lt;/var&gt; specifies non-default options to the ODE solver. It is a structure generated by &lt;code&gt;odeset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5032f25111d6ff11e3162c86c43fe6164a08a973" translate="yes" xml:space="preserve">
          <source>The optional fourth argument &lt;var&gt;ode_opt&lt;/var&gt; specifies non-default options to the ODE solver. It is a structure generated by &lt;code&gt;odeset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38eaa427875771d1a80dd2ec6d483f49f3559d6e" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;explode&lt;/var&gt; is a vector of the same length as &lt;var&gt;x&lt;/var&gt; that, if nonzero, &quot;explodes&quot; the slice from the pie chart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae6d1118e77b9ff526ae613ba15395b44ba0782" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;labels&lt;/var&gt; is a cell array of strings of the same length as &lt;var&gt;x&lt;/var&gt; specifying the label for each slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04acd797b09a32600a79d194675dcd96e1007d8f" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;loc&lt;/var&gt; determines the location of the colorbar. If present, it must be the last argument to &lt;code&gt;colorbar&lt;/code&gt;. Valid values for &lt;var&gt;loc&lt;/var&gt; are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff229d687a38120116fb09567b172a9eb1c43ad4" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;maxlength&lt;/var&gt; specifies the maximum length of any string in &lt;var&gt;uniqstr&lt;/var&gt;. If an input string cannot be made unique without exceeding &lt;var&gt;maxlength&lt;/var&gt; an error is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c03c0d0460dbb1a833a497cd69813e2b9bf7d8" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;n&lt;/var&gt; (format repeat count) specifies the number of times the format string is to be used or the number of lines to be read, whichever happens first while reading. The former is equivalent to requesting that the data output vectors should be of length &lt;var&gt;N&lt;/var&gt;. Note that when reading files with format strings referring to multiple lines, &lt;var&gt;n&lt;/var&gt; should rather be the number of lines to be read than the number of format string uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fb152df27dd09989d931b153b3f03e6e98c12e" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;n&lt;/var&gt; determines the number of faces around the circumference of the cylinder. The default value is 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc6f04651bbfa06efd9ca65a7af42cab5bb641d" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;n&lt;/var&gt; determines the number of faces around the circumference of the sphere. The default value is 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49ebbca14ef89c355b26ca6183dc350301cabee" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;opt_iters&lt;/var&gt; is the maximum number of square roots to compute and defaults to 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2266b99cb337abeaeb1fe9cdf09bc8144d0c8db6" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;r&lt;/var&gt; is a vector specifying the radius along the unit z-axis. The default is [1 1] indicating radius 1 at &lt;code&gt;Z == 0&lt;/code&gt; and at &lt;code&gt;Z == 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc49e98d88d7ef93c5391ef28fcb50315a796074" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;s&lt;/var&gt; is a scalar defining a scaling factor to use for the arrows of the field relative to the mesh spacing. A value of 1.0 will result in the longest vector exactly filling one grid cube. A value of 0 disables all scaling. The default value is 0.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfd97560a390077b92ac7caf431bd18c1ef4171" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;s&lt;/var&gt; is a scalar defining a scaling factor to use for the arrows of the field relative to the mesh spacing. A value of 1.0 will result in the longest vector exactly filling one grid square. A value of 0 disables all scaling. The default value is 0.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2560e57a67ab39e54b6ef0838ebdd9fde503d0f" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;stem_sz&lt;/var&gt; sets the width of each stem. The stem width is determined by &lt;code&gt;10^(&lt;var&gt;stem_sz&lt;/var&gt; + 1)&lt;/code&gt;. The default stem width is 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2931eb66779518187d998c7284b639a66c14f65c" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;t&lt;/var&gt; specifies the number of test vectors (default 5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f28d4dca5a3664eb4be3371148dacb957da15ea" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;title&lt;/var&gt; (character string) can be used to decorate the dialog caption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b930cd3dbd71afe3292277bb4d3b405e1b660d" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;tol&lt;/var&gt; controls the stopping tolerance of the algorithm and defaults to &lt;code&gt;eps (class (&lt;var&gt;m&lt;/var&gt;))&lt;/code&gt;. The tolerance can be increased to compute a faster, less accurate approximation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e7e6a44fc3d554639c6c19d62d577906ee751a" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;tol&lt;/var&gt; is currently ignored (&lt;small&gt;MATLAB&lt;/small&gt; uses this to allow faster, less accurate approximation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407e8d5c4eee1289e3d84d22ae76e553803dfd3d" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;vn&lt;/var&gt; is either a scalar denoting the number of contour lines to compute or a vector containing the Z values where lines will be computed. When &lt;var&gt;vn&lt;/var&gt; is a vector the number of contour lines is &lt;code&gt;numel (&lt;var&gt;vn&lt;/var&gt;)&lt;/code&gt;. However, to compute a single contour line at a given value use &lt;code&gt;&lt;var&gt;vn&lt;/var&gt; = [val, val]&lt;/code&gt;. If &lt;var&gt;vn&lt;/var&gt; is omitted it defaults to 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4315b3386b726a0bb7b319172f1c5967782c52" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;w&lt;/var&gt; controls the width of the bars. A value of 1.0 will cause each bar to exactly touch any adjacent bars. The default width is 0.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff7b75015877f51ac0a5061fcbc29bee27c93f1" translate="yes" xml:space="preserve">
          <source>The optional input &lt;var&gt;y&lt;/var&gt; defaults to 19 if it is not supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c51c53b2b7c61f5055c76383a6b9921cfd873fc" translate="yes" xml:space="preserve">
          <source>The optional input argument &lt;var&gt;V&lt;/var&gt; may be an n-element vector of positive weights (inverse variances), or an n-by-n symmetric positive semi-definite matrix representing the covariance of &lt;var&gt;b&lt;/var&gt;. If &lt;var&gt;V&lt;/var&gt; is not supplied, the ordinary least squares solution is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fca1b547d4c965ecb1a3a5b2ec1824e6baa1681" translate="yes" xml:space="preserve">
          <source>The optional input argument &lt;var&gt;col&lt;/var&gt;, which is a three-dimensional array of the same size as &lt;var&gt;v&lt;/var&gt;, specifies coloring of the isosurface. The color data is interpolated, as necessary, to match &lt;var&gt;isoval&lt;/var&gt;. The output structure array, in this case, has the additional field &lt;var&gt;facevertexcdata&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b92e4bf29c9051d0bc8213060303f3d13d49dc" translate="yes" xml:space="preserve">
          <source>The optional input parameter &lt;var&gt;dims&lt;/var&gt; should be a vector containing the dimensions of the decoded array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c130c4c73a2daa83c761b31149c848ca8fe42937" translate="yes" xml:space="preserve">
          <source>The optional message &lt;var&gt;msg&lt;/var&gt; is centered and displayed above the waitbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00fe6b8c0619d64f767f61acaae0862e04f4f54" translate="yes" xml:space="preserve">
          <source>The optional numeric argument &lt;var&gt;repeat&lt;/var&gt; can be used for limiting the number of items read:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fdda22051d03a479135c4458d66ec793047888" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;c&lt;/var&gt; are the contour levels in &lt;code&gt;contourc&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c546bd9ecccb5226e1e1f2d21b9a7da655cfaaaf" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;c&lt;/var&gt; contains the contour levels in &lt;code&gt;contourc&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373e75f1e998c78edfd34682f97b855839e9dda0" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;err&lt;/var&gt; is an approximate bound on the error in the integral &lt;code&gt;abs (&lt;var&gt;q&lt;/var&gt; - &lt;var&gt;I&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;I&lt;/var&gt; is the exact value of the integral. The optional output &lt;var&gt;iter&lt;/var&gt; is the number of vectorized function calls to the function &lt;var&gt;f&lt;/var&gt; that were used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3507433c61859d7ae79f800a5ad57e7a54f94c7" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;filelist&lt;/var&gt; is a list of the compressed files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef67057b3bbd380c441465e0280598622fbc1705" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;filelist&lt;/var&gt; is a list of the files that were included in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502391e89836ed9992cc2ad74a824c46421acaa4" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;filelist&lt;/var&gt; is a list of the uncompressed files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cdda3081f363cb2bf908efff8fe116b61d2c9b" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;ismodified&lt;/var&gt; is a logical array indicating whether each element in &lt;var&gt;str&lt;/var&gt; was modified to make it unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5279b689281a350448745728ee8ada566e91adf3" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;ismodified&lt;/var&gt; is a logical array indicating whether the respective element in &lt;var&gt;str&lt;/var&gt; was a valid name or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a57c934b3d33c7a846a8ef5043724163735857a" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;iter&lt;/var&gt; returns the number of iterations that were required for &lt;code&gt;normest&lt;/code&gt; to converge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca69c1dc0c2a9ae7ec46db2fef70fa9c882c9c8e" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;iters&lt;/var&gt; is the number of square roots actually computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94548cf13ded5351f9c38b4826c4ac7316ae85f4" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;nfun&lt;/var&gt; indicates the total number of function evaluations performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584525c7c6d915ecbdca22ec772a17f53d5caf1b" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;on&lt;/var&gt; returns true if the points are exactly on the polygon edge, and false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfff8bb7da32a639c2f728540d105f2ef8d7af5" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;rline&lt;/var&gt; is the real line number where the breakpoint was set. This can differ from the specified line if the line is not executable. For example, if a breakpoint attempted on a blank line then Octave will set the real breakpoint at the next executable line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20976fae0ccaa1e12ad39a8246963d0b53f1e18" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;s&lt;/var&gt; is a structure containing the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65372db4c11ac18fffd94ee24032ad28744ac89" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;secs&lt;/var&gt; holds the time on the specified day with greater precision than &lt;var&gt;days&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcebfe756cc0c5e2bfa8a0c739ec33f6957cadb" translate="yes" xml:space="preserve">
          <source>The optional output &lt;var&gt;value&lt;/var&gt; contains the value that was repeated in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47ec9a9a3c7aef4c915a71beb4a984547652173" translate="yes" xml:space="preserve">
          <source>The optional output argument &lt;var&gt;mode&lt;/var&gt; is the current state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761dc29eef45b2276be4fa758ad45b5719597c17" translate="yes" xml:space="preserve">
          <source>The optional output argument &lt;var&gt;status&lt;/var&gt; returns the status reported by &lt;code&gt;makeinfo&lt;/code&gt;. If only one output argument is requested, and &lt;var&gt;status&lt;/var&gt; is nonzero, a warning is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a408eb53381d339c993c73946475ad06a43da413" translate="yes" xml:space="preserve">
          <source>The optional output argument &lt;var&gt;warning_struct&lt;/var&gt; is a structure or structure array with fields &lt;code&gt;&quot;state&quot;&lt;/code&gt; and &lt;code&gt;&quot;identifier&quot;&lt;/code&gt;. The &lt;var&gt;state&lt;/var&gt; argument may have the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbdcc0e976a553b850db8dd3db68fff7882cf00" translate="yes" xml:space="preserve">
          <source>The optional output returns the number of bytes written to the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d20b261ea25e254dd0f43e10ccd4cf75ff9f478" translate="yes" xml:space="preserve">
          <source>The optional output values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48118412261a70f053ab0864e66ee4555159556a" translate="yes" xml:space="preserve">
          <source>The optional outputs &lt;var&gt;ia&lt;/var&gt; and &lt;var&gt;ib&lt;/var&gt; are index vectors such that &lt;code&gt;&lt;var&gt;a&lt;/var&gt;(&lt;var&gt;ia&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;b&lt;/var&gt;(&lt;var&gt;ib&lt;/var&gt;)&lt;/code&gt; are disjoint sets whose union is &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cbc5bf326adfb29a0b7ae3f404fbdba5c638d6" translate="yes" xml:space="preserve">
          <source>The optional outputs &lt;var&gt;mu&lt;/var&gt; and &lt;var&gt;sigma&lt;/var&gt; contain the mean and standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539fe365c9dd48b2917d84f89231c59252fed025" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;eps1&lt;/var&gt; is the threshold for zero. The default value is 1e-12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfefb29d7bbcd66901052496d53ab0aafe59d66" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;line_style&lt;/var&gt; defines the output style for the plot. Called with no output arguments the graph is plotted directly. Otherwise, return the coordinates of the plot in &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2d75f53f076ad424e4b1b231c847bb7478739b" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;n&lt;/var&gt; gives the number of dummy &lt;var&gt;x&lt;/var&gt;(&lt;var&gt;i&lt;/var&gt;) used for initialization, i.e., a sequence of length &lt;var&gt;t&lt;/var&gt;+&lt;var&gt;n&lt;/var&gt; is generated and &lt;var&gt;x&lt;/var&gt;(&lt;var&gt;n&lt;/var&gt;+1:&lt;var&gt;t&lt;/var&gt;+&lt;var&gt;n&lt;/var&gt;) is returned. If &lt;var&gt;n&lt;/var&gt; is omitted, &lt;var&gt;n&lt;/var&gt; = 100 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ba01894398bf94fc6eac3d4b2de18c6a70e0fb" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;opt&lt;/var&gt; determines the normalization to use when computing the standard deviation and has the same definition as the corresponding parameter for &lt;code&gt;std&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04b958ae0b239241685a132be92e3538f0a9a39" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;opts&lt;/var&gt; is a structure that controls the behavior of &lt;code&gt;amd&lt;/code&gt;. The fields of the structure are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1e174780f17ff1aa990dfe3bb36e5b04bc67e1" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;orient&lt;/var&gt; determines if the legend elements are placed vertically or horizontally. The allowed values are &lt;code&gt;&quot;vertical&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;horizontal&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687a896b332df1fb1735309ccc7acbace1204dab" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;pos&lt;/var&gt; specifies the location of the legend as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a942c79fcdfaddad3b818b2575b6d0522bd92c88" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;rtype&lt;/var&gt; determines how ties are handled. All examples below assume an input of &lt;code&gt;[ 1, 2, 2, 4 ]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2b7210c4dfa5ce7ef5ae36bc5ab5570beaa142" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;which_caps&lt;/var&gt; can have one of the following string values which defines how the data will be enclosed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f13f9962943061b5ce1dcd47fb691c7e3612ac7" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;which_plane&lt;/var&gt; can have one of the following string values to define which end-cap should be drawn:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ba609e53869c5c5679a77aa3e3e0887fd81a02" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;var&gt;width&lt;/var&gt; specifies the width of a single ribbon (default is 0.75).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282640bc031a0b1cc40d6ec8b540c187c2296020" translate="yes" xml:space="preserve">
          <source>The optional parameters &lt;var&gt;node_style&lt;/var&gt; and &lt;var&gt;edge_style&lt;/var&gt; define the output plot style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c26f35ca022f355f23eb352b521d626da94698" translate="yes" xml:space="preserve">
          <source>The optional parameters &lt;var&gt;node_style&lt;/var&gt; and &lt;var&gt;edge_style&lt;/var&gt; define the output style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d5bb21835a151bc12c541424ac14b5f1057ee6" translate="yes" xml:space="preserve">
          <source>The optional property &lt;var&gt;periodic&lt;/var&gt; is a logical value which specifies whether a periodic boundary condition is applied to the spline. The length of the period is &lt;code&gt;max (&lt;var&gt;breaks&lt;/var&gt;) - min (&lt;var&gt;breaks&lt;/var&gt;)&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ebe97dcf4843128210323330e51124e57f2ce4" translate="yes" xml:space="preserve">
          <source>The optional property &lt;var&gt;robust&lt;/var&gt; is a logical value which specifies if robust fitting is to be applied to reduce the influence of outlying data points. Three iterations of weighted least squares are performed. Weights are computed from previous residuals. The sensitivity of outlier identification is controlled by the property &lt;var&gt;beta&lt;/var&gt;. The value of &lt;var&gt;beta&lt;/var&gt; is restricted to the range, 0 &amp;lt; &lt;var&gt;beta&lt;/var&gt; &amp;lt; 1. The default value is &lt;var&gt;beta&lt;/var&gt; = 1/2. Values close to 0 give all data equal weighting. Increasing values of &lt;var&gt;beta&lt;/var&gt; reduce the influence of outlying data. Values close to unity may cause instability or rank deficiency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41ec1fdec54219a37cbd6856f06bde9b89c317e" translate="yes" xml:space="preserve">
          <source>The optional property, &lt;var&gt;constraints&lt;/var&gt;, is a structure specifying linear constraints on the fit. The structure has three fields, &lt;code&gt;&quot;xc&quot;&lt;/code&gt;, &lt;code&gt;&quot;yc&quot;&lt;/code&gt;, and &lt;code&gt;&quot;cc&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018ab0f2c15e3a0e5043db60e4b7811a22a4fce3" translate="yes" xml:space="preserve">
          <source>The optional return argument &lt;var&gt;bp_list&lt;/var&gt; is a struct array with the following fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aed6b20cb20ef7dc795b3c8b776a385275b2db8" translate="yes" xml:space="preserve">
          <source>The optional return argument &lt;var&gt;k&lt;/var&gt; contains the vector of &quot;bound variables&quot;, which are those columns on which elimination has been performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468ee5518d6372124146847d4817a14c6cb51c7a" translate="yes" xml:space="preserve">
          <source>The optional return argument &lt;var&gt;stack&lt;/var&gt; is a struct array with the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeab07e221717623de5878ebda5c58eab480d47c" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;count&lt;/var&gt; contains the number of elements read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194606a6c689d3fdf31ff531c56fd4a8847ace00" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a 2-element vector with a graphics handle for the created bar plot and a second handle for the created line plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065ca4ec67845d28d51aa82cd68752018f0d5ae8" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a 2-element vector with a graphics handle for the created mesh plot and a second handle for the created contour plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ae3194c7312b0f63f915e533e4e924fead5bfd" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a 2-element vector with a graphics handle for the created surface plot and a second handle for the created contour plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fc1d17e07ebecc5c1bb19b844d8dd8c2b2a02c" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a 2-element vector with a graphics handle to the created surface object and to the created contour plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a694d3ff8551576990e3a19860be24e10ce0ff6" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle (or vector of handles) to the line objects created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ec68aca8bbf36a24863b96261a31f5bbb49322" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to a quiver object. A quiver object regroups the components of the quiver plot (body, arrow, and marker), and allows them to be changed together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5721829d12cd25c432ad6c4f4550eda70e944dd" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created annotation object. This can be used with the &lt;code&gt;set&lt;/code&gt; function to customize an existing annotation object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f24d1aaa491a9a77381c87a906aef86149df178" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created bar series hggroup. For a description of the use of the bar series, see &lt;a href=&quot;#XREFbar&quot;&gt;bar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a363a91b578cc7f48b5b84eda96298e0458c2d9" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created colorbar object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667d8a3881befacd9e9e049ce4869916d2ce1ccd" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created figure object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0b565208885738882d759c00520f6e555cfc70" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created hggroup object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f174f7d1ac74f7d5ea070dcf9b2c1a17c28eb8f" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created light object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d3bd11788190b2caac0a06e7e3bbbe14005898" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created patch object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239d28392354486659c9df78a98b2e10f46e1a5a" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f037d79cf9cfcb30fd25ab277f5e3f2f02b246dd" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created rectangle object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a9c4889256cd16895049635a6a88e7a444b7b6" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created scatter object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91b235834ed422816c1b887183cee67de89472d" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created surface object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c78c6b162a580a85821c8193d40201ab8833a37" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created text object(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583dd6e8dd8ca465978ddcdd083645630c63953f" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created text object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c3aa62bb15e9129303f901831d40e854e63e17" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the hggroup comprising the contour lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620f39ffd43bc3d0a42c913229a3c445a19e680b" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the hggroup object comprising the area patch objects. The &lt;code&gt;&quot;BaseValue&quot;&lt;/code&gt; property of the hggroup can be used to adjust the level where shading begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ab799332e5f4c8cadbfa3eb52cf8a7337c6691" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the hggroup object representing the points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db8f912cb636298c5492376b9ad4c548b5a814b" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f339375160043f81f58eeba77e85755b8b1aa23" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the light object. This can be used to move or further change properties of the light object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d5e417b8bd022ff38034cfc4e69837e9a02db2" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a handle to a &quot;stem series&quot; hggroup. The single hggroup handle has all of the graphical elements comprising the plot as its children; This allows the properties of multiple graphics objects to be changed by modifying just a single property of the &quot;stem series&quot; hggroup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451b544b9b807f509262abcb8c528f30ce043b0a" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a handle to the &quot;stem series&quot; hggroup containing the line and marker objects used for the plot. See &lt;a href=&quot;#XREFstem&quot;&gt;stem&lt;/a&gt;, for a description of the &quot;stem series&quot; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1a43afa37f1941e62dc29935ec702714c1ac65" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a handle to the hggroup object representing the data plot and errorbars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65f44eac31be71c67adfd43f7c25705cb0f3792" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a list of graphics handles to the patch, surface, and text objects generating the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa44a81bcc99a2fdee185115132a1494fcfef44" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a list of handles to the patch and text objects generating the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62fdba594823e583953cd724b943082556570f1" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the created line objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c9094c2c647ca5039a2013cc3cf6a3a7406dcf" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the created patch objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9610a204b8961bffcdbede6803bde09aaa41e1f1" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the created text objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbefbcb4f60732794eb4cf38ef550d7c1b350d4" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the line objects representing each histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a31104a0dc8e69468d3ef28026af7d2e92d8b9" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the line objects representing the drawn vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1775ffd859303f59b005349cfc0b8cdeaf7d30fa" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the surface objects representing each ribbon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc67af4636e2f47deba64b8238e2e28496d4cb" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of graphics handles to the text objects representing each label. The &lt;code&gt;&quot;userdata&quot;&lt;/code&gt; property of the text objects contains the numerical value of the contour label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086395806b73a9d463a09ec296233c195712fc06" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of handles to the created &quot;bar series&quot; hggroups with one handle per column of the variable &lt;var&gt;y&lt;/var&gt;. This series makes it possible to change a common element in one bar series object and have the change reflected in the other &quot;bar series&quot;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132444adeed8657042f8c98c5622e54969f8aa61" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is a vector of patch handles where each handle represents one tetrahedron in the order given by &lt;var&gt;T&lt;/var&gt;. A typical use case for &lt;var&gt;h&lt;/var&gt; is to turn the respective patch &lt;code&gt;&quot;visible&quot;&lt;/code&gt; property &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e875a9b00e72c1ae591e671e89942aa9ed51019c" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; is the graphics handle of the figure window that was cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5963a3891d7ea4837e594c5ccd40bbab5195ae8b" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;h&lt;/var&gt; provides handles to the individual graphics objects in the scatter plots, whereas &lt;var&gt;ax&lt;/var&gt; returns the handles to the scatter plot axes objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d39be37892f5ac196af65deaaa52a49277f9fc" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;hax&lt;/var&gt; is a graphics handle to the created axes object (not figure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939a38ce1a479a3cfc9dcaba24b39e9d0143c8c6" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;hui&lt;/var&gt; is a graphics handle to the created uipanel object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30abba2e2f0ef857d350b719b7d9a282aa6c04f0" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;hui&lt;/var&gt; is a graphics handle to the created uipushtool object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74b90e624176d056b38a3ee8eb52f4a860bb25e" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;hui&lt;/var&gt; is a graphics handle to the created uitoggletool object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549fb444e3b8eed8d94f2b21ac2bed1ca414cd42" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;hui&lt;/var&gt; is a graphics handle to the created uitoolbar object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3999b4ae5d21eee698e9fc4f9aa9b2bb0510e831" translate="yes" xml:space="preserve">
          <source>The optional return value &lt;var&gt;lev&lt;/var&gt; is a vector with the Z values of the contour levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba00efd4770974c5d40a4557b621e53421e546ba" translate="yes" xml:space="preserve">
          <source>The optional return value is a list of &lt;var&gt;files&lt;/var&gt; unpacked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222e9dbd8d41357dc181e1850708e16a3765168c" translate="yes" xml:space="preserve">
          <source>The optional scalar arguments &lt;var&gt;r0&lt;/var&gt; and &lt;var&gt;c0&lt;/var&gt; define the starting row and column of the data to be read. These values are indexed from zero, i.e., the first data row corresponds to an index of zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c284c5fab3dab8bf8a23197d6411df0736f9b3" translate="yes" xml:space="preserve">
          <source>The optional second argument &lt;var&gt;class&lt;/var&gt; may be used to cause the input array to be interpreted as a different value type. Possible values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7621b688fbabe8e7131837a2a5b1bfc58055526d" translate="yes" xml:space="preserve">
          <source>The optional second argument &lt;var&gt;workspace&lt;/var&gt; can take the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7e868f9723529205803072d1522028ae98ad2f" translate="yes" xml:space="preserve">
          <source>The optional second argument defines the maximum length of the string representing the elements of &lt;var&gt;x&lt;/var&gt;. By default &lt;var&gt;len&lt;/var&gt; is 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22db67960272d8409e645a7d9d8941d625fbea2" translate="yes" xml:space="preserve">
          <source>The optional second argument determines the amount of output to generate and which types of tests to run. The default value is &lt;code&gt;&quot;normal&quot;&lt;/code&gt;. Requesting an output argument will suppress printing the final summary message and any intermediate warnings, unless verbose reporting is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bc8f1f8cae6ae8a201494f35cbfd23f6821c9b" translate="yes" xml:space="preserve">
          <source>The optional second argument is a string which defines which axis limits will be linked. The possible values for &lt;var&gt;optstr&lt;/var&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9892f6f693e0678e4a06d3a63b00c5f65609d15" translate="yes" xml:space="preserve">
          <source>The optional second argument may either give the number of significant digits (&lt;var&gt;precision&lt;/var&gt;) to be used in the output or a format template string (&lt;var&gt;format&lt;/var&gt;) as in &lt;code&gt;sprintf&lt;/code&gt; (see &lt;a href=&quot;formatted-output#Formatted-Output&quot;&gt;Formatted Output&lt;/a&gt;). &lt;code&gt;num2str&lt;/code&gt; can also process complex numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bb66071e248550516ce9e7e37ac9267bbdd113" translate="yes" xml:space="preserve">
          <source>The optional second argument names a function that defines the constraint functions whose roots are desired during the integration. This function must have the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095b5da85931c2b01265e6520a6a3fd0292f6961" translate="yes" xml:space="preserve">
          <source>The optional second argument specifies how many diagonals above or below the main diagonal should also be set to zero. The default value of &lt;var&gt;k&lt;/var&gt; is zero which includes the main diagonal as part of the result. If the value of &lt;var&gt;k&lt;/var&gt; is a nonzero integer then the selection of elements starts at an offset of &lt;var&gt;k&lt;/var&gt; diagonals above the main diagonal for positive &lt;var&gt;k&lt;/var&gt; or below the main diagonal for negative &lt;var&gt;k&lt;/var&gt;. The absolute value of &lt;var&gt;k&lt;/var&gt; may not be greater than the number of subdiagonals or superdiagonals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc01809a2be592da31d925b501d87d934b7c58c8" translate="yes" xml:space="preserve">
          <source>The optional second argument, &lt;var&gt;len&lt;/var&gt;, specifies the minimum number of digits in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ad75c44f80cbe9c5e993b643dca69937a141a6" translate="yes" xml:space="preserve">
          <source>The optional second output &lt;var&gt;R&lt;/var&gt; is the inverse condition number of &lt;var&gt;A&lt;/var&gt; (zero if matrix is singular).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af401a9c965228755fea0ad7c7a7915dfc9f1b9" translate="yes" xml:space="preserve">
          <source>The optional second output &lt;var&gt;w&lt;/var&gt; are the normalized angular frequencies. For a one-sided calculation &lt;var&gt;w&lt;/var&gt; is in the range [0, pi] if &lt;var&gt;nfft&lt;/var&gt; is even and [0, pi) if &lt;var&gt;nfft&lt;/var&gt; is odd. Similarly, for a two-sided calculation &lt;var&gt;w&lt;/var&gt; is in the range [0, 2*pi] or [0, 2*pi) depending on &lt;var&gt;nfft&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258a6269a9415acc9081358242cee2cde11ee89d" translate="yes" xml:space="preserve">
          <source>The optional second output argument &lt;var&gt;p&lt;/var&gt; is the permutation vector which converts the original name order to the new name order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9183ee3387536842ff57772ec55233713859864e" translate="yes" xml:space="preserve">
          <source>The optional second output is a numeric indication of the error status. &lt;var&gt;err&lt;/var&gt; is 1 if an error condition has been encountered and 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee417611925b4d7a3e2cf0121cdb1e687ce503a5" translate="yes" xml:space="preserve">
          <source>The optional second output is an approximate null vector when &lt;var&gt;cest&lt;/var&gt; is large; it satisfies the equation &lt;code&gt;norm (A*v, 1) == norm (A, 1) * norm (&lt;var&gt;v&lt;/var&gt;, 1) / &lt;var&gt;est&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f7dc834084da2b2210943d57b339ac4f412342" translate="yes" xml:space="preserve">
          <source>The optional second output, &lt;var&gt;matches&lt;/var&gt;, returns the delimiters which were matched in the original string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5ea33b21caa6fd2181e1747a39e5797b01ee1c" translate="yes" xml:space="preserve">
          <source>The optional second output, &lt;var&gt;state&lt;/var&gt;, is logically true when the conversion is successful. If the conversion fails the numeric output, &lt;var&gt;x&lt;/var&gt;, is empty and &lt;var&gt;state&lt;/var&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62d984cf0609cfc20d64c0f31c6c211a9626263" translate="yes" xml:space="preserve">
          <source>The optional seventh argument &lt;var&gt;options&lt;/var&gt; is a structure array. Use &lt;code&gt;odeset&lt;/code&gt; to generate this structure. The relevant options are &lt;code&gt;RelTol&lt;/code&gt; and &lt;code&gt;AbsTol&lt;/code&gt; which specify the error thresholds used to compute the initial conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93d11a76aa66536a901e1b4b476f764b2435f8e" translate="yes" xml:space="preserve">
          <source>The optional string &lt;var&gt;style&lt;/var&gt; specifies whether the light is a local point source (&lt;code&gt;&quot;local&quot;&lt;/code&gt;, the default) or placed at infinite distance (&lt;code&gt;&quot;infinite&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e14e98ec33803fbd192ccb0eb1a0e8e82158331" translate="yes" xml:space="preserve">
          <source>The optional string &lt;var&gt;type&lt;/var&gt; specifies the type of moment to be computed. Valid options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c782b824eb1ffd71dee8a3136e1c598cd9bb33c0" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;mad&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2027075888b286c841e730fd3c8af405fd3588" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;max&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16572f79accd9bdc83fc68d27aafbcab7aa052a" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;mean&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fe7a739669c3575a446fbf3d73a9ac724d2689" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;min&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bb1b8c981d6f6711cd1aaaa1bbad3345b6e9e9" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;movmedian&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba514b76299669d0a495b67de9a6fd6d6121631b" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;movprod&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd043b8d0e66c65e0a65d6e975b2663768191089" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;movstd&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9b7378cc2ebc368b62100073f51a4cb187c2eb" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;movsum&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431d5fcb3eb53eb5e3268fde09acb7467bfa876a" translate="yes" xml:space="preserve">
          <source>The optional string argument &lt;code&gt;&quot;&lt;var&gt;nancond&lt;/var&gt;&quot;&lt;/code&gt; controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (&lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (&lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;code&gt;var&lt;/code&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: the &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003591cc49c66f4460869c237f95e7544e141db2" translate="yes" xml:space="preserve">
          <source>The optional third argument, &lt;var&gt;len&lt;/var&gt;, specifies the minimum number of digits in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5aa6329f3cecf5eaeb911e81471a40ffadd5c64" translate="yes" xml:space="preserve">
          <source>The optional third input argument specifies a logfile where results of the tests should be written. The logfile may be a character string (&lt;var&gt;fname&lt;/var&gt;) or an open file descriptor ID (&lt;var&gt;fid&lt;/var&gt;). To enable batch processing, but still print the results to the screen, use &lt;code&gt;stdout&lt;/code&gt; for &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f2f759cc971e7296f78256f9ae3b036ce7d0da" translate="yes" xml:space="preserve">
          <source>The optional third output &lt;var&gt;resnorm&lt;/var&gt; is the norm of the vector of residuals. If &lt;var&gt;resnorm&lt;/var&gt; is small, &lt;code&gt;decic&lt;/code&gt; has successfully computed the initial conditions. If the value of &lt;var&gt;resnorm&lt;/var&gt; is large, use &lt;code&gt;RelTol&lt;/code&gt; and &lt;code&gt;AbsTol&lt;/code&gt; to adjust it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76834791fc3f5559afc1960f38d0197bf0990f69" translate="yes" xml:space="preserve">
          <source>The optional two-element vector argument &lt;var&gt;samples&lt;/var&gt; specifies starting and ending frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850ea3c621be77d29f8cf98f932eb02a0dc21586" translate="yes" xml:space="preserve">
          <source>The optional vector argument &lt;var&gt;size&lt;/var&gt; may be used specify the dimensions of the array to be used. If an element of &lt;var&gt;size&lt;/var&gt; is smaller than the corresponding dimension of &lt;var&gt;A&lt;/var&gt;, then the dimension of &lt;var&gt;A&lt;/var&gt; is truncated prior to performing the FFT. Otherwise, if an element of &lt;var&gt;size&lt;/var&gt; is larger than the corresponding dimension then &lt;var&gt;A&lt;/var&gt; is resized and padded with zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e447ee15e5fe9f27bb231473abe3408b845a0c" translate="yes" xml:space="preserve">
          <source>The optional vector argument &lt;var&gt;size&lt;/var&gt; may be used specify the dimensions of the array to be used. If an element of &lt;var&gt;size&lt;/var&gt; is smaller than the corresponding dimension of &lt;var&gt;A&lt;/var&gt;, then the dimension of &lt;var&gt;A&lt;/var&gt; is truncated prior to performing the inverse FFT. Otherwise, if an element of &lt;var&gt;size&lt;/var&gt; is larger than the corresponding dimension then &lt;var&gt;A&lt;/var&gt; is resized and padded with zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60785a8d280cd0150ed481bc5f5d4e53d549a8c3" translate="yes" xml:space="preserve">
          <source>The optional warning identifier &lt;var&gt;id&lt;/var&gt; allows users to enable or disable warnings tagged by this identifier. A message identifier is a string of the form &lt;code&gt;&quot;NAMESPACE:WARNING-NAME&quot;&lt;/code&gt;. Octave&amp;rsquo;s own warnings use the &lt;code&gt;&quot;Octave&quot;&lt;/code&gt; namespace (see &lt;a href=&quot;#XREFwarning_005fids&quot;&gt;warning_ids&lt;/a&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc77e3414f36893e9d4b20d6b4f817dce8a5f2e" translate="yes" xml:space="preserve">
          <source>The order of the Bessel function &lt;var&gt;alpha&lt;/var&gt; must be real. The kind of Hankel function is specified by &lt;var&gt;k&lt;/var&gt; and may be either first (&lt;var&gt;k&lt;/var&gt; = 1) or second (&lt;var&gt;k&lt;/var&gt; = 2). The default is Hankel functions of the first kind. The points for evaluation &lt;var&gt;x&lt;/var&gt; may be complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7734922a025fad9eb8366d91a78a963f0946cb77" translate="yes" xml:space="preserve">
          <source>The order of the Bessel function &lt;var&gt;alpha&lt;/var&gt; must be real. The points for evaluation &lt;var&gt;x&lt;/var&gt; may be complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c8e046b0a9454376e108a621cec0af99e134c0" translate="yes" xml:space="preserve">
          <source>The order of the polynomial can also be given as a string, in which case &lt;var&gt;p&lt;/var&gt; must be either &lt;code&gt;&quot;constant&quot;&lt;/code&gt; (corresponds to &lt;code&gt;&lt;var&gt;p&lt;/var&gt;=0&lt;/code&gt;) or &lt;code&gt;&quot;linear&quot;&lt;/code&gt; (corresponds to &lt;code&gt;&lt;var&gt;p&lt;/var&gt;=1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab13e770cce1d3ad6794fd92b6190ee9fb4313a5" translate="yes" xml:space="preserve">
          <source>The ordering is followed by a column elimination tree post-ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3baa9500561ed353a293e967ef74402c63096a12" translate="yes" xml:space="preserve">
          <source>The orientation of the image with respect to the rows and columns. Value is an integer between 1 and 8 as defined in the TIFF 6 specifications, and for &lt;small&gt;MATLAB&lt;/small&gt; compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e805a8736af45bff44f77c64cfd4ae96ff6bfc" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;randn&lt;/code&gt; functions use Fortran code from &lt;small&gt;RANLIB&lt;/small&gt;, a library of Fortran routines for random number generation, compiled by Barry W. Brown and James Lovato of the Department of Biomathematics at The University of Texas, M.D. Anderson Cancer Center, Houston, TX 77030.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c55af26cf81dad10d5f80f5b4ba8b73e2d430e7" translate="yes" xml:space="preserve">
          <source>The original form of a &lt;code&gt;try&lt;/code&gt; block looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a5f59af29df48bfda6a37c2583b6c6efa8f7ae" translate="yes" xml:space="preserve">
          <source>The original x and y data of the stairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7daf3f09b7376c2d8d27c701fa5ea754b8f24a5" translate="yes" xml:space="preserve">
          <source>The original x, y and z data of the stems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6597393e47d4e4796b3f090fca8669e5ad0c00d9" translate="yes" xml:space="preserve">
          <source>The original x, y and z data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2fccd40361c59022bc35f486fa3d796c225f20" translate="yes" xml:space="preserve">
          <source>The original x, y, and z data of the contour lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0f2c78292556194169faf7c43798ea84dd1ee1" translate="yes" xml:space="preserve">
          <source>The original x, y, l, u, xl, xu data of the error bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddaf475deec55456efc1c18febcef943a588aef6" translate="yes" xml:space="preserve">
          <source>The original x, y, z and c data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9a6e17b6f784f07618f168bd4e760f096113d9" translate="yes" xml:space="preserve">
          <source>The origins of the values of the vector field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54794732c83fc5ccdaf12d42624aada208859ca9" translate="yes" xml:space="preserve">
          <source>The other two forms of &lt;code&gt;spdiags&lt;/code&gt; modify the input matrix by replacing the diagonals. They use the columns of &lt;var&gt;v&lt;/var&gt; to replace the diagonals represented by the vector &lt;var&gt;d&lt;/var&gt;. If the sparse matrix &lt;var&gt;A&lt;/var&gt; is defined then the diagonals of this matrix are replaced. Otherwise a matrix of &lt;var&gt;m&lt;/var&gt; by &lt;var&gt;n&lt;/var&gt; is created with the diagonals given by the columns of &lt;var&gt;v&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b63f97b3b445fccaa6a4a9cd5709c18b9e8bf62" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;C&lt;/var&gt; is a cell array where the number of columns is determined by the number of format specifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02524c19acfe1230631b8caf04cb3b4d90c269d" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;I&lt;/var&gt; is of the same class as the input &lt;var&gt;x&lt;/var&gt; and may be one of &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;single&lt;/code&gt;, or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ace93707bd2145ed33fc78b94d7186cf6d68393" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;deg&lt;/var&gt; is the same size and shape as &lt;var&gt;rad&lt;/var&gt; with radians converted to degrees using the conversion constant &lt;code&gt;180/pi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80161de2d279190c95f06cbc19481751826c7419" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;img&lt;/var&gt; is of class uint8 if &lt;var&gt;n&lt;/var&gt; is less than or equal to 256; Otherwise the return class is uint16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c220fa01dd0ca565503843ad79813cf031c66d" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;info&lt;/var&gt; is a structure containing the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9253e2647c78dfa2c6ff8330ff2cf7d442c07b32" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;multp&lt;/var&gt; is a vector specifying the multiplicity of the poles. &lt;code&gt;&lt;var&gt;multp&lt;/var&gt;(n)&lt;/code&gt; refers to the multiplicity of the Nth pole &lt;code&gt;&lt;var&gt;p&lt;/var&gt;(&lt;var&gt;idxp&lt;/var&gt;(n))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4f5968301089c65877aa5adb53f15b85e6d75a" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;rad&lt;/var&gt; is the same size and shape as &lt;var&gt;deg&lt;/var&gt; with degrees converted to radians using the conversion constant &lt;code&gt;pi/180&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddd47dafc9685ac36c9bfdadb24fdf68f9b3667" translate="yes" xml:space="preserve">
          <source>The output &lt;var&gt;y&lt;/var&gt; is the evaluation of the rational function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043eb4c1dfc6df73dcf0bdcc5d92d07ebabdc68e" translate="yes" xml:space="preserve">
          <source>The output argument &lt;var&gt;val&lt;/var&gt; contains the data read from the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69f6f6c5f836370f92b37f4de00d90c710a477f" translate="yes" xml:space="preserve">
          <source>The output arguments are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b3603df07e76b1a933627c3ba888dcdc8692b6" translate="yes" xml:space="preserve">
          <source>The output arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7442254c3aede526ddc25c52d16938d36a55a117" translate="yes" xml:space="preserve">
          <source>The output can also be returned as a structure &lt;var&gt;solution&lt;/var&gt; which has a field &lt;var&gt;x&lt;/var&gt; containing a row vector of times where the solution was evaluated and a field &lt;var&gt;y&lt;/var&gt; containing the solution matrix such that each column corresponds to a time in &lt;var&gt;x&lt;/var&gt;. Use &lt;code&gt;fieldnames&amp;nbsp;(&lt;var&gt;solution&lt;/var&gt;)&lt;/code&gt; to see the other fields and additional information returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fb16634e0223add82a77faf6d094f19261e63f" translate="yes" xml:space="preserve">
          <source>The output data class (double, single, uint32, etc.) is the same as the input class of &lt;var&gt;n&lt;/var&gt;. The algorithm used is the Sieve of Eratosthenes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb5fd70f4ea5606bfc37adb8980d91f7faca296" translate="yes" xml:space="preserve">
          <source>The output formats &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a48c48ee447f578ef8dcf102e47556a13af9f65" translate="yes" xml:space="preserve">
          <source>The output image is of class uint8 if the size of the new colormap is less than or equal to 256. Otherwise, the output image is of class double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f23e283f15e150c1a90f4aae470acf61cd0dcdf" translate="yes" xml:space="preserve">
          <source>The output is identical to the oct-file version as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee30a7ceecb115c82da193ad134fb73d6a9ac3d7" translate="yes" xml:space="preserve">
          <source>The output is ordered from largest pole to smallest pole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c871c0aff8881fd64ebd576362851c6eda2d97e4" translate="yes" xml:space="preserve">
          <source>The output may be a single RGB image (MxNx3 matrix where M and N are the original image &lt;var&gt;x&lt;/var&gt; dimensions, one for each of the red, green and blue channels). Alternatively, the individual red, green, and blue color matrices of size MxN may be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dde4772818e481e4b79cc9ffec97ee05c6b6d6" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;stemleaf&lt;/code&gt; is composed of two parts: a &quot;Fenced Letter Display,&quot; followed by the stem-and-leaf plot itself. The Fenced Letter Display is described in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0bd405cf2c240606d0ccbf05e917cec28a43f6a" translate="yes" xml:space="preserve">
          <source>The output of the above can be seen in &lt;a href=&quot;#fig_003aconvhull&quot;&gt;Figure 30.5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae33a6a4918211a5e9b1735d07b173b24b9b7377" translate="yes" xml:space="preserve">
          <source>The output parameters are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c982a2c73891e9314921e546eae2dd1003d7477" translate="yes" xml:space="preserve">
          <source>The output row vectors &lt;var&gt;num&lt;/var&gt; and &lt;var&gt;den&lt;/var&gt; contain the numerator and denominator coefficients in descending powers of s. Both are &lt;var&gt;N&lt;/var&gt;th-order polynomials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5d3c1d847c87809b37f07e26faedd07c0b3dc9" translate="yes" xml:space="preserve">
          <source>The output structure &lt;var&gt;info&lt;/var&gt; contains the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b345022d15bc4cbc84e9e75d49cdef2e0904c711" translate="yes" xml:space="preserve">
          <source>The output value &lt;var&gt;w&lt;/var&gt; is a vector of the frequencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9276a4ceec2f7b7a3a410e08942d5e97dc88ae96" translate="yes" xml:space="preserve">
          <source>The output variables are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7508b795e203cfe4aedb360404bf720c4b958783" translate="yes" xml:space="preserve">
          <source>The output vector &lt;var&gt;ind&lt;/var&gt; contains the converted linear indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149689fcd3e6501c5dbe257ba1294ba8f5849668" translate="yes" xml:space="preserve">
          <source>The outputs &lt;var&gt;s1&lt;/var&gt;, &amp;hellip;, &lt;var&gt;sN&lt;/var&gt; contain the converted subscripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501c2817b0ae3a5fa6fc7f4477fa05d05a0074da" translate="yes" xml:space="preserve">
          <source>The outputs are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1039fc3559b23778fed534b7522c939d7a4951c1" translate="yes" xml:space="preserve">
          <source>The outputs of &lt;code&gt;regexp&lt;/code&gt; default to the order given below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a939cf6fc12f94a463f9be435e7f6851cdea728b" translate="yes" xml:space="preserve">
          <source>The p-norm of a vector is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58de772034235be2b357e1212e80175921e34a04" translate="yes" xml:space="preserve">
          <source>The package manager currently recognizes the following keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bd837648571320b49b5457590b108f9d815efb" translate="yes" xml:space="preserve">
          <source>The package manager will disable dependency checking. With this option it is possible to install a package even when it depends on another package which is not installed on the system. &lt;strong&gt;Use this option with care.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6129d6daccc631a4ebfa647df6e8d16f03d898b1" translate="yes" xml:space="preserve">
          <source>The package manager will print the output of all commands as they are performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a129633cb94d3417930dc2f34597043846df67b9" translate="yes" xml:space="preserve">
          <source>The parameter &lt;var&gt;arch&lt;/var&gt; is a string specifying the default data format for the file. Valid values for &lt;var&gt;arch&lt;/var&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c14db26d5b8654c5507141a9f715cc5040b830d" translate="yes" xml:space="preserve">
          <source>The parameter &lt;var&gt;delim&lt;/var&gt; specifies the delimiter to use to separate values on a row. If no delimiter is specified the comma character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b5af0864206f50acdc7d66cd4094ffad747c53" translate="yes" xml:space="preserve">
          <source>The parameter &lt;var&gt;mask&lt;/var&gt; is an integer, interpreted as an octal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc8f02c828d5bc9d7c98b206d67c152a241eb2f" translate="yes" xml:space="preserve">
          <source>The parameter &lt;var&gt;permutation&lt;/var&gt; is an optional postorder permutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9a2622db829fb586964fa65d446f05f17432e3" translate="yes" xml:space="preserve">
          <source>The parameters &lt;code&gt;left-min&lt;/code&gt; and &lt;code&gt;balance&lt;/code&gt; are only available when the column-aligned modifier is used with the command &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f380a305622f7fc817ecc48c2926d9585a62b3" translate="yes" xml:space="preserve">
          <source>The parameters &lt;var&gt;azimuth&lt;/var&gt; and &lt;var&gt;elevation&lt;/var&gt; can be given as two arguments or as 2-element vector. The viewpoint can also be specified with Cartesian coordinates &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, and &lt;var&gt;z&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f619697dce011c25bce1a004fe12ccfabec4ba" translate="yes" xml:space="preserve">
          <source>The parameters &lt;var&gt;p1&lt;/var&gt;, &lt;var&gt;p2&lt;/var&gt;, &amp;hellip; are arguments of &lt;code&gt;&lt;var&gt;Afcn&lt;/var&gt; (&lt;var&gt;flag&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;p1&lt;/var&gt;, &lt;var&gt;p2&lt;/var&gt;, &amp;hellip;)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;solvefcn&lt;/var&gt; (&lt;var&gt;flag&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;p1&lt;/var&gt;, &lt;var&gt;p2&lt;/var&gt;,
&amp;hellip;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7928cb075c29b1b33c8c46ba2b798649976bc7a7" translate="yes" xml:space="preserve">
          <source>The parameters &lt;var&gt;p1&lt;/var&gt;, &lt;var&gt;p2&lt;/var&gt;, &amp;hellip; are arguments of &lt;code&gt;&lt;var&gt;Afun&lt;/var&gt; (&lt;var&gt;flag&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;p1&lt;/var&gt;, &lt;var&gt;p2&lt;/var&gt;, &amp;hellip;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adcac2abb897805904c90e2d612f3eb3e06309ea" translate="yes" xml:space="preserve">
          <source>The parent function &lt;code&gt;foo&lt;/code&gt; is unable to create a new variable &lt;var&gt;x&lt;/var&gt;, but the child function &lt;code&gt;bar&lt;/code&gt; was successful. Furthermore, even in an &lt;code&gt;eval&lt;/code&gt; statement &lt;var&gt;y&lt;/var&gt; in &lt;code&gt;bar&lt;/code&gt; is the same &lt;var&gt;y&lt;/var&gt; as in its parent function &lt;code&gt;foo&lt;/code&gt;. The use of &lt;code&gt;eval&lt;/code&gt; in conjunction with nested functions is best avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a01b096a6a1dc51a7fd42e09c16aa1859c237f" translate="yes" xml:space="preserve">
          <source>The parseparams function may be used to separate regular numeric arguments from additional arguments given as property/value pairs of the &lt;var&gt;varargin&lt;/var&gt; cell array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48afa9195e76a76648203d27f78be20da8b2d351" translate="yes" xml:space="preserve">
          <source>The parser has a number of variables that affect its internal operation. These variables are generally documented in the manual alongside the code that they affect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70a77ee1b6bdfa0117f2cff585745d0693559d1" translate="yes" xml:space="preserve">
          <source>The part of Octave&amp;rsquo;s help facility that allows you to read the complete text of the printed manual from within Octave normally uses a separate program called Info. When you invoke Info you will be put into a menu driven program that contains the entire Octave manual. Help for using Info is provided in this manual, see &lt;a href=&quot;getting-help#Getting-Help&quot;&gt;Getting Help&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ebe27de3695201700458723470065ce04d6607" translate="yes" xml:space="preserve">
          <source>The patch object can be specified by a graphics handle (&lt;var&gt;p&lt;/var&gt;), a patch structure (&lt;var&gt;fv&lt;/var&gt;) with the fields &lt;code&gt;&quot;faces&quot;&lt;/code&gt; and &lt;code&gt;&quot;vertices&quot;&lt;/code&gt;, or as two separate matrices (&lt;var&gt;f&lt;/var&gt;, &lt;var&gt;v&lt;/var&gt;) of faces and vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9284a71a4e45829edf8de47f26cd99f0e4408e01" translate="yes" xml:space="preserve">
          <source>The path does not include package directories (beginning with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e567892e882f65d6147789d878a717368ff7297" translate="yes" xml:space="preserve">
          <source>The path information is extracted from one of four sources. The possible sources, in order of preference, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec483140aace09d337153c4e4806ad0fa58455f6" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;.&lt;/code&gt; matches all characters except the newline character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8cfdb3b1899d138e0486e4ce6d94a7ff91f120" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;.&lt;/code&gt; matches all characters including the newline character. (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e834157a361ed2f77acfcada4b059052cf24cc" translate="yes" xml:space="preserve">
          <source>The pattern is a regular expression as documented for &lt;code&gt;regexp&lt;/code&gt;. See &lt;a href=&quot;#XREFregexp&quot;&gt;regexp&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c8695e9eec3ebc93e5a411469aee9770a081b7" translate="yes" xml:space="preserve">
          <source>The pattern may include arbitrary whitespace and also comments beginning with the character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f875616be2566e330ff69906e50e52a49030da46" translate="yes" xml:space="preserve">
          <source>The pattern strings are interpreted as filename globbing patterns (as they are used by Unix shells).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8792d6154734ec504adeb6cc6f44c6c305ef02a" translate="yes" xml:space="preserve">
          <source>The patterns are considered to be regular expressions when matching the variables to display. The same pattern syntax accepted by the &lt;code&gt;regexp&lt;/code&gt; function is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f188da0722bd85bd7c846be245e2ff41ae7a1ebe" translate="yes" xml:space="preserve">
          <source>The permission mask is a UNIX concept used when creating new objects on a file system such as files, directories, or named FIFOs. The object to be created has base permissions in an octal number &lt;var&gt;mode&lt;/var&gt; which are modified according to the octal value of &lt;var&gt;mask&lt;/var&gt;. The final permissions for the new object are &lt;code&gt;&lt;var&gt;mode&lt;/var&gt; - &lt;var&gt;mask&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11da4952840702fa3b302ed7870928d909304e66" translate="yes" xml:space="preserve">
          <source>The permutation vector &lt;var&gt;perm&lt;/var&gt; must contain the elements &lt;code&gt;1:ndims&amp;nbsp;(A)&lt;/code&gt; (in any order, but each element must appear only once). The &lt;var&gt;N&lt;/var&gt;th dimension of &lt;var&gt;A&lt;/var&gt; gets remapped to dimension &lt;code&gt;&lt;var&gt;PERM&lt;/var&gt;(&lt;var&gt;N&lt;/var&gt;)&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae698fb559d560aad36ed51210b198b7b6f44bcd" translate="yes" xml:space="preserve">
          <source>The permutation vector of the Cholesky factorization of &lt;var&gt;B&lt;/var&gt; if &lt;code&gt;cholB&lt;/code&gt; is true. It is obtained by &lt;code&gt;[R, ~, permB] =
chol (&lt;var&gt;B&lt;/var&gt;, &lt;code&gt;&quot;vector&quot;&lt;/code&gt;)&lt;/code&gt;. The default is &lt;code&gt;1:&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178b82c6b6d32194a4888fa0104b892e6654b964" translate="yes" xml:space="preserve">
          <source>The permuted QR factorization &lt;code&gt;[&lt;var&gt;Q&lt;/var&gt;, &lt;var&gt;R&lt;/var&gt;, &lt;var&gt;P&lt;/var&gt;] = qr (&lt;var&gt;A&lt;/var&gt;)&lt;/code&gt; allows the construction of an orthogonal basis of &lt;code&gt;span (A)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e003b7941cf26555a8d4b7bf293183975a019c60" translate="yes" xml:space="preserve">
          <source>The permuted QR factorization has the additional property that the diagonal entries of &lt;var&gt;R&lt;/var&gt; are ordered by decreasing magnitude. In other words, &lt;code&gt;abs (diag (&lt;var&gt;R&lt;/var&gt;))&lt;/code&gt; will be ordered from largest to smallest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33705e4a963abe43bc233c58c538c638965042a3" translate="yes" xml:space="preserve">
          <source>The piecewise polynomial fit, provided by &lt;code&gt;splinefit&lt;/code&gt;, has continuous derivatives up to the &lt;var&gt;order&lt;/var&gt;-1. For example, a cubic fit has continuous first and second derivatives. This is demonstrated by the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89d6839eb4cb90bec7ad4ee81909e428dc2b927" translate="yes" xml:space="preserve">
          <source>The piecewise polynomial structure &lt;code&gt;pp2&lt;/code&gt; obtained in this way, is identical to the original &lt;code&gt;pp&lt;/code&gt;. The same can be obtained by directly accessing the fields of the structure &lt;code&gt;pp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f47ae93969eaee000b7cc1bbc4c407f10fc943" translate="yes" xml:space="preserve">
          <source>The pipe will be connected to the standard input of the process, and open for writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb271ec6428aebd52e017d9fee3acba4488b574" translate="yes" xml:space="preserve">
          <source>The pipe will be connected to the standard output of the process, and open for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f6f7642e432da21c6c87a29872c32f72267fd7" translate="yes" xml:space="preserve">
          <source>The pivot tolerance of the &lt;small&gt;UMFPACK&lt;/small&gt; solvers (default 0.1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2ad7df0f5a7c4244b2b611384f6f15f659448f" translate="yes" xml:space="preserve">
          <source>The pivot tolerance of the &lt;small&gt;UMFPACK&lt;/small&gt; symmetric solvers (default 0.001)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01322340764d829e1ef5c868f61176536e72973d" translate="yes" xml:space="preserve">
          <source>The plot index runs row-wise; First, all columns in a row are numbered and then the next row is filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ecb11b42ee8e879ca82cb88392af2e8200ea3b" translate="yes" xml:space="preserve">
          <source>The pointer is positioned &lt;var&gt;offset&lt;/var&gt; characters from the &lt;var&gt;origin&lt;/var&gt;, which may be one of the predefined variables &lt;code&gt;SEEK_SET&lt;/code&gt; (beginning), &lt;code&gt;SEEK_CUR&lt;/code&gt; (current position), or &lt;code&gt;SEEK_END&lt;/code&gt; (end of file) or strings &lt;code&gt;&quot;bof&quot;&lt;/code&gt;, &lt;code&gt;&quot;cof&quot;&lt;/code&gt;, or &lt;code&gt;&quot;eof&quot;&lt;/code&gt;. If &lt;var&gt;origin&lt;/var&gt; is omitted, &lt;code&gt;SEEK_SET&lt;/code&gt; is assumed. &lt;var&gt;offset&lt;/var&gt; may be positive, negative, or zero but not all combinations of &lt;var&gt;origin&lt;/var&gt; and &lt;var&gt;offset&lt;/var&gt; can be realized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d13d3e5c00c1cfd59652dc58ff5a32364522ad9" translate="yes" xml:space="preserve">
          <source>The pointer was moved while pressing the mouse button (drag)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88795c56532e1e371df149e9090270fc786a64ae" translate="yes" xml:space="preserve">
          <source>The polygamma functions are the &lt;var&gt;k&lt;/var&gt;th derivative of the logarithm of the gamma function. If unspecified, &lt;var&gt;k&lt;/var&gt; defaults to zero. A value of zero computes the digamma function, a value of 1, the trigamma function, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec45bee115e096e13f18afce798cb2aa7f8514f" translate="yes" xml:space="preserve">
          <source>The polynomial class is used to represent polynomials of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ea7cceb537d83cfd45a548a3ac6ee083a7a74a" translate="yes" xml:space="preserve">
          <source>The polynomial coefficients are returned in a row vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac901f6d37a0f96009c750d6acbf6570f866975" translate="yes" xml:space="preserve">
          <source>The position of the index is determined by &lt;var&gt;dim&lt;/var&gt;. If not specified, slicing is done along the first non-singleton dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e41f0e96aa82bcf0892d262449def10b6f3c160" translate="yes" xml:space="preserve">
          <source>The possible inputs are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd5c3d5017d5c5a1f1b471013f3adf4c8c375d3" translate="yes" xml:space="preserve">
          <source>The possible matrix types depend on whether the matrix is full or sparse, and can be one of the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257b205ef558ced5aa4d040ef3654d2bcb81ec8b" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;var&gt;mode&lt;/var&gt; are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b888d7f1ee08719b4b129debfd980bd2ba6316d9" translate="yes" xml:space="preserve">
          <source>The precedence of prefix unary operators is important when another operator follows the operand. For example, &lt;code&gt;-x^2&lt;/code&gt; means &lt;code&gt;-(x^2)&lt;/code&gt;, because &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c89a894987099394f6a4e12afe28133a27414f" translate="yes" xml:space="preserve">
          <source>The precision of the values is given by &lt;var&gt;n&lt;/var&gt;. If &lt;var&gt;n&lt;/var&gt; is a scalar then both real and imaginary parts of the matrix are printed to the same precision. Otherwise &lt;code&gt;&lt;var&gt;n&lt;/var&gt;(1)&lt;/code&gt; defines the precision of the real part and &lt;code&gt;&lt;var&gt;n&lt;/var&gt;(2)&lt;/code&gt; defines the precision of the imaginary part. The default for &lt;var&gt;n&lt;/var&gt; is 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ede6f9f69efdb23901a9357ba7e0e4b1d55329" translate="yes" xml:space="preserve">
          <source>The precision specifies how many digits follow the decimal-point character for the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a6801ad32ce46b001b171b8174014fb70d2a36" translate="yes" xml:space="preserve">
          <source>The precision to use when writing the file. It can either be a format string (as used by fprintf) or a number of significant digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0395f1023efc1ebc4051cf30c838f43a9c9bda24" translate="yes" xml:space="preserve">
          <source>The preconditioner &lt;var&gt;P&lt;/var&gt; is given as &lt;code&gt;P = M1 * M2&lt;/code&gt;. Both &lt;var&gt;M1&lt;/var&gt; and &lt;var&gt;M2&lt;/var&gt; can be passed as a matrix or as a function handle or inline function &lt;code&gt;g&lt;/code&gt; such that &lt;code&gt;g(x, &quot;notransp&quot;) = M1 \ x&lt;/code&gt; or &lt;code&gt;g(x, &quot;notransp&quot;) = M2 \ x&lt;/code&gt; and &lt;code&gt;g(x, &quot;transp&quot;) = M1' \ x&lt;/code&gt; or &lt;code&gt;g(x, &quot;transp&quot;) = M2' \ x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af590051f93aef9ab2e4294c1c7ebc7cd45ca2f1" translate="yes" xml:space="preserve">
          <source>The preference &lt;var&gt;pref&lt;/var&gt; may be a string or a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1393c12144174da1cf9d000e42c6b27e8ef2b45d" translate="yes" xml:space="preserve">
          <source>The preference &lt;var&gt;pref&lt;/var&gt; may be a string or a cell array of strings. An error will be issued if the preference already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a93ea7c6bf88f577b19c83aadfa41654235224f" translate="yes" xml:space="preserve">
          <source>The preference &lt;var&gt;pref&lt;/var&gt; may be a string or cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc065ab20b52371d65756f808dc4d81921043075" translate="yes" xml:space="preserve">
          <source>The preference &lt;var&gt;pref&lt;/var&gt; may be a string or cell array of strings. If it is a cell array of strings then a cell array of preferences is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5545d274bcff46691c6f495d84cf8f1cf6d99a5" translate="yes" xml:space="preserve">
          <source>The preferred location for example code blocks is embedded within the script m-file immediately following the code that it exercises. Alternatively, the examples may be stored in a file with the same name but no extension located on Octave&amp;rsquo;s load path. To separate examples from regular script code all lines are prefixed by &lt;code&gt;%!&lt;/code&gt;. Each example must also be introduced by the keyword &lt;code&gt;&quot;demo&quot;&lt;/code&gt; flush left to the prefix with no intervening spaces. The remainder of the example can contain arbitrary Octave code. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c611160df064df8f7deb62a15186e48c357af3d" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;OCTAVE_QUIT&lt;/code&gt; macro in the inner loop allows Octave to detect and acknowledge a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d75a040db1760bd2c0d524a585d894e8186ce7" translate="yes" xml:space="preserve">
          <source>The previously described syntax for creating permutation matrices can actually help an user to understand the connection between a permutation matrix and a permuting vector. Namely, the following holds, where &lt;code&gt;I = eye (n)&lt;/code&gt; is an identity matrix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8e95296869a314f4bae8779a7a91d5f48ab43a" translate="yes" xml:space="preserve">
          <source>The primary distinction is that an assumed zero, when multiplied by any number, or divided by any nonzero number, yields &lt;strong&gt;always&lt;/strong&gt; a zero, even when, e.g., multiplied by &lt;code&gt;Inf&lt;/code&gt; or divided by &lt;code&gt;NaN&lt;/code&gt;. The reason for this behavior is that the numerical multiplication is not actually performed anywhere by the underlying algorithm; the result is just assumed to be zero. Equivalently, one can say that the part of the computation involving assumed zeros is performed symbolically, not numerically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4497afe3820298000e499e6741c01a7a355d7f0d" translate="yes" xml:space="preserve">
          <source>The prime factorization is defined as &lt;code&gt;prod (&lt;var&gt;pf&lt;/var&gt;) == &lt;var&gt;q&lt;/var&gt;&lt;/code&gt; where every element of &lt;var&gt;pf&lt;/var&gt; is a prime number. If &lt;code&gt;&lt;var&gt;q&lt;/var&gt; == 1&lt;/code&gt;, return 1. The output &lt;var&gt;pf&lt;/var&gt; is of the same numeric class as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e4022186917e5e9a29800d7edfc23ca8e9cff3" translate="yes" xml:space="preserve">
          <source>The principal output is the 1-norm condition number estimate &lt;var&gt;cest&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db42f6f48578d99165191b32a0e3eeaefffe77e" translate="yes" xml:space="preserve">
          <source>The problem is feasible and convex. Global solution found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce4a3f748e2faf6bad20db3647d57f688703a30" translate="yes" xml:space="preserve">
          <source>The problem is infeasible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4ace2992f8d711073cc710eea655843784eaa5" translate="yes" xml:space="preserve">
          <source>The problem is not convex and unbounded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b941f27bf6e2df9f32a98fe17d47b7000fbf06" translate="yes" xml:space="preserve">
          <source>The problem is not convex. Local solution found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91a90b571893c04030af926f8f16cc0fe3620d8" translate="yes" xml:space="preserve">
          <source>The problem is that on entry to the &lt;code&gt;subsasgn&lt;/code&gt; method, &lt;code&gt;x&lt;/code&gt; is still referenced from the caller&amp;rsquo;s scope, which means that the method will first need to unshare (copy) &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x.myfield&lt;/code&gt; before performing the assignment. Upon completing the call, unless an error occurs, the result is immediately assigned to &lt;code&gt;x&lt;/code&gt; in the caller&amp;rsquo;s scope, so that the previous value of &lt;code&gt;x.myfield&lt;/code&gt; is forgotten. Hence, the Octave language implies a copy of N elements (N being the size of &lt;code&gt;x.myfield&lt;/code&gt;), where modifying just a single element would actually suffice. In other words, a constant-time operation is degraded to linear-time one. This may be a real problem for user classes that intrinsically store large arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e9b7da2181d6a759b8c805bdf754c8b5a138dc" translate="yes" xml:space="preserve">
          <source>The procedure for installing Octave from source on a Unix-like system is described next. Building on other platforms will follow similar steps. Note that this description applies to Octave releases. Building the development sources from the Mercurial archive requires additional steps as described in the development source itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13eca27add5c67bb9f3cae11c5bc2b40521aa524" translate="yes" xml:space="preserve">
          <source>The properties and their current values may be obtained in the form of a structure using &lt;code&gt;s = get (h)&lt;/code&gt;, where &lt;code&gt;h&lt;/code&gt; is the handle of a graphics object. If only the names of the properties and the allowed values (for radio properties only) are wanted, one may use &lt;code&gt;set (h)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8a9b67960aa6bda8c07cdda4dbedd3ee430f1d" translate="yes" xml:space="preserve">
          <source>The properties can be accessed from everywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb62b4c18240b70a48cea1e5f9ae076908e9c72" translate="yes" xml:space="preserve">
          <source>The properties can only be accessed from class methods and from subclasses of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9eb52e3143e1bbda6ccbce01e177917af5eed5" translate="yes" xml:space="preserve">
          <source>The properties can only be accessed from class methods. Subclasses of that class cannot access them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46001cd5bcf3cb9e20aa263688e98a6a180cf9a5" translate="yes" xml:space="preserve">
          <source>The properties of the contour lines. The properties &lt;code&gt;linewidth&lt;/code&gt; and &lt;code&gt;linestyle&lt;/code&gt; are similar to the corresponding properties for lines. The property &lt;code&gt;linecolor&lt;/code&gt; is a color property (see &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;), that can also have the values of &lt;code&gt;&quot;none&quot;&lt;/code&gt; or &lt;code&gt;&quot;auto&quot;&lt;/code&gt;. If &lt;code&gt;linecolor&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt;, then no contour line is drawn. If &lt;code&gt;linecolor&lt;/code&gt; is &lt;code&gt;&quot;auto&quot;&lt;/code&gt; then the line color is determined by the colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a08e2ad155bfc5437088191723db2b09f2c21c" translate="yes" xml:space="preserve">
          <source>The properties of the surface group are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeee697a5a7d76eedf1a9792d94db4e1d9e4e8ff" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;barwidth&lt;/code&gt; is the width of the bar corresponding to the &lt;var&gt;width&lt;/var&gt; variable passed to &lt;code&gt;bar&lt;/code&gt; or &lt;var&gt;barh&lt;/var&gt;. Whether the bar series is &lt;code&gt;&quot;grouped&quot;&lt;/code&gt; or &lt;code&gt;&quot;stacked&quot;&lt;/code&gt; is determined by the &lt;code&gt;barlayout&lt;/code&gt; property and whether the bars are horizontal or vertical by the &lt;code&gt;horizontal&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790d2c26b436bc875d22cede9ee131f1ea2cc941" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;showbaseline&lt;/code&gt; flags whether the baseline of the bar series is displayed (default is &lt;code&gt;&quot;on&quot;&lt;/code&gt;). The handle of the graphics object representing the baseline is given by the &lt;code&gt;baseline&lt;/code&gt; property and the y-value of the baseline by the &lt;code&gt;basevalue&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686a10f9a5a607abd4808da3938bcafe67315ef8" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;showbaseline&lt;/code&gt; flags whether the baseline of the stem series is displayed (default is &lt;code&gt;&quot;on&quot;&lt;/code&gt;). The handle of the graphics object representing the baseline is given by the &lt;code&gt;baseline&lt;/code&gt; property and the y-value (or z-value for &lt;code&gt;stem3&lt;/code&gt;) of the baseline by the &lt;code&gt;basevalue&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f657c2890f720c2fb032c1ff3d086775c66b2f9" translate="yes" xml:space="preserve">
          <source>The quasi-triangular matrix &lt;var&gt;A&lt;/var&gt; is usually the result of a Schur factorization. If called with a second input &lt;var&gt;B&lt;/var&gt; then the generalized eigenvalues of the pair &lt;var&gt;A&lt;/var&gt;, &lt;var&gt;B&lt;/var&gt; are returned in the order of appearance of the matrix &lt;code&gt;&lt;var&gt;A&lt;/var&gt;-&lt;var&gt;lambda&lt;/var&gt;*&lt;var&gt;B&lt;/var&gt;&lt;/code&gt;. The pair &lt;var&gt;A&lt;/var&gt;, &lt;var&gt;B&lt;/var&gt; is usually the result of a QZ decomposition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddc12676b17da684223ecb2eaae5bbdf5fd74c0" translate="yes" xml:space="preserve">
          <source>The quotient is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5525da3c3fbfc742d83b884ef3e6f80ce32798e2" translate="yes" xml:space="preserve">
          <source>The radio property &lt;code&gt;zlevelmode&lt;/code&gt; can have the values &lt;code&gt;&quot;none&quot;&lt;/code&gt;, &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, or &lt;code&gt;&quot;manual&quot;&lt;/code&gt;. When its value is &lt;code&gt;&quot;none&quot;&lt;/code&gt; there is no z component to the plotted contours. When its value is &lt;code&gt;&quot;auto&quot;&lt;/code&gt; the z value of the plotted contours is at the same value as the contour itself. If the value is &lt;code&gt;&quot;manual&quot;&lt;/code&gt;, then the z value at which to plot the contour is determined by the &lt;code&gt;zlevel&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32273d6e0724e9e8ee8915e60bf98b30ae70e75d" translate="yes" xml:space="preserve">
          <source>The range is a quickly computed measure of the dispersion of a data set, but is less accurate than &lt;code&gt;iqr&lt;/code&gt; if there are outlying data points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabe22801669522625e423cbfe4cdd404067c37f" translate="yes" xml:space="preserve">
          <source>The range of values from the class is scaled to the interval [0 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f4f7f819a1c1ccc360c7b41cec794b211fb9c9" translate="yes" xml:space="preserve">
          <source>The rank is taken to be the number of singular values of &lt;var&gt;A&lt;/var&gt; that are greater than the specified tolerance &lt;var&gt;tol&lt;/var&gt;. If the second argument is omitted, it is taken to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7932a0e7e89d25fbf73d9ea220b66223ad3d0f0f" translate="yes" xml:space="preserve">
          <source>The rank of a matrix is the number of linearly independent rows or columns and equals the dimension of the row and column space. The function &lt;code&gt;orth&lt;/code&gt; may be used to compute an orthonormal basis of the column space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0c759620a42debbeb73aed5ec2e8b4e35aeed7" translate="yes" xml:space="preserve">
          <source>The raw help text is returned in &lt;var&gt;text&lt;/var&gt; and the format in &lt;var&gt;format&lt;/var&gt; The format is a string which is one of &lt;code&gt;&quot;texinfo&quot;&lt;/code&gt;, &lt;code&gt;&quot;html&quot;&lt;/code&gt;, or &lt;code&gt;&quot;plain text&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c57b5d8b5e993b79c2f3354502362536c1722d" translate="yes" xml:space="preserve">
          <source>The recommended way for the user to create a sparse matrix, is to create two vectors containing the row and column index of the data and a third vector of the same size containing the data to be stored. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7505d3c3830fb0aec9e841ab0fa7971c0204e6b" translate="yes" xml:space="preserve">
          <source>The recursive algorithm for quadrature presented above is referred to as &lt;code&gt;&quot;iterated&quot;&lt;/code&gt;. A separate 2-D integration method is implemented in the function &lt;code&gt;quad2d&lt;/code&gt;. This function performs a &lt;code&gt;&quot;tiled&quot;&lt;/code&gt; integration by subdividing the integration domain into rectangular regions and performing separate integrations over those domains. The domains are further subdivided in areas requiring refinement to reach the desired numerical accuracy. For certain functions this method can be faster than the 2-D iteration used in the other functions above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0467f9b4fa59f4691446a74b19a236a82e7c52f" translate="yes" xml:space="preserve">
          <source>The reduced matrix is returned in &lt;var&gt;nv&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2dad2cae02bdcdb4eb8fb67cd57f66d4187ef3" translate="yes" xml:space="preserve">
          <source>The remainder is computed using the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35b7d4181cebac300866990eccc99de39c9d7d7" translate="yes" xml:space="preserve">
          <source>The remaining arguments &lt;var&gt;precision&lt;/var&gt;, &lt;var&gt;skip&lt;/var&gt;, and &lt;var&gt;arch&lt;/var&gt; are optional, and are interpreted as described for &lt;code&gt;fread&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3e2536f3e84ac7af6d28e3fda767e4b06a938a" translate="yes" xml:space="preserve">
          <source>The remaining couple of methods are used to get and set various properties of the audioplayer object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00222117bb1b3eb5854e5f30f615c4c7d5926ed9" translate="yes" xml:space="preserve">
          <source>The remaining two methods allow you to read or alter the properties of audiorecorder objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2729bc91e8263e51293f0b58ed720400f7f862" translate="yes" xml:space="preserve">
          <source>The replacement string may contain &lt;code&gt;$i&lt;/code&gt;, which substitutes for the ith set of parentheses in the match string. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb49e3d90b4f38af44aac7442c6c09039fa3d123" translate="yes" xml:space="preserve">
          <source>The required convergence tolerance for the singular values. The default value is 1e-10. &lt;code&gt;eigs&lt;/code&gt; is passed &lt;code&gt;&lt;var&gt;tol&lt;/var&gt; / sqrt(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c9f2ad16774f3bffc3ee93db83608e36642b17" translate="yes" xml:space="preserve">
          <source>The residual: &lt;code&gt;&lt;var&gt;d&lt;/var&gt;-&lt;var&gt;c&lt;/var&gt;*&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a2ffb908f1dc6981f7c21379682e5ee4cfff9e" translate="yes" xml:space="preserve">
          <source>The response is evaluated at &lt;var&gt;n&lt;/var&gt; angular frequencies between 0 and 2*pi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0850e73e60ce135aa71551d5909bbffad4d794" translate="yes" xml:space="preserve">
          <source>The rest of the function shows how to find the number of input arguments, how to print through the Octave pager, and how to return from the function. After compiling this function as above, an example of its use is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1845b9ac4c06121fbcba755ca4c4c6576d3dd2b" translate="yes" xml:space="preserve">
          <source>The result &lt;em&gt;y(t)&lt;/em&gt; follows the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db20f282bfb320ec84f67e54ffea9d0265e977ca" translate="yes" xml:space="preserve">
          <source>The result is a row vector if &lt;var&gt;x&lt;/var&gt; is a row vector, otherwise it is a column vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c3c320f64856a9280d270081f0e14bf0faaaea" translate="yes" xml:space="preserve">
          <source>The result is a row vector if &lt;var&gt;x&lt;/var&gt; is a row vector; otherwise, it is a column vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36201daf9b4356bc0b97bcca4e29b61720cdc8f7" translate="yes" xml:space="preserve">
          <source>The result is a volume, which for this constant-value integrand, is just &lt;code&gt;&lt;var&gt;Length&lt;/var&gt; * &lt;var&gt;Width&lt;/var&gt; * &lt;var&gt;Height&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ba163606ae3add04a008c09847756b28484fec" translate="yes" xml:space="preserve">
          <source>The result is a volume, which for this constant-value integrand, is the Triangle Area x Height or &lt;code&gt;1/2 * &lt;var&gt;Base&lt;/var&gt; * &lt;var&gt;Width&lt;/var&gt; * &lt;var&gt;Height&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b42b84c4c6d9c105f9c770891cc07a3c49ad2a" translate="yes" xml:space="preserve">
          <source>The result is equivalent to &lt;code&gt;sort(&lt;var&gt;x&lt;/var&gt;)(&lt;var&gt;n&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d3a1ebd73b0e2f474e2b862cc17b76e3095017" translate="yes" xml:space="preserve">
          <source>The result is returned in a permuted form, according to the optional return value &lt;var&gt;P&lt;/var&gt;. For example, given the matrix &lt;code&gt;a = [1, 2; 3, 4]&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc0be66e32c5e2948992d52684bc202570ca81d" translate="yes" xml:space="preserve">
          <source>The result is the same size as &lt;var&gt;z&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec80713e0e1ad84632a3d22fc68ac18bfd0e40d" translate="yes" xml:space="preserve">
          <source>The result of the integration is returned in &lt;var&gt;q&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b5cc07a7305900ae7a1b7a48f32ac80ca3d75e" translate="yes" xml:space="preserve">
          <source>The result of this example can be seen in &lt;a href=&quot;#fig_003aextendedtext&quot;&gt;Figure 15.7&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c85a497f5a66f9f43f024b2a755c7007aca0cc" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003adelaunay&quot;&gt;Figure 30.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc37bc44edff253019947b464aeeed837c316c2" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003ainpolygon&quot;&gt;Figure 30.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f3607e3c6cfb9b515520dba713b65d70dc5cf3" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003ainterpderiv1&quot;&gt;Figure 29.1&lt;/a&gt; and &lt;a href=&quot;#fig_003ainterpderiv2&quot;&gt;Figure 29.2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb50e8a9277b349dcb5da8cdaa8e37aad7381a65" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003asplinefit1&quot;&gt;Figure 28.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545705ae093514b7dad96623d678c97b0fb52a79" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003asplinefit2&quot;&gt;Figure 28.2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6aa6a80ce68cff1d11315d4b0bd8d24c767491" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003asplinefit3&quot;&gt;Figure 28.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db7f8d96b8a2f36101ffec1da631c9b7bb65237" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003asplinefit4&quot;&gt;Figure 28.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7f4eac16be43875eb7cde7fe0f9ab47ae87c52" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003asplinefit6&quot;&gt;Figure 28.5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b31b5d953306548e2f43c8827f35772ec5d633" translate="yes" xml:space="preserve">
          <source>The result of which can be seen in &lt;a href=&quot;#fig_003avoronoi&quot;&gt;Figure 30.3&lt;/a&gt;. Note that the circum-circle of one of the triangles has been added to this figure, to make the relationship between the Delaunay tessellation and the Voronoi diagram clearer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0435fae1f71e540bc20b7d5483aeb495776cb17b" translate="yes" xml:space="preserve">
          <source>The resulting matrix may be used as a regressor matrix in autoregressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453c3c27c8ab8031a7387f70a2a0ec8bb6c655d6" translate="yes" xml:space="preserve">
          <source>The return argument &lt;var&gt;idx&lt;/var&gt; specifies which element of the &lt;var&gt;stack&lt;/var&gt; struct array is currently active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4883ddda41ade030688f7ac8258b80c63b16bf1a" translate="yes" xml:space="preserve">
          <source>The return arguments of &lt;code&gt;eigs&lt;/code&gt; depend on the number of return arguments requested. With a single return argument, a vector &lt;var&gt;d&lt;/var&gt; of length &lt;var&gt;k&lt;/var&gt; is returned containing the &lt;var&gt;k&lt;/var&gt; eigenvalues that have been found. With two return arguments, &lt;var&gt;V&lt;/var&gt; is a &lt;var&gt;n&lt;/var&gt;-by-&lt;var&gt;k&lt;/var&gt; matrix whose columns are the &lt;var&gt;k&lt;/var&gt; eigenvectors corresponding to the returned eigenvalues. The eigenvalues themselves are returned in &lt;var&gt;d&lt;/var&gt; in the form of a &lt;var&gt;n&lt;/var&gt;-by-&lt;var&gt;k&lt;/var&gt; matrix, where the elements on the diagonal are the eigenvalues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d40e38bee65651f1476270c50bdf77625b2a279" translate="yes" xml:space="preserve">
          <source>The return code &lt;var&gt;c&lt;/var&gt; is one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25558472ad2c79b735a293b9b46d7fbf449833b0" translate="yes" xml:space="preserve">
          <source>The return type of functions defined with &lt;code&gt;DEFUN_DLD&lt;/code&gt; is always &lt;code&gt;octave_value_list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af19bd1b82293930756a730aa044824f703d027" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;ax&lt;/var&gt; is a vector with the axes handles of the two y-axes. &lt;var&gt;h1&lt;/var&gt; and &lt;var&gt;h2&lt;/var&gt; are handles to the objects generated by the plot commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb19a203e5632365fb8fe09e06bb40c63a0b014" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;c&lt;/var&gt; is a 2x&lt;var&gt;n&lt;/var&gt; matrix containing the contour lines in the following format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396044e16a294b88533c421bdd96789e60ccac69" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;choice&lt;/var&gt; is the number of the option selected by the user counting from 1. If the user aborts the dialog or makes an invalid selection then 0 is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d95cdcdc3c1f1f158c92f7c358373d382ef966" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;h&lt;/var&gt; is a graphics handle to the created figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e623a4afaa325c8f94c6348c895649c3a89335c" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;h&lt;/var&gt; is a handle to the figure object used for building the dialog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f7c214d015231fdf9a131ea765af978c51e3fd" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;h&lt;/var&gt; is a list of handles to the found graphic objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10541ff7277912f429aa2662425f18b56646ff4b" translate="yes" xml:space="preserve">
          <source>The return value &lt;var&gt;m&lt;/var&gt; is an object of the containers.Map class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fc466dc3741a237940e39ddb6aea9f26f3982b" translate="yes" xml:space="preserve">
          <source>The return value is a column cell array of function handles to all local functions accessible from the function from which &lt;code&gt;localfunctions&lt;/code&gt; is called. Nested functions are &lt;em&gt;not&lt;/em&gt; included in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d0d9647de6776a5ad3d13ad23f15274330d351" translate="yes" xml:space="preserve">
          <source>The return value of &lt;var&gt;b&lt;/var&gt; is 0 if a mouse button was pressed or 1 if a key was pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61874578bcdde73aa7bc9e890142fa8aab2eb7c" translate="yes" xml:space="preserve">
          <source>The return value(s), as well as the &lt;var&gt;n&lt;/var&gt; and &lt;var&gt;direction&lt;/var&gt; arguments behave identically as in &lt;code&gt;find&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9013be93326c4d57168bc448d7566bd724feb6ec" translate="yes" xml:space="preserve">
          <source>The return values &lt;var&gt;beta&lt;/var&gt;, &lt;var&gt;sigma&lt;/var&gt;, and &lt;var&gt;r&lt;/var&gt; are defined as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdb6a603a0314ed4d15c405ee8ceb00da488ee4" translate="yes" xml:space="preserve">
          <source>The return values &lt;var&gt;beta&lt;/var&gt;, &lt;var&gt;v&lt;/var&gt;, and &lt;var&gt;r&lt;/var&gt; are defined as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759bbed447fe113560c005bbfa8a7c9560c411bf" translate="yes" xml:space="preserve">
          <source>The return values &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; are the coordinates where the mouse was clicked in the units of the current axes. The return value &lt;var&gt;button&lt;/var&gt; is 1, 2, or 3 for the left, middle, or right button. If a key is pressed the ASCII value is returned in &lt;var&gt;button&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559be3920cae8bf3bc1160df3f9b2fa39105edd8" translate="yes" xml:space="preserve">
          <source>The return variable &lt;var&gt;f&lt;/var&gt; is the number of occurrences of the mode in the dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c57f93b97f0a74cc85cf3884f27526a5bbffda0" translate="yes" xml:space="preserve">
          <source>The returned colormap will have &lt;var&gt;n&lt;/var&gt; rows. If &lt;var&gt;n&lt;/var&gt; is not defined then the size of the current colormap is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ea6bcd0bcc7937b279fef662cc77e2318c9c0b" translate="yes" xml:space="preserve">
          <source>The returned identifier may be used to remove the function handle from the list of input hook functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36698aecc46029df3e94aa6a0be3e992886178d4" translate="yes" xml:space="preserve">
          <source>The returned string may be used to reconstruct the original matrix by using the &lt;code&gt;eval&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879548095b85c2a682b147408820b8b53e60ad1d" translate="yes" xml:space="preserve">
          <source>The root graphics object is the ultimate parent of all graphics objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6960bd7aa7e64df769d0f2cef33d4375a51c9e54" translate="yes" xml:space="preserve">
          <source>The root properties are also inverted such that all subsequent plots will use the new color scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974e8d3b77445a64c20b4cd72b52505420280afa" translate="yes" xml:space="preserve">
          <source>The rotation is always performed on the plane of the first two dimensions, i.e., rows and columns. To perform a rotation on any other plane, use &lt;code&gt;rotdim&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d59131fd131b33c1bbb792ce1d0516d491d4d6" translate="yes" xml:space="preserve">
          <source>The row counts of the Cholesky factorization as determined by &lt;var&gt;typ&lt;/var&gt;. The computational difficulty of performing the true factorization using &lt;code&gt;chol&lt;/code&gt; is &lt;code&gt;sum (&lt;var&gt;count&lt;/var&gt; .^ 2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a53811da5a243daa3f3d25ca938380405253e6" translate="yes" xml:space="preserve">
          <source>The rows of &lt;var&gt;xx&lt;/var&gt; are copies of &lt;var&gt;x&lt;/var&gt;, and the columns of &lt;var&gt;yy&lt;/var&gt; are copies of &lt;var&gt;y&lt;/var&gt;. If &lt;var&gt;y&lt;/var&gt; is omitted, then it is assumed to be the same as &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525849778914710d9d9fe7da20d841834f08677f" translate="yes" xml:space="preserve">
          <source>The rows of Hn are orthogonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9148728e8c50bf1d9d8f3edfaabc37556a5d8902" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;native-bit&lt;/code&gt;, but always print the most significant bits first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4b09aa41f7e45862fe7c7a1ecd85e6e4464d5d" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;native-hex&lt;/code&gt;, but always print the most significant byte first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511a3ad997e6fc604fd37262b9f169a988db23af" translate="yes" xml:space="preserve">
          <source>The same can also be accomplished with broadcasting (see &lt;a href=&quot;broadcasting#Broadcasting&quot;&gt;Broadcasting&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a40ed3b828932014e9e382cf7fa648ccd473c4" translate="yes" xml:space="preserve">
          <source>The same logic applies to functions with mixed arguments such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ae42faccf1756120db9fe3a84e8dbbe10c64ed" translate="yes" xml:space="preserve">
          <source>The same specification mechanism can be used wherever Octave expects a function name. For example &lt;code&gt;type @polynomial/disp&lt;/code&gt; will print the code of the &lt;code&gt;disp&lt;/code&gt; method of the polynomial class to the screen, and &lt;code&gt;dbstop @polynomial/disp&lt;/code&gt; will set a breakpoint at the first executable line of the &lt;code&gt;disp&lt;/code&gt; method of the polynomial class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234ccb9d6c58e5572f9d58854460af257322f608" translate="yes" xml:space="preserve">
          <source>The sample kurtosis is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78200593cd7b0728692f8ffdfb7d68e67ba2ed22" translate="yes" xml:space="preserve">
          <source>The sample skewness is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fd5da2d135781c550c4b871a5d6df3c864d46c" translate="yes" xml:space="preserve">
          <source>The scaled complementary error function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053971118b9f5c064526137c93886f76bbcb4c4b" translate="yes" xml:space="preserve">
          <source>The scaled format prints a scaling factor on the first line of output chosen such that the largest matrix element can be written with a single leading digit. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9553b56df15639edb2162b44e45cab12a8417116" translate="yes" xml:space="preserve">
          <source>The screen position of the GUI dialog can be set using the &lt;code&gt;&quot;Position&quot;&lt;/code&gt; key and a 2-element vector containing the pixel coordinates. Two or more files can be selected when setting the &lt;code&gt;&quot;MultiSelect&quot;&lt;/code&gt; key to &lt;code&gt;&quot;on&quot;&lt;/code&gt;. In that case &lt;var&gt;fname&lt;/var&gt; is a cell array containing the files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641abcd3cab938e6077557390b316756562cb543" translate="yes" xml:space="preserve">
          <source>The search begins at the point &lt;var&gt;x0&lt;/var&gt; and iterates using the Nelder &amp;amp; Mead Simplex algorithm (a derivative-free method). This algorithm is better-suited to functions which have discontinuities or for which a gradient-based search such as &lt;code&gt;fminunc&lt;/code&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f11980edc386000685d4b3a41cdd69a8ef2dc0b" translate="yes" xml:space="preserve">
          <source>The search can be limited to a particular set of objects and their descendants, by passing a handle or set of handles &lt;var&gt;hlist&lt;/var&gt; as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754818936d5bd3342444fbd4237e1979e2bdf3ec" translate="yes" xml:space="preserve">
          <source>The search rules for the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add51a0a7814dc713f69bafa11b3157992d83583" translate="yes" xml:space="preserve">
          <source>The second and third arguments to &lt;code&gt;daspk&lt;/code&gt; specify the initial condition of the states and their derivatives, and the fourth argument specifies a vector of output times at which the solution is desired, including the time corresponding to the initial condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dffa8d6e0abff2c154947d09613c5957b910f5" translate="yes" xml:space="preserve">
          <source>The second and third arguments to &lt;code&gt;dassl&lt;/code&gt; specify the initial condition of the states and their derivatives, and the fourth argument specifies a vector of output times at which the solution is desired, including the time corresponding to the initial condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155875e865b69e4f1446c1c1f55dfd040696b6b5" translate="yes" xml:space="preserve">
          <source>The second and third lines of the error message indicate that the error occurred within the function &lt;code&gt;f&lt;/code&gt;. If the function &lt;code&gt;f&lt;/code&gt; had been called from within another function, for example, &lt;code&gt;g&lt;/code&gt;, the list of errors would have ended with one more line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e283c13578c54dc0445f6f102ec1468eb9f879ad" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;A&lt;/var&gt; must be a string, character matrix, or a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38179745f8a25e3f0eadbfe4f4a09d8c4c95ab1" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;n&lt;/var&gt; is optional, and specifies how many 90-degree rotations are to be applied (the default value is 1). Negative values of &lt;var&gt;n&lt;/var&gt; rotate the matrix in a clockwise direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479a2b81a18e99e5d931a945227732123aa981d1" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;p&lt;/var&gt; is optional. If it is not specified, a value of 1 is assumed. This corresponds to removing a linear trend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc13aa74d02dcdab8764afc2ea15fd9e19aa41a" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;prop&lt;/var&gt; must be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2742256dfc62ebc1d094ee36efd0800707f2e767" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;x&lt;/var&gt; specifies the variable name to use for each term and defaults to the string &lt;code&gt;&quot;s&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf59d25b6d5b163d5a65d029de19c8e112cc3f0d" translate="yes" xml:space="preserve">
          <source>The second argument is a function handle pointing to the objective function &lt;var&gt;phi&lt;/var&gt;. The objective function must accept one vector argument and return a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0235ac07816881dd35954996efa440fc57ba5d" translate="yes" xml:space="preserve">
          <source>The second argument is optional, and specifies how many 90-degree rotations are to be applied (the default value is 1). Negative values of &lt;var&gt;k&lt;/var&gt; rotate the matrix in a clockwise direction. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2655a20e89f9e05b47843d501d89f92a862e4c6" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If it is positive, the vector is placed on the &lt;var&gt;k&lt;/var&gt;-th superdiagonal. If it is negative, it is placed on the &lt;var&gt;-k&lt;/var&gt;-th subdiagonal. The default value of &lt;var&gt;k&lt;/var&gt; is 0, and the vector is placed on the main diagonal. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab8cb691891bc85e1e4f6f7abeeffff2e0dcac1" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If supplied, &lt;code&gt;diff&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;,&amp;nbsp;&lt;var&gt;k&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;k&lt;/var&gt; is a non-negative integer, returns the &lt;var&gt;k&lt;/var&gt;-th differences. It is possible that &lt;var&gt;k&lt;/var&gt; is larger than the first non-singleton dimension of the matrix. In this case, &lt;code&gt;diff&lt;/code&gt; continues to take the differences along the next non-singleton dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c090faf576cc4ecaab2086411d22949620d56967" translate="yes" xml:space="preserve">
          <source>The second argument may also be a 2- or 3-element cell array of function handles. The first element should point to the objective function, the second should point to a function that computes the gradient of the objective function, and the third should point to a function that computes the Hessian of the objective function. If the gradient function is not supplied, the gradient is computed by finite differences. If the Hessian function is not supplied, a BFGS update formula is used to approximate the Hessian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe21ffcd40cfd9bcac88c0ff8f862dba9c600f24" translate="yes" xml:space="preserve">
          <source>The second argument specifies the initial state of the system &lt;em&gt;x_0&lt;/em&gt;. The third argument is a vector, &lt;var&gt;t&lt;/var&gt;, specifying the time values for which a solution is sought.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cf1d83c6c0016f539cf1736a52229e0a6fa717" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;var&gt;file&lt;/var&gt;, should be an absolute filename or a file name in the same directory as the function or script from which the autoload command was run. &lt;var&gt;file&lt;/var&gt;&lt;em&gt;should not&lt;/em&gt; depend on the Octave load path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15659ac4f9712dca2d24a123898bef78d41008c6" translate="yes" xml:space="preserve">
          <source>The second call form is meant to change and/or query the state of warnings. The first input argument must be a string &lt;var&gt;state&lt;/var&gt; (&lt;code&gt;&quot;on&quot;&lt;/code&gt;, &lt;code&gt;&quot;off&quot;&lt;/code&gt;, &lt;code&gt;&quot;error&quot;&lt;/code&gt;, or &lt;code&gt;&quot;query&quot;&lt;/code&gt;) followed by an optional warning identifier &lt;var&gt;id&lt;/var&gt; or &lt;code&gt;&quot;all&quot;&lt;/code&gt; (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2813d14f6c12552418c033542ae392bc63885f93" translate="yes" xml:space="preserve">
          <source>The second calling form performs the inverse operation and computes the reconstituted quotient of polynomials, &lt;var&gt;b&lt;/var&gt;(s)/&lt;var&gt;a&lt;/var&gt;(s), from the partial fraction expansion; represented by the residues, poles, and a direct polynomial specified by &lt;var&gt;r&lt;/var&gt;, &lt;var&gt;p&lt;/var&gt; and &lt;var&gt;k&lt;/var&gt;, and the pole multiplicity &lt;var&gt;e&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d763ef4de7e845e8cdc87e1690b451745bc7f2" translate="yes" xml:space="preserve">
          <source>The second form of an if statement looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6537920881a598488076ed6b6b34bb7c9544af" translate="yes" xml:space="preserve">
          <source>The second form of the &lt;code&gt;fopen&lt;/code&gt; function returns a vector of file ids corresponding to all the currently open files, excluding the &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a240b3f0724d806123073276392124a0186ae81" translate="yes" xml:space="preserve">
          <source>The second input &lt;code&gt;&quot;clear&quot;&lt;/code&gt; is optional. If supplied, the error state on the stream will be cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b536beaff821e811cba06357c4a29b90f6ec7f8b" translate="yes" xml:space="preserve">
          <source>The second input is a matrix of dimensions describing the size of the output. The dimensions can also be input as comma-separated arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d46b2c85a9c8a0a1223aa726f7c7f635501412a" translate="yes" xml:space="preserve">
          <source>The second output &lt;var&gt;position&lt;/var&gt; provides the location, in characters from the beginning of the file or string, where processing stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8892e9ab9c21d8a265ee97a8b69c9e7b5ca70085" translate="yes" xml:space="preserve">
          <source>The second output may be used by &lt;code&gt;polyval&lt;/code&gt; to calculate the statistical error limits of the predicted values. In particular, the standard deviation of &lt;var&gt;p&lt;/var&gt; coefficients is given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d45dd18f9743709bc11d33e45866c3ed9699639" translate="yes" xml:space="preserve">
          <source>The second result may be surprising, but simply comes from the fact, that &lt;code&gt;1.001&lt;/code&gt; cannot exactly be represented as &lt;code&gt;double&lt;/code&gt;, due to rounding. Note that unlike in Java, in Octave methods without arguments can be invoked with and without parentheses &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55113f5d8e20532e159d7c4d67a435e334fdeb6" translate="yes" xml:space="preserve">
          <source>The second rotation depends on the coordinate system &lt;var&gt;coorsys&lt;/var&gt; and direction &lt;var&gt;dir&lt;/var&gt; inputs. The default for &lt;var&gt;coorsys&lt;/var&gt; is &lt;code&gt;&quot;data&quot;&lt;/code&gt;. In this case, the camera is yawed left or right by rotating it &lt;var&gt;theta&lt;/var&gt; degrees around an axis specified by &lt;var&gt;dir&lt;/var&gt;. The default for &lt;var&gt;dir&lt;/var&gt; is &lt;code&gt;&quot;z&quot;&lt;/code&gt;, corresponding to the vector &lt;code&gt;[0, 0, 1]&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9175078bb63be368e1fa2df4b2ada2596a2e58" translate="yes" xml:space="preserve">
          <source>The second step is to call quad with the limits of integration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410d16971082f6bdf73654ba3885638c81cd3bbf" translate="yes" xml:space="preserve">
          <source>The second type are &lt;b&gt;handle classes&lt;/b&gt;. Those classes have to be derived from the abstract &lt;code&gt;handle&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d402a3b1188b49ef8068ce806a96839c89a3f38" translate="yes" xml:space="preserve">
          <source>The secondary prompt is printed when Octave is expecting additional input to complete a command. For example, if you are typing a &lt;code&gt;for&lt;/code&gt; loop that spans several lines, Octave will print the secondary prompt at the beginning of each line after the first. The default value of the secondary prompt string is &lt;code&gt;&quot;&amp;gt; &quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac9ccbbfdcc3cc9dec821f22f34628f01057aa8" translate="yes" xml:space="preserve">
          <source>The selection tree for how the linear equation is solve is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7896052d9060e48da9382397636d5b0cd8fc71" translate="yes" xml:space="preserve">
          <source>The selection tree for how the linear equation is solved or a matrix inverse is formed is given by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbf87cb8cfa42fc0c7d63c9d288e6c73e8b567d" translate="yes" xml:space="preserve">
          <source>The set &lt;var&gt;a&lt;/var&gt; must be a numerical matrix or a cell array of strings. The output will always be a cell array of either vectors or strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215bdf8ec42e254af2fcfdf4a30cb1f2b6c5b48a" translate="yes" xml:space="preserve">
          <source>The set of differential equations to solve is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3171cf2aa9ea3781ac4a278dfa3848885a4cae0e" translate="yes" xml:space="preserve">
          <source>The set of initial states and derivatives are not strictly required to be consistent. If they are not consistent, you must use the &lt;code&gt;daspk_options&lt;/code&gt; function to provide additional information so that &lt;code&gt;daspk&lt;/code&gt; can compute a consistent starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b10454bd86d82a3111d5cf07750bde6293c0dd9" translate="yes" xml:space="preserve">
          <source>The set of initial states and derivatives are not strictly required to be consistent. In practice, however, &lt;small&gt;DASSL&lt;/small&gt; is not very good at determining a consistent set for you, so it is best if you ensure that the initial values result in the function evaluating to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5c94b3fad15f4e43b484feb91c1991aa9fd093" translate="yes" xml:space="preserve">
          <source>The seventh argument &lt;var&gt;maxiter&lt;/var&gt; specifies the maximum number of iterations. The default value is 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ed098bffc8bac14674214935d1a8508fadf9d3" translate="yes" xml:space="preserve">
          <source>The shell used for executing commands varies with operating system and is typically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c42ec029a8f9418913d1af0beef98e35d8716ee" translate="yes" xml:space="preserve">
          <source>The shrink factor &lt;var&gt;sf&lt;/var&gt; is a positive number specifying the percentage of the original area the new face will occupy. If no factor is given the default is 0.3 (a reduction to 30% of the original size). A factor greater than 1.0 will result in the expansion of faces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6a8967ab7847f06f78977cd0ba8bfe6c6eca72" translate="yes" xml:space="preserve">
          <source>The signal &lt;var&gt;y&lt;/var&gt; can be a vector or a two-dimensional array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc092b01a7afc409ed9d4eeb04a6d2a4697fec71" translate="yes" xml:space="preserve">
          <source>The simplest finite element models will divide Omega into simplexes (triangles in 2D, pyramids in 3D). We take as a 3-D example a cylindrical liquid filled tank with a small non-conductive ball from the EIDORS project&lt;a href=&quot;#FOOT11&quot; name=&quot;DOCF11&quot;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;. This is model is designed to reflect an application of electrical impedance tomography, where current patterns are applied to such a tank in order to image the internal conductivity distribution. In order to describe the FEM geometry, we have a matrix of vertices &lt;code&gt;nodes&lt;/code&gt; and simplices &lt;code&gt;elems&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0febb0f4f85ec86701d4220743288843969e048a" translate="yes" xml:space="preserve">
          <source>The simplest form for narrowing the results is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15a7808b52e73ad7e22947811907d6ee2b7f4ad" translate="yes" xml:space="preserve">
          <source>The simplest form of a numeric constant, a scalar, is a single number. Note that by default numeric constants are represented within Octave by IEEE 754 double precision (binary64) floating-point format (complex constants are stored as pairs of binary64 values). It is, however, possible to represent real integers as described in &lt;a href=&quot;integer-data-types#Integer-Data-Types&quot;&gt;Integer Data Types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4507a8cdc9e70852c43c488dae48dea7465ff20" translate="yes" xml:space="preserve">
          <source>The simplest way to process data in a structure is within a &lt;code&gt;for&lt;/code&gt; loop (see &lt;a href=&quot;looping-over-structure-elements#Looping-Over-Structure-Elements&quot;&gt;Looping Over Structure Elements&lt;/a&gt;). A similar effect can be achieved with the &lt;code&gt;structfun&lt;/code&gt; function, where a user defined function is applied to each field of the structure. See &lt;a href=&quot;function-application#XREFstructfun&quot;&gt;structfun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2591fbb4686bdb8ec0834e6f219002a3b05e5c" translate="yes" xml:space="preserve">
          <source>The singular value decomposition is defined by the relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eeb18a7e9e4a1e2889dbfce0d717b3a534583f7" translate="yes" xml:space="preserve">
          <source>The singular values are calculated using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b156178fe5b95b2c805a8ab64654a47330e9ec60" translate="yes" xml:space="preserve">
          <source>The sixth argument is optional, and may be used to specify a set of times that the DAE solver should not integrate past. It is useful for avoiding difficulties with singularities and points where there is a discontinuity in the derivative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76d870609a0d029619998a5b875c795edd2a454" translate="yes" xml:space="preserve">
          <source>The size &lt;var&gt;n&lt;/var&gt; must be of the form &lt;em&gt;2^k * p&lt;/em&gt; in which p is one of 1, 12, 20 or 28. The returned matrix is normalized, meaning &lt;code&gt;Hn(:,1)&amp;nbsp;==&amp;nbsp;1&lt;/code&gt; and &lt;code&gt;Hn(1,:)&amp;nbsp;==&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e6edc9ae5beddceaa1816e4a6809ab6b39ee47" translate="yes" xml:space="preserve">
          <source>The size and class of the output depends on the format of the image. A color image is returned as an MxNx3 matrix. Grayscale and black-and-white images are of size MxN. Multipage images will have an additional 4th dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671ab54a73f8d7fe2920467e3d06eb5a3b818074" translate="yes" xml:space="preserve">
          <source>The size data for the points of the plot. Each point can its own size or a unique size can be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23153f0e1a277042927fe8515826b462c0fd2926" translate="yes" xml:space="preserve">
          <source>The size of mathematical problems that can be treated at any particular time is generally limited by the available computing resources. Both, the speed of the computer and its available memory place limitation on the problem size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfa3761d2e0f20e5cf7739e6b55563d94454b96" translate="yes" xml:space="preserve">
          <source>The size of the marker. (Default: 6)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d1092c7974f598f86c582f369483a518ccbe7c" translate="yes" xml:space="preserve">
          <source>The size of the markers is determined by &lt;var&gt;s&lt;/var&gt;, which can be a scalar or a vector of the same length as &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;. If &lt;var&gt;s&lt;/var&gt; is not given, or is an empty matrix, then a default value of 36 square points is used (The marker size itself is &lt;code&gt;sqrt (s)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6800af0524a4c99a40e4e8385e6da6280e49e086" translate="yes" xml:space="preserve">
          <source>The size of the markers is determined by &lt;var&gt;s&lt;/var&gt;, which can be a scalar or a vector of the same length as &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, and &lt;var&gt;z&lt;/var&gt;. If &lt;var&gt;s&lt;/var&gt; is not given, or is an empty matrix, then a default value of 8 points is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474019310e49f415810c2570a3e2b6fbc5bc83e7" translate="yes" xml:space="preserve">
          <source>The size of the matrix is &lt;var&gt;m&lt;/var&gt;x&lt;var&gt;n&lt;/var&gt; with a density of values &lt;var&gt;d&lt;/var&gt;. &lt;var&gt;d&lt;/var&gt; must be between 0 and 1. Values will be normally distributed with a mean of 0 and a variance of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e4799f7dca2f7420f0c3ce8a230d076620e266" translate="yes" xml:space="preserve">
          <source>The size of the matrix is &lt;var&gt;m&lt;/var&gt;x&lt;var&gt;n&lt;/var&gt; with a density of values &lt;var&gt;d&lt;/var&gt;. &lt;var&gt;d&lt;/var&gt; must be between 0 and 1. Values will be uniformly distributed on the interval (0, 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d048238550b0f3885407f1849e58eb73e788bdc" translate="yes" xml:space="preserve">
          <source>The size of the matrix will be &lt;var&gt;n&lt;/var&gt;x&lt;var&gt;n&lt;/var&gt;, with a density of values given by &lt;var&gt;d&lt;/var&gt;. &lt;var&gt;d&lt;/var&gt; must be between 0 and 1 inclusive. Values will be normally distributed with a mean of zero and a variance of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac3e236e5181bff0ae215fd036e9e46b1c68812" translate="yes" xml:space="preserve">
          <source>The size of the matrix will be determined by the subscripts themselves. However, if &lt;var&gt;sz&lt;/var&gt; is defined it determines the matrix size. The length of &lt;var&gt;sz&lt;/var&gt; must correspond to the number of columns in &lt;var&gt;subs&lt;/var&gt;. An exception is if &lt;var&gt;subs&lt;/var&gt; has only one column, in which case &lt;var&gt;sz&lt;/var&gt; may be the dimensions of a vector and the subscripts of &lt;var&gt;subs&lt;/var&gt; are taken as the indices into it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3de4204d6016c704b7f3fd062baefa96654ea40" translate="yes" xml:space="preserve">
          <source>The size of the result is determined by the optional &lt;var&gt;shape&lt;/var&gt; argument which takes the following values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a5e842aefa5707e1cfeafe82f22b08baac9c4d" translate="yes" xml:space="preserve">
          <source>The size of the returned object in a specific dimension is equal to the number of elements in the corresponding component of the index expression. When all components are scalars, the result is a single output value. However, if any component is a vector or range then the returned values are the Cartesian product of the indices in the respective dimensions. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8176cd9c4e473ae78dff8886903eec2dc7c168" translate="yes" xml:space="preserve">
          <source>The slices of the returned array that have no subscripts associated with them are set to zero. Defining &lt;var&gt;fillval&lt;/var&gt; to some other value allows these values to be defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f0d25cfd4c3be31412047a2ac14479b438a19b" translate="yes" xml:space="preserve">
          <source>The slope of the execution time graph shows the approximate power of the asymptotic running time &lt;em&gt;O(n^p)&lt;/em&gt;. This power is plotted for the region over which it is approximated (the latter half of the graph). The estimated power is not very accurate, but should be sufficient to determine the general order of an algorithm. It should indicate if, for example, the implementation is unexpectedly &lt;em&gt;O(n^2)&lt;/em&gt; rather than &lt;em&gt;O(n)&lt;/em&gt; because it extends a vector each time through the loop rather than pre-allocating storage. In the current version of Octave, the following is not the expected &lt;em&gt;O(n)&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef3e1b7e33ecf324aa3bdf17e8207d89ccbf8f1" translate="yes" xml:space="preserve">
          <source>The solution in Octave is found in just three steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5d858b0e013205540dccfe7d93674f505ad456" translate="yes" xml:space="preserve">
          <source>The solution is computed using standard &lt;small&gt;LAPACK&lt;/small&gt; subroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932b949bd595e34b0d7603ec8db3a5e592374166" translate="yes" xml:space="preserve">
          <source>The solution is returned in the matrices &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;xdot&lt;/var&gt;, with each row in the result matrices corresponding to one of the elements in the vector &lt;var&gt;t&lt;/var&gt;. The first element of &lt;var&gt;t&lt;/var&gt; should be &lt;em&gt;t_0&lt;/em&gt; and correspond to the initial state of the system &lt;var&gt;x_0&lt;/var&gt; and its derivative &lt;var&gt;xdot_0&lt;/var&gt;, so that the first row of the output &lt;var&gt;x&lt;/var&gt; is &lt;var&gt;x_0&lt;/var&gt; and the first row of the output &lt;var&gt;xdot&lt;/var&gt; is &lt;var&gt;xdot_0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a10611b73bfcf16fb3bc57b215beacb0a54ed1" translate="yes" xml:space="preserve">
          <source>The solution is returned in the matrices &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;xdot&lt;/var&gt;, with each row in the result matrices corresponding to one of the elements in the vector &lt;var&gt;t_out&lt;/var&gt;. The first element of &lt;var&gt;t&lt;/var&gt; should be &lt;em&gt;t_0&lt;/em&gt; and correspond to the initial state of the system &lt;var&gt;x_0&lt;/var&gt; and its derivative &lt;var&gt;xdot_0&lt;/var&gt;, so that the first row of the output &lt;var&gt;x&lt;/var&gt; is &lt;var&gt;x_0&lt;/var&gt; and the first row of the output &lt;var&gt;xdot&lt;/var&gt; is &lt;var&gt;xdot_0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3a133b830d49afc75792ef59cfeaa43324c0b9" translate="yes" xml:space="preserve">
          <source>The solution is returned in the matrix &lt;var&gt;x&lt;/var&gt;, with each row corresponding to an element of the vector &lt;var&gt;t&lt;/var&gt;. The first element of &lt;var&gt;t&lt;/var&gt; should be &lt;em&gt;t_0&lt;/em&gt; and should correspond to the initial state of the system &lt;var&gt;x_0&lt;/var&gt;, so that the first row of the output is &lt;var&gt;x_0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b21f19c7539c40673172aa9815088d0314fa5d2" translate="yes" xml:space="preserve">
          <source>The solution matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f9727b9ed6c6849aad4ceb533e7767a35de914" translate="yes" xml:space="preserve">
          <source>The space savings are significant as demonstrated by the following code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97413def997e44597d91e8565d0dd6e48c0524c5" translate="yes" xml:space="preserve">
          <source>The spacing between evaluation points may be defined by &lt;var&gt;h&lt;/var&gt;, which is a scalar defining the equidistant spacing in all dimensions. Alternatively, the spacing in each dimension may be defined separately by &lt;var&gt;dx&lt;/var&gt;, &lt;var&gt;dy&lt;/var&gt;, etc. A scalar spacing argument defines equidistant spacing, whereas a vector argument can be used to specify variable spacing. The length of the spacing vectors must match the respective dimension of &lt;var&gt;M&lt;/var&gt;. The default spacing value is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3762eba021cccb5e3ac5da429c8ca7dc712b769" translate="yes" xml:space="preserve">
          <source>The sparse classes will not be entirely described in this section, due to their similarity with the existing &lt;code&gt;Array&lt;/code&gt; classes. However, there are a few differences due the nature of sparse objects, and these will be described. First, although it is fundamentally possible to have N-dimensional sparse objects, the Octave sparse classes do not allow them at this time; All instances of the sparse classes &lt;strong&gt;must&lt;/strong&gt; be 2-dimensional. This means that &lt;code&gt;SparseMatrix&lt;/code&gt; is actually more similar to Octave&amp;rsquo;s &lt;code&gt;Matrix&lt;/code&gt; class than it is to the &lt;code&gt;NDArray&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460f7cada47c1fb27b247ec92bdb75d9d1b29477" translate="yes" xml:space="preserve">
          <source>The sparse option can be used as an alternative to the &lt;code&gt;sparse&lt;/code&gt; constructor (see &lt;a href=&quot;creating-sparse-matrices#XREFsparse&quot;&gt;sparse&lt;/a&gt;). Thus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b135faf424d0a2bebf5947ba3bf3c17ff94a2b4e" translate="yes" xml:space="preserve">
          <source>The sparsity preserving permutation is generally returned as a matrix. However, given the optional flag &lt;code&gt;&quot;vector&quot;&lt;/code&gt;, &lt;var&gt;Q&lt;/var&gt; will be returned as a vector such that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdc7b1d44f942fa56db8771a6d4f1f889a8d0c4" translate="yes" xml:space="preserve">
          <source>The special filename &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f838ed865753e177e99460701f3356b2249ac78b" translate="yes" xml:space="preserve">
          <source>The special keyword &lt;code&gt;&quot;all&quot;&lt;/code&gt; will clear all breakpoints from all files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7469fc2d069b3bda33a29e2a1cc7ad7f0c306fc" translate="yes" xml:space="preserve">
          <source>The specific archive filetype is inferred from the extension of the file. The &lt;var&gt;filetype&lt;/var&gt; may also be specified directly using a string which corresponds to a known extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92cd1f49aa77f280e9d1a17c1162dbcaf133a84" translate="yes" xml:space="preserve">
          <source>The specific behavior of the backend toolkit may be modified using the following utility functions. Note: Not all functions apply to every graphics toolkit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841f5058725e44e021e1a94e304cb5908a2f79e5" translate="yes" xml:space="preserve">
          <source>The specific flags and modifiers that are permitted and their interpretation vary depending on the particular conversion. They&amp;rsquo;re all described in more detail in the following sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44def6a16a0b73e2b84f4e98df68db044cc55c8a" translate="yes" xml:space="preserve">
          <source>The specific package name may be &lt;code&gt;octave3.2&lt;/code&gt; or &lt;code&gt;octave3.4&lt;/code&gt;. The set of required tools and external dependencies does not change frequently, so it is not important that the version match exactly, but you should use the most recent one available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8b1e5be94b12cd00a286e4f60916ee1d565d2e" translate="yes" xml:space="preserve">
          <source>The speed of lookup is greatly enhanced by having a cached documentation file. See &lt;code&gt;doc_cache_create&lt;/code&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa37e6aac814cc58268c417449d3ee5881b551c" translate="yes" xml:space="preserve">
          <source>The speed of the comet may be controlled by &lt;var&gt;p&lt;/var&gt;, which represents the time each point is displayed before moving to the next one. The default for &lt;var&gt;p&lt;/var&gt; is 0.1 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25488c4cfb4e11122f088b1c054f1e71c5fdca04" translate="yes" xml:space="preserve">
          <source>The speed with which an iterative solver converges to a solution can be accelerated with the use of a pre-conditioning matrix &lt;var&gt;M&lt;/var&gt;. In this case the linear equation &lt;code&gt;&lt;var&gt;M&lt;/var&gt;^-1 * &lt;var&gt;x&lt;/var&gt; = &lt;var&gt;M&lt;/var&gt;^-1 *
&lt;var&gt;A&lt;/var&gt; \ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; is solved instead. Typical pre-conditioning matrices are partial factorizations of the original matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7a1a8b96d5605431296e7653477c83ec247ec0" translate="yes" xml:space="preserve">
          <source>The splines are constructed of polynomials with degree &lt;var&gt;order&lt;/var&gt;. The default is a cubic, &lt;var&gt;order&lt;/var&gt;=3. A spline with P pieces has P+&lt;var&gt;order&lt;/var&gt; degrees of freedom. With periodic boundary conditions the degrees of freedom are reduced to P.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd50086dcc49ee5fe72fc1561fcb1dc18411934" translate="yes" xml:space="preserve">
          <source>The squared 2-norm of the residual: &lt;code&gt;norm (&lt;var&gt;c&lt;/var&gt;*&lt;var&gt;x&lt;/var&gt;-&lt;var&gt;d&lt;/var&gt;)^2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e6bc75737854de20d6aeafbf67731007ad3213" translate="yes" xml:space="preserve">
          <source>The standard Cholesky factorization of this matrix can be obtained by the same command that would be used for a full matrix. This can be visualized with the command &lt;code&gt;r = chol (A); spy (r);&lt;/code&gt;. See &lt;a href=&quot;#fig_003asimplechol&quot;&gt;Figure 22.4&lt;/a&gt;. The original matrix had 598 nonzero terms, while this Cholesky factorization has 10200, with only half of the symmetric matrix being stored. This is a significant level of fill in, and although not an issue for such a small test case, can represents a large overhead in working with other sparse matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9748653f7b74de79feb2281f6b169636b173147c" translate="yes" xml:space="preserve">
          <source>The standard behavior of integer division such as &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ./ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; is to round the result to the nearest integer. This is not always the desired behavior and &lt;code&gt;idivide&lt;/code&gt; permits integer element-by-element division to be performed with different treatment for the fractional part of the division as determined by the &lt;var&gt;op&lt;/var&gt; flag. &lt;var&gt;op&lt;/var&gt; is a string with one of the values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385e155cfede60174a5b67d5e5c114e55f6ebab7" translate="yes" xml:space="preserve">
          <source>The standard built-in data types are real and complex scalars and matrices, ranges, character strings, a data structure type, and cell arrays. Additional built-in data types may be added in future versions. If you need a specialized data type that is not currently provided as a built-in type, you are encouraged to write your own user-defined data type and contribute it for distribution in a future release of Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b07b5851de1351c163dbb02919df75ce66ab114" translate="yes" xml:space="preserve">
          <source>The standard deviation is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c672c0b2c7a074608aa0f0a24e9b14c18dda453e" translate="yes" xml:space="preserve">
          <source>The start indices of each matching substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c05a7f21153c70288c7051fa3622558a5624da" translate="yes" xml:space="preserve">
          <source>The starting interval is specified by &lt;var&gt;a&lt;/var&gt; (left boundary) and &lt;var&gt;b&lt;/var&gt; (right boundary). The endpoints must be finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ab1a5c2c4c18d0233560e544f9e2c8b792aa87" translate="yes" xml:space="preserve">
          <source>The starting vector for the algorithm. An initial vector close to the final vector will speed up convergence. The default is for &lt;small&gt;ARPACK&lt;/small&gt; to randomly generate a starting vector. If specified, &lt;code&gt;v0&lt;/code&gt; must be an &lt;var&gt;n&lt;/var&gt;-by-1 vector where &lt;code&gt;&lt;var&gt;n&lt;/var&gt; = rows (&lt;var&gt;A&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebda8f6d91f4fa4dca08358cb2e69be6296282d9" translate="yes" xml:space="preserve">
          <source>The state of each generator is independent and calls to different generators can be interleaved without affecting the final result. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180c58904bf24f2f70ec2b48912465a038047417" translate="yes" xml:space="preserve">
          <source>The state or seed of the generator can be reset to a new random value using the &lt;code&gt;&quot;reset&quot;&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0039bd896ede0d04dad291cba10d4604bc6d2bb9" translate="yes" xml:space="preserve">
          <source>The stem and leaf plot and associated displays are described in: Chapter 3,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3f57fe8a3e7f3c95353fa42e552634036d082b" translate="yes" xml:space="preserve">
          <source>The stem-and-leaf plot shows on each line the stem value followed by the string made up of the leaf digits. If the &lt;var&gt;stem_sz&lt;/var&gt; is not 1 the successive leaf values are separated by &quot;,&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d996a2d2487f1189a83f40308d69715b6f675e" translate="yes" xml:space="preserve">
          <source>The step size to be attempted on the first step (default is determined automatically).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efe29c450f32f44e7654c253a4d4added55d556" translate="yes" xml:space="preserve">
          <source>The stepsize has become too small, i.e., delta &lt;var&gt;x&lt;/var&gt;, is less than &lt;code&gt;&lt;var&gt;tol&lt;/var&gt; * norm (x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613007c639b9b244e95c6567ff0a5ddeef7aeb90" translate="yes" xml:space="preserve">
          <source>The storage technique used within Octave is the compressed column format. It is similar to the Yale format. &lt;a href=&quot;#FOOT9&quot; name=&quot;DOCF9&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; In this format the position of each element in a row and the data are stored as previously. However, if we assume that all elements in the same column are stored adjacent in the computers memory, then we only need to store information on the number of nonzero elements in each column, rather than their positions. Thus assuming that the matrix has more nonzero elements than there are columns in the matrix, we win in terms of the amount of memory used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a2a3dd97990a367b9a1de874b47134c2450a04" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;default&lt;/var&gt; identifies the default button, which is activated by pressing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5248ba4f51e7531167c749d5101e5673948e10a6" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;format&lt;/var&gt; describes how the words in &lt;var&gt;str&lt;/var&gt; should be parsed. As in &lt;var&gt;fscanf&lt;/var&gt;, any (non-whitespace) text in the format that is not one of these specifiers is considered a literal. If there is a literal between two format specifiers then that same literal must appear in the input stream between the matching words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e38176a4c9187d64267fd5e6a1ae81f98d5e29" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;format&lt;/var&gt; describes how the words in &lt;var&gt;str&lt;/var&gt; should be parsed. It may contain any combination of the following specifiers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c4d50927a4c1e0eb3e01860621ad9d43a5c845" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;str&lt;/var&gt; is split into words that are repeatedly matched to the specifiers in &lt;var&gt;format&lt;/var&gt;. The first word is matched to the first specifier, the second to the second specifier and so forth. If there are more words than specifiers, the process is repeated until all words have been processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26211c7aef765a4f6282cc61e354cdbc002fafb2" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;str&lt;/var&gt; or file associated with &lt;var&gt;fid&lt;/var&gt; is read from and parsed according to &lt;var&gt;format&lt;/var&gt;. The function is an extension of &lt;code&gt;strread&lt;/code&gt; and &lt;code&gt;textread&lt;/code&gt;. Differences include: the ability to read from either a file or a string, additional options, and additional format specifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b29782032976e12ef9d5f83c09e2becfb97f87c" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;try&lt;/var&gt; is evaluated in the current context, so any results remain available after &lt;code&gt;eval&lt;/code&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343c1232b78debcab2338c4d6647c5dbe91130b2" translate="yes" xml:space="preserve">
          <source>The string can be converted back into a matrix as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df59c5fd4c30ebb918dada79f2e419e18d29cb98" translate="yes" xml:space="preserve">
          <source>The string input argument &lt;code&gt;&quot;verbose&quot;&lt;/code&gt; is supported for &lt;small&gt;MATLAB&lt;/small&gt; compatibility, but has no effect.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
