<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="postgresql">
    <body>
      <group id="postgresql">
        <trans-unit id="d40239447299cc68d21a1afee2d98f0ba2cb5a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_end_command&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b272a3bee85d498332cea30c5acfca1db15a9b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_min_apply_delay&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8a002b70db3c047922932180f231236b472542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target&lt;/code&gt;&lt;code&gt;= 'immediate'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac2d0e5ee7341d91371cce5e1d68bdf2df104f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_action&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb079af39a456bb174bebdf738e9d0ac96b8559" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_inclusive&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f114a1cef69222ca99cd00ca1a7f4d2113ce632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_lsn&lt;/code&gt; (&lt;code&gt;pg_lsn&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e56c3b3e355ec8f3199043e2dfd0f62f92ebd71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c3e3b0ed0d30164d99967047c5c5f5013968da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_time&lt;/code&gt; (&lt;code&gt;timestamp&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383f035367ac1218690a6e4e46933b5629c3bb5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_timeline&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca616865fca63d8374f45f71e291c032a567cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_target_xid&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d9f6faba3d377d657c6b0d6c85b34076fa8688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reformat_dat_file.pl&lt;/code&gt; preserves blank lines and comment lines as-is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65d436dca9c3d770748b2f7d5baf7198660340e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refresh&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8018d933905395ba1f1864b0454d5d42903cca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refresh_option&lt;/code&gt; specifies additional options for the refresh operation. The supported options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ced88acbb04c8989deb928ad0deb5f0c4679e52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register&lt;/code&gt; mode registers the PostgreSQL server as a system service on Microsoft Windows. The &lt;code&gt;-S&lt;/code&gt; option allows selection of service start type, either &amp;ldquo;auto&amp;rdquo; (start service automatically on system startup) or &amp;ldquo;demand&amp;rdquo; (start service on demand).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa240ee703e5375a02e986d829cdfe77a84e1ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register_label_provider&lt;/code&gt; is not an SQL function; it can only be called from C code loaded into the backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a59ea967d957b4c25e981a68ace2cac2bee1ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reindexdb&lt;/code&gt; [&lt;code&gt;connection-option&lt;/code&gt;...] [&lt;code&gt;option&lt;/code&gt;...] &lt;code&gt;--all&lt;/code&gt; | &lt;code&gt;-a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642c6c6f4a5b1ddafb3759ce64e9933d593c8478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reindexdb&lt;/code&gt; [&lt;code&gt;connection-option&lt;/code&gt;...] [&lt;code&gt;option&lt;/code&gt;...] &lt;code&gt;--system&lt;/code&gt; | &lt;code&gt;-s&lt;/code&gt; [&lt;code&gt;dbname&lt;/code&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa7e2f196d5c9c7842274adf485e422561e9d44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reindexdb&lt;/code&gt; [&lt;code&gt;connection-option&lt;/code&gt;...] [&lt;code&gt;option&lt;/code&gt;...] [ &lt;code&gt;--schema&lt;/code&gt; | &lt;code&gt;-S&lt;/code&gt;&lt;code&gt;schema&lt;/code&gt; ] ... [ &lt;code&gt;--table&lt;/code&gt; | &lt;code&gt;-t&lt;/code&gt;&lt;code&gt;table&lt;/code&gt; ] ... [ &lt;code&gt;--index&lt;/code&gt; | &lt;code&gt;-i&lt;/code&gt;&lt;code&gt;index&lt;/code&gt; ] ... [&lt;code&gt;dbname&lt;/code&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf585146331a32e010c0f58151931a2499b26b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reload&lt;/code&gt; mode simply sends the &lt;code&gt;postgres&lt;/code&gt; server process a SIGHUP signal, causing it to reread its configuration files (&lt;code&gt;postgresql.conf&lt;/code&gt;, &lt;code&gt;pg_hba.conf&lt;/code&gt;, etc.). This allows changing configuration-file options that do not require a full server restart to take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f020a89070da5b1a1d135451d842b9b1bc217495" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart&lt;/code&gt; mode effectively executes a stop followed by a start. This allows changing the &lt;code&gt;postgres&lt;/code&gt; command-line options, or changing configuration-file options that cannot be changed without restarting the server. If relative paths were used on the command line during server start, &lt;code&gt;restart&lt;/code&gt; might fail unless pg_ctl is executed in the same current directory as it was during server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc8f9a3d48cdddd64d3ea2520e250e4ce0d1f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart_after_crash&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca734f189d95de465ff8daa9086f7b91f842c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restore_command&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d38217a16ec6a77fa78157cee455d6aa21d214f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rngsubopc&lt;/code&gt; (plus &lt;code&gt;rngcollation&lt;/code&gt;, if the element type is collatable) determines the sort ordering used by the range type. &lt;code&gt;rngcanonical&lt;/code&gt; is used when the element type is discrete. &lt;code&gt;rngsubdiff&lt;/code&gt; is optional but should be supplied to improve performance of GiST indexes on the range type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870594e047e50244eb4c35e33979c62ea127af3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;row_security&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7cdbc498ad6d8e6ac8ce70dc2eb61557c178b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;row_security_active&lt;/code&gt; checks whether row level security is active for the specified table in the context of the &lt;code&gt;current_user&lt;/code&gt; and environment. The table can be specified by name or by OID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bdd7b1fa76e91b4cf60f7ad8be198bbcc97421" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; is the base name of the file containing the list of synonyms. This file must be stored in &lt;code&gt;$SHAREDIR/tsearch_data/&lt;/code&gt; (where &lt;code&gt;$SHAREDIR&lt;/code&gt; means the PostgreSQL installation's shared-data directory). Its name must end in &lt;code&gt;.rules&lt;/code&gt; (which is not to be included in the &lt;code&gt;rules&lt;/code&gt; parameter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c405e6d8a92db1904493995d6a7d821e305db1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; = &lt;code&gt;short&lt;/code&gt; alignment (2 bytes on most machines).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56412373c4f63b932dc482d3a5d1348fdb197c67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; formats the argument value as a simple string. A null value is treated as an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62589df2be0892f4b9ad198c3905874bf21593e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt;&lt;code&gt;stream&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt;&lt;code&gt;stream&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f0d3adfad935160a6bc43d586dc2d98e90a49aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; must be one of &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, typically the last. (The default is &lt;code&gt;base&lt;/code&gt;, which is normally not useful in this application.) &lt;code&gt;attribute&lt;/code&gt; can nominate a single attribute, in which case it is used as a value for &lt;code&gt;ldapsearchattribute&lt;/code&gt;. If &lt;code&gt;attribute&lt;/code&gt; is empty then &lt;code&gt;filter&lt;/code&gt; can be used as a value for &lt;code&gt;ldapsearchfilter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0909784dc065c73b7b0ac05858da8373f4371bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;searchMode&lt;/code&gt; is an output argument that allows &lt;code&gt;extractQuery&lt;/code&gt; to specify details about how the search will be done. If &lt;code&gt;*searchMode&lt;/code&gt; is set to &lt;code&gt;GIN_SEARCH_MODE_DEFAULT&lt;/code&gt; (which is the value it is initialized to before call), only items that match at least one of the returned keys are considered candidate matches. If &lt;code&gt;*searchMode&lt;/code&gt; is set to &lt;code&gt;GIN_SEARCH_MODE_INCLUDE_EMPTY&lt;/code&gt;, then in addition to items containing at least one matching key, items that contain no keys at all are considered candidate matches. (This mode is useful for implementing is-subset-of operators, for example.) If &lt;code&gt;*searchMode&lt;/code&gt; is set to &lt;code&gt;GIN_SEARCH_MODE_ALL&lt;/code&gt;, then all non-null items in the index are considered candidate matches, whether they match any of the returned keys or not. (This mode is much slower than the other two choices, since it requires scanning essentially the entire index, but it may be necessary to implement corner cases correctly. An operator that needs this mode in most cases is probably not a good candidate for a GIN operator class.) The symbols to use for setting this mode are defined in &lt;code&gt;access/gin.h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfbff979638c73a7963a1bf408cfa3fcd36bc02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search_path&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8fc63effd8bc4a194eb9a74b592ee30f17d464" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;security_barrier&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24180f9382e52b178688d3b28266c0ea33ef51b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seg&lt;/code&gt; values are stored internally as pairs of 32-bit floating point numbers. This means that numbers with more than 7 significant digits will be truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0b4e2941334c764662922273f05d2629494fd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;segment_size&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961dfee516020935f203e94d07c5505b3ab896f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select_statement&lt;/code&gt; is any &lt;code&gt;SELECT&lt;/code&gt; statement without an &lt;code&gt;ORDER BY&lt;/code&gt;, &lt;code&gt;LIMIT&lt;/code&gt;, &lt;code&gt;FOR NO KEY UPDATE&lt;/code&gt;, &lt;code&gt;FOR UPDATE&lt;/code&gt;, &lt;code&gt;FOR SHARE&lt;/code&gt;, or &lt;code&gt;FOR KEY SHARE&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b0ab024bf62cabc7104e665ac0f199cee62670" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select_statement&lt;/code&gt; is any &lt;code&gt;SELECT&lt;/code&gt; statement without an &lt;code&gt;ORDER BY&lt;/code&gt;, &lt;code&gt;LIMIT&lt;/code&gt;, &lt;code&gt;FOR NO KEY UPDATE&lt;/code&gt;, &lt;code&gt;FOR UPDATE&lt;/code&gt;, &lt;code&gt;FOR SHARE&lt;/code&gt;, or &lt;code&gt;FOR KEY SHARE&lt;/code&gt; clause. (&lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the &lt;code&gt;UNION&lt;/code&gt;, not to its right-hand input expression.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c097cf2885b76dc24937715c79bf505d8b6ed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepgsql.debug_audit&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d24c9b39c8428d017a6ba2308479280a4a25b1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepgsql.permissive&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9820d9af69aa0e106470b711c63220d5b9125b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepgsql&lt;/code&gt; can only be used on Linux 2.6.28 or higher with SELinux enabled. It is not available on any other platform. You will also need libselinux 2.1.10 or higher and selinux-policy 3.9.13 or higher (although some distributions may backport the necessary rules into older policy versions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2140408b7a2b1d5ee68278f50d91e690419e6d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepgsql&lt;/code&gt; does not try to hide the existence of a certain object, even if the user is not allowed to reference it. For example, we can infer the existence of an invisible object as a result of primary key conflicts, foreign key violations, and so on, even if we cannot obtain the contents of the object. The existence of a top secret table cannot be hidden; we only hope to conceal its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0574500afc4e699a2bccf12927604f70e225137e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepgsql&lt;/code&gt; is a loadable module that supports label-based mandatory access control (MAC) based on SELinux security policy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eadc0ae444e93594c61542ea2c10bbf20766685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq_page_cost&lt;/code&gt; (&lt;code&gt;floating point&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe84989617361de4475c6c354e53a1c77e26931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server.crt&lt;/code&gt; and &lt;code&gt;intermediate.crt&lt;/code&gt; should be concatenated into a certificate file bundle and stored on the server. &lt;code&gt;server.key&lt;/code&gt; should also be stored on the server. &lt;code&gt;root.crt&lt;/code&gt; should be stored on the client so the client can verify that the server's leaf certificate was signed by a chain of certificates linked to its trusted root certificate. &lt;code&gt;root.key&lt;/code&gt; and &lt;code&gt;intermediate.key&lt;/code&gt; should be stored offline for use in creating future certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c674acb3bb94647100d2011d25f4fa7461acffc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server.crt&lt;/code&gt; and &lt;code&gt;server.key&lt;/code&gt; should be stored on the server, and &lt;code&gt;root.crt&lt;/code&gt; should be stored on the client so the client can verify that the server's leaf certificate was signed by its trusted root certificate. &lt;code&gt;root.key&lt;/code&gt; should be stored offline for use in creating future certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f098b649f26ca654b97d44eb2f228ef1268269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server_encoding&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88491e0ba77571f2f2807564e724764f83b1c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server_version&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbf66eb365ec245ed873f68cb916bebcd979106" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server_version_num&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71528871aff52cebec79f022d47e4a84f3dc89aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session_preload_libraries&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa7636913cf9ecfbf4fd84e501cd7dac0739f09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session_replication_role&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8c83934d92a986b5a176f057946d2abdafdee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_config&lt;/code&gt; sets the parameter &lt;em&gt;&lt;code&gt;setting_name&lt;/code&gt;&lt;/em&gt; to &lt;em&gt;&lt;code&gt;new_value&lt;/code&gt;&lt;/em&gt;. If &lt;em&gt;&lt;code&gt;is_local&lt;/code&gt;&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, the new value will only apply to the current transaction. If you want the new value to apply for the current session, use &lt;code&gt;false&lt;/code&gt; instead. The function corresponds to the SQL command &lt;code&gt;SET&lt;/code&gt;. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bb3a5d00763dd3e8f0f1d7df6ddae8ead8f0bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_publication_option&lt;/code&gt; specifies additional options for this operation. The supported options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2929bf6dcd0b23fd41ee3405c47d8de0e2e8e2cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setof int&lt;/code&gt;, &lt;code&gt;setof bigint&lt;/code&gt; or &lt;code&gt;setof numeric&lt;/code&gt; (same as argument type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a4ef8e20d9f3d8e7374c3cdeee440530ab166c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setof int&lt;/code&gt;, &lt;code&gt;setof bigint&lt;/code&gt;, or &lt;code&gt;setof numeric&lt;/code&gt; (same as argument type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b0fb79cf0fb9d0828e88a64f99f274b083ce40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setof timestamp&lt;/code&gt; or &lt;code&gt;setof timestamp with time zone&lt;/code&gt; (same as argument type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4c2f16a1fcfc122488866d877bc6ddbc394c91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setweight&lt;/code&gt; returns a copy of the input vector in which every position has been labeled with the given &lt;code&gt;weight&lt;/code&gt;, either &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, or &lt;code&gt;D&lt;/code&gt;. (&lt;code&gt;D&lt;/code&gt; is the default for new vectors and as such is not displayed on output.) These labels are retained when vectors are concatenated, allowing words from different parts of a document to be weighted differently by ranking functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037ec54eaaf8dc9ac9ae2d8a8023ee1f6cdca22b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sha1&lt;/code&gt; numbers are from lcrack-20031130-beta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552f6b1d9848b0241cf371c920091d398fa5c0d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared_buffers&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8497b7820e3822b88cb70b2a29c7948797350f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared_memory_type&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee3e4a03da1fd494ec741d08026410a09245685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared_preload_libraries&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a7a842a37a95f1b51f441722fea27bd75aff05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shobj_description&lt;/code&gt; is used just like &lt;code&gt;obj_description&lt;/code&gt; except it is used for retrieving comments on shared objects. Some system catalogs are global to all databases within each cluster, and the descriptions for objects in them are stored globally as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd0903defb8e7422e8b9e9286f90c1cb0d47a7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;simple&lt;/code&gt;: use simple query protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762a3466ea22652fb15a9134e3db307487eaf73d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slot_name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cec1e09a4e232e493b14ab5433126515fc54cb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smallint&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;double precision&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, or &lt;code&gt;money&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4acc6f78793426250f1bdcb6a6388710190f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smallint&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;double precision&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, or &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7221050a03611a16434fb70bc38bdd941c0e81b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smallint&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;double precision&lt;/code&gt;, or &lt;code&gt;numeric&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6641ae6f73fde1d3cee20cbeaed3c1953a24102f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smallint&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, or &lt;code&gt;bit&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1297f171d9cfff93af0d8e66879439fe3d8660" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some text&lt;/code&gt; represented in the UTF8 encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22337e40e3dd8acd5fe9b59f97bdd8c6d8f4b832" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; has to be a non-null string with a maximum of 255 characters. &lt;code&gt;max_output_length&lt;/code&gt; sets the maximum length of the output metaphone code; if longer, the output is truncated to this length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbae8945554b0038cf9eef671f15d204a1a2c890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; is a value expression of type &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;timestamp with time zone&lt;/code&gt;, or &lt;code&gt;interval&lt;/code&gt;. (Values of type &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt; are cast automatically to &lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;interval&lt;/code&gt;, respectively.) &lt;code&gt;field&lt;/code&gt; selects to which precision to truncate the input value. The return value is likewise of type &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;timestamp with time zone&lt;/code&gt;, or &lt;code&gt;interval&lt;/code&gt;, and it has all fields that are less significant than the selected one set to zero (or one, for day and month).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af40cb4328b1842852fa7ccae910d481b2abced" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sqlquery&lt;/code&gt; is a text value containing an SQL query which must return a single &lt;code&gt;tsvector&lt;/code&gt; column. &lt;code&gt;ts_stat&lt;/code&gt; executes the query and returns statistics about each distinct lexeme (word) contained in the &lt;code&gt;tsvector&lt;/code&gt; data. The columns returned are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44b551f935b75283bdb9dea5fda53cf0ecd6c57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33863016c1c474de55bd99ac4a2941ce3c720a8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_ca_file&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895153dfddc7d74a5aaa39f2a6885d5d4bc82baa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_cert_file&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae49554ecf9337fc4f633b1e91cfe89196babc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_ciphers&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6c6c6969016754ddebc6d87e229e376e43c765" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_crl_file&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098a2ff2b812c2ffe275a1813e7e0ec04e3106b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_dh_params_file&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358bf3e17d4c8b6dd50a51ba850beb02017d4bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_ecdh_curve&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605cf8655335d8f94d8e497449590bf2b141f2ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_key_file&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad38324e9d8f4af18662451d471bb899f911bfff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_library&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1290784e7dec6fbf9469415b8582b160982db4c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_max_protocol_version&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72821dbb3f4d8746cb642026a906caabb37eaa99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_min_protocol_version&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c085c6c88864b5be2daddaee8a3f3815e52d0aa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_passphrase_command&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a9f875b6a716718c75e8ad8c5745ecb793df4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_passphrase_command_supports_reload&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e007897fa73bcca5304811a8e5e2339be5cad2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl_prefer_server_ciphers&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4b727a75ded08922cb26cc2f666058d7fc5f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;standard_conforming_strings&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c42de21a8d31ee63b71151125f2562ad4064d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; mode launches a new server. The server is started in the background, and its standard input is attached to &lt;code&gt;/dev/null&lt;/code&gt; (or &lt;code&gt;nul&lt;/code&gt; on Windows). On Unix-like systems, by default, the server's standard output and standard error are sent to pg_ctl's standard output (not standard error). The standard output of pg_ctl should then be redirected to a file or piped to another process such as a log rotating program like rotatelogs; otherwise &lt;code&gt;postgres&lt;/code&gt; will write its output to the controlling terminal (from the background) and will not leave the shell's process group. On Windows, by default the server's standard output and standard error are sent to the terminal. These default behaviors can be changed by using &lt;code&gt;-l&lt;/code&gt; to append the server's output to a log file. Use of either &lt;code&gt;-l&lt;/code&gt; or output redirection is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b1ea4e74825e6a314868328204d6c6e0837044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startup&lt;/code&gt;: This WAL sender is starting up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb04f202efe2828da081863ec8cd61001fd9aab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state = GenericXLogStart(relation)&lt;/code&gt; &amp;mdash; start construction of a generic WAL record for the given relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1824f59ecd6e2379e390d715be43df9b7a2f4eed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;statement_timeout&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d84210ee921ab0ccce6c4a694affbc25f323f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stats_temp_directory&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df792e0f9461ab5fd4722af8dd8d421a1fb298c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt; mode checks whether a server is running in the specified data directory. If it is, the server's PID and the command line options that were used to invoke it are displayed. If the server is not running, pg_ctl returns an exit status of 3. If an accessible data directory is not specified, pg_ctl returns an exit status of 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7d9982d37c1424555ccba01bda2a43a81949d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop&lt;/code&gt; mode shuts down the server that is running in the specified data directory. Three different shutdown methods can be selected with the &lt;code&gt;-m&lt;/code&gt; option. &amp;ldquo;Smart&amp;rdquo; mode waits for all active clients to disconnect and any online backup to finish. If the server is in hot standby, recovery and streaming replication will be terminated once all clients have disconnected. &amp;ldquo;Fast&amp;rdquo; mode (the default) does not wait for clients to disconnect and will terminate an online backup in progress. All active transactions are rolled back and clients are forcibly disconnected, then the server is shut down. &amp;ldquo;Immediate&amp;rdquo; mode will abort all server processes immediately, without a clean shutdown. This choice will lead to a crash-recovery cycle during the next server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a02c86715af4990e38ed15e5e9dd7135fc5c40d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stopping&lt;/code&gt;: This WAL sender is stopping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e97e31286adeed6d9d409af3334dca8d2dca7ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streaming&lt;/code&gt;: This WAL sender is streaming changes after its connected standby server has caught up with the primary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859142ab7732af725c0cc96631f4fc83ef0e7a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sum(X*Y) - sum(X) * sum(Y)/N&lt;/code&gt; (&amp;ldquo;sum of products&amp;rdquo; of independent times dependent variable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71312acd4f1744282c419ee828029896378b9fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sum(X^2) - sum(X)^2/N&lt;/code&gt; (&amp;ldquo;sum of squares&amp;rdquo; of the independent variable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1d616b474047015682efffd09a6633c95ff3dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sum(Y^2) - sum(Y)^2/N&lt;/code&gt; (&amp;ldquo;sum of squares&amp;rdquo; of the dependent variable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d00c4c3acb66029609b256f41ab0d1212b47893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;superuser_reserved_connections&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6495991aedc996a5c83114d0e96c691ed68743e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync&lt;/code&gt;: This standby server is synchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3171061c11ae22ff72053f271b240e5f98e6cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronize_seqscans&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c596b07ccf14fdf3ca8b3f7f56a26eadbb624ce5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronous_commit&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864efe9ab1401a2c389114f2886d1522cab4373a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronous_standby_names&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e604d38b50ed435ec84cfe2893ec2c31f12b607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronous_standby_names&lt;/code&gt; specifies the number and names of synchronous standbys that transaction commits made when &lt;code&gt;synchronous_commit&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;remote_apply&lt;/code&gt; or &lt;code&gt;remote_write&lt;/code&gt; will wait for responses from. Such transaction commits may never be completed if any one of synchronous standbys should crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454e732bb02fb4adfaa60b9df625942af9e66511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;syslog_facility&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef47798e67228241eec4058b278f074e22aa24b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;syslog_ident&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b804bdadf1ba900a1cf86a17463c15fd2db1c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;syslog_sequence_numbers&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523f97e3269aa9888017d00f649d23c66bb9e1c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;syslog_split_messages&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0879bfe3eb5151a868a7485f3f279a13ecc08b42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; (create Tables)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fe2ff555060da0de86841639567c3b3241f4c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; = table (including materialized views), &lt;code&gt;i&lt;/code&gt; = index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb695c1fdd6118ef3b6ebc843cdcc2e28128f11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt;&lt;code&gt;tar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt;&lt;code&gt;tar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6778d44bf68e63062884b123f17bed4133ca591b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table_name&lt;/code&gt;&lt;code&gt;domain_name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;table_name&lt;/code&gt;&lt;code&gt;domain_name&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c5d9e6a22abe649d7bbf2c26090f22b73331149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table_to_xml&lt;/code&gt; maps the content of the named table, passed as parameter &lt;em&gt;&lt;code&gt;tbl&lt;/code&gt;&lt;/em&gt;. The &lt;code&gt;regclass&lt;/code&gt; type accepts strings identifying tables using the usual notation, including optional schema qualifications and double quotes. &lt;code&gt;query_to_xml&lt;/code&gt; executes the query whose text is passed as parameter &lt;em&gt;&lt;code&gt;query&lt;/code&gt;&lt;/em&gt; and maps the result set. &lt;code&gt;cursor_to_xml&lt;/code&gt; fetches the indicated number of rows from the cursor specified by the parameter &lt;em&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/em&gt;. This variant is recommended if large tables have to be mapped, because the result value is built up in memory by each function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0316fed956a85d3a8b0447c66072825a56fadf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tableattr&lt;/code&gt; (or &lt;code&gt;T&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c0eeaed8b395a834f991396e5c9d87c22f6508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tcp_keepalives_count&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01865e23799b37aed4f229c85f672aa885fc713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tcp_keepalives_idle&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e84ece640b85c081dafd6f7c105bc16046549b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tcp_keepalives_interval&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd034037c724d2b170fb2e39d566cc286cac66d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tcp_user_timeout&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73923fb7b9116b0f1f6a24030de8b8901754189e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temp_buffers&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c9a15336ce2d75011baca5de7cfbc130d115b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temp_file_limit&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f44a99a47e29829200fc3c5f45d3ffffd9416eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temp_tablespaces&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6643de99f0668b00663d5b22164ed8caffc5f333" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template1&lt;/code&gt; and &lt;code&gt;template0&lt;/code&gt; do not have any special status beyond the fact that the name &lt;code&gt;template1&lt;/code&gt; is the default source database name for &lt;code&gt;CREATE DATABASE&lt;/code&gt;. For example, one could drop &lt;code&gt;template1&lt;/code&gt; and recreate it from &lt;code&gt;template0&lt;/code&gt; without any ill effects. This course of action might be advisable if one has carelessly added a bunch of junk in &lt;code&gt;template1&lt;/code&gt;. (To delete &lt;code&gt;template1&lt;/code&gt;, it must have &lt;code&gt;pg_database.datistemplate = false&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6e2cef044d6f1d4f6ee212f0bd7ddbd3a58867" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test_decoding&lt;/code&gt; is an example of a logical decoding output plugin. It doesn't do anything especially useful, but can serve as a starting point for developing your own output plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f145114ad65c44a128a3452856c0ef18f42efedf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test_decoding&lt;/code&gt; receives WAL through the logical decoding mechanism and decodes it into text representations of the operations performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5858c01c11fc79bf33993ce630dac0c5cd8f3e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8e7a85015cd943e2db99fdae54e954f1b42d96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;%&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;%&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cdc53eae8bd6f6447fef17180b7770766be44a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;%&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;%&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bda28f0dfe4f081721ddb5c1122435b2632c68f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;%&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;%&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ba595e2d51b06303c43c84fa991b79ed93e547e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;%&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;%&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f93e3ad7b3eb94e2b470f1e48c01d5b648c7303a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;%&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;%&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f91e6727d66d3dec99efd38d6d07ad8b42a32a34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26ebdf23a01b1b0d0e3a29963b6a43b8ab457613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b6c22d6679cd8d1a42c5f18c3f3329a4f2db880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;-&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;-&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="11a43119f7783eeeade83084f266656badd51630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b74bdcfb63d99c791cfdf9bae71648e680de81d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7529fd23464aefb9f0aab9e1b50d95e5bf2346d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;||&lt;/code&gt;&lt;code&gt;ltree&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;||&lt;/code&gt;&lt;code&gt;ltree&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b062d08489cd329be9ef116ff01ebf7c20407c7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text_in_utf8&lt;/code&gt; represented in Latin-1 encoding (ISO 8859-1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8192759a4390864abfd7f17e5c46867547a51eca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text_in_utf8&lt;/code&gt; represented in the current database encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205e8596d6006180c1f76f68b582ad1795f77818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;th&lt;/code&gt; suffix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0111388378ba6400b054bc3cee7f4314956745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thesaurus_simple&lt;/code&gt; is the new dictionary's name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe20e62f7757cac0265bea2b534ea5cca109433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt;, &lt;code&gt;timestamp&lt;/code&gt;, and &lt;code&gt;interval&lt;/code&gt; accept an optional precision value &lt;code&gt;p&lt;/code&gt; which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of &lt;code&gt;p&lt;/code&gt; is from 0 to 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3810895901d674c549436e5908413fc13a7b4f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;timestamp with time zone&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b6b8dbc1125b2ab065e648806c69a82c74daf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timezone_abbreviations&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8df3037d2f09ee8a0c4a1e848097d08ee71889" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timezone_abbreviations&lt;/code&gt; can be set to any file name found in &lt;code&gt;.../share/timezonesets/&lt;/code&gt;, if the file's name is entirely alphabetic. (The prohibition against non-alphabetic characters in &lt;code&gt;timezone_abbreviations&lt;/code&gt; prevents reading files outside the intended directory, as well as reading editor backup files and other extraneous files.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c4bedfb9e57ad022184562e9985cecc3116331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; (or &lt;code&gt;C&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c5abf910e979780cdc0ca65424c8b5d1524974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_char(..., 'ID')&lt;/code&gt;'s day of the week numbering matches the &lt;code&gt;extract(isodow from ...)&lt;/code&gt; function, but &lt;code&gt;to_char(..., 'D')&lt;/code&gt;'s does not match &lt;code&gt;extract(dow from ...)&lt;/code&gt;'s day numbering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e2f001bcf44c6f28abeb29f24a87b56f180256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_char(interval)&lt;/code&gt; formats &lt;code&gt;HH&lt;/code&gt; and &lt;code&gt;HH12&lt;/code&gt; as shown on a 12-hour clock, for example zero hours and 36 hours both output as &lt;code&gt;12&lt;/code&gt;, while &lt;code&gt;HH24&lt;/code&gt; outputs the full hour value, which can exceed 23 in an &lt;code&gt;interval&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48e2aea189859cd0c566450dd8457e5c26cf47d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_timestamp&lt;/code&gt; and &lt;code&gt;to_date&lt;/code&gt; exist to handle input formats that cannot be converted by simple casting. For most standard date/time formats, simply casting the source string to the required data type works, and is much easier. Similarly, &lt;code&gt;to_number&lt;/code&gt; is unnecessary for standard numeric representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dc7c3d71afcb19314c5df415a71cc4781c2d7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_timestamp&lt;/code&gt; and &lt;code&gt;to_date&lt;/code&gt; skip multiple blank spaces at the beginning of the input string and around date and time values unless the &lt;code&gt;FX&lt;/code&gt; option is used. For example, &lt;code&gt;to_timestamp('&amp;nbsp;2000&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JUN', 'YYYY MON')&lt;/code&gt; and &lt;code&gt;to_timestamp('2000 - JUN', 'YYYY-MON')&lt;/code&gt; work, but &lt;code&gt;to_timestamp('2000&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JUN', 'FXYYYY MON')&lt;/code&gt; returns an error because &lt;code&gt;to_timestamp&lt;/code&gt; expects only a single space. &lt;code&gt;FX&lt;/code&gt; must be specified as the first item in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436ecfe7459e7a61f3dc9c689880ff507b05ce1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_tsquery&lt;/code&gt; can also accept single-quoted phrases. This is primarily useful when the configuration includes a thesaurus dictionary that may trigger on such phrases. In the example below, a thesaurus contains the rule &lt;code&gt;supernovae stars : sn&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b27c18b3543afc40654e4dda450c44302051be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_tsquery&lt;/code&gt; creates a &lt;code&gt;tsquery&lt;/code&gt; value from &lt;code&gt;querytext&lt;/code&gt;, which must consist of single tokens separated by the &lt;code&gt;tsquery&lt;/code&gt; operators &lt;code&gt;&amp;amp;&lt;/code&gt; (AND), &lt;code&gt;|&lt;/code&gt; (OR), &lt;code&gt;!&lt;/code&gt; (NOT), and &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; (FOLLOWED BY), possibly grouped using parentheses. In other words, the input to &lt;code&gt;to_tsquery&lt;/code&gt; must already follow the general rules for &lt;code&gt;tsquery&lt;/code&gt; input, as described in &lt;a href=&quot;datatype-textsearch#DATATYPE-TSQUERY&quot;&gt;Section 8.11.2&lt;/a&gt;. The difference is that while basic &lt;code&gt;tsquery&lt;/code&gt; input takes the tokens at face value, &lt;code&gt;to_tsquery&lt;/code&gt; normalizes each token into a lexeme using the specified or default configuration, and discards any tokens that are stop words according to the configuration. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a2f6046c577e0be7fd96d403382cb7da22b0ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_tsvector&lt;/code&gt; parses a textual document into tokens, reduces the tokens to lexemes, and returns a &lt;code&gt;tsvector&lt;/code&gt; which lists the lexemes together with their positions in the document. The document is processed according to the specified or default text search configuration. Here is a simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d47167065c8f4ef0c46589e209b9877ba9d778" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toast_tuple_target&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5aafd207f557998d9e753802cda030cb4f2f13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;token&lt;/code&gt;&lt;code&gt;text&lt;/code&gt; &amp;mdash; text of the token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d1735dfeb02b45f1485ba29fae36dec953f94d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_lock_oidmin&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66e38a04ea511ed736aeb0bd22a9e40f4385bb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_lock_table&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b5191c66ba5dc9e51922d121c271c0a254bfea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_locks&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9278069a32f10f0797ca1cc042a81dd945c71e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_lwlocks&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcf23f42f4b0765522ba13ca113a6ecc435a2de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_notify&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80921cff7c8301317d9a1ce9072b1da5d0e6889" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_recovery_messages&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d550056d863354f7c3ece4a1603bccc17d55f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_sort&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ad8d00b6c192a415beea31ada1cb981a2933e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_userlocks&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b871b8d1fd5171179644f94bec327af57d7cf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track_activities&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd551cbe19942cc167fc86c6e84988e4c36b71cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track_activity_query_size&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e15f7a96bc93aaa7c0b4b1e377e038cd95a7d43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track_commit_timestamp&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b67cb944de3ebd665ca8761d0b7a168584da30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track_counts&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb35cf8105502c6e657525e77dfcaaa81f409d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track_functions&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d9dc0469ad6888ccaa049b6c63003118064cc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track_io_timing&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35517a32044a2e925dfa0f0c1b0bf8dc1969206" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transaction_timestamp()&lt;/code&gt; is equivalent to &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt;, but is named to clearly reflect what it returns. &lt;code&gt;statement_timestamp()&lt;/code&gt; returns the start time of the current statement (more specifically, the time of receipt of the latest command message from the client). &lt;code&gt;statement_timestamp()&lt;/code&gt; and &lt;code&gt;transaction_timestamp()&lt;/code&gt; return the same value during the first command of a transaction, but might differ during subsequent commands. &lt;code&gt;clock_timestamp()&lt;/code&gt; returns the actual current time, and therefore its value changes even within a single SQL command. &lt;code&gt;timeofday()&lt;/code&gt; is a historical PostgreSQL function. Like &lt;code&gt;clock_timestamp()&lt;/code&gt;, it returns the actual current time, but as a formatted &lt;code&gt;text&lt;/code&gt; string rather than a &lt;code&gt;timestamp with time zone&lt;/code&gt; value. &lt;code&gt;now()&lt;/code&gt; is a traditional PostgreSQL equivalent to &lt;code&gt;transaction_timestamp()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55499af686ea7bac38df7dc07827702d7ce7c745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform_null_equals&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf80b5fd7599da646a629885e9785f849b2ec351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;triConsistent&lt;/code&gt; is similar to &lt;code&gt;consistent&lt;/code&gt;, but instead of Booleans in the &lt;code&gt;check&lt;/code&gt; vector, there are three possible values for each key: &lt;code&gt;GIN_TRUE&lt;/code&gt;, &lt;code&gt;GIN_FALSE&lt;/code&gt; and &lt;code&gt;GIN_MAYBE&lt;/code&gt;. &lt;code&gt;GIN_FALSE&lt;/code&gt; and &lt;code&gt;GIN_TRUE&lt;/code&gt; have the same meaning as regular Boolean values, while &lt;code&gt;GIN_MAYBE&lt;/code&gt; means that the presence of that key is not known. When &lt;code&gt;GIN_MAYBE&lt;/code&gt; values are present, the function should only return &lt;code&gt;GIN_TRUE&lt;/code&gt; if the item certainly matches whether or not the index item contains the corresponding query keys. Likewise, the function must return &lt;code&gt;GIN_FALSE&lt;/code&gt; only if the item certainly does not match, whether or not it contains the &lt;code&gt;GIN_MAYBE&lt;/code&gt; keys. If the result depends on the &lt;code&gt;GIN_MAYBE&lt;/code&gt; entries, i.e., the match cannot be confirmed or refuted based on the known query keys, the function must return &lt;code&gt;GIN_MAYBE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f350daeb25f967e08ebe4c49276173bdef6b629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if array satisfies query (commutator of &lt;code&gt;@@&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442e8650c7b7d3c6f41a3ec222c764807a76fac4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if array satisfies query (see below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c79e6fcd19bea0c9edc006e99236a1d2127434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the cursor is holdable (that is, it can be accessed after the transaction that declared the cursor has committed); &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8735e88b84d9ba7056e6371f084e0651d003e14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the cursor is scrollable (that is, it allows rows to be retrieved in a nonsequential manner); &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d12fbef903a22d6eaa404bdcfcc77a618f4e765" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the cursor was declared &lt;code&gt;BINARY&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5444483d0955f6ea153bccf4ea4dfbceac1feea3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the last SQL query failed, &lt;code&gt;false&lt;/code&gt; if it succeeded. See also &lt;code&gt;SQLSTATE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51a74da27436ee62f245a7815aab7ad1ca49947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the prepared statement was created via the &lt;code&gt;PREPARE&lt;/code&gt; SQL command; &lt;code&gt;false&lt;/code&gt; if the statement was prepared via the frontend/backend protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab28ad172f6f5665d479a37b702b55121fc21a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the value has been changed in the configuration file but needs a restart; or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d737c05f4168cd1b61233686734dc60d51aa9f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trust&lt;/code&gt; authentication is appropriate and very convenient for local connections on a single-user workstation. It is usually &lt;em&gt;not&lt;/em&gt; appropriate by itself on a multiuser machine. However, you might be able to use &lt;code&gt;trust&lt;/code&gt; even on a multiuser machine, if you restrict access to the server's Unix-domain socket file using file-system permissions. To do this, set the &lt;code&gt;unix_socket_permissions&lt;/code&gt; (and possibly &lt;code&gt;unix_socket_group&lt;/code&gt;) configuration parameters as described in &lt;a href=&quot;runtime-config-connection&quot;&gt;Section 19.3&lt;/a&gt;. Or you could set the &lt;code&gt;unix_socket_directories&lt;/code&gt; configuration parameter to place the socket file in a suitably restricted directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f580b77220b2d55977290e6241a4154942b8dbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trust&lt;/code&gt; authentication is only suitable for TCP/IP connections if you trust every user on every machine that is allowed to connect to the server by the &lt;code&gt;pg_hba.conf&lt;/code&gt; lines that specify &lt;code&gt;trust&lt;/code&gt;. It is seldom reasonable to use &lt;code&gt;trust&lt;/code&gt; for any TCP/IP connections other than those from localhost (127.0.0.1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9af07f6d0f0907312ece5d81efdd89db7d44a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_debug&lt;/code&gt; displays information about every token of &lt;code&gt;document&lt;/code&gt; as produced by the parser and processed by the configured dictionaries. It uses the configuration specified by &lt;code&gt;config&lt;/code&gt;, or &lt;code&gt;default_text_search_config&lt;/code&gt; if that argument is omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511ab21027eda055719808aa9ef814c95722dc1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_debug&lt;/code&gt; returns one row for each token identified in the text by the parser. The columns returned are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f9b22f832593d5f5b708d3195d0e523d3a2b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_headline&lt;/code&gt; accepts a document along with a query, and returns an excerpt from the document in which terms from the query are highlighted. The configuration to be used to parse the document can be specified by &lt;code&gt;config&lt;/code&gt;; if &lt;code&gt;config&lt;/code&gt; is omitted, the &lt;code&gt;default_text_search_config&lt;/code&gt; configuration is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2645bb4d98cf75fa97e74cf0bb231ac671a07d8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_headline&lt;/code&gt; uses the original document, not a &lt;code&gt;tsvector&lt;/code&gt; summary, so it can be slow and should be used with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb9d7be4615da8056c05c1b161f928095ab47f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_lexize&lt;/code&gt; returns an array of lexemes if the input &lt;code&gt;token&lt;/code&gt; is known to the dictionary, or an empty array if the token is known to the dictionary but it is a stop word, or &lt;code&gt;NULL&lt;/code&gt; if it is an unknown word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a328b7eebbf2f93aa00a64a2207386f4858e8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_parse&lt;/code&gt; parses the given &lt;code&gt;document&lt;/code&gt; and returns a series of records, one for each token produced by parsing. Each record includes a &lt;code&gt;tokid&lt;/code&gt; showing the assigned token type and a &lt;code&gt;token&lt;/code&gt; which is the text of the token. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5d8fe4167fc8720306c56dc7b1c83f213ddbe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts_token_type&lt;/code&gt; returns a table which describes each type of token the specified parser can recognize. For each token type, the table gives the integer &lt;code&gt;tokid&lt;/code&gt; that the parser uses to label a token of that type, the &lt;code&gt;alias&lt;/code&gt; that names the token type in configuration commands, and a short &lt;code&gt;description&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef5005078b84c1218977eb811306b4f7dea65ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsquery&lt;/code&gt; contains another ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e1430d336a5bce9ef2393c523c087bb9db3158" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsquery&lt;/code&gt; followed by &lt;code&gt;tsquery&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f01ed9c12f548a791a5c0f8a985cf5301eebb36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsquery&lt;/code&gt; is contained in ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa314e4e4c072ae02797fc903b584000e248e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsvector&lt;/code&gt; matches &lt;code&gt;tsquery&lt;/code&gt; ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf528b2023bb0eef720ba8fe4e4c6bbdb9c831c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tuple_data_split&lt;/code&gt; splits tuple data into attributes in the same way as backend internals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e713eb6e5162edbf035497ea9536e158cb305da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tuples_only&lt;/code&gt; (or &lt;code&gt;t&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d24250adb8533fb82ec69c211af186f260977a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;txid_snapshot&lt;/code&gt;'s textual representation is &lt;code&gt;xmin:xmax:xip_list&lt;/code&gt;. For example &lt;code&gt;10:20:10,14,15&lt;/code&gt; means &lt;code&gt;xmin=10, xmax=20, xip_list=10, 14, 15&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f060b19446aa6553df62e4587c60941c48504a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;txid_status(bigint)&lt;/code&gt; reports the commit status of a recent transaction. Applications may use it to determine whether a transaction committed or aborted when the application and database server become disconnected while a &lt;code&gt;COMMIT&lt;/code&gt; is in progress. The status of a transaction will be reported as either &lt;code&gt;in progress&lt;/code&gt;, &lt;code&gt;committed&lt;/code&gt;, or &lt;code&gt;aborted&lt;/code&gt;, provided that the transaction is recent enough that the system retains the commit status of that transaction. If is old enough that no references to that transaction survive in the system and the commit status information has been discarded, this function will return NULL. Note that prepared transactions are reported as &lt;code&gt;in progress&lt;/code&gt;; applications must check &lt;a href=&quot;view-pg-prepared-xacts&quot;&gt;&lt;code&gt;pg_prepared_xacts&lt;/code&gt;&lt;/a&gt; if they need to determine whether the txid is a prepared transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8512000f754e39d4062e9e337d1fd37e196ecdd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typalign&lt;/code&gt; is the alignment required when storing a value of this type. It applies to storage on disk as well as most representations of the value inside PostgreSQL. When multiple values are stored consecutively, such as in the representation of a complete row on disk, padding is inserted before a datum of this type so that it begins on the specified boundary. The alignment reference is the beginning of the first datum in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f5705d43dcbb6dba890b60624409d9625dfb5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typbyval&lt;/code&gt; determines whether internal routines pass a value of this type by value or by reference. &lt;code&gt;typbyval&lt;/code&gt; had better be false if &lt;code&gt;typlen&lt;/code&gt; is not 1, 2, or 4 (or 8 on machines where Datum is 8 bytes). Variable-length types are always passed by reference. Note that &lt;code&gt;typbyval&lt;/code&gt; can be false even if the length would allow pass-by-value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569d75bf4b5f4bf7c4d7430ac30713f5423bc256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typcategory&lt;/code&gt; is an arbitrary classification of data types that is used by the parser to determine which implicit casts should be &amp;ldquo;preferred&amp;rdquo;. See &lt;a href=&quot;catalog-pg-type#CATALOG-TYPCATEGORY-TABLE&quot;&gt;Table 51.64&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99c0af095db3e2a005bffc5dc999de52b621e10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typcollation&lt;/code&gt; specifies the collation of the type. If the type does not support collations, this will be zero. A base type that supports collations will have a nonzero value here, typically &lt;code&gt;DEFAULT_COLLATION_OID&lt;/code&gt;. A domain over a collatable type can have a collation OID different from its base type's, if one was specified for the domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacd86cf00413e42d57c59651c02042485cc85d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typdefault&lt;/code&gt; is null if the type has no associated default value. If &lt;code&gt;typdefaultbin&lt;/code&gt; is not null, &lt;code&gt;typdefault&lt;/code&gt; must contain a human-readable version of the default expression represented by &lt;code&gt;typdefaultbin&lt;/code&gt;. If &lt;code&gt;typdefaultbin&lt;/code&gt; is null and &lt;code&gt;typdefault&lt;/code&gt; is not, then &lt;code&gt;typdefault&lt;/code&gt; is the external representation of the type's default value, which can be fed to the type's input converter to produce a constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40be101113eb56271d885304b5fc7ceb9e7b87ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; (required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f0fbfc443cb7e7f3f204ee6f8987074e786e9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; can be &lt;code&gt;character&lt;/code&gt;, &lt;code&gt;character varying&lt;/code&gt;, or &lt;code&gt;text&lt;/code&gt; (or an alias for one of those). Again, according to the SQL standard, this is the only way to convert between type &lt;code&gt;xml&lt;/code&gt; and character types, but PostgreSQL also allows you to simply cast the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40916af4d054882846dd7c1c73bcf1361071b371" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typndims&lt;/code&gt; is the number of array dimensions for a domain over an array (that is, &lt;code&gt;typbasetype&lt;/code&gt; is an array type). Zero for types other than domains over array types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e86a40b99c7df87b872fdbb08964ccaca074193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typnotnull&lt;/code&gt; represents a not-null constraint on a type. Used for domains only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165a93194b7361213de3816d92db6cada5594abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typstorage&lt;/code&gt; tells for varlena types (those with &lt;code&gt;typlen&lt;/code&gt; = -1) if the type is prepared for toasting and what the default strategy for attributes of this type should be. Possible values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2928e964cdcc841b79e47518496694e3d71a9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typtype&lt;/code&gt; is &lt;code&gt;b&lt;/code&gt; for a base type, &lt;code&gt;c&lt;/code&gt; for a composite type (e.g., a table's row type), &lt;code&gt;d&lt;/code&gt; for a domain, &lt;code&gt;e&lt;/code&gt; for an enum type, &lt;code&gt;p&lt;/code&gt; for a pseudo-type, or &lt;code&gt;r&lt;/code&gt; for a range type. See also &lt;code&gt;typrelid&lt;/code&gt; and &lt;code&gt;typbasetype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a5f4ae017859e3bb674095d582d58f0041c3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unaccent&lt;/code&gt; is a text search dictionary that removes accents (diacritic signs) from lexemes. It's a filtering dictionary, which means its output is always passed to the next dictionary (if any), unlike the normal behavior of dictionaries. This allows accent-insensitive processing for full text search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a51253785339ab562d4b994e1404395aebea95d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unaligned&lt;/code&gt; format writes all columns of a row on one line, separated by the currently active field separator. This is useful for creating output that might be intended to be read in by other programs, for example, tab-separated or comma-separated format. However, the field separator character is not treated specially if it appears in a column's value; so CSV format may be better suited for such purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a77a5c61127fa12713306ef2f190ca9a55f14e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;und-x-icu&lt;/code&gt; (for &amp;ldquo;undefined&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb30fbc72c053ad02242dcb0e3d1f7f23ad35798" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unicode&lt;/code&gt; style uses Unicode box-drawing characters. Newlines in data are shown using a carriage return symbol in the right-hand margin. When the data is wrapped from one line to the next without a newline character, an ellipsis symbol is shown in the right-hand margin of the first line, and again in the left-hand margin of the following line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bb8474ec2e8e6928a4a8a3cc35a2545a392a15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unix_socket_directories&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265633b6835769331d3737fedb857befc5aebdd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unix_socket_group&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdb7a94230eb36c677b486e6d5241a3d7a1d334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unix_socket_permissions&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bf0bf86e60b4fb479c3a0b21421dd9c0e36b1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unknown&lt;/code&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e9a87713a5db52532fb34dc6feb6938f75c706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unquoted text&lt;/code&gt;: text not inside quote marks will be converted to terms separated by &lt;code&gt;&amp;amp;&lt;/code&gt; operators, as if processed by &lt;code&gt;plainto_tsquery&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367fbb65622820ab3bf958667af109e8f6056721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unregister&lt;/code&gt; mode unregisters a system service on Microsoft Windows. This undoes the effects of the &lt;code&gt;register&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731227840a4483eff4d75750a223f174346eac5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update_process_title&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d940d34bfb9c5bc35974884a2f2a90f44ece6db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; (specify these in a user mapping, instead)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d4e6a0cddafcc137660ecfa916e11e2f36ec37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user_catalog_table&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccabb7296cf8db5fe58c01e6c9182d5adfec6574" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt; (Vacuum)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1edbd7e5d239a277a8489bdc929d08b3b8887a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_cleanup_index_scale_factor&lt;/code&gt; (&lt;code&gt;floating point&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd42acc4d2acf1bb3466dad543dd3c963611d32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_cost_delay&lt;/code&gt; (&lt;code&gt;floating point&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc6de54148682d1869d503dfbd0ca62fce79720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_cost_limit&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad0c06eb1cda14ef8b22dc2b097aa5f9ef216c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_cost_page_dirty&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6fa128dd34f9a4e8d8bf8f3821ee7873afdb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_cost_page_hit&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230439442e763add635293ebcccad2c5fbf3b770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_cost_page_miss&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8539a7bd53ef043ee24c8adcd2746567cd37bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_defer_cleanup_age&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d87f6017a47fa0fb0f662752317872f83b3312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_freeze_min_age&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf940084645c76cce973d1e79f530c0429ee608" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_freeze_table_age&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492feb9e10568781c695916f1ab09185834ce922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_index_cleanup&lt;/code&gt;, &lt;code&gt;toast.vacuum_index_cleanup&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87fcb25845fa89b8bb69f9731f9fb1499c96fd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_multixact_freeze_min_age&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebda35dacbca7165e5676a27b824db82f6ac3b2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_multixact_freeze_table_age&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9759eed68e6e56bcaa6a5603fe266fdec1cfd4a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuum_truncate&lt;/code&gt;, &lt;code&gt;toast.vacuum_truncate&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2989eb02ce2cbe3c2714582016e88935ce9574be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuumdb&lt;/code&gt; [&lt;code&gt;connection-option&lt;/code&gt;...] [&lt;code&gt;option&lt;/code&gt;...] &lt;code&gt;--all&lt;/code&gt; | &lt;code&gt;-a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53a298d57aab4992964808161a21e2e2ea42b4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacuumdb&lt;/code&gt; [&lt;code&gt;connection-option&lt;/code&gt;...] [&lt;code&gt;option&lt;/code&gt;...] [ &lt;code&gt;--table&lt;/code&gt; | &lt;code&gt;-t&lt;/code&gt;&lt;code&gt;table&lt;/code&gt; [( &lt;code&gt;column&lt;/code&gt; [,...] )] ] ... [&lt;code&gt;dbname&lt;/code&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb7bc170505609e5aa9b955d968e6c0c390fac2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;val&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; must be of the same type, which is one of the types supported by the operator family (i.e., a type for which it provides an ordering). However, &lt;code&gt;offset&lt;/code&gt; could be of a different type, which might be one otherwise unsupported by the family. An example is that the built-in &lt;code&gt;time_ops&lt;/code&gt; family provides an &lt;code&gt;in_range&lt;/code&gt; function that has &lt;code&gt;offset&lt;/code&gt; of type &lt;code&gt;interval&lt;/code&gt;. A family can provide &lt;code&gt;in_range&lt;/code&gt; functions for any of its supported types and one or more &lt;code&gt;offset&lt;/code&gt; types. Each &lt;code&gt;in_range&lt;/code&gt; function should be entered in &lt;code&gt;pg_amproc&lt;/code&gt; with &lt;code&gt;amproclefttype&lt;/code&gt; equal to &lt;code&gt;type1&lt;/code&gt; and &lt;code&gt;amprocrighttype&lt;/code&gt; equal to &lt;code&gt;type2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb14a8ec907f722f5c21f9bdae2436c020810fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valfunction&lt;/code&gt; is the name of a previously registered function that will be called when a new function in the language is created, to validate the new function. If no validator function is specified, then a new function will not be checked when it is created. The validator function must take one argument of type &lt;code&gt;oid&lt;/code&gt;, which will be the OID of the to-be-created function, and will typically return &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf8f3fef7aaa2fee2e52cc63021b1a905c1107c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;validator_function&lt;/code&gt; is the name of a previously registered function that will be called to check the generic options given to the foreign-data wrapper, as well as options for foreign servers, user mappings and foreign tables using the foreign-data wrapper. If no validator function or &lt;code&gt;NO VALIDATOR&lt;/code&gt; is specified, then options will not be checked at creation time. (Foreign-data wrappers will possibly ignore or reject invalid option specifications at run time, depending on the implementation.) The validator function must take two arguments: one of type &lt;code&gt;text[]&lt;/code&gt;, which will contain the array of options as stored in the system catalogs, and one of type &lt;code&gt;oid&lt;/code&gt;, which will be the OID of the system catalog containing the options. The return type is ignored; the function should report invalid options using the &lt;code&gt;ereport(ERROR)&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7d27f1b669face78f28727e260f4a36baf4130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;varchar(80)&lt;/code&gt; specifies a data type that can store arbitrary character strings up to 80 characters in length. &lt;code&gt;int&lt;/code&gt; is the normal integer type. &lt;code&gt;real&lt;/code&gt; is a type for storing single precision floating-point numbers. &lt;code&gt;date&lt;/code&gt; should be self-explanatory. (Yes, the column of type &lt;code&gt;date&lt;/code&gt; is also named &lt;code&gt;date&lt;/code&gt;. This might be convenient or confusing &amp;mdash; you choose.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f226a045ff4f86061b7ec984b74aacb94f7452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; returns a string describing the PostgreSQL server's version. You can also get this information from &lt;a href=&quot;runtime-config-preset#GUC-SERVER-VERSION&quot;&gt;server_version&lt;/a&gt; or for a machine-readable version, &lt;a href=&quot;runtime-config-preset#GUC-SERVER-VERSION-NUM&quot;&gt;server_version_num&lt;/a&gt;. Software developers should use &lt;code&gt;server_version_num&lt;/code&gt; (available since 8.2) or &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-status.html#LIBPQ-PQSERVERVERSION&quot;&gt;&lt;code&gt;PQserverVersion&lt;/code&gt;&lt;/a&gt; instead of parsing the text version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606fab8cddcf978b33c3a6bdd041b129c2f116ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; (&amp;ldquo;write&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0778c0a73b97533df18e98b69f196b7f60182aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_block_size&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40ece67862658f51459ddf71b045c095c4fe56e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_buffers&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1c1202f4da09a3710642be560f58660e06c1e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_compression&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a2b57084381d7086a7923e14d78e8e9f884584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_consistency_checking&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316299cf494bf48fb540165be9ecb44bf2fc8858" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_debug&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197ce8f83c3288299c8975a0ec8392765a60c655" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_init_zero&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717ee705969b6f430ff67c35f73145de193cd744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_keep_segments&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb6686ab43c2247a655d688be17fd16c969e3f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_level&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365790cb0693faeb0f1410fdaab8391bc5623c55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_level&lt;/code&gt; determines how much information is written to the WAL. The default value is &lt;code&gt;replica&lt;/code&gt;, which writes enough data to support WAL archiving and replication, including running read-only queries on a standby server. &lt;code&gt;minimal&lt;/code&gt; removes all logging except the information required to recover from a crash or immediate shutdown. Finally, &lt;code&gt;logical&lt;/code&gt; adds information necessary to support logical decoding. Each level includes the information logged at all lower levels. This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf6776a6d532e275562cf1e044a88eef4d6233e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_log_hints&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9035618b601fb92c2767be2d810b51080b1f03f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_receiver_status_interval&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e8aa17dc4bd4893ebc8bb97ce1fcf783142179" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_receiver_timeout&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88dd95362957382ea6afcedc5b0771d10fe9973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_recycle&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c75c2d978a568e5b962a94bd11840675c7e8df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_retrieve_retry_interval&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a296c71145c1030651e2f8728946c40c750c515f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_segment_size&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a723ddd1af7cbf8039b592e9fcf249ec4fe265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_sender_timeout&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9160a329875e6f1de630c8aaafb6012c7c91399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_sync_method&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7ce17ce30db08133217a97dd09182a791b45e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_writer_delay&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b201976420c2332c549a55e746b7aa0e4f1a1a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wal_writer_flush_after&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d014f18b7e1be7a89bd92496b505d13efa9b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;websearch_to_tsquery&lt;/code&gt; creates a &lt;code&gt;tsquery&lt;/code&gt; value from &lt;code&gt;querytext&lt;/code&gt; using an alternative syntax in which simple unformatted text is a valid query. Unlike &lt;code&gt;plainto_tsquery&lt;/code&gt; and &lt;code&gt;phraseto_tsquery&lt;/code&gt;, it also recognizes certain operators. Moreover, this function should never raise syntax errors, which makes it possible to use raw user-supplied input for search. The following syntax is supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ae0ce732b3590329621511a6a9ac8bd70f8942" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d4f1e7aafda4bfb062e8b956b2bc7f9dbfa181" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window_name&lt;/code&gt; is a reference to a named window specification defined in the query's &lt;code&gt;WINDOW&lt;/code&gt; clause. Alternatively, a full &lt;code&gt;window_definition&lt;/code&gt; can be given within parentheses, using the same syntax as for defining a named window in the &lt;code&gt;WINDOW&lt;/code&gt; clause; see the &lt;a href=&quot;sql-select&quot;&gt;SELECT&lt;/a&gt; reference page for details. It's worth pointing out that &lt;code&gt;OVER wname&lt;/code&gt; is not exactly equivalent to &lt;code&gt;OVER (wname ...)&lt;/code&gt;; the latter implies copying and modifying the window definition, and will be rejected if the referenced window specification includes a frame clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cae372b80af0cfebb3aa679b1d67b3beda43fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;word&lt;/code&gt;&lt;code&gt;text&lt;/code&gt; &amp;mdash; the value of a lexeme</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46de996648137fd0a6686acd056352842273049d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;work_mem&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3557d28ebf25cf3af1f97de2b97ca89586e21bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrapped&lt;/code&gt; format is like &lt;code&gt;aligned&lt;/code&gt; but wraps wide data values across lines to make the output fit in the target column width. The target width is determined as described under the &lt;code&gt;columns&lt;/code&gt; option. Note that psql will not attempt to wrap column header titles; therefore, &lt;code&gt;wrapped&lt;/code&gt; format behaves the same as &lt;code&gt;aligned&lt;/code&gt; if the total width needed for column headers exceeds the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb62b864f9bfddd21ee03ef770a6d58e943206d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x NOT IN y&lt;/code&gt; is equivalent to &lt;code&gt;NOT (x IN y)&lt;/code&gt; in all cases. However, null values are much more likely to trip up the novice when working with &lt;code&gt;NOT IN&lt;/code&gt; than when working with &lt;code&gt;IN&lt;/code&gt;. It is best to express your condition positively if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711b9e26a6f8da960fb4daa9fa2e82fc7261fa18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;: Value can be stored compressed inline or stored in &amp;ldquo;secondary&amp;rdquo; storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9607a3ccf396b15304c8f47d6d5c78e5445d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xmlbinary&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68486033008356b4592ac86f2a91ec0daeaf485e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xmloption&lt;/code&gt; (&lt;code&gt;enum&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda2edb96352a2947ce594fb44d23e4cec808aaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xpath_table&lt;/code&gt; is a table function that evaluates a set of XPath queries on each of a set of documents and returns the results as a table. The primary key field from the original document table is returned as the first column of the result so that the result set can readily be used in joins. The parameters are described in &lt;a href=&quot;xml2#XML2-XPATH-TABLE-PARAMETERS&quot;&gt;Table F.35&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3e17f3b19e090b82995c1453b0661cc56e672c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zero_damaged_pages&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31b68da16ec698b82784c3ce9a0fb016104c64c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4bc614572fd148dd18dbb9d7c0e0ab4a55827af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; denotes repetition of the previous item at least &lt;code&gt;m&lt;/code&gt; and not more than &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977f410440db82c21de84af34b9004bba75e5b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;}?&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;&lt;code&gt;}?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43f48ff081ef4f66ae9870366e2209e826eb4f58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="922abc952a4d4731ab933d94ef5bd2ced8bb4bb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,}&lt;/code&gt; denotes repetition of the previous item &lt;code&gt;m&lt;/code&gt; or more times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38749b472a4b5dbcca27984b56775fb2a4b23619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,}?&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;,}?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b8b089e2e96004faa727826de7ee3dbeadc3d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e84bdd0a86e05e42c97302a1a6c5adc577263071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; denotes repetition of the previous item exactly &lt;code&gt;m&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5700e033df8b0d43dbe015a7a62b2862a5e34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;}?&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt;&lt;code&gt;m&lt;/code&gt;&lt;code&gt;}?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2b916920316dca160db87ce1f5c0fb0fbd04d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; denotes alternation (either of two alternatives).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08679ddcc5a5711af2b2e2ba664adcc64faf4f68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;*indexCorrelation&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;*indexCorrelation&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7bf0a577a72785fcc5a30e567e9512240c179582" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;*indexPages&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;*indexPages&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e171c3e6367b8d0f1462b35f799b971ca2544494" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;*indexSelectivity&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;*indexSelectivity&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="75643ccb6fb3481f3833c5cc5c75e201883d597f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;*indexStartupCost&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;*indexStartupCost&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09c4ebda9ff440f88742ec0c00512983d5c84562" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;*indexTotalCost&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;*indexTotalCost&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="03831f2a9c4bf78101885137d820437f313ca2dd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; raised to the power of &lt;em&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ab393acdb377cc2ca4adc994d387404012d1da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;branch_delim&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;branch_delim&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e5efd83777fcdd1b9b01ea651ad7f3a7c5f23180" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;category_sql&lt;/code&gt;&lt;/em&gt; is a SQL statement that produces the set of categories. This statement must return only one column. It must produce at least one row, or an error will be generated. Also, it must not produce duplicate values, or an error will be generated. &lt;em&gt;&lt;code&gt;category_sql&lt;/code&gt;&lt;/em&gt; might be something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162dc8efd9bfbeacc25e399e71727a3ff1240f97" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;classid&lt;/code&gt;&lt;/em&gt;&lt;code&gt;oid&lt;/code&gt;, &lt;em&gt;&lt;code&gt;objid&lt;/code&gt;&lt;/em&gt;&lt;code&gt;oid&lt;/code&gt;, &lt;em&gt;&lt;code&gt;objsubid&lt;/code&gt;&lt;/em&gt;&lt;code&gt;integer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fc61b2c7af01d1cc7307d4dffe166636a9cb64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;conflict_action&lt;/code&gt;&lt;/em&gt; specifies an alternative &lt;code&gt;ON CONFLICT&lt;/code&gt; action. It can be either &lt;code&gt;DO NOTHING&lt;/code&gt;, or a &lt;code&gt;DO UPDATE&lt;/code&gt; clause specifying the exact details of the &lt;code&gt;UPDATE&lt;/code&gt; action to be performed in case of a conflict. The &lt;code&gt;SET&lt;/code&gt; and &lt;code&gt;WHERE&lt;/code&gt; clauses in &lt;code&gt;ON CONFLICT DO UPDATE&lt;/code&gt; have access to the existing row using the table's name (or an alias), and to rows proposed for insertion using the special &lt;code&gt;excluded&lt;/code&gt; table. &lt;code&gt;SELECT&lt;/code&gt; privilege is required on any column in the target table where corresponding &lt;code&gt;excluded&lt;/code&gt; columns are read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edddf0955b5e1de65b258df52a36ca89aadd5ddd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;conflict_target&lt;/code&gt;&lt;/em&gt; can perform &lt;em&gt;unique index inference&lt;/em&gt;. When performing inference, it consists of one or more &lt;code&gt;index_column_name&lt;/code&gt; columns and/or &lt;code&gt;index_expression&lt;/code&gt; expressions, and an optional &lt;code&gt;index_predicate&lt;/code&gt;. All &lt;code&gt;table_name&lt;/code&gt; unique indexes that, without regard to order, contain exactly the &lt;em&gt;&lt;code&gt;conflict_target&lt;/code&gt;&lt;/em&gt;-specified columns/expressions are inferred (chosen) as arbiter indexes. If an &lt;code&gt;index_predicate&lt;/code&gt; is specified, it must, as a further requirement for inference, satisfy arbiter indexes. Note that this means a non-partial unique index (a unique index without a predicate) will be inferred (and thus used by &lt;code&gt;ON CONFLICT&lt;/code&gt;) if such an index satisfying every other criteria is available. If an attempt at inference is unsuccessful, an error is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fa3539fe31e28f49278383ec006e66dcb5f231" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;criteria&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;criteria&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="007fbda2723a9b188d3ba52bab3e8def12de32db" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;document&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;document&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a00f39113739ea184b3b8c8943fe93b57b8b17ed" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2c049889e1a45fcf8852ae26844303f594a51174" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;keyid_fld&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;keyid_fld&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="046ebbd2086f97d47c8de58f27ce1427ad8fd5a6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;loop_count&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;loop_count&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43aea8308ada596da2bfb352ab5c0c8fd5c4a133" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;max_depth&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;max_depth&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="edbbedb025041f89b202448475fdd2356e084088" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;numvals&lt;/code&gt;&lt;/em&gt; is the number of values to be returned from the function. &lt;em&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/em&gt; is the mean of the normal distribution of values and &lt;em&gt;&lt;code&gt;stddev&lt;/code&gt;&lt;/em&gt; is the standard deviation of the normal distribution of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224f0371e20c5c518f09fbacae559849fd98f932" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;orderby_fld&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;orderby_fld&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e59d186c1845092229cf20c5cfea5caab6ea4f65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;parent_keyid_fld&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;parent_keyid_fld&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fefb2e6dea6f4014b8f0dbd0db2e6fa5964e158e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;path&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;path&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3cae1a9e00f749364f4bcdecdeccb46b3ee16fc9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;relation&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;relation&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0b72dc05b9544746bbfb4dc2c469046b21fefa55" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;relname&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;relname&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4365e183324ea44696c2ea6f09d90a51ed49eb71" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;root&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;root&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7a8143187c93f7d311dc72f4c97b8cf46703272a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;source_sql&lt;/code&gt;&lt;/em&gt; is a SQL statement that produces the source set of data. This statement must return one &lt;code&gt;row_name&lt;/code&gt; column, one &lt;code&gt;category&lt;/code&gt; column, and one &lt;code&gt;value&lt;/code&gt; column. It may also have one or more &amp;ldquo;extra&amp;rdquo; columns. The &lt;code&gt;row_name&lt;/code&gt; column must be first. The &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; columns must be the last two columns, in that order. Any columns between &lt;code&gt;row_name&lt;/code&gt; and &lt;code&gt;category&lt;/code&gt; are treated as &amp;ldquo;extra&amp;rdquo;. The &amp;ldquo;extra&amp;rdquo; columns are expected to be the same for all rows with the same &lt;code&gt;row_name&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e968ac76effbd5ae718beb6cbbbddbe2ebeccd7b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;start_with&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;start_with&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="adf8581b6c2b4fb8a5d94c06bc91c684b2f83259" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text&lt;/code&gt;, &lt;em&gt;&lt;code&gt;object_names&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text[]&lt;/code&gt;, &lt;em&gt;&lt;code&gt;object_args&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac020bf0f4869d232152eb65b1f0169b56870218" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text&lt;/code&gt;, &lt;em&gt;&lt;code&gt;schema&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text&lt;/code&gt;, &lt;em&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text&lt;/code&gt;, &lt;em&gt;&lt;code&gt;identity&lt;/code&gt;&lt;/em&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47529c3dbf206a9eea630de86005653c9eafc19f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;xid&lt;/code&gt;&lt;/em&gt;&lt;code&gt;xid&lt;/code&gt;, &lt;em&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/em&gt;&lt;code&gt;timestamp with time zone&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4c76ac83d13b8472d8232bbf68ab81c641116d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;xpaths&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;xpaths&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1d5cb107d8335886a4194788aaa23b97e524de31" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Aggregate functions&lt;/em&gt; compute a single result from a set of input values. The built-in general-purpose aggregate functions are listed in &lt;a href=&quot;functions-aggregate#FUNCTIONS-AGGREGATE-TABLE&quot;&gt;Table 9.55&lt;/a&gt; and statistical aggregates in &lt;a href=&quot;functions-aggregate#FUNCTIONS-AGGREGATE-STATISTICS-TABLE&quot;&gt;Table 9.56&lt;/a&gt;. The built-in within-group ordered-set aggregate functions are listed in &lt;a href=&quot;functions-aggregate#FUNCTIONS-ORDEREDSET-TABLE&quot;&gt;Table 9.57&lt;/a&gt; while the built-in within-group hypothetical-set ones are in &lt;a href=&quot;functions-aggregate#FUNCTIONS-HYPOTHETICAL-TABLE&quot;&gt;Table 9.58&lt;/a&gt;. Grouping operations, which are closely related to aggregate functions, are listed in &lt;a href=&quot;functions-aggregate#FUNCTIONS-GROUPING-TABLE&quot;&gt;Table 9.59&lt;/a&gt;. The special syntax considerations for aggregate functions are explained in &lt;a href=&quot;sql-expressions#SYNTAX-AGGREGATES&quot;&gt;Section 4.2.7&lt;/a&gt;. Consult &lt;a href=&quot;tutorial-agg&quot;&gt;Section 2.7&lt;/a&gt; for additional introductory information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8214a3788084ff6c4eb2dd478c713ea9888eb7dd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Asynchronous commit&lt;/em&gt; is an option that allows transactions to complete more quickly, at the cost that the most recent transactions may be lost if the database should crash. In many applications this is an acceptable trade-off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67da3a93e56e5c9912bca6f7d7269468a1eeabbd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Boolean:&lt;/em&gt; Values can be written as &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; (all case-insensitive) or any unambiguous prefix of one of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ef43f05ac2293ea6d45526be7edd8373a6741f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;CJKV Information Processing: Chinese, Japanese, Korean &amp;amp; Vietnamese Computing&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafb5e523ebc2759ed7b398af1878485f6020503" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Channel binding&lt;/em&gt; is supported in PostgreSQL builds with SSL support. The SASL mechanism name for SCRAM with channel binding is &lt;code&gt;SCRAM-SHA-256-PLUS&lt;/code&gt;. The channel binding type used by PostgreSQL is &lt;code&gt;tls-server-end-point&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1746a9db9f77ea269cca69d873a1a66eb42a5945" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Character-entry escapes&lt;/em&gt; exist to make it easier to specify non-printing and other inconvenient characters in REs. They are shown in &lt;a href=&quot;functions-matching#POSIX-CHARACTER-ENTRY-ESCAPES-TABLE&quot;&gt;Table 9.19&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1177113e348af3c20be6f5ff0dfb5c6c687f2b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Checkpoints&lt;/em&gt; are points in the sequence of transactions at which it is guaranteed that the heap and index data files have been updated with all information written before that checkpoint. At checkpoint time, all dirty data pages are flushed to disk and a special checkpoint record is written to the log file. (The change records were previously flushed to the WAL files.) In the event of a crash, the crash recovery procedure looks at the latest checkpoint record to determine the point in the log (known as the redo record) from which it should start the REDO operation. Any changes made to data files before that point are guaranteed to be already on disk. Hence, after a checkpoint, log segments preceding the one containing the redo record are no longer needed and can be recycled or removed. (When WAL archiving is being done, the log segments must be archived before being recycled or removed.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86edffd3d1514d94c7718ab9e49a1b26e732f6b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Class-shorthand escapes&lt;/em&gt; provide shorthands for certain commonly-used character classes. They are shown in &lt;a href=&quot;functions-matching#POSIX-CLASS-SHORTHAND-ESCAPES-TABLE&quot;&gt;Table 9.20&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a314d0c52fbbc626213e0b1751e246d2cd4e62" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Constraint exclusion&lt;/em&gt; is a query optimization technique similar to partition pruning. While it is primarily used for partitioning implemented using the legacy inheritance method, it can be used for other purposes, including with declarative partitioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ad32fdb427cd79b7de7c814bb207a8997cba61" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Converting tokens into &lt;em&gt;lexemes&lt;/em&gt;&lt;/em&gt;. A lexeme is a string, just like a token, but it has been &lt;em&gt;normalized&lt;/em&gt; so that different forms of the same word are made alike. For example, normalization almost always includes folding upper-case letters to lower-case, and often involves removal of suffixes (such as &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;es&lt;/code&gt; in English). This allows searches to find variant forms of the same word, without tediously entering all the possible variants. Also, this step typically eliminates &lt;em&gt;stop words&lt;/em&gt;, which are words that are so common that they are useless for searching. (In short, then, tokens are raw fragments of the document text, while lexemes are words that are believed useful for indexing and searching.) PostgreSQL uses &lt;em&gt;dictionaries&lt;/em&gt; to perform this step. Various standard dictionaries are provided, and custom ones can be created for specific needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df24a59b21d5225f90b1ece33b954cb7275bd48c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EUC_CN&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dee5f77421e8fec8f42879e2140d68a06936c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EUC_JIS_2004&lt;/em&gt;, &lt;code&gt;SHIFT_JIS_2004&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecac68322657431938c891cb5cc816f6e790b28c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EUC_JP&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;SJIS&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa5e0089fcc0c91d04c1ee58e872a9466df2c3d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EUC_KR&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a009a811c6851a73b93db003cbf3565542277b61" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EUC_TW&lt;/em&gt;, &lt;code&gt;BIG5&lt;/code&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cacab323d95e2f15b9c00871a7d032268cd2943" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Enumerated:&lt;/em&gt; Enumerated-type parameters are written in the same way as string parameters, but are restricted to have one of a limited set of values. The values allowable for such a parameter can be found from &lt;code&gt;pg_settings&lt;/code&gt;.&lt;code&gt;enumvals&lt;/code&gt;. Enum parameter values are case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bc2ec828d82bebf5324957f853d4d0729d86b4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Escapes&lt;/em&gt; are special sequences beginning with &lt;code&gt;\&lt;/code&gt; followed by an alphanumeric character. Escapes come in several varieties: character entry, class shorthands, constraint escapes, and back references. A &lt;code&gt;\&lt;/code&gt; followed by an alphanumeric character but not constituting a valid escape is illegal in AREs. In EREs, there are no escapes: outside a bracket expression, a &lt;code&gt;\&lt;/code&gt; followed by an alphanumeric character merely stands for that character as an ordinary character, and inside a bracket expression, &lt;code&gt;\&lt;/code&gt; is an ordinary character. (The latter is the one actual incompatibility between EREs and AREs.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c758d2550d19e89a877d26c190a2c3a1b2c43a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ISO_8859_5&lt;/em&gt;, &lt;code&gt;KOI8R&lt;/code&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WIN866&lt;/code&gt;, &lt;code&gt;WIN1251&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716bb6bb7e1e1628689277478d54aa8be83cf76e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ISO_8859_6&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c72eb36792e3c28a05c793befa10bb6f4bb7fc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ISO_8859_7&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9857c7fc9291bbff4bf6d0e04f319b1b072c939c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ISO_8859_8&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3cdfd393c7b7f0b8c998b7e29790739ca19887" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;KOI8R&lt;/em&gt;, &lt;code&gt;ISO_8859_5&lt;/code&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WIN866&lt;/code&gt;, &lt;code&gt;WIN1251&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c45fcfdf8145102e830a70edd2bbf74d3158cb2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;KOI8U&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b270a2e72293f66624aa51fc33f369ff822390" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN10&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c023c6b3592b0e6ad66075005eee4c0eeab805a7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN1&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd4a0e8c9b3dd67ed054913c289287de062f41c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN2&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WIN1250&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7135ab72cf34b11fbf389da6aa4931db0945f1e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN3&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b998be04c0e71d6c9fce828341b95f94f0587c94" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN4&lt;/em&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5a3bc2c6e90805eb55b60a1b1d60b15639d94f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN5&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c664cf3a44a428ca9533b710559ca7743475841f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN6&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e3dc1d0487f8d4cf59ec91fca7470e32632ec1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN7&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43c258dac0a21f7f232a116b5d172aec5b1d32c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN8&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21444621ef6b7bc35c63d2031212d0ce2a807060" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;LATIN9&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed62b6e7c71963652f983c9a80127cfe074edbd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Locale&lt;/em&gt; support refers to an application respecting cultural preferences regarding alphabets, sorting, number formatting, etc. PostgreSQL uses the standard ISO C and POSIX locale facilities provided by the server operating system. For additional information refer to the documentation of your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f389270c34a9324aa2a1115cd6b139c6a74607" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;MULE_INTERNAL&lt;/em&gt;, &lt;code&gt;BIG5&lt;/code&gt;, &lt;code&gt;EUC_CN&lt;/code&gt;, &lt;code&gt;EUC_JP&lt;/code&gt;, &lt;code&gt;EUC_KR&lt;/code&gt;, &lt;code&gt;EUC_TW&lt;/code&gt;, &lt;code&gt;ISO_8859_5&lt;/code&gt;, &lt;code&gt;KOI8R&lt;/code&gt;, &lt;code&gt;LATIN1&lt;/code&gt; to &lt;code&gt;LATIN4&lt;/code&gt;, &lt;code&gt;SJIS&lt;/code&gt;, &lt;code&gt;WIN866&lt;/code&gt;, &lt;code&gt;WIN1250&lt;/code&gt;, &lt;code&gt;WIN1251&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba5075dc3005343dcd87b27e805e43126220fc9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Multixact IDs&lt;/em&gt; are used to support row locking by multiple transactions. Since there is only limited space in a tuple header to store lock information, that information is encoded as a &amp;ldquo;multiple transaction ID&amp;rdquo;, or multixact ID for short, whenever there is more than one transaction concurrently locking a row. Information about which transaction IDs are included in any particular multixact ID is stored separately in the &lt;code&gt;pg_multixact&lt;/code&gt; subdirectory, and only the multixact ID appears in the &lt;code&gt;xmax&lt;/code&gt; field in the tuple header. Like transaction IDs, multixact IDs are implemented as a 32-bit counter and corresponding storage, all of which requires careful aging management, storage cleanup, and wraparound handling. There is a separate storage area which holds the list of members in each multixact, which also uses a 32-bit counter and which must also be managed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a0c38fdef2fbcca6a6dca21b06d539caf86f2a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Non-greedy&lt;/em&gt; quantifiers (available in AREs only) match the same possibilities as their corresponding normal (&lt;em&gt;greedy&lt;/em&gt;) counterparts, but prefer the smallest number rather than the largest number of matches. See &lt;a href=&quot;functions-matching#POSIX-MATCHING-RULES&quot;&gt;Section 9.7.3.5&lt;/a&gt; for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45dc7c2e2fb948c493484073bc5d89197dc3f57" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;None&lt;/em&gt; of these metasyntax extensions is available if an initial &lt;code&gt;***=&lt;/code&gt; director has specified that the user's input be treated as a literal string rather than as an RE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e6f2af79f80510798c0122358bee0597b0f3fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Numeric (integer and floating point):&lt;/em&gt; Numeric parameters can be specified in the customary integer and floating-point formats; fractional values are rounded to the nearest integer if the parameter is of integer type. Integer parameters additionally accept hexadecimal input (beginning with &lt;code&gt;0x&lt;/code&gt;) and octal input (beginning with &lt;code&gt;0&lt;/code&gt;), but these formats cannot have a fraction. Do not use thousands separators. Quotes are not required, except for hexadecimal input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c840d9da181d15856fcd3860d410fac133e6e3c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Numeric with Unit:&lt;/em&gt; Some numeric parameters have an implicit unit, because they describe quantities of memory or time. The unit might be bytes, kilobytes, blocks (typically eight kilobytes), milliseconds, seconds, or minutes. An unadorned numeric value for one of these settings will use the setting's default unit, which can be learned from &lt;code&gt;pg_settings&lt;/code&gt;.&lt;code&gt;unit&lt;/code&gt;. For convenience, settings can be given with a unit specified explicitly, for example &lt;code&gt;'120 ms'&lt;/code&gt; for a time value, and they will be converted to whatever the parameter's actual unit is. Note that the value must be written as a string (with quotes) to use this feature. The unit name is case-sensitive, and there can be whitespace between the numeric value and the unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf406b272a62ecf02de7f3946eece0fb3c63647" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parsing documents into &lt;em&gt;tokens&lt;/em&gt;&lt;/em&gt;. It is useful to identify various classes of tokens, e.g., numbers, words, complex words, email addresses, so that they can be processed differently. In principle token classes depend on the specific application, but for most purposes it is adequate to use a predefined set of classes. PostgreSQL uses a &lt;em&gt;parser&lt;/em&gt; to perform this step. A standard parser is provided, and custom parsers can be created for specific needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b10ce3508f348a279c07f6a500e414dea90a8f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Partition pruning&lt;/em&gt; is a query optimization technique that improves performance for declaratively partitioned tables. As an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c776df2595ea943589abdafb89e6ebaf6016b79" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Read Committed&lt;/em&gt; is the default isolation level in PostgreSQL. When a transaction uses this isolation level, a &lt;code&gt;SELECT&lt;/code&gt; query (without a &lt;code&gt;FOR UPDATE/SHARE&lt;/code&gt; clause) sees only data committed before the query began; it never sees either uncommitted data or changes committed during query execution by concurrent transactions. In effect, a &lt;code&gt;SELECT&lt;/code&gt; query sees a snapshot of the database as of the instant the query begins to run. However, &lt;code&gt;SELECT&lt;/code&gt; does see the effects of previous updates executed within its own transaction, even though they are not yet committed. Also note that two successive &lt;code&gt;SELECT&lt;/code&gt; commands can see different data, even though they are within a single transaction, if other transactions commit changes after the first &lt;code&gt;SELECT&lt;/code&gt; starts and before the second &lt;code&gt;SELECT&lt;/code&gt; starts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26b53c0345c973c89084a74cb19c573144c491d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SASL&lt;/em&gt; is a framework for authentication in connection-oriented protocols. At the moment, PostgreSQL implements two SASL authentication mechanisms, SCRAM-SHA-256 and SCRAM-SHA-256-PLUS. More might be added in the future. The below steps illustrate how SASL authentication is performed in general, while the next subsection gives more details on SCRAM-SHA-256 and SCRAM-SHA-256-PLUS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75576cdfd39e32a78115bf7a1b9f968c42f6bab7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Storing preprocessed documents optimized for searching&lt;/em&gt;. For example, each document can be represented as a sorted array of normalized lexemes. Along with the lexemes it is often desirable to store positional information to use for &lt;em&gt;proximity ranking&lt;/em&gt;, so that a document that contains a more &amp;ldquo;dense&amp;rdquo; region of query words is assigned a higher rank than one with scattered query words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f168a879ec2bcdf637b7797e5992202411930961" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;String:&lt;/em&gt; In general, enclose the value in single quotes, doubling any single quotes within the value. Quotes can usually be omitted if the value is a simple number or identifier, however. (Values that match a SQL keyword require quoting in some contexts.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13583217f72faa2dd3d7a9c7944d18afff0ea403" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Suffix truncation&lt;/em&gt; always removes non-key columns from upper B-Tree levels. As payload columns, they are never used to guide index scans. The truncation process also removes one or more trailing key column(s) when the remaining prefix of key column(s) happens to be sufficient to describe tuples on the lowest B-Tree level. In practice, covering indexes without an &lt;code&gt;INCLUDE&lt;/code&gt; clause often avoid storing columns that are effectively payload in the upper levels. However, explicitly defining payload columns as non-key columns &lt;em&gt;reliably&lt;/em&gt; keeps the tuples in upper levels small.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497e71192e2e1c58ce3b495b9f024a61e6a43500" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Text search configurations&lt;/em&gt; select a parser and a set of dictionaries to use to normalize the tokens produced by the parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b474b828e25564bfc8cf7804a00a8f2e77635c3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Text search dictionaries&lt;/em&gt; convert tokens to normalized form and reject stop words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be5850e9095ebd82e3a440f204f9c94aeb1bb07" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Text search parsers&lt;/em&gt; break documents into tokens and classify each token (for example, as words or numbers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c636042d3e6e2cbd35f6e7470136ff24fb77a4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Text search templates&lt;/em&gt; provide the functions underlying dictionaries. (A dictionary simply specifies a template and a set of parameters for the template.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65b1026adaf3bce4bee8a95d98399c15f3b6fa7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Transactions&lt;/em&gt; are a fundamental concept of all database systems. The essential point of a transaction is that it bundles multiple steps into a single, all-or-nothing operation. The intermediate states between the steps are not visible to other concurrent transactions, and if some failure occurs that prevents the transaction from completing, then none of the steps affect the database at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eaaba38ea3fcb80845c2715b34a87985690fbb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1250&lt;/em&gt;, &lt;code&gt;LATIN2&lt;/code&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f33740a9db673e3a5ffc13422e335c9ef0ff8d7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1251&lt;/em&gt;, &lt;code&gt;ISO_8859_5&lt;/code&gt;, &lt;code&gt;KOI8R&lt;/code&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WIN866&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d80604734f96784dc9240375b708b388fc0994" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1252&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a079b34fdb379caea8ef38bfb66b89e895e967aa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1253&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75fc7323215fd2195d11159fb989d46e722e4b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1254&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77534077c65d37fd285e89f646fe1fa491b7782" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1255&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b422c0f2356d3f28e17b80eaa09c005651a3840" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1256&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f2e922d46a9a8b013976dfb6d033c3c4b4d8be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1257&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22de9c6c08877d8b6442a9bd33d9a3e1bc81cc31" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN1258&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef4046c16caf5968e67e18c4b55a52ddadd2ba6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN866&lt;/em&gt;, &lt;code&gt;ISO_8859_5&lt;/code&gt;, &lt;code&gt;KOI8R&lt;/code&gt;, &lt;code&gt;MULE_INTERNAL&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WIN1251&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf1f9c73f1f44bc44fd3fd302b76b2087da001a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WIN874&lt;/em&gt;, &lt;code&gt;UTF8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ecb5697e725eb765c77c0afbe8a1f288bfbd76" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Weak&lt;/em&gt; mode is used to be able to insert invalid data into a table. Invalid means the check digit is wrong, not that there are missing numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa268182f18b440e982bf70016e4474c4715f217" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Window functions&lt;/em&gt; provide the ability to perform calculations across sets of rows that are related to the current query row. See &lt;a href=&quot;tutorial-window&quot;&gt;Section 3.5&lt;/a&gt; for an introduction to this feature, and &lt;a href=&quot;sql-expressions#SYNTAX-WINDOW-FUNCTIONS&quot;&gt;Section 4.2.8&lt;/a&gt; for syntax details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516194cb97608a027c3861f7b82e7a3a0f0c79a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Write-Ahead Logging&lt;/em&gt; (WAL) is a standard method for ensuring data integrity. A detailed description can be found in most (if not all) books about transaction processing. Briefly, WAL's central concept is that changes to data files (where tables and indexes reside) must be written only after those changes have been logged, that is, after log records describing the changes have been flushed to permanent storage. If we follow this procedure, we do not need to flush data pages to disk on every transaction commit, because we know that in the event of a crash we will be able to recover the database using the log: any changes that have not been applied to the data pages can be redone from the log records. (This is roll-forward recovery, also known as REDO.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780911003fb28a8732bf6024ea6e27d179f1c865" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;all supported encodings&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9bc9bb912488a9323e19ef50381a3d0e267a62" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;all&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;all&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b2c6f1bbc5b610da9fa2a449fab217910ca6f370" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;any (no conversion will be performed)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a88a70f28eea7505a4745ef400e6ee503235e73" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;any&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;any&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ab753fb02c4bd4f71bd1688c51602e2272509d3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;hash join&lt;/em&gt;: the right relation is first scanned and loaded into a hash table, using its join attributes as hash keys. Next the left relation is scanned and the appropriate values of every row found are used as hash keys to locate the matching rows in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00245d60ba0c0f66e48791cfd45f0b92a5975a88" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;merge join&lt;/em&gt;: Each relation is sorted on the join attributes before the join starts. Then the two relations are scanned in parallel, and matching rows are combined to form join rows. This kind of join is more attractive because each relation has to be scanned only once. The required sorting might be achieved either by an explicit sort step, or by scanning the relation in the proper order using an index on the join key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d012a2b62d36839e5e313666462545c24f56783e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;negative lookahead&lt;/em&gt; matches at any point where no substring matching &lt;code&gt;re&lt;/code&gt; begins (AREs only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778fc5b735ee786a1f8c1819c7f17b0535f9b051" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;negative lookbehind&lt;/em&gt; matches at any point where no substring matching &lt;code&gt;re&lt;/code&gt; ends (AREs only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548723e0b8894f684400c7b52e249f09def7e5b2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;nested loop join&lt;/em&gt;: The right relation is scanned once for every row found in the left relation. This strategy is easy to implement but can be very time consuming. (However, if the right relation can be scanned with an index scan, this can be a good strategy. It is possible to use values from the current row of the left relation as keys for the index scan of the right.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf1ca3d76fc6f5cb59b0baaddf3d42f0e4440fe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;not supported as a server encoding&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8462f35b532ddd676880cd025c87b26419c582da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;positive lookahead&lt;/em&gt; matches at any point where a substring matching &lt;code&gt;re&lt;/code&gt; begins (AREs only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c41905e91de0053f0cd88c73dbfd8410d3b1d4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;positive lookbehind&lt;/em&gt; matches at any point where a substring matching &lt;code&gt;re&lt;/code&gt; ends (AREs only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409bdf5474b7f65b746a26d434aaf9ea8b5e177f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ad-hoc bulk editing: &lt;/strong&gt;&lt;code&gt;reformat_dat_file.pl&lt;/code&gt; can be adapted to perform many kinds of bulk changes. Look for its block comments showing where one-off code can be inserted. In the following example, we are going to consolidate two boolean fields in &lt;code&gt;pg_proc&lt;/code&gt; into a char field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3cf008414db663ab33045dc7f75d1b6f4346e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add a default value to an existing column that doesn't have one: &lt;/strong&gt; Add a &lt;code&gt;BKI_DEFAULT&lt;/code&gt; annotation to the header file, then run &lt;code&gt;make reformat-dat-files&lt;/code&gt; to remove now-redundant field entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a79461682d08e1d259a407ff1310734027af7e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add a new column with a default to a catalog: &lt;/strong&gt; Add the column to the header file with a &lt;code&gt;BKI_DEFAULT(value)&lt;/code&gt; annotation. The data file need only be adjusted by adding the field in existing rows where a non-default value is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed99e9035e544c847b64f2c38f413abe4d47196a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Adjust authentication&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499064c148761e02f5d5fd1b0072f63b38b2aa6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Change or remove an existing default value: &lt;/strong&gt; You cannot simply change the header file, since that will cause the current data to be interpreted incorrectly. First run &lt;code&gt;make expand-dat-files&lt;/code&gt; to rewrite the data files with all default values inserted explicitly, then change or remove the &lt;code&gt;BKI_DEFAULT&lt;/code&gt; annotation, then run &lt;code&gt;make reformat-dat-files&lt;/code&gt; to remove superfluous fields again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5cbc0f980c9f85320a8d796ea6b3369e2fdd4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 00 &amp;mdash; Successful Completion&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497d9a2320fbb7b72aadb0b0e915c00bd12dd91f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 01 &amp;mdash; Warning&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81a0f14d4d1d8005ffa7ff9a61d1396d05f6975" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 02 &amp;mdash; No Data (this is also a warning class per the SQL standard)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e7fce51309fb5fd155ba96e71075063717e6cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 03 &amp;mdash; SQL Statement Not Yet Complete&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dce40ec15a03f8e9a6a151abbf79be084d693df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 08 &amp;mdash; Connection Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea10b1e9d9687c5488056046b254e8ef25ff9ab0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 09 &amp;mdash; Triggered Action Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5273d01384f2749037e68cb93aaebf47335d23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 0A &amp;mdash; Feature Not Supported&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473ae17497e5ad3eb09b438549c31b17cceae90b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 0B &amp;mdash; Invalid Transaction Initiation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1deca75f89548399fe631627656d11c9485696d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 0F &amp;mdash; Locator Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd28af4be7c61f0ece4303a71d733adb6879582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 0L &amp;mdash; Invalid Grantor&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bd212f8149b1bdf5685d2791cf3499695d6acd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 0P &amp;mdash; Invalid Role Specification&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72487cd8b308cd3f2d539b66969015025d81f964" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 0Z &amp;mdash; Diagnostics Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de50c5264a75ff43950e118c60675de43bf2b443" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 20 &amp;mdash; Case Not Found&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29239c5b9baf49c8acb2f8d7376da46366441a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 21 &amp;mdash; Cardinality Violation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c333ecb32858de1a2645d23f20607747cd34b1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 22 &amp;mdash; Data Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b7604b5f06db351ac4db52696e823065f9503f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 23 &amp;mdash; Integrity Constraint Violation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0ef39583c2ab13744f1988e211e2abbaeb0212" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 24 &amp;mdash; Invalid Cursor State&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ef92d2ae2689e0d0584e7be2dc76ca24317967" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 25 &amp;mdash; Invalid Transaction State&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5473c08b22ed1654ed462b35a4548af3c3d26f95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 26 &amp;mdash; Invalid SQL Statement Name&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eae9905b94aa0ab86cb78cb590271484c1fa26e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 27 &amp;mdash; Triggered Data Change Violation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a930b85c0dca5fd99619791a55055b91a6180df6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 28 &amp;mdash; Invalid Authorization Specification&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bdaea86b5cd90a7f3f68c1d1eebc2508d3ac53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 2B &amp;mdash; Dependent Privilege Descriptors Still Exist&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1466d246f17631c4cee3aa9307f9c75d83042e04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 2D &amp;mdash; Invalid Transaction Termination&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ecd8cdd38a869e83266ad3f422326405974ec3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 2F &amp;mdash; SQL Routine Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff84ed4eb863f5db493fa5b2be4730ebe02a0255" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 34 &amp;mdash; Invalid Cursor Name&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80be408389c09c92b78637fd644db7d689206059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 38 &amp;mdash; External Routine Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d402b3d8e85c8a058775564d5ed2e80ba871ed7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 39 &amp;mdash; External Routine Invocation Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950dc7cc2e10378d6f68e863178ea9d008e44dfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 3B &amp;mdash; Savepoint Exception&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ab4e417fdf64187968ecad73124d4c6071444f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 3D &amp;mdash; Invalid Catalog Name&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978669ae02edcb4f0d4274ce0d6f0f11b27cf026" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 3F &amp;mdash; Invalid Schema Name&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb9b363814455888b295cc360233aaea95b68ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 40 &amp;mdash; Transaction Rollback&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564037a6fc3408d430e67198a0d894b268ea336e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 42 &amp;mdash; Syntax Error or Access Rule Violation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca35befcad623d332706fc5a19895a86beae5cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 44 &amp;mdash; WITH CHECK OPTION Violation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfd9ed712d730ac4597d977ba222b97f879bfb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 53 &amp;mdash; Insufficient Resources&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545e8a06c0dc03e71c84a3a55e4bcaf18d01b512" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 54 &amp;mdash; Program Limit Exceeded&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b14b1172b833fc1fc3bf67ea2ca108850aff58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 55 &amp;mdash; Object Not In Prerequisite State&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245464a11268e11a33c3f841162ab184ec178ae3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 57 &amp;mdash; Operator Intervention&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244fb65ee6c6dbb05082ac36007e23dfd70db225" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 58 &amp;mdash; System Error (errors external to PostgreSQL itself)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44659ed03512de9969897ed68ab9055d1ed2198" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class 72 &amp;mdash; Snapshot Failure&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3252b908e8eded6831c15f48e07d680b5f771972" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class F0 &amp;mdash; Configuration File Error&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7781ff50ad22f398a2788d89cec7a569caa62857" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class HV &amp;mdash; Foreign Data Wrapper Error (SQL/MED)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2620131926eab5f1097a2cbcda0f3610062b9175" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class P0 &amp;mdash; PL/pgSQL Error&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675487e564ec99218e6e47f80ebec98ad3ec6c08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class XX &amp;mdash; Internal Error&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e556aba05939354c821f88f881a0555e588f6ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configure streaming replication and log-shipping standby servers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648a036b3ffbbd844438799e52607cb8a884b575" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cost Estimation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d437c4e3abbcee3474afef97e3ea4c9630d93e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Delete old cluster&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9bf95099ae38736ccb409d6f4fc00fa5e02129" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.1. Factorial Operator Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f442cf717f37d69fae20584631c4fa375b0bfa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.10. Type Resolution with Underspecified Types in a Union&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3198e7c2ed189c18e2ff330225bd2fed4ae6b4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.11. Type Resolution in a Simple Union&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc5ac2a3a9dd262c9cca918fc30ef9b6d60af4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.12. Type Resolution in a Transposed Union&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba1e753a86955bbc05ca9ecd0e9192a1c29d511" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.13. Type Resolution in a Nested Union&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2fcc00ee4b7cca7884ebc15485d002ff082d18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.2. String Concatenation Operator Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a076a84e9f777023d91b75b47a9de6e5bf1c359" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.3. Absolute-Value and Negation Operator Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9364c66d65304aab0bb5a8b0207cdea31fd3957c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.4. Array Inclusion Operator Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5f3e3ffb9172aae4aafb3bc9874a918ae2125a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.5. Custom Operator on a Domain Type&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6640091aa8b30a0f8a6aa56127f157737a781c39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.6. Rounding Function Argument Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daaee090a02285a720c0416ae290b7c0e1df08c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.7. Variadic Function Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a1bd71dd542c0d274091466f000db30ddab0a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.8. Substring Function Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fa8a0b7e640ba1396d56d88e0363e446f6d891" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 10.9. &lt;code&gt;character&lt;/code&gt; Storage Type Conversion&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f6d69687834f525bef7353a8e5091c9d784a8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.1. Setting up a Partial Index to Exclude Common Values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd79ae81ec05631e80ac67c474635945b6216664" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.2. Setting up a Partial Index to Exclude Uninteresting Values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7eb2b40d13d6567149dfb90a9770eab32c4f6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.3. Setting up a Partial Unique Index&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc635c5310410ac707cd867d77a818e45208c535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 20.1. Example &lt;code&gt;pg_hba.conf&lt;/code&gt; Entries&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da49a91d51ae941a9ef2df89ad96d6c06ffc237d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 20.2. An Example &lt;code&gt;pg_ident.conf&lt;/code&gt; File&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65e6766231145b3c6187f55306c195f082891c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 8.1. Using the Character Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3f1ed4d5db09700ca7d7149f7cbbb68564e06d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 8.2. Using the &lt;code&gt;boolean&lt;/code&gt; Type&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b561ba56a0348a219cd6b6f02abba1ffe8b16b97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 8.3. Using the Bit String Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dda2da9d6cb88c4211adf49c2e467db55fce5a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example F.1. Create a Foreign Table for PostgreSQL CSV Logs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ac8497c8521829b7202b7c3d12fe7dd331bb02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example: &lt;/strong&gt; Here is an example of how you would add a probe to trace all new transactions by transaction ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fab945b283fe2a38fe590c21d219ddc01313dc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exercise: &lt;/strong&gt; Attempt to determine the semantics of this query when the &lt;code&gt;WHERE&lt;/code&gt; clause is omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3e29f422a4ece4bda377409cb7e670a75f9f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exercise: &lt;/strong&gt; There are also right outer joins and full outer joins. Try to find out what those do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a7fea77b09e78caa3f22944ba6dbdff435f49a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 59.1. Structured Diagram of a Genetic Algorithm&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a255574d63d9cadc888d9e1f5877efb4cb3e34f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 66.1. GIN Internals&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822060831dcf276f1ade455e845489d0fe5747b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 68.1. Page Layout&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b6dff9431c3cd3bded3df4accfcd65d87a50a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 9.1. XSLT Stylesheet for Converting SQL/XML Output to HTML&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c78f34d08d90efcbd8218e1f78cf15e84b839c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For source installs, build the new version&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c9654e3922424c8232ec5a36d441fff7c47db3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Function Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b12abcd0f51e15ca13d53a29011ccd962da0c7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Initialize the new PostgreSQL cluster&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae228918e14ae0a7078d0136445bbc990538979" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Install custom shared object files&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cad27cd5e16819b9c3d70c598f2f42eabecb720" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Install the new PostgreSQL binaries on standby servers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d03b4d1e35a5165d78f229bedabb61f27c77bfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Install the new PostgreSQL binaries&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd83ff7d4d3dbcc236103a414c9f5b057b0bcfad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Join Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcf1ae1fa7365403a89293e42f9687686ae6c76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make sure the new standby data directories do &lt;em&gt;not&lt;/em&gt; exist&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57eface75d70fe059ad49741276ac6c05d4a266b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Operator Type Resolution&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cf52ee42899af75539e47104e717a8c3769b48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Optionally move the old cluster&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbb1ea6da9f01d564108d12568ed43e01a2dd8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Post-upgrade processing&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db6cd81cf15ae1d51fa3d96f63902781f97eadb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prepare for standby server upgrades&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a7a5dd1298406bf8e65f8d49e389626de27751" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Recursive Query Evaluation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9103c3dd48157874791a8352774bc83dc9e2524b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove a column, whether it has a default or not: &lt;/strong&gt; Remove the column from the header, then run &lt;code&gt;make reformat-dat-files&lt;/code&gt; to remove now-useless field entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5af9fddfebaf0939e43e5f58018a32db84be40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Restore &lt;code&gt;pg_hba.conf&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b426469d11750520d687e0566d179572ad7cc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reverting to old cluster&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b513159c9cc0db6fb21cf875a4866c04e583f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Row-Level Lock Modes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5152fd5e258dc93d7de3c4039a290df168ef3865" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Run pg_upgrade&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cb2e9b1181fb7bda5e5e3a982c6ef0bcacb3db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Run rsync&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5f49acb2e02dac04cd1d9367c5915c07288ed6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SASL Authentication Message Flow&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dd43cc5f0978e13cbb4e95a04c0a3635824c15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Save configuration files&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd5768d5236a4688ed9c8081e7cbc525326939b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Start the new server&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7ebf3e5be2cdc6f049a3580f021f0eea8fe2b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Statistics&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Statistics&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e24b78088976103994d48b12fdb12efe1a03c9ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stop both servers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67de35aab218c7c8aeda16e1b728d286c843dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stop standby servers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6326e7b1ceb0510ba42859faff5abc84a76dd80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 12.1. Default Parser's Token Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1cb2b95a1d64d523a885ce301948d7e06ca1de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 13.1. Transaction Isolation Levels&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e4f4a519ae7ad681a3d83a3c15ae1ef2e46f6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 13.2. Conflicting Lock Modes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63365c9782598790ae7f261023689db615abbb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 13.3. Conflicting Row-Level Locks&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332039db9a2fc01919afead54aae6464e4d34700" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 18.1. System V IPC Parameters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04beca40f52931618e0b315935194e8f6c2c0652" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 18.2. SSL Server File Usage&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b5e349d70c94afc2ec82cbaceae3ebdf4a5186" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 19.1. Message Severity Levels&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7b778ad286f696c481f569839a2f40e530f38e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 19.2. Short Option Key&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223b3594cf15a3de980b32660a62eff9f820e13e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 21.1. Default Roles&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482e7bd8e0b7d1c81368af6bcc2e1d3b5779c4c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 23.1. PostgreSQL Character Sets&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b134bb666685cbaeaa1a76d3917c0631f30bee0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 23.2. Client/Server Character Set Conversions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa51b5f7f71226eb23b1ccbf0dafceaaecdf458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 256. Policies Applied by Command Type&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ed146dda8f5b4e72621157aac3fc8c5d8e1066" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 257. Automatic Variables&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dc77f00ca45ce3d0eea54d76686d0583403f01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 258. pgbench Operators by Increasing Precedence&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9875b29814eeda7992eab4a85deae02d1b5705a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 259. pgbench Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44427da960b33a07cc02e10e0ac3fdee1c20f697" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 26.1. High Availability, Load Balancing, and Replication Feature Matrix&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa457387e72fa87f36bc9df05b982b551b58679" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.1. Dynamic Statistics Views&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aca2b188c2ffa590d6ac5492090a2dc22669453" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.10. &lt;code&gt;pg_stat_archiver&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981684e435477df6eee0aa867f84368d0d7e1b6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.11. &lt;code&gt;pg_stat_bgwriter&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334c5e226fd83541b371a26a76f5863a70c3c491" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.12. &lt;code&gt;pg_stat_database&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a72df2cddfd8e9fbe49e5f42583db9767d89dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.13. &lt;code&gt;pg_stat_database_conflicts&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25174d4a0535b874ec45f6d829393bf13661faf8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.14. &lt;code&gt;pg_stat_all_tables&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5092529065a6960fe13963d16d7a33cfb1414fbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.15. &lt;code&gt;pg_stat_all_indexes&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc786dcef407e94dfb4a9054a8f907376b94c66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.16. &lt;code&gt;pg_statio_all_tables&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6119b9576c0e317be0ed35eed4ae0bb0f39a90e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.17. &lt;code&gt;pg_statio_all_indexes&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb036a163aec9ac50d4cdeaa356b173f94d3ae5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.18. &lt;code&gt;pg_statio_all_sequences&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4ec9ccdc5feff84bb80e75bf6571c42426e368" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.19. &lt;code&gt;pg_stat_user_functions&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd08c9aa11d206394521f53c189418899b4dd0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.2. Collected Statistics Views&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07e19a229c4d34ca63d00dfa14d8ceef9e9a4a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.20. Additional Statistics Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2920bb554a8cb09d030783bd89668658e68664f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.21. Per-Backend Statistics Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28d142484805a1bfcd372b67616ec70a6a01a0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.22. &lt;code&gt;pg_stat_progress_create_index&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ba024e3ef767b1900dc823d94dff70e1c8177a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.23. CREATE INDEX Phases&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622856ec03f3c2c0827be9c6bd80a6e66c67ea62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.24. &lt;code&gt;pg_stat_progress_vacuum&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613cccc302b3c1d51900041bcf39cf0b3fee589f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.25. VACUUM Phases&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45a5464b076d0512ec2147de1a7273e94ab1902" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.26. &lt;code&gt;pg_stat_progress_cluster&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cf991c64a69a8ffe0fa1e6a9dbd67c54c83dde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.27. CLUSTER and VACUUM FULL Phases&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7ee2be7251e20cc82f4aca10f2f67d4d87e32b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.28. Built-in DTrace Probes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b334c2d2f3cc072c0e9701c33077e22b9be03f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.29. Defined Types Used in Probe Parameters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f10fc6a4eef21532de3b9072e047bf999334060" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.3. &lt;code&gt;pg_stat_activity&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d86657ed8655bab1a42d0c4929bcae0f7c0bf4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.4. &lt;code&gt;wait_event&lt;/code&gt; Description&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327f41f1aefaa9a3dca5ecc836a651dc684cb351" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.5. &lt;code&gt;pg_stat_replication&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a4e6f1e543497c754377e28f4a0395602ab343" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.6. &lt;code&gt;pg_stat_wal_receiver&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a25a0f178344eb9f7bc6cc8ed21fb0160d25f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.7. &lt;code&gt;pg_stat_subscription&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c3b626014c53fc3ac8271488d9f966722623c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.8. &lt;code&gt;pg_stat_ssl&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fae1901cc5537971d6c38978e3f2716e96ad8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 27.9. &lt;code&gt;pg_stat_gssapi&lt;/code&gt; View&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2fe9ecd9eb1dc57721f35ea8234bcb01e11415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 4.1. Backslash Escape Sequences&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34502e378df54ee62d6edd9178c38582915b919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 4.2. Operator Precedence (highest to lowest)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cf44b5758b555069d8db2b091ec5ec7a95d8aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 5.1. ACL Privilege Abbreviations&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a33999602f16b51ab3fccbdffdb55a976edd5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 5.2. Summary of Access Privileges&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdaa3ef202589510d709285b7a38740d0fe1921" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.1. System Catalogs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f98984d224b9584d41950deb6eaf26907c63dab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.10. &lt;code&gt;pg_cast&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9bb918b1bc5c5575aaf7874711ba07be2950cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.11. &lt;code&gt;pg_class&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef15aa30e361cfef6c1485f761264933238e6c33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.12. &lt;code&gt;pg_collation&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86861e724cd35c2dd7e1e07b0c04f237fb2c0b99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.13. &lt;code&gt;pg_constraint&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00ac70157cae999d413eb12d7838a03566a4a34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.14. &lt;code&gt;pg_conversion&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f16751ed460be9385d9338f2b9c9b092823c834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.15. &lt;code&gt;pg_database&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310413f76d824b6cfae62988e578776b6fddd66e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.16. &lt;code&gt;pg_db_role_setting&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91171c6a91f8dcef31131400f7395549e323195f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.17. &lt;code&gt;pg_default_acl&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae16f733a55e6fa453056a9101f9515b77d353f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.18. &lt;code&gt;pg_depend&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b81d9591dcb9e18e49ee097d5f6e0341d89c8f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.19. &lt;code&gt;pg_description&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ec985da495a0b6cb56b7065956998ead009a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.2. &lt;code&gt;pg_aggregate&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf85a0a9421274c5eb36c7c48605505593a52f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.20. &lt;code&gt;pg_enum&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f26813d0ba8aa052fdffdf0318046c53b858227" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.21. &lt;code&gt;pg_event_trigger&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a95be4a17becd78013a097592448c0763c2d957" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.22. &lt;code&gt;pg_extension&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0571a31c9c987de3e7a063a13eed54c96b4b698" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.23. &lt;code&gt;pg_foreign_data_wrapper&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ef87de8d2978a45598eb6dba9b189ba3a2f572" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.24. &lt;code&gt;pg_foreign_server&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3cb08246d6c4565e6b89a92fc2812fe0b72ab2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.25. &lt;code&gt;pg_foreign_table&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a119807171348fc888cadb0b73791a649f351abf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.26. &lt;code&gt;pg_index&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cde08ead1a60b42c06695a3895f3738f2ec2ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.27. &lt;code&gt;pg_inherits&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b6925489e5afdf0a789ee22afee0c93df14826" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.28. &lt;code&gt;pg_init_privs&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9bac9abbe823732419b8efb76749fc41143c10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.29. &lt;code&gt;pg_language&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c996868ecab0ccb103f09afa499b5f5856dc292e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.3. &lt;code&gt;pg_am&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae216033e3bd423e8ae6206fdadd2cb074578c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.30. &lt;code&gt;pg_largeobject&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848b80b97cac5430de334fadff86eb1be9a202f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.31. &lt;code&gt;pg_largeobject_metadata&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30bae1720480610d8d2dcf9c4fdbf0100450eab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.32. &lt;code&gt;pg_namespace&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd48688ed2a72f201797a4e913f40989f70d31c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.33. &lt;code&gt;pg_opclass&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3228df1d80d23ac7565bc286d38969981db10e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.34. &lt;code&gt;pg_operator&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b2e917ba071ee48e55cf8a3f0d8be9e2550e3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.35. &lt;code&gt;pg_opfamily&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc659eee0d4938222cc829718b69d4cf3afc758" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.36. &lt;code&gt;pg_partitioned_table&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1642f659cdcc134381ee7d83782ffedaf38e1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.37. &lt;code&gt;pg_pltemplate&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16ba9b03669851bb560f4b7edca111298b9cbda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.38. &lt;code&gt;pg_policy&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26fbbb17bbbda9e96617c2d05ea6c54a70ee604" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.39. &lt;code&gt;pg_proc&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b4d815bed2e0f2ee4b3e7d9662358e2c6f2645" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.4. &lt;code&gt;pg_amop&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918f08fcf6ebe221489dd7acafb264d44945dbda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.40. &lt;code&gt;pg_publication&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6279a35de7422766994f88fd66691c37a16e1b14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.41. &lt;code&gt;pg_publication_rel&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f05ce270ebb6d5e6755c360622600a9aa2433d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.42. &lt;code&gt;pg_range&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcc8d60a3657599694551f82f1eea4afb38ef91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.43. &lt;code&gt;pg_replication_origin&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1b7e4dd123e50460cd1b15b9bc4356f382e354" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.44. &lt;code&gt;pg_rewrite&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dacd3ef218fa37e2775ff2cd583227c4c1d6aeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.45. &lt;code&gt;pg_seclabel&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e63f496427777bac96a5358e3ec6ff267e98bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.46. &lt;code&gt;pg_sequence&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae8baf4f393f74702fdd91627fd0c48f9e66349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.47. &lt;code&gt;pg_shdepend&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a0e0a0f3f00ae7575f593a600d74965fbff22e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.48. &lt;code&gt;pg_shdescription&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb19eabc586c6d8015f9a2c21adf5f407f95e65c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.49. &lt;code&gt;pg_shseclabel&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acafedab043492de7901eca6d3a458c839db8c8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.5. &lt;code&gt;pg_amproc&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09896b4c26b2f4b2de571e80320f8131778f298c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.50. &lt;code&gt;pg_statistic&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85884e5322708932d59d551cbd04bfc5172a65fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.51. &lt;code&gt;pg_statistic_ext&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ef51acf5b66c56b89294e3d76751e894765fef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.52. &lt;code&gt;pg_statistic_ext_data&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7cad26e454391d0be7408505569810d590b04d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.53. &lt;code&gt;pg_subscription&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7e31ab045041e9f797663ed1e9a7c0d2896e6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.54. &lt;code&gt;pg_subscription_rel&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2fa89137bd8f7a8b4c077bbf640fd0680354a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.55. &lt;code&gt;pg_tablespace&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d27f1463176d2016ffcb2361928e051ae6b8ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.56. &lt;code&gt;pg_transform&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a578c7a292bd977f9fb3a394526d3645cda372b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.57. &lt;code&gt;pg_trigger&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e24e739b5526268c522b92e0219157fc1be0cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.58. &lt;code&gt;pg_ts_config&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef0600df2596434875437805fdd9834441b8c50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.59. &lt;code&gt;pg_ts_config_map&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23150113d6846359575ba4319dd7aaba08020de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.6. &lt;code&gt;pg_attrdef&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39751ba1c630aa20a8f139dc89700ccee7a43fef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.60. &lt;code&gt;pg_ts_dict&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe1d7a7b195f541fe9153b630ae1fd9aeda3fab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.61. &lt;code&gt;pg_ts_parser&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf0a70611d0e15e0abe8047edd0b0f8c73cb798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.62. &lt;code&gt;pg_ts_template&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd5729e385fb12e3ab48cff488db41c72befbd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.63. &lt;code&gt;pg_type&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7202459208c67c09972a8060c970f0c91a6d8d90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.64. &lt;code&gt;typcategory&lt;/code&gt; Codes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61281a6c9547d87f2a23729641799b7848790c57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.65. &lt;code&gt;pg_user_mapping&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d31b55434c275d4470912d35ddab8a8a047684" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.66. System Views&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7623d0b1048d0e4548553e640f7c43ebe1825fb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.67. &lt;code&gt;pg_available_extensions&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db807dc50f86a742fb900618f54509b306421286" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.68. &lt;code&gt;pg_available_extension_versions&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e033cf632fc79e163c4d3fcc7c67a3ec3145d1b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.69. &lt;code&gt;pg_config&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082b0402663158b1d5e064d535c77923af623be5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.7. &lt;code&gt;pg_attribute&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6c68545a45d33c5ddd05e2239578040cf76689" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.70. &lt;code&gt;pg_cursors&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3718e73b7b02d5db3efaf64e7f778acc611857ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.71. &lt;code&gt;pg_file_settings&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2329767c56fd0ebe674858f2a9570a5caa4debe6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.72. &lt;code&gt;pg_group&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1c99a5169a40483333c8360007de1afb3c4d18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.73. &lt;code&gt;pg_hba_file_rules&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1f47186b93786e7a2ade820459432a28f49afc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.74. &lt;code&gt;pg_indexes&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae50ecaa497d838b24bdcbe250b210f26750baac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.75. &lt;code&gt;pg_locks&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d21168f3abb48e57e94b0f69089455b4bffdc37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.76. &lt;code&gt;pg_matviews&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bee66237cc2d0667119be5a2f274385bf761395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.77. &lt;code&gt;pg_policies&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a618218f8f692110b945ce0dac6b4e49fbe615" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.78. &lt;code&gt;pg_prepared_statements&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c1d25b9d001c40844e8d76318bc0ac26f92e3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.79. &lt;code&gt;pg_prepared_xacts&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6597d1606906bd3c1403796ddee1de6a2f8f818f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.8. &lt;code&gt;pg_authid&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf630a7a90dd8cc5362d897aa2ad991aaf0c687e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.80. &lt;code&gt;pg_publication_tables&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d96529419fba7721c0f8c784683a16ff0b4f6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.81. &lt;code&gt;pg_replication_origin_status&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ec4665b0e9e60cf11d836ef762b66982a3c523" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.82. &lt;code&gt;pg_replication_slots&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398c81a79939ddf5c4a089784b1dc2ff1c31b7ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.83. &lt;code&gt;pg_roles&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f58dad2a6b22aa7ed43d80a28c8e7773f6b1a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.84. &lt;code&gt;pg_rules&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2de967e454facdd714b357bc2b6ede25c30057" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.85. &lt;code&gt;pg_seclabels&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d365b8ebd3102856b0b191f770d8292d6247b6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.86. &lt;code&gt;pg_sequences&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72cf11c9b5cff186f1865f2477b880b15087345" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.87. &lt;code&gt;pg_settings&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49eeaab743d683481f45a42ea5cba039c566e54a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.88. &lt;code&gt;pg_shadow&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e8df8434cdc0de5ae9bd0303dcf2d5c50dc97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.89. &lt;code&gt;pg_stats&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851294533f274a603f2078b38c45199b0889f67f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.9. &lt;code&gt;pg_auth_members&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef1a7bef1d288d3e6e9ca30c565874a9505edda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.90. &lt;code&gt;pg_stats_ext&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643c70a8f8180fe20929f2c857dd3531cc182920" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.91. &lt;code&gt;pg_tables&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a42cd3419cdca6e3390b6743c732bd91c6d99f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.92. &lt;code&gt;pg_timezone_abbrevs&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126fd22ab9fa3b170090db81b3ce6c7bc005ea64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.93. &lt;code&gt;pg_timezone_names&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38164725a59bfb1d923369f68e0439debd14df88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.94. &lt;code&gt;pg_user&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b07c1866def203aca983a598106b9c6bd1c1b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.95. &lt;code&gt;pg_user_mappings&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d775a5726fdb891d69bfd0fa33ee66239d5c8a69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 51.96. &lt;code&gt;pg_views&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6459daa39a4451a66dfd9d146aeff7d843cf74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 64.1. Built-in GiST Operator Classes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4fb52b2b2330a8aa17bf2573634710d2c97cca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 65.1. Built-in SP-GiST Operator Classes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60ad3f63e8d47e13aaa70795db07ad488d7e647" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 66.1. Built-in GIN Operator Classes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e24aff2063f7151714133b643c0bd5fe389fb89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 67.1. Built-in BRIN Operator Classes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19543630489cfed451e4c7c8c9e18db89693bae5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 67.2. Function and Support Numbers for Minmax Operator Classes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d45acf2ad77003b7ea3c87dea8cc28d055030f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 67.3. Function and Support Numbers for Inclusion Operator Classes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9698ac27f1b5f5404fc0325403081135132f8180" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 68.1. Contents of &lt;code&gt;PGDATA&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6ac628e8f7fe2463e942c120afb6dc8e4e0fc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 68.2. Overall Page Layout&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166715a55206417eb91aa4cb53a3bc0b685929dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 68.3. PageHeaderData Layout&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed55984b316f6ac80056db6370ad7b10474c722" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 68.4. HeapTupleHeaderData Layout&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83529a10591c6e6bac63c67d23cf04ae5e533054" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.1. Data Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab577b88cabee310451cbd80fb5fe4de74e374ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.10. Date Input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c89f49644312c0f8bcf35b607546792ec9ae309" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.11. Time Input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bb7bd5a87bf34972df2b4fe03fcf1937230e3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.12. Time Zone Input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf746f5bf8341b273e7c4bd637f4f29386308659" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.13. Special Date/Time Inputs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f033f0c8ca4f854877b6eaede2e7052058731d00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.14. Date/Time Output Styles&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8022a73e166827c1788724d2257dcaaeaf38df33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.15. Date Order Conventions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74135e7fb31c029a648724df93e1331364474797" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.16. ISO 8601 Interval Unit Abbreviations&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c997f2bd73f3aed54d34181e64b5624f8a75ec85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.17. Interval Input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b734d1452e360620988a5ce1924932b561539d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.18. Interval Output Style Examples&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcca3e57d9a133844a121025a938ab5bc92ec020" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.19. Boolean Data Type&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c46e5edfd00fe0078dd8c9c470ccb054afafe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.2. Numeric Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b87b9ab6cbe51f3909e631fa9fea8567040437" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.20. Geometric Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2b8bc3005da4bc2a7688e72018f749cd69ef48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.21. Network Address Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1ac16d5b040883bac641ba4e6880991ad007f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.22. &lt;code&gt;cidr&lt;/code&gt; Type Input Examples&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc4540d3017716a86e33a45e3e9e63e6b3fe92c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.23. JSON Primitive Types and Corresponding PostgreSQL Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988dc0edea2fd0c5b2b702336cc1b1d8916a80b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.24. &lt;code&gt;jsonpath&lt;/code&gt; Variables&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbabd201ccc088e0f21fd85aede8ab79d686639" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.25. &lt;code&gt;jsonpath&lt;/code&gt; Accessors&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809455a7a0f64785859421bea3ba72b9b725a042" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.26. Object Identifier Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fd84e99a68b983a657accbf0f9b75a60303ac3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.27. Pseudo-Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6c3854f442b58fe9bcc8921df38c77bf4baa7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.3. Monetary Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d85d13c72a2d978dd4f8968f46eeb7529c88188" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.4. Character Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08aeec13208a9df5ff9c70b0c74cf4ca2ad688dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.5. Special Character Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4290b23ac9f6dbd0fe7bf85999b56002871978" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.6. Binary Data Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8533c0a30960cb23de4564fbedc5a088896480b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.7. &lt;code&gt;bytea&lt;/code&gt; Literal Escaped Octets&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ed9685685b7430437555216123486ec15d2aa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.8. &lt;code&gt;bytea&lt;/code&gt; Output Escaped Octets&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4c1ca8c13653a95db51d190a69e0df5bea57ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 8.9. Date/Time Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add77dda37cd03ded84f6011b5ead1a1aad5414f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.1. Comparison Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb10ade867be10d64315bc0c77cb03ca600caaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.10. Other String Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e569ae35aa64a36f24e492a3ed30b1cbb63085" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.11. Built-in Conversions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441ad0747af43495645a1902d5b9ea0e17d183dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.12. SQL Binary String Functions and Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dc76d541f9e28c836b1b938097fa667cc7e47d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.13. Other Binary String Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f5cc11e8b8eb9f482dfbcd19bd117b0987ec1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.14. Bit String Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aae92b142e7cbe0a59ef093289ebb0cb0b9ad03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.15. Regular Expression Match Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33797f21fcc076c62961fa9e8bd6de19d92d9d11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.16. Regular Expression Atoms&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcdda97b6639eaf430610c9897a8ddce9e38c23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.17. Regular Expression Quantifiers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12de1a6d8dd2d1ff8f2d94a24e1e33f5eddae9cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.18. Regular Expression Constraints&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fa7bec43f4ebcb1f48cffd5ca0314afd51ba55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.19. Regular Expression Character-Entry Escapes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9787dfab3a7f222abe35f6793ce96c65e14b28e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.2. Comparison Predicates&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f9d9679e603cc47376f78ce8717f6dec3591ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.20. Regular Expression Class-Shorthand Escapes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fae87e18611e364328f4b29dae003b63e75005d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.21. Regular Expression Constraint Escapes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622d8276526365d4671cf8b9ee9120d4eae44e94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.22. Regular Expression Back References&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69b999560f516b7e90f8ac9bbb82c6b46fcba6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.23. ARE Embedded-Option Letters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bba340e35109099f75acf7f09ace84e4716d09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.24. Formatting Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918054dda1f653a9cfa9e16d18d0a4b6f3936852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.25. Template Patterns for Date/Time Formatting&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82871d3812eb45e8ec150e87ee923190c5ed5abe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.26. Template Pattern Modifiers for Date/Time Formatting&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc34f253fd93e3f10e30a0800e53aa2d253130e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.27. Template Patterns for Numeric Formatting&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3655833f6b4bc68b4042cf4ebe59026cbb2b4784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.28. Template Pattern Modifiers for Numeric Formatting&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15eac2a0116a0974ffa2448e31d1c83dcd12ceff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.29. &lt;code&gt;to_char&lt;/code&gt; Examples&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efb8e7ca5cec152bd9aae50e4f85df3c89b22f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.3. Comparison Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d8e9dd5b6fedbc89255f5b2d93cb34b3dc36f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.30. Date/Time Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc82996523c1927e0ed3b9180dda2326d901e239" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.31. Date/Time Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e8669852354198d6a029abe98198e9e4fa69c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.32. &lt;code&gt;AT TIME ZONE&lt;/code&gt; Variants&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917c3ef3e853649db5ec1288e871074addf39aed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.33. Enum Support Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12fff77490dae287bc2b37863db3c1f44086008" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.34. Geometric Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913b92e82bf0a311a0d64b8eb00698c6ae11ba34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.35. Geometric Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783921dfb5f5f95f6e082f9e2cb90ef300ca8684" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.36. Geometric Type Conversion Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6210aa27d774c7adb8935c7bbf88cc9b41d7487" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.37. &lt;code&gt;cidr&lt;/code&gt; and &lt;code&gt;inet&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89db1b92b196242a54229469a058566fe4e1ce0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.38. &lt;code&gt;cidr&lt;/code&gt; and &lt;code&gt;inet&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7314a7e5e72e431894b1280acd5762c9b36516" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.39. &lt;code&gt;macaddr&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85d6e29c53054ce57a982e33e10eba1f4d2248a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.4. Mathematical Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6d0f60c6757791ec97d62da6f78919d89fbfc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.40. &lt;code&gt;macaddr8&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce064158d7a1ac34fc02fa555faacd78aafa5534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.41. Text Search Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924f1048f0569593f7c102b8fcea696030c78919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.42. Text Search Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4742a47619fd2f7c008ba0a6e174ad55b8460a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.43. Text Search Debugging Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dac0e6d0f0fe6ac82386003ccc6b3537f4b838d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.44. &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d093c7982951ff508b336c53f81e75f19824e705" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.45. Additional &lt;code&gt;jsonb&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f4b86116bb04f603366dd2c404ed0628d88bb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.46. JSON Creation Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dc81d20cce47b878e637657fb2d70848f060fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.47. JSON Processing Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7df03b5c47cc1d03de770b19d5a8e79092b1d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.48. &lt;code&gt;jsonpath&lt;/code&gt; Operators and Methods&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3bb14ec2a78fd35d2b39f9c3bd31976c960580" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.49. &lt;code&gt;jsonpath&lt;/code&gt; Filter Expression Elements&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8935165da8f81ff07a4d5b157be408a0ae6c2233" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.5. Mathematical Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1386d0d7ff1fdf86a4a36305ff55348c08023309" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.50. Sequence Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53e1491eb1d619dc1eec995f457b29957b0d8c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.51. Array Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f58e616dbdc592d7ce9f6e9f6cadddfdbf031a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.52. Array Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbe9829597c694c77af133c2a94e0d968aab96b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.53. Range Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9630527e932ec5fce87c4535e4bc067621814866" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.54. Range Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e26a3adf4637c760f0795d68445f5afeb5d3aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.55. General-Purpose Aggregate Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c67300eb85cddeaabeef3ad62d09575fe7897b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.56. Aggregate Functions for Statistics&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7d719738019c0e91da532effa242ace0b35e15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.57. Ordered-Set Aggregate Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e33a9b3424865f33b1c8b193ec0acf76444f50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.58. Hypothetical-Set Aggregate Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f861c5fcb9d9c31e4862e4df195a7791856d76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.59. Grouping Operations&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcdc8f5a73b5ab1366ce75aaecb6a9febb7e0de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.6. Random Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06f9c00387f2a47db4df9d5fd9d29afd85a64d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.60. General-Purpose Window Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7332511d931adb3973faa13e02e9a2f58c70fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.61. Series Generating Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c4a37f6c6f303582adee38d96973e59b8f1d45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.62. Subscript Generating Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2135932869620b53f88c3e6313d35e2e57eb9554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.63. Session Information Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39be6ee87ea95e25c83a72d132334349eca53d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.64. Access Privilege Inquiry Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f88ee46d75d93ee18420ab0ac7544df7b69f3ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.65. &lt;code&gt;aclitem&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bff51c4fac1999b618aa6e81c66b1e1f53e8a09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.66. &lt;code&gt;aclitem&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ba9eacd371b2f2875e8cef1278fb77ebcd99c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.67. Schema Visibility Inquiry Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c6aca319addf46ce6b419f1af927dda7149772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.68. System Catalog Information Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59944c027b46284746c3c0d85e815a750a8891d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.69. Index Column Properties&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1714aed665ee3ec122913f297f2add6146e8617b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.7. Trigonometric Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1931873243f7b29fd60849cb0265f82b1b3daa21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.70. Index Properties&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494455ae6249fdb9eaf4bc96c399bcc0b3287c53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.71. Index Access Method Properties&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4a0d7f19cdaf9dd206d8238d622ef290fa34c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.72. Object Information and Addressing Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2397166ddbff9e584fb4c1463d367dec3f650e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.73. Comment Information Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e1c97f51ff6d0e29990ff06de5f0ff4842e1bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.74. Transaction IDs and Snapshots&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9297bd2822b43f167f4851fa970b2be7bc55e646" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.75. Snapshot Components&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fe3f4e24a04a45285feb4f7f3c39797576ff14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.76. Committed Transaction Information&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22faf23155a7f6cdba38cb993e993be8e97bdafa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.77. Control Data Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10369b4d2384de89827853c38a3dbb088df94279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.78. &lt;code&gt;pg_control_checkpoint&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be67b2ae4fcc41758e4db5cec6bff447ce947830" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.79. &lt;code&gt;pg_control_system&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc142fb66ffa0a6f7f6394c00a57cfad199c4be9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.8. Hyperbolic Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d99a933c31e93d42b87a8d05638885de6cef43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.80. &lt;code&gt;pg_control_init&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe7424b608f8ebbc9334ad7d348b73c225f8065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.81. &lt;code&gt;pg_control_recovery&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258d4eca1eec881df06fbf6eb5c508a7eb4defe6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.82. Configuration Settings Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af63c82b09a5fd893d3cbed8d4c9b65a84c8cc49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.83. Server Signaling Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11c93734b157fd8c86baa8c5096f64613f03240" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.84. Backup Control Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cf89f9807ef48af5dc5feac483e531ed89fb76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.85. Recovery Information Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7192e9cdc53717cb1d3a3d7a47063c367c5fd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.86. Recovery Control Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc57c799c7d7ee53ed8b4b0bf37c2b80ea6845e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.87. Snapshot Synchronization Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56158ae74f61cf23e3e86908ca0820720f4c8518" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.88. Replication SQL Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a72ba96b99dede4aa68dbbb8f2f4f443280905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.89. Database Object Size Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0821b82f66d9f4a6e0cd038e52ed04c3f7a05a58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.9. SQL String Functions and Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8690793f9807c3f5f8ee02a7cc52f489067f885d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.90. Database Object Location Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dac1ecbd39f8f56220a662263d1df23c3bd1d5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.91. Collation Management Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d40194ab60a69acde4e12b20bea43def6aedf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.92. Partitioning Information Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c370022e15dfd2d0b3991d342e19956b98c04f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.93. Index Maintenance Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8379ad039963b5ac568013d446df9562b67c6abc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.94. Generic File Access Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e2d3bc1f47aa4a1635eb7f3cff3425017bca1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.95. Advisory Lock Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd947ce6d00206881c9746604187286ad479d127" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table A.1. PostgreSQL Error Codes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05dac2107a5f9f2ac31f3b94de8292ede9abce7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table B.1. Month Names&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0ce6d7b1e15e8e01aa65312fb0df9adeaf930d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table B.2. Day of the Week Names&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4035fdc79af664ad037421045dfc08f552eb1aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table B.3. Date/Time Field Modifiers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559edd83cb5073785f38017209bf4a3b36ac0ed6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table C.1. SQL Key Words&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d10534ea211538918961793e09cac043e6061f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.1. &lt;code&gt;adminpack&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b519c1bf6f735544d2045d66c60755bcd006027" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.10. &lt;code&gt;intarray&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07b2821b106599e7e19c067ef0623853754e74b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.11. &lt;code&gt;isn&lt;/code&gt; Data Types&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de57df1bb6bd0b8cf1c93e4ac13f3f2cd6cec28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.12. &lt;code&gt;isn&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fc76943f1f53439b794c832fa0195dc25753eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.13. &lt;code&gt;ltree&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f47dedf5cd81c558ae828df89aeceeffbcca4ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.14. &lt;code&gt;ltree&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1ea3c10d5f847276d5255278d415ebe4cfbb7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.15. &lt;code&gt;pg_buffercache&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb70b4765f6524df3f91e44d66f42eb9ce59f1f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.16. Supported Algorithms for &lt;code&gt;crypt()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74efd3a20d0a5ca77d9ec0d65a88482478d0db59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.17. Iteration Counts for &lt;code&gt;crypt()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16082250b8218899af06afb261507b192bd2a3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.18. Hash Algorithm Speeds&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023c35c98f9f91629573b50cb356cd985b32d53d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.19. Summary of Functionality with and without OpenSSL&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b5d7566b2274950bfb99f59140174951e32afe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.2. Cube External Representations&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31519ff8934e1c9d30bb975be3e1d15050040610" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.20. &lt;code&gt;pgrowlocks&lt;/code&gt; Output Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ee7b256a4076cfeae51995de13c374ee02588a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.21. &lt;code&gt;pg_stat_statements&lt;/code&gt; Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf9da321dec29d80c37b3aec85adcfd8d4e6ca7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.22. &lt;code&gt;pgstattuple&lt;/code&gt; Output Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d397f9b671a3e1925bb2eb0936f8f0832e9789" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.23. &lt;code&gt;pgstattuple_approx&lt;/code&gt; Output Columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c437a7af148f8e8389f5c7449218ce3b637fba68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.24. &lt;code&gt;pg_trgm&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d05073c0bf7063af3660fac90eb31ef8a83d22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.25. &lt;code&gt;pg_trgm&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53fc25e7d7cf3149fa7d701cb97669cc4302291" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.26. &lt;code&gt;seg&lt;/code&gt; External Representations&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce95711636b8b7c0ab0c8c90a10676ec4c5dd99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.27. Examples of Valid &lt;code&gt;seg&lt;/code&gt; Input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0703329077e17e37589124cf687bfbdb4ff5f02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.28. Seg GiST Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efb677aa5a54059bffe378ceabe3ff851dc97be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.29. Sepgsql Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a4b5bfe663b6c86554a4fe157eb1e9883705ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.3. Cube Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f068919e3f99a106ec1019bd78e8bde34335d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.30. &lt;code&gt;tablefunc&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27a41af6ae7cee6f4a14c9d9a0b8aef27e683da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.31. &lt;code&gt;connectby&lt;/code&gt; Parameters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccc0fa14874dcf09c6ccf36766eb1c65d7a9d87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.32. Functions for UUID Generation&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285949d92f8186403bfcd2046f6dcc6813339504" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.33. Functions Returning UUID Constants&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2710d2338031518ccc53baf6792d41b5ad8f677" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.34. Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4038c34dc95dfcc18297824a175effec134055" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.35. &lt;code&gt;xpath_table&lt;/code&gt; Parameters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b35f9c6abb36ad8fc92db8bdc01beb1c4250a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.4. Cube Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92b11d7884dfede47b04bfcbf5a41bf72e63d9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.5. Cube-Based Earthdistance Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e051b81229455604f98408865a6ac1b4addebbc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.6. Point-Based Earthdistance Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcf169338c4abfd8292e2d9fff28e5b2b09033c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.7. &lt;code&gt;hstore&lt;/code&gt; Operators&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c6e68eca0fdcd7802454203dbb36dbc3ddb825" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.8. &lt;code&gt;hstore&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d86c143b9375e6f997fb5dadf92e3e129f96c3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table F.9. &lt;code&gt;intarray&lt;/code&gt; Functions&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d890fb1a42200a1b33e3307e2ccd5c9035ab6794" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table K.1. PostgreSQL Limitations&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696c4ceafbfe949ae4e1ac9f260a8e4f375683bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table of Contents&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf69c48186996b82fe7b81247ad9250cfca6c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table-Level Lock Modes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be38ff52aef87b71c69cb929026cdf03c79939a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type Resolution for &lt;code&gt;UNION&lt;/code&gt;, &lt;code&gt;CASE&lt;/code&gt;, and Related Constructs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5460fb3b002cb82e36bdab3a44937749c957abe2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Upgrade streaming replication and log-shipping standby servers&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c5de3159b80d3a3ca8692e2ddf1964928d7107" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;split&lt;/code&gt;. &lt;/strong&gt; The &lt;code&gt;split&lt;/code&gt; command allows you to split the output into smaller files that are acceptable in size to the underlying file system. For example, to make chunks of 1 megabyte:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a80b9aa68fb3c8b73036c3ce7eec622afb708fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use compressed dumps. &lt;/strong&gt; You can use your favorite compression program, for example gzip:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abab695321f295c720b6c84d1b5599f942c1413" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use pg_dump's custom dump format. &lt;/strong&gt; If PostgreSQL was built on a system with the zlib compression library installed, the custom dump format will compress data as it writes it to the output file. This will produce dump file sizes similar to using &lt;code&gt;gzip&lt;/code&gt;, but it has the added advantage that tables can be restored selectively. The following command dumps a database using the custom dump format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfe9fc7a7a29e0a0178f83061d2c90c3e3b191c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use pg_dump's parallel dump feature. &lt;/strong&gt; To speed up the dump of a large database, you can use pg_dump's parallel mode. This will dump multiple tables at the same time. You can control the degree of parallelism with the &lt;code&gt;-j&lt;/code&gt; parameter. Parallel dumps are only supported for the &quot;directory&quot; archive format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfa928646e2342a7f8cd8c011c0572d9d895659" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Value Storage Type Conversion&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7bb1fedc9115854eb42fd28c3bf8a588f25119" translate="yes" xml:space="preserve">
          <source>@ 1 year 2 mons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03555338c898371183a9886d4e4b1c92f3732990" translate="yes" xml:space="preserve">
          <source>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d943392746fd8a7d1a28c6c2928f65ea407380" translate="yes" xml:space="preserve">
          <source>@ 3 days 4 hours 5 mins 6 secs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2057e4a34b0143c5ca30f416938d0496f64cf4" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;from SQL&amp;rdquo; function that converts the type from the SQL environment to the language. This function will be invoked on the arguments of a function written in the language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8d466be36923654e1e5048281d3752210ffa26" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;nil&amp;rdquo; UUID constant, which does not occur as a real UUID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2762eb369c90d7266035a7f6c6fc6bc10aa918a6" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;search&amp;rdquo; operator entry indicates that an index of this operator family can be searched to find all rows satisfying &lt;code&gt;WHERE&lt;/code&gt;&lt;code&gt;indexed_column&lt;/code&gt;&lt;code&gt;operator&lt;/code&gt;&lt;code&gt;constant&lt;/code&gt;. Obviously, such an operator must return &lt;code&gt;boolean&lt;/code&gt;, and its left-hand input type must match the index's column data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8c23a8cc28795360368ac535c18eb45a0b60b7" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;to SQL&amp;rdquo; function that converts the type from the language to the SQL environment. This function will be invoked on the return value of a function written in the language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae930caf5146f65e1ff7504137e6bf65415863f" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;user logging out&amp;rdquo; might happen as part of a maintenance job or manually when an administrator logs in as the &lt;code&gt;postgres&lt;/code&gt; user or something similar, so it is hard to prevent in general.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f22694b8568dac5808dc2163d1d852566c139b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sql-select&quot;&gt;SELECT&lt;/a&gt; or &lt;a href=&quot;sql-values&quot;&gt;VALUES&lt;/a&gt; command which will provide the columns and rows of the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f1049f4109dc5db352ab8d92ece996eabd228c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sql-select&quot;&gt;SELECT&lt;/a&gt; or &lt;a href=&quot;sql-values&quot;&gt;VALUES&lt;/a&gt; command which will provide the rows to be returned by the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b71200935bf14bcaf475eabe324c9a915be563" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sql-select&quot;&gt;SELECT&lt;/a&gt;, &lt;a href=&quot;sql-select#SQL-TABLE&quot;&gt;TABLE&lt;/a&gt;, or &lt;a href=&quot;sql-values&quot;&gt;VALUES&lt;/a&gt; command, or an &lt;a href=&quot;sql-execute&quot;&gt;EXECUTE&lt;/a&gt; command that runs a prepared &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;TABLE&lt;/code&gt;, or &lt;code&gt;VALUES&lt;/code&gt; query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b516d250c25b6e73cb44ebe944600ea4dcdfab57" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sql-select&quot;&gt;SELECT&lt;/a&gt;, &lt;a href=&quot;sql-select#SQL-TABLE&quot;&gt;TABLE&lt;/a&gt;, or &lt;a href=&quot;sql-values&quot;&gt;VALUES&lt;/a&gt; command. This query will run within a security-restricted operation; in particular, calls to functions that themselves create temporary tables will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c32cd6f04f46fa40c66ced5598180206388bcb3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sql-select&quot;&gt;SELECT&lt;/a&gt;, &lt;a href=&quot;sql-values&quot;&gt;VALUES&lt;/a&gt;, &lt;a href=&quot;sql-insert&quot;&gt;INSERT&lt;/a&gt;, &lt;a href=&quot;sql-update&quot;&gt;UPDATE&lt;/a&gt; or &lt;a href=&quot;sql-delete&quot;&gt;DELETE&lt;/a&gt; command whose results are to be copied. Note that parentheses are required around the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aac443fc49c397d670128be5de3b30376a87d25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&amp;lt;&lt;/code&gt; operator must be a strong ordering relation; that is, for all non-null values &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819a83c6160f87b8fbe9b47f7e8c2fcb8b3441e2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CASE&lt;/code&gt; construct used in this fashion will defeat optimization attempts, so it should only be done when necessary. (In this particular example, it would be better to sidestep the problem by writing &lt;code&gt;y &amp;gt; 1.5*x&lt;/code&gt; instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6247b7100ee328df210a70a605d94770307d4618" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CASE&lt;/code&gt; expression does not evaluate any subexpressions that are not needed to determine the result. For example, this is a possible way of avoiding a division-by-zero failure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c1d2ec7824e3f9be873b53497fbe438c59e00f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CREATE FUNCTION&lt;/code&gt; command is defined in the SQL standard. The PostgreSQL version is similar but not fully compatible. The attributes are not portable, neither are the different available languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fba28ad575d8675106f7a64f95b2cad77d64bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CREATE PROCEDURE&lt;/code&gt; command is defined in the SQL standard. The PostgreSQL version is similar but not fully compatible. For details see also &lt;a href=&quot;sql-createfunction&quot;&gt;CREATE FUNCTION&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8bad9823a1eeb3d425248ce5d647ad68ad9035" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DELETE&lt;/code&gt; policy cannot have a &lt;code&gt;WITH CHECK&lt;/code&gt; expression, as it only applies in cases where records are being deleted from the relation, so that there is no new row to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffed91b9d2e2689c8f9096a3b8e654e3487952c0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JOIN&lt;/code&gt; clause combines two &lt;code&gt;FROM&lt;/code&gt; items, which for convenience we will refer to as &amp;ldquo;tables&amp;rdquo;, though in reality they can be any type of &lt;code&gt;FROM&lt;/code&gt; item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, &lt;code&gt;JOIN&lt;/code&gt;s nest left-to-right. In any case &lt;code&gt;JOIN&lt;/code&gt; binds more tightly than the commas separating &lt;code&gt;FROM&lt;/code&gt;-list items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a84ad9de4a47f15eabedf603ec63031e192119" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LATERAL&lt;/code&gt; item can appear at top level in the &lt;code&gt;FROM&lt;/code&gt; list, or within a &lt;code&gt;JOIN&lt;/code&gt; tree. In the latter case it can also refer to any items that are on the left-hand side of a &lt;code&gt;JOIN&lt;/code&gt; that it is on the right-hand side of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ae34e725d60cc08b18c4661033d9a5986eedac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SECURITY DEFINER&lt;/code&gt; procedure cannot execute transaction control statements (for example, &lt;code&gt;COMMIT&lt;/code&gt; and &lt;code&gt;ROLLBACK&lt;/code&gt;, depending on the language).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24640de38cd7e79e6c26b95c139e86bc1984a68f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SELECT&lt;/code&gt; sub-query that produces as many output columns as are listed in the parenthesized column list preceding it. The sub-query must yield no more than one row when executed. If it yields one row, its column values are assigned to the target columns; if it yields no rows, NULL values are assigned to the target columns. The sub-query can refer to old values of the current row of the table being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f32387ffee5e380629abaa1525601dc9d6facaf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShareLock&lt;/code&gt; is required on the target index by &lt;code&gt;bt_index_parent_check&lt;/code&gt; (a &lt;code&gt;ShareLock&lt;/code&gt; is also acquired on the heap relation). These locks prevent concurrent data modification from &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; commands. The locks also prevent the underlying relation from being concurrently processed by &lt;code&gt;VACUUM&lt;/code&gt;, as well as all other utility commands. Note that the function holds locks only while running, not for the entire transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a2d75bff2c30ff411c224c9fe1259bed07345e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TABLESAMPLE&lt;/code&gt; clause after a &lt;code&gt;table_name&lt;/code&gt; indicates that the specified &lt;code&gt;sampling_method&lt;/code&gt; should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as &lt;code&gt;WHERE&lt;/code&gt; clauses. The standard PostgreSQL distribution includes two sampling methods, &lt;code&gt;BERNOULLI&lt;/code&gt; and &lt;code&gt;SYSTEM&lt;/code&gt;, and other sampling methods can be installed in the database via extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e67a4c57a74dd900aa610f5f6c701a6078b7404" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TZH&lt;/code&gt; template pattern can match a signed number. Without the &lt;code&gt;FX&lt;/code&gt; option, minus signs may be ambiguous, and could be interpreted as a separator. This ambiguity is resolved as follows: If the number of separators before &lt;code&gt;TZH&lt;/code&gt; in the template string is less than the number of separators before the minus sign in the input string, the minus sign is interpreted as part of &lt;code&gt;TZH&lt;/code&gt;. Otherwise, the minus sign is considered to be a separator between values. For example, &lt;code&gt;to_timestamp('2000 -10', 'YYYY TZH')&lt;/code&gt; matches &lt;code&gt;-10&lt;/code&gt; to &lt;code&gt;TZH&lt;/code&gt;, but &lt;code&gt;to_timestamp('2000 -10', 'YYYY&amp;nbsp;&amp;nbsp;TZH')&lt;/code&gt; matches &lt;code&gt;10&lt;/code&gt; to &lt;code&gt;TZH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975d4d7cc350f909c3d56a227d26009cd1f3f678" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WITH&lt;/code&gt; query is referenced by writing its name, just as though the query's name were a table name. (In fact, the &lt;code&gt;WITH&lt;/code&gt; query hides any real table of the same name for the purposes of the primary query. If necessary, you can refer to a real table of the same name by schema-qualifying the table's name.) An alias can be provided in the same way as for a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3f18d6b0d0d8ef8e261f092333e8ac1a83778d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;bloom&lt;/code&gt; index accepts the following parameters in its &lt;code&gt;WITH&lt;/code&gt; clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2361c26a25ed37192ff6822eb9815e6a1bb350" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;default_expression&lt;/code&gt;, rather than being evaluated immediately when &lt;code&gt;xmltable&lt;/code&gt; is called, is evaluated each time a default is needed for the column. If the expression qualifies as stable or immutable, the repeat evaluation may be skipped. This means that you can usefully use volatile functions like &lt;code&gt;nextval&lt;/code&gt; in &lt;code&gt;default_expression&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8d6c448f4256c5739e1f342a948208b8ac9336" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict_xsyn&lt;/code&gt; dictionary accepts the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4731474e93af48b3b039ee433573b761b490ebba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;frame_start&lt;/code&gt; of &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; means that the frame starts with the first row of the partition, and similarly a &lt;code&gt;frame_end&lt;/code&gt; of &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt; means that the frame ends with the last row of the partition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba67bfc07bc1375b67a77983258edd014dff690f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;money&lt;/code&gt; value can be cast to &lt;code&gt;numeric&lt;/code&gt; without loss of precision. Conversion to other types could potentially lose precision, and must also be done in two stages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e1eada317c8cafe63dee1a39dd2ab5032af82d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;pg_default_acl&lt;/code&gt; entry shows the initial privileges to be assigned to an object belonging to the indicated user. There are currently two types of entry: &amp;ldquo;global&amp;rdquo; entries with &lt;code&gt;defaclnamespace&lt;/code&gt; = 0, and &amp;ldquo;per-schema&amp;rdquo; entries that reference a particular schema. If a global entry is present then it &lt;em&gt;overrides&lt;/em&gt; the normal hard-wired default privileges for the object type. A per-schema entry, if present, represents privileges to be &lt;em&gt;added to&lt;/em&gt; the global or hard-wired default privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb2939b4b6d4ddce66b3a2e4882d5e2fd0717d0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;pg_ident.conf&lt;/code&gt; file that could be used in conjunction with the &lt;code&gt;pg_hba.conf&lt;/code&gt; file in &lt;a href=&quot;auth-pg-hba-conf#EXAMPLE-PG-HBA.CONF&quot;&gt;Example 20.1&lt;/a&gt; is shown in &lt;a href=&quot;auth-username-maps#EXAMPLE-PG-IDENT.CONF&quot;&gt;Example 20.2&lt;/a&gt;. In this example, anyone logged in to a machine on the 192.168 network that does not have the operating system user name &lt;code&gt;bryanh&lt;/code&gt;, &lt;code&gt;ann&lt;/code&gt;, or &lt;code&gt;robert&lt;/code&gt; would not be granted access. Unix user &lt;code&gt;robert&lt;/code&gt; would only be allowed access when he tries to connect as PostgreSQL user &lt;code&gt;bob&lt;/code&gt;, not as &lt;code&gt;robert&lt;/code&gt; or anyone else. &lt;code&gt;ann&lt;/code&gt; would only be allowed to connect as &lt;code&gt;ann&lt;/code&gt;. User &lt;code&gt;bryanh&lt;/code&gt; would be allowed to connect as either &lt;code&gt;bryanh&lt;/code&gt; or as &lt;code&gt;guest1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421151d14aecca0c09fe097c61a7a69cad0ef7d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;sort_expression&lt;/code&gt; can also be the column label or number of an output column, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b23f0024d2472dff4bba030a8daa989f120d9ef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;tsquery&lt;/code&gt; value stores lexemes that are to be searched for, and can combine them using the Boolean operators &lt;code&gt;&amp;amp;&lt;/code&gt; (AND), &lt;code&gt;|&lt;/code&gt; (OR), and &lt;code&gt;!&lt;/code&gt; (NOT), as well as the phrase search operator &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; (FOLLOWED BY). There is also a variant &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; of the FOLLOWED BY operator, where &lt;code&gt;N&lt;/code&gt; is an integer constant that specifies the distance between the two lexemes being searched for. &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; is equivalent to &lt;code&gt;&amp;lt;1&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1488cfe9583a001f3966c381b957f6eda3c9c49c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;tsvector&lt;/code&gt; value is a sorted list of distinct &lt;em&gt;lexemes&lt;/em&gt;, which are words that have been &lt;em&gt;normalized&lt;/em&gt; to merge different variants of the same word (see &lt;a href=&quot;https://www.postgresql.org/docs/12/textsearch.html&quot;&gt;Chapter 12&lt;/a&gt; for details). Sorting and duplicate-elimination are done automatically during input, as shown in this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b056d2deaf1866d999d56f9aac903ec6223482" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;zone_abbreviation&lt;/code&gt; is just the abbreviation being defined. An &lt;code&gt;offset&lt;/code&gt; is an integer giving the equivalent offset in seconds from UTC, positive being east from Greenwich and negative being west. For example, -18000 would be five hours west of Greenwich, or North American east coast standard time. &lt;code&gt;D&lt;/code&gt; indicates that the zone name represents local daylight-savings time rather than standard time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4943bcbca867f42994cb13fee08c8f711efae46" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;back reference&lt;/em&gt; (&lt;code&gt;\&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;) matches the same string matched by the previous parenthesized subexpression specified by the number &lt;code&gt;n&lt;/code&gt; (see &lt;a href=&quot;functions-matching#POSIX-CONSTRAINT-BACKREF-TABLE&quot;&gt;Table 9.22&lt;/a&gt;). For example, &lt;code&gt;([bc])\1&lt;/code&gt; matches &lt;code&gt;bb&lt;/code&gt; or &lt;code&gt;cc&lt;/code&gt; but not &lt;code&gt;bc&lt;/code&gt; or &lt;code&gt;cb&lt;/code&gt;. The subexpression must entirely precede the back reference in the RE. Subexpressions are numbered in the order of their leading parentheses. Non-capturing parentheses do not define subexpressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6718ca8fb4d919393e897bdec5fb4459615fdc4d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;bracket expression&lt;/em&gt; is a list of characters enclosed in &lt;code&gt;[]&lt;/code&gt;. It normally matches any single character from the list (but see below). If the list begins with &lt;code&gt;^&lt;/code&gt;, it matches any single character &lt;em&gt;not&lt;/em&gt; from the rest of the list. If two characters in the list are separated by &lt;code&gt;-&lt;/code&gt;, this is shorthand for the full range of characters between those two (inclusive) in the collating sequence, e.g., &lt;code&gt;[0-9]&lt;/code&gt; in ASCII matches any decimal digit. It is illegal for two ranges to share an endpoint, e.g., &lt;code&gt;a-c-e&lt;/code&gt;. Ranges are very collating-sequence-dependent, so portable programs should avoid relying on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e492c903d1ba7fa2a18a8ea616f7ebd7783cffa9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;composite type&lt;/em&gt; represents the structure of a row or record; it is essentially just a list of field names and their data types. PostgreSQL allows composite types to be used in many of the same ways that simple types can be used. For example, a column of a table can be declared to be of a composite type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e860f367bba9069717fd9b941470c654d2b4f8d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;constraint escape&lt;/em&gt; is a constraint, matching the empty string if specific conditions are met, written as an escape. They are shown in &lt;a href=&quot;functions-matching#POSIX-CONSTRAINT-ESCAPES-TABLE&quot;&gt;Table 9.21&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ce7ea4252d54e37a3de7de04c14f271d76b823" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;constraint&lt;/em&gt; matches an empty string, but matches only when specific conditions are met. A constraint can be used where an atom could be used, except it cannot be followed by a quantifier. The simple constraints are shown in &lt;a href=&quot;functions-matching#POSIX-CONSTRAINTS-TABLE&quot;&gt;Table 9.18&lt;/a&gt;; some more constraints are described later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82adef88e441ec735dafa62739629a93a7d0b236" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;document&lt;/em&gt; is the unit of searching in a full text search system; for example, a magazine article or email message. The text search engine must be able to parse documents and store associations of lexemes (key words) with their parent document. Later, these associations are used to search for documents that contain query words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d539733e585980e704da973d01ffd68041e9bbe5" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;domain&lt;/em&gt; is a user-defined data type that is based on another &lt;em&gt;underlying type&lt;/em&gt;. Optionally, it can have constraints that restrict its valid values to a subset of what the underlying type would allow. Otherwise it behaves like the underlying type &amp;mdash; for example, any operator or function that can be applied to the underlying type will work on the domain type. The underlying type can be any built-in or user-defined base type, enum type, array type, composite type, range type, or another domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e800c3197134211f2433e1a5e7b9939eb18274d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;label path&lt;/em&gt; is a sequence of zero or more labels separated by dots, for example &lt;code&gt;L1.L2.L3&lt;/code&gt;, representing a path from the root of a hierarchical tree to a particular node. The length of a label path must be less than 65kB, but keeping it under 2kB is preferable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b787370839fd1f05141e9721dfa970b29907a8f6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;label&lt;/em&gt; is a sequence of alphanumeric characters and underscores (for example, in C locale the characters &lt;code&gt;A-Za-z0-9_&lt;/code&gt; are allowed). Labels must be less than 256 bytes long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ce2d4eb014bcb723a4d1641a42edaac349db30" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;partial index&lt;/em&gt; is an index built over a subset of a table; the subset is defined by a conditional expression (called the &lt;em&gt;predicate&lt;/em&gt; of the partial index). The index contains entries only for those table rows that satisfy the predicate. Partial indexes are a specialized feature, but there are several situations in which they are useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17789413b2495753606375a6dc95de535511eb7a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;publication&lt;/em&gt; can be defined on any physical replication master. The node where a publication is defined is referred to as &lt;em&gt;publisher&lt;/em&gt;. A publication is a set of changes generated from a table or a group of tables, and might also be described as a change set or replication set. Each publication exists in only one database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad628aabb95be8473994dba34d6d8a1a5004186" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;subscription&lt;/em&gt; is the downstream side of logical replication. The node where a subscription is defined is referred to as the &lt;em&gt;subscriber&lt;/em&gt;. A subscription defines the connection to another database and set of publications (one or more) to which it wants to subscribe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa797af3b3f4fb2b2ac87bf17e6b99f0b17a6828" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;table expression&lt;/em&gt; computes a table. The table expression contains a &lt;code&gt;FROM&lt;/code&gt; clause that is optionally followed by &lt;code&gt;WHERE&lt;/code&gt;, &lt;code&gt;GROUP BY&lt;/code&gt;, and &lt;code&gt;HAVING&lt;/code&gt; clauses. Trivial table expressions simply refer to a table on disk, a so-called base table, but more complex expressions can be used to modify or combine base tables in various ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fefdb2ebab2d34cbdb1f2805b62ff07fe84dbed" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;window function call&lt;/em&gt; represents the application of an aggregate-like function over some portion of the rows selected by a query. Unlike non-window aggregate calls, this is not tied to grouping of the selected rows into a single output row &amp;mdash; each row remains separate in the query output. However the window function has access to all the rows that would be part of the current row's group according to the grouping specification (&lt;code&gt;PARTITION BY&lt;/code&gt; list) of the window function call. The syntax of a window function call is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387625f992bcdbcffbfd0633e6c6c1c4ef1ce98e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;window function&lt;/em&gt; performs a calculation across a set of table rows that are somehow related to the current row. This is comparable to the type of calculation that can be done with an aggregate function. However, window functions do not cause rows to become grouped into a single output row like non-window aggregate calls would. Instead, the rows retain their separate identities. Behind the scenes, the window function is able to access more than just the current row of the query result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e933097e94c165163135c375f18dec5b954f260" translate="yes" xml:space="preserve">
          <source>A Bloom filter is a space-efficient data structure that is used to test whether an element is a member of a set. In the case of an index access method, it allows fast exclusion of non-matching tuples via signatures whose size is determined at index creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7133145b9a1efb20311e9b66542c47e33e3b0d76" translate="yes" xml:space="preserve">
          <source>A Boolean expression that determines whether the trigger function will actually be executed. If &lt;code&gt;WHEN&lt;/code&gt; is specified, the function will only be called if the &lt;code&gt;condition&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. In &lt;code&gt;FOR EACH ROW&lt;/code&gt; triggers, the &lt;code&gt;WHEN&lt;/code&gt; condition can refer to columns of the old and/or new row values by writing &lt;code&gt;OLD.column_name&lt;/code&gt; or &lt;code&gt;NEW.column_name&lt;/code&gt; respectively. Of course, &lt;code&gt;INSERT&lt;/code&gt; triggers cannot refer to &lt;code&gt;OLD&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; triggers cannot refer to &lt;code&gt;NEW&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47409118dd85d31d6d901173cd234a285d215a5" translate="yes" xml:space="preserve">
          <source>A GIN index stores a set of (key, posting list) pairs, where a &lt;em&gt;posting list&lt;/em&gt; is a set of row IDs in which the key occurs. The same row ID can appear in multiple posting lists, since an item can contain more than one key. Each key value is stored only once, so a GIN index is very compact for cases where the same key appears many times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d714896b96774f11d4e02f2da31afcf21ba9b4" translate="yes" xml:space="preserve">
          <source>A GiST index can be covering, i.e. use the &lt;code&gt;INCLUDE&lt;/code&gt; clause. Included columns can have data types without any GiST operator class. Included attributes will be stored uncompressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686f7293e72b8ed4fbfb23d13f584165b259d7cc" translate="yes" xml:space="preserve">
          <source>A GiST index is &lt;em&gt;lossy&lt;/em&gt;, meaning that the index might produce false matches, and it is necessary to check the actual table row to eliminate such false matches. (PostgreSQL does this automatically when needed.) GiST indexes are lossy because each document is represented in the index by a fixed-length signature. The signature is generated by hashing each word into a single bit in an n-bit string, with all these bits OR-ed together to produce an n-bit document signature. When two words hash to the same bit position there will be a false match. If all words in the query have matches (real or false) then the table row must be retrieved to see if the match is correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4859377c56a7f4250fc7928febe82211450cf591" translate="yes" xml:space="preserve">
          <source>A GiST or SP-GiST index can accelerate queries involving these range operators: &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;lt;@&lt;/code&gt;, &lt;code&gt;@&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;-|-&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; (see &lt;a href=&quot;functions-range#RANGE-OPERATORS-TABLE&quot;&gt;Table 9.53&lt;/a&gt; for more information).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5052f6936540d438e9a8f74a835240911affa68e" translate="yes" xml:space="preserve">
          <source>A JIT provider is loaded by dynamically loading the named shared library. The normal library search path is used to locate the library. To provide the required JIT provider callbacks and to indicate that the library is actually a JIT provider, it needs to provide a C function named &lt;code&gt;_PG_jit_provider_init&lt;/code&gt;. This function is passed a struct that needs to be filled with the callback function pointers for individual actions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f096d1aabaef04fadfbfc0905d4cc493f3ce419f" translate="yes" xml:space="preserve">
          <source>A JSON null value is converted to a SQL null in all cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15132a79db70b0e2b3cdb81cbd574f378944491" translate="yes" xml:space="preserve">
          <source>A PostgreSQL database cluster contains one or more named databases. Users and groups of users are shared across the entire cluster, but no other data is shared across databases. Any given client connection to the server can access only the data in a single database, the one specified in the connection request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d33772a25bf4dd8b6ca0ae7bbd6d891d7102d71" translate="yes" xml:space="preserve">
          <source>A Snowball dictionary recognizes everything, whether or not it is able to simplify the word, so it should be placed at the end of the dictionary list. It is useless to have it before any other dictionary because a token will never pass through it to the next dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bd8340532262887cb9ae14aa89845f88df9078" translate="yes" xml:space="preserve">
          <source>A UUID is written as a sequence of lower-case hexadecimal digits, in several groups separated by hyphens, specifically a group of 8 digits followed by three groups of 4 digits followed by a group of 12 digits, for a total of 32 digits representing the 128 bits. An example of a UUID in this standard form is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a2ddaed13b4fa5189155f796c23cd0b85b2037" translate="yes" xml:space="preserve">
          <source>A bare &lt;code&gt;VALUES&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c75bcd54e5d624eb16ebfaf6893165bef4c000" translate="yes" xml:space="preserve">
          <source>A better approach is to send the server's stderr output to some type of log rotation program. There is a built-in log rotation facility, which you can use by setting the configuration parameter &lt;code&gt;logging_collector&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt;. The control parameters for this program are described in &lt;a href=&quot;runtime-config-logging#RUNTIME-CONFIG-LOGGING-WHERE&quot;&gt;Section 19.8.1&lt;/a&gt;. You can also use this approach to capture the log data in machine readable CSV (comma-separated values) format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc700417ea8062cbc2133cca40c230572b19efd" translate="yes" xml:space="preserve">
          <source>A better solution is this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5297ccac9bf406cd190777b88e363b006c5135" translate="yes" xml:space="preserve">
          <source>A binary string is a sequence of octets (or bytes). Binary strings are distinguished from character strings in two ways. First, binary strings specifically allow storing octets of value zero and other &amp;ldquo;non-printable&amp;rdquo; octets (usually, octets outside the decimal range 32 to 126). Character strings disallow zero octets, and also disallow any other octet values and sequences of octet values that are invalid according to the database's selected character set encoding. Second, operations on binary strings process the actual bytes, whereas the processing of character strings depends on locale settings. In short, binary strings are appropriate for storing data that the programmer thinks of as &amp;ldquo;raw bytes&amp;rdquo;, whereas character strings are appropriate for storing text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9eaea7144ed65ec693bd5b0921667ccf802b3ac" translate="yes" xml:space="preserve">
          <source>A bit string value requires 1 byte for each group of 8 bits, plus 5 or 8 bytes overhead depending on the length of the string (but long values may be compressed or moved out-of-line, as explained in &lt;a href=&quot;datatype-character&quot;&gt;Section 8.3&lt;/a&gt; for character strings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731f4887b94e6b2c73ac23722091bfbfd646df88" translate="yes" xml:space="preserve">
          <source>A bracket expression &lt;code&gt;[...]&lt;/code&gt; specifies a character class, just as in POSIX regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accb592fdd062757612f62053a65bd65ef084e6d" translate="yes" xml:space="preserve">
          <source>A branch &amp;mdash; that is, an RE that has no top-level &lt;code&gt;|&lt;/code&gt; operator &amp;mdash; has the same greediness as the first quantified atom in it that has a greediness attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e93e1b748baa49f966038b6b801bfe31bf0d6a1" translate="yes" xml:space="preserve">
          <source>A branch is zero or more &lt;em&gt;quantified atoms&lt;/em&gt; or &lt;em&gt;constraints&lt;/em&gt;, concatenated. It matches a match for the first, followed by a match for the second, etc; an empty branch matches the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afc09a0dce3701a8ab0f81442e2374a5fdfb59a" translate="yes" xml:space="preserve">
          <source>A brief description of the parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531e171813e0ccf35b132f56c05f84b2c29d4251" translate="yes" xml:space="preserve">
          <source>A brief example of using the extension follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ac6e951a01b0cf91beea39451931792f189912" translate="yes" xml:space="preserve">
          <source>A call &lt;code&gt;foo(10)&lt;/code&gt; will fail due to the ambiguity about which function should be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fd0d041b9fc5d4d7e64ce01b658bcce1a5ce19" translate="yes" xml:space="preserve">
          <source>A cascading standby sends not only WAL records received from the master but also those restored from the archive. So even if the replication connection in some upstream connection is terminated, streaming replication continues downstream for as long as new WAL records are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b122451af392bc569e4090bc6ac8841aa8dd655" translate="yes" xml:space="preserve">
          <source>A case similar to filter conditions occurs with &amp;ldquo;lossy&amp;rdquo; index scans. For example, consider this search for polygons containing a specific point:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1483859001ccf841f9287a26876bc89e5ac64726" translate="yes" xml:space="preserve">
          <source>A cast to or from a domain type currently has no effect. Casting to or from a domain uses the casts associated with its underlying type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee03111f55078d640fb1865535e64f9dbf42c86a" translate="yes" xml:space="preserve">
          <source>A catalog row appearing in the initial data can be given a manually-assigned OID by writing an &lt;code&gt;oid =&amp;gt; nnnn&lt;/code&gt; metadata field. Furthermore, if an OID is assigned, a C macro for that OID can be created by writing an &lt;code&gt;oid_symbol =&amp;gt; name&lt;/code&gt; metadata field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322518448cbeae5586806e5aaaa6dbbaaee252c8" translate="yes" xml:space="preserve">
          <source>A change in collation definitions can lead to corrupt indexes and other problems because the database system relies on stored objects having a certain sort order. Generally, this should be avoided, but it can happen in legitimate circumstances, such as when using &lt;code&gt;pg_upgrade&lt;/code&gt; to upgrade to server binaries linked with a newer version of ICU. When this happens, all objects depending on the collation should be rebuilt, for example, using &lt;code&gt;REINDEX&lt;/code&gt;. When that is done, the collation version can be refreshed using the command &lt;code&gt;ALTER COLLATION ... REFRESH VERSION&lt;/code&gt;. This will update the system catalog to record the current collator version and will make the warning go away. Note that this does not actually check whether all affected objects have been rebuilt correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4a0879a18199d5f077ec0ff2e180faddd77063" translate="yes" xml:space="preserve">
          <source>A check constraint can also refer to several columns. Say you store a regular price and a discounted price, and you want to ensure that the discounted price is lower than the regular price:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb12afa94e8bc72660d65f619fede9431dd8e90" translate="yes" xml:space="preserve">
          <source>A check constraint is the most generic constraint type. It allows you to specify that the value in a certain column must satisfy a Boolean (truth-value) expression. For instance, to require positive product prices, you could use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9805d0aa6ddc05f9bc01627befe8b2b8532cb45" translate="yes" xml:space="preserve">
          <source>A checkpoint is a point in the write-ahead log sequence at which all data files have been updated to reflect the information in the log. All data files will be flushed to disk. Refer to &lt;a href=&quot;wal-configuration&quot;&gt;Section 29.4&lt;/a&gt; for more details about what happens during a checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10395ea67c519738bcfedd97fec8b7a98e77981" translate="yes" xml:space="preserve">
          <source>A clause of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d17faa1f9b24f81d090c43c22a75e3dfd2f4a5" translate="yes" xml:space="preserve">
          <source>A clause of the form &lt;code&gt;USING ( a, b, ... )&lt;/code&gt; is shorthand for &lt;code&gt;ON left_table.a = right_table.a AND left_table.b = right_table.b ...&lt;/code&gt;. Also, &lt;code&gt;USING&lt;/code&gt; implies that only one of each pair of equivalent columns will be included in the join output, not both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0bfde758816d57c2adc33132d231587021c551" translate="yes" xml:space="preserve">
          <source>A closely related issue that affects planning time is collapsing of subqueries into their parent query. For example, consider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca452f51e79db640e56e4f9925aa0048af9d720d" translate="yes" xml:space="preserve">
          <source>A code defining the specific semantics of this dependency relationship; see text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca8fb5b99b4bb7400bad4589e85235d85b8712a" translate="yes" xml:space="preserve">
          <source>A code defining the type of initial privilege of this object; see text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f2588e77da5e4feafd01ab8f374851f37bddfd" translate="yes" xml:space="preserve">
          <source>A code number indicating the kind of statistics stored in the &lt;code&gt;N&lt;/code&gt;th &amp;ldquo;slot&amp;rdquo; of the &lt;code&gt;pg_statistic&lt;/code&gt; row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f423b7df9b88ecbf124e9ccab75b7d879dc4cca0" translate="yes" xml:space="preserve">
          <source>A collation expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0dd05ad8edff154a8e6c9ab1b14bf3a7460e7c" translate="yes" xml:space="preserve">
          <source>A collation is an SQL schema object that maps an SQL name to locales provided by libraries installed in the operating system. A collation definition has a &lt;em&gt;provider&lt;/em&gt; that specifies which library supplies the locale data. One standard provider name is &lt;code&gt;libc&lt;/code&gt;, which uses the locales provided by the operating system C library. These are the locales that most tools provided by the operating system use. Another provider is &lt;code&gt;icu&lt;/code&gt;, which uses the external ICU library. ICU locales can only be used if support for ICU was configured when PostgreSQL was built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd492bf97f6c0e26453468337ad19bf874c44502" translate="yes" xml:space="preserve">
          <source>A collation is either &lt;em&gt;deterministic&lt;/em&gt; or &lt;em&gt;nondeterministic&lt;/em&gt;. A deterministic collation uses deterministic comparisons, which means that it considers strings to be equal only if they consist of the same byte sequence. Nondeterministic comparison may determine strings to be equal even if they consist of different bytes. Typical situations include case-insensitive comparison, accent-insensitive comparison, as well as comparison of strings in different Unicode normal forms. It is up to the collation provider to actually implement such insensitive comparisons; the deterministic flag only determines whether ties are to be broken using bytewise comparison. See also &lt;a href=&quot;https://unicode.org/reports/tr10&quot;&gt;Unicode Technical Standard 10&lt;/a&gt; for more information on the terminology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebffe965dbfb2b402733d22f1b65d8768ef66b6" translate="yes" xml:space="preserve">
          <source>A collation object provided by &lt;code&gt;icu&lt;/code&gt; maps to a named collator provided by the ICU library. ICU does not support separate &amp;ldquo;collate&amp;rdquo; and &amp;ldquo;ctype&amp;rdquo; settings, so they are always the same. Also, ICU collations are independent of the encoding, so there is always only one ICU collation of a given name in a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e66134fe986b5a1161f010ed997e5c29515718" translate="yes" xml:space="preserve">
          <source>A collation object provided by &lt;code&gt;libc&lt;/code&gt; maps to a combination of &lt;code&gt;LC_COLLATE&lt;/code&gt; and &lt;code&gt;LC_CTYPE&lt;/code&gt; settings, as accepted by the &lt;code&gt;setlocale()&lt;/code&gt; system library call. (As the name would suggest, the main purpose of a collation is to set &lt;code&gt;LC_COLLATE&lt;/code&gt;, which controls the sort order. But it is rarely necessary in practice to have an &lt;code&gt;LC_CTYPE&lt;/code&gt; setting that is different from &lt;code&gt;LC_COLLATE&lt;/code&gt;, so it is more convenient to collect these under one concept than to create another infrastructure for setting &lt;code&gt;LC_CTYPE&lt;/code&gt; per expression.) Also, a &lt;code&gt;libc&lt;/code&gt; collation is tied to a character set encoding (see &lt;a href=&quot;multibyte&quot;&gt;Section 23.3&lt;/a&gt;). The same collation name may exist for different encodings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243ac044c18a03ce7230410123ce180ce925ca61" translate="yes" xml:space="preserve">
          <source>A column can be assigned a default value. When a new row is created and no values are specified for some of the columns, those columns will be filled with their respective default values. A data manipulation command can also request explicitly that a column be set to its default value, without having to know what that value is. (Details about data manipulation commands are in &lt;a href=&quot;https://www.postgresql.org/docs/12/dml.html&quot;&gt;Chapter 6&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a303981025d3fba2a49b2d8afa067fd02f82810b" translate="yes" xml:space="preserve">
          <source>A column can be referenced in the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e814702f2c68b1dd74624138092e2f2dac25d61" translate="yes" xml:space="preserve">
          <source>A column marked &lt;code&gt;FOR ORDINALITY&lt;/code&gt; will be populated with row numbers, starting with 1, in the order of nodes retrieved from the &lt;code&gt;row_expression&lt;/code&gt;'s result node-set. At most one column may be marked &lt;code&gt;FOR ORDINALITY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e0d49f86838408b879ad07c7e5231286011142" translate="yes" xml:space="preserve">
          <source>A column of a foreign table created using this wrapper can have the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc14af77e732b86dd798941f4129e5ffc051f3d7" translate="yes" xml:space="preserve">
          <source>A column reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fad0f566cbecaf300364b0a3a7343007869d54" translate="yes" xml:space="preserve">
          <source>A column-specific trigger (one defined using the &lt;code&gt;UPDATE OF column_name&lt;/code&gt; syntax) will fire when any of its columns are listed as targets in the &lt;code&gt;UPDATE&lt;/code&gt; command's &lt;code&gt;SET&lt;/code&gt; list. It is possible for a column's value to change even when the trigger is not fired, because changes made to the row's contents by &lt;code&gt;BEFORE UPDATE&lt;/code&gt; triggers are not considered. Conversely, a command such as &lt;code&gt;UPDATE ... SET x = x ...&lt;/code&gt; will fire a trigger on column &lt;code&gt;x&lt;/code&gt;, even though the column's value did not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f697bbd81557d764888518e1af36278f9c8d3579" translate="yes" xml:space="preserve">
          <source>A combination of dynamic domain transition and trusted procedure enables an interesting use case that fits the typical process life-cycle of connection pooling software. Even if your connection pooling software is not allowed to run most of SQL commands, you can allow it to switch the security label of the client using the &lt;code&gt;sepgsql_setcon()&lt;/code&gt; function from within a trusted procedure; that should take some credential to authorize the request to switch the client label. After that, this session will have the privileges of the target user, rather than the connection pooler. The connection pooler can later revert the security label change by again using &lt;code&gt;sepgsql_setcon()&lt;/code&gt; with &lt;code&gt;NULL&lt;/code&gt; argument, again invoked from within a trusted procedure with appropriate permissions checks. The point here is that only the trusted procedure actually has permission to change the effective security label, and only does so when given proper credentials. Of course, for secure operation, the credential store (table, procedure definition, or whatever) must be protected from unauthorized access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2911cc608e469494b5712a777002f2e21913d79f" translate="yes" xml:space="preserve">
          <source>A command to execute. In &lt;code&gt;COPY FROM&lt;/code&gt;, the input is read from standard output of the command, and in &lt;code&gt;COPY TO&lt;/code&gt;, the output is written to the standard input of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfeede7bacbce2d25ad1c8afefcc0d73e7394ef6" translate="yes" xml:space="preserve">
          <source>A comment is a sequence of characters beginning with double dashes and extending to the end of the line, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb6cee486403a5e9f022d4d86b027a6b1d863bd" translate="yes" xml:space="preserve">
          <source>A comment is removed from the input stream before further syntax analysis and is effectively replaced by whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4ff7f9082f219e362f6b80b3a0778be34303a7" translate="yes" xml:space="preserve">
          <source>A completely empty field value (no characters at all between the commas or parentheses) represents a NULL. To write a value that is an empty string rather than NULL, write &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db43da6a754b048f8c15b9fee6431ce49e646a6c" translate="yes" xml:space="preserve">
          <source>A conflict will produce an error and will stop the replication; it must be resolved manually by the user. Details about the conflict can be found in the subscriber's server log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de61942e5889f7081d4c447f2d861f6661580c6" translate="yes" xml:space="preserve">
          <source>A connection from an application program to the PostgreSQL server has to be established. The application program transmits a query to the server and waits to receive the results sent back by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff27f94049d4acbe17b6492b665c173de57c0e06" translate="yes" xml:space="preserve">
          <source>A constant of an &lt;em&gt;arbitrary&lt;/em&gt; type can be entered using any one of the following notations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def2a00f2b728102b713698dbaec6bf7d1b1ba45" translate="yes" xml:space="preserve">
          <source>A constant or expression to compute and insert at the indicated place in the resulting table (set of rows). In a &lt;code&gt;VALUES&lt;/code&gt; list appearing at the top level of an &lt;code&gt;INSERT&lt;/code&gt;, an &lt;code&gt;expression&lt;/code&gt; can be replaced by &lt;code&gt;DEFAULT&lt;/code&gt; to indicate that the destination column's default value should be inserted. &lt;code&gt;DEFAULT&lt;/code&gt; cannot be used when &lt;code&gt;VALUES&lt;/code&gt; appears in other contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51660594b80d9306c037e5807f00beb6e91d699" translate="yes" xml:space="preserve">
          <source>A constant or literal value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8fda03118cc7add18d0baf25c70ed12492a1c1" translate="yes" xml:space="preserve">
          <source>A constraint marked with &lt;code&gt;NO INHERIT&lt;/code&gt; will not propagate to child tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8913bbb8fb57baf6761a820445fb91f212ee581b" translate="yes" xml:space="preserve">
          <source>A convention often used is to write key words in upper case and names in lower case, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee55ddb20eb8d0ea230a86a3979ff4c9211fbe9" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;pg_type.typalign&lt;/code&gt; of this column's type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16520694e80b09447c7974353ea21a94aea9b85b" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;pg_type.typbyval&lt;/code&gt; of this column's type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469c374912ca15a938f750a67728c2d10a7ddd2a" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;pg_type.typlen&lt;/code&gt; of this column's type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64372429a7f7ff378ebe32047bb948215d6fc9f3" translate="yes" xml:space="preserve">
          <source>A cursor has an associated position, which is used by &lt;code&gt;FETCH&lt;/code&gt;. The cursor position can be before the first row of the query result, on any particular row of the result, or after the last row of the result. When created, a cursor is positioned before the first row. After fetching some rows, the cursor is positioned on the row most recently retrieved. If &lt;code&gt;FETCH&lt;/code&gt; runs off the end of the available rows then the cursor is left positioned after the last row, or before the first row if fetching backward. &lt;code&gt;FETCH ALL&lt;/code&gt; or &lt;code&gt;FETCH BACKWARD ALL&lt;/code&gt; will always leave the cursor positioned after the last row or before the first row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca84330d2df84d2fb3203c9d1abd5c728ed51c45" translate="yes" xml:space="preserve">
          <source>A custom-format dump is not a script for psql, but instead must be restored with pg_restore, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac05a9e40c0d434aa68a1851fc9e7d6d26043953" translate="yes" xml:space="preserve">
          <source>A data type &lt;code&gt;tsvector&lt;/code&gt; is provided for storing preprocessed documents, along with a type &lt;code&gt;tsquery&lt;/code&gt; for representing processed queries (&lt;a href=&quot;datatype-textsearch&quot;&gt;Section 8.11&lt;/a&gt;). There are many functions and operators available for these data types (&lt;a href=&quot;functions-textsearch&quot;&gt;Section 9.13&lt;/a&gt;), the most important of which is the match operator &lt;code&gt;@@&lt;/code&gt;, which we introduce in &lt;a href=&quot;textsearch-intro#TEXTSEARCH-MATCHING&quot;&gt;Section 12.1.2&lt;/a&gt;. Full text searches can be accelerated using indexes (&lt;a href=&quot;textsearch-indexes&quot;&gt;Section 12.9&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c829ffd204fab8f2c9ec9a14aa40a4d117b945a" translate="yes" xml:space="preserve">
          <source>A data-only dump will still use &lt;code&gt;COPY&lt;/code&gt;, but it does not drop or recreate indexes, and it does not normally touch foreign keys. &lt;a href=&quot;#ftn.id-1.5.13.7.11.4.2&quot;&gt;&lt;sup id=&quot;id-1.5.13.7.11.4.2&quot;&gt;[13]&lt;/sup&gt;&lt;/a&gt; So when loading a data-only dump, it is up to you to drop and recreate indexes and foreign keys if you wish to use those techniques. It's still useful to increase &lt;code&gt;max_wal_size&lt;/code&gt; while loading the data, but don't bother increasing &lt;code&gt;maintenance_work_mem&lt;/code&gt;; rather, you'd do that while manually recreating indexes and foreign keys afterwards. And don't forget to &lt;code&gt;ANALYZE&lt;/code&gt; when you're done; see &lt;a href=&quot;routine-vacuuming#VACUUM-FOR-STATISTICS&quot;&gt;Section 24.1.3&lt;/a&gt; and &lt;a href=&quot;routine-vacuuming#AUTOVACUUM&quot;&gt;Section 24.1.6&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7efff5b8bc220045364eeb6371d5a7d0adfbf4d" translate="yes" xml:space="preserve">
          <source>A database contains one or more named &lt;em&gt;schemas&lt;/em&gt;, which in turn contain tables. Schemas also contain other kinds of named objects, including data types, functions, and operators. The same object name can be used in different schemas without conflict; for example, both &lt;code&gt;schema1&lt;/code&gt; and &lt;code&gt;myschema&lt;/code&gt; can contain tables named &lt;code&gt;mytable&lt;/code&gt;. Unlike databases, schemas are not rigidly separated: a user can access objects in any of the schemas in the database they are connected to, if they have privileges to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebb2f86492fa3a77fa0db26d0c30c86dff05744" translate="yes" xml:space="preserve">
          <source>A database is a named collection of SQL objects (&amp;ldquo;database objects&amp;rdquo;). Generally, every database object (tables, functions, etc.) belongs to one and only one database. (However there are a few system catalogs, for example &lt;code&gt;pg_database&lt;/code&gt;, that belong to a whole cluster and are accessible from each database within the cluster.) More accurately, a database is a collection of schemas and the schemas contain the tables, functions, etc. So the full hierarchy is: server, database, schema, table (or some other kind of object, such as a function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d2c9abe130147ea353b9080d406b7f3bf3c1ff" translate="yes" xml:space="preserve">
          <source>A database role can have a number of attributes that define its privileges and interact with the client authentication system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3022f04bd927ba344f6e517eda753ede33a9966" translate="yes" xml:space="preserve">
          <source>A database superuser bypasses all permission checks, except the right to log in. This is a dangerous privilege and should not be used carelessly; it is best to do most of your work as a role that is not a superuser. To create a new database superuser, use &lt;code&gt;CREATE ROLE name SUPERUSER&lt;/code&gt;. You must do this as a role that is already a superuser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a652bebb73f376f1df0ca8598fee059cf76fc365" translate="yes" xml:space="preserve">
          <source>A default value can be specified, in case a user wants columns of the data type to default to something other than the null value. Specify the default with the &lt;code&gt;DEFAULT&lt;/code&gt; key word. (Such a default can be overridden by an explicit &lt;code&gt;DEFAULT&lt;/code&gt; clause attached to a particular column.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1f42cac75263776f033d6ed34f1fbc16bad9be" translate="yes" xml:space="preserve">
          <source>A delay of this many seconds occurs when a new server process is started, after it conducts the authentication procedure. This is intended to give an opportunity to attach to the server process with a debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd25a0e450014180419d77ce403bad9e20cb5564" translate="yes" xml:space="preserve">
          <source>A detailed description of bison or the grammar rules given in &lt;code&gt;gram.y&lt;/code&gt; would be beyond the scope of this paper. There are many books and documents dealing with flex and bison. You should be familiar with bison before you start to study the grammar given in &lt;code&gt;gram.y&lt;/code&gt; otherwise you won't understand what happens there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3c5419b01f42e467232a91a0454e478bf36293" translate="yes" xml:space="preserve">
          <source>A dictionary is a program that accepts a token as input and returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28559b5d13d6b8ce91e33b4017f8d681ab5ce5fe" translate="yes" xml:space="preserve">
          <source>A different approach to redirecting inserts into the appropriate child table is to set up rules, instead of a trigger, on the master table. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dd343b65d278a179ec5a3ad694901513c02d90" translate="yes" xml:space="preserve">
          <source>A different setting might be appropriate when doing synchronous logical replication. The logical replication workers report the positions of writes and flushes to the publisher, and when using synchronous replication, the publisher will wait for the actual flush. This means that setting &lt;code&gt;synchronous_commit&lt;/code&gt; for the subscriber to &lt;code&gt;off&lt;/code&gt; when the subscription is used for synchronous replication might increase the latency for &lt;code&gt;COMMIT&lt;/code&gt; on the publisher. In this scenario, it can be advantageous to set &lt;code&gt;synchronous_commit&lt;/code&gt; to &lt;code&gt;local&lt;/code&gt; or higher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b0f5ef06846b6f2b1bf89e5b5dc745a05b482a" translate="yes" xml:space="preserve">
          <source>A disadvantage of the &lt;code&gt;jsonb_path_ops&lt;/code&gt; approach is that it produces no index entries for JSON structures not containing any values, such as &lt;code&gt;{&quot;a&quot;: {}}&lt;/code&gt;. If a search for documents containing such a structure is requested, it will require a full-index scan, which is quite slow. &lt;code&gt;jsonb_path_ops&lt;/code&gt; is therefore ill-suited for applications that often perform such searches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436fb2bab58d12b2362059406a336206c3d00306" translate="yes" xml:space="preserve">
          <source>A discrete range is one whose element type has a well-defined &amp;ldquo;step&amp;rdquo;, such as &lt;code&gt;integer&lt;/code&gt; or &lt;code&gt;date&lt;/code&gt;. In these types two elements can be said to be adjacent, when there are no valid values between them. This contrasts with continuous ranges, where it's always (or almost always) possible to identify other element values between two given values. For example, a range over the &lt;code&gt;numeric&lt;/code&gt; type is continuous, as is a range over &lt;code&gt;timestamp&lt;/code&gt;. (Even though &lt;code&gt;timestamp&lt;/code&gt; has limited precision, and so could theoretically be treated as discrete, it's better to consider it continuous since the step size is normally not of interest.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23c5cb9993deaf1311e315f3014f146e372868a" translate="yes" xml:space="preserve">
          <source>A discrete range type should have a &lt;em&gt;canonicalization&lt;/em&gt; function that is aware of the desired step size for the element type. The canonicalization function is charged with converting equivalent values of the range type to have identical representations, in particular consistently inclusive or exclusive bounds. If a canonicalization function is not specified, then ranges with different formatting will always be treated as unequal, even though they might represent the same set of values in reality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cd489229e47470dc581e1d13cab54fdd7f5f6e" translate="yes" xml:space="preserve">
          <source>A dollar sign (&lt;code&gt;$&lt;/code&gt;) followed by digits is used to represent a positional parameter in the body of a function definition or a prepared statement. In other contexts the dollar sign can be part of an identifier or a dollar-quoted string constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85726c6c75380e885546cdf31fee2dad70737f00" translate="yes" xml:space="preserve">
          <source>A dollar-quoted string that follows a keyword or identifier must be separated from it by whitespace; otherwise the dollar quoting delimiter would be taken as part of the preceding identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee3f5330478a7b8687aa435c97bcf37602fa11b" translate="yes" xml:space="preserve">
          <source>A failure message indicating inability to bind to a port might indicate that that port is already in use by some non-PostgreSQL process. You might also get this error if you terminate &lt;code&gt;postgres&lt;/code&gt; and immediately restart it using the same port; in this case, you must simply wait a few seconds until the operating system closes the port before trying again. Finally, you might get this error if you specify a port number that your operating system considers to be reserved. For example, many versions of Unix consider port numbers under 1024 to be &amp;ldquo;trusted&amp;rdquo; and only permit the Unix superuser to access them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9a12fdfac03387393cfa5d605bafff7741fcf8" translate="yes" xml:space="preserve">
          <source>A failure message mentioning &lt;code&gt;semget&lt;/code&gt; or &lt;code&gt;shmget&lt;/code&gt; probably indicates you need to configure your kernel to provide adequate shared memory and semaphores. For more discussion see &lt;a href=&quot;kernel-resources&quot;&gt;Section 18.4&lt;/a&gt;. You might be able to postpone reconfiguring your kernel by decreasing &lt;a href=&quot;runtime-config-resource#GUC-SHARED-BUFFERS&quot;&gt;shared_buffers&lt;/a&gt; to reduce the shared memory consumption of PostgreSQL, and/or by reducing &lt;a href=&quot;runtime-config-connection#GUC-MAX-CONNECTIONS&quot;&gt;max_connections&lt;/a&gt; to reduce the semaphore consumption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6441f31b6574d318eb87a3d59abc87efb6583505" translate="yes" xml:space="preserve">
          <source>A failure message suggesting that another server is already running should be checked carefully, for example by using the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9edc129f87c5a3cfe93256806f12763480e5e4" translate="yes" xml:space="preserve">
          <source>A few of the catalogs are so fundamental that they can't even be created by the BKI &lt;code&gt;create&lt;/code&gt; command that's used for most catalogs, because that command needs to write information into these catalogs to describe the new catalog. These are called &lt;em&gt;bootstrap&lt;/em&gt; catalogs, and defining one takes a lot of extra work: you have to manually prepare appropriate entries for them in the pre-loaded contents of &lt;code&gt;pg_class&lt;/code&gt; and &lt;code&gt;pg_type&lt;/code&gt;, and those entries will need to be updated for subsequent changes to the catalog's structure. (Bootstrap catalogs also need pre-loaded entries in &lt;code&gt;pg_attribute&lt;/code&gt;, but fortunately &lt;code&gt;genbki.pl&lt;/code&gt; handles that chore nowadays.) Avoid making new catalogs be bootstrap catalogs if at all possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491372897d998156eaa18d8e18156aea1cce4b05" translate="yes" xml:space="preserve">
          <source>A field selection expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c39dad2086ca141110bdca18a2eda32e161292b" translate="yes" xml:space="preserve">
          <source>A file containing the major version number of PostgreSQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d87ef4157174eec7539a1a8a3467ba85faf286d" translate="yes" xml:space="preserve">
          <source>A file recording the command-line options the server was last started with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329de4f43c6fb34276fdedd0bdd8b0f19adeca12" translate="yes" xml:space="preserve">
          <source>A file used for storing configuration parameters that are set by &lt;code&gt;ALTER SYSTEM&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60f29dfa94fb158cf5e58302f68dd9e477b3bca" translate="yes" xml:space="preserve">
          <source>A filtering dictionary can be placed anywhere in the list, except at the end where it'd be useless. Filtering dictionaries are useful to partially normalize words to simplify the task of later dictionaries. For example, a filtering dictionary could be used to remove accents from accented letters, as is done by the &lt;a href=&quot;unaccent&quot;&gt;unaccent&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b8bbc2eb9fadf3683e04ebbb9e129815f5ed02" translate="yes" xml:space="preserve">
          <source>A final identifier type used by the system is &lt;code&gt;tid&lt;/code&gt;, or tuple identifier (row identifier). This is the data type of the system column &lt;code&gt;ctid&lt;/code&gt;. A tuple ID is a pair (block number, tuple index within block) that identifies the physical location of the row within its table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9534174e684925e17ef91bf3e3714ca6759242b6" translate="yes" xml:space="preserve">
          <source>A fine point of the above example is that the &lt;code&gt;WITH&lt;/code&gt; clause is attached to the &lt;code&gt;INSERT&lt;/code&gt;, not the sub-&lt;code&gt;SELECT&lt;/code&gt; within the &lt;code&gt;INSERT&lt;/code&gt;. This is necessary because data-modifying statements are only allowed in &lt;code&gt;WITH&lt;/code&gt; clauses that are attached to the top-level statement. However, normal &lt;code&gt;WITH&lt;/code&gt; visibility rules apply, so it is possible to refer to the &lt;code&gt;WITH&lt;/code&gt; statement's output from the sub-&lt;code&gt;SELECT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04dea72f91d057a2ddbc23d00826a2d1a1c915a" translate="yes" xml:space="preserve">
          <source>A first pass to build the index is done for each new index. Once the index is built, its flag &lt;code&gt;pg_index.indisready&lt;/code&gt; is switched to &amp;ldquo;true&amp;rdquo; to make it ready for inserts, making it visible to other sessions once the transaction that performed the build is finished. This step is done in a separate transaction for each index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a130458680bbe29e1418dce659480b6f78389bae" translate="yes" xml:space="preserve">
          <source>A foreign key can also constrain and reference a group of columns. As usual, it then needs to be written in table constraint form. Here is a contrived syntax example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7935e3b9aa49c2d43f16cbf75e1d409bba02665a" translate="yes" xml:space="preserve">
          <source>A foreign key constraint specifies that the values in a column (or a group of columns) must match the values appearing in some row of another table. We say this maintains the &lt;em&gt;referential integrity&lt;/em&gt; between two related tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec7e4504b0a144e3a3d9b45cbf1480f1f8aba04" translate="yes" xml:space="preserve">
          <source>A foreign key must reference columns that either are a primary key or form a unique constraint. This means that the referenced columns always have an index (the one underlying the primary key or unique constraint); so checks on whether a referencing row has a match will be efficient. Since a &lt;code&gt;DELETE&lt;/code&gt; of a row from the referenced table or an &lt;code&gt;UPDATE&lt;/code&gt; of a referenced column will require a scan of the referencing table for rows matching the old value, it is often a good idea to index the referencing columns too. Because this is not always needed, and there are many choices available on how to index, declaration of a foreign key constraint does not automatically create an index on the referencing columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae80fcdea6bfacfb223ea7833eb93180e9021f3" translate="yes" xml:space="preserve">
          <source>A foreign server typically encapsulates connection information that a foreign-data wrapper uses to access an external data resource. Additional user-specific connection information may be specified by means of user mappings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9b5927e002630605d5343a34d0cf4f9f180fe0" translate="yes" xml:space="preserve">
          <source>A foreign server using the &lt;code&gt;postgres_fdw&lt;/code&gt; foreign data wrapper can have the same options that libpq accepts in connection strings, as described in &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-PARAMKEYWORDS&quot;&gt;Section 33.1.2&lt;/a&gt;, except that these options are not allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be8aee5fcb016100bb8dc793de4e631744baeb3" translate="yes" xml:space="preserve">
          <source>A foreign table created using this wrapper can have the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f8f23c4cbab938356aea7eedc9b0a745c3d640" translate="yes" xml:space="preserve">
          <source>A foreign-data wrapper handler is declared to return &lt;code&gt;fdw_handler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d69f8188280c90b11c42fae9d5a6f62a34fa828" translate="yes" xml:space="preserve">
          <source>A full list of &lt;code&gt;tsvector&lt;/code&gt;-related functions is available in &lt;a href=&quot;functions-textsearch#TEXTSEARCH-FUNCTIONS-TABLE&quot;&gt;Table 9.42&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e83897f69ea1032a4c6125df7aec06ca7e6f69" translate="yes" xml:space="preserve">
          <source>A full time zone name, for example &lt;code&gt;America/New_York&lt;/code&gt;. The recognized time zone names are listed in the &lt;code&gt;pg_timezone_names&lt;/code&gt; view (see &lt;a href=&quot;view-pg-timezone-names&quot;&gt;Section 51.92&lt;/a&gt;). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3257c97b3a14d468e354dcf32c96f8c18bebc4" translate="yes" xml:space="preserve">
          <source>A function call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b8eafb6b7c2b2b298c30410ef6e0e704d3c56b" translate="yes" xml:space="preserve">
          <source>A function can be represented by its &lt;code&gt;proname&lt;/code&gt;, if that is unique among the &lt;code&gt;pg_proc.dat&lt;/code&gt; entries (this works like regproc input). Otherwise, write it as &lt;code&gt;proname(argtypename,argtypename,...)&lt;/code&gt;, like regprocedure. The argument type names must be spelled exactly as they are in the &lt;code&gt;pg_proc.dat&lt;/code&gt; entry's &lt;code&gt;proargtypes&lt;/code&gt; field. Do not insert any spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665c5d40faa1c27c6639ca8ba23f82787f2ca582" translate="yes" xml:space="preserve">
          <source>A function that takes a single argument of composite type can optionally be called using field-selection syntax, and conversely field selection can be written in functional style. That is, the notations &lt;code&gt;col(table)&lt;/code&gt; and &lt;code&gt;table.col&lt;/code&gt; are interchangeable. This behavior is not SQL-standard but is provided in PostgreSQL because it allows use of functions to emulate &amp;ldquo;computed fields&amp;rdquo;. For more information see &lt;a href=&quot;rowtypes#ROWTYPES-USAGE&quot;&gt;Section 8.16.5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f8fec4e5b8f079531cd32a009d627206c65e10" translate="yes" xml:space="preserve">
          <source>A generated column cannot be part of a partition key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ac9eba09cfa3c9dbd2d45d33c0ab9b56aec7dc" translate="yes" xml:space="preserve">
          <source>A generated column cannot be written to directly. In &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; commands, a value cannot be specified for a generated column, but the keyword &lt;code&gt;DEFAULT&lt;/code&gt; may be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a974e7fa8fff8257dce1404630bd9e17704afbe0" translate="yes" xml:space="preserve">
          <source>A generated column cannot have a column default or an identity definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbf7e263f1354b2b93387f1bfe3cc26e77a333d" translate="yes" xml:space="preserve">
          <source>A generated column is a special column that is always computed from other columns. Thus, it is for columns what a view is for tables. There are two kinds of generated columns: stored and virtual. A stored generated column is computed when it is written (inserted or updated) and occupies storage as if it were a normal column. A virtual generated column occupies no storage and is computed when it is read. Thus, a virtual generated column is similar to a view and a stored generated column is similar to a materialized view (except that it is always updated automatically). PostgreSQL currently implements only stored generated columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4467cb35124e2c3c1d0bf937b508ea68a8aa1a" translate="yes" xml:space="preserve">
          <source>A generation expression cannot reference a system column, except &lt;code&gt;tableoid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7a5a9dc2e173ff254950537b52dfc433ffc740" translate="yes" xml:space="preserve">
          <source>A generation expression cannot reference another generated column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5204280cf84852f809b22497f5b5b7223747d56b" translate="yes" xml:space="preserve">
          <source>A heap page image obtained with &lt;code&gt;get_raw_page&lt;/code&gt; should be passed as argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852fc3cf5ee76f5f80b4e90d90cfd5ea3f69f788" translate="yes" xml:space="preserve">
          <source>A helpful trick for testing queries when you are not certain if they might loop is to place a &lt;code&gt;LIMIT&lt;/code&gt; in the parent query. For example, this query would loop forever without the &lt;code&gt;LIMIT&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83afefe0fbb71aaede7acaeb0c43f98d93c15f12" translate="yes" xml:space="preserve">
          <source>A high schedule lag time is an indication that the system cannot process transactions at the specified rate, with the chosen number of clients and threads. When the average transaction execution time is longer than the scheduled interval between each transaction, each successive transaction will fall further behind, and the schedule lag time will keep increasing the longer the test run is. When that happens, you will have to reduce the specified transaction rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cac6a1eeedd7da0737519022c8bf6afc564b8b" translate="yes" xml:space="preserve">
          <source>A histogram of the counts of distinct non-null element values within the values of the column, followed by the average number of distinct non-null elements. (Null for scalar types.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17cd8aa619245cf1ec3d376e7b36d9afdaa66d4" translate="yes" xml:space="preserve">
          <source>A host name specification that starts with a dot (&lt;code&gt;.&lt;/code&gt;) matches a suffix of the actual host name. So &lt;code&gt;.example.com&lt;/code&gt; would match &lt;code&gt;foo.example.com&lt;/code&gt; (but not just &lt;code&gt;example.com&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a83f51a8f292b8e135eff3bc4b49e6a7b0c8c1" translate="yes" xml:space="preserve">
          <source>A joined table is a table derived from two other (real or derived) tables according to the rules of the particular join type. Inner, outer, and cross-joins are available. The general syntax of a joined table is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38978f6d39cb114e0bbdd4555f08d4137a6d679" translate="yes" xml:space="preserve">
          <source>A key feature of psql variables is that you can substitute (&amp;ldquo;interpolate&amp;rdquo;) them into regular SQL statements, as well as the arguments of meta-commands. Furthermore, psql provides facilities for ensuring that variable values used as SQL literals and identifiers are properly quoted. The syntax for interpolating a value without any quoting is to prepend the variable name with a colon (&lt;code&gt;:&lt;/code&gt;). For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82961127c30e9d99b0606fff4408183ed9cb0961" translate="yes" xml:space="preserve">
          <source>A key property of &lt;code&gt;WITH&lt;/code&gt; queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ba864342105e7de2a1c4f77ad3ea649ab3dd8e" translate="yes" xml:space="preserve">
          <source>A larger setting would be appropriate if other programs on the machine also need huge pages. Don't forget to add this setting to &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; so that it will be reapplied after reboots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740fc98f7710c6fce519cc7ddb08e68b536ff0d4" translate="yes" xml:space="preserve">
          <source>A less-oversimplified example of a &lt;code&gt;subtype_diff&lt;/code&gt; function is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b979d3d44d76b40d5152f1d019597a03929970" translate="yes" xml:space="preserve">
          <source>A limitation of pgbench is that it can itself become the bottleneck when trying to test a large number of client sessions. This can be alleviated by running pgbench on a different machine from the database server, although low network latency will be essential. It might even be useful to run several pgbench instances concurrently, on several client machines, against the same database server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2d89a97d20a5efbc73683817ba2ff464b9a103" translate="yes" xml:space="preserve">
          <source>A limitation of these built-in triggers is that they treat all the input columns alike. To process columns differently &amp;mdash; for example, to weight title differently from body &amp;mdash; it is necessary to write a custom trigger. Here is an example using PL/pgSQL as the trigger language:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
