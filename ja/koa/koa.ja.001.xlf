<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="koa">
    <body>
      <group id="koa">
        <trans-unit id="7e34d51bb200a6e7418e066d71fe895ecc66c79b" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2018 Koa contributors</source>
          <target state="translated">&amp;copy;2018コアの貢献者</target>
        </trans-unit>
        <trans-unit id="0f3ad7fa738c3cce6feb83c84f029b2b35686825" translate="yes" xml:space="preserve">
          <source>100 &quot;continue&quot;</source>
          <target state="translated">100 &quot;続ける&quot;</target>
        </trans-unit>
        <trans-unit id="16e8c481d9794e04bded910007cfba67f0c76e81" translate="yes" xml:space="preserve">
          <source>101 &quot;switching protocols&quot;</source>
          <target state="translated">101 &quot;スイッチングプロトコル&quot;</target>
        </trans-unit>
        <trans-unit id="a3bb6b2f2606d9ab4c1838c25f9cc4db5680169a" translate="yes" xml:space="preserve">
          <source>102 &quot;processing&quot;</source>
          <target state="translated">102 &quot;処理&quot;</target>
        </trans-unit>
        <trans-unit id="f4d3f4642fa8687af8ec3b4897308e7cdea700c3" translate="yes" xml:space="preserve">
          <source>200 &quot;ok&quot;</source>
          <target state="translated">200 &quot;OK&quot;</target>
        </trans-unit>
        <trans-unit id="6cd3482e1a6322908036f559d00c610fd778593c" translate="yes" xml:space="preserve">
          <source>201 &quot;created&quot;</source>
          <target state="translated">201 &quot;作られた&quot;</target>
        </trans-unit>
        <trans-unit id="26a168df7de2dc176917248cab99f59bd94c0644" translate="yes" xml:space="preserve">
          <source>202 &quot;accepted&quot;</source>
          <target state="translated">202 &quot;受理された&quot;</target>
        </trans-unit>
        <trans-unit id="f436d0234bbe61cdeaae73dec7ba448fe369ce7e" translate="yes" xml:space="preserve">
          <source>203 &quot;non-authoritative information&quot;</source>
          <target state="translated">203 &quot;非権威情報&quot;</target>
        </trans-unit>
        <trans-unit id="b1615a6b947cfa09b05f77b1a322cf3faf09233f" translate="yes" xml:space="preserve">
          <source>204 &quot;no content&quot;</source>
          <target state="translated">204 「容器がない</target>
        </trans-unit>
        <trans-unit id="1fb257f1f8b4cf62ab9851157a57992a324753a1" translate="yes" xml:space="preserve">
          <source>205 &quot;reset content&quot;</source>
          <target state="translated">205 &quot;コンテンツをリセット&quot;</target>
        </trans-unit>
        <trans-unit id="8cc6ccfd3d959f0c24f2e809b280cdd7cf74ebd0" translate="yes" xml:space="preserve">
          <source>206 &quot;partial content&quot;</source>
          <target state="translated">206 &quot;部分的な内容&quot;</target>
        </trans-unit>
        <trans-unit id="c8d7251a2ef71a60ea58d07f6a3836662c92037b" translate="yes" xml:space="preserve">
          <source>207 &quot;multi-status&quot;</source>
          <target state="translated">207 &quot;マルチステータス&quot;</target>
        </trans-unit>
        <trans-unit id="71fa8d07c05d5ca8d5a0d7ace0c7e78c7182d043" translate="yes" xml:space="preserve">
          <source>208 &quot;already reported&quot;</source>
          <target state="translated">208 &quot;報告済み&quot;</target>
        </trans-unit>
        <trans-unit id="3deedb620f29955c684985c3220ee89902281731" translate="yes" xml:space="preserve">
          <source>226 &quot;im used&quot;</source>
          <target state="translated">226 &quot;使われている&quot;</target>
        </trans-unit>
        <trans-unit id="f211cd59b9f40634389737de15c0a9f37cb71d1e" translate="yes" xml:space="preserve">
          <source>300 &quot;multiple choices&quot;</source>
          <target state="translated">300 &quot;複数の選択肢&quot;</target>
        </trans-unit>
        <trans-unit id="ebd3e4a18ebdfa63b7ccf28fcd57b38f6f58af0e" translate="yes" xml:space="preserve">
          <source>301 &quot;moved permanently&quot;</source>
          <target state="translated">301 &quot;恒久的に移動&quot;</target>
        </trans-unit>
        <trans-unit id="e914ef1ed695e5e2664d47287ac1f4425a8f46ad" translate="yes" xml:space="preserve">
          <source>302 &quot;found&quot;</source>
          <target state="translated">302 &quot;見つかった&quot;</target>
        </trans-unit>
        <trans-unit id="910c2a99435cd7a33061be1db92373e1dea62469" translate="yes" xml:space="preserve">
          <source>303 &quot;see other&quot;</source>
          <target state="translated">303 &quot;その他を見る&quot;</target>
        </trans-unit>
        <trans-unit id="cd0de072d6c9a465d6f406148e6a3873ebd1132d" translate="yes" xml:space="preserve">
          <source>304 &quot;not modified&quot;</source>
          <target state="translated">304 &quot;変更されていません&quot;</target>
        </trans-unit>
        <trans-unit id="81a09e4e387a49a7dde425566e2677358adc9ead" translate="yes" xml:space="preserve">
          <source>305 &quot;use proxy&quot;</source>
          <target state="translated">305 &quot;プロキシを使用する&quot;</target>
        </trans-unit>
        <trans-unit id="b463b9b516b77bdec9402044fe3a49913bc00171" translate="yes" xml:space="preserve">
          <source>307 &quot;temporary redirect&quot;</source>
          <target state="translated">307 &quot;一時的なリダイレクト&quot;</target>
        </trans-unit>
        <trans-unit id="83561fb00cfc54c47737371ed414686ac366bd80" translate="yes" xml:space="preserve">
          <source>308 &quot;permanent redirect&quot;</source>
          <target state="translated">308 &quot;永久リダイレクト&quot;</target>
        </trans-unit>
        <trans-unit id="29b783f294c5c5cabfc74c10d393b0f207ea06d7" translate="yes" xml:space="preserve">
          <source>400 &quot;bad request&quot;</source>
          <target state="translated">400 &quot;悪い要求&quot;</target>
        </trans-unit>
        <trans-unit id="2d1e23d02389dc5e305e6fd199e7cdc19bcdb6bd" translate="yes" xml:space="preserve">
          <source>401 &quot;unauthorized&quot;</source>
          <target state="translated">401 &quot;無許可&quot;</target>
        </trans-unit>
        <trans-unit id="41d3b6accd2c9f2764b55548288054c9abfdc37c" translate="yes" xml:space="preserve">
          <source>402 &quot;payment required&quot;</source>
          <target state="translated">402 &quot;支払いが必要&quot;</target>
        </trans-unit>
        <trans-unit id="fbee2359a1220d1d6a053994393401bb04b223a0" translate="yes" xml:space="preserve">
          <source>403 &quot;forbidden&quot;</source>
          <target state="translated">403 禁断</target>
        </trans-unit>
        <trans-unit id="367eef3f3ddc94595ad4ab3ed8b4c529b93ea56c" translate="yes" xml:space="preserve">
          <source>404 &quot;not found&quot;</source>
          <target state="translated">404 &quot;見つかりませんでした&quot;</target>
        </trans-unit>
        <trans-unit id="f0d0b3965c89b56ade648908aff586a70f7e2013" translate="yes" xml:space="preserve">
          <source>405 &quot;method not allowed&quot;</source>
          <target state="translated">405 &quot;方法が許可されていません&quot;</target>
        </trans-unit>
        <trans-unit id="19516685214a0e739b9450a417c64c665d9914b8" translate="yes" xml:space="preserve">
          <source>406 &quot;not acceptable&quot;</source>
          <target state="translated">406 &quot;受け入れられない&quot;</target>
        </trans-unit>
        <trans-unit id="39aad7146a0e12da0e46230c13dddd93e6643b12" translate="yes" xml:space="preserve">
          <source>407 &quot;proxy authentication required&quot;</source>
          <target state="translated">407 &quot;プロキシ認証が必要です&quot;</target>
        </trans-unit>
        <trans-unit id="08afce8a9d7ce810b4c0854845fe872a6de7c9e3" translate="yes" xml:space="preserve">
          <source>408 &quot;request timeout&quot;</source>
          <target state="translated">408 &quot;リクエストタイムアウト&quot;</target>
        </trans-unit>
        <trans-unit id="13d35c9f0e3349f82e5bc08b45630b0de0af242a" translate="yes" xml:space="preserve">
          <source>409 &quot;conflict&quot;</source>
          <target state="translated">409 &quot;紛争&quot;</target>
        </trans-unit>
        <trans-unit id="c7cd632a1d4aae66a6b98ec282fed5661675fba8" translate="yes" xml:space="preserve">
          <source>410 &quot;gone&quot;</source>
          <target state="translated">消えた</target>
        </trans-unit>
        <trans-unit id="9c8db09045acdad9285d016bd45c3afa5d495842" translate="yes" xml:space="preserve">
          <source>411 &quot;length required&quot;</source>
          <target state="translated">411 &quot;必要な長さ&quot;</target>
        </trans-unit>
        <trans-unit id="00f3756652ee5e40db40ef715253bb224e8ac106" translate="yes" xml:space="preserve">
          <source>412 &quot;precondition failed&quot;</source>
          <target state="translated">412 &quot;前提条件に失敗しました&quot;</target>
        </trans-unit>
        <trans-unit id="aef909ba84d9c16b801724d65fe88f346901ccbd" translate="yes" xml:space="preserve">
          <source>413 &quot;payload too large&quot;</source>
          <target state="translated">413 &quot;ペイロードが大きすぎる&quot;</target>
        </trans-unit>
        <trans-unit id="6fe19f749da756d57988518e4e377bfc58484709" translate="yes" xml:space="preserve">
          <source>414 &quot;uri too long&quot;</source>
          <target state="translated">414 &quot;uri too long&quot;</target>
        </trans-unit>
        <trans-unit id="819475170ac9626eb51a71841af130b3487220e3" translate="yes" xml:space="preserve">
          <source>415 &quot;unsupported media type&quot;</source>
          <target state="translated">415 &quot;サポートされていないメディアタイプ&quot;</target>
        </trans-unit>
        <trans-unit id="22fefdb9e187e93cacebf7e94b9240ea765f487e" translate="yes" xml:space="preserve">
          <source>416 &quot;range not satisfiable&quot;</source>
          <target state="translated">416 &quot;範囲が満たされない&quot;</target>
        </trans-unit>
        <trans-unit id="5f71577a1f4e239c663b5d5935b73028eb08848f" translate="yes" xml:space="preserve">
          <source>417 &quot;expectation failed&quot;</source>
          <target state="translated">417 &quot;期待はずれ&quot;</target>
        </trans-unit>
        <trans-unit id="b16bf7ccd4225aa038e2919f9179ea1d08d65f93" translate="yes" xml:space="preserve">
          <source>418 &quot;I'm a teapot&quot;</source>
          <target state="translated">418 &quot;私はティーポット&quot;</target>
        </trans-unit>
        <trans-unit id="7a196ddfc0efa006c3da744ef6aadd7f06862dcb" translate="yes" xml:space="preserve">
          <source>422 &quot;unprocessable entity&quot;</source>
          <target state="translated">422 &quot;処理不能な実体&quot;</target>
        </trans-unit>
        <trans-unit id="32056eb8b22b0293e6e2260fc9426b882b989fd4" translate="yes" xml:space="preserve">
          <source>423 &quot;locked&quot;</source>
          <target state="translated">423 &quot;ロック&quot;</target>
        </trans-unit>
        <trans-unit id="05f374a015ae9b3dfb1a4a8c5526b4907e2f80cc" translate="yes" xml:space="preserve">
          <source>424 &quot;failed dependency&quot;</source>
          <target state="translated">424 &quot;失敗した依存関係&quot;</target>
        </trans-unit>
        <trans-unit id="5c5460071f0f247cfffd659aa6e207ff0d47dbdf" translate="yes" xml:space="preserve">
          <source>426 &quot;upgrade required&quot;</source>
          <target state="translated">426 &quot;アップグレードが必要&quot;</target>
        </trans-unit>
        <trans-unit id="037de6be6c6db3109a41ad4881f31d447bc35f57" translate="yes" xml:space="preserve">
          <source>428 &quot;precondition required&quot;</source>
          <target state="translated">428 &quot;前提条件が必要&quot;</target>
        </trans-unit>
        <trans-unit id="0f59eec197d1a75c9cfb012b2e0eb85f38ac5957" translate="yes" xml:space="preserve">
          <source>429 &quot;too many requests&quot;</source>
          <target state="translated">429 &quot;要求が多すぎる&quot;</target>
        </trans-unit>
        <trans-unit id="1a107603c6035ea4d5a7af7700f76486b578368f" translate="yes" xml:space="preserve">
          <source>431 &quot;request header fields too large&quot;</source>
          <target state="translated">431 &quot;リクエストヘッダーフィールドが大きすぎる&quot;</target>
        </trans-unit>
        <trans-unit id="d0de3d1ee6a65d035a7d52f3462c403c8c2ad9b8" translate="yes" xml:space="preserve">
          <source>500 &quot;internal server error&quot;</source>
          <target state="translated">500 &quot;内部サーバーエラー&quot;</target>
        </trans-unit>
        <trans-unit id="8960474e16a4a40b440cf5c800439f59333ec97b" translate="yes" xml:space="preserve">
          <source>501 &quot;not implemented&quot;</source>
          <target state="translated">501 &quot;未実装&quot;</target>
        </trans-unit>
        <trans-unit id="8d80b9e87714e9b9cf76d80f674f940dc93bd095" translate="yes" xml:space="preserve">
          <source>502 &quot;bad gateway&quot;</source>
          <target state="translated">502 &quot;不良ゲートウェイ&quot;</target>
        </trans-unit>
        <trans-unit id="4ef0cc4019d8552e3be54b70c8ca5ab8431893f6" translate="yes" xml:space="preserve">
          <source>503 &quot;service unavailable&quot;</source>
          <target state="translated">503 &quot;サービス利用不可&quot;</target>
        </trans-unit>
        <trans-unit id="75a96cb51b8246ef6f685e5ef8a166d5a18c5542" translate="yes" xml:space="preserve">
          <source>504 &quot;gateway timeout&quot;</source>
          <target state="translated">504 &quot;ゲートウェイタイムアウト&quot;</target>
        </trans-unit>
        <trans-unit id="a7db347bf0ed29ca0d0ab4a2113138f2a75fbf57" translate="yes" xml:space="preserve">
          <source>505 &quot;http version not supported&quot;</source>
          <target state="translated">505 &quot;http バージョンはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="37c5dd9c293bd39a1afabb8f8bdb0458a19bdf7d" translate="yes" xml:space="preserve">
          <source>506 &quot;variant also negotiates&quot;</source>
          <target state="translated">506 &quot;バリアントも交渉する&quot;</target>
        </trans-unit>
        <trans-unit id="6e147a34fd4c8ad740bfe344054609ff5bdf334c" translate="yes" xml:space="preserve">
          <source>507 &quot;insufficient storage&quot;</source>
          <target state="translated">507 &quot;収納不足&quot;</target>
        </trans-unit>
        <trans-unit id="8a6fcc4f49f6dfbbb8f65202835417442dc1ff13" translate="yes" xml:space="preserve">
          <source>508 &quot;loop detected&quot;</source>
          <target state="translated">508 &quot;ループが検出されました&quot;</target>
        </trans-unit>
        <trans-unit id="f74850685bb3b0f4e8496b6e17ffc718399db310" translate="yes" xml:space="preserve">
          <source>510 &quot;not extended&quot;</source>
          <target state="translated">510 &quot;拡張されていない&quot;</target>
        </trans-unit>
        <trans-unit id="2eba8619709810fe27883d58f77504449519237d" translate="yes" xml:space="preserve">
          <source>511 &quot;network authentication required&quot;</source>
          <target state="translated">511 &quot;ネットワーク認証が必要です&quot;</target>
        </trans-unit>
        <trans-unit id="97ad6c572916ece3cdddeefa4830468b9e7a67e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/thenables/composition&quot;&gt;composition&lt;/a&gt; is no longer used and deprecated.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/thenables/composition&quot;&gt;構成&lt;/a&gt;は使用されなくなり、非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="c53b872217283e3eefb082e5cbcb602db6ce82b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tj/co&quot;&gt;co&lt;/a&gt; is no longer bundled with Koa. Require or import it directly.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tj/co&quot;&gt;co&lt;/a&gt;はKoaにバンドルされなくなりました。直接要求するか、直接インポートします。</target>
        </trans-unit>
        <trans-unit id="24deeaf8267e275c2905545bdf81ca514746c367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buffer&lt;/code&gt; written</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 書き込まれたバッファ</target>
        </trans-unit>
        <trans-unit id="0402ccbdc8fbed6cdee95e06c062b0d577e07d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Context&lt;/code&gt; specific methods and accessors.</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; 固有のメソッドとアクセサー。</target>
        </trans-unit>
        <trans-unit id="03d1e60424d13c6e86c8f6a0af8f8f9a969d92fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; || &lt;code&gt;Array&lt;/code&gt; json-stringified</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; || json-stringified &lt;code&gt;Array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a672176164e81a628d1b0769c838aefaf8cc04d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stream&lt;/code&gt; piped</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; パイプストリーム</target>
        </trans-unit>
        <trans-unit id="1c8c83e845a7c35f36646529b5cc7b106c8889a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.context&lt;/code&gt; is the prototype from which &lt;code&gt;ctx&lt;/code&gt; is created. You may add additional properties to &lt;code&gt;ctx&lt;/code&gt; by editing &lt;code&gt;app.context&lt;/code&gt;. This is useful for adding properties or methods to &lt;code&gt;ctx&lt;/code&gt; to be used across your entire app, which may be more performant (no middleware) and/or easier (fewer &lt;code&gt;require()&lt;/code&gt;s) at the expense of relying more on &lt;code&gt;ctx&lt;/code&gt;, which could be considered an anti-pattern.</source>
          <target state="translated">&lt;code&gt;app.context&lt;/code&gt; は、 &lt;code&gt;ctx&lt;/code&gt; が作成されるプロトタイプです。 &lt;code&gt;app.context&lt;/code&gt; を編集して、 &lt;code&gt;ctx&lt;/code&gt; にプロパティを追加できます。これはにプロパティやメソッドを追加するために有用である &lt;code&gt;ctx&lt;/code&gt; （少ないが、よりパフォーマンスかもしれあなたの全体のアプリ、（なしミドルウェア）を越え、および/または容易に使用されるように &lt;code&gt;require()&lt;/code&gt; にもっと頼るの犠牲にしてs）は &lt;code&gt;ctx&lt;/code&gt; することができました、アンチパターンと見なされます。</target>
        </trans-unit>
        <trans-unit id="138b8bd6afed4c0bab59fd49cce02f523ee90ba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.env&lt;/code&gt; defaulting to the &lt;strong&gt;NODE_ENV&lt;/strong&gt; or &quot;development&quot;</source>
          <target state="translated">&lt;code&gt;app.env&lt;/code&gt; のデフォルトは&lt;strong&gt;NODE_ENV&lt;/strong&gt;または「開発」</target>
        </trans-unit>
        <trans-unit id="09bc5c503aaf78f820dab7014924051c2a966a8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.proxy&lt;/code&gt; when true proxy header fields will be trusted</source>
          <target state="translated">&lt;code&gt;app.proxy&lt;/code&gt; 真のプロキシヘッダーフィールドが信頼される場合のapp.proxy</target>
        </trans-unit>
        <trans-unit id="364f7a7530ece8984745701412132752d0f49e78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.subdomainOffset&lt;/code&gt; offset of &lt;code&gt;.subdomains&lt;/code&gt; to ignore [2]</source>
          <target state="translated">&lt;code&gt;app.subdomainOffset&lt;/code&gt; はオフセット &lt;code&gt;.subdomains&lt;/code&gt; 無視する[2]</target>
        </trans-unit>
        <trans-unit id="f76575d5da449f69e4a527a6c7e82fd509b15a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctx.body&lt;/code&gt; is not set until &lt;em&gt;after&lt;/em&gt; the response has been sent. The code doesn't tell Koa to wait for the database to return the record. Koa sends the response after the middleware has been run, but not after the callback inside the middleware has been run. In the gap there, &lt;code&gt;ctx.body&lt;/code&gt; has not yet been set, so Koa responds with a 404.</source>
          <target state="translated">&lt;code&gt;ctx.body&lt;/code&gt; はまで設定されていない&lt;em&gt;後に&lt;/em&gt;応答が送信されました。コードは、データベースがレコードを返すのを待つようKoaに指示しません。Koaはミドルウェアの実行後に応答を送信しますが、ミドルウェア内のコールバックが実行された後は送信しません。そのギャップでは、 &lt;code&gt;ctx.body&lt;/code&gt; がまだ設定されていないため、Koaは404で応答します。</target>
        </trans-unit>
        <trans-unit id="af6b1eb069d5e22f187035a1b80071d5999abda3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;domain&lt;/code&gt; cookie domain</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; cookieドメイン</target>
        </trans-unit>
        <trans-unit id="c6dbfeabb39fcfacf1d01918a09aacaa1fd6030c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expires&lt;/code&gt; a &lt;code&gt;Date&lt;/code&gt; for cookie expiration</source>
          <target state="translated">&lt;code&gt;expires&lt;/code&gt; &lt;code&gt;Date&lt;/code&gt; Cookieの有効期限のために</target>
        </trans-unit>
        <trans-unit id="b21d552dbc8081060e5557f8e9b1a6e790839107" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpOnly&lt;/code&gt; server-accessible cookie, &lt;strong&gt;true&lt;/strong&gt; by default</source>
          <target state="translated">&lt;code&gt;httpOnly&lt;/code&gt; サーバーからアクセス可能なCookie、デフォルトでは&lt;strong&gt;true&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7bce7b2023041d9a354c3635fbb2466a576707a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxAge&lt;/code&gt; a number representing the milliseconds from Date.now() for expiry</source>
          <target state="translated">&lt;code&gt;maxAge&lt;/code&gt; は、有効期限のDate.now（）からのミリ秒を表す数値</target>
        </trans-unit>
        <trans-unit id="9f08c804289c2a93fe71cd48272148c18b8163f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;npm outdated&lt;/code&gt; to see which Koa middleware is outdated</source>
          <target state="translated">&lt;code&gt;npm outdated&lt;/code&gt; 、どのKoaミドルウェアが古いかを確認する</target>
        </trans-unit>
        <trans-unit id="34c5eb7a45e7ff11b37e1ec5b0d5215cd02adf45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; no content response</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; コンテンツ応答なし</target>
        </trans-unit>
        <trans-unit id="3e6216d4de1ab67433df74090a924beebfd67b1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overwrite&lt;/code&gt; a boolean indicating whether to overwrite previously set cookies of the same name (&lt;strong&gt;false&lt;/strong&gt; by default). If this is true, all cookies set during the same request with the same name (regardless of path or domain) are filtered out of the Set-Cookie header when setting this cookie.</source>
          <target state="translated">&lt;code&gt;overwrite&lt;/code&gt; 同じ名前（の前にセットクッキー上書きするかどうかを示すブール値&lt;strong&gt;はfalse&lt;/strong&gt;、デフォルトでは）。これがtrueの場合、同じリクエスト中に同じ名前で（パスやドメインに関係なく）設定されたすべてのCookieは、このCookieを設定するときにSet-Cookieヘッダーから除外されます。</target>
        </trans-unit>
        <trans-unit id="0bf080c37dc3904a49976b6a69689a545abbc75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; cookie path, &lt;code&gt;/'&lt;/code&gt; by default</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; cookieパス、デフォルトでは &lt;code&gt;/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e4876558873e37606456202820aaf942c57505f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;secure&lt;/code&gt; secure cookie</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; な安全なクッキー</target>
        </trans-unit>
        <trans-unit id="d63e0a573bb7f1334803db5730833dbeb9c7a968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signed&lt;/code&gt; sign the cookie value</source>
          <target state="translated">&lt;code&gt;signed&lt;/code&gt; Cookieの値の符号</target>
        </trans-unit>
        <trans-unit id="07f2fc84746ff7c2bd5ceea3416df45680273320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signed&lt;/code&gt; the cookie requested should be signed</source>
          <target state="translated">&lt;code&gt;signed&lt;/code&gt; 要求されたCookieに署名する必要があります</target>
        </trans-unit>
        <trans-unit id="4eb4577d562f2319edbd5e951b1082d2822c1172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; written</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 書かれた文字列</target>
        </trans-unit>
        <trans-unit id="2d86c3d6a5cd9b0acae47a04c59ad0d7b0f57d2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: don't worry too much about memorizing these strings, if you have a typo an error will be thrown, displaying this list so you can make a correction.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これらの文字列を記憶することについてはあまり気にしないでください。タイプミスがあるとエラーがスローされ、このリストが表示されるので修正できます。</target>
        </trans-unit>
        <trans-unit id="ec98d8308b0c3ecf6cfd9d06e7937ebfc50219f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old signature middleware (v1.x) support will be removed in v3&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;古い署名ミドルウェア（v1.x）のサポートはv3で削除されます&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fb2ba6a20458b6de80b737f1ce24338feb57b48" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Context&lt;/code&gt; is created &lt;em&gt;per&lt;/em&gt; request, and is referenced in middleware as the receiver, or the &lt;code&gt;ctx&lt;/code&gt; identifier, as shown in the following snippet:</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; 作成される&lt;em&gt;ごとに&lt;/em&gt;要求し、受信機、又はミドルウェアで参照されている &lt;code&gt;ctx&lt;/code&gt; 次のコードに示すように、識別子：</target>
        </trans-unit>
        <trans-unit id="b746b24b3bd6560a7b6f05fa5caddc7a400b185b" translate="yes" xml:space="preserve">
          <source>A Koa &lt;code&gt;Request&lt;/code&gt; object is an abstraction on top of node's vanilla request object, providing additional functionality that is useful for every day HTTP server development.</source>
          <target state="translated">Koa &lt;code&gt;Request&lt;/code&gt; オブジェクトは、ノードの標準的なリクエストオブジェクトを抽象化したもので、毎日のHTTPサーバー開発に役立つ追加機能を提供します。</target>
        </trans-unit>
        <trans-unit id="d0b9fff76d7cef480ea1493acc80ab2df76d7b6b" translate="yes" xml:space="preserve">
          <source>A Koa &lt;code&gt;Request&lt;/code&gt; object.</source>
          <target state="translated">Koa &lt;code&gt;Request&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="22ff7cbea0bb04b5dded3db75484ff13bae288e9" translate="yes" xml:space="preserve">
          <source>A Koa &lt;code&gt;Response&lt;/code&gt; object is an abstraction on top of node's vanilla response object, providing additional functionality that is useful for every day HTTP server development.</source>
          <target state="translated">Koa &lt;code&gt;Response&lt;/code&gt; オブジェクトは、ノードの標準的な応答オブジェクトの上にある抽象化であり、毎日のHTTPサーバー開発に役立つ追加機能を提供します。</target>
        </trans-unit>
        <trans-unit id="e4bd403a9b88c3325fed3066948895dc662acf4d" translate="yes" xml:space="preserve">
          <source>A Koa &lt;code&gt;Response&lt;/code&gt; object.</source>
          <target state="translated">Koa &lt;code&gt;Response&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="15424633fe7c6d325c5c0bdfb1e19a2d23a227dc" translate="yes" xml:space="preserve">
          <source>A Koa Context encapsulates node's &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; objects into a single object which provides many helpful methods for writing web applications and APIs. These operations are used so frequently in HTTP server development that they are added at this level instead of a higher level framework, which would force middleware to re-implement this common functionality.</source>
          <target state="translated">Koaコンテキストは、ノードの &lt;code&gt;request&lt;/code&gt; オブジェクトと &lt;code&gt;response&lt;/code&gt; オブジェクトを単一のオブジェクトにカプセル化し、WebアプリケーションとAPIを作成するための多くの便利なメソッドを提供します。これらの操作はHTTPサーバーの開発で頻繁に使用されるため、ミドルウェアがこの共通の機能を再実装することを強いる、より高いレベルのフレームワークではなく、このレベルで追加されます。</target>
        </trans-unit>
        <trans-unit id="b59a553cf262ce6479dca7d218cde58a461e11ef" translate="yes" xml:space="preserve">
          <source>A Koa application is an object containing an array of middleware functions which are composed and executed in a stack-like manner upon request. Koa is similar to many other middleware systems that you may have encountered such as Ruby's Rack, Connect, and so on - however a key design decision was made to provide high level &quot;sugar&quot; at the otherwise low-level middleware layer. This improves interoperability, robustness, and makes writing middleware much more enjoyable.</source>
          <target state="translated">Koa アプリケーションは、リクエストに応じてスタックのように構成され実行されるミドルウェア関数の配列を含むオブジェクトです。Koa は Ruby の Rack や Connect などのような他の多くのミドルウェアシステムと似ていますが、重要な設計上の決定事項は、低レベルのミドルウェア層に高レベルの &quot;糖質&quot; を提供することです。これにより、相互運用性や堅牢性が向上し、ミドルウェアを書くのがより楽しくなります。</target>
        </trans-unit>
        <trans-unit id="2d552fb96096d9be93316697a402eed0e0c078d5" translate="yes" xml:space="preserve">
          <source>A Koa application is not a 1-to-1 representation of an HTTP server. One or more Koa applications may be mounted together to form larger applications with a single HTTP server.</source>
          <target state="translated">Koa アプリケーションは HTTP サーバを 1 対 1 で表現するものではありません。1つまたは複数のKoaアプリケーションを一緒にマウントして、1つのHTTPサーバで大規模なアプリケーションを形成することができます。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="555462ce68754ad77fb5dda4b5cb7791e7c2f687" translate="yes" xml:space="preserve">
          <source>Add the given middleware function to this application. See &lt;a href=&quot;https://github.com/koajs/koa/wiki#middleware&quot;&gt;Middleware&lt;/a&gt; for more information.</source>
          <target state="translated">指定されたミドルウェア機能をこのアプリケーションに追加します。詳細については、&lt;a href=&quot;https://github.com/koajs/koa/wiki#middleware&quot;&gt;ミドルウェア&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d89bd810335b351bb9f2fa821dde4f0098f19596" translate="yes" xml:space="preserve">
          <source>Adding another piece of middleware and some logging can be extremely helpful in identifying this issue.</source>
          <target state="translated">ミドルウェアを追加してログを記録することは、この問題を特定するのに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="0a3c0ba9786952137d092e3222565ac8976dc64d" translate="yes" xml:space="preserve">
          <source>An explicit check for the &lt;code&gt;test&lt;/code&gt; environment was removed from error handling.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 環境の明示的なチェックがエラー処理から削除されました。</target>
        </trans-unit>
        <trans-unit id="c179441109e597b74d404a46d618c3019fb67a82" translate="yes" xml:space="preserve">
          <source>Append additional header &lt;code&gt;field&lt;/code&gt; with value &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">追加のヘッダー &lt;code&gt;field&lt;/code&gt; に値 &lt;code&gt;val&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="e30251f8bcdf2274ce0bf30fd3541d4a2c735045" translate="yes" xml:space="preserve">
          <source>Application instance reference.</source>
          <target state="translated">アプリケーションインスタンスの参照。</target>
        </trans-unit>
        <trans-unit id="49e2b3b53bad616fd80d283a3660aeedf496dfe9" translate="yes" xml:space="preserve">
          <source>Application object constructor requires new</source>
          <target state="translated">アプリケーションオブジェクトのコンストラクタは新しい</target>
        </trans-unit>
        <trans-unit id="fffb32d08836447a70342a7b472656a515ffddf7" translate="yes" xml:space="preserve">
          <source>Application settings are properties on the &lt;code&gt;app&lt;/code&gt; instance, currently the following are supported:</source>
          <target state="translated">アプリケーション設定は、 &lt;code&gt;app&lt;/code&gt; インスタンスのプロパティです。現在、以下がサポートされています。</target>
        </trans-unit>
        <trans-unit id="fba0f885fcc84fe9e9400ec4834de644356b5fe6" translate="yes" xml:space="preserve">
          <source>As result of this different philosophy is that traditional node.js &quot;middleware&quot;, i.e. functions of the form &lt;code&gt;(req, res, next)&lt;/code&gt;, are incompatible with Koa. Your application will essentially have to be rewritten from the ground, up.</source>
          <target state="translated">この異なる哲学の結果として、従来のnode.js &quot;ミドルウェア&quot;、つまり &lt;code&gt;(req, res, next)&lt;/code&gt; という形式の関数はKoaと互換性がありません。アプリケーションは基本的に、最初から上から書き直す必要があります。</target>
        </trans-unit>
        <trans-unit id="d189b397954d76d519d7ae8d4811adb4ced13b66" translate="yes" xml:space="preserve">
          <source>Async Functions with Babel</source>
          <target state="translated">Babel での非同期関数</target>
        </trans-unit>
        <trans-unit id="ae21a7ac02969f3ff2e54831995f50b50e50e8d7" translate="yes" xml:space="preserve">
          <source>Async function and promise forms Koa's foundation, allowing you to write non-blocking sequential code. For example this middleware reads the filenames from &lt;code&gt;./docs&lt;/code&gt;, and then reads the contents of each markdown file in parallel before assigning the body to the joint result.</source>
          <target state="translated">非同期関数とpromiseはKoaの基盤を形成し、非ブロッキングのシーケンシャルコードを記述できるようにします。たとえば、このミドルウェアは &lt;code&gt;./docs&lt;/code&gt; からファイル名を読み取り、次に各マークダウンファイルの内容を並列に読み取ってから、ボディを結合結果に割り当てます。</target>
        </trans-unit>
        <trans-unit id="adfe0e510838ee8b274e68218dca62cbc7a121cf" translate="yes" xml:space="preserve">
          <source>Async operations</source>
          <target state="translated">非同期演算</target>
        </trans-unit>
        <trans-unit id="13850d12e41bb66c3b020909552cf591e09b9170" translate="yes" xml:space="preserve">
          <source>Await control to the next middleware</source>
          <target state="translated">次のミドルウェアへの制御を待つ</target>
        </trans-unit>
        <trans-unit id="37c616d6d59ca6f8b9079e1797d4ee324455ca78" translate="yes" xml:space="preserve">
          <source>Better error handling through try/catch.</source>
          <target state="translated">トライ/キャッチによるエラー処理の改善</target>
        </trans-unit>
        <trans-unit id="39810b86c91146fd0a97fa6cd3b5ce2b782106da" translate="yes" xml:space="preserve">
          <source>Better user experience.</source>
          <target state="translated">より良いユーザー体験。</target>
        </trans-unit>
        <trans-unit id="2be5f64b36230104ef9c6e230215846a83d18df6" translate="yes" xml:space="preserve">
          <source>Buffer</source>
          <target state="translated">Buffer</target>
        </trans-unit>
        <trans-unit id="9f78c443463717f10637eda1935ec1cf4a1c9a1c" translate="yes" xml:space="preserve">
          <source>By default outputs all errors to stderr unless &lt;code&gt;app.silent&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. The default error handler also won't output errors when &lt;code&gt;err.status&lt;/code&gt; is &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;err.expose&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. To perform custom error-handling logic such as centralized logging you can add an &quot;error&quot; event listener:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;app.silent&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; でない限り、すべてのエラーがstderrに出力されます。 &lt;code&gt;err.status&lt;/code&gt; が &lt;code&gt;404&lt;/code&gt; または &lt;code&gt;err.expose&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、デフォルトのエラーハンドラーもエラーを出力しません。集中ログなどのカスタムエラー処理ロジックを実行するには、「エラー」イベントリスナーを追加できます。</target>
        </trans-unit>
        <trans-unit id="5f269332740a1c358d295fd5ba2448bcc42f9593" translate="yes" xml:space="preserve">
          <source>Bypassing Koa's response handling is &lt;strong&gt;not supported&lt;/strong&gt;. Avoid using the following node properties:</source>
          <target state="translated">Koaの応答処理のバイパス&lt;strong&gt;はサポートされていません&lt;/strong&gt;。次のノードプロパティの使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="d11c9caa4f066eef8707644ffc1d36da845d1e06" translate="yes" xml:space="preserve">
          <source>Calculate duration time</source>
          <target state="translated">持続時間の計算</target>
        </trans-unit>
        <trans-unit id="4517c60f79d90f39f2ba2c45f5e2eed78529219a" translate="yes" xml:space="preserve">
          <source>Calculate response time</source>
          <target state="translated">応答時間の計算</target>
        </trans-unit>
        <trans-unit id="10d6c33152679109c66c4e924011cac62f8a6902" translate="yes" xml:space="preserve">
          <source>Cascading</source>
          <target state="translated">Cascading</target>
        </trans-unit>
        <trans-unit id="08f98583c1ffe2e492a2510d98ff6f120d45719e" translate="yes" xml:space="preserve">
          <source>Cause</source>
          <target state="translated">Cause</target>
        </trans-unit>
        <trans-unit id="6a8e4e63c8d849be7a9acad329257375c9ed7a8d" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;charsets&lt;/code&gt; are acceptable, returning the best match when true, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;charsets&lt;/code&gt; が受け入れ可能かどうかを確認し、trueの場合に最も一致するものを返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7ddf0cb52b6d920bf68ba7a3c80b954656e4477e" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;encodings&lt;/code&gt; are acceptable, returning the best match when true, otherwise &lt;code&gt;false&lt;/code&gt;. Note that you should include &lt;code&gt;identity&lt;/code&gt; as one of the encodings!</source>
          <target state="translated">&lt;code&gt;encodings&lt;/code&gt; が受け入れ可能かどうかを確認し、trueの場合に最も一致するものを返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。エンコーディングの1つとして &lt;code&gt;identity&lt;/code&gt; を含める必要があることに注意してください！</target>
        </trans-unit>
        <trans-unit id="13a36261a9e8bb5eb9feb93a7a1a7c08ed74ce53" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;langs&lt;/code&gt; are acceptable, returning the best match when true, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;langs&lt;/code&gt; が受け入れ可能かどうかを確認し、trueの場合に最適な一致を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0b1932988cde3cd86367fda69c9b69f8fa8acd7c" translate="yes" xml:space="preserve">
          <source>Check if a request cache is &quot;fresh&quot;, aka the contents have not changed. This method is for cache negotiation between &lt;code&gt;If-None-Match&lt;/code&gt; / &lt;code&gt;ETag&lt;/code&gt;, and &lt;code&gt;If-Modified-Since&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt;. It should be referenced after setting one or more of these response headers.</source>
          <target state="translated">リクエストキャッシュが「新しい」かどうか、つまり内容が変更されていないかどうかを確認します。このメソッドは、 &lt;code&gt;If-None-Match&lt;/code&gt; / &lt;code&gt;ETag&lt;/code&gt; と &lt;code&gt;If-Modified-Since&lt;/code&gt; および &lt;code&gt;Last-Modified&lt;/code&gt; の間のキャッシュネゴシエーション用です。これらの応答ヘッダーを1つ以上設定した後で参照する必要があります。</target>
        </trans-unit>
        <trans-unit id="ea496f4650ed3858f6fa4d852d51b706ffc0372c" translate="yes" xml:space="preserve">
          <source>Check if a response header has already been sent. Useful for seeing if the client may be notified on error.</source>
          <target state="translated">レスポンスヘッダが既に送信されているかどうかをチェックします。エラー時にクライアントに通知される可能性があるかどうかを確認するのに便利です。</target>
        </trans-unit>
        <trans-unit id="fb08ba8229952cbcebcc013fb92242ff3a134d25" translate="yes" xml:space="preserve">
          <source>Check if the given &lt;code&gt;type(s)&lt;/code&gt; is acceptable, returning the best match when true, otherwise &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;type&lt;/code&gt; value may be one or more mime type string such as &quot;application/json&quot;, the extension name such as &quot;json&quot;, or an array &lt;code&gt;[&quot;json&quot;, &quot;html&quot;, &quot;text/plain&quot;]&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;type(s)&lt;/code&gt; が受け入れ可能かどうかを確認し、trueの場合に最も一致するものを返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。 &lt;code&gt;type&lt;/code&gt; 値は、一つまたはそのようなそのような「JSON」として「アプリケーション/ JSON」、拡張名、またはアレイのような複数のMIMEタイプ文字列とすることができる &lt;code&gt;[&quot;json&quot;, &quot;html&quot;, &quot;text/plain&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a67b2200d5c77a126b5d501f0ce0fec45059760d" translate="yes" xml:space="preserve">
          <source>Check if the incoming request contains the &quot;Content-Type&quot; header field, and it contains any of the give mime &lt;code&gt;type&lt;/code&gt;s. If there is no request body, &lt;code&gt;null&lt;/code&gt; is returned. If there is no content type, or the match fails &lt;code&gt;false&lt;/code&gt; is returned. Otherwise, it returns the matching content-type.</source>
          <target state="translated">着信要求に「Content-Type」ヘッダーフィールドが含まれているかどうか、および任意のMIME &lt;code&gt;type&lt;/code&gt; s が含まれているかどうかを確認します。リクエストボディがない場合、 &lt;code&gt;null&lt;/code&gt; が返されます。コンテンツタイプがない場合、または一致が失敗した場合は、 &lt;code&gt;false&lt;/code&gt; が返されます。それ以外の場合は、一致するコンテンツタイプを返します。</target>
        </trans-unit>
        <trans-unit id="8a9508321a056a51992d2641d5a6628f9ff280ef" translate="yes" xml:space="preserve">
          <source>Check if the request is idempotent.</source>
          <target state="translated">リクエストがidempotentであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="70c14c6bb7f0e3d45e5418a259ee9e90a7e78dbb" translate="yes" xml:space="preserve">
          <source>Combining multiple middleware with koa-compose</source>
          <target state="translated">複数のミドルウェアをkoa-composeで組み合わせる</target>
        </trans-unit>
        <trans-unit id="b65463cb6a42a17de514acc4659f7fd331e0876a" translate="yes" xml:space="preserve">
          <source>Connect</source>
          <target state="translated">Connect</target>
        </trans-unit>
        <trans-unit id="c972be02b8446556687c87408ab05f0b8d7ed048" translate="yes" xml:space="preserve">
          <source>Content Negotiation</source>
          <target state="translated">内容交渉</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="3be9284a8d9407810ce4e5ec76b608bb6682a858" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;yield []&lt;/code&gt; into &lt;code&gt;yield Promise.all([])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield []&lt;/code&gt; を &lt;code&gt;yield Promise.all([])&lt;/code&gt; 変換します</target>
        </trans-unit>
        <trans-unit id="d642c2ca84e371f437a4b51bd81006e53eba87d1" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;yield {}&lt;/code&gt; into &lt;code&gt;yield Bluebird.props({})&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield {}&lt;/code&gt; を &lt;code&gt;yield Bluebird.props({})&lt;/code&gt; 変換します</target>
        </trans-unit>
        <trans-unit id="e387174ec0ee67b328b00225247c283af95f8ae9" translate="yes" xml:space="preserve">
          <source>Create a date to track response time</source>
          <target state="translated">回答時間を追跡するための日付を作成する</target>
        </trans-unit>
        <trans-unit id="eb0cd1421302fc100f5d10c1a2e64ed982b24d18" translate="yes" xml:space="preserve">
          <source>Create and return an HTTP server, passing the given arguments to &lt;code&gt;Server#listen()&lt;/code&gt;. These arguments are documented on &lt;a href=&quot;http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback&quot;&gt;nodejs.org&lt;/a&gt;. The following is a useless Koa application bound to port &lt;code&gt;3000&lt;/code&gt;:</source>
          <target state="translated">指定された引数を &lt;code&gt;Server#listen()&lt;/code&gt; に渡して、HTTPサーバーを作成して返します。これらの引数は&lt;a href=&quot;http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback&quot;&gt;nodejs.orgに&lt;/a&gt;記載されています。以下は、ポート &lt;code&gt;3000&lt;/code&gt; にバインドされた役に立たないKoaアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="e6cae0608497260a673c2c25e77aa62937695d03" translate="yes" xml:space="preserve">
          <source>Create another date to track duration</source>
          <target state="translated">期間を追跡するために別の日付を作成する</target>
        </trans-unit>
        <trans-unit id="cf0824fb02e661c3f35ed61457dc63dc9f1277b6" translate="yes" xml:space="preserve">
          <source>Debugging Koa</source>
          <target state="translated">コアのデバッグ</target>
        </trans-unit>
        <trans-unit id="7136ddef88bbf95c88598c2d1fe7e9086d989c41" translate="yes" xml:space="preserve">
          <source>Default Error Handler</source>
          <target state="translated">デフォルトのエラーハンドラ</target>
        </trans-unit>
        <trans-unit id="802200358f69cd506dde7eae9f6d48db1ff628a6" translate="yes" xml:space="preserve">
          <source>Dependency changes</source>
          <target state="translated">依存関係の変更</target>
        </trans-unit>
        <trans-unit id="fb84df45173aa3051cffde03e7fff306388f1390" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;yield {}&lt;/code&gt; or &lt;code&gt;yield []&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;yield {}&lt;/code&gt; または &lt;code&gt;yield []&lt;/code&gt; は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="722fb43a9b20c9c8a7d19a37ec4382732d2d34fc" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;yield*&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 使用しない*</target>
        </trans-unit>
        <trans-unit id="4586c56616e087b09b7e9f3aac86410eb5ac2e50" translate="yes" xml:space="preserve">
          <source>Does Koa include routing?</source>
          <target state="translated">コアにはルーティングも含まれているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="48bff21368b989afd640bac3ee06f6f16b6ffa5e" translate="yes" xml:space="preserve">
          <source>Does Koa replace Connect?</source>
          <target state="translated">KoaはConnectの代わりになるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="5004d83990edf28a96d3b23b9960da549a09d49f" translate="yes" xml:space="preserve">
          <source>Does Koa replace Express?</source>
          <target state="translated">コアはエクスプレスの代わりになるのか?</target>
        </trans-unit>
        <trans-unit id="d7de01d909d2916fae3765049bce79705f3a7586" translate="yes" xml:space="preserve">
          <source>ENV specific logging behavior removed</source>
          <target state="translated">ENV 固有のロギング動作が削除されました。</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="23893aa673fb4b3c3fbc16491333cdddcbf36e3d" translate="yes" xml:space="preserve">
          <source>Error event listeners can be specified with &lt;code&gt;app.on('error')&lt;/code&gt;. If no error listener is specified, a default error listener is used. Error listener receive all errors that make their way back through the middleware chain, if an error is caught and not thrown again, it will not be passed to the error listener. If no error event listener is specified, then &lt;code&gt;app.onerror&lt;/code&gt; will be used, which simply log the error unless &lt;code&gt;error.expose&lt;/code&gt;is true or &lt;code&gt;app.silent&lt;/code&gt; is true or &lt;code&gt;error.status&lt;/code&gt; is 404.</source>
          <target state="translated">エラーイベントリスナーは &lt;code&gt;app.on('error')&lt;/code&gt; で指定できます。エラーリスナーが指定されていない場合、デフォルトのエラーリスナーが使用されます。エラーリスナーは、ミドルウェアチェーンを経由するすべてのエラーを受信します。エラーがキャッチされ、再度スローされない場合、エラーはエラーリスナーに渡されません。エラーイベントリスナーが指定されていない場合は、 &lt;code&gt;app.onerror&lt;/code&gt; が使用され、 &lt;code&gt;error.expose&lt;/code&gt; がtrue、 &lt;code&gt;app.silent&lt;/code&gt; がtrue、または &lt;code&gt;error.status&lt;/code&gt; が404でない限り、エラーがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="06813e46ef98ddee2172dfd6918f2a4e1c593750" translate="yes" xml:space="preserve">
          <source>Even though we now understand the basis of a 404, it might not be as clear why a 404 is generated in a specific case. This can be especially troublesome when it seems that &lt;code&gt;ctx.status&lt;/code&gt; or &lt;code&gt;ctx.body&lt;/code&gt; are set.</source>
          <target state="translated">これで404の基礎を理解できましたが、特定のケースで404が生成される理由はそれほど明確ではないかもしれません。 &lt;code&gt;ctx.status&lt;/code&gt; または &lt;code&gt;ctx.body&lt;/code&gt; が設定されているように見える場合、これは特に厄介です。</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="ef4ac16db55b26377e9f43a763e3e913a4819e9f" translate="yes" xml:space="preserve">
          <source>Express, on the other hand, augments node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects with additional properties and methods and includes many other &quot;framework&quot; features, such as routing and templating, which Koa does not.</source>
          <target state="translated">一方、Expressはノードの &lt;code&gt;req&lt;/code&gt; オブジェクトと &lt;code&gt;res&lt;/code&gt; オブジェクトを追加のプロパティとメソッドで拡張し、ルーティングやテンプレートなど、Koaにはない多くの「フレームワーク」機能を備えています。</target>
        </trans-unit>
        <trans-unit id="9942e4d395864263f474b582d331e36b37cd71dd" translate="yes" xml:space="preserve">
          <source>Expressive HTTP middleware framework for node.js to make web applications and APIs more enjoyable to write. Koa's middleware stack flows in a stack-like manner, allowing you to perform actions downstream then filter and manipulate the response upstream.</source>
          <target state="translated">WebアプリケーションやAPIをより楽しく書くための表現力豊かなnode.js用HTTPミドルウェアフレームワーク。Koaのミドルウェアスタックはスタックのように流れ、下流でアクションを実行し、上流でレスポンスをフィルタリングして操作することができます。</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="28d6cf1e96c30f56bad501c31c2f018326f5ecab" translate="yes" xml:space="preserve">
          <source>Flush any set headers, and begin the body.</source>
          <target state="translated">セットヘッダをすべて洗い流し、ボディを開始します。</target>
        </trans-unit>
        <trans-unit id="3531961fb959563910fc2b5b26b42b0a7ba478b9" translate="yes" xml:space="preserve">
          <source>For example &quot;color=blue&amp;amp;size=small&quot;:</source>
          <target state="translated">たとえば、「color = blue＆size = small」：</target>
        </trans-unit>
        <trans-unit id="1fb1591aa7a60594f0fd33ccfa81fdb2175035d5" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;ctx.throw(400, 'name required')&lt;/code&gt; is equivalent to:</source>
          <target state="translated">たとえば、 &lt;code&gt;ctx.throw(400, 'name required')&lt;/code&gt; は次と同等です。</target>
        </trans-unit>
        <trans-unit id="c57470b2f194d103428857312edbcb9308acaa71" translate="yes" xml:space="preserve">
          <source>For example if you want to ensure that only images are sent to a given route:</source>
          <target state="translated">例えば、指定されたルートに画像のみを確実に送信したい場合などです。</target>
        </trans-unit>
        <trans-unit id="efe3a8db6228ca5a5aa0d99a53e1d2e871d22204" translate="yes" xml:space="preserve">
          <source>For example if you wanted to track how long it takes for a request to propagate through Koa by adding an &lt;code&gt;X-Response-Time&lt;/code&gt; header field the middleware would look like the following:</source>
          <target state="translated">たとえば、 &lt;code&gt;X-Response-Time&lt;/code&gt; ヘッダーフィールドを追加して、リクエストがKoaを介して伝播するのにかかる時間を追跡する場合、ミドルウェアは次のようになります。</target>
        </trans-unit>
        <trans-unit id="ff6e21376a3997fff7ad3cbc7a03e643d90864c9" translate="yes" xml:space="preserve">
          <source>For example to see all Koa-specific debugging information just pass &lt;code&gt;DEBUG=koa*&lt;/code&gt; and upon boot you'll see the list of middleware used, among other things.</source>
          <target state="translated">たとえば、Koa固有のすべてのデバッグ情報を表示するには、 &lt;code&gt;DEBUG=koa*&lt;/code&gt; を渡すだけで、起動時に使用されるミドルウェアのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="5df7f00b3840aeee3ad0bacbaa98acd391d17db7" translate="yes" xml:space="preserve">
          <source>For example, if the domain is &quot;tobi.ferrets.example.com&quot;: If &lt;code&gt;app.subdomainOffset&lt;/code&gt; is not set, &lt;code&gt;ctx.subdomains&lt;/code&gt; is &lt;code&gt;[&quot;ferrets&quot;, &quot;tobi&quot;]&lt;/code&gt;. If &lt;code&gt;app.subdomainOffset&lt;/code&gt; is 3, &lt;code&gt;ctx.subdomains&lt;/code&gt; is &lt;code&gt;[&quot;tobi&quot;]&lt;/code&gt;.</source>
          <target state="translated">たとえば、ドメインが「tobi.ferrets.example.com」の場合： &lt;code&gt;app.subdomainOffset&lt;/code&gt; が設定されていない場合、 &lt;code&gt;ctx.subdomains&lt;/code&gt; は &lt;code&gt;[&quot;ferrets&quot;, &quot;tobi&quot;]&lt;/code&gt; ferrets &quot;、 &quot;tobi&quot;]になります。 &lt;code&gt;app.subdomainOffset&lt;/code&gt; が3の場合、 &lt;code&gt;ctx.subdomains&lt;/code&gt; は &lt;code&gt;[&quot;tobi&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d200e5f4fc28205bde059192357631eb1527845b" translate="yes" xml:space="preserve">
          <source>For example, instead of a &quot;body parsing&quot; middleware, you would instead use a body parsing function.</source>
          <target state="translated">例えば、「ボディ解析」ミドルウェアの代わりに、ボディ解析関数を使用します。</target>
        </trans-unit>
        <trans-unit id="9b5a29d60bd8462dda4686c639de20f4930c0ab7" translate="yes" xml:space="preserve">
          <source>For example, this is a middleware that minifies all HTML responses except for streams.</source>
          <target state="translated">例えば、ストリーム以外のHTMLレスポンスをすべてマイニングするミドルウェアです。</target>
        </trans-unit>
        <trans-unit id="de5dd83a3558e117700ee5e4e38651c47c3d98b1" translate="yes" xml:space="preserve">
          <source>For example, to add a reference to your database from &lt;code&gt;ctx&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;ctx&lt;/code&gt; からデータベースへの参照を追加するには：</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="e324d0342bc0c30e26ec28e1b6a159a110505975" translate="yes" xml:space="preserve">
          <source>Get WHATWG parsed URL object.</source>
          <target state="translated">WHATWGが解析したURLオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="4e972405650ad18243c199f2518c1c859cd7cf5e" translate="yes" xml:space="preserve">
          <source>Get a response header field value with case-insensitive &lt;code&gt;field&lt;/code&gt;.</source>
          <target state="translated">大文字と小文字を区別しない &lt;code&gt;field&lt;/code&gt; で応答ヘッダーフィールドの値を取得します。</target>
        </trans-unit>
        <trans-unit id="2341edbcb4ceec0e5c517436833d3c847a3095e0" translate="yes" xml:space="preserve">
          <source>Get cookie &lt;code&gt;name&lt;/code&gt; with &lt;code&gt;options&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 付きのCookie &lt;code&gt;name&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="e84a4ca127b810b0c64ade97d70a082218fc3bbb" translate="yes" xml:space="preserve">
          <source>Get full request URL, include &lt;code&gt;protocol&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="translated">完全なリクエストURLを取得し、含ま &lt;code&gt;protocol&lt;/code&gt; 、 &lt;code&gt;host&lt;/code&gt; および &lt;code&gt;url&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdeea78c8da0c2beadc0a050b19cd70d72f08723" translate="yes" xml:space="preserve">
          <source>Get host (hostname:port) when present. Supports &lt;code&gt;X-Forwarded-Host&lt;/code&gt; when &lt;code&gt;app.proxy&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt;, otherwise &lt;code&gt;Host&lt;/code&gt; is used.</source>
          <target state="translated">存在する場合、ホスト（hostname：port）を取得します。サポート &lt;code&gt;X-Forwarded-Host&lt;/code&gt; &lt;code&gt;app.proxy&lt;/code&gt; がある&lt;strong&gt;真&lt;/strong&gt;、そうでない場合は &lt;code&gt;Host&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="e54f6ff2b7f4b128af0e78d43653a2cadc8ccf54" translate="yes" xml:space="preserve">
          <source>Get hostname when present. Supports &lt;code&gt;X-Forwarded-Host&lt;/code&gt; when &lt;code&gt;app.proxy&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt;, otherwise &lt;code&gt;Host&lt;/code&gt; is used.</source>
          <target state="translated">存在する場合はホスト名を取得します。サポート &lt;code&gt;X-Forwarded-Host&lt;/code&gt; &lt;code&gt;app.proxy&lt;/code&gt; がある&lt;strong&gt;真&lt;/strong&gt;、そうでない場合は &lt;code&gt;Host&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="de0591dfec5d65871ad73b9a2571ed98ccbcb0e7" translate="yes" xml:space="preserve">
          <source>Get origin of URL, include &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">URLの起点を取得し、 &lt;code&gt;protocol&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; 含めます。</target>
        </trans-unit>
        <trans-unit id="4b58b87336b15712b9caab3caebd3d8fb8f1ba22" translate="yes" xml:space="preserve">
          <source>Get parsed query-string, returning an empty object when no query-string is present. Note that this getter does &lt;em&gt;not&lt;/em&gt; support nested parsing.</source>
          <target state="translated">解析されたクエリ文字列を取得し、クエリ文字列が存在しない場合は空のオブジェクトを返します。このゲッターはネストされた解析をサポートし&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d0ac9daa1cdfcd07a88f448bb6452b216089d16f" translate="yes" xml:space="preserve">
          <source>Get raw query string void of &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">未処理のクエリ文字列を取得します &lt;code&gt;?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="254208922e02536e3718b8cd89a64c662b6f6234" translate="yes" xml:space="preserve">
          <source>Get raw query string with the &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; で生のクエリ文字列を取得します。。</target>
        </trans-unit>
        <trans-unit id="da00d855b74807c2548383f90d2dccedd315173a" translate="yes" xml:space="preserve">
          <source>Get request &lt;code&gt;Content-Type&lt;/code&gt; void of parameters such as &quot;charset&quot;.</source>
          <target state="translated">「charset」などのパラメーターを含まないリクエスト &lt;code&gt;Content-Type&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="f5ed900d85f14f41c8912efc309245712066f5f1" translate="yes" xml:space="preserve">
          <source>Get request URL.</source>
          <target state="translated">リクエストURLを取得します。</target>
        </trans-unit>
        <trans-unit id="278410daf4504a7e135204088226473b203c6bee" translate="yes" xml:space="preserve">
          <source>Get request charset when present, or &lt;code&gt;undefined&lt;/code&gt;:</source>
          <target state="translated">存在する場合、または &lt;code&gt;undefined&lt;/code&gt; 場合、要求の文字セットを取得します。</target>
        </trans-unit>
        <trans-unit id="92bd12ffe397b4bc2017814e789cecb9961b9966" translate="yes" xml:space="preserve">
          <source>Get request original URL.</source>
          <target state="translated">リクエスト元のURLを取得します。</target>
        </trans-unit>
        <trans-unit id="bce431bbbe55be75df83ff2ccf75b9ea0702a647" translate="yes" xml:space="preserve">
          <source>Get request pathname.</source>
          <target state="translated">リクエストのパス名を取得します。</target>
        </trans-unit>
        <trans-unit id="8729606ab00f719ad852834d6160c54c81c93024" translate="yes" xml:space="preserve">
          <source>Get response &lt;code&gt;Content-Type&lt;/code&gt; void of parameters such as &quot;charset&quot;.</source>
          <target state="translated">「charset」などのパラメーターを含まないレスポンス &lt;code&gt;Content-Type&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="65bf0112712cc6bf2638bd4d37bae2af87120d34" translate="yes" xml:space="preserve">
          <source>Get response body.</source>
          <target state="translated">レスポンスボディを取得します。</target>
        </trans-unit>
        <trans-unit id="2edbe3819fce642ef8da9bba5ad2bfcd33622720" translate="yes" xml:space="preserve">
          <source>Get response status message. By default, &lt;code&gt;response.message&lt;/code&gt; is associated with &lt;code&gt;response.status&lt;/code&gt;.</source>
          <target state="translated">応答ステータスメッセージを取得します。デフォルトでは、 &lt;code&gt;response.message&lt;/code&gt; はresponse.statusに関連付けられ &lt;code&gt;response.status&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8d549ce2dbbdbeb3006082870f8a26ad54a0c97b" translate="yes" xml:space="preserve">
          <source>Get response status. By default, &lt;code&gt;response.status&lt;/code&gt; is set to &lt;code&gt;404&lt;/code&gt; unlike node's &lt;code&gt;res.statusCode&lt;/code&gt; which defaults to &lt;code&gt;200&lt;/code&gt;.</source>
          <target state="translated">応答ステータスを取得します。ノードの &lt;code&gt;res.statusCode&lt;/code&gt; のデフォルトが &lt;code&gt;200&lt;/code&gt; とは異なり、デフォルトでは &lt;code&gt;response.status&lt;/code&gt; は &lt;code&gt;404&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="0d1fd47fb5411e87585bb0676f6df08bd497778d" translate="yes" xml:space="preserve">
          <source>Hand off to Koa to handle the response</source>
          <target state="translated">コアに手渡して対応してもらう</target>
        </trans-unit>
        <trans-unit id="0fc5eefbcdc18d403a80a8bc15cf0589c2ffd1bb" translate="yes" xml:space="preserve">
          <source>Help out</source>
          <target state="translated">助ける</target>
        </trans-unit>
        <trans-unit id="d5f75689022bb22104c01f70e75628b0f324df35" translate="yes" xml:space="preserve">
          <source>Helper method to throw an error similar to &lt;code&gt;.throw()&lt;/code&gt; when &lt;code&gt;!value&lt;/code&gt;. Similar to node's &lt;a href=&quot;http://nodejs.org/api/assert.html&quot;&gt;assert()&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;!value&lt;/code&gt; のときに &lt;code&gt;.throw()&lt;/code&gt; と同様のエラーをスローするヘルパーメソッド。ノードの&lt;a href=&quot;http://nodejs.org/api/assert.html&quot;&gt;assert（）&lt;/a&gt;メソッドに似ています。</target>
        </trans-unit>
        <trans-unit id="45795e8c2150543d43b6f0532392ad77ceb441f9" translate="yes" xml:space="preserve">
          <source>Helper method to throw an error with a &lt;code&gt;.status&lt;/code&gt; property defaulting to &lt;code&gt;500&lt;/code&gt; that will allow Koa to respond appropriately. The following combinations are allowed:</source>
          <target state="translated">Koaが適切に応答できるようにする &lt;code&gt;.status&lt;/code&gt; プロパティのデフォルトが &lt;code&gt;500&lt;/code&gt; であるエラーをスローするヘルパーメソッド。次の組み合わせが許可されます。</target>
        </trans-unit>
        <trans-unit id="9dfbd66b2909cfcbaa31a7f4f5200dcb64ce85a3" translate="yes" xml:space="preserve">
          <source>Here is an example of creating your own error handler:</source>
          <target state="translated">ここでは、独自のエラーハンドラを作成する例を示します。</target>
        </trans-unit>
        <trans-unit id="82c401c3428129d05f4125f259cc51f87202c8be" translate="yes" xml:space="preserve">
          <source>Here our contrived &lt;code&gt;logger&lt;/code&gt; middleware accepts a &lt;code&gt;format&lt;/code&gt; string for customization, and returns the middleware itself:</source>
          <target state="translated">ここで私たちの考案された &lt;code&gt;logger&lt;/code&gt; ミドルウェアは、カスタマイズ用の &lt;code&gt;format&lt;/code&gt; 文字列を受け入れ、ミドルウェア自体を返します。</target>
        </trans-unit>
        <trans-unit id="9442cd1aa934972b0c974a8be412e46ad3383ea5" translate="yes" xml:space="preserve">
          <source>Here's an example of stream error handling without automatically destroying the stream:</source>
          <target state="translated">ストリームを自動的に破棄せずにストリームエラーを処理する例を紹介します。</target>
        </trans-unit>
        <trans-unit id="8a4678d5174da54b988f700c90fd66642c6de7f7" translate="yes" xml:space="preserve">
          <source>How is Koa different than Connect/Express?</source>
          <target state="translated">KoaはConnect/Expressとどう違うのですか?</target>
        </trans-unit>
        <trans-unit id="f9df17cff355ba6cf13f42871f08408c5219d254" translate="yes" xml:space="preserve">
          <source>Identifying this as the issue</source>
          <target state="translated">これを課題として特定する</target>
        </trans-unit>
        <trans-unit id="332e1f16eda4c27bce234c4581621810b91093b2" translate="yes" xml:space="preserve">
          <source>Identifying this problem is easier than most, add a log at the beginning of the route. If it doesn't trigger, your route was never reached in the middleware chain.</source>
          <target state="translated">この問題を特定するのは、ほとんどの場合よりも簡単で、ルートの先頭にログを追加します。もしそれがトリガーされない場合は、あなたのルートがミドルウェアチェーンに到達していないことを示しています。</target>
        </trans-unit>
        <trans-unit id="7b006d4116286c0a54cd8321c282ef772736570f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;response.status&lt;/code&gt; has not been set, Koa will automatically set the status to &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;204&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;response.status&lt;/code&gt; が設定されていない場合、Koaは自動的にステータスを &lt;code&gt;200&lt;/code&gt; または &lt;code&gt;204&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3541e72339354011bdf942852e0f9c59081f760f" translate="yes" xml:space="preserve">
          <source>If a property exists as a setter, then it will also exist as a getter, but not vice versa</source>
          <target state="translated">プロパティがセッターとして存在する場合、それはゲッターとしても存在しますが、その逆はありません。</target>
        </trans-unit>
        <trans-unit id="a345a87c043a081fc007bb8e5def45be579e439e" translate="yes" xml:space="preserve">
          <source>If an error is in the req/res cycle and it is &lt;em&gt;not&lt;/em&gt; possible to respond to the client, the &lt;code&gt;Context&lt;/code&gt; instance is also passed:</source>
          <target state="translated">エラーがreq / resサイクルにあり、クライアントに応答でき&lt;em&gt;ない&lt;/em&gt;場合は、 &lt;code&gt;Context&lt;/code&gt; インスタンスも渡されます。</target>
        </trans-unit>
        <trans-unit id="135fb5d17fbbfcdecc0eceaa9d0fc5149fc5629c" translate="yes" xml:space="preserve">
          <source>If host is IPv6, Koa delegates parsing to &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/url.html#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt;, &lt;em&gt;Note&lt;/em&gt; This may impact performance.</source>
          <target state="translated">ホストがIPv6にパース興亜の代表者である場合は&lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/url.html#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt;、&lt;em&gt;注意&lt;/em&gt;これは、パフォーマンスに影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="78bf2483a110de409b7ddc1bc3e004e6682e8d24" translate="yes" xml:space="preserve">
          <source>If multiple types are supplied, the best match will be returned. If no matches are found, a &lt;code&gt;false&lt;/code&gt; is returned, and you should send a &lt;code&gt;406 &quot;Not Acceptable&quot;&lt;/code&gt; response to the client.</source>
          <target state="translated">複数のタイプが指定されている場合、最適な一致が返されます。一致するものが見つからない場合、 &lt;code&gt;false&lt;/code&gt; が返されるので、 &lt;code&gt;406 &quot;Not Acceptable&quot;&lt;/code&gt; 応答をクライアントに送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ec182e408b90ef49959f70b7b8ad4b15cad61f7" translate="yes" xml:space="preserve">
          <source>If no types are supplied, &lt;strong&gt;all&lt;/strong&gt; acceptable types are returned.</source>
          <target state="translated">タイプが指定されていない場合、受け入れ可能な&lt;strong&gt;すべての&lt;/strong&gt;タイプが返されます。</target>
        </trans-unit>
        <trans-unit id="2fdea410981b7d2a39e4e2b0e2c94fd1e173b1b9" translate="yes" xml:space="preserve">
          <source>If you encounter a problem and later learn how to fix it, and think others might also encounter that problem, please consider contributing to this documentation.</source>
          <target state="translated">問題が発生して、後になってその解決方法を学び、他の人もその問題に遭遇するかもしれないと思ったら、このドキュメントに貢献することを検討してください。</target>
        </trans-unit>
        <trans-unit id="1569b74aaae36721f972b7bc7a8a4e8f4bf52aaa" translate="yes" xml:space="preserve">
          <source>If you encounter migration related issues not covered by this migration guide, please consider submitting a documentation pull request.</source>
          <target state="translated">この移行ガイドでカバーされていない移行関連の問題が発生した場合は、ドキュメントのプルリクエストを提出することを検討してください。</target>
        </trans-unit>
        <trans-unit id="77a82bd1eed51b05ae42a998cbb9982a03c87cd4" translate="yes" xml:space="preserve">
          <source>If you see this in the logs:</source>
          <target state="translated">ログで見たら</target>
        </trans-unit>
        <trans-unit id="cc608b9c0c2fab2c85d18db75a11c516dc699f09" translate="yes" xml:space="preserve">
          <source>If you're a front-end developer you can think any code before &lt;code&gt;next();&lt;/code&gt; as the &quot;capture&quot; phase, while any code after is the &quot;bubble&quot; phase. This crude gif illustrates how async function allow us to properly utilize stack flow to implement request and response flows:</source>
          <target state="translated">あなたがフロントエンドの開発者であれば、 &lt;code&gt;next();&lt;/code&gt; 前にどんなコードでも考えることができます。「キャプチャ」フェーズとして、その後のコードは「バブル」フェーズです。この粗雑なgifは、非同期機能によってスタックフローを適切に利用して、要求フローと応答フローを実装する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7d2d9eb114aa27f23a26aca0fcdfdd35eb79afa2" translate="yes" xml:space="preserve">
          <source>In the case of missing accept headers where any type is acceptable, the first type will be returned. Thus, the order of types you supply is important.</source>
          <target state="translated">どの型でも受け入れ可能な accept ヘッダがない場合は、最初の型が返されます。このように、提供する型の順番は重要です。</target>
        </trans-unit>
        <trans-unit id="4d08d9099501095ed9d6a1cc91e30870f3cd7136" translate="yes" xml:space="preserve">
          <source>In the code above, the book is never fetched from the database, and in fact our route was never called. Look closely at our helper middleware. We forgot to &lt;code&gt;return next()&lt;/code&gt;! This causes the middleware flow to never reach our route, ending our &quot;helper&quot; middleware.</source>
          <target state="translated">上記のコードでは、本がデータベースからフェッチされることはなく、実際にはルートが呼び出されることはありませんでした。ヘルパーミドルウェアをよく見てください。 &lt;code&gt;return next()&lt;/code&gt; へ戻るのを忘れました（）！これにより、ミドルウェアフローがルートに到達せず、「ヘルパー」ミドルウェアが終了します。</target>
        </trans-unit>
        <trans-unit id="b0a5140ad5c3a11bb2549066c5daf8f2e966de28" translate="yes" xml:space="preserve">
          <source>In v1.x, the Application constructor function could be called directly, without &lt;code&gt;new&lt;/code&gt; to instantiate an instance of an application. For example:</source>
          <target state="translated">v1.xでは、アプリケーションのインスタンスをインスタンス化するための &lt;code&gt;new&lt;/code&gt; 関数を使用せずに、アプリケーションコンストラクター関数を直接呼び出すことができました。例えば：</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="d77e7e51ce21f7ec39dd60c9fd1008757ace2a9d" translate="yes" xml:space="preserve">
          <source>Inverse of &lt;code&gt;request.fresh&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;request.fresh&lt;/code&gt; の逆。</target>
        </trans-unit>
        <trans-unit id="7f89bc48e982ba2cdca71d1ecb02ae27131eed3b" translate="yes" xml:space="preserve">
          <source>It means that the body is being set after the middleware is done, and after the response has been sent. If you see only one or none of these logs, proceed to &lt;a href=&quot;#my-middleware-is-not-called&quot;&gt;My middleware is not called&lt;/a&gt;. If they are in the right order, make sure you haven't explicitly set the status to 404, make sure that it actually is a 404, and if that fails feel free to ask for help.</source>
          <target state="translated">これは、ミドルウェアの完了後、および応答の送信後に本体が設定されていることを意味します。これらのログが1つしか表示されないか、まったく表示されない場合&lt;a href=&quot;#my-middleware-is-not-called&quot;&gt;は&lt;/a&gt;、「ミドルウェアが呼び出されない」に進みます。それらが正しい順序になっている場合は、ステータスを明示的に404に設定していないこと、それが実際に404であることを確認してください。失敗した場合は、遠慮なく助けを求めてください。</target>
        </trans-unit>
        <trans-unit id="ed3969cc98596f3450cc3c574892475ff85e0798" translate="yes" xml:space="preserve">
          <source>It's more like Connect, but a lot of the Express goodies were moved to the middleware level in Koa to help form a stronger foundation. This makes middleware more enjoyable and less error-prone to write, for the entire stack, not just the end application code.</source>
          <target state="translated">Connect のようなものですが、Express の多くの機能が Koa のミドルウェアレベルに移され、より強固な基盤を形成するのに役立ちました。これにより、エンドアプリケーションのコードだけでなく、スタック全体を対象としたミドルウェアの書き方がより楽しくなり、エラーが発生しにくくなりました。</target>
        </trans-unit>
        <trans-unit id="42c6036ddd5d662bc456c530699d3704be7c5087" translate="yes" xml:space="preserve">
          <source>JSONP</source>
          <target state="translated">JSONP</target>
        </trans-unit>
        <trans-unit id="2d5bfabcb6bca6d271e3af0b81998719a3d8e256" translate="yes" xml:space="preserve">
          <source>Koa</source>
          <target state="translated">Koa</target>
        </trans-unit>
        <trans-unit id="f70c49b7c7404d7eb1fa47b67d8b870e25042b1c" translate="yes" xml:space="preserve">
          <source>Koa abstracts node's request/response</source>
          <target state="translated">Koa はノードのリクエスト/レスポンスを抽象化します。</target>
        </trans-unit>
        <trans-unit id="d628d7c05604e9cf119c53a6986061573e1453f4" translate="yes" xml:space="preserve">
          <source>Koa along with many of the libraries it's built with support the &lt;strong&gt;DEBUG&lt;/strong&gt; environment variable from &lt;a href=&quot;https://github.com/visionmedia/debug&quot;&gt;debug&lt;/a&gt; which provides simple conditional logging.</source>
          <target state="translated">Koaは、Koaとともに構築された多くのライブラリーとともに、単純な条件付きロギングを提供する&lt;a href=&quot;https://github.com/visionmedia/debug&quot;&gt;デバッグ&lt;/a&gt;からの&lt;strong&gt;DEBUG&lt;/strong&gt;環境変数をサポートしています。</target>
        </trans-unit>
        <trans-unit id="f5db99f143cfcdffa09c03e3b9b0b41fa9c40644" translate="yes" xml:space="preserve">
          <source>Koa is a pretty large departure from what people know about Express, the design is fundamentally much different, so the migration from Express 3.0 to this Express 4.0 would effectively mean rewriting the entire application, so we thought it would be more appropriate to create a new library.</source>
          <target state="translated">Koaは、Expressについて人々が知っていることからかなり大きく逸脱しており、デザインが根本的に大きく異なっているため、Express 3.0からこのExpress 4.0への移行は、事実上アプリケーション全体を書き換えることを意味するので、新しいライブラリを作成することがより適切であると考えました。</target>
        </trans-unit>
        <trans-unit id="22ceaf6f1abd19a583fdae3aa32bdb02ba3aff1b" translate="yes" xml:space="preserve">
          <source>Koa is barebones</source>
          <target state="translated">コアはベアボーン</target>
        </trans-unit>
        <trans-unit id="84b0890f206b37c1e9b7bc5528e8118e30c6dbe9" translate="yes" xml:space="preserve">
          <source>Koa is more modular.</source>
          <target state="translated">コアの方がモジュール化されている。</target>
        </trans-unit>
        <trans-unit id="088aec8d6a1b8bdde3022c46eb0c6fac2d3a4a3e" translate="yes" xml:space="preserve">
          <source>Koa is not bundled with any middleware.</source>
          <target state="translated">Koaはどのミドルウェアにもバンドルされていません。</target>
        </trans-unit>
        <trans-unit id="66a4f29b6ff11d425a12ed72a593dcaff2645add" translate="yes" xml:space="preserve">
          <source>Koa middleware are simple functions which return a &lt;code&gt;MiddlewareFunction&lt;/code&gt; with signature (ctx, next). When the middleware is run, it must manually invoke &lt;code&gt;next()&lt;/code&gt; to run the &quot;downstream&quot; middleware.</source>
          <target state="translated">Koaミドルウェアは、署名付きの &lt;code&gt;MiddlewareFunction&lt;/code&gt; を返す単純な関数です（ctx、次）。ミドルウェアが実行されると、手動で &lt;code&gt;next()&lt;/code&gt; を呼び出して「ダウンストリーム」ミドルウェアを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="17c671068bc0a5247ea02029e3fd6abd9576df3b" translate="yes" xml:space="preserve">
          <source>Koa middleware cascade in a more traditional way as you may be used to with similar tools - this was previously difficult to make user friendly with node's use of callbacks. However with async functions we can achieve &quot;true&quot; middleware. Contrasting Connect's implementation which simply passes control through series of functions until one returns, Koa invoke &quot;downstream&quot;, then control flows back &quot;upstream&quot;.</source>
          <target state="translated">Koaのミドルウェアは、類似のツールで慣れ親しんでいるように、より伝統的な方法でカスケードを行います。しかし、非同期関数を使うことで、&quot;真の &quot;ミドルウェアを実現することができます。一方、Connectの実装は、関数が戻るまで制御を渡すだけで、Koaは &quot;下流 &quot;に呼び出し、制御は &quot;上流 &quot;に戻ってきます。</target>
        </trans-unit>
        <trans-unit id="05bc9af1ec2d054f3d1b1ae5c7edd4d9e84f0ad0" translate="yes" xml:space="preserve">
          <source>Koa relies less on middleware</source>
          <target state="translated">Koa はミドルウェアへの依存度が低い</target>
        </trans-unit>
        <trans-unit id="cd285634f6e2c49fc7b33b5408ab8fc16b9f256f" translate="yes" xml:space="preserve">
          <source>Koa requires &lt;strong&gt;node v7.6.0&lt;/strong&gt; or higher for ES2015 and async function support.</source>
          <target state="translated">Koaでは、ES2015および非同期機能のサポートのために&lt;strong&gt;ノードv7.6.0&lt;/strong&gt;以降が必要です。</target>
        </trans-unit>
        <trans-unit id="9096498c347c5f638d9b3c7587cc2a3a9bdad9f4" translate="yes" xml:space="preserve">
          <source>Koa routing (third party libraries support)</source>
          <target state="translated">Koa ルーティング (サードパーティライブラリのサポート)</target>
        </trans-unit>
        <trans-unit id="89ac1dcb50673be46e578ab90b1aa2d4a07d74c6" translate="yes" xml:space="preserve">
          <source>Koa uses &lt;a href=&quot;https://github.com/jshttp/http-assert&quot;&gt;http-assert&lt;/a&gt; for assertions.</source>
          <target state="translated">Koaはアサーションに&lt;a href=&quot;https://github.com/jshttp/http-assert&quot;&gt;http-assert&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="4390817311810f1346320dfcb817f0cf043533f4" translate="yes" xml:space="preserve">
          <source>Koa uses &lt;a href=&quot;https://github.com/jshttp/http-errors&quot;&gt;http-errors&lt;/a&gt; to create errors. &lt;code&gt;status&lt;/code&gt; should only be passed as the first parameter.</source>
          <target state="translated">Koaは&lt;a href=&quot;https://github.com/jshttp/http-errors&quot;&gt;http-errors&lt;/a&gt;を使用してエラーを作成します。 &lt;code&gt;status&lt;/code&gt; は最初のパラメータとしてのみ渡されるべきです。</target>
        </trans-unit>
        <trans-unit id="7d7db40a5ab908b23db0322b12f909f4b519b059" translate="yes" xml:space="preserve">
          <source>Koa uses its own custom objects: &lt;code&gt;ctx&lt;/code&gt;, &lt;code&gt;ctx.request&lt;/code&gt;, and &lt;code&gt;ctx.response&lt;/code&gt;. These objects abstract node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects with convenience methods and getters/setters. Generally, properties added to these objects must obey the following rules:</source>
          <target state="translated">Koaは独自のカスタムオブジェクト &lt;code&gt;ctx&lt;/code&gt; 、 &lt;code&gt;ctx.request&lt;/code&gt; 、および &lt;code&gt;ctx.response&lt;/code&gt; を使用します。これらのオブジェクトは、便利なメソッドとゲッター/セッターを使用してノードの &lt;code&gt;req&lt;/code&gt; および &lt;code&gt;res&lt;/code&gt; オブジェクトを抽象化します。通常、これらのオブジェクトに追加されるプロパティは、次の規則に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="4e1d4a95a0212f98e0cb4f306545c3063a26815d" translate="yes" xml:space="preserve">
          <source>Koa uses the &lt;a href=&quot;https://github.com/jed/cookies&quot;&gt;cookies&lt;/a&gt; module where options are simply passed.</source>
          <target state="translated">Koaは、オプションが単に渡される&lt;a href=&quot;https://github.com/jed/cookies&quot;&gt;cookie&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="3c799e0e7665e259421d02699f42bc6008b22087" translate="yes" xml:space="preserve">
          <source>Koa v2 introduces a new signature for middleware.</source>
          <target state="translated">Koa v2では、ミドルウェア用の新しいシグネチャを導入しています。</target>
        </trans-unit>
        <trans-unit id="011bdfd7f13039fb385d25975bdedd9e6513af32" translate="yes" xml:space="preserve">
          <source>Koa v2.x will try to convert legacy signature, generator middleware on &lt;code&gt;app.use&lt;/code&gt;, using &lt;a href=&quot;https://github.com/koajs/convert&quot;&gt;koa-convert&lt;/a&gt;. It is however recommended that you choose to migrate all v1.x middleware as soon as possible.</source>
          <target state="translated">Koa v2.xは、&lt;a href=&quot;https://github.com/koajs/convert&quot;&gt;koa-convert&lt;/a&gt;を使用して、 &lt;code&gt;app.use&lt;/code&gt; のレガシーシグネチャー、ジェネレーターミドルウェアを変換しようとします。ただし、すべてのv1.xミドルウェアをできるだけ早くマイグレーションすることを選択することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="53b1f79422d738fd16b157069af1f85f65a07c1f" translate="yes" xml:space="preserve">
          <source>Koa vs Express</source>
          <target state="translated">コア vs エクスプレス</target>
        </trans-unit>
        <trans-unit id="bee3c62019d806259f325de889e31bd1700e7eed" translate="yes" xml:space="preserve">
          <source>Koa's &lt;code&gt;request&lt;/code&gt; object includes helpful content negotiation utilities powered by &lt;a href=&quot;http://github.com/expressjs/accepts&quot;&gt;accepts&lt;/a&gt; and &lt;a href=&quot;https://github.com/federomero/negotiator&quot;&gt;negotiator&lt;/a&gt;. These utilities are:</source>
          <target state="translated">Koaの &lt;code&gt;request&lt;/code&gt; オブジェクトには、&lt;a href=&quot;http://github.com/expressjs/accepts&quot;&gt;accepts&lt;/a&gt;および&lt;a href=&quot;https://github.com/federomero/negotiator&quot;&gt;negotiatorを&lt;/a&gt;利用した便利なコンテンツネゴシエーションユーティリティが含まれています。これらのユーティリティは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="952f54de24cee146c5a0a2514d2c29a963acd481" translate="yes" xml:space="preserve">
          <source>Less hackery.</source>
          <target state="translated">ハックが少ない。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="bc074e717977077587bc33d2fe68246572e10515" translate="yes" xml:space="preserve">
          <source>Many of &lt;code&gt;ctx.request&lt;/code&gt; and &lt;code&gt;ctx.response&lt;/code&gt;'s properties are delegated to &lt;code&gt;ctx&lt;/code&gt;. If it's a getter/setter, then both the getter and the setter will strictly correspond to either &lt;code&gt;ctx.request&lt;/code&gt; or &lt;code&gt;ctx.response&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ctx.request&lt;/code&gt; および &lt;code&gt;ctx.response&lt;/code&gt; のプロパティの多くは &lt;code&gt;ctx&lt;/code&gt; に委任されています。ゲッター/セッターの場合、ゲッターとセッターの両方が &lt;code&gt;ctx.request&lt;/code&gt; または &lt;code&gt;ctx.response&lt;/code&gt; に厳密に対応します。</target>
        </trans-unit>
        <trans-unit id="92175a6a164db4d2826679089c81c804bbca5579" translate="yes" xml:space="preserve">
          <source>Many of the context's accessors and methods simply delegate to their &lt;code&gt;ctx.request&lt;/code&gt; or &lt;code&gt;ctx.response&lt;/code&gt; equivalents for convenience, and are otherwise identical. For example &lt;code&gt;ctx.type&lt;/code&gt; and &lt;code&gt;ctx.length&lt;/code&gt; delegate to the &lt;code&gt;response&lt;/code&gt; object, and &lt;code&gt;ctx.path&lt;/code&gt; and &lt;code&gt;ctx.method&lt;/code&gt; delegate to the &lt;code&gt;request&lt;/code&gt;.</source>
          <target state="translated">コンテキストのアクセサとメソッドの多くは、便宜上、同等の &lt;code&gt;ctx.request&lt;/code&gt; または &lt;code&gt;ctx.response&lt;/code&gt; に委譲するだけで、それ以外は同じです。たとえば、 &lt;code&gt;ctx.type&lt;/code&gt; および &lt;code&gt;ctx.length&lt;/code&gt; は &lt;code&gt;response&lt;/code&gt; オブジェクトに委任し、 &lt;code&gt;ctx.path&lt;/code&gt; および &lt;code&gt;ctx.method&lt;/code&gt; は &lt;code&gt;request&lt;/code&gt; 委任します。</target>
        </trans-unit>
        <trans-unit id="6c2dcf88d9ee9e19a35a30cafa9fc60991a8e2a4" translate="yes" xml:space="preserve">
          <source>Many properties on &lt;code&gt;ctx&lt;/code&gt; are defined using getters, setters, and &lt;code&gt;Object.defineProperty()&lt;/code&gt;. You can only edit these properties (not recommended) by using &lt;code&gt;Object.defineProperty()&lt;/code&gt; on &lt;code&gt;app.context&lt;/code&gt;. See &lt;a href=&quot;https://github.com/koajs/koa/issues/652&quot;&gt;https://github.com/koajs/koa/issues/652&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ctx&lt;/code&gt; の多くのプロパティは、ゲッター、セッター、および &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用して定義されます。あなただけ使用して（推奨しません）これらのプロパティを編集することができ &lt;code&gt;Object.defineProperty()&lt;/code&gt; に &lt;code&gt;app.context&lt;/code&gt; 。&lt;a href=&quot;https://github.com/koajs/koa/issues/652&quot;&gt;https://github.com/koajs/koa/issues/652を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="28ae20b36408beb746c69869af9ac0fe069cf576" translate="yes" xml:space="preserve">
          <source>Middleware Best Practices</source>
          <target state="translated">ミドルウェアのベストプラクティス</target>
        </trans-unit>
        <trans-unit id="27ff63de6213386791c677c0b5ea3172a0a79463" translate="yes" xml:space="preserve">
          <source>Middleware Kernel</source>
          <target state="translated">ミドルウェアカーネル</target>
        </trans-unit>
        <trans-unit id="153b011e038221d7db4dccfb0bd970ea0bd95121" translate="yes" xml:space="preserve">
          <source>Middleware options</source>
          <target state="translated">ミドルウェアオプション</target>
        </trans-unit>
        <trans-unit id="76de9fc32ae4fe4c5347580240740a8ed42d16d8" translate="yes" xml:space="preserve">
          <source>Middleware that decide to respond to a request and wish to bypass downstream middleware may simply omit &lt;code&gt;next()&lt;/code&gt;. Typically this will be in routing middleware, but this can be performed by any. For example the following will respond with &quot;two&quot;, however all three are executed, giving the downstream &quot;three&quot; middleware a chance to manipulate the response.</source>
          <target state="translated">リクエストに応答することを決定し、ダウンストリームのミドルウェアをバイパスしたいミドルウェアは、単に &lt;code&gt;next()&lt;/code&gt; を省略します。通常、これはルーティングミドルウェアで行われますが、これはどのユーザーでも実行できます。たとえば、以下は「2」で応答しますが、3つすべてが実行され、ダウンストリームの「3」ミドルウェアが応答を操作する機会が与えられます。</target>
        </trans-unit>
        <trans-unit id="c9f1a940205bfd1b3c3423e976efb4e3ea8b4e78" translate="yes" xml:space="preserve">
          <source>Migrating from Koa v1.x to v2.x</source>
          <target state="translated">Koa v1.xからv2.xへの移行</target>
        </trans-unit>
        <trans-unit id="4119efd586868e0d7cc302b7e8f914109be08b31" translate="yes" xml:space="preserve">
          <source>Mounted apps currently use their parent's &lt;code&gt;ctx&lt;/code&gt; and settings. Thus, mounted apps are really just groups of middleware.</source>
          <target state="translated">マウントされたアプリは現在、親の &lt;code&gt;ctx&lt;/code&gt; と設定を使用しています。したがって、マウントされたアプリは、実際には単なるミドルウェアのグループです。</target>
        </trans-unit>
        <trans-unit id="5f709c93abec85661a95afb2a5d8ca0ae4164255" translate="yes" xml:space="preserve">
          <source>My middleware is not called</source>
          <target state="translated">私のミドルウェアは</target>
        </trans-unit>
        <trans-unit id="b7beb69bea03558412f48702f5268641fc861101" translate="yes" xml:space="preserve">
          <source>My response or context changes have no effect</source>
          <target state="translated">私の反応や文脈の変化は影響しません</target>
        </trans-unit>
        <trans-unit id="5de4664d172ff7b12ca5e0036dd70b66d8b65ecc" translate="yes" xml:space="preserve">
          <source>Named middleware</source>
          <target state="translated">名前付きミドルウェア</target>
        </trans-unit>
        <trans-unit id="e66b33326fe68e799382fc0264c619be183d6165" translate="yes" xml:space="preserve">
          <source>Naming middleware is optional, however it's useful for debugging purposes to assign a name.</source>
          <target state="translated">ミドルウェアに名前を付けるのは任意ですが、デバッグの目的で名前を付けるのに便利です。</target>
        </trans-unit>
        <trans-unit id="175f61605d7d8522feb6befbaa7beab49dfbbb03" translate="yes" xml:space="preserve">
          <source>New middleware signature</source>
          <target state="translated">新しいミドルウェアのシグネチャ</target>
        </trans-unit>
        <trans-unit id="9fd4c366b1524be0294d2f4e6170dca7a38c78eb" translate="yes" xml:space="preserve">
          <source>Next we'll look at the best practices for creating Koa middleware.</source>
          <target state="translated">次に、Koaミドルウェアを作成するためのベストプラクティスを見ていきます。</target>
        </trans-unit>
        <trans-unit id="ad02fe3b9383669a0fda8adb0068ca4775a09147" translate="yes" xml:space="preserve">
          <source>No - out of the box Koa has no form of routing, however many routing middleware are available: &lt;a href=&quot;https://github.com/koajs/koa/wiki&quot;&gt;https://github.com/koajs/koa/wiki&lt;/a&gt;</source>
          <target state="translated">いいえ-箱から出したままのKoaにはルーティングの形式はありませんが、多くのルーティングミドルウェアが利用可能です：&lt;a href=&quot;https://github.com/koajs/koa/wiki&quot;&gt;https&lt;/a&gt; : //github.com/koajs/koa/wiki</target>
        </trans-unit>
        <trans-unit id="3534a5e432abb8477a161c7313c70564b40e1aec" translate="yes" xml:space="preserve">
          <source>No callback hell.</source>
          <target state="translated">コールバック地獄はありません。</target>
        </trans-unit>
        <trans-unit id="bda74fdf038a2fb074bfcdd71a4f6fe9dd05a282" translate="yes" xml:space="preserve">
          <source>No need for domains.</source>
          <target state="translated">ドメインは必要ありません。</target>
        </trans-unit>
        <trans-unit id="638c822fc8d353099e2e2c1f33c838c4cf9146e8" translate="yes" xml:space="preserve">
          <source>No, just a different take on similar functionality now that async functions allow us to write code with fewer callbacks. Connect is equally capable, and some may still prefer it, it's up to what you prefer.</source>
          <target state="translated">いいえ、似たような機能を、非同期関数を使ってより少ないコールバックでコードを書くことができるようになったので、別の方法を取っただけです。Connectも同様の機能を持っていますし、それを好む人もいるかもしれませんが、何を好むかはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="6438dc9da3e9c86d184edf23d3775099d84d547d" translate="yes" xml:space="preserve">
          <source>No, just a different take on similar functionality now that generators allow us to write code with less callbacks. Connect is equally capable, and some may still prefer it, it's up to what you prefer.</source>
          <target state="translated">いえ、似たような機能を別の方法で使っているだけです。 ジェネレータを使うことでコールバックの少ないコードが書けるようになりました。Connectも同様の機能を持っていますし、それを好む人もいるかもしれませんが、何を好むかはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="f5e3b547060c9e4ca0e40c09766142466035fa87" translate="yes" xml:space="preserve">
          <source>Node's &lt;code&gt;request&lt;/code&gt; object.</source>
          <target state="translated">ノードの &lt;code&gt;request&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="1fba7a131aba3ac3e546886c467c1f2a3dbdc1c7" translate="yes" xml:space="preserve">
          <source>Node's &lt;code&gt;response&lt;/code&gt; object.</source>
          <target state="translated">ノードの &lt;code&gt;response&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f3f537f63bf95f3212ab7123919b47ae42270786" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;identity&lt;/code&gt; encoding (which means no encoding) could be unacceptable if the client explicitly sends &lt;code&gt;identity;q=0&lt;/code&gt;. Although this is an edge case, you should still handle the case where this method returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">クライアントが明示的に &lt;code&gt;identity;q=0&lt;/code&gt; 送信する場合、 &lt;code&gt;identity&lt;/code&gt; エンコード（エンコードなし）は受け入れられないことに注意してください。これはエッジケースですが、このメソッドが &lt;code&gt;false&lt;/code&gt; を返すケースも処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ee1987b7e8e5ebabfeb9be7735b502fe228e936" translate="yes" xml:space="preserve">
          <source>Note that these are user-level errors and are flagged with &lt;code&gt;err.expose&lt;/code&gt; meaning the messages are appropriate for client responses, which is typically not the case for error messages since you do not want to leak failure details.</source>
          <target state="translated">これらはユーザーレベルのエラーであり、 &lt;code&gt;err.expose&lt;/code&gt; でフラグが立てられていることに注意してください。これは、メッセージがクライアントの応答に適切であることを意味します。エラーの詳細はリークしたくないため、通常、エラーメッセージには当てはまりません。</target>
        </trans-unit>
        <trans-unit id="dfb5c7d2d70a9ade2234bd26145089731af9092e" translate="yes" xml:space="preserve">
          <source>Note that using this is &lt;strong&gt;not&lt;/strong&gt; supported by Koa. This may break intended functionality of Koa middleware and Koa itself. Using this property is considered a hack and is only a convenience to those wishing to use traditional &lt;code&gt;fn(req, res)&lt;/code&gt; functions and middleware within Koa.</source>
          <target state="translated">これの使用はKoa &lt;strong&gt;では&lt;/strong&gt;サポートされて&lt;strong&gt;いない&lt;/strong&gt;ことに注意してください。これにより、KoaミドルウェアおよびKoa自体の意図した機能が破損する可能性があります。このプロパティを使用することはハックと見なされ、Koa内で従来の &lt;code&gt;fn(req, res)&lt;/code&gt; 関数とミドルウェアを使用したい場合にのみ便利です。</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="deebaa4dd72308547f03ae30dd291c629164e585" translate="yes" xml:space="preserve">
          <source>Note: when appropriate a &lt;code&gt;charset&lt;/code&gt; is selected for you, for example &lt;code&gt;response.type = 'html'&lt;/code&gt; will default to &quot;utf-8&quot;. If you need to overwrite &lt;code&gt;charset&lt;/code&gt;, use &lt;code&gt;ctx.set('Content-Type', 'text/html')&lt;/code&gt; to set response header field to value directly.</source>
          <target state="translated">注：適切な &lt;code&gt;charset&lt;/code&gt; が選択されている場合、たとえば、 &lt;code&gt;response.type = 'html'&lt;/code&gt; はデフォルトで &quot;utf-8&quot;になります。 &lt;code&gt;charset&lt;/code&gt; を上書きする必要がある場合は、 &lt;code&gt;ctx.set('Content-Type', 'text/html')&lt;/code&gt; を使用して、応答ヘッダーフィールドを直接値に設定します。</target>
        </trans-unit>
        <trans-unit id="2fa9a2f532de01b53badc665182187e08e98563b" translate="yes" xml:space="preserve">
          <source>Now, instead of just seeing &quot;serve&quot; when debugging, you will see:</source>
          <target state="translated">これで、デバッグ時に &quot;サーブ &quot;を見るのではなく、&quot;サーブ &quot;を見ることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="751c500cd2ac7e71710527c0588bc9ae39e3b05b" translate="yes" xml:space="preserve">
          <source>Only methods that are common to nearly all HTTP servers are integrated directly into Koa's small ~570 SLOC codebase. This includes things like content negotiation, normalization of node inconsistencies, redirection, and a few others.</source>
          <target state="translated">ほとんどすべての HTTP サーバに共通するメソッドだけが Koa の小さな ~570 の SLOC コードベースに直接統合されています。これには、コンテンツネゴシエーション、ノードの不整合の正規化、リダイレクト、その他いくつかのものが含まれます。</target>
        </trans-unit>
        <trans-unit id="75b77479fbbf45722a6e59118cb4d0c24800847b" translate="yes" xml:space="preserve">
          <source>Output log line</source>
          <target state="translated">出力ログライン</target>
        </trans-unit>
        <trans-unit id="57dcd984a5edd98eb64e09ddbb542ef7726f5af5" translate="yes" xml:space="preserve">
          <source>Perform a [302] redirect to &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="translated">[302]リダイレクトを &lt;code&gt;url&lt;/code&gt; に実行します。</target>
        </trans-unit>
        <trans-unit id="fa24509083d473c5456b75b616829ab5c1c8aea1" translate="yes" xml:space="preserve">
          <source>Philosophically, Koa aims to &quot;fix and replace node&quot;, whereas Express &quot;augments node&quot;. Koa uses promises and async functions to rid apps of callback hell and simplify error handling. It exposes its own &lt;code&gt;ctx.request&lt;/code&gt; and &lt;code&gt;ctx.response&lt;/code&gt; objects instead of node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects.</source>
          <target state="translated">哲学的には、Koaは「ノードを修正して置き換える」ことを目的としていますが、Expressは「ノードを拡張する」ことを目的としています。Koaはpromiseとasync関数を使用して、アプリのコールバック地獄を取り除き、エラー処理を簡素化します。ノードの &lt;code&gt;req&lt;/code&gt; および &lt;code&gt;res&lt;/code&gt; オブジェクトではなく、独自の &lt;code&gt;ctx.request&lt;/code&gt; および &lt;code&gt;ctx.response&lt;/code&gt; オブジェクトを公開します。</target>
        </trans-unit>
        <trans-unit id="786195745244fcc37101701011bf229bcc4e7ba5" translate="yes" xml:space="preserve">
          <source>Please think about these rules before suggesting additional properties.</source>
          <target state="translated">追加物件を提案する前に、これらのルールを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="7bfddc8f6089dfb174bde99884132e91182b264f" translate="yes" xml:space="preserve">
          <source>Problematic code</source>
          <target state="translated">問題のあるコード</target>
        </trans-unit>
        <trans-unit id="ecca3b77bdfe9153a37cb7d551d08cc586fa0829" translate="yes" xml:space="preserve">
          <source>Promises-based control flow</source>
          <target state="translated">プロミスベースの制御フロー</target>
        </trans-unit>
        <trans-unit id="3fb2856a22b93af24f2aa0c1a04f9f8e3e69cc5a" translate="yes" xml:space="preserve">
          <source>Proper stream handling.</source>
          <target state="translated">適切なストリーム処理。</target>
        </trans-unit>
        <trans-unit id="6cf08e51ee0cd95face49cf7b2d2da6e4713a96c" translate="yes" xml:space="preserve">
          <source>Remove header &lt;code&gt;field&lt;/code&gt;.</source>
          <target state="translated">ヘッダー &lt;code&gt;field&lt;/code&gt; 削除します。</target>
        </trans-unit>
        <trans-unit id="3bed1a4d5d962528512095fea0cae84a233f11cf" translate="yes" xml:space="preserve">
          <source>Repeat steps 3-5 until you're done</source>
          <target state="translated">完了するまで、手順3~5を繰り返します。</target>
        </trans-unit>
        <trans-unit id="4aed03cac49d5e43da4e855a967286931a4d621a" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="translated">Request</target>
        </trans-unit>
        <trans-unit id="8e4affae17eeecd99437f7cc3ae618e526f0e99b" translate="yes" xml:space="preserve">
          <source>Request aliases</source>
          <target state="translated">リクエストエイリアス</target>
        </trans-unit>
        <trans-unit id="4f88ca67fe0a1b9d730848ab31abc3be931035c8" translate="yes" xml:space="preserve">
          <source>Request header object.</source>
          <target state="translated">リクエストヘッダオブジェクト。</target>
        </trans-unit>
        <trans-unit id="945536f050827e545d1b7c47396a8fc384edf216" translate="yes" xml:space="preserve">
          <source>Request header object. Alias as &lt;code&gt;request.header&lt;/code&gt;.</source>
          <target state="translated">リクエストヘッダーオブジェクト。 &lt;code&gt;request.header&lt;/code&gt; としてのエイリアス。</target>
        </trans-unit>
        <trans-unit id="454807c0e4c55292174b24b4a334a54d5cbceda4" translate="yes" xml:space="preserve">
          <source>Request method.</source>
          <target state="translated">リクエスト方法。</target>
        </trans-unit>
        <trans-unit id="bc3e1b0e1952a0801b47e237b887ab97c0a4fcbd" translate="yes" xml:space="preserve">
          <source>Request remote address. Supports &lt;code&gt;X-Forwarded-For&lt;/code&gt; when &lt;code&gt;app.proxy&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt;.</source>
          <target state="translated">リモートアドレスを要求します。 &lt;code&gt;app.proxy&lt;/code&gt; が&lt;strong&gt;trueの&lt;/strong&gt;場合、 &lt;code&gt;X-Forwarded-For&lt;/code&gt; をサポートし&lt;strong&gt;ます&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f4823cc357a5578cbe827ad045159cc65f41cc75" translate="yes" xml:space="preserve">
          <source>Request socket.</source>
          <target state="translated">ソケットを要求します。</target>
        </trans-unit>
        <trans-unit id="6e617e4fc9da3de9693eac5990613543b86c63f9" translate="yes" xml:space="preserve">
          <source>Response</source>
          <target state="translated">Response</target>
        </trans-unit>
        <trans-unit id="184ab4029d1de9d73d15c89cfb02afd71a61f054" translate="yes" xml:space="preserve">
          <source>Response Middleware</source>
          <target state="translated">レスポンスミドルウェア</target>
        </trans-unit>
        <trans-unit id="855802e48d6eff955846a39e29c66380a69b2aed" translate="yes" xml:space="preserve">
          <source>Response aliases</source>
          <target state="translated">レスポンスエイリアス</target>
        </trans-unit>
        <trans-unit id="14f4436ebe54f6c6b3baf7533fd28c1b8cbf434e" translate="yes" xml:space="preserve">
          <source>Response header object.</source>
          <target state="translated">レスポンスヘッダオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f774d1fb464709c4f32d52559c62fef71036abe8" translate="yes" xml:space="preserve">
          <source>Response header object. Alias as &lt;code&gt;response.header&lt;/code&gt;.</source>
          <target state="translated">応答ヘッダーオブジェクト。 &lt;code&gt;response.header&lt;/code&gt; としてのエイリアス。</target>
        </trans-unit>
        <trans-unit id="e3bae771702be51d6eb2f20820b8726ee7559776" translate="yes" xml:space="preserve">
          <source>Return a callback function suitable for the &lt;code&gt;http.createServer()&lt;/code&gt; method to handle a request. You may also use this callback function to mount your Koa app in a Connect/Express app.</source>
          <target state="translated">&lt;code&gt;http.createServer()&lt;/code&gt; メソッドがリクエストを処理するのに適したコールバック関数を返します。このコールバック関数を使用して、Connect / ExpressアプリにKoaアプリをマウントすることもできます。</target>
        </trans-unit>
        <trans-unit id="07d1a86a6389df474b10e14b2cb7d8c96291e475" translate="yes" xml:space="preserve">
          <source>Return promises everywhere!</source>
          <target state="translated">どこでもプロミスを返せ!</target>
        </trans-unit>
        <trans-unit id="7e7d79a4e66ab1a24ca60ddd806f1e2161f6ff91" translate="yes" xml:space="preserve">
          <source>Return request Content-Length as a number when present, or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">リクエストContent-Lengthが存在する場合は数値として、または &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9248accdcbe74679d3e0d8c57ad090223f29e860" translate="yes" xml:space="preserve">
          <source>Return request header.</source>
          <target state="translated">リクエストヘッダを返します。</target>
        </trans-unit>
        <trans-unit id="133e236c9f8b36a79866f32a311b735c0e814c82" translate="yes" xml:space="preserve">
          <source>Return request protocol, &quot;https&quot; or &quot;http&quot;. Supports &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; when &lt;code&gt;app.proxy&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt;.</source>
          <target state="translated">要求プロトコル「https」または「http」を返します。 &lt;code&gt;app.proxy&lt;/code&gt; が&lt;strong&gt;trueの&lt;/strong&gt;場合、 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; をサポートし&lt;strong&gt;ます&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98c4372a2f21f33eaa9b2df88ff3f0c3d70c46e4" translate="yes" xml:space="preserve">
          <source>Return response Content-Length as a number when present, or deduce from &lt;code&gt;ctx.body&lt;/code&gt; when possible, or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">存在する場合はレスポンスContent-Lengthを数値として返すか、 &lt;code&gt;ctx.body&lt;/code&gt; から推測するか、 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f615de844c9983d240b56ae28bccdab1d11f86ec" translate="yes" xml:space="preserve">
          <source>Return subdomains as an array.</source>
          <target state="translated">サブドメインを配列として返します。</target>
        </trans-unit>
        <trans-unit id="4e3a3c7e7265098d1a489f1bd0f26a255d78d087" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;Last-Modified&lt;/code&gt; header as a &lt;code&gt;Date&lt;/code&gt;, if it exists.</source>
          <target state="translated">&lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーが存在する場合は、 &lt;code&gt;Date&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="cc8279d9339bddc8407741beff783834f67e5776" translate="yes" xml:space="preserve">
          <source>Return the request socket.</source>
          <target state="translated">リクエストソケットを返します。</target>
        </trans-unit>
        <trans-unit id="e5d0486b48c59eb1874e850e4258528ada4cb216" translate="yes" xml:space="preserve">
          <source>Returning the promise given by the database interface tells Koa to wait for the promise to finish before responding. At that time, the body will have been set. This results in Koa sending back a 200 with a proper response.</source>
          <target state="translated">データベースインターフェースから与えられた約束を返すことで、応答する前に約束が終了するのを待つように Koa に指示します。その時点でボディが設定されています。これにより、Koa は適切なレスポンスで 200 を返します。</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="01f624b5b72faabc338d5ed99bdc5297690b8558" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;guide.md#debugging-koa&quot;&gt;debugging Koa&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;guide.md#debugging-koa&quot;&gt;Koaのデバッグ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b3884cc70bfe112c4f2afcac95a3e000ad2e169f" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://github.com/koajs/koa/pull/612&quot;&gt;https://github.com/koajs/koa/pull/612&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/koajs/koa/pull/612&quot;&gt;https&lt;/a&gt;：//github.com/koajs/koa/pull/612を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6af644a6a47122fee8047cd0a0ca4042f66564f" translate="yes" xml:space="preserve">
          <source>Sending Files</source>
          <target state="translated">ファイルの送信</target>
        </trans-unit>
        <trans-unit id="96559e8409b4712d20b41948198912be3ba30f5c" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;Content-Disposition&lt;/code&gt; to &quot;attachment&quot; to signal the client to prompt for download. Optionally specify the &lt;code&gt;filename&lt;/code&gt; of the download and some &lt;a href=&quot;https://github.com/jshttp/content-disposition#options&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Content-Disposition&lt;/code&gt; を &quot;attachment&quot;に設定して、ダウンロードを要求するようにクライアントに通知します。オプションで、ダウンロードの &lt;code&gt;filename&lt;/code&gt; といくつかの&lt;a href=&quot;https://github.com/jshttp/content-disposition#options&quot;&gt;オプションを&lt;/a&gt;指定します。</target>
        </trans-unit>
        <trans-unit id="e732fd1f70656d0c6eed32836a8b75a79733024d" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;X-Response-Time&lt;/code&gt; header field</source>
          <target state="translated">集合 &lt;code&gt;X-Response-Time&lt;/code&gt; ヘッダフィールド</target>
        </trans-unit>
        <trans-unit id="78e66246f434d71316ef76b85fa769c0be0728e9" translate="yes" xml:space="preserve">
          <source>Set cookie &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; with &lt;code&gt;options&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; を使用して Cookie &lt;code&gt;name&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="7be7638085d488e434f31dd5ba98a9dc2c7c9895" translate="yes" xml:space="preserve">
          <source>Set query-string to the given object. Note that this setter does &lt;em&gt;not&lt;/em&gt; support nested objects.</source>
          <target state="translated">query-stringを指定されたオブジェクトに設定します。このセッターはネストされたオブジェクトをサポートし&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ae62022b1de5711b915ca2af0df0ca8f28250e78" translate="yes" xml:space="preserve">
          <source>Set raw query string.</source>
          <target state="translated">生のクエリ文字列を設定します。</target>
        </trans-unit>
        <trans-unit id="9d9e5d797664a454c1978e346ed17e846ca12ccf" translate="yes" xml:space="preserve">
          <source>Set request URL, useful for url rewrites.</source>
          <target state="translated">URLの書き換えに便利なリクエストURLを設定します。</target>
        </trans-unit>
        <trans-unit id="35d1ee034bf686bb9416fb299ae0346cb0c5f011" translate="yes" xml:space="preserve">
          <source>Set request header object.</source>
          <target state="translated">リクエストヘッダオブジェクトを設定します。</target>
        </trans-unit>
        <trans-unit id="b75c387ad2bbf84746ad72de3b0f39339bd30b45" translate="yes" xml:space="preserve">
          <source>Set request header object. Alias as &lt;code&gt;request.header=&lt;/code&gt;.</source>
          <target state="translated">リクエストヘッダーオブジェクトを設定します。 &lt;code&gt;request.header=&lt;/code&gt; としてのエイリアス。</target>
        </trans-unit>
        <trans-unit id="ed49e80b4224f40bf8a09f694b043a3ed59d64b4" translate="yes" xml:space="preserve">
          <source>Set request method, useful for implementing middleware such as &lt;code&gt;methodOverride()&lt;/code&gt;.</source>
          <target state="translated">リクエストメソッドを設定します &lt;code&gt;methodOverride()&lt;/code&gt; などのミドルウェアを実装するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a3150b8276deecc9f2242a8f50a56ee66c16d5eb" translate="yes" xml:space="preserve">
          <source>Set request pathname and retain query-string when present.</source>
          <target state="translated">リクエストパス名を設定し、クエリ文字列が存在する場合はそれを保持します。</target>
        </trans-unit>
        <trans-unit id="4d1973c3f55ddd21309fd9cb5be7dfbb278e55b1" translate="yes" xml:space="preserve">
          <source>Set response &lt;code&gt;Content-Type&lt;/code&gt; via mime string or file extension.</source>
          <target state="translated">MIME文字列またはファイル拡張子を使用して、応答の &lt;code&gt;Content-Type&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="da21c46a95baf47f32abc9664c0bfad8e07ea1fd" translate="yes" xml:space="preserve">
          <source>Set response Content-Length to the given value.</source>
          <target state="translated">レスポンスの Content-Length を指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="f84ec37f620c3774a153fa1141957a3772b444e1" translate="yes" xml:space="preserve">
          <source>Set response body to one of the following:</source>
          <target state="translated">レスポンスボディを以下のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="2fc715cd958ee00bd17f542dd21daf8578eab778" translate="yes" xml:space="preserve">
          <source>Set response header &lt;code&gt;field&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;:</source>
          <target state="translated">応答ヘッダー &lt;code&gt;field&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="b1bc32033acf0ffd2d5fd1ae63f69a46a3baf7ee" translate="yes" xml:space="preserve">
          <source>Set response status message to the given value.</source>
          <target state="translated">レスポンスステータスメッセージを指定した値に設定します。</target>
        </trans-unit>
        <trans-unit id="2c94c2429379b689de11366674800d17ede5a273" translate="yes" xml:space="preserve">
          <source>Set response status via numeric code:</source>
          <target state="translated">数値コードで応答状態を設定します。</target>
        </trans-unit>
        <trans-unit id="29e34aa0835ee348a33580fb76ec893e680fd96f" translate="yes" xml:space="preserve">
          <source>Set several response header &lt;code&gt;fields&lt;/code&gt; with an object:</source>
          <target state="translated">オブジェクトでいくつかの応答ヘッダー &lt;code&gt;fields&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="153cc8563e0b60563fedd190f4f106db9886ca77" translate="yes" xml:space="preserve">
          <source>Set signed cookie keys.</source>
          <target state="translated">署名付きクッキーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="e01b60d7f1c598056456b335f3adaf5619de6443" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;Last-Modified&lt;/code&gt; header as an appropriate UTC string. You can either set it as a &lt;code&gt;Date&lt;/code&gt; or date string.</source>
          <target state="translated">&lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーを適切なUTC文字列として設定します。 &lt;code&gt;Date&lt;/code&gt; または日付文字列として設定できます。</target>
        </trans-unit>
        <trans-unit id="e90a1c834aa23a8e67625d31fdde4d5e91271bff" translate="yes" xml:space="preserve">
          <source>Set the ETag of a response including the wrapped &lt;code&gt;&quot;&lt;/code&gt;s. Note that there is no corresponding &lt;code&gt;response.etag&lt;/code&gt; getter.</source>
          <target state="translated">ラップされた &lt;code&gt;&quot;&lt;/code&gt; s を含む応答のETagを設定します。対応する &lt;code&gt;response.etag&lt;/code&gt; ゲッターがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9114ba9eafccf9bf7c40d2d9792969ae17371a1e" translate="yes" xml:space="preserve">
          <source>Set the response body to &quot;Hello World&quot;</source>
          <target state="translated">レスポンスボディを &quot;Hello World &quot;に設定する</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="a3052208500b0c31becbd2f5c9dca35c6742b85b" translate="yes" xml:space="preserve">
          <source>Shorthand for &lt;code&gt;ctx.protocol == &quot;https&quot;&lt;/code&gt; to check if a request was issued via TLS.</source>
          <target state="translated">速記のため &lt;code&gt;ctx.protocol == &quot;https&quot;&lt;/code&gt; リクエストがTLS経由で発行されたかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="ac507dc00a2d78594ba096746572438d3d0af2d5" translate="yes" xml:space="preserve">
          <source>Since Express comes with its own routing, but Koa does not have any in-built routing, there are third party libraries available such as koa-router and koa-route. Similarly, just like we have helmet for security in Express, for Koa we have koa-helmet available and the list goes on for Koa available third party libraries.</source>
          <target state="translated">Express には独自のルーティングが付属していますが、Koa には内蔵されているルーティングがないため、サードパーティのライブラリである koa-router や koa-route が利用できます。同様に、Express にセキュリティ用のヘルメットがあるように、Koa にも koa-helmet があります。</target>
        </trans-unit>
        <trans-unit id="a24932b1d79ce68e2b2d0ee853e2cadd198f71a5" translate="yes" xml:space="preserve">
          <source>Since JavaScript does not allow defining function names at runtime, you can also set a middleware's name as &lt;code&gt;._name&lt;/code&gt;. This is useful when you don't have control of a middleware's name. For example:</source>
          <target state="translated">JavaScriptでは実行時に関数名を定義できないため、ミドルウェアの名前を &lt;code&gt;._name&lt;/code&gt; として設定することもできます。これは、ミドルウェアの名前を制御できない場合に役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="b4f91bdb0e1b0e40fff4debcd0fea22f1999f491" translate="yes" xml:space="preserve">
          <source>Solution</source>
          <target state="translated">Solution</target>
        </trans-unit>
        <trans-unit id="26ed10088955b219cbcbf2822a5a7070c3a8bc8a" translate="yes" xml:space="preserve">
          <source>Sometimes you want to &quot;compose&quot; multiple middleware into a single middleware for easy re-use or exporting. You can use &lt;a href=&quot;https://github.com/koajs/compose&quot;&gt;koa-compose&lt;/a&gt;</source>
          <target state="translated">簡単に再利用またはエクスポートできるように、複数のミドルウェアを単一のミドルウェアに「構成」したい場合があります。&lt;a href=&quot;https://github.com/koajs/compose&quot;&gt;koa-compose&lt;/a&gt;を使用できます</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="78abaafa74acf15710469737b84f2949f814d46d" translate="yes" xml:space="preserve">
          <source>Subdomains are the dot-separated parts of the host before the main domain of the app. By default, the domain of the app is assumed to be the last two parts of the host. This can be changed by setting &lt;code&gt;app.subdomainOffset&lt;/code&gt;.</source>
          <target state="translated">サブドメインは、アプリのメインドメインの前のホストのドットで区切られた部分です。デフォルトでは、アプリのドメインはホストの最後の2つの部分と見なされます。これは &lt;code&gt;app.subdomainOffset&lt;/code&gt; を設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="567413d40cb2c8d8f55b74b07187775ce9366c90" translate="yes" xml:space="preserve">
          <source>THIS DOCUMENT IS IN PROGRESS. THIS PARAGRAPH SHALL BE REMOVED WHEN THIS DOCUMENT IS DONE.</source>
          <target state="translated">この文書は進行中です。このパラグラフは、この文書が終了したときに削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="200be3445e2bde1ede81d4c95d33bd1076a8277f" translate="yes" xml:space="preserve">
          <source>Templating</source>
          <target state="translated">Templating</target>
        </trans-unit>
        <trans-unit id="640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="translated">Test</target>
        </trans-unit>
        <trans-unit id="d06bdd52e0fd3e91b06b0e81d3e76c77e7713d88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.listen(...)&lt;/code&gt; method is simply sugar for the following:</source>
          <target state="translated">&lt;code&gt;app.listen(...)&lt;/code&gt; メソッドは、単純に以下のために糖であります：</target>
        </trans-unit>
        <trans-unit id="ef48e6defcd3def9180d3ef2e72c86954334eee6" translate="yes" xml:space="preserve">
          <source>The Content-Type is defaulted to application/json. This includes plain objects &lt;code&gt;{ foo: 'bar' }&lt;/code&gt; and arrays &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">Content-Typeのデフォルトはapplication / jsonです。これには、プレーンオブジェクト &lt;code&gt;{ foo: 'bar' }&lt;/code&gt; および配列 &lt;code&gt;['foo', 'bar']&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9d733ba37470b9a365f5ff4d89d121892e712b84" translate="yes" xml:space="preserve">
          <source>The Content-Type is defaulted to application/octet-stream, and Content-Length is also set.</source>
          <target state="translated">Content-Typeはapplication/octet-streamがデフォルトで、Content-Lengthも設定されています。</target>
        </trans-unit>
        <trans-unit id="1378998316120162c4e6efb4ac3766d01d414ba4" translate="yes" xml:space="preserve">
          <source>The Content-Type is defaulted to application/octet-stream.</source>
          <target state="translated">Content-Typeのデフォルトはapplication/octet-streamです。</target>
        </trans-unit>
        <trans-unit id="eac1f8e6895e8b7cce46444d6336263f604ee409" translate="yes" xml:space="preserve">
          <source>The Content-Type is defaulted to text/html or text/plain, both with a default charset of utf-8. The Content-Length field is also set.</source>
          <target state="translated">Content-Typeのデフォルトはtext/htmlかtext/plainで、両方ともデフォルトの文字コードはutf-8です。Content-Lengthフィールドも設定されています。</target>
        </trans-unit>
        <trans-unit id="862fa7ccf356101a2112be78eb9b78b39b340f59" translate="yes" xml:space="preserve">
          <source>The Error Event</source>
          <target state="translated">エラーイベント</target>
        </trans-unit>
        <trans-unit id="20fb8ef625284d76c147ad8a5c05b579b460d900" translate="yes" xml:space="preserve">
          <source>The default error handler is essentially a try-catch at the very beginning of the middleware chain. To use a different error handler, simply put another try-catch at the beginning of the middleware chain, and handle the error there. However, the default error handler is good enough for most use cases. It will use a status code of &lt;code&gt;err.status&lt;/code&gt;, or by default 500. If &lt;code&gt;err.expose&lt;/code&gt; is true, then &lt;code&gt;err.message&lt;/code&gt; will be the reply. Otherwise, a message generated from the error code will be used (e.g. for the code 500 the message &quot;Internal Server Error&quot; will be used). All headers will be cleared from the request, but any headers in &lt;code&gt;err.headers&lt;/code&gt; will then be set. You can use a try-catch, as specified above, to add a header to this list.</source>
          <target state="translated">デフォルトのエラーハンドラーは、基本的にミドルウェアチェーンの最初にあるtry-catchです。別のエラーハンドラーを使用するには、ミドルウェアチェーンの先頭に別のtry-catchを配置し、そこでエラーを処理するだけです。ただし、デフォルトのエラーハンドラーは、ほとんどのユースケースに十分対応できます。 &lt;code&gt;err.status&lt;/code&gt; またはデフォルトで500のステータスコードを使用します &lt;code&gt;err.expose&lt;/code&gt; がtrueの場合、 &lt;code&gt;err.message&lt;/code&gt; が応答になります。それ以外の場合は、エラーコードから生成されたメッセージが使用されます（たとえば、コード500の場合、「内部サーバーエラー」のメッセージが使用されます）。すべてのヘッダーはリクエストから削除されますが、 &lt;code&gt;err.headers&lt;/code&gt; のヘッダーはすべて設定されます。上記のようにtry-catchを使用して、このリストにヘッダーを追加できます。</target>
        </trans-unit>
        <trans-unit id="92dbb31a738b0a4669660933e1a4e66625d08747" translate="yes" xml:space="preserve">
          <source>The fix in the &lt;code&gt;async&lt;/code&gt; version is to add an &lt;code&gt;await&lt;/code&gt; statement:</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; バージョンでの修正は、 &lt;code&gt;await&lt;/code&gt; ステートメントを追加することです。</target>
        </trans-unit>
        <trans-unit id="115b0e676e4c6ced236123c5a8c6fd5cc402bda0" translate="yes" xml:space="preserve">
          <source>The following accessors and alias &lt;a href=&quot;request.md&quot;&gt;Request&lt;/a&gt; equivalents:</source>
          <target state="translated">次のアクセサーと同等の別名&lt;a href=&quot;request.md&quot;&gt;リクエスト&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="74718c0093fc926b85286fca51586dec476c4985" translate="yes" xml:space="preserve">
          <source>The following accessors and alias &lt;a href=&quot;response.md&quot;&gt;Response&lt;/a&gt; equivalents:</source>
          <target state="translated">以下のアクセサーと同等のエイリアス&lt;a href=&quot;response.md&quot;&gt;応答&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="b223fe37f5cd04ce1d570221203d01b192d65680" translate="yes" xml:space="preserve">
          <source>The following configuration omits &lt;code&gt;next()&lt;/code&gt; in the second middleware, and will still respond with &quot;two&quot;, however the third (and any other downstream middleware) will be ignored:</source>
          <target state="translated">次の構成では、2番目のミドルウェアで &lt;code&gt;next()&lt;/code&gt; が省略され、「2」で応答しますが、3番目（および他のダウンストリームミドルウェア）は無視されます。</target>
        </trans-unit>
        <trans-unit id="65c0dcaece8d98031d11a9786d9fdb5ad0b23fc0" translate="yes" xml:space="preserve">
          <source>The following example responds with &quot;Hello World&quot;, however first the request flows through the &lt;code&gt;x-response-time&lt;/code&gt; and &lt;code&gt;logging&lt;/code&gt; middleware to mark when the request started, then continue to yield control through the response middleware. When a middleware invokes &lt;code&gt;next()&lt;/code&gt; the function suspends and passes control to the next middleware defined. After there are no more middleware to execute downstream, the stack will unwind and each middleware is resumed to perform its upstream behaviour.</source>
          <target state="translated">次の例は「Hello World」で応答しますが、最初にリクエストが &lt;code&gt;x-response-time&lt;/code&gt; と &lt;code&gt;logging&lt;/code&gt; ミドルウェアを通過して、リクエストがいつ開始されたかをマークし、次に応答ミドルウェアを通じて制御を継続します。ミドルウェアが &lt;code&gt;next()&lt;/code&gt; を呼び出すと、関数は中断し、定義されている次のミドルウェアに制御を渡します。ダウンストリームで実行するミドルウェアがなくなると、スタックがほどかれ、各ミドルウェアが再開されてアップストリームの動作を実行します。</target>
        </trans-unit>
        <trans-unit id="1a833cb75ee6637e8314e7d8c4ec2ab5f1cd28e2" translate="yes" xml:space="preserve">
          <source>The new middleware signature is:</source>
          <target state="translated">新しいミドルウェアのシグネチャは</target>
        </trans-unit>
        <trans-unit id="d240798ed2e6127fd6e80b4feb29c1f68e0c295f" translate="yes" xml:space="preserve">
          <source>The obligatory hello world application:</source>
          <target state="translated">義務的なハローワールドアプリ。</target>
        </trans-unit>
        <trans-unit id="b43fed31281daa6a39985e355c81308f6dad87b4" translate="yes" xml:space="preserve">
          <source>The recommended namespace for passing information through middleware and to your frontend views.</source>
          <target state="translated">ミドルウェアを介してフロントエンドビューに情報を渡すための推奨ネームスペースです。</target>
        </trans-unit>
        <trans-unit id="13007ec92bc92b1df3d5472fd158471b1d4b2194" translate="yes" xml:space="preserve">
          <source>The same behavior would occur in this &lt;code&gt;async&lt;/code&gt; version:</source>
          <target state="translated">この &lt;code&gt;async&lt;/code&gt; バージョンでも同じ動作が発生します。</target>
        </trans-unit>
        <trans-unit id="3c0768fa59a638e943d229ba976933ed321b0ff9" translate="yes" xml:space="preserve">
          <source>The signature has changed to pass &lt;code&gt;Context&lt;/code&gt; via an explicit parameter, &lt;code&gt;ctx&lt;/code&gt; above, instead of via &lt;code&gt;this&lt;/code&gt;. The context passing change makes Koa more compatible with es6 arrow functions, which capture &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">シグネチャは、 &lt;code&gt;this&lt;/code&gt; ではなく、明示的なパラメータ（上記の &lt;code&gt;ctx&lt;/code&gt; )を介して &lt;code&gt;Context&lt;/code&gt; を渡すように変更されました。コンテキストの受け渡しの変更により、Koaはes6の矢印関数との互換性が高まり、これによりがキャプチャされ &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03dc328b85f3189f426b5b7f9aa5660198126683" translate="yes" xml:space="preserve">
          <source>The solution for this is rather easy, simply add &lt;code&gt;return next()&lt;/code&gt; to the end of your helper middleware.</source>
          <target state="translated">この解決策はかなり簡単です。ヘルパーミドルウェアの最後に &lt;code&gt;return next()&lt;/code&gt; を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="5b742e981ee77a6cd5cd73d480fbce8c7687235d" translate="yes" xml:space="preserve">
          <source>The string &quot;back&quot; is special-cased to provide Referrer support, when Referrer is not present &lt;code&gt;alt&lt;/code&gt; or &quot;/&quot; is used.</source>
          <target state="translated">文字列「バック」は特殊ケースに入れているリファラーが存在しない場合、リファラーのサポートを提供するために、 &lt;code&gt;alt&lt;/code&gt; または「/」を使用するが。</target>
        </trans-unit>
        <trans-unit id="788bfad7f26acd63b7fe8ec499d6bb738f62b191" translate="yes" xml:space="preserve">
          <source>The unexpected 404 is a specific symptom of one of these more general problems:</source>
          <target state="translated">予想外の404は、これらのより一般的な問題のうちの1つの具体的な症状です。</target>
        </trans-unit>
        <trans-unit id="afb12c6b46c82a5806dd5d642b1d6a428719dfe9" translate="yes" xml:space="preserve">
          <source>The v1.x branch is still supported but should not receive feature updates. Except for this migration guide, documentation will target the latest version.</source>
          <target state="translated">v1.x ブランチはまだサポートされていますが、機能アップデートを受けるべきではありません。この移行ガイドを除いて、ドキュメントは最新バージョンを対象としています。</target>
        </trans-unit>
        <trans-unit id="48ef5df285480f3e4e35ada4f2f072254956a6ac" translate="yes" xml:space="preserve">
          <source>These are passed to &lt;a href=&quot;https://github.com/jed/keygrip&quot;&gt;KeyGrip&lt;/a&gt;, however you may also pass your own &lt;code&gt;KeyGrip&lt;/code&gt; instance. For example the following are acceptable:</source>
          <target state="translated">これらは&lt;a href=&quot;https://github.com/jed/keygrip&quot;&gt;KeyGrip&lt;/a&gt;に渡されますが、独自の &lt;code&gt;KeyGrip&lt;/code&gt; インスタンスを渡すこともできます。たとえば、以下は許容されます。</target>
        </trans-unit>
        <trans-unit id="0de675fcae48c0946f881e8640caa30aef7efe7d" translate="yes" xml:space="preserve">
          <source>These keys may be rotated and are used when signing cookies with the &lt;code&gt;{ signed: true }&lt;/code&gt; option:</source>
          <target state="translated">これらのキーはローテーションされる場合があり、 &lt;code&gt;{ signed: true }&lt;/code&gt; オプションでCookieに署名するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="82f9003c6a05a52280571e27be1752a116a4b868" translate="yes" xml:space="preserve">
          <source>They must be either very commonly used and/or must do something useful</source>
          <target state="translated">非常に一般的に使用されているか、何か役に立つことをしているかのどちらかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e964e62372e3ff61be56c7bddbc22ec62a64115d" translate="yes" xml:space="preserve">
          <source>This can be caused when the response is sent before the code making the change is executed. If the change is to the &lt;code&gt;ctx.body&lt;/code&gt; or &lt;code&gt;ctx.status&lt;/code&gt; setter, this can cause a 404 and is by far the most common cause of these problems.</source>
          <target state="translated">これは、変更を行うコードが実行される前に応答が送信された場合に発生する可能性があります。 &lt;code&gt;ctx.body&lt;/code&gt; または &lt;code&gt;ctx.status&lt;/code&gt; セッターに対する変更の場合、これは404を引き起こす可能性があり、これらの問題の最も一般的な原因です。</target>
        </trans-unit>
        <trans-unit id="5776293f4083d9939700811496cd6f7bf9ab4980" translate="yes" xml:space="preserve">
          <source>This can be due to an interrupted chain of middleware calls. This can cause a 404 if the middleware that is skipped is responsible for the &lt;code&gt;ctx.body&lt;/code&gt; or &lt;code&gt;ctx.status&lt;/code&gt; setter. This is less common than &lt;a href=&quot;#my-response-or-context-changes-have-no-effect&quot;&gt;My response or context changes have no effect&lt;/a&gt;, but it can be a much bigger pain to troubleshoot.</source>
          <target state="translated">これは、ミドルウェア呼び出しのチェーンが中断されたことが原因である可能性があります。スキップされたミドルウェアが &lt;code&gt;ctx.body&lt;/code&gt; または &lt;code&gt;ctx.status&lt;/code&gt; セッターを担当している場合、これにより404が発生する可能性があります。これは、&lt;a href=&quot;#my-response-or-context-changes-have-no-effect&quot;&gt;マイレスポンスやコンテキストの変更による影響&lt;/a&gt;よりも一般的ではありませんが、トラブルシューティングが非常に困難になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ac25c7d9e0d9ff0badbd9f53c730a10eac2620ad" translate="yes" xml:space="preserve">
          <source>This guide covers Koa topics that are not directly API related, such as best practices for writing middleware and application structure suggestions. In these examples we use async functions as middleware - you can also use commonFunction or generatorFunction which will be a little different.</source>
          <target state="translated">このガイドでは、ミドルウェアを書くためのベストプラクティスやアプリケーション構造の提案など、APIとは直接関係のないKoaのトピックを取り上げています。これらの例では、ミドルウェアとして非同期関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="b611145d42735536b1cafa7fd8bffd471a709440" translate="yes" xml:space="preserve">
          <source>This includes methods for common tasks like content-negotiation, cache freshness, proxy support, and redirection among others. Despite supplying a reasonably large number of helpful methods Koa maintains a small footprint, as no middleware are bundled.</source>
          <target state="translated">これには、コンテンツネゴシエーション、キャッシュフレッシュネス、プロキシサポート、リダイレクトなどの一般的なタスクのためのメソッドが含まれています。かなり多くの有用なメソッドを提供していますが、ミドルウェアがバンドルされていないため、Koa は小さなフットプリントを維持しています。</target>
        </trans-unit>
        <trans-unit id="effdf843d04d6af670df5e15e59ca8f5c9e9a637" translate="yes" xml:space="preserve">
          <source>This is a common but troublesome problem when working with Koa middleware. First, it is critical to understand when Koa generates a 404. Koa does not care which or how much middleware was run, in many cases a 200 and 404 trigger the same number of middleware. Instead, the default status for any response is 404. The most obvious way this is changed is through &lt;code&gt;ctx.status&lt;/code&gt;. However, if &lt;code&gt;ctx.body&lt;/code&gt; is set when the status has not been explicitly defined (through &lt;code&gt;ctx.status&lt;/code&gt;), the status is set to 200. This explains why simply setting the body results in a 200. Once the middleware is done (when the middleware and any returned promises are complete), Koa sends out the response. After that, nothing can alter the response. If it was a 404 at the time, it will be a 404 at the end, even if &lt;code&gt;ctx.status&lt;/code&gt; or &lt;code&gt;ctx.body&lt;/code&gt; are set afterwords.</source>
          <target state="translated">これは、Koaミドルウェアで作業するときによくある問題です。まず、Koaがいつ404を生成するかを理解することが重要です。Koaは、実行されたミドルウェアの量や量を気にしません。多くの場合、200と404は同じ数のミドルウェアをトリガーします。代わりに、すべての応答のデフォルトのステータスは404 &lt;code&gt;ctx.status&lt;/code&gt; 。これが変更される最も明白な方法は、ctx.statusを使用することです。ただし、ステータスが（ &lt;code&gt;ctx.status&lt;/code&gt; によって）明示的に定義されていないときに &lt;code&gt;ctx.body&lt;/code&gt; が設定されている場合）、ステータスは200に設定されます。これは、本体を設定するだけで200になる理由を説明しています。ミドルウェアが完了すると（ミドルウェアと返されたプロミスが完了すると）、Koaは応答を送信します。その後、何も応答を変更できません。当時404だった場合、たとえ &lt;code&gt;ctx.status&lt;/code&gt; または &lt;code&gt;ctx.body&lt;/code&gt; がアフターワードに設定されていても、最後は404になります。</target>
        </trans-unit>
        <trans-unit id="1aae0f6b6b5c8fb5ca701edc0142831d6b82d9a9" translate="yes" xml:space="preserve">
          <source>This means you can spin up the same application as both HTTP and HTTPS or on multiple addresses:</source>
          <target state="translated">つまり、同じアプリケーションをHTTPとHTTPSの両方として、あるいは複数のアドレスでスピンアップすることができます。</target>
        </trans-unit>
        <trans-unit id="30d7671373c85195759caa3578355851636d573c" translate="yes" xml:space="preserve">
          <source>This section covers middleware authoring best practices, such as middleware accepting options, named middleware for debugging, among others.</source>
          <target state="translated">このセクションでは、ミドルウェアのオーサリングのベストプラクティスである、ミドルウェアのオプションの受け入れ、デバッグ用の名前付きミドルウェアなどについて説明します。</target>
        </trans-unit>
        <trans-unit id="76096b5f06cf787b8cf7199061fefd8a46c32fa6" translate="yes" xml:space="preserve">
          <source>Thus, Koa can be viewed as an abstraction of node.js's &lt;code&gt;http&lt;/code&gt; modules, where as Express is an application framework for node.js.</source>
          <target state="translated">したがって、Koaはnode.jsの &lt;code&gt;http&lt;/code&gt; モジュールの抽象化と見なすことができます。Express はnode.jsのアプリケーションフレームワークです。</target>
        </trans-unit>
        <trans-unit id="6e8fd12b651b1182f68f288518579564686669b4" translate="yes" xml:space="preserve">
          <source>Thus, if you'd like to be closer to node.js and traditional node.js-style coding, you probably want to stick to Connect/Express or similar frameworks. If you want to get rid of callbacks, use Koa.</source>
          <target state="translated">したがって、node.jsや伝統的なnode.jsスタイルのコーディングに近づきたいのであれば、Connect/Expressなどのフレームワークに固執した方が良いでしょう。コールバックをなくしたいのであれば、Koaを使いましょう。</target>
        </trans-unit>
        <trans-unit id="89fc40e43d5b4b690a7baa40cb1801ae3d3e3b16" translate="yes" xml:space="preserve">
          <source>To alter the default status of &lt;code&gt;302&lt;/code&gt;, simply assign the status before or after this call. To alter the body, assign it after this call:</source>
          <target state="translated">&lt;code&gt;302&lt;/code&gt; のデフォルトのステータスを変更するには、この呼び出しの前または後にステータスを割り当てるだけです。ボディを変更するには、この呼び出しの後にボディを割り当てます。</target>
        </trans-unit>
        <trans-unit id="3b2d113c6d2fbb314103cc0aad933b8b18c3cf29" translate="yes" xml:space="preserve">
          <source>To bypass Koa's built-in response handling, you may explicitly set &lt;code&gt;ctx.respond = false;&lt;/code&gt;. Use this if you want to write to the raw &lt;code&gt;res&lt;/code&gt; object instead of letting Koa handle the response for you.</source>
          <target state="translated">Koaの組み込み応答処理をバイパスするには、 &lt;code&gt;ctx.respond = false;&lt;/code&gt; 明示的に設定します。。Koaに応答を処理させる代わりに、生の &lt;code&gt;res&lt;/code&gt; オブジェクトに書き込みたい場合は、これを使用します。</target>
        </trans-unit>
        <trans-unit id="93f751da4a423bb00bb2e18d5a62bda016e3de5a" translate="yes" xml:space="preserve">
          <source>To find the middleware causing the problem, try adding logging at various points in the middleware chain.</source>
          <target state="translated">問題の原因となっているミドルウェアを見つけるには、ミドルウェアチェーンの様々なポイントでロギングを追加してみてください。</target>
        </trans-unit>
        <trans-unit id="1cfd822df66aabf6efa2f0340c5f9a8b2dd0e830" translate="yes" xml:space="preserve">
          <source>To parse and transpile async functions, you should at a minimum have the &lt;a href=&quot;http://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;transform-async-to-generator&lt;/a&gt; or &lt;a href=&quot;http://babeljs.io/docs/plugins/transform-async-to-module-method/&quot;&gt;transform-async-to-module-method&lt;/a&gt; plugins. For example, in your &lt;code&gt;.babelrc&lt;/code&gt; file, you should have:</source>
          <target state="translated">非同期関数を解析およびトランスパイルするには、少なくとも&lt;a href=&quot;http://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;transform-async-to-generator&lt;/a&gt;または&lt;a href=&quot;http://babeljs.io/docs/plugins/transform-async-to-module-method/&quot;&gt;transform-async-to-module-method&lt;/a&gt;プラグインが必要です。たとえば、 &lt;code&gt;.babelrc&lt;/code&gt; ファイルには次のものが必要です。</target>
        </trans-unit>
        <trans-unit id="eda18fac482f5f0b919ccf8621b256d735da734b" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;async&lt;/code&gt; functions in Koa in versions of node &amp;lt; 7.6, we recommend using &lt;a href=&quot;http://babeljs.io/docs/usage/babel-register/&quot;&gt;babel's require hook&lt;/a&gt;.</source>
          <target state="translated">ノードのバージョンが7.6未満のKoaで &lt;code&gt;async&lt;/code&gt; 関数を使用するには、&lt;a href=&quot;http://babeljs.io/docs/usage/babel-register/&quot;&gt;babelのrequireフックの&lt;/a&gt;使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="97911632c318087f31117aff5bbd88028e23c556" translate="yes" xml:space="preserve">
          <source>Troubleshooting Koa</source>
          <target state="translated">コアのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="558af93b72dbda9fe204d0c706cbea78482b530d" translate="yes" xml:space="preserve">
          <source>Try-Catch</source>
          <target state="translated">Try-Catch</target>
        </trans-unit>
        <trans-unit id="369aed496763c80ab53913392ccb751e49b8edac" translate="yes" xml:space="preserve">
          <source>Typically many middleware would re-implement similar features, or even worse incorrectly implement them, when features like signed cookie secrets among others are typically application-specific, not middleware specific.</source>
          <target state="translated">一般的に多くのミドルウェアは似たような機能を再実装したり、さらに悪いことに実装が間違っていたりします。</target>
        </trans-unit>
        <trans-unit id="50728bd2ca41a449169693b34d22cdee803381d3" translate="yes" xml:space="preserve">
          <source>Unlike Express, many convenience utilities are not provided. For example, sending files.</source>
          <target state="translated">Expressと違って、多くの便利なユーティリティが用意されていません。例えば、ファイルの送信。</target>
        </trans-unit>
        <trans-unit id="699a4bb4839a47b083f5bda1cc120ae6d0f202da" translate="yes" xml:space="preserve">
          <source>Unlike Express, routing is not provided.</source>
          <target state="translated">Expressとは異なり、ルーティングは提供されません。</target>
        </trans-unit>
        <trans-unit id="87f57a8ecb4e5e4740795aaa883819ab73b4a535" translate="yes" xml:space="preserve">
          <source>Unlike both Connect and Express, Koa does not include any middleware.</source>
          <target state="translated">KoaはConnectとExpressの両方とは異なり、ミドルウェアを一切含みません。</target>
        </trans-unit>
        <trans-unit id="19f18f377f474e0c95adef492540b83e0e1fd4e3" translate="yes" xml:space="preserve">
          <source>Update one outdated middleware, remove using &lt;code&gt;koa-convert&lt;/code&gt;</source>
          <target state="translated">古いミドルウェアを1つ更新し、 &lt;code&gt;koa-convert&lt;/code&gt; を使用して削除します</target>
        </trans-unit>
        <trans-unit id="c401a6c578aba4b3a6c626808543b701bbf9fbc7" translate="yes" xml:space="preserve">
          <source>Updating your code</source>
          <target state="translated">コードの更新</target>
        </trans-unit>
        <trans-unit id="d26b1c8196822ede1d1823529173f0b75ca6a196" translate="yes" xml:space="preserve">
          <source>Upgrading middleware</source>
          <target state="translated">ミドルウェアのアップグレード</target>
        </trans-unit>
        <trans-unit id="6d36ce52ea13bae6d1d0af67332f1d3d059424f2" translate="yes" xml:space="preserve">
          <source>Upgrading your middleware may require some work. One migration path is to update them one-by-one.</source>
          <target state="translated">ミドルウェアをアップグレードするには、多少の作業が必要になるかもしれません。移行経路の1つは、それらを1つずつ更新することです。</target>
        </trans-unit>
        <trans-unit id="eea0b45269efa911275c7da699f77c0f8d3be577" translate="yes" xml:space="preserve">
          <source>Using async functions means that you can try-catch &lt;code&gt;next&lt;/code&gt;. This example adds a &lt;code&gt;.status&lt;/code&gt; to all errors:</source>
          <target state="translated">非同期関数を使用するということは、 &lt;code&gt;next&lt;/code&gt; トライキャッチできるということです。この例では、すべてのエラーに &lt;code&gt;.status&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="0df5c780ec2f3f2809269acbbd4b25684e739535" translate="yes" xml:space="preserve">
          <source>Using v1.x Middleware in v2.x</source>
          <target state="translated">v2.xでのv1.xミドルウェアの使用</target>
        </trans-unit>
        <trans-unit id="08aa13e0bd42e77a940d1f014c4dcacd72356554" translate="yes" xml:space="preserve">
          <source>Vary on &lt;code&gt;field&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; 異なります。</target>
        </trans-unit>
        <trans-unit id="f18be85946b8c7e953b5cba92814bfe377d3a199" translate="yes" xml:space="preserve">
          <source>Very similar to &lt;code&gt;ctx.request.is()&lt;/code&gt;. Check whether the response type is one of the supplied types. This is particularly useful for creating middleware that manipulate responses.</source>
          <target state="translated">&lt;code&gt;ctx.request.is()&lt;/code&gt; とよく似ています。応答タイプが提供されたタイプの1つであるかどうかを確認してください。これは、応答を操作するミドルウェアを作成する場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d86c77e0207cc5683e9d5bf98b893e76812d8f4d" translate="yes" xml:space="preserve">
          <source>What custom properties do the Koa objects have?</source>
          <target state="translated">Koaオブジェクトはどのようなカスタムプロパティを持っていますか?</target>
        </trans-unit>
        <trans-unit id="3ada4c58e8bca1349eba8259c3d2b7ead2ad708b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;X-Forwarded-For&lt;/code&gt; is present and &lt;code&gt;app.proxy&lt;/code&gt; is enabled an array of these ips is returned, ordered from upstream -&amp;gt; downstream. When disabled an empty array is returned.</source>
          <target state="translated">場合 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 存在し、 &lt;code&gt;app.proxy&lt;/code&gt; は、上流側から注文し戻されるこれらのIPSの配列を、有効になっている- &amp;gt;下流。無効にすると、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="030439a0d96787aa7e0859d0edd12d9d5972b85d" translate="yes" xml:space="preserve">
          <source>When an error occurs &lt;em&gt;and&lt;/em&gt; it is still possible to respond to the client, aka no data has been written to the socket, Koa will respond appropriately with a 500 &quot;Internal Server Error&quot;. In either case an app-level &quot;error&quot; is emitted for logging purposes.</source>
          <target state="translated">エラーが発生&lt;em&gt;し&lt;/em&gt;てもクライアントに応答できる場合、つまりソケットにデータが書き込まれていない場合、Koaは500「内部サーバーエラー」で適切に応答します。どちらの場合も、ロギング目的でアプリレベルの「エラー」が発行されます。</target>
        </trans-unit>
        <trans-unit id="fc22bebdd4f1ca331275a0b7c98533e30e92e1a7" translate="yes" xml:space="preserve">
          <source>When creating public middleware it's useful to conform to the convention of wrapping the middleware in a function that accepts options, allowing users to extend functionality. Even if your middleware accepts &lt;em&gt;no&lt;/em&gt; options, this is still a good idea to keep things uniform.</source>
          <target state="translated">パブリックミドルウェアを作成する場合、オプションを受け入れる関数でミドルウェアをラップする規則に準拠すると、ユーザーが機能を拡張できるため便利です。ミドルウェア&lt;em&gt;が&lt;/em&gt;オプションを受け入れ&lt;em&gt;ない&lt;/em&gt;場合でも、これは物事を均一に保つための良い考えです。</target>
        </trans-unit>
        <trans-unit id="18263bbb75e9a3b96592762990be28910f73534f" translate="yes" xml:space="preserve">
          <source>When no arguments are given all accepted charsets are returned as an array:</source>
          <target state="translated">引数が与えられなかった場合は、受け入れられたすべての文字セットが配列として返されます。</target>
        </trans-unit>
        <trans-unit id="8e4f77f5b1e55861b0febf5d4aa497adf4b10398" translate="yes" xml:space="preserve">
          <source>When no arguments are given all accepted encodings are returned as an array:</source>
          <target state="translated">引数を指定しない場合は、すべての受け入れ可能なエンコーディングが配列として返されます。</target>
        </trans-unit>
        <trans-unit id="b28d8753747d654bfdf47b18a2b8f323e69d427a" translate="yes" xml:space="preserve">
          <source>When no arguments are given all accepted languages are returned as an array:</source>
          <target state="translated">引数を与えない場合は、すべての受け入れ可能な言語が配列として返されます。</target>
        </trans-unit>
        <trans-unit id="9ec45261efd285f6a5a800cb2c782a391ff4bbe4" translate="yes" xml:space="preserve">
          <source>When the furthest downstream middleware executes &lt;code&gt;next();&lt;/code&gt;, it's really yielding to a noop function, allowing the middleware to compose correctly anywhere in the stack.</source>
          <target state="translated">最下流のミドルウェアが &lt;code&gt;next();&lt;/code&gt; を実行したとき。、それは実際にはnoop関数に委譲し、ミドルウェアがスタック内の任意の場所で正しく構成できるようにします。</target>
        </trans-unit>
        <trans-unit id="69ef6dd7f493a4c21d28b5c8160e0752e2e026a0" translate="yes" xml:space="preserve">
          <source>When used, this route will always send back a 404, even though &lt;code&gt;ctx.body&lt;/code&gt; is set.</source>
          <target state="translated">使用すると、 &lt;code&gt;ctx.body&lt;/code&gt; が設定されていても、このルートは常に404を返します。</target>
        </trans-unit>
        <trans-unit id="28380c48a2f36bb45b453e2d60f8de9799c357ed" translate="yes" xml:space="preserve">
          <source>Whenever I try to access my route, it sends back a 404</source>
          <target state="translated">自分のルートにアクセスしようとすると、404を送り返してきます。</target>
        </trans-unit>
        <trans-unit id="8db3a78ace8a86f29b0c0b294ac4621562f2cef1" translate="yes" xml:space="preserve">
          <source>Whenever a stream is set as the response body, &lt;code&gt;.onerror&lt;/code&gt; is automatically added as a listener to the &lt;code&gt;error&lt;/code&gt; event to catch any errors. In addition, whenever the request is closed (even prematurely), the stream is destroyed. If you do not want these two features, do not set the stream as the body directly. For example, you may not want this when setting the body as an HTTP stream in a proxy as it would destroy the underlying connection.</source>
          <target state="translated">ストリームが応答本文として設定されるたびに、 &lt;code&gt;error&lt;/code&gt; をキャッチするために、 &lt;code&gt;.onerror&lt;/code&gt; がリスナーとしてエラーイベントに自動的に追加されます。さらに、リクエストが閉じられると（時期尚早であっても）、ストリームは破棄されます。これらの2つの機能が不要な場合は、ストリームを本文として直接設定しないでください。たとえば、ボディをプロキシでHTTPストリームとして設定する場合は、基になる接続が破壊されるため、これを望まない場合があります。</target>
        </trans-unit>
        <trans-unit id="ae85724f31a62e65cdff950425f19e054ca1b69e" translate="yes" xml:space="preserve">
          <source>Why isn't Koa just Express 4.0?</source>
          <target state="translated">なんでコアはExpress4.0だけじゃないの?</target>
        </trans-unit>
        <trans-unit id="a888cdc07b5537ca1345851ebe7553b3d96671ef" translate="yes" xml:space="preserve">
          <source>Wrap all your current middleware in &lt;code&gt;koa-convert&lt;/code&gt;</source>
          <target state="translated">現在のミドルウェアをすべて &lt;code&gt;koa-convert&lt;/code&gt; ラップします</target>
        </trans-unit>
        <trans-unit id="4606d17a039a59bb7bee391282c2ff6f71276eed" translate="yes" xml:space="preserve">
          <source>Writing Middleware</source>
          <target state="translated">ミドルウェアの記述</target>
        </trans-unit>
        <trans-unit id="bc2c9d6879b9b43ade6a2030174bc971e48c88ca" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;http://babeljs.io/docs/plugins/preset-env/&quot;&gt;env preset&lt;/a&gt; with a target option &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; instead.</source>
          <target state="translated">代わりに、ターゲットオプション &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; &lt;a href=&quot;http://babeljs.io/docs/plugins/preset-env/&quot;&gt;envプリセット&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="efc94da8fa9ef2b3a3a4599e1017d260e619158d" translate="yes" xml:space="preserve">
          <source>You can quickly install a supported version of node with your favorite version manager:</source>
          <target state="translated">サポートされているバージョンのnodeを、お気に入りのバージョンマネージャを使って素早くインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="7f977bc9d823e395eeab60c8e06a01fb5ac3901a" translate="yes" xml:space="preserve">
          <source>You could also refactor your logic outside of Koa middleware functions. Create functions like &lt;code&gt;function* someLogic(ctx) {}&lt;/code&gt; and call it in your middleware as &lt;code&gt;const result = yield someLogic(this)&lt;/code&gt;. Not using &lt;code&gt;this&lt;/code&gt; will help migrations to the new middleware signature, which does not use &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">Koaミドルウェア関数の外でロジックをリファクタリングすることもできます。 &lt;code&gt;function* someLogic(ctx) {}&lt;/code&gt; ような関数を作成し、 &lt;code&gt;const result = yield someLogic(this)&lt;/code&gt; として呼び出します。使用していない &lt;code&gt;this&lt;/code&gt; 使用していない新しいミドルウェア署名への移行に役立つ &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6f5e95f99445c2149cb90f79544eba246e879fb" translate="yes" xml:space="preserve">
          <source>You could do it manually as well, in which case Koa will not convert.</source>
          <target state="translated">手動でもできますが、その場合はコアが変換しません。</target>
        </trans-unit>
        <trans-unit id="81da2a8a384e1536d68998260775c673ec4be2b3" translate="yes" xml:space="preserve">
          <source>You don't have to use asynchronous functions - you just have to pass a function that returns a promise. A regular function that returns a promise works too!</source>
          <target state="translated">非同期関数を使う必要はありません-プロミスを返す関数を渡せばいいだけです。プロミスを返す通常の関数でも動作します!</target>
        </trans-unit>
        <trans-unit id="1960a6c800cc82a8e386c31fcff021da8cfb0e4a" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;ctx.accepts()&lt;/code&gt; as many times as you like, or use a switch:</source>
          <target state="translated">&lt;code&gt;ctx.accepts()&lt;/code&gt; を何度でも呼び出すか、スイッチを使用できます。</target>
        </trans-unit>
        <trans-unit id="0a2b9a706783127d8ec9211a43a21ab09a9578ee" translate="yes" xml:space="preserve">
          <source>You may optionally pass a &lt;code&gt;properties&lt;/code&gt; object which is merged into the error as-is, useful for decorating machine-friendly errors which are reported to the requester upstream.</source>
          <target state="translated">オプションで、エラーにマージされる &lt;code&gt;properties&lt;/code&gt; オブジェクトをそのまま渡すことができます。これは、リクエスタの上流に報告されるマシンフレンドリーなエラーを装飾するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e2785648ad0b9961d19a564e5e843a65d8297a3c" translate="yes" xml:space="preserve">
          <source>You should start refactoring your code now to ease migrating to Koa v2:</source>
          <target state="translated">Koa v2 への移行を容易にするために、今すぐコードのリファクタリングを始めるべきです。</target>
        </trans-unit>
        <trans-unit id="38889219195feedcd2379630fbbd7c820cf3b8ef" translate="yes" xml:space="preserve">
          <source>You will have to convert your generators to async functions with the new middleware signature:</source>
          <target state="translated">新しいミドルウェアのシグネチャを使ってジェネレーターを非同期関数に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d14dd38bd7affae3b997ddd17d6b94aa2eaabda" translate="yes" xml:space="preserve">
          <source>app.callback()</source>
          <target state="translated">app.callback()</target>
        </trans-unit>
        <trans-unit id="d3b5eca49159f0cb7586b2ea88458409edb1eb53" translate="yes" xml:space="preserve">
          <source>app.context</source>
          <target state="translated">app.context</target>
        </trans-unit>
        <trans-unit id="318b7e691b47b90a38e9f694a09fa55ec8a62739" translate="yes" xml:space="preserve">
          <source>app.keys=</source>
          <target state="translated">app.keys=</target>
        </trans-unit>
        <trans-unit id="72e865215b0a584ffca00b4e67de78ec2a3e0ed0" translate="yes" xml:space="preserve">
          <source>app.listen()</source>
          <target state="translated">app.listen()</target>
        </trans-unit>
        <trans-unit id="c874865deecbf49c775e17f2cb652ac78f0a57b3" translate="yes" xml:space="preserve">
          <source>app.listen(...)</source>
          <target state="translated">app.listen(...)</target>
        </trans-unit>
        <trans-unit id="64cc94153849c91b77d0739b693a0814eee45666" translate="yes" xml:space="preserve">
          <source>app.use()</source>
          <target state="translated">app.use()</target>
        </trans-unit>
        <trans-unit id="4a5d431c03a22779a5393d612387b7b5e5258f83" translate="yes" xml:space="preserve">
          <source>app.use(function)</source>
          <target state="translated">app.use(function)</target>
        </trans-unit>
        <trans-unit id="357106df0ebdbf359da922c871b051b95252d34b" translate="yes" xml:space="preserve">
          <source>ctx.app</source>
          <target state="translated">ctx.app</target>
        </trans-unit>
        <trans-unit id="44a0e315a5019b82d57b1bea5befb9bf075cf540" translate="yes" xml:space="preserve">
          <source>ctx.assert()</source>
          <target state="translated">ctx.assert()</target>
        </trans-unit>
        <trans-unit id="9a4c93448feb81d788b5364c53c2b734dbb5eac0" translate="yes" xml:space="preserve">
          <source>ctx.assert(value, [status], [msg], [properties])</source>
          <target state="translated">ctx.assert(value,[status],[msg],[properties])</target>
        </trans-unit>
        <trans-unit id="c56ed301a3e9169a20a20561e7c01c1d97afb13d" translate="yes" xml:space="preserve">
          <source>ctx.cookies.get()</source>
          <target state="translated">ctx.cookies.get()</target>
        </trans-unit>
        <trans-unit id="b38446aac3b2820b36790d076ad0ebc2710b2c57" translate="yes" xml:space="preserve">
          <source>ctx.cookies.get(name, [options])</source>
          <target state="translated">ctx.cookies.get(name,[options])</target>
        </trans-unit>
        <trans-unit id="d212d4692f39b9da2029be87219f2625559cbd41" translate="yes" xml:space="preserve">
          <source>ctx.cookies.set()</source>
          <target state="translated">ctx.cookies.set()</target>
        </trans-unit>
        <trans-unit id="ee208bf7469e8afd2e589e02d166ec2543dfeb50" translate="yes" xml:space="preserve">
          <source>ctx.cookies.set(name, value, [options])</source>
          <target state="translated">ctx.cookies.set(name,value,[options])</target>
        </trans-unit>
        <trans-unit id="59ae18ded15111d58fac0b4b4f17152893ca214e" translate="yes" xml:space="preserve">
          <source>ctx.req</source>
          <target state="translated">ctx.req</target>
        </trans-unit>
        <trans-unit id="2447f3836a6a9e7300b3931175851b0f61989f54" translate="yes" xml:space="preserve">
          <source>ctx.request</source>
          <target state="translated">ctx.request</target>
        </trans-unit>
        <trans-unit id="9efe07395414b794322c1057d555877667d97dd7" translate="yes" xml:space="preserve">
          <source>ctx.res</source>
          <target state="translated">ctx.res</target>
        </trans-unit>
        <trans-unit id="49d919041b734c5e5446d7895eaba43093665c5c" translate="yes" xml:space="preserve">
          <source>ctx.respond</source>
          <target state="translated">ctx.respond</target>
        </trans-unit>
        <trans-unit id="a97735eeffd4c2e7a87d5b813d3dce1e0e783c48" translate="yes" xml:space="preserve">
          <source>ctx.response</source>
          <target state="translated">ctx.response</target>
        </trans-unit>
        <trans-unit id="920a7cf2675da9445416cac7e9db07cf230008d2" translate="yes" xml:space="preserve">
          <source>ctx.state</source>
          <target state="translated">ctx.state</target>
        </trans-unit>
        <trans-unit id="55e219c3a7f91027901fa5012debbbe5cb9fb201" translate="yes" xml:space="preserve">
          <source>ctx.throw()</source>
          <target state="translated">ctx.throw()</target>
        </trans-unit>
        <trans-unit id="c1f9a8c53761ffb8b90ffaae6d7ef2fecad9466d" translate="yes" xml:space="preserve">
          <source>ctx.throw([status], [msg], [properties])</source>
          <target state="translated">ctx.throw([status],[msg],[properties])</target>
        </trans-unit>
        <trans-unit id="ff3db240638fe3ee6c826ac42ffc61798d864251" translate="yes" xml:space="preserve">
          <source>request.URL</source>
          <target state="translated">request.URL</target>
        </trans-unit>
        <trans-unit id="93a716a8d6b463838b21704e2570ca9f90cc3aba" translate="yes" xml:space="preserve">
          <source>request.accepts()</source>
          <target state="translated">request.accepts()</target>
        </trans-unit>
        <trans-unit id="5b4cee631be47d55ffce06589ca8bc1128512ca9" translate="yes" xml:space="preserve">
          <source>request.accepts(types)</source>
          <target state="translated">request.accepts(types)</target>
        </trans-unit>
        <trans-unit id="e40c2f9352ce2d740ea9b4ff0077cc6207236916" translate="yes" xml:space="preserve">
          <source>request.acceptsCharsets()</source>
          <target state="translated">request.acceptsCharsets()</target>
        </trans-unit>
        <trans-unit id="c5436e440b624ba03086d76eb9699fe0a5811a66" translate="yes" xml:space="preserve">
          <source>request.acceptsCharsets(charsets)</source>
          <target state="translated">request.acceptsCharsets(charsets)</target>
        </trans-unit>
        <trans-unit id="1dbb9e1a1dff181b3f7e93bce088691e7c315a1d" translate="yes" xml:space="preserve">
          <source>request.acceptsEncodings()</source>
          <target state="translated">request.acceptsEncodings()</target>
        </trans-unit>
        <trans-unit id="47bddffa9c9266403549249b578a932009fe000e" translate="yes" xml:space="preserve">
          <source>request.acceptsEncodings(encodings)</source>
          <target state="translated">request.acceptsEncodings(encodings)</target>
        </trans-unit>
        <trans-unit id="9ab6541a5db6cf531893fde294d6220b0ba0add6" translate="yes" xml:space="preserve">
          <source>request.acceptsLanguages()</source>
          <target state="translated">request.acceptsLanguages()</target>
        </trans-unit>
        <trans-unit id="474c255206cd7c09cb7727fa9e203ab0fc13009f" translate="yes" xml:space="preserve">
          <source>request.acceptsLanguages(langs)</source>
          <target state="translated">request.acceptsLanguages(langs)</target>
        </trans-unit>
        <trans-unit id="6721c44936b1c69db99014ea6bfc197d6c840639" translate="yes" xml:space="preserve">
          <source>request.charset</source>
          <target state="translated">request.charset</target>
        </trans-unit>
        <trans-unit id="7b499f2fccc6be146b3309a82d46fa3bcedc748d" translate="yes" xml:space="preserve">
          <source>request.fresh</source>
          <target state="translated">request.fresh</target>
        </trans-unit>
        <trans-unit id="74bd8f935617c16b04b484f6feb21ccb78072738" translate="yes" xml:space="preserve">
          <source>request.get()</source>
          <target state="translated">request.get()</target>
        </trans-unit>
        <trans-unit id="0c1a75a64ea2656135c5f8a6afd9cd7f7f6352d5" translate="yes" xml:space="preserve">
          <source>request.get(field)</source>
          <target state="translated">request.get(field)</target>
        </trans-unit>
        <trans-unit id="234bf670f1c386a666c6eb0394a558432e83ab2c" translate="yes" xml:space="preserve">
          <source>request.header</source>
          <target state="translated">request.header</target>
        </trans-unit>
        <trans-unit id="203ee3ac8c9e456ccb1ceb98e5c83e49bb84475f" translate="yes" xml:space="preserve">
          <source>request.header=</source>
          <target state="translated">request.header=</target>
        </trans-unit>
        <trans-unit id="39392e11205e5a871d126013f219526386a818f4" translate="yes" xml:space="preserve">
          <source>request.headers</source>
          <target state="translated">request.headers</target>
        </trans-unit>
        <trans-unit id="1c10a5b8e4b2f1c9604f41e4ede3574b863cedbd" translate="yes" xml:space="preserve">
          <source>request.headers=</source>
          <target state="translated">request.headers=</target>
        </trans-unit>
        <trans-unit id="ad89c13515f740d771e9f2177bc47a088460b833" translate="yes" xml:space="preserve">
          <source>request.host</source>
          <target state="translated">request.host</target>
        </trans-unit>
        <trans-unit id="32c2c5e1c038a54d48efef6c80e09734257f5bff" translate="yes" xml:space="preserve">
          <source>request.hostname</source>
          <target state="translated">request.hostname</target>
        </trans-unit>
        <trans-unit id="b67d1b1ba21d9e0ba4dfb6a70e6f66fa90b4b50c" translate="yes" xml:space="preserve">
          <source>request.href</source>
          <target state="translated">request.href</target>
        </trans-unit>
        <trans-unit id="e5f9fa84bd97551bee304455d8c83cfdca7afa6b" translate="yes" xml:space="preserve">
          <source>request.idempotent</source>
          <target state="translated">request.idempotent</target>
        </trans-unit>
        <trans-unit id="5bd6c726f09734f77576d016204aaf2d0699dfc0" translate="yes" xml:space="preserve">
          <source>request.ip</source>
          <target state="translated">request.ip</target>
        </trans-unit>
        <trans-unit id="9c1bd09e7dc827a6e44453e42e3daac52e5caf3d" translate="yes" xml:space="preserve">
          <source>request.ips</source>
          <target state="translated">request.ips</target>
        </trans-unit>
        <trans-unit id="7a1ec2818eb4ac735e5d73855eca827bd2866b75" translate="yes" xml:space="preserve">
          <source>request.is()</source>
          <target state="translated">request.is()</target>
        </trans-unit>
        <trans-unit id="6b223e203ffa808782faae198aa71a803fa7b686" translate="yes" xml:space="preserve">
          <source>request.is(types...)</source>
          <target state="translated">request.is(types...)</target>
        </trans-unit>
        <trans-unit id="0051112de79f438773d6df3c1524892847037c73" translate="yes" xml:space="preserve">
          <source>request.length</source>
          <target state="translated">request.length</target>
        </trans-unit>
        <trans-unit id="cc37ebe0d4cf14ad8f42cd0a4ca82256c69a5b4d" translate="yes" xml:space="preserve">
          <source>request.method</source>
          <target state="translated">request.method</target>
        </trans-unit>
        <trans-unit id="80157767d300ee04a4f60a75a9f0b27522dca542" translate="yes" xml:space="preserve">
          <source>request.method=</source>
          <target state="translated">request.method=</target>
        </trans-unit>
        <trans-unit id="695ad12bce560b06034525f2d77d34250af87437" translate="yes" xml:space="preserve">
          <source>request.origin</source>
          <target state="translated">request.origin</target>
        </trans-unit>
        <trans-unit id="2e62d0dba0443e7738588c08f1e69d4896b3664f" translate="yes" xml:space="preserve">
          <source>request.originalUrl</source>
          <target state="translated">request.originalUrl</target>
        </trans-unit>
        <trans-unit id="c8babf1ea8bcae15c5aa87bca7a4bca06f789ee4" translate="yes" xml:space="preserve">
          <source>request.path</source>
          <target state="translated">request.path</target>
        </trans-unit>
        <trans-unit id="9fa6b58e0bc0ef3d00e3d35e10d4dfceaff56536" translate="yes" xml:space="preserve">
          <source>request.path=</source>
          <target state="translated">request.path=</target>
        </trans-unit>
        <trans-unit id="d5a4a2067571d0cba9623fa395850f79ee8013bd" translate="yes" xml:space="preserve">
          <source>request.protocol</source>
          <target state="translated">request.protocol</target>
        </trans-unit>
        <trans-unit id="385fc84a125b880b061fad7fef305948c1f3b82c" translate="yes" xml:space="preserve">
          <source>request.query</source>
          <target state="translated">request.query</target>
        </trans-unit>
        <trans-unit id="760a1b6c27c96982905f3f968148546126eebe5c" translate="yes" xml:space="preserve">
          <source>request.query=</source>
          <target state="translated">request.query=</target>
        </trans-unit>
        <trans-unit id="4dc8d71ca3ffc8678abc6489366639b933cd329a" translate="yes" xml:space="preserve">
          <source>request.querystring</source>
          <target state="translated">request.querystring</target>
        </trans-unit>
        <trans-unit id="486aef306ee7d533f096725c3a49bcc49fd718ce" translate="yes" xml:space="preserve">
          <source>request.querystring=</source>
          <target state="translated">request.querystring=</target>
        </trans-unit>
        <trans-unit id="29126a342e7e77a354080fc446fc69130e29ea98" translate="yes" xml:space="preserve">
          <source>request.search</source>
          <target state="translated">request.search</target>
        </trans-unit>
        <trans-unit id="0804f7231ddea1fcf101517efb84b0b44ab6b722" translate="yes" xml:space="preserve">
          <source>request.search=</source>
          <target state="translated">request.search=</target>
        </trans-unit>
        <trans-unit id="4efe3338565f1f0ee94aaf1529ae483003f031cb" translate="yes" xml:space="preserve">
          <source>request.secure</source>
          <target state="translated">request.secure</target>
        </trans-unit>
        <trans-unit id="12a676b2fda0d8ea1a238c45d020460a9be47450" translate="yes" xml:space="preserve">
          <source>request.socket</source>
          <target state="translated">request.socket</target>
        </trans-unit>
        <trans-unit id="eb0db3bf31d32af506f6dab06802b95714d04d0e" translate="yes" xml:space="preserve">
          <source>request.stale</source>
          <target state="translated">request.stale</target>
        </trans-unit>
        <trans-unit id="6e372c1209672c234ed2a810f692f6c846234237" translate="yes" xml:space="preserve">
          <source>request.subdomains</source>
          <target state="translated">request.subdomains</target>
        </trans-unit>
        <trans-unit id="eedea62628a5ffa783f93925a7441e078fd8fbed" translate="yes" xml:space="preserve">
          <source>request.type</source>
          <target state="translated">request.type</target>
        </trans-unit>
        <trans-unit id="7a5cefaea879eb725c9ec16ca1b60530be56be89" translate="yes" xml:space="preserve">
          <source>request.url</source>
          <target state="translated">request.url</target>
        </trans-unit>
        <trans-unit id="125130d40a12c0fa054a72444e46577753abf6ac" translate="yes" xml:space="preserve">
          <source>request.url=</source>
          <target state="translated">request.url=</target>
        </trans-unit>
        <trans-unit id="6ebbeb29e8b0ab8a17f44d69c23934b30729aa5b" translate="yes" xml:space="preserve">
          <source>response.append()</source>
          <target state="translated">response.append()</target>
        </trans-unit>
        <trans-unit id="4399765eafe9cf5fbcf3e45f4ca032ccd44e23e3" translate="yes" xml:space="preserve">
          <source>response.append(field, value)</source>
          <target state="translated">response.append(field,value)</target>
        </trans-unit>
        <trans-unit id="74cb2e7bc73824212578b16d1daacb365e3d744b" translate="yes" xml:space="preserve">
          <source>response.attachment()</source>
          <target state="translated">response.attachment()</target>
        </trans-unit>
        <trans-unit id="52ae77865b12e171c2f3d39ff6622679e95ce549" translate="yes" xml:space="preserve">
          <source>response.attachment([filename], [options])</source>
          <target state="translated">response.attachment([ファイル名],[オプション])</target>
        </trans-unit>
        <trans-unit id="73b925313650d5352839b9631b89c465cdb93bf2" translate="yes" xml:space="preserve">
          <source>response.body</source>
          <target state="translated">response.body</target>
        </trans-unit>
        <trans-unit id="108eaa279edfc977d35b244bd8239af874ac6628" translate="yes" xml:space="preserve">
          <source>response.body=</source>
          <target state="translated">response.body=</target>
        </trans-unit>
        <trans-unit id="7a472b824be4f596188445995879d50621721cd9" translate="yes" xml:space="preserve">
          <source>response.etag=</source>
          <target state="translated">response.etag=</target>
        </trans-unit>
        <trans-unit id="a462fc8e4bc7f50bd75af94ecc2c36bfb5325c19" translate="yes" xml:space="preserve">
          <source>response.flushHeaders()</source>
          <target state="translated">response.flushHeaders()</target>
        </trans-unit>
        <trans-unit id="e1b20c8a45ebb54614f841f2bd9c370353331ce1" translate="yes" xml:space="preserve">
          <source>response.get()</source>
          <target state="translated">response.get()</target>
        </trans-unit>
        <trans-unit id="f3260f82bb4560b99c675ad9d25ff44921d0f135" translate="yes" xml:space="preserve">
          <source>response.get(field)</source>
          <target state="translated">response.get(field)</target>
        </trans-unit>
        <trans-unit id="c8ef682835049be10d0734c2920ce73c51f591fa" translate="yes" xml:space="preserve">
          <source>response.header</source>
          <target state="translated">response.header</target>
        </trans-unit>
        <trans-unit id="439ab8afa7017f0aed9bbfbb955b4d395749edaf" translate="yes" xml:space="preserve">
          <source>response.headerSent</source>
          <target state="translated">response.headerSent</target>
        </trans-unit>
        <trans-unit id="9cac4a2112360bd4c396ac8d56f485bd46c60d3c" translate="yes" xml:space="preserve">
          <source>response.headers</source>
          <target state="translated">response.headers</target>
        </trans-unit>
        <trans-unit id="ee9d9ecb3a3af4c3261d95f816f83b44ff9915a6" translate="yes" xml:space="preserve">
          <source>response.is()</source>
          <target state="translated">response.is()</target>
        </trans-unit>
        <trans-unit id="a67bd075e48c7b1ae4690e029f28de4190cc1287" translate="yes" xml:space="preserve">
          <source>response.is(types...)</source>
          <target state="translated">response.is(types...)</target>
        </trans-unit>
        <trans-unit id="2fbd67ca5e61c92a25fea7b09cd5d87ed64b779b" translate="yes" xml:space="preserve">
          <source>response.lastModified</source>
          <target state="translated">response.lastModified</target>
        </trans-unit>
        <trans-unit id="adb88e22b545a3c8858489c0f8dd4e5e617323e7" translate="yes" xml:space="preserve">
          <source>response.lastModified=</source>
          <target state="translated">response.lastModified=</target>
        </trans-unit>
        <trans-unit id="be430deb19b2accd4c44d12d95b0e56ab4fefaab" translate="yes" xml:space="preserve">
          <source>response.length</source>
          <target state="translated">response.length</target>
        </trans-unit>
        <trans-unit id="4dc7e222262ee115d2b3d472434e263c55b3f9cf" translate="yes" xml:space="preserve">
          <source>response.length=</source>
          <target state="translated">response.length=</target>
        </trans-unit>
        <trans-unit id="4cd803dca54d430fab1ea603e89fe89e893dc046" translate="yes" xml:space="preserve">
          <source>response.message</source>
          <target state="translated">response.message</target>
        </trans-unit>
        <trans-unit id="05dc9ed534d50ded0d30299559b31136ad82a683" translate="yes" xml:space="preserve">
          <source>response.message=</source>
          <target state="translated">response.message=</target>
        </trans-unit>
        <trans-unit id="1e9454cde29cb9fbb3d3259f82094cadd37e5540" translate="yes" xml:space="preserve">
          <source>response.redirect()</source>
          <target state="translated">response.redirect()</target>
        </trans-unit>
        <trans-unit id="7e5778914c83b0b90f86a056aa8ad43e083862ff" translate="yes" xml:space="preserve">
          <source>response.redirect(url, [alt])</source>
          <target state="translated">response.redirect(url,[alt])</target>
        </trans-unit>
        <trans-unit id="039c36bc4c90774ec190a3a7f794b517c4cd3639" translate="yes" xml:space="preserve">
          <source>response.remove()</source>
          <target state="translated">response.remove()</target>
        </trans-unit>
        <trans-unit id="d4dfe7bcf254b499c0ebf38459e2c8de5ee7a625" translate="yes" xml:space="preserve">
          <source>response.remove(field)</source>
          <target state="translated">response.remove(field)</target>
        </trans-unit>
        <trans-unit id="5d3c1723171a779d700fc3915249e277a5b7732c" translate="yes" xml:space="preserve">
          <source>response.set()</source>
          <target state="translated">response.set()</target>
        </trans-unit>
        <trans-unit id="d3623fc7dbf6b7ea3fcb99cfb4ff25f159c8749b" translate="yes" xml:space="preserve">
          <source>response.set(field, value)</source>
          <target state="translated">response.set(フィールド、値)</target>
        </trans-unit>
        <trans-unit id="7d5a443f8998b41a534d4cc704ba45aed664de5f" translate="yes" xml:space="preserve">
          <source>response.set(fields)</source>
          <target state="translated">response.set(fields)</target>
        </trans-unit>
        <trans-unit id="702776011b989a358866676d9132803ae86f0b7c" translate="yes" xml:space="preserve">
          <source>response.socket</source>
          <target state="translated">response.socket</target>
        </trans-unit>
        <trans-unit id="ea3a76e7d00c031231ce85072ff4510375ad1edb" translate="yes" xml:space="preserve">
          <source>response.status</source>
          <target state="translated">response.status</target>
        </trans-unit>
        <trans-unit id="131a9b486908e0cbc456e25a34d0bd79d3488ae2" translate="yes" xml:space="preserve">
          <source>response.status=</source>
          <target state="translated">response.status=</target>
        </trans-unit>
        <trans-unit id="2baa92befb767b954286c583e1dfc284dd9c7b70" translate="yes" xml:space="preserve">
          <source>response.type</source>
          <target state="translated">response.type</target>
        </trans-unit>
        <trans-unit id="c4c5cd4127ea30347a022df1e5b2833268c43fcb" translate="yes" xml:space="preserve">
          <source>response.type=</source>
          <target state="translated">response.type=</target>
        </trans-unit>
        <trans-unit id="7b1b18a7fade59fd33d9e53103a0595afa197e1c" translate="yes" xml:space="preserve">
          <source>response.vary()</source>
          <target state="translated">response.vary()</target>
        </trans-unit>
        <trans-unit id="915affd5e95e0978bc190bc82e1f3474fc905f55" translate="yes" xml:space="preserve">
          <source>response.vary(field)</source>
          <target state="translated">response.vary(field)</target>
        </trans-unit>
        <trans-unit id="6eda24c3551ce511eec5eb61461eccd47aa7f56f" translate="yes" xml:space="preserve">
          <source>v1.x support</source>
          <target state="translated">v1.x サポート</target>
        </trans-unit>
        <trans-unit id="cfd77e810015d073b79f929ccece97117bad193e" translate="yes" xml:space="preserve">
          <source>v2.x uses es6 classes which require the &lt;code&gt;new&lt;/code&gt; keyword to be used.</source>
          <target state="translated">v2.xは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用する必要があるes6クラスを使用します。</target>
        </trans-unit>
        <trans-unit id="698a879938bf4d71b92190d2b8f19c0e1d4abeef" translate="yes" xml:space="preserve">
          <source>✓</source>
          <target state="translated">✓</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
