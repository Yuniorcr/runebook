<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="cypress">
    <body>
      <group id="cypress">
        <trans-unit id="4d98ce7637720e6e6410d48877f19b3b01766845" translate="yes" xml:space="preserve">
          <source>Framework tooling</source>
          <target state="translated">フレームワークツール</target>
        </trans-unit>
        <trans-unit id="09c17a26370171d23ce84d3552d846a3048206f8" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;cy&lt;/code&gt; only, meaning they do not operate on a subject: &lt;a href=&quot;../../api/commands/clearcookies&quot;&gt;&lt;code&gt;cy.clearCookies()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy&lt;/code&gt; のみ、彼らは被写体に動作しないという意味：&lt;a href=&quot;../../api/commands/clearcookies&quot;&gt; &lt;code&gt;cy.clearCookies()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31f403c5a128ec2fd7eecd5f9c8314fb8737fe1f" translate="yes" xml:space="preserve">
          <source>From a plugin</source>
          <target state="translated">プラグインから</target>
        </trans-unit>
        <trans-unit id="ed641d7d4bd97215540ad6898e355fb5baec7c82" translate="yes" xml:space="preserve">
          <source>From both &lt;code&gt;cy&lt;/code&gt;&lt;em&gt;or&lt;/em&gt; from a subject-yielding command: &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy&lt;/code&gt; &lt;em&gt;または&lt;/em&gt;件名を&lt;a href=&quot;../../api/commands/contains&quot;&gt; &lt;code&gt;cy.contains()&lt;/code&gt; &lt;/a&gt;コマンドの両方から：cy.contains（）。</target>
        </trans-unit>
        <trans-unit id="2e722ad8ebb2888327ea48c45ad4d9f9f25a3a6c" translate="yes" xml:space="preserve">
          <source>From commands yielding particular kinds of subjects (like DOM elements): &lt;a href=&quot;../../api/commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の種類のサブジェクト（DOM要素など）を生成するコマンドから：&lt;a href=&quot;../../api/commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e9cebd6aa307387fd6af261554581a6553c4c0a6" translate="yes" xml:space="preserve">
          <source>From here you may want to explore some more of our guides:</source>
          <target state="translated">ここからは、私たちのガイドのいくつかの詳細を探索したい場合があります。</target>
        </trans-unit>
        <trans-unit id="5dba6095ab28643bdecd3fa748791bc981bf5a33" translate="yes" xml:space="preserve">
          <source>From now on, the front end code coverage collected during end-to-end tests will be merged with the code coverage from the instrumented back end code and saved in a single report. Here is an example report from the &lt;a href=&quot;https://github.com/cypress-io/cypress-example-realworld&quot;&gt;cypress-io/cypress-example-realworld&lt;/a&gt; example:</source>
          <target state="translated">今後、エンドツーエンドテスト中に収集されたフロントエンドコードカバレッジは、計測されたバックエンドコードのコードカバレッジとマージされ、単一のレポートに保存されます。以下は、&lt;a href=&quot;https://github.com/cypress-io/cypress-example-realworld&quot;&gt;cypress-io / cypress-example-realworldの&lt;/a&gt;例のレポートの例です。</target>
        </trans-unit>
        <trans-unit id="0c3798d7d8f036440f97015d932834077be71636" translate="yes" xml:space="preserve">
          <source>From test file</source>
          <target state="translated">テストファイルから</target>
        </trans-unit>
        <trans-unit id="ab237c8d353bffac0346140b90b7b7a8b25ebce3" translate="yes" xml:space="preserve">
          <source>From the Dashboard you can:</source>
          <target state="translated">ダッシュボードからは、以下のことができます。</target>
        </trans-unit>
        <trans-unit id="11bd5b7d8d61f5366111bedb4345ae5776477e67" translate="yes" xml:space="preserve">
          <source>From the command line or CI</source>
          <target state="translated">コマンドラインまたはCIから</target>
        </trans-unit>
        <trans-unit id="deed2829df64b9417a7632480c32da477e7c2ff9" translate="yes" xml:space="preserve">
          <source>From your support file you should also &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; other files to keep things organized.</source>
          <target state="translated">サポートファイルから、他のファイルを &lt;code&gt;import&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; して、物事を整理しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="b83b790c6fc4ff8ca374201d19ae1e8204d8eb05" translate="yes" xml:space="preserve">
          <source>Full documentation can be found at the &lt;a href=&quot;https://github.com/cypress-io/circleci-orb&quot;&gt;&lt;code&gt;cypress-io/circleci-orb&lt;/code&gt;&lt;/a&gt; repo.</source>
          <target state="translated">完全なドキュメントは、&lt;a href=&quot;https://github.com/cypress-io/circleci-orb&quot;&gt; &lt;code&gt;cypress-io/circleci-orb&lt;/code&gt; &lt;/a&gt;リポジトリにあります。</target>
        </trans-unit>
        <trans-unit id="27be451352c8b9f273dc84e2012187216c61789d" translate="yes" xml:space="preserve">
          <source>Full page captures and fixed/sticky elements</source>
          <target state="translated">フルページキャプチャと固定スティッキー要素</target>
        </trans-unit>
        <trans-unit id="034943d6789b4d9a66d1f7cf2a5a8320eb650fa6" translate="yes" xml:space="preserve">
          <source>Full stack code coverage</source>
          <target state="translated">スタックコードのフルカバレッジ</target>
        </trans-unit>
        <trans-unit id="ad82fc5446798eab3d3d1fdaaff1f48decfa74b2" translate="yes" xml:space="preserve">
          <source>Fully Qualified XHR&amp;rsquo;s which should be proxied are now correctly transparently rewritten to prevent CORS problems.</source>
          <target state="translated">CORSの問題を防ぐために、プロキシする必要がある完全修飾XHRが正しく透過的に書き直されるようになりました。</target>
        </trans-unit>
        <trans-unit id="4093edaeaabad68fa8b27b27cf89bc2a6385145f" translate="yes" xml:space="preserve">
          <source>Fully test the login flow &amp;ndash; but only once!</source>
          <target state="translated">ログインフローを完全にテストしますが、一度だけです！</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="dbfe0bee331f156c7ece93de6926384c2e325f16" translate="yes" xml:space="preserve">
          <source>Function names</source>
          <target state="translated">関数名</target>
        </trans-unit>
        <trans-unit id="36cd78d0eb64baf4c627d1e6a9a955d2ec5678d8" translate="yes" xml:space="preserve">
          <source>Function with Arguments</source>
          <target state="translated">引数を持つ関数</target>
        </trans-unit>
        <trans-unit id="ce82a00dda725a9597e8bcd97e8cf08fdb3c76d6" translate="yes" xml:space="preserve">
          <source>Functional vs visual testing</source>
          <target state="translated">機能テストと視覚テスト</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="468663fe629e5152ad5be2f4f4d1558cfeb168ab" translate="yes" xml:space="preserve">
          <source>Functions that return a &lt;code&gt;Promise&lt;/code&gt; will automatically be awaited.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; を返す関数は自動的に待機します。</target>
        </trans-unit>
        <trans-unit id="33851c1930f54c3f51d08dc5b642a96f9ca8647b" translate="yes" xml:space="preserve">
          <source>Functions that return promises are awaited</source>
          <target state="translated">約束を返す関数を待ち受けにしている</target>
        </trans-unit>
        <trans-unit id="8018e4b6436fbf898a5cd266c4d81b923fca90e4" translate="yes" xml:space="preserve">
          <source>Generally the server is responsible for sending responses that reflect some kind of &lt;strong&gt;state&lt;/strong&gt; it holds - generally in a database.</source>
          <target state="translated">通常、サーバーは、サーバーが保持しているある種の&lt;strong&gt;状態&lt;/strong&gt;を反映する応答を送信する責任があります（通常はデータベース）。</target>
        </trans-unit>
        <trans-unit id="715d08a843e5acb7dcfcc8e24b0c0cb0a4d75935" translate="yes" xml:space="preserve">
          <source>Generate the fixture stubs ahead of time</source>
          <target state="translated">フィクスチャのスタブを前もって生成する</target>
        </trans-unit>
        <trans-unit id="11a354d7971106c41270317a1366eb5df9e036d7" translate="yes" xml:space="preserve">
          <source>Get &lt;code&gt;length&lt;/code&gt; of title</source>
          <target state="translated">タイトルの &lt;code&gt;length&lt;/code&gt; を取得</target>
        </trans-unit>
        <trans-unit id="5e34727010ea8370b58971d714279bf8c32f0c85" translate="yes" xml:space="preserve">
          <source>Get &lt;code&gt;session_id&lt;/code&gt; cookie after logging in</source>
          <target state="translated">ログイン後に &lt;code&gt;session_id&lt;/code&gt; cookieを取得する</target>
        </trans-unit>
        <trans-unit id="ec2c63980222cc97289df6bba1d272938c5fedbe" translate="yes" xml:space="preserve">
          <source>Get A DOM element at a specific index in an array of elements.</source>
          <target state="translated">要素の配列中の特定のインデックスにある DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="78c744c3cf42801348368155de7d7cd17259ef6b" translate="yes" xml:space="preserve">
          <source>Get Cookies</source>
          <target state="translated">クッキーの取得</target>
        </trans-unit>
        <trans-unit id="0c86560c49c46a484a21b0223713a7665b708f1c" translate="yes" xml:space="preserve">
          <source>Get Selector</source>
          <target state="translated">セレクタを取得</target>
        </trans-unit>
        <trans-unit id="b538f16cde1fda1eece5d2bedbebb8c4337c9821" translate="yes" xml:space="preserve">
          <source>Get a browser cookie by its name.</source>
          <target state="translated">ブラウザのクッキーを名前で取得します。</target>
        </trans-unit>
        <trans-unit id="614bbfebbe46a05ffc8be0b2c0eebb60088ff60b" translate="yes" xml:space="preserve">
          <source>Get a property&amp;rsquo;s value on the previously yielded subject.</source>
          <target state="translated">以前に生成されたサブジェクトのプロパティの値を取得します。</target>
        </trans-unit>
        <trans-unit id="8ba066fae08fe663607191f346ff763688eef943" translate="yes" xml:space="preserve">
          <source>Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.</source>
          <target state="translated">マッチした DOM 要素のセットの中で、提供された要素までの、各 DOM 要素のすべての祖先を取得します(ただし、提供された要素は含まれません)。</target>
        </trans-unit>
        <trans-unit id="d878e7fb89bc9f6dd7e6ac1552c565e8284a506c" translate="yes" xml:space="preserve">
          <source>Get all configuration options</source>
          <target state="translated">すべての設定オプションを取得</target>
        </trans-unit>
        <trans-unit id="726e1658d3160337c34366924865ffe6f9bdd1ee" translate="yes" xml:space="preserve">
          <source>Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.</source>
          <target state="translated">提供された要素までのマッチした DOM 要素のセットの中で、各 DOM 要素の後続のすべての兄弟を取得します(ただし、提供された要素は含まれません)。</target>
        </trans-unit>
        <trans-unit id="d7f7fa2095055d8090ee656b4df2a277638eabf8" translate="yes" xml:space="preserve">
          <source>Get all following siblings of each DOM element in a set of matched DOM elements.</source>
          <target state="translated">一致した DOM 要素の集合の中で、各 DOM 要素の以下のすべての兄弟を取得します。</target>
        </trans-unit>
        <trans-unit id="7bc2f9f01d4a3efa98a3539f5277214a45b34918" translate="yes" xml:space="preserve">
          <source>Get all of the browser cookies.</source>
          <target state="translated">ブラウザのクッキーをすべて取得します。</target>
        </trans-unit>
        <trans-unit id="1f3bf71544170547306f07fd6d9e4be1b80dbce9" translate="yes" xml:space="preserve">
          <source>Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.</source>
          <target state="translated">マッチした DOM 要素のセットの中で、提供された要素までの、各 DOM 要素の前の兄弟をすべて取得します(ただし、提供された要素は含まれていません)。</target>
        </trans-unit>
        <trans-unit id="7cbe9d7ff598a4b6dddb3f861a89466b797b5779" translate="yes" xml:space="preserve">
          <source>Get all previous siblings of each DOM element in a set of matched DOM elements.</source>
          <target state="translated">一致した DOM 要素の集合の中で、各 DOM 要素の前の兄弟をすべて取得します。</target>
        </trans-unit>
        <trans-unit id="6a1a9dba40d9c4360f21cbb955e0c97b34028a0c" translate="yes" xml:space="preserve">
          <source>Get console logs for commands</source>
          <target state="translated">コマンドのコンソールログを取得</target>
        </trans-unit>
        <trans-unit id="8ac45b30b6141f1393ac1fd70bc7d33985a73084" translate="yes" xml:space="preserve">
          <source>Get cookies after logging in</source>
          <target state="translated">ログイン後にクッキーを取得する</target>
        </trans-unit>
        <trans-unit id="c50f854379ad2f26c21e8143fa041867e87029df" translate="yes" xml:space="preserve">
          <source>Get document and do some work</source>
          <target state="translated">書類を入手して仕事をする</target>
        </trans-unit>
        <trans-unit id="ee42a9f61ba8ac813c6e1d42283792046defabaa" translate="yes" xml:space="preserve">
          <source>Get function as property</source>
          <target state="translated">関数をプロパティとして取得する</target>
        </trans-unit>
        <trans-unit id="8c624bfeaed069155b4110f7ae0ad280daa90b1e" translate="yes" xml:space="preserve">
          <source>Get in &lt;code&gt;.within()&lt;/code&gt;</source>
          <target state="translated">で取得 &lt;code&gt;.within()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38be7ea66340f5486705b3a39a0da2c3926d86e1" translate="yes" xml:space="preserve">
          <source>Get inputs within a form and submit the form</source>
          <target state="translated">フォーム内の入力を取得し、フォームを送信する</target>
        </trans-unit>
        <trans-unit id="bd9422f2aa9f16ac3a1a32184cd458092472011e" translate="yes" xml:space="preserve">
          <source>Get li&amp;rsquo;s within parent</source>
          <target state="translated">親の中で李を取得する</target>
        </trans-unit>
        <trans-unit id="cbcc8c52c4c250f457df77714f71518914bc7253" translate="yes" xml:space="preserve">
          <source>Get one or more DOM elements by selector or &lt;a href=&quot;../../guides/core-concepts/variables-and-aliases&quot;&gt;alias&lt;/a&gt;.</source>
          <target state="translated">セレクターまたは&lt;a href=&quot;../../guides/core-concepts/variables-and-aliases&quot;&gt;エイリアス&lt;/a&gt;によって1つ以上のDOM要素を取得します。</target>
        </trans-unit>
        <trans-unit id="3e1004041e1a059c6fb1665ffe39fbecfd81bb63" translate="yes" xml:space="preserve">
          <source>Get properties from the &lt;code&gt;onAfterScreenshot&lt;/code&gt; callback</source>
          <target state="translated">&lt;code&gt;onAfterScreenshot&lt;/code&gt; コールバックからプロパティを取得する</target>
        </trans-unit>
        <trans-unit id="5de4a2efd44753d384344f594f0e02076ab06b29" translate="yes" xml:space="preserve">
          <source>Get property</source>
          <target state="translated">プロパティを取得する</target>
        </trans-unit>
        <trans-unit id="5a778da1ceb2bf7380d32bfb39c3fa08f6b7ebac" translate="yes" xml:space="preserve">
          <source>Get root element</source>
          <target state="translated">ルート要素の取得</target>
        </trans-unit>
        <trans-unit id="4424013cfe8722d25920e58f61b21884fab59ce0" translate="yes" xml:space="preserve">
          <source>Get screenshot info from the &lt;code&gt;onAfterScreenshot&lt;/code&gt; callback</source>
          <target state="translated">&lt;code&gt;onAfterScreenshot&lt;/code&gt; コールバックからスクリーンショット情報を取得する</target>
        </trans-unit>
        <trans-unit id="3f259d00f4bc27a0f4a3394ffade7e812bbfbf47" translate="yes" xml:space="preserve">
          <source>Get sibling DOM elements.</source>
          <target state="translated">兄弟 DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="a5c8bf1a13b7c98b0440c65e229418e8af1765c7" translate="yes" xml:space="preserve">
          <source>Get siblings of element with class &lt;code&gt;active&lt;/code&gt;</source>
          <target state="translated">クラスが &lt;code&gt;active&lt;/code&gt; 要素の兄弟を取得する</target>
        </trans-unit>
        <trans-unit id="90e40d504340834d9e79a4d800e45283591c5927" translate="yes" xml:space="preserve">
          <source>Get started</source>
          <target state="translated">始める</target>
        </trans-unit>
        <trans-unit id="abadd86dc407b8b817bae6800708bbc15c13c777" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;document.title&lt;/code&gt; property of the page that is currently active.</source>
          <target state="translated">現在アクティブなページの &lt;code&gt;document.title&lt;/code&gt; プロパティを取得します。</target>
        </trans-unit>
        <trans-unit id="5f19f247800adb8bb9059ef2de19873ef2a100c7" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;length&lt;/code&gt; property of a DOM element</source>
          <target state="translated">DOM要素の &lt;code&gt;length&lt;/code&gt; プロパティを取得する</target>
        </trans-unit>
        <trans-unit id="cb63d757633ac03e332d40152b359ce165349574" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;user&lt;/code&gt; object of the response&amp;rsquo;s &lt;code&gt;body&lt;/code&gt;</source>
          <target state="translated">応答の &lt;code&gt;body&lt;/code&gt; &lt;code&gt;user&lt;/code&gt; オブジェクトを取得する</target>
        </trans-unit>
        <trans-unit id="da81c8910d0ff34f3f2b6bdfafe18d4b531eb4a6" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;window.document&lt;/code&gt; of the page that is currently active.</source>
          <target state="translated">現在アクティブなページの &lt;code&gt;window.document&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="60d973f4293d5ba6c6d9669aadf27ab51323a3ff" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;window&lt;/code&gt; object of the page that is currently active.</source>
          <target state="translated">現在アクティブなページの &lt;code&gt;window&lt;/code&gt; オブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="72157e5566acdc33186045e8ef45538711fdef56" translate="yes" xml:space="preserve">
          <source>Get the DOM element containing the content.</source>
          <target state="translated">コンテンツを含む DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="00ff576aeb22bef88d930d53413e5e1b6376ee0f" translate="yes" xml:space="preserve">
          <source>Get the DOM element containing the text. DOM elements can contain &lt;em&gt;more&lt;/em&gt; than the desired text and still match. Additionally, Cypress &lt;a href=&quot;#Notes&quot;&gt;prefers some DOM elements&lt;/a&gt; over the deepest element found.</source>
          <target state="translated">テキストを含むDOM要素を取得します。DOM要素を含むことができ&lt;em&gt;、より&lt;/em&gt;目的のテキストよりも、まだ一致しています。さらに、サイプレス&lt;a href=&quot;#Notes&quot;&gt;は&lt;/a&gt;、見つかった最も深い要素よりもいくつかのDOM要素を優先します。</target>
        </trans-unit>
        <trans-unit id="54436390ff23b5e34750cfbad8326fd2d5bd7fbe" translate="yes" xml:space="preserve">
          <source>Get the DOM element that is currently focused.</source>
          <target state="translated">現在フォーカスされている DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="9c2e34ba559a12ba698f82daaa9b18469e9b89ce" translate="yes" xml:space="preserve">
          <source>Get the DOM elements that match a specific selector.</source>
          <target state="translated">特定のセレクタにマッチする DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="5bbecf5096769375f60c7309fa55c045c2ee7d96" translate="yes" xml:space="preserve">
          <source>Get the URL</source>
          <target state="translated">URLの取得</target>
        </trans-unit>
        <trans-unit id="9f04b463709b531f2d2db4718e9e438c0459b50b" translate="yes" xml:space="preserve">
          <source>Get the aliased &amp;lsquo;submitBtn&amp;rsquo; element</source>
          <target state="translated">エイリアスされた「submitBtn」要素を取得します</target>
        </trans-unit>
        <trans-unit id="7fc72a751216ef55861780a2f6f13fad91179f9f" translate="yes" xml:space="preserve">
          <source>Get the aliased &amp;lsquo;todos&amp;rsquo; elements</source>
          <target state="translated">エイリアスされた「todos」要素を取得する</target>
        </trans-unit>
        <trans-unit id="3cee94b3642e8bd68b14a141a897a02d85ae366d" translate="yes" xml:space="preserve">
          <source>Get the aliased &amp;lsquo;users&amp;rsquo; fixture</source>
          <target state="translated">エイリアスされた「ユーザー」フィクスチャを取得する</target>
        </trans-unit>
        <trans-unit id="4f02da3142df47a50ddc16d28a6d9a538e83b4c9" translate="yes" xml:space="preserve">
          <source>Get the children of each DOM element within a set of DOM elements.</source>
          <target state="translated">DOM 要素の集合内の各 DOM 要素の子を取得します。</target>
        </trans-unit>
        <trans-unit id="da562ea984a5a6ff2ed1f866d781219feedbfc48" translate="yes" xml:space="preserve">
          <source>Get the children of the &lt;code&gt;.secondary-nav&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.secondary-nav&lt;/code&gt; の子を取得する</target>
        </trans-unit>
        <trans-unit id="6c7884f05dabc7ceaed23a05226a9da2830cd335" translate="yes" xml:space="preserve">
          <source>Get the children with class &lt;code&gt;active&lt;/code&gt;</source>
          <target state="translated">クラスの子供たちを &lt;code&gt;active&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ad9349edc6a2083cef2ef42849f9d125e7f9206" translate="yes" xml:space="preserve">
          <source>Get the current URL hash of the page that is currently active.</source>
          <target state="translated">現在アクティブなページの現在のURLハッシュを取得します。</target>
        </trans-unit>
        <trans-unit id="905fa0469d43bcf9e018d417724b3101b0d60f46" translate="yes" xml:space="preserve">
          <source>Get the current URL of the page that is currently active.</source>
          <target state="translated">現在アクティブなページの現在のURLを取得します。</target>
        </trans-unit>
        <trans-unit id="9d2e7923b125ca989315b8b6abd855b8c8cda526" translate="yes" xml:space="preserve">
          <source>Get the descendent DOM elements of a specific selector.</source>
          <target state="translated">特定のセレクタの子孫の DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="e138d85fdf46192ed868043f0071b2f7413a8b6e" translate="yes" xml:space="preserve">
          <source>Get the element that is focused</source>
          <target state="translated">フォーカスされた要素を取得する</target>
        </trans-unit>
        <trans-unit id="eab5fe184d28c7c2ecf68762c00edbbc093d0afe" translate="yes" xml:space="preserve">
          <source>Get the entire stack trace of failed tests.</source>
          <target state="translated">失敗したテストのスタックトレース全体を取得します。</target>
        </trans-unit>
        <trans-unit id="6bc616aea4241cff030e7c37715a8854632d06fe" translate="yes" xml:space="preserve">
          <source>Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).</source>
          <target state="translated">セレクタにマッチする最初の DOM 要素を取得します (それがそれ自身であろうとその祖先の一つであろうと)。</target>
        </trans-unit>
        <trans-unit id="7e385d52b355d218cf98e4732ef5b18c57dfb75d" translate="yes" xml:space="preserve">
          <source>Get the first DOM element within a set of DOM elements.</source>
          <target state="translated">DOM 要素の集合内の最初の DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="d5bd99c0258c4b20b204b1c45f46519ce91dd446" translate="yes" xml:space="preserve">
          <source>Get the first list item in a list</source>
          <target state="translated">リストの最初の項目を取得する</target>
        </trans-unit>
        <trans-unit id="f34949909727615718ccda785bec545aabb8fc5b" translate="yes" xml:space="preserve">
          <source>Get the form element and search in its descendants for the content &amp;ldquo;submit the form!&amp;rdquo;</source>
          <target state="translated">フォーム要素を取得し、その子孫で「フォームを送信する！」というコンテンツを検索します。</target>
        </trans-unit>
        <trans-unit id="7392349d6f790052fca9b4d3b42d0f2f1fb25e29" translate="yes" xml:space="preserve">
          <source>Get the global &lt;code&gt;window.location&lt;/code&gt; object of the page that is currently active.</source>
          <target state="translated">現在アクティブなページのグローバル &lt;code&gt;window.location&lt;/code&gt; オブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="efe40729566f375b25917940219aff3660d5d5be" translate="yes" xml:space="preserve">
          <source>Get the immediately following sibling of each DOM element within a set of DOM elements.</source>
          <target state="translated">DOM 要素の集合内の各 DOM 要素の直後の兄弟を取得します。</target>
        </trans-unit>
        <trans-unit id="2b1126846a91c4bd5ac0522f41161a995c4ea1ed" translate="yes" xml:space="preserve">
          <source>Get the immediately preceding sibling of each element in a set of the elements.</source>
          <target state="translated">要素の集合内の各要素の直前の兄弟を取得します。</target>
        </trans-unit>
        <trans-unit id="29c3bb9f9b6534cc0e7895265cb8352947478fb2" translate="yes" xml:space="preserve">
          <source>Get the input element</source>
          <target state="translated">入力要素を取得する</target>
        </trans-unit>
        <trans-unit id="0c145f6e975793aa3782c7f617231769287b7032" translate="yes" xml:space="preserve">
          <source>Get the input with the &lt;code&gt;.actions-email&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;.actions-email&lt;/code&gt; クラスで入力を取得する</target>
        </trans-unit>
        <trans-unit id="7701d53ab8276424e3f88d88710d714aa135808f" translate="yes" xml:space="preserve">
          <source>Get the last DOM element within a set of DOM elements.</source>
          <target state="translated">DOM 要素の集合内の最後の DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="0a13d53ee9c92eb6cc5de912f365adc402854faf" translate="yes" xml:space="preserve">
          <source>Get the last list item in a list</source>
          <target state="translated">リスト内の最後のリスト項目を取得する</target>
        </trans-unit>
        <trans-unit id="08a472ad16e7891f22a0739cedc8254734df3848" translate="yes" xml:space="preserve">
          <source>Get the parent DOM element of a set of DOM elements.</source>
          <target state="translated">DOM 要素の集合の親 DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="ee6f72f7615ce64ad8685303ddcaa1d2df52fa1b" translate="yes" xml:space="preserve">
          <source>Get the parent DOM elements of a set of DOM elements.</source>
          <target state="translated">DOM 要素の集合の親 DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="c5949833faa9184e9a9fc0d7e6b997563a690cea" translate="yes" xml:space="preserve">
          <source>Get the parent of the active &lt;code&gt;li&lt;/code&gt;</source>
          <target state="translated">アクティブな &lt;code&gt;li&lt;/code&gt; の親を取得します</target>
        </trans-unit>
        <trans-unit id="06e6a8cf49fd5e73acb5c7047924312de6542f1e" translate="yes" xml:space="preserve">
          <source>Get the parent with class &lt;code&gt;sub-nav&lt;/code&gt; of all &lt;code&gt;li&lt;/code&gt; elements</source>
          <target state="translated">すべての &lt;code&gt;li&lt;/code&gt; 要素の &lt;code&gt;sub-nav&lt;/code&gt; クラスを持つ親を取得する</target>
        </trans-unit>
        <trans-unit id="2eaea41a35788b4aefba0a72473f89ab1734ecc3" translate="yes" xml:space="preserve">
          <source>Get the parents of the active li</source>
          <target state="translated">活躍中のリリの親をゲット</target>
        </trans-unit>
        <trans-unit id="4e0d45fd2feaf7dd645a68f04d27cf8f69111d10" translate="yes" xml:space="preserve">
          <source>Get the parents with class &lt;code&gt;main-nav&lt;/code&gt; of the active li</source>
          <target state="translated">アクティブなliの &lt;code&gt;main-nav&lt;/code&gt; クラスで親を取得します</target>
        </trans-unit>
        <trans-unit id="7d3b39240396ab9d1dee1bcb8084eb07e95f7413" translate="yes" xml:space="preserve">
          <source>Get the root DOM element.</source>
          <target state="translated">ルートの DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="b9008603caf292e2e0363feaaea7415ec8278e95" translate="yes" xml:space="preserve">
          <source>Get the root element</source>
          <target state="translated">ルート要素を取得する</target>
        </trans-unit>
        <trans-unit id="5d7ca8a40ecaeec2c9e9caed5dad6b68fd0bd9a3" translate="yes" xml:space="preserve">
          <source>Get the root element in a &lt;a href=&quot;within&quot;&gt;&lt;code&gt;.within()&lt;/code&gt;&lt;/a&gt; callback function</source>
          <target state="translated">&lt;a href=&quot;within&quot;&gt; &lt;code&gt;.within()&lt;/code&gt; &lt;/a&gt;コールバック関数でルート要素を取得する</target>
        </trans-unit>
        <trans-unit id="e69e38dd0064ed46a8c0e015e5e3d1bbb250dd54" translate="yes" xml:space="preserve">
          <source>Get the siblings of each &lt;code&gt;li&lt;/code&gt;</source>
          <target state="translated">各 &lt;code&gt;li&lt;/code&gt; の兄弟を取得</target>
        </trans-unit>
        <trans-unit id="7e035e3b37ff46d424f4ec844dfac619669f8201" translate="yes" xml:space="preserve">
          <source>Get translation data from a YAML file</source>
          <target state="translated">YAMLファイルから翻訳データを取得する</target>
        </trans-unit>
        <trans-unit id="5e90edca4ba776ac79604979eab00c32de2c3843" translate="yes" xml:space="preserve">
          <source>Gets the element &lt;code&gt;.mobile-nav&lt;/code&gt;</source>
          <target state="translated">要素 &lt;code&gt;.mobile-nav&lt;/code&gt; を取得します</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="5c9beb9cf6f4471dd715843a254eca97861e4948" translate="yes" xml:space="preserve">
          <source>Getting dataUrl string</source>
          <target state="translated">dataUrl 文字列の取得</target>
        </trans-unit>
        <trans-unit id="50cf7528f5dddc0bad9e28fd703617a5f39fd683" translate="yes" xml:space="preserve">
          <source>Getting this errors means you&amp;rsquo;ve tried to interact with a &amp;ldquo;dead&amp;rdquo; DOM element - meaning it&amp;rsquo;s been detached or completely removed from the DOM.</source>
          <target state="translated">このエラーが発生するということは、「死んだ」DOM要素を操作しようとしたことを意味します。つまり、DOMから切り離されているか、完全にDOMから削除されています。</target>
        </trans-unit>
        <trans-unit id="6cac413cc1ca2ecd3e244ccdb1d759c2bacc9ff1" translate="yes" xml:space="preserve">
          <source>Git information</source>
          <target state="translated">Git情報</target>
        </trans-unit>
        <trans-unit id="61d9589bd9eca9f4c1edaef9fdf77cb98d356341" translate="yes" xml:space="preserve">
          <source>GitHub Enterprise is currently not supported. Please &lt;a href=&quot;https://docs.cypress.io/cdn-cgi/l/email-protection#e58d8089898aa5869c9597809696cb8c8a&quot;&gt;contact us&lt;/a&gt; if you are interested in Enterprise integration.</source>
          <target state="translated">GitHub Enterpriseは現在サポートされていません。エンタープライズ統合に関心がある場合は、お&lt;a href=&quot;https://docs.cypress.io/cdn-cgi/l/email-protection#e58d8089898aa5869c9597809696cb8c8a&quot;&gt;問い合わせください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aff159ec522fafdfb4fb97dbfb61a5f564258281" translate="yes" xml:space="preserve">
          <source>GitHub Integration</source>
          <target state="translated">GitHub の統合</target>
        </trans-unit>
        <trans-unit id="2dcf2739aea3970bd24b0f5ba2dddd7b33a5a8d2" translate="yes" xml:space="preserve">
          <source>GitHub Integration is dependent on your CI environment reliably providing commit SHA data (typically via an environment variable). This is not a problem for most users, but if you are facing GitHub integration issues with your CI setup, please make sure the git information is being sent properly by following &lt;a href=&quot;../guides/continuous-integration#Git-information&quot;&gt;these guidelines&lt;/a&gt;. If you are still facing issues after this, please &lt;a href=&quot;https://docs.cypress.io/cdn-cgi/l/email-protection#b2dad7dededdf2d1cbc2c0d7c1c19cdbdd&quot;&gt;contact us&lt;/a&gt;.</source>
          <target state="translated">GitHub統合は、CI環境に依存しており、コミットSHAデータを確実に提供します（通常、環境変数を介して）。これはほとんどのユーザーにとって問題ではありませんが、CIセットアップでGitHub統合の問題が発生している場合は、次&lt;a href=&quot;../guides/continuous-integration#Git-information&quot;&gt;のガイドライン&lt;/a&gt;に従ってgit情報が適切に送信されていることを確認してください。それでも問題が解決しない場合は、までご&lt;a href=&quot;https://docs.cypress.io/cdn-cgi/l/email-protection#b2dad7dededdf2d1cbc2c0d7c1c19cdbdd&quot;&gt;連絡ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f18456fa25c55a5768acea0dbfb95c47ebafef57" translate="yes" xml:space="preserve">
          <source>GitHub integration</source>
          <target state="translated">GitHub の統合</target>
        </trans-unit>
        <trans-unit id="dc63b0e0240e56a49f15e4f20c7da68a0e50ae57" translate="yes" xml:space="preserve">
          <source>GitHub status checks are optional, and can be disabled within a project&amp;rsquo;s GitHub integration settings:</source>
          <target state="translated">GitHubステータスチェックはオプションであり、プロジェクトのGitHub統合設定内で無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="9a9b09d909186a1ea088b925aea4172596fea7db" translate="yes" xml:space="preserve">
          <source>GitLab</source>
          <target state="translated">GitLab</target>
        </trans-unit>
        <trans-unit id="f079a831cab27bcda7d81cd9b48296d0c3dd92ee" translate="yes" xml:space="preserve">
          <source>Gitlab</source>
          <target state="translated">Gitlab</target>
        </trans-unit>
        <trans-unit id="de9840e2e0ad5f0b4ed3f4f8f935d99a273fdaf3" translate="yes" xml:space="preserve">
          <source>Given a button that we want to interact with:</source>
          <target state="translated">対話したいボタンが与えられます。</target>
        </trans-unit>
        <trans-unit id="7d1b270b98ec03fdb9ae6f4853f43a1e81195b8e" translate="yes" xml:space="preserve">
          <source>Given a user visits &lt;code&gt;https://example.cypress.io&lt;/code&gt;</source>
          <target state="translated">ユーザーが &lt;code&gt;https://example.cypress.io&lt;/code&gt; にアクセスしたとします</target>
        </trans-unit>
        <trans-unit id="d29667835da90fa638612f425739d1585f3fd63c" translate="yes" xml:space="preserve">
          <source>Given the following URLs:</source>
          <target state="translated">以下のURLが与えられています。</target>
        </trans-unit>
        <trans-unit id="29303fff62321f55c7d6f1c2952ab69b3c10d5ec" translate="yes" xml:space="preserve">
          <source>Given the remote URL, &lt;code&gt;http://localhost:8000/index.html&lt;/code&gt;, all 3 of these assertions are the same.</source>
          <target state="translated">リモートURL &lt;code&gt;http://localhost:8000/index.html&lt;/code&gt; を考えると、これらの3つのアサーションはすべて同じです。</target>
        </trans-unit>
        <trans-unit id="c9ce81ebe79a34ad916e0f10c82336b6c0417c7a" translate="yes" xml:space="preserve">
          <source>Given the remote URL, &lt;code&gt;http://localhost:8000/index.html&lt;/code&gt;, these assertions are the same.</source>
          <target state="translated">リモートURL &lt;code&gt;http://localhost:8000/index.html&lt;/code&gt; が与えられた場合、これらのアサーションは同じです。</target>
        </trans-unit>
        <trans-unit id="5f1184f7df96c5928092ad9c6b550699bf887826" translate="yes" xml:space="preserve">
          <source>Global</source>
          <target state="translated">Global</target>
        </trans-unit>
        <trans-unit id="9b2c45900d277c38ce7727bdb988069b357640ce" translate="yes" xml:space="preserve">
          <source>Global Shortcuts</source>
          <target state="translated">グローバルショートカット</target>
        </trans-unit>
        <trans-unit id="29153039833ad93fe8da4463c8dfd9ea642a76b6" translate="yes" xml:space="preserve">
          <source>Go back in browser&amp;rsquo;s history</source>
          <target state="translated">ブラウザの履歴に戻る</target>
        </trans-unit>
        <trans-unit id="d4d04da928ea7d145395f5a605ed4ac82f31ff8c" translate="yes" xml:space="preserve">
          <source>Go forward in browser&amp;rsquo;s history</source>
          <target state="translated">ブラウザの履歴を進めます</target>
        </trans-unit>
        <trans-unit id="5e0cd50da0482af647bdab8539432be67bc288d9" translate="yes" xml:space="preserve">
          <source>Go the &lt;a href=&quot;https://on.cypress.io/dashboard/organizations&quot;&gt;Organizations page&lt;/a&gt; to select the organization you want to associate with an OSS plan. If you have no organizations, you can create one by clicking the &lt;strong&gt;+ Add Organization&lt;/strong&gt; button.</source>
          <target state="translated">[ &lt;a href=&quot;https://on.cypress.io/dashboard/organizations&quot;&gt;組織]ページ&lt;/a&gt;に移動して、OSSプランに関連付ける組織を選択します。組織がない場合は、[ &lt;strong&gt;+組織&lt;/strong&gt;を&lt;strong&gt;追加&lt;/strong&gt; ]ボタンをクリックして組織を作成できます。</target>
        </trans-unit>
        <trans-unit id="0422a88129b73584266fdba6436ecad310c2c2b5" translate="yes" xml:space="preserve">
          <source>Go the &lt;a href=&quot;https://on.cypress.io/dashboard/organizations&quot;&gt;Organizations page&lt;/a&gt; to select the organization you want to invite a user to.</source>
          <target state="translated">[ &lt;a href=&quot;https://on.cypress.io/dashboard/organizations&quot;&gt;組織]ページ&lt;/a&gt;に移動して、ユーザーを招待する組織を選択します。</target>
        </trans-unit>
        <trans-unit id="50fe2f9896b5cfa3174a0747e961599f55e9a6d1" translate="yes" xml:space="preserve">
          <source>Go to &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;View App Data&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;View App Data&lt;/code&gt; 移動します</target>
        </trans-unit>
        <trans-unit id="ef97070b66184694477c4c1d1f7e3775a6a88973" translate="yes" xml:space="preserve">
          <source>Go to the &lt;strong&gt;Billing &amp;amp; Usage&lt;/strong&gt; page, and then click on the &lt;strong&gt;Apply for an open source plan&lt;/strong&gt; link at the bottom of the page.</source>
          <target state="translated">[ &lt;strong&gt;請求と使用状況]&lt;/strong&gt;ページに移動し、ページの下部にある[ &lt;strong&gt;オープンソースプランの申請&lt;/strong&gt; ] リンクをクリックします。</target>
        </trans-unit>
        <trans-unit id="d90837c2ffa1e3a74c04ba28a54937ca132e194b" translate="yes" xml:space="preserve">
          <source>Go to the Dashboard &lt;a href=&quot;https://dashboard.cypress.io/#/organizations&quot;&gt;Organizations page&lt;/a&gt;.</source>
          <target state="translated">[ダッシュボード&lt;a href=&quot;https://dashboard.cypress.io/#/organizations&quot;&gt;組織]ページに&lt;/a&gt;移動します。</target>
        </trans-unit>
        <trans-unit id="b0c5f3a254f4ca672d762eb0b946cf4ec41e8939" translate="yes" xml:space="preserve">
          <source>Go to the project&amp;rsquo;s &lt;strong&gt;Settings&lt;/strong&gt; page.</source>
          <target state="translated">プロジェクトの&lt;strong&gt;[設定]&lt;/strong&gt;ページに移動します。</target>
        </trans-unit>
        <trans-unit id="e6c228a4c86735512780e50842464125783195e4" translate="yes" xml:space="preserve">
          <source>Go to the project&amp;rsquo;s settings page.</source>
          <target state="translated">プロジェクトの設定ページに移動します。</target>
        </trans-unit>
        <trans-unit id="0c7d714e91cb5dec0b697e745aac61ae49ffc7fc" translate="yes" xml:space="preserve">
          <source>Go to your organization&amp;rsquo;s projects page.</source>
          <target state="translated">組織のプロジェクトページに移動します。</target>
        </trans-unit>
        <trans-unit id="db905633801ba81831ca6ef490064a11a12cbc63" translate="yes" xml:space="preserve">
          <source>Google or SSO (if configured) login is now supported in the Test Runner. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3519&quot;&gt;#3519&lt;/a&gt;.</source>
          <target state="translated">GoogleまたはSSO（構成されている場合）ログインがテストランナーでサポートされるようになりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3519&quot;&gt;＃3519&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9016bddfd305a0134827b3dfd7076f8f1d0ee667" translate="yes" xml:space="preserve">
          <source>Grab only the &lt;code&gt;pathname&lt;/code&gt; and add an assertion.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; のみを取得して、アサーションを追加します。</target>
        </trans-unit>
        <trans-unit id="606c2c5478a69e14a2c28edf015d90cb8b64f0bd" translate="yes" xml:space="preserve">
          <source>Grab the URL and&amp;hellip;</source>
          <target state="translated">URLを取得して&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="cb2a7509d3d8ad91fde462b610d43ce1604d70ca" translate="yes" xml:space="preserve">
          <source>Grab the URL.</source>
          <target state="translated">URLを掴む。</target>
        </trans-unit>
        <trans-unit id="b8141f065645b4d27c77c60bcbb662968d8aab1f" translate="yes" xml:space="preserve">
          <source>Grab the browser URL, ensure it includes &lt;code&gt;/posts/my-first-post&lt;/code&gt;.</source>
          <target state="translated">ブラウザのURLを取得し、 &lt;code&gt;/posts/my-first-post&lt;/code&gt; が含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="754846ed949aeb4a40716255893a342d2ab41d08" translate="yes" xml:space="preserve">
          <source>Grammar: &amp;lsquo;Login -&amp;gt; Log in&amp;rsquo;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/146&quot;&gt;#146&lt;/a&gt;.</source>
          <target state="translated">文法：「ログイン-&amp;gt;ログイン」。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/146&quot;&gt;＃146を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="22596aa55c61ecc9fa4d622e8d270ad994166133" translate="yes" xml:space="preserve">
          <source>Great for the &lt;em&gt;critical paths&lt;/em&gt; of your application</source>
          <target state="translated">以下のための偉大な&lt;em&gt;クリティカルパス&lt;/em&gt;、アプリケーションの</target>
        </trans-unit>
        <trans-unit id="1dea506717711a3a808d4dd849a7387ef002c478" translate="yes" xml:space="preserve">
          <source>Great for traditional server-side HTML rendering</source>
          <target state="translated">従来のサーバーサイドの HTML レンダリングに最適</target>
        </trans-unit>
        <trans-unit id="f200b907fe9cbc43dee52eef2e65b52b35ab61ee" translate="yes" xml:space="preserve">
          <source>Great for values that need to be checked into source control and remain the same on all machines.</source>
          <target state="translated">ソース・コントロールにチェックされ、すべてのマシンで同じ値を維持する必要がある値に最適です。</target>
        </trans-unit>
        <trans-unit id="b7f5c9d43c59a0710631cc2af91b18239e45dd00" translate="yes" xml:space="preserve">
          <source>Great! Everything should still be green.</source>
          <target state="translated">いいね!全てがまだ緑のままのはずなのに。</target>
        </trans-unit>
        <trans-unit id="8f99cc4f5dade89618cb8cd599b9d39c2074f03a" translate="yes" xml:space="preserve">
          <source>Group name has already been used for this run</source>
          <target state="translated">グループ名はすでにこの実行に使用されています</target>
        </trans-unit>
        <trans-unit id="37af3ea62a389951a11e57ad9b9fd4d8a8f3d47b" translate="yes" xml:space="preserve">
          <source>Group recorded tests together under a single run</source>
          <target state="translated">1回の実行で記録されたテストをグループ化する</target>
        </trans-unit>
        <trans-unit id="ea0e785ee6d24de70f0616d8f0b45dc98bd8b654" translate="yes" xml:space="preserve">
          <source>Grouping by browser</source>
          <target state="translated">ブラウザによるグループ化</target>
        </trans-unit>
        <trans-unit id="917da4b40c1fe1d2de4a4badba93ba4952ec5161" translate="yes" xml:space="preserve">
          <source>Grouping by spec context</source>
          <target state="translated">スペックコンテキストによるグループ化</target>
        </trans-unit>
        <trans-unit id="e969a6e3de6de600fa464cfb10c71fcede42a6db" translate="yes" xml:space="preserve">
          <source>Grouping test runs</source>
          <target state="translated">グループ化テストの実行</target>
        </trans-unit>
        <trans-unit id="7e7d209f0faef0e503b1528f689b098d74c74aba" translate="yes" xml:space="preserve">
          <source>Grouping to label parallelization</source>
          <target state="translated">並列化のラベルを付けるためのグループ化</target>
        </trans-unit>
        <trans-unit id="49f029bc01a7a39f9897aca0208942c0213feec8" translate="yes" xml:space="preserve">
          <source>Guaranteed to work in production</source>
          <target state="translated">本番での動作を保証</target>
        </trans-unit>
        <trans-unit id="7c7b20ed012ae265689f678882bfc339be15feed" translate="yes" xml:space="preserve">
          <source>Guide: Chains of Commands</source>
          <target state="translated">ガイド。コマンドの鎖</target>
        </trans-unit>
        <trans-unit id="90755a57130e1338eaaa1d890a9f746fc8101bf6" translate="yes" xml:space="preserve">
          <source>Guide: Introduction to Cypress</source>
          <target state="translated">ガイド。サイプレスの紹介</target>
        </trans-unit>
        <trans-unit id="ac2601113d60be5641759535a0cbe1066da08e7a" translate="yes" xml:space="preserve">
          <source>Guide: Network Requests</source>
          <target state="translated">ご案内 ネットワークリクエスト</target>
        </trans-unit>
        <trans-unit id="0a3e35f4c515206f708c2e4ee7169a8fef85c24b" translate="yes" xml:space="preserve">
          <source>Guide: Stubs, Spies and Clocks</source>
          <target state="translated">ガイド スタブ、スパイ、時計</target>
        </trans-unit>
        <trans-unit id="b03b1f909af009439dbbe4f95b24b552b8a24508" translate="yes" xml:space="preserve">
          <source>Guide: Using Closures to compare values</source>
          <target state="translated">ガイド。値を比較するためのクロージャの使用</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">ガイド</target>
        </trans-unit>
        <trans-unit id="eb5225848c1dc213f7e015ed498301ce638e7534" translate="yes" xml:space="preserve">
          <source>Guides: Aliases</source>
          <target state="translated">ガイド エイリアス</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="8e47c716e7195739d3b802b578903db7a84e2281" translate="yes" xml:space="preserve">
          <source>HTML fixtures will be prettified and saved back over the original.</source>
          <target state="translated">HTMLのフィクスチャはプリティ化され、元のものに戻って保存されます。</target>
        </trans-unit>
        <trans-unit id="5d7f586a796b0739316cb35088d091ccdea24ffc" translate="yes" xml:space="preserve">
          <source>HTML form submissions using form option</source>
          <target state="translated">フォームオプションを使用したHTMLフォーム送信</target>
        </trans-unit>
        <trans-unit id="19d29c8d4abf2f9577d1b135f72cb313e463241e" translate="yes" xml:space="preserve">
          <source>Hacking on Cypress</source>
          <target state="translated">サイプレスのハッキング</target>
        </trans-unit>
        <trans-unit id="b409ffb8a9b2f5025b32b98593bb74bdec8e970f" translate="yes" xml:space="preserve">
          <source>Had the &lt;strong&gt;next page&lt;/strong&gt; not finished its loading phase, Cypress would have ended the test and presented an error.</source>
          <target state="translated">していた&lt;strong&gt;次のページには、&lt;/strong&gt;そのロード・フェーズを終了していない、サイプレスは、テストを終了し、エラーを提示しているだろう。</target>
        </trans-unit>
        <trans-unit id="9e72d2f8e033b2bc19d2152ced751c57011c59d8" translate="yes" xml:space="preserve">
          <source>Had this request come back with a non &lt;code&gt;2xx&lt;/code&gt; status code such as &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt;, or if there was a JavaScript error in the application&amp;rsquo;s code, the test would have failed.</source>
          <target state="translated">このリクエストが &lt;code&gt;404&lt;/code&gt; や &lt;code&gt;500&lt;/code&gt; などの &lt;code&gt;2xx&lt;/code&gt; 以外のステータスコードで返された場合、またはアプリケーションのコードにJavaScriptエラーがあった場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="bdac163073067a04614b1dcd8e54852f9518d989" translate="yes" xml:space="preserve">
          <source>Handle &lt;code&gt;javascripts&lt;/code&gt; and preprocess them as we do regular specs. Fixes: &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/15&quot;&gt;#15&lt;/a&gt;.</source>
          <target state="translated">ハンドル &lt;code&gt;javascripts&lt;/code&gt; と私たちは定期的なスペックがそうであるようにそれらを前処理します。修正：&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/15&quot;&gt;＃15&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="188b7a520a7805d0985a255f70328bf200fa9b99" translate="yes" xml:space="preserve">
          <source>Handle clearing cookies better when they are created on a path other than &lt;code&gt;/&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/104&quot;&gt;#104&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 以外のパスに作成されたCookieのクリア処理を改善します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/104&quot;&gt;＃104を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="1f7d00f3a4411061aa502256c35717937897eb59" translate="yes" xml:space="preserve">
          <source>Handle errors gracefully when Electron window has been closed before paint events happen. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/705&quot;&gt;#705&lt;/a&gt;.</source>
          <target state="translated">ペイントイベントが発生する前にElectronウィンドウが閉じられたときに、エラーを適切に処理します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/705&quot;&gt;＃705を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="faae97f3e6bab5b1ec96249ffd6499b2f4a81a69" translate="yes" xml:space="preserve">
          <source>Handle relative path segments which walk up past the remote host &lt;code&gt;../../assets/app.css&lt;/code&gt;.</source>
          <target state="translated">リモートホスト &lt;code&gt;../../assets/app.css&lt;/code&gt; を通過する相対パスセグメントを処理します。</target>
        </trans-unit>
        <trans-unit id="707f84ef4af310b25865654b98f5ddaeba05cb8e" translate="yes" xml:space="preserve">
          <source>Hardcoded versus using the configuration object</source>
          <target state="translated">ハードコード化と設定オブジェクトの使用</target>
        </trans-unit>
        <trans-unit id="e8496604be16d3a97f0c5f4ededacbcf975112e5" translate="yes" xml:space="preserve">
          <source>Harder to test edge cases</source>
          <target state="translated">エッジケースのテストが難しい</target>
        </trans-unit>
        <trans-unit id="314e78d2089598a32c2bc337ea0d65caa5b42212" translate="yes" xml:space="preserve">
          <source>Having Cypress serve your files is useful in simple projects and example apps, but isn&amp;rsquo;t recommended for real apps. It is always better to run your own server and provide the url to Cypress.</source>
          <target state="translated">サイプレスにファイルを提供させることは、単純なプロジェクトやサンプルアプリでは役立ちますが、実際のアプリでは推奨されません。独自のサーバーを実行し、サイプレスにURLを提供することは常に優れています。</target>
        </trans-unit>
        <trans-unit id="f8fda48fd9a8d610b8e343195c17c7d81420c92b" translate="yes" xml:space="preserve">
          <source>Having a &lt;code&gt;baseUrl&lt;/code&gt; set gives you the added bonus of seeing an error if your server is not running during &lt;code&gt;cypress open&lt;/code&gt; at the specified &lt;code&gt;baseUrl&lt;/code&gt;.</source>
          <target state="translated">持つ &lt;code&gt;baseUrl&lt;/code&gt; にのセットは、あなたのサーバが中に実行されていない場合は、エラーを見ての追加ボーナス与え &lt;code&gt;cypress open&lt;/code&gt; 指定で &lt;code&gt;baseUrl&lt;/code&gt; にします。</target>
        </trans-unit>
        <trans-unit id="25521616f15e3679103b7d481184a8e78b0a89d4" translate="yes" xml:space="preserve">
          <source>Having custom commands repeat the same UI actions over and over again is slow, and unnecessary. Try to take as many shortcuts as possible.</source>
          <target state="translated">カスタムコマンドが何度も何度も同じUIアクションを繰り返すのは、時間がかかり、不必要です。できるだけ多くのショートカットを取るようにしてください。</target>
        </trans-unit>
        <trans-unit id="dc0ba226241679963d5991ee3e62354ceaed28a9" translate="yes" xml:space="preserve">
          <source>Having issues launching installed browsers? Read more about debugging browser launching</source>
          <target state="translated">インストールされているブラウザの起動に問題がありますか?ブラウザ起動のデバッグについての詳細はこちら</target>
        </trans-unit>
        <trans-unit id="055729b7e427eb94b8ee19ddc7e72e35d840070b" translate="yes" xml:space="preserve">
          <source>Having tests rely on the state of previous tests</source>
          <target state="translated">過去のテストの状態に頼ったテストをさせる</target>
        </trans-unit>
        <trans-unit id="e8ffc4a6bcc9a7209b2d269839aeaa55eeffa533" translate="yes" xml:space="preserve">
          <source>Having trouble launching a browser? Check out the debugging guide</source>
          <target state="translated">ブラウザの起動に問題がありますか?デバッグガイドをチェック</target>
        </trans-unit>
        <trans-unit id="fa3c3dfec6a870589222a61959c35c8dcce4351b" translate="yes" xml:space="preserve">
          <source>Having trouble with browser detection? Check out the debugging guide</source>
          <target state="translated">ブラウザの検出に問題がありますか?デバッグガイドをチェックしてください</target>
        </trans-unit>
        <trans-unit id="7f06f01af2e5d4df70fedd087311f9448c40f42f" translate="yes" xml:space="preserve">
          <source>Having ultimate control over your application, the network traffic, and native access to every host object unlocks a new way of testing that has never been possible before. Instead of being &amp;lsquo;locked out&amp;rsquo; of your application and not being able to easily control it - Cypress instead lets you alter any aspect of how your application works. Instead of slow and expensive tests, such as creating the state required for a given situation, you can create these states artificially like you would in an unit test. For instance you can:</source>
          <target state="translated">アプリケーション、ネットワークトラフィック、およびすべてのホストオブジェクトへのネイティブアクセスを最終的に制御することで、これまでにない新しいテスト方法が実現します。アプリケーションから「ロックアウト」され、簡単に制御できない代わりに、サイプレスでは、アプリケーションの動作のあらゆる側面を変更できます。特定の状況に必要な状態を作成するなどの低速で費用のかかるテストの代わりに、単体テストで行うように、これらの状態を人工的に作成できます。たとえば、次のことができます。</target>
        </trans-unit>
        <trans-unit id="520de7443d00d6ff4dc3ababbbf6cfbe0b74f4ec" translate="yes" xml:space="preserve">
          <source>Headers</source>
          <target state="translated">Headers</target>
        </trans-unit>
        <trans-unit id="44dbaf5f60ddfa801984c4aeeb5f01f8bc965fe1" translate="yes" xml:space="preserve">
          <source>Headless frame rate is now correctly set to &lt;code&gt;20&lt;/code&gt; instead of resetting back to &lt;code&gt;60&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/303&quot;&gt;#303&lt;/a&gt;.</source>
          <target state="translated">ヘッドレスフレームレートは、 &lt;code&gt;60&lt;/code&gt; にリセットする代わりに、 &lt;code&gt;20&lt;/code&gt; に正しく設定されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/303&quot;&gt;＃303を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="6d1cfa2466365e73e8806958139027232b06905c" translate="yes" xml:space="preserve">
          <source>Headless running is now fixed in OSX. This was due to a bug with app signing + unzipping via the CLI.</source>
          <target state="translated">OSXでヘッドレスランニングが修正されました。これはCLI経由でアプリの署名+解凍のバグが原因でした。</target>
        </trans-unit>
        <trans-unit id="a4d173f2281e941cb96e17520a3bb3be42fbc2cb" translate="yes" xml:space="preserve">
          <source>Height of viewport in pixels (must be between 20 and 3000).</source>
          <target state="translated">ビューポートの高さをピクセル単位で表示します(20~3000の間でなければなりません)。</target>
        </trans-unit>
        <trans-unit id="c0a190d8148898dfb82aea5eff410e02e64fc0fc" translate="yes" xml:space="preserve">
          <source>Helpful to have one test around the &lt;em&gt;happy path&lt;/em&gt; of a feature</source>
          <target state="translated">機能の&lt;em&gt;ハッピーパス&lt;/em&gt;について1つのテストを行うと役立つ</target>
        </trans-unit>
        <trans-unit id="030e3fd531a3dd2a43798fa2da6a512028001bfc" translate="yes" xml:space="preserve">
          <source>Helps test your applications for accessibility issues using axe-core.</source>
          <target state="translated">axe-coreを使用してアクセシビリティの問題に対応したアプリケーションのテストを支援します。</target>
        </trans-unit>
        <trans-unit id="14c03d0f56dc3738e282de0c2fa6eb02044ccaf5" translate="yes" xml:space="preserve">
          <source>Here are even more action commands Cypress provides to interact with your app:</source>
          <target state="translated">ここでは、Cypress がアプリと対話するために提供するアクションコマンドをさらにご紹介します。</target>
        </trans-unit>
        <trans-unit id="814aac263322eca84300fd7b981e83d37036b8a4" translate="yes" xml:space="preserve">
          <source>Here are options for the currently supported browsers:</source>
          <target state="translated">現在サポートされているブラウザのオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5d2e29737b3b8e7a7adcbef663631a1191844188" translate="yes" xml:space="preserve">
          <source>Here are some example use cases:</source>
          <target state="translated">ここでは、いくつかの使用例を紹介します。</target>
        </trans-unit>
        <trans-unit id="d8ffd06a20dfcdd79365aaa53ee7b6a2c44534e0" translate="yes" xml:space="preserve">
          <source>Here are some examples you can do with these events:</source>
          <target state="translated">これらのイベントでできる例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="b8b78a4f081fb766a8f336f837efb42783a2c1a0" translate="yes" xml:space="preserve">
          <source>Here are some further examples of using &lt;code&gt;.as()&lt;/code&gt; that illustrate the asynchronous behavior.</source>
          <target state="translated">次に、非同期動作を示す &lt;code&gt;.as()&lt;/code&gt; の使用例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="c013c06c3d685978853ca3d8f7364a4a590ab667" translate="yes" xml:space="preserve">
          <source>Here are some potential workarounds:</source>
          <target state="translated">ここでは、いくつかの回避策が考えられます。</target>
        </trans-unit>
        <trans-unit id="4ea77d70b27f359afe69803d5da3d579905e6a1a" translate="yes" xml:space="preserve">
          <source>Here are the available download URLs:</source>
          <target state="translated">ダウンロード可能なURLは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2cd666f2b9f17d73be1093e69a3dfeeef58b44cb" translate="yes" xml:space="preserve">
          <source>Here are two recipes using both webpack and Browserify to write your tests in TypeScript.</source>
          <target state="translated">ここでは、webpack と Browserify の両方を使って、TypeScript でテストを書くための 2 つのレシピを紹介します。</target>
        </trans-unit>
        <trans-unit id="2d7d5d86b4de31868e90f14a2b33271d3d299c09" translate="yes" xml:space="preserve">
          <source>Here is a list of common element assertions. Notice how we use these assertions (listed above) with &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt;. You may also want to read about how Cypress &lt;a href=&quot;../core-concepts/retry-ability&quot;&gt;retries&lt;/a&gt; assertions.</source>
          <target state="translated">一般的な要素のアサーションのリストは次のとおりです。これらのアサーション（上記）を&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; で&lt;/a&gt;使用する方法に注意してください。サイプレスがアサーションを&lt;a href=&quot;../core-concepts/retry-ability&quot;&gt;再試行&lt;/a&gt;する方法について読むこともできます。</target>
        </trans-unit>
        <trans-unit id="5ad1190353ae9da1d76a71d8104c8d1fe7f2dfdf" translate="yes" xml:space="preserve">
          <source>Here is a short test that demonstrates some flake.</source>
          <target state="translated">ここでは、いくつかのフレークを示す短いテストを行います。</target>
        </trans-unit>
        <trans-unit id="afa416d61c529492dbc90976ea7a74d0b1fc9ab5" translate="yes" xml:space="preserve">
          <source>Here is an example of aliasing routes and then subsequently waiting on them:</source>
          <target state="translated">ルートをエイリアス化して、その後に待機する例を示します。</target>
        </trans-unit>
        <trans-unit id="51dad279a09b747c179aba04441ea32fb4addc73" translate="yes" xml:space="preserve">
          <source>Here is an example of programmatically running a spec file:</source>
          <target state="translated">ここではspecファイルをプログラムで実行する例を示します。</target>
        </trans-unit>
        <trans-unit id="e2e8a7cd2dfdde9b6c69b6c5f115176d1baac676" translate="yes" xml:space="preserve">
          <source>Here is how you can launch Cypress application directly without the npm CLI module. First, find where the binary is installed using the &lt;a href=&quot;command-line#cypress-cache-path&quot;&gt;&lt;code&gt;cypress cache path&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">以下は、npm CLIモジュールなしでサイプレスアプリケーションを直接起動する方法です。まず、&lt;a href=&quot;command-line#cypress-cache-path&quot;&gt; &lt;code&gt;cypress cache path&lt;/code&gt; &lt;/a&gt;コマンドを使用して、バイナリがインストールされている場所を見つけます。</target>
        </trans-unit>
        <trans-unit id="d14258feb2429db988a8d7509b13beb919384d30" translate="yes" xml:space="preserve">
          <source>Here is our test to confirm that the error is thrown.</source>
          <target state="translated">ここでは、エラーが発生したことを確認するためのテストを行います。</target>
        </trans-unit>
        <trans-unit id="80c20760fb3e28f4c6281bac6300036a33118a9e" translate="yes" xml:space="preserve">
          <source>Here is the problem: &lt;strong&gt;there is no guarantee that this code will run.&lt;/strong&gt;</source>
          <target state="translated">ここに問題&lt;strong&gt;があります。このコードが実行される保証はありません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f44db513b84502f50769c879707f9e5d550385d" translate="yes" xml:space="preserve">
          <source>Here you will see a &lt;strong&gt;Record Keys&lt;/strong&gt; section</source>
          <target state="translated">ここに&lt;strong&gt;レコードキー&lt;/strong&gt;セクションが表示されます</target>
        </trans-unit>
        <trans-unit id="c16fff170ddf0ae5c454992c749b68f2bd467165" translate="yes" xml:space="preserve">
          <source>Here you will see a section displaying &lt;strong&gt;Access to Runs&lt;/strong&gt;. Choose the appropriate access you&amp;rsquo;d like to assign for the project here.</source>
          <target state="translated">ここに&lt;strong&gt;、実行へのアクセスを&lt;/strong&gt;表示するセクションが表示さ&lt;strong&gt;れます&lt;/strong&gt;。ここで、プロジェクトに割り当てる適切なアクセスを選択します。</target>
        </trans-unit>
        <trans-unit id="32e1d7a8806aeac84259628e771eb1a469fc257f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s 2 ways we can fix this:</source>
          <target state="translated">これを修正できる2つの方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="55ee5b29e3d5024bc2e87add2856935ae88d33b9" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a great use case for a &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;const&lt;/code&gt; の優れた使用例です。</target>
        </trans-unit>
        <trans-unit id="9c7425158c4e0010b706a7f38abe9fb6a8b9bedf" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a more robust example:</source>
          <target state="translated">以下に、より堅牢な例を示します。</target>
        </trans-unit>
        <trans-unit id="3651308ec64fa280dbb96d37699802233519856c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example alongside seeding your database:</source>
          <target state="translated">データベースをシードする例を次に示します。</target>
        </trans-unit>
        <trans-unit id="fbc40dbabb34c752bd31e2992062533604057d06" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of aliasing a request and accessing its properties later.</source>
          <target state="translated">次に、リクエストにエイリアスを設定し、後でそのプロパティにアクセスする例を示します。</target>
        </trans-unit>
        <trans-unit id="898fe3f9aa85a77c3841827bf8d46925f884ed3f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of aliasing a route and waiting on it to complete.</source>
          <target state="translated">以下は、ルートにエイリアスを付けて、完了するまで待機する例です。</target>
        </trans-unit>
        <trans-unit id="02f1cc5d7e8c943c34681b0b497bc1b7998007ac" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that uses &lt;code&gt;Cypress.env&lt;/code&gt; to access an environment variable that&amp;rsquo;s been &lt;a href=&quot;../../guides/guides/environment-variables#Option-5-Plugins&quot;&gt;dynamically set in a plugin&lt;/a&gt;.</source>
          <target state="translated">以下は、 &lt;code&gt;Cypress.env&lt;/code&gt; を使用&lt;a href=&quot;../../guides/guides/environment-variables#Option-5-Plugins&quot;&gt;して、プラグインで動的に設定された&lt;/a&gt;環境変数にアクセスする例です。</target>
        </trans-unit>
        <trans-unit id="f4a9a5a371b2806648657252f2716891d11fed99" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that uses the selector to ensure that the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; remains the &lt;a href=&quot;../../guides/core-concepts/introduction-to-cypress#Subject-Management&quot;&gt;subject&lt;/a&gt; for future chaining.</source>
          <target state="translated">以下は、セレクターを使用して、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; が今後のチェーンの&lt;a href=&quot;../../guides/core-concepts/introduction-to-cypress#Subject-Management&quot;&gt;対象となる&lt;/a&gt;ようにする例です。</target>
        </trans-unit>
        <trans-unit id="b055900551745b9e56dfba628f57c81d43ad590b" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s another example.</source>
          <target state="translated">ここに別の例があります。</target>
        </trans-unit>
        <trans-unit id="e6260cef565ea487eb7d18e2f71bb7879a44efa2" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what that looks like:</source>
          <target state="translated">これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d8d61e0439e635ed2b26dc3edd9a23512001bc32" translate="yes" xml:space="preserve">
          <source>Highlighting $el&amp;rsquo;s on DOM restore now works again.</source>
          <target state="translated">DOMの復元で$ elを強調表示するようになりました。</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="c3d2a77fef876d6fdceb5df31f51861be6fa380d" translate="yes" xml:space="preserve">
          <source>Hitbox is no longer covered up by element layers on DOM revert.</source>
          <target state="translated">ヒットボックスは、DOM のリバート時に要素レイヤーで覆われなくなった。</target>
        </trans-unit>
        <trans-unit id="a9edd6bc7d4fd9e35b4514d2f2f4982f3fc9d13f" translate="yes" xml:space="preserve">
          <source>Hitboxes are now displayed on the screen based on the actual coordinates where an &lt;code&gt;action command&lt;/code&gt; event took place.</source>
          <target state="translated">ヒットボックスは、 &lt;code&gt;action command&lt;/code&gt; イベントが発生した実際の座標に基づいて画面に表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="98a9d3545c337cb4da39acf4ed80e7e6fcad2dec" translate="yes" xml:space="preserve">
          <source>Hmm, weird, why is Cypress only looking at the &lt;em&gt;first&lt;/em&gt; item? Let&amp;rsquo;s hover over the &amp;ldquo;GET .todo-list li&amp;rdquo; command to inspect what &lt;em&gt;that command found&lt;/em&gt;. Ohh, interesting - there was only one item at that moment.</source>
          <target state="translated">ええと、奇妙なことに、サイプレスが&lt;em&gt;最初の&lt;/em&gt;項目しか見ないのはなぜですか？「GET .todo-list li」コマンドにカーソルを合わせて&lt;em&gt;、そのコマンドが見つけた&lt;/em&gt;ものを調べてみましょう。おお、おもしろい-現時点ではアイテムは1つしかなかった。</target>
        </trans-unit>
        <trans-unit id="52b847f30470700f7ad74d57aea71bd170f96298" translate="yes" xml:space="preserve">
          <source>Hold down modifier key and type a word</source>
          <target state="translated">修飾キーを押しながら単語を入力</target>
        </trans-unit>
        <trans-unit id="9b553bb93a72e5a40a2a4d68c61783f9a8cc09c9" translate="yes" xml:space="preserve">
          <source>Holding modifier keys and clicking an arbitrary element.</source>
          <target state="translated">モディファイアキーを押しながら任意の要素をクリックします。</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="f6c038aebd335df3d7a2cad9bfbde0df6072568d" translate="yes" xml:space="preserve">
          <source>Host header HTTPS protocol handling fixed.</source>
          <target state="translated">ホストヘッダのHTTPSプロトコルの処理を修正した。</target>
        </trans-unit>
        <trans-unit id="2159f595c2cbfb912f099f3985daad85d59e037d" translate="yes" xml:space="preserve">
          <source>Hover over the second &amp;ldquo;FIND label&amp;rdquo; command - something is wrong here. It found the &lt;em&gt;first label&lt;/em&gt;, then kept requerying to find the text &amp;ldquo;todo B&amp;rdquo;, but the first item always remains &amp;ldquo;todo A&amp;rdquo;.</source>
          <target state="translated">2番目の「FIND label」コマンドにカーソルを合わせます-ここで何かが間違っています。&lt;em&gt;最初のラベル&lt;/em&gt;が見つかり、テキスト「todo B」を見つけるために再クエリを続けましたが、最初の項目は常に「todo A」のままです。</target>
        </trans-unit>
        <trans-unit id="cb0744435dfa3aa876ff9a4a933675ccbfca33e1" translate="yes" xml:space="preserve">
          <source>Hovering on Commands</source>
          <target state="translated">コマンドの上にカーソルを置く</target>
        </trans-unit>
        <trans-unit id="1eabf47d874bf62e5c6fcc8434c4d32a1d4d6b61" translate="yes" xml:space="preserve">
          <source>Hovering on commands which delay resolving their $el will now properly highlight again.</source>
          <target state="translated">el の解決が遅れているコマンドの上にカーソルを置くと、再び適切にハイライトされるようになりました。</target>
        </trans-unit>
        <trans-unit id="140059e62cf126a5e8eb67ead563a9f78d1c4949" translate="yes" xml:space="preserve">
          <source>How Cypress calculates visibility</source>
          <target state="translated">サイプレスが可視性を計算する方法</target>
        </trans-unit>
        <trans-unit id="cff8f2b6ae80cde85106bd6af47fc8045914af87" translate="yes" xml:space="preserve">
          <source>How Cypress can record a video of the entire run</source>
          <target state="translated">サイプレスがラン全体の動画を録画する方法</target>
        </trans-unit>
        <trans-unit id="98f7e0f748deb1443c93f7bd3659f5a1a3d30245" translate="yes" xml:space="preserve">
          <source>How Cypress captures screenshots of test failures automatically</source>
          <target state="translated">Cypress がテスト失敗のスクリーンショットを自動的にキャプチャする方法</target>
        </trans-unit>
        <trans-unit id="7b51268a03dd2542c0fb37b80bfa207ba156079d" translate="yes" xml:space="preserve">
          <source>How Cypress deals with animating elements</source>
          <target state="translated">Cypressがアニメーション要素をどのように扱うか</target>
        </trans-unit>
        <trans-unit id="73c01ab5564943d441ac44b574f4de674e11277e" translate="yes" xml:space="preserve">
          <source>How Cypress embraces the standard Developer Tools</source>
          <target state="translated">Cypressが標準のDeveloper Toolsをどのように採用しているか</target>
        </trans-unit>
        <trans-unit id="8fe045ca917a598758abb24d99aa57d13ddbf2ab" translate="yes" xml:space="preserve">
          <source>How Cypress enables you to stub out the back end with &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">サイプレスが&lt;a href=&quot;../../api/commands/route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; で&lt;/a&gt;バックエンドをスタブ化できるようにする方法</target>
        </trans-unit>
        <trans-unit id="28f4d1cbd51c15bde207780d3c358fc7db90eb47" translate="yes" xml:space="preserve">
          <source>How Cypress ensures elements are actionable</source>
          <target state="translated">Cypressが要素を実行可能な状態にする方法</target>
        </trans-unit>
        <trans-unit id="1b7167d8679a0646d51f127bd5e031240090b368" translate="yes" xml:space="preserve">
          <source>How Cypress handles unit tests vs integration tests.</source>
          <target state="translated">Cypress がユニットテストと統合テストをどのように扱うか。</target>
        </trans-unit>
        <trans-unit id="c57acce719c2789c985542d885b453696c112f3e" translate="yes" xml:space="preserve">
          <source>How Cypress improves and extends the included libraries</source>
          <target state="translated">Cypressがどのようにして同梱のライブラリを改善・拡張しているか</target>
        </trans-unit>
        <trans-unit id="6b10396109b42dddf93ce216777e847e5695f44f" translate="yes" xml:space="preserve">
          <source>How Cypress manages subjects and chains of commands</source>
          <target state="translated">サイプレスがどのように科目と命令の連鎖を管理しているか</target>
        </trans-unit>
        <trans-unit id="f180a802511f5b581b51f2e46acd1bd24af79a21" translate="yes" xml:space="preserve">
          <source>How Cypress queries the DOM</source>
          <target state="translated">Cypress が DOM を問い合わせる方法</target>
        </trans-unit>
        <trans-unit id="981c35f2168978f94f48cf143fdfb9ff4a245dc9" translate="yes" xml:space="preserve">
          <source>How Cypress really looks, Promises wrapped up and hidden from us.</source>
          <target state="translated">サイプレスの本当の姿は、約束は包まれて隠されている。</target>
        </trans-unit>
        <trans-unit id="e10734e8c9a0fc14fe97d7dbd378b93088722829" translate="yes" xml:space="preserve">
          <source>How Cypress retries commands and assertions</source>
          <target state="translated">Cypress がコマンドとアサーションを再試行する方法</target>
        </trans-unit>
        <trans-unit id="b142ad7f6b12640c3734dd748fc11f92fe06a187" translate="yes" xml:space="preserve">
          <source>How Cypress runs in the same event loop with your code, keeping debugging simple and understandable</source>
          <target state="translated">Cypress がコードと同じイベントループで実行され、デバッグがシンプルでわかりやすい状態を維持する方法</target>
        </trans-unit>
        <trans-unit id="d5369cf5312cd1c730e69e1fc331935705756e74" translate="yes" xml:space="preserve">
          <source>How Cypress visualizes network management in the Command Log</source>
          <target state="translated">Cypress がコマンドログでネットワーク管理を可視化する方法</target>
        </trans-unit>
        <trans-unit id="d0079e400a6f4000574481fcd130b5cd82f63366" translate="yes" xml:space="preserve">
          <source>How It Works:</source>
          <target state="translated">どのように機能するのか。</target>
        </trans-unit>
        <trans-unit id="b46ab0d4570fbb1a5ca62c3033583841a8f96810" translate="yes" xml:space="preserve">
          <source>How and when to use &lt;code&gt;debugger&lt;/code&gt; and the shorthand &lt;a href=&quot;../../api/commands/debug&quot;&gt;&lt;code&gt;.debug()&lt;/code&gt;&lt;/a&gt; command</source>
          <target state="translated">&lt;code&gt;debugger&lt;/code&gt; と省略形の&lt;a href=&quot;../../api/commands/debug&quot;&gt; &lt;code&gt;.debug()&lt;/code&gt; &lt;/a&gt;コマンドをいつどのように使用するか</target>
        </trans-unit>
        <trans-unit id="49881af9699516c6a6558ae5dd5eec081ab2d8bb" translate="yes" xml:space="preserve">
          <source>How do I create conditional control flow, using if/else? So that if an element does (or doesn&amp;rsquo;t) exist, I choose what to do?</source>
          <target state="translated">if / elseを使用して条件付き制御フローを作成するにはどうすればよいですか？要素が存在する（または存在しない）場合、どうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="372621e6b633f9d84b19ba805f9e2fbec1ae747c" translate="yes" xml:space="preserve">
          <source>How do I do something different whether an element does or doesn&amp;rsquo;t exist?</source>
          <target state="translated">要素が存在するかどうかにかかわらず、どうすれば別のことを実行できますか？</target>
        </trans-unit>
        <trans-unit id="0a49f83912b71e85fae4e76c66882324a13f1211" translate="yes" xml:space="preserve">
          <source>How do I know which assertions change the subject and which keep it the same?</source>
          <target state="translated">どの主張が主語を変えて、どの主張が変わらないのかを知るにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="00f9c3604f08898f1e08ed93bce13a0d1411a6c2" translate="yes" xml:space="preserve">
          <source>How its architecture differs from Selenium</source>
          <target state="translated">Seleniumとのアーキテクチャの違い</target>
        </trans-unit>
        <trans-unit id="132403fdba9d78b8045faf2e2c5cc508eb092a07" translate="yes" xml:space="preserve">
          <source>How load-balancing of tests works</source>
          <target state="translated">テストの負荷分散の仕組み</target>
        </trans-unit>
        <trans-unit id="bbf98f9c894056a391916093f06903fc49846d50" translate="yes" xml:space="preserve">
          <source>How timeouts are applied to commands</source>
          <target state="translated">コマンドにタイムアウトをどのように適用するか</target>
        </trans-unit>
        <trans-unit id="da8fae9447fe19ebdeb8ae975828566266254e85" translate="yes" xml:space="preserve">
          <source>How to address some situations of flaky tests</source>
          <target state="translated">薄っぺらいテストのある状況への対処法</target>
        </trans-unit>
        <trans-unit id="6e71c52eead19906a2492efc4bd5b92583210cdd" translate="yes" xml:space="preserve">
          <source>How to configure Cypress in various CI Providers</source>
          <target state="translated">様々なCIプロバイダでCypressを設定する方法</target>
        </trans-unit>
        <trans-unit id="9a56bc7c5d7b1ecf09734a8224808953e3b05f11" translate="yes" xml:space="preserve">
          <source>How to configure Cypress to fit your app</source>
          <target state="translated">アプリに合わせてCypressを設定する方法</target>
        </trans-unit>
        <trans-unit id="a0b378f73f0f4518bb983f109061a3ff22f297b2" translate="yes" xml:space="preserve">
          <source>How to control time for deterministically testing code that is time-dependent</source>
          <target state="translated">時間に依存するコードを決定論的にテストするための時間を制御する方法</target>
        </trans-unit>
        <trans-unit id="02b3fb7ffd5593e72dfb603e73bb9a57a96752e2" translate="yes" xml:space="preserve">
          <source>How to deal with async commands</source>
          <target state="translated">非同期コマンドの扱い方</target>
        </trans-unit>
        <trans-unit id="f66605d25a8bfd0d115bd6d1b42ccc4f86c7805d" translate="yes" xml:space="preserve">
          <source>How to ensure the application is in consistent state before capturing an image</source>
          <target state="translated">画像をキャプチャする前にアプリケーションが一貫した状態であることを確認する方法</target>
        </trans-unit>
        <trans-unit id="77bd6674b1750fe89d903d4f784bcdb5cf958b52" translate="yes" xml:space="preserve">
          <source>How to group test runs</source>
          <target state="translated">テストランをグループ化する方法</target>
        </trans-unit>
        <trans-unit id="dc6052655c56f0bae7ec0d677c90f4b9ce3e2160" translate="yes" xml:space="preserve">
          <source>How to group your tests.</source>
          <target state="translated">テストのグループ分けの仕方</target>
        </trans-unit>
        <trans-unit id="70c94122258de8649c8010375de8724b7add48ec" translate="yes" xml:space="preserve">
          <source>How to implement visual diffing yourself or using 3rd party service</source>
          <target state="translated">ビジュアルディファレンシングを自分で実装する方法やサードパーティのサービスを利用する方法</target>
        </trans-unit>
        <trans-unit id="7d7acff91f253ba335e9f67889ba5612c75bc9a0" translate="yes" xml:space="preserve">
          <source>How to install Cypress via &lt;code&gt;npm&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; 経由でサイプレスをインストールする方法</target>
        </trans-unit>
        <trans-unit id="ad67610bccbd4f212f29cc9823f64e01be5c5db9" translate="yes" xml:space="preserve">
          <source>How to install Cypress via direct download</source>
          <target state="translated">Cypressを直接ダウンロードしてインストールする方法</target>
        </trans-unit>
        <trans-unit id="533e17da057d6e632957f697a3cc32fdb0e3d64c" translate="yes" xml:space="preserve">
          <source>How to instrument your application code</source>
          <target state="translated">アプリケーションコードをインストルメントする方法</target>
        </trans-unit>
        <trans-unit id="d56068d31cf6be5e49f64d6297eef0d2c9a5c0fc" translate="yes" xml:space="preserve">
          <source>How to launch other browsers</source>
          <target state="translated">他のブラウザを起動する方法</target>
        </trans-unit>
        <trans-unit id="319e419a30937e110cd5ba93f243dacd330155de" translate="yes" xml:space="preserve">
          <source>How to manually capture your own screenshot</source>
          <target state="translated">自分のスクリーンショットを手動でキャプチャする方法</target>
        </trans-unit>
        <trans-unit id="a12165bfb64939baa28efd2ae15c75035db16e20" translate="yes" xml:space="preserve">
          <source>How to organize your test and support files.</source>
          <target state="translated">テストファイルやサポートファイルの整理方法</target>
        </trans-unit>
        <trans-unit id="214aead2e6bb7098443cbbceee1088718ba01f86" translate="yes" xml:space="preserve">
          <source>How to parallelize test runs</source>
          <target state="translated">テスト実行を並列化する方法</target>
        </trans-unit>
        <trans-unit id="41c573870ffb28ced2e266b4948b9efd24a1969b" translate="yes" xml:space="preserve">
          <source>How to record tests to the Cypress Dashboard</source>
          <target state="translated">Cypress ダッシュボードにテストを記録する方法</target>
        </trans-unit>
        <trans-unit id="2e449514a73dc442141c813cdcd8a5da9ed1a7ed" translate="yes" xml:space="preserve">
          <source>How to record your tests to the Dashboard</source>
          <target state="translated">ダッシュボードにテストを記録する方法</target>
        </trans-unit>
        <trans-unit id="1ab12406f23cc0752954752e43e98eaa8e51f38a" translate="yes" xml:space="preserve">
          <source>How to run Cypress from the command line</source>
          <target state="translated">コマンドラインからCypressを実行する方法</target>
        </trans-unit>
        <trans-unit id="ba28329c678d85633b092a0e1760fc11414f7f6b" translate="yes" xml:space="preserve">
          <source>How to run Cypress tests in Continuous Integration</source>
          <target state="translated">継続的インテグレーションでCypressテストを実行する方法</target>
        </trans-unit>
        <trans-unit id="52686d06a85bb4796e486179d006eb003335ea55" translate="yes" xml:space="preserve">
          <source>How to run commands</source>
          <target state="translated">コマンドの実行方法</target>
        </trans-unit>
        <trans-unit id="15f76dee5fe4b6fb3ccb13b71d9ffb59de2c7579" translate="yes" xml:space="preserve">
          <source>How to run tests in parallel on CI</source>
          <target state="translated">CIでテストを並列に実行する方法</target>
        </trans-unit>
        <trans-unit id="3702157431f18e379d0ee0eedb4513a9e9488381" translate="yes" xml:space="preserve">
          <source>How to save the coverage information collected during end-to-end and unit tests</source>
          <target state="translated">エンドツーエンドとユニットテストで収集したカバレッジ情報を保存する方法</target>
        </trans-unit>
        <trans-unit id="a1e454e6bb2abae199bd697d732b7d4e29a52ac6" translate="yes" xml:space="preserve">
          <source>How to solve this:</source>
          <target state="translated">どうやって解決するのか。</target>
        </trans-unit>
        <trans-unit id="a36e8c559ce303daa9e93c0b472f314af94760dd" translate="yes" xml:space="preserve">
          <source>How to specify which spec files to run</source>
          <target state="translated">実行するspecファイルを指定する方法</target>
        </trans-unit>
        <trans-unit id="ac500decf432728061d52221cabcb835b49d2f52" translate="yes" xml:space="preserve">
          <source>How to start testing a new project in Cypress.</source>
          <target state="translated">Cypressで新しいプロジェクトのテストを開始する方法。</target>
        </trans-unit>
        <trans-unit id="766c761536f469ed6b1c06015fa4eda589687e14" translate="yes" xml:space="preserve">
          <source>How to troubleshoot issues with Cypress itself</source>
          <target state="translated">サイプレス自体の問題をトラブルシューティングする方法</target>
        </trans-unit>
        <trans-unit id="99400be5514ca12cc3021d96a8b553856f2a4257" translate="yes" xml:space="preserve">
          <source>How to use Aliases for objects, elements and routes</source>
          <target state="translated">オブジェクト、要素、ルートのエイリアスの使い方</target>
        </trans-unit>
        <trans-unit id="54423de5a4a7aee9ab14f3d88c1c523c6c7a31c5" translate="yes" xml:space="preserve">
          <source>How to use Aliases to refer back to XHR requests and wait on them</source>
          <target state="translated">XHRリクエストを参照して待つためのAliasesの使い方</target>
        </trans-unit>
        <trans-unit id="42e7d8607c5b0624835a1e06031c28f5d6b15ff4" translate="yes" xml:space="preserve">
          <source>How to use Fixtures to reuse XHR responses</source>
          <target state="translated">XHRレスポンスを再利用するためのフィクスチャの使い方</target>
        </trans-unit>
        <trans-unit id="2897439c203386b13d5a87c7bec5f3007b9be90b" translate="yes" xml:space="preserve">
          <source>How to use spies for asserting that code was called without interfering with its execution</source>
          <target state="translated">コードの実行を妨げることなくコードが呼び出されたことを保証するためにスパイを使用する方法</target>
        </trans-unit>
        <trans-unit id="a7049b5ec4b6c139dd416508c50b29993e7f16c1" translate="yes" xml:space="preserve">
          <source>How to use stubs for asserting that code was called but preventing it from executing</source>
          <target state="translated">コードが呼び出されたが実行されないようにするためにスタブを使用する方法</target>
        </trans-unit>
        <trans-unit id="3aa5b629cbffa563a339dd2d2dc71c6721c9ec3f" translate="yes" xml:space="preserve">
          <source>How to use the Selector Playground for targeting your page elements</source>
          <target state="translated">ページ要素のターゲティングにセレクタのプレイグラウンドを使う方法</target>
        </trans-unit>
        <trans-unit id="94d1dd7f0cc3137fbd7a7ae32f865d7c0cc198b3" translate="yes" xml:space="preserve">
          <source>How to use the code coverage reports to guide writing tests</source>
          <target state="translated">テストの書き方をガイドするコードカバレッジレポートの使い方</target>
        </trans-unit>
        <trans-unit id="60ce170130b69c84ea581cd6de78335987bef241" translate="yes" xml:space="preserve">
          <source>How to version and run Cypress via &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; を介してサイプレスをバージョン管理および実行する方法</target>
        </trans-unit>
        <trans-unit id="0888c50c0d8d24b5720ec4abaee88531f08b3281" translate="yes" xml:space="preserve">
          <source>How to write declarative tests that resist flake</source>
          <target state="translated">フレークに抵抗する宣言型テストの書き方</target>
        </trans-unit>
        <trans-unit id="033b5a2e9eaf93b31bc883d97b83f6fd10b16e3d" translate="yes" xml:space="preserve">
          <source>How visual testing complements functional testing</source>
          <target state="translated">ビジュアルテストが機能テストをどのように補完するか</target>
        </trans-unit>
        <trans-unit id="02f0a3edfc8f45214f63d9154a007e7cf395f82b" translate="yes" xml:space="preserve">
          <source>How will we get access to &lt;code&gt;text&lt;/code&gt;?</source>
          <target state="translated">どうすれば &lt;code&gt;text&lt;/code&gt; にアクセスできますか？</target>
        </trans-unit>
        <trans-unit id="4605d5b8f0d728b0e3cee5dbb5634635d807da5a" translate="yes" xml:space="preserve">
          <source>How you can bypass these checks and force events</source>
          <target state="translated">これらのチェックをバイパスしてイベントを強制的に行う方法</target>
        </trans-unit>
        <trans-unit id="02502caf66d61fb2be12437276c4b60307546155" translate="yes" xml:space="preserve">
          <source>How you choose to organize multiple configurations and sets of environment variables is up to you. You don&amp;rsquo;t even have to read off of the file system - you could store them all in memory inside of your &lt;code&gt;pluginsFile&lt;/code&gt; if you wanted to.</source>
          <target state="translated">複数の構成と環境変数のセットをどのように整理するかは、あなた次第です。ファイルシステムから読み取る必要もありません。必要に応じて、 &lt;code&gt;pluginsFile&lt;/code&gt; 内のすべてのメモリに保存できます。</target>
        </trans-unit>
        <trans-unit id="fd493ca6987aa63de9b538e19f69d051270f9fb9" translate="yes" xml:space="preserve">
          <source>How you choose to organize your configuration and environment variables is up to you.</source>
          <target state="translated">設定と環境変数をどのように整理するかは、あなた次第です。</target>
        </trans-unit>
        <trans-unit id="461e2656ef40aa6157b9664a2d21d9e574e08ed1" translate="yes" xml:space="preserve">
          <source>How you should rewrite those tests:</source>
          <target state="translated">それらのテストをどのように書き換えるべきか。</target>
        </trans-unit>
        <trans-unit id="d20898a161ddbf96b9db433f2d38a63402c62cb1" translate="yes" xml:space="preserve">
          <source>However - there is likely still a balance here where &lt;strong&gt;both&lt;/strong&gt; strategies are valid (and you should likely do them).</source>
          <target state="translated">ただし、&lt;strong&gt;両方の&lt;/strong&gt;戦略が有効である場合は、まだバランスが取れている可能性があります（そして、それらを実行する必要があります）。</target>
        </trans-unit>
        <trans-unit id="cececcb38a71e217c8c57055fb4e98ffd9e27176" translate="yes" xml:space="preserve">
          <source>However between tests, when a new test runs, the previous configuration is restored to a clean state. No configuration leaks between tests.</source>
          <target state="translated">しかし、テストの間に新しいテストが実行されると、以前の設定はクリーンな状態に復元されます。テスト間で構成が漏れることはありません。</target>
        </trans-unit>
        <trans-unit id="c087602b2a65d508bc58fee8aea5154febb22693" translate="yes" xml:space="preserve">
          <source>However it &lt;strong&gt;is possible&lt;/strong&gt; to synchronize Cypress with another back end process - whether it is Selenium or Puppeteer to drive a 2nd open browser. We have actually seen this work together quite nicely!</source>
          <target state="translated">ただし、サイプレスを別のバックエンドプロセスと同期させること&lt;strong&gt;は可能&lt;/strong&gt;です。2番目に開いているブラウザを操作するのがSeleniumでもPuppeteerでもかまいません。私たちは実際にこの作品をとてもうまく一緒に見ました！</target>
        </trans-unit>
        <trans-unit id="7a7354c68d1ef513a1d7a089414b2acca1f54421" translate="yes" xml:space="preserve">
          <source>However, Cypress additionally handles situations where a child descendent is clicked inside of a focusable parent, but actually isn&amp;rsquo;t visually inside the parent (per the CSS Object Model). In those cases if no focusable parent is found the window is given focus instead (which matches real browser behavior).</source>
          <target state="translated">ただし、サイプレスは、子孫がフォーカス可能な親の内側でクリックされた状況をさらに処理しますが、実際には（CSSオブジェクトモデルに従って）親の内側ではありません。これらの場合、フォーカス可能な親が見つからない場合は、ウィンドウに代わりにフォーカスが与えられます（実際のブラウザーの動作と一致します）。</target>
        </trans-unit>
        <trans-unit id="f0ed85983e964dde15e6f765dec196a041a3843f" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re running this script locally you&amp;rsquo;ll have to do a bit more work to collect the backgrounded PID and then kill it after &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="translated">ただし、このスクリプトをローカルで実行している場合は、バックグラウンドのPIDを収集するためにもう少し作業を行い、 &lt;code&gt;cypress run&lt;/code&gt; 後にそれを強制終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="3914ed8564f7fd77a505db78605705cf5c194a64" translate="yes" xml:space="preserve">
          <source>However, in most modern applications these days - when the &lt;code&gt;load&lt;/code&gt; event occurs, usually nothing has rendered on the screen. It is usually at this moment that your scripts begin to load dynamic content and begin to render asynchronously.</source>
          <target state="translated">ただし、最近のほとんどのアプリケーションでは、 &lt;code&gt;load&lt;/code&gt; イベントが発生すると、通常、画面に何もレンダリングされません。通常、この時点で、スクリプトが動的コンテンツの読み込みを開始し、非同期でレンダリングを開始します。</target>
        </trans-unit>
        <trans-unit id="e068c156b2cb3f2a2e53be32d569f5fda08694fe" translate="yes" xml:space="preserve">
          <source>However, some chainers change the subject. In the example below, &lt;code&gt;.and()&lt;/code&gt; yields the string &lt;code&gt;sans-serif&lt;/code&gt; because the chainer &lt;code&gt;have.css, 'font-family'&lt;/code&gt; changes the subject.</source>
          <target state="translated">ただし、一部のチェーン業者は件名を変更します。次の例では、 &lt;code&gt;.and()&lt;/code&gt; は文字列 &lt;code&gt;sans-serif&lt;/code&gt; を生成します。これは、chainerが &lt;code&gt;have.css, 'font-family'&lt;/code&gt; によって件名を変更するためです。</target>
        </trans-unit>
        <trans-unit id="2b1f8dc2a11c7c62c74c4284423b8a751303d2c0" translate="yes" xml:space="preserve">
          <source>However, some chainers change the subject. In the example below, the second &lt;code&gt;.should()&lt;/code&gt; yields the string &lt;code&gt;sans-serif&lt;/code&gt; because the chainer &lt;code&gt;have.css, 'font-family'&lt;/code&gt; changes the subject.</source>
          <target state="translated">ただし、一部のチェーン業者は件名を変更します。以下の例では、2番目の &lt;code&gt;.should()&lt;/code&gt; は文字列 &lt;code&gt;sans-serif&lt;/code&gt; を生成します。これは、チェイナーの &lt;code&gt;have.css, 'font-family'&lt;/code&gt; が件名を変更するためです。</target>
        </trans-unit>
        <trans-unit id="c552e3bdb8492fc795ec03270d9e2edd9a83a4ae" translate="yes" xml:space="preserve">
          <source>However, the truth is, Cypress is exposing a &lt;em&gt;security vulnerability&lt;/em&gt; in your application, and you &lt;em&gt;want&lt;/em&gt; it to fail in Cypress.</source>
          <target state="translated">しかし、真実は、サイプレスがアプリケーションの&lt;em&gt;セキュリティの脆弱性&lt;/em&gt;を公開しているため、サイプレスでそれを失敗さ&lt;em&gt;せたいという&lt;/em&gt;ことです。</target>
        </trans-unit>
        <trans-unit id="ece4690dc1b2e81429250810375309fb4c1c11b3" translate="yes" xml:space="preserve">
          <source>However, this is really the same question as asking to do conditional testing just wrapped up in a slightly different implementation detail.</source>
          <target state="translated">しかし、これは本当に、実装の詳細を少し変えただけで、条件付きテストをするようにお願いしているのと同じ質問です。</target>
        </trans-unit>
        <trans-unit id="8d9ad91ce02b94a8159554d3425d61b0345d6e1f" translate="yes" xml:space="preserve">
          <source>However, this pattern can be used and abused. Let&amp;rsquo;s not forget - writing Cypress tests is just &lt;strong&gt;JavaScript&lt;/strong&gt;, and it&amp;rsquo;s often much easier just to write a simple function for repeatable behavior that&amp;rsquo;s specific to only &lt;strong&gt;a single spec file&lt;/strong&gt;.</source>
          <target state="translated">ただし、このパターンは使用および乱用できます。忘れないでください-サイプレステストの記述は単なる&lt;strong&gt;JavaScript&lt;/strong&gt;であり、多くの場合&lt;strong&gt;、単一のスペックファイル&lt;/strong&gt;のみに固有の反復可能な動作のための単純な関数を記述する方がはるかに簡単&lt;strong&gt;です&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cfea422d4e353dbc7cc51c67487cf026e7b09f3c" translate="yes" xml:space="preserve">
          <source>However, you &lt;strong&gt;do not&lt;/strong&gt; need to use environment variables to point to the origin and domain under test. Use &lt;code&gt;baseUrl&lt;/code&gt; instead of environment variables.</source>
          <target state="translated">ただし、テスト中のオリジンとドメインを指すために環境変数を使用する必要&lt;strong&gt;は&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。環境変数の代わりに &lt;code&gt;baseUrl&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5377a652000c5e4f2f6018179613a7ceec5d4e9e" translate="yes" xml:space="preserve">
          <source>However, you should &lt;strong&gt;never&lt;/strong&gt; use your UI or visit a 3rd party site when testing because:</source>
          <target state="translated">ただし、次の理由により、テスト時にはUIを使用したり、サードパーティのサイトにアクセスしたりし&lt;strong&gt;ないで&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="5d64a118b93be94aed704de801aa20887064339c" translate="yes" xml:space="preserve">
          <source>Href Shorthand</source>
          <target state="translated">Href略号</target>
        </trans-unit>
        <trans-unit id="b3c199e83de5b1cdbb7e9d488cfe670ba8306ffa" translate="yes" xml:space="preserve">
          <source>I am trying to write dynamic tests that do something different based on the text on the page.</source>
          <target state="translated">ページ上のテキストに基づいて何か違うことをする動的テストを書こうとしています。</target>
        </trans-unit>
        <trans-unit id="a4ff058f4f8d43027ba07b7a2b8347f5eac0ac6b" translate="yes" xml:space="preserve">
          <source>I want to automatically find all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements and based on which ones I find, I want to check that each link works.</source>
          <target state="translated">すべての &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 要素を自動的に検索し、どの要素に基づいて、各リンクが機能するかを確認したいと思います。</target>
        </trans-unit>
        <trans-unit id="1f632660ea9c7f61c79bdcc98d1bbcd62192d3b6" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;m trying to test a chat application. Can I run more than one browser at a time with Cypress?</source>
          <target state="translated">チャットアプリケーションをテストしようとしています。サイプレスで一度に複数のブラウザを実行できますか？</target>
        </trans-unit>
        <trans-unit id="e373cdbb97766e004ffd13cfeb8d5ad0a3558402" translate="yes" xml:space="preserve">
          <source>Identical to &lt;a href=&quot;then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt;, but always expects an array-like structure as its subject.</source>
          <target state="translated">&lt;a href=&quot;then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;と同じですが、常にサブジェクトとして配列のような構造を想定しています。</target>
        </trans-unit>
        <trans-unit id="9d2c7063088793c055fe015d3841d0cc2df8e788" translate="yes" xml:space="preserve">
          <source>Identification</source>
          <target state="translated">Identification</target>
        </trans-unit>
        <trans-unit id="4073341c254aad93eaa68ffa307f829ae4cdba47" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;cy.hover()&lt;/code&gt; is used, an error will display and redirect you to this page.</source>
          <target state="translated">場合 &lt;code&gt;cy.hover()&lt;/code&gt; が使用され、エラーが表示され、このページにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="e7f1d4be4f9f7630bd0da38ea3bd8628e0fb96a4" translate="yes" xml:space="preserve">
          <source>If Cypress cannot determine the host it will throw an error.</source>
          <target state="translated">Cypress がホストを判断できない場合、エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="108195455e83f85b78ae28041a8ca9ef29acc92e" translate="yes" xml:space="preserve">
          <source>If I had error handling, I could just try to find X and if X fails go find Y</source>
          <target state="translated">エラー処理があれば、X を見つけて、X が失敗したら Y を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="b9dc667d39beee3b0041eaa0efa4df413c650f0c" translate="yes" xml:space="preserve">
          <source>If I should always use data attributes, then when should I use &lt;code&gt;cy.contains()&lt;/code&gt;?</source>
          <target state="translated">常にデータ属性を使用する必要がある場合、 &lt;code&gt;cy.contains()&lt;/code&gt; を使用する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="b970ebbac48b6821d2a09c1467c1cf6efb6dece7" translate="yes" xml:space="preserve">
          <source>If X, then Y, else Z</source>
          <target state="translated">XならばY、そうでなければZ</target>
        </trans-unit>
        <trans-unit id="7b119c466fcbd63e66770502c44eb530db83e46c" translate="yes" xml:space="preserve">
          <source>If a &lt;em&gt;child&lt;/em&gt; of the element is covering it - that&amp;rsquo;s okay. In fact we&amp;rsquo;ll automatically issue the events we fire to that child.</source>
          <target state="translated">場合は&lt;em&gt;、子&lt;/em&gt;要素のは、それをカバーしている-それは大丈夫です。実際、その子に発生させるイベントを自動的に発行します。</target>
        </trans-unit>
        <trans-unit id="154c454bda4162e086691c63fa24404ceb70d1f2" translate="yes" xml:space="preserve">
          <source>If a URL is passed to &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt; containing percent-encoded characters, we now display a warning explaining that &lt;code&gt;cy.route()&lt;/code&gt; expects a decoded URL. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2372&quot;&gt;#2372&lt;/a&gt;.</source>
          <target state="translated">URLが渡された場合&lt;a href=&quot;../../api/commands/route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; &lt;/a&gt;パーセントエンコード文字を含む、私たちは今、その説明警告表示 &lt;code&gt;cy.route()&lt;/code&gt; デコードされたURLを期待しています。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2372&quot;&gt;＃2372&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1753f8abfe2054727c73c297a51073fe562e58a0" translate="yes" xml:space="preserve">
          <source>If a page loads after a &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; times out it will no longer cause an exception in the &lt;code&gt;onBeforeLoad&lt;/code&gt; handler.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; が&lt;/a&gt;タイムアウトした後にページが読み込まれると、 &lt;code&gt;onBeforeLoad&lt;/code&gt; ハンドラーで例外が発生しなくなります。</target>
        </trans-unit>
        <trans-unit id="d109a402f7aa1766081593fb085e44ea657a4ced" translate="yes" xml:space="preserve">
          <source>If a request doesn&amp;rsquo;t match any route then the behavior depends on the value of the &lt;code&gt;force404&lt;/code&gt; option on the &lt;a href=&quot;server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">リクエストがどのルートとも一致しない場合、動作は&lt;a href=&quot;server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;force404&lt;/code&gt; オプションの値によって異なります。</target>
        </trans-unit>
        <trans-unit id="b0100c8e4ddc90a7aff71eada8600b58f1b7f3f4" translate="yes" xml:space="preserve">
          <source>If a site&amp;rsquo;s &lt;code&gt;content-type&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or cannot be determined during &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt;, we now look at the content of the site and evaluate whether it looks like HTML. If it does look like HTML we no longer error and continue as if it the site&amp;rsquo;s &lt;code&gt;content-type&lt;/code&gt; is &lt;code&gt;text/html&lt;/code&gt;. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1727&quot;&gt;#1727&lt;/a&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/773&quot;&gt;#773&lt;/a&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3101&quot;&gt;#3101&lt;/a&gt;.</source>
          <target state="translated">サイトの &lt;code&gt;content-type&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; または&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; の&lt;/a&gt;実行中に判別できない場合は、サイトのコンテンツを調べて、HTMLのように見えるかどうかを評価します。HTMLのように見えても、エラーは発生せず、サイトの &lt;code&gt;content-type&lt;/code&gt; が &lt;code&gt;text/html&lt;/code&gt; であるかのように続行されます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1727&quot;&gt;＃1727 &lt;/a&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/773&quot;&gt;＃773 &lt;/a&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3101&quot;&gt;＃3101&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1162ad9192a81bb19247dc40e2267035c1cb5b3f" translate="yes" xml:space="preserve">
          <source>If an application takes a while to start, it might &amp;ldquo;signal&amp;rdquo; its readiness by setting a property that Cypress can wait for.</source>
          <target state="translated">アプリケーションの起動にしばらく時間がかかる場合、サイプレスが待機できるプロパティを設定することで、準備が整ったことを「通知」する場合があります。</target>
        </trans-unit>
        <trans-unit id="003378de06f395a1df16b48dcbbd88dc955ebc3d" translate="yes" xml:space="preserve">
          <source>If an error occurs during &lt;code&gt;cypress verify&lt;/code&gt;, we now kill the verification process after 10 seconds and print the error message. This should prevent some situations where Cypress would hang during installation or verification and never exit. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/819&quot;&gt;#819&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress verify&lt;/code&gt; 中にエラーが発生した場合、10秒後に検証プロセスを強制終了し、エラーメッセージを出力します。これにより、インストールまたは検証中にサイプレスがハングし、終了しないという状況が回避されます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/819&quot;&gt;＃819を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="87492befc664d37679d463959dddbe8a5122f9f1" translate="yes" xml:space="preserve">
          <source>If an uppercase and a lowercase version of the proxy settings are supplied (for example, &lt;code&gt;HTTP_PROXY&lt;/code&gt; and &lt;code&gt;http_proxy&lt;/code&gt; are both set), the lowercase variable will be preferred.</source>
          <target state="translated">大文字と小文字のプロキシ設定が指定されている場合（たとえば、 &lt;code&gt;HTTP_PROXY&lt;/code&gt; と &lt;code&gt;http_proxy&lt;/code&gt; の両方が設定されている場合）、小文字の変数が優先されます。</target>
        </trans-unit>
        <trans-unit id="b59523ab5ea3b305436d65b83bac76bf92dbb554" translate="yes" xml:space="preserve">
          <source>If any of an element&amp;rsquo;s parent&amp;rsquo;s overflow is &amp;lsquo;hidden&amp;rsquo;, we now calculate if the element is outside of the boundaries of that parent element and validate visibility assertions accordingly. This may cause some tests that were previously passing to now accurately fail. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/410&quot;&gt;#410&lt;/a&gt;.</source>
          <target state="translated">要素の親のオーバーフローのいずれかが「非表示」の場合、要素がその親要素の境界外にあるかどうかを計算し、それに応じて可視性アサーションを検証します。これにより、以前は合格していたいくつかのテストが正確に失敗する場合があります。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/410&quot;&gt;＃410を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="3509bab7a88736566e6c11e7f82d6711b1b4bb77" translate="yes" xml:space="preserve">
          <source>If built-in assertions are not enough, you can easily write your own assertion function and pass it as a callback to the &lt;code&gt;.should()&lt;/code&gt; command. Cypress will automatically &lt;a href=&quot;../core-concepts/retry-ability&quot;&gt;retry&lt;/a&gt; the callback function until it passes or the command times out. See the &lt;a href=&quot;../../api/commands/should#Function&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">組み込みのアサーションでは不十分な場合は、独自のアサーション関数を簡単に記述し、それを &lt;code&gt;.should()&lt;/code&gt; コマンドへのコールバックとして渡すことができます。サイプレスは、コールバック関数が通過するか、コマンドがタイムアウトするまで、コールバック関数を自動的に&lt;a href=&quot;../core-concepts/retry-ability&quot;&gt;再試行&lt;/a&gt;します。&lt;a href=&quot;../../api/commands/should#Function&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d4db028f339ba6881ac24e86ae72bf1514a2f9f7" translate="yes" xml:space="preserve">
          <source>If for some reason this new page errors Cypress will display the initial 500 error messages just like &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">何らかの理由でこの新しいページにエラーが発生した場合、サイプレスは&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; の&lt;/a&gt;ように最初の500エラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="8edd03621e98d5ed7e5b578879fc3050eab14a47" translate="yes" xml:space="preserve">
          <source>If going forward or back causes a full page refresh, Cypress will wait for the new page to load before moving on to new commands.</source>
          <target state="translated">前に進んだり戻ったりするとページが完全に更新される場合、Cypress は新しいページがロードされるのを待ってから新しいコマンドに移動します。</target>
        </trans-unit>
        <trans-unit id="c61904f70fabc710476e07aa51b2f8c182efb85c" translate="yes" xml:space="preserve">
          <source>If isolated to the Electron browser. Run the same tests in both Electron and Chrome, then compare the screenshots/videos. Look for and isolate any differences in the Command Log.</source>
          <target state="translated">Electronブラウザに隔離されている場合。ElectronとChromeの両方で同じテストを実行し、スクリーンショットビデオを比較します。コマンドログで違いを探し、分離してください。</target>
        </trans-unit>
        <trans-unit id="019fa6ae9d87fdc48efc05c7f5b6b34bf50e30d9" translate="yes" xml:space="preserve">
          <source>If multiple screenshots are taken during a test that will result in the same filename, their file paths are now appended with a number, i.e. &lt;code&gt;test name (1).png&lt;/code&gt;. This prevents screenshot files with the same name from being overwritten. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1766&quot;&gt;#1766&lt;/a&gt;.</source>
          <target state="translated">同じファイル名になるテスト中に複数のスクリーンショットを撮った場合、それらのファイルパスに番号が追加されます。つまり、 &lt;code&gt;test name (1).png&lt;/code&gt; です。これにより、同じ名前のスクリーンショットファイルが上書きされなくなります。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1766&quot;&gt;＃1766を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="48f21d21b635b05f7218a084eb7b7474b0d00544" translate="yes" xml:space="preserve">
          <source>If multiple task objects use the same key, the later registration will overwrite that particular key, just like merging multiple objects with duplicate keys will overwrite the first one.</source>
          <target state="translated">複数のタスクオブジェクトが同じキーを使用している場合、重複したキーを持つ複数のオブジェクトをマージすると最初のキーが上書きされるのと同じように、後から登録したものがその特定のキーを上書きします。</target>
        </trans-unit>
        <trans-unit id="9f386e0d8fe5e0a3f3e67dae8088114a0ce832f4" translate="yes" xml:space="preserve">
          <source>If my machine is Windows 64bit, I will click on the &amp;ldquo;Testing new win32 x64 &amp;hellip;&amp;rdquo; commit and run the command below.</source>
          <target state="translated">私のマシンがWindows 64ビットの場合、「Testing new win32 x64&amp;hellip;」コミットをクリックして、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8911843b2af6a7d71759e08877aa807eaf58b2a8" translate="yes" xml:space="preserve">
          <source>If no method is defined Cypress will match &lt;code&gt;GET&lt;/code&gt; requests by default.</source>
          <target state="translated">メソッドが定義されていない場合、サイプレスはデフォルトで &lt;code&gt;GET&lt;/code&gt; リクエストに一致します。</target>
        </trans-unit>
        <trans-unit id="fb1514fb2bf2748c7d457fbc378637318c9ca3c1" translate="yes" xml:space="preserve">
          <source>If possible, we advise implementing &lt;a href=&quot;visual-testing&quot;&gt;visual testing&lt;/a&gt; in addition to Cypress functional tests to avoid CSS and visual regressions.</source>
          <target state="translated">可能であれば、CSSと視覚的回帰を回避するために、サイプレスの機能&lt;a href=&quot;visual-testing&quot;&gt;テスト&lt;/a&gt;に加えて視覚的テストを実装することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5693a5394cd0c32d5fca2f5d0ca482c3825e92b4" translate="yes" xml:space="preserve">
          <source>If status checks are enabled within a project&amp;rsquo;s GitHub integration settings, the Cypress Dashboard will report Cypress test statuses to GitHub for related commits. &lt;a href=&quot;https://help.github.com/en/articles/about-status-checks&quot;&gt;Status checks&lt;/a&gt; help prevent merging a commit or pull-request into the rest of your codebase until all your Cypress tests have passed.</source>
          <target state="translated">プロジェクトのGitHub統合設定内でステータスチェックが有効になっている場合、サイプレスダッシュボードは、関連するコミットについてサイプレステストステータスをGitHubに報告します。&lt;a href=&quot;https://help.github.com/en/articles/about-status-checks&quot;&gt;ステータスチェック&lt;/a&gt;は、すべてのサイプレステストに合格するまで、コミットまたはプルリクエストを残りのコードベースにマージしないようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0470903e8ea33127f36709cbe3a4e684b3fa3a2d" translate="yes" xml:space="preserve">
          <source>If that&amp;rsquo;s the case, don&amp;rsquo;t worry - you can work around it with &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; is special because it is &lt;strong&gt;NOT bound to CORS or same-origin policy&lt;/strong&gt;.</source>
          <target state="translated">その場合でも、心配しないでください&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;で回避できます。&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;は&lt;strong&gt;、CORSまたは同一生成元ポリシーにバインドされ&lt;/strong&gt;てい&lt;strong&gt;ない&lt;/strong&gt;ため、特別です。</target>
        </trans-unit>
        <trans-unit id="f00015b725815345d742ff4cfd425cdaaec401c8" translate="yes" xml:space="preserve">
          <source>If the DOM element provided to &lt;a href=&quot;../../api/commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt; is already in focus, Cypress no longer attempts to click on the DOM element. This allows you to call &lt;code&gt;.focus()&lt;/code&gt; on elements that are focusable, but not necessarily clickable and type into them using &lt;code&gt;.type()&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3001&quot;&gt;#3001&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4420&quot;&gt;#4420&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; に&lt;/a&gt;提供されたDOM要素がすでにフォーカスされている場合、サイプレスはDOM要素をクリックすることを試みなくなりました。これは、あなたが呼び出すことができます &lt;code&gt;.focus()&lt;/code&gt; 使用して、それらの中にフォーカス可能な要素に、必ずしもクリック可能とタイプではない &lt;code&gt;.type()&lt;/code&gt; 。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3001&quot;&gt;＃3001&lt;/a&gt;および&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4420&quot;&gt;＃4420を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="a9442152579bbaca4a152c5f96f083415fe21dd3" translate="yes" xml:space="preserve">
          <source>If the answer is &lt;strong&gt;no&lt;/strong&gt; because the text could be changed - then use &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; with data attributes. Changing the text to &lt;code&gt;Save&lt;/code&gt; would then not cause a test failure.</source>
          <target state="translated">テキストが変更される可能性があるために答えが「&lt;strong&gt;いいえ」の&lt;/strong&gt;場合、データ属性を指定して&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;を使用します。テキストを &lt;code&gt;Save&lt;/code&gt; 変更しても、テストは失敗しません。</target>
        </trans-unit>
        <trans-unit id="eb9073e63299a65bb50a13c26e05b60303111f2c" translate="yes" xml:space="preserve">
          <source>If the answer is &lt;strong&gt;yes&lt;/strong&gt; because the word &lt;code&gt;Submit&lt;/code&gt; is critical and should not be changed - then use &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt; to target the element. This way, if it is changed, the test will fail.</source>
          <target state="translated">&lt;code&gt;Submit&lt;/code&gt; という単語が重要であり、変更してはならないため、答えが&lt;strong&gt;yesの&lt;/strong&gt;場合は、&lt;a href=&quot;../../api/commands/contains&quot;&gt; &lt;code&gt;cy.contains()&lt;/code&gt; &lt;/a&gt;を使用して要素をターゲットにします。このように、変更された場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="7c6208086921680f3ab3b5e099a8391aa7505f99" translate="yes" xml:space="preserve">
          <source>If the answer is no: then use a data attribute.</source>
          <target state="translated">答えがNOの場合は、データ属性を使用します。</target>
        </trans-unit>
        <trans-unit id="176a981f849e1e80afda3010fdd17ca4de01f357" translate="yes" xml:space="preserve">
          <source>If the answer is yes: then use &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">答えが「はい」の場合：&lt;a href=&quot;../../api/commands/contains&quot;&gt; &lt;code&gt;cy.contains()&lt;/code&gt; を&lt;/a&gt;使用します</target>
        </trans-unit>
        <trans-unit id="7c3d99d8c672ed0f9a58631c763050ee1404649b" translate="yes" xml:space="preserve">
          <source>If the application sets a custom property, like:</source>
          <target state="translated">のように、アプリケーションがカスタムプロパティを設定した場合。</target>
        </trans-unit>
        <trans-unit id="a316af8049ce3ef58aa334d9b420904143029a18" translate="yes" xml:space="preserve">
          <source>If the commit information is missing in the Dashboard run then &lt;a href=&quot;../dashboard/github-integration&quot;&gt;GitHub Integration&lt;/a&gt; or other tasks might not work correctly. To see the relevant Cypress debug logs, set the environment variable &lt;code&gt;DEBUG&lt;/code&gt; on your CI machine and inspect the terminal output to see why the commit information is unavailable.</source>
          <target state="translated">ダッシュボードの実行でコミット情報が欠落している場合、&lt;a href=&quot;../dashboard/github-integration&quot;&gt;GitHub統合&lt;/a&gt;またはその他のタスクが正しく機能しない可能性があります。関連するサイプレスデバッグログを表示するには、CIマシンで環境変数 &lt;code&gt;DEBUG&lt;/code&gt; を設定し、端末出力を調べて、コミット情報が利用できない理由を確認します。</target>
        </trans-unit>
        <trans-unit id="87a064679b505fb4f43803ff8692c40151512b84" translate="yes" xml:space="preserve">
          <source>If the content of the element &lt;strong&gt;changed&lt;/strong&gt; would you want the test to fail?</source>
          <target state="translated">要素のコンテンツが&lt;strong&gt;変更された&lt;/strong&gt;場合、テストを失敗させますか？</target>
        </trans-unit>
        <trans-unit id="33f9944f451d168727113ae38f9ff940547f9483" translate="yes" xml:space="preserve">
          <source>If the element is currently not in focus, before issuing any keystrokes Cypress will first issue a &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; to the element to bring it into focus.</source>
          <target state="translated">要素が現在フォーカスされていない場合、キーストロークを発行する前に、サイプレスはまず要素に&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;を発行して、要素をフォーカスします。</target>
        </trans-unit>
        <trans-unit id="cba85eb42a78a04cd0f5fcd7cb354510b97c3c09" translate="yes" xml:space="preserve">
          <source>If the hover behavior depends on a JavaScript event like &lt;code&gt;mouseover&lt;/code&gt;, you can trigger the event to achieve that behavior.</source>
          <target state="translated">ホバー動作が &lt;code&gt;mouseover&lt;/code&gt; などのJavaScriptイベントに依存している場合は、イベントをトリガーしてその動作を実現できます。</target>
        </trans-unit>
        <trans-unit id="c69d8aa449aad6940de5679c36384ec0910135c1" translate="yes" xml:space="preserve">
          <source>If the machine is encoding the video slowly (which is often the case for virtual machines that use a single core), the encoding might take a long time. In this case, you can modify the &lt;a href=&quot;../references/configuration#Videos&quot;&gt;&lt;code&gt;videoCompression&lt;/code&gt;&lt;/a&gt; configuration to make the encoding a little bit faster. Here are some common scenarios:</source>
          <target state="translated">マシンがビデオをゆっくりとエンコードしている場合（これは、シングルコアを使用する仮想マシンの場合によくあることです）、エンコードに時間がかかることがあります。この場合は、&lt;a href=&quot;../references/configuration#Videos&quot;&gt; &lt;code&gt;videoCompression&lt;/code&gt; &lt;/a&gt;構成を変更して、エンコーディングを少し速くすることができます。一般的なシナリオは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="281cd2310510ca7dc670ea99f125208e5de2f4ff" translate="yes" xml:space="preserve">
          <source>If the mousedown event has its default action prevented (&lt;code&gt;e.preventDefault()&lt;/code&gt;) then the element will not receive focus as per the spec.</source>
          <target state="translated">mousedownイベントのデフォルトアクションが防止されている場合（ &lt;code&gt;e.preventDefault()&lt;/code&gt; ）、要素は仕様に従ってフォーカスを受け取りません。</target>
        </trans-unit>
        <trans-unit id="7d95bd4923a76dfc8a1341411e5f28006de450fc" translate="yes" xml:space="preserve">
          <source>If the path to the file does not exist, the file and its path will be created. If the file already exists, it will be over-written.</source>
          <target state="translated">ファイルのパスが存在しない場合は、ファイルとそのパスが作成されます。ファイルが既に存在する場合は上書きされます。</target>
        </trans-unit>
        <trans-unit id="e59562e13c4c4576a50916d6f64e01ee0edc6d71" translate="yes" xml:space="preserve">
          <source>If the problem is seen during &lt;code&gt;cypress open&lt;/code&gt; you can print debug logs in the browser too. Open the browser&amp;rsquo;s Developer Tools and set a &lt;code&gt;localStorage&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;cypress open&lt;/code&gt; ときに問題が発生した場合は、ブラウザでデバッグログを印刷することもできます。ブラウザーの開発者ツールを開き、 &lt;code&gt;localStorage&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="5b1450f978b16536cdfe1e9955befeb5389a0e9f" translate="yes" xml:space="preserve">
          <source>If the server takes a very long time to start, we recommend trying the &lt;a href=&quot;https://github.com/bahmutov/start-server-and-test&quot;&gt;start-server-and-test&lt;/a&gt; module.</source>
          <target state="translated">サーバーの起動に非常に長い時間がかかる場合は、&lt;a href=&quot;https://github.com/bahmutov/start-server-and-test&quot;&gt;start-server-and-test&lt;/a&gt;モジュールを試すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0df65981151eafdb0359a584156434e4a653f8ad" translate="yes" xml:space="preserve">
          <source>If the smoke test fails to execute, check if a shared library is missing (a common problem on Linux machines without all of the Cypress dependencies present).</source>
          <target state="translated">スモークテストの実行に失敗した場合は、共有ライブラリがないかどうかを確認してください (Cypress の依存関係がすべて存在しない Linux マシンではよくある問題です)。</target>
        </trans-unit>
        <trans-unit id="3638d0b781a21c150d0b8e80ad4c8466d13bf479" translate="yes" xml:space="preserve">
          <source>If the state you are trying to clean lives on the server - by all means, clean that state. You will need to run these types of routines! But if the state is related to your application currently under test - you likely do not even need to clear it.</source>
          <target state="translated">クリーンアップしようとしている状態がサーバ上にある場合は、ぜひその状態をクリーンアップしてください。このようなルーチンを実行する必要があるでしょう! しかし、その状態が現在テスト中のアプリケーションに関連している場合は、おそらくクリアする必要はありません。</target>
        </trans-unit>
        <trans-unit id="e28022270e53482c54285d7e566763481f38c725" translate="yes" xml:space="preserve">
          <source>If the triple slash directive does not work, please refer to your code editor in &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support&quot;&gt;TypeScript&amp;rsquo;s Editor Support doc&lt;/a&gt; and follow the instructions for your IDE to get &lt;a href=&quot;typescript-support&quot;&gt;TypeScript support&lt;/a&gt; and intelligent code completion configured in your developer environment first. TypeScript support is built in for &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&quot;https://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;, and &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt; - all other editors require extra setup.</source>
          <target state="translated">トリプルスラッシュディレクティブが機能しない場合は、&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support&quot;&gt;TypeScriptのエディターサポートドキュメント&lt;/a&gt;でコードエディターを参照し、IDEの指示に従って&lt;a href=&quot;typescript-support&quot;&gt;TypeScriptサポート&lt;/a&gt;とインテリジェントなコード補完を開発者環境で最初に構成してください。TypeScriptサポートは、&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;、&lt;a href=&quot;https://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;、および&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStormに&lt;/a&gt;組み込まれています。他のすべてのエディターには追加の設定が必要です。</target>
        </trans-unit>
        <trans-unit id="1cefc5abdc03d7c1487d91621dedca3abe32114d" translate="yes" xml:space="preserve">
          <source>If there is a missing dependency, the application should print an error message. You can see the Electron verbose log messages by setting an &lt;a href=&quot;https://electronjs.org/docs/api/environment-variables&quot;&gt;environment variable ELECTRON_ENABLE_LOGGING&lt;/a&gt;:</source>
          <target state="translated">依存関係が欠落している場合、アプリケーションはエラーメッセージを出力する必要があります。&lt;a href=&quot;https://electronjs.org/docs/api/environment-variables&quot;&gt;環境変数ELECTRON_ENABLE_LOGGINGを&lt;/a&gt;設定すると、Electronの詳細なログメッセージを確認できます。</target>
        </trans-unit>
        <trans-unit id="d1f6c10abf1c776360040b402a51392a4fa2eabb" translate="yes" xml:space="preserve">
          <source>If there is currently a different DOM element with focus, Cypress issues a &lt;code&gt;blur&lt;/code&gt; event to that element before running the &lt;code&gt;.focus()&lt;/code&gt; command.</source>
          <target state="translated">現在フォーカスのある別のDOM要素がある場合、サイプレスは &lt;code&gt;.focus()&lt;/code&gt; コマンドを実行する前にその要素に &lt;code&gt;blur&lt;/code&gt; イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="6e1234aa938e58dfe72a380e41ba6249ce542bb3" translate="yes" xml:space="preserve">
          <source>If this is not the case, then you should refactor and change your approach.</source>
          <target state="translated">そうでない場合は、リファクタリングをしてアプローチを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5f3df466a815c48328c9910e040b787e9212736" translate="yes" xml:space="preserve">
          <source>If this state cleanup is &lt;strong&gt;truly&lt;/strong&gt; required, then the next test will instantly fail. Why? Because resetting the state never happened when you refreshed Cypress.</source>
          <target state="translated">この状態のクリーンアップが&lt;strong&gt;本当に&lt;/strong&gt;必要な場合、次のテストはすぐに失敗します。どうして？サイプレスを更新したときに状態をリセットすることは決してなかったからです。</target>
        </trans-unit>
        <trans-unit id="793da91db9fe4182e7562537ceb3f25907e00040" translate="yes" xml:space="preserve">
          <source>If this test can run &lt;strong&gt;by itself&lt;/strong&gt; and pass - congratulations you have written a good test.</source>
          <target state="translated">このテストが&lt;strong&gt;単独&lt;/strong&gt;で実行でき、合格した場合-おめでとうございます。優れたテストを作成しました。</target>
        </trans-unit>
        <trans-unit id="984bee3474a21ee2beb536e03cd95024d37ccb6e" translate="yes" xml:space="preserve">
          <source>If watching for file changes, emit &lt;code&gt;rerun&lt;/code&gt; after a file has finished being processed to let Cypress know to rerun the tests.</source>
          <target state="translated">ファイルの変更を監視する場合は、EMITは、 &lt;code&gt;rerun&lt;/code&gt; ファイルが完成ビーイングサイプレスは、テストを再実行するために知っているように処理した後。</target>
        </trans-unit>
        <trans-unit id="dbe5bfb32e8c85e274c247d854478d90f5cb3136" translate="yes" xml:space="preserve">
          <source>If we drill into the coverage object to see the statements executed in each file. For example the file &lt;code&gt;src/index.js&lt;/code&gt; has the following information:</source>
          <target state="translated">カバレッジオブジェクトをドリルダウンして、各ファイルで実行されたステートメントを確認するとします。たとえば、ファイル &lt;code&gt;src/index.js&lt;/code&gt; には次の情報があります。</target>
        </trans-unit>
        <trans-unit id="04e5458c212b25120f1a7febad7cf38e01764524" translate="yes" xml:space="preserve">
          <source>If we looked at the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; of our button again&amp;hellip;</source>
          <target state="translated">我々は見ている場合 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 、再び私たちのボタンの...</target>
        </trans-unit>
        <trans-unit id="9858bc3f84e402a92629ee149c76b95aca1c1c5c" translate="yes" xml:space="preserve">
          <source>If we want to collect the code coverage from the unit tests, we need to instrument the source code of &lt;em&gt;our spec files&lt;/em&gt;. The simplest way to do this is to use the same &lt;code&gt;.babelrc&lt;/code&gt; with &lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt;&lt;code&gt;babel-plugin-istanbul&lt;/code&gt;&lt;/a&gt; and tell the Cypress built-in bundler to use &lt;code&gt;.babelrc&lt;/code&gt; when bundling specs. One can use the &lt;a href=&quot;https://github.com/cypress-io/code-coverage&quot;&gt;&lt;code&gt;@cypress/code-coverage&lt;/code&gt;&lt;/a&gt; plugin again to do this by adding the code below to your &lt;a href=&quot;../references/configuration#Folders-Files&quot;&gt;&lt;code&gt;pluginsFile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">単体テストからコードカバレッジを収集する場合は&lt;em&gt;、スペックファイルの&lt;/em&gt;ソースコードをインストルメント化する必要があり&lt;em&gt;ます&lt;/em&gt;。これを行う最も簡単な方法は、同じ &lt;code&gt;.babelrc&lt;/code&gt; を&lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt; &lt;code&gt;babel-plugin-istanbul&lt;/code&gt; &lt;/a&gt;で使用し、仕様をバンドルするときに &lt;code&gt;.babelrc&lt;/code&gt; を使用するようにサイプレスの組み込みバンドラーに指示することです。&lt;a href=&quot;https://github.com/cypress-io/code-coverage&quot;&gt; &lt;code&gt;@cypress/code-coverage&lt;/code&gt; &lt;/a&gt;プラグインを再度使用して、以下のコードを&lt;a href=&quot;../references/configuration#Folders-Files&quot;&gt; &lt;code&gt;pluginsFile&lt;/code&gt; に&lt;/a&gt;追加することでこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="9e0bb96bcece0a11d9fd6ab15f70e21a2aa7f346" translate="yes" xml:space="preserve">
          <source>If we wrote this assertion in the explicit form &amp;ldquo;the long way&amp;rdquo;, it would look like this:</source>
          <target state="translated">このアサーションを「長い道のり」の明示的な形式で記述した場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="c60587c2f51cec786bb94efa29378e1b47736dd3" translate="yes" xml:space="preserve">
          <source>If you &lt;strong&gt;must&lt;/strong&gt; get a real token you can use &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; and use the &lt;strong&gt;programmatic&lt;/strong&gt; API that your OAuth provider provides. These APIs likely change &lt;strong&gt;more&lt;/strong&gt; infrequently and you avoid problems like throttling and A/B campaigns.</source>
          <target state="translated">あなたがいる場合&lt;strong&gt;しなければならない&lt;/strong&gt;本当のトークンを取得あなたは使用することができます&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;使い&lt;strong&gt;、プログラム&lt;/strong&gt;あなたのOAuthプロバイダーが提供するAPIを。これらのAPIはおそらく変更&lt;strong&gt;より&lt;/strong&gt;頻度が低いが、あなたはスロットリングおよびA / Bのキャンペーンのような問題を避けます。</target>
        </trans-unit>
        <trans-unit id="ef8a273650cfea97530f8a6c086790f21bed9916" translate="yes" xml:space="preserve">
          <source>If you are &lt;a href=&quot;#Record-tests&quot;&gt;recording your runs&lt;/a&gt; on a public project, you&amp;rsquo;ll want to protect your Record Key. &lt;a href=&quot;../dashboard/projects#Identification&quot;&gt;Learn why.&lt;/a&gt;</source>
          <target state="translated">公開プロジェクトで&lt;a href=&quot;#Record-tests&quot;&gt;実行&lt;/a&gt;を記録する場合は、記録キーを保護する必要があります。&lt;a href=&quot;../dashboard/projects#Identification&quot;&gt;理由をご覧ください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5e14c0559d99023707eb7ea6dd9ee886d83873b" translate="yes" xml:space="preserve">
          <source>If you are an FFmpeg pro and want to see all the settings and debug messages during the encoding, run Cypress with the following environment variable: &lt;code&gt;DEBUG=cypress:server:video cypress run&lt;/code&gt;</source>
          <target state="translated">あなたがFFmpegプロで、エンコーディング中にすべての設定とデバッグメッセージを表示したい場合は、次の環境変数を使用してサイプレスを実行します &lt;code&gt;DEBUG=cypress:server:video cypress run&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab3d6619baa79a5c438b8e380d0b0b06ec739290" translate="yes" xml:space="preserve">
          <source>If you are experiencing any or all of these issues, you may need to configure Cypress with your proxy. Instructions are available for &lt;a href=&quot;#Set-a-proxy-on-Linux-or-macOS&quot;&gt;macOS&lt;/a&gt;, &lt;a href=&quot;#Set-a-proxy-on-Linux-or-macOS&quot;&gt;Linux&lt;/a&gt;, and &lt;a href=&quot;#Set-a-proxy-on-Windows&quot;&gt;Windows&lt;/a&gt;.</source>
          <target state="translated">これらの問題のいずれかまたはすべてが発生している場合は、プロキシでサイプレスを構成する必要がある場合があります。手順は&lt;a href=&quot;#Set-a-proxy-on-Linux-or-macOS&quot;&gt;macOS&lt;/a&gt;、&lt;a href=&quot;#Set-a-proxy-on-Linux-or-macOS&quot;&gt;Linux&lt;/a&gt;、および&lt;a href=&quot;#Set-a-proxy-on-Windows&quot;&gt;Windowsで&lt;/a&gt;利用できます。</target>
        </trans-unit>
        <trans-unit id="cc282e2bf3d131481f4925653232d0ba7bce1fc2" translate="yes" xml:space="preserve">
          <source>If you are new to Cypress and wanting to better understand how Commands work - &lt;a href=&quot;../core-concepts/introduction-to-cypress#Chains-of-Commands&quot;&gt;please read our Introduction to Cypress guide&lt;/a&gt;.</source>
          <target state="translated">サイプレスの初心者で、コマンドの仕組みをよりよく理解したい場合は、サイプレスの&lt;a href=&quot;../core-concepts/introduction-to-cypress#Chains-of-Commands&quot;&gt;概要ガイドをお読みください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59dd4ef47d09ebbfccf959062f71fe92d4528548" translate="yes" xml:space="preserve">
          <source>If you are not logged in on OSX, Cypress now issues a native system notification indicating to you that Cypress is running in your tray (many users often complained they could not tell Cypress was actually running)</source>
          <target state="translated">OSX でログインしていない場合、Cypress は、Cypress がトレイで実行されていることを知らせるネイティブのシステム通知を発行するようになりました(多くのユーザーが、Cypress が実際に実行されていることがわからないと不満を漏らしていました)。</target>
        </trans-unit>
        <trans-unit id="2a31a7f93c6105a63c0857b8887ac837c4f3d60f" translate="yes" xml:space="preserve">
          <source>If you are not sure if you have written a potentially flaky test, there is an easy way to figure it out. Repeat the test an excessive number of times, and then repeat by modifying the Developer Tools to throttle the Network and the CPU. This will create different loads that simulate different environments (like CI). If you&amp;rsquo;ve written a good test, it will pass or fail 100% of the time.</source>
          <target state="translated">不安定な可能性のあるテストを作成したかどうかわからない場合は、簡単にそれを理解する方法があります。テストを過度に繰り返してから、ネットワークとCPUをスロットルするように開発者ツールを変更して繰り返します。これにより、さまざまな環境（CIなど）をシミュレートするさまざまな負荷が作成されます。良いテストを書いた場合、100％の確率で合格または不合格になります。</target>
        </trans-unit>
        <trans-unit id="80f8b0dc65b612b8d77f5f23e7305b050dd3ba02" translate="yes" xml:space="preserve">
          <source>If you are not using one of the above CI providers then make sure your system has these dependencies installed.</source>
          <target state="translated">上記のCIプロバイダを使用していない場合は、システムにこれらの依存関係がインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="f30e8c13cff139efff8686cb98411fcf5a2ebfc1" translate="yes" xml:space="preserve">
          <source>If you are purposefully writing commands outside of a test, there is probably a better way to accomplish what you&amp;rsquo;re trying to do. Read through the &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html&quot;&gt;Examples&lt;/a&gt;, &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;chat with someone in our chat&lt;/a&gt;, or &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;Open an issue&lt;/a&gt;.</source>
          <target state="translated">テストの外で意図的にコマンドを記述している場合は、実行しようとしていることを達成するためのより良い方法がおそらくあります。&lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html&quot;&gt;例&lt;/a&gt;を読んだり、&lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;チャットで誰かとチャット&lt;/a&gt;したり&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;、問題を開い&lt;/a&gt;たりしてください。</target>
        </trans-unit>
        <trans-unit id="6acf38d6e064f86018b16cceea98d60fb261be5e" translate="yes" xml:space="preserve">
          <source>If you are running &lt;code&gt;Docker&lt;/code&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/350&quot;&gt;there is a simple one line fix for this problem documented here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Docker&lt;/code&gt; を実行している場合&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/350&quot;&gt;は、この問題の簡単な1行の修正がここに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6eefafe82e977a212269471392c2d31efb3b313d" translate="yes" xml:space="preserve">
          <source>If you are running long runs on Docker, you need to set the &lt;code&gt;ipc&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt; mode. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/350&quot;&gt;This issue&lt;/a&gt; describes exactly what to do.</source>
          <target state="translated">Dockerで長時間実行している場合は、 &lt;code&gt;ipc&lt;/code&gt; を &lt;code&gt;host&lt;/code&gt; モードに設定する必要があります。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/350&quot;&gt;この問題&lt;/a&gt;は、何をすべきかを正確に説明しています。</target>
        </trans-unit>
        <trans-unit id="7ea7149f5bda4f21e499135546b4b1f599c26ffb" translate="yes" xml:space="preserve">
          <source>If you are trying to parallelize this run, then also pass the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag, else pass a different group name.</source>
          <target state="translated">この実行を並列化する場合は、&lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;フラグも渡します。そうでない場合は、別のグループ名を渡します。</target>
        </trans-unit>
        <trans-unit id="be7a02908a97e6d893298ef87e83dcb692e7a2d1" translate="yes" xml:space="preserve">
          <source>If you are unable to guarantee that the DOM is stable - don&amp;rsquo;t worry, there are other ways you can do conditional testing or work around the problems inherent with it.</source>
          <target state="translated">DOMが安定していることを保証できない場合-心配しないでください。条件付きテストを実行したり、DOMに固有の問題を回避したりする方法は他にもあります。</target>
        </trans-unit>
        <trans-unit id="de6ee60d1ffc8d554d42900fed3e4ab199507dfb" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with code coverage or want to learn more, take a look at the &amp;ldquo;Understanding JavaScript Code Coverage&amp;rdquo; blog post &lt;a href=&quot;https://www.semantics3.com/blog/understanding-code-coverage-1074e8fccce0/&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://www.semantics3.com/blog/understanding-javascript-code-coverage-part-2-9aedaa5119e5/&quot;&gt;Part 2&lt;/a&gt;.</source>
          <target state="translated">コードカバレッジに慣れていない場合、または詳細を知りたい場合は、「JavaScriptコードカバレッジについて」ブログ投稿&lt;a href=&quot;https://www.semantics3.com/blog/understanding-code-coverage-1074e8fccce0/&quot;&gt;パート1&lt;/a&gt;および&lt;a href=&quot;https://www.semantics3.com/blog/understanding-javascript-code-coverage-part-2-9aedaa5119e5/&quot;&gt;パート2&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="75eeccb6ebe4296c2870b6f50b692b7240315b31" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;jQuery&lt;/code&gt; then the &lt;code&gt;jQuery&lt;/code&gt; wrapped elements will automatically have your 3rd party plugins available to be called.</source>
          <target state="translated">&lt;code&gt;jQuery&lt;/code&gt; を使用している場合、 &lt;code&gt;jQuery&lt;/code&gt; でラップされた要素には、呼び出されるサードパーティのプラグインが自動的に用意されます。</target>
        </trans-unit>
        <trans-unit id="03bc3dfda3cbb44d47bdeeddac74222abfe0cd16" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;npm install&lt;/code&gt; in your build process, consider &lt;a href=&quot;https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable&quot;&gt;switching to &lt;code&gt;npm ci&lt;/code&gt;&lt;/a&gt; and caching the &lt;code&gt;~/.npm&lt;/code&gt; directory for a faster and more reliable build.</source>
          <target state="translated">ビルドプロセスで &lt;code&gt;npm install&lt;/code&gt; を使用している場合は、&lt;a href=&quot;https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable&quot;&gt; &lt;code&gt;npm ci&lt;/code&gt; に&lt;/a&gt;切り替えて &lt;code&gt;~/.npm&lt;/code&gt; ディレクトリをキャッシュし、より高速で信頼性の高いビルドを検討してください。</target>
        </trans-unit>
        <trans-unit id="d0c4037ea4da2b6c2d166832c8fc4c38195b3c4e" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;yarn&lt;/code&gt;, caching &lt;code&gt;~/.cache&lt;/code&gt; will include both the &lt;code&gt;yarn&lt;/code&gt; and Cypress caches. Consider using &lt;code&gt;yarn install --frozen-lockfile&lt;/code&gt; as an &lt;a href=&quot;https://docs.npmjs.com/cli/ci&quot;&gt;&lt;code&gt;npm ci&lt;/code&gt;&lt;/a&gt; equivalent.</source>
          <target state="translated">&lt;code&gt;yarn&lt;/code&gt; を使用している場合、キャッシュ &lt;code&gt;~/.cache&lt;/code&gt; には &lt;code&gt;yarn&lt;/code&gt; とサイプレスキャッシュの両方が含まれます。&lt;a href=&quot;https://docs.npmjs.com/cli/ci&quot;&gt; &lt;code&gt;npm ci&lt;/code&gt; の&lt;/a&gt;同等物として、 &lt;code&gt;yarn install --frozen-lockfile&lt;/code&gt; の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="2089f8651693845877f5144ee31856c6ae49d0fa" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;https://github.com/zkat/npx&quot;&gt;npx&lt;/a&gt; tool, you can invoke the locally installed Cypress tool directly:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/zkat/npx&quot;&gt;npx&lt;/a&gt;ツールを使用している場合は、ローカルにインストールされたサイプレスツールを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0bdad0708407a849c5ab258a1cfa09a8ce0a2427" translate="yes" xml:space="preserve">
          <source>If you are writing a traditional server-side application where most of the responses are HTML you will likely have few stubbed responses. However, most modern applications that serve JSON can take advantage of stubbing.</source>
          <target state="translated">ほとんどのレスポンスが HTML である従来のサーバーサイドのアプリケーションを書いている場合、スタブ化されたレスポンスはほとんどないでしょう。しかし、JSON を提供する最新のアプリケーションのほとんどはスタブを利用することができます。</target>
        </trans-unit>
        <trans-unit id="a3e941a81cf8f9fc738a085fc37c0f10bfe84f2c" translate="yes" xml:space="preserve">
          <source>If you attempt to visit two different superdomains, Cypress will error. Visiting subdomains works fine. You can visit different superdomains in &lt;em&gt;different&lt;/em&gt; tests, just not the &lt;em&gt;same&lt;/em&gt; test.</source>
          <target state="translated">2つの異なるスーパードメインにアクセスしようとすると、サイプレスはエラーになります。サブドメインへのアクセスは問題なく機能します。&lt;em&gt;同じ&lt;/em&gt;テストではなく、&lt;em&gt;さまざまな&lt;/em&gt;テストで&lt;em&gt;さまざま&lt;/em&gt;なスーパードメインにアクセスできます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77a24f329974d4b45808483367181374b38e05cf" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;cy.clock()&lt;/code&gt; before visiting a page with &lt;a href=&quot;visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt;, the page&amp;rsquo;s native global functions will be overridden on window load, before any of your app code runs, so even if &lt;code&gt;setTimeout&lt;/code&gt;, for example, is called on page load, it can still be controlled via &lt;a href=&quot;tick&quot;&gt;&lt;code&gt;cy.tick()&lt;/code&gt;&lt;/a&gt;. This also applies if, during the course of a test, the page under test is reloaded or changed.</source>
          <target state="translated">あなたが呼び出す場合 &lt;code&gt;cy.clock()&lt;/code&gt; でページを訪問する前に&lt;a href=&quot;visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;、ページのネイティブグローバル関数は、そうしても、アプリのコードの実行のいずれかの前に、窓負荷に上書きされます &lt;code&gt;setTimeout&lt;/code&gt; 、例えば、上と呼ばれていますページの読み込み、それはまだ&lt;a href=&quot;tick&quot;&gt; &lt;code&gt;cy.tick()&lt;/code&gt; を&lt;/a&gt;介して制御することができます。これは、テスト中にテスト中のページがリロードまたは変更された場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="86e73b2b1686e43558da6ec69e3a7ff0469f0839" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t figure out why your JavaScript code is redirecting you to a different superdomain, then you might want to just read about &lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;disabling web security&lt;/a&gt;.</source>
          <target state="translated">JavaScriptコードが別のスーパードメインにリダイレクトしている理由がわからない場合は、&lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;ウェブセキュリティの無効化&lt;/a&gt;についてお読みください。</target>
        </trans-unit>
        <trans-unit id="7cfd4650a26bf4be0f68e73d66b61e5fcd4ea2dd" translate="yes" xml:space="preserve">
          <source>If you cannot accurately know the state of your application then no matter what programming idioms you have available - &lt;strong&gt;you cannot write 100% deterministic tests&lt;/strong&gt;.</source>
          <target state="translated">アプリケーションの状態を正確に把握できない場合は、使用可能なプログラミングイディオムに関係&lt;strong&gt;なく、100％確定的テストを作成することはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="fc24b08a14546c51dad9f4f79e13d2577080ffc7" translate="yes" xml:space="preserve">
          <source>If you chain any &lt;code&gt;.should()&lt;/code&gt; command, the default &lt;code&gt;.should('exist')&lt;/code&gt; is not asserted. This does not matter for most &lt;em&gt;positive&lt;/em&gt; assertions, such as &lt;code&gt;.should('have.class')&lt;/code&gt;, because those imply existence in the first place, but if you chain &lt;em&gt;negative&lt;/em&gt; assertions ,such as &lt;code&gt;.should('not.have.class')&lt;/code&gt;, they will pass even if the DOM element doesn&amp;rsquo;t exist:</source>
          <target state="translated">&lt;code&gt;.should()&lt;/code&gt; コマンドをチェーンすると、デフォルトの &lt;code&gt;.should('exist')&lt;/code&gt; はアサートされません。これは、 &lt;code&gt;.should('have.class')&lt;/code&gt; などのほとんどの&lt;em&gt;肯定的な&lt;/em&gt;アサーションでは重要ではありません。なぜなら、これらは最初から存在することを意味しますが、 &lt;code&gt;.should('not.have.class')&lt;/code&gt; などの&lt;em&gt;否定的な&lt;/em&gt;アサーションをチェーンすると、DOM要素が存在しない場合でも渡されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f6e0dcb9f671e7a8fb00e89750fb01e410ef7928" translate="yes" xml:space="preserve">
          <source>If you change any of those properties of the image, you should include the new values in the returned object, so that the details are correctly reported in the test results. For example, if you crop the image, return the new size and dimensions of the image.</source>
          <target state="translated">画像のプロパティを変更した場合、テスト結果で詳細が正しく報告されるように、返されるオブジェクトに新しい値を含める必要があります。例えば、画像をトリミングした場合は、画像の新しいサイズと寸法を返します。</target>
        </trans-unit>
        <trans-unit id="752ee2bc76f52ed83626d5ff5af16d85c3d5a108" translate="yes" xml:space="preserve">
          <source>If you choose to install Cypress from the &lt;a href=&quot;../guides/command-line&quot;&gt;CLI Tool&lt;/a&gt; you must update to the latest version &lt;code&gt;0.9.1&lt;/code&gt;. Just run &lt;code&gt;npm install -g cypress&lt;/code&gt; and then you can run &lt;a href=&quot;../guides/command-line&quot;&gt;&lt;code&gt;cypress install&lt;/code&gt;&lt;/a&gt;. You don&amp;rsquo;t need to do anything if you update from within the Test Runner itself.</source>
          <target state="translated">&lt;a href=&quot;../guides/command-line&quot;&gt;CLIツール&lt;/a&gt;からサイプレスをインストールする場合は、最新バージョン &lt;code&gt;0.9.1&lt;/code&gt; に更新する必要があります。ただ、実行 &lt;code&gt;npm install -g cypress&lt;/code&gt; して、あなたが実行することができます&lt;a href=&quot;../guides/command-line&quot;&gt; &lt;code&gt;cypress install&lt;/code&gt; &lt;/a&gt;。テストランナー自体から更新する場合は、何もする必要はありません。</target>
        </trans-unit>
        <trans-unit id="c595939e58a62fa4e827148c888e6c83189e3727" translate="yes" xml:space="preserve">
          <source>If you choose to mirror the entire Cypress download site, you can specify &lt;code&gt;CYPRESS_DOWNLOAD_MIRROR&lt;/code&gt; to set the download server URL from &lt;code&gt;https://download.cypress.io&lt;/code&gt; to your own mirror.</source>
          <target state="translated">サイプレスダウンロードサイト全体をミラーリングする場合は、 &lt;code&gt;CYPRESS_DOWNLOAD_MIRROR&lt;/code&gt; を指定して、ダウンロードサーバーのURLを &lt;code&gt;https://download.cypress.io&lt;/code&gt; から独自のミラーに設定できます。</target>
        </trans-unit>
        <trans-unit id="bbf88490d53e76c288d488dc11f5e88ed5e9488e" translate="yes" xml:space="preserve">
          <source>If you do &lt;em&gt;not&lt;/em&gt; want these assets to be tracked by Cypress, you need to switch to using &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt;. We will happily remove any build assets that are accidentally uploaded to us during the update transition.</source>
          <target state="translated">これらのアセットをサイプレスで追跡したく&lt;em&gt;ない&lt;/em&gt;場合は、サイプレス&lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;を使用するように切り替える必要があります。更新の移行中に誤ってアップロードされたビルドアセットはすべて削除します。</target>
        </trans-unit>
        <trans-unit id="1b5689eafe488967a0af932b7d765f7d91ea4637" translate="yes" xml:space="preserve">
          <source>If you do not need to return a value, explicitly return &lt;code&gt;null&lt;/code&gt; to signal that the given event has been handled.</source>
          <target state="translated">値を返す必要がない場合は、明示的に &lt;code&gt;null&lt;/code&gt; を返し、特定のイベントが処理されたことを通知します。</target>
        </trans-unit>
        <trans-unit id="2acdb06a9fd83a2d7bbf16b6e94e8d1bcb23c390" translate="yes" xml:space="preserve">
          <source>If you do not pass a &lt;code&gt;response&lt;/code&gt; to a route, Cypress will pass the request through without stubbing it. We can still wait for the request to resolve later.</source>
          <target state="translated">ルートへの &lt;code&gt;response&lt;/code&gt; を渡さない場合、サイプレスはスタブせずに要求を通過させます。リクエストが後で解決するのを待つことができます。</target>
        </trans-unit>
        <trans-unit id="e925f27fe2f6b45420ea0c9bb472b5b6a85b6aa2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t return an object, then configuration will not be modified.</source>
          <target state="translated">オブジェクトを返さない場合、構成は変更されません。</target>
        </trans-unit>
        <trans-unit id="9312db5af2460191898cec54077b357142c7c10f" translate="yes" xml:space="preserve">
          <source>If you extend Cypress assertions, you can extend the assertion types to make the TypeScript compiler understand the new methods. See the &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Fundamentals&quot;&gt;Recipe: Adding Chai Assertions&lt;/a&gt; for instructions.</source>
          <target state="translated">サイプレスアサーションを拡張する場合、アサーションタイプを拡張して、TypeScriptコンパイラに新しいメソッドを認識させることができます。手順については、&lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Fundamentals&quot;&gt;レシピ：Chaiアサーションの追加を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d5cfd6e8ecef7e170010676556edc9e236a0e225" translate="yes" xml:space="preserve">
          <source>If you find yourself stuck and can&amp;rsquo;t work around these issues you can just set this in your &lt;code&gt;cypress.json&lt;/code&gt; file. But before doing so you should really understand and &lt;a href=&quot;../guides/web-security&quot;&gt;read about the reasoning here&lt;/a&gt;.</source>
          <target state="translated">行き詰まってこれらの問題を回避できない場合は、 &lt;code&gt;cypress.json&lt;/code&gt; ファイルでこれを設定するだけです。しかし、そうする前に&lt;a href=&quot;../guides/web-security&quot;&gt;、ここで推論について&lt;/a&gt;本当に理解して読む必要があります。</target>
        </trans-unit>
        <trans-unit id="6a19f869c25d2794013e7c1387d40ede0389a6eb" translate="yes" xml:space="preserve">
          <source>If you forgot to start your server you&amp;rsquo;ll see the error below:</source>
          <target state="translated">サーバーを起動するのを忘れた場合は、以下のエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="3a04f4111181616dc0c9ed4028c92b80fb0ed3e0" translate="yes" xml:space="preserve">
          <source>If you get this error in a case where the element is definitely visible in the DOM, your document might contain malformed HTML. In such cases, &lt;code&gt;document.querySelector()&lt;/code&gt; will not find any elements that appear after the point where the HTML is malformed. Even if you feel certain your HTML is not malformed anywhere, check it anyway (line by line in the dev tools). Especially if you&amp;rsquo;ve exhausted all other possibilities.</source>
          <target state="translated">要素がDOMで確実に表示される場合にこのエラーが発生する場合、ドキュメントに不正な形式のHTMLが含まれている可能性があります。このような場合、 &lt;code&gt;document.querySelector()&lt;/code&gt; は、HTMLの形式が正しくないポイントの後に表示される要素を検出しません。HTMLがどこかに改ざんされていないと確信している場合でも、とにかく（開発ツールの行ごとに）チェックしてください。特に他のすべての可能性を使い果たした場合。</target>
        </trans-unit>
        <trans-unit id="50a9344dcb7c8f27a278716db4dd157f804f2039" translate="yes" xml:space="preserve">
          <source>If you had any failed tests, you can hover over the spec chart and click on the link to the failed test to go directly to its error message and stack trace.</source>
          <target state="translated">テストに失敗した場合は、スペックチャートの上にカーソルを置き、失敗したテストへのリンクをクリックすると、そのエラーメッセージとスタックトレースに直接アクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="9a9ee096d19e69e37fbffad4e7eb174e62c5e73f" translate="yes" xml:space="preserve">
          <source>If you have Local Administrator access to your computer, you may be able to delete the registry keys that are affecting Chrome. Here are some instructions:</source>
          <target state="translated">ローカル管理者がコンピュータにアクセスできる場合は、Chromeに影響を与えるレジストリ キーを削除できる可能性があります。以下に手順をご紹介します。</target>
        </trans-unit>
        <trans-unit id="63e4a448952599482dc8840bf1d4025b5dc425e4" translate="yes" xml:space="preserve">
          <source>If you have a public project you should &lt;em&gt;still&lt;/em&gt; keep your record key secret. If someone knows both your record key and your &lt;code&gt;projectId&lt;/code&gt;, they could record test runs for your project - which could mix up all of your results and be counted towards your usage during billing.</source>
          <target state="translated">公開プロジェクトがある場合&lt;em&gt;でも&lt;/em&gt;、レコードキーを秘密にし&lt;em&gt;て&lt;/em&gt;おく必要&lt;em&gt;があり&lt;/em&gt;ます。誰かがあなたの記録キーとあなたの &lt;code&gt;projectId&lt;/code&gt; の両方を知っている場合、彼らはあなたのプロジェクトのテスト実行を記録する可能性があります-これはあなたのすべての結果を混ぜ合わせ、請求中のあなたの使用にカウントされます。</target>
        </trans-unit>
        <trans-unit id="54a6bde689f1c4e79db2db1cd787836fb4a9aedb" translate="yes" xml:space="preserve">
          <source>If you have any questions regarding the OSS plan, please feel free &lt;a href=&quot;https://docs.cypress.io/cdn-cgi/l/email-protection#8ee6ebe2e2e1ceedf7fefcebfdfda0e7e1&quot;&gt;contact us&lt;/a&gt;.</source>
          <target state="translated">OSSプランについてご不明な点がございましたら、お気軽にお&lt;a href=&quot;https://docs.cypress.io/cdn-cgi/l/email-protection#8ee6ebe2e2e1ceedf7fefcebfdfda0e7e1&quot;&gt;問い合わせください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae6e013e7f7ef50fc0cef2b97a94cdc089024d3c" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t set up your project to record &lt;a href=&quot;projects#Setup&quot;&gt;read here&lt;/a&gt;.</source>
          <target state="translated">記録するプロジェクトを設定していない場合は、&lt;a href=&quot;projects#Setup&quot;&gt;こちら&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="3b6cc633bbfffea4fcc2a5b3a2ee15791267850e" translate="yes" xml:space="preserve">
          <source>If you install cypress globally using &lt;code&gt;npm install -g cypress&lt;/code&gt; we will warn you that you should check this in as a &lt;code&gt;devDependency&lt;/code&gt; but Cypress will continue to work in &amp;ldquo;global mode&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;npm install -g cypress&lt;/code&gt; を使用してサイプレスをグローバルにインストールする場合、これを &lt;code&gt;devDependency&lt;/code&gt; としてチェックインする必要があることを警告しますが、サイプレスは引き続き「グローバルモード」で動作します。</target>
        </trans-unit>
        <trans-unit id="a842235de66934aeaa622f41344721b9e2931803" translate="yes" xml:space="preserve">
          <source>If you installed a custom reporter through npm, specify the package name:</source>
          <target state="translated">npm経由でカスタムレポーターをインストールした場合は、パッケージ名を指定してください。</target>
        </trans-unit>
        <trans-unit id="fe2c757489ce4a0f7274ae1730d45810e99ceb0b" translate="yes" xml:space="preserve">
          <source>If you make a &lt;code&gt;cy.request()&lt;/code&gt; after visiting a page, Cypress assumes the url used for the &lt;code&gt;cy.visit()&lt;/code&gt; is the host.</source>
          <target state="translated">ページにアクセスした後で &lt;code&gt;cy.request()&lt;/code&gt; を行うと、サイプレスは &lt;code&gt;cy.visit()&lt;/code&gt; に使用されるURL がホストであると想定します。</target>
        </trans-unit>
        <trans-unit id="8fc68779f7a10cce750509e7525ffbfe62a98a74" translate="yes" xml:space="preserve">
          <source>If you make a &lt;code&gt;cy.request()&lt;/code&gt; prior to visiting a page, Cypress uses the host configured as the &lt;code&gt;baseUrl&lt;/code&gt; property inside of &lt;code&gt;cypress.json&lt;/code&gt;.</source>
          <target state="translated">ページにアクセスする前に &lt;code&gt;cy.request()&lt;/code&gt; を行うと、サイプレスは &lt;code&gt;baseUrl&lt;/code&gt; 内の &lt;code&gt;cypress.json&lt;/code&gt; プロパティとして構成されたホストを使用します。</target>
        </trans-unit>
        <trans-unit id="891fc475ee8ba30f9e2373ce12ed3af9b6cc59fe" translate="yes" xml:space="preserve">
          <source>If you need further control of the file-watching behavior you can configure this preprocessor explicitly: it exposes options that allow you to configure behavior such as &lt;em&gt;what&lt;/em&gt; is watched and the delay before emitting an &amp;ldquo;update&amp;rdquo; event after a change.</source>
          <target state="translated">あなたはファイルウォッチング行動のさらなる制御が必要な場合は、明示的にこのプリプロセッサを設定することができます。それには、configureのような行動にあなたを許可するオプションが公開する&lt;em&gt;ものを&lt;/em&gt;見ていると、変更後に「更新」イベントを発するまでの遅延時間を。</target>
        </trans-unit>
        <trans-unit id="4e262a641a0559189be4fdfa01a8e8c66c400cfe" translate="yes" xml:space="preserve">
          <source>If you need the cookie value, for example to use in a subsequent call</source>
          <target state="translated">クッキーの値が必要な場合、例えば後続の呼び出しで使用するために</target>
        </trans-unit>
        <trans-unit id="58b1d6270a220e8a62522a448d084da074e9e73c" translate="yes" xml:space="preserve">
          <source>If you need to override the binary location for some reason, use &lt;a href=&quot;../getting-started/installing-cypress#Binary-cache&quot;&gt;&lt;code&gt;CYPRESS_CACHE_FOLDER&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">何らかの理由でバイナリの場所を上書きする必要がある場合は、&lt;a href=&quot;../getting-started/installing-cypress#Binary-cache&quot;&gt; &lt;code&gt;CYPRESS_CACHE_FOLDER&lt;/code&gt; &lt;/a&gt;環境変数を使用します。</target>
        </trans-unit>
        <trans-unit id="7f55b2d14636345f6286b0a128493be0ddff303f" translate="yes" xml:space="preserve">
          <source>If you need to pass multiple arguments, use an object</source>
          <target state="translated">複数の引数を渡す必要がある場合は、オブジェクト</target>
        </trans-unit>
        <trans-unit id="2a6a23e285012aad77cd987572729f6560e998af" translate="yes" xml:space="preserve">
          <source>If you need to run a Cypress command straight from the Developer Tools console, you can use the internal command &lt;code&gt;cy.now('command name', ...arguments)&lt;/code&gt;. For example, to run the equivalent of &lt;code&gt;cy.task('database', 123)&lt;/code&gt; outside the normal execution command chain:</source>
          <target state="translated">サイプレスコマンドを開発者ツールコンソールから直接実行する必要がある場合は、内部コマンド &lt;code&gt;cy.now('command name', ...arguments)&lt;/code&gt; を使用できます。たとえば、通常の実行コマンドチェーンの外部で &lt;code&gt;cy.task('database', 123)&lt;/code&gt; 相当するものを実行するには：</target>
        </trans-unit>
        <trans-unit id="06c6374e4d45b32383b9c79e232e9b2d251383c2" translate="yes" xml:space="preserve">
          <source>If you pass a &lt;code&gt;response&lt;/code&gt; to &lt;code&gt;cy.route()&lt;/code&gt;, Cypress will stub the response in the request.</source>
          <target state="translated">あなたが渡すと &lt;code&gt;response&lt;/code&gt; に &lt;code&gt;cy.route()&lt;/code&gt; 、サイプレスは、リクエストのレスポンスをスタブします。</target>
        </trans-unit>
        <trans-unit id="eadb340822b7453de4c2fa968ae10ef8145cfb90" translate="yes" xml:space="preserve">
          <source>If you provide a non fully qualified domain name (FQDN), Cypress will make its best guess as to which host you want &lt;code&gt;cy.request()&lt;/code&gt; to use in the url.</source>
          <target state="translated">完全修飾ドメイン名（FQDN）を提供しない場合、サイプレスは、 &lt;code&gt;cy.request()&lt;/code&gt; がURLで使用するホストを推測します。</target>
        </trans-unit>
        <trans-unit id="4939d05c3dea69f3c0696b39f689b3fbbc3453af" translate="yes" xml:space="preserve">
          <source>If you remove your application&amp;rsquo;s state after each test, then you instantly lose the ability to use your application in this mode. Logging out at the end would always leave you with the same login page at the end of the test. In order to debug your application or write a partial test, you would always be left commenting out your custom &lt;code&gt;cy.logout()&lt;/code&gt; command.</source>
          <target state="translated">各テスト後にアプリケーションの状態を削除すると、このモードでアプリケーションを使用できなくなります。最後にログアウトすると、テストの最後に常に同じログインページが表示されます。アプリケーションをデバッグしたり、部分的なテストを作成したりするには、常にカスタムの &lt;code&gt;cy.logout()&lt;/code&gt; コマンドをコメントアウトする必要があります。</target>
        </trans-unit>
        <trans-unit id="9e19b775e5880b86ccc83dbd2e818ccef9558b3b" translate="yes" xml:space="preserve">
          <source>If you return or resolve with an object, Cypress will then merge this object into the &lt;code&gt;config&lt;/code&gt; which enables you to overwrite configuration or environment variables.</source>
          <target state="translated">あなたがオブジェクトを返すか、または解決された場合、サイプレスは、その後にこのオブジェクトをマージします &lt;code&gt;config&lt;/code&gt; 上書き設定や環境変数にできます。</target>
        </trans-unit>
        <trans-unit id="62f38afc23705af50d78b28d79ab4c0478795b7d" translate="yes" xml:space="preserve">
          <source>If you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is run.</source>
          <target state="translated">このエラーが表示された場合、メインブラウザのウィンドウが現在フォーカスされていることを確認してください。これは、コマンド実行時にデバッガなどのウィンドウにフォーカスされていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="f4042cdde7b138d3f35ab964f31c8300e3842bf4" translate="yes" xml:space="preserve">
          <source>If you set the &lt;strong&gt;Record Key&lt;/strong&gt; as the environment variable &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt;, you can omit the &lt;code&gt;--key&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;Record Key&lt;/strong&gt;を環境変数 &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt; として設定した場合、 &lt;code&gt;--key&lt;/code&gt; フラグを省略できます。</target>
        </trans-unit>
        <trans-unit id="9c00a2717fcd0be70d5846987e198e4a299aacb6" translate="yes" xml:space="preserve">
          <source>If you still haven&amp;rsquo;t found a solution, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;open an issue&lt;/a&gt;&lt;em&gt;with a reproducible example&lt;/em&gt;.</source>
          <target state="translated">それでも解決策が見つからない場合&lt;em&gt;は、再現可能な例で&lt;/em&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;問題&lt;/a&gt;&lt;em&gt;を&lt;/em&gt;開いてください。</target>
        </trans-unit>
        <trans-unit id="815ae2e8ac732d0e55e15cc5b8c6ea3b40638a48" translate="yes" xml:space="preserve">
          <source>If you store and access the fixture data using &lt;code&gt;this&lt;/code&gt; test context object, make sure to use &lt;code&gt;function () { ... }&lt;/code&gt; callbacks. Otherwise the test engine will NOT have &lt;code&gt;this&lt;/code&gt; pointing at the test context.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; テストコンテキストオブジェクトを使用してフィクスチャデータを格納してアクセスする場合は、必ず &lt;code&gt;function () { ... }&lt;/code&gt; コールバックを使用してください。そうでない場合、テストエンジンはありません &lt;code&gt;this&lt;/code&gt; テストコンテキストでポインティングを。</target>
        </trans-unit>
        <trans-unit id="2e41771328e6b27b794c8f710d1553a8a40a2a6a" translate="yes" xml:space="preserve">
          <source>If you store and/or persist whether to show the wizard on the server, then just ask it.</source>
          <target state="translated">サーバーにウィザードを表示するかどうかを保存したり、しつこくしつこくしたりするならば、それを聞いてみましょう。</target>
        </trans-unit>
        <trans-unit id="f8b502a9f59a207ff1bf6a7107a93811965fa6bd" translate="yes" xml:space="preserve">
          <source>If you think ahead, you&amp;rsquo;ll quickly realize that you&amp;rsquo;re going to be typing this URL a lot, since every test is going to need to visit some page of your application. Luckily, Cypress provides a &lt;a href=&quot;../references/configuration&quot;&gt;configuration option&lt;/a&gt; for this. Let&amp;rsquo;s leverage that now.</source>
          <target state="translated">先に考えると、すべてのテストでアプリケーションのいくつかのページにアクセスする必要があるため、このURLを何度も入力することにすぐに気付くでしょう。さいわい、サイプレスはこのための&lt;a href=&quot;../references/configuration&quot;&gt;構成オプション&lt;/a&gt;を提供しています。それを活用しましょう。</target>
        </trans-unit>
        <trans-unit id="ed371ecd9849733f0995b7cf088a4173800b3090" translate="yes" xml:space="preserve">
          <source>If you used &lt;code&gt;npm&lt;/code&gt; to install, Cypress has now been installed to your &lt;code&gt;./node_modules&lt;/code&gt; directory, with its binary executable accessible from &lt;code&gt;./node_modules/.bin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; を使用してインストールした場合、サイプレスは &lt;code&gt;./node_modules&lt;/code&gt; ディレクトリにインストールされ、バイナリ実行可能ファイルは &lt;code&gt;./node_modules/.bin&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c88984849702621314b8577ee1b3520c40840ab3" translate="yes" xml:space="preserve">
          <source>If you want more details about how to write a plugin, we&amp;rsquo;ve written API docs that show you how to work with each plugin event.</source>
          <target state="translated">プラグインの作成方法の詳細が必要な場合は、各プラグインイベントの操作方法を示すAPIドキュメントを用意しています。</target>
        </trans-unit>
        <trans-unit id="40e27bf5b702621afa36f37ab4dd2c0e41604e7d" translate="yes" xml:space="preserve">
          <source>If you want the other guarantees of waiting for an element to become actionable, you should use a different command like &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素がアクション可能になるのを待つという他の保証が必要な場合は、&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;type&quot;&gt; &lt;code&gt;.type()&lt;/code&gt; &lt;/a&gt;などの別のコマンドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d022579bf50db75611ad951fa6175bbb71248639" translate="yes" xml:space="preserve">
          <source>If you want the other guarantees of waiting for an element to become actionable, you should use a different command like &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素が実行可能になるのを待つという他の保証が必要な場合は、&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;などの別のコマンドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="eb10934dcd9f9f094ac02c58ac6ef7a739bde4a6" translate="yes" xml:space="preserve">
          <source>If you want to call a &lt;code&gt;function&lt;/code&gt; on the previously yielded subject, use &lt;a href=&quot;invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以前に生成されたサブジェクトで &lt;code&gt;function&lt;/code&gt; を呼び出す場合は、&lt;a href=&quot;invoke&quot;&gt; &lt;code&gt;.invoke()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4bd0e57f9bf5b98f8a5a67973d6143c187801894" translate="yes" xml:space="preserve">
          <source>If you want to dive into Cypress and edit the code yourself, you can do that. The Cypress code is open source and licensed under an &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;. There are a few tips on getting started that we&amp;rsquo;ve outlined below.</source>
          <target state="translated">サイプレスに飛び込んで自分でコードを編集したい場合は、それを行うことができます。サイプレスコードはオープンソースであり、&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/LICENSE&quot;&gt;MITライセンスで&lt;/a&gt;ライセンスされています。以下に概要を示す、開始するためのヒントがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d976725e9451f0702dad5e61f02b270491fd5a17" translate="yes" xml:space="preserve">
          <source>If you want to download a specific Cypress version for a given platform (Operating System), you can get it from our CDN.</source>
          <target state="translated">特定のプラットフォーム(オペレーティングシステム)用のCypressのバージョンをダウンロードしたい場合は、当社のCDNから入手できます。</target>
        </trans-unit>
        <trans-unit id="e58beb5f6e1d56538516e0b82a79dd41bf84ddc5" translate="yes" xml:space="preserve">
          <source>If you want to get a property that is not a function on the previously yielded subject, use &lt;a href=&quot;its&quot;&gt;&lt;code&gt;.its()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以前に生成されたサブジェクトの関数ではないプロパティを取得する場合は、&lt;a href=&quot;its&quot;&gt; &lt;code&gt;.its()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="41c8e5baabf7ce6dec0fd975fca62b2ab17b92f7" translate="yes" xml:space="preserve">
          <source>If you want to permanently override these options you could do so by setting &lt;a href=&quot;../cypress-api/cypress-server&quot;&gt;&lt;code&gt;Cypress.Server.defaults()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのオプションを永続的に上書きしたい場合は、&lt;a href=&quot;../cypress-api/cypress-server&quot;&gt; &lt;code&gt;Cypress.Server.defaults()&lt;/code&gt; を&lt;/a&gt;設定することで行うことができます。</target>
        </trans-unit>
        <trans-unit id="d44aa2f657e1e58fa32926dbb685b28edca850fd" translate="yes" xml:space="preserve">
          <source>If you wanted to select the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; instead, you could narrow the elements yielded before the &lt;code&gt;.contains()&lt;/code&gt;.</source>
          <target state="translated">代わりに &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; を選択したい場合は、 &lt;code&gt;.contains()&lt;/code&gt; の前に生成された要素を絞り込むことができます。</target>
        </trans-unit>
        <trans-unit id="4752e108ef1f5f601a6569de4952c0938340e9cc" translate="yes" xml:space="preserve">
          <source>If you were to put an &lt;code&gt;.only&lt;/code&gt; on any of the last three tests, they would fail. Each test requires the previous to run in a specific order in order to pass.</source>
          <target state="translated">あなたが入れていた場合は &lt;code&gt;.only&lt;/code&gt; 最後の3つのテストのいずれかで、彼らは失敗するでしょう。各テストでは、合格するために前のテストを特定の順序で実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a47508471ea10dee78dd57cf2fcdc3c1f3bfa39" translate="yes" xml:space="preserve">
          <source>If you were using the environment variable &lt;code&gt;CYPRESS_CI_KEY&lt;/code&gt;, rename it to&lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt;.</source>
          <target state="translated">環境変数 &lt;code&gt;CYPRESS_CI_KEY&lt;/code&gt; を使用していた場合は、名前をCYPRESS_RECORD_KEYに変更し &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b709e350a4aecb7a53788fc3dda1358f417bb3e" translate="yes" xml:space="preserve">
          <source>If you wish to continue chaining commands after your &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt;, you&amp;rsquo;ll need to specify the subject you want to yield to those commands, which you can achieve with a simple return value other than &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Cypress will yield that to the next command for you.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; の&lt;/a&gt;後でコマンドのチェーンを継続する場合は、それらのコマンドに委譲するサブジェクトを指定する必要があります。これは、 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 以外の単純な戻り値で実現できます。サイプレスはそれを次のコマンドに渡します。</target>
        </trans-unit>
        <trans-unit id="bcad8d20c8fa3c62441ed9d593a57637beece082" translate="yes" xml:space="preserve">
          <source>If you would like to change the default option for &lt;strong&gt;ALL&lt;/strong&gt;&lt;code&gt;cy.server()&lt;/code&gt; you &lt;a href=&quot;../cypress-api/cypress-server#Options&quot;&gt;can change this option permanently&lt;/a&gt;.</source>
          <target state="translated">あなたはデフォルトのオプション変更したい場合は&lt;strong&gt;ALLの&lt;/strong&gt; &lt;code&gt;cy.server()&lt;/code&gt; あなたは&lt;a href=&quot;../cypress-api/cypress-server#Options&quot;&gt;永久にこのオプションを変更することができます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca143e0d558ba1dde31fa7556fc88cd2fbd6446c" translate="yes" xml:space="preserve">
          <source>If you would like to check the response data of each response of an aliased route, you can use several &lt;code&gt;cy.wait()&lt;/code&gt; calls.</source>
          <target state="translated">エイリアスされたルートの各応答の応答データを確認したい場合は、いくつかの &lt;code&gt;cy.wait()&lt;/code&gt; 呼び出しを使用できます。</target>
        </trans-unit>
        <trans-unit id="b3e8ddb52d7e1304f23f1df11a7077ca70501382" translate="yes" xml:space="preserve">
          <source>If you would like to interact with your app while the Selector Playground is open, the element highlighting might get in the way. Toggling the highlighting off will allow you to interact with your app more easily.</source>
          <target state="translated">セレクタ プレイグラウンドが開いているときにアプリを操作する場合、要素のハイライトが邪魔になることがあります。ハイライトをオフに切り替えると、アプリをより簡単に操作できるようになります。</target>
        </trans-unit>
        <trans-unit id="257345e20741273bc8aebc5b4227337dc3209c6c" translate="yes" xml:space="preserve">
          <source>If you would like to opt out of sending any exception data to Cypress, you can do so by setting &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; in your system environment variables.</source>
          <target state="translated">サイプレスへの例外データの送信をオプトアウトしたい場合は、システム環境変数で &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; を設定することでそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="d9f828d6b029b5fc2a0dd131813027ec78e819f4" translate="yes" xml:space="preserve">
          <source>If you write &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;custom commands&lt;/a&gt; and provide TypeScript definitions for them, you can use the triple slash directives to show IntelliSense, even if your project uses only JavaScript. For example, if your custom commands are written in &lt;code&gt;cypress/support/commands.js&lt;/code&gt; and you describe them in &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt; use:</source>
          <target state="translated">&lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;カスタムコマンド&lt;/a&gt;を記述してTypeScript定義を提供する場合、プロジェクトでJavaScriptのみを使用している場合でも、トリプルスラッシュディレクティブを使用してIntelliSenseを表示できます。たとえば、カスタムコマンドが &lt;code&gt;cypress/support/commands.js&lt;/code&gt; で記述されており、それらを &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt; に記述している場合は、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="e0c5fb1cd97eadb56927777df1149e1ef56b5749" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like Cypress to automatically send requests that do &lt;em&gt;NOT&lt;/em&gt; match routes the following response:</source>
          <target state="translated">サイプレスがルートに一致し&lt;em&gt;ない&lt;/em&gt;リクエストを自動的に送信するようにしたい場合は、次の応答：</target>
        </trans-unit>
        <trans-unit id="07f9119d637c76f137670adee7ae1ac277c5a2a6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to contribute directly to the Cypress code, we&amp;rsquo;d love to have your help! Please check out our &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to learn about the many ways you can contribute.</source>
          <target state="translated">サイプレスのコードに直接貢献したい場合は、ぜひご協力ください。&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/CONTRIBUTING.md&quot;&gt;寄稿&lt;/a&gt;できるさまざまな方法については、寄稿ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a31bcb7fcf9edc392674ed9f19ff3eab0d7e8c9f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to learn more about handling asynchronous Cypress Commands please read our &lt;a href=&quot;variables-and-aliases&quot;&gt;Core Concept Guide&lt;/a&gt;.</source>
          <target state="translated">非同期サイプレスコマンドの処理の詳細については、&lt;a href=&quot;variables-and-aliases&quot;&gt;コアコンセプトガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6612ee1c4997412de093222d9c00de68da458fcd" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to override these built-in checks, provide the &lt;code&gt;{force: true}&lt;/code&gt; option to the action itself. Refer to each command for their available options, additional use cases, and argument usage.</source>
          <target state="translated">これらの組み込みチェックをオーバーライドする場合は、アクション自体に &lt;code&gt;{force: true}&lt;/code&gt; オプションを提供します。使用可能なオプション、追加の使用例、および引数の使用法については、各コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="79a3552ac4e20ee3c91582932cf9a9765ac3c173" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to override this, explicitly pass in &lt;code&gt;headers&lt;/code&gt; as an object literal.</source>
          <target state="translated">これをオーバーライドする場合は、 &lt;code&gt;headers&lt;/code&gt; をオブジェクトリテラルとして明示的に渡します。</target>
        </trans-unit>
        <trans-unit id="397a0ada5ff3e4ff64036bb5f68f8e7335b5f4ed" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to see (the huge) stream of events that Cypress emits you can pop open your Dev Tools and write this line in the console.</source>
          <target state="translated">サイプレスが発行するイベントの（巨大な）ストリームを表示したい場合は、Dev Toolsをポップオープンして、コンソールにこの行を書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="bc38c2776039636f87a8d14ddb692422627c92a4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re a modern JS programmer you might hear &amp;ldquo;asynchronous&amp;rdquo; and think: &lt;strong&gt;why can&amp;rsquo;t I just use &lt;code&gt;async/await&lt;/code&gt;&lt;/strong&gt; instead of learning some proprietary API?</source>
          <target state="translated">現代のJSプログラマーであれば、「非同期」と聞いて考えるかもしれません。独自のAPIを学習する代わりに、&lt;strong&gt;なぜ &lt;code&gt;async/await&lt;/code&gt; を&lt;/strong&gt;&lt;strong&gt;使用できないの&lt;/strong&gt;でしょうか。</target>
        </trans-unit>
        <trans-unit id="aab1685bc6de35aba42818473854d58988d957ec" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re developing using a modern JS-based web application stack then you&amp;rsquo;ve likely got support for some form of hot module replacement which is responsible for watching your application code&amp;mdash;HTML, CSS, JS, etc.&amp;mdash;and transparently reloading your application in response to changes.</source>
          <target state="translated">最新のJSベースのWebアプリケーションスタックを使用して開発している場合は、アプリケーションコード（HTML、CSS、JSなど）を監視し、透過的に再ロードする何らかの形式のホットモジュールの置換がサポートされている可能性があります。変更に応じたアプリケーション。</target>
        </trans-unit>
        <trans-unit id="b0151c4866ea1f65ef47c82597be6b39f46675b0" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;native Promises&lt;/a&gt; the Cypress &lt;code&gt;.then()&lt;/code&gt; works the same way. You can continue to nest more Cypress commands inside of the &lt;code&gt;.then()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;ネイティブPromiseに&lt;/a&gt;慣れている場合、サイプレスの &lt;code&gt;.then()&lt;/code&gt; は同じように機能します。 &lt;code&gt;.then()&lt;/code&gt; 内にさらにサイプレスコマンドをネストすることができます。</target>
        </trans-unit>
        <trans-unit id="6398aeebd96fdad7efb346e26e781b17073909fb" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with Cypress commands already, but find yourself using &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; then you&amp;rsquo;re typically trying to do one of two things:</source>
          <target state="translated">サイプレスのコマンドに慣れているが、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; を使用している場合は、通常、次の2つのいずれかを実行しようとしています。</target>
        </trans-unit>
        <trans-unit id="90a3204f17130c904eee3d822ba7552a50c50835" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.</source>
          <target state="translated">JavaScriptでのテストの記述に慣れている場合は、サイプレスでのテストの記述が簡単になります。</target>
        </trans-unit>
        <trans-unit id="48163e06e6271e83b1007a0e84670bdca1d5715d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having an issue during installation of Cypress, try removing the contents of the Cypress cache.</source>
          <target state="translated">サイプレスのインストール中に問題が発生した場合は、サイプレスキャッシュの内容を削除してみてください。</target>
        </trans-unit>
        <trans-unit id="90e3f49a1c0d7c9e8171ff957e37dacab6d491b4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re in a situation where you don&amp;rsquo;t control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by &lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;disabling web security&lt;/a&gt;.</source>
          <target state="translated">コードを制御できない状況にある場合、またはこれを回避できない場合は、&lt;a href=&quot;web-security#Disabling-Web-Security&quot;&gt;Webセキュリティを無効にすること&lt;/a&gt;でサイプレスのこの制限を回避できます。</target>
        </trans-unit>
        <trans-unit id="af78d3b5edaa3283e443ab02165983526a9cf924" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in understanding more, we&amp;rsquo;ve written &lt;a href=&quot;../references/trade-offs&quot;&gt;an entire guide&lt;/a&gt; on this topic.</source>
          <target state="translated">もっと理解したい場合は、このトピックに関する&lt;a href=&quot;../references/trade-offs&quot;&gt;完全なガイド&lt;/a&gt;を作成しました。</target>
        </trans-unit>
        <trans-unit id="cf577a2dcd8a201ed583c60ac9f9aa31d097fc31" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re looking to understand &lt;strong&gt;how&lt;/strong&gt; to use these assertions please read about assertions in our &lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;Introduction to Cypress&lt;/a&gt;.</source>
          <target state="translated">これらのアサーションの使用&lt;strong&gt;方法&lt;/strong&gt;を理解したい場合は&lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;、サイプレスの概要&lt;/a&gt;でアサーションについてお読みください。</target>
        </trans-unit>
        <trans-unit id="8af4808d5bb633153c33775dcd081b988cb4cb54" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using Node or &lt;code&gt;npm&lt;/code&gt; in your project or you just want to try Cypress out quickly, you can always &lt;a href=&quot;https://download.cypress.io/desktop&quot;&gt;download Cypress directly from our CDN&lt;/a&gt;.</source>
          <target state="translated">プロジェクトでNodeまたは &lt;code&gt;npm&lt;/code&gt; を使用していない場合、またはサイプレスをすぐに試してみたい場合は、いつでも&lt;a href=&quot;https://download.cypress.io/desktop&quot;&gt;CDNから直接サイプレスをダウンロードできます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1906afa3a0aaf176eb25afa3593af9ececb7a879" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re running &lt;code&gt;node.js&lt;/code&gt; on your server, you might add a &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;beforeEach&lt;/code&gt; hook that executes an &lt;code&gt;npm&lt;/code&gt; task.</source>
          <target state="translated">サーバーで &lt;code&gt;node.js&lt;/code&gt; を実行している場合は、 &lt;code&gt;npm&lt;/code&gt; タスクを実行する &lt;code&gt;before&lt;/code&gt; または &lt;code&gt;beforeEach&lt;/code&gt; フックを追加できます。</target>
        </trans-unit>
        <trans-unit id="29cd81df6830db2d21c23a922f4a678d201d46b6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re struggling with writing the correct pattern you can iterate much faster by testing directly in your Developer Tools console.</source>
          <target state="translated">正しいパターンの作成に苦労している場合は、開発者ツールコンソールで直接テストすることで、はるかに速く反復できます。</target>
        </trans-unit>
        <trans-unit id="db72c14e3605aa39163bff502db3500deba464f9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using our &lt;a href=&quot;module-api&quot;&gt;Module API&lt;/a&gt; then you can write a script that boots and then shuts down the server later. As a bonus you can easily work with the results and do other things.</source>
          <target state="translated">&lt;a href=&quot;module-api&quot;&gt;モジュールAPI&lt;/a&gt;を使用している場合は、後でサーバーを起動してシャットダウンするスクリプトを作成できます。おまけとして、結果を簡単に操作して、他のことを行うことができます。</target>
        </trans-unit>
        <trans-unit id="857911eb4c5c9c4babb34646680345a6f5337c69" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using source control, we recommend that you check your &lt;code&gt;cypress.json&lt;/code&gt;, including the &lt;code&gt;projectId&lt;/code&gt;, into source control. If you don&amp;rsquo;t want your &lt;code&gt;projectId&lt;/code&gt; visible in your source code you can set it as an environment variable using the name &lt;code&gt;CYPRESS_PROJECT_ID&lt;/code&gt;. The exact mechanism for doing so depends on your system but could be as simple as:</source>
          <target state="translated">ソース管理を使用している場合は、 &lt;code&gt;cypress.json&lt;/code&gt; を含む &lt;code&gt;projectId&lt;/code&gt; をソース管理にチェックインすることをお勧めします。あなたはしたくない場合は &lt;code&gt;projectId&lt;/code&gt; ソースコードに目に見えるあなたは名前の使用環境変数として設定することができ &lt;code&gt;CYPRESS_PROJECT_ID&lt;/code&gt; を。そのための正確なメカニズムはシステムによって異なりますが、次のように単純な場合もあります。</target>
        </trans-unit>
        <trans-unit id="b3ca61cf369f9cb670a267457e5be980da07e5ba" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re working on a &lt;code&gt;search_spec.js&lt;/code&gt; file and want to compose several repeatable actions together, you should first ask yourself:</source>
          <target state="translated">&lt;code&gt;search_spec.js&lt;/code&gt; ファイルで作業していて、いくつかの繰り返し可能なアクションを一緒に構成したい場合は、まず自分自身に尋ねる必要があります。</target>
        </trans-unit>
        <trans-unit id="c09b6d1a0633f326d322ec72835ebdcb06ab6f25" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve been reading along, then you should already have a grasp on why trying to implement conditional code with asynchronous rendering is not a good idea. If the test writer cannot accurately predict the given state of the system, then neither can Cypress. Error handling offers no additional proof this can be done deterministically.</source>
          <target state="translated">一緒に読んでいるのであれば、非同期レンダリングで条件付きコードを実装しようとすることがなぜ良い考えではないのか、すでに理解しているはずです。テストライターがシステムの特定の状態を正確に予測できない場合、サイプレスも予測できません。エラー処理は、これが決定論的に実行できる追加の証拠を提供しません。</target>
        </trans-unit>
        <trans-unit id="d152a777af1651a876c73e112b5e83c8a153b2f1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve started your server, then you should see your application loaded and working.</source>
          <target state="translated">サーバーを起動している場合は、アプリケーションが読み込まれ、機能していることがわかります。</target>
        </trans-unit>
        <trans-unit id="5a51b93fb470dc449759d0d8f4c8df6dcf9764ba" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve used &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; before, you may be used to querying for elements like this:</source>
          <target state="translated">以前に&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;を使用したことがある場合、次のような要素のクエリに慣れている可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e62c43f907228e54c54a15b78209d390669cb0b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve worked in &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; before, you will recognize that &lt;code&gt;.and()&lt;/code&gt; matches the same fluent assertion syntax.</source>
          <target state="translated">以前に&lt;a href=&quot;http://chaijs.com/&quot;&gt;Chaiで&lt;/a&gt;作業したことがある場合は、 &lt;code&gt;.and()&lt;/code&gt; が同じFluentアサーション構文と一致していることに気付くでしょう。</target>
        </trans-unit>
        <trans-unit id="6301358721c49fd060835e6bf5ce15ce964f5320" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;pluginsFile&lt;/code&gt; has an uncaught exception, an unhandled rejection from a promise, a syntax error, or anything else - we will automatically catch those and display them to you inside of the console and even in the Test Runner itself.</source>
          <target state="translated">あなたの場合は &lt;code&gt;pluginsFile&lt;/code&gt; がキャッチされない例外、約束、構文エラー、または何か他のものから未処理の拒絶反応を持っている-私たちは、自動的にそれらをキャッチし、コンソールの内部でもテストランナー自体にあなたにそれらを表示します。</target>
        </trans-unit>
        <trans-unit id="d45a4ee8912fe4bbfb83ed748f7b205163bde32a" translate="yes" xml:space="preserve">
          <source>If your Record Key is accidentally exposed, you should &lt;a href=&quot;#Delete-record-key&quot;&gt;delete it&lt;/a&gt; and &lt;a href=&quot;#Create-new-record-key&quot;&gt;create a new one&lt;/a&gt;.</source>
          <target state="translated">レコードキーが誤って公開された場合は、&lt;a href=&quot;#Delete-record-key&quot;&gt;削除して&lt;/a&gt;&lt;a href=&quot;#Create-new-record-key&quot;&gt;新しい&lt;/a&gt;キーを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="450c0c90faf8c245e199c06666424f8562cf7971" translate="yes" xml:space="preserve">
          <source>If your administrator has set any of the following Chrome GPOs, it can prevent your tests from running in Chrome:</source>
          <target state="translated">管理者が以下の Chrome GPO のいずれかを設定している場合、Chrome でテストが実行できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c918f1c46e4a769dd4560399b137e05d9f18db1d" translate="yes" xml:space="preserve">
          <source>If your app is translated into multiple languages for i18n, make sure you consider the implications of using user-facing text to find DOM elements!</source>
          <target state="translated">アプリが i18n のために複数の言語に翻訳されている場合は、DOM 要素を見つけるためにユーザーが直面するテキストを使用することの意味合いを考慮してください。</target>
        </trans-unit>
        <trans-unit id="d94c360e593adaedc1e2b08f74fc2d7133f24347" translate="yes" xml:space="preserve">
          <source>If your application is server side rendered without JavaScript that asynchronously modifies the DOM - congratulations, you can easily do conditional testing on the DOM!</source>
          <target state="translated">あなたのアプリケーションが JavaScript を使わずにサーバーサイドでレンダリングされ、非同期的に DOM を変更する場合-おめでとうございます、DOM で条件付きテストを簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="a2671c271ca9fb3c0f6865e39e2fe992db49b6b5" translate="yes" xml:space="preserve">
          <source>If your back end server handling the &lt;code&gt;/submit&lt;/code&gt; route does a &lt;code&gt;30x&lt;/code&gt; redirect to a different superdomain, you will get a &lt;code&gt;cross origin&lt;/code&gt; error.</source>
          <target state="translated">&lt;code&gt;/submit&lt;/code&gt; ルートを処理するバックエンドサーバーが別のスーパードメインに &lt;code&gt;30x&lt;/code&gt; リダイレクトすると、 &lt;code&gt;cross origin&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e638b849e3e497b9d491a634ddbf0794dd8e2aa2" translate="yes" xml:space="preserve">
          <source>If your callback function returns a &lt;code&gt;Promise&lt;/code&gt;, it will be awaited before iterating over the next element in the collection.</source>
          <target state="translated">コールバック関数が &lt;code&gt;Promise&lt;/code&gt; を返す場合、コレクション内の次の要素を反復する前にそれが待機されます。</target>
        </trans-unit>
        <trans-unit id="7db70995f28dedb8765483bbaeaf1301c0dcc648" translate="yes" xml:space="preserve">
          <source>If your end-to-end tests become full of assertions checking visibility, color and other style properties, it might be time to start using visual diffing to verify the page appearance.</source>
          <target state="translated">エンドツーエンドのテストが、可視性や色、その他のスタイル プロパティをチェックするアサーションでいっぱいになってきたら、ページの外観を検証するためにビジュアル ディフティングを使い始める時期かもしれません。</target>
        </trans-unit>
        <trans-unit id="afe8980f8c12c10868130b21bebe1afa23668b71" translate="yes" xml:space="preserve">
          <source>If your environment variables match a standard configuration key, then instead of setting an &lt;code&gt;environment variable&lt;/code&gt; they will instead override the configuration value.</source>
          <target state="translated">環境変数が標準の構成キーと一致する場合、環境変数を設定する代わりに、 &lt;code&gt;environment variable&lt;/code&gt; は構成値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="7bb90797045230df4a57116841d7511b0ecb17e2" translate="yes" xml:space="preserve">
          <source>If your organization signs up for one of our &lt;a href=&quot;https://www.cypress.io/pricing/&quot;&gt;paid plans&lt;/a&gt;, you can get dedicated email support, which gives you one-on-one help from our team.</source>
          <target state="translated">組織が&lt;a href=&quot;https://www.cypress.io/pricing/&quot;&gt;有料プランの&lt;/a&gt; 1つにサインアップすると、専用の電子メールサポートを利用できます。これにより、チームから1対1のサポートが提供されます。</target>
        </trans-unit>
        <trans-unit id="e83f4d1be8c008408e3a808dcebb5bde0df59a60" translate="yes" xml:space="preserve">
          <source>If your project has a large number of tests, it can take a long time for tests to complete running serially on one machine. Running tests in parallel across many virtual machines can save your team time and money when running tests in Continuous Integration (CI).</source>
          <target state="translated">プロジェクトに多数のテストがある場合、1 台のマシン上で連続的にテストを実行していると、テストが完了するまでに長い時間がかかることがあります。継続的インテグレーション(CI)でテストを実行する際に、多くの仮想マシンでテストを並行して実行することで、チームの時間とコストを節約できます。</target>
        </trans-unit>
        <trans-unit id="972a2e4f1d881a662f849d9da6c11e1da1fc50e3" translate="yes" xml:space="preserve">
          <source>If your server uses hapi, include &lt;code&gt;middleware/hapi&lt;/code&gt;</source>
          <target state="translated">サーバーがhapiを使用している場合は、 &lt;code&gt;middleware/hapi&lt;/code&gt; 含めます</target>
        </trans-unit>
        <trans-unit id="35dc3ac6f9d4bc1a2b69448fca5b7e96b1efcd96" translate="yes" xml:space="preserve">
          <source>If your site embeds an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; that is a cross-origin frame, Cypress will not be able to automate or communicate with this &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">サイトにクロスオリジンフレームである &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; が埋め込まれている場合、サイプレスはこの &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; を自動化したり通信したりできません。</target>
        </trans-unit>
        <trans-unit id="4cc14e90118f684031598010e6951eeee1954f4f" translate="yes" xml:space="preserve">
          <source>If your spec files have a long run duration, you might notice a time gap between a finished spec and a new spec starting during &lt;code&gt;cypress run&lt;/code&gt;. During this time, Cypress is encoding the captured video and possibly uploading it to the Dashboard.</source>
          <target state="translated">スペックファイルの実行時間が長い場合、 &lt;code&gt;cypress run&lt;/code&gt; 中に、完成したスペックと新しいスペックの間に時間差が生じることがあります。この間、サイプレスはキャプチャしたビデオをエンコードし、場合によってはダッシュボードにアップロードします。</target>
        </trans-unit>
        <trans-unit id="c9763b7614af0243e3fafa15044725c99cce0582" translate="yes" xml:space="preserve">
          <source>If your specs files are in TypeScript, you should include the TypeScript definition file, &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt;, with the rest of the source files.</source>
          <target state="translated">スペックファイルがTypeScriptである場合は、TypeScript定義ファイル &lt;code&gt;cypress/support/index.d.ts&lt;/code&gt; を残りのソースファイルに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="4566c8c95f04052245fda9e142ccfec9ec55f3e4" translate="yes" xml:space="preserve">
          <source>If, for example, the source file is &lt;code&gt;spec.coffee&lt;/code&gt;, the preprocessor should:</source>
          <target state="translated">たとえば、ソースファイルが &lt;code&gt;spec.coffee&lt;/code&gt; の場合、プリプロセッサは次のことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="840c871c346b319879c8eb853624aaf51bf83ae9" translate="yes" xml:space="preserve">
          <source>If, for whatever reason, Cypress cannot communicate with the automation servers, your testing session will immediately end and you&amp;rsquo;ll have the ability to re-spawn the browser.</source>
          <target state="translated">何らかの理由でサイプレスがオートメーションサーバーと通信できない場合、テストセッションはすぐに終了し、ブラウザを再起動することができます。</target>
        </trans-unit>
        <trans-unit id="6e0fee1c2641dd555f1c1bad3340ac9feb443a86" translate="yes" xml:space="preserve">
          <source>If, hypothetically, you have written this command because it &lt;strong&gt;has&lt;/strong&gt; to run before the next test does, then the absolute &lt;strong&gt;worst place&lt;/strong&gt; to put it is in an &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;afterEach&lt;/code&gt; hook.</source>
          <target state="translated">仮に、次のテストが実行される前に実行する必要&lt;strong&gt;がある&lt;/strong&gt;ためにこのコマンドを記述した場合、それ&lt;strong&gt;を配置&lt;/strong&gt;するための絶対&lt;strong&gt;最悪の場所&lt;/strong&gt;は &lt;code&gt;after&lt;/code&gt; または &lt;code&gt;afterEach&lt;/code&gt; フックです。</target>
        </trans-unit>
        <trans-unit id="295b7cc4ef2ab9f4a9603b7774c355dfa1b31a2a" translate="yes" xml:space="preserve">
          <source>Iframes are now correctly handled when we restore snapshots. Previously, we removed iframes which would change the page layout and the hitboxes&amp;rsquo; coordinates we drew were wrong. Now we insert iframe placeholders that prevent the page layout from changing. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/234&quot;&gt;#234&lt;/a&gt;.</source>
          <target state="translated">スナップショットを復元するときにiframeが正しく処理されるようになりました。以前は、ページレイアウトを変更するiframeを削除し、描画したヒットボックスの座標が間違っていました。次に、ページレイアウトが変更されないようにするiframeプレースホルダーを挿入します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/234&quot;&gt;＃234を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="7ef38483a93250e520f89a8bbbebfc58b0b8455f" translate="yes" xml:space="preserve">
          <source>Ignore built-in error checking</source>
          <target state="translated">組み込みのエラーチェックを無視する</target>
        </trans-unit>
        <trans-unit id="ed9917af3f24331b10fa356d066f586ae0104d1a" translate="yes" xml:space="preserve">
          <source>Ignores certificate errors.</source>
          <target state="translated">証明書のエラーを無視します。</target>
        </trans-unit>
        <trans-unit id="86babcad8f01e1bf1a0b598ae0e6c8ff84262776" translate="yes" xml:space="preserve">
          <source>Image Fixture</source>
          <target state="translated">イメージフィクスチャ</target>
        </trans-unit>
        <trans-unit id="c6710ca3583d7013d43636ee35c7fd947d72dc23" translate="yes" xml:space="preserve">
          <source>Image fixtures are sent as &lt;code&gt;base64&lt;/code&gt;</source>
          <target state="translated">画像フィクスチャは &lt;code&gt;base64&lt;/code&gt; として送信されます</target>
        </trans-unit>
        <trans-unit id="b956a40d46b4cd0728e2de70828549219afdf868" translate="yes" xml:space="preserve">
          <source>Image fixtures will be sent back as a &lt;code&gt;base64&lt;/code&gt; string.</source>
          <target state="translated">画像フィクスチャは &lt;code&gt;base64&lt;/code&gt; 文字列として返送されます。</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="4513b6761ce835e6212684f50a737b86fcbdf6d4" translate="yes" xml:space="preserve">
          <source>Imagine we load the above instrumented source file from our test spec file. Immediately some counters will be incremented!</source>
          <target state="translated">上記のインストルメントされたソースファイルをテスト仕様ファイルからロードしたとします。すぐにいくつかのカウンタがインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="1e83d6215f35398bb51293f5f120782b52a65a7c" translate="yes" xml:space="preserve">
          <source>Imagine you have a button:</source>
          <target state="translated">ボタンを持っていると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="24b4ed9bf98f198033e93677c87fd1e3d8ac7052" translate="yes" xml:space="preserve">
          <source>Imagine you have a nested navigation structure where the user must hover over and move the mouse in a very specific pattern to reach the desired link.</source>
          <target state="translated">ユーザーが目的のリンクに到達するためには、マウスを特定のパターンで移動させ、上にカーソルを置く必要がある入れ子構造のナビゲーション構造を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="e12ad3c8e988f212753edfa4bc105c46859f3cf9" translate="yes" xml:space="preserve">
          <source>Imagine you&amp;rsquo;re testing the functionality of a &lt;strong&gt;Shopping Cart&lt;/strong&gt;. To test this, you need the ability to add products to that cart. Well where do the products come from? Should you use your UI to login to the admin area, and then create all of the products including their descriptions, categories, and images? Once that&amp;rsquo;s done should you then visit each product and add each one to the shopping cart?</source>
          <target state="translated">&lt;strong&gt;ショッピングカートの&lt;/strong&gt;機能をテストしているとしましょう。これをテストするには、そのカートに商品を追加する機能が必要です。さて、製品はどこから来たのですか？UIを使用して管理領域にログインし、説明、カテゴリ、画像を含むすべての製品を作成する必要がありますか？それが終わったら、各製品にアクセスして、それぞれをショッピングカートに追加する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="566491edc9d62340e3c6a132a8942efac39e2f06" translate="yes" xml:space="preserve">
          <source>Implicit Subjects</source>
          <target state="translated">暗黙の主語</target>
        </trans-unit>
        <trans-unit id="cf477996796d1f1e0450b8ac052a7dd0a9274bd6" translate="yes" xml:space="preserve">
          <source>Implicit form submission behavior</source>
          <target state="translated">暗黙のフォーム送信動作</target>
        </trans-unit>
        <trans-unit id="ceea8996382aff9fe78b5e01926378f70c5f2ea7" translate="yes" xml:space="preserve">
          <source>Improved &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;cypress ci&lt;/code&gt; headless output. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/306&quot;&gt;#306&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;cypress ci&lt;/code&gt; ヘッドレス出力の改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/306&quot;&gt;＃306を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="cbc813306f6acf875228b7315bd382b47baa1b66" translate="yes" xml:space="preserve">
          <source>Improved &lt;code&gt;onConsole&lt;/code&gt; message for &lt;a href=&quot;../../api/commands/focused&quot;&gt;&lt;code&gt;cy.focused()&lt;/code&gt;&lt;/a&gt; when no element was returned. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/23&quot;&gt;#23&lt;/a&gt;.</source>
          <target state="translated">要素が返されなかった場合の&lt;a href=&quot;../../api/commands/focused&quot;&gt; &lt;code&gt;cy.focused()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;onConsole&lt;/code&gt; メッセージを改善しました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/23&quot;&gt;＃23を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="8be175fa25df67e38fdd3f4a4b7899db413fbd67" translate="yes" xml:space="preserve">
          <source>Improved accessibility of Test Runner for screen readers. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3850&quot;&gt;#3850&lt;/a&gt;.</source>
          <target state="translated">スクリーンリーダーのテストランナーのアクセシビリティが向上しました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3850&quot;&gt;＃3850&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f2a13dc80d0bdb5e140f0519a5c90516c8387df" translate="yes" xml:space="preserve">
          <source>Improved clicking algorithm to reduce edge cases where element could not be clicked but should have been able to be clicked.</source>
          <target state="translated">要素がクリックできなかったが、クリックできるはずの要素がクリックできなかった場合のエッジケースを減らすために、クリックアルゴリズムを改善しました。</target>
        </trans-unit>
        <trans-unit id="26c3840709d197d5090b792b8c718a0588711bf2" translate="yes" xml:space="preserve">
          <source>Improved command errors and normalized many of them. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/137&quot;&gt;#137&lt;/a&gt;.</source>
          <target state="translated">コマンドエラーが改善され、その多くが正規化されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/137&quot;&gt;＃137を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="0079ba670fc7406dd72cb13a76e2e79ed8e6cc8c" translate="yes" xml:space="preserve">
          <source>Improved command subject validation error messages.</source>
          <target state="translated">コマンド件名の検証エラーメッセージを改善しました。</target>
        </trans-unit>
        <trans-unit id="74dfd904cdd11d00b81ae50365c01467a12398f8" translate="yes" xml:space="preserve">
          <source>Improved crash reporting when the binary throws an uncaught error.</source>
          <target state="translated">バイナリが捕捉できないエラーをスローした場合のクラッシュ報告を改善しました。</target>
        </trans-unit>
        <trans-unit id="06848fcd0a27917f97653952ba6663ed45f9ac7d" translate="yes" xml:space="preserve">
          <source>Improved displaying list of Tutorials, Recipes, Applications, and Docker examples</source>
          <target state="translated">チュートリアル、レシピ、アプリケーション、Dockerサンプルの一覧表示を改善しました。</target>
        </trans-unit>
        <trans-unit id="d901ffa123fb70088a50387566c488b5b3de71a1" translate="yes" xml:space="preserve">
          <source>Improved dozens of error messages.</source>
          <target state="translated">数十件のエラーメッセージを改善しました。</target>
        </trans-unit>
        <trans-unit id="e822ae58f01d47a3917a83810d36528353a05695" translate="yes" xml:space="preserve">
          <source>Improved element display in Command Log when multiple elements are part of an assertion. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/96&quot;&gt;#96&lt;/a&gt;.</source>
          <target state="translated">複数の要素がアサーションの一部である場合のコマンドログでの要素表示の改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/96&quot;&gt;＃96を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="c89f05a9dad058acf481a167fb569de38b4b1279" translate="yes" xml:space="preserve">
          <source>Improved error message displayed for &lt;code&gt;cypress cache&lt;/code&gt; to not display &lt;code&gt;[object Object]&lt;/code&gt; and made &lt;code&gt;--help&lt;/code&gt; labels more descriptive. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2589&quot;&gt;#2589&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress cache&lt;/code&gt; に表示されるエラーメッセージが &lt;code&gt;[object Object]&lt;/code&gt; を表示しないように改善され、 &lt;code&gt;--help&lt;/code&gt; ラベルがよりわかりやすくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2589&quot;&gt;＃2589を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="22f67255037b6cc1bc249cb0edbe6a12a30b661e" translate="yes" xml:space="preserve">
          <source>Improved error message when attempting to use &lt;code&gt;cy.agents&lt;/code&gt; or anything else which requires a remote sandbox. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/12&quot;&gt;#12&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cy.agents&lt;/code&gt; またはリモートサンドボックスを必要とするその他のものを使用しようとしたときのエラーメッセージが改善されました。修正&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/12&quot;&gt;＃12&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b65001dddbe732d7b52b947c65b159a18865ed4d" translate="yes" xml:space="preserve">
          <source>Improved error messages for &lt;a href=&quot;../../api/commands/readfile&quot;&gt;&lt;code&gt;cy.readFile()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/writefile&quot;&gt;&lt;code&gt;cy.writeFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/readfile&quot;&gt; &lt;code&gt;cy.readFile()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../api/commands/writefile&quot;&gt; &lt;code&gt;cy.writeFile()&lt;/code&gt; の&lt;/a&gt;エラーメッセージが改善されました。</target>
        </trans-unit>
        <trans-unit id="2a064c031c08696360e6bbf4e8b948a04debcb9d" translate="yes" xml:space="preserve">
          <source>Improved error messages for invalid &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt; arguments. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/20&quot;&gt;#20&lt;/a&gt;.</source>
          <target state="translated">無効な&lt;a href=&quot;../../api/commands/route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; &lt;/a&gt;引数のエラーメッセージが改善されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/20&quot;&gt;＃20を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="252e7ddbffce22ae202c3a169dfa5b9285348f95" translate="yes" xml:space="preserve">
          <source>Improved error messages for traversal failures. Errors now include the parent context DOM element. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/11&quot;&gt;#11&lt;/a&gt;.</source>
          <target state="translated">トラバーサル障害のエラーメッセージが改善されました。エラーには、親コンテキストのDOM要素が含まれるようになりました。修正&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/11&quot;&gt;＃11&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc2e133b65b998b88433f9a583a813183a950144" translate="yes" xml:space="preserve">
          <source>Improved error when &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; fails. The request parameters are now included in the error. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/134&quot;&gt;#134&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;が失敗したときのエラーを改善しました。リクエストパラメータがエラーに含まれるようになりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/134&quot;&gt;＃134&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6068976492ac9da6b70d05c82e9cb604fa898dc" translate="yes" xml:space="preserve">
          <source>Improved errors shown when opening a project in the Desktop Application. The design is more readable and the error&amp;rsquo;s stack trace is now expandable. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2955&quot;&gt;#2955&lt;/a&gt;.</source>
          <target state="translated">デスクトップアプリケーションでプロジェクトを開くときに表示されるエラーが改善されました。デザインが読みやすくなり、エラーのスタックトレースが拡張可能になりました。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2955&quot;&gt;＃2955&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a1ba1aecea97b21b1e473a7bbe2a28a4e914e288" translate="yes" xml:space="preserve">
          <source>Improved experience of search in Desktop Application when there are no results. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3146&quot;&gt;#3146&lt;/a&gt;.</source>
          <target state="translated">結果がない場合のデスクトップアプリケーションでの検索のエクスペリエンスの向上。アドレス&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3146&quot;&gt;＃3146&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddf104430b20ab94d5d8562c1dcce5c4ebcac9b3" translate="yes" xml:space="preserve">
          <source>Improved headless performance, and added optimizations for early and often GC.</source>
          <target state="translated">ヘッドレス性能を向上させ、早い時期や頻繁にGCを行う場合の最適化を追加しました。</target>
        </trans-unit>
        <trans-unit id="aaccc99da6954af13e6294a931c8df21f58f9ca7" translate="yes" xml:space="preserve">
          <source>Improved initial Desktop Application startup performance by about &lt;code&gt;1.5s&lt;/code&gt;.</source>
          <target state="translated">初期デスクトップアプリケーションの起動パフォーマンスが約 &lt;code&gt;1.5s&lt;/code&gt; 向上しました。</target>
        </trans-unit>
        <trans-unit id="4aaecbabaabfac9f34870586de9a9edaebe6db4d" translate="yes" xml:space="preserve">
          <source>Improved options logging and argument logging for all commands. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/8&quot;&gt;#8&lt;/a&gt;.</source>
          <target state="translated">すべてのコマンドのオプションロギングと引数ロギングの改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/8&quot;&gt;＃8を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="55e75b36e99319d57066673a634846441b91874a" translate="yes" xml:space="preserve">
          <source>Improved performance by preventing &lt;code&gt;snapshots&lt;/code&gt; from being taken during headless runs.</source>
          <target state="translated">ヘッドレス実行中に &lt;code&gt;snapshots&lt;/code&gt; が取得されないようにすることによるパフォーマンスの向上。</target>
        </trans-unit>
        <trans-unit id="da41a6fab9284055cae9ffba69b0c0519d609ab3" translate="yes" xml:space="preserve">
          <source>Improved performance of formatting fixtures.</source>
          <target state="translated">フォーマットフィクスチャのパフォーマンスを向上させました。</target>
        </trans-unit>
        <trans-unit id="79354d3b6c2b87282c39b3ad05ff13372bd1c3e0" translate="yes" xml:space="preserve">
          <source>Improved performance when running &lt;code&gt;cypress run&lt;/code&gt; by caching the last bundled spec. This prevents having the same spec file rebundled each time &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; caused a full page navigation. You should see a moderate improvement in test run time. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/370&quot;&gt;#370&lt;/a&gt;.</source>
          <target state="translated">最後にバンドルされた仕様をキャッシュ &lt;code&gt;cypress run&lt;/code&gt; により、cypress runを実行するときのパフォーマンスが向上しました。これにより、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;がページ全体をナビゲーションするたびに同じスペックファイルが再バンドルされるのを防ぎます。テストの実行時間は中程度に改善されるはずです。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/370&quot;&gt;＃370を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="703f10390cde2fb7bb83b317e4b2ace6524a7e5f" translate="yes" xml:space="preserve">
          <source>Improved reliability for displaying the remote url.</source>
          <target state="translated">リモートURLの表示の信頼性を向上させました。</target>
        </trans-unit>
        <trans-unit id="16e39974c1762c69a407c7513a4d370ee3cb0335" translate="yes" xml:space="preserve">
          <source>Improved the &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74#issuecomment-208422453&quot;&gt;error message&lt;/a&gt; displayed to users on Windows attempting to download the Cypress Desktop app.</source>
          <target state="translated">サイプレスデスクトップアプリをダウンロードしようとするWindowsのユーザーに表示される&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74#issuecomment-208422453&quot;&gt;エラーメッセージを&lt;/a&gt;改善しました。</target>
        </trans-unit>
        <trans-unit id="67acb5ba4500405f155be15da50cb281965298a5" translate="yes" xml:space="preserve">
          <source>Improved the calculations to calculate an elements visibility. Additionally updated error messages to be clearer whenever an element isn&amp;rsquo;t considered visible. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/613&quot;&gt;#613&lt;/a&gt;</source>
          <target state="translated">要素の可視性を計算するように計算を改善しました。さらに、要素が可視と見なされない場合は常にエラーメッセージがより明確になるように更新されました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/613&quot;&gt;＃613の&lt;/a&gt;修正</target>
        </trans-unit>
        <trans-unit id="b88681d8483932fe365c217e142947af1e1bba42" translate="yes" xml:space="preserve">
          <source>Improved the element detachment error messages (when you try to interact with an element that&amp;rsquo;s become stale / detached from the document).</source>
          <target state="translated">要素の切り離しのエラーメッセージを改善しました（古くなった、またはドキュメントから切り離された要素を操作しようとした場合）。</target>
        </trans-unit>
        <trans-unit id="92596101c48f6d47c1bc13230dd426124e45de22" translate="yes" xml:space="preserve">
          <source>Improved the reporter&amp;rsquo;s responsive design so controls still show at narrower widths. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/544&quot;&gt;#544&lt;/a&gt;.</source>
          <target state="translated">レポーターのレスポンシブデザインを改善し、コントロールがより狭い幅で表示されるようにしました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/544&quot;&gt;＃544を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="2a25e1d51c3d2713bcd39f6d37f1e5f69d3127b7" translate="yes" xml:space="preserve">
          <source>Improved verifying the binary for the first time after an &lt;code&gt;npm install&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/709&quot;&gt;#709&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; 後、初めてのバイナリ検証の改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/709&quot;&gt;＃709を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="eca4359f4f67e96fd9312096e6628697698cac42" translate="yes" xml:space="preserve">
          <source>In CI, the window size (not the viewport) has been changed from &lt;code&gt;1024x768&lt;/code&gt; to &lt;code&gt;1280x720&lt;/code&gt;. This will only affect &lt;code&gt;screenshot&lt;/code&gt; artifacts which are taken automatically with &lt;a href=&quot;../../api/commands/screenshot&quot;&gt;&lt;code&gt;cy.screenshot()&lt;/code&gt;&lt;/a&gt; (coming soon) or whenever a test fails (also coming soon).</source>
          <target state="translated">CIでは、ウィンドウサイズ（ビューポートではない）が &lt;code&gt;1024x768&lt;/code&gt; から &lt;code&gt;1280x720&lt;/code&gt; に変更されました。これは、&lt;a href=&quot;../../api/commands/screenshot&quot;&gt; &lt;code&gt;cy.screenshot()&lt;/code&gt; で&lt;/a&gt;自動的に取得される &lt;code&gt;screenshot&lt;/code&gt; アーティファクト（近日公開）またはテストが失敗した場合（近日公開）にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="1e4b013137369ed2b06a5fb376399217a8fac236" translate="yes" xml:space="preserve">
          <source>In Cypress there is no built in error recovery from a failed command. A command and its assertions all &lt;em&gt;eventually&lt;/em&gt; pass, or if one fails, all remaining commands are not run, and the test fails.</source>
          <target state="translated">サイプレスでは、失敗したコマンドからの組み込みエラー回復はありません。コマンドとそのアサーションはすべて&lt;em&gt;最終的には&lt;/em&gt;合格しますが、失敗した場合、残りのすべてのコマンドは実行されず、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="b0d55e4cc0ea2cf5d444b8bfcff8fb4264bd554d" translate="yes" xml:space="preserve">
          <source>In Cypress, querying elements is the same:</source>
          <target state="translated">Cypressでは、要素の問い合わせも同じです。</target>
        </trans-unit>
        <trans-unit id="c4ae9e544f2d81fa393bf995be3feae899249191" translate="yes" xml:space="preserve">
          <source>In Cypress, when you want to interact with a DOM element directly, call &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; with a callback function that receives the element as its first argument. When you want to skip the retry-and-timeout functionality entirely and perform traditional synchronous work, use &lt;a href=&quot;../../api/utilities/%24&quot;&gt;&lt;code&gt;Cypress.$&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">サイプレスでは、DOM要素と直接やり取りしたい場合、最初の引数として要素を受け取るコールバック関数で&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;を呼び出します。再試行とタイムアウトの機能を完全にスキップして、従来の同期作業を実行する場合は、&lt;a href=&quot;../../api/utilities/%24&quot;&gt; &lt;code&gt;Cypress.$&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="93dc3a56cc98e9a5da2045fbad38633a61a8b168" translate="yes" xml:space="preserve">
          <source>In Cypress, you almost never need to use &lt;code&gt;cy.wait()&lt;/code&gt; for an arbitrary amount of time. If you are finding yourself doing this, there is likely a much better, simpler way.</source>
          <target state="translated">サイプレスでは、任意の時間だけ &lt;code&gt;cy.wait()&lt;/code&gt; を使用する必要はほとんどありません。あなたがこれをしていることに気づいているなら、おそらくもっと良い、より簡単な方法があるでしょう。</target>
        </trans-unit>
        <trans-unit id="83afb0e7a862e44031c0c1176f1d0fe6caae0f69" translate="yes" xml:space="preserve">
          <source>In Docker</source>
          <target state="translated">Dockerでは</target>
        </trans-unit>
        <trans-unit id="23d0b9b709accae2ccb336b4bd7475f91e65a70c" translate="yes" xml:space="preserve">
          <source>In February 2018 we gave a &amp;ldquo;Best Practices&amp;rdquo; conference talk at AssertJS. This video demonstrates how to approach writing fast, scalable tests.</source>
          <target state="translated">2018年2月に、AssertJSで「ベストプラクティス」会議講演を行いました。このビデオは、高速でスケーラブルなテストを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="217ea5cca9699504b57fcecb48b0029845d1abba" translate="yes" xml:space="preserve">
          <source>In a nutshell</source>
          <target state="translated">一言で言えば</target>
        </trans-unit>
        <trans-unit id="0cfcf679328437fea7ca63674e0875324d46aa18" translate="yes" xml:space="preserve">
          <source>In a real browser, if a user holds &lt;code&gt;SHIFT&lt;/code&gt; and types &lt;code&gt;a&lt;/code&gt;, a capital &lt;code&gt;A&lt;/code&gt; will be typed into the input. Currently, Cypress does not simulate that behavior.</source>
          <target state="translated">実際のブラウザでは、ユーザーが &lt;code&gt;SHIFT&lt;/code&gt; を押し &lt;code&gt;a&lt;/code&gt; と入力すると、入力に大文字の &lt;code&gt;A&lt;/code&gt; が入力されます。現在、サイプレスはその動作をシミュレートしていません。</target>
        </trans-unit>
        <trans-unit id="6fc81d665c6573b797ef9731d4199a3fa5775693" translate="yes" xml:space="preserve">
          <source>In a real browser, preventing &lt;code&gt;mousedown&lt;/code&gt; on a form field will prevent it from receiving focus and thus prevent it from being able to be typed into. Currently, Cypress does not factor this in. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;Open an issue&lt;/a&gt; if you need this to be fixed.</source>
          <target state="translated">実際のブラウザでは、フォームフィールドでの &lt;code&gt;mousedown&lt;/code&gt; を防ぐと、フォームフィールドにフォーカスが移らないため、入力できなくなります。現在、サイプレスはこれを考慮に入れていません。これを修正する必要がある場合は&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;、問題を開いて&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="320d28f497aadcc5b422e2819000cb122757a814" translate="yes" xml:space="preserve">
          <source>In action</source>
          <target state="translated">アクション</target>
        </trans-unit>
        <trans-unit id="51f29c6b3af38b802d9213596ba6361aa65273ef" translate="yes" xml:space="preserve">
          <source>In addition to having a helpful UI, there are also special commands dedicated to the task of debugging.</source>
          <target state="translated">便利なUIに加えて、デバッグ作業に特化した特別なコマンドも用意されています。</target>
        </trans-unit>
        <trans-unit id="96aae7a4198787988c8fe087f5568f27d3da7538" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;DEBUG&lt;/code&gt; messages, Cypress also emits multiple events you can listen to as shown below. &lt;a href=&quot;../../api/events/catalog-of-events#Logging-All-Events&quot;&gt;Read more about logging events in the browser here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DEBUG&lt;/code&gt; メッセージに加えて、サイプレスは以下に示すように、聞くことができる複数のイベントも発行します。&lt;a href=&quot;../../api/events/catalog-of-events#Logging-All-Events&quot;&gt;ブラウザでのイベントのロギングについて詳しくは、こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bc2b29e552e115209ada03b0c740b4c8ea36f37" translate="yes" xml:space="preserve">
          <source>In addition to the browsers found on your system, you&amp;rsquo;ll notice that Electron is an available browser. The Electron browser is a version of Chromium that comes with &lt;a href=&quot;https://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;.</source>
          <target state="translated">システム上にあるブラウザーに加えて、Electronが使用可能なブラウザーであることがわかります。Electronブラウザは、&lt;a href=&quot;https://electron.atom.io/&quot;&gt;Electronに&lt;/a&gt;付属するバージョンのChromiumです。</target>
        </trans-unit>
        <trans-unit id="dfa444adf9ce49e02f71a3745577a26190472e06" translate="yes" xml:space="preserve">
          <source>In additional to controlling the command&amp;rsquo;s implicit behavior you can also add declarative subject validations such as:</source>
          <target state="translated">コマンドの暗黙的な動作の制御に加えて、次のような宣言的なサブジェクト検証を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="c98561952b227b72d8d063fd8a2755bcb59940d2" translate="yes" xml:space="preserve">
          <source>In all cases, the fact that the binary was installed from a custom location &lt;em&gt;is not saved in your &lt;code&gt;package.json&lt;/code&gt; file&lt;/em&gt;. Every repeated installation needs to use the same environment variable to install the same binary.</source>
          <target state="translated">すべての場合において、バイナリがカスタムの場所からインストールされたという事実&lt;em&gt;は、 &lt;code&gt;package.json&lt;/code&gt; ファイルに保存されません&lt;/em&gt;。繰り返しインストールするたびに、同じ環境変数を使用して同じバイナリをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e556245dccc8b934e56ce11b57126a1352618544" translate="yes" xml:space="preserve">
          <source>In all cases, you are using &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; job definitions that Cypress provides inside the orb. Using the orb brings simplicity and static checks of parameters to CircleCI configuration.</source>
          <target state="translated">すべての場合において、サイプレスがオーブ内で提供 &lt;code&gt;install&lt;/code&gt; &lt;code&gt;run&lt;/code&gt; およびインストールジョブ定義を使用しています。orbを使用すると、CircleCI構成にパラメーターの単純で静的なチェックが行われます。</target>
        </trans-unit>
        <trans-unit id="e2544fa406c5d3a4a0393145b666362aac681f4f" translate="yes" xml:space="preserve">
          <source>In case you missed it before - Cypress tests run inside of the browser! This means we can do things nobody else can. There is no object serialization or JSON wire protocols. You have real, native access to everything in your application under test. It is impossible for Cypress to &amp;lsquo;miss&amp;rsquo; elements and it always knows the moment your application fires any kind of event.</source>
          <target state="translated">以前に見逃した場合のために-サイプレステストはブラウザ内で実行されます！これは、他の誰もできないことをできることを意味します。オブジェクトのシリアル化やJSONワイヤプロトコルはありません。テスト中のアプリケーションのすべてに実際にネイティブにアクセスできます。サイプレスが要素を「見逃す」ことは不可能であり、アプリケーションがあらゆる種類のイベントを発生させた瞬間を常に認識しています。</target>
        </trans-unit>
        <trans-unit id="06db0e869e5b5019e15cfcf65f101aeda26d156d" translate="yes" xml:space="preserve">
          <source>In each of these examples, it&amp;rsquo;s important to note that Cypress will automatically &lt;em&gt;wait&lt;/em&gt; until these assertions pass. This prevents you from having to know or care about the precise moment your elements eventually do reach this state.</source>
          <target state="translated">これらの各例では、サイプレスがこれらのアサーションがパスするまで自動的に&lt;em&gt;待機&lt;/em&gt;することに注意することが重要です。これにより、最終的に要素がこの状態になる正確な瞬間を知る必要がないようにします。</target>
        </trans-unit>
        <trans-unit id="957cedd2227871d2848a63a9c4d6c999d1cb3089" translate="yes" xml:space="preserve">
          <source>In each of these situations, Cypress will lose the ability to automate your application and will immediately error.</source>
          <target state="translated">これらの状況のいずれにおいても、Cypress はアプリケーションを自動化する機能を失い、すぐにエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d455e0cf9f8dec0308d2c03ee28d251b870d0a43" translate="yes" xml:space="preserve">
          <source>In fact we can likely bypass the initial visit altogether and just &lt;code&gt;POST&lt;/code&gt; directly to your &lt;code&gt;SSO&lt;/code&gt; server.</source>
          <target state="translated">実際、最初のアクセスを完全にバイパスし、 &lt;code&gt;SSO&lt;/code&gt; サーバーに直接 &lt;code&gt;POST&lt;/code&gt; するだけの可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b828d2cc65ff6901d0db67ba050dd72135ffb14" translate="yes" xml:space="preserve">
          <source>In fact we only ever scroll elements into view when actionable commands are running using the above algorithms. We &lt;em&gt;do not&lt;/em&gt; scroll elements into view on regular DOM commands like &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../api/commands/find&quot;&gt;&lt;code&gt;.find()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際、上記のアルゴリズムを使用して実行可能なコマンドが実行されている場合にのみ、要素をスクロールして表示します。我々は&lt;em&gt;していない&lt;/em&gt;ような、通常のDOMコマンドのビューに要素をスクロール&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../api/commands/find&quot;&gt; &lt;code&gt;.find()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="972e3b350e94808ddfad132c9667f5d95eba221c" translate="yes" xml:space="preserve">
          <source>In fact, Cypress &lt;a href=&quot;../references/bundled-tools#Other-Library-Utilities&quot;&gt;bundles jQuery&lt;/a&gt; and exposes many of its DOM traversal methods to you so you can work with complex HTML structures with ease using APIs you&amp;rsquo;re already familiar with.</source>
          <target state="translated">実際、サイプレス&lt;a href=&quot;../references/bundled-tools#Other-Library-Utilities&quot;&gt;はjQuery&lt;/a&gt;をバンドルし、そのDOMトラバースメソッドの多くを公開しているため、使い慣れたAPIを使用して複雑なHTML構造を簡単に操作できます。</target>
        </trans-unit>
        <trans-unit id="2cfb46617eb16e37fba8d76bf4e0fbd123bfb6db" translate="yes" xml:space="preserve">
          <source>In general, it should not be necessary to manually restore the native functions that &lt;code&gt;cy.clock()&lt;/code&gt; overrides since this is done automatically between tests. But if you need to, the &lt;code&gt;clock&lt;/code&gt; object yield has a &lt;code&gt;.restore()&lt;/code&gt; method.</source>
          <target state="translated">これはテスト間で自動的に行われるため、一般に、 &lt;code&gt;cy.clock()&lt;/code&gt; がオーバーライドするネイティブ関数を手動で復元する必要はありません。ただし、必要に応じて、 &lt;code&gt;clock&lt;/code&gt; オブジェクトの生成には &lt;code&gt;.restore()&lt;/code&gt; メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="6f65ca0977b8d4f0f635988d0d1f96d0e636bf9a" translate="yes" xml:space="preserve">
          <source>In general, there are only a handful of very specific situations where you &lt;em&gt;can&lt;/em&gt; create control flow. Asking to recover from errors is actually just asking for another &lt;code&gt;if/else&lt;/code&gt; control flow.</source>
          <target state="translated">一般に、制御フロー&lt;em&gt;を&lt;/em&gt;作成&lt;em&gt;できる&lt;/em&gt;状況はごく一部です。エラーからの回復を要求することは、実際には単に別の &lt;code&gt;if/else&lt;/code&gt; 制御フローを要求することです。</target>
        </trans-unit>
        <trans-unit id="9a36d58b1789bc4d3558b6ff8edc263c58dfa4f4" translate="yes" xml:space="preserve">
          <source>In green, we highlighted the 4 statements present in that file. The first three statements were each executed once and the last statement was never executed (it probably was inside an &lt;code&gt;if&lt;/code&gt; statement). By using the application, we can both increment the counters and flip some of the zero counters into positive numbers.</source>
          <target state="translated">緑で、そのファイルに存在する4つのステートメントをハイライト表示しました。最初の3つのステートメントはそれぞれ1回実行され、最後のステートメントは実行されませんでした（おそらく &lt;code&gt;if&lt;/code&gt; ステートメント内にありました）。アプリケーションを使用することで、カウンターをインクリメントし、一部のゼロカウンターを正の数にフリップできます。</target>
        </trans-unit>
        <trans-unit id="2ce9da97dae73d511f76748460799579cde4725e" translate="yes" xml:space="preserve">
          <source>In many single-page JavaScript applications the DOM re-renders parts of the application constantly. If you alias DOM elements that have been removed from the DOM by the time you call &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; with the alias, Cypress automatically re-queries the DOM to find these elements again.</source>
          <target state="translated">多くのシングルページJavaScriptアプリケーションでは、DOMはアプリケーションの一部を常に再レンダリングします。エイリアスを使用して&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;を呼び出すまでにDOMから削除されたDOM要素にエイリアスを設定すると、サイプレスは自動的にDOMを再クエリしてこれらの要素を再度検索します。</target>
        </trans-unit>
        <trans-unit id="3b8f64d724638ed5c83f51001e0f2a341e271119" translate="yes" xml:space="preserve">
          <source>In modern JavaScript frameworks, DOM elements are regularly re-rendered - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may &lt;em&gt;appear&lt;/em&gt; as if nothing has visibly changed to the user. But if you are in the middle of executing test commands, it&amp;rsquo;s possible the element you&amp;rsquo;re interacting with has become &amp;ldquo;dead&amp;rdquo;. To deal with this situation you must:</source>
          <target state="translated">最新のJavaScriptフレームワークでは、DOM要素は定期的に再レン​​ダリングされます。つまり、古い要素は破棄され、新しい要素がその場所に配置されます。これは非常に速く起こるので、それが可能&lt;em&gt;に表示され&lt;/em&gt;、何も目に見えて、ユーザーに変更されなかったかのよう。しかし、テストコマンドを実行している最中に、操作している要素が「デッド」になっている可能性があります。この状況に対処するには、次のことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="c0b6f380fda038fbcafdd75cab9a5d02d486aa59" translate="yes" xml:space="preserve">
          <source>In most cases they will be the same, but they could be different if you have installed a different version of the npm package and for some reason could not install the matching binary.</source>
          <target state="translated">ほとんどの場合は同じですが、異なるバージョンの npm パッケージをインストールしていて、何らかの理由で一致するバイナリをインストールできなかった場合は、異なるバイナリになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="00c6f6264b87e2dbd6e00057ddc1337aac8cff3a" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;.and()&lt;/code&gt; yields the same subject it was given from the previous command.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;.and()&lt;/code&gt; は、前のコマンドから与えられたものと同じサブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="55903538ca91ab3f5216aa568a05e5bdbeb4127d" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;.should()&lt;/code&gt; yields the same subject it was given from the previous command.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;.should()&lt;/code&gt; は、前のコマンドから与えられたものと同じ主題を生成します。</target>
        </trans-unit>
        <trans-unit id="89b0743460f4cc378c0dc73810f513fdeb375908" translate="yes" xml:space="preserve">
          <source>In most cases, it&amp;rsquo;s easier to use &lt;a href=&quot;tick&quot;&gt;&lt;code&gt;cy.tick()&lt;/code&gt;&lt;/a&gt; to move time, but you can also use the &lt;code&gt;clock&lt;/code&gt; object yielded by &lt;code&gt;cy.clock()&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、時間を移動するために&lt;a href=&quot;tick&quot;&gt; &lt;code&gt;cy.tick()&lt;/code&gt; &lt;/a&gt;を使用する方が簡単ですが、 &lt;code&gt;cy.clock()&lt;/code&gt; によって生成された &lt;code&gt;clock&lt;/code&gt; オブジェクトを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f076236ad2ec6acc7d572774df0df507bc59afc9" translate="yes" xml:space="preserve">
          <source>In order for the &lt;code&gt;@cypress/code-coverage&lt;/code&gt; plugin to know that it should request the back end coverage, add the new endpoint to the &lt;code&gt;cypress.json&lt;/code&gt; environment settings under &lt;code&gt;env.codeCoverage.url&lt;/code&gt; key. For example, if the application back end is running at port 3000 and we are using the default &amp;ldquo;GET /&lt;strong&gt;coverage&lt;/strong&gt;&amp;ldquo; endpoint, set the following:</source>
          <target state="translated">ためには &lt;code&gt;@cypress/code-coverage&lt;/code&gt; それが新しいエンドポイントを追加し、バックエンドのカバレッジを要求すべきであることを知っているプラグイン &lt;code&gt;cypress.json&lt;/code&gt; の下の環境設定 &lt;code&gt;env.codeCoverage.url&lt;/code&gt; のキー。たとえば、アプリケーションバックエンドがポート3000で実行されていて、デフォルトの「GET / &lt;strong&gt;カバレッジ&lt;/strong&gt;」エンドポイントを使用している場合は、次のように設定します。</target>
        </trans-unit>
        <trans-unit id="baf3bf60042422bbe31cf06d5cda76bbd9dd6c4e" translate="yes" xml:space="preserve">
          <source>In order to properly configure your proxy configuration, it can be helpful to know how to view currently set environment variables, unset unwanted environment variables, and set environment variables depending on your operating system.</source>
          <target state="translated">プロキシの設定を適切に設定するためには、現在設定されている環境変数の表示方法、不要な環境変数の設定解除方法、オペレーティングシステムに応じた環境変数の設定方法を知っておくと便利です。</target>
        </trans-unit>
        <trans-unit id="58b3c0815dffd24ae8198b86de21463a624f1b5d" translate="yes" xml:space="preserve">
          <source>In order to run in parallel mode each machine must send identical environment parameters such as:</source>
          <target state="translated">パラレルモードで実行するためには、各マシンは以下のような同一の環境パラメータを送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="960ecf2a8bb32c6c051d1950abd6d2c10ef9886c" translate="yes" xml:space="preserve">
          <source>In order to use either of these parameters a &lt;code&gt;ciBuildId&lt;/code&gt; must be determined.</source>
          <target state="translated">これらのパラメーターのいずれかを使用するには、 &lt;code&gt;ciBuildId&lt;/code&gt; を決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="757fbb0c7658d315aa68d0d75d1e33fe4e732269" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;cy.request()&lt;/code&gt; transparently performs all of the underlying functions as if it came from the browser.</source>
          <target state="translated">言い換えると、 &lt;code&gt;cy.request()&lt;/code&gt; は、ブラウザから来たかのように、すべての基本的な機能を透過的に実行します。</target>
        </trans-unit>
        <trans-unit id="b445cba6faffc900548081af28b090a31c4d2a28" translate="yes" xml:space="preserve">
          <source>In other words, Cypress will look inside of the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; containing &amp;ldquo;Delete User&amp;rdquo; for the content: &amp;ldquo;Yes, Delete!&amp;rdquo;, which is not what we intended.</source>
          <target state="translated">言い換えると、サイプレスは「ユーザーの削除」を含む &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; の内部でコンテンツ「Yes、Delete！」を探しますが、これは意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="c7fd92ad95f41e3f9a80069cdc87e37caf3899b0" translate="yes" xml:space="preserve">
          <source>In other words, based on the commands and the events happening, Cypress automatically alters its expected timeouts to match web application behavior.</source>
          <target state="translated">言い換えれば、Cypress は、コマンドと発生したイベントに基づいて、予想されるタイムアウトをウェブアプリケーションの動作に合わせて自動的に変更します。</target>
        </trans-unit>
        <trans-unit id="dd08023cd2b43573ac20a805bf980289cfe9cd99" translate="yes" xml:space="preserve">
          <source>In other words, what&amp;rsquo;s the difference between:</source>
          <target state="translated">つまり、次の違いは何ですか。</target>
        </trans-unit>
        <trans-unit id="9f20db83fc921929320420426f7f2eb3f45eba78" translate="yes" xml:space="preserve">
          <source>In other words, you can have confidence your server is sending the correct data in the correct structure to your client to consume. It is a good idea to have &lt;em&gt;end-to-end&lt;/em&gt; tests around your application&amp;rsquo;s &lt;em&gt;critical paths&lt;/em&gt;. These typically include user login, signup, or other critical paths such as billing.</source>
          <target state="translated">つまり、サーバーが正しい構造の正しいデータをクライアントに送信して消費することを確信できます。アプリケーションの&lt;em&gt;クリティカルパスに関する&lt;/em&gt;&lt;em&gt;エンドツーエンドの&lt;/em&gt;テストを行うことをお勧めし&lt;em&gt;ます&lt;/em&gt;。これらには通常、ユーザーのログイン、サインアップ、または請求などのその他の重要なパスが含まれます。</target>
        </trans-unit>
        <trans-unit id="5f074992d34b093b8250574c6e893a7e33326ae2" translate="yes" xml:space="preserve">
          <source>In other words, you cannot do conditional testing safely if you want your tests to run 100% consistently.</source>
          <target state="translated">言い換えれば、テストを100%一貫して実行させたい場合、条件付きテストを安全に実行することはできません。</target>
        </trans-unit>
        <trans-unit id="e171c64eb19d826206200e5d26a2b563c2afe04a" translate="yes" xml:space="preserve">
          <source>In other words, you cannot get a correct visual representation of what Cypress &amp;ldquo;saw&amp;rdquo; when looking at a previous snapshot.</source>
          <target state="translated">つまり、以前のスナップショットを見たときにサイプレスが「見た」ものを正確に視覚的に表現することはできません。</target>
        </trans-unit>
        <trans-unit id="92669c73359bc8943897aa378ff69c32cbfdada6" translate="yes" xml:space="preserve">
          <source>In our case it would re-issue the commands: &lt;code&gt;cy.get('#todos li').first()&lt;/code&gt;. Everything just works because the new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is found.</source>
          <target state="translated">私たちの場合、コマンド &lt;code&gt;cy.get('#todos li').first()&lt;/code&gt; を再発行します。新しい &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; が見つかったので、すべてがうまくいきます。</target>
        </trans-unit>
        <trans-unit id="26178a5fe7b914d6ed00a2f239b56df67d688cb8" translate="yes" xml:space="preserve">
          <source>In our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we&amp;rsquo;re mocking the response, we can still verify that our application sends the correct request.</source>
          <target state="translated">上記の例では、リクエストオブジェクトについてアサートして、URL内のクエリ文字列としてデータを送信したことを確認できます。応答をモックしていますが、アプリケーションが正しいリクエストを送信していることを確認できます。</target>
        </trans-unit>
        <trans-unit id="fc66356f8684948999e9b56da8c86da2d45fdde7" translate="yes" xml:space="preserve">
          <source>In our example above, we added an assertion to the display of the search results.</source>
          <target state="translated">上記の例では、検索結果の表示にアサーションを追加しました。</target>
        </trans-unit>
        <trans-unit id="cbd09423e8d8b6b60544024b0180eeb79623cdfd" translate="yes" xml:space="preserve">
          <source>In real promises it&amp;rsquo;s very easy to &amp;lsquo;lose&amp;rsquo; a nested Promise if you don&amp;rsquo;t return it or chain it correctly.</source>
          <target state="translated">実際のPromiseでは、ネストされたPromiseを返さなかったり、正しくチェーンしないと、「失う」のは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="fe475bc5771e4e48a486de0206a21291a10d5ba0" translate="yes" xml:space="preserve">
          <source>In short: each Test Runner sends a list of the spec files to the Dashboard Service, and the service sends back one spec at a time to each Test Runner to run.</source>
          <target state="translated">要するに、各テスト ランナーはスペックファイルのリストをダッシュボード サービスに送り、サービスは各テスト ランナーに一度に1つのスペックを送り返して実行します。</target>
        </trans-unit>
        <trans-unit id="b2702e8c706482bb57ea15ead38c09b0c3cc3468" translate="yes" xml:space="preserve">
          <source>In summary, &lt;code&gt;{ force: true }&lt;/code&gt; skips the checks, and it will always fire the event at the desired element.</source>
          <target state="translated">要約すると、 &lt;code&gt;{ force: true }&lt;/code&gt; はチェックをスキップし、常に目的の要素でイベントを発生させます。</target>
        </trans-unit>
        <trans-unit id="5b128d58ca001409e86451f0c96ce0bae6522382" translate="yes" xml:space="preserve">
          <source>In test file</source>
          <target state="translated">テストファイルでは</target>
        </trans-unit>
        <trans-unit id="d7d47f109594cd38d016e5a421f2ceca2de108aa" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../guides/command-line&quot;&gt;Cypress CLI tool&lt;/a&gt; package version &lt;code&gt;0.11.1&lt;/code&gt;, you can now pass the &lt;code&gt;--spec&lt;/code&gt; option to &lt;code&gt;cypress ci&lt;/code&gt;. This enables you to run a specific spec file as opposed to all tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/161&quot;&gt;#161&lt;/a&gt;.</source>
          <target state="translated">では&lt;a href=&quot;../guides/command-line&quot;&gt;サイプレスCLIツール&lt;/a&gt;パッケージのバージョン &lt;code&gt;0.11.1&lt;/code&gt; 、あなたは今渡すことができ &lt;code&gt;--spec&lt;/code&gt; にオプション &lt;code&gt;cypress ci&lt;/code&gt; 。これにより、すべてのテストではなく、特定のスペックファイルを実行できます。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/161&quot;&gt;＃161を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e548e59ef9c1834daff6987fa3dae2477d409463" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;task&lt;/code&gt; plugin event, the command will fail if &lt;code&gt;undefined&lt;/code&gt; is returned. This helps catch typos or cases where the task event is not handled.</source>
          <target state="translated">では &lt;code&gt;task&lt;/code&gt; 場合は、プラグインのイベント、コマンドは失敗します &lt;code&gt;undefined&lt;/code&gt; 返されます。これにより、タイプミスや、タスクイベントが処理されないケースを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="f454795faa20c2cbbedb4921ca14516cef861e0f" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;best&lt;/strong&gt; case scenario, we have wasted at LEAST 4 seconds waiting on the &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; element to possibly exist before we errored and continued on.</source>
          <target state="translated">で&lt;strong&gt;最良の&lt;/strong&gt;ケースのシナリオでは、我々は上で待機している、少なくとも4秒無駄にしている &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; 私たちはエラーが発生したとに続く前におそらく存在する要素を。</target>
        </trans-unit>
        <trans-unit id="edd2b868139cae76a520ce3fbf3e663f3cea5e1c" translate="yes" xml:space="preserve">
          <source>In the case where you &lt;strong&gt;are&lt;/strong&gt; trying to use the DOM to do conditional testing, you can utilize the ability to synchronously query for elements in Cypress to create control flow.</source>
          <target state="translated">DOMを使用して条件付きテストを実行しようとして&lt;strong&gt;いる&lt;/strong&gt;場合、サイプレスの要素を同期的にクエリする機能を利用して、制御フローを作成できます。</target>
        </trans-unit>
        <trans-unit id="af8e46f6692be60a06f94bec5c36c9a457f0ab0e" translate="yes" xml:space="preserve">
          <source>In the case where you cannot control it, you can still conditionally dismiss it &lt;strong&gt;if&lt;/strong&gt; you know whether it is going to be shown.</source>
          <target state="translated">制御できない場合でも、表示されるかどうかがわかって&lt;strong&gt;いれば、&lt;/strong&gt;条件付きで閉じることが&lt;strong&gt;でき&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b780dbd10d62f32c288dc68d699654e289fb3be5" translate="yes" xml:space="preserve">
          <source>In the corresponding Application Preview below, you can see &lt;code&gt;https://example.cypress.io&lt;/code&gt; is being displayed in the righthand side. Not only is the application visible, but it is fully interactable. You can open your developer tools to inspect elements as you would your normal application. The DOM is completely available for debugging.</source>
          <target state="translated">以下の対応するアプリケーションプレビューでは、 &lt;code&gt;https://example.cypress.io&lt;/code&gt; //example.cypress.ioが右側に表示されています。アプリケーションが表示されるだけでなく、完全に対話可能です。開発者ツールを開いて、通常のアプリケーションと同じように要素を検査できます。DOMは完全にデバッグに使用できます。</target>
        </trans-unit>
        <trans-unit id="724f36d11e3292b6f98fd52ad540c1e33ae08a1a" translate="yes" xml:space="preserve">
          <source>In the event you did not read a word above and skipped down here, we will reiterate it one more time:</source>
          <target state="translated">上の言葉を読まずに飛ばしてしまった場合は、ここでもう一度言い直します。</target>
        </trans-unit>
        <trans-unit id="1e8a71e8ca92d8291e8879ff3d151c47acc69ff5" translate="yes" xml:space="preserve">
          <source>In the example above, a lowercase &lt;code&gt;a&lt;/code&gt; will be typed, because that&amp;rsquo;s the literal character specified. To type a capital &lt;code&gt;A&lt;/code&gt;, you can use &lt;code&gt;.type('{shift}A')&lt;/code&gt; (or &lt;code&gt;.type('A')&lt;/code&gt; if you don&amp;rsquo;t care about the &lt;code&gt;shiftKey&lt;/code&gt; property on any key events).</source>
          <target state="translated">上記の例では、小文字の &lt;code&gt;a&lt;/code&gt; が入力されます。これは、指定されたリテラル文字だからです。資本型に &lt;code&gt;A&lt;/code&gt; を、あなたは使用することができます &lt;code&gt;.type('{shift}A')&lt;/code&gt; （または &lt;code&gt;.type('A')&lt;/code&gt; 使用すると、気にしない場合 &lt;code&gt;shiftKey&lt;/code&gt; のいずれかのキーイベントのプロパティ）。</target>
        </trans-unit>
        <trans-unit id="dbc64ac6d10e528c5dd0d59f366d067fbeecd5c2" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;code&gt;cy:run&lt;/code&gt; command will only be executed when the URL &lt;code&gt;http://localhost:3030&lt;/code&gt; responds with an HTTP status code of 200. The server will also shut down when the tests complete.</source>
          <target state="translated">上記の例では、 &lt;code&gt;cy:run&lt;/code&gt; コマンドは、URL &lt;code&gt;http://localhost:3030&lt;/code&gt; が HTTPステータスコード200で応答した場合にのみ実行されます。サーバーは、テストが完了するとシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="36aa59bac872c548ec5c4844f5228652bcec4f87" translate="yes" xml:space="preserve">
          <source>In the example below, we forget to return the &lt;code&gt;Promise&lt;/code&gt; in our test. This means the test passes synchronously but our &lt;code&gt;Promise&lt;/code&gt; resolves in the next test.</source>
          <target state="translated">以下の例では、テストで &lt;code&gt;Promise&lt;/code&gt; を返すのを忘れています。つまり、テストは同期的にパスしますが、 &lt;code&gt;Promise&lt;/code&gt; は次のテストで解決します。</target>
        </trans-unit>
        <trans-unit id="4d34ae3c0b5a56416754aa0ee709bc378be03638" translate="yes" xml:space="preserve">
          <source>In the example below, we use &lt;code&gt;.invoke()&lt;/code&gt; to force a hidden div to be &lt;code&gt;'display: block'&lt;/code&gt; so we can interact with its children elements.</source>
          <target state="translated">以下の例では、 &lt;code&gt;.invoke()&lt;/code&gt; を使用して、非表示のdivを強制的に &lt;code&gt;'display: block'&lt;/code&gt; し、その子要素と対話できるようにします。</target>
        </trans-unit>
        <trans-unit id="f27417c0747c77a446165a6754921ffe06e5f8bc" translate="yes" xml:space="preserve">
          <source>In the example below, we wrote the following code in our test file:</source>
          <target state="translated">以下の例では、テストファイルに以下のようなコードを書きました。</target>
        </trans-unit>
        <trans-unit id="2c3fd6d848f681a8962c6e80e0b5e298a6910b03" translate="yes" xml:space="preserve">
          <source>In the failing test, the first label was indeed found correctly:</source>
          <target state="translated">不合格のテストでは、確かに最初のラベルは正しく発見されました。</target>
        </trans-unit>
        <trans-unit id="dc4f496da8638b96d4ce34bbfb37866667239e3a" translate="yes" xml:space="preserve">
          <source>In the future we &lt;strong&gt;do&lt;/strong&gt; have plans to release back end adapters for other languages.</source>
          <target state="translated">将来的に&lt;strong&gt;は&lt;/strong&gt;、他の言語用のバックエンドアダプターをリリースする計画があります。</target>
        </trans-unit>
        <trans-unit id="9f17a7e89132ce690ba65f235d11f373c553da68" translate="yes" xml:space="preserve">
          <source>In the meantime, you can use the experimental &lt;a href=&quot;https://github.com/Bkucera/cypress-plugin-tab&quot;&gt;cypress-plugin-tab&lt;/a&gt; and can thumbs up &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/299&quot;&gt;this issue&lt;/a&gt;.</source>
          <target state="translated">それまでは、実験的な&lt;a href=&quot;https://github.com/Bkucera/cypress-plugin-tab&quot;&gt;cypress-plugin-tab&lt;/a&gt;を使用して、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/299&quot;&gt;この問題を解決&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="6ec7dc43a85ae43215bb3280a0f9cc20341b1b44" translate="yes" xml:space="preserve">
          <source>In the reporter, suites that are pending or contain only pending tests have the blue &amp;ldquo;pending&amp;rdquo; indicator on the left instead of the white &amp;ldquo;processing&amp;rdquo; indicator.</source>
          <target state="translated">レポーターでは、保留中または保留中のテストのみを含むスイートの左側に、白い「処理中」インジケーターの代わりに青い「保留中」インジケーターがあります。</target>
        </trans-unit>
        <trans-unit id="a69eccd9bb40f73f185ff0c943557c487d55274e" translate="yes" xml:space="preserve">
          <source>In this example let&amp;rsquo;s assume you visit your website and the content will be different based on which A/B campaign your server decides to send. Perhaps it is based on geo-location, IP address, time of day, locale, or other factors that are difficult to control. How can you write tests in this manner?</source>
          <target state="translated">この例では、Webサイトにアクセスし、サーバーが送信することを決定したA / Bキャンペーンに基づいてコンテンツが異なると仮定します。おそらく、地理的位置、IPアドレス、時刻、ロケール、または制御が困難なその他の要因に基づいています。この方法でテストを作成するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="654e84b325996c6895471a04a6f7915066a8ecd3" translate="yes" xml:space="preserve">
          <source>In this example we use &lt;a href=&quot;and&quot;&gt;&lt;code&gt;.and()&lt;/code&gt;&lt;/a&gt; which is identical to &lt;code&gt;.should()&lt;/code&gt;.</source>
          <target state="translated">この例では、使用&lt;a href=&quot;and&quot;&gt; &lt;code&gt;.and()&lt;/code&gt; &lt;/a&gt;と同じである &lt;code&gt;.should()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e416902b989d2600c051c0e9f8ab3e2f63b31266" translate="yes" xml:space="preserve">
          <source>In this example, a single machine runs a job named &lt;code&gt;1x-electron&lt;/code&gt;, defined in the project&amp;rsquo;s &lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt; file. Cypress runs all 19 spec files one by one alphabetically in this job. It takes &lt;strong&gt;1:51&lt;/strong&gt; to complete all of the tests.</source>
          <target state="translated">この例では、単一のマシンが、プロジェクトの&lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt;ファイルで定義されている &lt;code&gt;1x-electron&lt;/code&gt; という名前のジョブを実行します。サイプレスは、このジョブで19個のスペックファイルすべてをアルファベット順に1つずつ実行します。すべてのテストを完了するには&lt;strong&gt;1:51&lt;/strong&gt;かかります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2643a67dae18365b8b6d2a95e30a99ef71ff487c" translate="yes" xml:space="preserve">
          <source>In this example, imagine there is a clock in your app showing the current time. This can cause screenshots to be non-deterministic, which could create false negatives when screenshot diffing. You can use &lt;code&gt;onBeforeScreenshot&lt;/code&gt; to hide the clock and then show it again with &lt;code&gt;onAfterScreenshot&lt;/code&gt;.</source>
          <target state="translated">この例では、アプリに現在の時刻を示す時計があるとします。これにより、スクリーンショットが非決定的になる可能性があり、スクリーンショットの比較時に偽陰性が発生する可能性があります。 &lt;code&gt;onBeforeScreenshot&lt;/code&gt; を使用して時計を非表示にしてから、 &lt;code&gt;onAfterScreenshot&lt;/code&gt; で再び表示できます。</target>
        </trans-unit>
        <trans-unit id="a07dd6b5d361acae3ffa1068fce4a9b7a33bb16e" translate="yes" xml:space="preserve">
          <source>In this example, let&amp;rsquo;s imagine you are running a bunch of tests and each time you load your application, it may show a &amp;ldquo;Welcome Wizard&amp;rdquo; modal.</source>
          <target state="translated">この例では、一連のテストを実行していて、アプリケーションをロードするたびに「ウェルカムウィザード」モーダルが表示される場合があるとします。</target>
        </trans-unit>
        <trans-unit id="fafa4f19520320378cadbfdf56dbbc2434c0bc91" translate="yes" xml:space="preserve">
          <source>In this example, on first login our server sends us back a session cookie.</source>
          <target state="translated">この例では、最初のログイン時にサーバーがセッションクッキーを送り返してきます。</target>
        </trans-unit>
        <trans-unit id="7210a6e4d1ffd24e18e8d24883b3b00e3ced26ae" translate="yes" xml:space="preserve">
          <source>In this example, on first login our server sends us back a session cookie. After invoking &lt;code&gt;cy.clearCookies()&lt;/code&gt; this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.</source>
          <target state="translated">この例では、最初のログイン時にサーバーからセッションCookieが返されます。 &lt;code&gt;cy.clearCookies()&lt;/code&gt; を呼び出した後、これはセッションCookieをクリアし、無許可のページに移動すると、サーバーはログインにリダイレクトするはずです。</target>
        </trans-unit>
        <trans-unit id="85c42c93845e2fef29497af7ebc2d6d884e3e475" translate="yes" xml:space="preserve">
          <source>In this example, on first login, our server sends us back a session cookie.</source>
          <target state="translated">この例では、最初のログイン時にサーバーがセッションクッキーを送り返してきます。</target>
        </trans-unit>
        <trans-unit id="799dbbc93386c9ff6001443b5847cefadcb8013d" translate="yes" xml:space="preserve">
          <source>In this example, on first login, our server sends us back a session cookie. After invoking &lt;code&gt;cy.clearCookie('session_id')&lt;/code&gt;, this clears the session cookie. Then upon navigating to an unauthorized page, we asset that our server has redirected us back to login.</source>
          <target state="translated">この例では、最初のログイン時に、サーバーからセッションCookieが返されます。 &lt;code&gt;cy.clearCookie('session_id')&lt;/code&gt; を呼び出した後、これはセッションCookieをクリアします。次に、許可されていないページに移動すると、サーバーからログインにリダイレクトされたことがわかります。</target>
        </trans-unit>
        <trans-unit id="7297a60e52bc9bb948168460d36d99e4b7589f7e" translate="yes" xml:space="preserve">
          <source>In this example, our matching requests will be delayed 1000ms and have a status of &lt;code&gt;422&lt;/code&gt;, but its &lt;code&gt;response&lt;/code&gt; will be what was set in &lt;a href=&quot;route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、一致するリクエストは&lt;a href=&quot;route&quot;&gt; &lt;code&gt;cy.route()&lt;/code&gt; &lt;/a&gt;遅延し、ステータスは &lt;code&gt;422&lt;/code&gt; になりますが、その &lt;code&gt;response&lt;/code&gt; はcy.route（）で設定されたものになります。</target>
        </trans-unit>
        <trans-unit id="bf08c406fc81bfa00e9fdfaffe9c326c6d728148" translate="yes" xml:space="preserve">
          <source>In this example, there are many possible sources of failure. In most testing tools, if our request failed to go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it&amp;rsquo;s unknown &lt;em&gt;why&lt;/em&gt; the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; on an element? Perhaps our server sent us different Book items.</source>
          <target state="translated">この例では、多くの失敗の原因が考えられます。ほとんどのテストツールでは、リクエストが送信されなかった場合、通常、DOMで結果を見つけて一致する要素がないことを確認して初めてエラーが発生します。結果が表示されなかった&lt;em&gt;理由&lt;/em&gt;は不明であるため、これは問題です。レンダリングコードに問題がありましたか？要素の &lt;code&gt;id&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; などの属性を変更または変更しましたか？おそらく私たちのサーバーが私たちに異なる本のアイテムを送ったのでしょう。</target>
        </trans-unit>
        <trans-unit id="26c579e70948f3a1f956cb155892f61465c6d265" translate="yes" xml:space="preserve">
          <source>In this guide we will lay out what some of the trade-offs are - and specifically how you can work around them.</source>
          <target state="translated">このガイドでは、トレードオフとは何か、具体的にどのようにしてトレードオフを回避することができるのかを説明します。</target>
        </trans-unit>
        <trans-unit id="a3303302589adc4ad15584529c87e66119817327" translate="yes" xml:space="preserve">
          <source>In this situation, not only did we wait a long period of time, but when the &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; element was eventually shown it&amp;rsquo;s likely caused an error downstream on other commands.</source>
          <target state="translated">この状況では、長時間待機しただけでなく、 &lt;code&gt;&amp;lt;#wizard&amp;gt;&lt;/code&gt; 要素が最終的に表示されたときに、他のコマンドでダウンストリームエラーが発生した可能性があります。</target>
        </trans-unit>
        <trans-unit id="a4202b0f92e36d449c7b45c72de6f38215f13650" translate="yes" xml:space="preserve">
          <source>In this situation, you want to close the wizard when it is present and ignore it if it is not.</source>
          <target state="translated">このような状況では、ウィザードが存在する場合は閉じ、存在しない場合は無視したいところです。</target>
        </trans-unit>
        <trans-unit id="3c09ca3ad405df1d96dace4aa01304bfb583b1eb" translate="yes" xml:space="preserve">
          <source>In version &lt;a href=&quot;changelog&quot;&gt;&lt;code&gt;0.20.0&lt;/code&gt;&lt;/a&gt;, we removed the commands for adding custom commands and replaced them with, what we believe to be, a simpler interface.</source>
          <target state="translated">バージョン&lt;a href=&quot;changelog&quot;&gt; &lt;code&gt;0.20.0&lt;/code&gt; &lt;/a&gt;では、カスタムコマンドを追加するためのコマンドを削除し、よりシンプルなインターフェイスに置き換えました。</target>
        </trans-unit>
        <trans-unit id="674a03f401da3ae13913196cc8830c75d7101199" translate="yes" xml:space="preserve">
          <source>In versions before &lt;a href=&quot;changelog&quot;&gt;&lt;code&gt;0.20.0&lt;/code&gt;&lt;/a&gt; of Cypress we automatically detected this and forced the &lt;code&gt;cy&lt;/code&gt; commands to be returned. To make things less magical and clearer, we are now throwing an error.</source>
          <target state="translated">サイプレスの&lt;a href=&quot;changelog&quot;&gt; &lt;code&gt;0.20.0&lt;/code&gt; &lt;/a&gt;より前のバージョンでは、これを自動的に検出し、 &lt;code&gt;cy&lt;/code&gt; コマンドを強制的に返しました。不思議でわかりにくいものにするために、エラーをスローしています。</target>
        </trans-unit>
        <trans-unit id="dd7419a89ff7022ec510bff41c55069b8119c312" translate="yes" xml:space="preserve">
          <source>In very rare cases you might want to install the pre-release version of Cypress to verify a fix from the &lt;a href=&quot;https://github.com/cypress-io/cypress/commits/develop&quot;&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; branch, that has not been published yet.</source>
          <target state="translated">非常にまれなケースですが、サイプレスのプレリリースバージョンをインストールして、まだ公開されていない&lt;a href=&quot;https://github.com/cypress-io/cypress/commits/develop&quot;&gt; &lt;code&gt;develop&lt;/code&gt; &lt;/a&gt;ブランチからの修正を確認することができます。</target>
        </trans-unit>
        <trans-unit id="0163ac93d42d63bd37548aa08e795fe9630f509a" translate="yes" xml:space="preserve">
          <source>In your application code, you set &lt;code&gt;cookies&lt;/code&gt; and store a session on the browser. Now let&amp;rsquo;s imagine you have a single &lt;code&gt;insecure&lt;/code&gt; link (or JavaScript redirect) in your application code.</source>
          <target state="translated">アプリケーションコードで、 &lt;code&gt;cookies&lt;/code&gt; を設定し、ブラウザにセッションを保存します。次に、アプリケーションコードに &lt;code&gt;insecure&lt;/code&gt; リンク（またはJavaScriptリダイレクト）が1つあるとします。</target>
        </trans-unit>
        <trans-unit id="50a3e186589c6f6b457bc1a4566cf2eda5511e90" translate="yes" xml:space="preserve">
          <source>In your server, insert another middleware from &lt;code&gt;@cypress/code-coverage&lt;/code&gt;. If you use an Express server, include &lt;code&gt;middleware/express&lt;/code&gt;:</source>
          <target state="translated">サーバーに、 &lt;code&gt;@cypress/code-coverage&lt;/code&gt; から別のミドルウェアを挿入します。Expressサーバーを使用する場合は、 &lt;code&gt;middleware/express&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="9b70ff70ff7c5d78a34d4e32b3bf2a2948bd6297" translate="yes" xml:space="preserve">
          <source>Include the port other than &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;80&lt;/code&gt; と &lt;code&gt;443&lt;/code&gt; 以外のポートを含める</target>
        </trans-unit>
        <trans-unit id="7ff904b2e78fa3e369d1cc645a00ef32f2b6d10b" translate="yes" xml:space="preserve">
          <source>Incorrect usage of --ci-build-id flag</source>
          <target state="translated">CI-BUILD-ID フラグの使用法が間違っていた。</target>
        </trans-unit>
        <trans-unit id="eed10255d07b47a63a72e87b88c1d7f2895705ab" translate="yes" xml:space="preserve">
          <source>Incorrect usage of &lt;code&gt;--ci-build-id&lt;/code&gt; flag</source>
          <target state="translated">&lt;code&gt;--ci-build-id&lt;/code&gt; フラグの誤った使用</target>
        </trans-unit>
        <trans-unit id="2934b39a8c2dae9682547a1c6726dd6892991929" translate="yes" xml:space="preserve">
          <source>Incorrectly handling query params on redirects fixed.</source>
          <target state="translated">リダイレクトでのクエリパラメータの扱いが不適切だったのを修正した。</target>
        </trans-unit>
        <trans-unit id="7f73e5c2402c202a68a0e14f165f5e8af1d21f98" translate="yes" xml:space="preserve">
          <source>Increased &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; timeout from &lt;strong&gt;15s&lt;/strong&gt; to &lt;strong&gt;20s&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; の&lt;/a&gt;タイムアウトを&lt;strong&gt;15秒&lt;/strong&gt;から&lt;strong&gt;20秒に&lt;/strong&gt;増やしました。</target>
        </trans-unit>
        <trans-unit id="73b2ebc8af102151cec09c774a4534a9a37f10b7" translate="yes" xml:space="preserve">
          <source>Increased &lt;code&gt;visitTimeout&lt;/code&gt; from &lt;code&gt;20s&lt;/code&gt; to &lt;code&gt;30s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;visitTimeout&lt;/code&gt; が &lt;code&gt;20s&lt;/code&gt; から &lt;code&gt;30s&lt;/code&gt; 秒に増加しました。</target>
        </trans-unit>
        <trans-unit id="3b4c8073854add7c1e8d30cfbcc5c0e6d772861a" translate="yes" xml:space="preserve">
          <source>Increased timeout for browser to make a connection when running during &lt;code&gt;cypress run&lt;/code&gt; from 10 seconds to 30 seconds.</source>
          <target state="translated">&lt;code&gt;cypress run&lt;/code&gt; 中に実行しているときにブラウザーが接続を確立するためのタイムアウトを10秒から30秒に増やしました。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="9dc579b03a1575bb8ca231f018fa24b7b9a268c7" translate="yes" xml:space="preserve">
          <source>Index From End</source>
          <target state="translated">インデックス</target>
        </trans-unit>
        <trans-unit id="d4ee2e4bfdb02384be06a48400b72c41760759b0" translate="yes" xml:space="preserve">
          <source>Indexing the web</source>
          <target state="translated">ウェブのインデックス作成</target>
        </trans-unit>
        <trans-unit id="dc9fedd2d661f73b8ab1a9e196c1bcc8275bbee9" translate="yes" xml:space="preserve">
          <source>Initially you may be tempted to use &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; or use Cypress to traverse to the 3rd party login window.</source>
          <target state="translated">最初は、&lt;a href=&quot;../../api/commands/visit&quot;&gt; &lt;code&gt;cy.visit()&lt;/code&gt; &lt;/a&gt;を使用するか、サイプレスを使用してサードパーティのログインウィンドウに移動するように誘惑されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="4a8cd3a01c2a7003359df7223ec6ad3c420afb36" translate="yes" xml:space="preserve">
          <source>Injects &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/domain&quot;&gt;&lt;code&gt;document.domain&lt;/code&gt;&lt;/a&gt; into &lt;code&gt;text/html&lt;/code&gt; pages.</source>
          <target state="translated">注入&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/domain&quot;&gt; &lt;code&gt;document.domain&lt;/code&gt; を&lt;/a&gt;へ &lt;code&gt;text/html&lt;/code&gt; ページ。</target>
        </trans-unit>
        <trans-unit id="2097134c11ba44805655781d022efeab896310da" translate="yes" xml:space="preserve">
          <source>Inlined Google Fonts into &lt;code&gt;vendor.css&lt;/code&gt;.</source>
          <target state="translated">Googleフォントを &lt;code&gt;vendor.css&lt;/code&gt; にインライン化しました。</target>
        </trans-unit>
        <trans-unit id="a59f621afdf9fe7451526c2bf4126b406bd45519" translate="yes" xml:space="preserve">
          <source>Input ranges are now more easily testable using the new &lt;a href=&quot;../../api/commands/trigger&quot;&gt;&lt;code&gt;.trigger()&lt;/code&gt;&lt;/a&gt; command. See our &lt;a href=&quot;recipes#Form-Interactions&quot;&gt;new recipe&lt;/a&gt; for details on how. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/287&quot;&gt;#287&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/trigger&quot;&gt; &lt;code&gt;.trigger()&lt;/code&gt; &lt;/a&gt;コマンドを使用して、入力範囲をより簡単にテストできるようになりました。方法の詳細については、&lt;a href=&quot;recipes#Form-Interactions&quot;&gt;新しいレシピ&lt;/a&gt;を参照してください。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/287&quot;&gt;＃287を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="65a38d0cf0c91f4dfc5a43b6d5241eda136a85cd" translate="yes" xml:space="preserve">
          <source>Input/Textarea</source>
          <target state="translated">Input/Textarea</target>
        </trans-unit>
        <trans-unit id="f62457422b43396556bf83cc4805844e73d8e90a" translate="yes" xml:space="preserve">
          <source>Insecure Content</source>
          <target state="translated">安全でないコンテンツ</target>
        </trans-unit>
        <trans-unit id="6dd0dc1ea10721e352e9a173ee7ca71cf27090fa" translate="yes" xml:space="preserve">
          <source>Inserts character to the right of the cursor</source>
          <target state="translated">カーソルの右側に文字を挿入</target>
        </trans-unit>
        <trans-unit id="815f7d20ba4f5e3c004cb8cbfa36da5dd979b66a" translate="yes" xml:space="preserve">
          <source>Inside of this file, you will export a function. Cypress will call this function, pass you the project&amp;rsquo;s configuration, and enable you to bind to the events exposed.</source>
          <target state="translated">このファイル内で、関数をエクスポートします。サイプレスはこの関数を呼び出し、プロジェクトの構成を渡し、公開されたイベントにバインドできるようにします。</target>
        </trans-unit>
        <trans-unit id="24d6c2f6a92b25dfecd8ca5c21464abceb4d09f6" translate="yes" xml:space="preserve">
          <source>Inside the browser</source>
          <target state="translated">ブラウザの中</target>
        </trans-unit>
        <trans-unit id="7bdc4cee10367f81fa94c2dd050062b1c1da3d71" translate="yes" xml:space="preserve">
          <source>Install a version different than the default npm package.</source>
          <target state="translated">デフォルトのnpmパッケージとは異なるバージョンをインストールします。</target>
        </trans-unit>
        <trans-unit id="c9c1f3821545c8e75ca62658cd68f8d6ebd0eb96" translate="yes" xml:space="preserve">
          <source>Install binary</source>
          <target state="translated">バイナリのインストール</target>
        </trans-unit>
        <trans-unit id="6420671ac39b9dc0aa1e29413441339c84e8453d" translate="yes" xml:space="preserve">
          <source>Install pre-release version</source>
          <target state="translated">プレリリース版のインストール</target>
        </trans-unit>
        <trans-unit id="ac03b5988480f0cf04e149075af86a6e1fe7f84c" translate="yes" xml:space="preserve">
          <source>Install the Cypress GitHub app</source>
          <target state="translated">CypressのGitHubアプリをインストールする</target>
        </trans-unit>
        <trans-unit id="9a539696de966a99368f5d0fe4395d7a76ef9f7b" translate="yes" xml:space="preserve">
          <source>Install the plugin</source>
          <target state="translated">プラグインのインストール</target>
        </trans-unit>
        <trans-unit id="3f3bfafdc36e0eb870cdb18cc9c59efb1ce7f065" translate="yes" xml:space="preserve">
          <source>Install via organization integration settings</source>
          <target state="translated">組織統合の設定でインストール</target>
        </trans-unit>
        <trans-unit id="a7d37c03d6b82b4cf9c24a59b72de2aa85ff8fa1" translate="yes" xml:space="preserve">
          <source>Install via project settings</source>
          <target state="translated">プロジェクト設定からインストール</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">Installing</target>
        </trans-unit>
        <trans-unit id="859ed9192b8b065cfabff634c98cfe3e2f2e507a" translate="yes" xml:space="preserve">
          <source>Installing Cypress</source>
          <target state="translated">サイプレスのインストール</target>
        </trans-unit>
        <trans-unit id="4a1047bfa9593c168e832a865502e77d69a31196" translate="yes" xml:space="preserve">
          <source>Installing Cypress via &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://yarnpkg.com/&quot;&gt; &lt;code&gt;yarn&lt;/code&gt; &lt;/a&gt;サイプレスをインストールする：</target>
        </trans-unit>
        <trans-unit id="4fc87b674ce76b66283308c75af1a20c59064192" translate="yes" xml:space="preserve">
          <source>Installing Cypress via &lt;code&gt;npm&lt;/code&gt; is easy:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; を介したサイプレスのインストールは簡単です：</target>
        </trans-unit>
        <trans-unit id="bad94515f6d136d2603333a9eb3cf4a918bebd46" translate="yes" xml:space="preserve">
          <source>Installing plugins</source>
          <target state="translated">プラグインのインストール</target>
        </trans-unit>
        <trans-unit id="75ee6728c4c28a14541dea084abd70aef23fc383" translate="yes" xml:space="preserve">
          <source>Instantiate a new bluebird promise.</source>
          <target state="translated">新しいブルーバードの約束をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="1ea2f9a830363440bf8fcb6fb1c6fdcea44f8cb4" translate="yes" xml:space="preserve">
          <source>Instead of hard coding external documentation, we now link everything through a redirection portal. This will prevent any links / documentation from ever breaking due to reorganization or renaming.</source>
          <target state="translated">外部ドキュメントをハードコーディングする代わりに、リダイレクトポータルを介してすべてをリンクします。これにより、再編成や名前の変更によるリンクドキュメントの破損を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="ed3418d486f2d3efc9dfa13f1a5241e231595548" translate="yes" xml:space="preserve">
          <source>Instead of hard coding it into your run command like this:</source>
          <target state="translated">このように実行コマンドにハードコーディングする代わりに</target>
        </trans-unit>
        <trans-unit id="1f563a271ac755feeb3fbff53c9077285499286a" translate="yes" xml:space="preserve">
          <source>Instead of hard coding this in your tests:</source>
          <target state="translated">テストでハードコーディングするのではなく</target>
        </trans-unit>
        <trans-unit id="178b11451aece3bb113e51341d1126d93801be03" translate="yes" xml:space="preserve">
          <source>Instead of hardcoding the URL you can use the &lt;code&gt;baseUrl&lt;/code&gt; of the &lt;a href=&quot;../../guides/references/configuration&quot;&gt;Cypress configuration&lt;/a&gt;.</source>
          <target state="translated">URLをハードコーディングする代わりに、&lt;a href=&quot;../../guides/references/configuration&quot;&gt;サイプレス構成の&lt;/a&gt; &lt;code&gt;baseUrl&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="2b582649a31b9537e7a392d9367d7850a86e5085" translate="yes" xml:space="preserve">
          <source>Instead of having your test code bypass OAuth, you could also ask your server for help. Perhaps all an OAuth token does is generate a user in your database. Oftentimes OAuth is only useful initially and your server establishes its own session with the client. If that is the case, just use &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; to get the session directly from your server and bypass the provider altogether.</source>
          <target state="translated">テストコードにOAuthをバイパスさせる代わりに、サーバーに助けを求めることもできます。おそらく、OAuthトークンが行うことは、データベースにユーザーを生成することだけです。多くの場合、OAuthは最初にのみ役立ち、サーバーはクライアントとの独自のセッションを確立します。その場合は、&lt;a href=&quot;../../api/commands/request&quot;&gt; &lt;code&gt;cy.request()&lt;/code&gt; &lt;/a&gt;を使用してサーバーから直接セッションを取得し、プロバイダー全体をバイパスします。</target>
        </trans-unit>
        <trans-unit id="629bec7aac0e872cbe7d626036314386f3323c28" translate="yes" xml:space="preserve">
          <source>Instead of just executing a system command, you may want more flexibility and could expose a series of routes only when running in a test environment.</source>
          <target state="translated">システムコマンドを実行するだけではなく、もっと柔軟性が欲しいかもしれませんし、テスト環境で実行しているときだけ一連のルートを公開することもできます。</target>
        </trans-unit>
        <trans-unit id="f01e5be95b1bf47441299b767044f92ed41bd546" translate="yes" xml:space="preserve">
          <source>Instead of seeing &lt;code&gt;Script error.&lt;/code&gt; - cross origins script errors are now handled specially and we throw a very long and exciting error explaining what just happened. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/241&quot;&gt;#241&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Script error.&lt;/code&gt; 代わりに。-クロスオリジンスクリプトエラーは特別に処理されるようになり、何が起こったのかを説明する非常に長くエキサイティングなエラーが発生します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/241&quot;&gt;＃241を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="d18ac78a128a806e1c302d719659a6cc0174ffdf" translate="yes" xml:space="preserve">
          <source>Instead of setting environment variables in a file, you can use plugins to dynamically set them with Node code. This enables you to do things like use &lt;code&gt;fs&lt;/code&gt; and read off configuration values and dynamically change them.</source>
          <target state="translated">ファイルに環境変数を設定する代わりに、プラグインを使用してNodeコードで動的に設定できます。これにより、 &lt;code&gt;fs&lt;/code&gt; を使用したり、構成値を読み取ったり、動的に変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="e1ebf20150edf99407e68b3406dd94d76e87f380" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;npx instrument&lt;/code&gt; command, we can use &lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt;&lt;code&gt;babel-plugin-istanbul&lt;/code&gt;&lt;/a&gt; to instrument the code as part of its transpilation. Add this plugin to the &lt;code&gt;.babelrc&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;npx instrument&lt;/code&gt; コマンドを使用する代わりに、&lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt; &lt;code&gt;babel-plugin-istanbul&lt;/code&gt; &lt;/a&gt;を使用して、トランスパイレーションの一部としてコードをインストルメントできます。このプラグインを &lt;code&gt;.babelrc&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="2998155e2741051ec0a7e752a6f926056b9ba0ea" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;this.*&lt;/code&gt; syntax, there is another way to access aliases.</source>
          <target state="translated">&lt;code&gt;this.*&lt;/code&gt; 構文を使用する代わりに、エイリアスにアクセスする別の方法があります。</target>
        </trans-unit>
        <trans-unit id="ea08e736ffcfed67863099290e6d89016c3fff8b" translate="yes" xml:space="preserve">
          <source>Instead of waiting until commands resolve, commands are immediately inserted with a &lt;code&gt;pending&lt;/code&gt; status.</source>
          <target state="translated">コマンドが解決されるまで待機する代わりに、コマンドは &lt;code&gt;pending&lt;/code&gt; 状態で直ちに挿入されます。</target>
        </trans-unit>
        <trans-unit id="ec3730b710019e0d0b7125d426b50267f140b583" translate="yes" xml:space="preserve">
          <source>Instead of writing a response inline you can automatically connect a response with a &lt;a href=&quot;fixture&quot;&gt;&lt;code&gt;cy.fixture()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答をインラインで&lt;a href=&quot;fixture&quot;&gt; &lt;code&gt;cy.fixture()&lt;/code&gt; &lt;/a&gt;代わりに、応答をcy.fixture（）に自動的に接続できます。</target>
        </trans-unit>
        <trans-unit id="e8e54126a8d91a8e59e34800c4f7893c875f3819" translate="yes" xml:space="preserve">
          <source>Instead, adding the &lt;code&gt;data-cy&lt;/code&gt; attribute to the element gives us a targeted selector that&amp;rsquo;s only used for testing.</source>
          <target state="translated">代わりに、 &lt;code&gt;data-cy&lt;/code&gt; 属性を要素に追加すると、テストにのみ使用されるターゲットセレクターが提供されます。</target>
        </trans-unit>
        <trans-unit id="af3f0d790b3484834d544ee886d3c75f240f8b1f" translate="yes" xml:space="preserve">
          <source>Instead, all you need to test is that the &lt;code&gt;href&lt;/code&gt; property is correct!</source>
          <target state="translated">代わりに、テストする必要があるのは、 &lt;code&gt;href&lt;/code&gt; プロパティが正しいことだけです。</target>
        </trans-unit>
        <trans-unit id="e28c659f1fc6fb8a50e8a542f95f7c0abd2f3060" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;a href=&quot;then&quot;&gt;&lt;code&gt;cy.then()&lt;/code&gt;&lt;/a&gt; callback to check the value.</source>
          <target state="translated">代わりに、&lt;a href=&quot;then&quot;&gt; &lt;code&gt;cy.then()&lt;/code&gt; &lt;/a&gt;コールバックを使用して値を確認します。</target>
        </trans-unit>
        <trans-unit id="74ef1173d7b9183cda0d76d8d9b9bfb65a5b1d48" translate="yes" xml:space="preserve">
          <source>Instead, you should build a docker container for your project&amp;rsquo;s version of cypress.</source>
          <target state="translated">代わりに、プロジェクトのバージョンのサイプレス用のDockerコンテナーを構築する必要があります。</target>
        </trans-unit>
        <trans-unit id="139273c40f59c240e55fe300580a238e66c7d66c" translate="yes" xml:space="preserve">
          <source>Instrument Panel</source>
          <target state="translated">インストルメントパネル</target>
        </trans-unit>
        <trans-unit id="30cce81e55c85561b3c24a6c6ea38eaef83e25d8" translate="yes" xml:space="preserve">
          <source>Instrumenting code</source>
          <target state="translated">インストルメンテーションコード</target>
        </trans-unit>
        <trans-unit id="3f7f3bf0c28229b845074a2404d80beaf96ac5fc" translate="yes" xml:space="preserve">
          <source>Integrate Cypress into GitHub via &lt;a href=&quot;github-integration#Pull-request-comments&quot;&gt;pull requests&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;github-integration#Pull-request-comments&quot;&gt;プルリクエストを&lt;/a&gt;介してサイプレスをGitHubに統合する</target>
        </trans-unit>
        <trans-unit id="8fefe595d387ac96a5a56e0b9a7d898d1d18a92e" translate="yes" xml:space="preserve">
          <source>Integrate with GitHub</source>
          <target state="translated">GitHubとの統合</target>
        </trans-unit>
        <trans-unit id="ce2d6691d9d9eb7e24fc3b0d2685f541b7efd5df" translate="yes" xml:space="preserve">
          <source>Integrate your Cypress tests with your GitHub workflow via commit &lt;a href=&quot;github-integration#Status-checks&quot;&gt;status checks&lt;/a&gt;</source>
          <target state="translated">コミット&lt;a href=&quot;github-integration#Status-checks&quot;&gt;ステータスチェックを&lt;/a&gt;介してサイプレステストをGitHubワークフローと統合する</target>
        </trans-unit>
        <trans-unit id="1a9b9bfc859afc93862f3511b4c483f1d2a686aa" translate="yes" xml:space="preserve">
          <source>Integration and Extensions</source>
          <target state="translated">統合と拡張</target>
        </trans-unit>
        <trans-unit id="8391e14b3c43387f52504bec0babee16188c1fe0" translate="yes" xml:space="preserve">
          <source>Integration tests</source>
          <target state="translated">統合テスト</target>
        </trans-unit>
        <trans-unit id="7f5a9c0f6a734e94e85a46d82a89f815b9c96120" translate="yes" xml:space="preserve">
          <source>IntelliSense is available for Cypress while editing your &lt;code&gt;cypress.json&lt;/code&gt; file. &lt;a href=&quot;../tooling/intelligent-code-completion&quot;&gt;Learn how to set up Intelligent Code Completion.&lt;/a&gt;</source>
          <target state="translated">IntelliSenseは、 &lt;code&gt;cypress.json&lt;/code&gt; ファイルの編集中にサイプレスで使用できます。&lt;a href=&quot;../tooling/intelligent-code-completion&quot;&gt;インテリジェントコード補完の設定方法を学びます。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1b337d1f12d5e5b495cd81755b7b5f3d5998afe0" translate="yes" xml:space="preserve">
          <source>IntelliSense is available for Cypress. It offers intelligent code suggestions directly in your IDE while writing tests. A typical IntelliSense popup shows command definition, a code example and a link to the full documentation page.</source>
          <target state="translated">IntelliSense は Cypress で利用可能です。IntelliSense は、テストを書いている間に IDE で直接インテリジェントなコード提案を提供します。典型的なIntelliSenseのポップアップは、コマンド定義、コード例、および完全なドキュメントページへのリンクを表示します。</target>
        </trans-unit>
        <trans-unit id="f18cfc36f4f9f94cbd1fb8f20de9b282adaeb658" translate="yes" xml:space="preserve">
          <source>Intelligent Code Completion</source>
          <target state="translated">インテリジェントコードの完成</target>
        </trans-unit>
        <trans-unit id="856a93b4361932980473a8fb3311b9ea2c301155" translate="yes" xml:space="preserve">
          <source>Intelligent code completion using JSON schemas is supported by default in &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&quot;https://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;. All other editors will require extra configuration or plugins for JSON schema support.</source>
          <target state="translated">&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;および&lt;a href=&quot;https://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;では、JSONスキーマを使用したインテリジェントなコード補完がデフォルトでサポートされています。他のすべてのエディターでは、JSONスキーマをサポートするための追加の構成またはプラグインが必要になります。</target>
        </trans-unit>
        <trans-unit id="8f38d1ecc140acef2d9f5582d2d1cb48e2c05275" translate="yes" xml:space="preserve">
          <source>Intelligently handle defaultPrevented events from descendants.</source>
          <target state="translated">子孫からのdefaultPreventedイベントをインテリジェントに処理します。</target>
        </trans-unit>
        <trans-unit id="c5684bf0251f67aed31969310a29107e69d8bf67" translate="yes" xml:space="preserve">
          <source>Interact with a range input (slider)</source>
          <target state="translated">レンジ入力(スライダー)との連動</target>
        </trans-unit>
        <trans-unit id="7bb43fc0728072e2523ce8de6dd4b4325b0d3d60" translate="yes" xml:space="preserve">
          <source>Interact with that element.</source>
          <target state="translated">その要素とインタラクトします。</target>
        </trans-unit>
        <trans-unit id="5533fd2ae269ffec5ff40e8ec9c81ff86a38ca11" translate="yes" xml:space="preserve">
          <source>Interacting With Elements</source>
          <target state="translated">要素との相互作用</target>
        </trans-unit>
        <trans-unit id="7a7209ae3fe1d1613751f606535395a7b5bfede0" translate="yes" xml:space="preserve">
          <source>Interacting with Elements</source>
          <target state="translated">要素との相互作用</target>
        </trans-unit>
        <trans-unit id="7dccb7d7f013ef6ffc105874dfb5ced54d432c57" translate="yes" xml:space="preserve">
          <source>Interested in the best practices for selecting elements? &lt;a href=&quot;../references/best-practices#Selecting-Elements&quot;&gt;Read here&lt;/a&gt;.</source>
          <target state="translated">要素を選択するためのベストプラクティスに興味がありますか？&lt;a href=&quot;../references/best-practices#Selecting-Elements&quot;&gt;こちらをお読みください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="921ffd2755b90606f913c1460d96bcf0d244ec77" translate="yes" xml:space="preserve">
          <source>Internal API changes for &lt;code&gt;$Commands&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$Commands&lt;/code&gt; 内部APIの変更。</target>
        </trans-unit>
        <trans-unit id="52f21819b854a9784c2db643b1522586ed08f07d" translate="yes" xml:space="preserve">
          <source>Internal changes to our API structure and communication. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1170&quot;&gt;#1170&lt;/a&gt;, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1413&quot;&gt;#1413&lt;/a&gt;, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1415&quot;&gt;#1415&lt;/a&gt;.</source>
          <target state="translated">API構造と通信の内部変更。修正&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1170&quot;&gt;＃1170&lt;/a&gt;、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1413&quot;&gt;＃1413&lt;/a&gt;、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1415&quot;&gt;＃1415&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bf544a33742e82395b839d9d4a981bc5fc63018" translate="yes" xml:space="preserve">
          <source>Internal refactor / improvements to support long lived runnable objects to work with page events.</source>
          <target state="translated">長く続いたランナブルオブジェクトをサポートし、ページイベントで動作するように内部リファクタリングが改善されました。</target>
        </trans-unit>
        <trans-unit id="157197151b0a4d0adfba14ac302478ff89daeb9c" translate="yes" xml:space="preserve">
          <source>Internal refactoring to &lt;code&gt;Cypress.Mouse&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cypress.Mouse&lt;/code&gt; への内部リファクタリング。</target>
        </trans-unit>
        <trans-unit id="6b5a7c797bec5b174af546a6e927e3044e5694b8" translate="yes" xml:space="preserve">
          <source>Internal routing errors in Cypress are now gracefully handled with &lt;code&gt;x-cypress-error&lt;/code&gt; and &lt;code&gt;x-cypress-stack&lt;/code&gt; set on response headers.</source>
          <target state="translated">サイプレスの内部ルーティングエラーは、応答ヘッダーに設定された &lt;code&gt;x-cypress-error&lt;/code&gt; および &lt;code&gt;x-cypress-stack&lt;/code&gt; で正常に処理されるようになりました。</target>
        </trans-unit>
        <trans-unit id="c72e6571cd87805043d6ff824199fef507cb65cb" translate="yes" xml:space="preserve">
          <source>Internally Cypress does account for this, and will polyfill the blur events when necessary to replicate what the browser does. Unfortunately the browser will still behave differently when not in focus - for instance it may throttle async events. Your best bet here is to keep Cypress focused when working on a test.</source>
          <target state="translated">内部的には、Cypress はこれを考慮し、ブラウザが行うことを再現するために必要に応じてぼかしイベントをポリフィルします。残念ながら、ブラウザはフォーカスしていないときにも異なる動作をします-例えば、非同期イベントをスロットルすることがあります。ここでの最善の策は、テスト作業中は Cypress をフォーカスしたままにしておくことです。</target>
        </trans-unit>
        <trans-unit id="a272838493ed5297b778c148fbcb938ec5db8a46" translate="yes" xml:space="preserve">
          <source>Internally our built in commands make use of every single one of these combinations above.</source>
          <target state="translated">内部的には、私たちの内蔵コマンドは、上記の組み合わせの一つ一つを利用しています。</target>
        </trans-unit>
        <trans-unit id="0a6c0e39c71a508a816c659333b19d3aa2ca1aa5" translate="yes" xml:space="preserve">
          <source>Internally refactored Cypress for easier testability / debuggability.</source>
          <target state="translated">Cypress を内部的にリファクタリングし、テスト性のデバッグ性を向上させました。</target>
        </trans-unit>
        <trans-unit id="ae1dabe147bee7e07cfaf98b6f39f019fd111f2b" translate="yes" xml:space="preserve">
          <source>Internally refactored how browsers are added and spawned in preparation of us adding cross browser support.</source>
          <target state="translated">クロスブラウザサポートの追加に備えて、ブラウザの追加と生成方法を内部的にリファクタリングしました。</target>
        </trans-unit>
        <trans-unit id="6d2bf3bf97d7110e76dbf631a8d5f08b70486dc2" translate="yes" xml:space="preserve">
          <source>Internally, Cypress has made a reference to the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; collection returned as the alias &amp;ldquo;rows&amp;rdquo;. To reference these same &amp;ldquo;rows&amp;rdquo; later, you can use the &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">内部的には、サイプレスはエイリアス「行」として返される &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; コレクションを参照しています。これらの同じ「行」を後で参照するには、&lt;a href=&quot;../../api/commands/get&quot;&gt; &lt;code&gt;cy.get()&lt;/code&gt; &lt;/a&gt;コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="d69183212fcfe1542f38a5df9e8d4a7011169e19" translate="yes" xml:space="preserve">
          <source>Introduced new &lt;a href=&quot;../../api/commands/fixture&quot;&gt;&lt;code&gt;cy.fixture()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">新しい&lt;a href=&quot;../../api/commands/fixture&quot;&gt; &lt;code&gt;cy.fixture()&lt;/code&gt; &lt;/a&gt;コマンドが導入されました。</target>
        </trans-unit>
        <trans-unit id="15570a42c8d0090306099d26d01331b13063fa9b" translate="yes" xml:space="preserve">
          <source>Introduced new &lt;strong&gt;command option&lt;/strong&gt;&lt;code&gt;length&lt;/code&gt; which cues Cypress into not resolving matched elements until their length matches the option provided.</source>
          <target state="translated">提供されたオプションと長さが一致するまでサイプレスが一致した要素を解決しないように&lt;strong&gt;指示する&lt;/strong&gt;新しい&lt;strong&gt;コマンドオプションの&lt;/strong&gt; &lt;code&gt;length&lt;/code&gt; を導入しました。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="1e3df84601bda6f6c3662c05c057adf074a426d2" translate="yes" xml:space="preserve">
          <source>Introduction to Cypress</source>
          <target state="translated">サイプレスの紹介</target>
        </trans-unit>
        <trans-unit id="19704f243c889fd8081b9ea58fe747cb415143c5" translate="yes" xml:space="preserve">
          <source>Invalid cookie values no longer crash Cypress. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/962&quot;&gt;#962&lt;/a&gt;.</source>
          <target state="translated">無効なCookie値がサイプレスをクラッシュさせることはなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/962&quot;&gt;＃962を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="2288ac5fc4461a2811be53687ea7cd7c43e275e4" translate="yes" xml:space="preserve">
          <source>Invalid username / password</source>
          <target state="translated">無効なユーザー名のパスワード</target>
        </trans-unit>
        <trans-unit id="ad3ad21f22a0dea7c53804a19001fb6e698cd76f" translate="yes" xml:space="preserve">
          <source>Invite &amp;lsquo;admin&amp;rsquo; to organization</source>
          <target state="translated">「管理者」を組織に招待する</target>
        </trans-unit>
        <trans-unit id="36693165be36c67188bff1bff1bfc7701213a1d7" translate="yes" xml:space="preserve">
          <source>Invite &amp;lsquo;member&amp;rsquo; to organization</source>
          <target state="translated">「メンバー」を組織に招待する</target>
        </trans-unit>
        <trans-unit id="347eb9ff3bad1a574d79ae444188fc379f78bf8e" translate="yes" xml:space="preserve">
          <source>Invite &amp;lsquo;owner&amp;rsquo; to organization</source>
          <target state="translated">「所有者」を組織に招待する</target>
        </trans-unit>
        <trans-unit id="86ff18d2c897eb70e44accff7d9f889361c34d7e" translate="yes" xml:space="preserve">
          <source>Invite a user to an organization:</source>
          <target state="translated">ユーザーを組織に招待します。</target>
        </trans-unit>
        <trans-unit id="69d42209324e467625ff0472353eddf0ba29aa27" translate="yes" xml:space="preserve">
          <source>Invite and edit user&amp;rsquo;s roles for organizations</source>
          <target state="translated">組織のユーザーの役割を招待して編集する</target>
        </trans-unit>
        <trans-unit id="416bba0c81753e21fba73796c1fc9f7a549b9cd2" translate="yes" xml:space="preserve">
          <source>Invite users</source>
          <target state="translated">ユーザーを招待する</target>
        </trans-unit>
        <trans-unit id="c65605adf5270f5065089b0189da542274d30db0" translate="yes" xml:space="preserve">
          <source>Invoke</source>
          <target state="translated">Invoke</target>
        </trans-unit>
        <trans-unit id="ec417f97085e4623c23f8655854d04156e0e11ff" translate="yes" xml:space="preserve">
          <source>Invoke a function on the previously yielded subject.</source>
          <target state="translated">前に生成されたテーマの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="d315b3fdccae782b8f67272f62e777033d41fe07" translate="yes" xml:space="preserve">
          <source>Invoke the function on the subject in wrap and return the new value</source>
          <target state="translated">wrap 内のサブジェクトに対して関数を呼び出し、新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="3fd34f6d72837602be97a0ae744b2653093c3973" translate="yes" xml:space="preserve">
          <source>Invoking it like this would error:</source>
          <target state="translated">このように呼び出すとエラーになります。</target>
        </trans-unit>
        <trans-unit id="302d3b31f903ddcac8adf13f2827d7a482164c73" translate="yes" xml:space="preserve">
          <source>Is detached</source>
          <target state="translated">戸建</target>
        </trans-unit>
        <trans-unit id="c5a816892ab8af8686fc83b9c6d7ff49932ec118" translate="yes" xml:space="preserve">
          <source>Is focusable</source>
          <target state="translated">フォーカス可能</target>
        </trans-unit>
        <trans-unit id="92cbb18d46585cfcf3aac2bd9744763325b27bc7" translate="yes" xml:space="preserve">
          <source>Is hidden</source>
          <target state="translated">隠れている</target>
        </trans-unit>
        <trans-unit id="0b4cab04a45465e47883d63fab5c59f92151ba1b" translate="yes" xml:space="preserve">
          <source>Is resetting the state necessary?</source>
          <target state="translated">状態のリセットは必要ですか?</target>
        </trans-unit>
        <trans-unit id="5d1d57e2ee232a5355d7315c07f0ca8742e6551c" translate="yes" xml:space="preserve">
          <source>Is scrollable</source>
          <target state="translated">スクロール可能</target>
        </trans-unit>
        <trans-unit id="5ea8391c45995b583f6b1235a1326f8f1cc82faf" translate="yes" xml:space="preserve">
          <source>Is the element behind another element?</source>
          <target state="translated">要素は別の要素の後ろにあるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="5a7e766f4d95000632b60abba0b2c5c4cafc7af4" translate="yes" xml:space="preserve">
          <source>Is the element invisible?</source>
          <target state="translated">要素は見えないのか?</target>
        </trans-unit>
        <trans-unit id="00a5eb5be6d0e0275a142afb158897a4a831d272" translate="yes" xml:space="preserve">
          <source>Is this worth trying to replicate when you&amp;rsquo;re testing?</source>
          <target state="translated">テストしているときにこれを複製してみる価値はありますか？</target>
        </trans-unit>
        <trans-unit id="db711e8244acdbb422d0057f6b2e38460719d54c" translate="yes" xml:space="preserve">
          <source>Is visible</source>
          <target state="translated">目に見える</target>
        </trans-unit>
        <trans-unit id="1884b1c046724c12caad7ac9535bb681e1c79107" translate="yes" xml:space="preserve">
          <source>Isolate the Problem</source>
          <target state="translated">問題の切り分け</target>
        </trans-unit>
        <trans-unit id="73781a127ec1294a42a6bd6b81266946ff4be5b3" translate="yes" xml:space="preserve">
          <source>Issue</source>
          <target state="translated">Issue</target>
        </trans-unit>
        <trans-unit id="7dfe538fef5659381b9d285d4320a6802e39e9d9" translate="yes" xml:space="preserve">
          <source>Issue a JavaScript redirect in your application, such as &lt;code&gt;window.location.href = '...'&lt;/code&gt;, to a different superdomain.</source>
          <target state="translated">アプリケーションでJavaScriptリダイレクト（ &lt;code&gt;window.location.href = '...'&lt;/code&gt; など）を別のスーパードメインに発行します。</target>
        </trans-unit>
        <trans-unit id="0d4a689a54881b45cfb9f81abe79746e9cf4aa4c" translate="yes" xml:space="preserve">
          <source>Issue a simple HTTP request</source>
          <target state="translated">シンプルな HTTP リクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="692ba34138d2513c2acea648571557cb0adef435" translate="yes" xml:space="preserve">
          <source>Issuing Cypress Commands inside of a Promise now works. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/111&quot;&gt;#111&lt;/a&gt;.</source>
          <target state="translated">Promise内でのサイプレスコマンドの発行が機能するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/111&quot;&gt;＃111を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="dee2e0973907cfa359ccd0df171a7e26c022e6b7" translate="yes" xml:space="preserve">
          <source>It assumes there is a &lt;code&gt;.git&lt;/code&gt; folder and uses Git commands to get each property, like &lt;code&gt;git show -s --pretty=%B&lt;/code&gt; to get commit message, see &lt;a href=&quot;https://github.com/cypress-io/commit-info/blob/master/src/git-api.js&quot;&gt;src/git-api.js&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.git&lt;/code&gt; フォルダーがあることを前提とし、Gitコマンドを使用して各プロパティを取得します。 &lt;code&gt;git show -s --pretty=%B&lt;/code&gt; 、git show -s --pretty =％Bでコミットメッセージを取得します&lt;a href=&quot;https://github.com/cypress-io/commit-info/blob/master/src/git-api.js&quot;&gt;。src/ git-api.jsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d7d0de77ccdda3a2a187a7b8e78c458ac11bf60" translate="yes" xml:space="preserve">
          <source>It can be difficult to debug problems when elements are not considered actionable by Cypress.</source>
          <target state="translated">要素がCypressで実行可能とみなされていない場合、問題をデバッグするのが困難になることがあります。</target>
        </trans-unit>
        <trans-unit id="98fe5df6c7157e79098cc5adf264e9dbe0f66498" translate="yes" xml:space="preserve">
          <source>It can be run headlessly.</source>
          <target state="translated">頭を使わずに走らせることができます。</target>
        </trans-unit>
        <trans-unit id="eab1062950ccb91bfac00fbcc20a78ab95c5f218" translate="yes" xml:space="preserve">
          <source>It comes baked into Cypress and does not need to be installed separately.</source>
          <target state="translated">Cypressに組み込まれており、別途インストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="9fd1be0a7f50e587da2eb19d6f0d71a2591d1f1d" translate="yes" xml:space="preserve">
          <source>It generates the beautiful standalone HTML report file &lt;code&gt;mochawesome-report/mochawesome.html&lt;/code&gt; shown below. As you can see all test results, timing information, and even test bodies are included.</source>
          <target state="translated">以下に示すように、美しいスタンドアロンのHTMLレポートファイル &lt;code&gt;mochawesome-report/mochawesome.html&lt;/code&gt; を生成します。すべてのテスト結果を見ることができるように、タイミング情報、さらにはテスト本体も含まれています。</target>
        </trans-unit>
        <trans-unit id="39136691a806ecd4ede3234a57363343020ed269" translate="yes" xml:space="preserve">
          <source>It is common for tests in Cypress to issue 30+ commands. Because nearly every command has a default assertion (and can therefore fail), even by limiting your assertions you&amp;rsquo;re not saving yourself anything because &lt;strong&gt;any single command could implicitly fail&lt;/strong&gt;.</source>
          <target state="translated">サイプレスのテストでは、30以上のコマンドを発行するのが一般的です。ほとんどすべてのコマンドにはデフォルトのアサーションがあり（したがって失敗する可能性があります）、アサーションを制限しても&lt;strong&gt;、単一のコマンドが暗黙的に失敗する可能性がある&lt;/strong&gt;ため&lt;strong&gt;、&lt;/strong&gt;何も保存していませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c747b31deacd2080c345077d706ed1ebf0b2fd34" translate="yes" xml:space="preserve">
          <source>It is crucial that you understand how your application works else you will write flaky tests.</source>
          <target state="translated">アプリケーションがどのように動作するかを理解していないと、欠陥テストを書くことになってしまいます。</target>
        </trans-unit>
        <trans-unit id="be413bf9ba03e137bb850af2935df0123b1aaa8b" translate="yes" xml:space="preserve">
          <source>It is incredibly time consuming and slows down your tests.</source>
          <target state="translated">信じられないほど時間がかかり、テストが遅くなります。</target>
        </trans-unit>
        <trans-unit id="7d30012372de91ccedf2455e8c6a978fbbd46ee2" translate="yes" xml:space="preserve">
          <source>It is very important to understand that Cypress commands don&amp;rsquo;t do anything at the moment they are invoked, but rather enqueue themselves to be run later. This is what we mean when we say Cypress commands are asynchronous.</source>
          <target state="translated">サイプレスコマンドは、呼び出された時点では何も実行せず、後で実行するために自分自身をキューに入れることを理解することが非常に重要です。これは、サイプレスのコマンドが非同期であると言うときの意味です。</target>
        </trans-unit>
        <trans-unit id="9ce21251dca34ef1a436adc21881c5a7d1ce13a9" translate="yes" xml:space="preserve">
          <source>It should look something like &lt;strong&gt;http://localhost:8080&lt;/strong&gt;.</source>
          <target state="translated">それは次のようになります&lt;strong&gt;にhttp：// localhostを：8080&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="80b7742976b8adf460d2d2aeb2886a8468365602" translate="yes" xml:space="preserve">
          <source>It simplifies running Cypress in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/continuous-integration&quot;&gt;継続的インテグレーションでの&lt;/a&gt;サイプレスの実行を簡素化します。</target>
        </trans-unit>
        <trans-unit id="1ee5eaf554a89f33a67614769634524a529f93dd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a great idea to get your signup and login flow under test coverage since it is very important to all of your users and you never want it to break.</source>
          <target state="translated">サインアップとログインのフローをテストカバレッジの下に置くことは、すべてのユーザーにとって非常に重要であり、中断させたくないので、すばらしいアイデアです。</target>
        </trans-unit>
        <trans-unit id="fdf1af60bbdc583e41dcea4a260c119b88956670" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s actually &lt;em&gt;possible&lt;/em&gt; for Cypress to accommodate these situations the same way Selenium does, but you will never have &lt;em&gt;native&lt;/em&gt; access to these iframes from inside of Cypress.</source>
          <target state="translated">サイプレスがSeleniumと同じ方法でこれらの状況に対応する&lt;em&gt;こと&lt;/em&gt;は実際には&lt;em&gt;可能&lt;/em&gt;ですが、サイプレスの内部からこれらのiframeに&lt;em&gt;ネイティブ&lt;/em&gt;アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="6e768f10fff402864eeaab9272cadf49b69c0c93" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s all downside with no upside:</source>
          <target state="translated">それはすべて欠点であり、欠点はありません。</target>
        </trans-unit>
        <trans-unit id="df5ee67cce4958a1e097362f1ecc1e29ce35767e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to note that although we do our &lt;strong&gt;very best&lt;/strong&gt; to ensure your application works normally inside of Cypress, there &lt;em&gt;are&lt;/em&gt; some limitations you need to be aware of.</source>
          <target state="translated">それは我々が行うもののことに注意することが重要です&lt;strong&gt;非常に最高の&lt;/strong&gt;アプリケーションがサイプレスの内部に正常に動作することを確認するために、そこに&lt;em&gt;ある&lt;/em&gt;あなたが知っておく必要があるいくつかの制限が。</target>
        </trans-unit>
        <trans-unit id="3e97d2f36e753347978d17dde27a0e2abc95a1c2" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to understand why you&amp;rsquo;d want to bind to either &lt;code&gt;Cypress&lt;/code&gt; or &lt;code&gt;cy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cypress&lt;/code&gt; または &lt;code&gt;cy&lt;/code&gt; のいずれかにバインドする理由を理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="334b2ddb847b165d4c039dc54bf5b6af4255a7d9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to enable debugging these scripts by adding the &lt;code&gt;crossorigin&lt;/code&gt; attribute and setting a &lt;code&gt;CORS&lt;/code&gt; header.</source>
          <target state="translated">&lt;code&gt;crossorigin&lt;/code&gt; 属性を追加して &lt;code&gt;CORS&lt;/code&gt; ヘッダーを設定することで、これらのスクリプトのデバッグを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="657a07f2be60684130376ca86fceb04fc3e5f766" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the &lt;a href=&quot;configuration#Folders-Files&quot;&gt;&lt;code&gt;supportFile&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">テストコードの前にセットアップファイルをロードすると便利です。サイプレスのデフォルトを設定するか、カスタムサイプレスコマンドを利用する場合、すべてのテストファイルでそれらのデフォルト/コマンドをインポート/要求する必要はなく、&lt;a href=&quot;configuration#Folders-Files&quot;&gt; &lt;code&gt;supportFile&lt;/code&gt; &lt;/a&gt;構成オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="2cb6a6443a633c3a158d58be0f5fede03d79e6f7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s very important to understand the mechanism Cypress uses to chain commands together. It manages a Promise chain on your behalf, with each command yielding a &amp;lsquo;subject&amp;rsquo; to the next command, until the chain ends or an error is encountered. The developer should not need to use Promises directly, but understanding how they work is helpful!</source>
          <target state="translated">サイプレスがコマンドをチェーンするために使用するメカニズムを理解することは非常に重要です。代わりにPromiseチェーンを管理し、チェーンが終了するかエラーが発生するまで、各コマンドは次のコマンドの「サブジェクト」を生成します。開発者はPromiseを直接使用する必要はありませんが、Promiseがどのように機能するかを理解しておくと役に立ちます。</target>
        </trans-unit>
        <trans-unit id="43a1419b0a16467bcb3ceadf516778d211fab736" translate="yes" xml:space="preserve">
          <source>Iterate through an array like structure (arrays or objects with a &lt;code&gt;length&lt;/code&gt; property).</source>
          <target state="translated">配列のような配列（ &lt;code&gt;length&lt;/code&gt; プロパティを持つ配列またはオブジェクト）を反復処理します。</target>
        </trans-unit>
        <trans-unit id="e0c004fb3f415f03826dcbf579bbcc9503d137b4" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">その &lt;code&gt;width&lt;/code&gt; または &lt;code&gt;height&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e9865a8842f87c81f0188117d466d92c66748e6" translate="yes" xml:space="preserve">
          <source>Its CSS property (or ancestors) is &lt;code&gt;display: none&lt;/code&gt;.</source>
          <target state="translated">そのCSSプロパティ（または祖先）は &lt;code&gt;display: none&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c62d091c0bf41bc4cf1929cbfc41afaced5389bc" translate="yes" xml:space="preserve">
          <source>Its CSS property (or ancestors) is &lt;code&gt;visibility: hidden&lt;/code&gt;.</source>
          <target state="translated">そのCSSプロパティ（または祖先）は &lt;code&gt;visibility: hidden&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0d01899d7eac45b85bcaa9827cc3ee4480c18cf4" translate="yes" xml:space="preserve">
          <source>Its CSS property is &lt;code&gt;position: fixed&lt;/code&gt; and it&amp;rsquo;s offscreen or covered up.</source>
          <target state="translated">そのCSSプロパティは &lt;code&gt;position: fixed&lt;/code&gt; 、画面外または隠されます。</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="5d6ee3c1b91a4f3e6dfca851d66a0f0944b4c263" translate="yes" xml:space="preserve">
          <source>JSON fixtures with unicode escape sequences are now parsed correctly. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/964&quot;&gt;#964&lt;/a&gt;.</source>
          <target state="translated">Unicodeエスケープシーケンスを含むJSONフィクスチャが正しく解析されるようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/964&quot;&gt;＃964を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="e15ddc552daca5b41bfb140c68f1f25c6da5e7bc" translate="yes" xml:space="preserve">
          <source>JSX and CJSX</source>
          <target state="translated">JSXとCJSX</target>
        </trans-unit>
        <trans-unit id="d66ed2254c1744f6803e5dc84b262f6d290da4c9" translate="yes" xml:space="preserve">
          <source>JavaScript Redirects</source>
          <target state="translated">JavaScriptのリダイレクト</target>
        </trans-unit>
        <trans-unit id="5f61712d6fc2cae7116b6916efcc16204b0c2aed" translate="yes" xml:space="preserve">
          <source>JavaScript arrays and objects are stringified and formatted into text.</source>
          <target state="translated">JavaScriptの配列やオブジェクトは文字列化され、テキストに整形されます。</target>
        </trans-unit>
        <trans-unit id="4200ab363a2bbec801370b191a1404dca14c89ab" translate="yes" xml:space="preserve">
          <source>JavaScript popup blocking is now disabled and will not interfere with running tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/125&quot;&gt;#125&lt;/a&gt;.</source>
          <target state="translated">JavaScriptポップアップブロックが無効になり、テストの実行を妨げることはなくなりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/125&quot;&gt;＃125を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="a2feefe9afbc3d0f6fec53c2b390d4515e363675" translate="yes" xml:space="preserve">
          <source>Jenkins</source>
          <target state="translated">Jenkins</target>
        </trans-unit>
        <trans-unit id="0c2c5c506cef0ed2d3ad2b7e45e97980b66f5520" translate="yes" xml:space="preserve">
          <source>Jenkinsfile</source>
          <target state="translated">Jenkinsfile</target>
        </trans-unit>
        <trans-unit id="b5b8bd2dde132deaa5d4e014fa98dd4029a66224" translate="yes" xml:space="preserve">
          <source>Jump to failed tests</source>
          <target state="translated">失敗したテストへのジャンプ</target>
        </trans-unit>
        <trans-unit id="7cdd0a39f39601525c6c1fb41dee66f38e4478fa" translate="yes" xml:space="preserve">
          <source>Just as you would when writing TypeScript files in your project, you will have to handle transpiling your TypeScript test files. Cypress exposes a &lt;a href=&quot;../../api/plugins/preprocessors-api&quot;&gt;&lt;code&gt;file:preprocessor&lt;/code&gt; event&lt;/a&gt; you can use to customize how your test code is transpiled and sent to the browser.</source>
          <target state="translated">プロジェクトでTypeScriptファイルを書き込む場合と同様に、TypeScriptテストファイルのトランスパイルを処理する必要があります。サイプレスは、テストコードを変換してブラウザに送信する方法をカスタマイズするために使用できる&lt;a href=&quot;../../api/plugins/preprocessors-api&quot;&gt; &lt;code&gt;file:preprocessor&lt;/code&gt; イベント&lt;/a&gt;を公開しています。</target>
        </trans-unit>
        <trans-unit id="f46351566b7bab6e81796aa2cde4e4b3a16d22f5" translate="yes" xml:space="preserve">
          <source>Just be sure &lt;em&gt;not&lt;/em&gt; to include any code that has side effects in your callback function.</source>
          <target state="translated">念の&lt;em&gt;ない&lt;/em&gt;コールバック関数に副作用を持っている任意のコードを含めること。</target>
        </trans-unit>
        <trans-unit id="784324892fb89e718e64e6169b2c7f6e3bac488a" translate="yes" xml:space="preserve">
          <source>Just be sure &lt;em&gt;not&lt;/em&gt; to include any code that has side effects in your callback function. The callback function will be retried over and over again until no assertions within it throw.</source>
          <target state="translated">念の&lt;em&gt;ない&lt;/em&gt;コールバック関数に副作用を持っている任意のコードを含めること。コールバック関数は、その中のアサーションがスローされなくなるまで何度も再試行されます。</target>
        </trans-unit>
        <trans-unit id="00504ece5558f7cee1907345a51121045921205d" translate="yes" xml:space="preserve">
          <source>Just like Promises, you can return any compatible &amp;ldquo;thenable&amp;rdquo; (anything that has a &lt;code&gt;.then()&lt;/code&gt; interface) and Cypress will wait for that to resolve before continuing forward through the chain of commands.</source>
          <target state="translated">Promiseと同様に、互換性のある「Thenable」（。then &lt;code&gt;.then()&lt;/code&gt; インターフェースを持つもの）を返すことができ、サイプレスはそれが解決するのを待ってからコマンドチェーンを続行します。</target>
        </trans-unit>
        <trans-unit id="3b3398bb5c649b30e2db6fc94c81b3132106125c" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;command-line&quot;&gt;Command Line options&lt;/a&gt; for &lt;code&gt;cypress run&lt;/code&gt;, you can pass options that modify how Cypress runs.</source>
          <target state="translated">同じように&lt;a href=&quot;command-line&quot;&gt;コマンドラインオプション&lt;/a&gt;のための &lt;code&gt;cypress run&lt;/code&gt; には、サイプレスの実行方法を変更するオプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2ee3b2c9db3bd2ce0b81005461c49e6cfad51475" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;command-line&quot;&gt;Command Line options&lt;/a&gt;, you can pass options that modify how Cypress runs.</source>
          <target state="translated">&lt;a href=&quot;command-line&quot;&gt;コマンドラインオプション&lt;/a&gt;と同様に、サイプレスの実行方法を変更するオプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="0577f4f324e393ae3d72c81193996ac3e8f07715" translate="yes" xml:space="preserve">
          <source>Just like with multiple tabs - Cypress does not support controlling more than 1 open browser at a time.</source>
          <target state="translated">複数のタブと同様に-Cypress は、一度に複数のオープンブラウザを制御することをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="ac66d9188443ba391152d22f101054ec2945a03e" translate="yes" xml:space="preserve">
          <source>Just like with your test files, the &lt;a href=&quot;configuration#Folders-Files&quot;&gt;&lt;code&gt;supportFile&lt;/code&gt;&lt;/a&gt; can use ES2015+ (or CoffeeScript) and modules, so you can import/require other files as needed.</source>
          <target state="translated">テストファイルと同様に、&lt;a href=&quot;configuration#Folders-Files&quot;&gt; &lt;code&gt;supportFile&lt;/code&gt; &lt;/a&gt;はES2015 +（またはCoffeeScript）とモジュールを使用できるため、必要に応じて他のファイルをインポート/要求できます。</target>
        </trans-unit>
        <trans-unit id="e7d4bb38752df4300cd5554ef8dd04226945030c" translate="yes" xml:space="preserve">
          <source>Just manually unzip and double click. Cypress will run without needing to install any dependencies.</source>
          <target state="translated">手動で解凍してダブルクリックするだけです。Cypress は依存関係をインストールしなくても実行されます。</target>
        </trans-unit>
        <trans-unit id="c9fdbdd9e6318c0bb604e7e9ad1b6812d9a45ba2" translate="yes" xml:space="preserve">
          <source>Keep Cypress Test Runner open after tests in a spec file run</source>
          <target state="translated">仕様ファイルのテスト後に Cypress Test Runner を開いておく</target>
        </trans-unit>
        <trans-unit id="54750ea67025a99e6f4fcde0f725e5f7b10e8bd2" translate="yes" xml:space="preserve">
          <source>Keep Cypress open after all tests run</source>
          <target state="translated">すべてのテストが実行された後、Cypress を開いたままにしておく</target>
        </trans-unit>
        <trans-unit id="bfd4238847f221fc0b9d92bc87ddd9c5d82d3102" translate="yes" xml:space="preserve">
          <source>Keep a modifier activated between commands</source>
          <target state="translated">コマンド間でモディファイアを有効にしておく</target>
        </trans-unit>
        <trans-unit id="f9f503ed838e0a7cf35077660aba33cdb448e219" translate="yes" xml:space="preserve">
          <source>Keep in mind - code executed in plugins is executed &lt;strong&gt;by the Node version&lt;/strong&gt; that comes bundled in Cypress itself.</source>
          <target state="translated">覚えておいてください-プラグインで実行さ&lt;strong&gt;れる&lt;/strong&gt;コードは、サイプレス自体にバンドルさ&lt;strong&gt;れているノードバージョンによって&lt;/strong&gt;実行されます。</target>
        </trans-unit>
        <trans-unit id="f30ef21f41a06ebf6d4a07c00044760f541cf433" translate="yes" xml:space="preserve">
          <source>Keep in mind that there are use cases for both approaches because they have different ergonomics.</source>
          <target state="translated">どちらのアプローチも人間工学が異なるため、ユースケースがあることを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="f638df9bc16cb7019014edeb557c54677e4c03fa" translate="yes" xml:space="preserve">
          <source>Keep in mind, setting something in a global hook will render it less flexible for changes and for testing its behavior down the road.</source>
          <target state="translated">グローバルフックに何かを設定すると、変更のための柔軟性が低くなり、その動作をテストするために、そのようになることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="ba28782ce21f499aeb0e691c016ca977d8ab3db6" translate="yes" xml:space="preserve">
          <source>Keep the form as the subject</source>
          <target state="translated">フォームを件名にしておく</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="f708a1aed2b98a10d5f99aa0de892e1c6fedef57" translate="yes" xml:space="preserve">
          <source>Key Combinations</source>
          <target state="translated">キーの組み合わせ</target>
        </trans-unit>
        <trans-unit id="c2b024ab82e3ea96b24576523563cf4ea3318647" translate="yes" xml:space="preserve">
          <source>Key Cypress features</source>
          <target state="translated">キーサイプレスの特徴</target>
        </trans-unit>
        <trans-unit id="93cac4d9c2f3ba888dfbaa5efc279cd8395bc3d0" translate="yes" xml:space="preserve">
          <source>Key Differences</source>
          <target state="translated">主な違い</target>
        </trans-unit>
        <trans-unit id="70ca15755321c55d088710350beef00d5ec91b4e" translate="yes" xml:space="preserve">
          <source>Key Events Table</source>
          <target state="translated">キーイベント表</target>
        </trans-unit>
        <trans-unit id="857d6f33d5eb33ba41809c31a6688e5f86c13fce" translate="yes" xml:space="preserve">
          <source>Keyboard shortcuts where the listener is on the &lt;code&gt;document&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">リスナーが &lt;code&gt;document&lt;/code&gt; または &lt;code&gt;body&lt;/code&gt; 上にあるキーボードショートカット。</target>
        </trans-unit>
        <trans-unit id="b6f86635fbab459c3dfca553452917a169023767" translate="yes" xml:space="preserve">
          <source>Kick off other builds or scripts</source>
          <target state="translated">他のビルドやスクリプトをキックオフ</target>
        </trans-unit>
        <trans-unit id="cd9aabc75704dec1a8701384247294faf9245eaa" translate="yes" xml:space="preserve">
          <source>Killing processes</source>
          <target state="translated">キリングプロセス</target>
        </trans-unit>
        <trans-unit id="2a73fbcd9674e09cb33a5adbfcf79b0b3d853d96" translate="yes" xml:space="preserve">
          <source>Knapsack Pro Cypress</source>
          <target state="translated">ナップサック プロ サイプレス</target>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="d36b5e0832a8d6cca58d3315be6a7ae1ba8b0b97" translate="yes" xml:space="preserve">
          <source>Known Issues:</source>
          <target state="translated">既知の問題。</target>
        </trans-unit>
        <trans-unit id="8c5ce75c7a54b8f3a8f4f82c3cd0ebb1e308b951" translate="yes" xml:space="preserve">
          <source>Labeling these groups in this manner helps up later when we review our test runs in the Cypress Dashboard, as shown below:</source>
          <target state="translated">このようにこれらのグループにラベルを付けることで、後で Cypress ダッシュボードでのテスト実行を確認する際に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d2460f98e9d33f3715ead8c78027879fad8595b1" translate="yes" xml:space="preserve">
          <source>Last but not least - trying to shoehorn tests to an already built application is much more difficult than building it as you write tests. You&amp;rsquo;ll likely encounter a series of initial up front challenges / hurdles that would have otherwise been avoided writing tests from the start.</source>
          <target state="translated">最後に重要なことですが、すでに構築されているアプリケーションにテストをシューホーンしようとすることは、テストを作成するときにそれを構築するよりもはるかに困難です。最初からテストを書くことを避けられていたであろう一連の最初の最初の課題/ハードルに遭遇するでしょう。</target>
        </trans-unit>
        <trans-unit id="b7ad4898fc7c25e90e113f44efde477ec19a3ead" translate="yes" xml:space="preserve">
          <source>Lastly you can pass in environment variables as options when &lt;a href=&quot;command-line#cypress-run&quot;&gt;using the CLI tool&lt;/a&gt;.</source>
          <target state="translated">最後に&lt;a href=&quot;command-line#cypress-run&quot;&gt;、CLIツールを使用する&lt;/a&gt;ときに、環境変数をオプションとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f131c7bc4486c7900913e25aac88bf30cf8d7b28" translate="yes" xml:space="preserve">
          <source>Later in this guide we&amp;rsquo;ll go into much more detail about &lt;a href=&quot;#Default-Assertions&quot;&gt;Default Assertions&lt;/a&gt; and &lt;a href=&quot;#Timeouts&quot;&gt;Timeouts&lt;/a&gt;.</source>
          <target state="translated">このガイドの後半では、&lt;a href=&quot;#Default-Assertions&quot;&gt;デフォルトのアサーション&lt;/a&gt;と&lt;a href=&quot;#Timeouts&quot;&gt;タイムアウト&lt;/a&gt;について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="8b1c5691506cde7010b7e4c2a7a229d772d075d0" translate="yes" xml:space="preserve">
          <source>Launch Cypress in interactive mode.</source>
          <target state="translated">インタラクティブモードでCypressを起動します。</target>
        </trans-unit>
        <trans-unit id="351e9082a029d1b2e09b40d6b23edeb85ca13c34" translate="yes" xml:space="preserve">
          <source>Launching Browsers</source>
          <target state="translated">ブラウザの起動</target>
        </trans-unit>
        <trans-unit id="6208680f7a552dc0169086e364a08af5f96eb97d" translate="yes" xml:space="preserve">
          <source>Launching browsers</source>
          <target state="translated">ブラウザの起動</target>
        </trans-unit>
        <trans-unit id="2da1539877c9a2dc579ca754fe07a3ec6c4711a6" translate="yes" xml:space="preserve">
          <source>Launching by a path</source>
          <target state="translated">パスによる打ち上げ</target>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="translated">Length</target>
        </trans-unit>
        <trans-unit id="ebb7c80c25a220250f85a8f41208f771a5c7bea6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add a &lt;a href=&quot;../../api/commands/pause&quot;&gt;&lt;code&gt;cy.pause()&lt;/code&gt;&lt;/a&gt; to our test code and see what happens.</source>
          <target state="translated">テストコードに&lt;a href=&quot;../../api/commands/pause&quot;&gt; &lt;code&gt;cy.pause()&lt;/code&gt; &lt;/a&gt;を追加して、何が起こるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="885416ab834937446cf45c3677249c258e6a577c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add it to our test and see what happens:</source>
          <target state="translated">それをテストに追加して、何が起こるか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="bca0aabc49f54952b8d68e3527b487ce9d2aa118" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add the &lt;code&gt;baseUrl&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;baseUrl&lt;/code&gt; オプションを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="4682502d1494cb1079bfccac9d577db191eefe43" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s compare the prior example to a fictional version of it as raw, Promise-based code:</source>
          <target state="translated">前の例を、架空のPromiseベースのコードとしての架空のバージョンと比較してみましょう。</target>
        </trans-unit>
        <trans-unit id="443ba0d20ca2baebed62685e4aee136a11020247" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new file in the &lt;code&gt;cypress/integration&lt;/code&gt; folder that was created for us:</source>
          <target state="translated">私たちのために作成 &lt;code&gt;cypress/integration&lt;/code&gt; れたcypress / integrationフォルダーに新しいファイルを作成しましょう：</target>
        </trans-unit>
        <trans-unit id="e20c030f5691819171fa2bbabf0527387bca6c87" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s delete the &lt;code&gt;examples&lt;/code&gt; folder that Cypress created for you, since we learned about this in the previous tutorial.</source>
          <target state="translated">これについては前のチュートリアルで学習したので、Cypressが作成した &lt;code&gt;examples&lt;/code&gt; フォルダーを削除しましょう。</target>
        </trans-unit>
        <trans-unit id="eae5647b7bda4db6cdf6119d4436916ef3b38cb3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine several different ways you may get this error message. In every situation, you&amp;rsquo;ll need to change something in your test code to prevent the error.</source>
          <target state="translated">このエラーメッセージが表示されるいくつかの異なる方法を調べてみましょう。すべての状況で、エラーを防ぐためにテストコードの何かを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a51a29403bd30329942e71ffef291897daafd19" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore a few examples.</source>
          <target state="translated">いくつかの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2c20749b7bfe220ee9548ce34452cb4a1a5ff666" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore some examples of conditional testing that will pass or fail 100% of the time.</source>
          <target state="translated">100％の確率で合格または不合格になる条件付きテストの例をいくつか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ce6143bc468fb0ff760d94fee09d340a7044567c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine a scenario where you click a button to delete a user and a dialog appears asking you to confirm this deletion.</source>
          <target state="translated">ボタンをクリックしてユーザーを削除し、この削除の確認を求めるダイアログが表示されるシナリオを想像してみましょう。</target>
        </trans-unit>
        <trans-unit id="c5a46fe5fdc9d5fcfc253a3f6eb0d85baf8e45e1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine the following Node code:</source>
          <target state="translated">次のノードコードを想像してみましょう：</target>
        </trans-unit>
        <trans-unit id="fafc64da2669147d85d4713f0ba11e20192dead2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine the following examples:</source>
          <target state="translated">次の例を想像してみましょう：</target>
        </trans-unit>
        <trans-unit id="b4a87247f21941ab8d0c11cbf2d5e8e698497657" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine the following test that is filling out the form.</source>
          <target state="translated">フォームに入力する次のテストを想像してみましょう。</target>
        </trans-unit>
        <trans-unit id="8deca3882603b4815b813aad98f1ef40a383d1ea" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine we have a scenario where our application may do two separate things that we are unable to control. In other words you tried every strategy above and for whatever reason you were unable to know ahead of time what your application will do.</source>
          <target state="translated">アプリケーションが制御できない2つの別々のことを行うシナリオがあると想像してみてください。つまり、上記のすべての戦略を試しましたが、何らかの理由で、アプリケーションが何をするのかを事前に知ることができませんでした。</target>
        </trans-unit>
        <trans-unit id="35284e0f921dfe7652bde3f7e411fc7b9585cfaf" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine when we click the &lt;code&gt;.edit&lt;/code&gt; button that our &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is re-rendered in the DOM. Instead of displaying the edit button it instead displays an &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; text field allowing you to edit the todo. The previous &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; has been &lt;em&gt;completely&lt;/em&gt; removed from the DOM and a new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is rendered in its place.</source>
          <target state="translated">&lt;code&gt;.edit&lt;/code&gt; ボタンをクリックしたときに、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; がDOMに再レンダリングされたとしましょう。編集ボタンを表示する代わりに、 &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; テキストフィールドを表示して、ToDoを編集できます。以前の &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; はDOMから&lt;em&gt;完全に&lt;/em&gt;削除され、代わりに新しい &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; がレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="7d808bde7c34ec6ca0d3c30277078b7dabd82ab8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate and tease apart why.</source>
          <target state="translated">その理由を調査して、バラバラにしましょう。</target>
        </trans-unit>
        <trans-unit id="2e3bba187abd89b66a59680a6e194fbadd3521e0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate both strategies, why you would use one versus the other, and why you should regularly use both.</source>
          <target state="translated">両方の戦略、なぜ一方を他方に対して使用するのか、なぜ両方を定期的に使用する必要があるのか​​を調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="2d4f9815304d15e5a17e7df1310baffe82204eb0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate each benefit.</source>
          <target state="translated">それぞれのメリットを調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="169149ed9f430b57d016c6dd935c9c8095167568" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate how we could target it:</source>
          <target state="translated">それをどのようにターゲットにできるかを調べてみましょう：</target>
        </trans-unit>
        <trans-unit id="3084907eb2a8dd371b0d137bd4562cbd3493cca9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate how you might encounter cross-origin errors in your test code and break down how to work around them in Cypress.</source>
          <target state="translated">テストコードでクロスオリジンエラーが発生する可能性がある方法を調査し、サイプレスでそれらを回避する方法を分析してみましょう。</target>
        </trans-unit>
        <trans-unit id="bc565d7abfa48de2e072f0cb705331e2f6ec8d6f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s investigate why and how you can overcome these problems&amp;hellip;</source>
          <target state="translated">これらの問題を解決する理由と方法を調べてみましょう&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="8896a36074dfd4485880af3371c84962a831cb50" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a few strategies for dealing with these situations.</source>
          <target state="translated">これらの状況に対処するためのいくつかの戦略を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d172a231ad56188812168291eea6a5fd8742b6b4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example:</source>
          <target state="translated">例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="6eb61cda1a1cde839ea1830e853af24649f2e66a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how you&amp;rsquo;d describe an assertion in english:</source>
          <target state="translated">アサーションを英語でどのように説明するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="f0e7cab14e7daaa858f50a25da386c2c86aa0f8a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at our previous example with aliases.</source>
          <target state="translated">エイリアスを使用した前の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="43b793ba529829706eb45ceb2c8d4400697c82b1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the last command and assertion pair:</source>
          <target state="translated">最後のコマンドとアサーションのペアを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="539e870868d193929f3aae87ef230c265994444e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the one file that has a &amp;ldquo;missed&amp;rdquo; line. It is the &lt;code&gt;src/selectors/index.js&lt;/code&gt; file shown below.</source>
          <target state="translated">「行方不明」の行がある1つのファイルを見てみましょう。それはある &lt;code&gt;src/selectors/index.js&lt;/code&gt; 、以下に示すファイル。</target>
        </trans-unit>
        <trans-unit id="0b8d4c98a18ff40c1aa1cdef1ea3d45b4e0c78be" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at why this is not really necessary.</source>
          <target state="translated">これが本当に必要ではない理由を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2473b3ecdba2b7127b07b2c802f7b00878278040" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at why this is&amp;hellip;</source>
          <target state="translated">これがなぜなのかを見てみましょう...</target>
        </trans-unit>
        <trans-unit id="9a054ff013460ad6926f9fa58186e2d76b0ad8dd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s make an assertion about something on the new page we clicked into. Perhaps we&amp;rsquo;d like to make sure the new URL is the expected URL. We can do that by looking up the URL and chaining an assertion to it with &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クリックした新しいページの何かについてアサーションを作成しましょう。おそらく、新しいURLが予期されたURLであることを確認したいと思います。これを行うには、URLを&lt;a href=&quot;../../api/commands/should&quot;&gt; &lt;code&gt;.should()&lt;/code&gt; &lt;/a&gt;し、.should（）を使用してアサーションをチェーン化します。</target>
        </trans-unit>
        <trans-unit id="f32f42b3a1cb48d3adbca6e14af7ebc3b75ef494" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s reimagine our &amp;ldquo;Welcome Wizard&amp;rdquo; example from before.</source>
          <target state="translated">以前の「ようこそウィザード」の例を再考してみましょう。</target>
        </trans-unit>
        <trans-unit id="988ea2d35cf0a2611265cba0d2e2a98f99c5709f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s revisit the example from above but assume we&amp;rsquo;re testing some other part of the system.</source>
          <target state="translated">上記の例に戻りますが、システムの他の部分をテストしていると想定します。</target>
        </trans-unit>
        <trans-unit id="39257fadd856fa2ad1912a62339a162eb3e7c1b3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have an application that has a &lt;em&gt;customer facing portal&lt;/em&gt;, &lt;em&gt;guest facing portal&lt;/em&gt; and an &lt;em&gt;administration facing portal&lt;/em&gt;. You could organize and test these three parts of your application within the same run:</source>
          <target state="translated">たとえば、&lt;em&gt;顧客向けポータル&lt;/em&gt;、&lt;em&gt;ゲスト向けポータル&lt;/em&gt;、&lt;em&gt;管理向けポータル&lt;/em&gt;があるアプリケーションがあるとし&lt;em&gt;ます&lt;/em&gt;。同じ実行内でアプリケーションのこれら3つの部分を整理してテストできます。</target>
        </trans-unit>
        <trans-unit id="f795908eb24847d3eda606084a425d84b5bff198" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see some of this in action using our existing test code.</source>
          <target state="translated">既存のテストコードを使用して、実際の動作をいくつか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="37cb465b301b765dd01870d548ebf5a0ea656c1a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at an example below.</source>
          <target state="translated">以下の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="e3855576fc69b0e44654912c35e5aa717c7cab40" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at each trade-off in depth:</source>
          <target state="translated">各トレードオフについて詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1f47c90e757d9d1c4642991d58d8426850cdba9b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s use &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; to tap into the Cypress command during execution and add a &lt;code&gt;debugger&lt;/code&gt; at the appropriate time:</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt;を使用して実行中にサイプレスコマンドを利用し、適切なタイミングで &lt;code&gt;debugger&lt;/code&gt; を追加しましょう：</target>
        </trans-unit>
        <trans-unit id="f002882ff00789e7c6a104fabd6688a95e127f7a" translate="yes" xml:space="preserve">
          <source>Libraries and Tools</source>
          <target state="translated">ライブラリとツール</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="5e30eb09d78f62a6dcfe537c5c3654674d6e6725" translate="yes" xml:space="preserve">
          <source>Like most image comparison tools, the plugin also shows a difference view on mouse hover:</source>
          <target state="translated">他の画像比較ツールと同様に、このプラグインもマウスを置いた時に差分表示を行います。</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="b6f43bfcec5d8865957543b9f612c2425b3918ee" translate="yes" xml:space="preserve">
          <source>Linking CI machines for parallelization or grouping</source>
          <target state="translated">並列化やグループ化のためのCIマシンの連携</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="d64113ad4719ae7e5b985168742fe374fd6ff36d" translate="yes" xml:space="preserve">
          <source>Linux 64-bit (&lt;code&gt;?platform=linux&lt;/code&gt;)</source>
          <target state="translated">Linux 64ビット（ &lt;code&gt;?platform=linux&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="775d9b892894ff25bc2027d1e2649f194b953bdd" translate="yes" xml:space="preserve">
          <source>Linux or macOS</source>
          <target state="translated">リナックスまたはマコス</target>
        </trans-unit>
        <trans-unit id="73da9a3053f1ab8fa7772b7c663d9b1efb80a862" translate="yes" xml:space="preserve">
          <source>Linux: &lt;code&gt;~/.cache/Cypress&lt;/code&gt;</source>
          <target state="translated">Linux： &lt;code&gt;~/.cache/Cypress&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a40a8f8da308121ab1813f8a8be34f4423c5e470" translate="yes" xml:space="preserve">
          <source>List of Assertions</source>
          <target state="translated">アサーション一覧</target>
        </trans-unit>
        <trans-unit id="f5e95c32033408678a4374d5c71acddfd248b0f7" translate="yes" xml:space="preserve">
          <source>List of available Chai Assertions</source>
          <target state="translated">利用可能なチャイのアサーション一覧</target>
        </trans-unit>
        <trans-unit id="1f39b028fa28484b73cc6b80bdef24a830069b3d" translate="yes" xml:space="preserve">
          <source>List of available Chai-jQuery Assertions</source>
          <target state="translated">利用可能な Chai-jQuery アサーションのリスト</target>
        </trans-unit>
        <trans-unit id="573573a7b64d43e99354afff9d510f81301513e1" translate="yes" xml:space="preserve">
          <source>List of available Sinon-Chai Assertions</source>
          <target state="translated">利用可能なシノン・チャイのアサーション一覧</target>
        </trans-unit>
        <trans-unit id="0c4ad782ed47f4ab54dcefd9357da3b5f48ed433" translate="yes" xml:space="preserve">
          <source>List of events</source>
          <target state="translated">イベント一覧</target>
        </trans-unit>
        <trans-unit id="dc33149633cd3f0a0e0b7cf4ad1aad9aef6e1a06" translate="yes" xml:space="preserve">
          <source>List of plugins</source>
          <target state="translated">プラグイン一覧</target>
        </trans-unit>
        <trans-unit id="5b21f31a036e2a6f9710615a40b7caa5490588b3" translate="yes" xml:space="preserve">
          <source>Listed in the &lt;a href=&quot;../../plugins/index#visual-testing&quot;&gt;Visual Testing plugins&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;../../plugins/index#visual-testing&quot;&gt;ビジュアルテストプラグイン&lt;/a&gt;セクションにリストされています。</target>
        </trans-unit>
        <trans-unit id="237700d410e20f496fd8c4a94154acaff5624a3e" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;alert&lt;/code&gt; or &lt;code&gt;confirm&lt;/code&gt; calls and change the &lt;code&gt;confirm&lt;/code&gt; behavior</source>
          <target state="translated">&lt;code&gt;alert&lt;/code&gt; 聞いたり、通話を &lt;code&gt;confirm&lt;/code&gt; したり、 &lt;code&gt;confirm&lt;/code&gt; 動作を変更したりする</target>
        </trans-unit>
        <trans-unit id="44f7822fff2bcb1d65145af4cc472ca31943aecf" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;command:retry&lt;/code&gt; events to understand why Cypress is internally retrying for debugging purposes</source>
          <target state="translated">&lt;code&gt;command:retry&lt;/code&gt; イベントをリッスンして、サイプレスがデバッグ目的で内部的に再試行する理由を理解する</target>
        </trans-unit>
        <trans-unit id="0b65b3442c4678df19f79af70aeb3b85cd0d9b47" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;uncaught exceptions&lt;/code&gt; and prevent Cypress from failing the test</source>
          <target state="translated">&lt;code&gt;uncaught exceptions&lt;/code&gt; れない例外をリッスンし、サイプレスがテストに失敗するのを防ぎます</target>
        </trans-unit>
        <trans-unit id="47aa4a124779f7c540a6ccdf3ec8fdfacca9d60f" translate="yes" xml:space="preserve">
          <source>Listen for &lt;code&gt;window:before:load&lt;/code&gt; events and modify the &lt;code&gt;window&lt;/code&gt; before any of your app code runs between page transitions</source>
          <target state="translated">&lt;code&gt;window:before:load&lt;/code&gt; イベントをリッスンし、ページ遷移の間にアプリコードが実行される前に &lt;code&gt;window&lt;/code&gt; を変更します</target>
        </trans-unit>
        <trans-unit id="beaa121c5df16babeee394d78065d7bb26a5e196" translate="yes" xml:space="preserve">
          <source>Live reload performance improvements when tests are changed.</source>
          <target state="translated">テストが変更されたときにライブリロードのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="4ca95322cb587284d05c12ebecb42e6b5ec18c31" translate="yes" xml:space="preserve">
          <source>Load a &lt;code&gt;users.json&lt;/code&gt; fixture</source>
          <target state="translated">&lt;code&gt;users.json&lt;/code&gt; フィクスチャをロードする</target>
        </trans-unit>
        <trans-unit id="9286ab58e426f84c50b0ead6fe1430b8f5b2a37a" translate="yes" xml:space="preserve">
          <source>Load a Chrome extension</source>
          <target state="translated">Chromeの拡張機能を読み込む</target>
        </trans-unit>
        <trans-unit id="8ab913b1d6275e9ceb48e922a517e827e35aefae" translate="yes" xml:space="preserve">
          <source>Load a fixed set of data located in a file.</source>
          <target state="translated">ファイル内にある固定セットのデータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="d44f34c1919153fa4a809df474a5dd961b2cc7ac" translate="yes" xml:space="preserve">
          <source>Load your own chrome extension</source>
          <target state="translated">独自のクローム拡張機能をロードする</target>
        </trans-unit>
        <trans-unit id="11c4e1c1659aa650ee14c2bbcbea3ceac20633cf" translate="yes" xml:space="preserve">
          <source>Local Reporters</source>
          <target state="translated">現地レポーター</target>
        </trans-unit>
        <trans-unit id="810e36e49199a8ab0597bf823d81609511f832a8" translate="yes" xml:space="preserve">
          <source>Location of Cypress binary at run-time</source>
          <target state="translated">実行時のCypressバイナリの位置</target>
        </trans-unit>
        <trans-unit id="a9071ba51a818c8eb370704470363c350b2a603c" translate="yes" xml:space="preserve">
          <source>Log Cypress events</source>
          <target state="translated">Cypress イベントのログ</target>
        </trans-unit>
        <trans-unit id="b1d1e882234b2a9dfe68f933a15adb9744659020" translate="yes" xml:space="preserve">
          <source>Log browser information</source>
          <target state="translated">ブラウザのログ情報</target>
        </trans-unit>
        <trans-unit id="f8e1df79330e79373110a99d92a83704cbcc5c10" translate="yes" xml:space="preserve">
          <source>Log out when cookie values are created, modified or deleted</source>
          <target state="translated">クッキーの値が作成、変更、削除されたときにログアウトする</target>
        </trans-unit>
        <trans-unit id="f822df594b4c2a8cb991782337e6739e209866e6" translate="yes" xml:space="preserve">
          <source>Log spec information</source>
          <target state="translated">ログスペック情報</target>
        </trans-unit>
        <trans-unit id="23013e805cdcccfccb9957860e652d1d267f4008" translate="yes" xml:space="preserve">
          <source>Logging All Events</source>
          <target state="translated">すべてのイベントのロギング</target>
        </trans-unit>
        <trans-unit id="783f02798d5892e34e2b6c2aa451f3417f080785" translate="yes" xml:space="preserve">
          <source>Logging in</source>
          <target state="translated">ログイン</target>
        </trans-unit>
        <trans-unit id="52377cdc16227649b3402555a5029ff43a990fd0" translate="yes" xml:space="preserve">
          <source>Logging in can be more complex than what we&amp;rsquo;ve just covered.</source>
          <target state="translated">ログインは、ここで説明したものよりも複雑になる場合があります。</target>
        </trans-unit>
        <trans-unit id="70a6992b1f5281374b3aedd90080e8a316e124b5" translate="yes" xml:space="preserve">
          <source>Logging in, viewing runs, and setting up new projects to record requires connecting to an external API server. This error displays when we failed to connect to the API server.</source>
          <target state="translated">ログイン、ランの表示、新規プロジェクトの記録設定を行うには、外部APIサーバーへの接続が必要です。このエラーは、APIサーバーへの接続に失敗した場合に表示されます。</target>
        </trans-unit>
        <trans-unit id="1f0ff0e51a4cdf9cedf302bd85dd5af4c210e752" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;screenshots-and-videos&quot;&gt;video recordings and screenshots&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;screenshots-and-videos&quot;&gt;ビデオ録画とスクリーンショットを&lt;/a&gt;見てください。</target>
        </trans-unit>
        <trans-unit id="7595c7cbfa6c48479b1f4e56957d8d40692498ac" translate="yes" xml:space="preserve">
          <source>Look in the following locations for the policy settings listed above:</source>
          <target state="translated">上記のポリシー設定は、以下の場所を見てください。</target>
        </trans-unit>
        <trans-unit id="2bac4f8fe4751a77f0becc124925f87f3173634a" translate="yes" xml:space="preserve">
          <source>Luckily Cypress supports this use case. Reverse the order of the commands:</source>
          <target state="translated">幸いにもCypressはこのユースケースをサポートしています。コマンドの順序を逆にします。</target>
        </trans-unit>
        <trans-unit id="76866d2f6c76c061d1da6fed916f2d2184b886dc" translate="yes" xml:space="preserve">
          <source>Luckily, Cypress gives a stable platform for &lt;a href=&quot;plugins-guide&quot;&gt;writing plugins&lt;/a&gt; that &lt;em&gt;can perform visual testing&lt;/em&gt;.</source>
          <target state="translated">幸いにも、サイプレスは安定プラットフォームを提供し&lt;a href=&quot;plugins-guide&quot;&gt;、プラグインの書き込み&lt;/a&gt;&lt;em&gt;ビジュアルテストを実行できます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8edb68df1cb3adc8b9a4351e7a73a3beae0ca860" translate="yes" xml:space="preserve">
          <source>Luckily, it is very easy to avoid both of these problems.</source>
          <target state="translated">幸いなことに、この2つの問題を回避することは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="bce5cbbc84d3e261a03b3a1d0c106e050710935a" translate="yes" xml:space="preserve">
          <source>Luckily, once we understand how retry-ability works and how only the last command is used for assertion retries, we can fix this test for good.</source>
          <target state="translated">幸いなことに、リトライ可能性がどのように働くのか、そしてアサーションのリトライに最後のコマンドだけが使われるのかを理解すれば、このテストを永久に修正することができます。</target>
        </trans-unit>
        <trans-unit id="7306f557ac38a698c07eb0909cd6b734c28b509e" translate="yes" xml:space="preserve">
          <source>Luckily, there are some solutions for this. Instead of introducing arbitrary waits (like &lt;code&gt;sleep 20&lt;/code&gt;) you can use a better option.</source>
          <target state="translated">幸いなことに、これにはいくつかの解決策があります。任意の待機（ &lt;code&gt;sleep 20&lt;/code&gt; など）を導入する代わりに、より良いオプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="08bce2d9a3206bf0d7143d86833197a8534fabc6" translate="yes" xml:space="preserve">
          <source>Mac</source>
          <target state="translated">Mac</target>
        </trans-unit>
        <trans-unit id="2fb86d9566b3f968bc70b61eaf2f9726efef6367" translate="yes" xml:space="preserve">
          <source>Machines View</source>
          <target state="translated">機械を見る</target>
        </trans-unit>
        <trans-unit id="d0922fb4c1fbea914b1fb1ed0015789ffc4e57f4" translate="yes" xml:space="preserve">
          <source>Major browser version</source>
          <target state="translated">主要ブラウザのバージョン</target>
        </trans-unit>
        <trans-unit id="b540d3540057125828d76f4e0eed6a4573deab7b" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;GET&lt;/code&gt; request</source>
          <target state="translated">作る &lt;code&gt;GET&lt;/code&gt; リクエストを</target>
        </trans-unit>
        <trans-unit id="48dc1bdca0dcc6adf40f54791e606df71a0fa6dd" translate="yes" xml:space="preserve">
          <source>Make a request using a specific method. If no method is defined, Cypress uses the &lt;code&gt;GET&lt;/code&gt; method by default.</source>
          <target state="translated">特定の方法を使用してリクエストを作成します。メソッドが定義されていない場合、サイプレスはデフォルトで &lt;code&gt;GET&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="cebb171a26b6cbebac4e0186fcb263d23c59626e" translate="yes" xml:space="preserve">
          <source>Make an HTTP request.</source>
          <target state="translated">HTTPリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="ce97028323163e41f64fdde91f5280c6c32b921e" translate="yes" xml:space="preserve">
          <source>Make an assertion about the document</source>
          <target state="translated">文書についてのアサーションを行う</target>
        </trans-unit>
        <trans-unit id="c3d6c8953e63806cf660c6022400447a4cfbaa00" translate="yes" xml:space="preserve">
          <source>Make an assertion about the resulting application state.</source>
          <target state="translated">結果のアプリケーションの状態についてアサーションを行います。</target>
        </trans-unit>
        <trans-unit id="f2517822c2371847d9cdd708bfbf40096367aca1" translate="yes" xml:space="preserve">
          <source>Make an assertion on the 3rd row of a table</source>
          <target state="translated">表の3行目にアサーションを作成する</target>
        </trans-unit>
        <trans-unit id="1614221dfe745bd295f21b986c5166c0fbc9c529" translate="yes" xml:space="preserve">
          <source>Make an assertion on the focused element</source>
          <target state="translated">フォーカスされた要素についてのアサーションを行う</target>
        </trans-unit>
        <trans-unit id="3ae23d7b673045b84d0697d075bb2527d3bb9bf0" translate="yes" xml:space="preserve">
          <source>Make assertions about every location property</source>
          <target state="translated">すべての場所のプロパティについてのアサーションを作成します。</target>
        </trans-unit>
        <trans-unit id="f8b88a39a2318a470e92995b216437be91a61196" translate="yes" xml:space="preserve">
          <source>Make multiple assertions against the same subject.</source>
          <target state="translated">同じ対象に対して複数の主張をする。</target>
        </trans-unit>
        <trans-unit id="0a53eb093ff04b19bf374891359d8465dc82f9f7" translate="yes" xml:space="preserve">
          <source>Make sure not to start a new watcher each time it is called. Instead, cache the watcher and, on subsequent calls, return a promise that resolves when the latest version of the file has been processed.</source>
          <target state="translated">呼び出されるたびに新しいウォッチャーを起動しないようにしてください。その代わり、ウォッチャーをキャッシュし、その後の呼び出しでは、ファイルの最新バージョンが処理されたときに解決する約束を返します。</target>
        </trans-unit>
        <trans-unit id="9ff705689fab9890b9783256609183ae05158795" translate="yes" xml:space="preserve">
          <source>Make sure that you have already run &lt;a href=&quot;https://docs.npmjs.com/cli/init&quot;&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/a&gt; or have a &lt;code&gt;node_modules&lt;/code&gt; folder or &lt;code&gt;package.json&lt;/code&gt; file in the root of your project to ensure cypress is installed in the correct directory.</source>
          <target state="translated">サイプレスが正しいディレクトリにインストールされていることを確認するには、プロジェクトのルートに&lt;a href=&quot;https://docs.npmjs.com/cli/init&quot;&gt; &lt;code&gt;npm init&lt;/code&gt; &lt;/a&gt;がすでに実行されているか、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーまたは &lt;code&gt;package.json&lt;/code&gt; ファイルがあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4222f7cb17edf447486ac1c51fb1e178f2db8fc0" translate="yes" xml:space="preserve">
          <source>Make sure you &lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;install&lt;/a&gt; and &lt;a href=&quot;../getting-started/installing-cypress#Opening-Cypress&quot;&gt;open&lt;/a&gt; it first!</source>
          <target state="translated">まず&lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;インストール&lt;/a&gt;して&lt;a href=&quot;../getting-started/installing-cypress#Opening-Cypress&quot;&gt;開い&lt;/a&gt;てください！</target>
        </trans-unit>
        <trans-unit id="ab4c2e49c8df5c39471365b8b727448c92d15cc5" translate="yes" xml:space="preserve">
          <source>Make sure your Developer Tools are open and you can get pretty close to &amp;ldquo;seeing&amp;rdquo; the calculations Cypress is performing.</source>
          <target state="translated">開発ツールが開いていることを確認してください。サイプレスが実行している計算を「確認」するのにかなり近づくことができます。</target>
        </trans-unit>
        <trans-unit id="0a2761f8fc063acf9a5c332f3a583b75037e497d" translate="yes" xml:space="preserve">
          <source>Make your custom commands composable and as unopinionated as possible. Cramming too much into them makes them inflexible and requires more and more options passing to control their behavior.</source>
          <target state="translated">カスタムコマンドは構成可能なものにして、可能な限り偏見のないものにしてください。詰め込みすぎると柔軟性がなくなり、挙動を制御するために、より多くのオプションを渡す必要が出てきます。</target>
        </trans-unit>
        <trans-unit id="78fa83e50f14e9c6022319a4984431cf4991bfba" translate="yes" xml:space="preserve">
          <source>Making multiple requests to the same route</source>
          <target state="translated">同一ルートに複数のリクエストを行う</target>
        </trans-unit>
        <trans-unit id="e78c1f318260b5dc42548187badf43499117b433" translate="yes" xml:space="preserve">
          <source>Manage organizations</source>
          <target state="translated">組織の管理</target>
        </trans-unit>
        <trans-unit id="b7ee3c4dd0a46c8618da4ec41c685dff32c86d6e" translate="yes" xml:space="preserve">
          <source>Manage users</source>
          <target state="translated">ユーザーの管理</target>
        </trans-unit>
        <trans-unit id="27553769f18b12c6edb40359e7d0c44ecc8e7bab" translate="yes" xml:space="preserve">
          <source>Managing Organizations</source>
          <target state="translated">組織の管理</target>
        </trans-unit>
        <trans-unit id="06127dcf56e6c198e1007c1bb15671dfa19e9ffc" translate="yes" xml:space="preserve">
          <source>Manipulate the screenshot image by resizing or cropping it</source>
          <target state="translated">スクリーンショット画像のサイズを変更したり、トリミングしたりして、スクリーンショット画像を操作する</target>
        </trans-unit>
        <trans-unit id="f09ef90b04cf487cb5b71882220ba013a593a394" translate="yes" xml:space="preserve">
          <source>Manipulating a database (seeding, reading, writing, etc.)</source>
          <target state="translated">データベースの操作(種付け、読み込み、書き込みなど</target>
        </trans-unit>
        <trans-unit id="699e2c5353d23f547aa773828ab0e3393d57e921" translate="yes" xml:space="preserve">
          <source>Manual navigation after tests run now works reliably.</source>
          <target state="translated">テスト実行後の手動ナビゲーションが確実に動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="7a8edb137bcaa335484528651807038fc4caaff4" translate="yes" xml:space="preserve">
          <source>Many OAuth providers also throttle the number of web requests you can make to them. For instance, if you try to test Google, Google will &lt;strong&gt;automatically&lt;/strong&gt; detect that you are not a human and instead of giving you an OAuth login screen, they will make you fill out a captcha.</source>
          <target state="translated">多くのOAuthプロバイダーはまた、それらに対して行うことができるWeb要求の数を抑制します。たとえば、Googleをテストしようとすると、Googleはあなたが人間でないことを&lt;strong&gt;自動的に&lt;/strong&gt;検出し、OAuthログイン画面を表示する代わりに、キャプチャに入力します。</target>
        </trans-unit>
        <trans-unit id="302b90335ecbeb483cdd007f3a8c592ec180fe89" translate="yes" xml:space="preserve">
          <source>Many OAuth providers run A/B experiments, which means that their login screen is dynamically changing. This makes automated testing difficult.</source>
          <target state="translated">多くの OAuth プロバイダは AB 実験を行っており、ログイン画面が動的に変化することを意味します。そのため、自動テストが難しくなっています。</target>
        </trans-unit>
        <trans-unit id="58b8ebec583e7f9587bcb766eac86fe1c6f5cff2" translate="yes" xml:space="preserve">
          <source>Many additional tests added to the multi-os deployment process.</source>
          <target state="translated">マルチOS展開プロセスに多くの追加テストが追加されました。</target>
        </trans-unit>
        <trans-unit id="41cfb5d324a03fa4926fd5cd22853342474b7e1e" translate="yes" xml:space="preserve">
          <source>Many applications will have already begun routing, initialization, and requests by the time the &lt;code&gt;cy.visit()&lt;/code&gt; in the above code resolves. Therefore creating a &lt;a href=&quot;server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; will happen too late, and Cypress will not process the requests.</source>
          <target state="translated">上記のコードの &lt;code&gt;cy.visit()&lt;/code&gt; が解決するまでに、多くのアプリケーションはすでにルーティング、初期化、およびリクエストを開始しています。したがって、&lt;a href=&quot;server&quot;&gt; &lt;code&gt;cy.server()&lt;/code&gt; の&lt;/a&gt;作成は遅すぎるため、サイプレスはリクエストを処理しません。</target>
        </trans-unit>
        <trans-unit id="d5b17f1b6812165887f5b5827b59116e76e35e72" translate="yes" xml:space="preserve">
          <source>Many browsers such as Firefox, Safari, and Internet Explorer are not currently supported. Support for more browsers is on our roadmap. You can read an exhaustive explanation about our future cross browser testing strategy &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/310&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Firefox、Safari、Internet Explorerなどの多くのブラウザは現在サポートされていません。より多くのブラウザーのサポートはロードマップにあります。今後のクロスブラウザーテスト戦略についての詳細な説明は、&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/310&quot;&gt;こちらでご覧いただけます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="deccd58d208bf0efdcd7527a95ebdeb681d59e65" translate="yes" xml:space="preserve">
          <source>Many commands have a default, built-in assertion, or rather have requirements that may cause it to fail without needing an explicit assertion you&amp;rsquo;ve added.</source>
          <target state="translated">多くのコマンドには、デフォルトの組み込みアサーションがあるか、追加の明示的なアサーションを必要とせずに失敗する可能性がある要件があります。</target>
        </trans-unit>
        <trans-unit id="9212119d80329bd222fa4e9c75948d57ed9efeb5" translate="yes" xml:space="preserve">
          <source>Many error messages have been rewritten to be much more fluent and easier to understand.</source>
          <target state="translated">多くのエラーメッセージは、より流暢に、よりわかりやすく書き換えられています。</target>
        </trans-unit>
        <trans-unit id="1b67d956a31853a13b263fb151fe1f802bc843c4" translate="yes" xml:space="preserve">
          <source>Many first time users look at Cypress code and think it runs synchronously.</source>
          <target state="translated">初めてCypressのコードを見る人の多くは、同期して動作していると思っています。</target>
        </trans-unit>
        <trans-unit id="b627362b19722478ab857b3e0670013bf0bd5bf3" translate="yes" xml:space="preserve">
          <source>Many internal development / debugging processes improved.</source>
          <target state="translated">多くの社内開発のデバッグプロセスが改善されました。</target>
        </trans-unit>
        <trans-unit id="0578bbe35f4cd3360c635588c2bd18aa71e0aaf7" translate="yes" xml:space="preserve">
          <source>Many new configuration options are available for controlling how XHR&amp;rsquo;s are stubbed.</source>
          <target state="translated">XHRのスタブ方法を制御するために、多くの新しい構成オプションが利用可能です。</target>
        </trans-unit>
        <trans-unit id="91450740a314f8d06185e9abd63eb52ed6c619b6" translate="yes" xml:space="preserve">
          <source>Many of our users ask how they can recover from failed commands.</source>
          <target state="translated">私たちのユーザーの多くは、失敗したコマンドからどのようにして回復することができるかを尋ねます。</target>
        </trans-unit>
        <trans-unit id="ebad1da53b473c981bee1a4aa1baaf38d821b85f" translate="yes" xml:space="preserve">
          <source>Many of our users ask how to accomplish this seemingly simple idiom in Cypress.</source>
          <target state="translated">私たちのユーザーの多くは、この一見シンプルなイディオムをCypressでどうやって実現するかを尋ねてきます。</target>
        </trans-unit>
        <trans-unit id="45d1659b5cf476f2b90f2ec2a4b45355baab986a" translate="yes" xml:space="preserve">
          <source>Many of our users run the &lt;em&gt;majority&lt;/em&gt; of their integration tests against a local development server, but then reserve a smaller set of &lt;strong&gt;smoke tests&lt;/strong&gt; that run only against a deployed production app.</source>
          <target state="translated">ユーザーの多くは、ローカル開発サーバーに対して統合テストの&lt;em&gt;大部分&lt;/em&gt;を実行しますが、デプロイされた本番アプリに対してのみ実行する&lt;strong&gt;スモークテストの&lt;/strong&gt;小規模なセットを予約します。</target>
        </trans-unit>
        <trans-unit id="66e29d1e52684cd06ac76fbdd13a73851655b327" translate="yes" xml:space="preserve">
          <source>Many of these issues are currently being worked on or are on our &lt;a href=&quot;roadmap&quot;&gt;Roadmap&lt;/a&gt;.</source>
          <target state="translated">これらの問題の多くは、現在取り組んでいるか、&lt;a href=&quot;roadmap&quot;&gt;ロードマップに&lt;/a&gt;載っています。</target>
        </trans-unit>
        <trans-unit id="9f31c471784fde97058873281cbcf93de4eefb85" translate="yes" xml:space="preserve">
          <source>Many people approach this situation by running a command like the following:</source>
          <target state="translated">多くの人は、以下のようなコマンドを実行することでこの状況にアプローチします。</target>
        </trans-unit>
        <trans-unit id="8856cb6286f546e2c07c8c24380ecb11c0baed1d" translate="yes" xml:space="preserve">
          <source>Margin on zero client width / client height is now displayed correctly on command hover and more accurately mimics the way Chrome Dev Tools highlights elements.</source>
          <target state="translated">クライアント幅ゼロのマージン クライアントの高さがコマンド ホバー時に正しく表示されるようになり、Chrome Dev Tools が要素を強調表示する方法をより正確に模倣するようになりました。</target>
        </trans-unit>
        <trans-unit id="dba90dd018ee4e6023343ea7d3bbe39b4c1e7b70" translate="yes" xml:space="preserve">
          <source>Massage the subject in some way prior to making the assertion</source>
          <target state="translated">主張をする前に何らかの方法で対象をマッサージする</target>
        </trans-unit>
        <trans-unit id="df045e1dda9af207ebdd22cc46cb4c822dc1b316" translate="yes" xml:space="preserve">
          <source>Match route against any UserId</source>
          <target state="translated">任意の UserId に対してルートをマッチさせる</target>
        </trans-unit>
        <trans-unit id="e3f881aff307db56b041aabd99009eac81961bf6" translate="yes" xml:space="preserve">
          <source>Match the route to a specific method (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, etc).</source>
          <target state="translated">ルートを特定のメソッド（ &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; など）に一致させます。</target>
        </trans-unit>
        <trans-unit id="ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a" translate="yes" xml:space="preserve">
          <source>Matches</source>
          <target state="translated">Matches</target>
        </trans-unit>
        <trans-unit id="d08b9e8784711a6011e4dbb1e80d47913982b39f" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;*google.com&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*google.com&lt;/code&gt; に一致</target>
        </trans-unit>
        <trans-unit id="a10953a8fb2f1334f3b753eba54b9eb6f7f5199f" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;google.com&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;google.com&lt;/code&gt; に一致</target>
        </trans-unit>
        <trans-unit id="12cbe10e02e70dd3222978103128ac46f497d423" translate="yes" xml:space="preserve">
          <source>Matching origins and non origin URL&amp;rsquo;s</source>
          <target state="translated">一致するオリジンと非オリジンURL</target>
        </trans-unit>
        <trans-unit id="ce3222a53551b76e3d865f9d5a33f75d3f991d4a" translate="yes" xml:space="preserve">
          <source>Matching requests and routes</source>
          <target state="translated">リクエストとルートのマッチング</target>
        </trans-unit>
        <trans-unit id="2efbcbe6aa01bcece60387200b3c69ef872b2cb3" translate="yes" xml:space="preserve">
          <source>Maybe not! For these scenarios we give you a simple escape hatch to bypass all of the checks above and just force events to happen!</source>
          <target state="translated">そうではないかもしれません これらのシナリオでは、上記のチェックをすべてバイパスして、イベントを強制的に発生させるためのシンプルな脱出ハッチを提供しています!</target>
        </trans-unit>
        <trans-unit id="431c09700fcab65da1715e0f662680af5c825f3f" translate="yes" xml:space="preserve">
          <source>Memory optimizations in CI.</source>
          <target state="translated">CIにおけるメモリの最適化。</target>
        </trans-unit>
        <trans-unit id="d12885576bb1823b9e1c4cce59321dfbf5b05837" translate="yes" xml:space="preserve">
          <source>Memory usage improvements.</source>
          <target state="translated">メモリ使用量の改善。</target>
        </trans-unit>
        <trans-unit id="8e8a0736134cc1207e9b9c709ee22329176acbb8" translate="yes" xml:space="preserve">
          <source>Merges multiple mochawesome JSON reports</source>
          <target state="translated">複数のMochawesome JSONレポートをマージ</target>
        </trans-unit>
        <trans-unit id="2e002ffc65162e59c29d93e6f7a9ddbb30ca09c9" translate="yes" xml:space="preserve">
          <source>Merging queries</source>
          <target state="translated">クエリのマージ</target>
        </trans-unit>
        <trans-unit id="07a9c92e56c3913ed2b7410987cce0db987e75ea" translate="yes" xml:space="preserve">
          <source>Merry Christmas everyone ;-)</source>
          <target state="translated">メリークリスマス)</target>
        </trans-unit>
        <trans-unit id="19955b50e1890263325c103ee200ecdbb71035f9" translate="yes" xml:space="preserve">
          <source>Merry Christmas everyone!</source>
          <target state="translated">みんなメリークリスマス</target>
        </trans-unit>
        <trans-unit id="68f4145fee7dde76afceb910165924ad14cf0d00" translate="yes" xml:space="preserve">
          <source>Message</source>
          <target state="translated">Message</target>
        </trans-unit>
        <trans-unit id="cef6aba945ae2a8391fb0b6ab9733b6400f87525" translate="yes" xml:space="preserve">
          <source>Message to be printed to Cypress Command Log. Accepts a Markdown formatted message.</source>
          <target state="translated">Cypress コマンドログに印刷するメッセージ。Markdown フォーマットのメッセージを受け付けます。</target>
        </trans-unit>
        <trans-unit id="bb2469146b0b0ca67690cb92451e53de5427570d" translate="yes" xml:space="preserve">
          <source>Message: &lt;code&gt;COMMIT_INFO_MESSAGE&lt;/code&gt;</source>
          <target state="translated">メッセージ： &lt;code&gt;COMMIT_INFO_MESSAGE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="3583720023ed685351cee9bf652377a3f0e66a18" translate="yes" xml:space="preserve">
          <source>Method and URL</source>
          <target state="translated">メソッドとURL</target>
        </trans-unit>
        <trans-unit id="479945670b01027341d48afec46812b492c18ac0" translate="yes" xml:space="preserve">
          <source>Method and Value</source>
          <target state="translated">方法と価値</target>
        </trans-unit>
        <trans-unit id="235d62c34b5da2f99dbd542ba942c4ea6d60bbf0" translate="yes" xml:space="preserve">
          <source>Method to match against requests</source>
          <target state="translated">リクエストとのマッチング方法</target>
        </trans-unit>
        <trans-unit id="38f44181f4d91c52c894dfa6d08bb60ae8a6f477" translate="yes" xml:space="preserve">
          <source>Method, URL, and Body</source>
          <target state="translated">メソッド、URL、ボディ</target>
        </trans-unit>
        <trans-unit id="5bc93878c3ba17340102ebf0f740f8c3302add0b" translate="yes" xml:space="preserve">
          <source>Milliseconds</source>
          <target state="translated">Milliseconds</target>
        </trans-unit>
        <trans-unit id="509e2230d08e6046ee2ef1e68e1c2d66e4ce5243" translate="yes" xml:space="preserve">
          <source>Mimic user typing behavior</source>
          <target state="translated">ユーザーのタイピング動作を模倣</target>
        </trans-unit>
        <trans-unit id="cfd23a6e536b1366fa441556525d84fb56ca0562" translate="yes" xml:space="preserve">
          <source>Minor improvements to contributing docs and scripts. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1665&quot;&gt;#1665&lt;/a&gt;.</source>
          <target state="translated">ドキュメントとスクリプトの寄稿に対するマイナーな改善。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1665&quot;&gt;＃1665を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="124e85abbb2009c7204c3bf0ef8e142433a502d4" translate="yes" xml:space="preserve">
          <source>Mirroring</source>
          <target state="translated">Mirroring</target>
        </trans-unit>
        <trans-unit id="0a893ece8e469a3ca3d935c49f41d08d04b75ecc" translate="yes" xml:space="preserve">
          <source>Misc</source>
          <target state="translated">Misc</target>
        </trans-unit>
        <trans-unit id="315d4987ea678a3937a8ad8dd5906795fea294bc" translate="yes" xml:space="preserve">
          <source>Mix and match, typically have one true end-to-end test, and then stub the rest</source>
          <target state="translated">ミックス&amp;マッチ、通常は1つの真のエンドツーエンドのテストを行い、残りの部分をスタブにします。</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="09299d24728ba4d7f2ab3e4726b8dc2a351b8d2b" translate="yes" xml:space="preserve">
          <source>Mocha automatically shares contexts for us across all applicable hooks for each test. Additionally these aliases and properties are automatically cleaned up after each test.</source>
          <target state="translated">Mocha は、テストごとに適用可能なすべてのフックのコンテキストを自動的に共有してくれます。さらに、これらのエイリアスとプロパティは、各テストの後に自動的にクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="70c4693bafb11398e35d34e3b4baa1b0a03e19d0" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s built-in reporters</source>
          <target state="translated">Mochaの組み込みレポーター</target>
        </trans-unit>
        <trans-unit id="9b10a344b67ae24fcc616378433969201b4947ff" translate="yes" xml:space="preserve">
          <source>Mochawesome now works correctly and outputs files in all versions. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/551&quot;&gt;#551&lt;/a&gt;.</source>
          <target state="translated">Mochawesomeが正しく動作し、すべてのバージョンのファイルを出力するようになりました。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/551&quot;&gt;＃551を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="3ba4fd3a12340764d2d6185f0628b20bfae2a6db" translate="yes" xml:space="preserve">
          <source>Mochawesome will exit correctly with code &lt;code&gt;1&lt;/code&gt; when a hook fails. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1063&quot;&gt;#1063&lt;/a&gt;.</source>
          <target state="translated">Mochawesomeは、フックが失敗すると、コード &lt;code&gt;1&lt;/code&gt; で正しく終了します。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1063&quot;&gt;＃1063&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e982a9fbd6d7ea055f3583daa61b8cf12dcdfb83" translate="yes" xml:space="preserve">
          <source>Modified the &lt;code&gt;document.hasFocus()&lt;/code&gt; method to return &lt;code&gt;true&lt;/code&gt; if the top window (Cypress window) is in focus. This should now correctly match how your application behaves outside of Cypress. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1940&quot;&gt;#1940&lt;/a&gt;.</source>
          <target state="translated">一番上のウィンドウ（サイプレスウィンドウ）がフォーカスされている場合に &lt;code&gt;true&lt;/code&gt; を返すように &lt;code&gt;document.hasFocus()&lt;/code&gt; メソッドを変更しました。これは、サイプレスの外部でのアプリケーションの動作と正しく一致するはずです。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1940&quot;&gt;＃1940を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="1f7dd5e6b53a181538f5b496c3e397f65fcff0fb" translate="yes" xml:space="preserve">
          <source>Modifier effects</source>
          <target state="translated">変更効果</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="5a53f153d15be1c568be25f585edd0190baca4a1" translate="yes" xml:space="preserve">
          <source>Modifiers are automatically released between tests, even with &lt;code&gt;{release: false}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{release: false}&lt;/code&gt; ても、修飾子はテスト間で自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="26d367dff38eac0b85a9568bde2c53c2423d004a" translate="yes" xml:space="preserve">
          <source>Modifiers are simulated by setting their corresponding values to &lt;code&gt;true&lt;/code&gt; for key and click events. So, for example, activating the &lt;code&gt;{shift}&lt;/code&gt; modifier will set &lt;code&gt;event.shiftKey&lt;/code&gt; to true for any key events, such as &lt;code&gt;keydown&lt;/code&gt;.</source>
          <target state="translated">修飾子は、キーイベントとクリックイベントの対応する値を &lt;code&gt;true&lt;/code&gt; に設定することによってシミュレートされます。したがって、たとえば &lt;code&gt;{shift}&lt;/code&gt; 修飾子を &lt;code&gt;event.shiftKey&lt;/code&gt; すると、 &lt;code&gt;keydown&lt;/code&gt; などのすべてのキーイベントに対してevent.shiftKeyがtrueに設定されます。</target>
        </trans-unit>
        <trans-unit id="ef6bdfed66bc550b98a08f356b417584d018e6c7" translate="yes" xml:space="preserve">
          <source>Modify args based on browser</source>
          <target state="translated">ブラウザに応じて引数を変更する</target>
        </trans-unit>
        <trans-unit id="f854a4df77032cb21feee6480ee2489d112f2d87" translate="yes" xml:space="preserve">
          <source>Modify your Application before it loads after page transitions</source>
          <target state="translated">ページ遷移後にロードする前にアプリケーションを修正する</target>
        </trans-unit>
        <trans-unit id="20a8393b6cce3c25730fdedc4368d43e36a833c4" translate="yes" xml:space="preserve">
          <source>Modifying fixture data before using it</source>
          <target state="translated">フィクスチャデータを使用する前に修正する</target>
        </trans-unit>
        <trans-unit id="7ee83fed2e8bf53e577b314dd959ae5c55d31275" translate="yes" xml:space="preserve">
          <source>Module API</source>
          <target state="translated">モジュールAPI</target>
        </trans-unit>
        <trans-unit id="018c7f864edc24dac6c48e2bea114c9d3ee3c3d6" translate="yes" xml:space="preserve">
          <source>Module for adding visual regression testing to Cypress.</source>
          <target state="translated">Cypress にビジュアルリグレッションテストを追加するためのモジュールです。</target>
        </trans-unit>
        <trans-unit id="f1c9b76d560c89c55f48f9d201f33ee01912eeed" translate="yes" xml:space="preserve">
          <source>Month Inputs</source>
          <target state="translated">月の入力</target>
        </trans-unit>
        <trans-unit id="45b8f20869e24872df19def36622f5cffb3b60e7" translate="yes" xml:space="preserve">
          <source>More &lt;code&gt;cy.spy()&lt;/code&gt; examples</source>
          <target state="translated">その他の &lt;code&gt;cy.spy()&lt;/code&gt; の例</target>
        </trans-unit>
        <trans-unit id="4560ff401774bfb5b2711a3156e92fb27b6be5ac" translate="yes" xml:space="preserve">
          <source>More &lt;code&gt;cy.stub()&lt;/code&gt; examples</source>
          <target state="translated">その他の &lt;code&gt;cy.stub()&lt;/code&gt; の例</target>
        </trans-unit>
        <trans-unit id="a033cdaa694d2f3dab32939161991cb126b374dd" translate="yes" xml:space="preserve">
          <source>More Info:</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="c7edc0bf54b3bf2bdd3b7b485cef9f4031121657" translate="yes" xml:space="preserve">
          <source>More changes to prepare for server adapters,</source>
          <target state="translated">サーバーアダプターに備えるための変更点が増えました。</target>
        </trans-unit>
        <trans-unit id="98fbe8b660ac4b398b4966666617d52580c9d094" translate="yes" xml:space="preserve">
          <source>More content was added to our &lt;a href=&quot;../tooling/code-coverage&quot;&gt;Code Coverage&lt;/a&gt; doc.</source>
          <target state="translated">&lt;a href=&quot;../tooling/code-coverage&quot;&gt;コードカバレッジ&lt;/a&gt;ドキュメントにコンテンツが追加されました。</target>
        </trans-unit>
        <trans-unit id="6f099371f505f33a215bcb52e60d5c2746d87e5a" translate="yes" xml:space="preserve">
          <source>Most CI providers will automatically kill background processes so you don&amp;rsquo;t have to worry about cleaning up your server process once Cypress finishes.</source>
          <target state="translated">ほとんどのCIプロバイダーはバックグラウンドプロセスを自動的に強制終了するので、サイプレスの終了後にサーバープロセスをクリーンアップする必要はありません。</target>
        </trans-unit>
        <trans-unit id="af6c80da5531ea12bcd3adc0689e100aa64af93d" translate="yes" xml:space="preserve">
          <source>Most likely fixed a bug that was crashing Cypress due to &lt;code&gt;Cannot set headers after they've been sent&lt;/code&gt;. We were unable to write a test for this since we could not recreate the error, but analyzed how it &lt;em&gt;may&lt;/em&gt; happen and fixed the code there. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;Open an issue&lt;/a&gt; if you see this error, it will be obvious since Cypress will literally crash.</source>
          <target state="translated">&lt;code&gt;Cannot set headers after they've been sent&lt;/code&gt; ためにサイプレスをクラッシュさせていたバグを修正した可能性が高いです。エラーを再現できなかったため、このテストを作成できませんでしたが、エラーがどのように発生&lt;em&gt;する&lt;/em&gt;かを分析し、そこでコードを修正しました。このエラーが表示された場合&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/new&quot;&gt;は問題を開い&lt;/a&gt;てください。サイプレスは文字通りクラッシュするため、それは明らかです。</target>
        </trans-unit>
        <trans-unit id="f394c1de5256dc0e2025bdec29ee0354d43290a0" translate="yes" xml:space="preserve">
          <source>Most of the action commands now take multiple snapshots (giving you a precise look at an action prior to it happening, and then afterwards).</source>
          <target state="translated">ほとんどのアクションコマンドは、複数のスナップショットを取るようになりました(アクションが発生する前のアクションと発生後のアクションを正確に見ることができます)。</target>
        </trans-unit>
        <trans-unit id="b9543f0af4fafcd6d2a2a813d8ce702ba83f3a2c" translate="yes" xml:space="preserve">
          <source>Most of the time this use case is needed when users click an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; that opens a new tab. Users then want to switch to that tab to verify that the content loaded. But, you shouldn&amp;rsquo;t need to do this. In fact we have &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Testing-the-DOM&quot;&gt;recipes of showing you how to test this without multiple tabs&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、ユーザーが新しいタブを開く &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; をクリックすると、この使用例が必要になります。次に、ユーザーはそのタブに切り替えて、コンテンツが読み込まれたことを確認します。しかし、これを行う必要はありません。実際、&lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Testing-the-DOM&quot;&gt;複数のタブなしでこれをテストする方法を示すレシピがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f098ddab7cd85595b7bc50c469384586ac99b82" translate="yes" xml:space="preserve">
          <source>Most of the time, when querying for elements, you expect them to eventually exist. But sometimes you wish to wait until they &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; exist.</source>
          <target state="translated">ほとんどの場合、要素のクエリを実行すると、最終的には要素が存在することが予想されます。しかし、それら&lt;em&gt;が&lt;/em&gt;存在&lt;em&gt;しなくなる&lt;/em&gt;まで待つことを望む場合があります。</target>
        </trans-unit>
        <trans-unit id="29a782808551f348930fba38dd0a762c24097d5e" translate="yes" xml:space="preserve">
          <source>Most testing tools (like Selenium) operate by running outside of the browser and executing remote commands across the network. &lt;em&gt;Cypress is the exact opposite.&lt;/em&gt; Cypress is executed in the same run loop as your application.</source>
          <target state="translated">ほとんどのテストツール（Seleniumなど）は、ブラウザーの外部で実行し、ネットワーク経由でリモートコマンドを実行することによって動作します。&lt;em&gt;サイプレスは正反対です。&lt;/em&gt;サイプレスは、アプリケーションと同じ実行ループで実行されます。</target>
        </trans-unit>
        <trans-unit id="80c34b003b881af372ec0bfca3c68bc5dfc2cdb0" translate="yes" xml:space="preserve">
          <source>Mounting a project directory with an existing &lt;code&gt;node_modules&lt;/code&gt; into a &lt;code&gt;cypress/base&lt;/code&gt; docker image &lt;strong&gt;will not work&lt;/strong&gt;:</source>
          <target state="translated">既存でプロジェクトディレクトリをマウント &lt;code&gt;node_modules&lt;/code&gt; に &lt;code&gt;cypress/base&lt;/code&gt; ドッキングウィンドウのイメージは&lt;strong&gt;なりません作品&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="b239ecd4f1b125963a812db57dc3cec60573502b" translate="yes" xml:space="preserve">
          <source>Mouse Events</source>
          <target state="translated">マウスイベント</target>
        </trans-unit>
        <trans-unit id="889d0cd771f51813c36f0a1326540e6442b615e4" translate="yes" xml:space="preserve">
          <source>Mousedown cancellation will not cause focus</source>
          <target state="translated">マウスダウンをキャンセルしてもフォーカスは発生しません。</target>
        </trans-unit>
        <trans-unit id="04a4551cf8f2ffd2cc7a1a6a262a29951c273d43" translate="yes" xml:space="preserve">
          <source>Move repeated code in previous tests to &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;beforeEach&lt;/code&gt; hooks.</source>
          <target state="translated">以前のテストで繰り返されたコードを &lt;code&gt;before&lt;/code&gt; または &lt;code&gt;beforeEach&lt;/code&gt; フックに移動します。</target>
        </trans-unit>
        <trans-unit id="be2fa0dc690b284e6dfe99319975f6a05b5fcc89" translate="yes" xml:space="preserve">
          <source>Move the clock a number of milliseconds. Any timers within the affected range of time will be called.</source>
          <target state="translated">クロックをミリ秒単位で移動させます。影響を受ける時間の範囲内にあるタイマーはすべてコールされます。</target>
        </trans-unit>
        <trans-unit id="9b5d46d6dc554aac1eec9c8a2ac1ff34ba5998da" translate="yes" xml:space="preserve">
          <source>Move the clock the specified number of &lt;code&gt;milliseconds&lt;/code&gt;. Any timers within the affected range of time will be called.</source>
          <target state="translated">クロックを指定された &lt;code&gt;milliseconds&lt;/code&gt; 数だけ移動します。影響を受ける時間範囲内のタイマーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5c61bb0d107be71155afebcab18cb29288fb208e" translate="yes" xml:space="preserve">
          <source>Move those Cypress commands into an &lt;code&gt;it(...)&lt;/code&gt; block and everything will work correctly.</source>
          <target state="translated">それらのサイプレスコマンドを &lt;code&gt;it(...)&lt;/code&gt; ブロックに移動すると、すべてが正しく動作します。</target>
        </trans-unit>
        <trans-unit id="5761e4eb671f9f4f0945b4f525ec85951b39678d" translate="yes" xml:space="preserve">
          <source>Move time after overriding a native time function with &lt;a href=&quot;clock&quot;&gt;&lt;code&gt;cy.clock()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;clock&quot;&gt; &lt;code&gt;cy.clock()&lt;/code&gt; &lt;/a&gt;でネイティブの時間関数をオーバーライドした後、時間を移動します。</target>
        </trans-unit>
        <trans-unit id="4c3b0ec167613968f727aab461572d5e6997faa5" translate="yes" xml:space="preserve">
          <source>Moved snapshot message to be affixed to the bottom of the remote app in preparation for cycling through multiple snapshots.</source>
          <target state="translated">複数のスナップショットを循環させるための準備として、リモートアプリの下部に貼るスナップショットメッセージを移動しました。</target>
        </trans-unit>
        <trans-unit id="4c80111af24ff29caaa5295aff90a78cb9762c99" translate="yes" xml:space="preserve">
          <source>Moves cursor down</source>
          <target state="translated">カーソルを下に移動</target>
        </trans-unit>
        <trans-unit id="82954d32c3ed425a1b14e632c4d60273e2189cde" translate="yes" xml:space="preserve">
          <source>Moves cursor left</source>
          <target state="translated">カーソルを左に移動</target>
        </trans-unit>
        <trans-unit id="10e5d58b6d0c9baed5e17aa003f42e4579268bfe" translate="yes" xml:space="preserve">
          <source>Moves cursor right</source>
          <target state="translated">カーソルを右に移動</target>
        </trans-unit>
        <trans-unit id="18f72522a36155f6dfce19e97f98e42ba361987b" translate="yes" xml:space="preserve">
          <source>Moves cursor to the end of the line</source>
          <target state="translated">カーソルを行末に移動</target>
        </trans-unit>
        <trans-unit id="e76fe25f1f40f9931fb081a54b8a92064fef6334" translate="yes" xml:space="preserve">
          <source>Moves cursor to the start of the line</source>
          <target state="translated">カーソルを行頭に移動</target>
        </trans-unit>
        <trans-unit id="1457b152a68551e25968913f5e97eb00d849a67b" translate="yes" xml:space="preserve">
          <source>Moves cursor up</source>
          <target state="translated">カーソルを上に移動</target>
        </trans-unit>
        <trans-unit id="ed358fdd2c6c1b1051e1dbf45e846f478f5e4e6a" translate="yes" xml:space="preserve">
          <source>Much better. But still coupled to text content that may change.</source>
          <target state="translated">だいぶ良くなりました。しかし、まだ変更される可能性のあるテキストの内容に結合されています。</target>
        </trans-unit>
        <trans-unit id="c77765cac3c7ce5c92f09833a369c83486c36ffe" translate="yes" xml:space="preserve">
          <source>Much slower</source>
          <target state="translated">はるかに遅い</target>
        </trans-unit>
        <trans-unit id="f248990047836f9af40f0eb02ccb3f884aff4b66" translate="yes" xml:space="preserve">
          <source>Multiple &lt;a href=&quot;command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; calls can be labeled and associated to a &lt;strong&gt;single&lt;/strong&gt; run by passing in the &lt;a href=&quot;command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group &amp;lt;name&amp;gt;&lt;/code&gt; flag&lt;/a&gt;, where &lt;code&gt;name&lt;/code&gt; is an arbitrary reference label. The group name must be unique within the associated test run.</source>
          <target state="translated">&lt;a href=&quot;command-line#cypress-run-group-lt-name-gt&quot;&gt; &lt;code&gt;--group &amp;lt;name&amp;gt;&lt;/code&gt; &lt;/a&gt;フラグを渡すことで、複数の&lt;a href=&quot;command-line#cypress-run&quot;&gt; &lt;code&gt;cypress run&lt;/code&gt; &lt;/a&gt;呼び出しにラベルを付け、&lt;strong&gt;1つの&lt;/strong&gt;実行に関連付けることができます。ここで、 &lt;code&gt;name&lt;/code&gt; は任意の参照ラベルです。グループ名は、関連するテスト実行内で一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="48e99bc02a5c317d584a54fa0a48818f479c8440" translate="yes" xml:space="preserve">
          <source>Multiple Assertions</source>
          <target state="translated">複数のアサーション</target>
        </trans-unit>
        <trans-unit id="0922553b0e0a73ead1266b4da2d2a38a75162ebf" translate="yes" xml:space="preserve">
          <source>Multiple Reporters</source>
          <target state="translated">複数の記者</target>
        </trans-unit>
        <trans-unit id="331f9a2c732ec80c48d077d1d11d4db5cb14e773" translate="yes" xml:space="preserve">
          <source>Multiple assertions</source>
          <target state="translated">複数のアサーション</target>
        </trans-unit>
        <trans-unit id="57ec357675f2389696871840a18642befa15466c" translate="yes" xml:space="preserve">
          <source>Multiple browsers open at the same time</source>
          <target state="translated">複数のブラウザを同時に開く</target>
        </trans-unit>
        <trans-unit id="29bb8368a994515e3d19c89c63c64c0f07edd985" translate="yes" xml:space="preserve">
          <source>Multiple reporters examples</source>
          <target state="translated">複数の記者の例</target>
        </trans-unit>
        <trans-unit id="9148fbb8304f4463eb369efa0553bac9a7195cb9" translate="yes" xml:space="preserve">
          <source>Multiple snapshots are now cycled automatically on hover, and the name of the snapshot is displayed.</source>
          <target state="translated">複数のスナップショットがホバー時に自動的に循環し、スナップショットの名前が表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="d69ed4b1357c7fe8fad86436eeb947e3961769c3" translate="yes" xml:space="preserve">
          <source>Multiple tabs</source>
          <target state="translated">複数のタブ</target>
        </trans-unit>
        <trans-unit id="c7a46952c5c2d8fd100a6fbd4c2bcad60f83e8db" translate="yes" xml:space="preserve">
          <source>Multiple values must be separated by a comma, not a space.</source>
          <target state="translated">複数の値はスペースではなくカンマで区切る必要があります。</target>
        </trans-unit>
        <trans-unit id="54ecc4f4fd90a0d84f23eaec608679503bc43cc3" translate="yes" xml:space="preserve">
          <source>My application does A/B testing, how do I account for that?</source>
          <target state="translated">私のアプリケーションはABテストを行っています。</target>
        </trans-unit>
        <trans-unit id="cecb686770f745c887257951b8338a595eac593d" translate="yes" xml:space="preserve">
          <source>My test still passes! The last &lt;code&gt;cy.get('.todo-list')&lt;/code&gt; and the assertion &lt;code&gt;should('have.length', 2)&lt;/code&gt; are clearly showing the spinning indicators, meaning Cypress is requerying for them.</source>
          <target state="translated">私のテストはまだ合格です！最後の &lt;code&gt;cy.get('.todo-list')&lt;/code&gt; とアサーション &lt;code&gt;should('have.length', 2)&lt;/code&gt; は、回転インジケーターを明確に示しています。つまり、サイプレスがそれらを再クエリしています。</target>
        </trans-unit>
        <trans-unit id="7b43145da4a748e6bed58068e2758ad0437c7292" translate="yes" xml:space="preserve">
          <source>My users receive a &amp;ldquo;welcome wizard&amp;rdquo;, but existing ones don&amp;rsquo;t. Can I always close the wizard in case it&amp;rsquo;s shown, and ignore it when it&amp;rsquo;s not?</source>
          <target state="translated">ユーザーには「ようこそウィザード」が表示されますが、既存のウィザードには表示されません。ウィザードが表示されている場合は常に閉じ、表示されていない場合は無視できますか？</target>
        </trans-unit>
        <trans-unit id="d4e7cb43e2a14f0d564f130472a1f8db5d1c42b7" translate="yes" xml:space="preserve">
          <source>NTLM authentication support for Cypress</source>
          <target state="translated">Cypress の NTLM 認証のサポート</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="f9d2933e9257b6e2af23e64c57ebdf5085947fcd" translate="yes" xml:space="preserve">
          <source>Name Value</source>
          <target state="translated">名前 値</target>
        </trans-unit>
        <trans-unit id="b8c2e6ae0fa23d551c1843ea039ab0e3553786e7" translate="yes" xml:space="preserve">
          <source>Name and Value</source>
          <target state="translated">名前と値</target>
        </trans-unit>
        <trans-unit id="fbe5d2f276bca82410d5e445fc3cb42570fbdb36" translate="yes" xml:space="preserve">
          <source>Name of function to be invoked.</source>
          <target state="translated">呼び出される関数の名前。</target>
        </trans-unit>
        <trans-unit id="cdc8ab8381e03a2b2e7079e785d3c581334c1d52" translate="yes" xml:space="preserve">
          <source>Name of native functions that clock should override.</source>
          <target state="translated">クロックがオーバーライドすべきネイティブ関数の名前。</target>
        </trans-unit>
        <trans-unit id="a5060069b5ed173f8884cf707dad275d318888c8" translate="yes" xml:space="preserve">
          <source>Name of property or nested properties (with dot notation) to get.</source>
          <target state="translated">取得するプロパティまたは入れ子になっているプロパティの名前(ドット表記)。</target>
        </trans-unit>
        <trans-unit id="7f5dbb53b1fbd7441597e2204594eaa622731421" translate="yes" xml:space="preserve">
          <source>Named the spec + app iframe so that inside of Chrome Dev Tools the iframe selector will clearly distinguish which iframe is your application versus Cypress.</source>
          <target state="translated">spec+app iframeに名前を付けたので、Chrome Dev Toolsの内部でiframeセレクターがiframeがアプリケーション対Cypressのアプリケーションであるかを明確に区別するようにします。</target>
        </trans-unit>
        <trans-unit id="a61ae26a7f8c60a906482146649f22e33b0fee98" translate="yes" xml:space="preserve">
          <source>Names given to &lt;a href=&quot;../../api/commands/as&quot;&gt;&lt;code&gt;.as()&lt;/code&gt;&lt;/a&gt; now work properly when they contain a &lt;code&gt;.&lt;/code&gt; character. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3512&quot;&gt;#3512&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../api/commands/as&quot;&gt; &lt;code&gt;.as()&lt;/code&gt; に&lt;/a&gt;指定された名前にが含まれている場合に正しく機能するようになりました &lt;code&gt;.&lt;/code&gt; キャラクター。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3512&quot;&gt;＃3512を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="bc893c6af718324576f34765093d5f20b6c54411" translate="yes" xml:space="preserve">
          <source>Names of cookies to be preserved. Pass an unlimited number of arguments.</source>
          <target state="translated">保存するクッキーの名前。引数の数に制限はありません。</target>
        </trans-unit>
        <trans-unit id="47b8b73453024c16a33ac79654339beda985ce39" translate="yes" xml:space="preserve">
          <source>Namespaced all cypress internal routes.</source>
          <target state="translated">すべてのサイプレス内部ルートを名前空間にしました。</target>
        </trans-unit>
        <trans-unit id="34803b64f16548b242233b7132d75f6e5f8fe8e6" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">命名規則</target>
        </trans-unit>
        <trans-unit id="801f35e25fc9a9c80bc8e37a7c4aaa9359f4f20b" translate="yes" xml:space="preserve">
          <source>Native Location</source>
          <target state="translated">ネイティブの位置</target>
        </trans-unit>
        <trans-unit id="2e30cc097892427215e0b5070bcb34797f4a0b84" translate="yes" xml:space="preserve">
          <source>Native access</source>
          <target state="translated">ネイティブアクセス</target>
        </trans-unit>
        <trans-unit id="ce5f99883c519caeab9bed25f6e57393b35f5359" translate="yes" xml:space="preserve">
          <source>Navigate back or forward to the previous or next URL in the browser&amp;rsquo;s history.</source>
          <target state="translated">ブラウザの履歴の前のURLまたは次のURLに戻るか進む。</target>
        </trans-unit>
        <trans-unit id="3d054fd3b1c68cde4d6675a4072249d0aa5824b2" translate="yes" xml:space="preserve">
          <source>Navigate to any superdomain without cross-origin errors</source>
          <target state="translated">クロスオリジンエラーなしで任意のスーパードメインへのナビゲート</target>
        </trans-unit>
        <trans-unit id="f003138d5b0ef4f3d03123419a03c71510d01b29" translate="yes" xml:space="preserve">
          <source>Navigating between full page refreshes during tests now works reliably.</source>
          <target state="translated">テスト中に全ページの更新の間を移動すると、確実に動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="ea53187d0b8860192e4cc973b4edf4179ca436b1" translate="yes" xml:space="preserve">
          <source>Nested Properties</source>
          <target state="translated">ネストされたプロパティ</target>
        </trans-unit>
        <trans-unit id="71c8d5da6b113edf1a2be1e1db3f1c016c79d602" translate="yes" xml:space="preserve">
          <source>Nested directories under &lt;code&gt;cypress/support&lt;/code&gt; no longer cause a &lt;code&gt;500&lt;/code&gt; when tests run. This was due to Cypress not ignoring directories and trying to serve them as regular files. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/163&quot;&gt;#163&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cypress/support&lt;/code&gt; の下にネストされたディレクトリがテストの実行時に &lt;code&gt;500&lt;/code&gt; を引き起こすことはなくなりました。これは、サイプレスがディレクトリを無視せず、それらを通常のファイルとして提供しようとしたためです。&lt;a href=&quot;https://github.com/cypress-io/cypress/issues/163&quot;&gt;＃163を&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="ec2c20162d70708dfac963668d643cffd68cdc19" translate="yes" xml:space="preserve">
          <source>Network Requests</source>
          <target state="translated">ネットワーク要求</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
