<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="bottle">
    <body>
      <group id="bottle">
        <trans-unit id="3f05bd815bc64ab3bc3175ce56a60867db2d7871" translate="yes" xml:space="preserve">
          <source>The last line tells Bottle to install the plugin to the default application. This causes the plugin to be automatically applied to all routes of that application. In other words, &lt;code&gt;stopwatch()&lt;/code&gt; is called once for each route callback and the return value is used as a replacement for the original callback.</source>
          <target state="translated">最後の行は、デフォルトのアプリケーションにプラグインをインストールするようにBottleに指示します。 これにより、そのアプリケーションのすべてのルートにプラグインが自動的に適用されます。 つまり、 &lt;code&gt;stopwatch()&lt;/code&gt; はルートコールバックごとに1回呼び出され、戻り値は元のコールバックの代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="2d04873114709ee4836cabf076a18fff17fe06b7" translate="yes" xml:space="preserve">
          <source>The last point to do is to enable editing of existing items.</source>
          <target state="translated">最後のポイントは、既存の項目を編集できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="472e2a57e19d59c4eddec46af306e99bad844af3" translate="yes" xml:space="preserve">
          <source>The main benefit is that the request handler terminates early. The handling thread can move on and accept new requests while the callbacks continue to write to sockets of previous requests. This is how these frameworks manage to process a lot of concurrent requests with only a small number of OS threads.</source>
          <target state="translated">主な利点は、リクエストハンドラが早期に終了することです。ハンドリングスレッドは、コールバックが以前のリクエストのソケットへの書き込みを続けている間に、先に進んで新しいリクエストを受け付けることができます。このようにして、これらのフレームワークは少数の OS スレッドで多くの同時リクエストを処理することができます。</target>
        </trans-unit>
        <trans-unit id="4bb22fedb53acb8311f23676f1430630c03378e0" translate="yes" xml:space="preserve">
          <source>The modified paths.</source>
          <target state="translated">修正されたパス。</target>
        </trans-unit>
        <trans-unit id="b55d5283becd2036045412ab850e0018a9305198" translate="yes" xml:space="preserve">
          <source>The module defines several functions, constants, and an exception.</source>
          <target state="translated">このモジュールは、いくつかの関数、定数、例外を定義しています。</target>
        </trans-unit>
        <trans-unit id="1ff613b353a32c9f833645bc313695851c21d793" translate="yes" xml:space="preserve">
          <source>The module-level &lt;a href=&quot;#bottle.request&quot;&gt;&lt;code&gt;bottle.request&lt;/code&gt;&lt;/a&gt; is a proxy object (implemented in &lt;a href=&quot;#bottle.LocalRequest&quot;&gt;&lt;code&gt;LocalRequest&lt;/code&gt;&lt;/a&gt;) and always refers to the &lt;code&gt;current&lt;/code&gt; request, or in other words, the request that is currently processed by the request handler in the current thread. This &lt;code&gt;thread locality&lt;/code&gt; ensures that you can safely use a global instance in a multi-threaded environment.</source>
          <target state="translated">モジュールレベルの&lt;a href=&quot;#bottle.request&quot;&gt; &lt;code&gt;bottle.request&lt;/code&gt; &lt;/a&gt;はプロキシオブジェクト（ &lt;a href=&quot;#bottle.LocalRequest&quot;&gt; &lt;code&gt;LocalRequest&lt;/code&gt; で&lt;/a&gt;実装）であり、常に &lt;code&gt;current&lt;/code&gt; リクエスト、つまり現在のスレッドのリクエストハンドラーによって現在処理されているリクエストを参照します。 この &lt;code&gt;thread locality&lt;/code&gt; により、マルチスレッド環境でグローバルインスタンスを安全に使用できます。</target>
        </trans-unit>
        <trans-unit id="bf71505a1047b5862ac2bc94cee226019a10f0b7" translate="yes" xml:space="preserve">
          <source>The module-level &lt;code&gt;install()&lt;/code&gt; and &lt;code&gt;uninstall()&lt;/code&gt; functions affect the &lt;a href=&quot;#default-app&quot;&gt;Default Application&lt;/a&gt;. To manage plugins for a specific application, use the corresponding methods on the &lt;a href=&quot;api#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; application object.</source>
          <target state="translated">モジュールレベルの &lt;code&gt;install()&lt;/code&gt; および &lt;code&gt;uninstall()&lt;/code&gt; 関数は、 &lt;a href=&quot;#default-app&quot;&gt;デフォルトのアプリケーションに&lt;/a&gt;影響します 。 特定のアプリケーションのプラグインを管理するには、 &lt;a href=&quot;api#bottle.Bottle&quot;&gt; &lt;code&gt;Bottle&lt;/code&gt; &lt;/a&gt;アプリケーションオブジェクトの対応するメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="64c3d9d45899ed40133caac7e336415289947247" translate="yes" xml:space="preserve">
          <source>The name of the route (if specified) or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ルートの名前（指定されている場合）または &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58ce54e400f38f30e234a999baf1f5b9732a230e" translate="yes" xml:space="preserve">
          <source>The new rule syntax was introduce in &lt;strong&gt;Bottle 0.10&lt;/strong&gt; to simplify some common use cases, but the old syntax still works and you can find lot code examples still using it. The differences are best described by example:</source>
          <target state="translated">新しいルール構文は、いくつかの一般的な使用例を簡略化するために&lt;strong&gt;ボトル0.10で&lt;/strong&gt;導入されましたが、古い構文は引き続き機能し、それを使用している多くのコード例を見つけることができます。 違いは例によって最もよく説明されています。</target>
        </trans-unit>
        <trans-unit id="5391f56f8d4dd34274fc2b5065327514438c87e3" translate="yes" xml:space="preserve">
          <source>The new rule syntax was introduced in &lt;strong&gt;Bottle 0.10&lt;/strong&gt; to simplify some common use cases, but the old syntax still works and you can find a lot of code examples still using it. The differences are best described by example:</source>
          <target state="translated">新しいルール構文は、いくつかの一般的なユースケースを簡略化するために、 &lt;strong&gt;Bottle 0.10で&lt;/strong&gt;導入されましたが、古い構文は引き続き機能し、それを使用している多くのコード例を見つけることができます。 違いは例によって最もよく説明されています。</target>
        </trans-unit>
        <trans-unit id="0e8f1a18da97ec1fdc1f4207bf72c9e4590bd543" translate="yes" xml:space="preserve">
          <source>The next step may is to catch the error with Bottle itself, to keep away any type of error message from the user of your application. To do that, Bottle has an &amp;ldquo;error-route&amp;rdquo;, which can be a assigned to a HTML-error.</source>
          <target state="translated">次のステップは、ボトル自体でエラーをキャッチし、アプリケーションのユーザーからのあらゆるタイプのエラーメッセージを遠ざけることです。 これを行うために、Bottleには「エラールート」があり、これをHTMLエラーに割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="cf675bce88de61640c2304b391973c2e50cb227f" translate="yes" xml:space="preserve">
          <source>The object-oriented approach is further described in the &lt;a href=&quot;#default-app&quot;&gt;Default Application&lt;/a&gt; section. Just keep in mind that you have a choice.</source>
          <target state="translated">オブジェクト指向のアプローチについては、 &lt;a href=&quot;#default-app&quot;&gt;デフォルトのアプリケーションの&lt;/a&gt;セクションで詳しく説明します。 選択肢があることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="140a1beb006443e6f28ad70e5632a27e7f4733cd" translate="yes" xml:space="preserve">
          <source>The ordering of this list is significant. You may for example return a subclass of &lt;a href=&quot;http://docs.python.org/library/functions.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;read()&lt;/code&gt; method. It is still treated as a string instead of a file, because strings are handled first.</source>
          <target state="translated">このリストの順序は重要です。 たとえば、 &lt;code&gt;read()&lt;/code&gt; メソッドで&lt;a href=&quot;http://docs.python.org/library/functions.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; の&lt;/a&gt;サブクラスを返すことができます 。 文字列が最初に処理されるため、ファイルではなく文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="e5b911afe909021e27d14a63554527b72bef6c37" translate="yes" xml:space="preserve">
          <source>The original callback with no plugins applied. Useful for introspection.</source>
          <target state="translated">プラグインを適用していないオリジナルのコールバック。イントロスペクションに便利です。</target>
        </trans-unit>
        <trans-unit id="01c84aa73d0316262e1481b896427469bed0cf76" translate="yes" xml:space="preserve">
          <source>The path-rule string (e.g. &lt;code&gt;/wiki/:page&lt;/code&gt;).</source>
          <target state="translated">パスルール文字列（例 &lt;code&gt;/wiki/:page&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a3557fd48c227d0085b25dccb57912d2bfcd7ed" translate="yes" xml:space="preserve">
          <source>The plugin API builds on the concept of &lt;a href=&quot;http://docs.python.org/glossary.html#term-decorator&quot;&gt;decorators&lt;/a&gt;. To put it briefly, a plugin is a decorator applied to every single route callback of an application.</source>
          <target state="translated">プラグインAPIは、 &lt;a href=&quot;http://docs.python.org/glossary.html#term-decorator&quot;&gt;デコレータ&lt;/a&gt;の概念に基づいています。 簡単に言えば、プラグインは、アプリケーションのすべてのルートコールバックに適用されるデコレータです。</target>
        </trans-unit>
        <trans-unit id="c7893c29e7145788924f9ffb3180a3f97e672fe5" translate="yes" xml:space="preserve">
          <source>The plugin is not applied to the route callbacks yet. This is delayed to make sure no routes are missed. You can install plugins first and add routes later, if you want to. The order of installed plugins is significant, though. If a plugin requires a database connection, you need to install the database plugin first.</source>
          <target state="translated">このプラグインはまだルートのコールバックには適用されていません。ルートを見逃さないように遅延させています。プラグインを先にインストールしておいて、後からルートを追加することも可能です。しかし、インストールされるプラグインの順番は重要です。プラグインがデータベース接続を必要とする場合、最初にデータベースプラグインをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="b791ad877511dca238a4ca3a07cdf898fca0ccab" translate="yes" xml:space="preserve">
          <source>The query string (as in &lt;code&gt;/forum?id=1&amp;amp;page=5&lt;/code&gt;) is commonly used to transmit a small number of key/value pairs to the server. You can use the &lt;a href=&quot;api#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;BaseRequest.query&lt;/code&gt;&lt;/a&gt; attribute (a &lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;) to access these values and the &lt;a href=&quot;api#bottle.BaseRequest.query_string&quot;&gt;&lt;code&gt;BaseRequest.query_string&lt;/code&gt;&lt;/a&gt; attribute to get the whole string.</source>
          <target state="translated">クエリ文字列（ &lt;code&gt;/forum?id=1&amp;amp;page=5&lt;/code&gt; など ）は、少数のキーと値のペアをサーバーに送信するために一般的に使用されます。 &lt;a href=&quot;api#bottle.BaseRequest.query&quot;&gt; &lt;code&gt;BaseRequest.query&lt;/code&gt; &lt;/a&gt;属性（ &lt;a href=&quot;api#bottle.FormsDict&quot;&gt; &lt;code&gt;FormsDict&lt;/code&gt; &lt;/a&gt; ）を使用してこれらの値にアクセスし、 &lt;a href=&quot;api#bottle.BaseRequest.query_string&quot;&gt; &lt;code&gt;BaseRequest.query_string&lt;/code&gt; &lt;/a&gt;属性を使用して文字列全体を取得できます。</target>
        </trans-unit>
        <trans-unit id="569e5ec99938d698ef97ccd68edd5f7a9ec23a77" translate="yes" xml:space="preserve">
          <source>The raw &lt;a href=&quot;#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; part of the URL (everything in between &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;) as a string.</source>
          <target state="translated">文字列としてのURLの生の&lt;a href=&quot;#bottle.BaseRequest.query&quot;&gt; &lt;code&gt;query&lt;/code&gt; &lt;/a&gt;部分（ &lt;code&gt;?&lt;/code&gt; と &lt;code&gt;#&lt;/code&gt; の間のすべて）。</target>
        </trans-unit>
        <trans-unit id="bdab35d5c042b2721ca5089917ad2c80eee98a6f" translate="yes" xml:space="preserve">
          <source>The raw request body</source>
          <target state="translated">生のリクエストボディ</target>
        </trans-unit>
        <trans-unit id="013e6b9ce1f809f8e768f7b8c94458fa77762a62" translate="yes" xml:space="preserve">
          <source>The reloading depends on the ability to stop the child process. If you are running on Windows or any other operating system not supporting &lt;code&gt;signal.SIGINT&lt;/code&gt; (which raises &lt;code&gt;KeyboardInterrupt&lt;/code&gt; in Python), &lt;code&gt;signal.SIGTERM&lt;/code&gt; is used to kill the child. Note that exit handlers and finally clauses, etc., are not executed after a &lt;code&gt;SIGTERM&lt;/code&gt;.</source>
          <target state="translated">リロードは、子プロセスを停止する機能に依存します。 Windowsまたは &lt;code&gt;signal.SIGINT&lt;/code&gt; （Pythonでは &lt;code&gt;KeyboardInterrupt&lt;/code&gt; を発生させる）をサポートしていないその他のオペレーティングシステムで実行している場合、 &lt;code&gt;signal.SIGTERM&lt;/code&gt; を使用して子を強制終了します。 出口ハンドラーやfinally節などは &lt;code&gt;SIGTERM&lt;/code&gt; の後に実行されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="037ed18ba8506d9791f1b7f12de97f68e8192be6" translate="yes" xml:space="preserve">
          <source>The request body length as an integer. The client is responsible to set this header. Otherwise, the real length of the body is unknown and -1 is returned. In this case, &lt;a href=&quot;#bottle.BaseRequest.body&quot;&gt;&lt;code&gt;body&lt;/code&gt;&lt;/a&gt; will be empty.</source>
          <target state="translated">整数としてのリクエスト本文の長さ。 クライアントは、このヘッダーを設定する必要があります。 それ以外の場合、本体の実際の長さは不明であり、-1が返されます。 この場合、 &lt;a href=&quot;#bottle.BaseRequest.body&quot;&gt; &lt;code&gt;body&lt;/code&gt; &lt;/a&gt;は空になります。</target>
        </trans-unit>
        <trans-unit id="5dea0cf5e78f99c7d9e0478ac0434afc61fb973e" translate="yes" xml:space="preserve">
          <source>The rest of this piece of code is just processing of the gained data: writing to the database, retrieve the corresponding id from the database and generate the output.</source>
          <target state="translated">このコードの残りの部分は、得られたデータを処理するだけです:データベースに書き込み、データベースから対応するIDを取得し、出力を生成します。</target>
        </trans-unit>
        <trans-unit id="bba5523edeec11c3cbcbb26248f0be2c861ff36b" translate="yes" xml:space="preserve">
          <source>The route callback with all plugins applied. This property is created on demand and then cached to speed up subsequent requests.</source>
          <target state="translated">すべてのプラグインが適用されたルートコールバック。このプロパティは要求に応じて作成され、その後のリクエストを高速化するためにキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="0ba7b4352dbc6eb908bceae990425115c36a5e77" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;/&amp;lt;action&amp;gt;/&amp;lt;item&amp;gt;&lt;/code&gt; matches as follows:</source>
          <target state="translated">ルール &lt;code&gt;/&amp;lt;action&amp;gt;/&amp;lt;item&amp;gt;&lt;/code&gt; は次のように一致します。</target>
        </trans-unit>
        <trans-unit id="b01d8c58b9c49391308d4b60922ebf4c3d305442" translate="yes" xml:space="preserve">
          <source>The rule string (e.g. &lt;code&gt;/wiki/:page&lt;/code&gt;).</source>
          <target state="translated">ルール文字列（例 &lt;code&gt;/wiki/:page&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="21b547f5fc81fb460d3468dfce1ea82e0f971970" translate="yes" xml:space="preserve">
          <source>The simplest form of a wildcard consists of a name enclosed in angle brackets (e.g. &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;). The name should be unique for a given route and form a valid python identifier (alphanumeric, starting with a letter). This is because wildcards are used as keyword arguments for the request callback later.</source>
          <target state="translated">ワイルドカードの最も単純な形式は、山括弧で囲まれた名前で構成されます（例： &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; ）。 名前は特定のルートで一意であり、有効なpython識別子（文字で始まる英数字）を形成する必要があります。 これは、後でリクエストコールバックのキーワード引数としてワイルドカードが使用されるためです。</target>
        </trans-unit>
        <trans-unit id="d9ebe38a75163c600360dd074411e309a808b156" translate="yes" xml:space="preserve">
          <source>The template &lt;code&gt;edit_task.tpl&lt;/code&gt; called within the function looks like this:</source>
          <target state="translated">関数内で &lt;code&gt;edit_task.tpl&lt;/code&gt; れるテンプレートedit_task.tplは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e6e6442fd08b84c38e4ed5b27ac005aa7413597b" translate="yes" xml:space="preserve">
          <source>The template engine allows you to embed lines or blocks of python code within your template. Code lines start with &lt;code&gt;%&lt;/code&gt; and code blocks are surrounded by &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; tokens:</source>
          <target state="translated">テンプレートエンジンを使用すると、Pythonコードの行またはブロックをテンプレート内に埋め込むことができます。 コード行は &lt;code&gt;%&lt;/code&gt; で始まり、コードブロックは &lt;code&gt;&amp;lt;%&lt;/code&gt; および &lt;code&gt;%&amp;gt;&lt;/code&gt; トークンで囲まれています。</target>
        </trans-unit>
        <trans-unit id="ccd613dd169948dcad0704ae1aaafe52ec3d98ef" translate="yes" xml:space="preserve">
          <source>The template syntax is a very thin layer around the Python language. Its main purpose is to ensure correct indentation of blocks, so you can format your template without worrying about indentation. Follow the link for a full syntax description: &lt;a href=&quot;stpl&quot;&gt;SimpleTemplate Engine&lt;/a&gt;</source>
          <target state="translated">テンプレート構文は、Python言語の周りの非常に薄いレイヤーです。 その主な目的は、ブロックを正しくインデントすることです。インデントを気にすることなくテンプレートをフォーマットできます。 完全な構文の説明については、リンクをたどってください： &lt;a href=&quot;stpl&quot;&gt;SimpleTemplate Engine&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67c266a45e6151935f3d15b0af95c2d74e6234a9" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;PATH_INFO&lt;/code&gt; with exactly one prefixed slash (to fix broken clients and avoid the &amp;ldquo;empty path&amp;rdquo; edge case).</source>
          <target state="translated">スラッシュが1つだけ付いた &lt;code&gt;PATH_INFO&lt;/code&gt; の値（壊れたクライアントを修正し、「空のパス」のエッジケースを回避するため）。</target>
        </trans-unit>
        <trans-unit id="d85847bfa329fb1171939f8d6e73d32e1e6b7cf5" translate="yes" xml:space="preserve">
          <source>The values of &lt;a href=&quot;#bottle.BaseRequest.forms&quot;&gt;&lt;code&gt;forms&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bottle.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; combined into a single &lt;a href=&quot;#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;. Values are either strings (form values) or instances of &lt;code&gt;cgi.FieldStorage&lt;/code&gt; (file uploads).</source>
          <target state="translated">1つの&lt;a href=&quot;#bottle.FormsDict&quot;&gt; &lt;code&gt;FormsDict&lt;/code&gt; に&lt;/a&gt;結合された&lt;a href=&quot;#bottle.BaseRequest.forms&quot;&gt; &lt;code&gt;forms&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#bottle.BaseRequest.files&quot;&gt; &lt;code&gt;files&lt;/code&gt; &lt;/a&gt;の値。 値は、文字列（フォーム値）または &lt;code&gt;cgi.FieldStorage&lt;/code&gt; のインスタンス（ファイルのアップロード）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="e432e283133b97f7dafc36dd2ce0583548446b6c" translate="yes" xml:space="preserve">
          <source>The while-loop runs until the client closes the connection. You get the idea :)</source>
          <target state="translated">whileループはクライアントが接続を閉じるまで実行されます。お分かりでしょう :)</target>
        </trans-unit>
        <trans-unit id="c9e41b041f206a620f1d48de0ac0344d24d5689e" translate="yes" xml:space="preserve">
          <source>The wrapped WSGI environ dictionary. This is the only real attribute. All other attributes actually are read-only properties.</source>
          <target state="translated">ラップされたWSGI environ辞書。これが唯一の実属性です。他のすべての属性は、実際には読み取り専用のプロパティです。</target>
        </trans-unit>
        <trans-unit id="73895ddb7c0e24078906486bf0fe5e27091bee2f" translate="yes" xml:space="preserve">
          <source>There are several other attributes used to access form data. Some of them combine values from different sources for easier access. The following table should give you a decent overview.</source>
          <target state="translated">フォームデータにアクセスするために使用される属性は他にもいくつかあります。その中には、アクセスを容易にするために異なるソースからの値を組み合わせたものもあります。以下の表を見れば、まともな概要がわかるはずです。</target>
        </trans-unit>
        <trans-unit id="0ade61b49a3005ebb6d5cb55657afe2410536678" translate="yes" xml:space="preserve">
          <source>There is no built-in support for sessions because there is no &lt;em&gt;right&lt;/em&gt; way to do it (in a micro framework). Depending on requirements and environment you could use &lt;a href=&quot;http://beaker.groovie.org/&quot;&gt;beaker&lt;/a&gt; middleware with a fitting backend or implement it yourself. Here is an example for beaker sessions with a file-based backend:</source>
          <target state="translated">（マイクロフレームワークでは）それを行う&lt;em&gt;正しい&lt;/em&gt;方法がないため、セッションの組み込みサポートはありません。 要件と環境に応じて、適切なバックエンドで&lt;a href=&quot;http://beaker.groovie.org/&quot;&gt;ビーカー&lt;/a&gt;ミドルウェアを使用するか、自分で実装できます。 以下は、ファイルベースのバックエンドを使用したビーカーセッションの例です。</target>
        </trans-unit>
        <trans-unit id="0fbd5950bc5482c12e75dbd1987af3aa741226bb" translate="yes" xml:space="preserve">
          <source>There may be cases where you do not want your application to generate the output directly, but return data to be processed further on, e.g. by JavaScript. For those cases, Bottle offers the possibility to return JSON objects, which is sort of standard for exchanging data between web applications. Furthermore, JSON can be processed by many programming languages, including Python</source>
          <target state="translated">アプリケーションが直接出力を生成するのではなく、JavaScriptなどで処理されるデータを返したい場合があるかもしれません。そのような場合のために、BottleはJSONオブジェクトを返す可能性を提供します。さらに、JSONはPythonを含む多くのプログラミング言語で処理することができます。</target>
        </trans-unit>
        <trans-unit id="47383ea7070398b48e42cf5344b94c14f6c29622" translate="yes" xml:space="preserve">
          <source>These chapters are intended for developers interested in the bottle development and release workflow.</source>
          <target state="translated">これらの章は、ボトルの開発とリリースのワークフローに興味のある開発者を対象としています。</target>
        </trans-unit>
        <trans-unit id="ef1efa715a19a76767e23be32cfc82fa6f8c8fc8" translate="yes" xml:space="preserve">
          <source>These produce an empty output with the &lt;code&gt;Content-Length&lt;/code&gt; header set to 0.</source>
          <target state="translated">これらは、 &lt;code&gt;Content-Length&lt;/code&gt; ヘッダーが0に設定された空の出力を生成します。</target>
        </trans-unit>
        <trans-unit id="97a499fc6489e4c1608ebef2e34e9b8cd021f993" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;#bottle.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; subclass is used to store request form data. Additionally to the normal dict-like item access methods (which return unmodified data as native strings), this container also supports attribute-like access to its values. Attributes are automatically de- or recoded to match &lt;a href=&quot;#bottle.FormsDict.input_encoding&quot;&gt;&lt;code&gt;input_encoding&lt;/code&gt;&lt;/a&gt; (default: &amp;lsquo;utf8&amp;rsquo;). Missing attributes default to an empty string.</source>
          <target state="translated">この&lt;a href=&quot;#bottle.MultiDict&quot;&gt; &lt;code&gt;MultiDict&lt;/code&gt; &lt;/a&gt;サブクラスは、リクエストフォームデータを格納するために使用されます。 通常のdictのようなアイテムアクセスメソッド（変更されていないデータをネイティブ文字列として返す）に加えて、このコンテナーはその値への属性のようなアクセスもサポートします。 属性は、 &lt;a href=&quot;#bottle.FormsDict.input_encoding&quot;&gt; &lt;code&gt;input_encoding&lt;/code&gt; &lt;/a&gt;に一致するように自動的にデコードまたは再コード化されます（デフォルト： 'utf8'）。 欠落している属性のデフォルトは空ストリングです。</target>
        </trans-unit>
        <trans-unit id="229c668abb46d0b0b35ed873fa0ecedaa262a500" translate="yes" xml:space="preserve">
          <source>This behavior is intended as a sane default, but can be overridden. The following example re-activates all plugins for a specific proxy-route:</source>
          <target state="translated">この動作はまともなデフォルトとして意図されていますが、上書きすることができます。以下の例は、特定のプロキシルートのすべてのプラグインを再アクティブにします。</target>
        </trans-unit>
        <trans-unit id="467341e0bb3ad77c6471df22a1ee5e9babbc50f7" translate="yes" xml:space="preserve">
          <source>This can be combined with the following &lt;code&gt;base.tpl&lt;/code&gt;:</source>
          <target state="translated">これは、次の &lt;code&gt;base.tpl&lt;/code&gt; と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="f4b2c15a0cbe42537675e5dbee488d899ce66159" translate="yes" xml:space="preserve">
          <source>This class does support dict-like case-insensitive item-access to headers, but is NOT a dict. Most notably, iterating over a response yields parts of the body and not the headers.</source>
          <target state="translated">このクラスは、ヘッダへの dict ライクな大文字小文字を区別しない項目アクセスをサポートしていますが、dict ではありません。特に注目すべきは、レスポンスの反復処理はヘッダではなくボディの一部を返します。</target>
        </trans-unit>
        <trans-unit id="3acb1048764709323551b9c22da312378d54e7cb" translate="yes" xml:space="preserve">
          <source>This class manages a list of search paths and helps to find and open application-bound resources (files).</source>
          <target state="translated">このクラスは、検索パスのリストを管理し、アプリケーションに依存するリソース(ファイル)を検索したり開いたりするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="84a780d032a9e93da4444e897d54d742f4f40cab" translate="yes" xml:space="preserve">
          <source>This class wraps a route callback along with route specific metadata and configuration and applies Plugins on demand. It is also responsible for turing an URL path rule into a regular expression usable by the Router.</source>
          <target state="translated">このクラスは、ルート固有のメタデータと設定と共にルートコールバックをラップし、オンデマンドでプラグインを適用します。また、URL パスルールをルータで使用可能な正規表現に変換する役割も担っています。</target>
        </trans-unit>
        <trans-unit id="10d4c8ab3d5158ae411d0f55447da9167fa127a4" translate="yes" xml:space="preserve">
          <source>This dict stores multiple values per key, but behaves exactly like a normal dict in that it returns only the newest value for any given key. There are special methods available to access the full list of values.</source>
          <target state="translated">このディクショナリは、キーごとに複数の値を格納しますが、通常のディクショナリとまったく同じように動作し、指定されたキーの最新の値のみを返します。値の完全なリストにアクセスするための特別なメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="26ff263b26858e1c316a6221fb954538ec930899" translate="yes" xml:space="preserve">
          <source>This dict-like class wraps a WSGI environ dict and provides convenient access to HTTP_* fields. Keys and values are native strings (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI environment contains non-native string values, these are de- or encoded using a lossless &amp;lsquo;latin1&amp;rsquo; character set.</source>
          <target state="translated">このdictのようなクラスは、WSGI環境のdictをラップし、HTTP_ *フィールドへの便利なアクセスを提供します。 キーと値はネイティブ文字列（2.xバイトまたは3.xユニコード）で、キーは大文字と小文字を区別しません。 WSGI環境に非ネイティブの文字列値が含まれている場合、これらはロスのない 'latin1'文字セットを使用してde-またはエンコードされます。</target>
        </trans-unit>
        <trans-unit id="9adce9e9e3799ab801af538b6db0796adefe44a2" translate="yes" xml:space="preserve">
          <source>This example demonstrates two things: You can bind more than one route to a single callback, and you can add wildcards to URLs and access them via keyword arguments.</source>
          <target state="translated">この例では、2 つのことを示しています。1 つのコールバックに複数のルートをバインドできることと、URL にワイルドカードを追加してキーワード引数でアクセスできることです。</target>
        </trans-unit>
        <trans-unit id="82ba09ec5fc1df86ee18b723972d0b4c44e20b73" translate="yes" xml:space="preserve">
          <source>This feature is most useful for plugins. They can validate their config parameters or trigger side effects using filters and document their configuration via &lt;code&gt;help&lt;/code&gt; fields:</source>
          <target state="translated">この機能はプラグインに最も役立ちます。 フィルターを使用して構成パラメーターを検証したり、副作用をトリガーしたり、 &lt;code&gt;help&lt;/code&gt; フィールドを使用して構成を文書化したりできます。</target>
        </trans-unit>
        <trans-unit id="2c83db15c1a14b1c1dee34f2ba638234b4698425" translate="yes" xml:space="preserve">
          <source>This generates a database-file &lt;code&gt;todo.db&lt;/code&gt; with tables called &lt;code&gt;todo&lt;/code&gt; and three columns &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;task&lt;/code&gt;, and &lt;code&gt;status&lt;/code&gt;. &lt;code&gt;id&lt;/code&gt; is a unique id for each row, which is used later on to reference the rows. The column &lt;code&gt;task&lt;/code&gt; holds the text which describes the task, it can be max 100 characters long. Finally, the column &lt;code&gt;status&lt;/code&gt; is used to mark a task as open (value 1) or closed (value 0).</source>
          <target state="translated">これにより、 &lt;code&gt;todo&lt;/code&gt; というテーブルと3つの列 &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;task&lt;/code&gt; 、および &lt;code&gt;status&lt;/code&gt; を持つデータベースファイル &lt;code&gt;todo.db&lt;/code&gt; が生成されます 。 &lt;code&gt;id&lt;/code&gt; は各行の一意のIDで、後で行を参照するために使用されます。 列の &lt;code&gt;task&lt;/code&gt; は、 タスクを説明するテキストを保持します。最大100文字にすることができます。 最後に、列の &lt;code&gt;status&lt;/code&gt; を使用して、タスクをオープン（値1）またはクローズ（値0）としてマークします。</target>
        </trans-unit>
        <trans-unit id="6666d67facaf5ea7f9090332164ce6d445c3d350" translate="yes" xml:space="preserve">
          <source>This guide explains the plugin API and how to write custom plugins. I suggest reading &lt;a href=&quot;tutorial#plugins&quot;&gt;Plugins&lt;/a&gt; first if you have not done that already. You might also want to have a look at the &lt;a href=&quot;plugins/index&quot;&gt;List of available Plugins&lt;/a&gt; for some practical examples.</source>
          <target state="translated">このガイドでは、プラグインAPIとカスタムプラグインの作成方法について説明します。 &lt;a href=&quot;tutorial#plugins&quot;&gt;プラグイン&lt;/a&gt;をまだ読んでいない場合は、最初に読むことをお勧めします。 また、いくつかの実用的な例について&lt;a href=&quot;plugins/index&quot;&gt;は、利用可能なプラグイン&lt;/a&gt;のリストを確認することもできます 。</target>
        </trans-unit>
        <trans-unit id="f913e5afca1ecc5e78c7fca61b35ff0fe6bffc61" translate="yes" xml:space="preserve">
          <source>This is a collection of code snippets and examples for common use cases.</source>
          <target state="translated">一般的なユースケースのコードスニペットと事例集です。</target>
        </trans-unit>
        <trans-unit id="10f43a0a774c92b0d60343a2e1eb2fc098d2238a" translate="yes" xml:space="preserve">
          <source>This is a draft. If you see any errors or find that a specific part is not explained clear enough, please tell the &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;mailing-list&lt;/a&gt; or file a &lt;a href=&quot;https://github.com/defnull/bottle/issues&quot;&gt;bug report&lt;/a&gt;.</source>
          <target state="translated">これはドラフトです。 エラーが発生した場合、または特定の部分が十分に説明されていない場合は、 &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;メーリングリストに&lt;/a&gt; &lt;a href=&quot;https://github.com/defnull/bottle/issues&quot;&gt;報告&lt;/a&gt;するか、 バグレポートを提出してください 。</target>
        </trans-unit>
        <trans-unit id="09306d1e9c880512e51b859943f0c35107fa79a7" translate="yes" xml:space="preserve">
          <source>This is a list of third-party plugins that add extend Bottles core functionality or integrate other libraries with the Bottle framework.</source>
          <target state="translated">Bottles のコア機能を拡張したり、Bottle フレームワークと他のライブラリを統合したりするサードパーティ製プラグインのリストです。</target>
        </trans-unit>
        <trans-unit id="77df5f1a0b185f51635ced2e0870f3e079bd7866" translate="yes" xml:space="preserve">
          <source>This is a mostly auto-generated API. If you are new to bottle, you might find the narrative &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt; more helpful.</source>
          <target state="translated">これはほとんど自動生成されたAPIです。 ボトルを初めて使用する場合は、ナラティブ&lt;a href=&quot;tutorial&quot;&gt;チュートリアルの&lt;/a&gt;方が役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="7734a7b6fa68e867eb4674dcafab86aae989b14a" translate="yes" xml:space="preserve">
          <source>This is it. Run this script, visit &lt;a href=&quot;http://localhost:8080/hello&quot;&gt;http://localhost:8080/hello&lt;/a&gt; and you will see &amp;ldquo;Hello World!&amp;rdquo; in your browser. Here is how it works:</source>
          <target state="translated">これです。 このスクリプトを実行し、 &lt;a href=&quot;http://localhost:8080/hello&quot;&gt;http：// localhost：8080 / hello&lt;/a&gt;にアクセスすると、「Hello World！」が表示されます。 ブラウザで。 以下にその仕組みを示します。</target>
        </trans-unit>
        <trans-unit id="a1287db8157257f274f2e23031e9ec6c12fbb2d7" translate="yes" xml:space="preserve">
          <source>This is not the recommend way (you should use a middleware in front of bottle to do this) but you can call other WSGI applications from within your bottle app and let bottle act as a pseudo-middleware. Here is an example:</source>
          <target state="translated">これは推奨される方法ではありませんが(これを行うにはbottleの前にミドルウェアを使用する必要があります)、bottleアプリ内から他のWSGIアプリケーションを呼び出して、bottleを擬似ミドルウェアとして動作させることができます。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="33649850ed75d74b71421a0f14b67cf3920d30cf" translate="yes" xml:space="preserve">
          <source>This is very convenient for small applications and saves you some typing, but also means that, as soon as your module is imported, routes are installed to the global application. To avoid this kind of import side-effects, Bottle offers a second, more explicit way to build applications:</source>
          <target state="translated">これは小さなアプリケーションには非常に便利で、入力の手間も省けますが、モジュールがインポートされるとすぐにグローバルアプリケーションにルートがインストールされてしまうことになります。このようなインポートの副作用を避けるために、Bottleではアプリケーションを構築するための第二の、より明確な方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="b16d512b0abe04daf10c11555647905de7e9d1d0" translate="yes" xml:space="preserve">
          <source>This makes creating asynchronous applications incredibly easy, because they look and feel like synchronous applications. A gevent-based server is actually not asynchronous, but massively multi-threaded. Here is an example:</source>
          <target state="translated">これにより、非同期アプリケーションの作成が信じられないほど簡単になり、見た目も感じも同期アプリケーションのようになる。geventベースのサーバは実際には非同期ではなく、大規模なマルチスレッドです。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="1be7a8274ebcbd4a7c4171c9ebdcd3a2027af51f" translate="yes" xml:space="preserve">
          <source>This only works directly in front of code segments. In all other places you can control the whitespace yourself and don&amp;rsquo;t need any special syntax.</source>
          <target state="translated">これは、コードセグメントの直前でのみ機能します。 他のすべての場所では、空白を自分で制御でき、特別な構文は必要ありません。</target>
        </trans-unit>
        <trans-unit id="f27962dc481e90978ae9591fa6de076700c08f55" translate="yes" xml:space="preserve">
          <source>This plugin is actually useful and very similar to the version bundled with Bottle. Not bad for less than 60 lines of code, don&amp;rsquo;t you think? Here is a usage example:</source>
          <target state="translated">このプラグインは実際に便利で、Bottleにバンドルされているバージョンと非常によく似ています。 60行未満のコードでは悪くありませんね。 次に使用例を示します。</target>
        </trans-unit>
        <trans-unit id="63f57e6debbf5d425ff86ec84b2c5806be97011c" translate="yes" xml:space="preserve">
          <source>This plugin measures the execution time for each request and adds an appropriate &lt;code&gt;X-Exec-Time&lt;/code&gt; header to the response. As you can see, the plugin returns a wrapper and the wrapper calls the original callback recursively. This is how decorators usually work.</source>
          <target state="translated">このプラグインは、各リクエストの実行時間を測定し、適切な &lt;code&gt;X-Exec-Time&lt;/code&gt; ヘッダーをレスポンスに追加します。 ご覧のとおり、プラグインはラッパーを返し、ラッパーは元のコールバックを再帰的に呼び出します。 これがデコレータの通常の動作方法です。</target>
        </trans-unit>
        <trans-unit id="05c93fb7f6f9f5c17417b0a80b5173f36d43f2c9" translate="yes" xml:space="preserve">
          <source>This plugin provides an sqlite3 database connection handle as an additional keyword argument to wrapped callbacks, but only if the callback expects it. If not, the route is ignored and no overhead is added. The wrapper does not affect the return value, but handles plugin-related exceptions properly. &lt;a href=&quot;#bottle.Plugin.setup&quot;&gt;&lt;code&gt;Plugin.setup()&lt;/code&gt;&lt;/a&gt; is used to inspect the application and search for conflicting plugins.</source>
          <target state="translated">このプラグインは、ラップされたコールバックへの追加のキーワード引数としてsqlite3データベース接続ハンドルを提供しますが、コールバックがそれを予期している場合のみです。 そうでない場合、ルートは無視され、オーバーヘッドは追加されません。 ラッパーは戻り値に影響を与えませんが、プラグイン関連の例外を適切に処理します。 &lt;a href=&quot;#bottle.Plugin.setup&quot;&gt; &lt;code&gt;Plugin.setup()&lt;/code&gt; &lt;/a&gt;は、アプリケーションを検査し、競合するプラグインを検索するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0bff7c8ab44e435fb549f3bc3764fce0df946ee1" translate="yes" xml:space="preserve">
          <source>This reads or sets the global settings stored in class.settings.</source>
          <target state="translated">class.settingsに格納されているグローバル設定を読み込んだり設定したりします。</target>
        </trans-unit>
        <trans-unit id="736c9455dfca6f294c0be54bd0ed37440e974ba9" translate="yes" xml:space="preserve">
          <source>This recipe is based upon the &lt;a href=&quot;http://devcenter.heroku.com/articles/quickstart&quot;&gt;Heroku Quickstart&lt;/a&gt;, with Bottle specific code replacing the &lt;a href=&quot;http://devcenter.heroku.com/articles/python#write_your_app&quot;&gt;Write Your App&lt;/a&gt; section of the &lt;a href=&quot;http://devcenter.heroku.com/articles/python&quot;&gt;Getting Started with Python on Heroku/Cedar&lt;/a&gt; guide:</source>
          <target state="translated">このレシピは&lt;a href=&quot;http://devcenter.heroku.com/articles/quickstart&quot;&gt;Herokuクイックスタートに&lt;/a&gt;基づいて&lt;a href=&quot;http://devcenter.heroku.com/articles/python&quot;&gt;おり、Heroku / Cedar&lt;/a&gt;ガイドのPythonスタートガイドの&lt;a href=&quot;http://devcenter.heroku.com/articles/python#write_your_app&quot;&gt;「アプリ&lt;/a&gt;の作成」セクションをボトル固有のコードで置き換えています。</target>
        </trans-unit>
        <trans-unit id="f533332cb7158e256c604446c2005098f843b887" translate="yes" xml:space="preserve">
          <source>This snippet renders to clean and compact html:</source>
          <target state="translated">このスニペットは、HTMLをきれいにコンパクトにレンダリングします。</target>
        </trans-unit>
        <trans-unit id="0bb08f0074789a553fe9220dec84236cec8d2c1c" translate="yes" xml:space="preserve">
          <source>This storage is optimized for fast read access. Retrieving a key or using non-altering dict methods (e.g. &lt;code&gt;dict.get()&lt;/code&gt;) has no overhead compared to a native dict.</source>
          <target state="translated">このストレージは、高速読み取りアクセス用に最適化されています。 キーを取得したり、変更されないdictメソッド（ &lt;code&gt;dict.get()&lt;/code&gt; など ）を使用したりすると、ネイティブのdictに比べてオーバーヘッドがありません。</target>
        </trans-unit>
        <trans-unit id="e96b25984df1681ec9e989ceeff26a3b9c2202d2" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you have Bottle either &lt;a href=&quot;#installation&quot;&gt;installed&lt;/a&gt; or copied into your project directory. Let&amp;rsquo;s start with a very basic &amp;ldquo;Hello World&amp;rdquo; example:</source>
          <target state="translated">このチュートリアルでは、ボトルがプロジェクトディレクトリに&lt;a href=&quot;#installation&quot;&gt;インストール&lt;/a&gt;またはコピーされていることを前提としています。 非常に基本的な「Hello World」の例から始めましょう。</target>
        </trans-unit>
        <trans-unit id="83237e6b5e4b708ba53384485d742a06d445214f" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the concepts and features of the Bottle web framework and covers basic and advanced topics alike. You can read it from start to end, or use it as a reference later on. The automatically generated &lt;a href=&quot;api&quot;&gt;API Reference&lt;/a&gt; may be interesting for you, too. It covers more details, but explains less than this tutorial. Solutions for the most common questions can be found in our &lt;a href=&quot;recipes&quot;&gt;Recipes&lt;/a&gt; collection or on the &lt;a href=&quot;faq&quot;&gt;Frequently Asked Questions&lt;/a&gt; page. If you need any help, join our &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;mailing list&lt;/a&gt; or visit us in our &lt;a href=&quot;http://webchat.freenode.net/?channels=bottlepy&quot;&gt;IRC channel&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルでは、Bottle Webフレームワークの概念と機能を紹介し、基本的なトピックと高度なトピックを同様に取り上げます。 最初から最後まで読むことも、後でリファレンスとして使用することもできます。 自動生成された&lt;a href=&quot;api&quot;&gt;APIリファレンス&lt;/a&gt;も興味深いかもしれません。 詳細については説明しますが、説明はこのチュートリアルよりも少なくなります。 最も一般的な質問の解決策は、 &lt;a href=&quot;recipes&quot;&gt;レシピ&lt;/a&gt;コレクションまたは&lt;a href=&quot;faq&quot;&gt;よくある質問の&lt;/a&gt;ページにあります。 サポートが必要な場合は、 &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;メーリングリスト&lt;/a&gt;に参加するか、 &lt;a href=&quot;http://webchat.freenode.net/?channels=bottlepy&quot;&gt;IRCチャネル&lt;/a&gt;で私たちにアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="992fd0ea8df12df0efd5d056c180c9ed8c9a2370" translate="yes" xml:space="preserve">
          <source>This tutorial is a work in progess and written by &lt;a href=&quot;http://github.com/noisefloor&quot;&gt;noisefloor&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルは進行中の作業であり、noisefloorによって作成され&lt;a href=&quot;http://github.com/noisefloor&quot;&gt;ました&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="251c5415dcc555a965c16c8a456e1ad791d86805" translate="yes" xml:space="preserve">
          <source>This tutorial should give a brief introduction to the &lt;a href=&quot;http://bottle.paws.org&quot;&gt;Bottle&lt;/a&gt; WSGI Framework. The main goal is to be able, after reading through this tutorial, to create a project using Bottle. Within this document, not all abilities will be shown, but at least the main and important ones like routing, utilizing the Bottle template abilities to format output and handling GET / POST parameters.</source>
          <target state="translated">このチュートリアルでは、 &lt;a href=&quot;http://bottle.paws.org&quot;&gt;Bottle&lt;/a&gt; WSGI Frameworkについて簡単に紹介します。 主な目標は、このチュートリアルを読んだ後、Bottleを使用してプロジェクトを作成できるようにすることです。 このドキュメントでは、すべての機能が表示されるわけではありませんが、少なくともルーティングのような主要で重要な機能は、ボトルテンプレート機能を利用して出力をフォーマットし、GET / POSTパラメータを処理します。</target>
        </trans-unit>
        <trans-unit id="a7b07ca8c8e9b94b7e950a34d914459277e1df7a" translate="yes" xml:space="preserve">
          <source>This will automatically detect changes to the script and reload the new version once it is called again, without the need to stop and start the server.</source>
          <target state="translated">これにより、スクリプトの変更を自動的に検出し、再度呼び出されたら新しいバージョンをリロードすることで、サーバーを停止して起動する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="db0843478a02b0e3f282ed437b82b2e18d2854ba" translate="yes" xml:space="preserve">
          <source>This will get you the latest development snapshot that includes all the new features. If you prefer a more stable environment, you should stick with the stable releases. These are available on &lt;a href=&quot;http://pypi.python.org/pypi/bottle&quot;&gt;PyPI&lt;/a&gt; and can be installed via &lt;strong&gt;pip&lt;/strong&gt; (recommended), &lt;strong&gt;easy_install&lt;/strong&gt; or your package manager:</source>
          <target state="translated">これにより、すべての新機能を含む最新の開発スナップショットが得られます。 より安定した環境を希望する場合は、安定したリリースを使用する必要があります。 これらは&lt;a href=&quot;http://pypi.python.org/pypi/bottle&quot;&gt;PyPI&lt;/a&gt;で利用でき、 &lt;strong&gt;pip&lt;/strong&gt; （推奨）、 &lt;strong&gt;easy_install、&lt;/strong&gt;またはパッケージマネージャーからインストールできます。</target>
        </trans-unit>
        <trans-unit id="2e3075673514d3d5df60c9e8fb9a0b64ab162893" translate="yes" xml:space="preserve">
          <source>This will load the template file &lt;code&gt;hello_template.tpl&lt;/code&gt; and render it with the &lt;code&gt;name&lt;/code&gt; variable set. Bottle will look for templates in the &lt;code&gt;./views/&lt;/code&gt; folder or any folder specified in the &lt;code&gt;bottle.TEMPLATE_PATH&lt;/code&gt; list.</source>
          <target state="translated">これにより、テンプレートファイル &lt;code&gt;hello_template.tpl&lt;/code&gt; が読み込まれ、 &lt;code&gt;name&lt;/code&gt; 変数セットでレンダリングされます。 ボトルは、。 &lt;code&gt;./views/&lt;/code&gt; フォルダー、または &lt;code&gt;bottle.TEMPLATE_PATH&lt;/code&gt; リストで指定されたフォルダーでテンプレートを探します。</target>
        </trans-unit>
        <trans-unit id="e7c08cbe101b55ec65833d12f7c389f438055705" translate="yes" xml:space="preserve">
          <source>This works exactly the same way with &lt;code&gt;FlupServer&lt;/code&gt;, &lt;code&gt;CherryPyServer&lt;/code&gt; and &lt;code&gt;FapwsServer&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;FlupServer&lt;/code&gt; 、 &lt;code&gt;CherryPyServer&lt;/code&gt; 、 &lt;code&gt;FapwsServer&lt;/code&gt; とまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="c106a16a3dcf99d5b2d8e09eba5949f4491fb0f8" translate="yes" xml:space="preserve">
          <source>This, and many other deployment options are described in a separate article: &lt;a href=&quot;deployment&quot;&gt;Deployment&lt;/a&gt;</source>
          <target state="translated">これと他の多くの展開オプションは、別の記事で説明されています： &lt;a href=&quot;deployment&quot;&gt;展開&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49ea3f930b5a01227a9157742ce3867f286c34f2" translate="yes" xml:space="preserve">
          <source>Thread-local property</source>
          <target state="translated">スレッドローカルプロパティ</target>
        </trans-unit>
        <trans-unit id="e5112d7184f06128cb7587d4e585b7b282fdda5c" translate="yes" xml:space="preserve">
          <source>To access GET (or POST) data, we need to import &lt;code&gt;request&lt;/code&gt; from Bottle. To assign the actual data to a variable, we use the statement &lt;code&gt;request.GET.get('task','').strip()&lt;/code&gt; statement, where &lt;code&gt;task&lt;/code&gt; is the name of the GET data we want to access. That&amp;rsquo;s all. If your GET data has more than one variable, multiple &lt;code&gt;request.GET.get()&lt;/code&gt; statements can be used and assigned to other variables.</source>
          <target state="translated">GET（またはPOST）データにアクセスするには、ボトルから &lt;code&gt;request&lt;/code&gt; をインポートする必要があります。 実際のデータを変数に割り当てるには、ステートメント &lt;code&gt;request.GET.get('task','').strip()&lt;/code&gt; ステートメントを使用します。ここで、 &lt;code&gt;task&lt;/code&gt; は、アクセスするGETデータの名前です。 それで全部です。 GETデータに複数の変数がある場合、複数の &lt;code&gt;request.GET.get()&lt;/code&gt; ステートメントを使用して、他の変数に割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="15d16c0760a336b781db159f7ed97c5a20943d1e" translate="yes" xml:space="preserve">
          <source>To achieve this, you need control over the callback cache: &lt;a href=&quot;api#bottle.Route.reset&quot;&gt;&lt;code&gt;Route.reset()&lt;/code&gt;&lt;/a&gt; clears the cache for a single route and &lt;a href=&quot;api#bottle.Bottle.reset&quot;&gt;&lt;code&gt;Bottle.reset()&lt;/code&gt;&lt;/a&gt; clears all caches for all routes of an application at once. On the next request, all plugins are re-applied to the route as if it were requested for the first time.</source>
          <target state="translated">これを実現するには、コールバックキャッシュを制御する必要があります&lt;a href=&quot;api#bottle.Route.reset&quot;&gt; &lt;code&gt;Route.reset()&lt;/code&gt; &lt;/a&gt;は単一のルートのキャッシュをクリアし、 &lt;a href=&quot;api#bottle.Bottle.reset&quot;&gt; &lt;code&gt;Bottle.reset()&lt;/code&gt; &lt;/a&gt;はアプリケーションのすべてのルートのキャッシュを一度にクリアします。 次のリクエストでは、すべてのプラグインが初めてリクエストされたかのようにルートに再適用されます。</target>
        </trans-unit>
        <trans-unit id="f3ffd7e3e8f974df12423679e4074bea307d3c4c" translate="yes" xml:space="preserve">
          <source>To change the IP address where Bottle is listening:</source>
          <target state="translated">BottleがリッスンしているIPアドレスを変更します。</target>
        </trans-unit>
        <trans-unit id="4628b54c19ea8a8c437c9f12d94addbd91e4ac46" translate="yes" xml:space="preserve">
          <source>To change the port, just add &lt;code&gt;port=portnumber&lt;/code&gt; to the run command. So, for example:</source>
          <target state="translated">ポートを変更するには、実行コマンドに &lt;code&gt;port=portnumber&lt;/code&gt; を追加するだけです。 したがって、たとえば：</target>
        </trans-unit>
        <trans-unit id="80a53761e11b5bc605b2738abeb45f5463ef5d24" translate="yes" xml:space="preserve">
          <source>To do so, we first add a new route to our script and tell the route that it should get GET data:</source>
          <target state="translated">そのためには、まずスクリプトに新しいルートを追加し、GETデータを取得するようにルートに指示します。</target>
        </trans-unit>
        <trans-unit id="3cf64a2cbd6ff70b2a6500ad8d2675f9f703aef9" translate="yes" xml:space="preserve">
          <source>To get your application available to the outside world, specify the IP of the interface the server should listen to (e.g. &lt;code&gt;run(host='192.168.0.1')&lt;/code&gt;) or let the server listen to all interfaces at once (e.g. &lt;code&gt;run(host='0.0.0.0')&lt;/code&gt;). The listening port can be changed in a similar way, but you need root or admin rights to choose a port below 1024. Port 80 is the standard for HTTP servers:</source>
          <target state="translated">アプリケーションを外部から利用できるようにするには、サーバーがリッスンする必要があるインターフェースのIP（たとえば &lt;code&gt;run(host='192.168.0.1')&lt;/code&gt; ）を指定するか、サーバーにすべてのインターフェースを一度にリッスンさせる（たとえば &lt;code&gt;run(host='0.0.0.0')&lt;/code&gt; ） リスニングポートは同様の方法で変更できますが、1024未満のポートを選択するにはrootまたは管理者権限が必要です。ポート80はHTTPサーバーの標準です。</target>
        </trans-unit>
        <trans-unit id="0a52a8f9e73c43af5fe5b116b06602d0985b4387" translate="yes" xml:space="preserve">
          <source>To include the template in our example, just add the following lines:</source>
          <target state="translated">この例にテンプレートを含めるには、次の行を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="166b35740a5470e29948e7fde44c5920f8c32a30" translate="yes" xml:space="preserve">
          <source>To install a plugin, just call &lt;code&gt;install()&lt;/code&gt; with the plugin as first argument:</source>
          <target state="translated">プラグインをインストールするには、プラグインを最初の引数として &lt;code&gt;install()&lt;/code&gt; を呼び出すだけです：</target>
        </trans-unit>
        <trans-unit id="3cdd59dc17ceb1c3a2d44d579608a027a98c611b" translate="yes" xml:space="preserve">
          <source>To make life easier, plugins and applications should follow some simple rules when it comes to config parameter names:</source>
          <target state="translated">生活をより簡単にするために、プラグインやアプリケーションは、パラメータ名を設定する際には、いくつかの簡単なルールに従うべきです。</target>
        </trans-unit>
        <trans-unit id="ad3adba67a7baf3672355a6fc3e72c4639f3df84" translate="yes" xml:space="preserve">
          <source>To redirect a client to a different URL, you can send a &lt;code&gt;303 See Other&lt;/code&gt; response with the &lt;code&gt;Location&lt;/code&gt; header set to the new URL. &lt;code&gt;redirect()&lt;/code&gt; does that for you:</source>
          <target state="translated">クライアントを別のURLにリダイレクトするには、 &lt;code&gt;Location&lt;/code&gt; ヘッダーを新しいURLに設定して &lt;code&gt;303 See Other&lt;/code&gt; レスポンスを送信します。 &lt;code&gt;redirect()&lt;/code&gt; はあなたのためにそれをします：</target>
        </trans-unit>
        <trans-unit id="d196d9cd7d7046cbe7471d5d051ccbb575ea75ed" translate="yes" xml:space="preserve">
          <source>To sum it up: HEAD requests fall back to GET routes and all requests fall back to ANY routes, but only if there is no matching route for the original request method. It&amp;rsquo;s as simple as that.</source>
          <target state="translated">要約すると、HEADリクエストはGETルートにフォールバックし、すべてのリクエストはANYルートにフォールバックします。ただし、元のリクエストメソッドに一致するルートがない場合のみです。 それはそれと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="d2847dfa59b39e2e62d5e3bd448bce30916210d5" translate="yes" xml:space="preserve">
          <source>To support file uploads, we have to change the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag a bit. First, we tell the browser to encode the form data in a different way by adding an &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. Then, we add &lt;code&gt;&amp;lt;input type=&quot;file&quot; /&amp;gt;&lt;/code&gt; tags to allow the user to select a file. Here is an example:</source>
          <target state="translated">ファイルのアップロードをサポートするには、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグを少し変更する必要があります。 まず、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグに &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; 属性を追加して、フォームデータを別の方法でエンコードするようブラウザに指示します。 次に、 &lt;code&gt;&amp;lt;input type=&quot;file&quot; /&amp;gt;&lt;/code&gt; タグを追加して、ユーザーがファイルを選択できるようにします。 次に例を示します。</target>
        </trans-unit>
        <trans-unit id="2e5f831ee609f8b44a20b60aec308feffe449031" translate="yes" xml:space="preserve">
          <source>To understand the content here, it is not necessary to have a basic knowledge of WSGI, as Bottle tries to keep WSGI away from the user anyway. You should have a fair understanding of the &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt; programming language. Furthermore, the example used in the tutorial retrieves and stores data in a SQL databse, so a basic idea about SQL helps, but is not a must to understand the concepts of Bottle. Right here, &lt;a href=&quot;http://www.sqlite.org&quot;&gt;SQLite&lt;/a&gt; is used. The output of Bottle sent to the browser is formatted in some examples by the help of HTML. Thus, a basic idea about the common HTML tags does help as well.</source>
          <target state="translated">ここではコンテンツを理解するために、ボトルはWSGIをユーザーから遠ざけようとしているため、WSGIの基本的な知識は必要ありません。 &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt;プログラミング言語を十分に理解している必要があります。 さらに、チュートリアルで使用する例では、SQLデータベースのデータを取得して格納するため、SQLに関する基本的な考え方が役立ちますが、Bottleの概念を理解するために必須ではありません。 ここでは、 &lt;a href=&quot;http://www.sqlite.org&quot;&gt;SQLite&lt;/a&gt;が使用されています。 ブラウザに送信されたボトルの出力は、いくつかの例ではHTMLの助けを借りてフォーマットされています。 したがって、一般的なHTMLタグに関する基本的な考え方も役立ちます。</target>
        </trans-unit>
        <trans-unit id="321fbc66aa248778c3348b79a0b27d4060084437" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;MakoTemplate&lt;/code&gt; as your default template engine, just import its specialised decorator and render function:</source>
          <target state="translated">&lt;code&gt;MakoTemplate&lt;/code&gt; をデフォルトのテンプレートエンジンとして使用するには、専用のデコレータとレンダリング関数をインポートするだけです。</target>
        </trans-unit>
        <trans-unit id="f84bbc8ca391283a229028f548f1ced8381adf54" translate="yes" xml:space="preserve">
          <source>Trigger a hook and return a list of results.</source>
          <target state="translated">フックをトリガーにして、結果のリストを返します。</target>
        </trans-unit>
        <trans-unit id="dc8fb6ea62ca72cbe8530c98c6d2589cc76da338" translate="yes" xml:space="preserve">
          <source>True if Chunked transfer encoding was.</source>
          <target state="translated">Chunked転送エンコーディングがあった場合は真。</target>
        </trans-unit>
        <trans-unit id="3b6933925666943cc638799d2ddeef6e74a38d20" translate="yes" xml:space="preserve">
          <source>True if the request was triggered by a XMLHttpRequest. This only works with JavaScript libraries that support the &lt;code&gt;X-Requested-With&lt;/code&gt; header (most of the popular libraries do).</source>
          <target state="translated">リクエストがXMLHttpRequestによってトリガーされた場合はTrue。 これは、 &lt;code&gt;X-Requested-With&lt;/code&gt; ヘッダーをサポートするJavaScriptライブラリでのみ機能します（一般的なライブラリのほとんどがサポートしています）。</target>
        </trans-unit>
        <trans-unit id="aabb2986271672a123f55748f2c7d210453c2e68" translate="yes" xml:space="preserve">
          <source>Try to avoid the old syntax in future projects if you can. It is not currently deprecated, but will be eventually.</source>
          <target state="translated">可能であれば、今後のプロジェクトでは古い構文を避けるようにしてください。現在は非推奨ではありませんが、いずれは廃止されるでしょう。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="0d45ad648a14fd7ae4181a413dd8671f1ee1a34d" translate="yes" xml:space="preserve">
          <source>Tutorial: Todo-List Application</source>
          <target state="translated">チュートリアル Todo-Listアプリケーション</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="86828104aad480fcc9e1071000ff315afe774e6f" translate="yes" xml:space="preserve">
          <source>Understanding routes</source>
          <target state="translated">ルートの理解</target>
        </trans-unit>
        <trans-unit id="90ac7bb3b01b32e952ee295aa92163d24d25615d" translate="yes" xml:space="preserve">
          <source>Unicode strings</source>
          <target state="translated">ユニコード文字列</target>
        </trans-unit>
        <trans-unit id="93ed140ff524e6af0088b4d769964ad53f470a13" translate="yes" xml:space="preserve">
          <source>Unicode strings (or iterables yielding unicode strings) are automatically encoded with the codec specified in the &lt;code&gt;Content-Type&lt;/code&gt; header (utf8 by default) and then treated as normal byte strings (see below).</source>
          <target state="translated">Unicode文字列（またはUnicode文字列を生成する反復可能オブジェクト）は、 &lt;code&gt;Content-Type&lt;/code&gt; ヘッダー（デフォルトではutf8）で指定されたコーデックで自動的にエンコードされ、通常のバイト文字列として扱われます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="26c1f522c9c91190cd5ea339f09a7f3c17459e77" translate="yes" xml:space="preserve">
          <source>Uninstall Plugins</source>
          <target state="translated">プラグインのアンインストール</target>
        </trans-unit>
        <trans-unit id="94c9ff3ef6f8c57308d7ef2ca875c9512f3ab8a2" translate="yes" xml:space="preserve">
          <source>Uninstall plugins. Pass an instance to remove a specific plugin, a type object to remove all plugins that match that type, a string to remove all plugins with a matching &lt;code&gt;name&lt;/code&gt; attribute or &lt;code&gt;True&lt;/code&gt; to remove all plugins. Return the list of removed plugins.</source>
          <target state="translated">プラグインをアンインストールします。 特定のプラグインを削除するインスタンス、そのタイプに一致するすべてのプラグインを削除するタイプオブジェクト、一致する &lt;code&gt;name&lt;/code&gt; 属性を持つすべてのプラグインを削除する文字列、またはすべてのプラグインを削除する &lt;code&gt;True&lt;/code&gt; を渡します。 削除されたプラグインのリストを返します。</target>
        </trans-unit>
        <trans-unit id="011dfd8ff83fd3b603bcb11b67f063458b92b30f" translate="yes" xml:space="preserve">
          <source>Unit-Testing Bottle Applications</source>
          <target state="translated">ユニットテストボトルの用途</target>
        </trans-unit>
        <trans-unit id="453e83889f3ae25efaf3919ad4d3710fe70a75d3" translate="yes" xml:space="preserve">
          <source>Unit-testing is usually performed against methods defined in your web application without running a WSGI environment.</source>
          <target state="translated">ユニットテストは通常、WSGI環境を実行することなく、Webアプリケーションで定義されたメソッドに対して実行されます。</target>
        </trans-unit>
        <trans-unit id="e37405daddda7cc61950cbd550940c6994562619" translate="yes" xml:space="preserve">
          <source>Usage of the template or server adapter classes of course requires the corresponding template or server modules.</source>
          <target state="translated">テンプレートやサーバアダプタクラスを使用するには、もちろん対応するテンプレートやサーバモジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="94fd6d2cf2dbd7512b1df973bdd56e677457cfb2" translate="yes" xml:space="preserve">
          <source>Use a different server that is either multi-threaded or asynchronous.</source>
          <target state="translated">マルチスレッドまたは非同期の別のサーバーを使用してください。</target>
        </trans-unit>
        <trans-unit id="cdbcc85b59e2fa3bd5873c0d45ca407de2a4f1a5" translate="yes" xml:space="preserve">
          <source>User&amp;rsquo;s Guide</source>
          <target state="translated">ユーザーガイド</target>
        </trans-unit>
        <trans-unit id="a32be0a7c841bd73d052c18775a549b30fe2a4f9" translate="yes" xml:space="preserve">
          <source>Using Bottle for a Web-Based ToDo List</source>
          <target state="translated">WebベースのToDoリストにボトルを使う</target>
        </trans-unit>
        <trans-unit id="9ba476521d0727083abe9910fddbc1927004db86" translate="yes" xml:space="preserve">
          <source>Using Bottle with Heroku</source>
          <target state="translated">ヘロクでボトルを使う</target>
        </trans-unit>
        <trans-unit id="1daf0ca7563593dec20cd84e90d2714acca466c5" translate="yes" xml:space="preserve">
          <source>Using GET and POST Values</source>
          <target state="translated">GET値とPOST値の使用</target>
        </trans-unit>
        <trans-unit id="578394d3577c461f01185797247e404e77f51916" translate="yes" xml:space="preserve">
          <source>Using dynamic routes is fine, but for many cases it makes sense to validate the dynamic part of the route. For example, we expect an integer number in our route for editing above. But if a float, characters or so are received, the Python interpreter throws an exception, which is not what we want.</source>
          <target state="translated">動的なルートを使用することは問題ありませんが、多くの場合、ルートの動的な部分を検証することが理にかなっています。例えば、上の編集用のルートでは整数値を期待しています。しかし、floatや文字数などを受け取った場合、Pythonインタプリタは例外をスローします。</target>
        </trans-unit>
        <trans-unit id="ae3d35e93e0f93abec193fb6a6b113d9c89c3e1e" translate="yes" xml:space="preserve">
          <source>Using the hooks plugin</source>
          <target state="translated">hooksプラグインを使う</target>
        </trans-unit>
        <trans-unit id="359936c70836c3ff8ae5f7b70950e95d9ac759dd" translate="yes" xml:space="preserve">
          <source>Validating Dynamic Routes</source>
          <target state="translated">ダイナミックルートの検証</target>
        </trans-unit>
        <trans-unit id="0b4857e0233b705134724da08c0f952ad4f82560" translate="yes" xml:space="preserve">
          <source>Verify and decode an encoded string. Return an object or None.</source>
          <target state="translated">エンコードされた文字列を検証し、デコードします。オブジェクトまたは None を返します。</target>
        </trans-unit>
        <trans-unit id="8869941c0890a55d337c977ad12476b81575155b" translate="yes" xml:space="preserve">
          <source>WSGI Environment</source>
          <target state="translated">WSGI環境</target>
        </trans-unit>
        <trans-unit id="254545edde472f6994e2a30171f4c019b39c7a12" translate="yes" xml:space="preserve">
          <source>WSGI and HTTP Utilities</source>
          <target state="translated">WSGIとHTTPユーティリティ</target>
        </trans-unit>
        <trans-unit id="d685c782bbf23ad3ec40541778d5dceb8bd5ef58" translate="yes" xml:space="preserve">
          <source>WSGI conform list of (header, value) tuples.</source>
          <target state="translated">(ヘッダ、値)タプルのWSGI適合リスト。</target>
        </trans-unit>
        <trans-unit id="eaa052f4751a2ff2d5dfdce03a0f7d0d8ab2882e" translate="yes" xml:space="preserve">
          <source>WSGIHeaderDict</source>
          <target state="translated">WSGIHeaderDict</target>
        </trans-unit>
        <trans-unit id="efdf966da6a56eb3353aa9da3bb2bddbfa2c94f4" translate="yes" xml:space="preserve">
          <source>WSGIHeaderDict::raw()</source>
          <target state="translated">WSGIHeaderDict::raw()</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="92d3f163043b51bd940c19975e1032a04d0bcf88" translate="yes" xml:space="preserve">
          <source>Warning: Signed cookies are not encrypted (the client can still see the content) and not copy-protected (the client can restore an old cookie). The main intention is to make pickling and unpickling save, not to store secret information at client side.</source>
          <target state="translated">警告。署名されたクッキーは暗号化されておらず(クライアントはまだ内容を見ることができます)、コピープロテクトされていません(クライアントは古いクッキーを復元することができます)。主な意図はピックリングとアンピックリングを保存させることであり、クライアント側に秘密の情報を保存することではありません。</target>
        </trans-unit>
        <trans-unit id="7144c4e3bfcad8ce1d0b580a8543e0dd51687338" translate="yes" xml:space="preserve">
          <source>We assume that your Apache server is up and running and mod_wsgi is working fine as well. On a lot of Linux distributions, mod_wsgi can be easily installed via whatever package management system is in use.</source>
          <target state="translated">あなたの Apache サーバが稼働していて、mod_wsgi も正常に動作していることを前提としています。多くの Linux ディストリビューションでは、mod_wsgi はどのようなパッケージ管理システムを使っても簡単にインストールできます。</target>
        </trans-unit>
        <trans-unit id="99411abc1fb631f0203a2408d72a43958e8dba28" translate="yes" xml:space="preserve">
          <source>We have a growing &lt;a href=&quot;plugins/index&quot;&gt;List of available Plugins&lt;/a&gt; and most plugins are designed to be portable and re-usable across applications. The chances are high that your problem has already been solved and a ready-to-use plugin exists. If not, the &lt;a href=&quot;plugindev&quot;&gt;Plugin Development Guide&lt;/a&gt; may help you.</source>
          <target state="translated">&lt;a href=&quot;plugins/index&quot;&gt;利用可能なプラグインのリストが&lt;/a&gt;増えており、ほとんどのプラグインは移植可能で、アプリケーション間で再利用できるように設計されています。 問題がすでに解決されており、すぐに使用できるプラグインが存在する可能性が高いです。 そうでない場合は、 &lt;a href=&quot;plugindev&quot;&gt;プラグイン開発ガイド&lt;/a&gt;が役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="e840e7e0d94f710da6221b088347efe049efd215" translate="yes" xml:space="preserve">
          <source>We will end up with an application with the following pages and functionality:</source>
          <target state="translated">以下のようなページや機能を持ったアプリで終了となります。</target>
        </trans-unit>
        <trans-unit id="4af291ec4e252da4f34ca2e16435e4676a523e3f" translate="yes" xml:space="preserve">
          <source>Web2py Dal integration for Bottle.</source>
          <target state="translated">ボトルのためのWeb2pyダルの統合。</target>
        </trans-unit>
        <trans-unit id="9e7e69de18ab90771b235e6616afbd2460e20c65" translate="yes" xml:space="preserve">
          <source>What you will see in the browser is what is returned, thus the value given by the &lt;code&gt;return&lt;/code&gt; statement. In this example, we need to convert &lt;code&gt;result&lt;/code&gt; in to a string by &lt;code&gt;str()&lt;/code&gt;, as Bottle expects a string or a list of strings from the return statement. But here, the result of the database query is a list of tuples, which is the standard defined by the &lt;a href=&quot;http://www.python.org/dev/peps/pep-0249/&quot;&gt;Python DB API&lt;/a&gt;.</source>
          <target state="translated">ブラウザーに表示されるのは、返されたもの、つまり &lt;code&gt;return&lt;/code&gt; ステートメントで指定された値です。 この例では、Bottleはreturnステートメントからの文字列または文字列のリストを想定しているため、 &lt;code&gt;str()&lt;/code&gt; によって &lt;code&gt;result&lt;/code&gt; を文字列に変換する必要があります 。 しかし、ここでは、データベースクエリの結果はタプルのリストであり、これは&lt;a href=&quot;http://www.python.org/dev/peps/pep-0249/&quot;&gt;Python DB API&lt;/a&gt;によって定義された標準です。</target>
        </trans-unit>
        <trans-unit id="e8c7f931c07ad999c7c48c278bb2ee385c967384" translate="yes" xml:space="preserve">
          <source>When you run your application via mod_wsgi, it is imperative to remove the &lt;code&gt;run()&lt;/code&gt; statement from your code, otherwise it won&amp;rsquo;t work here.</source>
          <target state="translated">mod_wsgiを介してアプリケーションを実行する場合、コードから &lt;code&gt;run()&lt;/code&gt; ステートメントを削除する必要があります。そうしないと、ここでは機能しません。</target>
        </trans-unit>
        <trans-unit id="a0ec53ff663836ceb52ca8bd3e579774c3397230" translate="yes" xml:space="preserve">
          <source>Whenever you mount an application, Bottle creates a proxy-route on the main-application that forwards all requests to the sub-application. Plugins are disabled for this kind of proxy-route by default. As a result, our (fictional) &lt;code&gt;WTForms&lt;/code&gt; plugin affects the &lt;code&gt;/contact&lt;/code&gt; route, but does not affect the routes of the &lt;code&gt;/blog&lt;/code&gt; sub-application.</source>
          <target state="translated">アプリケーションをマウントすると、Bottleはすべてのリクエストをサブアプリケーションに転送するプロキシルートをメインアプリケーションに作成します。 プラグインは、この種類のプロキシルートではデフォルトで無効になっています。 その結果、（架空の） &lt;code&gt;WTForms&lt;/code&gt; プラグインは &lt;code&gt;/contact&lt;/code&gt; ルートに影響しますが、 &lt;code&gt;/blog&lt;/code&gt; サブアプリケーションのルートには影響しません。</target>
        </trans-unit>
        <trans-unit id="ef9aeacc0e2ffd83d3cf51e3d47fd25cf3e36e25" translate="yes" xml:space="preserve">
          <source>While some &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; attributes are mutable, changes may have unwanted effects on other plugins. It is most likely a bad idea to monkey-patch a broken route instead of providing a helpful error message and let the user fix the problem.</source>
          <target state="translated">一部の&lt;a href=&quot;api#bottle.Route&quot;&gt; &lt;code&gt;Route&lt;/code&gt; &lt;/a&gt;属性は変更可能ですが、変更は他のプラグインに望ましくない影響を与える可能性があります。 役に立つエラーメッセージを表示する代わりに、壊れたルートをモンキーパッチしてユーザーに問題を修正させるのは、おそらく悪い考えです。</target>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="translated">空白制御</target>
        </trans-unit>
        <trans-unit id="96c654391de847a99d71b1f1d8ca75a4700f1815" translate="yes" xml:space="preserve">
          <source>Wildcard Filters</source>
          <target state="translated">ワイルドカードフィルタ</target>
        </trans-unit>
        <trans-unit id="5be93facb119814bf7d4753472059b971cb20db6" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#bottle.ConfigDict.load_config&quot;&gt;&lt;code&gt;ConfigDict.load_config()&lt;/code&gt;&lt;/a&gt; you can load these &lt;code&gt;*.ini&lt;/code&gt; style configuration files from disk and import their values into your existing configuration:</source>
          <target state="translated">&lt;a href=&quot;#bottle.ConfigDict.load_config&quot;&gt; &lt;code&gt;ConfigDict.load_config()&lt;/code&gt; &lt;/a&gt;を使用すると、これらの &lt;code&gt;*.ini&lt;/code&gt; スタイルの構成ファイルをディスクからロードし、それらの値を既存の構成にインポートできます。</target>
        </trans-unit>
        <trans-unit id="1b68a421231f02f64ea3995f211362e5f098b205" translate="yes" xml:space="preserve">
          <source>With Gevent+WSGI, things are different: First, terminating early has no benefit because we have an unlimited pool of (pseudo)threads to accept new connections. Second, we cannot terminate early because that would close the socket (as required by WSGI). Third, we must return an iterable to conform to WSGI.</source>
          <target state="translated">Gevent+WSGIでは、物事は異なります。第一に、新しい接続を受け入れるための(疑似)スレッドのプールは無限にあるので、早期に終了しても何のメリットもありません。第二に、早期終了はソケットを閉じることになるので、早期終了はできません (WSGIで要求される)。第三に、WSGIに準拠するためには、イテレート可能な値を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="3567026868379caf3035d64405a47bc5b649b6d6" translate="yes" xml:space="preserve">
          <source>Wrap a WSGI environ dictionary.</source>
          <target state="translated">WSGI environ辞書をラップします。</target>
        </trans-unit>
        <trans-unit id="4d70b7d412b8cb8bf7af25ca8593ff39f1726cc8" translate="yes" xml:space="preserve">
          <source>Yield (header, value) tuples, skipping headers that are not allowed with the current response status code.</source>
          <target state="translated">現在の応答ステータスコードでは許可されていないヘッダをスキップして、Yield (ヘッダ、値)タプルを生成します。</target>
        </trans-unit>
        <trans-unit id="3367e80231a6eb7d86ebfd1dc465e52ba240cfd5" translate="yes" xml:space="preserve">
          <source>Yield all Plugins affecting this route.</source>
          <target state="translated">このルートに影響を与えるすべてのプラグインを降伏させます。</target>
        </trans-unit>
        <trans-unit id="2b45720ee4c6a4a131c422d4bea90646ba0023e7" translate="yes" xml:space="preserve">
          <source>You already learned the use of the &lt;code&gt;{{...}}&lt;/code&gt; syntax from the &amp;ldquo;Hello World!&amp;rdquo; example above, but there is more: any python expression is allowed within the curly brackets as long as it evaluates to a string or something that has a string representation:</source>
          <target state="translated">「 &lt;code&gt;{{...}}&lt;/code&gt; Hello World！ &quot;から{{...}}構文の使い方をすでに学びました。 上記の例ですが、それ以外にもあります。文字列または文字列表現を持つ何かに評価される限り、中括弧内で任意のpython式を使用できます。</target>
        </trans-unit>
        <trans-unit id="9801f42108830f674bf2a4281daf051be7ef1fe4" translate="yes" xml:space="preserve">
          <source>You are allowed to use &lt;code&gt;yield&lt;/code&gt; within your callbacks or return an iterable, as long as the iterable yields byte strings, unicode strings, &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; instances. Nested iterables are not supported, sorry. Please note that the HTTP status code and the headers are sent to the browser as soon as the iterable yields its first non-empty value. Changing these later has no effect.</source>
          <target state="translated">iterableがバイト文字列、Unicode文字列、 &lt;a href=&quot;api#bottle.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt; &lt;code&gt;HTTPResponse&lt;/code&gt; &lt;/a&gt;インスタンスを生成する限り、コールバック内で &lt;code&gt;yield&lt;/code&gt; を使用するか、または反復可能オブジェクトを返すことができます。 ネストされたイテラブルはサポートされていません。 iterableが最初の空でない値を生成するとすぐに、HTTPステータスコードとヘッダーがブラウザーに送信されることに注意してください。 これらを後で変更しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="bb81d8e3897c19115ef1526fbc3e9ef6046f6a7a" translate="yes" xml:space="preserve">
          <source>You can access the raw body data as a file-like object via &lt;a href=&quot;api#bottle.BaseRequest.body&quot;&gt;&lt;code&gt;BaseRequest.body&lt;/code&gt;&lt;/a&gt;. This is a &lt;code&gt;BytesIO&lt;/code&gt; buffer or a temporary file depending on the content length and &lt;a href=&quot;api#bottle.BaseRequest.MEMFILE_MAX&quot;&gt;&lt;code&gt;BaseRequest.MEMFILE_MAX&lt;/code&gt;&lt;/a&gt; setting. In both cases the body is completely buffered before you can access the attribute. If you expect huge amounts of data and want to get direct unbuffered access to the stream, have a look at &lt;code&gt;request['wsgi.input']&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;api#bottle.BaseRequest.body&quot;&gt; &lt;code&gt;BaseRequest.body&lt;/code&gt; &lt;/a&gt;を使用して、生のボディデータにファイルのようなオブジェクトとしてアクセスできます。 これは、コンテンツの長さと&lt;a href=&quot;api#bottle.BaseRequest.MEMFILE_MAX&quot;&gt; &lt;code&gt;BaseRequest.MEMFILE_MAX&lt;/code&gt; &lt;/a&gt;設定に応じて、 &lt;code&gt;BytesIO&lt;/code&gt; バッファーまたは一時ファイルです。 どちらの場合も、属性にアクセスする前に、本文は完全にバッファーされます。 大量のデータが予想され、バッファリングされていない直接ストリームへのアクセスを取得したい場合は、 &lt;code&gt;request['wsgi.input']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b1cac64bf876c603679d4fc2cc26748f650405c" translate="yes" xml:space="preserve">
          <source>You can add your own filters as well. See &lt;code&gt;Routing&lt;/code&gt; for details.</source>
          <target state="translated">独自のフィルターを追加することもできます。 詳細については、 &lt;code&gt;Routing&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad06c1635cdfe02d346a1c61ee2258918ebae6b7" translate="yes" xml:space="preserve">
          <source>You can add your own filters to the router. All you need is a function that returns three elements: A regular expression string, a callable to convert the URL fragment to a python value, and a callable that does the opposite. The filter function is called with the configuration string as the only parameter and may parse it as needed:</source>
          <target state="translated">ルーターに独自のフィルターを追加することができます。必要なのは3つの要素を返す関数だけです。正規表現文字列、URL フラグメントを python の値に変換する callable、そしてその逆を行う callable です。フィルタ関数は設定文字列を唯一のパラメータとして呼び出し、必要に応じて解析することができます。</target>
        </trans-unit>
        <trans-unit id="4347683b60abaedf673f246b544449227495891a" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;before_request&lt;/code&gt; to take an action before every function gets called.</source>
          <target state="translated">&lt;code&gt;before_request&lt;/code&gt; を使用して、すべての関数が呼び出される前にアクションを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="a7331b9ccce1d761e185da5888df1449e4a03cbf" translate="yes" xml:space="preserve">
          <source>You can change the exact behaviour in many ways using filters. This is described in the next section.</source>
          <target state="translated">フィルタを使用して、さまざまな方法で正確な動作を変更することができます。これについては次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="59a79f8e2d12804b237c84f6d3867dfa949eabd0" translate="yes" xml:space="preserve">
          <source>You can directly return file objects, but &lt;code&gt;static_file()&lt;/code&gt; is the recommended way to serve static files. It automatically guesses a mime-type, adds a &lt;code&gt;Last-Modified&lt;/code&gt; header, restricts paths to a &lt;code&gt;root&lt;/code&gt; directory for security reasons and generates appropriate error responses (403 on permission errors, 404 on missing files). It even supports the &lt;code&gt;If-Modified-Since&lt;/code&gt; header and eventually generates a &lt;code&gt;304 Not Modified&lt;/code&gt; response. You can pass a custom MIME type to disable guessing.</source>
          <target state="translated">ファイルオブジェクトを直接返すことができますが、 &lt;code&gt;static_file()&lt;/code&gt; は静的ファイルを提供するための推奨方法です。 自動的にMIMEタイプを推測し、 &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーを追加し、セキュリティ上の理由から &lt;code&gt;root&lt;/code&gt; ディレクトリへのパスを制限し、適切なエラー応答を生成します（許可エラーの場合は403、欠落ファイルの場合は404）。 &lt;code&gt;If-Modified-Since&lt;/code&gt; ヘッダーもサポートし、最終的に &lt;code&gt;304 Not Modified&lt;/code&gt; 応答を生成します。 カスタムMIMEタイプを渡して、推測を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c87abbf485356c97335ce7ded90804a56604dc1d" translate="yes" xml:space="preserve">
          <source>You can either manually install Bottle or use Python&amp;rsquo;s easy_install: &lt;code&gt;easy_install bottle&lt;/code&gt;</source>
          <target state="translated">手動でボトルをインストールするか、Pythonのeasy_install： &lt;code&gt;easy_install bottle&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="bd140198c3ad8e63c55de64dd8e05c5c55d74f72" translate="yes" xml:space="preserve">
          <source>You can raise the return value of &lt;code&gt;static_file()&lt;/code&gt; as an exception if you really need to.</source>
          <target state="translated">本当に必要な場合は、 &lt;code&gt;static_file()&lt;/code&gt; の戻り値を例外として発生させることができます。</target>
        </trans-unit>
        <trans-unit id="f31d442e9367f700b4f4797349e3fe5570785c6c" translate="yes" xml:space="preserve">
          <source>You can use a name, class or instance to &lt;code&gt;uninstall()&lt;/code&gt; a previously installed plugin:</source>
          <target state="translated">名前、クラス、またはインスタンスを使用して、以前にインストールしたプラグインを &lt;code&gt;uninstall()&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="062c73cd0144bf9d7e2706aa1715bfc387267986" translate="yes" xml:space="preserve">
          <source>You can write your own adapter for your favourite template engine or use one of the predefined adapters. Currently there are four fully supported template engines:</source>
          <target state="translated">お気に入りのテンプレートエンジン用に独自のアダプタを作成することもできますし、定義済みのアダプタを使用することもできます。現在、完全にサポートされているテンプレートエンジンは4つあります。</target>
        </trans-unit>
        <trans-unit id="f7da89368d068ad3a533aa1b1282cfddd2c0242e" translate="yes" xml:space="preserve">
          <source>You may provide a different HTTP status code as a second parameter.</source>
          <target state="translated">2 番目のパラメータとして、異なる HTTP ステータスコードを指定することができます。</target>
        </trans-unit>
        <trans-unit id="45bee7cbf3e2fad4e4323fd6e4dce7eefee440f5" translate="yes" xml:space="preserve">
          <source>You may want to explicitly disable a plugin for a number of routes. The &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator has a &lt;code&gt;skip&lt;/code&gt; parameter for this purpose:</source>
          <target state="translated">いくつかのルートのプラグインを明示的に無効にすることができます。 &lt;a href=&quot;api#bottle.route&quot;&gt; &lt;code&gt;route()&lt;/code&gt; &lt;/a&gt;デコレータには、この目的のための &lt;code&gt;skip&lt;/code&gt; パラメータがあります。</target>
        </trans-unit>
        <trans-unit id="113905791e0533eb2c728fff4f1cf5e9721330af" translate="yes" xml:space="preserve">
          <source>Your own application should use a separate namespace (e.g. &lt;code&gt;myapp.*&lt;/code&gt;).</source>
          <target state="translated">独自のアプリケーションでは、別の名前空間を使用する必要があります（例： &lt;code&gt;myapp.*&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f203d790d7d6f05e71c17b15d47b244124bc4c6b" translate="yes" xml:space="preserve">
          <source>adding new items to the list: &lt;code&gt;http://localhost:8080/new&lt;/code&gt;</source>
          <target state="translated">リストに新しいアイテムを追加： &lt;code&gt;http://localhost:8080/new&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="75daa03402efdd3a94aa815bc9a2a0e00c19e5d5" translate="yes" xml:space="preserve">
          <source>after_request</source>
          <target state="translated">after_request</target>
        </trans-unit>
        <trans-unit id="811dcdf57af401faec9e044488b7bd46dc4d6b3c" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;#bottle.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#bottle.BaseRequest&quot;&gt; &lt;code&gt;BaseRequest&lt;/code&gt; の&lt;/a&gt;エイリアス</target>
        </trans-unit>
        <trans-unit id="ef649a1e88ec48ce3dcbbf5c7f0ffc24605d9a0f" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;#bottle.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#bottle.BaseResponse&quot;&gt; &lt;code&gt;BaseResponse&lt;/code&gt; の&lt;/a&gt;エイリアス</target>
        </trans-unit>
        <trans-unit id="0491df0f215614fe730c68581d199641b1c16eab" translate="yes" xml:space="preserve">
          <source>and save it in the same path, &lt;code&gt;/var/www/todo&lt;/code&gt;. Actually the name of the file can be anything, as long as the extension is &lt;code&gt;.wsgi&lt;/code&gt;. The name is only used to reference the file from your virtual host.</source>
          <target state="translated">それを同じパス &lt;code&gt;/var/www/todo&lt;/code&gt; に保存します。 実際には、拡張子が &lt;code&gt;.wsgi&lt;/code&gt; である限り、ファイルの名前は何でもかまいません 。 名前は、仮想ホストからファイルを参照するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="7d1043473d55bfa90e8530d35801d4e381bc69f0" translate="yes" xml:space="preserve">
          <source>app</source>
          <target state="translated">app</target>
        </trans-unit>
        <trans-unit id="c83f1f5829ef91e20b92b78798a2c99b3393b74b" translate="yes" xml:space="preserve">
          <source>app()</source>
          <target state="translated">app()</target>
        </trans-unit>
        <trans-unit id="fe82155bae28116971fc85490bc175257aac7ad6" translate="yes" xml:space="preserve">
          <source>app_reset</source>
          <target state="translated">app_reset</target>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="translated">auto</target>
        </trans-unit>
        <trans-unit id="7aadf8fdfc1ef2331a37f98413e6de9feb8093e8" translate="yes" xml:space="preserve">
          <source>before_request</source>
          <target state="translated">before_request</target>
        </trans-unit>
        <trans-unit id="a31805f6001ab3b535ea95133fbc4db46e97e8d1" translate="yes" xml:space="preserve">
          <source>bjoern</source>
          <target state="translated">bjoern</target>
        </trans-unit>
        <trans-unit id="b4d5b37bf7a986c138ede89e0806f366b5cb1830" translate="yes" xml:space="preserve">
          <source>callback</source>
          <target state="translated">callback</target>
        </trans-unit>
        <trans-unit id="a4acdb3ad6a28f9d09b7623b333da8fa63249da7" translate="yes" xml:space="preserve">
          <source>catching errors</source>
          <target state="translated">キャッチミス</target>
        </trans-unit>
        <trans-unit id="27b4d0f8ee1e61a07904f1afd558aa878973f2d1" translate="yes" xml:space="preserve">
          <source>cgi</source>
          <target state="translated">cgi</target>
        </trans-unit>
        <trans-unit id="57ed5d98cce71967d508cb785aa76d2c23894347" translate="yes" xml:space="preserve">
          <source>cherrypy</source>
          <target state="translated">cherrypy</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="24e8dc3172f56a9e62b2ac2c68ed550fd5db6e93" translate="yes" xml:space="preserve">
          <source>cookie_decode()</source>
          <target state="translated">cookie_decode()</target>
        </trans-unit>
        <trans-unit id="a094e29fa8eac27d40d318b2fc75490bf222c3cd" translate="yes" xml:space="preserve">
          <source>cookie_encode()</source>
          <target state="translated">cookie_encode()</target>
        </trans-unit>
        <trans-unit id="20b325df9fa3c34d9daec04a11f56ed393cb7202" translate="yes" xml:space="preserve">
          <source>cookie_is_encoded()</source>
          <target state="translated">cookie_is_encoded()</target>
        </trans-unit>
        <trans-unit id="7c7594cc6b050fbac7c5b12fa905411430e20a9a" translate="yes" xml:space="preserve">
          <source>debug()</source>
          <target state="translated">debug()</target>
        </trans-unit>
        <trans-unit id="b56ad4352ac64195dfdeec746afce440701027d2" translate="yes" xml:space="preserve">
          <source>defined()</source>
          <target state="translated">defined()</target>
        </trans-unit>
        <trans-unit id="90cf16d678e8c6f00804f1cd5f9f0e7757b13993" translate="yes" xml:space="preserve">
          <source>diesel</source>
          <target state="translated">diesel</target>
        </trans-unit>
        <trans-unit id="aca90d914519fdb9825352bdc0befb59f7c8510f" translate="yes" xml:space="preserve">
          <source>error()</source>
          <target state="translated">error()</target>
        </trans-unit>
        <trans-unit id="3ed8ea22373854abc813c27b8d1f6e7a98520a4e" translate="yes" xml:space="preserve">
          <source>eventlet</source>
          <target state="translated">eventlet</target>
        </trans-unit>
        <trans-unit id="964cf2c901a58b9600a46d04a32803f6773e34c8" translate="yes" xml:space="preserve">
          <source>fapws3</source>
          <target state="translated">fapws3</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="8664b63657e9106f87a107be2e3b45d4b4b6cc3e" translate="yes" xml:space="preserve">
          <source>flash plugin for bottle</source>
          <target state="translated">ボトル用フラッシュプラグイン</target>
        </trans-unit>
        <trans-unit id="3a54c11c850942da9140a2261750d98fbd429fdc" translate="yes" xml:space="preserve">
          <source>flup</source>
          <target state="translated">flup</target>
        </trans-unit>
        <trans-unit id="b2e27618bb92ea5fd1493f8dd503add0447f61a8" translate="yes" xml:space="preserve">
          <source>gae</source>
          <target state="translated">gae</target>
        </trans-unit>
        <trans-unit id="4a79533a2233d37071096ed5d29c1e9ac6cf66e6" translate="yes" xml:space="preserve">
          <source>get()</source>
          <target state="translated">get()</target>
        </trans-unit>
        <trans-unit id="de9dd9562653655041cf7a809fcfb2178e4ec60e" translate="yes" xml:space="preserve">
          <source>gevent</source>
          <target state="translated">gevent</target>
        </trans-unit>
        <trans-unit id="4dda27ec95a2c51a1bbfd235143a0adc4f51cf60" translate="yes" xml:space="preserve">
          <source>gunicorn</source>
          <target state="translated">gunicorn</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="86c2d513f250be3984b3ac5733cf9c5b817cc800" translate="yes" xml:space="preserve">
          <source>include()</source>
          <target state="translated">include()</target>
        </trans-unit>
        <trans-unit id="94ea5f589396df68c37d6c28efac0a817a2fa0ce" translate="yes" xml:space="preserve">
          <source>load()</source>
          <target state="translated">load()</target>
        </trans-unit>
        <trans-unit id="ab6e3f06196d3579bdd29c145de0cdea113a7fd5" translate="yes" xml:space="preserve">
          <source>load_app()</source>
          <target state="translated">load_app()</target>
        </trans-unit>
        <trans-unit id="290ce43e9a82bd37c70bbd6bbb41c5a61d85bb2c" translate="yes" xml:space="preserve">
          <source>meinheld</source>
          <target state="translated">meinheld</target>
        </trans-unit>
        <trans-unit id="bfbaf8b2d1cdf92bf83857fe1748c0f68de03d47" translate="yes" xml:space="preserve">
          <source>method</source>
          <target state="translated">method</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="fd1286353570c5703799ba76999323b7c7447b06" translate="yes" xml:space="preserve">
          <source>no</source>
          <target state="translated">no</target>
        </trans-unit>
        <trans-unit id="818d90713dc54fe481a6c0ab7fc2c2a9cb6547c1" translate="yes" xml:space="preserve">
          <source>or add a WSGI middleware that strips trailing slashes from all URLs:</source>
          <target state="translated">または、すべてのURLから末尾のスラッシュを削除するWSGIミドルウェアを追加します。</target>
        </trans-unit>
        <trans-unit id="0bd88fa7e3b742c4023df1cc0e90291ee25cbca8" translate="yes" xml:space="preserve">
          <source>page for editing items: &lt;code&gt;http://localhost:8080/edit/:no&lt;/code&gt;</source>
          <target state="translated">アイテムを編集するためのページ： &lt;code&gt;http://localhost:8080/edit/:no&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="deb866148d8d30519a465f3b1d65213af906ce8b" translate="yes" xml:space="preserve">
          <source>parse_auth()</source>
          <target state="translated">parse_auth()</target>
        </trans-unit>
        <trans-unit id="54fdb1a9720f3519a2d2affe6d7a5d3abbef3dad" translate="yes" xml:space="preserve">
          <source>parse_date()</source>
          <target state="translated">parse_date()</target>
        </trans-unit>
        <trans-unit id="43bce7a87dd0e4b8c09b44173613bc95ba77d714" translate="yes" xml:space="preserve">
          <source>paste</source>
          <target state="translated">paste</target>
        </trans-unit>
        <trans-unit id="95c4e181abf64b5e936c498d2c43ab32726b8470" translate="yes" xml:space="preserve">
          <source>path_shift()</source>
          <target state="translated">path_shift()</target>
        </trans-unit>
        <trans-unit id="440c3339cb056522cd1edf391e616ceb636e1a08" translate="yes" xml:space="preserve">
          <source>plugins</source>
          <target state="translated">plugins</target>
        </trans-unit>
        <trans-unit id="2d6f7ac901e5d04c6371875e27569749eefe8567" translate="yes" xml:space="preserve">
          <source>rebase()</source>
          <target state="translated">rebase()</target>
        </trans-unit>
        <trans-unit id="14bdaf2c878209d944d81a54d773db2719f0113c" translate="yes" xml:space="preserve">
          <source>return a dict of template vars to fill out the template</source>
          <target state="translated">テンプレートを埋めるためのテンプレート変数のdictを返します。</target>
        </trans-unit>
        <trans-unit id="6012a6e6d35d6ba43ee41dc4cc717f61b24c45cd" translate="yes" xml:space="preserve">
          <source>return something other than a dict and the view decorator will not process the template, but return the handler result as is. This includes returning a HTTPResponse(dict) to get, for instance, JSON with autojson or other castfilters.</source>
          <target state="translated">は dict 以外のものを返し、ビューデコレータはテンプレートを処理せず、ハンドラの結果をそのまま返します。これには、HTTPResponse(dict)を返して、例えば autojson や他のキャストフィルタを使った JSON を取得することも含まれます。</target>
        </trans-unit>
        <trans-unit id="ef89a3a842b0384565a210f0122804f411fe51fb" translate="yes" xml:space="preserve">
          <source>rocket</source>
          <target state="translated">rocket</target>
        </trans-unit>
        <trans-unit id="88e8b45994b813eb69a17874d0858982a9387f86" translate="yes" xml:space="preserve">
          <source>route()</source>
          <target state="translated">route()</target>
        </trans-unit>
        <trans-unit id="0f400122e37da3a462df347caac2be31d74be730" translate="yes" xml:space="preserve">
          <source>rule</source>
          <target state="translated">rule</target>
        </trans-unit>
        <trans-unit id="f805aaf52532959faf0be97c80abde3c8ae5e849" translate="yes" xml:space="preserve">
          <source>run()</source>
          <target state="translated">run()</target>
        </trans-unit>
        <trans-unit id="186e7e139d002714805331e77d5e7a3112f55f90" translate="yes" xml:space="preserve">
          <source>setdefault()</source>
          <target state="translated">setdefault()</target>
        </trans-unit>
        <trans-unit id="abd0c274ede56d5c6f17be89ad32e3054098fad0" translate="yes" xml:space="preserve">
          <source>skiplist</source>
          <target state="translated">skiplist</target>
        </trans-unit>
        <trans-unit id="1e5705665c28bfaa038e11d9138cd855a8d25b6b" translate="yes" xml:space="preserve">
          <source>so bottle searches the right paths.</source>
          <target state="translated">だからボトルは正しい道を探します。</target>
        </trans-unit>
        <trans-unit id="9a4ac62ca9d7db8c777de3e3f6f52a29156cc782" translate="yes" xml:space="preserve">
          <source>start page &lt;code&gt;http://localhost:8080/todo&lt;/code&gt;</source>
          <target state="translated">スタートページ &lt;code&gt;http://localhost:8080/todo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bef18596fd84c20a131098dcb6f2778a4db20a7" translate="yes" xml:space="preserve">
          <source>template()</source>
          <target state="translated">template()</target>
        </trans-unit>
        <trans-unit id="474446ad24ee5490f8e879012ee2a855a7c7bf56" translate="yes" xml:space="preserve">
          <source>tornado</source>
          <target state="translated">tornado</target>
        </trans-unit>
        <trans-unit id="986f16f209e651c1a0f22c4010f329b8079f7fa4" translate="yes" xml:space="preserve">
          <source>twisted</source>
          <target state="translated">twisted</target>
        </trans-unit>
        <trans-unit id="e9accc21bb6501091860b4b6959780198f8935f0" translate="yes" xml:space="preserve">
          <source>validating data assigned by dynamic routes with the @validate decorator</source>
          <target state="translated">バリデートデコレータを使用して動的なルートで割り当てられたデータを検証します。</target>
        </trans-unit>
        <trans-unit id="145313cb43507ac1c8d47fc8da314899ad73fdd3" translate="yes" xml:space="preserve">
          <source>vice versa.</source>
          <target state="translated">その逆もあります。</target>
        </trans-unit>
        <trans-unit id="2540eae99824b579af30b949d544a727b977425b" translate="yes" xml:space="preserve">
          <source>view()</source>
          <target state="translated">view()</target>
        </trans-unit>
        <trans-unit id="1aed88e4a7e5cd305f613756678093e95c870924" translate="yes" xml:space="preserve">
          <source>waitress</source>
          <target state="translated">waitress</target>
        </trans-unit>
        <trans-unit id="6f29a29af63cb79cb0e113c9d4d7ed052368552d" translate="yes" xml:space="preserve">
          <source>will work fine, too. What will not work is to bind one route to more than one function.</source>
          <target state="translated">を使っても問題なく動作します。うまくいかないのは、1つのルートを複数の関数にバインドすることです。</target>
        </trans-unit>
        <trans-unit id="242a44ec7e29dc38038e17cb7f27abfebbb92fc4" translate="yes" xml:space="preserve">
          <source>works fine, the following one as well:</source>
          <target state="translated">は正常に動作し、次のものも同様に</target>
        </trans-unit>
        <trans-unit id="d1bb0af006484d47426b8626c8a83e7dec230345" translate="yes" xml:space="preserve">
          <source>would make Bottle listen to port 80.</source>
          <target state="translated">ボトルに80番ポートを聞かせる</target>
        </trans-unit>
        <trans-unit id="dc7b0ed7576dd4d42b349ceea389f65b16acabe2" translate="yes" xml:space="preserve">
          <source>wsgiref</source>
          <target state="translated">wsgiref</target>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
        <trans-unit id="264f54d9f052a761c88f49edbe69d1315ae11ac7" translate="yes" xml:space="preserve">
          <source>yieldroutes()</source>
          <target state="translated">yieldroutes()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
