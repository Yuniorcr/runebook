<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="bb182384a526a640260c12e29ebbe434e991f105" translate="yes" xml:space="preserve">
          <source>The session cannot roam to a new configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c15eedf69d513f3cb0d597cfd99bec810878923" translate="yes" xml:space="preserve">
          <source>The session is based on a defined but not yet discovered &lt;a href=&quot;qnetworkconfiguration&quot;&gt;QNetworkConfiguration&lt;/a&gt; (see &lt;a href=&quot;qnetworkconfiguration#StateFlag-enum&quot;&gt;QNetworkConfiguration::StateFlag&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a07fc5507bb20033160c2e5478ff6786f52aec" translate="yes" xml:space="preserve">
          <source>The session is based on an unknown or unspecified bearer type. The value of the string returned describes the bearer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61b92bb4eb44e5091c763ee6ce38ed2c25c581f" translate="yes" xml:space="preserve">
          <source>The session is invalid due to an invalid configuration. This may happen due to a removed access point or a configuration that was invalid to begin with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e740aed07971e9ecb66e98f4cdd194736aa162d2" translate="yes" xml:space="preserve">
          <source>The session key changes every time the session is saved. If the shutdown process is cancelled, another session key will be used when shutting down again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d352be6ff30154826262517805a36261052e0469" translate="yes" xml:space="preserve">
          <source>The session key changes with every call of commitData() or saveState().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e2a6d27340e11c754229525b200ebcc24bcd57" translate="yes" xml:space="preserve">
          <source>The session manager is used to save the session, e.g., when the machine is shut down, and to restore a session, e.g., when the machine is started up. We recommend that you use &lt;a href=&quot;qsettings&quot;&gt;QSettings&lt;/a&gt; to save an application's settings, for example, window positions, recently used files, etc. When the application is restarted by the session manager, you can restore the settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c1bcf48ca65b836cacb552b644bbdf1518b678" translate="yes" xml:space="preserve">
          <source>The session was aborted by the user or system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d120fa61c5b0ad66ef32dbdc179fd4c116a1d5" translate="yes" xml:space="preserve">
          <source>The set of D-Bus interfaces available in a system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634de14092d373e4c78be0cbf9d2cf97e10d2978" translate="yes" xml:space="preserve">
          <source>The set of QML object-type attribute types is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7967131f5c2ac738c22ee366d2068bdbd3edc8" translate="yes" xml:space="preserve">
          <source>The set of dependencies for a software build system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e91f2e716fec643b8a64bf7991dcef2779f813f" translate="yes" xml:space="preserve">
          <source>The set of signals available allow the developer to create custom behavior when the following events occur,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473c3a3c3935608a329d7012caea17da497b4d9a" translate="yes" xml:space="preserve">
          <source>The setFirstName() helper function is defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b60e830ea2fb5c237bc1af6d63125751173c9f" translate="yes" xml:space="preserve">
          <source>The setGraphicsEffect function is for setting the widget's graphics effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c099f08dd6f0c5db28602f2d07f932bf4a4d6b2" translate="yes" xml:space="preserve">
          <source>The setLastName() function is similar. See the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtsql-querymodel-example.html#&quot;&gt;Query Model&lt;/a&gt; example for the complete source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649360fd4ca75fd5e8beaf4c8a635ca549674f5b" translate="yes" xml:space="preserve">
          <source>The setPendingResultsLimit() provides throttling control. When the number of pending &lt;a href=&quot;qfuturewatcher#resultReadyAt&quot;&gt;resultReadyAt&lt;/a&gt;() or &lt;a href=&quot;qfuturewatcher#resultsReadyAt&quot;&gt;resultsReadyAt&lt;/a&gt;() signals exceeds the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f60012864cd360c7b76f7d6c366da74467e79f5" translate="yes" xml:space="preserve">
          <source>The setRelation() call specifies that column 2 in table &lt;code&gt;employee&lt;/code&gt; is a foreign key that maps with field &lt;code&gt;id&lt;/code&gt; of table &lt;code&gt;city&lt;/code&gt;, and that the view should present the &lt;code&gt;city&lt;/code&gt;'s &lt;code&gt;name&lt;/code&gt; field to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9c897618d8732d51050189daf49f4f9ec67633" translate="yes" xml:space="preserve">
          <source>The setSocketOptions method controls how the socket operates. For example the socket may restrict access to what user ids can connect to the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0b44bc9e739c58842e46fa4a695199ee9758aa" translate="yes" xml:space="preserve">
          <source>The setter setCurrentText() simply calls &lt;a href=&quot;qcombobox#setEditText&quot;&gt;setEditText&lt;/a&gt;() if the combo box is editable. Otherwise, if there is a matching text in the list, &lt;a href=&quot;qcombobox#currentIndex-prop&quot;&gt;currentIndex&lt;/a&gt; is set to the corresponding index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1f6c4549b4872766bdc1b4321c5e2faa165a79" translate="yes" xml:space="preserve">
          <source>The settings for creating and printing the PDF document will be retrieved from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e282fec7f856e6988f18d139be504731c2330ba1" translate="yes" xml:space="preserve">
          <source>The settings live in the Default group and the general format is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b28e5f6c57a56a0a90d243bf7ab07681fe2341c" translate="yes" xml:space="preserve">
          <source>The settings of the internal &lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt; are also saved and restored, so that using &amp;lt;&amp;lt; hex in a &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; operator doesn't affect other &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61af833a3dc7a320b43fc1d514a6a7310224f2a" translate="yes" xml:space="preserve">
          <source>The settings that &lt;a href=&quot;qsslconfiguration&quot;&gt;QSslConfiguration&lt;/a&gt; currently supports are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d15ce8ff4b07b98284106f5a8f61660c31113b" translate="yes" xml:space="preserve">
          <source>The setup of the style option for &lt;code&gt;CE_MenuTearOff&lt;/code&gt; and &lt;code&gt;CE_MenuScroller&lt;/code&gt; also uses &lt;a href=&quot;qstyleoptionmenuitem&quot;&gt;QStyleOptionMenuItem&lt;/a&gt;; they only set the &lt;code&gt;menuRect&lt;/code&gt; variable in addition to the common settings with &lt;a href=&quot;qstyleoption&quot;&gt;QStyleOption&lt;/a&gt;'s &lt;a href=&quot;qstyleoption#initFrom&quot;&gt;initFrom()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f5053cf990b39390f20f6e78b5c321797d0dee" translate="yes" xml:space="preserve">
          <source>The severity of the message is invalid; this is the severity of a default-constructed &lt;a href=&quot;qopengldebugmessage&quot;&gt;QOpenGLDebugMessage&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f77012f78a0962ee102ff0951c4295191961a8a" translate="yes" xml:space="preserve">
          <source>The shader hasn't been compiled and linked yet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b44ae86e0a517198db9112f2423743dd570b9a" translate="yes" xml:space="preserve">
          <source>The shader program must be valid in the current &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67288c8d7161f4365bd4dc03a860f45a5b7f3d8" translate="yes" xml:space="preserve">
          <source>The shader program will be associated with the current &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f119c0831a80ba3f9565350d66f9f761837087c2" translate="yes" xml:space="preserve">
          <source>The shader sources in the &lt;a href=&quot;qtgraphicaleffects-index&quot;&gt;Qt Graphical Effects&lt;/a&gt; module have not been ported to any format other than the OpenGL 2.0 compatible one, meaning that the QML types provided by that module are currently not functional with the D3D12 backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48aaebe5e0aa7a31a62e8d609c7f0dd924998254" translate="yes" xml:space="preserve">
          <source>The shader was successfully compiled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5869743776c1434547feb86b48727b4f7202d168" translate="yes" xml:space="preserve">
          <source>The shader will be associated with the current &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce53efaa770dda26cdb149efabe33b06a7110b19" translate="yes" xml:space="preserve">
          <source>The shadow color of the current color group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9725510ce32cd3ccc4e2a7f9defde582350c0ec" translate="yes" xml:space="preserve">
          <source>The shadow color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911ccf28c5f1f5e4ec61664bb36f4048ab051d44" translate="yes" xml:space="preserve">
          <source>The shadow radius.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34fc5792232b6e4ffa8dfaaffd02a8c71d61dcc" translate="yes" xml:space="preserve">
          <source>The shadow spread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f36f7d0407d0683cff54bba7e1c0187ae63cc3e" translate="yes" xml:space="preserve">
          <source>The shape is determine by calling &lt;a href=&quot;qpixmap#createHeuristicMask&quot;&gt;QPixmap::createHeuristicMask&lt;/a&gt;(). The performance and memory consumption is similar to MaskShape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdabc6eab65a494ea63874b553ecadd8139707a" translate="yes" xml:space="preserve">
          <source>The shape is determined by calling &lt;a href=&quot;qpixmap#mask&quot;&gt;QPixmap::mask&lt;/a&gt;(). This shape includes only the opaque pixels of the pixmap. Because the shape is more complex, however, it can be slower than the other modes, and uses more memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ba951567e21689a63f5b77c6162433f7610f3e" translate="yes" xml:space="preserve">
          <source>The shape is determined by tracing the outline of the pixmap. This is the fastest shape mode, but it does not take into account any transparent areas on the pixmap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b258c27841756c5cb48acc404fd462b934803c" translate="yes" xml:space="preserve">
          <source>The shape of the legend marker. Defaults to &lt;a href=&quot;qlegend#MarkerShape-enum&quot;&gt;QLegend::MarkerShapeDefault&lt;/a&gt;, which indicates the shape is determined by &lt;a href=&quot;qlegend#markerShape-prop&quot;&gt;QLegend::markerShape&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1118267d7a94f85d3a914e33ce79c946931e5bc1" translate="yes" xml:space="preserve">
          <source>The shape of the mouse cursor on a &lt;a href=&quot;qplaintextedit&quot;&gt;QPlainTextEdit&lt;/a&gt; is &lt;a href=&quot;qt#CursorShape-enum&quot;&gt;Qt::IBeamCursor&lt;/a&gt; by default. It can be changed through the &lt;a href=&quot;qabstractscrollarea#viewport&quot;&gt;viewport&lt;/a&gt;()'s cursor property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724db3a73bc22860417c52e291b280fb2259b1e6" translate="yes" xml:space="preserve">
          <source>The shape of the mouse cursor on a &lt;a href=&quot;qtextedit&quot;&gt;QTextEdit&lt;/a&gt; is &lt;a href=&quot;qt#CursorShape-enum&quot;&gt;Qt::IBeamCursor&lt;/a&gt; by default. It can be changed through the &lt;a href=&quot;qabstractscrollarea#viewport&quot;&gt;viewport&lt;/a&gt;()'s cursor property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5ee91e8ca39be340a1e72e75f41b9ae2c6331a" translate="yes" xml:space="preserve">
          <source>The shape of the tabs on the tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bde36425e4f5b528e7ccd6fd0f2c0f65f1149e5" translate="yes" xml:space="preserve">
          <source>The shape used when rendering marker items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53dbebb56890475a9c634c28d8bb36c1eeb16ac" translate="yes" xml:space="preserve">
          <source>The shared memory segment is read-only. Writing to the shared memory segment is not allowed. An attempt to write to a shared memory segment created with ReadOnly causes the program to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4caadab66e0868af477a07d84bb3871a3bb909f5" translate="yes" xml:space="preserve">
          <source>The shininess of a surface is controlled by a float property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdcf8101dd6362d468ac7f01633197ab758d064" translate="yes" xml:space="preserve">
          <source>The short answer is your elements are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f7c04253feb4982b1e65f844501e949ecb3403" translate="yes" xml:space="preserve">
          <source>The short form of the time zone name, usually an abbreviation, e.g. &quot;CET&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30023d450e45dad95a70cd7f9d9e3624d272e00b" translate="yes" xml:space="preserve">
          <source>The short version of day and month names; for example, returning &quot;Jan&quot; as a month name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ffc826aaaf8f119bf2981e574d229b0d0be593" translate="yes" xml:space="preserve">
          <source>The short version of the day name; for example, &quot;Mon&quot; (&lt;a href=&quot;qlocale#FormatType-enum&quot;&gt;QLocale::ShortFormat&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdaf65b854f5795e65184cc933d9cc7883028c31" translate="yes" xml:space="preserve">
          <source>The short version of the string; for example, returning &quot;Jan&quot; as a month name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06df5613b203543f88827f70fc45f5d243cc54ba" translate="yes" xml:space="preserve">
          <source>The shortcut can be changed by the user or via setter function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e99c44db9880c20fa54e88bd40ea9d8f66ac0ac" translate="yes" xml:space="preserve">
          <source>The shortcut is active when its parent widget has focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ee1f61ac23a711b13a126b69da35ea89ecfabc" translate="yes" xml:space="preserve">
          <source>The shortcut is active when its parent widget is a logical subwidget of the active top-level window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f546591807068dee658fcb71ba91a4ed1eb8ca7f" translate="yes" xml:space="preserve">
          <source>The shortcut is active when its parent widget, or any of its children has focus. Children which are top-level widgets, except pop-ups, are not affected by this shortcut context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d37eedb8293ab3fdf049dcab267093e9fffde5e" translate="yes" xml:space="preserve">
          <source>The shortcut is active when one of the applications windows are active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17491d57a1633f4987fc65b5cfc9a499a5f5580" translate="yes" xml:space="preserve">
          <source>The shortcut is specified as a Unicode code point, not as a Qt Key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba78ec82b04ce3f5d89e5758a2b6a272579ceac" translate="yes" xml:space="preserve">
          <source>The shortcut key sequence can be set to one of the &lt;a href=&quot;qkeysequence#StandardKey-enum&quot;&gt;standard keyboard shortcuts&lt;/a&gt;, or it can be specified by a string containing a sequence of up to four key presses that are needed to &lt;a href=&quot;qml-qt-labs-platform-menuitem#triggered-signal&quot;&gt;trigger&lt;/a&gt; the shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cd7e7182fa9712bace6996322f3560e0354031" translate="yes" xml:space="preserve">
          <source>The side of the Flipable currently visible. Possible values are &lt;code&gt;Flipable.Front&lt;/code&gt; and &lt;code&gt;Flipable.Back&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209af747aef71b17788cb34c2705efedfacc9b6d" translate="yes" xml:space="preserve">
          <source>The signal &lt;a href=&quot;qtabwidget#currentChanged&quot;&gt;currentChanged&lt;/a&gt;() is emitted when the user selects a page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d8373b027c6e72e66e2b93fed1c58cc1d2f79e" translate="yes" xml:space="preserve">
          <source>The signal and slot used in a connection can be changed after it has been set up. When a connection is configured, it becomes visible in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524d961195c884a0ffd02067e733fe97497f8d20" translate="yes" xml:space="preserve">
          <source>The signal can be attached to any item, popup, or window. When attached to an item or a popup, the signal is only emitted if the item or popup is in a window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5df15e060b329ae0e66b674a04dd45df9c57257" translate="yes" xml:space="preserve">
          <source>The signal can be used for example for implementing custom input handlers, as demonstrated by the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtdatavisualization-draggableaxes-example.html#&quot;&gt;Axis Range Dragging With Labels Example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7e4e0c1d2b944b19f37a669a86ead412957e7f" translate="yes" xml:space="preserve">
          <source>The signal can be used for example for implementing customized input handling, as demonstrated by the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtdatavisualization-qmlaxisdrag-example.html#&quot;&gt;Qt Quick 2 Axis Dragging Example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d50ed7ac50271f2291b14d668ed14f9496aebd7" translate="yes" xml:space="preserve">
          <source>The signal carries a &lt;a href=&quot;qsslpresharedkeyauthenticator&quot;&gt;QSslPreSharedKeyAuthenticator&lt;/a&gt; object containing the identity hint the server sent to the client, and which must be filled with the corresponding client identity and the derived key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b893a084a57974b7ac34abf93fefcbd9039a261" translate="yes" xml:space="preserve">
          <source>The signal handlers should handle the incoming transaction. Once the transaction has been handled appropriately, it should be finalized. For instance, when a purchase has succeeded, it's appropriate to save information about the purchased product in persistent storage, so that this product can still be available the next time the application launches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae975f63cf2ae5f69c3bda1f5fdf429262f0bbbd" translate="yes" xml:space="preserve">
          <source>The signal is emitted after both widget have been notified about the change through &lt;a href=&quot;qfocusevent&quot;&gt;QFocusEvent&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8644edacdb335001bd624e5d209ed42439b01d59" translate="yes" xml:space="preserve">
          <source>The signal is emitted as soon as the most important device information has been collected. However, as long as the &lt;a href=&quot;qbluetoothdevicediscoveryagent#finished&quot;&gt;finished&lt;/a&gt;() signal has not been emitted the information collection continues even for already discovered devices. This is particularly true for signal strength information (RSSI) and manufacturer data updates. If the use case requires continuous manufacturer data or RSSI updates it is advisable to retrieve the device information via &lt;a href=&quot;qbluetoothdevicediscoveryagent#discoveredDevices&quot;&gt;discoveredDevices&lt;/a&gt;() once the discovery has finished or listen to the &lt;a href=&quot;qbluetoothdevicediscoveryagent#deviceUpdated&quot;&gt;deviceUpdated&lt;/a&gt;() signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18afd8eb86d3b1bb4f83b3cb0041c82ff2bdec66" translate="yes" xml:space="preserve">
          <source>The signal is emitted before the document's layout manager is notified about the change. This hook allows you to implement syntax highlighting for the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6874e355996a9c5d889d27bdccda9540d97cc2b9" translate="yes" xml:space="preserve">
          <source>The signal is emitted when the active streams list is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a9cb27e653e72eb35d1e6d1991f2cd823bf6c4" translate="yes" xml:space="preserve">
          <source>The signal is emitted when the available streams list is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c442f3578cf1c7a94febe17a99513b6f1a1904" translate="yes" xml:space="preserve">
          <source>The signal is emitted while a user is selecting a font. Ultimately, the chosen font may differ from the font currently selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa43372c097d1cb461f1cbead869dde5f9fad326" translate="yes" xml:space="preserve">
          <source>The signal is emitted with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a07cf1960e0c63d7cfa93d25bbffb35ef0af5c5" translate="yes" xml:space="preserve">
          <source>The signal is not emitted when the to-be-written fields have not changed due to no change in value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b170cb776c51484e0ca01973559acac9e751ec8c" translate="yes" xml:space="preserve">
          <source>The signal is only emitted when a user has chosen the final font to be used. It is not emitted while the user is changing the current font in the font dialog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15546a80f17bd80ed47c28d46f26d0d889185b6" translate="yes" xml:space="preserve">
          <source>The signal is particularly useful if your application has to do some last-second cleanup. Note that no user interaction is possible in this state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8f47145d6f4e2b037b878f3850892880408f10" translate="yes" xml:space="preserve">
          <source>The signal must be a function declared as a signal in the header. The slot function can be any function or functor that can be connected to the signal. A function can be connected to a given signal if the signal has at least as many argument as the slot. A functor can be connected to a signal if they have exactly the same number of arguments. There must exist implicit conversion between the types of the corresponding arguments in the signal and the slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969c5fdee4c16403eb25ce6c9ffd5debb01e04d2" translate="yes" xml:space="preserve">
          <source>The signal must be a function declared as a signal in the header. The slot function can be any member function that can be connected to the signal. A slot can be connected to a given signal if the signal has at least as many arguments as the slot, and there is an implicit conversion between the types of the corresponding arguments in the signal and the slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba8582545ce204f106d6d09c44873a4cfb77613" translate="yes" xml:space="preserve">
          <source>The signal properties have a &lt;a href=&quot;qml-qtquick-keyevent&quot;&gt;KeyEvent&lt;/a&gt; parameter, named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0f39444f9b7ca8721afe54e8f72758ef373298" translate="yes" xml:space="preserve">
          <source>The signal specified respresents the default signal of this class. Ie. the default signal of a push button would be &quot;clicked&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608182cb8c500e7120c984e333a67c68920eaaeb" translate="yes" xml:space="preserve">
          <source>The signal which is associated with this signal transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4cc5d3b532fc57d04b4b1432fc6b1800fa59654" translate="yes" xml:space="preserve">
          <source>The signal will be disconnected from the slot when the dialog is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545ccef3a7bf7200f085725901642ab3b795d82c" translate="yes" xml:space="preserve">
          <source>The signals &lt;a href=&quot;qml-qt3d-render-objectpicker#pressed-signal&quot;&gt;pressed()&lt;/a&gt;, &lt;a href=&quot;qml-qt3d-render-objectpicker#released-signal&quot;&gt;released()&lt;/a&gt;, &lt;a href=&quot;qml-qt3d-render-objectpicker#clicked-signal&quot;&gt;clicked()&lt;/a&gt;, &lt;a href=&quot;qml-qt3d-render-objectpicker#moved-signal&quot;&gt;moved()&lt;/a&gt;, &lt;a href=&quot;qml-qt3d-render-objectpicker#entered-signal&quot;&gt;entered()&lt;/a&gt;, and &lt;a href=&quot;qml-qt3d-render-objectpicker#exited-signal&quot;&gt;exited()&lt;/a&gt; are emitted when the bounding volume defined by the pickAttribute property intersects with a ray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2168702b0a57b5caafb589a4bfafe08ef060ae" translate="yes" xml:space="preserve">
          <source>The signals &lt;a href=&quot;qt3drender-qobjectpicker#pressed&quot;&gt;pressed&lt;/a&gt;(), &lt;a href=&quot;qt3drender-qobjectpicker#released&quot;&gt;released&lt;/a&gt;(), &lt;a href=&quot;qt3drender-qobjectpicker#clicked&quot;&gt;clicked&lt;/a&gt;(), &lt;a href=&quot;qt3drender-qobjectpicker#moved&quot;&gt;moved&lt;/a&gt;(), &lt;a href=&quot;qt3drender-qobjectpicker#entered&quot;&gt;entered&lt;/a&gt;(), and &lt;a href=&quot;qt3drender-qobjectpicker#exited&quot;&gt;exited&lt;/a&gt;() are emitted when the bounding volume defined by the pickAttribute property intersects with a ray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d8e2171d57d1559a7867266737c25c1497b292" translate="yes" xml:space="preserve">
          <source>The signals and slots connections defined for compile time or run time forms can either be set up manually or automatically, using &lt;a href=&quot;qmetaobject&quot;&gt;QMetaObject&lt;/a&gt;'s ability to make connections between signals and suitably-named slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4a44e585caad99aff83ef0803ee2bdb0174179" translate="yes" xml:space="preserve">
          <source>The signals and slots mechanism is type safe: The signature of a signal must match the signature of the receiving slot. (In fact a slot may have a shorter signature than the signal it receives because it can ignore extra arguments.) Since the signatures are compatible, the compiler can help us detect type mismatches when using the function pointer-based syntax. The string-based SIGNAL and SLOT syntax will detect type mismatches at runtime. Signals and slots are loosely coupled: A class which emits a signal neither knows nor cares which slots receive the signal. Qt's signals and slots mechanism ensures that if you connect a signal to a slot, the slot will be called with the signal's parameters at the right time. Signals and slots can take any number of arguments of any type. They are completely type safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562c9e64ca7080edc2b80f020b4f5c6643b47441" translate="yes" xml:space="preserve">
          <source>The signals emitted by the functions called in implementations of the resizing API give attached components the chance to take action before any data becomes unavailable. The encapsulation of insert and remove operations with begin and end functions also enable the model to manage &lt;a href=&quot;qpersistentmodelindex&quot;&gt;persistent model indexes&lt;/a&gt; correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86436de89c2a80423b16556679f2901745d882f8" translate="yes" xml:space="preserve">
          <source>The signature for the first function is &lt;b&gt;&quot;(I)Ljava/lang/String;&quot;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc71ca11e09b0f0063c89ab8633bf03e59950cb7" translate="yes" xml:space="preserve">
          <source>The signatures of signals and slots may contain arguments, and the arguments can have default values. Consider &lt;a href=&quot;qobject#destroyed&quot;&gt;QObject::destroyed&lt;/a&gt;():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5e4e08fec4cb19c3558e7b3ea4f9e9e85e1538" translate="yes" xml:space="preserve">
          <source>The similar mode to FlashSlowSyncFrontCurtain but flash is fired at the end of exposure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8632f5e659e9c544f7a10b3240a5430e1f2f12c" translate="yes" xml:space="preserve">
          <source>The simple text item can have both a fill and an outline; &lt;a href=&quot;qabstractgraphicsshapeitem#setBrush&quot;&gt;setBrush&lt;/a&gt;() will set the text fill (i.e., text color), and &lt;a href=&quot;qabstractgraphicsshapeitem#setPen&quot;&gt;setPen&lt;/a&gt;() sets the pen that will be used to draw the text outline. (The latter can be slow, especially for complex pens, and items with long text content.) If all you want is to draw a simple line of text, you should call &lt;a href=&quot;qabstractgraphicsshapeitem#setBrush&quot;&gt;setBrush&lt;/a&gt;() only, and leave the pen unset; &lt;a href=&quot;qgraphicssimpletextitem&quot;&gt;QGraphicsSimpleTextItem&lt;/a&gt;'s pen is by default &lt;a href=&quot;qt#PenStyle-enum&quot;&gt;Qt::NoPen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71b4f8cae1dfa059db0615c7c038dfb4d44b99f" translate="yes" xml:space="preserve">
          <source>The simplest and most common way to set a widget's tool tip is by calling its &lt;a href=&quot;qwidget#toolTip-prop&quot;&gt;QWidget::setToolTip&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ec11a0c882a8f7f4766a044cf6d4c0e3c2c9e8" translate="yes" xml:space="preserve">
          <source>The simplest plugin will have just once sensor backend although there is no reason that multiple sensor backends cannot be in a plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7a51842f7c60fd33ba5fca3e39d1d8449320ca" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt; is to create one from a &lt;a href=&quot;qpixmap&quot;&gt;QPixmap&lt;/a&gt; file or resource, and then use it, allowing Qt to work out all the required icon styles and sizes. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ee5d3756ef8931e5abf1eedc0581a217f1741d" translate="yes" xml:space="preserve">
          <source>The simplest use of the class is like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9722d0db1ecc59caa68fb1f2f1f66cbd9eff5b2" translate="yes" xml:space="preserve">
          <source>The simplest way of drawing this list is on a cell-by-cell basis. First, the background is drawn. This is a rectangle of a specific color. In OpenGL terms this means selecting a shader program to do solid color fills, setting up the fill color, setting the transformation matrix containing the x and y offsets and then using for instance &lt;code&gt;glDrawArrays&lt;/code&gt; to draw two triangles making up the rectangle. The icon is drawn next. In OpenGL terms this means selecting a shader program to draw textures, selecting the active texture to use, setting the transformation matrix, enabling alpha-blending and then using for instance &lt;code&gt;glDrawArrays&lt;/code&gt; to draw the two triangles making up the bounding rectangle of the icon. The text and separator line between cells follow a similar pattern. And this process is repeated for every cell in the list, so for a longer list, the overhead imposed by OpenGL state changes and draw calls completely outweighs the benefit that using a hardware accelerated API could provide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a7f93100a7cf250cfdc1e22b39390ca3991713" translate="yes" xml:space="preserve">
          <source>The simplest way of using a contiguous cache is to use the &lt;a href=&quot;qcontiguouscache#append&quot;&gt;append&lt;/a&gt;() and &lt;a href=&quot;qcontiguouscache#prepend&quot;&gt;prepend&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09005e3efdb3584561892cbdaf9938a4f183ef07" translate="yes" xml:space="preserve">
          <source>The simplest way to arrange objects on a form is to place them in a horizontal or vertical layout. Horizontal layouts ensure that the widgets within are aligned horizontally; vertical layouts ensure that they are aligned vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3563eabe8475fbf652e4db09bfdbaa7b3541fd0f" translate="yes" xml:space="preserve">
          <source>The simplest way to create a shortcut for a particular widget is to construct the shortcut with a key sequence. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0aae0882518320d4253f846b8a7753fe1a4de0" translate="yes" xml:space="preserve">
          <source>The simulation loop is launched as soon as a root &lt;a href=&quot;qt3dcore-qentity&quot;&gt;Qt3DCore::QEntity&lt;/a&gt; is set on the &lt;a href=&quot;qt3dcore-qaspectengine&quot;&gt;Qt3DCore::QAspectEngine&lt;/a&gt;. This is followed by a call to onEngineStartup() on each aspect so that they can start their simulation work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a765f47c2a6c062ea4fb119a84180741a8c4f81" translate="yes" xml:space="preserve">
          <source>The simulation loop is stopped when the root entity is set to Qt3DCore::QEntityPtr(). This calls onEngineShutdown() on each aspect so that they can stop performing their simulation work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b9e2877b614eaa083374b459594776b3dd666a" translate="yes" xml:space="preserve">
          <source>The simulation will automatically pause if it detects that there are no live particles left, and unpause when new live particles are added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb34ec5ed4f96cad2d4b82eb20066cd13ef9a235" translate="yes" xml:space="preserve">
          <source>The singular forms are slightly optimized, so if you do have only a single target/property to animate you should try to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ba691e2a063ee0eefd2b656f7e15733f622989" translate="yes" xml:space="preserve">
          <source>The site that would be showing in the location bar if the application has one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47e4b6f74ae6003047d4e701c45fece3c68df1e" translate="yes" xml:space="preserve">
          <source>The size (width and height) of a graphics primitive always correspond to its mathematical model, ignoring the width of the pen it is rendered with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899643a567b5f555677c7364b9152436c709f8a2" translate="yes" xml:space="preserve">
          <source>The size calculated will be used for subsequent calls to &lt;a href=&quot;qtextobjectinterface#drawObject&quot;&gt;drawObject&lt;/a&gt;() for this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1a1a45d87c8263cf46a19fdaaf1ae4ce9f20a7" translate="yes" xml:space="preserve">
          <source>The size component is adjusted if it lies outside the range defined by &lt;a href=&quot;qwidget#minimumSize-prop&quot;&gt;minimumSize&lt;/a&gt;() and &lt;a href=&quot;qwidget#maximumSize-prop&quot;&gt;maximumSize&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95de11d8aeeaf5134dcb68b0bad5c9ef6253257d" translate="yes" xml:space="preserve">
          <source>The size grip calculates its size hint with &lt;code&gt;CT_SizeGrip&lt;/code&gt;. The pixel metric &lt;code&gt;PM_SizeGripSize&lt;/code&gt; is currently unused by Qt. The element tree for an image in the Plastique style of &lt;a href=&quot;qsizegrip&quot;&gt;QSizeGrip&lt;/a&gt; follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36b005afb3d552aee5dbf5f8ccbbdd3ab9a1f46" translate="yes" xml:space="preserve">
          <source>The size grip is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c6921fba5ac69a0a5a878f4891ad7e7b14700e" translate="yes" xml:space="preserve">
          <source>The size grip style option, &lt;a href=&quot;qstyleoptionsizegrip&quot;&gt;QStyleOptionSizeGrip&lt;/a&gt;, has one member besides the common members from &lt;a href=&quot;qstyleoption&quot;&gt;QStyleOption&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b824e0d7e57f0c9db6634c745ecb73b354bdb0" translate="yes" xml:space="preserve">
          <source>The size hint for the item that will be supplied to views. (&lt;a href=&quot;qsize&quot;&gt;QSize&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9107524eff6dacbc22b4ec51b17a09a0a7ca8bfe" translate="yes" xml:space="preserve">
          <source>The size in bits of a pointer for the platform on which the application is compiled (32 or 64).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bac3b561d6ddb215a7d9955501de461408ef0e" translate="yes" xml:space="preserve">
          <source>The size in bytes of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e625d03c78075a3a0d1d606973da6bbe730bf63" translate="yes" xml:space="preserve">
          <source>The size in pixels of the particles at the end of their life. Size will be linearly interpolated during the life of the particle from this value and size. If endSize is -1, then the size of the particle will remain constant at the starting size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d3a2a9dbab1d3b4594efcdc49d8d8c0463f53f" translate="yes" xml:space="preserve">
          <source>The size in pixels of the particles at the start of their life.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9615d78b39a640994dfcc16b3a2009187a96290" translate="yes" xml:space="preserve">
          <source>The size in pixels that the particle image is at the end of its life. If this value is less than 0, then it is disregarded and the particle will have its &lt;a href=&quot;qml-qtquick-particles-particle#startSize-prop&quot;&gt;startSize&lt;/a&gt; for the entire lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4de0ef5bb6e1dc2ee14db2c603762023396177" translate="yes" xml:space="preserve">
          <source>The size in pixels that the particle image is at the start of its life.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3cc4dc700b1d4f4e04713f9616644a497c2dbe" translate="yes" xml:space="preserve">
          <source>The size is adjusted if it lies outside the range defined by &lt;a href=&quot;qwidget#minimumSize-prop&quot;&gt;minimumSize&lt;/a&gt;() and &lt;a href=&quot;qwidget#maximumSize-prop&quot;&gt;maximumSize&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783d010c5dc8cda5a65aa04e8d197b15a97bdc75" translate="yes" xml:space="preserve">
          <source>The size is scaled freely. The aspect ratio is not preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8538408f26ca11d7b7474d6e9f6c4d67ff3f3ba" translate="yes" xml:space="preserve">
          <source>The size is scaled to a rectangle as large as possible inside a given rectangle, preserving the aspect ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b323dffad3f2966f985d38ce35e04f9dd33e6695" translate="yes" xml:space="preserve">
          <source>The size is scaled to a rectangle as small as possible outside a given rectangle, preserving the aspect ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8215bfa99ecb5eca03e86b0c9c3b5d918ab237d" translate="yes" xml:space="preserve">
          <source>The size must be between &lt;code&gt;0.0f&lt;/code&gt; and &lt;code&gt;1.0f&lt;/code&gt;. Setting the size to &lt;code&gt;0.0f&lt;/code&gt; causes the item size to be automatically scaled based on the total number of items in all the series for the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfb6e9f6898b08413514ead7aca38aba3eb0cf1" translate="yes" xml:space="preserve">
          <source>The size of a font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b21fc9ade08178f9959edf7b2f81d203510b76" translate="yes" xml:space="preserve">
          <source>The size of a particle can vary by this much up or down from size/&lt;a href=&quot;qml-qtquick-particles-emitter#endSize-prop&quot;&gt;endSize&lt;/a&gt;. The same random addition is made to both size and &lt;a href=&quot;qml-qtquick-particles-emitter#endSize-prop&quot;&gt;endSize&lt;/a&gt; for a single particle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328cc0d2f52118826675f2c1e6c8411bf9834529" translate="yes" xml:space="preserve">
          <source>The size of a size grip.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ac9b48744f4520b5a9b4dd909c4397828394bd" translate="yes" xml:space="preserve">
          <source>The size of button icons on a title bar. This enum value has been introduced in Qt 5.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b70614f597d5434a481f53670cca00acfa3370" translate="yes" xml:space="preserve">
          <source>The size of buttons on a title bar. This enum value has been introduced in Qt 5.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e09d367b421f35f1ede7461f569385457fc708f" translate="yes" xml:space="preserve">
          <source>The size of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643a11f954ce2521504e711bfd997c7660111eab" translate="yes" xml:space="preserve">
          <source>The size of the FBO will by default adapt to the size of the item. If a fixed size is preferred, set &lt;a href=&quot;qquickframebufferobject#textureFollowsItemSize-prop&quot;&gt;textureFollowsItemSize&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt; and return a texture of your choosing from &lt;a href=&quot;qquickframebufferobject-renderer#createFramebufferObject&quot;&gt;QQuickFramebufferObject::Renderer::createFramebufferObject&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2471bda81445c6608b25eefc895e2f33d3799045" translate="yes" xml:space="preserve">
          <source>The size of the air gap left between the volume itself and the frame in each dimension. The gap can be different on different dimensions. The values are fractions of the volume thickness in the same dimension. The values cannot be negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7b498009a46aaf7f9aef80a148f338f9bcd70e" translate="yes" xml:space="preserve">
          <source>The size of the current items icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84b44ee09ee588ea3af9ba9ee15060ec6ddf4eb" translate="yes" xml:space="preserve">
          <source>The size of the document can be changed either by setting a text width or setting an entire page size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3478a57511c2d165e78848a7c89dc06e0515d0b" translate="yes" xml:space="preserve">
          <source>The size of the drop down button when the combobox is editable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a129f2a1aa12af78a097deac7ec473d8ff7e0a" translate="yes" xml:space="preserve">
          <source>The size of the file is returned by &lt;a href=&quot;qfile#size&quot;&gt;size&lt;/a&gt;(). You can get the current file position using &lt;a href=&quot;qfiledevice#pos&quot;&gt;pos&lt;/a&gt;(), or move to a new file position using &lt;a href=&quot;qfiledevice#seek&quot;&gt;seek&lt;/a&gt;(). If you've reached the end of the file, &lt;a href=&quot;qfiledevice#atEnd&quot;&gt;atEnd&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321e10b82d2d9688484cf8b50a7a20b9d8e1b66f" translate="yes" xml:space="preserve">
          <source>The size of the icon as it will be shown on the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e8675d4ffb7f10a91189263c10cdee6d1a8b1c" translate="yes" xml:space="preserve">
          <source>The size of the margin between the sort indicator and the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6807d46ddab3de38e719646a7e1c9402982df839" translate="yes" xml:space="preserve">
          <source>The size of the marker used to render the points in the series. The default size is 15.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20ac2c362789307100928330231e31c26781aa9" translate="yes" xml:space="preserve">
          <source>The size of the rectangle,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779136aecbe6f3c631c3953feab7bd220f2dfdb0" translate="yes" xml:space="preserve">
          <source>The size of the resize grip in a header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61523e0a46be780a4cb2871650b3058cf109c1d4" translate="yes" xml:space="preserve">
          <source>The size of the sort indicator in a header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c34f2f1945377a4477cd1747f661cb12b0aa3de" translate="yes" xml:space="preserve">
          <source>The size of the standard icons in a message box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaea774fc2779c1c695f57e526b508098bd1217" translate="yes" xml:space="preserve">
          <source>The size of the surface is accessible with the &lt;a href=&quot;qsurface#size&quot;&gt;size&lt;/a&gt;() function. The rendering specific attributes of the surface are accessible through the &lt;a href=&quot;qsurface#format&quot;&gt;format&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0845157a27bf685d82f8704d11b1166181af92" translate="yes" xml:space="preserve">
          <source>The size of this array must be at least (&lt;code&gt;textureDataWidth * textureHeight * textureDepth * texture format color depth in bytes&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7282a3eec94d99fbb33083fd3a315ca685a815" translate="yes" xml:space="preserve">
          <source>The size of toolbar icons can be retrieved with &lt;code&gt;iconSize()&lt;/code&gt;. The sizes are platform dependent; you can set a fixed size with &lt;code&gt;setIconSize()&lt;/code&gt;. You can alter the appearance of all tool buttons in the toolbars with &lt;code&gt;setToolButtonStyle()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff7bc3041c106b6866a7ccb43da69e1fcba5d3c" translate="yes" xml:space="preserve">
          <source>The size policy lets you supply good default behavior for the layout management system, so that other widgets can contain and manage yours easily. The default size policy indicates that the size hint represents the preferred size of the widget, and this is often good enough for many widgets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1099fe030f6a6d2c51785d48ac840e45ff31b3d6" translate="yes" xml:space="preserve">
          <source>The size policy of a widget is an expression of its willingness to be resized in various ways, and affects how the widget is treated by the &lt;a href=&quot;layout#&quot;&gt;layout engine&lt;/a&gt;. Each widget returns a &lt;a href=&quot;qsizepolicy&quot;&gt;QSizePolicy&lt;/a&gt; that describes the horizontal and vertical resizing policy it prefers when being laid out. You can change this for a specific widget by changing its &lt;a href=&quot;qwidget#sizePolicy-prop&quot;&gt;QWidget::sizePolicy&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d1bd68bfbd9994032218254eff81d105799646" translate="yes" xml:space="preserve">
          <source>The size requested for the window geometry by the positioner object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40059d0f6682b091f1cdbe849582d81255b22ebb" translate="yes" xml:space="preserve">
          <source>The sizeHint() is a maximum. The widget can be shrunk any amount without detriment if other widgets need the space (e.g. a separator line). It cannot be larger than the size provided by sizeHint().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaee7cb44fa31de0d8db3a9ec0a476eadb36588" translate="yes" xml:space="preserve">
          <source>The sizeHint() is a sensible size, but the widget can be shrunk and still be useful. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a horizontal slider).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc7339ec976c70e32fe06ff662f47cae8bcef13" translate="yes" xml:space="preserve">
          <source>The sizeHint() is best, but the widget can be shrunk and still be useful. The widget can be expanded, but there is no advantage to it being larger than sizeHint() (the default &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; policy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489d4f1309097fe4f1bbc5582ea3880deb44b958" translate="yes" xml:space="preserve">
          <source>The sizeHint() is ignored. The widget will get as much space as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836bf25e7ce9fe423bb010483d590fadcb86091a" translate="yes" xml:space="preserve">
          <source>The sizeHint() is minimal, and sufficient. The widget can be expanded, but there is no advantage to it being larger (e.g. the horizontal direction of a push button). It cannot be smaller than the size provided by sizeHint().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0429eff7f14673719920eefec32cd463568a28e9" translate="yes" xml:space="preserve">
          <source>The sizeHint() is minimal, and sufficient. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a horizontal slider).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242646025c55f21f9d0420ab70a4f29e2c92e5a8" translate="yes" xml:space="preserve">
          <source>The skeleton has not been loaded yet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ee8366d6ce883516f3a28f5aa77ced492a4772" translate="yes" xml:space="preserve">
          <source>The skeleton was successfully loaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58f6e3f925895c8e5a5cd1b8a0c3c11c4485196" translate="yes" xml:space="preserve">
          <source>The slider can be styled using the &lt;a href=&quot;#handle-sub&quot;&gt;::handle&lt;/a&gt; subcontrol. Setting the &lt;a href=&quot;#min-width-prop&quot;&gt;min-width&lt;/a&gt; or &lt;a href=&quot;#min-height-prop&quot;&gt;min-height&lt;/a&gt; provides size contraints for the slider depending on the orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fcc564c24226afcf7c3e90af2ff9865886e919" translate="yes" xml:space="preserve">
          <source>The slider does not snap (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4c61ea48b1a3f24360012968c60b705b209997" translate="yes" xml:space="preserve">
          <source>The slider does not snap while being dragged, but only after the handle is released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e5839116490d1307eea05da83a658d91b91540" translate="yes" xml:space="preserve">
          <source>The slider forces the value to be within the legal range: &lt;a href=&quot;qabstractslider#minimum-prop&quot;&gt;minimum&lt;/a&gt; &amp;lt;= &lt;code&gt;value&lt;/code&gt; &amp;lt;= &lt;a href=&quot;qabstractslider#maximum-prop&quot;&gt;maximum&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051c1bdab1d246601df0c604b8a11a3ba68bba25" translate="yes" xml:space="preserve">
          <source>The slider is a complex control that functions as a &lt;a href=&quot;qaccessible#RelationFlag-enum&quot;&gt;Controller&lt;/a&gt; for its accessible children. This relationship must be known by the interface (for &lt;a href=&quot;qaccessibleinterface#parent&quot;&gt;parent()&lt;/a&gt;, &lt;a href=&quot;qaccessibleinterface#child&quot;&gt;child()&lt;/a&gt; and &lt;a href=&quot;qaccessibleinterface#relations&quot;&gt;relations()&lt;/a&gt;). This can be done using a controlling signal, which is a mechanism provided by &lt;a href=&quot;qaccessiblewidget&quot;&gt;QAccessibleWidget&lt;/a&gt;. We do this in the constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f49c18397ee5235789bea658fe23aaa9b0ff4a9" translate="yes" xml:space="preserve">
          <source>The slider is the classic control for providing a bounded value. It lets the user move a slider handle along a horizontal or vertical groove and translates the handle's position into a value within the legal range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd24718fb67d04f5ff21b7bcc4e0c59ea72aae9" translate="yes" xml:space="preserve">
          <source>The slider is the classic widget for controlling a bounded value. It lets the user move a slider handle along a horizontal or vertical groove and translates the handle's position into an integer value within the legal range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150f674d56d6ed80eaed58e61dc440cf2585e3cf" translate="yes" xml:space="preserve">
          <source>The slider itself can be controlled by using the &lt;a href=&quot;qabstractslider#triggerAction&quot;&gt;triggerAction()&lt;/a&gt; function to simulate user interaction with the scroll bar controls. This is useful if you have many different widgets that use a common range of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8260fe82a65f88ee039a3fd9c6d907bd997d8a41" translate="yes" xml:space="preserve">
          <source>The slider snaps while the handle is dragged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f871f3db07f872f83b130fdc91ebb0cff8c9ef3e" translate="yes" xml:space="preserve">
          <source>The slider style allows you to create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-slider&quot;&gt;Slider&lt;/a&gt; control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcda2fcafcf426e1697472b50dd8e2c2cedb81a" translate="yes" xml:space="preserve">
          <source>The slider value is by default in the range [0, 1]. If integer values are needed, you can set the &lt;a href=&quot;qml-qtquick-controls-slider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a354201b3678783ed42c26cc4870f02476a60f69" translate="yes" xml:space="preserve">
          <source>The slot connected to by the above code could be something similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe46305fe52aebcaec65acb64559e4b98fdbe31f" translate="yes" xml:space="preserve">
          <source>The slot connected to this signal can read the data on the clipboard using one of the MIME types that can be used to represent it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa1e8a54c7de8c846fdecbae43bf10074f64972" translate="yes" xml:space="preserve">
          <source>The slot is invoked immediately when the signal is emitted. The slot is executed in the signalling thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9627f3ee2179e6ac96a49ef335f4b908a27bc4" translate="yes" xml:space="preserve">
          <source>The slot is invoked when control returns to the event loop of the receiver's thread. The slot is executed in the receiver's thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4a352409c319e77ec564304f1677a30d49a409" translate="yes" xml:space="preserve">
          <source>The slot is invoked when the results are ready. The results are stored in a &lt;a href=&quot;qhostinfo&quot;&gt;QHostInfo&lt;/a&gt; object. Call &lt;a href=&quot;qhostinfo#addresses&quot;&gt;addresses&lt;/a&gt;() to get the list of IP addresses for the host, and &lt;a href=&quot;qhostinfo#hostName&quot;&gt;hostName&lt;/a&gt;() to get the host name that was looked up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d558370f6aec0d6dd7c2636f5c90d2a2c82b992d" translate="yes" xml:space="preserve">
          <source>The slots could be connected to &lt;a href=&quot;qtoolbutton&quot;&gt;QToolButtons&lt;/a&gt; with &lt;a href=&quot;qabstractbutton#autoRepeat-prop&quot;&gt;autoRepeat&lt;/a&gt; enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fae843f33ee3535ba56b0fe2ee7b47373345788" translate="yes" xml:space="preserve">
          <source>The slots manipulating the property editor's state are the &lt;a href=&quot;qdesignerpropertyeditorinterface#setObject&quot;&gt;setObject&lt;/a&gt;() slot that you can use to change the currently selected object in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd92a0c591599f092301af7a3bab2873e8032835" translate="yes" xml:space="preserve">
          <source>The slowest, but easiest way to use is to use the control's full name, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11ae52320e75a90400ecdb4a42d808f86aaf3cb" translate="yes" xml:space="preserve">
          <source>The small pixmap on the right side of a &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;ClassicStyle&lt;/a&gt; or &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;ModernStyle&lt;/a&gt; page header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d29eac8000265ffba5b35bb43c23fea9600370e" translate="yes" xml:space="preserve">
          <source>The smaller of two natural steps that an abstract sliders provides and typically corresponds to the user pressing an arrow key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0778096e8ff2853f61a020ceee905719818937" translate="yes" xml:space="preserve">
          <source>The smallest readable system font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d3164a3af02e151a170d9c1f92ee54ba320958" translate="yes" xml:space="preserve">
          <source>The smallest rectangle that contains all the lines in the layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681bc4d0e8a69a56f70d793e7aa799bc61e6c065" translate="yes" xml:space="preserve">
          <source>The smallest value allowed by the dial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938bc37aadc1ec9453218c790ab20ffb2717c250" translate="yes" xml:space="preserve">
          <source>The smallest value of the box-and-whiskers item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab5423fbdcc1b65d48666bbb723cafdd3cdc139" translate="yes" xml:space="preserve">
          <source>The snap mode determines how the slider handle behaves with regards to the &lt;a href=&quot;qml-qtquick-controls2-slider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae00587cc0b73eeebfabc0c51631f112eb9df0b4" translate="yes" xml:space="preserve">
          <source>The snap mode determines how the slider handles behave with regards to the &lt;a href=&quot;qml-qtquick-controls2-rangeslider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a36fb32b201bfa1d21835cc4d55c85f1e98fc2" translate="yes" xml:space="preserve">
          <source>The snap mode works with the &lt;a href=&quot;qml-qtquick-controls2-dial#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; to allow the handle to snap to certain points along the dial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7fbc1a277fdced34da81f0be9e23ac6db1ddb6" translate="yes" xml:space="preserve">
          <source>The snippet above shows how the inclusion of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f81cb02e310776ad5a7befee764aab9bb22c323" translate="yes" xml:space="preserve">
          <source>The snippet below uses &lt;code&gt;searchAllStations&lt;/code&gt; with &lt;code&gt;SearchGetStationId&lt;/code&gt; to receive all the radio stations in the current band, and store them in a &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt;. The station Id is shown to the user and if the user presses a station, the radio is tuned to this station.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e9938cffb7fcb65971e39b0e230c22c6ee76e7" translate="yes" xml:space="preserve">
          <source>The snippet code will replace any instances of &lt;code&gt;\\pi&lt;/code&gt; with &lt;code&gt;&amp;amp;Pi&lt;/code&gt;; in the HTML file, which will appear as the Greek &amp;Pi; symbol when viewed in browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8784fc8b2fc883183b878724b0e17d03db4ff2" translate="yes" xml:space="preserve">
          <source>The socket descriptor is not available when &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; is in &lt;a href=&quot;qabstractsocket#SocketState-enum&quot;&gt;UnconnectedState&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafe633df5228181ef9b055d9e6286a2f4b96bd6" translate="yes" xml:space="preserve">
          <source>The socket descriptor is not available when &lt;a href=&quot;qlocalsocket&quot;&gt;QLocalSocket&lt;/a&gt; is in &lt;a href=&quot;qlocalsocket#LocalSocketState-enum&quot;&gt;UnconnectedState&lt;/a&gt;. The type of the descriptor depends on the platform:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a9430debc15fd585c6b3e76e07b949d11eeddd" translate="yes" xml:space="preserve">
          <source>The socket emits the &lt;a href=&quot;qiodevice#bytesWritten&quot;&gt;bytesWritten&lt;/a&gt;() signal every time a datagram is written to the network. If you just want to send datagrams, you don't need to call &lt;a href=&quot;qabstractsocket#bind&quot;&gt;bind&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f9b9d63ec16fd6151a53e39aa8372eb6ccfa8e" translate="yes" xml:space="preserve">
          <source>The socket first enters &lt;a href=&quot;qbluetoothsocket#SocketState-enum&quot;&gt;ConnectingState&lt;/a&gt; and attempts to connect to the device providing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5d8a9174a7bb759c63b4b9f40114e40bfb2bb9" translate="yes" xml:space="preserve">
          <source>The socket first enters &lt;a href=&quot;qbluetoothsocket#SocketState-enum&quot;&gt;ConnectingState&lt;/a&gt;, and attempts to connect to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6dc14ad06e98c64ed5e017d5f819e7ba0668ac" translate="yes" xml:space="preserve">
          <source>The socket has started establishing a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1479cd71146eb19e5796e62baee95f1f6d040d3" translate="yes" xml:space="preserve">
          <source>The socket identifier is passed in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1979af0d8876c49b5162265ab024810cbb584b" translate="yes" xml:space="preserve">
          <source>The socket is a client-side SSL socket. It is either alreayd encrypted, or it is in the SSL handshake phase (see &lt;a href=&quot;qsslsocket#isEncrypted&quot;&gt;QSslSocket::isEncrypted&lt;/a&gt;()).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c885d003d1fc8042223138bd847da51b73b99793" translate="yes" xml:space="preserve">
          <source>The socket is a server-side SSL socket. It is either already encrypted, or it is in the SSL handshake phase (see &lt;a href=&quot;qsslsocket#isEncrypted&quot;&gt;QSslSocket::isEncrypted&lt;/a&gt;()).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ebe5371eb6aed9a23242e3dd7ba7b4467ae5d3" translate="yes" xml:space="preserve">
          <source>The socket is about to close (data may still be waiting to be written).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefad64ade0b569409ed87bc90fb23280dc4340d" translate="yes" xml:space="preserve">
          <source>The socket is assumed to be in listening state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86529eb89e6225da9a2aeb3bfb757249d00a7cee" translate="yes" xml:space="preserve">
          <source>The socket is bound to an address and port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8580df2fbaa8765c746386781da983038a36ec6f" translate="yes" xml:space="preserve">
          <source>The socket is created as a child of the server, which means that it is automatically deleted when the &lt;a href=&quot;qlocalserver&quot;&gt;QLocalServer&lt;/a&gt; object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5652264bf569a83d4c3f178591ce4a8574d649d" translate="yes" xml:space="preserve">
          <source>The socket is created as a child of the server, which means that it is automatically deleted when the &lt;a href=&quot;qsctpserver&quot;&gt;QSctpServer&lt;/a&gt; object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04aa93b859a27e5f288c44a4227b8e4579d32d8e" translate="yes" xml:space="preserve">
          <source>The socket is created as a child of the server, which means that it is automatically deleted when the &lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer&lt;/a&gt; object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108c8f0a47315a3d42394e6a5e156159fa1c5e8c" translate="yes" xml:space="preserve">
          <source>The socket is not connected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781f185451015c13ca53edc0b479c7085b79dd77" translate="yes" xml:space="preserve">
          <source>The socket is opened in the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839a9ae9c141195ccc73e559b49905d716bb0483" translate="yes" xml:space="preserve">
          <source>The socket is performing a host name lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4169f3c1b57c6d132c184a3da818386f57f98400" translate="yes" xml:space="preserve">
          <source>The socket is unencrypted. Its behavior is identical to &lt;a href=&quot;qtcpsocket&quot;&gt;QTcpSocket&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3143f2371bc008731b5fab8cde8fc9ebea2c67ff" translate="yes" xml:space="preserve">
          <source>The socket is using a proxy, and the proxy requires authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d35341ffc0350d66f3f5c9f51f1c66daba43ede" translate="yes" xml:space="preserve">
          <source>The socket operation failed because the application lacked the required privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc3bb6c8e9419a39f2be47f3609245d4e3a73ce" translate="yes" xml:space="preserve">
          <source>The socket operation timed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339a98104212173ffe06092d924fc091a0e0f621" translate="yes" xml:space="preserve">
          <source>The socket's cryptographic cipher suite can be customized before the handshake phase with &lt;a href=&quot;qsslconfiguration#setCiphers&quot;&gt;QSslConfiguration::setCiphers&lt;/a&gt;() and QSslConfiguration::setDefaultCiphers().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d52f882f08a7911d7ae394e82e5d8069eddd93" translate="yes" xml:space="preserve">
          <source>The socket's local certificate and private key can be customized before the handshake phase with &lt;a href=&quot;qsslsocket#setLocalCertificate&quot;&gt;setLocalCertificate&lt;/a&gt;() and &lt;a href=&quot;qsslsocket#setPrivateKey&quot;&gt;setPrivateKey&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea721008d9cc9520af1a4ca910cba3bea9ddc7a" translate="yes" xml:space="preserve">
          <source>The socket's private key is set to the constructed key. The private key and the local &lt;a href=&quot;qsslcertificate&quot;&gt;certificate&lt;/a&gt; are used by clients and servers that must prove their identity to SSL peers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfb8eb926f5ccc8e8b62ea0149772dc9f473d52" translate="yes" xml:space="preserve">
          <source>The soft shadow is created by blurring the image live using a gaussian blur. Performing blur live is a costly operation. Fullscreen gaussian blur with even a moderate number of samples will only run at 60 fps on highend graphics hardware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9e14e28c70b135bf862f1dade1f50ef0f99c79" translate="yes" xml:space="preserve">
          <source>The software backend exposes its &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt; and saves and restores before and after invoking &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;(). Therefore reporting any changed states from here is not necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07aca885369650a65cbe7836047ba5073635eea3" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cc57628c16f4b787531b930459abbf5af0d128" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to change the size of the byte array, call &lt;a href=&quot;qbytearray#resize&quot;&gt;resize&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9183e0ad2af83a47e7cd7f8e0f27927fdbc1b0" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many bytes are in the byte array, call &lt;a href=&quot;qbytearray#size&quot;&gt;size&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce202e784757206dced4e72af009a0e0b59addd9" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceaa48ec5cecd0c2a31d385fc4eaa693dc2129a" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the hash, call &lt;a href=&quot;qhash#size&quot;&gt;size&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4ee2dbbd2aa385660ae3a5a433679d0c569526" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea278b7c899a7b75b0adcf07d94b268de4b8959" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the set, call &lt;a href=&quot;qset#size&quot;&gt;size&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfd4ad7a7c02d0a22c98605702bb6a8b3948c06" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17fb6ce0ed5b6e84b4c4bdd953a5be1d17bdb21" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to change the size of the string, call &lt;a href=&quot;qstring#resize&quot;&gt;resize&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a892d010f9dadd2d60a1e6e32071cf1e7297a99" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many characters are in the string, call &lt;a href=&quot;qstring#size&quot;&gt;size&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee41b9ce0b4ad01ec1aee52c1f7a49be9d633d88" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qvarlengtharray&quot;&gt;QVarLengthArray&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dcf050d8e45690337f0094595a41481d73c0f1" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qvarlengtharray&quot;&gt;QVarLengthArray&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to change the size of the array, call &lt;a href=&quot;qvarlengtharray#resize&quot;&gt;resize&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30725e9e2ac89f43ee987fe96a0293ec6bd47b43" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qvarlengtharray&quot;&gt;QVarLengthArray&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the array, call &lt;a href=&quot;qvarlengtharray#size&quot;&gt;size&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e72d029a63fbde628e5aa3dd3f958692a4a371" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qvector&quot;&gt;QVector&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae35706e24f840f79ff304e9b3d3835232b59e0" translate="yes" xml:space="preserve">
          <source>The sole purpose of this function is to provide a means of fine tuning &lt;a href=&quot;qvector&quot;&gt;QVector&lt;/a&gt;'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the vector, call &lt;a href=&quot;qvector#size&quot;&gt;size&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e395a1e4ad7863486333f50146878b426b5e08c" translate="yes" xml:space="preserve">
          <source>The solution would be to have some means of identifying the first occurrence of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10afda9808846e7adb11a72975dda16fa6dfa1ec" translate="yes" xml:space="preserve">
          <source>The sort indicator can be styled using the &lt;a href=&quot;#up-arrow-sub&quot;&gt;::up-arrow&lt;/a&gt; and the &lt;a href=&quot;#down-arrow-sub&quot;&gt;::down-arrow&lt;/a&gt; Sub-control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da47af154e03b8d58bdc4c32ddd2c48e22917c3e" translate="yes" xml:space="preserve">
          <source>The sort order (i.e ascending or descending order) of the model is determined dynamically by inspecting the contents of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f411b633ec2927852a33d1caa771b3f519490ddf" translate="yes" xml:space="preserve">
          <source>The sorting in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b1ee9590e5bb1dcba2cb9bf8e8580ff7bfb648" translate="yes" xml:space="preserve">
          <source>The source URL of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f1622737932937b3eacfadc3bd9def1d6624fe" translate="yes" xml:space="preserve">
          <source>The source URL to the menu item's icon. Undefined if it has no icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bbc093f07116fe361b53fbda151febdacf0097" translate="yes" xml:space="preserve">
          <source>The source and destination colors are inverted and then multiplied. Screening a color with white produces white, whereas screening a color with black leaves the color unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e26d29d55ba51281fbe87d45e604aa35f5f8a72" translate="yes" xml:space="preserve">
          <source>The source and header file of the custom widget can be shared between the application and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8741188475f8882dfff846130bc887c86fe0da30" translate="yes" xml:space="preserve">
          <source>The source and target widgets can be found with &lt;a href=&quot;qdrag#source&quot;&gt;source&lt;/a&gt;() and &lt;a href=&quot;qdrag#target&quot;&gt;target&lt;/a&gt;(). These functions are often used to determine whether drag and drop operations started and finished at the same widget, so that special behavior can be implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f9a011e5a76ccea8e359590ee591cad40e1a45" translate="yes" xml:space="preserve">
          <source>The source being monitored does not need to be active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5fb23bfc48f564e8298fcb6c89d56c3153fa9c" translate="yes" xml:space="preserve">
          <source>The source can be used to distinguish between events that come from a mouse with a physical wheel and events that are generated by some other means, such as a flick gesture on a touchpad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79cdf6a06196181f1764d8124d7a49ca3edd4474" translate="yes" xml:space="preserve">
          <source>The source code for a custom widget is not available, or the user interface designers are unable to use the widget for non-technical reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b98ec13449821dfb2ea3f026695bd34a606afa" translate="yes" xml:space="preserve">
          <source>The source code of the example files can be found in the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b736b85533672431326676d2a151df5de509ca30" translate="yes" xml:space="preserve">
          <source>The source code returned from &lt;a href=&quot;qsgmaterialshader#vertexShader&quot;&gt;vertexShader&lt;/a&gt;() is used to control what the material does with the vertiex data that comes in from the geometry. The source code returned from the &lt;a href=&quot;qsgmaterialshader#fragmentShader&quot;&gt;fragmentShader&lt;/a&gt;() is used to control what how the material should fill each individual pixel in the geometry. The vertex and fragment source code is queried once during initialization, changing what is returned from these functions later will not have any effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707bcd26486a84e87fa3e28e31cc25c649a345cd" translate="yes" xml:space="preserve">
          <source>The source device can only be set once and must be set before calling &lt;a href=&quot;qnmeapositioninfosource#startUpdates&quot;&gt;startUpdates&lt;/a&gt;() or &lt;a href=&quot;qnmeapositioninfosource#requestUpdate&quot;&gt;requestUpdate&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2bca5553dfc43be75f1aa8f3abd15083b1ea3b" translate="yes" xml:space="preserve">
          <source>The source device for the &lt;a href=&quot;qt3dinput-qabstractaxisinput&quot;&gt;QAbstractAxisInput&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494bff1e2191272e07da567f127cfcbb23124b50" translate="yes" xml:space="preserve">
          <source>The source file is closed before it is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde0df0d102eaef4f741a50135ff55c8b9c73c9f" translate="yes" xml:space="preserve">
          <source>The source image may not be loaded instantaneously, depending on its original location. Loading progress can be monitored with the &lt;a href=&quot;qml-qtquick-borderimage#progress-prop&quot;&gt;progress&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a884c05d5363f7a7c8fc5d9717e6bbee2dad2b" translate="yes" xml:space="preserve">
          <source>The source image to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ef6fee861b09cc6b2b13e12e8c33c381a151ec" translate="yes" xml:space="preserve">
          <source>The source image to generate the turbulence from. It will be scaled to the size of the element, so equal or larger sizes will give better results. Tweaking this image is the only way to tweak behavior such as where vortices are or how many exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7296f4bd50f4bc2aa87cad9f2001aec0582dc4" translate="yes" xml:space="preserve">
          <source>The source image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f2a0226e86633c4d29b4f3e812a67531ac1a8f" translate="yes" xml:space="preserve">
          <source>The source is loaded and ready for play.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0ee8dfde25a0416bb19015fe13f4aca7cde3f9" translate="yes" xml:space="preserve">
          <source>The source of NMEA data is set with &lt;a href=&quot;qnmeapositioninfosource#setDevice&quot;&gt;setDevice&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d416e2ee59ec2e86daa375dec3a2d7a8a1c2a421" translate="yes" xml:space="preserve">
          <source>The source of the event is specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c8432dc7ca1de402b276422691e155e4f1738e" translate="yes" xml:space="preserve">
          <source>The source of the image is specified as a URL using the &lt;a href=&quot;qml-qtquick-image#source-prop&quot;&gt;source&lt;/a&gt; property. Images can be supplied in any of the standard image formats supported by Qt, including bitmap formats such as PNG and JPEG, and vector graphics formats such as SVG. If you need to display animated images, use &lt;a href=&quot;qml-qtquick-animatedsprite&quot;&gt;AnimatedSprite&lt;/a&gt; or &lt;a href=&quot;qml-qtquick-animatedimage&quot;&gt;AnimatedImage&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ce0519910b424d94b6ed7181d80a431d9ea503" translate="yes" xml:space="preserve">
          <source>The source of the message is invalid; this is the source of a default-constructed &lt;a href=&quot;qopengldebugmessage&quot;&gt;QOpenGLDebugMessage&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883bcac21f490719fc84af9b1c3aabee56fa745f" translate="yes" xml:space="preserve">
          <source>The source pixel is blended on top of the destination, with the alpha of the source pixel reduced by the alpha of the destination pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a472fa1642880a1e562041007cc3a25cffd2a6ce" translate="yes" xml:space="preserve">
          <source>The source rect contents will be transformed according to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bf8e964eb157494069beca241d4f6f7e2405a5" translate="yes" xml:space="preserve">
          <source>The source should be a relatively smooth black and white noise image, such as perlin noise. A default image will be used if none is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10523320d0ce68a76b327bdc5a1092484915aca3" translate="yes" xml:space="preserve">
          <source>The source should be relatively smooth black and white noise, such as perlin noise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956c4599478eb95054fec0ea108d92ecf37b537e" translate="yes" xml:space="preserve">
          <source>The source state (parent) of this transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38350bb983686d05e2be17f11216a706dc042eb4" translate="yes" xml:space="preserve">
          <source>The source, whose alpha is reduced with the inverse of the destination alpha, is merged with the destination, whose alpha is reduced by the inverse of the source alpha. CompositionMode_Xor is not the same as the bitwise Xor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c07598e2d74a58a1ca75114306e8b14c69ab0e" translate="yes" xml:space="preserve">
          <source>The sourceAxisType property specifies how the accumulator treats the values from the source axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d706c2a94be1186a7f3e86b8a5de3aed8a781e22" translate="yes" xml:space="preserve">
          <source>The sourceState() property has the source of the transition. The &lt;a href=&quot;qml-qtqml-statemachine-qabstracttransition#targetState-prop&quot;&gt;targetState&lt;/a&gt; and &lt;a href=&quot;qml-qtqml-statemachine-qabstracttransition#targetStates-prop&quot;&gt;targetStates&lt;/a&gt; properties return the target(s) of the transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f23013f0600e6cbace8e98bae1b7a62d0ab009" translate="yes" xml:space="preserve">
          <source>The spacing an anchor will get depends on the type of anchor. For instance, anchors from the Right edge of one item to the Left edge of another (or vice versa) will use the default horizontal spacing. The same behaviour applies to Bottom to Top anchors, (but they will use the default vertical spacing). For all other anchor combinations, the spacing will be 0. All anchoring functions will follow this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10f5e8c2dc5cd188522b37865bfbb402ebaac3b" translate="yes" xml:space="preserve">
          <source>The spacing between a check box indicator and its label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b27db2dc34131b12cee3fc0c86bc419acab57f" translate="yes" xml:space="preserve">
          <source>The spacing between a radio button indicator and its label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c52f530e67e06843ec4f7d42a370daddc1e1969" translate="yes" xml:space="preserve">
          <source>The spacing between indicator and label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664c82750b0ecf5d892540c3e55bade3403b3de8" translate="yes" xml:space="preserve">
          <source>The spacing can also be set manually by using &lt;a href=&quot;qgraphicsanchor#spacing-prop&quot;&gt;QGraphicsAnchor::setSpacing&lt;/a&gt;() method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784d2c560002766ac734875a1f860142b3db5c5a" translate="yes" xml:space="preserve">
          <source>The spacing is the amount in pixels left empty between adjacent items. The amount of spacing applied will be the same in the horizontal and vertical directions. The default spacing is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceec7982eb2df20c19f1048d909c9880bf9a1212" translate="yes" xml:space="preserve">
          <source>The spacing is the amount in pixels left empty between adjacent items. The default spacing is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370de26df7d1a105cd4ff2c75d73443eed46fd1c" translate="yes" xml:space="preserve">
          <source>The spacing of the items along the Path can be adjusted via a &lt;a href=&quot;qml-qtquick-pathpercent&quot;&gt;PathPercent&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ed3130309f7cdfe02b22fb6a5a0d3f07ace008" translate="yes" xml:space="preserve">
          <source>The span of the slice in degrees. A full pie is 360 degrees, where 0 degrees is at 12 a'clock. Updated automatically once the slice is added to the series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8453bf4d2afac9a1ecd50e09a3b3ba6b96ef231f" translate="yes" xml:space="preserve">
          <source>The spatial constraint for a tap or long press gesture to be recognized, in addition to the constraint that the release must occur before &lt;a href=&quot;qml-qtquick-taphandler#longPressThreshold-prop&quot;&gt;longPressThreshold&lt;/a&gt; has elapsed. If these constraints are not satisfied, the &lt;a href=&quot;qml-qtquick-taphandler#tapped-signal&quot;&gt;tapped&lt;/a&gt; signal is not emitted, and &lt;a href=&quot;qml-qtquick-taphandler#tapCount-prop&quot;&gt;tapCount&lt;/a&gt; is not incremented. If the spatial constraint is violated, &lt;a href=&quot;qml-qtquick-taphandler#pressed-prop&quot;&gt;pressed&lt;/a&gt; transitions immediately from true to false, regardless of the time held.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe69e1ce62c3bbab60676ae62b77d9ff94d320c" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;$$[...]&lt;/code&gt; operator can be used to access qmake properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7889037608bd11b3e854c28f9b9a352e6539a3b7" translate="yes" xml:space="preserve">
          <source>The special feature of this file is the &lt;code&gt;FORMS&lt;/code&gt; declaration that tells &lt;code&gt;qmake&lt;/code&gt; which files to process with &lt;code&gt;uic&lt;/code&gt;. In this case, the &lt;code&gt;calculatorform.ui&lt;/code&gt; file is used to create a &lt;code&gt;ui_calculatorform.h&lt;/code&gt; file that can be used by any file listed in the &lt;code&gt;SOURCES&lt;/code&gt; declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e149f37dcc1e8110200a6e1043d7d8aaad0b1e6e" translate="yes" xml:space="preserve">
          <source>The specification does not clearly indicate what sorting order should be done for values of different types (it says sorting should not pay &quot;attention to the 3/5 bit splitting for major types&quot;). &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; makes the assumption that types should be sorted too. The numeric values of the &lt;a href=&quot;qcborvalue#Type-enum&quot;&gt;QCborValue::Type&lt;/a&gt; enumeration are in that order, with the exception of the extended types, which compare as their tagged equivalents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e82277d3493b0b650f47f907c9957c194b29c5f" translate="yes" xml:space="preserve">
          <source>The specifications discusses conformance further: &lt;a href=&quot;http://www.w3.org/TR/xquery/&quot;&gt;XQuery 1.0: An XML Query Language&lt;/a&gt;. W3C's XQuery testing effort can be of interest as well, &lt;a href=&quot;http://www.w3.org/XML/Query/test-suite/&quot;&gt;XML Query Test Suite&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5249ead0cea582438ce306dee2ff065c9121394e" translate="yes" xml:space="preserve">
          <source>The specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86839ebabf3538c8763e7d531596c634ccbc32aa" translate="yes" xml:space="preserve">
          <source>The specified FBO must be created in the context of the window or one that shares with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3d20809babb30e5e1b79aa4514e46282dfcef0" translate="yes" xml:space="preserve">
          <source>The specified fbo must be created in the context of the window or one that shares with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16615f092e2c6c61d84b43611286fb37f6c19daf" translate="yes" xml:space="preserve">
          <source>The specified font families (set by &lt;a href=&quot;qfont#setFamilies&quot;&gt;setFamilies&lt;/a&gt;()) are searched for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb259104b0fb87afcede47742b1ed3a920b680e" translate="yes" xml:space="preserve">
          <source>The specified image conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f406fca7127609cfe4f110abea18beaf23406a" translate="yes" xml:space="preserve">
          <source>The specified page range should be printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257ad4f61e22e1b6f96c9f04a32742cced39befb" translate="yes" xml:space="preserve">
          <source>The specified text should be a short user-readable string describing what this command does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9706b01c216929ef060cbe3589d719d992259dcc" translate="yes" xml:space="preserve">
          <source>The specular light strength for selected objects. The value must be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;10.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8cd7d3a3ffe8ea50be93d7eec45d476760238b" translate="yes" xml:space="preserve">
          <source>The specular light strength for the whole graph. The value must be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;10.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce8eadfdac8e9b25d602f63828804f2379f9812" translate="yes" xml:space="preserve">
          <source>The specular lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components are controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac69bc255a25c581b9cb977daebd9abbd2d26db6" translate="yes" xml:space="preserve">
          <source>The speed is measured in percentage of the original animated image speed. The default speed is 1.0 (original speed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574fd0de947fbf9e05ee4b599533e09d34d28699" translate="yes" xml:space="preserve">
          <source>The speed is measured in percentage of the original movie speed. The default speed is 100%. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a29a991314e4d9a7e1a2a234e355de0e471463a" translate="yes" xml:space="preserve">
          <source>The spinbox will revert to the last valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa418f03794d74ed73c33f475bbd5e5decef3fa3" translate="yes" xml:space="preserve">
          <source>The spinbox will revert to the nearest valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c87d92578a7dff7ea33178f70fa29d363f05e33" translate="yes" xml:space="preserve">
          <source>The splash screen appears in the center of the screen. It may be useful to add the &lt;a href=&quot;qt#WindowType-enum&quot;&gt;Qt::WindowStaysOnTopHint&lt;/a&gt; to the splash widget's window flags if you want to keep it above all the other windows on the desktop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a619f111b7aba029ccfbad5669158b38e5f4c5" translate="yes" xml:space="preserve">
          <source>The spot metering point is only used with spot metering mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ea3680e313f1edca2f565bfd8535111519a869" translate="yes" xml:space="preserve">
          <source>The sprite engine internally copies and cuts up images to fit in an easier-to-read internal format, which leads to some graphics memory limitations. Because it requires all the sprites for a single engine to be in the same texture, attempting to load many different animations can run into texture memory limits on embedded devices. In these situations, a warning will be output to the console containing the maximum texture size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a75b67ea9bcb4b8fad38d212c69f03edc86f25" translate="yes" xml:space="preserve">
          <source>The sprite or sprites to draw. Sprites will be scaled to the size of this item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadaaaae6c2c97b26774fb65e54c56cac9c74ab9" translate="yes" xml:space="preserve">
          <source>The sprite or sprites used to draw this particle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d4c9869d1c63556ceec6da5ea2546567f5e048" translate="yes" xml:space="preserve">
          <source>The stack becomes enabled and appropriate signals are emitted when &lt;a href=&quot;qundostack#endMacro&quot;&gt;endMacro&lt;/a&gt;() is called for the outermost macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1fc5134e807181732e6d6c75bc9ae00b5c6fd7" translate="yes" xml:space="preserve">
          <source>The stack can be set explicitly with &lt;a href=&quot;qundoview#setStack&quot;&gt;setStack&lt;/a&gt;(). Alternatively, a &lt;a href=&quot;qundogroup&quot;&gt;QUndoGroup&lt;/a&gt; object can be set with &lt;a href=&quot;qundoview#setGroup&quot;&gt;setGroup&lt;/a&gt;(). The view will then update itself automatically whenever the active stack of the group changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2abc9c1d7aeb658c22001d4dcd91173ac10459" translate="yes" xml:space="preserve">
          <source>The stack now contains a single item: &lt;code&gt;[A]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc1b57bc12dc7107417bfcd12fc099754c92730" translate="yes" xml:space="preserve">
          <source>The stack now contains the following items: &lt;code&gt;[A, B, C]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17534ff642479a5f6931e89781998e087d118389" translate="yes" xml:space="preserve">
          <source>The stack now contains the following items: &lt;code&gt;[A, B, D]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a0dce6099d88daf08983f3756382b3b91ab75c" translate="yes" xml:space="preserve">
          <source>The stack now contains the following items: &lt;code&gt;[A, B]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaeb7cf9a95e67316d8e5eda515b4126e848e22b" translate="yes" xml:space="preserve">
          <source>The stacking order of two sibling items also counts for each item's children and descendant items. So if one item is on top of another, then all its children will also be on top of all the other item's children as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e08c0058e9483166601b6d7bc46194445154477" translate="yes" xml:space="preserve">
          <source>The standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b8c5efa0869fe4b29e785455ad1de5ea1b501a" translate="yes" xml:space="preserve">
          <source>The standard &lt;a href=&quot;qstyleditemdelegate&quot;&gt;QStyledItemDelegate&lt;/a&gt; class informs the view when it has finished editing by emitting the &lt;a href=&quot;qabstractitemdelegate#closeEditor&quot;&gt;closeEditor()&lt;/a&gt; signal. The view ensures that the editor widget is closed and destroyed. In this example, we only provide simple editing facilities, so we need never emit this signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9ebacc9413b226158fffc3d0ce51814ca908fa" translate="yes" xml:space="preserve">
          <source>The standard C++ object model provides very efficient runtime support for the object paradigm. But its static nature is inflexibile in certain problem domains. Graphical user interface programming is a domain that requires both runtime efficiency and a high level of flexibility. Qt provides this, by combining the speed of C++ with the flexibility of the Qt Object Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594e6fdcb2771f2f7ffde626d56360c425617012" translate="yes" xml:space="preserve">
          <source>The standard ECMAScript built-ins are not explicitly documented in the QML documentation. For more information on their use, please refer to the ECMA-262 7th edition standard or one of the many online JavaScript reference and tutorial sites, such as the &lt;a href=&quot;http://www.w3schools.com/jsref/default.asp#&quot;&gt;W3Schools JavaScript Reference&lt;/a&gt; (JavaScript Objects Reference section). Many sites focus on JavaScript in the browser, so in some cases you may need to double check the specification to determine whether a given function or object is part of standard ECMAScript or specific to the browser environment. In the case of the W3Schools link above, the &lt;code&gt;JavaScript Objects Reference&lt;/code&gt; section generally covers the standard, while the &lt;code&gt;Browser Objects Reference&lt;/code&gt; and &lt;code&gt;HTML DOM Objects Reference&lt;/code&gt; sections are browser specific (and thus not applicable to QML).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b241f02dfe18e01246a96e0059610a08f31c96d2" translate="yes" xml:space="preserve">
          <source>The standard ISO offset form of the time zone name, e.g. &quot;UTC+01:00&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e8aa7ae39d2846a7d844bc23139662f5b9ac6f" translate="yes" xml:space="preserve">
          <source>The standard arrow cursor is the default for widgets in a normal state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194f0c6539c95c5e5fefa4da5da0a8c07c655582" translate="yes" xml:space="preserve">
          <source>The standard arrow cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687bdb48e0e7ee7d07339ebd11447a2da96cdab2" translate="yes" xml:space="preserve">
          <source>The standard error (stderr) of the running process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20950cf56865d0fb3b942dac21a01dbfccacc563" translate="yes" xml:space="preserve">
          <source>The standard factory implementation provides editors for a variety of data types. These are created whenever a delegate needs to provide an editor for data supplied by a model. The following table shows the relationship between types and the standard editors provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e267bfa7bf5a06f20094a353e01577e4403efc1" translate="yes" xml:space="preserve">
          <source>The standard layout provided by Qt can handle simple word processing including inline images, lists and tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ced9b0dfff4a44590f9a4c7f778f880d687a321" translate="yes" xml:space="preserve">
          <source>The standard library of types and functionality for the QML language, which is provided by the Qt Quick module, and may be accessed with &quot;import &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtquick-qmlmodule.html&quot;&gt;QtQuick&lt;/a&gt; 2.3&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87863833db7caa81314de86ce4fd81f07f83d6e3" translate="yes" xml:space="preserve">
          <source>The standard output (stdout) of the running process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba3eaf46241fab02d05444481dab54513255d8a" translate="yes" xml:space="preserve">
          <source>The standard time in a time zone, i.e. when Daylight-Saving is not in effect. For example when formatting a display name this will show something like &quot;Pacific Standard Time&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b736383f3cde809f7db89ffe82d9130313b6556b" translate="yes" xml:space="preserve">
          <source>The standard view classes provide default selection models that can be used in most applications. A selection model belonging to one view can be obtained using the view's &lt;a href=&quot;qabstractitemview#selectionModel&quot;&gt;selectionModel()&lt;/a&gt; function, and shared between many views with &lt;a href=&quot;qabstractitemview#setSelectionModel&quot;&gt;setSelectionModel()&lt;/a&gt;, so the construction of new selection models is generally not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39400caccbe04043a92b08893bb201f111d52490" translate="yes" xml:space="preserve">
          <source>The standard views automatically support internal drag and drop, where items are moved around to change the order in which they are displayed. By default, drag and drop is not enabled for these views because they are configured for the simplest, most common uses. To allow items to be dragged around, certain properties of the view need to be enabled, and the items themselves must also allow dragging to occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff5dd462fbae79f8d9f51dc5e710bc5a2572db0" translate="yes" xml:space="preserve">
          <source>The standard views provided with Qt use instances of &lt;a href=&quot;qstyleditemdelegate&quot;&gt;QStyledItemDelegate&lt;/a&gt; to provide editing facilities. This default implementation of the delegate interface renders items in the usual style for each of the standard views: &lt;a href=&quot;qlistview&quot;&gt;QListView&lt;/a&gt;, &lt;a href=&quot;qtableview&quot;&gt;QTableView&lt;/a&gt;, and &lt;a href=&quot;qtreeview&quot;&gt;QTreeView&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52161a5f75d230b561debf31aee1f9b87a05cd26" translate="yes" xml:space="preserve">
          <source>The start angle is reported clockwise, with zero degrees at the 3 o'clock position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa52616e7256757dfcfc7be7e120ed3e13d6cea" translate="yes" xml:space="preserve">
          <source>The start position of the display text for a hypertext link has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fc82e5ed34a66572197a1054ab8017f17723c5" translate="yes" xml:space="preserve">
          <source>The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca6b3ec435e9e8b22ca1b4fe7391042911ca56b" translate="yes" xml:space="preserve">
          <source>The starting acceleraton of the particles emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7606ef7fcff1928ec685acacc2412201b0bf65aa" translate="yes" xml:space="preserve">
          <source>The starting and ending positions of table rows can be found by moving a cursor within a table, and using the &lt;a href=&quot;qtexttable#rowStart&quot;&gt;rowStart&lt;/a&gt;() and &lt;a href=&quot;qtexttable#rowEnd&quot;&gt;rowEnd&lt;/a&gt;() functions to obtain cursors at the start and end of each row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032e6b332d1dfc1e1663d8e1c868e442e7cf6deb" translate="yes" xml:space="preserve">
          <source>The starting angle of the pie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c2ad0aa40b060de291f1c0f2e1c871cb381551" translate="yes" xml:space="preserve">
          <source>The starting angle of this slice in the series it belongs to. A full pie is 360 degrees, where 0 degrees is at 12 a'clock. Updated automatically once the slice is added to the series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4e87630f12dcf59ad208b1a792a9baae230723" translate="yes" xml:space="preserve">
          <source>The starting point for the thread. After calling &lt;a href=&quot;qthread#start&quot;&gt;start&lt;/a&gt;(), the newly created thread calls this function. The default implementation simply calls &lt;a href=&quot;qthread#exec&quot;&gt;exec&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800008187bad688486f56cf5b4f12fa519503fa7" translate="yes" xml:space="preserve">
          <source>The starting velocity of the particles emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251253c98d5f692c3d8ce310c15a4ce803a76983" translate="yes" xml:space="preserve">
          <source>The startup ID of the first window comes from the environment variable DESKTOP_STARTUP_ID. This method is useful for subsequent windows, when the request comes from another process (e.g. via DBus).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a12c940d9adfb45bb072a0516d151c9970a2586" translate="yes" xml:space="preserve">
          <source>The state being changed in this event can be retrieved through</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591b11c7be843d1b4440398683159d78d0d4b842" translate="yes" xml:space="preserve">
          <source>The state being changed in this event can be retrieved through the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616f5fb4e2f0e94b55ee905727ddded8f3fb3ac5" translate="yes" xml:space="preserve">
          <source>The state being extended is treated as the base state in regards to the changes specified by the extending state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa0153c65423f257b944f189c421ec7cea31413" translate="yes" xml:space="preserve">
          <source>The state can be one of these two:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83409be4a8e9bf25a1be356b83b75d249733ce47" translate="yes" xml:space="preserve">
          <source>The state can only be obtained once the SSL connection starts, but not necessarily before it's done. Some settings may change during the course of the SSL connection without need to restart it (for instance, the cipher can be changed over time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cf1647182f7434b413589ef34d503425e13b3b" translate="yes" xml:space="preserve">
          <source>The state emits the &lt;a href=&quot;qml-qtqml-statemachine-state#finished-signal&quot;&gt;State::finished()&lt;/a&gt; signal when a final child state (&lt;a href=&quot;qml-qtqml-statemachine-finalstate&quot;&gt;FinalState&lt;/a&gt;) is entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb5acf517638167a4d8117093d3ff105782b4c1" translate="yes" xml:space="preserve">
          <source>The state emits the &lt;a href=&quot;qstate#finished&quot;&gt;QState::finished&lt;/a&gt;() signal when a final child state (&lt;a href=&quot;qfinalstate&quot;&gt;QFinalState&lt;/a&gt;) is entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25694c4d0315cb642f92ce1a8f90b6e41f63bd61" translate="yes" xml:space="preserve">
          <source>The state graph in the State Machine framework is hierarchical. States can be nested inside of other states, and the current configuration of the state machine consists of the set of states which are currently active. All the states in a valid configuration of the state machine will have a common ancestor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c269b0b4b56e97869a617531a9fe97ca01133785" translate="yes" xml:space="preserve">
          <source>The state is considered to be online for as long as &lt;a href=&quot;qnetworkconfigurationmanager#allConfigurations&quot;&gt;allConfigurations&lt;/a&gt;(&lt;a href=&quot;qnetworkconfiguration#StateFlag-enum&quot;&gt;QNetworkConfiguration::Active&lt;/a&gt;) returns a list with at least one entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37d5694e3be1fa9d68dad0eb07eabdb838840bb" translate="yes" xml:space="preserve">
          <source>The state is fast forwarded to determine the complete set of end values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4948bbc7febda5f42d388251a535cb07575d0f28" translate="yes" xml:space="preserve">
          <source>The state is fully applied, with transitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49d26b4cac780e0e51b67465385e09d8cb09b76" translate="yes" xml:space="preserve">
          <source>The state is rewound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7699d38f4fa356aec20682417954628a93e3ffdf" translate="yes" xml:space="preserve">
          <source>The state machine defined in the previous section never finishes. In order for a state machine to be able to finish, it needs to have a top-level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec700cd9aeba06166a1708f8179ec630e3d7d50c" translate="yes" xml:space="preserve">
          <source>The state machine executes asynchronously, i.e. it becomes part of your application's event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a686ea323c46708372426a841835da3de29f2c" translate="yes" xml:space="preserve">
          <source>The state machine instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1420a8fdabb702b6a488e0239a9eb8f90252227" translate="yes" xml:space="preserve">
          <source>The state machine processes events and takes transitions until a top-level final state is entered; the state machine then emits the &lt;a href=&quot;qstate#finished&quot;&gt;finished&lt;/a&gt;() signal. You can also &lt;a href=&quot;qstatemachine#stop&quot;&gt;stop&lt;/a&gt;() the state machine explicitly. The &lt;a href=&quot;qstatemachine#stopped&quot;&gt;stopped&lt;/a&gt;() signal is emitted in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14b73ab8bc5374fb51d56c64d9b14dc1d287f9f" translate="yes" xml:space="preserve">
          <source>The state machine processes events and takes transitions until a top-level final state is entered; the state machine then emits the finished() signal. You can also &lt;a href=&quot;qml-qtqml-statemachine-statemachine#stop-method&quot;&gt;stop()&lt;/a&gt; the state machine explicitly (you can also set running property to false). The stopped signal is emitted in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a89b667059eee3f4e5e3cea829be77c4c8c7b83" translate="yes" xml:space="preserve">
          <source>The state machine runs asynchronously to become part of your application's event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c646164c705e691f465a97f0009ac4382f74fcb4" translate="yes" xml:space="preserve">
          <source>The state machine should not save the initial values of properties and restore them later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcf5ff29f4d4838466b787798e6ed54862fbd73" translate="yes" xml:space="preserve">
          <source>The state machine should save the initial values of properties and restore them later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e54442e98c653c3ff606a4a06399b663946b015" translate="yes" xml:space="preserve">
          <source>The state machine that invoked the services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f98dad619709d9c9c807ca5a30fcce9638a88db" translate="yes" xml:space="preserve">
          <source>The state machine that sends out the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc8a0632ce5075b3cba3b124e3ae61c291499e2" translate="yes" xml:space="preserve">
          <source>The state of the A button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f80a57218d863af19159e428d6553ad585b46a0" translate="yes" xml:space="preserve">
          <source>The state of the B button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67b557e6502a377edd3dad9072848d0fd13068f" translate="yes" xml:space="preserve">
          <source>The state of the Select button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed. This button can sometimes be labeled as the Back button on some gamepads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40b5d21e88ee633f8857bbaff49d21cf028a7e4" translate="yes" xml:space="preserve">
          <source>The state of the Start button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed. This button can sometimes be labeled as the Forward button on some gamepads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d707b3fd12bc97de7f3badf470dcde59647712c" translate="yes" xml:space="preserve">
          <source>The state of the X button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b89eb364f85eeb2f3b0fd369955744bd16ef70" translate="yes" xml:space="preserve">
          <source>The state of the Y button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb844e334c6ead643c59bda05dab348a216337d" translate="yes" xml:space="preserve">
          <source>The state of the application has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce054949e8890ec4095bfb223273ada03c76eaf" translate="yes" xml:space="preserve">
          <source>The state of the center button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20244db092a1b2bf2575b5a4f163d706451a021" translate="yes" xml:space="preserve">
          <source>The state of the checkbox can be set with the &lt;a href=&quot;qml-qtquick-controls-checkbox#checked-prop&quot;&gt;checked&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee350904441a983e22e21b3d2d9945dbe17f5d33" translate="yes" xml:space="preserve">
          <source>The state of the computation represented by a &lt;a href=&quot;qfuture&quot;&gt;QFuture&lt;/a&gt; can be queried using the &lt;a href=&quot;qfuture#isCanceled&quot;&gt;isCanceled&lt;/a&gt;(), &lt;a href=&quot;qfuture#isStarted&quot;&gt;isStarted&lt;/a&gt;(), &lt;a href=&quot;qfuture#isFinished&quot;&gt;isFinished&lt;/a&gt;(), &lt;a href=&quot;qfuture#isRunning&quot;&gt;isRunning&lt;/a&gt;(), or &lt;a href=&quot;qfuture#isPaused&quot;&gt;isPaused&lt;/a&gt;() functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ad8d38c12af522a4b349fc37a4abca7405c56a" translate="yes" xml:space="preserve">
          <source>The state of the direction pad down button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23ed6dcda1bc9153c916c5b76639222dca3f062" translate="yes" xml:space="preserve">
          <source>The state of the direction pad left button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c3d5e40e0d9e471644ef698b39b3994a58650f" translate="yes" xml:space="preserve">
          <source>The state of the direction pad right button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95345465162e0656f4a6769ebe726c2c6577218e" translate="yes" xml:space="preserve">
          <source>The state of the direction pad up button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730da99edef9272605527e1628c38e9761e29bf7" translate="yes" xml:space="preserve">
          <source>The state of the event is not modified in the process, so if it is a manual reset event, you will need to reset it after the notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727c3642022abcbe7b7e3c85229b6659c73b4bc0" translate="yes" xml:space="preserve">
          <source>The state of the guide button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed. This button is typically the one in the center of the gamepad with a logo. Not all gamepads have a guide button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7174e62c8d5e5334756e89ef23b82653ecf4c992" translate="yes" xml:space="preserve">
          <source>The state of the keyboard modifier keys can be found by calling the &lt;a href=&quot;qinputevent#modifiers&quot;&gt;modifiers()&lt;/a&gt; function, inherited from &lt;a href=&quot;qinputevent&quot;&gt;QInputEvent&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad0aeed6a95a5eb2a45b229596a5a76a9806986" translate="yes" xml:space="preserve">
          <source>The state of the left shoulder button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f86eadeb9421c5eba49815d6cf9d0e2d79e65a" translate="yes" xml:space="preserve">
          <source>The state of the left stick button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed. This button is usually triggered by pressing the left joystick itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e131e8e609376d913652b6d62ced8c0f86eed6bb" translate="yes" xml:space="preserve">
          <source>The state of the material is accessible through the template generated state() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2290902dc07e65d6f42cb43f12df50610ef28a74" translate="yes" xml:space="preserve">
          <source>The state of the right shoulder button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d10645f745406a3c41ce45899afc295bd2a6af" translate="yes" xml:space="preserve">
          <source>The state of the right stick button. The value is &lt;code&gt;true&lt;/code&gt; when pressed, and &lt;code&gt;false&lt;/code&gt; when not pressed. This button is usually triggered by pressing the right joystick itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfedfe406db3cae17d851e306b94e22b75270f4" translate="yes" xml:space="preserve">
          <source>The state of the session represents the state of the underlying access point whereas the session's openness implies the networking/connectivity state available to the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7cba8e3213ebc06ccd565675dc97f5a818572b" translate="yes" xml:space="preserve">
          <source>The state of whether the current page audio is muted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9aa2a7fce4b8f8f93b163c82922835fdcc4c243" translate="yes" xml:space="preserve">
          <source>The state property represents the user request and is changed synchronously during &lt;a href=&quot;qmediarecorder#record&quot;&gt;record&lt;/a&gt;(), &lt;a href=&quot;qmediarecorder#pause&quot;&gt;pause&lt;/a&gt;() or &lt;a href=&quot;qmediarecorder#stop&quot;&gt;stop&lt;/a&gt;() calls. Recorder state may also change asynchronously when recording fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272c8d3b0a630b814addec2840eb0279fcd05f68" translate="yes" xml:space="preserve">
          <source>The state that &lt;a href=&quot;qsslconfiguration&quot;&gt;QSslConfiguration&lt;/a&gt; supports are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56c6163c6eb34c3c67bee75eefd13421c5204a6" translate="yes" xml:space="preserve">
          <source>The state() attribute enables developers to detect whether the system currently maintains a global network session for the given &lt;a href=&quot;qnetworkconfiguration&quot;&gt;QNetworkConfiguration&lt;/a&gt;. If &lt;a href=&quot;qnetworksession#isOpen&quot;&gt;isOpen()&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt; the &lt;a href=&quot;qnetworksession&quot;&gt;QNetworkSession&lt;/a&gt; instance at hand was at least one of the entities requesting the global network session. This distinction is required to support the notion of session registrations. For as long as there are one or more open &lt;a href=&quot;qnetworksession&quot;&gt;QNetworkSession&lt;/a&gt; instances the underlying network interface is not shut down. Therefore the session &lt;a href=&quot;qnetworksession#state&quot;&gt;state()&lt;/a&gt; can be used to monitor the state of network interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdb9f639401b6124d9fde16dba5a1af3717c07a" translate="yes" xml:space="preserve">
          <source>The states (except &lt;code&gt;NoServiceSet&lt;/code&gt;) are derived from &lt;a href=&quot;qbluetoothsocket#SocketState-enum&quot;&gt;QBluetoothSocket::SocketState&lt;/a&gt;. This property is read-only. &lt;code&gt;NoServiceSet&lt;/code&gt; indicates that the socket state is not yet available due to the &lt;a href=&quot;qml-qtbluetooth-bluetoothsocket#service-prop&quot;&gt;service&lt;/a&gt; not being set yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba18a6e5742eceb6362a2ff431a834c33a75b96e" translate="yes" xml:space="preserve">
          <source>The states are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cd2086c9ad0e370f9c869f9c15694be57ce9af" translate="yes" xml:space="preserve">
          <source>The states of buttons in exclusive button groups are updated before this signal is emitted. This means that slots can act on either the &quot;off&quot; signal or the &quot;on&quot; signal emitted by the buttons in the group whose states have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bdde7b74c0e63e586ae7cad5a4a6c3243372ab" translate="yes" xml:space="preserve">
          <source>The states of the mouse buttons and keyboard modifiers at the time of the drop are specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fe671fd8e99b50dd21d47a2f38dcd4ea506fa9" translate="yes" xml:space="preserve">
          <source>The static &lt;a href=&quot;qcolordialog#getColor&quot;&gt;getColor&lt;/a&gt;() function shows the dialog, and allows the user to specify a color. This function can also be used to let users choose a color with a level of transparency: pass the &lt;a href=&quot;qcolordialog#ColorDialogOption-enum&quot;&gt;ShowAlphaChannel&lt;/a&gt; option as an additional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fff1cca1d651656544e6cf1171b113dc6724502" translate="yes" xml:space="preserve">
          <source>The static &lt;a href=&quot;qerrormessage#qtHandler&quot;&gt;qtHandler&lt;/a&gt;() function installs a message handler using &lt;a href=&quot;#qInstallMessageHandler&quot;&gt;qInstallMessageHandler&lt;/a&gt;() and creates a &lt;a href=&quot;qerrormessage&quot;&gt;QErrorMessage&lt;/a&gt; that displays &lt;a href=&quot;#qDebug&quot;&gt;qDebug&lt;/a&gt;(), &lt;a href=&quot;#qWarning&quot;&gt;qWarning&lt;/a&gt;() and &lt;a href=&quot;#qFatal&quot;&gt;qFatal&lt;/a&gt;() messages. This is most useful in environments where no console is available to display warnings and error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31614f1e36f57398459b5d81c531cc6c5bfd4dca" translate="yes" xml:space="preserve">
          <source>The static function &lt;a href=&quot;qgeopositioninfosource#createDefaultSource&quot;&gt;QGeoPositionInfoSource::createDefaultSource&lt;/a&gt;() creates a default position source that is appropriate for the platform, if one is available. Otherwise, &lt;a href=&quot;qgeopositioninfosource&quot;&gt;QGeoPositionInfoSource&lt;/a&gt; will check for available plugins that implement the &lt;a href=&quot;qgeopositioninfosourcefactory&quot;&gt;QGeoPositionInfoSourceFactory&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0466e48119b79c0f2f493d2eef0982bbf68e671" translate="yes" xml:space="preserve">
          <source>The static function &lt;a href=&quot;qgeosatelliteinfosource#createDefaultSource&quot;&gt;QGeoSatelliteInfoSource::createDefaultSource&lt;/a&gt;() creates a default satellite data source that is appropriate for the platform, if one is available. Otherwise, available &lt;a href=&quot;qgeopositioninfosourcefactory&quot;&gt;QGeoPositionInfoSourceFactory&lt;/a&gt; plugins will be checked for one that has a satellite data source available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d62bec466d20408090e3d0f0d045976ea3c576d" translate="yes" xml:space="preserve">
          <source>The static functions &lt;a href=&quot;qaudiodeviceinfo#defaultInputDevice&quot;&gt;defaultInputDevice&lt;/a&gt;(), &lt;a href=&quot;qaudiodeviceinfo#defaultOutputDevice&quot;&gt;defaultOutputDevice&lt;/a&gt;(), and &lt;a href=&quot;qaudiodeviceinfo#availableDevices&quot;&gt;availableDevices&lt;/a&gt;() let you get a list of all available devices. Devices are fetched according to the value of mode this is specified by the &lt;a href=&quot;qaudio&quot;&gt;QAudio&lt;/a&gt;::Mode enum. The &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt; returned are only valid for the &lt;a href=&quot;qaudio&quot;&gt;QAudio&lt;/a&gt;::Mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e6acbf59f634945a754ad651c20b57176e0829" translate="yes" xml:space="preserve">
          <source>The static functions &lt;a href=&quot;qcamerainfo#defaultCamera&quot;&gt;defaultCamera&lt;/a&gt;() and &lt;a href=&quot;qcamerainfo#availableCameras&quot;&gt;availableCameras&lt;/a&gt;() provide you a list of all available cameras.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a70eea44002078a9bd8d0355f1e256276aab44" translate="yes" xml:space="preserve">
          <source>The static functions &lt;a href=&quot;qthread#currentThreadId&quot;&gt;currentThreadId&lt;/a&gt;() and &lt;a href=&quot;qthread#currentThread&quot;&gt;currentThread&lt;/a&gt;() return identifiers for the currently executing thread. The former returns a platform specific ID for the thread; the latter returns a &lt;a href=&quot;qthread&quot;&gt;QThread&lt;/a&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e49ab1641008f13870ec803be5eb293f8a8e6a" translate="yes" xml:space="preserve">
          <source>The static functions provide modal color dialogs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38186dba98e8e40950784c843a6a9d80ac4f3f14" translate="yes" xml:space="preserve">
          <source>The status bar can be defined by overriding the background component and setting the content padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c85e2ba5b10f33ef187eb6fca3490da8e9c711d" translate="yes" xml:space="preserve">
          <source>The status can be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091755c16956a61f3d13198f946b7af95208526a" translate="yes" xml:space="preserve">
          <source>The status can have the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735295b6fa4a3053cd0ad935929300745556db74" translate="yes" xml:space="preserve">
          <source>The status is changed asynchronously and represents the actual status of media recorder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665fa94341b2a4fc06df777cf2ac4ea6a7b544ec" translate="yes" xml:space="preserve">
          <source>The status of a place can be checked by connecting the status property to a handler function, and then have the handler function process the change in status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc77b5ee8a874a570482f526f02b56d78263e602" translate="yes" xml:space="preserve">
          <source>The status of loading the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ad92738b62ce1e5c5a79febcfa25d06b3daa48" translate="yes" xml:space="preserve">
          <source>The status of media loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a176d6846969bb58bc1b37f45d5379c71cb58c" translate="yes" xml:space="preserve">
          <source>The status of the engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0709707a098f70eda25304da024b3e1931f96f72" translate="yes" xml:space="preserve">
          <source>The status of the media cannot be determined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33534b34465c174c5130a41a136d94c0721a8e8" translate="yes" xml:space="preserve">
          <source>The status of the transaction is not &lt;a href=&quot;qinapptransaction#TransactionStatus-enum&quot;&gt;PurchaseFailed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfdb74344ac9ea1e514e9635aff5ee8b8d5fa14" translate="yes" xml:space="preserve">
          <source>The status tip is displayed on all status bars provided by the action's top-level parent widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966ef1ecbd3940ac289ac518231d239770c911c0" translate="yes" xml:space="preserve">
          <source>The step size determines the amount by which the dial's value is increased and decreased when interacted with via the keyboard. For example, a step size of &lt;code&gt;0.2&lt;/code&gt;, will result in the dial's value increasing and decreasing in increments of &lt;code&gt;0.2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8375496ab40f8c3ad4b3a9715a6e4ce318b003e2" translate="yes" xml:space="preserve">
          <source>The step size is only respected for touch and mouse interaction when &lt;a href=&quot;qml-qtquick-controls2-dial#snapMode-prop&quot;&gt;snapMode&lt;/a&gt; is set to a value other than &lt;code&gt;Dial.NoSnap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac7fd0ac7295f844f82c15af8f4c4da9aafa0ba" translate="yes" xml:space="preserve">
          <source>The step type can be single step or adaptive decimal step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e0d4e351e2c18c54febb0e2bf51481979f6d76" translate="yes" xml:space="preserve">
          <source>The steps to render a rule are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9870b58b0492dac133e0171837bbf80a3c5e5e3" translate="yes" xml:space="preserve">
          <source>The storage format is set to &lt;a href=&quot;qsettings#Format-enum&quot;&gt;QSettings::NativeFormat&lt;/a&gt; (i.e. calling &lt;a href=&quot;qsettings#setDefaultFormat&quot;&gt;setDefaultFormat&lt;/a&gt;() before calling this constructor has no effect).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22974e8e37b875bbd81f43f236c956c480f54bc" translate="yes" xml:space="preserve">
          <source>The storage name is used to give each profile that uses the disk separate subdirectories for persistent data and cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a67770b38e173e3cbaeddac527640df3b7993f" translate="yes" xml:space="preserve">
          <source>The storage name must be unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775f45dda4e7daa3b1920f974b3f830de3e1d43a" translate="yes" xml:space="preserve">
          <source>The storage name that is used to create separate subdirectories for each profile that uses the disk for storing persistent data and cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd228070dfd0985e2ab107ac8af02163aaed6058" translate="yes" xml:space="preserve">
          <source>The stream operators should have the following signatures:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fa7e64507344a8d71ed1f70ad3e1dec7d3af31" translate="yes" xml:space="preserve">
          <source>The stream reader does</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b830261097846a578c61a66778f7e92df4d1a54" translate="yes" xml:space="preserve">
          <source>The stream remembers that automatic insertion of spaces is enabled for future writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd05bf8e787123014d90b69ac40e633782c32894" translate="yes" xml:space="preserve">
          <source>The stream status describes how the playback of the current stream is progressing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b970ac3e4374a8a3dd1ad43184e03471af2008dd" translate="yes" xml:space="preserve">
          <source>The stream type is unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f87101bb4477cde316bca446c382127bb3df5a9" translate="yes" xml:space="preserve">
          <source>The stream writer can automatically format the generated XML data by adding line-breaks and indentation to empty sections between elements, making the XML data more readable for humans and easier to work with for most source code management systems. The feature can be turned on with the &lt;a href=&quot;qxmlstreamwriter#autoFormatting&quot;&gt;autoFormatting&lt;/a&gt; property, and customized with the &lt;a href=&quot;qxmlstreamwriter#autoFormattingIndent-prop&quot;&gt;autoFormattingIndent&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0a88920950dad21fc208d4f246d83da94cb515" translate="yes" xml:space="preserve">
          <source>The strength of the current radio signal as a percentage where 0% equals no signal, and 100% is a very good signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59b8dd5c3b4b35aab49e203031a010e111d639f" translate="yes" xml:space="preserve">
          <source>The stretch factor applies only in the &lt;a href=&quot;qboxlayout#direction&quot;&gt;direction&lt;/a&gt; of the &lt;a href=&quot;qboxlayout&quot;&gt;QBoxLayout&lt;/a&gt;, and is relative to the other boxes and widgets in this &lt;a href=&quot;qboxlayout&quot;&gt;QBoxLayout&lt;/a&gt;. Widgets and boxes with higher stretch factors grow more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c3da86445d2daac5670a398374d11b6c6eeb0a" translate="yes" xml:space="preserve">
          <source>The stretch factor changes the width of all characters in the font by factor percent. For example, setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8d196d4d1f3c63f0c4b48009e5d49665345f30" translate="yes" xml:space="preserve">
          <source>The stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0a69397c93c8c85fabce502fde89b769afcb52" translate="yes" xml:space="preserve">
          <source>The stretch factor is relative to the other columns in this grid. Columns with a higher stretch factor take more of the available space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e9e235407b3cd8a7db9637211d74a35ba2836c" translate="yes" xml:space="preserve">
          <source>The stretch factor is relative to the other rows in this grid. Rows with a higher stretch factor take more of the available space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f677c7f42683e4bf0ac0361312c8732db82f5f8" translate="yes" xml:space="preserve">
          <source>The stretch factor matches a condensed or expanded version of the font or applies a stretch transform that changes the width of all characters in the font by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18822dcb8b0bc3c64136bcaebcbf45df0cd6a713" translate="yes" xml:space="preserve">
          <source>The string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c8ee7d799197f5537efbe313512ed146e6b911" translate="yes" xml:space="preserve">
          <source>The string &quot;#cdata-section&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2e55245c26e70bf597e96d7dbde6c91de8d781" translate="yes" xml:space="preserve">
          <source>The string &quot;#comment&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0a0a40a1f0780e0e4b6f98f493dce5105b891c" translate="yes" xml:space="preserve">
          <source>The string &quot;#document&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b316f378c1c924485cfa9e27bc73c1811c2feeeb" translate="yes" xml:space="preserve">
          <source>The string &quot;#document-fragment&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fc000cca60fcfb455d835fd54c2f957f852ea7" translate="yes" xml:space="preserve">
          <source>The string &quot;#text&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06f4faef00e5b0ba2dbe9398c86fb2e4d307382" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;s&lt;/code&gt; contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655526af0b7c42d934e69651b7f07cd5e32c2872" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toDouble&quot;&gt;QLocale::toDouble&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245e415d9fbb3ae0692127b6a07bfc03a9cc31da" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toFloat&quot;&gt;QLocale::toFloat&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820d891367256d520abae88ffabb6743539ad4e2" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toInt&quot;&gt;QLocale::toInt&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b02a2f12707812f75c24349a4a0078b64645af" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toLong&quot;&gt;QLocale::toLong&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c7c15c37d6fa3786c175db979bd075ed72c716" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toLongLong&quot;&gt;QLocale::toLongLong&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7b5592c4eae901751c5c36dc5ba78cc6e56425" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toShort&quot;&gt;QLocale::toShort&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731188f29ba336b19d99bdada50b00e780089448" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toUInt&quot;&gt;QLocale::toUInt&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310530a81b959a315248e6b8d7fb2f618a4bab83" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toULongLong&quot;&gt;QLocale::toULongLong&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47838751fe30b41bcb4e3efb4004626707014df6" translate="yes" xml:space="preserve">
          <source>The string conversion will always happen in the 'C' locale. For locale dependent conversion use &lt;a href=&quot;qlocale#toUShort&quot;&gt;QLocale::toUShort&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff82922655abe891ce41cc9f92b1b7036cac788" translate="yes" xml:space="preserve">
          <source>The string data is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5ed341269a3fd84a616f79b237004f77322c33" translate="yes" xml:space="preserve">
          <source>The string functions include width(), to return the width of a string in pixels (or points, for a printer), &lt;a href=&quot;qfontmetrics#boundingRect&quot;&gt;boundingRect&lt;/a&gt;(), to return a rectangle large enough to contain the rendered string, and &lt;a href=&quot;qfontmetrics#size&quot;&gt;size&lt;/a&gt;(), to return the size of that rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcbc5f0971a4cf1192c48d1b88ee3a826bd4542" translate="yes" xml:space="preserve">
          <source>The string functions include width(), to return the width of a string in pixels (or points, for a printer), &lt;a href=&quot;qfontmetricsf#boundingRect&quot;&gt;boundingRect&lt;/a&gt;(), to return a rectangle large enough to contain the rendered string, and &lt;a href=&quot;qfontmetricsf#size&quot;&gt;size&lt;/a&gt;(), to return the size of that rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6fa0ac1cd8e66ee8f47e6591cb2db03fcd4e5b" translate="yes" xml:space="preserve">
          <source>The string includes the file, location, and description of each error. If multiple errors are present, they are separated by a newline character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d04091545d63bac488a1a1c108439b56c06bd0" translate="yes" xml:space="preserve">
          <source>The string is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f66f6402a4d39ffdc17166389628c1e46df230" translate="yes" xml:space="preserve">
          <source>The string is a plausible intermediate value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820f3492b40b665f9f5b9f8a282e5e79cf1a49f4" translate="yes" xml:space="preserve">
          <source>The string is acceptable as a final result; i.e. it is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06116c8061fedafea82e206ea2f3b907f481e9ec" translate="yes" xml:space="preserve">
          <source>The string is deserialized using &lt;code&gt;readBytes()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cb63a88b2eb3ea5197c95422f831b1b55fc616" translate="yes" xml:space="preserve">
          <source>The string is inserted after the current item in the combobox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da58e04a6c37530ea57eb6fba69f4c4c48d286b" translate="yes" xml:space="preserve">
          <source>The string is inserted before the current item in the combobox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a21c627566b5a2589734c53513699b1eff755d" translate="yes" xml:space="preserve">
          <source>The string is inserted in the alphabetic order in the combobox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dd52e91c7169f3729a342606d8f71fd0cb1e21" translate="yes" xml:space="preserve">
          <source>The string is not translated and therefore cannot be shown to the user. The subsequent table shows the fixed mappings between &lt;a href=&quot;qnetworkconfiguration#BearerType-enum&quot;&gt;BearerType&lt;/a&gt; and the bearer type name for known types. If the &lt;a href=&quot;qnetworkconfiguration#BearerType-enum&quot;&gt;BearerType&lt;/a&gt; is unknown this function may return additional information if it is available; otherwise an empty string will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93e066df1c50911d2dd2840958180e8d33615be" translate="yes" xml:space="preserve">
          <source>The string is serialized using &lt;code&gt;writeBytes()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7ea24cfed682e9aca9429308af9e86b589c2a6" translate="yes" xml:space="preserve">
          <source>The string is written as a standard number (i.e. 0.015).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b36f44716bc3183e9fe2b5b440217db1264a324" translate="yes" xml:space="preserve">
          <source>The string is written in scientific form. It may have an exponent part(i.e. 1.5E-2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6144d8cd2e1a499bf733ab9a0743e6d2b109c187" translate="yes" xml:space="preserve">
          <source>The string must be one of the &lt;a href=&quot;qstylefactory#keys&quot;&gt;QStyleFactory::keys&lt;/a&gt;(), typically one of &quot;windows&quot;, &quot;windowsvista&quot;, &quot;fusion&quot;, or &quot;macintosh&quot;. Style names are case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559220e657e9a125b6b7ad3e0edd6c16219c364b" translate="yes" xml:space="preserve">
          <source>The string pointed to by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d4ec504eeec686bd80b95ce9fa0bb7411eb009" translate="yes" xml:space="preserve">
          <source>The string view will be empty if and only if &lt;code&gt;str.empty()&lt;/code&gt;. It is unspecified whether this constructor can result in a null string view (&lt;code&gt;str.data()&lt;/code&gt; would have to return &lt;code&gt;nullptr&lt;/code&gt; for this).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7085f796ecc3fabaf0aa83c42f07d9d6e08c21e" translate="yes" xml:space="preserve">
          <source>The string view will be null if and only if &lt;code&gt;str.isNull()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ce103a64c2f2a6c4c2c16afa569e863e045703" translate="yes" xml:space="preserve">
          <source>The string will be inserted after the last item in the combobox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b555bd0c516ef58b57b9b13f3548b3ce427091" translate="yes" xml:space="preserve">
          <source>The string will be inserted as the first item in the combobox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fa94154881be9547b14633a2ef6d1f3a56db3e" translate="yes" xml:space="preserve">
          <source>The string will not be inserted into the combobox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67b495067de34b1dbb2203e7440e65cf76c08fd" translate="yes" xml:space="preserve">
          <source>The string-based connection syntax provides a workaround for this rule: If the slot has default parameters, those parameters can be omitted from the signal. When the signal is emitted with fewer arguments than the slot, Qt runs the slot using default parameter values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0145779b8611aa48b39c82a35485cb658886373d" translate="yes" xml:space="preserve">
          <source>The string-based syntax can connect C++ objects to QML objects, but the functor-based syntax cannot. This is because QML types are resolved at run-time, so they are not available to the C++ compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5b3394010ccfb08b339c3a3d2f2d2ec8d8fd5d" translate="yes" xml:space="preserve">
          <source>The stringified error message in case an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7da9ad2318354bb5869cac73f67947d32cfcc1" translate="yes" xml:space="preserve">
          <source>The strings can then be inserted into the underlying data store. For consistency, this can be done through the model's own interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddafb5d08cf86e785dbdf5a132fc77c50acd4c99" translate="yes" xml:space="preserve">
          <source>The struct provides a way for icons created via &lt;a href=&quot;qicon#fromTheme&quot;&gt;QIcon::fromTheme&lt;/a&gt;() to return pixmaps that are designed for the current &lt;a href=&quot;highdpi#glossary-of-high-dpi-terms&quot;&gt;device pixel ratio&lt;/a&gt;. The scale for such an icon is specified using the Scale directory key in the appropriate &lt;code&gt;index.theme&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21254b9de495b8903c223f5671288fdaa395f7db" translate="yes" xml:space="preserve">
          <source>The structure of the UI is represented as a tree of &lt;a href=&quot;qaccessibleinterface&quot;&gt;QAccessibleInterface&lt;/a&gt; subclasses. This is often a mirror of the hierarchy of QWidgets that make up the UI of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661b4529dbf265215207d4c0624f7e6ab27e77b1" translate="yes" xml:space="preserve">
          <source>The structure of the pixel data pointed to by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bc5f0da46637a0bc9fcc6af471ba49c8ca4eca" translate="yes" xml:space="preserve">
          <source>The structured representation of a text document presents its contents as a hierarchy of text blocks, frames, tables, and other objects. These provide a logical structure to the document and describe how their contents will be displayed. Generally, frames and tables are used to group other structures while text blocks contain the actual textual information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a0072e743c3e73b9c62a64145f805c1d2aa0d6" translate="yes" xml:space="preserve">
          <source>The structures for radio and check buttons are identical. We show the structure using &lt;a href=&quot;qcheckbox&quot;&gt;QCheckBox&lt;/a&gt; element and pixel metric names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270369b6e9c967e7abed6172c57e1879ac32d890" translate="yes" xml:space="preserve">
          <source>The style Component for the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e345bbcabf5d1c8ecc84130e9d1305f9b3c2f9c3" translate="yes" xml:space="preserve">
          <source>The style Component for this control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1403fd440e51fff9d5b52416380449155cb8a795" translate="yes" xml:space="preserve">
          <source>The style also contains a set of style hints, which is represented as values in the &lt;a href=&quot;qstyle#StyleHint-enum&quot;&gt;StyleHint&lt;/a&gt; enum. All widgets do not have the same functionality and look in the different styles. For instance, when the menu items in a menu do not fit in a single column on the screen, some styles support scrolling while others draw more than one column to fit all items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a91c831f7601f526b8cc4d02e12f9ae71aa3405" translate="yes" xml:space="preserve">
          <source>The style calculates the spacing between widgets in layouts. There are two ways the style can handle these calculations. You can set the &lt;code&gt;PM_LayoutHorizontalSpacing&lt;/code&gt; and &lt;code&gt;PM_LayoutVerticalSpacing&lt;/code&gt;, which is the way the Java style does it (through &lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt;). Alternatively, you can implement &lt;a href=&quot;qstyle#layoutSpacing&quot;&gt;QStyle::layoutSpacing&lt;/a&gt;() and QStyle::layoutSpacingImplementation() if you need more control over this part of the layout. In these functions you can calculate the spacing based on control types (&lt;a href=&quot;qsizepolicy#ControlType-enum&quot;&gt;QSizePolicy::ControlType&lt;/a&gt;) for different size policies (&lt;a href=&quot;qsizepolicy#Policy-enum&quot;&gt;QSizePolicy::Policy&lt;/a&gt;) and also the style option for the widget in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa4c63caacc3f033762051c500bf21598bef105" translate="yes" xml:space="preserve">
          <source>The style can also be specified as a path to a custom style, such as &lt;code&gt;&quot;:/mystyle&quot;&lt;/code&gt;. See &lt;a href=&quot;qtquickcontrols2-customize#creating-a-custom-style&quot;&gt;Creating a Custom Style&lt;/a&gt; for more details about building custom styles. Custom styles do not need to implement all controls. By default, the styling system uses the &lt;a href=&quot;qtquickcontrols2-default#&quot;&gt;Default style&lt;/a&gt; as a fallback for controls that a custom style does not provide. It is possible to specify a different fallback style to customize or extend one of the built-in styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b44a11f22d912d8e27e989326fd7078a1d55e29" translate="yes" xml:space="preserve">
          <source>The style component for the menubar's own menus and their submenus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fb22daddaa541351cc80fe92273c68f9ff8113" translate="yes" xml:space="preserve">
          <source>The style does not handle reverse layouts. We assume that the layout direction is left to right. &lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; handles reverse widgets; if we implemented reverse layouts, widgets that we change the position of sub elements, or handle text alignment in labels ourselves would need to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2005b66864c4e3f530c3aaaa67805678f8475e6" translate="yes" xml:space="preserve">
          <source>The style elements and widgets, as mentioned, use the style to calculate bounding rectangles of sub elements and sub controls. Pixel metrics, which are style-dependent sizes in screen pixels, are also used for measurements when drawing. The available rectangles and pixel metrics are represented by three enums in &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt;: &lt;a href=&quot;qstyle#SubElement-enum&quot;&gt;SubElement&lt;/a&gt;, &lt;a href=&quot;qstyle#SubControl-enum&quot;&gt;SubControl&lt;/a&gt;, and &lt;a href=&quot;qstyle#PixelMetric-enum&quot;&gt;PixelMetric&lt;/a&gt;. Values of the enums can easily by identified as they start with SE_, SC_ and PM_.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d23adae09a8930eb1a7bd5fbee19d47ef353e5" translate="yes" xml:space="preserve">
          <source>The style expects the needle to be pointing up at a rotation of &lt;code&gt;0&lt;/code&gt;, in order for the rotation to be correct. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb6d2f4570121b59b1423a923cc44f34c01e581" translate="yes" xml:space="preserve">
          <source>The style gets all the information it needs to render the graphical element from the &lt;a href=&quot;qstyleoption&quot;&gt;QStyleOption&lt;/a&gt; class. The widget is passed as the last argument in case the style needs it to perform special effects (such as animated default buttons on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;), but it isn't mandatory. In fact, &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; can be used to draw on any paint device (not just widgets), in which case the widget argument is a zero pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545af0ad4181f9c2aa075e9aec4d70b3099cb8c6" translate="yes" xml:space="preserve">
          <source>The style hint affects the &lt;a href=&quot;qfont#fontmatching&quot;&gt;font matching algorithm&lt;/a&gt;. See &lt;a href=&quot;qfont#StyleHint-enum&quot;&gt;QFont::StyleHint&lt;/a&gt; for the list of available hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0f63f1048683a969308f34e4d6a03a6bd96cb7" translate="yes" xml:space="preserve">
          <source>The style hints encapsulate a set of platform dependent properties such as double click intervals, full width selection and others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5924bec7b3dacc03790aead1114820f722989aba" translate="yes" xml:space="preserve">
          <source>The style is automatically selected and deployed on Android. See &lt;a href=&quot;android-getting-started&quot;&gt;Getting Started with Qt for Android&lt;/a&gt; and &lt;a href=&quot;https://doc.qt.io/qt-5.13/deployment-android.html&quot;&gt;Deploying an Application on Android&lt;/a&gt; for more details on the Android essentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fc322bafcbbdabe4b4a02eeda7b3e60a7b1d00" translate="yes" xml:space="preserve">
          <source>The style is implemented in one class. We have done this because we find it convenient to keep all code in one file. Also, it is an advantage with regards to optimization as we instantiate less objects. We also keep the number of functions at a minimum by using switches to identify which element to draw in the functions. This results in large functions, but since we divide the code for each element in the switches, the code should still be easy to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7277af5049a8a33b7223c691237256fbd78aa2e9" translate="yes" xml:space="preserve">
          <source>The style is selected by default when running Qt Quick Controls 2 applications. It is built into the module's resources, so by default it is shipped with any application that depends on the Qt Quick Controls 2 module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6a17f4ee319d84f9e165aa988cd08b6dc4ccd6" translate="yes" xml:space="preserve">
          <source>The style is set to &lt;a href=&quot;qt#BrushStyle-enum&quot;&gt;Qt::TexturePattern&lt;/a&gt;. The color will only have an effect for QBitmaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d90acf7680b3820543c3b814aaaac0d6f6e712" translate="yes" xml:space="preserve">
          <source>The style key is usually the class name of the required style. Note that the keys are case insensitive. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb13c64c45f03f847ef4fea2351ac73a8d94c49" translate="yes" xml:space="preserve">
          <source>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties &lt;a href=&quot;qml-qtquick-text#font.weight-prop&quot;&gt;font.weight&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-text#font.bold-prop&quot;&gt;font.bold&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-text#font.italic-prop&quot;&gt;font.italic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62901b3c68b5e7106cd64b8e88e4cc6d1a38c8e8" translate="yes" xml:space="preserve">
          <source>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties &lt;a href=&quot;qml-qtquick-textedit#font.weight-prop&quot;&gt;font.weight&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-textedit#font.bold-prop&quot;&gt;font.bold&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-textedit#font.italic-prop&quot;&gt;font.italic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4005e8538d34f695889fa73fb7848a6ca6d2bdb8" translate="yes" xml:space="preserve">
          <source>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties &lt;a href=&quot;qml-qtquick-textinput#font.weight-prop&quot;&gt;font.weight&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-textinput#font.bold-prop&quot;&gt;font.bold&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-textinput#font.italic-prop&quot;&gt;font.italic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d536ebd5a56058fe698b8444ef5990abd2453c" translate="yes" xml:space="preserve">
          <source>The style name of the font info that has been resolved for the current font and &lt;a href=&quot;qml-qtquick-text#fontSizeMode-prop&quot;&gt;fontSizeMode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4910dc2aa77e903aa9038617d2cbfe13d5ed9b82" translate="yes" xml:space="preserve">
          <source>The style of a font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45edbfa2d2d2af55c70d9c359128ec139975715" translate="yes" xml:space="preserve">
          <source>The style of all the border's edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556b59cdf543cdfd60fb0692943e9ef981497301" translate="yes" xml:space="preserve">
          <source>The style of the border's bottom edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4181bd069f369a3cd2c237d038ff2fd1139488" translate="yes" xml:space="preserve">
          <source>The style of the border's left edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671a2ee2914208e538207a182bc84c8e9b3b5ca0" translate="yes" xml:space="preserve">
          <source>The style of the border's right edge/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c033aadb3b562a99051049632070ece9ef66eb63" translate="yes" xml:space="preserve">
          <source>The style of the border's top edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba1d222fe5399ec324412e0571cd87328d2ae55" translate="yes" xml:space="preserve">
          <source>The style of the entire application can be set using the &lt;a href=&quot;qapplication#setStyle&quot;&gt;QApplication::setStyle&lt;/a&gt;() function. It can also be specified by the user of the application, using the &lt;code&gt;-style&lt;/code&gt; command-line option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1301084b840ba23d07f254ac818ca23b24c155" translate="yes" xml:space="preserve">
          <source>The style of the graph colors. One of &lt;a href=&quot;q3dtheme#ColorStyle-enum&quot;&gt;Q3DTheme::ColorStyle&lt;/a&gt; enum values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181b7b4c140da18b202b2d46d181cad8d1bd224a" translate="yes" xml:space="preserve">
          <source>The style of the tool button, describing how the button's text and icon should be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d426bbeaeaaf8230651d1be424b151a4c4b6baf2" translate="yes" xml:space="preserve">
          <source>The style option for &lt;a href=&quot;qprogressbar&quot;&gt;QProgressBar&lt;/a&gt; is &lt;a href=&quot;qstyleoptionprogressbar&quot;&gt;QStyleOptionProgressBar&lt;/a&gt;. The bar does not set any state flags, but the other members of the option are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5d0a64d4595551aeb68130009dc1f867adece9" translate="yes" xml:space="preserve">
          <source>The style option for &lt;a href=&quot;qtoolbar&quot;&gt;QToolBar&lt;/a&gt; is &lt;a href=&quot;qstyleoptiontoolbar&quot;&gt;QStyleOptionToolBar&lt;/a&gt;. The only state flag set (besides the common flags) is &lt;code&gt;State_Horizontal&lt;/code&gt; if the bar is horizontal (i.e., in the north or south toolbar area). The member variables of the style option are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aced553ebaefca9cae7098117e1a2000aa9ea35" translate="yes" xml:space="preserve">
          <source>The style option for combo boxes is &lt;a href=&quot;qstyleoptioncombobox&quot;&gt;QStyleOptionComboBox&lt;/a&gt;. It can set the following states:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41069a5c0e44ec893e97a1eaf6eb07b58a553998" translate="yes" xml:space="preserve">
          <source>The style option for group boxes is &lt;a href=&quot;qstyleoptiongroupbox&quot;&gt;QStyleOptionGroupBox&lt;/a&gt;. The following states can be set on it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6557b727c35b287b64c6bac8e124d5a5371c8824" translate="yes" xml:space="preserve">
          <source>The style option for header views is &lt;a href=&quot;qstyleoptionheader&quot;&gt;QStyleOptionHeader&lt;/a&gt;. The view paints one header section at a time, so the data is for the section being drawn. Its contents are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfa16c6f1f11d247b3da7547724ca36a82e175a" translate="yes" xml:space="preserve">
          <source>The style option for menu items is &lt;a href=&quot;qstyleoptionmenuitem&quot;&gt;QStyleOptionMenuItem&lt;/a&gt;. The following tables describe its state flags and other members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b5f7bd29725f88b3ca3cae317d3af4e7739e4a" translate="yes" xml:space="preserve">
          <source>The style option for rubber bands is &lt;a href=&quot;qstyleoptionrubberband&quot;&gt;QStyleOptionRubberBand&lt;/a&gt;. Its members are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a32ca307e07ccccd19675d53bc92cc43975705" translate="yes" xml:space="preserve">
          <source>The style option for tabs (&lt;a href=&quot;qstyleoptiontab&quot;&gt;QStyleOptionTab&lt;/a&gt;) contains the necessary information for drawing tabs. The option contains the position of the tab in the tab bar, the position of the selected tab, the shape of the tab, the text, the icon, and the icon's size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ece052e7783cdf4cdc9e541218a76e62862f910" translate="yes" xml:space="preserve">
          <source>The style option for title bars is &lt;a href=&quot;qstyleoptiontitlebar&quot;&gt;QStyleOptionTitleBar&lt;/a&gt;. Its members are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45fc8ad71bf001f2c1f86f0a0acb95d1dbd4d7c" translate="yes" xml:space="preserve">
          <source>The style option for tool boxes is &lt;a href=&quot;qstyleoptiontoolbox&quot;&gt;QStyleOptionToolBox&lt;/a&gt;. It contains the text and icon of the tool box contents. The only state set by &lt;a href=&quot;qtoolbox&quot;&gt;QToolBox&lt;/a&gt; is &lt;code&gt;State_Sunken&lt;/code&gt;, which is set when the user presses a tab down with the mouse. The rest of the &lt;a href=&quot;qstyleoptiontoolbox&quot;&gt;QStyleOptionToolBox&lt;/a&gt; members are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9658c68c1708f645c0667ede000303b4979509f7" translate="yes" xml:space="preserve">
          <source>The style option is &lt;a href=&quot;qstyleoptiondockwidget&quot;&gt;QStyleOptionDockWidget&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71796c8c02076d670b68aae3eaee44f0be4597df" translate="yes" xml:space="preserve">
          <source>The style option of &lt;a href=&quot;qscrollbar&quot;&gt;QScrollBar&lt;/a&gt; is &lt;a href=&quot;qstyleoptionslider&quot;&gt;QStyleOptionSlider&lt;/a&gt;. Its members are listed in the following table. The option is used by all &lt;a href=&quot;qabstractslider&quot;&gt;QAbstractSlider&lt;/a&gt;s; we only describe the members relevant for scroll bars here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814f87d995e4312c1ab3aaedb3758885011c36b3" translate="yes" xml:space="preserve">
          <source>The style options other members are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc51c14cf6546b85141f83ec0e51bec9528e6f36" translate="yes" xml:space="preserve">
          <source>The style sheet contains a textual description of customizations to the widget's style, as described in the &lt;a href=&quot;stylesheet#&quot;&gt;Qt Style Sheets&lt;/a&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce41359ffc08e98aead810aface41b94b26024c" translate="yes" xml:space="preserve">
          <source>The style sheet needs to be compliant to CSS 2.1 syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34b77caa64a5acc175bfe315c70e7c61840216a" translate="yes" xml:space="preserve">
          <source>The style sheet on the &lt;a href=&quot;qpushbutton&quot;&gt;QPushButton&lt;/a&gt; forces the &lt;a href=&quot;qpushbutton&quot;&gt;QPushButton&lt;/a&gt; (and any child widget) to have blue text, in spite of the more specific rule set provided by the application-wide style sheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c0be03c289f525a18598ca2287fd1fa5b62647" translate="yes" xml:space="preserve">
          <source>The style strategy affects the &lt;a href=&quot;qfont&quot;&gt;font matching&lt;/a&gt; algorithm. See &lt;a href=&quot;qfont#StyleStrategy-enum&quot;&gt;QFont::StyleStrategy&lt;/a&gt; for the list of available strategies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b21ab93987a751028df924856c119573ecb471b" translate="yes" xml:space="preserve">
          <source>The style strategy tells the &lt;a href=&quot;qfont&quot;&gt;font matching&lt;/a&gt; algorithm what type of fonts should be used to find an appropriate default family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05b9586d21a92d64f4bf3773826ef572f09df25" translate="yes" xml:space="preserve">
          <source>The style structure for push buttons is shown below. By doing a top-down traversal of the tree, you get the sequence in which the elements should be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5baf027e97b3fbc6e52c7da45ed318504ac2a7" translate="yes" xml:space="preserve">
          <source>The style to be used is defined by the &lt;a href=&quot;qtextlistformat#Style-enum&quot;&gt;QTextListFormat::Style&lt;/a&gt; enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c8c6d5da14a69a888f70d18cf5e8674d4d2f32" translate="yes" xml:space="preserve">
          <source>The style type provides the style definitions that are used by the &lt;a href=&quot;qml-qtquick-virtualkeyboard-inputpanel&quot;&gt;InputPanel&lt;/a&gt; to decorate the virtual keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8caf42573f4bb2897fff579de94e5da02f1d86b8" translate="yes" xml:space="preserve">
          <source>The style used to decorate each item is set with &lt;a href=&quot;qtextlistformat#setStyle&quot;&gt;setStyle&lt;/a&gt;() and can be read with the &lt;a href=&quot;qtextlistformat#style&quot;&gt;style&lt;/a&gt;() function. The style controls the type of bullet points and numbering scheme used for items in the list. Note that lists that use the decimal numbering scheme begin counting at 1 rather than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72c5a5a6f1d23f3bb49a2e14ca3a4880080f5ed" translate="yes" xml:space="preserve">
          <source>The stylesheet editor can be accessed by right-clicking a widget and selecting &lt;b&gt;Change &lt;a href=&quot;stylesheet&quot;&gt;styleSheet&lt;/a&gt;...&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccf8f70ec81fd7b8645d2b4b6c97c21d69300ec" translate="yes" xml:space="preserve">
          <source>The sub-classes of &lt;a href=&quot;qstyleoption&quot;&gt;QStyleOption&lt;/a&gt; contain all information necessary to style the individual elements. Style options are instantiated - usually on the stack - and filled out by the caller of the &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; function. Depending on what is drawn the style will expect different a different style option class. For example, the &lt;code&gt;QStyle::PE_FrameFocusRect&lt;/code&gt; element expects a &lt;a href=&quot;qstyleoptionfocusrect&quot;&gt;QStyleOptionFocusRect&lt;/a&gt; argument, and it's possible to create custom subclasses that a custom style can use. The style options keep public variables for performance reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da95e8e7ce0f9a8b46aeafb11c830f5d10590485" translate="yes" xml:space="preserve">
          <source>The sub-title of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6376f52010850f062486143b98257d8d7f7566" translate="yes" xml:space="preserve">
          <source>The subclass is defined in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb6f30a7021f28dc8ffbd3eb5a9eabd71737843" translate="yes" xml:space="preserve">
          <source>The subclass is free to decide how to store the items, and the visual arrangement does not have to be reflected through this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bfa546cfcd83ab6e89b6e46faacd519936c51d" translate="yes" xml:space="preserve">
          <source>The subclass is free to decide how to store the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc91d9d3d849e0ba3837f10939593803ff0e66e" translate="yes" xml:space="preserve">
          <source>The subclass must be declared as an NDEF record by expanding the &lt;a href=&quot;qqmlndefrecord#Q_DECLARE_NDEFRECORD&quot;&gt;Q_DECLARE_NDEFRECORD&lt;/a&gt;() macro in the implementation file of the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2171bf5afc85050f81986f224075b2e2dcb0ed1" translate="yes" xml:space="preserve">
          <source>The subclass must be registered with QML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01939f2068e77dbd5e53716f5d9db3ea8684e6f6" translate="yes" xml:space="preserve">
          <source>The subclass must have a &lt;a href=&quot;qobject#Q_OBJECT&quot;&gt;Q_OBJECT&lt;/a&gt; macro in its declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7766e019a3d6bf1cdedb76eb0483d490ade86e" translate="yes" xml:space="preserve">
          <source>The subclass must have an &lt;a href=&quot;qobject#Q_INVOKABLE&quot;&gt;invokable&lt;/a&gt; constructor that takes a &lt;a href=&quot;qndefrecord&quot;&gt;QNdefRecord&lt;/a&gt; and a &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551df288f3b5886d0bb0a493151c60e26b7650ce" translate="yes" xml:space="preserve">
          <source>The subclass specific state, such as the color of a flat color material, should be extracted from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd223433d9b1942a278d75e09e887e2d18490fd1" translate="yes" xml:space="preserve">
          <source>The subclasses are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8d77f6ee46de541be29be4b98bf35f6ba951e9" translate="yes" xml:space="preserve">
          <source>The subcontrols are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446c75034eae7be43c3fa60571f1f227ae4eb7c4" translate="yes" xml:space="preserve">
          <source>The subject of the certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9743fa35fe8d36eda4639e6646afe0893a42a5a4" translate="yes" xml:space="preserve">
          <source>The subject of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f85368f77de6b885b545ea25be74b8ca10b6d3" translate="yes" xml:space="preserve">
          <source>The subject string is not checked for UTF-16 validity before attempting a match. Use this option with extreme caution, as attempting to match an invalid string may crash the program and/or constitute a security issue. This enum value has been introduced in Qt 5.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a280f57f53eedf97269d457c7247e9b8fc7424" translate="yes" xml:space="preserve">
          <source>The submodule was introduced in Qt 5.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97e8affb2039d0e76b998b9a5765949600a4791" translate="yes" xml:space="preserve">
          <source>The subpixel arrangement is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff043c2002e8f16cc1091e862f6d749e7e96949" translate="yes" xml:space="preserve">
          <source>The subpixels are arranged horizontally in blue, green, red order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d62bf9686c937759fb91d76f380d62e0ea11aa" translate="yes" xml:space="preserve">
          <source>The subpixels are arranged horizontally in red, green, blue order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d2d5fd98a218cab1afd725da389ec7ff0cfc78" translate="yes" xml:space="preserve">
          <source>The subpixels are arranged vertically in blue, green, red order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7953dfc7a0bf6887089df93cc0f9cc2871000cb6" translate="yes" xml:space="preserve">
          <source>The subpixels are arranged vertically in red, green, blue order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d43a0469b6329b19e89428e5a3a2a8d13fa7a5" translate="yes" xml:space="preserve">
          <source>The subprojects specify the sections that are displayed in the table of contents for this project. In this example, the subproject, which is displayed in the Assistant's sidebar, is named &quot;C++ Classes&quot; and its index is the page titled &quot;QT GUI C++ Classes&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8a560067b931afc93181c16980d59f0110a5d7" translate="yes" xml:space="preserve">
          <source>The subtext of the form validation message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a812a7bab8be4477e8a466ba84ea2fa943bc0b6" translate="yes" xml:space="preserve">
          <source>The subtitle is shown by the &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt;, between the title and the actual page. Subtitles are optional. In &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;ClassicStyle&lt;/a&gt; and &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;ModernStyle&lt;/a&gt;, using subtitles is necessary to make the header appear. In &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;MacStyle&lt;/a&gt;, the subtitle is shown as a text label just above the actual page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa40553b99731d39b26e0c6146711717b574b25" translate="yes" xml:space="preserve">
          <source>The subtitle may be plain text or HTML, depending on the value of the &lt;a href=&quot;qwizard#subTitleFormat-prop&quot;&gt;QWizard::subTitleFormat&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58388f69e05af69bd8ca3d3e8656801db6f4cafb" translate="yes" xml:space="preserve">
          <source>The subtree has been blocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8d7d7087e26600d011a632971aea196b219a49" translate="yes" xml:space="preserve">
          <source>The subtype of the image. A handler that supports this option can use the subtype value to help when reading and writing images. For example, a PPM handler may have a subtype value of &quot;ppm&quot; or &quot;ppmraw&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e520f5a3396b243780dded4e80353133ee0659" translate="yes" xml:space="preserve">
          <source>The subwindows are sorted by the current &lt;a href=&quot;qmdiarea#WindowOrder-enum&quot;&gt;WindowOrder&lt;/a&gt;. This is used for the &lt;a href=&quot;qmdiarea#subWindowList&quot;&gt;subWindowList&lt;/a&gt;() and for &lt;a href=&quot;qmdiarea#activateNextSubWindow&quot;&gt;activateNextSubWindow&lt;/a&gt;() and &lt;a href=&quot;qmdiarea#activatePreviousSubWindow&quot;&gt;activatePreviousSubWindow&lt;/a&gt;(). Also, it is used when cascading or tiling the windows with &lt;a href=&quot;qmdiarea#cascadeSubWindows&quot;&gt;cascadeSubWindows&lt;/a&gt;() and &lt;a href=&quot;qmdiarea#tileSubWindows&quot;&gt;tileSubWindows&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9def2e8f9c077de97f314cd5f27d9706238121df" translate="yes" xml:space="preserve">
          <source>The success or the failure of a match attempt can be inspected by calling the &lt;a href=&quot;qregularexpressionmatch#hasMatch&quot;&gt;hasMatch&lt;/a&gt;() function. &lt;a href=&quot;qregularexpressionmatch&quot;&gt;QRegularExpressionMatch&lt;/a&gt; also reports a successful partial match through the &lt;a href=&quot;qregularexpressionmatch#hasPartialMatch&quot;&gt;hasPartialMatch&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6b698b36a03c33aadc9935799f5f9ed5bf2b60" translate="yes" xml:space="preserve">
          <source>The suffix consists of all characters in the file after (but not including) the last '.'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff7f4d01a7328b0ab6c81401daa6ef0f31d6eee" translate="yes" xml:space="preserve">
          <source>The suffix for the value. I.e &quot;cm&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcd10f714f12502122a19afea7d19523c8c13b2" translate="yes" xml:space="preserve">
          <source>The suffix is appended to the end of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dacc06536d1974e486817bae276a4b729bf2dfe" translate="yes" xml:space="preserve">
          <source>The suffix of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9974f3b9c968c1d97a324463a078325ec0fab27" translate="yes" xml:space="preserve">
          <source>The sum of all slices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba654b33a249379c1f01ef010573cee909149b9c" translate="yes" xml:space="preserve">
          <source>The summary of a table has been changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920f48232fad9dc51eaef1b3dfa693089261fab8" translate="yes" xml:space="preserve">
          <source>The superclass implementation of &lt;a href=&quot;qaccessibleinterface#state&quot;&gt;state()&lt;/a&gt;, uses the &lt;a href=&quot;qaccessibleinterface#state&quot;&gt;QAccessibleInterface::state&lt;/a&gt;() implementation. We simply need to disable the buttons if the slider is at its minimum or maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19c411a86f510fee9845d19719c3670c2d54804" translate="yes" xml:space="preserve">
          <source>The supplier of the editorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5cf300fd6c0229d3b02f790ef9847fdb17c09b0" translate="yes" xml:space="preserve">
          <source>The supplier of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f697460e9acc3b960c52f6b6c10459a60739d80" translate="yes" xml:space="preserve">
          <source>The supplier of the review.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339c3fac5df4ea4bd26a95fd6bc8e110c4cb49f3" translate="yes" xml:space="preserve">
          <source>The supported URI schemes are the same as those in the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; function &lt;code&gt;fn:doc&lt;/code&gt;, except that queryURI can be the object of a variable binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60a31d675a14f6ffc2f61bd3adc9e570ec7af39" translate="yes" xml:space="preserve">
          <source>The supported actions should use the predefined actions offered in this class unless they do not fit a predefined action. In that case a custom action can be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e9aaede96e142d213581cc7e172a2c8d7dc4aa" translate="yes" xml:space="preserve">
          <source>The supported depths are 1, 8, 16, 24, 32 and 64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a93b82f40a719d82ee54f1fab9ee2729488b40f" translate="yes" xml:space="preserve">
          <source>The supported encodings are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1dd4365844bff00d89f3ee8afbeca4d8cbc50a5" translate="yes" xml:space="preserve">
          <source>The supported set and meaning of encoding options are system and selected codec specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef89538bda2d6db3b7c815a11edd01c705d034e" translate="yes" xml:space="preserve">
          <source>The supported set of attributes provided by the HERE plugin are not fixed and may grow over time. Also the attributes provided may vary according to a place by place basis, e.g one place may provide opening hours while another does not. At the time of writing, it is known that some places provide &lt;code&gt;openingHours&lt;/code&gt; (&lt;a href=&quot;qplaceattribute#OpeningHours-var&quot;&gt;QPlaceAttribute::OpeningHours&lt;/a&gt;) and &lt;code&gt;payment&lt;/code&gt; (&lt;a href=&quot;qplaceattribute#Payment-var&quot;&gt;QPlaceAttribute::Payment&lt;/a&gt;) methods but other attributes may be made available by the backend server. All places provided by the plugin will have the &lt;code&gt;x_provider&lt;/code&gt; (&lt;a href=&quot;qplaceattribute#Provider-var&quot;&gt;QPlaceAttribute::Provider&lt;/a&gt;) attribute set to &lt;code&gt;here&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9183fa9d80288d69edd242efa2830a2745f8ab1f" translate="yes" xml:space="preserve">
          <source>The supported values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5766c7653c1b8448cc5a3158e0d26cd562762cbe" translate="yes" xml:space="preserve">
          <source>The surface can be rendered to using a software rasterizer, and also supports OpenGL. This surface type is intended for internal Qt use, and requires the use of private API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfba19abf7e593b5eb7588732f6f0368f889fe5a" translate="yes" xml:space="preserve">
          <source>The surface could not allocate some resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0410516040a31be07e83c91971cae50d4dd2ed" translate="yes" xml:space="preserve">
          <source>The surface format will be resolved in the &lt;a href=&quot;qoffscreensurface#create&quot;&gt;create&lt;/a&gt;() function. Calling this function after &lt;a href=&quot;qoffscreensurface#create&quot;&gt;create&lt;/a&gt;() will not re-resolve the surface format of the native surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f834093677637ce8bc4ed408cbf1554b3744b2bd" translate="yes" xml:space="preserve">
          <source>The surface format will be resolved in the &lt;a href=&quot;qwindow#create&quot;&gt;create&lt;/a&gt;() function. Calling this function after &lt;a href=&quot;qwindow#create&quot;&gt;create&lt;/a&gt;() has been called will not re-resolve the surface format of the native surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5bcb8e094e8dfefe626a4cd58a0924e813e7e4" translate="yes" xml:space="preserve">
          <source>The surface has not been started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31605ad5fb13eb6e4aad1e6d4ed29e371341e27a" translate="yes" xml:space="preserve">
          <source>The surface is a Metal compatible surface and can be used in conjunction with Apple's Metal graphics API. This surface type is supported on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt; only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041a8d2790828b326841e7b483d5c1d516f2a8f6" translate="yes" xml:space="preserve">
          <source>The surface is a Vulkan compatible surface and can be used in conjunction with the Vulkan graphics API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb109113d2595e171affca4dd42fd34a3b5d9dd" translate="yes" xml:space="preserve">
          <source>The surface is an &lt;a href=&quot;qtquick-visualcanvas-adaptations#openvg&quot;&gt;OpenVG&lt;/a&gt; compatible surface and can be used in conjunction with &lt;a href=&quot;qtquick-visualcanvas-adaptations#openvg&quot;&gt;OpenVG&lt;/a&gt; contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0749d8cb461796f48dcd3da67ea96646d2aeca4" translate="yes" xml:space="preserve">
          <source>The surface is an OpenGL compatible surface and can be used in conjunction with &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2369dae48156c238e6c61a51f78e671c365c23" translate="yes" xml:space="preserve">
          <source>The surface is an instance of &lt;a href=&quot;qoffscreensurface&quot;&gt;QOffscreenSurface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b776850527af54ceacaaab8468f9cff8064a46" translate="yes" xml:space="preserve">
          <source>The surface is an instance of &lt;a href=&quot;qwindow&quot;&gt;QWindow&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31f573d55377ec4b8b26bcaf4e384f1f76148fd" translate="yes" xml:space="preserve">
          <source>The surface is is composed of pixels and can be rendered to using a software rasterizer like Qt's raster paint engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660717683eb8a7564b83009761b6cff1e2a11f88" translate="yes" xml:space="preserve">
          <source>The surface is null or otherwise not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244568337b4da251f637faf1f324a4940f0780dc" translate="yes" xml:space="preserve">
          <source>The surface should slide towards the bottom of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781233b77ea08ebfc00a361ac1aa9b9748400627" translate="yes" xml:space="preserve">
          <source>The surface should slide towards the left of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c377fa834ac5ca826d55e97bc6d73e314d898053" translate="yes" xml:space="preserve">
          <source>The surface should slide towards the right of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e6035dc4975fe4965f12ab8d1bcc3785e9dbf3" translate="yes" xml:space="preserve">
          <source>The surface should slide towards the top of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d789b8128f72e3be511f5d8ec638c6d244c0435" translate="yes" xml:space="preserve">
          <source>The surface type is set to &lt;a href=&quot;qsurface#SurfaceType-enum&quot;&gt;QSurface::VulkanSurface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16684e9cb2e419101d8d96f421a57e45784bf8d0" translate="yes" xml:space="preserve">
          <source>The surface type of an offscreen surface is always &lt;a href=&quot;qsurface#SurfaceType-enum&quot;&gt;QSurface::OpenGLSurface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bb1893cc01db80410886f669c70fa8ca55c4e7" translate="yes" xml:space="preserve">
          <source>The swap behavior specifies whether single, double, or triple buffering is desired. The default, &lt;a href=&quot;qsurfaceformat#SwapBehavior-enum&quot;&gt;DefaultSwapBehavior&lt;/a&gt;, gives the default swap behavior of the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73861e52de0789b307308b02f5600f8188c31f68" translate="yes" xml:space="preserve">
          <source>The swap() method helps with the implementation of assignment operators in an exception-safe way. For more information consult &lt;a href=&quot;http://en.wikibooks.org/wiki/More_C++_Idioms/Copy-and-swap&quot;&gt;More C++ Idioms - Copy-and-swap&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0289e47b64a268dc2cb5f8740055d9c0a57930ae" translate="yes" xml:space="preserve">
          <source>The swapchain extension will always be added automatically, no need to include it in this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f1363cd9e6c397a9a6b0c4a03c13cd151c602f" translate="yes" xml:space="preserve">
          <source>The symbol must be exported as a C function from the library for &lt;a href=&quot;qlibrary#resolve&quot;&gt;resolve&lt;/a&gt;() to work. This means that the function must be wrapped in an &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; block if the library is compiled with a C++ compiler. On Windows, this also requires the use of a &lt;code&gt;dllexport&lt;/code&gt; macro; see &lt;a href=&quot;qlibrary#resolve&quot;&gt;resolve&lt;/a&gt;() for the details of how this is done. For convenience, there is a static &lt;a href=&quot;qlibrary#resolve&quot;&gt;resolve&lt;/a&gt;() function which you can use if you just want to call a function in a library without explicitly loading the library first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f78fca4ca4fb4646dde9e748dcdd447ced4ca0" translate="yes" xml:space="preserve">
          <source>The symbol must be exported as a C function from the library. This means that the function must be wrapped in an &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; if the library is compiled with a C++ compiler. On Windows you must also explicitly export the function from the DLL using the &lt;code&gt;__declspec(dllexport)&lt;/code&gt; compiler directive, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57711abc8ab566ae72d4949fcc59626d1091248" translate="yes" xml:space="preserve">
          <source>The syntax for assigning a value to a property on initialization is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541ef58318478da6b064a418386c6eafd234ab23" translate="yes" xml:space="preserve">
          <source>The syntax for commenting in QML is similar to that of JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0328d250cbd075477e7efc2d1d47d11b9529b608" translate="yes" xml:space="preserve">
          <source>The syntax for defining a new signal is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fa046b721070e5d3cbe0a284614b1e5b8da9a0" translate="yes" xml:space="preserve">
          <source>The syntax of a directory listing &lt;code&gt;qmldir&lt;/code&gt; file is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925f34fdc7c7d918ffb0f1abc09fd82883cc9d41" translate="yes" xml:space="preserve">
          <source>The syntax used to interpret the meaning of the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7dc84a2373f027b699ca9dfb1d9590e1e30035" translate="yes" xml:space="preserve">
          <source>The syntax used to run qmake takes the following simple form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd4da6836bfe49416691999bcae57bbd429ca0f" translate="yes" xml:space="preserve">
          <source>The synthesis was paused and can be resumed with &lt;a href=&quot;qtexttospeech#resume&quot;&gt;resume&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68dd4e46084101985c41fecb88cd9e9c8dff95fa" translate="yes" xml:space="preserve">
          <source>The synthesizer is ready to start a new text. This is also the state after a text was finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b528b0d7dfab781a4a3d985a21de9d80bf8111df" translate="yes" xml:space="preserve">
          <source>The system disconnects an existing access point and reconnects via a more suitable one. The application does not have any control over this process and has to reconnect its active sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc0575f2fb0cce36cdc85ed2b3e0b02b9e09cd7" translate="yes" xml:space="preserve">
          <source>The system gives applications control over the systems roaming behavior. Applications can initiate roaming (in case the current link is not suitable) and are consulted if the system has identified a more suitable access point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5027fc7a6cee7fc4cf57da7b5f93846ab0132be2" translate="yes" xml:space="preserve">
          <source>The system has detected a gesture (&lt;a href=&quot;qnativegestureevent&quot;&gt;QNativeGestureEvent&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ee6fe2208122bd092acd8b491ecd1cca3d51bc" translate="yes" xml:space="preserve">
          <source>The system locale has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb35c70e2cb0a4ce8dbd1b9e153258f45c851f02" translate="yes" xml:space="preserve">
          <source>The system standard font for titles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3fe76d87c738c2579f7476201290b018d89691" translate="yes" xml:space="preserve">
          <source>The system time clock is purely the real time, expressed in milliseconds since Jan 1, 1970 at 0:00 UTC. It's equivalent to the value returned by the C and POSIX &lt;code&gt;time&lt;/code&gt; function, with the milliseconds added. This clock type is currently only used on Unix systems that do not support monotonic clocks (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7108da9b3480241e18a8163626034bf35b1b8b94" translate="yes" xml:space="preserve">
          <source>The system tray entry was clicked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede05d9894bec6969c16690882d232bd54760852" translate="yes" xml:space="preserve">
          <source>The system tray entry was clicked with the middle mouse button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41226b446980383fbc159ea0c0dbbb6225620200" translate="yes" xml:space="preserve">
          <source>The system tray entry was double clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27702b431edd8c3a6683c9362491f706f3337c72" translate="yes" xml:space="preserve">
          <source>The system tray icon was clicked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fdea950ae7042dcfb36f8700e6f0388efbccb6" translate="yes" xml:space="preserve">
          <source>The system tray icon was clicked with the middle mouse button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55925875c441e8947c58a9da7b24a78d0b924c84" translate="yes" xml:space="preserve">
          <source>The system tray icon was double clicked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921febd441c498aaed6878e40acd8ee117dab343" translate="yes" xml:space="preserve">
          <source>The system wide keyboard style can be affected by setting the QT_VIRTUALKEYBOARD_STYLE environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3fb926928e2b3c4a6eb0f758f693e26363adae" translate="yes" xml:space="preserve">
          <source>The system's monotonic clock, usually found in Unix systems. This clock is monotonic and does not overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c4fae4710d842c83962a8d3ec11ac2039499f6" translate="yes" xml:space="preserve">
          <source>The system's temporary directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33c57e9a561e478f4e6d6153f0cfa982b2e65af" translate="yes" xml:space="preserve">
          <source>The system's tick counter, used on Windows systems. This clock may overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94781db82b5f906b71487bd70a1af597f429e93" translate="yes" xml:space="preserve">
          <source>The system-wide ID of current thread (if it can be obtained)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b915b272c2b2c866c67c328ba5896bbf6d1c3f" translate="yes" xml:space="preserve">
          <source>The systemEnvironment function returns the environment of the calling process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f093a750211a9789f286f95e09182a09ec6dc3" translate="yes" xml:space="preserve">
          <source>The tab and label within a &lt;a href=&quot;qtabbar&quot;&gt;QTabBar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e586a157b16534f4d22bc1714e08ed18b48172b3" translate="yes" xml:space="preserve">
          <source>The tab bar has focus and the tab is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb47aa156a9ddae91cdcd237def9ae4e8d1044e" translate="yes" xml:space="preserve">
          <source>The tab bar is at the bottom, as a window or page footer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7fde9af8535a8595adf709a7bfc2e62cbe72315" translate="yes" xml:space="preserve">
          <source>The tab bar is at the top, as a window or page header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755ed319b27f09d23b22c46d22876aacf104f3a6" translate="yes" xml:space="preserve">
          <source>The tab bar is responsible for drawing the buttons that appear on the tab bar when all tabs do not fit. Their placement is not controlled by the style, but the buttons are &lt;a href=&quot;qtoolbutton&quot;&gt;QToolButton&lt;/a&gt;s and are therefore drawn by the style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1bea6e3b1596d447ed090f6954c054c8f38b1f2" translate="yes" xml:space="preserve">
          <source>The tab bar is the currently selected tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adebab046b24194cd8ba92931f55ce8dcdc3cd6" translate="yes" xml:space="preserve">
          <source>The tab bar of a &lt;a href=&quot;qtabwidget&quot;&gt;QTabWidget&lt;/a&gt;. This subcontrol exists only to control the position of the &lt;a href=&quot;qtabbar&quot;&gt;QTabBar&lt;/a&gt; inside the &lt;a href=&quot;qtabwidget&quot;&gt;QTabWidget&lt;/a&gt;. To style the tabs using the &lt;a href=&quot;#tab-sub&quot;&gt;::tab&lt;/a&gt; subcontrol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51930a4029edc2412a620dab2f0bcd3fc881df06" translate="yes" xml:space="preserve">
          <source>The tab bar will take ownership of the widget and so all widgets set here will be deleted by the tab bar when it is destroyed unless you separately reparent the widget after setting some other widget (or &lt;code&gt;nullptr&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0415b829a1c0a2c8d8b99384381fc0f73a81ef77" translate="yes" xml:space="preserve">
          <source>The tab button has keyboard focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fcafd7d01c24ad9ea870551a5889649843d31b" translate="yes" xml:space="preserve">
          <source>The tab button is positioned on a tab frame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b951ac0f6a901609361c21b980758e32a612b00" translate="yes" xml:space="preserve">
          <source>The tab focus chain traverses elements by first visiting the parent, and then its children in the order they occur in the children property. Pressing the tab key on an item in the tab focus chain will move keyboard focus to the next item in the chain. Pressing BackTab (normally Shift+Tab) will move focus to the previous item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b33e22cf3ef21c9d22cd36fda043d5606b2a165" translate="yes" xml:space="preserve">
          <source>The tab is being hovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a682da74c6dae28196839e7adc33aabc15869a1" translate="yes" xml:space="preserve">
          <source>The tab is being pressed. (since &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtquick-qmlmodule.html&quot;&gt;QtQuick&lt;/a&gt;.Controls.Styles 1.3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c013b6dca8d4e009c540ad51c58cead73bad15" translate="yes" xml:space="preserve">
          <source>The tab is both the first and the last tab in the tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf8204b0e70ea964a43bae4301414c483e551ba" translate="yes" xml:space="preserve">
          <source>The tab is enabled. (since &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtquick-qmlmodule.html&quot;&gt;QtQuick&lt;/a&gt;.Controls.Styles 1.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce395d789aff914dcaa47f7f686af1c77cc8485" translate="yes" xml:space="preserve">
          <source>The tab is neither the first nor the last tab in the tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b311b75faaf485c7dbc5ccf44755f0399918da" translate="yes" xml:space="preserve">
          <source>The tab is not adjacent to a selected tab (or is the selected tab).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4da901ba0232e9f24a1b4beecced83bbb607b4" translate="yes" xml:space="preserve">
          <source>The tab is placed at the bottom of the toolbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5442f22b9dce007edd29d62e02fe3be851a3ac31" translate="yes" xml:space="preserve">
          <source>The tab is placed in the middle of the toolbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57d1ea72c71d92375e53c462f93e90af5800ce4" translate="yes" xml:space="preserve">
          <source>The tab is pressed on with the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5040a189959e6fd529166b014ad7dbe46096ec7" translate="yes" xml:space="preserve">
          <source>The tab is the currently selected tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3345d11c8687b686da847416eb1e9ea9b042a0" translate="yes" xml:space="preserve">
          <source>The tab is the first (i.e., top-most) tab in the toolbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c750585ba3b4d86f6730b07212e94ece874772eb" translate="yes" xml:space="preserve">
          <source>The tab is the first tab in the tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312456c74175674a806b6696ef6da4bcecd4fd9e" translate="yes" xml:space="preserve">
          <source>The tab is the last tab in the tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0048dded8723ecb1dc7d7bda077ee8c8185a9a" translate="yes" xml:space="preserve">
          <source>The tab of a &lt;a href=&quot;qtabbar&quot;&gt;QTabBar&lt;/a&gt; or &lt;a href=&quot;qtoolbox&quot;&gt;QToolBox&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed971e80a520c0d5082c85cbf60bd2c2554e6b3" translate="yes" xml:space="preserve">
          <source>The tab order is defined by clicking on each of the numbers in the correct order. The first number you click will change to red, indicating the currently edited position in the tab order chain. The widget associated with the number will become the first one in the tab order chain. Clicking on another widget will make it the second in the tab order, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e38be2eba4c74d3d3e17feb6d99703f00b91d8" translate="yes" xml:space="preserve">
          <source>The tab shape within a tab bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e516e03f8721a3476066f3607d01088d153a276b" translate="yes" xml:space="preserve">
          <source>The tab text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1f83f416be12f5c67d0fc0ed00f914d2ee2328" translate="yes" xml:space="preserve">
          <source>The table below highlights the differences between current item and selected items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020ed757e7250137efe8171380d6271a0a4af2ce" translate="yes" xml:space="preserve">
          <source>The table below is listing the complex control elements and their associated style option subclass. The style options contain all the parameters required to draw the controls, including &lt;a href=&quot;qstyleoption#state-var&quot;&gt;QStyleOption::state&lt;/a&gt; which holds the &lt;a href=&quot;qstyle#StateFlag-enum&quot;&gt;style flags&lt;/a&gt; that are used when drawing. The table also describes which flags that are set when casting the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd07a7431e59b305fee7224d7a1488019544860" translate="yes" xml:space="preserve">
          <source>The table below is listing the control elements and their associated style option subclass. The style options contain all the parameters required to draw the controls, including &lt;a href=&quot;qstyleoption#state-var&quot;&gt;QStyleOption::state&lt;/a&gt; which holds the style flags that are used when drawing. The table also describes which flags that are set when casting the given option to the appropriate subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f3898f1c9cab78236cb53bdc0c4cfed0d7313d" translate="yes" xml:space="preserve">
          <source>The table below is listing the primitive elements and their associated style option subclasses. The style options contain all the parameters required to draw the elements, including &lt;a href=&quot;qstyleoption#state-var&quot;&gt;QStyleOption::state&lt;/a&gt; which holds the style flags that are used when drawing. The table also describes which flags that are set when casting the given option to the appropriate subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1756c57c691ef134f5b34be7520fcf1729c7c63b" translate="yes" xml:space="preserve">
          <source>The table below lists all the properties supported by Qt Style Sheets. Which values can be given to an property depend on the &lt;a href=&quot;#list-of-property-types&quot;&gt;property's type&lt;/a&gt;. Unless otherwise specified, properties below apply to all widgets. Properties marked with an asterisk * are specific to Qt and have no equivalent in CSS2 or CSS3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde1488b07c8e8364bdd47827c5a256dbdc88549" translate="yes" xml:space="preserve">
          <source>The table below lists different proxy types and their capabilities. Since each proxy type has different capabilities, it is important to understand them before choosing a proxy type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671d9f8b6688d3a1cf65ce4edfdf430cb931b091" translate="yes" xml:space="preserve">
          <source>The table below lists the drivers included with Qt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c614b65c7764fcc94497367ae5e526c1f07380ea" translate="yes" xml:space="preserve">
          <source>The table below shows the characters that can be used in an input mask. A space character, the default character for a blank, is needed for cases where a character is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9ce3b16dc8e33a8ce07877164854a9401d990b" translate="yes" xml:space="preserve">
          <source>The table below shows the default appearance in different styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b124722e323baf710f800011eeef285e00d244" translate="yes" xml:space="preserve">
          <source>The table below shows the specific rules that are produced by Qt Linguist and &lt;code&gt;lrelease&lt;/code&gt; for a selection of languages. Cells marked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260218bfd36c65fdfa137a69f977235ed2169740" translate="yes" xml:space="preserve">
          <source>The table below shows what string is returned depending on the active translation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cb1457906403f29888637763fee4a456e26915" translate="yes" xml:space="preserve">
          <source>The table below summarizes the default values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad05bcc2305671829e941cc83dfd33231728aa91" translate="yes" xml:space="preserve">
          <source>The table below summarizes the third-party options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6459571b5b27d97151ed47ad796c844a90a694ce" translate="yes" xml:space="preserve">
          <source>The table below summarizes which &lt;a href=&quot;qsettings&quot;&gt;QSettings&lt;/a&gt; objects access which location. &quot;&lt;b&gt;X&lt;/b&gt;&quot; means that the location is the main location associated to the &lt;a href=&quot;qsettings&quot;&gt;QSettings&lt;/a&gt; object and is used both for reading and for writing; &quot;o&quot; means that the location is used as a fallback when reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba32c29472b5bec4fe03caa445e0292194cd812" translate="yes" xml:space="preserve">
          <source>The table cell format of a table cell in a document specifies the visual properties of the table cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ce9d68d6fb7fde1268089c32c691ac0624eb2c" translate="yes" xml:space="preserve">
          <source>The table currently being edited by the cursor is found with &lt;a href=&quot;qtextcursor#currentTable&quot;&gt;QTextCursor::currentTable&lt;/a&gt;(). This allows its format or dimensions to be changed after it has been inserted into a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacc1922cc83abda105b0539a3a13e2ca76ab165" translate="yes" xml:space="preserve">
          <source>The table format also provides a way to constrain the widths of the columns in the table. Columns can be assigned a fixed width, a variable width, or a percentage of the available width (see &lt;a href=&quot;qtextlength&quot;&gt;QTextLength&lt;/a&gt;). The &lt;a href=&quot;qtexttableformat#columns&quot;&gt;columns&lt;/a&gt;() function returns the number of columns with constraints, and the &lt;a href=&quot;qtexttableformat#columnWidthConstraints&quot;&gt;columnWidthConstraints&lt;/a&gt;() function returns the constraints defined for the table. These quantities can also be set by calling &lt;a href=&quot;qtexttableformat#setColumnWidthConstraints&quot;&gt;setColumnWidthConstraints&lt;/a&gt;() with a vector containing new constraints. If no constraints are required, &lt;a href=&quot;qtexttableformat#clearColumnWidthConstraints&quot;&gt;clearColumnWidthConstraints&lt;/a&gt;() can be used to remove them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476506dd7e8eb09516a895e009b7eea6cfe9ea32" translate="yes" xml:space="preserve">
          <source>The table format is either defined when the table is created or changed later with &lt;a href=&quot;qtexttable#setFormat&quot;&gt;setFormat&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f654be4f7eb76ec7cf0ccf9d528af31cd0afee" translate="yes" xml:space="preserve">
          <source>The table has a vertical header that can be obtained using the &lt;a href=&quot;qtableview#verticalHeader&quot;&gt;verticalHeader&lt;/a&gt;() function, and a horizontal header that is available through the &lt;a href=&quot;qtableview#horizontalHeader&quot;&gt;horizontalHeader&lt;/a&gt;() function. The height of each row in the table can be found by using &lt;a href=&quot;qtableview#rowHeight&quot;&gt;rowHeight&lt;/a&gt;(); similarly, the width of columns can be found using &lt;a href=&quot;qtableview#columnWidth&quot;&gt;columnWidth&lt;/a&gt;(). Since both of these are plain widgets, you can hide either of them using their &lt;a href=&quot;qwidget#hide&quot;&gt;hide&lt;/a&gt;() functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0a90d505f21bcf5e6d82546a776e3943cac984" translate="yes" xml:space="preserve">
          <source>The table must have a primary key declared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770f001a1c023fe94c056ea541033f284fc32fa8" translate="yes" xml:space="preserve">
          <source>The table takes ownership of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2155a77817935fda9f8e1825805f5837ca8722ef" translate="yes" xml:space="preserve">
          <source>The table takes ownership of the prototype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e855f662667997b4123c5769c856ba7a959268e4" translate="yes" xml:space="preserve">
          <source>The table view's default selection model is retrieved for later use. We do not modify any items in the model, but instead select a few items that the view will display at the top-left of the table. To do this, we need to retrieve the model indexes corresponding to the top-left and bottom-right items in the region to be selected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b93d0c733ddb8ef384bacc34ea8c3d6ddb36256" translate="yes" xml:space="preserve">
          <source>The table widget will use the item prototype clone function when it needs to create a new table item. For example when the user is editing in an empty cell. This is useful when you have a &lt;a href=&quot;qtablewidgetitem&quot;&gt;QTableWidgetItem&lt;/a&gt; subclass and want to make sure that &lt;a href=&quot;qtablewidget&quot;&gt;QTableWidget&lt;/a&gt; creates instances of your subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89992daa66ca52c7350dea441905dc846d488347" translate="yes" xml:space="preserve">
          <source>The table's background color can be read with the &lt;a href=&quot;qtextformat#background&quot;&gt;background&lt;/a&gt;() function, and can be specified with &lt;a href=&quot;qtextformat#setBackground&quot;&gt;setBackground&lt;/a&gt;(). The background color of each cell can be set independently, and will control the color of the cell within the padded area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bda0b0a9f49ddbff2a51475df8980fcac1b6362" translate="yes" xml:space="preserve">
          <source>The table's primary key may not contain a relation to another table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7026dfb27d73498420021f05eae86eafc78c4132" translate="yes" xml:space="preserve">
          <source>The table-like interface to item data provided by models is ideal when using data in a table or list view; the row and column number system maps exactly to the way the views display items. However, structures such as tree views require the model to expose a more flexible interface to the items within. As a result, each item can also be the parent of another table of items, in much the same way that a top-level item in a tree view can contain another list of items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25096814e47678bd0d4691f95d629e18ea772582" translate="yes" xml:space="preserve">
          <source>The tabs are drawn above the pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4265092f8ae11132778b694518c239b76ad2068a" translate="yes" xml:space="preserve">
          <source>The tabs are drawn below the pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950381cb96c774494ea0578d4bd7f4aa57c0e322" translate="yes" xml:space="preserve">
          <source>The tabs are drawn to the left of the pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26da283de703b30b42716b3605d0620695bfae8e" translate="yes" xml:space="preserve">
          <source>The tabs are drawn to the right of the pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3062070bd35a0dfafd27b7def5f78116c1fa3d" translate="yes" xml:space="preserve">
          <source>The tabs are drawn with a rounded look. This is the default shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73745f0e5c9597d44063142295a0095dc44310e" translate="yes" xml:space="preserve">
          <source>The tabs are drawn with a triangular look.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5a00cef807a70718c5a15d6826766d316ad9e5" translate="yes" xml:space="preserve">
          <source>The tag &lt;code&gt;&amp;lt;tooltip&amp;gt;&lt;/code&gt; may be used to specify a tool tip to be shown in Property Editor when hovering over the property. The property name is given in the attribute &lt;code&gt;name&lt;/code&gt; and the element text is the tooltip. This functionality was added in Qt 5.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6b0d70fbe8d3b22bd280d45ef1b24555a04690" translate="yes" xml:space="preserve">
          <source>The tag is ignored and the tagged value is converted using this function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e1db800baba77555abe3c885adea646b2dca54" translate="yes" xml:space="preserve">
          <source>The tag name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c39ce720576064fa2b0faed125827e9dfad0a6" translate="yes" xml:space="preserve">
          <source>The tag number itself is lost and the tagged value is converted to JSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66ba9fe992ad750c354d31962e84ae56a2821bb" translate="yes" xml:space="preserve">
          <source>The tall pixmap on the left side of a &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;ClassicStyle&lt;/a&gt; or &lt;a href=&quot;qwizard#WizardStyle-enum&quot;&gt;ModernStyle&lt;/a&gt; page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238d5262b816b93c35576f1e4771293a4b7b4a65" translate="yes" xml:space="preserve">
          <source>The tap direction is indicated using flags. Applications should check for the presence of a particular flag as multiple flags may be set at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c58b9b3befa91a23ceabc229ff71b48b56fac52" translate="yes" xml:space="preserve">
          <source>The tap sensor registers tap events along the 3 axes that originate from the phone. The axes are arranged as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed6d7aac212d149cb12bf0f247a75ea6b973f5f" translate="yes" xml:space="preserve">
          <source>The target and value of the processing instruction is copied to the new node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7804d8c0a268fa65953dd0fd1f695e3f869ab6f7" translate="yes" xml:space="preserve">
          <source>The target architecture. Defaults to &lt;code&gt;VCPROJ_ARCH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854132210366cb1b071b2cde9a6951a46f231cc9" translate="yes" xml:space="preserve">
          <source>The target did not respond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ea6fa4664e3461cd37e28d39b8e8734ccb937e" translate="yes" xml:space="preserve">
          <source>The target file name for the library is platform-dependent. For example, on X11, &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;, and iOS, the library name will be prefixed by &lt;code&gt;lib&lt;/code&gt;. On Windows, no prefix is added to the file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3daa85c9f930dea3d9911fca692835d186b83ea" translate="yes" xml:space="preserve">
          <source>The target is a Qt application or library and requires the Qt library and header files. The proper include and library paths for the Qt library will automatically be added to the project. This is defined by default, and can be fine-tuned with the &lt;code&gt;\l{#qt}{QT}&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb02ebee4857a7a54d164931e1456b0970c76a6" translate="yes" xml:space="preserve">
          <source>The target is a Win32 console application (app only). The proper include paths, compiler flags and libraries will automatically be added to the project. Consider using the option &lt;code&gt;cmdline&lt;/code&gt; for cross-platform applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae24881785fd5dca4975976f28b3d5cedbd75e14" translate="yes" xml:space="preserve">
          <source>The target is a Win32 window application (app only). The proper include paths, compiler flags and libraries will automatically be added to the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021bf31917a922fa9963660e444f6072b97fcf8a" translate="yes" xml:space="preserve">
          <source>The target is a cross-platform command line application. On Windows, this implies &lt;code&gt;CONFIG += console&lt;/code&gt;. On &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;, this implies &lt;code&gt;CONFIG -= app_bundle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09067020751fe66046a9ba9fcc315294d403bf5" translate="yes" xml:space="preserve">
          <source>The target is a plugin (lib only). This enables dll as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46a83ab70f62066357e1a3eb4b4dfc4974b7f4f" translate="yes" xml:space="preserve">
          <source>The target is a plugin for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0017016cac749ef1057275c32104bafbfd007cd3" translate="yes" xml:space="preserve">
          <source>The target is a shared object/DLL. The proper include paths, compiler flags and libraries will automatically be added to the project. Note that &lt;code&gt;dll&lt;/code&gt; can also be used on all platforms; a shared library file with the appropriate suffix for the target platform (.dll or .so) will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9554ef2213f28594f415c89e00ecf645c6f79a24" translate="yes" xml:space="preserve">
          <source>The target is a static library (lib only). The proper compiler flags will automatically be added to the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acced20a58dff6f367f0d8f369c8b6fd8bf8343" translate="yes" xml:space="preserve">
          <source>The target is an X11 application or library. The proper include paths and libraries will automatically be added to the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbf237105fbccf2deaf272c0e06cf1e37a6aea1" translate="yes" xml:space="preserve">
          <source>The target is an automated test. &lt;a href=&quot;qmake-common-projects#building-a-testcase&quot;&gt;A check target&lt;/a&gt; will be added to the generated Makefile to run the test. Only relevant when generating Makefiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3aaf4f577a5ede22768f227a19c9898e67eb457" translate="yes" xml:space="preserve">
          <source>The target is no longer within range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f7f5a3ccb243858e5b0edb271aab84811691ff" translate="yes" xml:space="preserve">
          <source>The target name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3a823243700aec40acde645081d9f1ca078bf1" translate="yes" xml:space="preserve">
          <source>The target of the processing instruction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6138dd43ea40f8e8440f909a7d62e2b95be89d" translate="yes" xml:space="preserve">
          <source>The target position is in pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9428159da19f5557ffbfa9fa8e9f675043b9fd" translate="yes" xml:space="preserve">
          <source>The target state of this transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5b07f42dc742e3a1378539e4835085499f4c25" translate="yes" xml:space="preserve">
          <source>The target states of this transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1ebd4182b98f041bdd6d5ac74b387eb76b3171" translate="yes" xml:space="preserve">
          <source>The target supports an unknown access type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cebfbad482767da822a6fc51bd6a77faac841c" translate="yes" xml:space="preserve">
          <source>The target supports peer-to-peer LLCP communication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2175fb962ba3c5191e98846f12b1a40dcbf3b553" translate="yes" xml:space="preserve">
          <source>The target supports reading and writing NDEF messages using &lt;a href=&quot;qnearfieldtarget#readNdefMessages&quot;&gt;readNdefMessages&lt;/a&gt;() and &lt;a href=&quot;qnearfieldtarget#writeNdefMessages&quot;&gt;writeNdefMessages&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a146d18dec62b0079801b6b6fa7640e314fa9ae9" translate="yes" xml:space="preserve">
          <source>The target supports sending tag type specific commands using &lt;a href=&quot;qnearfieldtarget#sendCommand&quot;&gt;sendCommand&lt;/a&gt;() and &lt;a href=&quot;qnearfieldtarget#sendCommands&quot;&gt;sendCommands&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2703fc88508346a8dadc4f91fa8345cb67c44b15" translate="yes" xml:space="preserve">
          <source>The targets are the items that are the subject of the operation. For an add operation, these are the items being added; for a remove, these are the items being removed; for a move, these are the items being moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045aad18a353631c112bf24a563ad10fecfa583d" translate="yes" xml:space="preserve">
          <source>The taskbar progress indicator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765609e6ff574d2ddcc06acfd39259b339623321" translate="yes" xml:space="preserve">
          <source>The tasks category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a101aee17e2d186f7180d6713d745f2491504e82" translate="yes" xml:space="preserve">
          <source>The tear indicator of a &lt;a href=&quot;qtabbar&quot;&gt;QTabBar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3d41431b4074674ee2dcb6d275087ab22063db" translate="yes" xml:space="preserve">
          <source>The tear indicator of the &lt;a href=&quot;qtabbar&quot;&gt;QTabBar&lt;/a&gt; is styled using the &lt;a href=&quot;#tear-sub&quot;&gt;::tear&lt;/a&gt; subcontrol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b65166f4a5cdec3dd4a8885225c83ecaee60b4" translate="yes" xml:space="preserve">
          <source>The tear-off indicator of a &lt;a href=&quot;qmenu&quot;&gt;QMenu&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17f32cefbf5e795b2d7e50a56e892c28b447767" translate="yes" xml:space="preserve">
          <source>The tear-off is styled using the &lt;a href=&quot;#tearoff-sub&quot;&gt;::tearoff&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6750ddf5a0f94e6233b77bf2ab55f0cb612e3492" translate="yes" xml:space="preserve">
          <source>The temperature is returned in degree Celsius. This property, if supported, provides the pressure sensor die temperature. Note that this temperature may be (and usually is) different than the temperature reported from &lt;a href=&quot;qambienttemperaturesensor&quot;&gt;QAmbientTemperatureSensor&lt;/a&gt;. Use &lt;a href=&quot;qsensor#isFeatureSupported&quot;&gt;QSensor::isFeatureSupported&lt;/a&gt;() with the &lt;a href=&quot;qsensor#Feature-enum&quot;&gt;QSensor::PressureSensorTemperature&lt;/a&gt; flag to determine its availability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a731d344205833032b117ff5838d59ca96adfba9" translate="yes" xml:space="preserve">
          <source>The template argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa92339ab77ae6f29c15586d02067c531698194" translate="yes" xml:space="preserve">
          <source>The template can be overridden by specifying a new template type with the &lt;code&gt;-t&lt;/code&gt; command line option. This overrides the template type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5617c3cbee153595ea0d9a78565b74c5f6c8003" translate="yes" xml:space="preserve">
          <source>The template can only be instantiated with a type that supports assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6432b54be62c0e11db8fe3fdda05cb630f8e26ba" translate="yes" xml:space="preserve">
          <source>The template parameter &lt;code&gt;T&lt;/code&gt; must be a C++ integer type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c432a081902bf7a43fe31581e3c349467654764" translate="yes" xml:space="preserve">
          <source>The template to use for the project. This determines whether the output of the build process will be an application, a library, or a plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ecd44d42d226a3e206c2366048134ae1448773" translate="yes" xml:space="preserve">
          <source>The template used for the project is usually specified by the &lt;a href=&quot;qmake-variable-reference#template&quot;&gt;TEMPLATE&lt;/a&gt; variable in the project file. You can override or modify this by using the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e749094357bdbfa53c21cdc46f31317f3d1125c2" translate="yes" xml:space="preserve">
          <source>The terminology for the channels can be misleading. Be aware that the process's output channels correspond to &lt;a href=&quot;qprocess&quot;&gt;QProcess&lt;/a&gt;'s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64ebda3d7f3695d8ff634841cf0f54885b1cd6a" translate="yes" xml:space="preserve">
          <source>The test application will exit once all &lt;a href=&quot;qml-qttest-testcase&quot;&gt;TestCase&lt;/a&gt; types have been triggered and have run. The &lt;a href=&quot;qml-qttest-testcase#optional-prop&quot;&gt;optional&lt;/a&gt; property can be used to exclude a &lt;a href=&quot;qml-qttest-testcase&quot;&gt;TestCase&lt;/a&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc2f5a7ad8cb5dc624e3d16d9ab312ec64e1e4e" translate="yes" xml:space="preserve">
          <source>The test application will exit once all &lt;a href=&quot;qml-testcase&quot;&gt;TestCase&lt;/a&gt; types have been triggered and have run. The &lt;a href=&quot;qml-testcase#optional-prop&quot;&gt;optional&lt;/a&gt; property can be used to exclude a &lt;a href=&quot;qml-testcase&quot;&gt;TestCase&lt;/a&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a246551c8be94c0db834c00602a3c59509175458" translate="yes" xml:space="preserve">
          <source>The test data has two elements, a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; called &lt;code&gt;aString&lt;/code&gt; and an integer called &lt;code&gt;expected&lt;/code&gt;. To fetch these values in the actual test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fd8e7148b85de1d61ce6f5ae7ccd01fce18b0c" translate="yes" xml:space="preserve">
          <source>The test framework will iterate over all of the rows in the table and pass each row to the test function. As shown, the columns can be extracted for use in the test. The &lt;code&gt;tag&lt;/code&gt; column is special - it is printed by the test framework when a row fails, to help the reader identify which case failed amongst a set of otherwise passing tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ced59cb32796c39e875de3255d0a21f768b367" translate="yes" xml:space="preserve">
          <source>The test harness scans the specified source directory recursively for &quot;tst_*.qml&quot; files. If &lt;code&gt;QUICK_TEST_SOURCE_DIR&lt;/code&gt; is not defined, then the current directory will be scanned when the harness is run. Other *.qml files may appear for auxillary QML components that are used by the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848dfd21898d018595095be30b1aac600d08823b" translate="yes" xml:space="preserve">
          <source>The test results are automatically cached, which also makes them available to all subprojects. It is therefore recommended to run all configuration tests in the top-level project file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae2fcb9dfccee0badddf707e63a69c9a48dfaeb" translate="yes" xml:space="preserve">
          <source>The testdata file will be resolved as the first existing file from:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4664511cd2519de332aca49c068493096a0f5bd" translate="yes" xml:space="preserve">
          <source>The tests for skipping the Qt WebEngine build are located in the &lt;code&gt;qtwebengine&lt;/code&gt; repository, in the &lt;code&gt;tools\qmake\mkspecs&lt;/code&gt; subdirectory. They can be found by searching for &lt;code&gt;skipBuild&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb5a4878d4824a6e3cc97693f13a3d7af45ba70" translate="yes" xml:space="preserve">
          <source>The text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebde1cc096f2ec282055f65aecc263f6d7998c8" translate="yes" xml:space="preserve">
          <source>The text (if any) to be drawn in the view item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9867db329d08f937b7b7e67d640b30b9f9d5761e" translate="yes" xml:space="preserve">
          <source>The text (label) color of the bar set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33414475e0ab2cfa6244f08d83c55e901123b372" translate="yes" xml:space="preserve">
          <source>The text appears beside the icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d8280831f5f2121a1c902103cb5895bd175a47" translate="yes" xml:space="preserve">
          <source>The text appears under the icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417f93e880a5cf72c50bb2194fedfa25ee85fad7" translate="yes" xml:space="preserve">
          <source>The text bounds of the dock widgets title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6db05e108344c0f613246a86848e890e9d80d0" translate="yes" xml:space="preserve">
          <source>The text can be either rich text or plain text. If you specify a rich text formatted string, it will be rendered using the default stylesheet, making it possible to embed images in the displayed text. To be as fast as possible, the default stylesheet uses a simple method to determine whether the text can be rendered as plain text. See &lt;a href=&quot;qt-sub-qtgui#mightBeRichText&quot;&gt;Qt::mightBeRichText&lt;/a&gt;() for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8c1bc7a6b3a7879595a4e8bb699c29008aacb9" translate="yes" xml:space="preserve">
          <source>The text can then be rendered by calling the layout's &lt;a href=&quot;qtextlayout#draw&quot;&gt;draw&lt;/a&gt;() function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1dcef8b8bb0a59d29069c1a63c4ab6a4dc7775" translate="yes" xml:space="preserve">
          <source>The text color of the current color group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcf1e7a50f8f0a336202dc6e347d8600fe5c692" translate="yes" xml:space="preserve">
          <source>The text color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948e50dcd2bce41aef78938d45dd2670248e8d61" translate="yes" xml:space="preserve">
          <source>The text document layout does not take ownership of &lt;code&gt;component&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ecb450d175a514e4097f36386cf3dbe588f7e0" translate="yes" xml:space="preserve">
          <source>The text edit may be able to provide some meta-information. For example, the &lt;a href=&quot;qtextedit#documentTitle-prop&quot;&gt;documentTitle&lt;/a&gt;() function will return the text from within HTML &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a2a16898abbe88eed42eba8659ed09e472ddd3" translate="yes" xml:space="preserve">
          <source>The text editor functions as a date field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4803989eb17478bb428c316ea30fddbd2e450ede" translate="yes" xml:space="preserve">
          <source>The text editor functions as a time field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984fe554401725ef957605a2bd501996c1053e5d" translate="yes" xml:space="preserve">
          <source>The text editor's cursor may also be used to edit a document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c1a61c2353f264d800e95bc8940512db287bba" translate="yes" xml:space="preserve">
          <source>The text elide mode of the column. Allowed values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0edd7feae975f06d738b8c7e4b4c35a1d9a4307" translate="yes" xml:space="preserve">
          <source>The text following the file name is the unique identifier for the snippet. This is used to delimit the quoted code in the relevant snippet file, as shown in the following example that corresponds to the above &lt;code&gt;\snippet&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af08b0c25f917f54dd5306d4879676d96d70c780" translate="yes" xml:space="preserve">
          <source>The text for the label. Rich text is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6e77582c69c94d0acc834149a754fa6314ddc8" translate="yes" xml:space="preserve">
          <source>The text for the menu item's shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5a2a40b0a60d97aff67aea77967914bc9d3f75" translate="yes" xml:space="preserve">
          <source>The text for the title bar's label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ef7dbdce23794a84b85c801fd8fe2ef8ec5d05" translate="yes" xml:space="preserve">
          <source>The text formatting commands indicate how text is to be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f70208ffba03d2ee933cd589d7a6392b72b6ec" translate="yes" xml:space="preserve">
          <source>The text highlight color, used behind selections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f92973788a6565750d81e7a817038993fc5533" translate="yes" xml:space="preserve">
          <source>The text in the &lt;a href=&quot;qml-qtquick-textinput&quot;&gt;TextInput&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfa80b939e52b7073be23f5d94ca07de2b4a310" translate="yes" xml:space="preserve">
          <source>The text in the &lt;b&gt;\quotation&lt;/b&gt; block will appear in the generated HTML as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279cf780ad89d9500783796abef52310100d5b94" translate="yes" xml:space="preserve">
          <source>The text in the delimited block is surrounded by &lt;b&gt;&amp;lt;blockquote&amp;gt;&lt;/b&gt; and &lt;b&gt;&amp;lt;/blockquote&amp;gt;&lt;/b&gt; in the html output, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2ce6ea1c6a97d2769ff3d99b3b8ebf7202d4b4" translate="yes" xml:space="preserve">
          <source>The text is assumed to be UTF-8 encoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b799a2da472065edbb4d91082774247a2f979a" translate="yes" xml:space="preserve">
          <source>The text is copied to the new node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a09350d6d7912677bc2898e16ccfd67cd4080f" translate="yes" xml:space="preserve">
          <source>The text is drawn using the painter's pen, and aligned and wrapped according to the specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056594ff4b8b6e9d59bd7fd63c39c95bdd2da40a" translate="yes" xml:space="preserve">
          <source>The text is encoded with UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7c70a36519dcf7a38f643000f23e179cf7b69c" translate="yes" xml:space="preserve">
          <source>The text is encoding with UTF-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db381a691397bd31a950e1cf22da1950d2ab836" translate="yes" xml:space="preserve">
          <source>The text is fully editable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b622b7c7e9174af7d0ea748653fc70d013a08e" translate="yes" xml:space="preserve">
          <source>The text is rotated 90 degrees clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03961bf42458478d316165322c6c137890e7a094" translate="yes" xml:space="preserve">
          <source>The text is rotated 90 degrees counter-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f51d00feb3d7144b1d607c2f1158a33c57c8ae" translate="yes" xml:space="preserve">
          <source>The text is set or replaced using &lt;a href=&quot;qplaintextedit#setPlainText&quot;&gt;setPlainText&lt;/a&gt;() which deletes the existing text and replaces it with the text passed to &lt;a href=&quot;qplaintextedit#setPlainText&quot;&gt;setPlainText&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea496e90388e800e8ba56b481a05e7c5487bc19" translate="yes" xml:space="preserve">
          <source>The text is set or replaced using &lt;a href=&quot;qtextedit#html-prop&quot;&gt;setHtml&lt;/a&gt;() which deletes any existing text and replaces it with the text passed in the &lt;a href=&quot;qtextedit#html-prop&quot;&gt;setHtml&lt;/a&gt;() call. If you call &lt;a href=&quot;qtextedit#html-prop&quot;&gt;setHtml&lt;/a&gt;() with legacy HTML, and then call &lt;a href=&quot;qtextedit#html-prop&quot;&gt;toHtml&lt;/a&gt;(), the text that is returned may have different markup, but will render the same. The entire text can be deleted with &lt;a href=&quot;qtextedit#clear&quot;&gt;clear&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19050ba11e8c3d13382fa5cd6b4144a49e733b3" translate="yes" xml:space="preserve">
          <source>The text is truncated to &lt;a href=&quot;qlineedit#maxLength-prop&quot;&gt;maxLength&lt;/a&gt;() length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2dabaebefdb9752279aef9ac4c5a8a20f358f2" translate="yes" xml:space="preserve">
          <source>The text is underlined using a wave shaped line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f35eef0626f655ae0bcf6941d2f033aeec7cb5" translate="yes" xml:space="preserve">
          <source>The text is used for names of items in &lt;a href=&quot;qundoview&quot;&gt;QUndoView&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532eafafa36940adef7a4700aa3c3be418f50b98" translate="yes" xml:space="preserve">
          <source>The text is used when the text properties of the stack's undo and redo actions are updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326a2ae3bb0788d6690abd104996b5a10fdc36f6" translate="yes" xml:space="preserve">
          <source>The text itself is fetched from &lt;a href=&quot;qml-qtquick-controls-styles-menustyle#styledata-properties&quot;&gt;styleData.text&lt;/a&gt;, and its appearance should depend on &lt;a href=&quot;qml-qtquick-controls-styles-menustyle#styledata-properties&quot;&gt;styleData.enabled&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-controls-styles-menustyle#styledata-properties&quot;&gt;styleData.selected&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc23fcb510e87254c5f10831af59d3dafbdede96" translate="yes" xml:space="preserve">
          <source>The text label of a &lt;a href=&quot;qprogressbar&quot;&gt;QProgressBar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41d0aba2ef527971fafd1c1ab8800fbaa073d40" translate="yes" xml:space="preserve">
          <source>The text layout creates a new line object that starts after the last line in the layout, or at the beginning if the layout is empty. The layout maintains an internal cursor, and each line is filled with text from the cursor position onwards when the &lt;a href=&quot;qtextline#setLineWidth&quot;&gt;QTextLine::setLineWidth&lt;/a&gt;() function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2373cae691dcec375301c1068c3ac7bf5398c0" translate="yes" xml:space="preserve">
          <source>The text of a &lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1643391175af99782cbc9df78b7fccab4e431e8e" translate="yes" xml:space="preserve">
          <source>The text of the button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba1b030d9860ccd0ee1692d8f85941fd5e85e14" translate="yes" xml:space="preserve">
          <source>The text of the current item in the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcdba6c1b47853860474543f3e82630d51c48f38" translate="yes" xml:space="preserve">
          <source>The text of the currently drawn section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d68742bb4a57c1442573dfe99e0bc2fa24a6d7" translate="yes" xml:space="preserve">
          <source>The text of the currently selected item in the &lt;a href=&quot;qml-qtquick-controls-combobox&quot;&gt;ComboBox&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9177c0b9deb072583a91b8959bcde03d41028ddf" translate="yes" xml:space="preserve">
          <source>The text of the form validation message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb59e7ec280e63a6b5ad31b6abce475d542aac5b" translate="yes" xml:space="preserve">
          <source>The text of the group box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badeeebcc79530478bd83bbe32f59fd86a092a1f" translate="yes" xml:space="preserve">
          <source>The text of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33c51620d8f860b51968fa378ea9104abf0c25a" translate="yes" xml:space="preserve">
          <source>The text of the link if the context menu was requested for a link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2743ff48341db1a2220da0f572fcfff38c036d25" translate="yes" xml:space="preserve">
          <source>The text of the menu item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ff34c429f1d06ef9e7ffc5cd96c40e7fbd8083" translate="yes" xml:space="preserve">
          <source>The text on the &lt;code&gt;//~&lt;/code&gt; line is optional extra information. The first word of the text is used as an additional identifier in the XML element in the .ts file so make sure the first word is not part of the sentence. For example, the comment &quot;Context Not related to that&quot; is converted to &quot;&amp;lt;extra-Context&amp;gt;Not related to that&quot; in the .ts file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4697593be5fb861a57168fc6f8acefcc727d1e27" translate="yes" xml:space="preserve">
          <source>The text on the toolbox tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bfa78fdbc7ee5d92f8936e4d688132936b8a2f" translate="yes" xml:space="preserve">
          <source>The text record does not match at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28f83f8edee26e2903afb97debd57609533b5b2" translate="yes" xml:space="preserve">
          <source>The text rendering with the Software adaptation is based on software rasterization and does not respond as well to transformations such as scaling, compared to when using OpenGL. The quality is similar to choosing &lt;a href=&quot;qml-qtquick-text#renderType-prop&quot;&gt;Text.NativeRendering&lt;/a&gt; with &lt;a href=&quot;qml-qtquick-text&quot;&gt;Text&lt;/a&gt; items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a768a9bc62f29dccbb95e132cef039f5c33d45" translate="yes" xml:space="preserve">
          <source>The text representation of JSON encloses arrays in square brackets ([ ... ]) and objects in curly brackets ({ ... }). Entries in arrays and objects are separated by commas. The separator between keys and values in an object is a colon (:).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcff5b965fe0f122f91ab95458bd045a7c021ae" translate="yes" xml:space="preserve">
          <source>The text returned is the same as the text displayed in the center (or in some styles, to the left) of the progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72b14bb8a1103341d8e1e9bcc8f249c60ae4ecb" translate="yes" xml:space="preserve">
          <source>The text stream cannot write to the underlying device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3675e3f59915cc2992859e8c4b122b636165d8c7" translate="yes" xml:space="preserve">
          <source>The text stream has read corrupt data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06784e67c245326494cfb712da884ac860254974" translate="yes" xml:space="preserve">
          <source>The text stream has read past the end of the data in the underlying device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894aac19be960c0ae6d5f7abebb5713b0122587a" translate="yes" xml:space="preserve">
          <source>The text stream is operating normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9602c6feeb427fe34cebac1fa9e621d9b2bf144e" translate="yes" xml:space="preserve">
          <source>The text string is interpreted as a plain text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ff33f1a4a829c807ca7ecbd8049cbb59babd50" translate="yes" xml:space="preserve">
          <source>The text string is interpreted as a rich text string. See &lt;a href=&quot;richtext-html-subset&quot;&gt;Supported HTML Subset&lt;/a&gt; for the definition of rich text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0210852943157597b430410c18bae3c51a471598" translate="yes" xml:space="preserve">
          <source>The text string is interpreted as for Qt::RichText if &lt;a href=&quot;qt-sub-qtgui#mightBeRichText&quot;&gt;Qt::mightBeRichText&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;, otherwise as Qt::PlainText.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d6eb2ee78a45a24c51e0d9c13358593b355318" translate="yes" xml:space="preserve">
          <source>The text that we add last is inserted after the child frame in the document. Since each frame is padded with text blocks, this ensures that more elements can always be inserted with a cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2844a10b0b7980c8324d7f83ad883c23dde58ce" translate="yes" xml:space="preserve">
          <source>The text to be displayed in the details area, which is hidden by default. The user will then be able to press the &lt;b&gt;Show Details...&lt;/b&gt; button to make it visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcdd0c32e4bb0b1da9bada907290f35a9e67fac" translate="yes" xml:space="preserve">
          <source>The text to be laid out can be provided in the constructor or set with &lt;a href=&quot;qtextlayout#setText&quot;&gt;setText&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0284aad8d1092239a6b3faa9c8dcdd63563b96d7" translate="yes" xml:space="preserve">
          <source>The text to be used by accessibility extensions and plugins, such as screen readers. (&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492ddacf526627ccfde7a84050ffb95086ba3963" translate="yes" xml:space="preserve">
          <source>The text to display. If the text format is AutoText the text edit will automatically determine whether the text should be treated as rich text. This determination is made using &lt;a href=&quot;qt-sub-qtgui#mightBeRichText&quot;&gt;Qt::mightBeRichText()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70b6ba4eb648384dbfd47f5393dfb2815e8d30b" translate="yes" xml:space="preserve">
          <source>The text to display. Text supports both plain and rich text strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156e8a433b173a29dcc2912595170ca34f4a9a46" translate="yes" xml:space="preserve">
          <source>The text up to the line break becomes the target name. Be sure to follow the target name with a line break. Curly brackets are not required around the target name, but they may be required when the target name is used in a link command. See below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5efbfa425c2f5ddb648a10ce10609240fbe5123" translate="yes" xml:space="preserve">
          <source>The text value could be filled by a &lt;code&gt;dummydata/clock.qml&lt;/code&gt; file with a &lt;code&gt;time&lt;/code&gt; property in the root context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2aa9e697430b98495f33646c289bdc3850df962" translate="yes" xml:space="preserve">
          <source>The text width specifies the preferred width for text in the document. If the text (or content in general) is wider than the specified with it is broken into multiple lines and grows vertically. If the text cannot be broken into multiple lines to fit into the specified text width it will be larger and the &lt;a href=&quot;qtextdocument#size-prop&quot;&gt;size&lt;/a&gt;() and the &lt;a href=&quot;qtextdocument#idealWidth&quot;&gt;idealWidth&lt;/a&gt;() property will reflect that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d080f5537cc0fa699eb49f7f6883b0e4726b92ea" translate="yes" xml:space="preserve">
          <source>The text will be drawn using the font and the transformation set on the painter. If the font and/or transformation set on the painter are different from the ones used to initialize the layout of the &lt;a href=&quot;qstatictext&quot;&gt;QStaticText&lt;/a&gt;, then the layout will have to be recalculated. Use &lt;a href=&quot;qstatictext#prepare&quot;&gt;QStaticText::prepare&lt;/a&gt;() to initialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09111ad8b9a9e62f4ec7c0979e351b8ca58a197a" translate="yes" xml:space="preserve">
          <source>The text will be interpreted as a plain text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53d2aa0b501c7cf67532663024bac61644fedc2" translate="yes" xml:space="preserve">
          <source>The text will be interpreted either as a plain text or as rich text, depending on the text format setting (&lt;a href=&quot;qmessagebox#textFormat-prop&quot;&gt;QMessageBox::textFormat&lt;/a&gt;). The default setting is &lt;a href=&quot;qt#TextFormat-enum&quot;&gt;Qt::AutoText&lt;/a&gt;, i.e., the message box will try to auto-detect the format of the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21908e3247dc2742a02bec0088bc748b4c16eac" translate="yes" xml:space="preserve">
          <source>The text will be interpreted either as plain text or as rich text, depending on the text format setting; see &lt;a href=&quot;qlabel#textFormat-prop&quot;&gt;setTextFormat&lt;/a&gt;(). The default setting is &lt;a href=&quot;qt#TextFormat-enum&quot;&gt;Qt::AutoText&lt;/a&gt;; i.e. &lt;a href=&quot;qlabel&quot;&gt;QLabel&lt;/a&gt; will try to auto-detect the format of the text set. See &lt;a href=&quot;richtext-html-subset&quot;&gt;Supported HTML Subset&lt;/a&gt; for the definition of rich text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24f8380a1898ed382305fc660391745fe315658" translate="yes" xml:space="preserve">
          <source>The text will be shown when the application is in &quot;What's This?&quot; mode and the user types the shortcut &lt;a href=&quot;qshortcut#key-prop&quot;&gt;key&lt;/a&gt;() sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8477c78684048bb2bd5090493f02266d4707c7" translate="yes" xml:space="preserve">
          <source>The text, font, position, scaling, rotation, and colors of a custom label can be set. In addition, the visibility of the borders and background of the label can be toggled. Colors, borders, and background are determined by the active theme unless set explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ece9aaeaeddf6eb10e75b347229a32cb5844fe" translate="yes" xml:space="preserve">
          <source>The text-property is mostly suitable for setting the initial content and handling modifications to relatively small text content. The &lt;a href=&quot;qml-qtquick-textedit#append-method&quot;&gt;append()&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-textedit#insert-method&quot;&gt;insert()&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-textedit#remove-method&quot;&gt;remove()&lt;/a&gt; methods provide more fine-grained control and remarkably better performance for modifying especially large rich text content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d34bb24791a4238799bb1e93373a1520982afd3" translate="yes" xml:space="preserve">
          <source>The texture file name for the item. If left unset, a solid gray texture will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac28fcc97a5b48e184727874a77ba922c0ca3a89" translate="yes" xml:space="preserve">
          <source>The texture file name for the surface texture. To clear the texture, an empty file name is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8aa91f2aa9314b32ad717272404d48412870c08" translate="yes" xml:space="preserve">
          <source>The texture format, dimensions, mipmap levels and array layers cannot be altered once storage ihas been allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3035d9df12b98f1d9e164d062401cfe4fe6facc" translate="yes" xml:space="preserve">
          <source>The texture has an alpha channel and should be drawn using blending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f14d81e4adb641bb7326ef4a8eb75da44444d4" translate="yes" xml:space="preserve">
          <source>The texture has mipmaps and can be drawn with mipmapping enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77e48e07b27bf68ccde587645490bf7b76794ad" translate="yes" xml:space="preserve">
          <source>The texture image loading confronted an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdba481434729b43f7451464fa81315200419399" translate="yes" xml:space="preserve">
          <source>The texture image loading has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d79b713fb873f5f8441cf4613ce50897bfe59d" translate="yes" xml:space="preserve">
          <source>The texture image loading has not been started yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2019bdf36f364f24cc1ce7747caf02e1ef5ec95" translate="yes" xml:space="preserve">
          <source>The texture image loading has started, but not finised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7459d2f9066dcc07fa97314ffaccbe2176b5ecd" translate="yes" xml:space="preserve">
          <source>The texture is a wrapper around an OpenGL texture, which texture id is given by &lt;a href=&quot;qsgtexture#textureId&quot;&gt;textureId&lt;/a&gt;() and which size in pixels is given by &lt;a href=&quot;qsgtexture#textureSize&quot;&gt;textureSize&lt;/a&gt;(). &lt;a href=&quot;qsgtexture#hasAlphaChannel&quot;&gt;hasAlphaChannel&lt;/a&gt;() reports if the texture contains opacity values and &lt;a href=&quot;qsgtexture#hasMipmaps&quot;&gt;hasMipmaps&lt;/a&gt;() reports if the texture contains mipmap levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c007952b293158e499e51bdbf2aaa3ee7235d558" translate="yes" xml:space="preserve">
          <source>The texture object is opaque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb91e7bf9502ec458a39531906cad1cd41a384a" translate="yes" xml:space="preserve">
          <source>The texture object owns the texture id and will delete the GL texture when the texture object is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52c8619e3ae6965198b382216d03501f0bd9252" translate="yes" xml:space="preserve">
          <source>The texture object owns the texture id and will delete the OpenGL texture when the texture object is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511daee5ef4d553f566f9615f6203f5f9aae22ed" translate="yes" xml:space="preserve">
          <source>The texture to be rendered can be set using &lt;a href=&quot;qsgopaquetexturematerial#setTexture&quot;&gt;setTexture&lt;/a&gt;(). How the texture should be rendered can be specified using &lt;a href=&quot;qsgopaquetexturematerial#setMipmapFiltering&quot;&gt;setMipmapFiltering&lt;/a&gt;(), &lt;a href=&quot;qsgopaquetexturematerial#setFiltering&quot;&gt;setFiltering&lt;/a&gt;(), &lt;a href=&quot;qsgopaquetexturematerial#setHorizontalWrapMode&quot;&gt;setHorizontalWrapMode&lt;/a&gt;() and &lt;a href=&quot;qsgopaquetexturematerial#setVerticalWrapMode&quot;&gt;setVerticalWrapMode&lt;/a&gt;(). The rendering state is set on the texture instance just before it is bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d9ed936be183918d9c9f1155ac56f4e2280737" translate="yes" xml:space="preserve">
          <source>The texture will return false for &lt;a href=&quot;qsgtexture#hasAlphaChannel&quot;&gt;QSGTexture::hasAlphaChannel&lt;/a&gt;() and will not be blended. This flag was added in Qt 5.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4bedf90bcca44d223021ad17031f704e485f61" translate="yes" xml:space="preserve">
          <source>The textured material respects the current matrix and the alpha channel of the texture. It will also respect the accumulated opacity in the scenegraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b386b0d523e1e344f2d17b087e125d2a64573b27" translate="yes" xml:space="preserve">
          <source>The textured material will fill every pixel in a geometry with the supplied texture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbb267642cb5d315efc50adaca28cebe3a3a2bc" translate="yes" xml:space="preserve">
          <source>The the meaning of the keys is equivalent to &lt;a href=&quot;qcanbusdevice#ConfigurationKey-enum&quot;&gt;ConfigurationKey&lt;/a&gt;. If a key is not explicitly mentioned the platform's default setting for the relevant key is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ffb6547444a45a1e1c2c85278ef61c81740984" translate="yes" xml:space="preserve">
          <source>The theme used by the chart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee704c2d1319bf72ff75290c5ef987a8aa709b2b" translate="yes" xml:space="preserve">
          <source>The thickness of the slice frames for each dimension. The values are fractions of the volume thickness in the same dimension. The values cannot be negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44c423bd85ec33e1a2f830b7f8a0518aa9ba24d" translate="yes" xml:space="preserve">
          <source>The third &lt;a href=&quot;qpushbutton&quot;&gt;QPushButton&lt;/a&gt; spans 2 columns. This is possible by specifying 2 as the fifth argument to &lt;a href=&quot;qgridlayout#addWidget-1&quot;&gt;QGridLayout::addWidget&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff64c7f93e035f99e6bf53732c49119b416d1cc" translate="yes" xml:space="preserve">
          <source>The third and fourth paths will be looked up within the QML engine's import path list. This is the same as what happens when you pass &lt;code&gt;Material&lt;/code&gt; as the style, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01c336974352d0d534ea435a4f640d3ee876992" translate="yes" xml:space="preserve">
          <source>The third is that &lt;a href=&quot;qplacemanager#matchingPlaces&quot;&gt;QPlaceManager::matchingPlaces&lt;/a&gt;() of the destination manager accept the &lt;a href=&quot;qplacematchrequest#AlternativeId-var&quot;&gt;QPlaceMatchRequest::AlternativeId&lt;/a&gt; as a parameter key and the alternative identifier attribute key as the value, in this case &lt;code&gt;x_id_&amp;lt;provider&lt;/code&gt; name&amp;gt; would be the expected value. This indicates that the identifiers of places in the &lt;a href=&quot;qplacematchrequest&quot;&gt;QPlaceMatchRequest&lt;/a&gt; should be matched against the &lt;code&gt;x_id_&amp;lt;provider&lt;/code&gt; name&amp;gt; alternative identifier attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043431b7dc24f11f434e3648d0ff089f41c8a85b" translate="yes" xml:space="preserve">
          <source>The third method is more convenient when you are simply testing your application on a device physically connected to your development machine (or an emulator). It will copy the Qt libraries into a temporary directory on your device and run the application against these instead. An APK built in this way is not distributable, since it relies on the device being prepared to contain the Qt libraries in the correct location. However, since the Qt libraries are only copied into the device once, it benefits from a faster turn-around time, so it's more suited for testing changes to your application during development. This deployment method can be selected by opening the &lt;b&gt;Run&lt;/b&gt; settings of your project, expanding &lt;b&gt;Deploy Configurations&lt;/b&gt; and choosing &lt;b&gt;Deploy local Qt libraries&lt;/b&gt;. Make sure the &lt;b&gt;Use local Qt libraries&lt;/b&gt; check box is also ticked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cfddedfe6630117dad6c3a5cbfea827f7d062a" translate="yes" xml:space="preserve">
          <source>The third state of checkboxes (half checked in tri-state check boxes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815797f8dd82677bd4b46e8e2b53e77d2244c7f2" translate="yes" xml:space="preserve">
          <source>The third string matches '&lt;u&gt;6&lt;/u&gt;'. This is a simple validation regexp for integers in the range 0 to 99.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa1e4581e7b1b49619035bd73f4d176df8b9ecf" translate="yes" xml:space="preserve">
          <source>The third user-defined button (see also &lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HaveCustomButton3&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac5d950fad60cf5ed3f1816966519fd0833506e" translate="yes" xml:space="preserve">
          <source>The third way to create the button is a bit more structured, both in terms of where the file sits in the file system and how it is used in QML. First, copy an existing file as you did above, but this time, put it into a subfolder in your project named (for example) &lt;code&gt;controls&lt;/code&gt;. To use the control, first import the folder into a namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f656fa006e21e4983c9a512e3f169f3579df0c9a" translate="yes" xml:space="preserve">
          <source>The this pointer and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60b49d8d57412aa246cf9005cd12b6750c8b182" translate="yes" xml:space="preserve">
          <source>The thread associated with this &lt;a href=&quot;qthread&quot;&gt;QThread&lt;/a&gt; object has finished execution (i.e. when it returns from &lt;a href=&quot;qthread#run&quot;&gt;run&lt;/a&gt;()). This function will return true if the thread has finished. It also returns true if the thread has not been started yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b96b6852b86754c63ecfc07ab54016b7bf1167" translate="yes" xml:space="preserve">
          <source>The thread support commands are for specifying the level of support for multithreaded programming in a class or function. There are three levels of support: &lt;code&gt;threadsafe&lt;/code&gt;, &lt;code&gt;reentrant&lt;/code&gt; and &lt;code&gt;nonreentrant&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212989faa3d5edff6ed914d6b0264d41e2f8e1bb" translate="yes" xml:space="preserve">
          <source>The threaded renderer is currently used by default on Windows with opengl32.dll, Linux with non-Mesa based drivers, mobile platforms, and Embedded Linux with EGLFS but this is subject to change. It is possible to force use of the threaded renderer by setting &lt;code&gt;QSG_RENDER_LOOP=threaded&lt;/code&gt; in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b8a6303aaaf3aded6a981f801dda67f58de615" translate="yes" xml:space="preserve">
          <source>The three angles are applied to the device in the following order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bee06746a8eb36811d02eabd4ec8c8d153ab8d" translate="yes" xml:space="preserve">
          <source>The three availables check states are: checked, partially checked and unchecked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e05fd0be4d974d539dab09e0f83bec30855b7c1" translate="yes" xml:space="preserve">
          <source>The three dimensional position of an object such as a mobile device can be specified by giving the latitude, longitude and altitude. That is the values held in the l {coordinate} type. Additionally for computation of future positions we would like to know if the object is moving, what &lt;a href=&quot;qml-qtpositioning-position#speed-prop&quot;&gt;speed&lt;/a&gt; it is doing and what is the &lt;a href=&quot;qml-qtpositioning-position#timestamp-prop&quot;&gt;timestamp&lt;/a&gt; of the last position data. Position therefore includes values for the &lt;a href=&quot;qml-qtpositioning-position#coordinate-prop&quot;&gt;coordinate&lt;/a&gt;, &lt;a href=&quot;qml-qtpositioning-position#speed-prop&quot;&gt;speed&lt;/a&gt; and a &lt;a href=&quot;qml-qtpositioning-position#timestamp-prop&quot;&gt;timestamp&lt;/a&gt;. &lt;a href=&quot;qml-qtpositioning-position&quot;&gt;Position&lt;/a&gt; also takes responsibility for validation of sensible values for these properties. These are exposed as the &lt;a href=&quot;qml-qtpositioning-position#latitudeValid-prop&quot;&gt;latitudeValid&lt;/a&gt;, &lt;a href=&quot;qml-qtpositioning-position#longitudeValid-prop&quot;&gt;longitudeValid&lt;/a&gt;, &lt;a href=&quot;qml-qtpositioning-position#altitudeValid-prop&quot;&gt;altitudeValid&lt;/a&gt;, &lt;a href=&quot;qml-qtpositioning-position#speedValid-prop&quot;&gt;speedValid&lt;/a&gt;, &lt;a href=&quot;qml-qtpositioning-position#horizontalAccuracyValid-prop&quot;&gt;horizontalAccuracyValid&lt;/a&gt;, and &lt;a href=&quot;qml-qtpositioning-position#verticalAccuracyValid-prop&quot;&gt;verticalAccuracyValid&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968030d9de5d19ad11ff68b603effeae910a5b60" translate="yes" xml:space="preserve">
          <source>The three original states have been renamed &lt;code&gt;s11&lt;/code&gt;, &lt;code&gt;s12&lt;/code&gt; and &lt;code&gt;s13&lt;/code&gt; to reflect that they are now children of the new top-level state, &lt;code&gt;s1&lt;/code&gt;. Child states implicitly inherit the transitions of their parent state. This means it is now sufficient to add a single transition from &lt;code&gt;s1&lt;/code&gt; to the final state &lt;code&gt;s2&lt;/code&gt;. New states added to &lt;code&gt;s1&lt;/code&gt; will also automatically inherit this transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137856eee1646226c8c6edcf0bdb0f9cc988c747" translate="yes" xml:space="preserve">
          <source>The three original states have been renamed &lt;code&gt;s11&lt;/code&gt;, &lt;code&gt;s12&lt;/code&gt; and &lt;code&gt;s13&lt;/code&gt; to reflect that they are now childrens of the new top-level state, &lt;code&gt;s1&lt;/code&gt;. Child states implicitly inherit the transitions of their parent state. This means it is now sufficient to add a single transition from &lt;code&gt;s1&lt;/code&gt; to the final state, &lt;code&gt;s2&lt;/code&gt;. New states added to &lt;code&gt;s1&lt;/code&gt; will automatically inherit this transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbd5343a5a7092fc4ae9a0f61803a9c99756578" translate="yes" xml:space="preserve">
          <source>The three required parameters are the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0811b026db22773c835591a13a41c4344a1403" translate="yes" xml:space="preserve">
          <source>The tick counter clock type is based on the system's or the processor's tick counter, multiplied by the duration of a tick. This clock type is used on Windows platforms. If the high-precision performance counter is available on Windows, the &lt;code&gt;&lt;a href=&quot;#performancecounter&quot;&gt;PerformanceCounter&lt;/a&gt;&lt;/code&gt; clock type is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fa0c93ce75f56c2a11c176c3102a92c0276424" translate="yes" xml:space="preserve">
          <source>The tickmarks for the dial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c99f8d88ff564472b9e89666c7f77db0727d7f3" translate="yes" xml:space="preserve">
          <source>The tiles are cached in a &lt;code&gt;QtLocation/osm&lt;/code&gt; directory in &lt;a href=&quot;qstandardpaths#writableLocation&quot;&gt;QStandardPaths::writableLocation&lt;/a&gt; (&lt;a href=&quot;qstandardpaths#StandardLocation-enum&quot;&gt;QStandardPaths::GenericCacheLocation&lt;/a&gt;). On systems that have no concept of a shared cache, the application-specific &lt;a href=&quot;qstandardpaths#StandardLocation-enum&quot;&gt;QStandardPaths::CacheLocation&lt;/a&gt; is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed4a1cf8fbb4b1dec07b503324666f2911653c2" translate="yes" xml:space="preserve">
          <source>The tilt sensor reports the angle of tilt in degrees of the device along the X and Y plane.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d636002dbe7633a1e7f674cba785ce40103ed4f6" translate="yes" xml:space="preserve">
          <source>The time elapsed can also be used to recalculate the time available for another operation, after the first one is complete. This is useful when the execution must complete within a certain time period, but several steps are needed. The &lt;code&gt;waitFor&lt;/code&gt;-type functions in &lt;a href=&quot;qiodevice&quot;&gt;QIODevice&lt;/a&gt; and its subclasses are good examples of such need. In that case, the code could be as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee3c740d685921b654172213440d1453a7a9796" translate="yes" xml:space="preserve">
          <source>The time in milliseconds before the group will attempt to transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6403c3b81aeed669f59a49d0939ce74b8ce1e8f" translate="yes" xml:space="preserve">
          <source>The time in milliseconds each emitted particle should last for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e512956c231a8977d71a36592355a2e28901e562" translate="yes" xml:space="preserve">
          <source>The time in milliseconds in which all QAbstractActionInput's in the input sequence must triggered within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f28c86a4590d1279cfa6ea0581b9a8df6ebba24" translate="yes" xml:space="preserve">
          <source>The time in seconds that an event point must be pressed in order to trigger a long press gesture and emit the &lt;a href=&quot;qml-qtquick-taphandler#longPressed-signal&quot;&gt;longPressed()&lt;/a&gt; signal. If the point is released before this time limit, a tap can be detected if the &lt;a href=&quot;qml-qtquick-taphandler#gesturePolicy-prop&quot;&gt;gesturePolicy&lt;/a&gt; constraint is satisfied. The default value is &lt;a href=&quot;qstylehints#mousePressAndHoldInterval-prop&quot;&gt;QStyleHints::mousePressAndHoldInterval()&lt;/a&gt; converted to seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35ef2d330da6686ce1c8dce6cf1ea3ce365f377" translate="yes" xml:space="preserve">
          <source>The time in seconds that the particle has left to live at the current point in time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dc4b20e8bb8f6602812c761d13404a92e6283f" translate="yes" xml:space="preserve">
          <source>The time in seconds that the particle will live for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a488561a912a03534c9d98774f54195377a81384" translate="yes" xml:space="preserve">
          <source>The time in which all &lt;a href=&quot;qt3dinput-qabstractactioninput&quot;&gt;QAbstractActionInput&lt;/a&gt;'s in the input chord must triggered within. The time is in milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5280b94794720b9a8575e723fd59cdf4a91600f4" translate="yes" xml:space="preserve">
          <source>The time in which all &lt;a href=&quot;qt3dinput-qabstractactioninput&quot;&gt;QAbstractActionInput&lt;/a&gt;'s in the input sequence must triggered within. The time is in milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cafe11fc454149aeab8ed92000299d541d21f50" translate="yes" xml:space="preserve">
          <source>The time interval is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb83450993b378061e9a78ddc1a1d4d7b6c2995" translate="yes" xml:space="preserve">
          <source>The time is valid if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42148436438fcb9a3fe8966791890e7a4ed84e4" translate="yes" xml:space="preserve">
          <source>The time the CPU should wait, a non-zero value, for the GPU to finish its work after each call to Present(). The default value is 0 (disabled). This behavior effectively kills all parallelism but makes the behavior resemble the traditional swap-blocks-for-vsync model, which can be useful in some special cases. However, this behavior is not the same as setting the frame count to 1 because that still avoids blocking after Present(), and may only block when starting to prepare the next frame (or may not block at all depending on the time gap between the frames).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6862f33958c59ea00a1417cc138352a4d9390fd4" translate="yes" xml:space="preserve">
          <source>The time zone offset data for a given moment in time, i.e. the time zone offsets and abbreviation to use at that moment in time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6078f8fc9f93ad489e0d1dafdceac285e9f6649" translate="yes" xml:space="preserve">
          <source>The time, in seconds since the beginning of the simulation, that the particle was born.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9f2f764f4b6d218e54f2ba4e5f707a797df005" translate="yes" xml:space="preserve">
          <source>The timeline is not running. This is the initial state of &lt;a href=&quot;qtimeline&quot;&gt;QTimeLine&lt;/a&gt;, and the state &lt;a href=&quot;qtimeline&quot;&gt;QTimeLine&lt;/a&gt; reenters when finished. The current time, frame and value remain unchanged until either &lt;a href=&quot;qtimeline#currentTime-prop&quot;&gt;setCurrentTime&lt;/a&gt;() is called, or the timeline is started by calling &lt;a href=&quot;qtimeline#start&quot;&gt;start&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5acf2a479cf51923aeab4c2606abd1fe6bde6d2" translate="yes" xml:space="preserve">
          <source>The timeline is paused (i.e., temporarily suspended). Calling &lt;a href=&quot;qtimeline#setPaused&quot;&gt;setPaused&lt;/a&gt;(false) will resume timeline activity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4a20bf1e5ab852c6fc77ae9b52ac233ed6bd39" translate="yes" xml:space="preserve">
          <source>The timeline is running. While control is in the event loop, &lt;a href=&quot;qtimeline&quot;&gt;QTimeLine&lt;/a&gt; will update its current time at regular intervals, emitting &lt;a href=&quot;qtimeline#valueChanged&quot;&gt;valueChanged&lt;/a&gt;() and &lt;a href=&quot;qtimeline#frameChanged&quot;&gt;frameChanged&lt;/a&gt;() when appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acbb1fd9a24c13ebc94a822edfcfb504b96b97f" translate="yes" xml:space="preserve">
          <source>The timeline will start from position 0, or the end if going backward. If you want to resume a stopped timeline without restarting, you can call &lt;a href=&quot;qtimeline#resume&quot;&gt;resume&lt;/a&gt;() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85921e5afe50217c71153b158a88265fce08086" translate="yes" xml:space="preserve">
          <source>The timeout interval in milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a4b1fdd5460e8a457a9112704dfc453e2d5647" translate="yes" xml:space="preserve">
          <source>The timeout is used by the client to determine how long it waits for a response from the server. If the response is not received within the required timeout, the &lt;a href=&quot;qmodbusdevice#Error-enum&quot;&gt;TimeoutError&lt;/a&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b747cb4cb03242cc72bb693e58f60c8c9f1457e3" translate="yes" xml:space="preserve">
          <source>The timer identifier is returned by &lt;a href=&quot;qobject#startTimer&quot;&gt;startTimer&lt;/a&gt;() when a timer event is started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26aaa04df9bab322013a87e0aece0996775aff5" translate="yes" xml:space="preserve">
          <source>The timer in the main example sends messages to the worker script by calling &lt;a href=&quot;qml-qtqml-workerscript#sendMessage-method&quot;&gt;WorkerScript::sendMessage()&lt;/a&gt;. When this message is received, &lt;code&gt;WorkerScript.onMessage()&lt;/code&gt; is invoked in &lt;code&gt;dataloader.mjs&lt;/code&gt;, which appends the current time to the list model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066c361c0149ea358a3b45b3aff53137414d55c0" translate="yes" xml:space="preserve">
          <source>The timer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb9edac208aea74dd7355bb675a76f97a2e05e9" translate="yes" xml:space="preserve">
          <source>The timer type for this &lt;a href=&quot;qdeadlinetimer&quot;&gt;QDeadlineTimer&lt;/a&gt; object will be set to the specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141e2ac0c35d0b0276112d7726870b29b04679a0" translate="yes" xml:space="preserve">
          <source>The timer type indicates how accurate a timer can be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596785ea7f2a3fbf6d19ff623b0ecee9fc823f75" translate="yes" xml:space="preserve">
          <source>The timer's interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1375213803d900418df212a228465ec6c6d7f23" translate="yes" xml:space="preserve">
          <source>The timer's type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d30d55bace8235a60d790aa03e25aa010bc0f8c" translate="yes" xml:space="preserve">
          <source>The timer's unique id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbe144b86bdf1044fbfdd409a2153eed4dc9aa7" translate="yes" xml:space="preserve">
          <source>The timestamp value of the candlestick item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283d63a7439ddb50d97d62ac8d6a959c35236a72" translate="yes" xml:space="preserve">
          <source>The tint color should usually be mostly transparent, or you will not be able to see the underlying color. The below example provides a slight red tint by having the tint color be pure red which is only 1/16th opaque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d475e57e3b7fa15c07584c11797e592fa07401dc" translate="yes" xml:space="preserve">
          <source>The tip is a short piece of text reminding the user of the widget's function. It is drawn immediately below the given position in a distinctive black-on-yellow color combination. The tip can be any &lt;a href=&quot;qtextedit&quot;&gt;rich text&lt;/a&gt; formatted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1edcaed19676a218f75a7eca20c25d452ba69d5" translate="yes" xml:space="preserve">
          <source>The tips and suggestions contained in this section are guidelines only, and may not be applicable in all circumstances. Be sure to benchmark and analyze your application carefully using empirical metrics, in order to make the best decisions possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f375d454e345525fa70797a06b35ad350a619d28" translate="yes" xml:space="preserve">
          <source>The title and subtitle are set by calling &lt;a href=&quot;qwizardpage#title-prop&quot;&gt;QWizardPage::setTitle&lt;/a&gt;() and &lt;a href=&quot;qwizardpage#subTitle-prop&quot;&gt;QWizardPage::setSubTitle&lt;/a&gt;() on the individual pages. They may be plain text or HTML (see &lt;a href=&quot;qwizard#titleFormat-prop&quot;&gt;titleFormat&lt;/a&gt; and &lt;a href=&quot;qwizard#subTitleFormat-prop&quot;&gt;subTitleFormat&lt;/a&gt;). The pixmaps can be set globally for the entire wizard using &lt;a href=&quot;qwizard#setPixmap&quot;&gt;setPixmap&lt;/a&gt;(), or on a per-page basis using &lt;a href=&quot;qwizardpage#setPixmap&quot;&gt;QWizardPage::setPixmap&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f861b6f9b947e7e5334cb3eda596dc9947f2a8" translate="yes" xml:space="preserve">
          <source>The title bar caption of a window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbedf38071c5420038e7d1aea13081b1337cfa5d" translate="yes" xml:space="preserve">
          <source>The title bar complex control, &lt;code&gt;CC_TitleBar&lt;/code&gt;, is used to draw the title bars of internal windows in &lt;a href=&quot;qmdiarea&quot;&gt;QMdiArea&lt;/a&gt;. It typically consists of a window title, and close, minimize, system menu, and maximize buttons. Some styles also provide buttons for shading the window, as well as a button for context sensitive help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6369df088835ad6247e9986253ef9a293085f6d" translate="yes" xml:space="preserve">
          <source>The title bar has no border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3c56eccdb703da4e75d6fac1b2002a98aca08f" translate="yes" xml:space="preserve">
          <source>The title bar widget must have a valid &lt;a href=&quot;qwidget#sizeHint-prop&quot;&gt;QWidget::sizeHint&lt;/a&gt;() and &lt;a href=&quot;qwidget#minimumSizeHint-prop&quot;&gt;QWidget::minimumSizeHint&lt;/a&gt;(). These functions should take into account the current orientation of the title bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed88a0e672502a1e10cbee042a3b92bf5d8bcd94" translate="yes" xml:space="preserve">
          <source>The title bar's icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5316e85815825bec4262f7b9d06fa06bdd15a5fe" translate="yes" xml:space="preserve">
          <source>The title font of the chart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db42116ddb649bea1889c0cdd49f972fbb9eda2" translate="yes" xml:space="preserve">
          <source>The title for the axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b4f34381515e6e3fd69dbfd67df99bb668241c" translate="yes" xml:space="preserve">
          <source>The title is displayed in the dialog header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac05f3578159b55ca10c3ae5753e9ee9308ae8a4" translate="yes" xml:space="preserve">
          <source>The title is often displayed at the top of a page to give the user context about the page they are viewing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b823c3b4fddff9248b9b46f168400f38a9083d78" translate="yes" xml:space="preserve">
          <source>The title is shown as a headline on top of the chart. Chart titles support HTML formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48cdbcf651dbefb4ac954e55fae422084dd2f45" translate="yes" xml:space="preserve">
          <source>The title is shown by the &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt;, above the actual page. All pages should have a title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5743777eaeb8a4ebf993b00bf788a87c1bbbc2e4" translate="yes" xml:space="preserve">
          <source>The title is typically displayed above the groupbox to summarize its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f123d4ddfce2658fd3758a7913d0433c0b896302" translate="yes" xml:space="preserve">
          <source>The title may be plain text or HTML, depending on the value of the &lt;a href=&quot;qwizard#titleFormat-prop&quot;&gt;QWizard::titleFormat&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345c2116093dfea290ccf158856ef700f96d12dd" translate="yes" xml:space="preserve">
          <source>The title of a &lt;a href=&quot;qgroupbox&quot;&gt;QGroupBox&lt;/a&gt; or a &lt;a href=&quot;qdockwidget&quot;&gt;QDockWidget&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb82af7e41ff9a28a79947c205cc226bf5376ff6" translate="yes" xml:space="preserve">
          <source>The title of a group box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd403f9182c238e770ed530f5df66230f93f813a" translate="yes" xml:space="preserve">
          <source>The title of a menu is often displayed in the text of a menu item when the menu is a submenu, and in the text of a tool button when it is in a menubar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd7195add7aa0a2bcfb60e1ffd4f1370975a318" translate="yes" xml:space="preserve">
          <source>The title of an HTML document can be accessed with the &lt;a href=&quot;qwebengineview#title-prop&quot;&gt;title&lt;/a&gt;() property. Additionally, a web site may specify an icon, which can be accessed using the &lt;a href=&quot;qwebengineview#icon-prop&quot;&gt;icon&lt;/a&gt;() or its URL using the &lt;a href=&quot;qwebengineview#iconUrl-prop&quot;&gt;iconUrl&lt;/a&gt;() property. If the title or the icon changes, the corresponding &lt;a href=&quot;qwebengineview#titleChanged&quot;&gt;titleChanged&lt;/a&gt;(), &lt;a href=&quot;qwebengineview#iconChanged&quot;&gt;iconChanged&lt;/a&gt;() and &lt;a href=&quot;qwebengineview#iconUrlChanged&quot;&gt;iconUrlChanged&lt;/a&gt;() signals will be emitted. The &lt;a href=&quot;qwebengineview#zoomFactor-prop&quot;&gt;zoomFactor&lt;/a&gt;() property enables zooming the contents of the web page by a scale factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b168d40237d9ceb65ef386e612b68e416f80fd" translate="yes" xml:space="preserve">
          <source>The title of an HTML page can be accessed with the &lt;a href=&quot;qml-qtwebengine-webengineview#title-prop&quot;&gt;title&lt;/a&gt; property. Additionally, a web page may specify an icon, which can be accessed using the &lt;a href=&quot;qml-qtwebengine-webengineview#icon-prop&quot;&gt;icon&lt;/a&gt; property. The &lt;a href=&quot;qml-qtwebengine-webengineview#zoomFactor-prop&quot;&gt;zoomFactor&lt;/a&gt; property enables zooming the contents of the web page by a scale factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d44b5eddecaf089cb2f6ccff05f260e7e24cec8" translate="yes" xml:space="preserve">
          <source>The title of an HTML page can be accessed with the &lt;a href=&quot;qwebenginepage#title-prop&quot;&gt;title&lt;/a&gt;() property. Additionally, a page may also specify an icon, which can be accessed using the &lt;a href=&quot;qwebenginepage#icon-prop&quot;&gt;icon&lt;/a&gt;() or its URL using the &lt;a href=&quot;qwebenginepage#iconUrl-prop&quot;&gt;iconUrl&lt;/a&gt;() property. If the title or the icon changes, the corresponding &lt;a href=&quot;qwebenginepage#titleChanged&quot;&gt;titleChanged&lt;/a&gt;(), &lt;a href=&quot;qwebenginepage#iconChanged&quot;&gt;iconChanged&lt;/a&gt;() and &lt;a href=&quot;qwebenginepage#iconUrlChanged&quot;&gt;iconUrlChanged&lt;/a&gt;() signals will be emitted. The &lt;a href=&quot;qwebenginepage#zoomFactor-prop&quot;&gt;zoomFactor&lt;/a&gt;() property enables zooming the contents of the web page by a scale factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d536552048c97bde88cf4a73491078540029ad8f" translate="yes" xml:space="preserve">
          <source>The title of the album the media belongs to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894b296b5a58c7832c7ced897e32a6e9ca664287" translate="yes" xml:space="preserve">
          <source>The title of the axis. Empty by default. Axis titles support HTML formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578edb3fcbb17d9566121c5de599c2c86c6366a6" translate="yes" xml:space="preserve">
          <source>The title of the calendar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35e6f6395bd1ef01bde103d96664c9bb12ddd74" translate="yes" xml:space="preserve">
          <source>The title of the category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe8a5b43cbea1644313b6e12902b13a72e49d3f" translate="yes" xml:space="preserve">
          <source>The title of the currently displayed HTML page. This is a read-only value that reflects the contents of the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de25528827b3468d1c346bddcdadf144f146387" translate="yes" xml:space="preserve">
          <source>The title of the currently loaded web page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6433ba1da2a1e303e73ea4421fa24192d16157cc" translate="yes" xml:space="preserve">
          <source>The title of the dialog window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4e26efc533bcb594a03680c89e0d100e4a273c" translate="yes" xml:space="preserve">
          <source>The title of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccf9529289cb291256c13c810de5929eb3d9905" translate="yes" xml:space="preserve">
          <source>The title of the editorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23efe431c3d85c242b0ac36e49f98981dffa8fac" translate="yes" xml:space="preserve">
          <source>The title of the link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9650da7dd702c97879c32721dd361205c49bbb" translate="yes" xml:space="preserve">
          <source>The title of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68371ae0d7e57944b15e3640c0e98c55e6448bff" translate="yes" xml:space="preserve">
          <source>The title of the review.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bd7e385ee328eab70304039e3eac8a098f1416" translate="yes" xml:space="preserve">
          <source>The title text of the column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255f2b38ef665d1afaf5c135c0a0069d225f5878" translate="yes" xml:space="preserve">
          <source>The title text of the dock window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8caabe369b5f6638ce617f48ca5898dc0c70e1d2" translate="yes" xml:space="preserve">
          <source>The toFillPolygons() function differs from the &lt;a href=&quot;qpainterpath#toSubpathPolygons&quot;&gt;toSubpathPolygons&lt;/a&gt;() function in that it create only polygon for subpaths that have overlapping bounding rectangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c143cb8d317246169a50c573fd3801a3b711b9" translate="yes" xml:space="preserve">
          <source>The tool bar can be defined by overriding the background component and setting the content padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047086b1989e6fb8b6c372c6f3acc2427f86d88e" translate="yes" xml:space="preserve">
          <source>The tool bar displays common actions that are used when editing a form. These are also available via the main menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7b50f6af007b2bc29f6ad509bed665f842ba23" translate="yes" xml:space="preserve">
          <source>The tool button has a menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f946cb74a9bd16c0e909f2b3e9efeb25f4237faf" translate="yes" xml:space="preserve">
          <source>The tool button has the autoRise property set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e503558b50dee083f67d9806c20d07b35fe2580c" translate="yes" xml:space="preserve">
          <source>The tool button is an arrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034461425aa3b860ed04108b9cffd5401ffaf1d6" translate="yes" xml:space="preserve">
          <source>The toolbar area in which the toolbar lives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3568648912c7d1a71ea80005afb3d9b8e4794fe5" translate="yes" xml:space="preserve">
          <source>The toolbar button is toggled on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bed93b94d065aaef104deb19e22ce8464d0e7f4" translate="yes" xml:space="preserve">
          <source>The toolbar cannot be moved. The default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9c748618923297aa099e42314a92dafc129689" translate="yes" xml:space="preserve">
          <source>The toolbar is at the bottom, as a window or page footer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1935d62608d7550bcb55c59015e608a8f5fc3d86" translate="yes" xml:space="preserve">
          <source>The toolbar is at the top, as a window or page header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e69c06925154829803e6a51daf3f464b38a1d0" translate="yes" xml:space="preserve">
          <source>The toolbar is located at the beginning of the line, or the toolbar line is the first of several lines. There can only be one toolbar (and only one line) with this position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58524c0dae9ff1e8978ebb78bdc9c722a22b096a" translate="yes" xml:space="preserve">
          <source>The toolbar is located at the end of the line, or the toolbar line is the last of several lines. There can only be one toolbar (and only one line) with this position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9731863960010dcd2718287f120f57a876a04a62" translate="yes" xml:space="preserve">
          <source>The toolbar is located in the middle of the line, or the toolbar line is in the middle of several lines. There can several toolbars (and lines) with this position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558214ee8f54659de4d8e5f5b68848dd4a375694" translate="yes" xml:space="preserve">
          <source>The toolbar is movable, and a handle will appear when holding the cursor over the toolbar's boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4060df160dbee121be2151f81f9b3da1fca3b0e8" translate="yes" xml:space="preserve">
          <source>The toolbar must be attached to a &lt;a href=&quot;qwindow&quot;&gt;QWindow&lt;/a&gt; using the &lt;a href=&quot;qmactoolbar#attachToWindow&quot;&gt;attachToWindow()&lt;/a&gt; method in order to be visible. The toolbar is attached to the native NSWindow and is displayed above the &lt;a href=&quot;qwindow&quot;&gt;QWindow&lt;/a&gt;. &lt;a href=&quot;qmactoolbar&quot;&gt;QMacToolBar&lt;/a&gt; visibility follows window visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420ce97a94cca4cb23af82a1ec04f5910196af01" translate="yes" xml:space="preserve">
          <source>The toolbar takes ownership of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf96cd8082e265d7108cfa113486b7da7408307e" translate="yes" xml:space="preserve">
          <source>The toolbox's tab and label within a &lt;a href=&quot;qtoolbox&quot;&gt;QToolBox&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab9e84361785e4a960cb34b2528f0afef33a2ea" translate="yes" xml:space="preserve">
          <source>The toolbox's tab label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb5ded2ff7343ffd0abf85ed49011c5b66d2ef0" translate="yes" xml:space="preserve">
          <source>The toolbox's tab shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bada439e0dc5264813f180521c4eb23de32d85" translate="yes" xml:space="preserve">
          <source>The tooltip of the button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4e2fc5be0285dacabdd731df6e9a1fce471615" translate="yes" xml:space="preserve">
          <source>The top edge of the object is vertically aligned with the base line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab98b412290ee9557a7124bbca5088d7e043fe2" translate="yes" xml:space="preserve">
          <source>The top edge of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c757b77b2d7555a1e68149f134c3705c87e48b1a" translate="yes" xml:space="preserve">
          <source>The top edge of the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d704c632aef24ca28bcfafa025e98322f72fbd7" translate="yes" xml:space="preserve">
          <source>The top edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469a30fdf8e9afd807392d7da4e7bbf5d939278d" translate="yes" xml:space="preserve">
          <source>The top glass frame margin. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c640c546141601edb9023fdeca957d934d327c" translate="yes" xml:space="preserve">
          <source>The top left corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6779ff329efbfc70f093ab952c8a12efcc2e8d" translate="yes" xml:space="preserve">
          <source>The top margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8888774cfdd53edc2f78d4de40d8f5664c2b5c73" translate="yes" xml:space="preserve">
          <source>The top right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe858bafb487fc4d4d53bfd621c87a588beb6aad" translate="yes" xml:space="preserve">
          <source>The top side of a layout item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760c8a3e2de5244c11973365ca32ed9a36cc3dc6" translate="yes" xml:space="preserve">
          <source>The top-left corner of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932dc9ba3d5a3c15eb5f97095ee677bd7f00187f" translate="yes" xml:space="preserve">
          <source>The top-left corner of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddbd216fb4b86a7b75546ab3f9406dce4e2704e" translate="yes" xml:space="preserve">
          <source>The top-left item initially receives focus by setting &lt;a href=&quot;qml-qtquick-item#focus-prop&quot;&gt;focus&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;. When an arrow key is pressed, the focus will move to the appropriate item, as defined by the value that has been set for the &lt;a href=&quot;qml-qtquick-keynavigation&quot;&gt;KeyNavigation&lt;/a&gt;&lt;a href=&quot;qml-qtquick-keynavigation#left-prop&quot;&gt;left&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-keynavigation#right-prop&quot;&gt;right&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-keynavigation#up-prop&quot;&gt;up&lt;/a&gt; or &lt;a href=&quot;qml-qtquick-keynavigation#down-prop&quot;&gt;down&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a97efc46cbc21108cdd08a78aba13925c1273e" translate="yes" xml:space="preserve">
          <source>The top-level animations are run in parallel. To run them sequentially, define them within a &lt;a href=&quot;qml-qtquick-sequentialanimation&quot;&gt;SequentialAnimation&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee362760439b10f7180418e5e5e47049db5489fd" translate="yes" xml:space="preserve">
          <source>The top-right corner of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d8311bd9c3a6e5bf11d9f19d0bcf88168a9518" translate="yes" xml:space="preserve">
          <source>The top-right corner of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f470bad4b13d3ca85783a8477fab67870da3f567" translate="yes" xml:space="preserve">
          <source>The total scale factor measures the total change in scale factor from the original value to the current scale factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfc814258840ed186a7f5ac44c60b30b4ba7e42" translate="yes" xml:space="preserve">
          <source>The total width of the tabs. (since &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtquick-qmlmodule.html&quot;&gt;QtQuick&lt;/a&gt;.Controls.Styles 1.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f7a2f412e71bb4b0d975bbcbfd12ff2ace4c34" translate="yes" xml:space="preserve">
          <source>The touch device will be registered with the QPA window system interface, and deleted automatically when the &lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt; is deleted. So you should typically use createTouchDevice() to initialize a &lt;a href=&quot;qtouchdevice&quot;&gt;QTouchDevice&lt;/a&gt; member variable in your test case class, and use the same instance for all tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130a27621c7855dd205abb4da8120c583cc164f8" translate="yes" xml:space="preserve">
          <source>The touch events are committed to the event system when the destructor of the &lt;a href=&quot;qtest-qtoucheventsequence&quot;&gt;QTouchEventSequence&lt;/a&gt; is called (ie when the object returned runs out of scope), unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a12321743b1753c361b9cba0244eb26aca5417" translate="yes" xml:space="preserve">
          <source>The touch point did not move.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219cec272609863c80b2ba8e4eb350b9b9a24338" translate="yes" xml:space="preserve">
          <source>The touch point is now pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39534416bb859a28927f26b283d9ac1216475c63" translate="yes" xml:space="preserve">
          <source>The touch point moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126152ab04edddc86599ffdf79db43d1c65f99f7" translate="yes" xml:space="preserve">
          <source>The touch point was released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f201edbda7e4fa756291deb3aa46040f3672ee" translate="yes" xml:space="preserve">
          <source>The touchpoint or position is being moved, with no change in pressed state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5fe7c2eac353b54236fbe058123f59d0784e00" translate="yes" xml:space="preserve">
          <source>The touchpoint or position is not being moved, and there is also no change in pressed state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7c04ea95e4e02ab00b4381bc738a8685587ea1" translate="yes" xml:space="preserve">
          <source>The trace API consists of the following virtual methods, which the input method must implement in order to receive and process trace input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25312bfaab029083cd38ede9e3645507a3d56248" translate="yes" xml:space="preserve">
          <source>The trace interaction is ended by calling the &lt;a href=&quot;qml-qtquick-virtualkeyboard-inputengine#traceEnd-method&quot;&gt;InputEngine.traceEnd()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ea8131ac2772c3d908b12c30e6ac1fb9348a6a" translate="yes" xml:space="preserve">
          <source>The trace interaction is ended by calling the &lt;a href=&quot;qvirtualkeyboardinputengine#traceEnd&quot;&gt;traceEnd&lt;/a&gt;() method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312483e5b6811c04176f51464eaf110580e22370" translate="yes" xml:space="preserve">
          <source>The trace interaction is started when an input source detects a new contact point, and calls the traceBegin method for a new trace object. If the input method accepts the interaction, it creates a new trace object and returns it to the caller. From this point on, trace data is collected until the traceEnd method is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44f6e7d24604268d818285e6c8ab6f8afe3158c" translate="yes" xml:space="preserve">
          <source>The trace is uniquely identified by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ced3aad9b0c984af944e2f306cf15a1be5bc10c" translate="yes" xml:space="preserve">
          <source>The traces are rendered using the delegate from the &lt;a href=&quot;qml-qtquick-virtualkeyboard-styles-keyboardstyle#traceCanvasDelegate-prop&quot;&gt;traceCanvasDelegate&lt;/a&gt; property of the current &lt;a href=&quot;qml-qtquick-virtualkeyboard-styles-keyboardstyle&quot;&gt;KeyboardStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300899aee12e6a7e8681c0d84fe2499b9bc26e5a" translate="yes" xml:space="preserve">
          <source>The track number of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8eb2317ed494e3353eec5ea8e8852d10075153" translate="yes" xml:space="preserve">
          <source>The trading hours of the place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb2837d8f723c948f01b62b14f36c9e1dcc4073" translate="yes" xml:space="preserve">
          <source>The tradition of &quot;Manhattan length&quot; arises because such distances apply to travelers who can only travel on a rectangular grid, like the streets of Manhattan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d2949e3846100bd7eb7a10de17516c3c5b3ed9" translate="yes" xml:space="preserve">
          <source>The traditional C++ approach for storing OR-combinations of enum values is to use an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;uint&lt;/code&gt; variable. The inconvenience with this approach is that there's no type checking at all; any enum value can be OR'd with any other enum value and passed on to a function that takes an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;uint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172e9a62b4ffb755b95cdd46223a94d9e8f3bf87" translate="yes" xml:space="preserve">
          <source>The traditional approach to supporting high DPI has been one where Qt scaled fonts automatically, and then provided a DPI value that application code could use to scale the rest of the UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b38c93cccfb6f351723f856435bccead08e24da" translate="yes" xml:space="preserve">
          <source>The trailing slash is removed from the path, if one is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5277c95d148da0b90a29d40944a24f7e22255cd6" translate="yes" xml:space="preserve">
          <source>The transaction status has not been set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3e7ddad0bee18d3fedffde8ea7f2ab997e4480" translate="yes" xml:space="preserve">
          <source>The transaction was manually canceled by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927fdabd4e68b407d5e9faf83d1bd7a9a4053a5c" translate="yes" xml:space="preserve">
          <source>The transform is dirty and needs to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1684dd1b580d3bb0c6789da34c3d4e89e23ae69f" translate="yes" xml:space="preserve">
          <source>The transform nodes implement a 4x4 matrix which in theory supports full 3D transformations. However, because the renderer optimizes for 2D use-cases rather than 3D use-cases, rendering a scene with full 3D transformations needs to be done with some care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8165110bf5771720af9079846bd23f4c85a649aa" translate="yes" xml:space="preserve">
          <source>The transformation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb37c4e9dbc030702ec3e9a1f708b4f177cc35b" translate="yes" xml:space="preserve">
          <source>The transformation is performed quickly, with no smoothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd621b71f8c048c80313dd1a07e585959b7bcc1" translate="yes" xml:space="preserve">
          <source>The transformation matrix is combined with the item's &lt;a href=&quot;qgraphicsitem#rotation&quot;&gt;rotation&lt;/a&gt;(), &lt;a href=&quot;qgraphicsitem#scale-1&quot;&gt;scale&lt;/a&gt;() and &lt;a href=&quot;qgraphicsitem#transformations&quot;&gt;transformations&lt;/a&gt;() into a combined transformation that maps the item's coordinate system to its parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1322f9b15a5d3fa424bf97d155ac0cc96209c55f" translate="yes" xml:space="preserve">
          <source>The transformation matrix is combined with the item's &lt;a href=&quot;qgraphicsitem#rotation&quot;&gt;rotation&lt;/a&gt;(), &lt;a href=&quot;qgraphicsitem#scale-1&quot;&gt;scale&lt;/a&gt;() and &lt;a href=&quot;qgraphicsitem#transformations&quot;&gt;transformations&lt;/a&gt;() into a combined transformations for the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fad217c41aed255da9af50a9981b0bd922ce3bb" translate="yes" xml:space="preserve">
          <source>The transformation matrix tranforms the scene into view coordinates. Using the default transformation, provided by the identity matrix, one pixel in the view represents one unit in the scene (e.g., a 10x10 rectangular item is drawn using 10x10 pixels in the view). If a 2x2 scaling matrix is applied, the scene will be drawn in 1:2 (e.g., a 10x10 rectangular item is then drawn using 20x20 pixels in the view).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbcc649579661480761a8d67e767adc3224851c" translate="yes" xml:space="preserve">
          <source>The transformation type is the highest enumeration value capturing all of the matrix's transformations. For example, if the matrix both scales and shears, the type would be &lt;code&gt;TxShear&lt;/code&gt;, because &lt;code&gt;TxShear&lt;/code&gt; has a higher enumeration value than &lt;code&gt;TxScale&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094c6865d447de40995713001382972551d227dc" translate="yes" xml:space="preserve">
          <source>The transformations are combined with the item's &lt;a href=&quot;qgraphicsitem#rotation&quot;&gt;rotation&lt;/a&gt;(), &lt;a href=&quot;qgraphicsitem#scale-1&quot;&gt;scale&lt;/a&gt;() and &lt;a href=&quot;qgraphicsitem#transform&quot;&gt;transform&lt;/a&gt;() to map the item's coordinate system to the parent item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6035c6288c6a90b31f8f9d46d0294aad6c3ba8" translate="yes" xml:space="preserve">
          <source>The transition can use the &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt; property to access more details about the item that is being added. See the &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt; documentation for more details and examples on using these transitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef5a10508cc64248db2164e17f0be15faafba1a" translate="yes" xml:space="preserve">
          <source>The transition can use the &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt; property to access more details about the item that is being moved. Note, however, that for this move transition, the &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt;.targetIndexes and &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt;.targetItems lists are only set when this transition is triggered by the addition of other items in the positioner; in other cases, these lists will be empty. See the &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt; documentation for more details and examples on using these transitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bfb90b74e83fc80531b90754e4ae76aadf85b9" translate="yes" xml:space="preserve">
          <source>The transition used on pop operation. Unless set, the popTransition is the same as &lt;a href=&quot;qml-qtquick-controls-stackviewdelegate#pushTransition-prop&quot;&gt;pushTransition&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca92fc0263916e13110d0bc47421db1be34e56e" translate="yes" xml:space="preserve">
          <source>The transition used on push operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d91b4a05c567ca0a8ea3d5d24eeebee681b604" translate="yes" xml:space="preserve">
          <source>The transition used on replace operation. Unless set, the replaceTransition is the same as &lt;a href=&quot;qml-qtquick-controls-stackviewdelegate#pushTransition-prop&quot;&gt;pushTransition&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4c5a7c9c34b49e34363f02d38b701d69678620" translate="yes" xml:space="preserve">
          <source>The transitions to use when pushing or popping items. For better understanding on how to apply custom transitions, read &lt;a href=&quot;qml-qtquick-controls-stackview#transitions&quot;&gt;Transitions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb19b9ca058de8ac01f2cbfae47756c5b8c64d2" translate="yes" xml:space="preserve">
          <source>The translation along the X axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832077b298090bd077afad378c169dad8bfb5220" translate="yes" xml:space="preserve">
          <source>The translation along the Y axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5cc27759c3cc4fe4bd48225df6d9f057fc7514" translate="yes" xml:space="preserve">
          <source>The translation context for &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; and each &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; subclass is the class name itself. Developers subclassing &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; must use the &lt;a href=&quot;qobject#Q_OBJECT&quot;&gt;Q_OBJECT&lt;/a&gt; macro in their class definition to override the translation context. This macro sets the context to the name of the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f986437d6c66f4e7542c4b37c545bdf0569fbc13" translate="yes" xml:space="preserve">
          <source>The translation of the gesture &lt;a href=&quot;qml-qtquick-pinchhandler#centroid-prop&quot;&gt;centroid&lt;/a&gt;. It is &lt;code&gt;(0, 0)&lt;/code&gt; when the gesture begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeadd839ed743aff33c3f914711b53e27758310" translate="yes" xml:space="preserve">
          <source>The translation since the gesture began.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
