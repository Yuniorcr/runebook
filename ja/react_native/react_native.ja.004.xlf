<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="2d1e76cda793e289a92d82fd8c936a1934145df4" translate="yes" xml:space="preserve">
          <source>Rendered at the very beginning of the list. Can be a React Component Class, a render function, or a rendered element.</source>
          <target state="translated">リストの一番最初にレンダリングされます。React コンポーネントクラス、レンダリング関数、またはレンダリングされた要素のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="da10f865f169113e8152326af6c9b4289eee6d2d" translate="yes" xml:space="preserve">
          <source>Rendered at the very end of the list. Can be a React Component Class, a render function, or a rendered element.</source>
          <target state="translated">リストの最後にレンダリングされます。React コンポーネントクラス、レンダリング関数、レンダリングされた要素のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="c59bc8a2f8b9404264b6ce2fcab1d38699a841e2" translate="yes" xml:space="preserve">
          <source>Rendered in between each item, but not at the top or bottom. By default, &lt;code&gt;highlighted&lt;/code&gt; and &lt;code&gt;leadingItem&lt;/code&gt; props are provided. &lt;code&gt;renderItem&lt;/code&gt; provides &lt;code&gt;separators.highlight&lt;/code&gt;/&lt;code&gt;unhighlight&lt;/code&gt; which will update the &lt;code&gt;highlighted&lt;/code&gt; prop, but you can also add custom props with &lt;code&gt;separators.updateProps&lt;/code&gt;.</source>
          <target state="translated">各アイテムの間にレンダリングされますが、上部または下部にはレンダリングされません。デフォルトでは、 &lt;code&gt;highlighted&lt;/code&gt; れた &lt;code&gt;leadingItem&lt;/code&gt; プロップが提供されます。 &lt;code&gt;renderItem&lt;/code&gt; は &lt;code&gt;separators.highlight&lt;/code&gt; / &lt;code&gt;unhighlight&lt;/code&gt; を提供し、 &lt;code&gt;highlighted&lt;/code&gt; プロップを更新しますが、 &lt;code&gt;separators.updateProps&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd1d34d9360775311f3111960ed2ab7cd3b35d82" translate="yes" xml:space="preserve">
          <source>Rendered in between each item, but not at the top or bottom. By default, &lt;code&gt;highlighted&lt;/code&gt;, &lt;code&gt;section&lt;/code&gt;, and &lt;code&gt;[leading/trailing][Item/Separator]&lt;/code&gt; props are provided. &lt;code&gt;renderItem&lt;/code&gt; provides &lt;code&gt;separators.highlight&lt;/code&gt;/&lt;code&gt;unhighlight&lt;/code&gt; which will update the &lt;code&gt;highlighted&lt;/code&gt; prop, but you can also add custom props with &lt;code&gt;separators.updateProps&lt;/code&gt;.</source>
          <target state="translated">各アイテムの間にレンダリングされますが、上部または下部にはレンダリングされません。デフォルトでは、 &lt;code&gt;highlighted&lt;/code&gt; 、 &lt;code&gt;section&lt;/code&gt; 、および &lt;code&gt;[leading/trailing][Item/Separator]&lt;/code&gt; プロップが提供されます。 &lt;code&gt;renderItem&lt;/code&gt; は &lt;code&gt;separators.highlight&lt;/code&gt; / &lt;code&gt;unhighlight&lt;/code&gt; を提供し、 &lt;code&gt;highlighted&lt;/code&gt; プロップを更新しますが、 &lt;code&gt;separators.updateProps&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5595788685a3d13ce82d849180c4df961a5b13c" translate="yes" xml:space="preserve">
          <source>Rendered when the list is empty. Can be a React Component Class, a render function, or a rendered element.</source>
          <target state="translated">リストが空の場合にレンダリングされます。React コンポーネントクラス、レンダリング関数、またはレンダリングされた要素のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="07c08afc2b4a0176225e6da6d0d58c177dce4dea" translate="yes" xml:space="preserve">
          <source>Rendering offscreen to preserve correct alpha behavior is extremely expensive and hard to debug for non-native developers, which is why it is not turned on by default. If you do need to enable this property for an animation, consider combining it with renderToHardwareTextureAndroid if the view &lt;strong&gt;contents&lt;/strong&gt; are static (i.e. it doesn't need to be redrawn each frame). If that property is enabled, this View will be rendered off-screen once, saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.</source>
          <target state="translated">オフスクリーンでレンダリングして正しいアルファ動作を維持することは非常にコストがかかり、ネイティブでない開発者がデバッグするのが難しいため、デフォルトではオフになっています。アニメーションでこのプロパティを有効にする必要がある場合、ビューの&lt;strong&gt;コンテンツ&lt;/strong&gt;が静的である（つまり、フレームごとに再描画する必要がない）場合は、renderToHardwareTextureAndroidと組み合わせることを検討してください。このプロパティが有効な場合、このビューは画面外で一度レンダリングされ、ハードウェアテクスチャに保存され、GPUのレンダリングターゲットを切り替えることなく、フレームごとにアルファで画面に合成されます。</target>
        </trans-unit>
        <trans-unit id="909233026a92bb68e624b6146a3d358f4ae9afd0" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;DrawerLayout&lt;/code&gt; on Android.</source>
          <target state="translated">Androidで &lt;code&gt;DrawerLayout&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="bfb73ef6aab7d420b2b38af311ddc2352edf7bcb" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;ProgressBar&lt;/code&gt; on Android.</source>
          <target state="translated">Androidで &lt;code&gt;ProgressBar&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="8c55a629acbb3511069b99fee79e91ff0b528b6a" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;Toolbar&lt;/code&gt; on Android.</source>
          <target state="translated">Androidで &lt;code&gt;Toolbar&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="f4dd91feda88132b98d23362146455739b69a75a" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;UIProgressView&lt;/code&gt; on iOS.</source>
          <target state="translated">iOSで &lt;code&gt;UIProgressView&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="f164262af0d2bb9fdf59f83119c268c454d23df4" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;UISegmentedControl&lt;/code&gt; on iOS.</source>
          <target state="translated">iOSで &lt;code&gt;UISegmentedControl&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="ab496212c570ddc4ef8bd26317c6cf9eeb8c94a4" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;UITabViewController&lt;/code&gt; on iOS. Use with &lt;a href=&quot;tabbarios-item&quot;&gt;TabBarIOS.Item&lt;/a&gt;.</source>
          <target state="translated">iOSで &lt;code&gt;UITabViewController&lt;/code&gt; をレンダリングします。&lt;a href=&quot;tabbarios-item&quot;&gt;TabBarIOS.Itemで&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="85a71c956a0fc6fe8a9a3fc7ddcd46f082acc710" translate="yes" xml:space="preserve">
          <source>Renders a boolean input.</source>
          <target state="translated">ブール型入力をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="bae422b4f0982cbfbee7c84affeaff9665412ff1" translate="yes" xml:space="preserve">
          <source>Renders a date/time picker (selector) on iOS.</source>
          <target state="translated">iOS上に日時ピッカー(セレクタ)を表示します。</target>
        </trans-unit>
        <trans-unit id="c6932e5a74d3d1cb31839205cafaa5a315ec3734" translate="yes" xml:space="preserve">
          <source>Renders a image picker on iOS.</source>
          <target state="translated">iOS上でイメージピッカーをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="8de4d09daadd2cae67cf40e739676f713815bcbb" translate="yes" xml:space="preserve">
          <source>Renders the child view with a mask specified in the &lt;code&gt;maskElement&lt;/code&gt; prop.</source>
          <target state="translated">&lt;code&gt;maskElement&lt;/code&gt; プロップで指定されたマスクを使用して子ビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="a3e68f8004a894b7fb46ae10f25d304d3f9f4836" translate="yes" xml:space="preserve">
          <source>Renders the native picker component on iOS and Android.</source>
          <target state="translated">iOS と Android でネイティブのピッカーコンポーネントをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="8d9d3cc5acb004062230116fec28ad696e269bbe" translate="yes" xml:space="preserve">
          <source>Renders the native picker component on iOS and Android. Example:</source>
          <target state="translated">iOS と Android でネイティブのピッカーコンポーネントをレンダリングします。例。</target>
        </trans-unit>
        <trans-unit id="c81fe06c2954aa17cf310658a0cca1955ae55ebe" translate="yes" xml:space="preserve">
          <source>Repeat this step for the Tests target in your project.</source>
          <target state="translated">プロジェクト内のTestsターゲットに対して、このステップを繰り返します。</target>
        </trans-unit>
        <trans-unit id="3fe5754c6bdce3b9ed8c1c82bc4547e29ff73c81" translate="yes" xml:space="preserve">
          <source>Repeat vibration pattern until cancel(), default to false.</source>
          <target state="translated">cancel()まで振動パターンを繰り返します。</target>
        </trans-unit>
        <trans-unit id="074a8643e268726c1af2a22d0c3a70e0de7298d0" translate="yes" xml:space="preserve">
          <source>Repeatable vibration is also supported, the vibration will repeat with defined pattern until &lt;code&gt;cancel()&lt;/code&gt; is called.</source>
          <target state="translated">繰り返し可能な振動もサポートされています。振動は、 &lt;code&gt;cancel()&lt;/code&gt; が呼び出されるまで、定義されたパターンで繰り返されます。</target>
        </trans-unit>
        <trans-unit id="76dd8534035c7d132e36fffae002a8dfe65c628a" translate="yes" xml:space="preserve">
          <source>Replace a route in the navigation stack.</source>
          <target state="translated">ナビゲーションスタック内のルートを置換します。</target>
        </trans-unit>
        <trans-unit id="de54bcdd3ea95b86da630fecfe6e1672185d1cc8" translate="yes" xml:space="preserve">
          <source>Replace the route for the current scene and immediately load the view for the new route.</source>
          <target state="translated">現在のシーンのルートを置き換え、新しいルートのビューを直ちにロードします。</target>
        </trans-unit>
        <trans-unit id="f8aa1086a5727c2918f300774947f4cc6655ad01" translate="yes" xml:space="preserve">
          <source>Replace the route/view for the previous scene.</source>
          <target state="translated">前のシーンのルート/ビューを置き換えます。</target>
        </trans-unit>
        <trans-unit id="5ea8a5bc04a70db7742ff5d3a1f757d08fc39c4c" translate="yes" xml:space="preserve">
          <source>Replaces the previous route/view and transitions back to it.</source>
          <target state="translated">前のルート/ビューを置き換えて、そこに遷移します。</target>
        </trans-unit>
        <trans-unit id="095c1a9c46cba32abe0c2068fb5f0a270545c502" translate="yes" xml:space="preserve">
          <source>Replaces the top item and pop to it.</source>
          <target state="translated">トップのアイテムを入れ替えて、それにポップします。</target>
        </trans-unit>
        <trans-unit id="4f1c7325609c0579d5a2d516e43bd306bc11d73f" translate="yes" xml:space="preserve">
          <source>Reporting new issues</source>
          <target state="translated">新しい問題の報告</target>
        </trans-unit>
        <trans-unit id="393c29013a274d8c67c0ec4b9cfc3594c0ce1e54" translate="yes" xml:space="preserve">
          <source>Request suitable Location permission based on the key configured on pList. If NSLocationAlwaysUsageDescription is set, it will request Always authorization, although if NSLocationWhenInUseUsageDescription is set, it will request InUse authorization.</source>
          <target state="translated">pListに設定されたキーに基づいて、適切なLocation権限を要求します。NSLocationAlwaysUsageDescriptionが設定されている場合はAlways認証を要求しますが、NSLocationWhenInUseUsageDescriptionが設定されている場合はInUse認証を要求します。</target>
        </trans-unit>
        <trans-unit id="c686e0781457559d143ddbbb56506da966f0559b" translate="yes" xml:space="preserve">
          <source>Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.</source>
          <target state="translated">与えられた入力またはビューにフォーカスを要求します。正確な動作は、プラットフォームとビューのタイプに依存します。</target>
        </trans-unit>
        <trans-unit id="d5b633162188bab8acd3e88edc1ad876d94d1fb0" translate="yes" xml:space="preserve">
          <source>Requests notification permissions from iOS, prompting the user's dialog box. By default, it will request all notification permissions, but a subset of these can be requested by passing a map of requested permissions. The following permissions are supported:</source>
          <target state="translated">ユーザーのダイアログボックスを表示して、iOS から通知のパーミッションを要求します。デフォルトでは、すべての通知パーミッションを要求しますが、要求されたパーミッションのマップを渡すことで、これらのサブセットを要求することができます。以下のパーミッションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="5ca474a725101528c709fe68b81037d33482f4ea" translate="yes" xml:space="preserve">
          <source>Required props:</source>
          <target state="translated">必要な小道具。</target>
        </trans-unit>
        <trans-unit id="e7aa2256e003beb5f51ee251c3af6a4184bf3369" translate="yes" xml:space="preserve">
          <source>Requires linear scan through data - use &lt;code&gt;scrollToIndex&lt;/code&gt; instead if possible.</source>
          <target state="translated">データの線形スキャンが必要です- 可能であれば、代わりに &lt;code&gt;scrollToIndex&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a6745831a8e19569e4ad834641dfc1dd7ebbed27" translate="yes" xml:space="preserve">
          <source>Reserved Words: &lt;code&gt;promise.catch(function() { });&lt;/code&gt;</source>
          <target state="translated">予約語： &lt;code&gt;promise.catch(function() { });&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ad40efdd7b7c06547eecda5e57359ff2ae3be37" translate="yes" xml:space="preserve">
          <source>Resolves an asset reference into an object which has the properties &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt;.</source>
          <target state="translated">アセット参照を、プロパティ &lt;code&gt;uri&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、および &lt;code&gt;height&lt;/code&gt; を持つオブジェクトに解決します。</target>
        </trans-unit>
        <trans-unit id="7fc62e5833ad279225ae02d68855cc111213ed9b" translate="yes" xml:space="preserve">
          <source>Resolving JavaScript issues</source>
          <target state="translated">JavaScriptの問題を解決する</target>
        </trans-unit>
        <trans-unit id="4080d7a2c68ba46beabadcf2bc1a045214a10147" translate="yes" xml:space="preserve">
          <source>Resolving native UI Issues</source>
          <target state="translated">ネイティブ UI の問題を解決する</target>
        </trans-unit>
        <trans-unit id="acf5d1eb02ebebf894aa1dc86bf7380cec563752" translate="yes" xml:space="preserve">
          <source>Responder Lifecycle</source>
          <target state="translated">レスポンダのライフサイクル</target>
        </trans-unit>
        <trans-unit id="13aaec4b3eb6e962653914efb011e0e7cc030908" translate="yes" xml:space="preserve">
          <source>Responding to the current animation value</source>
          <target state="translated">現在のアニメーションの値に対応</target>
        </trans-unit>
        <trans-unit id="8d4078df59774d2677104ccfe6e790e6941acc35" translate="yes" xml:space="preserve">
          <source>Restricts the range of possible date/time values.</source>
          <target state="translated">可能な日時の値の範囲を制限します。</target>
        </trans-unit>
        <trans-unit id="9e8bffd9063d4bae24ded787de73c3cf1cbcbd0e" translate="yes" xml:space="preserve">
          <source>Result strings for requesting permissions</source>
          <target state="translated">パーミッションを要求するための結果文字列</target>
        </trans-unit>
        <trans-unit id="064091338b36cb126977671d74b7285375b77cd6" translate="yes" xml:space="preserve">
          <source>Retrieve the width and height (in pixels) of an image prior to displaying it. This method can fail if the image cannot be found, or fails to download.</source>
          <target state="translated">画像を表示する前に、画像の幅と高さ(ピクセル単位)を取得します。このメソッドは、画像が見つからない場合やダウンロードに失敗した場合に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="23c6c23a369d2acd0b466711f56561217361986a" translate="yes" xml:space="preserve">
          <source>Retrieves the base64-encoded data for an image in the ImageStore. If the specified URI does not match an image in the store, the failure callback will be called.</source>
          <target state="translated">ImageStore内の画像のbase64エンコードされたデータを取得します。指定したURIがストア内の画像と一致しない場合は、失敗コールバックが呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c949493c991d47b2138addce2c33197dfe87da5d" translate="yes" xml:space="preserve">
          <source>Returning to packager/config.js we should update it to use our newly generated modulePaths.js file.</source>
          <target state="translated">packager/config.js に戻り、新しく生成した modulePaths.js ファイルを使用するように更新します。</target>
        </trans-unit>
        <trans-unit id="a83807e88498f5f4a57583a58f12eb074c3b30ed" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the input is currently focused; &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">入力が現在フォーカスされている場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7194c9e824e27e807fd86ff8828e0b16bf2e2d61" translate="yes" xml:space="preserve">
          <source>Returns a Promise which when resolved will be of the following shape:</source>
          <target state="translated">解決された場合に、以下のような形になるプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="0aa440c168b82ba5ee44c7c58a007e91b2171652" translate="yes" xml:space="preserve">
          <source>Returns a Promise which will be invoked an object containing &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt; (0-23), &lt;code&gt;minute&lt;/code&gt; (0-59) if the user picked a time. If the user dismissed the dialog, the Promise will still be resolved with action being &lt;code&gt;TimePickerAndroid.dismissedAction&lt;/code&gt; and all the other keys being undefined. &lt;strong&gt;Always&lt;/strong&gt; check whether the &lt;code&gt;action&lt;/code&gt; before reading the values.</source>
          <target state="translated">ユーザーが時間を選択した場合に &lt;code&gt;action&lt;/code&gt; 、 &lt;code&gt;hour&lt;/code&gt; （0〜23）、 &lt;code&gt;minute&lt;/code&gt; （0〜59）を含むオブジェクトを呼び出すPromiseを返します。ユーザーがダイアログを &lt;code&gt;TimePickerAndroid.dismissedAction&lt;/code&gt; ても、Promiseは解決され、アクションはTimePickerAndroid.dismissedActionになり、他のすべてのキーは未定義になります。値を読み取る前に、&lt;strong&gt;常に&lt;/strong&gt; &lt;code&gt;action&lt;/code&gt; かどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="def8be44a160927caa4e70226238669abdb858dd" translate="yes" xml:space="preserve">
          <source>Returns a Promise which will be invoked an object containing &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; (0-11), &lt;code&gt;day&lt;/code&gt; if the user picked a date. If the user dismissed the dialog, the Promise will still be resolved with action being &lt;code&gt;DatePickerAndroid.dismissedAction&lt;/code&gt; and all the other keys being undefined. &lt;strong&gt;Always&lt;/strong&gt; check whether the &lt;code&gt;action&lt;/code&gt; before reading the values.</source>
          <target state="translated">ユーザーが日付を選択した場合に &lt;code&gt;action&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; （0-11）、 &lt;code&gt;day&lt;/code&gt; を含むオブジェクトを呼び出すPromiseを返します。ユーザーがダイアログを閉じた場合でも、Promiseは解決され、アクションは &lt;code&gt;DatePickerAndroid.dismissedAction&lt;/code&gt; になり、他のすべてのキーは未定義になります。値を読み取る前に、&lt;strong&gt;常に&lt;/strong&gt; &lt;code&gt;action&lt;/code&gt; かどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="efe21209dd0fabd2258e9f6537ab1baba2eb485d" translate="yes" xml:space="preserve">
          <source>Returns a Promise which will resolve with the new URI.</source>
          <target state="translated">新しい URI で解決する Promise を返します。</target>
        </trans-unit>
        <trans-unit id="a0a93117f92639c0f3082895870a1cb5d3673566" translate="yes" xml:space="preserve">
          <source>Returns a Promise with photo identifier objects from the local camera roll of the device matching shape defined by &lt;code&gt;getPhotosReturnChecker&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getPhotosReturnChecker&lt;/code&gt; で定義された形状と一致するデバイスのローカルカメラロールから写真IDオブジェクトを含むPromiseを返します。</target>
        </trans-unit>
        <trans-unit id="58f66caea697b597b2ae7c74941b69262f092ff3" translate="yes" xml:space="preserve">
          <source>Returns a profiled version of the input function. For example, you can: JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);</source>
          <target state="translated">入力関数のプロファイリングされたバージョンを返します。例えば、以下のようにします。JSON.parse=Systrace.measure('JSON','parse',JSON.parse)。</target>
        </trans-unit>
        <trans-unit id="fa30dfc19f447c835e39dff598fd337ff145920c" translate="yes" xml:space="preserve">
          <source>Returns a promise resolving to a boolean value as to whether the specified permissions has been granted.</source>
          <target state="translated">指定したパーミッションが許可されているかどうかをブール値に解決したプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="43f65dd790c41c16371bae2cd150421d5adfb4f3" translate="yes" xml:space="preserve">
          <source>Returns a promise that resolves to an object with &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;effectiveType&lt;/code&gt; keys whose values are a &lt;a href=&quot;netinfo#connectiontype-enum&quot;&gt;&lt;code&gt;ConnectionType&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;netinfo#effectiveconnectiontype-enum&quot;&gt;&lt;code&gt;EffectiveConnectionType&lt;/code&gt;&lt;/a&gt;), respectively.</source>
          <target state="translated">値が&lt;a href=&quot;netinfo#connectiontype-enum&quot;&gt; &lt;code&gt;ConnectionType&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;netinfo#effectiveconnectiontype-enum&quot;&gt; &lt;code&gt;EffectiveConnectionType&lt;/code&gt; &lt;/a&gt;である &lt;code&gt;type&lt;/code&gt; キーと &lt;code&gt;effectiveType&lt;/code&gt; キーを持つオブジェクトにそれぞれ解決するpromiseを返します。</target>
        </trans-unit>
        <trans-unit id="00a862f6c9cf5a4840fd527267e740fa2a971f8b" translate="yes" xml:space="preserve">
          <source>Returns an array containing the number of rows in each section</source>
          <target state="translated">各セクションの行数を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="5da0c42641041162564a9cf58f87364ed4f79c68" translate="yes" xml:space="preserve">
          <source>Returns if the row is dirtied and needs to be rerendered</source>
          <target state="translated">行が汚れており、リレンダーする必要がある場合に返します。</target>
        </trans-unit>
        <trans-unit id="67ec4e888d6f62f40467b6b909bf01304cfbac00" translate="yes" xml:space="preserve">
          <source>Returns if the section header is dirtied and needs to be rerendered</source>
          <target state="translated">セクションヘッダーが汚れており、リレンダリングする必要がある場合に返します。</target>
        </trans-unit>
        <trans-unit id="24283fa42f093c1f4d3820f2867cde8beb74453c" translate="yes" xml:space="preserve">
          <source>Returns the device pixel density. Some examples:</source>
          <target state="translated">デバイスのピクセル密度を返します。いくつかの例。</target>
        </trans-unit>
        <trans-unit id="9d60496cdb0dee984d9f8da81b86f8a4afe82141" translate="yes" xml:space="preserve">
          <source>Returns the scaling factor for font sizes. This is the ratio that is used to calculate the absolute font size, so any elements that heavily depend on that should use this to do calculations.</source>
          <target state="translated">フォントサイズのスケーリング係数を返します。これは絶対的なフォントサイズを計算するために使用される比率なので、これに大きく依存する要素はこれを使用して計算しなければなりません。</target>
        </trans-unit>
        <trans-unit id="64426e2557fbd84cbe8e8e76ac50d9a3ab090ff9" translate="yes" xml:space="preserve">
          <source>Returns the total number of rows in the data source (see &lt;code&gt;getRowCount&lt;/code&gt; for how this is calculated) plus the number of sections in the data.</source>
          <target state="translated">データソース内の行の総数（これがどのように計算されるかについては &lt;code&gt;getRowCount&lt;/code&gt; を参照）とデータ内のセクションの数を足したものを返します。</target>
        </trans-unit>
        <trans-unit id="8ac6b4596f776ea4171315bd740590e0a508975d" translate="yes" xml:space="preserve">
          <source>Returns the total number of rows in the data source.</source>
          <target state="translated">データソース内の行の総数を返します。</target>
        </trans-unit>
        <trans-unit id="cc01639c4e5ee299613e09a28d59d15f27094c60" translate="yes" xml:space="preserve">
          <source>Reverses the direction of scroll. Uses scale transforms of -1.</source>
          <target state="translated">スクロールの方向を反転させます。1 のスケール変換を使用します。</target>
        </trans-unit>
        <trans-unit id="b6d9d8e26fb88297760584a43d9868a96dc96a40" translate="yes" xml:space="preserve">
          <source>Reverses the direction of scroll. Uses scale transforms of &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">スクロールの方向を逆にします。 &lt;code&gt;-1&lt;/code&gt; のスケール変換を使用します。</target>
        </trans-unit>
        <trans-unit id="d354d64ddcaf511aa889fc6a79fd1cbcae7b96ac" translate="yes" xml:space="preserve">
          <source>Review it or cc someone who might be able to review. Finding the right person to review a pull request can sometimes be tricky. A pull request may simultaneously touch iOS, Java, and JavaScript code. If a pull request has been waiting for review for a while, you can help out by looking at the blame history for the files you're touching. Is there anyone that appears to be knowledgeable in the part of the codebase the PR is touching?</source>
          <target state="translated">レビューするか、レビューしてくれそうな人に連絡してください。プルリクエストをレビューしてくれる適切な人を見つけるのは、時にトリッキーなことです。プルリクエストは、iOS、Java、JavaScriptのコードに同時に触れることがあります。プルリクエストがしばらくの間レビューを待っている場合は、あなたが触っているファイルの非難履歴を見ることで助けになるでしょう。PRが触っているコードベースの一部に精通していると思われる人はいますか?</target>
        </trans-unit>
        <trans-unit id="97ca94b53fe8d14bd42ba1fd78aa609881e9a462" translate="yes" xml:space="preserve">
          <source>Reviewing a PR can sometimes require more time from a maintainer than it took you to write the code. Maintainers need to consider all the ramifications of importing your patch into the codebase. Does it potentially introduce breaking changes? What are the performance considerations of adding a new dependency? Will the docs need to be updated as well? Does this belong in core, or would it be a better fit as a third party package?</source>
          <target state="translated">PR をレビューすることは、あなたがコードを書くのにかかった時間よりもメンテナの時間を必要とすることがあります。メンテナは、あなたのパッチをコードベースにインポートすることによる影響をすべて考慮する必要があります。それは潜在的に破壊的な変更を導入する可能性があるのでしょうか?新しい依存関係を追加することによるパフォーマンスへの影響は?ドキュメントも更新する必要があるのでしょうか?これはコアに属するものなのでしょうか、それともサードパーティのパッケージとしての方が適しているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="1870609e702caec4e6c65c9b1947bc8cbb64d450" translate="yes" xml:space="preserve">
          <source>Rounds a layout size (dp) to the nearest layout size that corresponds to an integer number of pixels. For example, on a device with a PixelRatio of 3, &lt;code&gt;PixelRatio.roundToNearestPixel(8.4) = 8.33&lt;/code&gt;, which corresponds to exactly (8.33 * 3) = 25 pixels.</source>
          <target state="translated">レイアウトサイズ（dp）を整数のピクセル数に対応する最も近いレイアウトサイズに丸めます。たとえば、PixelRatioが3のデバイスでは、 &lt;code&gt;PixelRatio.roundToNearestPixel(8.4) = 8.33&lt;/code&gt; 、正確に（8.33 * 3）= 25ピクセルに対応します。</target>
        </trans-unit>
        <trans-unit id="30ec61fcf11aac1803bf040f62510d6f1e102322" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;react-native run-android&lt;/code&gt; inside your React Native project folder:</source>
          <target state="translated">ランは &lt;code&gt;react-native run-android&lt;/code&gt; あなたのリアクトネイティブプロジェクトフォルダ内：</target>
        </trans-unit>
        <trans-unit id="b12f772d6b1d763da51af6ec67e6a0e28baa2ee5" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;react-native run-android&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;react-native run-android&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="f2b5e559348996c0a0e04e4da74625bd033c05c6" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;react-native run-ios&lt;/code&gt; inside your React Native project folder:</source>
          <target state="translated">ランは &lt;code&gt;react-native run-ios&lt;/code&gt; あなたのリアクトネイティブプロジェクトフォルダ内：</target>
        </trans-unit>
        <trans-unit id="1b0549e0199a814398f9e4c2c54c5a5d10c0d28a" translate="yes" xml:space="preserve">
          <source>Run the following command in a Command Prompt or shell:</source>
          <target state="translated">コマンドプロンプトまたはシェルで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="03a16a3c3af6b5ec24d5cdd9c021c6edc9b693d8" translate="yes" xml:space="preserve">
          <source>Run the following command in a Terminal:</source>
          <target state="translated">ターミナルで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="61bfc27032449f6f60131caab3d200b93d7ad60f" translate="yes" xml:space="preserve">
          <source>Run the following command to find the id for the process that is listening on port 8081:</source>
          <target state="translated">次のコマンドを実行して、ポート 8081 でリッスンしているプロセスの ID を検索します。</target>
        </trans-unit>
        <trans-unit id="a6f9361cb884748c598570cff45a9337529cc7e2" translate="yes" xml:space="preserve">
          <source>Run the following command to start the process of upgrading to the latest version:</source>
          <target state="translated">以下のコマンドを実行して、最新バージョンへのアップグレード処理を開始します。</target>
        </trans-unit>
        <trans-unit id="47026dc85cf7526419f0cb794141404b2dc5847f" translate="yes" xml:space="preserve">
          <source>Run the following in a command prompt:</source>
          <target state="translated">コマンドプロンプトで以下を実行します。</target>
        </trans-unit>
        <trans-unit id="d7f574b5a07f6cb4c4273677c2143e991380d370" translate="yes" xml:space="preserve">
          <source>Running On Device</source>
          <target state="translated">デバイス上での実行</target>
        </trans-unit>
        <trans-unit id="6fd97b6d7f7308378a268e915f1594ef33e19335" translate="yes" xml:space="preserve">
          <source>Running On Simulator</source>
          <target state="translated">シミュレータ上での実行</target>
        </trans-unit>
        <trans-unit id="b2e6eac36887952b63fd7b4987083565a8cf6ff2" translate="yes" xml:space="preserve">
          <source>Running in development mode (&lt;code&gt;dev=true&lt;/code&gt;)</source>
          <target state="translated">開発モードで実行中（ &lt;code&gt;dev=true&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="53a3759b41abf1b25e77f89a1e708a452aec43e7" translate="yes" xml:space="preserve">
          <source>Running on a device</source>
          <target state="translated">デバイス上での実行</target>
        </trans-unit>
        <trans-unit id="ad95734b239d50e73c951ed59216790b0a724c33" translate="yes" xml:space="preserve">
          <source>Running your React Native application</source>
          <target state="translated">React Native アプリケーションを実行する</target>
        </trans-unit>
        <trans-unit id="e46a209cba86e71411ca37c1837a284ddea3142e" translate="yes" xml:space="preserve">
          <source>Running your app on Android devices</source>
          <target state="translated">Android端末でアプリを実行する</target>
        </trans-unit>
        <trans-unit id="383dc47bbd432363eab380404479fac91e533cf1" translate="yes" xml:space="preserve">
          <source>Running your app on a simulator or virtual device</source>
          <target state="translated">シミュレータまたは仮想デバイス上でアプリを実行する</target>
        </trans-unit>
        <trans-unit id="d7233a3b7ad43b41d73a3cd872a169170b54c083" translate="yes" xml:space="preserve">
          <source>Running your app on iOS devices</source>
          <target state="translated">iOSデバイスでアプリを実行する</target>
        </trans-unit>
        <trans-unit id="a6c21a42e8340391df383856d226b7047f1f9127" translate="yes" xml:space="preserve">
          <source>Runs an easing function backwards.</source>
          <target state="translated">イージング機能を逆に実行します。</target>
        </trans-unit>
        <trans-unit id="477a8873a0a910dfdedb77a1e584db92e113528b" translate="yes" xml:space="preserve">
          <source>Runs an easing function forwards.</source>
          <target state="translated">前方のイージング機能を実行します。</target>
        </trans-unit>
        <trans-unit id="18ac44c4b5f1097ca4ffff32a1c13934243c60dd" translate="yes" xml:space="preserve">
          <source>SDK build tools version 26.0.3 (buildToolsVersion in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">SDKビルドツールバージョン26.0.3（&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt; &lt;code&gt;build.gradle&lt;/code&gt; の&lt;/a&gt; buildToolsVersion ）</target>
        </trans-unit>
        <trans-unit id="8f75ac6cee53ffa880ea91307d184adba66b3bbc" translate="yes" xml:space="preserve">
          <source>SafeAreaView</source>
          <target state="translated">SafeAreaView</target>
        </trans-unit>
        <trans-unit id="aa91fd13d58da510ca2de4f101af5c376a5acaad" translate="yes" xml:space="preserve">
          <source>Same system on iOS and Android.</source>
          <target state="translated">iOSとAndroidで同じシステム。</target>
        </trans-unit>
        <trans-unit id="028753af88a81ad26c167b7f6db3f2f017ddc26a" translate="yes" xml:space="preserve">
          <source>Saves the photo or video to the camera roll or photo library.</source>
          <target state="translated">写真やビデオをカメラロールやフォトライブラリに保存します。</target>
        </trans-unit>
        <trans-unit id="f155161b5030bf68b7e571bf50bb9da15a590b12" translate="yes" xml:space="preserve">
          <source>Schedule a function to run after all interactions have completed. Returns a cancellable &quot;promise&quot;.</source>
          <target state="translated">すべてのインタラクションが完了した後に実行する関数をスケジュールします。キャンセル可能な「約束」を返します。</target>
        </trans-unit>
        <trans-unit id="0f72c59a3140a985f2c0971393b00f2b7315fa96" translate="yes" xml:space="preserve">
          <source>Schedules an animation to happen on the next layout.</source>
          <target state="translated">次のレイアウトで発生するアニメーションをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="becce01d2997766392f47f8fa14e7e7b1f91aa06" translate="yes" xml:space="preserve">
          <source>Schedules the localNotification for future presentation.</source>
          <target state="translated">将来のプレゼンテーションのためにlocalNotificationをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="fe3d802d026e0365d3c634bfa6b1f583e710f3d6" translate="yes" xml:space="preserve">
          <source>Schedules the localNotification for immediate presentation.</source>
          <target state="translated">即時提示のためにlocalNotificationをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="dee915be58e460a0714c8355cd2bf5742a5c9804" translate="yes" xml:space="preserve">
          <source>Screen orientation lock</source>
          <target state="translated">画面の向きのロック</target>
        </trans-unit>
        <trans-unit id="7436e20873a9f18cd6bcd7875423c8d17c6289eb" translate="yes" xml:space="preserve">
          <source>Screenshot/Snapshot Tests</source>
          <target state="translated">スクリーンショット/スナップショットテスト</target>
        </trans-unit>
        <trans-unit id="4e385c6989f06f87c82b1b15dfd6196726e3e728" translate="yes" xml:space="preserve">
          <source>Scroll loading.</source>
          <target state="translated">スクロールの読み込み。</target>
        </trans-unit>
        <trans-unit id="00721c07887ea57b48761c40d89c65af4ecdb113" translate="yes" xml:space="preserve">
          <source>Scroll to a specific content pixel offset in the list.</source>
          <target state="translated">リスト内の特定のコンテンツピクセルオフセットまでスクロールします。</target>
        </trans-unit>
        <trans-unit id="1053f7933618e87aea94b0f63a296d0831e11fcd" translate="yes" xml:space="preserve">
          <source>Scroll until you see (part of) the name of your package. In this case, I was profiling &lt;code&gt;com.facebook.adsmanager&lt;/code&gt;, which shows up as &lt;code&gt;book.adsmanager&lt;/code&gt; because of silly thread name limits in the kernel.</source>
          <target state="translated">パッケージの名前（の一部）が表示されるまでスクロールします。この場合、カーネルのスレッド名の制限が &lt;code&gt;book.adsmanager&lt;/code&gt; ため、com.facebook.adsmanagerをプロファイリングしてい &lt;code&gt;com.facebook.adsmanager&lt;/code&gt; 。これは、book.adsmanagerとして表示されます。</target>
        </trans-unit>
        <trans-unit id="2c8019bc5f85eeec89dca6860cd81700481a925c" translate="yes" xml:space="preserve">
          <source>ScrollToIndex support.</source>
          <target state="translated">ScrollToIndexをサポートしています。</target>
        </trans-unit>
        <trans-unit id="0e984940f09189feb0e21d7f060742be727ea68a" translate="yes" xml:space="preserve">
          <source>ScrollView</source>
          <target state="translated">ScrollView</target>
        </trans-unit>
        <trans-unit id="c3568b49e1e271e9a393a596984429a8b4de30be" translate="yes" xml:space="preserve">
          <source>ScrollView props...</source>
          <target state="translated">ScrollViewの小道具...</target>
        </trans-unit>
        <trans-unit id="490fc13985587d9f36c7e38e59f46728d4be09b6" translate="yes" xml:space="preserve">
          <source>ScrollView#DEPRECATED_sendUpdatedChildFrames</source>
          <target state="translated">ScrollView#DEPRECATED_sendUpdatedChildFrames</target>
        </trans-unit>
        <trans-unit id="b411bc7d5df2a14448c31dc1993d00b8cbb13e51" translate="yes" xml:space="preserve">
          <source>ScrollView#alwaysBounceHorizontal</source>
          <target state="translated">ScrollView#alwaysBounceHorizontal</target>
        </trans-unit>
        <trans-unit id="8357785d6e8226b80e5886935098d11bdb3c3c82" translate="yes" xml:space="preserve">
          <source>ScrollView#alwaysBounceVertical</source>
          <target state="translated">ScrollView#alwaysBounceVertical</target>
        </trans-unit>
        <trans-unit id="17e33934f82432c9a1a1321e2cf9a8f2f5507976" translate="yes" xml:space="preserve">
          <source>ScrollView#automaticallyAdjustContentInsets</source>
          <target state="translated">ScrollView#automaticallyAdjustContentInsets</target>
        </trans-unit>
        <trans-unit id="c5dc761a8323ee554925e77910639a8f307e7bef" translate="yes" xml:space="preserve">
          <source>ScrollView#bounces</source>
          <target state="translated">ScrollView#bounces</target>
        </trans-unit>
        <trans-unit id="a4881d2fc328564c84fe834c0ba0b3df594699eb" translate="yes" xml:space="preserve">
          <source>ScrollView#bouncesZoom</source>
          <target state="translated">ScrollView#bouncesZoom</target>
        </trans-unit>
        <trans-unit id="be14557ba33f532a9a9c8c44750cd63015b9f354" translate="yes" xml:space="preserve">
          <source>ScrollView#canCancelContentTouches</source>
          <target state="translated">ScrollView#canCancelContentTouches</target>
        </trans-unit>
        <trans-unit id="83c0abc7df4539415c21392770fa764d44d0a8e4" translate="yes" xml:space="preserve">
          <source>ScrollView#centerContent</source>
          <target state="translated">ScrollView#centerContent</target>
        </trans-unit>
        <trans-unit id="806655057f9bb64510b4c92ed20131db68d235b9" translate="yes" xml:space="preserve">
          <source>ScrollView#contentContainerStyle</source>
          <target state="translated">ScrollView#contentContainerStyle</target>
        </trans-unit>
        <trans-unit id="510b1d133b9f6aefce38a81cfbddbf252c79a20f" translate="yes" xml:space="preserve">
          <source>ScrollView#contentInset</source>
          <target state="translated">ScrollView#contentInset</target>
        </trans-unit>
        <trans-unit id="8f126579d32af66d065e2b7c85c771a6d43e4cbc" translate="yes" xml:space="preserve">
          <source>ScrollView#contentInsetAdjustmentBehavior</source>
          <target state="translated">ScrollView#contentInsetAdjustmentBehavior</target>
        </trans-unit>
        <trans-unit id="a24bd82e9f18643a807f6f7ce93f043c796e3ff3" translate="yes" xml:space="preserve">
          <source>ScrollView#contentOffset</source>
          <target state="translated">ScrollView#contentOffset</target>
        </trans-unit>
        <trans-unit id="11be18e155f5c9eacf89fdafbf69fba5727479b3" translate="yes" xml:space="preserve">
          <source>ScrollView#decelerationRate</source>
          <target state="translated">ScrollView#decelerationRate</target>
        </trans-unit>
        <trans-unit id="7890b71156b41223968b3c7824895ae200a37155" translate="yes" xml:space="preserve">
          <source>ScrollView#directionalLockEnabled</source>
          <target state="translated">ScrollView#directionalLockEnabled</target>
        </trans-unit>
        <trans-unit id="9220d5b83bace6b9d252628b4ed9bcb87376a171" translate="yes" xml:space="preserve">
          <source>ScrollView#endFillColor</source>
          <target state="translated">ScrollView#endFillColor</target>
        </trans-unit>
        <trans-unit id="43c03120645bfccd3baf40d46c97a24eacc49512" translate="yes" xml:space="preserve">
          <source>ScrollView#horizontal</source>
          <target state="translated">ScrollView#horizontal</target>
        </trans-unit>
        <trans-unit id="05d6cf11fddc666361e3f2a203254031d6de204a" translate="yes" xml:space="preserve">
          <source>ScrollView#indicatorStyle</source>
          <target state="translated">ScrollView#indicatorStyle</target>
        </trans-unit>
        <trans-unit id="8f2dae0a3510c0898f8aa28891fd26287c4192f0" translate="yes" xml:space="preserve">
          <source>ScrollView#keyboardDismissMode</source>
          <target state="translated">ScrollView#keyboardDismissMode</target>
        </trans-unit>
        <trans-unit id="2e8c866a82dc49e2bff99048ec51ce4682e9295c" translate="yes" xml:space="preserve">
          <source>ScrollView#keyboardShouldPersistTaps</source>
          <target state="translated">ScrollView#keyboardShouldPersistTaps</target>
        </trans-unit>
        <trans-unit id="0b85dddb71eeaeed045d3f78ff54cc714e6d023b" translate="yes" xml:space="preserve">
          <source>ScrollView#maximumZoomScale</source>
          <target state="translated">ScrollView#maximumZoomScale</target>
        </trans-unit>
        <trans-unit id="39e3c27ebe76e174a98861fa5e9918ce315d6c26" translate="yes" xml:space="preserve">
          <source>ScrollView#minimumZoomScale</source>
          <target state="translated">ScrollView#minimumZoomScale</target>
        </trans-unit>
        <trans-unit id="b4debaaeaaf692a9fdfde15fc51ccdca49c5a16e" translate="yes" xml:space="preserve">
          <source>ScrollView#nestedScrollEnabled</source>
          <target state="translated">ScrollView#nestedScrollEnabled</target>
        </trans-unit>
        <trans-unit id="878a7d4a3e7383da2a975f909d49a99b99475510" translate="yes" xml:space="preserve">
          <source>ScrollView#onContentSizeChange</source>
          <target state="translated">ScrollView#onContentSizeChange</target>
        </trans-unit>
        <trans-unit id="c18b6a9fee7b7f287766f13847eca6767d3de0b0" translate="yes" xml:space="preserve">
          <source>ScrollView#onMomentumScrollBegin</source>
          <target state="translated">ScrollView#onMomentumScrollBegin</target>
        </trans-unit>
        <trans-unit id="489e90bbec8e977f0406dae4a7508e83adc3055a" translate="yes" xml:space="preserve">
          <source>ScrollView#onMomentumScrollEnd</source>
          <target state="translated">ScrollView#onMomentumScrollEnd</target>
        </trans-unit>
        <trans-unit id="0038806ed934c8dd6c6bc0ae7bb91b771fde1ee5" translate="yes" xml:space="preserve">
          <source>ScrollView#onScroll</source>
          <target state="translated">ScrollView#onScroll</target>
        </trans-unit>
        <trans-unit id="95354023797054b0b9267e9ce9d0851cba2d8cf8" translate="yes" xml:space="preserve">
          <source>ScrollView#onScrollBeginDrag</source>
          <target state="translated">ScrollView#onScrollBeginDrag</target>
        </trans-unit>
        <trans-unit id="4f84b682bda115a76350b6a102bafae1572585d7" translate="yes" xml:space="preserve">
          <source>ScrollView#onScrollEndDrag</source>
          <target state="translated">ScrollView#onScrollEndDrag</target>
        </trans-unit>
        <trans-unit id="08922787555602ee3f3a0d8b2372850a4c2988ac" translate="yes" xml:space="preserve">
          <source>ScrollView#overScrollMode</source>
          <target state="translated">ScrollView#overScrollMode</target>
        </trans-unit>
        <trans-unit id="e4365be22cf20544243d548279aded9c24049dc2" translate="yes" xml:space="preserve">
          <source>ScrollView#pagingEnabled</source>
          <target state="translated">ScrollView#pagingEnabled</target>
        </trans-unit>
        <trans-unit id="f50a3935f6c20221eebfadf20be462d1ed06a525" translate="yes" xml:space="preserve">
          <source>ScrollView#pinchGestureEnabled</source>
          <target state="translated">ScrollView#pinchGestureEnabled</target>
        </trans-unit>
        <trans-unit id="7de887a35c93cfb57498cc535ffdefa3df52862a" translate="yes" xml:space="preserve">
          <source>ScrollView#refreshControl</source>
          <target state="translated">ScrollView#refreshControl</target>
        </trans-unit>
        <trans-unit id="77c659317f99375cd00033f286b036d988f6c8a9" translate="yes" xml:space="preserve">
          <source>ScrollView#removeClippedSubviews</source>
          <target state="translated">ScrollView#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="db4cc21930479e824c6effe975903bd94de6c1bf" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollEnabled</source>
          <target state="translated">ScrollView#scrollEnabled</target>
        </trans-unit>
        <trans-unit id="3d03ffbada9beccd5dcb92128bd6f351c2af8c89" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollEventThrottle</source>
          <target state="translated">ScrollView#scrollEventThrottle</target>
        </trans-unit>
        <trans-unit id="be688a1e4f21111879e3c9d4baed1907f3f2cb9d" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollIndicatorInsets</source>
          <target state="translated">ScrollView#scrollIndicatorInsets</target>
        </trans-unit>
        <trans-unit id="b8910ba3ac9bccac5358d42b26b7808e5aae5a67" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollPerfTag</source>
          <target state="translated">ScrollView#scrollPerfTag</target>
        </trans-unit>
        <trans-unit id="455f926f4708345fb930e77d87e375ad51d09afb" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollsToTop</source>
          <target state="translated">ScrollView#scrollsToTop</target>
        </trans-unit>
        <trans-unit id="b2b160d1e8d1612170271c0fe94572ef4bd6615d" translate="yes" xml:space="preserve">
          <source>ScrollView#showsHorizontalScrollIndicator</source>
          <target state="translated">ScrollView#showsHorizontalScrollIndicator</target>
        </trans-unit>
        <trans-unit id="03a290ff9ccbca157a8a7bf6c199988d2c17760a" translate="yes" xml:space="preserve">
          <source>ScrollView#showsVerticalScrollIndicator</source>
          <target state="translated">ScrollView#showsVerticalScrollIndicator</target>
        </trans-unit>
        <trans-unit id="9565b831656c35af45caa405578baee8b15e6ddb" translate="yes" xml:space="preserve">
          <source>ScrollView#snapToAlignment</source>
          <target state="translated">ScrollView#snapToAlignment</target>
        </trans-unit>
        <trans-unit id="2b132b84d873e30a907406e1b748b11bf763a25e" translate="yes" xml:space="preserve">
          <source>ScrollView#snapToInterval</source>
          <target state="translated">ScrollView#snapToInterval</target>
        </trans-unit>
        <trans-unit id="b72fd992cb58fde7b00b5a69fc9b7697bb1def42" translate="yes" xml:space="preserve">
          <source>ScrollView#stickyHeaderIndices</source>
          <target state="translated">ScrollView#stickyHeaderIndices</target>
        </trans-unit>
        <trans-unit id="1ea4d2ecba162c814867f677a8af45dd92ea083a" translate="yes" xml:space="preserve">
          <source>ScrollView#zoomScale</source>
          <target state="translated">ScrollView#zoomScale</target>
        </trans-unit>
        <trans-unit id="b05b97b19c872477b923c1cb22498a18998378fc" translate="yes" xml:space="preserve">
          <source>ScrollView.flashScrollIndicators()</source>
          <target state="translated">ScrollView.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="8693e1d3a2dd347891936e7d36e9960121023cbd" translate="yes" xml:space="preserve">
          <source>ScrollView.propTypes.decelerationRate</source>
          <target state="translated">ScrollView.propTypes.decelerationRate</target>
        </trans-unit>
        <trans-unit id="06ac589fc4536ccaf1c2223b620fc551c24c9a32" translate="yes" xml:space="preserve">
          <source>ScrollView.scrollTo()</source>
          <target state="translated">ScrollView.scrollTo()</target>
        </trans-unit>
        <trans-unit id="56473823fe55c39be7ee3c50109473b5a0abb4e4" translate="yes" xml:space="preserve">
          <source>ScrollView.scrollToEnd()</source>
          <target state="translated">ScrollView.scrollToEnd()</target>
        </trans-unit>
        <trans-unit id="79ea80d6314324799ad3f5e1c36adc73e75bdecc" translate="yes" xml:space="preserve">
          <source>ScrollView.scrollWithoutAnimationTo()</source>
          <target state="translated">ScrollView.scrollWithoutAnimationTo()</target>
        </trans-unit>
        <trans-unit id="ad29cb0d1b8f27a73f2dd3215b79de7ab9d489c6" translate="yes" xml:space="preserve">
          <source>ScrollViews can be configured to allow paging through views using swiping gestures by using the &lt;code&gt;pagingEnabled&lt;/code&gt; props. Swiping horizontally between views can also be implemented on Android using the &lt;a href=&quot;viewpagerandroid&quot;&gt;ViewPagerAndroid&lt;/a&gt; component.</source>
          <target state="translated">ScrollViewは、 &lt;code&gt;pagingEnabled&lt;/code&gt; プロパティを使用して、スワイプジェスチャーを使用してビューをページングできるように構成できます。ビュー間で水平方向にスワイプすることも、&lt;a href=&quot;viewpagerandroid&quot;&gt;ViewPagerAndroid&lt;/a&gt;コンポーネントを使用してAndroidに実装できます。</target>
        </trans-unit>
        <trans-unit id="6bf78634783c1732ee5896c645935a34c135069d" translate="yes" xml:space="preserve">
          <source>Scrolling lists, swiping pages, and pinch-to-zoom</source>
          <target state="translated">リストのスクロール、ページのスワイプ、ピンチ・ツー・ズーム</target>
        </trans-unit>
        <trans-unit id="dc9e885c29968b1e688aa8dd352776a9c9223e3c" translate="yes" xml:space="preserve">
          <source>Scrolls to a given x, y offset, either immediately or with a smooth animation.</source>
          <target state="translated">指定された x,y オフセットまでスクロールします。</target>
        </trans-unit>
        <trans-unit id="1910124f1afeedd4a7ea27dec9a3150b3443ac8c" translate="yes" xml:space="preserve">
          <source>Scrolls to the end of the content. May be janky without &lt;code&gt;getItemLayout&lt;/code&gt; prop.</source>
          <target state="translated">コンテンツの最後までスクロールします。 &lt;code&gt;getItemLayout&lt;/code&gt; プロップがないと、ぎこちなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fca01864952375e61715c077daa160a9db7e072a" translate="yes" xml:space="preserve">
          <source>Scrolls to the item at the specified &lt;code&gt;sectionIndex&lt;/code&gt; and &lt;code&gt;itemIndex&lt;/code&gt; (within the section) positioned in the viewable area such that &lt;code&gt;viewPosition&lt;/code&gt; 0 places it at the top (and may be covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle.</source>
          <target state="translated">表示可能領域に配置された指定された &lt;code&gt;sectionIndex&lt;/code&gt; および &lt;code&gt;itemIndex&lt;/code&gt; （セクション内）のアイテムにスクロールし、 &lt;code&gt;viewPosition&lt;/code&gt; 0 がアイテムを上部に配置し（スティッキーヘッダーでカバーされる場合があります）、1を下部に配置し、0.5を中央に配置します。中間。</target>
        </trans-unit>
        <trans-unit id="4e52e2abf4d87874ce000a79fef3b45c4b2c5fba" translate="yes" xml:space="preserve">
          <source>Scrolls to the item at the specified index such that it is positioned in the viewable area such that &lt;code&gt;viewPosition&lt;/code&gt; 0 places it at the top, 1 at the bottom, and 0.5 centered in the middle.</source>
          <target state="translated">指定されたインデックスの項目までスクロールして、 &lt;code&gt;viewPosition&lt;/code&gt; 0が上部に配置され、1が下部に配置され、中央が0.5になるように表示可能領域に配置されます。</target>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="translated">Section</target>
        </trans-unit>
        <trans-unit id="9e21d541f34bd06e7415583abd146e0bb64c2b22" translate="yes" xml:space="preserve">
          <source>Section header support.</source>
          <target state="translated">セクションヘッダーをサポートしています。</target>
        </trans-unit>
        <trans-unit id="89d35c6aae5a1516f05acb1fc9b8a2b962f5d937" translate="yes" xml:space="preserve">
          <source>Section separator support.</source>
          <target state="translated">セクションセパレータ対応。</target>
        </trans-unit>
        <trans-unit id="5a61ee4ad6b6d49e55495262350141dcc48da291" translate="yes" xml:space="preserve">
          <source>SectionList</source>
          <target state="translated">SectionList</target>
        </trans-unit>
        <trans-unit id="e91483830f797e35ffa11203b5899ab72b8f6570" translate="yes" xml:space="preserve">
          <source>SectionList#ItemSeparatorComponent</source>
          <target state="translated">SectionList#ItemSeparatorComponent</target>
        </trans-unit>
        <trans-unit id="2aace6b4f894e0ad94b4e86d953fbcb98685459e" translate="yes" xml:space="preserve">
          <source>SectionList#ListEmptyComponent</source>
          <target state="translated">SectionList#ListEmptyComponent</target>
        </trans-unit>
        <trans-unit id="b998cabd2554adc136b36b3c93da7ada29d1d55e" translate="yes" xml:space="preserve">
          <source>SectionList#ListFooterComponent</source>
          <target state="translated">SectionList#ListFooterComponent</target>
        </trans-unit>
        <trans-unit id="ceba5f2dccdf4a5bdd4da62c5eb89340e21dfe1c" translate="yes" xml:space="preserve">
          <source>SectionList#ListHeaderComponent</source>
          <target state="translated">SectionList#ListHeaderComponent</target>
        </trans-unit>
        <trans-unit id="856229dea4cedfc9012a525bba11c062694932e7" translate="yes" xml:space="preserve">
          <source>SectionList#SectionSeparatorComponent</source>
          <target state="translated">SectionList#SectionSeparatorComponent</target>
        </trans-unit>
        <trans-unit id="804ce421ac15863fd6ac9a396c6dd269c3f5e803" translate="yes" xml:space="preserve">
          <source>SectionList#extraData</source>
          <target state="translated">SectionList#extraData</target>
        </trans-unit>
        <trans-unit id="a25b4888171769e961f93b80492e20f2f2620478" translate="yes" xml:space="preserve">
          <source>SectionList#initialNumToRender</source>
          <target state="translated">SectionList#initialNumToRender</target>
        </trans-unit>
        <trans-unit id="80dab922b9766b39e6b2f620bd3fe506ae9928ca" translate="yes" xml:space="preserve">
          <source>SectionList#inverted</source>
          <target state="translated">SectionList#inverted</target>
        </trans-unit>
        <trans-unit id="929a5fe46e6b29ed50baef793a5d2ceade6ccaa3" translate="yes" xml:space="preserve">
          <source>SectionList#keyExtractor</source>
          <target state="translated">SectionList#keyExtractor</target>
        </trans-unit>
        <trans-unit id="986bc45d31611182968e894cec84799ba723eccd" translate="yes" xml:space="preserve">
          <source>SectionList#legacyImplementation</source>
          <target state="translated">SectionList#legacyImplementation</target>
        </trans-unit>
        <trans-unit id="f4fbcbf194a1248845957469787551a3d12a07ce" translate="yes" xml:space="preserve">
          <source>SectionList#onEndReached</source>
          <target state="translated">SectionList#onEndReached</target>
        </trans-unit>
        <trans-unit id="721801b0f2e47cfeb51233b4990d3258b426af67" translate="yes" xml:space="preserve">
          <source>SectionList#onEndReachedThreshold</source>
          <target state="translated">SectionList#onEndReachedThreshold</target>
        </trans-unit>
        <trans-unit id="c4bf9d3743d8007009969988d3af79c1713859ef" translate="yes" xml:space="preserve">
          <source>SectionList#onRefresh</source>
          <target state="translated">SectionList#onRefresh</target>
        </trans-unit>
        <trans-unit id="7c7a6c0ed4e2f4601adf6ad0fc87466bab9f81f4" translate="yes" xml:space="preserve">
          <source>SectionList#onViewableItemsChanged</source>
          <target state="translated">SectionList#onViewableItemsChanged</target>
        </trans-unit>
        <trans-unit id="6c1a8f6d64378d57fe33474f80cf14f4878b355a" translate="yes" xml:space="preserve">
          <source>SectionList#refreshing</source>
          <target state="translated">SectionList#refreshing</target>
        </trans-unit>
        <trans-unit id="d2cc0198afc3eaa7d6844699105e3fa977561baf" translate="yes" xml:space="preserve">
          <source>SectionList#removeClippedSubviews</source>
          <target state="translated">SectionList#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="78b8e4bbfe138046d278e1fae3b75d5df06042eb" translate="yes" xml:space="preserve">
          <source>SectionList#renderItem</source>
          <target state="translated">SectionList#renderItem</target>
        </trans-unit>
        <trans-unit id="b16f336af0e6fb1e141c60f30a0c0056baf8ab03" translate="yes" xml:space="preserve">
          <source>SectionList#renderSectionFooter</source>
          <target state="translated">SectionList#renderSectionFooter</target>
        </trans-unit>
        <trans-unit id="53076f5c3a0881b403734e0970a602f5451ba050" translate="yes" xml:space="preserve">
          <source>SectionList#renderSectionHeader</source>
          <target state="translated">SectionList#renderSectionHeader</target>
        </trans-unit>
        <trans-unit id="6c5609730bd0271232cb2059c7aa53ff7724aac2" translate="yes" xml:space="preserve">
          <source>SectionList#sections</source>
          <target state="translated">SectionList#sections</target>
        </trans-unit>
        <trans-unit id="f82a58364c2a948d3ac2294be9f2058726b91a4c" translate="yes" xml:space="preserve">
          <source>SectionList#stickySectionHeadersEnabled</source>
          <target state="translated">SectionList#stickySectionHeadersEnabled</target>
        </trans-unit>
        <trans-unit id="b6103a601fceeda41b9195c3df5b0d7111bc679c" translate="yes" xml:space="preserve">
          <source>SectionList.flashScrollIndicators()</source>
          <target state="translated">SectionList.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="69e7388b51eed2589712260ab93da335c5af48ac" translate="yes" xml:space="preserve">
          <source>SectionList.recordInteraction()</source>
          <target state="translated">SectionList.recordInteraction()</target>
        </trans-unit>
        <trans-unit id="4931ab4c0770241b135622113573e1fbba04c5c3" translate="yes" xml:space="preserve">
          <source>SectionList.scrollToLocation()</source>
          <target state="translated">SectionList.scrollToLocation()</target>
        </trans-unit>
        <trans-unit id="a514721116be0e98655ff15f001865e414d95d40" translate="yes" xml:space="preserve">
          <source>Secure text input alert</source>
          <target state="translated">安全なテキスト入力アラート</target>
        </trans-unit>
        <trans-unit id="aeb78a3e092c34ec269f3990359bac2fb367389e" translate="yes" xml:space="preserve">
          <source>Security bugs</source>
          <target state="translated">セキュリティバグ</target>
        </trans-unit>
        <trans-unit id="907d2a9dbe70b4ef38b86c4a97e113d491c2dc7e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;cameraroll&quot;&gt;CameraRoll&lt;/a&gt; for an example of using local resources that are outside of &lt;code&gt;Images.xcassets&lt;/code&gt;.</source>
          <target state="translated">参照してください&lt;a href=&quot;cameraroll&quot;&gt;に、CameraRoll&lt;/a&gt;外のある地域資源の使用例について &lt;code&gt;Images.xcassets&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="59141f48aefefc41f849597993219cbe0f329169" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;datepickerios#maximumdate&quot;&gt;&lt;code&gt;maximumDate&lt;/code&gt;&lt;/a&gt; for an example image.</source>
          <target state="translated">画像の例については&lt;a href=&quot;datepickerios#maximumdate&quot;&gt; &lt;code&gt;maximumDate&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="01f56686e75f687f9ee20cea5df2f7b34d16b439" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&lt;/a&gt; for more details of how &lt;code&gt;bottom&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;bottom&lt;/code&gt; がレイアウトに与える影響の詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/bottom&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c80e303a04767472bc7592fd3e1c6c335ae85882" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/left&lt;/a&gt; for more details of how &lt;code&gt;left&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; がレイアウトに与える影響の詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/left&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/left&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="05c94d991c56ef358713728e969a0ccb0f8ad7bf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/max-height&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1cbdf30d47e6696251419fbdcb612cd3dc4fc644" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/max-width&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee91275e7e9e3256d8b4058f14a0aa73c518516c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/min-height&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4e20784d023d32e46fc8dfc60e48346b9d85b30b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/min-width&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e20324938abcc7c650fa1500a4096ca66d2e24ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/right&lt;/a&gt; for more details of how &lt;code&gt;right&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;right&lt;/code&gt; がレイアウトに与える影響の詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/right&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/right&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="90fe86bbcc1d8647358f95b4b4f9ebba5e4caa63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/top&lt;/a&gt; for more details of how &lt;code&gt;top&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;top&lt;/code&gt; がレイアウトに与える影響の詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/top&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/top&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d6678373b55eea9b104ccd383c9d7a320576f68" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt; for more details on how &lt;code&gt;position&lt;/code&gt; differs between React Native and CSS.</source>
          <target state="translated">React NativeとCSSの &lt;code&gt;position&lt;/code&gt; 違いの詳細については、&lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https：//github.com/facebook/yoga&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="48a52297679dcecc3eb4179db1c185c337a54c15" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://medium.com/@martinkonicek/what-is-a-test-plan-8bfc840ec171#.y9lcuqqi9&quot;&gt;What is a Test Plan?&lt;/a&gt; to learn more.</source>
          <target state="translated">参照&lt;a href=&quot;https://medium.com/@martinkonicek/what-is-a-test-plan-8bfc840ec171#.y9lcuqqi9&quot;&gt;テスト計画は何ですか？&lt;/a&gt;詳しく知ることができ。</target>
        </trans-unit>
        <trans-unit id="528134d34412307cd29d3c2ec9a348d185058366" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;refreshcontrol&quot;&gt;RefreshControl&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;refreshcontrol&quot;&gt;RefreshControlを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3fa2254cc8a8b738cf26cc0336a551038bf9c185" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ScrollView#scrollTo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScrollView#scrollTo&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b2695b3c5bfbf11b095e739267825fc3d1955c3" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ScrollView#scrollToEnd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScrollView#scrollToEnd&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7fbcc2aba4ae853c05e4836426fd41046715ec13" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; for flow type and further documentation.</source>
          <target state="translated">フロータイプと詳細なドキュメントについては、 &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="432cb254f15763b7805bdd86025f5f8cf43aec8f" translate="yes" xml:space="preserve">
          <source>See above.</source>
          <target state="translated">上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="2d58c9b9c853c290bccf0dad5f628c40565aad77" translate="yes" xml:space="preserve">
          <source>See below.</source>
          <target state="translated">以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="1a5470a9f513db4153166e903710027d59dc6695" translate="yes" xml:space="preserve">
          <source>See config parameters below.</source>
          <target state="translated">以下の設定パラメータを参照してください。</target>
        </trans-unit>
        <trans-unit id="d8df23368bd6e332916fb14546986d3b0d3cf009" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessibilityelementshidden-ios&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;accessibility#accessibilityelementshidden-ios&quot;&gt;アクセシビリティガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d1084b1ac9c3fc3f2f9dc1cafe54f333ef6870d9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessibilitytraits-ios&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;accessibility#accessibilitytraits-ios&quot;&gt;アクセシビリティガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfc074e594c1b96a0096ce85f9aca455e5497d8b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessibilityviewismodal-ios&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;accessibility#accessibilityviewismodal-ios&quot;&gt;アクセシビリティガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aead24c8e2e7cd690e185a98a689820e84f865ba" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessible-ios-android&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;accessibility#accessible-ios-android&quot;&gt;アクセシビリティガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f79de42fd860328414d025e2a845e0fd7ba1111" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://developer.android.com/reference/android/R.attr.html#importantForAccessibility&quot;&gt;Android &lt;code&gt;importantForAccessibility&lt;/code&gt; docs&lt;/a&gt; for reference.</source>
          <target state="translated">参考として、&lt;a href=&quot;http://developer.android.com/reference/android/R.attr.html#importantForAccessibility&quot;&gt;Androidの &lt;code&gt;importantForAccessibility&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5c3f9b4a4ace5d2cdb01d3e1479b375ed8526f86" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion&quot;&gt;Android &lt;code&gt;View&lt;/code&gt; docs&lt;/a&gt; for reference.</source>
          <target state="translated">リファレンスについては、&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion&quot;&gt;Android &lt;code&gt;View&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c71c8228e8bc739f6f49bce591f18245cb9d298" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#updating-to-new-releases&quot;&gt;CRNA user guide&lt;/a&gt; for up-to-date information about upgrading your project.</source>
          <target state="translated">プロジェクトのアップグレードに関する最新情報については、&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#updating-to-new-releases&quot;&gt;CRNAユーザーガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="14e80ade1e2cf260fbfddd8bac245f09c76e7204" translate="yes" xml:space="preserve">
          <source>See the Code</source>
          <target state="translated">コードを参照してください。</target>
        </trans-unit>
        <trans-unit id="be2574e61ce83071a5385dd938470f1288a765f2" translate="yes" xml:space="preserve">
          <source>See the following for example usage and integration points:</source>
          <target state="translated">使用例と統合ポイントは以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="d5b07318ffe369a984bc07beb9fe919b568dc253" translate="yes" xml:space="preserve">
          <source>See what push permissions are currently enabled.</source>
          <target state="translated">現在、どのようなプッシュ権限が有効になっているかを確認します。</target>
        </trans-unit>
        <trans-unit id="baf13f431e118d444a712d57b964bfa42ea12051" translate="yes" xml:space="preserve">
          <source>Seeing &lt;code&gt;device&lt;/code&gt; in the right column means the device is connected. You must have &lt;strong&gt;only one device connected&lt;/strong&gt; at a time.</source>
          <target state="translated">見 &lt;code&gt;device&lt;/code&gt; 右側の列には、デバイスが接続されています。&lt;strong&gt;一度に接続&lt;/strong&gt;する&lt;strong&gt;デバイスは1つだけに&lt;/strong&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="069825a9879dfe419a9d6ef4815760cfd7fa7da1" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS</source>
          <target state="translated">SegmentedControlIOS</target>
        </trans-unit>
        <trans-unit id="663c1a50e9d3d2b57cec7cc3da6993f4c4003edb" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#enabled</source>
          <target state="translated">SegmentedControlIOS#enabled</target>
        </trans-unit>
        <trans-unit id="533d7b637a830343e7afb15be22e72bdbea4f5a5" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#momentary</source>
          <target state="translated">SegmentedControlIOS#momentary</target>
        </trans-unit>
        <trans-unit id="1d412390cc91a56307ee0abccd9582e61bf165e3" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#onChange</source>
          <target state="translated">SegmentedControlIOS#onChange</target>
        </trans-unit>
        <trans-unit id="ed84e4bc4f4e5ed4e1d5a15b31f3db5b344736f2" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#onValueChange</source>
          <target state="translated">SegmentedControlIOS#onValueChange</target>
        </trans-unit>
        <trans-unit id="048cac7f3825e16e16c81a5fa1800c324873bdc4" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#selectedIndex</source>
          <target state="translated">SegmentedControlIOS#selectedIndex</target>
        </trans-unit>
        <trans-unit id="4ec508c1335bf925a4953659e15f19614827a126" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#tintColor</source>
          <target state="translated">SegmentedControlIOS#tintColor</target>
        </trans-unit>
        <trans-unit id="325b7f2467020f850c69df2f07c6266bb82309b1" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#values</source>
          <target state="translated">SegmentedControlIOS#values</target>
        </trans-unit>
        <trans-unit id="8113044b9d896abd4fa7735e4874ce22b7ffa06a" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Tools &amp;rarr; Developer Tools&lt;/code&gt; from the Chrome Menu to open the &lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;Developer Tools&lt;/a&gt;. You may also access the DevTools using keyboard shortcuts (&lt;code&gt;⌘⌥I&lt;/code&gt; on macOS, &lt;code&gt;Ctrl&lt;/code&gt;&lt;code&gt;Shift&lt;/code&gt;&lt;code&gt;I&lt;/code&gt; on Windows). You may also want to enable &lt;a href=&quot;http://stackoverflow.com/questions/2233339/javascript-is-there-a-way-to-get-chrome-to-break-on-all-errors/17324511#17324511&quot;&gt;Pause On Caught Exceptions&lt;/a&gt; for a better debugging experience.</source>
          <target state="translated">Chromeメニューから[ &lt;code&gt;Tools &amp;rarr; Developer Tools&lt;/code&gt; [ 開発者ツール ]を選択して、&lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;開発者ツール&lt;/a&gt;を開きます。キーボードショートカットを使用してDevToolsにアクセスすることもできます（macOSでは &lt;code&gt;⌘⌥I&lt;/code&gt; 、Windowsでは &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;I&lt;/code&gt; ）。より良いデバッグ体験のために、&lt;a href=&quot;http://stackoverflow.com/questions/2233339/javascript-is-there-a-way-to-get-chrome-to-break-on-all-errors/17324511#17324511&quot;&gt;キャッチされた例外&lt;/a&gt;で一時停止を有効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="ba17caa4eb0cee5c1110710ba144260d1ed93b63" translate="yes" xml:space="preserve">
          <source>Select the &quot;SDK Platforms&quot; tab from within the SDK Manager, then check the box next to &quot;Show Package Details&quot; in the bottom right corner. Look for and expand the &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; entry, then make sure the following items are all checked:</source>
          <target state="translated">SDK Managerから[SDK Platforms]タブを選択し、右下隅にある[Show Package Details]の横のボックスをオンにします。 &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; エントリを探して展開し、次の項目がすべてチェックされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="66cdb0b8d876156b74a55a55b612065573186fce" translate="yes" xml:space="preserve">
          <source>Select the &quot;x86 Images&quot; tab, then look for the &lt;strong&gt;Marshmallow&lt;/strong&gt; API Level 23, x86_64 ABI image with a Android 6.0 (Google APIs) target.</source>
          <target state="translated">[x86イメージ]タブを選択し、&lt;strong&gt;Marshmallow&lt;/strong&gt; APIレベル23、Android 6.0（Google API）ターゲットを持つx86_64 ABIイメージを探します。</target>
        </trans-unit>
        <trans-unit id="c731c4163da7d03b13151f1e2555d1b6c36924cd" translate="yes" xml:space="preserve">
          <source>Select your project in the Xcode Project Navigator, then select your main target (it should share the same name as your project). Look for the &quot;General&quot; tab. Go to &quot;Signing&quot; and make sure your Apple developer account or team is selected under the Team dropdown.</source>
          <target state="translated">Xcodeプロジェクトナビゲーターでプロジェクトを選択し、メインターゲットを選択してください(プロジェクトと同じ名前でなければなりません)。General &quot;タブを探します。Signing &quot;に移動し、Team ドロップダウンで Apple developer アカウントまたはチームが選択されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="b1ea280e9f06086452485e1dc29063742914879f" translate="yes" xml:space="preserve">
          <source>Selecting load</source>
          <target state="translated">負荷の選択</target>
        </trans-unit>
        <trans-unit id="711a689c12650be64853fa6e68a1a613728d667e" translate="yes" xml:space="preserve">
          <source>Selecting the html file generated from the previous command.</source>
          <target state="translated">前のコマンドで生成されたhtmlファイルを選択します。</target>
        </trans-unit>
        <trans-unit id="58e40be182dcb67b6e25bf1559c65eb81e70e6e2" translate="yes" xml:space="preserve">
          <source>Sending Accessibility Events (Android)</source>
          <target state="translated">アクセシビリティイベントの送信(Android</target>
        </trans-unit>
        <trans-unit id="97eac09347105a260ff2ba610458a361b634bae9" translate="yes" xml:space="preserve">
          <source>Sending Events to JavaScript</source>
          <target state="translated">JavaScriptへのイベントの送信</target>
        </trans-unit>
        <trans-unit id="e5a90661e8eabfe67d3e6d8b891fceca0e1bcc9a" translate="yes" xml:space="preserve">
          <source>Sending a pull request</source>
          <target state="translated">プルリクエストの送信</target>
        </trans-unit>
        <trans-unit id="80f95b59d7d775659cb8fd6987a01b1fe16ad1d9" translate="yes" xml:space="preserve">
          <source>Separator support.</source>
          <target state="translated">セパレーター対応。</target>
        </trans-unit>
        <trans-unit id="1729419995645c7a5d17fce568fae268b9ea4daf" translate="yes" xml:space="preserve">
          <source>Service can be started from Java API. First you need to decide when the service should be started and implement your solution accordingly. Here is a simple example that reacts to network connection change.</source>
          <target state="translated">Java APIからサービスを開始することができます。まず、サービスを開始するタイミングを決めて、それに合わせて実装する必要があります。ここでは、ネットワーク接続の変更に反応する簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="a78cfbae4602b25e7e07c3e5990c2d546e957b6a" translate="yes" xml:space="preserve">
          <source>Set as translucent.</source>
          <target state="translated">半透明に設定します。</target>
        </trans-unit>
        <trans-unit id="6efb624885bc4953b48eede80bbc5c075420a42d" translate="yes" xml:space="preserve">
          <source>Set content of string type. You can use following code to set clipboard content</source>
          <target state="translated">文字列型の内容を設定します。クリップボードの内容を設定するには、以下のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="e273417178ceb5631523ed2eefd225020f4d41ab" translate="yes" xml:space="preserve">
          <source>Set text break strategy on Android API Level 23+, possible values are &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;highQuality&lt;/code&gt;, &lt;code&gt;balanced&lt;/code&gt; The default value is &lt;code&gt;highQuality&lt;/code&gt;.</source>
          <target state="translated">Android APIレベル23以上でテキスト分割戦略を設定します。可能な値は &lt;code&gt;simple&lt;/code&gt; 、 &lt;code&gt;highQuality&lt;/code&gt; 、 &lt;code&gt;balanced&lt;/code&gt; です。デフォルト値は &lt;code&gt;highQuality&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e7d7b7534d436b2140571ce0560d1e60f312d9b" translate="yes" xml:space="preserve">
          <source>Set text break strategy on Android API Level 23+, possible values are &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;highQuality&lt;/code&gt;, &lt;code&gt;balanced&lt;/code&gt; The default value is &lt;code&gt;simple&lt;/code&gt;.</source>
          <target state="translated">Android APIレベル23以上でテキスト分割戦略を設定します。可能な値は &lt;code&gt;simple&lt;/code&gt; 、 &lt;code&gt;highQuality&lt;/code&gt; 、 &lt;code&gt;balanced&lt;/code&gt; です。デフォルト値は &lt;code&gt;simple&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f98b25f871e1af507044a03a530ee1302ede139" translate="yes" xml:space="preserve">
          <source>Set the background color for the status bar</source>
          <target state="translated">ステータスバーの背景色を設定する</target>
        </trans-unit>
        <trans-unit id="01df3bde3d59a190125ff6bb7cc62c804926babb" translate="yes" xml:space="preserve">
          <source>Set the status bar style</source>
          <target state="translated">ステータスバーのスタイルを設定する</target>
        </trans-unit>
        <trans-unit id="9e330f5626eed6df49f7e435933b9aa5469b630f" translate="yes" xml:space="preserve">
          <source>Set this to provide JavaScript that will be injected into the web page when the view loads.</source>
          <target state="translated">これを設定すると、ビューがロードされたときにWebページに注入されるJavaScriptが提供されます。</target>
        </trans-unit>
        <trans-unit id="76fe04b18d298eb91e501ccd6d09143c05bf449c" translate="yes" xml:space="preserve">
          <source>Set this true while waiting for new data from a refresh.</source>
          <target state="translated">リフレッシュからの新しいデータを待っている間、この値をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="e47e4ed9e4a1903e9de964cea83128a236ffe81d" translate="yes" xml:space="preserve">
          <source>Set this when offset is needed for the loading indicator to show correctly.</source>
          <target state="translated">読み込みインジケータを正しく表示するためにオフセットが必要な場合に設定します。</target>
        </trans-unit>
        <trans-unit id="151dbc325adb92c8cb8f12672f5159523d19e1f6" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;false&lt;/code&gt; to remove extra font padding intended to make space for certain ascenders / descenders. With some fonts, this padding can make text look slightly misaligned when centered vertically. For best results also set &lt;code&gt;textAlignVertical&lt;/code&gt; to &lt;code&gt;center&lt;/code&gt;. Default is true.</source>
          <target state="translated">特定のアセンダー/ディセンダーのためのスペースを作ることを目的とした余分なフォントパディングを削除するには、 &lt;code&gt;false&lt;/code&gt; に設定します。一部のフォントでは、このパディングにより、テキストを垂直方向の中央に配置したときにテキストの位置がわずかにずれる場合があります。最良の結果を得るには、 &lt;code&gt;textAlignVertical&lt;/code&gt; を &lt;code&gt;center&lt;/code&gt; に設定します。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="1238a993d6f232aacfaf4ae7bbc4a807f6fb33b5" translate="yes" xml:space="preserve">
          <source>Set to true to add the ripple effect to the foreground of the view, instead of the background. This is useful if one of your child views has a background of its own, or you're e.g. displaying images, and you don't want the ripple to be covered by them.</source>
          <target state="translated">trueに設定すると、背景ではなくビューの前景にリップル効果を追加します。これは、子ビューの1つがそれ自身の背景を持っている場合や、画像を表示している場合などで、リップルをそれらでカバーしたくない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fe81dbe7b791f22dc0a8a4f8f880daabb793be71" translate="yes" xml:space="preserve">
          <source>Set up React Native dependencies and directory structure.</source>
          <target state="translated">React Nativeの依存関係とディレクトリ構造を設定します。</target>
        </trans-unit>
        <trans-unit id="868713e5bbfa6702d7a54177d67b6abcaae003fe" translate="yes" xml:space="preserve">
          <source>Set whether Geolocation is enabled in the &lt;code&gt;WebView&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;. Used only in Android.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; で位置情報を有効にするかどうかを設定します。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。Androidでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="d8ef5004eb5f1562c51128e61ff6f6be0a5edfac" translate="yes" xml:space="preserve">
          <source>Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.</source>
          <target state="translated">スタイル・プロパティ値の前処理に使用する関数を設定します。これは、内部的に色や変換値を処理するために使用されます。何をしているのか本当に分かっていて、他のオプションを使い切っていない限り、これを使うべきではありません。</target>
        </trans-unit>
        <trans-unit id="78f1653f76894aa101ff949f676f6c6515e021a7" translate="yes" xml:space="preserve">
          <source>Sets an image for the thumb. Only static images are supported.</source>
          <target state="translated">親指の画像を設定します。静止画像のみ対応しています。</target>
        </trans-unit>
        <trans-unit id="b244aecda13d0b95eb8bf978bb286ed4aafe1635" translate="yes" xml:space="preserve">
          <source>Sets configuration options that will be used in all location requests.</source>
          <target state="translated">すべてのロケーション要求で使用される構成オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="ecbb65064159e93c16eb523e65b3c39ecc5c0de9" translate="yes" xml:space="preserve">
          <source>Sets possible actions on the toolbar as part of the action menu. These are displayed as icons or text on the right side of the widget. If they don't fit they are placed in an 'overflow' menu.</source>
          <target state="translated">アクションメニューの一部としてツールバーで可能なアクションを設定します。これらはウィジェットの右側にアイコンかテキストとして表示されます。サイズが合わない場合は、「オーバーフロー」メニューに配置されます。</target>
        </trans-unit>
        <trans-unit id="c87ff4f4fcc827caf2c291115a0130f5e96b575d" translate="yes" xml:space="preserve">
          <source>Sets the badge number for the app icon on the home screen</source>
          <target state="translated">ホーム画面のアプリアイコンのバッジ番号を設定します。</target>
        </trans-unit>
        <trans-unit id="2a48b744899a032c5f3d1d2ade27641256ee021c" translate="yes" xml:space="preserve">
          <source>Sets the color of the status bar text.</source>
          <target state="translated">ステータスバーのテキストの色を設定します。</target>
        </trans-unit>
        <trans-unit id="4c7aa28902d1162f819e491ea10b97554f7982f4" translate="yes" xml:space="preserve">
          <source>Sets the content inset for the toolbar ending edge.</source>
          <target state="translated">ツールバーの終了エッジのコンテンツ挿入を設定します。</target>
        </trans-unit>
        <trans-unit id="fd760dbe794a035b10de15a19aba0cf61f7604af" translate="yes" xml:space="preserve">
          <source>Sets the content inset for the toolbar starting edge.</source>
          <target state="translated">ツールバーの開始エッジのコンテンツ挿入を設定します。</target>
        </trans-unit>
        <trans-unit id="2357350a349cba4f1ddd74b43255f6193748614e" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow blur radius</source>
          <target state="translated">ドロップシャドウのぼかし半径を設定します。</target>
        </trans-unit>
        <trans-unit id="5e440039bfec1b68c8b3e58d152432a9f0ad1f0e" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow color</source>
          <target state="translated">ドロップシャドウの色を設定します。</target>
        </trans-unit>
        <trans-unit id="5668c7922681607ec3be71c6fa1b5c65888622b2" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow offset</source>
          <target state="translated">ドロップシャドウのオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="8ca9e5f817e93391fbe081fe31e0b08beeb9ef79" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow opacity (multiplied by the color's alpha component)</source>
          <target state="translated">ドロップシャドウの不透明度を設定します。</target>
        </trans-unit>
        <trans-unit id="6127983e45cd88450fc61e1bdfe0414329823a9d" translate="yes" xml:space="preserve">
          <source>Sets the navigation icon.</source>
          <target state="translated">ナビゲーションアイコンを設定します。</target>
        </trans-unit>
        <trans-unit id="349053aee58f4eadeaf3c2c06c6f507891e62650" translate="yes" xml:space="preserve">
          <source>Sets the number of lines for a &lt;code&gt;TextInput&lt;/code&gt;. Use it with multiline set to &lt;code&gt;true&lt;/code&gt; to be able to fill the lines.</source>
          <target state="translated">&lt;code&gt;TextInput&lt;/code&gt; の行数を設定します。複数行を &lt;code&gt;true&lt;/code&gt; に設定して使用すると、行を埋めることができます。</target>
        </trans-unit>
        <trans-unit id="d3711ac7600c90b862d7efc7a1530bd2e38f3418" translate="yes" xml:space="preserve">
          <source>Sets the overflow icon.</source>
          <target state="translated">オーバーフローアイコンを設定します。</target>
        </trans-unit>
        <trans-unit id="ab16e035fa066f6d21ce73f50ff382ed6abf73ce" translate="yes" xml:space="preserve">
          <source>Sets the return key to the label. Use it instead of &lt;code&gt;returnKeyType&lt;/code&gt;.</source>
          <target state="translated">リターンキーをラベルに設定します。 &lt;code&gt;returnKeyType&lt;/code&gt; の代わりに使用してください。</target>
        </trans-unit>
        <trans-unit id="8d72b85f2739932e7db4a0a7f43db1f6028449cb" translate="yes" xml:space="preserve">
          <source>Sets the toolbar logo.</source>
          <target state="translated">ツールバーのロゴを設定します。</target>
        </trans-unit>
        <trans-unit id="62ced106d55ffba15502328ca28c714767987094" translate="yes" xml:space="preserve">
          <source>Sets the toolbar subtitle color.</source>
          <target state="translated">ツールバーの字幕の色を設定します。</target>
        </trans-unit>
        <trans-unit id="13b2a7f28f7a55435aadeb8fdebb11ee008a2649" translate="yes" xml:space="preserve">
          <source>Sets the toolbar subtitle.</source>
          <target state="translated">ツールバーの字幕を設定します。</target>
        </trans-unit>
        <trans-unit id="a1a0cd5d23b11fe8ebf96bae61f043dc705ca732" translate="yes" xml:space="preserve">
          <source>Sets the toolbar title color.</source>
          <target state="translated">ツールバーのタイトルの色を設定します。</target>
        </trans-unit>
        <trans-unit id="137b0a1497a6489c27396f256d62186169783c9e" translate="yes" xml:space="preserve">
          <source>Sets the toolbar title.</source>
          <target state="translated">ツールバーのタイトルを設定します。</target>
        </trans-unit>
        <trans-unit id="d69b1eecd5ccc8aa60e35cb44153fe4dd9db589d" translate="yes" xml:space="preserve">
          <source>Sets the user-agent for the &lt;code&gt;WebView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; のユーザーエージェントを設定します。</target>
        </trans-unit>
        <trans-unit id="a37848745e8f189bad8cd6e89d761299f67c0c70" translate="yes" xml:space="preserve">
          <source>Sets the value for a &lt;code&gt;key&lt;/code&gt; and invokes a callback upon completion. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の値を設定し、完了時にコールバックを呼び出します。 &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="821ef1f69a83191e3767f38775f1c8f893396eb0" translate="yes" xml:space="preserve">
          <source>Setter declaration requirements for methods annotated with &lt;code&gt;@ReactPropGroup&lt;/code&gt; are different than for &lt;code&gt;@ReactProp&lt;/code&gt;, please refer to the &lt;code&gt;@ReactPropGroup&lt;/code&gt; annotation class docs for more information about it.</source>
          <target state="translated">&lt;code&gt;@ReactPropGroup&lt;/code&gt; アノテーションが付けられたメソッドのセッター宣言要件は、@ReactPropの場合とは異なり &lt;code&gt;@ReactProp&lt;/code&gt; 。詳細については、 &lt;code&gt;@ReactPropGroup&lt;/code&gt; アノテーションクラスのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e11d55780ed7b3c19a57a6aec4aa6c3881e8176" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;margin&lt;/code&gt; has the same effect as setting each of &lt;code&gt;marginTop&lt;/code&gt;, &lt;code&gt;marginLeft&lt;/code&gt;, &lt;code&gt;marginBottom&lt;/code&gt;, and &lt;code&gt;marginRight&lt;/code&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&lt;/a&gt; for more details.</source>
          <target state="translated">設定 &lt;code&gt;margin&lt;/code&gt; それぞれの設定と同じ効果がある &lt;code&gt;marginTop&lt;/code&gt; 、 &lt;code&gt;marginLeft&lt;/code&gt; 、 &lt;code&gt;marginBottom&lt;/code&gt; 、および &lt;code&gt;marginRight&lt;/code&gt; を。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/margin&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a782a0ddfde20f568358f293347866e85c970405" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;marginHorizontal&lt;/code&gt; has the same effect as setting both &lt;code&gt;marginLeft&lt;/code&gt; and &lt;code&gt;marginRight&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;marginHorizontal&lt;/code&gt; 、両方の設定と同じ効果がある &lt;code&gt;marginLeft&lt;/code&gt; と &lt;code&gt;marginRight&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c302e69054c42451103fb84e0793cd5996cae036" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;marginVertical&lt;/code&gt; has the same effect as setting both &lt;code&gt;marginTop&lt;/code&gt; and &lt;code&gt;marginBottom&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;marginVertical&lt;/code&gt; は、両方の設定と同じ効果がある &lt;code&gt;marginTop&lt;/code&gt; と &lt;code&gt;marginBottom&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b7862aa8bf686daa6ea868b004619cdf3fa460fa" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;padding&lt;/code&gt; has the same effect as setting each of &lt;code&gt;paddingTop&lt;/code&gt;, &lt;code&gt;paddingBottom&lt;/code&gt;, &lt;code&gt;paddingLeft&lt;/code&gt;, and &lt;code&gt;paddingRight&lt;/code&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;padding&lt;/code&gt; の設定は、 &lt;code&gt;paddingTop&lt;/code&gt; 、 &lt;code&gt;paddingBottom&lt;/code&gt; 、 &lt;code&gt;paddingLeft&lt;/code&gt; 、および &lt;code&gt;paddingRight&lt;/code&gt; のそれぞれの設定と同じ効果があります。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&quot;&gt;https：//developer.mozilla.org/en-US/docs/Web/CSS/padding&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f1ad8878c69f5d27750ade539c1745d60304142" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;paddingHorizontal&lt;/code&gt; is like setting both of &lt;code&gt;paddingLeft&lt;/code&gt; and &lt;code&gt;paddingRight&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;paddingHorizontal&lt;/code&gt; の両方の設定のようなものです &lt;code&gt;paddingLeft&lt;/code&gt; と &lt;code&gt;paddingRight&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7286d4d2beeee7f9772d787b3719bdf3d6a0d4f7" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;paddingVertical&lt;/code&gt; is like setting both of &lt;code&gt;paddingTop&lt;/code&gt; and &lt;code&gt;paddingBottom&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;paddingVertical&lt;/code&gt; することの両方の設定のようなものです &lt;code&gt;paddingTop&lt;/code&gt; および &lt;code&gt;paddingBottom&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="a11a6fa3fa715bc8693a8315ab4c5cbc60e32b21" translate="yes" xml:space="preserve">
          <source>Setting dimensions this way is common for components that should always render at exactly the same size, regardless of screen dimensions.</source>
          <target state="translated">このように寸法を設定することは、画面の寸法に関係なく、常に正確に同じサイズでレンダリングする必要があるコンポーネントでは一般的です。</target>
        </trans-unit>
        <trans-unit id="46d0e27630fb8d75c9ae0b84067b362e742620f5" translate="yes" xml:space="preserve">
          <source>Setting up gradle variables</source>
          <target state="translated">グラドル変数の設定</target>
        </trans-unit>
        <trans-unit id="1285ada3ff4f2dc7ed11c1d69bbef2df5ee5a05a" translate="yes" xml:space="preserve">
          <source>Setting up your development environment can be somewhat tedious if you're new to Android development. If you're already familiar with Android development, there are a few things you may need to configure. In either case, please make sure to carefully follow the next few steps.</source>
          <target state="translated">Android開発に慣れていない場合、開発環境を設定するのは多少面倒な作業になります。すでにAndroid開発に慣れている場合は、いくつか設定しなければならないことがあるかもしれません。いずれにしても、次のいくつかのステップを慎重に行ってください。</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="f4de2b87cdd8b3dd83b4776897d3f28647b71808" translate="yes" xml:space="preserve">
          <source>Settings.clearWatch()</source>
          <target state="translated">Settings.clearWatch()</target>
        </trans-unit>
        <trans-unit id="b90417499b30c8956dd9ce1786bf9dbc94f071d2" translate="yes" xml:space="preserve">
          <source>Settings.get()</source>
          <target state="translated">Settings.get()</target>
        </trans-unit>
        <trans-unit id="eb4645d58a59a6e642217f66792b8939b01636a3" translate="yes" xml:space="preserve">
          <source>Settings.set()</source>
          <target state="translated">Settings.set()</target>
        </trans-unit>
        <trans-unit id="90e10c020fb166cf50f046118c3095e24b3eb8a0" translate="yes" xml:space="preserve">
          <source>Settings.watchKeys()</source>
          <target state="translated">Settings.watchKeys()</target>
        </trans-unit>
        <trans-unit id="723fca1b96960f297a3574fc7a5605220dff06d6" translate="yes" xml:space="preserve">
          <source>Shadow Props</source>
          <target state="translated">影の小道具</target>
        </trans-unit>
        <trans-unit id="2c7663474af451a97e6349d97385a92fe925ad03" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowColor</source>
          <target state="translated">シャドウ小道具#shadowColor</target>
        </trans-unit>
        <trans-unit id="3d99d9b39e2f937a49e69b0bb0268b3def3a0a5c" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowOffset</source>
          <target state="translated">シャドウプロップス#shadowOffset</target>
        </trans-unit>
        <trans-unit id="8a8cfbe24cc9d4945882c024e63820f9357de4ee" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowOpacity</source>
          <target state="translated">シャドウ小道具#shadowOpacity</target>
        </trans-unit>
        <trans-unit id="700535f2c4d0e52463558e2f7b2dcbc469dc194b" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowRadius</source>
          <target state="translated">シャドウプロップス#シャドウラディウス</target>
        </trans-unit>
        <trans-unit id="16a29d3d4dd04ed1a23843e00962b1db3599d5c1" translate="yes" xml:space="preserve">
          <source>Shadow Props...</source>
          <target state="translated">影の小道具...</target>
        </trans-unit>
        <trans-unit id="09ca55ca52d207f2cc1d9339e0226a88e9e96e2f" translate="yes" xml:space="preserve">
          <source>Share</source>
          <target state="translated">Share</target>
        </trans-unit>
        <trans-unit id="96d808ed7c8f95b54ce048ea28e5b0f8a9f2b5e2" translate="yes" xml:space="preserve">
          <source>Share.dismissedAction()</source>
          <target state="translated">Share.dismissedAction()</target>
        </trans-unit>
        <trans-unit id="9840fdaf34a2b01b1215883944511876db74df18" translate="yes" xml:space="preserve">
          <source>Share.share()</source>
          <target state="translated">Share.share()</target>
        </trans-unit>
        <trans-unit id="e6b8d8ceb87cd7b8e1a3fe1ab3c02787180a2b07" translate="yes" xml:space="preserve">
          <source>Share.sharedAction()</source>
          <target state="translated">Share.sharedAction()</target>
        </trans-unit>
        <trans-unit id="07778c8db6d3cda83dd750f4ad7fb483328592e4" translate="yes" xml:space="preserve">
          <source>Shell Command Unresponsive Exception</source>
          <target state="translated">シェルコマンドが応答しない例外</target>
        </trans-unit>
        <trans-unit id="67153da050c03b6efabb8a5189fe4ea8c01762ce" translate="yes" xml:space="preserve">
          <source>Show or hide the status bar</source>
          <target state="translated">ステータスバーの表示/非表示</target>
        </trans-unit>
        <trans-unit id="1075057ff0100516e3c4aa8f51f52a1a95d8ed04" translate="yes" xml:space="preserve">
          <source>Show the indicator.</source>
          <target state="translated">インジケータを表示します。</target>
        </trans-unit>
        <trans-unit id="d993fbafe18223732be15fd565e7e5b74a3a7755" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;viewAreaPercentThreshold&lt;/code&gt;, but considers the percent of the item that is visible, rather than the fraction of the viewable area it covers.</source>
          <target state="translated">&lt;code&gt;viewAreaPercentThreshold&lt;/code&gt; と似ていますが、表示される領域の割合ではなく、表示されているアイテムの割合を考慮します。</target>
        </trans-unit>
        <trans-unit id="0258e46ad994fb3800faae223f283914319ce3b4" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;source&lt;/code&gt;, this property represents the resource used to render the loading indicator for the image, displayed until image is ready to be displayed, typically after when it got downloaded from network.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; と同様に、このプロパティは、画像の読み込みインジケーターをレンダリングするために使用されるリソースを表します。通常、画像がネットワークからダウンロードされた後、画像が表示される準備ができるまで表示されます。</target>
        </trans-unit>
        <trans-unit id="817386305f38eb47e659c60313e3edae5043dc49" translate="yes" xml:space="preserve">
          <source>Similarly, if an operation may take a long time to complete, the native module should not block and can specify it's own queue to run operations on. For example, the &lt;code&gt;RCTAsyncLocalStorage&lt;/code&gt; module creates its own queue so the React queue isn't blocked waiting on potentially slow disk access:</source>
          <target state="translated">同様に、操作の完了に時間がかかる場合、ネイティブモジュールはブロックしてはならず、操作を実行する独自のキューを指定できます。たとえば、 &lt;code&gt;RCTAsyncLocalStorage&lt;/code&gt; モジュールは独自のキューを作成するため、潜在的に遅いディスクアクセスを待機してReactキューがブロックされません。</target>
        </trans-unit>
        <trans-unit id="e251571f86f7d8f659f99f68d14d516681105af9" translate="yes" xml:space="preserve">
          <source>Similarly, you can happily scroll up and down through a &lt;code&gt;ScrollView&lt;/code&gt; when the JavaScript thread is locked up because the &lt;code&gt;ScrollView&lt;/code&gt; lives on the main thread. The scroll events are dispatched to the JS thread, but their receipt is not necessary for the scroll to occur.</source>
          <target state="translated">同様に、 &lt;code&gt;ScrollView&lt;/code&gt; はメインスレッド上にあるため、JavaScriptスレッドがロックされている場合でも、 &lt;code&gt;ScrollView&lt;/code&gt; を上下に楽しくスクロールできます。スクロールイベントはJSスレッドにディスパッチされますが、スクロールを発生させるためにイベントを受信する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b12147170a3013816226454438a9889640966213" translate="yes" xml:space="preserve">
          <source>Similarly, you can implement &lt;code&gt;shouldComponentUpdate&lt;/code&gt; and indicate the exact conditions under which you would like the component to re-render. If you write pure components (where the return value of the render function is entirely dependent on props and state), you can leverage PureComponent to do this for you. Once again, immutable data structures are useful to keep this fast -- if you have to do a deep comparison of a large list of objects, it may be that re-rendering your entire component would be quicker, and it would certainly require less code.</source>
          <target state="translated">同様に、 &lt;code&gt;shouldComponentUpdate&lt;/code&gt; を実装して、コンポーネントを再レンダリングする正確な条件を示すことができます。純粋なコンポーネントを作成する場合（render関数の戻り値は完全にpropsとstateに依存します）、PureComponentを利用してこれを行うことができます。繰り返しますが、不変のデータ構造はこれを高速に維持するのに役立ちます。オブジェクトの大きなリストを詳細に比較する必要がある場合、コンポーネント全体の再レンダリングがより速くなり、必要なコードが少なくなる可能性があります。 。</target>
        </trans-unit>
        <trans-unit id="b0ec13a382c7ff03b6c12e7dc8cf2865adb3b4b1" translate="yes" xml:space="preserve">
          <source>Simple Examples:</source>
          <target state="translated">シンプルな例。</target>
        </trans-unit>
        <trans-unit id="8c37359a3663e0cdf12183043049304a94b3c3b2" translate="yes" xml:space="preserve">
          <source>Simply commenting that the issue still exists is not very compelling (it's rare for critical, release blocking issues to have no activity for two months!). In order to make a good case for reopening the issue, you may need to do a bit of work:</source>
          <target state="translated">その問題がまだ存在しているとコメントしただけでは、あまり説得力がありません (重要なリリースブロッキングの問題で、2か月間活動がないというのは珍しいことです!)この問題を再開するためには、ちょっとした作業が必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="32cf148f656cb7661621abbedc2f36a32dc1d1c8" translate="yes" xml:space="preserve">
          <source>Simply run the following in a terminal:</source>
          <target state="translated">ターミナルで以下を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="59d72f3985f6891a7ae1709b4162c8711f700250" translate="yes" xml:space="preserve">
          <source>Simply start using React Native. Go through the &lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; guide. Does everything work as expected? If not, we're always looking for improvements. Let us know by &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#reporting-new-issues&quot;&gt;opening an issue&lt;/a&gt;.</source>
          <target state="translated">React Nativeを使い始めるだけです。通過&lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;入門&lt;/a&gt;ガイド。すべてが期待どおりに機能しますか？そうでない場合は、常に改善点を探しています。&lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#reporting-new-issues&quot;&gt;問題を開い&lt;/a&gt;てお知らせください。</target>
        </trans-unit>
        <trans-unit id="7357966bc6d557009edd5454aa4c04f3134562fe" translate="yes" xml:space="preserve">
          <source>Simply wrap your top level view with a &lt;code&gt;SafeAreaView&lt;/code&gt; with a &lt;code&gt;flex: 1&lt;/code&gt; style applied to it. You may also want to use a background color that matches your application's design.</source>
          <target state="translated">最上位のビューを &lt;code&gt;flex: 1&lt;/code&gt; スタイルが適用された &lt;code&gt;SafeAreaView&lt;/code&gt; でラップするだけです。また、アプリケーションのデザインに一致する背景色を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="0fdaebb56ae674fc7bd439ed65ef80413580f78c" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Object.observe&lt;/code&gt; was deprecated in recent browsers, you may have to open the file from the Google Chrome Tracing tool. You can do so by:</source>
          <target state="translated">以来 &lt;code&gt;Object.observe&lt;/code&gt; は、最近のブラウザで廃止されました、あなたは、Google Chromeのトレースツールからファイルを開く必要があります。あなたはそれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="bfbc306e997a250786539c4b9ac3a624fdc9fef2" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;pointerEvents&lt;/code&gt; does not affect layout/appearance, and we are already deviating from the spec by adding additional modes, we opt to not include &lt;code&gt;pointerEvents&lt;/code&gt; on &lt;code&gt;style&lt;/code&gt;. On some platforms, we would need to implement it as a &lt;code&gt;className&lt;/code&gt; anyways. Using &lt;code&gt;style&lt;/code&gt; or not is an implementation detail of the platform.</source>
          <target state="translated">以来 &lt;code&gt;pointerEvents&lt;/code&gt; は、レイアウト/外観に影響しない、と私たちはすでに、追加のモードを追加することにより、仕様から逸脱している、我々は含まれていないことを選ぶ &lt;code&gt;pointerEvents&lt;/code&gt; 上の &lt;code&gt;style&lt;/code&gt; 。一部のプラットフォームでは、とにかくそれを &lt;code&gt;className&lt;/code&gt; として実装する必要があります。 &lt;code&gt;style&lt;/code&gt; を使用するかどうかは、プラットフォームの実装の詳細です。</target>
        </trans-unit>
        <trans-unit id="e913f4671cbcaaa450c5621688fc3bf60462e195" translate="yes" xml:space="preserve">
          <source>Since all our native react views are subclasses of &lt;code&gt;UIView&lt;/code&gt;, most style attributes will work like you would expect out of the box. Some components will want a default style, however, for example &lt;code&gt;UIDatePicker&lt;/code&gt; which is a fixed size. This default style is important for the layout algorithm to work as expected, but we also want to be able to override the default style when using the component. &lt;code&gt;DatePickerIOS&lt;/code&gt; does this by wrapping the native component in an extra view, which has flexible styling, and using a fixed style (which is generated with constants passed in from native) on the inner native component:</source>
          <target state="translated">すべてのネイティブリアクションビューは &lt;code&gt;UIView&lt;/code&gt; のサブクラスであるため、ほとんどのスタイル属性はそのままの状態で期待どおりに機能します。ただし、一部のコンポーネントではデフォルトのスタイルが必要になります。たとえば、固定サイズの &lt;code&gt;UIDatePicker&lt;/code&gt; などです。このデフォルトスタイルは、レイアウトアルゴリズムが期待どおりに機能するために重要ですが、コンポーネントを使用するときにデフォルトスタイルをオーバーライドできるようにしたいと考えています。 &lt;code&gt;DatePickerIOS&lt;/code&gt; はこれを実現するために、柔軟なスタイルを持つ追加のビューでネイティブコンポーネントをラップし、内部ネイティブコンポーネントで固定スタイル（ネイティブから渡される定数で生成される）を使用します。</target>
        </trans-unit>
        <trans-unit id="939e35656b99aa4ec4e1b6286c760ba8d738c06b" translate="yes" xml:space="preserve">
          <source>Since it accepts &lt;code&gt;any&lt;/code&gt; value, you can also use it to return platform specific component, like below:</source>
          <target state="translated">&lt;code&gt;any&lt;/code&gt; 値を受け入れるため、以下のように、プラットフォーム固有のコンポーネントを返すために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9b3af3d816cb0bcca184faf0dc2b97b26bff7e46" translate="yes" xml:space="preserve">
          <source>Size of the indicator (default is 'small'). Passing a number to the size prop is only supported on Android.</source>
          <target state="translated">インジケータのサイズ(デフォルトは'small')。サイズプロップに数値を渡すことは、Androidでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="67440a7d94f5e86b733538c80f15f8cc2b9f1389" translate="yes" xml:space="preserve">
          <source>Size of the refresh indicator, see RefreshControl.SIZE.</source>
          <target state="translated">リフレッシュインジケータのサイズは、RefreshControl.SIZEを参照してください。</target>
        </trans-unit>
        <trans-unit id="6569241afc63ce63f410215eb457980569c6fdfc" translate="yes" xml:space="preserve">
          <source>Slide animation</source>
          <target state="translated">スライドアニメーション</target>
        </trans-unit>
        <trans-unit id="aa5db7d82232ee34651eb5adea59b01c839eb843" translate="yes" xml:space="preserve">
          <source>Slider</source>
          <target state="translated">Slider</target>
        </trans-unit>
        <trans-unit id="3293eb10be7f20734dc4056c7a723502bab888f8" translate="yes" xml:space="preserve">
          <source>Slider#disabled</source>
          <target state="translated">Slider#disabled</target>
        </trans-unit>
        <trans-unit id="dbd2466ece0e781b4ad4dc51cc581e4f57a7054d" translate="yes" xml:space="preserve">
          <source>Slider#maximumTrackImage</source>
          <target state="translated">Slider#maximumTrackImage</target>
        </trans-unit>
        <trans-unit id="b49b1fecbce33a5c851a9fd2b7f2098c539d39f0" translate="yes" xml:space="preserve">
          <source>Slider#maximumTrackTintColor</source>
          <target state="translated">Slider#maximumTrackTintColor</target>
        </trans-unit>
        <trans-unit id="b9529aa7ce34023e83cad98d57ec8274ea4fe790" translate="yes" xml:space="preserve">
          <source>Slider#maximumValue</source>
          <target state="translated">Slider#maximumValue</target>
        </trans-unit>
        <trans-unit id="918ee827b4bf5123ea7efd455ab4ba6dfd6979f9" translate="yes" xml:space="preserve">
          <source>Slider#minimumTrackImage</source>
          <target state="translated">Slider#minimumTrackImage</target>
        </trans-unit>
        <trans-unit id="86437a628cbe864a0f5bcec6e98808b9d009c195" translate="yes" xml:space="preserve">
          <source>Slider#minimumTrackTintColor</source>
          <target state="translated">Slider#minimumTrackTintColor</target>
        </trans-unit>
        <trans-unit id="cd7149df36b37c94a64ebdf99bddb2ec75838bf9" translate="yes" xml:space="preserve">
          <source>Slider#minimumValue</source>
          <target state="translated">Slider#minimumValue</target>
        </trans-unit>
        <trans-unit id="a970b1ea206ae3630a7b47f0d602c4e67e54ec29" translate="yes" xml:space="preserve">
          <source>Slider#onSlidingComplete</source>
          <target state="translated">Slider#onSlidingComplete</target>
        </trans-unit>
        <trans-unit id="9b5dcb06f79a8f3bb95152ca9b64c0f68de2161c" translate="yes" xml:space="preserve">
          <source>Slider#onValueChange</source>
          <target state="translated">Slider#onValueChange</target>
        </trans-unit>
        <trans-unit id="4c939df923908c4e4259c6098b60915c3b5aa224" translate="yes" xml:space="preserve">
          <source>Slider#step</source>
          <target state="translated">Slider#step</target>
        </trans-unit>
        <trans-unit id="e896462b29b86005346d8da73d0a43549a7a5da7" translate="yes" xml:space="preserve">
          <source>Slider#style</source>
          <target state="translated">Slider#style</target>
        </trans-unit>
        <trans-unit id="c1b4b2374ecadf43046d8ced513af39fbf83c200" translate="yes" xml:space="preserve">
          <source>Slider#testID</source>
          <target state="translated">Slider#testID</target>
        </trans-unit>
        <trans-unit id="d04779845cd4bad76768fa1b37b622d38674c7f6" translate="yes" xml:space="preserve">
          <source>Slider#thumbImage</source>
          <target state="translated">Slider#thumbImage</target>
        </trans-unit>
        <trans-unit id="a0af9fcd3c0d5f3a4a64a9e195229d2265c79045" translate="yes" xml:space="preserve">
          <source>Slider#thumbTintColor</source>
          <target state="translated">Slider#thumbTintColor</target>
        </trans-unit>
        <trans-unit id="bb9013c0ee09a6688eb42cf27e066094bd28b5f1" translate="yes" xml:space="preserve">
          <source>Slider#trackImage</source>
          <target state="translated">Slider#trackImage</target>
        </trans-unit>
        <trans-unit id="1be3a59747be6cd5f72988402d0aeb7b205d295e" translate="yes" xml:space="preserve">
          <source>Slider#value</source>
          <target state="translated">Slider#value</target>
        </trans-unit>
        <trans-unit id="8532ea10a43677461eced933347956970e112bbf" translate="yes" xml:space="preserve">
          <source>Slow navigator transitions</source>
          <target state="translated">遅いナビゲーターのトランジション</target>
        </trans-unit>
        <trans-unit id="c74fd9714e38b26dbf7f58d75f93cfc977a05ba6" translate="yes" xml:space="preserve">
          <source>Small</source>
          <target state="translated">Small</target>
        </trans-unit>
        <trans-unit id="9032b2d0648f2bcdcc8ac868909e70ceeae0dfc7" translate="yes" xml:space="preserve">
          <source>Small pull requests are much easier to review and more likely to get merged. Make sure the PR does only one thing, otherwise please split it.</source>
          <target state="translated">小さなプルリクエストの方がレビューがしやすく、マージされる可能性が高くなります。PRは1つのことしかしないようにしてください、そうでなければ分割してください。</target>
        </trans-unit>
        <trans-unit id="cf40e735c580da582b6c52ac4337290613067ebe" translate="yes" xml:space="preserve">
          <source>SmallInverse</source>
          <target state="translated">SmallInverse</target>
        </trans-unit>
        <trans-unit id="784f9f592ec2f155083449344dda0b4379d2b0bb" translate="yes" xml:space="preserve">
          <source>SnapshotViewIOS</source>
          <target state="translated">SnapshotViewIOS</target>
        </trans-unit>
        <trans-unit id="75b8c26caf4fa5c405d4034dccd4c652a38265ae" translate="yes" xml:space="preserve">
          <source>SnapshotViewIOS#onSnapshotReady</source>
          <target state="translated">SnapshotViewIOS#onSnapshotReady</target>
        </trans-unit>
        <trans-unit id="0d4d911cc9172c0be4a44af2c78f71f5f156fd90" translate="yes" xml:space="preserve">
          <source>SnapshotViewIOS#testIdentifier</source>
          <target state="translated">SnapshotViewIOS#testIdentifier</target>
        </trans-unit>
        <trans-unit id="11d58c978549bdf36cbc8bf786f2a687dd509bb4" translate="yes" xml:space="preserve">
          <source>So now we have a native map component that we can control easily from JS, but how do we deal with events from the user, like pinch-zooms or panning to change the visible region?</source>
          <target state="translated">これで、JS から簡単に制御できるネイティブ マップ コンポーネントができましたが、ピンチズームやパンして表示領域を変更するなど、ユーザーからのイベントにはどのように対処するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="01d3103f8aee677b523f973184f03507f63bcdda" translate="yes" xml:space="preserve">
          <source>So now we know how to expose native view components that we can control easily from JS, but how do we deal with events from the user, like pinch-zooms or panning? When a native event occurs the native code should issue an event to the JavaScript representation of the View, and the two views are linked with the value returned from the &lt;code&gt;getId()&lt;/code&gt; method.</source>
          <target state="translated">これで、JSから簡単に制御できるネイティブビューコンポーネントを公開する方法がわかりましたが、ピンチズームやパンなどのユーザーからのイベントをどのように処理するのでしょうか。ネイティブイベントが発生すると、ネイティブコードはビューのJavaScript表現にイベントを発行し、2つのビューは &lt;code&gt;getId()&lt;/code&gt; メソッドから返された値にリンクされます。</target>
        </trans-unit>
        <trans-unit id="2827fce32a206ffd39f51b6162ceb3859b3f2269" translate="yes" xml:space="preserve">
          <source>So this code is defining &lt;code&gt;HelloWorldApp&lt;/code&gt;, a new &lt;code&gt;Component&lt;/code&gt;. When you're building a React Native app, you'll be making new components a lot. Anything you see on the screen is some sort of component. A component can be pretty simple - the only thing that's required is a &lt;code&gt;render&lt;/code&gt; function which returns some JSX to render.</source>
          <target state="translated">したがって、このコードは新しい &lt;code&gt;Component&lt;/code&gt; である &lt;code&gt;HelloWorldApp&lt;/code&gt; を定義しています。React Nativeアプリを作成するときは、新しいコンポーネントをたくさん作成します。画面に表示されるものは、なんらかのコンポーネントです。コンポーネントはかなりシンプルにすることができます-必要なのは、 &lt;code&gt;render&lt;/code&gt; JSXを返すレンダリング関数だけです。</target>
        </trans-unit>
        <trans-unit id="824c1517ba318dee8eac21987c8bc695a68d062c" translate="yes" xml:space="preserve">
          <source>So you have decided to contribute code back to upstream by opening a pull request. You've invested a good chunk of time, and we appreciate it. We will do our best to work with you and get the PR looked at.</source>
          <target state="translated">ということで、プルリクエストを開くことでコードをアップストリームに戻すことにしました。あなたが時間を投資してくれたことに感謝します。私たちはあなたと協力して、PRを見てもらえるように最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="f0f5595bfe088f1b5651ed389c5e0974e1f302c2" translate="yes" xml:space="preserve">
          <source>So you have read through the &lt;a href=&quot;contributing&quot;&gt;contributor's guide&lt;/a&gt; and you're getting ready to send your first pull request. Perhaps you've found an issue in React Native and want to work with the maintainers to land a fix. Here's what you can expect to happen when you open an issue or send a pull request.</source>
          <target state="translated">これで、&lt;a href=&quot;contributing&quot;&gt;コントリビューターのガイド&lt;/a&gt;を読み、最初のプルリクエストを送信する準備が整いました。おそらく、React Nativeで問題を発見し、メンテナと協力して修正を加えたいと考えています。課題を開いたりプルリクエストを送信したりすると、次のことが起こります。</target>
        </trans-unit>
        <trans-unit id="4fe7e4c7de6ce13ba9cc5dd5220e5d5441de849f" translate="yes" xml:space="preserve">
          <source>Software keyboard takes almost half of the screen. If you have interactive elements that can get covered by the keyboard, make sure they are still accessible by using the &lt;a href=&quot;keyboardavoidingview&quot;&gt;&lt;code&gt;KeyboardAvoidingView&lt;/code&gt; component&lt;/a&gt;.</source>
          <target state="translated">ソフトウェアキーボードは画面のほぼ半分を占めます。キーボードでカバーできるインタラクティブな要素がある場合は、&lt;a href=&quot;keyboardavoidingview&quot;&gt; &lt;code&gt;KeyboardAvoidingView&lt;/code&gt; コンポーネント&lt;/a&gt;を使用して、それらの要素に引き続きアクセスできることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4cd3dd14c8723b7b004f09e91fcb22fc58a54ae5" translate="yes" xml:space="preserve">
          <source>Solving this is one of the main goals behind the new &lt;a href=&quot;navigation&quot;&gt;React Navigation&lt;/a&gt; library. The views in React Navigation use native components and the &lt;a href=&quot;animated&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; library to deliver 60 FPS animations that are run on the native thread.</source>
          <target state="translated">これを解決することは、新しい&lt;a href=&quot;navigation&quot;&gt;React Navigation&lt;/a&gt;ライブラリーの背後にある主要な目標の1つです。React Navigationのビューは、ネイティブコンポーネントと&lt;a href=&quot;animated&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt;ライブラリを使用して、ネイティブスレッドで実行される60 FPSアニメーションを配信します。</target>
        </trans-unit>
        <trans-unit id="581d00aebe1d33523f4c674e9bb77378752aea1c" translate="yes" xml:space="preserve">
          <source>Some caveats:</source>
          <target state="translated">いくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="cf1ead0ff4f080596646d13e7bd5b362e2659c63" translate="yes" xml:space="preserve">
          <source>Some devices and some emulator configurations may not work with the tests. We do maintain an emulator configuration that works, as the standard for testing. To run this emulator config:</source>
          <target state="translated">一部のデバイスやエミュレータの構成によっては、テストで動作しない場合があります。テストの基準として、動作するエミュレータの設定を維持しています。このエミュレータの設定を実行するには</target>
        </trans-unit>
        <trans-unit id="db20bf8c13e015ab68d8192cdf64c8bc94e6712b" translate="yes" xml:space="preserve">
          <source>Some features may not be a good fit for the core React Native library. This is usually the case for *&lt;em&gt;new modules&lt;/em&gt; that Facebook does not use in production. In this case, a maintainer will explain that this should be released to npm as a separate module, allowing users to easily pull in the module in their projects.</source>
          <target state="translated">一部の機能は、コアReact Nativeライブラリーに適していない場合があります。これは通常、Facebookが本番環境で使用しない* &lt;em&gt;新しいモジュールの&lt;/em&gt;場合です。この場合、メンテナーは、これを別個のモジュールとしてnpmにリリースする必要があることを説明し、ユーザーがプロジェクトでモジュールを簡単にプルできるようにします。</target>
        </trans-unit>
        <trans-unit id="c4c8265b70880d8cf3fc47f6b5c6443721f3050e" translate="yes" xml:space="preserve">
          <source>Some functionality that can be performed with this instance is:</source>
          <target state="translated">このインスタンスで実行できる機能はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="dfc1fa7b37d49ae10b93a2d78ad3b2e21a072822" translate="yes" xml:space="preserve">
          <source>Some issues need additional information in order to reproduce them. Maintainers should explain what additional information is needed, after adding the 'Needs more information' label.</source>
          <target state="translated">問題の中には、再現するために追加情報が必要なものがあります。メンテナは、'Needs more information'ラベルを追加した後、どのような追加情報が必要なのかを説明しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c66d9ee313c34a46d002612bae13058345adccb1" translate="yes" xml:space="preserve">
          <source>Some of the things in here might not look like JavaScript to you. Don't panic. &lt;em&gt;This is the future&lt;/em&gt;.</source>
          <target state="translated">ここでは、JavaScriptのように見えないものがあります。慌てる必要はありません。&lt;em&gt;これが未来&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="a5426a06bab601ebc51e5d388f524ee1f0ed9a38" translate="yes" xml:space="preserve">
          <source>Some other &lt;code&gt;View&lt;/code&gt; wants to become responder and is asking this &lt;code&gt;View&lt;/code&gt; to release its responder. Returning &lt;code&gt;true&lt;/code&gt; allows its release.</source>
          <target state="translated">他のいくつかの &lt;code&gt;View&lt;/code&gt; はレスポンダーになりたがっており、この &lt;code&gt;View&lt;/code&gt; にレスポンダーを解放するように求めています。 &lt;code&gt;true&lt;/code&gt; を返すと、そのリリースが許可されます。</target>
        </trans-unit>
        <trans-unit id="838080e38f40bb620774df4c4d7f6b0ce4240a47" translate="yes" xml:space="preserve">
          <source>Some upgrades require manual steps, e.g. 0.13 to 0.14, or 0.28 to 0.29. Be sure to check the &lt;a href=&quot;https://github.com/facebook/react-native/releases&quot;&gt;release notes&lt;/a&gt; when upgrading so that you can identify any manual changes your particular project may require.</source>
          <target state="translated">アップグレードによっては、0.13から0.14、0.28から0.29など、手動の手順が必要です。特定のプロジェクトで必要となる可能性のある手動の変更を特定できるように、アップグレード時には必ず&lt;a href=&quot;https://github.com/facebook/react-native/releases&quot;&gt;リリースノート&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="92a0a2a0da3e3cecf5656ca5fe9b6426910a0f00" translate="yes" xml:space="preserve">
          <source>Sometimes a maintainer may decide that a pull request will not be accepted. Maybe the pull request is out of scope for the project, or the idea is good but the implementation is poor. Whatever the reason, when closing a pull request maintainers should keep the conversation friendly:</source>
          <target state="translated">メンテナがプルリクエストを受け入れないと判断することがあります。プルリクエストがプロジェクトのスコープから外れているのかもしれませんし、アイデアは良いが実装が不十分なのかもしれません。理由が何であれ、プルリクエストを終了させるときには、メンテナは友好的な会話を心がけましょう。</target>
        </trans-unit>
        <trans-unit id="e0df73ac42819a4280a1d070d6398770a96fdb98" translate="yes" xml:space="preserve">
          <source>Sometimes a scrollview takes up more space than its content fills. When this is the case, this prop will fill the rest of the scrollview with a color to avoid setting a background and creating unnecessary overdraw. This is an advanced optimization that is not needed in the general case.</source>
          <target state="translated">時には、スクロールビューがそのコンテンツを埋めるよりも多くのスペースを取ることがあります。このような場合、このプロップはスクロールビューの残りの部分を色で塗りつぶすことで、背景を設定して不必要なオーバードローを発生させないようにします。これは、一般的な場合には必要のない高度な最適化です。</target>
        </trans-unit>
        <trans-unit id="0317a64d573f2f33178bf39c2ad6af9d8651924f" translate="yes" xml:space="preserve">
          <source>Sometimes an app needs access to a platform API that React Native doesn't have a corresponding module for yet. Maybe you want to reuse some existing Java code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.</source>
          <target state="translated">アプリがReact Nativeに対応するモジュールがないプラットフォームAPIにアクセスする必要がある場合があります。JavaScript で再実装することなく既存の Java コードを再利用したい場合や、画像処理やデータベース、高度な拡張機能のような高性能でマルチスレッドなコードを書きたい場合もあるでしょう。</target>
        </trans-unit>
        <trans-unit id="93d6c8fb0b1a9fc513bd98f9e96bde2923ca3469" translate="yes" xml:space="preserve">
          <source>Sometimes an app needs access to platform API, and React Native doesn't have a corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift or C++ code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.</source>
          <target state="translated">アプリがプラットフォームAPIにアクセスする必要があり、React Nativeには対応するモジュールがまだないことがあります。JavaScriptで再実装することなく、既存のObjective-C、Swift、C++コードを再利用したい場合や、画像処理、データベース、高度な拡張機能など、高性能でマルチスレッドなコードを書きたい場合もあるでしょう。</target>
        </trans-unit>
        <trans-unit id="a357beec463889b7dd9fd26a8498c639fb277dfb" translate="yes" xml:space="preserve">
          <source>Sometimes another contributor has already provided a solution in the comments. Maintainers may close the issue in this case.</source>
          <target state="translated">別の投稿者がコメントですでに解決策を提供していることがあります。この場合、メンテナはその問題をクローズすることがあります。</target>
        </trans-unit>
        <trans-unit id="08ab22a138481dd3053b7ae9439527c859fa184f" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to trigger an accessibility event on a UI component (i.e. when a custom view appears on a screen or a custom radio button has been selected). Native UIManager module exposes a method &amp;lsquo;sendAccessibilityEvent&amp;rsquo; for this purpose. It takes two arguments: view tag and a type of an event.</source>
          <target state="translated">UIコンポーネントでアクセシビリティイベントをトリガーすると便利な場合があります（画面にカスタムビューが表示されたとき、またはカスタムラジオボタンが選択されたとき）。ネイティブUIManagerモジュールは、この目的のためにメソッド「sendAccessibilityEvent」を公開しています。これは2つの引数を取ります。ビュータグとイベントのタイプです。</target>
        </trans-unit>
        <trans-unit id="f83daa8a7ece5a02eb43dcb0937a968a00ce3959" translate="yes" xml:space="preserve">
          <source>Sometimes it's useful to know whether or not the device has a screen reader that is currently active. The &lt;code&gt;AccessibilityInfo&lt;/code&gt; API is designed for this purpose. You can use it to query the current state of the screen reader as well as to register to be notified when the state of the screen reader changes.</source>
          <target state="translated">デバイスが現在アクティブなスクリーンリーダーを備えているかどうかを確認すると役立つ場合があります。 &lt;code&gt;AccessibilityInfo&lt;/code&gt; の APIは、この目的のために設計されています。これを使用して、スクリーンリーダーの現在の状態を照会したり、スクリーンリーダーの状態が変化したときに通知を受けるように登録したりできます。</target>
        </trans-unit>
        <trans-unit id="f626c97e1b154a12aba5765be1239ad60bcac2dc" translate="yes" xml:space="preserve">
          <source>Sometimes we have React conferences. We posted the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&quot;&gt;videos from React.js Conf 2017&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS0M8Q95RIc2lOM6nc77q1IY&quot;&gt;React.js Conf 2016&lt;/a&gt;, and &lt;a href=&quot;https://www.youtube.com/watch?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr&amp;amp;v=KVZ-P-ZI6W4&quot;&gt;React.js Conf 2015&lt;/a&gt;. We'll probably have more conferences in the future, too. Stay tuned. You can also find a list of dedicated React Native conferences &lt;a href=&quot;http://www.awesome-react-native.com/#conferences&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">時々私たちはReactカンファレンスを持っています。&lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&quot;&gt;React.js Conf 2017&lt;/a&gt;、&lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS0M8Q95RIc2lOM6nc77q1IY&quot;&gt;React.js Conf 2016&lt;/a&gt;、&lt;a href=&quot;https://www.youtube.com/watch?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr&amp;amp;v=KVZ-P-ZI6W4&quot;&gt;React.js Conf 2015&lt;/a&gt;のビデオを投稿しました。将来的には、もっと多くのカンファレンスも開催されるでしょう。乞うご期待。専用のReact Nativeカンファレンスのリストも&lt;a href=&quot;http://www.awesome-react-native.com/#conferences&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="60c75e815b6f3b219f53b541720581bef02e1735" translate="yes" xml:space="preserve">
          <source>Sometimes when a maintainer says no to a pull request or close an issue, a contributor may get upset and criticize your decision. Maintainers will take steps to defuse the situation.</source>
          <target state="translated">メンテナがプルリクエストを断ったり、問題をクローズしたりすると、投稿者が動揺してあなたの決定を批判することがあります。メンテナはそのような状況を打開するための措置をとります。</target>
        </trans-unit>
        <trans-unit id="79b74bd12550c57569caa25620f8aa12b7631caa" translate="yes" xml:space="preserve">
          <source>Sometimes you may want absoluteFill but with a couple tweaks - absoluteFillObject can be used to create a customized entry in a StyleSheet, e.g.:</source>
          <target state="translated">absoluteFillObject を使用して、スタイルシート内にカスタマイズされたエントリを作成することができます。</target>
        </trans-unit>
        <trans-unit id="8d04d053b0262ae56debd702fb822156fb3f8dfe" translate="yes" xml:space="preserve">
          <source>Sometimes your native component will have some special properties that you don't want to be part of the API for the associated React component. For example, &lt;code&gt;Switch&lt;/code&gt; has a custom &lt;code&gt;onChange&lt;/code&gt; handler for the raw native event, and exposes an &lt;code&gt;onValueChange&lt;/code&gt; handler property that is invoked with just the boolean value rather than the raw event. Since you don't want these native only properties to be part of the API, you don't want to put them in &lt;code&gt;propTypes&lt;/code&gt;, but if you don't you'll get an error. The solution is simply to add them to the &lt;code&gt;nativeOnly&lt;/code&gt; option, e.g.</source>
          <target state="translated">ネイティブコンポーネントには、関連するReactコンポーネントのAPIの一部にしたくない特別なプロパティが含まれている場合があります。たとえば、 &lt;code&gt;Switch&lt;/code&gt; には未加工のネイティブイベント用のカスタム &lt;code&gt;onChange&lt;/code&gt; ハンドラーがあり、未加工のイベントではなくブール値だけで呼び出される &lt;code&gt;onValueChange&lt;/code&gt; ハンドラープロパティを公開します。これらのネイティブのみのプロパティをAPIの一部にしたくないので、プロパティを &lt;code&gt;propTypes&lt;/code&gt; に含めたくありませんが、そうしないとエラーが発生します。ソリューションは単にそれらを &lt;code&gt;nativeOnly&lt;/code&gt; オプションに追加することです、例えば</target>
        </trans-unit>
        <trans-unit id="1f4b060fd57af658051291d4d852619c87aeb748" translate="yes" xml:space="preserve">
          <source>Sometimes, if we do an action in the same frame that we are adjusting the opacity or highlight of a component that is responding to a touch, we won't see that effect until after the &lt;code&gt;onPress&lt;/code&gt; function has returned. If &lt;code&gt;onPress&lt;/code&gt; does a &lt;code&gt;setState&lt;/code&gt; that results in a lot of work and a few frames dropped, this may occur. A solution to this is to wrap any action inside of your &lt;code&gt;onPress&lt;/code&gt; handler in &lt;code&gt;requestAnimationFrame&lt;/code&gt;:</source>
          <target state="translated">場合によっては、タッチに反応しているコンポーネントの不透明度またはハイライトを調整しているのと同じフレームでアクションを実行すると、 &lt;code&gt;onPress&lt;/code&gt; 関数が返されるまでその効果が表示されません。場合 &lt;code&gt;onPress&lt;/code&gt; ない &lt;code&gt;setState&lt;/code&gt; 多くの作業をもたらし、数フレームがドロップしたが、これが発生することがあります。これに対する解決策は、 &lt;code&gt;onPress&lt;/code&gt; ハンドラー内のアクションを &lt;code&gt;requestAnimationFrame&lt;/code&gt; でラップすることです：</target>
        </trans-unit>
        <trans-unit id="806dcf104ee0a116832b3c097889fd42ae786694" translate="yes" xml:space="preserve">
          <source>Sometimes, you might be getting encoded image data from a REST API call. You can use the &lt;code&gt;'data:'&lt;/code&gt; uri scheme to use these images. Same as for network resources, &lt;em&gt;you will need to manually specify the dimensions of your image&lt;/em&gt;.</source>
          <target state="translated">REST API呼び出しからエンコードされた画像データを取得する場合があります。あなたは使用することができます &lt;code&gt;'data:'&lt;/code&gt; URIスキームを、これらの画像を使用します。ネットワークリソースの&lt;em&gt;場合と&lt;/em&gt;同じよう&lt;em&gt;に、画像のサイズを手動で指定する必要があります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="fb5e14a435fb6c916f9b37f52d602793142989aa" translate="yes" xml:space="preserve">
          <source>Source as an object</source>
          <target state="translated">オブジェクトとしてのソース</target>
        </trans-unit>
        <trans-unit id="9e4cc67c47a57a6771e6c1978a1315802da5fa0b" translate="yes" xml:space="preserve">
          <source>Space after &lt;code&gt;@property&lt;/code&gt; declarations</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; 宣言の後のスペース</target>
        </trans-unit>
        <trans-unit id="bb57ed3b903d5ac2cdd49868fc64f77b4ea3ef1c" translate="yes" xml:space="preserve">
          <source>Specific</source>
          <target state="translated">Specific</target>
        </trans-unit>
        <trans-unit id="a88abffb690bd69f661604e7ee904359982043fb" translate="yes" xml:space="preserve">
          <source>Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the closest one is chosen.</source>
          <target state="translated">フォントの太さを指定します。値 「normal」 ・ 「bold」 はほとんどのフォントで対応しています。すべてのフ ォ ン ト が各数値のバ リ ア ン ト を持っ てい る わけではないので、 その場合は最も近いものが選ばれます。</target>
        </trans-unit>
        <trans-unit id="762ce84248da077c1f5bdf4f4f6dadae23c7d3d5" translate="yes" xml:space="preserve">
          <source>Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).</source>
          <target state="translated">adjustsFontSizeToFit を有効にしたときにフォントが到達できる最小の縮尺を指定します。(値 0.01-1.0)。</target>
        </trans-unit>
        <trans-unit id="68946261a5c42910006dcbfae9f13f08e40c1ff0" translate="yes" xml:space="preserve">
          <source>Specifies tab bar item positioning. Available values are:</source>
          <target state="translated">タブバーの項目の位置を指定します。使用可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="77026a1149a8a13fa85f92f78f74c813e8d5bec9" translate="yes" xml:space="preserve">
          <source>Specifies text alignment. The value 'justify' is only supported on iOS and fallbacks to &lt;code&gt;left&lt;/code&gt; on Android.</source>
          <target state="translated">テキストの配置を指定します。値 'justify'はiOSでのみサポートされており、Androidでの &lt;code&gt;left&lt;/code&gt; へのフォールバックです。</target>
        </trans-unit>
        <trans-unit id="d4c1196866944c1f9f14cf5b29c020fd74584dac" translate="yes" xml:space="preserve">
          <source>Specifies the background color of the drawer. The default value is white. If you want to set the opacity of the drawer, use rgba. Example:</source>
          <target state="translated">引き出しの背景色を指定します。デフォルトは白です。ドロワーの不透明度を設定したい場合は rgba を使用します。例)引き出しの背景色を指定します。</target>
        </trans-unit>
        <trans-unit id="dfcf1eda432b5151650fb087f2d773a45ddb567b" translate="yes" xml:space="preserve">
          <source>Specifies the disabled state of the text view for testing purposes</source>
          <target state="translated">テスト用にテキストビューの無効化状態を指定します。</target>
        </trans-unit>
        <trans-unit id="8d9437dc7f3f81cf9b0164706682070bbaaafed6" translate="yes" xml:space="preserve">
          <source>Specifies the lock mode of the drawer. The drawer can be locked in 3 states:</source>
          <target state="translated">ドロワーのロックモードを指定します。ドロワーは3つの状態でロックすることができます。</target>
        </trans-unit>
        <trans-unit id="6dc6ef439870031fa25d9e064ae6bfe59be22802" translate="yes" xml:space="preserve">
          <source>Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.</source>
          <target state="translated">混合コンテンツモードを指定します。</target>
        </trans-unit>
        <trans-unit id="61462e57c74c92bb5ca1f3cee227d8fd2f1eec46" translate="yes" xml:space="preserve">
          <source>Specifies the side of the screen from which the drawer will slide in.</source>
          <target state="translated">引き出しをスライドさせる側を指定します。</target>
        </trans-unit>
        <trans-unit id="bd10f6ce8bb335b611859e4c4a4bba649f0609cc" translate="yes" xml:space="preserve">
          <source>Specifies the width of the drawer, more precisely the width of the view that be pulled in from the edge of the window.</source>
          <target state="translated">引き出しの幅、より正確にはウィンドウの端から引き込まれるビューの幅を指定します。</target>
        </trans-unit>
        <trans-unit id="4e49b3aee60e3ab97d0b6c0e9b56fce42dbc21cd" translate="yes" xml:space="preserve">
          <source>Specifies whether font should be scaled down automatically to fit given style constraints.</source>
          <target state="translated">与えられたスタイル制約に合わせてフォントを自動的に縮小するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="174db4e477d6be0a3545972b6489f177d699fe28" translate="yes" xml:space="preserve">
          <source>Specifies whether fonts should scale to respect Text Size accessibility settings. The default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">フォントをテキストサイズのアクセシビリティ設定に合わせて拡大縮小するかどうかを指定します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ff622318301b79b419908b73cd3f64aab53d0fd4" translate="yes" xml:space="preserve">
          <source>Specifying a device</source>
          <target state="translated">デバイスの指定</target>
        </trans-unit>
        <trans-unit id="dcaf52160535c2f3c2cbed0026789ae60aac703b" translate="yes" xml:space="preserve">
          <source>Specifying stiffness/damping/mass as parameters makes &lt;code&gt;Animated.spring&lt;/code&gt; use an analytical spring model based on the motion equations of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;damped harmonic oscillator&lt;/a&gt;. This behavior is slightly more precise and faithful to the physics behind spring dynamics, and closely mimics the implementation in iOS's CASpringAnimation primitive.</source>
          <target state="translated">剛性/減衰/質量をパラメーターとして指定すると、 &lt;code&gt;Animated.spring&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;減衰調和振動子の&lt;/a&gt;運動方程式に基づいた解析ばねモデルを使用します。この動作は、スプリングダイナミクスの背後にある物理学に少し正確で忠実であり、iOSのCASpringAnimationプリミティブの実装を厳密に模倣しています。</target>
        </trans-unit>
        <trans-unit id="5fd4d7eb0c234c30e3cd55dcd36064bbd1127d69" translate="yes" xml:space="preserve">
          <source>Split APKs by ABI to reduce file size</source>
          <target state="translated">ファイルサイズを減らすためにABIでAPKを分割する</target>
        </trans-unit>
        <trans-unit id="b3b520c802ab9b25bf85b34a1ad722e46e414d9b" translate="yes" xml:space="preserve">
          <source>Stage 3</source>
          <target state="translated">ステージ3</target>
        </trans-unit>
        <trans-unit id="797050348a505da64fd5440f4089492899f1608e" translate="yes" xml:space="preserve">
          <source>Stale issues</source>
          <target state="translated">古い問題</target>
        </trans-unit>
        <trans-unit id="ad9344815dc0ca5e3531e14f6a13398d1066ff3d" translate="yes" xml:space="preserve">
          <source>Standard functions</source>
          <target state="translated">標準機能</target>
        </trans-unit>
        <trans-unit id="62881eee1ffc260a65089518aeeb1a5121c31241" translate="yes" xml:space="preserve">
          <source>Start by following the &lt;code&gt;Point Gradle to your Android SDK&lt;/code&gt; section of this page. Once you do this, assuming you have Gradle configured properly, you can then run the following command from the root of your React Native checkout to build and package all required files:</source>
          <target state="translated">まず、このページの &lt;code&gt;Point Gradle to your Android SDK&lt;/code&gt; セクションにあるPoint Gradleをたどります。これを行うと、Gradleが適切に構成されていると想定して、React Nativeチェックアウトのルートから次のコマンドを実行して、必要なすべてのファイルをビルドおよびパッケージ化できます。</target>
        </trans-unit>
        <trans-unit id="b81892b516c01e0944a0e8d6f21655bbb4478f21" translate="yes" xml:space="preserve">
          <source>Start the React Native server and run your native application.</source>
          <target state="translated">React Nativeサーバーを起動し、ネイティブアプリケーションを実行します。</target>
        </trans-unit>
        <trans-unit id="0acb999b3fec51a26337e59c05109e52d38c0c6d" translate="yes" xml:space="preserve">
          <source>Start your package server with &lt;code&gt;npm start&lt;/code&gt;. Note that when the dev packager is automatically launched via xcode and &lt;code&gt;react-native run-android&lt;/code&gt;, etc, it does not use &lt;code&gt;npm start&lt;/code&gt;, so it won't use the config.</source>
          <target state="translated">&lt;code&gt;npm start&lt;/code&gt; でパッケージサーバーを起動します。devパッケージャーがxcodeや &lt;code&gt;react-native run-android&lt;/code&gt; などを介して自動的に起動される場合、 &lt;code&gt;npm start&lt;/code&gt; を使用しないため、configを使用しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="83a2a5cb5d52573f01ca5775cc4e612c180b7e34" translate="yes" xml:space="preserve">
          <source>Starting the simulator</source>
          <target state="translated">シミュレータの起動</target>
        </trans-unit>
        <trans-unit id="e9e00587bed6f3907f597e401739adebc193aa05" translate="yes" xml:space="preserve">
          <source>Starts an animation after the given delay.</source>
          <target state="translated">指定した遅延時間後にアニメーションを開始します。</target>
        </trans-unit>
        <trans-unit id="218ad1c5fa269bd266025d78a326d670630955bb" translate="yes" xml:space="preserve">
          <source>Starts an array of animations all at the same time. By default, if one of the animations is stopped, they will all be stopped. You can override this with the &lt;code&gt;stopTogether&lt;/code&gt; flag.</source>
          <target state="translated">すべてのアニメーションを同時に開始します。デフォルトでは、アニメーションの1つが停止すると、すべてが停止します。これは、 &lt;code&gt;stopTogether&lt;/code&gt; フラグでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="5cca2fd9c631e29624254bf0c13ededeafb3abb7" translate="yes" xml:space="preserve">
          <source>Starts an array of animations in order, waiting for each to complete before starting the next. If the current running animation is stopped, no following animations will be started.</source>
          <target state="translated">アニメーションの配列を順番に開始し、それぞれのアニメーションが完了するのを待ってから次のアニメーションを開始します。現在実行中のアニメーションが停止している場合、次のアニメーションは開始されません。</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="56ef0509a7fcd409a0589ed5ee6ed9d9a22db2d8" translate="yes" xml:space="preserve">
          <source>State works the same way as it does in React, so for more details on handling state, you can look at the &lt;a href=&quot;https://reactjs.org/docs/react-component.html#setstate&quot;&gt;React.Component API&lt;/a&gt;. At this point, you might be annoyed that most of our examples so far use boring default black text. To make things more beautiful, you will have to &lt;a href=&quot;style&quot;&gt;learn about Style&lt;/a&gt;.</source>
          <target state="translated">状態はReactと同じように機能するため、状態の処理の詳細については、&lt;a href=&quot;https://reactjs.org/docs/react-component.html#setstate&quot;&gt;React.Component APIを&lt;/a&gt;参照してください。この時点で、これまでのほとんどの例では、退屈なデフォルトの黒いテキストを使用していることにイライラするかもしれません。物事をより美しくするには、&lt;a href=&quot;style&quot;&gt;スタイルについて学ぶ&lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="1b103760acdf715d108a2168584bb8018a17ce54" translate="yes" xml:space="preserve">
          <source>Static Image Resources</source>
          <target state="translated">静的画像リソース</target>
        </trans-unit>
        <trans-unit id="840c8e58dd72551c185c94db723e4403475cf429" translate="yes" xml:space="preserve">
          <source>Static Non-Image Resources</source>
          <target state="translated">静的な非画像リソース</target>
        </trans-unit>
        <trans-unit id="9b75cbfb249af9c0f7b1047ff748a74b85bc8436" translate="yes" xml:space="preserve">
          <source>Status bar animation</source>
          <target state="translated">ステータスバーのアニメーション</target>
        </trans-unit>
        <trans-unit id="b1458a435d3ca6fd9862a8d3ce2c7b7f4b7893ea" translate="yes" xml:space="preserve">
          <source>Status bar style</source>
          <target state="translated">ステータスバーのスタイル</target>
        </trans-unit>
        <trans-unit id="7c188efac7001fec932a493c07e178ef0d8b50ef" translate="yes" xml:space="preserve">
          <source>Status bar style to set</source>
          <target state="translated">設定するステータスバーのスタイル</target>
        </trans-unit>
        <trans-unit id="7de1c1596973efa1e95d16d7cb9229f4c6d36db9" translate="yes" xml:space="preserve">
          <source>StatusBar</source>
          <target state="translated">StatusBar</target>
        </trans-unit>
        <trans-unit id="7d474673dc01f5cc7c8345542ed07ba664e6820d" translate="yes" xml:space="preserve">
          <source>StatusBar#animated</source>
          <target state="translated">StatusBar#animated</target>
        </trans-unit>
        <trans-unit id="5581fde6fd7addbc491641a681aa2782dd58f4ce" translate="yes" xml:space="preserve">
          <source>StatusBar#backgroundColor</source>
          <target state="translated">StatusBar#backgroundColor</target>
        </trans-unit>
        <trans-unit id="7943bdd8af89d14ac4c6bc2d06e243d0e7d765d8" translate="yes" xml:space="preserve">
          <source>StatusBar#barStyle</source>
          <target state="translated">StatusBar#barStyle</target>
        </trans-unit>
        <trans-unit id="38a3ba08fa64b9328a4a844efc4e60a363f345bc" translate="yes" xml:space="preserve">
          <source>StatusBar#hidden</source>
          <target state="translated">StatusBar#hidden</target>
        </trans-unit>
        <trans-unit id="cc38dc939f64ac24102e9ab18120250e59e52712" translate="yes" xml:space="preserve">
          <source>StatusBar#networkActivityIndicatorVisible</source>
          <target state="translated">StatusBar#networkActivityIndicatorVisible</target>
        </trans-unit>
        <trans-unit id="d4bfcc0b2e3f1964d9f1e71b760ec3cbc8d57460" translate="yes" xml:space="preserve">
          <source>StatusBar#showHideTransition</source>
          <target state="translated">StatusBar#showHideTransition</target>
        </trans-unit>
        <trans-unit id="db192204b655d45a72a1982c2d7c317cac79cd33" translate="yes" xml:space="preserve">
          <source>StatusBar#translucent</source>
          <target state="translated">StatusBar#translucent</target>
        </trans-unit>
        <trans-unit id="930d5b5e3eb5c0cbdf10b97191de7f2e071f755d" translate="yes" xml:space="preserve">
          <source>StatusBar.setBackgroundColor()</source>
          <target state="translated">StatusBar.setBackgroundColor()</target>
        </trans-unit>
        <trans-unit id="4bebafbfdd3a5b771c65a637acf2769eebdf24e1" translate="yes" xml:space="preserve">
          <source>StatusBar.setBarStyle()</source>
          <target state="translated">StatusBar.setBarStyle()</target>
        </trans-unit>
        <trans-unit id="19ec3f6e959a63a7a6fb6dbd92537edf44c91cdb" translate="yes" xml:space="preserve">
          <source>StatusBar.setHidden()</source>
          <target state="translated">StatusBar.setHidden()</target>
        </trans-unit>
        <trans-unit id="76ee34977b43d5e10d21744a4018ecfdbe5dba83" translate="yes" xml:space="preserve">
          <source>StatusBar.setNetworkActivityIndicatorVisible()</source>
          <target state="translated">StatusBar.setNetworkActivityIndicatorVisible()</target>
        </trans-unit>
        <trans-unit id="1fcae87a48cf62d551725cab503db51d1679d10d" translate="yes" xml:space="preserve">
          <source>StatusBar.setTranslucent()</source>
          <target state="translated">StatusBar.setTranslucent()</target>
        </trans-unit>
        <trans-unit id="bc814d7ec86b26e2d2d3b5428c8608deb42be4f5" translate="yes" xml:space="preserve">
          <source>StatusBarAnimation</source>
          <target state="translated">StatusBarAnimation</target>
        </trans-unit>
        <trans-unit id="8dbd7590b977b83d69e8125846511f50a9a99c49" translate="yes" xml:space="preserve">
          <source>StatusBarIOS</source>
          <target state="translated">StatusBarIOS</target>
        </trans-unit>
        <trans-unit id="e4699a48a5590599d91166ffc47c3f22a7a9a9a5" translate="yes" xml:space="preserve">
          <source>StatusBarStyle</source>
          <target state="translated">StatusBarStyle</target>
        </trans-unit>
        <trans-unit id="6bac23c6dfc3b1372d6c716fd7e26a124fa33b35" translate="yes" xml:space="preserve">
          <source>Step 1</source>
          <target state="translated">ステップ1</target>
        </trans-unit>
        <trans-unit id="aefbadf9176e8b04a9c6bae3b469d2ad2c20b5f5" translate="yes" xml:space="preserve">
          <source>Step 2</source>
          <target state="translated">ステップ2</target>
        </trans-unit>
        <trans-unit id="27030a62f7c332e0255651a98eba33b992aa684c" translate="yes" xml:space="preserve">
          <source>Step 3</source>
          <target state="translated">ステップ3</target>
        </trans-unit>
        <trans-unit id="1d0e7b63534194e883fa1142ce2d49d73746013d" translate="yes" xml:space="preserve">
          <source>Step value of the slider. The value should be between 0 and (maximumValue - minimumValue). Default value is 0.</source>
          <target state="translated">スライダーのステップ値。値は0から(maximumValue-minimumValue)の間でなければなりません。デフォルト値は0です。</target>
        </trans-unit>
        <trans-unit id="fade9269e255a8d840b3f72cfc6088e0722fa50a" translate="yes" xml:space="preserve">
          <source>Stop loading the current page.</source>
          <target state="translated">現在のページの読み込みを停止します。</target>
        </trans-unit>
        <trans-unit id="d54ed270aa3a9cbd33ab05802cd38d96b70d8826" translate="yes" xml:space="preserve">
          <source>Stop vibration.</source>
          <target state="translated">振動を止めます。</target>
        </trans-unit>
        <trans-unit id="0117e9d520e6baddb6a9f47ddb8421f19ce38874" translate="yes" xml:space="preserve">
          <source>Stops observing for device location changes. In addition, it removes all listeners previously registered.</source>
          <target state="translated">デバイスの位置変化の観測を停止します。また、以前に登録したリスナーをすべて削除します。</target>
        </trans-unit>
        <trans-unit id="28e22663cfd0bef6c75d430a03b6bdfa46bbb331" translate="yes" xml:space="preserve">
          <source>Stores a base64-encoded image in the ImageStore, and returns a URI that can be used to access or display the image later. Images are stored in memory only, and must be manually deleted when you are finished with them by calling &lt;code&gt;removeImageForTag()&lt;/code&gt;.</source>
          <target state="translated">Base64でエンコードされた画像をImageStoreに保存し、後で画像にアクセスまたは表示するために使用できるURIを返します。画像はメモリにのみ格納され、 &lt;code&gt;removeImageForTag()&lt;/code&gt; を呼び出して終了したら手動で削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="ed8a895c2cfdb1a6b2bca118f76b16a1f4c6a669" translate="yes" xml:space="preserve">
          <source>String message: A string with the text to toast</source>
          <target state="translated">文字列メッセージ。乾杯するためのテキストを含む文字列</target>
        </trans-unit>
        <trans-unit id="12b99c74e7c704f22a9a0fc647cde5c304769402" translate="yes" xml:space="preserve">
          <source>String.prototype.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith&quot;&gt;startsWith&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith&quot;&gt;endsWith&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat&quot;&gt;repeat&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes&quot;&gt;includes&lt;/a&gt;}</source>
          <target state="translated">String.prototype。{ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith&quot;&gt;startsWith&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith&quot;&gt;endsWith&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat&quot;&gt;repeat&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes&quot;&gt;includes&lt;/a&gt; }</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">スタイルガイド</target>
        </trans-unit>
        <trans-unit id="3903981dbc6393b5539ee8fd52fc82a8960f1523" translate="yes" xml:space="preserve">
          <source>Style of the ProgressBar. One of:</source>
          <target state="translated">プログレスバーのスタイル。の一つ。</target>
        </trans-unit>
        <trans-unit id="be1c62fe4bdc85778f7e567589c03953812a90d1" translate="yes" xml:space="preserve">
          <source>Style to apply to each of the item labels.</source>
          <target state="translated">各項目のラベルに適用するスタイル。</target>
        </trans-unit>
        <trans-unit id="ce867a84f68c1d0cd7e5d2e0a575c394cc078c03" translate="yes" xml:space="preserve">
          <source>StyleSheet</source>
          <target state="translated">StyleSheet</target>
        </trans-unit>
        <trans-unit id="91ba4145bc55279e0f6cd26cf6a137f746bef5a5" translate="yes" xml:space="preserve">
          <source>StyleSheet#absoluteFill</source>
          <target state="translated">StyleSheet#absoluteFill</target>
        </trans-unit>
        <trans-unit id="1ffa6bc7f93efead007b2e4620ee22b6b0844dca" translate="yes" xml:space="preserve">
          <source>StyleSheet#absoluteFillObject</source>
          <target state="translated">StyleSheet#absoluteFillObject</target>
        </trans-unit>
        <trans-unit id="e678cd19ed06d2e41c33427399b770f859a27a98" translate="yes" xml:space="preserve">
          <source>StyleSheet#flatten</source>
          <target state="translated">StyleSheet#flatten</target>
        </trans-unit>
        <trans-unit id="cff515c57366dd185c1d555def3dfda9954b816e" translate="yes" xml:space="preserve">
          <source>StyleSheet#hairlineWidth</source>
          <target state="translated">StyleSheet#hairlineWidth</target>
        </trans-unit>
        <trans-unit id="cd98c42358d0c7677a65427dfd8ebe0266a32865" translate="yes" xml:space="preserve">
          <source>StyleSheet.create()</source>
          <target state="translated">StyleSheet.create()</target>
        </trans-unit>
        <trans-unit id="fb62d005677d99decf87d31d129926b3aa35600b" translate="yes" xml:space="preserve">
          <source>StyleSheet.setStyleAttributePreprocessor()</source>
          <target state="translated">StyleSheet.setStyleAttributePreprocessor()</target>
        </trans-unit>
        <trans-unit id="df7d8ac370779c1d100b7ca7d7989697f5e8af70" translate="yes" xml:space="preserve">
          <source>StyleSheetPropType(View Style props)</source>
          <target state="translated">StyleSheetPropType(View Style props)</target>
        </trans-unit>
        <trans-unit id="52db564b0ad83b57f6f43fd2a22822492d585a15" translate="yes" xml:space="preserve">
          <source>Styles</source>
          <target state="translated">Styles</target>
        </trans-unit>
        <trans-unit id="882e18fbe975bc824d30afdfbbb8cdffade8dcec" translate="yes" xml:space="preserve">
          <source>Subclass &lt;code&gt;RCTViewManager&lt;/code&gt; to create a manager for your component.</source>
          <target state="translated">&lt;code&gt;RCTViewManager&lt;/code&gt; をサブクラス化して、コンポーネントのマネージャーを作成します。</target>
        </trans-unit>
        <trans-unit id="41eefe3ced63ed0213bd234866cdbb8c74a89142" translate="yes" xml:space="preserve">
          <source>Suggest &lt;a href=&quot;https://github.com/facebook/react-native/labels&quot;&gt;labels&lt;/a&gt; that can help categorize issues.</source>
          <target state="translated">問題の分類に役立つ&lt;a href=&quot;https://github.com/facebook/react-native/labels&quot;&gt;ラベル&lt;/a&gt;を提案します。</target>
        </trans-unit>
        <trans-unit id="87f382bcfc7270fa0c60864065f8693eb4b7a5a8" translate="yes" xml:space="preserve">
          <source>Supported events:</source>
          <target state="translated">サポートされているイベント。</target>
        </trans-unit>
        <trans-unit id="d0377706508a1a8ffc7b2445d9c4711ecfe46bce" translate="yes" xml:space="preserve">
          <source>Supported options:</source>
          <target state="translated">サポートされているオプション。</target>
        </trans-unit>
        <trans-unit id="4be9e58c958af2deb38e42d96e6aaa365a252705" translate="yes" xml:space="preserve">
          <source>Swift doesn't have support for macros so exposing it to React Native requires a bit more setup but works relatively the same.</source>
          <target state="translated">Swiftはマクロをサポートしていないので、React Nativeに公開するにはもう少し設定が必要ですが、比較的同じように動作します。</target>
        </trans-unit>
        <trans-unit id="3e44c920427e845df4958295eb8c3045b55fcfd5" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="translated">Switch</target>
        </trans-unit>
        <trans-unit id="05cbdf0937c3c1b2a3bab4fe6fe49b9e9c756eb6" translate="yes" xml:space="preserve">
          <source>Switch#disabled</source>
          <target state="translated">Switch#disabled</target>
        </trans-unit>
        <trans-unit id="8bd702c06fa7bca68970d0ca46a9f208f3648364" translate="yes" xml:space="preserve">
          <source>Switch#onTintColor</source>
          <target state="translated">Switch#onTintColor</target>
        </trans-unit>
        <trans-unit id="19f6f235889ffaba47503068c8cd6022bf59f0d5" translate="yes" xml:space="preserve">
          <source>Switch#onValueChange</source>
          <target state="translated">Switch#onValueChange</target>
        </trans-unit>
        <trans-unit id="3b45801972c6e1380f61d302bc6b35a04966b990" translate="yes" xml:space="preserve">
          <source>Switch#testID</source>
          <target state="translated">Switch#testID</target>
        </trans-unit>
        <trans-unit id="673b92d2105df9b422cc982bd14fbdddc2a75c2d" translate="yes" xml:space="preserve">
          <source>Switch#thumbTintColor</source>
          <target state="translated">Switch#thumbTintColor</target>
        </trans-unit>
        <trans-unit id="56a2fe45517bbc9bbbabef0ce561b62bca19d7e4" translate="yes" xml:space="preserve">
          <source>Switch#tintColor</source>
          <target state="translated">Switch#tintColor</target>
        </trans-unit>
        <trans-unit id="58cd030a61d36f9753f72dcb0da8664d22c44782" translate="yes" xml:space="preserve">
          <source>Switch#value</source>
          <target state="translated">Switch#value</target>
        </trans-unit>
        <trans-unit id="08cd2d4ae39c9fb7211cc588435b4c52abcd37fe" translate="yes" xml:space="preserve">
          <source>Syntax transformers make writing code more enjoyable by allowing you to use new JavaScript syntax without having to wait for support on all interpreters.</source>
          <target state="translated">構文変換器は、すべてのインタプリタのサポートを待たずに新しい JavaScript 構文を使用できるようにすることで、コードを書くことをより楽しくしてくれます。</target>
        </trans-unit>
        <trans-unit id="7de50df5c83b2f8b64ea311a6d2b667d3aacd75a" translate="yes" xml:space="preserve">
          <source>Synthetic Touch Events</source>
          <target state="translated">合成タッチイベント</target>
        </trans-unit>
        <trans-unit id="15c3e4a956c3f7ed705d0574168e6082b24b7b41" translate="yes" xml:space="preserve">
          <source>Systrace</source>
          <target state="translated">Systrace</target>
        </trans-unit>
        <trans-unit id="50643f765de830eda5735ce8f01f8555d6cc0f7b" translate="yes" xml:space="preserve">
          <source>Systrace.attachToRelayProfiler()</source>
          <target state="translated">Systrace.attachToRelayProfiler()</target>
        </trans-unit>
        <trans-unit id="4468d308336fe73b1c73d541aec4b497dfdc13bb" translate="yes" xml:space="preserve">
          <source>Systrace.beginAsyncEvent()</source>
          <target state="translated">Systrace.beginAsyncEvent()</target>
        </trans-unit>
        <trans-unit id="ea6c0e2cf9474d43d018320bc91a9795b384130f" translate="yes" xml:space="preserve">
          <source>Systrace.beginEvent()</source>
          <target state="translated">Systrace.beginEvent()</target>
        </trans-unit>
        <trans-unit id="b1136e1f35190b06d41ec92185dd771df941cacd" translate="yes" xml:space="preserve">
          <source>Systrace.counterEvent()</source>
          <target state="translated">Systrace.counterEvent()</target>
        </trans-unit>
        <trans-unit id="46a1a652fd7a7390f9f81aa8fe2a444d73f311ae" translate="yes" xml:space="preserve">
          <source>Systrace.endAsyncEvent()</source>
          <target state="translated">Systrace.endAsyncEvent()</target>
        </trans-unit>
        <trans-unit id="0f7804e0d7496a89d1d85dccdd5a907cb91a66f8" translate="yes" xml:space="preserve">
          <source>Systrace.endEvent()</source>
          <target state="translated">Systrace.endEvent()</target>
        </trans-unit>
        <trans-unit id="e0208130fec6ca2a9ca1ba2755ae1abad63ea2cb" translate="yes" xml:space="preserve">
          <source>Systrace.installReactHook()</source>
          <target state="translated">Systrace.installReactHook()</target>
        </trans-unit>
        <trans-unit id="ddafa9150edf8dd70860e9b91e19591fafbe00e5" translate="yes" xml:space="preserve">
          <source>Systrace.isEnabled()</source>
          <target state="translated">Systrace.isEnabled()</target>
        </trans-unit>
        <trans-unit id="0d6ac5906e52c40976262f76c60b6534ad36fb3b" translate="yes" xml:space="preserve">
          <source>Systrace.measure()</source>
          <target state="translated">Systrace.measure()</target>
        </trans-unit>
        <trans-unit id="668b9d841935ff6330d82b0fa7b8e4530e3c7c9f" translate="yes" xml:space="preserve">
          <source>Systrace.measureMethods()</source>
          <target state="translated">Systrace.measureMethods()</target>
        </trans-unit>
        <trans-unit id="830b093effeafaef97b356a7b4b68d2789b4384b" translate="yes" xml:space="preserve">
          <source>Systrace.setEnabled()</source>
          <target state="translated">Systrace.setEnabled()</target>
        </trans-unit>
        <trans-unit id="5d1189f6cfcef4f0dc8976e4b4e47a8bdc265021" translate="yes" xml:space="preserve">
          <source>Systrace.swizzleJSON()</source>
          <target state="translated">Systrace.swizzleJSON()</target>
        </trans-unit>
        <trans-unit id="7407e5938b092cfbf85773b34db0604d7134d9a7" translate="yes" xml:space="preserve">
          <source>TODO: now that AppState is a subclass of NativeEventEmitter, we could deprecate &lt;code&gt;addEventListener&lt;/code&gt; and &lt;code&gt;removeEventListener&lt;/code&gt; and just use &lt;code&gt;addListener&lt;/code&gt; and &lt;code&gt;listener.remove()&lt;/code&gt; directly. That will be a breaking change though, as both the method and event names are different (addListener events are currently required to be globally unique).</source>
          <target state="translated">TODO：AppStateがNativeEventEmitterのサブクラスになったので、 &lt;code&gt;addEventListener&lt;/code&gt; と &lt;code&gt;removeEventListener&lt;/code&gt; を廃止し、 &lt;code&gt;addListener&lt;/code&gt; と &lt;code&gt;listener.remove()&lt;/code&gt; を直接使用するだけで済みます。ただし、メソッド名とイベント名の両方が異なるため、これは重大な変更になります（現在、addListenerイベントはグローバルに一意である必要があります）。</target>
        </trans-unit>
        <trans-unit id="ffc29a9f375236222d847bc718b63b76107ecd91" translate="yes" xml:space="preserve">
          <source>TV devices support has been implemented with the intention of making existing React Native applications &quot;just work&quot; on Apple TV and Android TV, with few or no changes needed in the JavaScript code for the applications.</source>
          <target state="translated">TVデバイスのサポートは、既存のReact NativeアプリケーションをApple TVやAndroid TV上で、アプリケーションのJavaScriptコードにほとんど変更を加えることなく、「ただ動く」ようにすることを意図して実装されています。</target>
        </trans-unit>
        <trans-unit id="b6ce6e3342bf41c612ce255a93611e837712af4d" translate="yes" xml:space="preserve">
          <source>TabBarIOS</source>
          <target state="translated">TabBarIOS</target>
        </trans-unit>
        <trans-unit id="a47fef1d6f3e865f3319cd2de1ed6812623166d9" translate="yes" xml:space="preserve">
          <source>TabBarIOS#barStyle</source>
          <target state="translated">TabBarIOS#barStyle</target>
        </trans-unit>
        <trans-unit id="2f92e3f169dfab75b2c314b45ec1016afe9c5469" translate="yes" xml:space="preserve">
          <source>TabBarIOS#barTintColor</source>
          <target state="translated">TabBarIOS#barTintColor</target>
        </trans-unit>
        <trans-unit id="bfce729581da2d15bb7b8455b1aed9151a3d8686" translate="yes" xml:space="preserve">
          <source>TabBarIOS#itemPositioning</source>
          <target state="translated">TabBarIOS#itemPositioning</target>
        </trans-unit>
        <trans-unit id="69fc572d37db0dfff93357976bda3e11461f4d35" translate="yes" xml:space="preserve">
          <source>TabBarIOS#style</source>
          <target state="translated">TabBarIOS#style</target>
        </trans-unit>
        <trans-unit id="68e88818d6985db203557fae4f5dc0b53f18f7c2" translate="yes" xml:space="preserve">
          <source>TabBarIOS#tintColor</source>
          <target state="translated">TabBarIOS#tintColor</target>
        </trans-unit>
        <trans-unit id="c57394074938c55a95def9b5d8edc31cc50321ec" translate="yes" xml:space="preserve">
          <source>TabBarIOS#translucent</source>
          <target state="translated">TabBarIOS#translucent</target>
        </trans-unit>
        <trans-unit id="9feaa7bad0fe758af66c5d2b6cc358a5b47d986b" translate="yes" xml:space="preserve">
          <source>TabBarIOS#unselectedItemTintColor</source>
          <target state="translated">TabBarIOS#unselectedItemTintColor</target>
        </trans-unit>
        <trans-unit id="11907de901cec834949c2b477a9450a2608df679" translate="yes" xml:space="preserve">
          <source>TabBarIOS#unselectedTintColor</source>
          <target state="translated">TabBarIOS#unselectedTintColor</target>
        </trans-unit>
        <trans-unit id="083085d58536294b2617e47e1d6860c941e5f345" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item</source>
          <target state="translated">TabBarIOS.Item</target>
        </trans-unit>
        <trans-unit id="de7209fe8a4f3437e02c8773104f9c78722b0d4c" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#badge</source>
          <target state="translated">TabBarIOS.Item#badge</target>
        </trans-unit>
        <trans-unit id="04e7ee9f1b5319c6146ad957d3ea0cba91bc2531" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#badgeColor</source>
          <target state="translated">TabBarIOS.Item#badgeColor</target>
        </trans-unit>
        <trans-unit id="f010b3fb310f4d57f7771ec69a1c980ef0fe73aa" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#icon</source>
          <target state="translated">TabBarIOS.Item#icon</target>
        </trans-unit>
        <trans-unit id="ced633a14d0a888f092c2558b4a99af34bbdeb08" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#isTVSelectable</source>
          <target state="translated">TabBarIOS.Item#isTVSelectable</target>
        </trans-unit>
        <trans-unit id="5813ab9ce02680ea7320e686b9d21fe07ce425bd" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#onPress</source>
          <target state="translated">TabBarIOS.Item#onPress</target>
        </trans-unit>
        <trans-unit id="bc70e5387f1d9ddf2cc19b13b3108898f6c8de4c" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#renderAsOriginal</source>
          <target state="translated">TabBarIOS.Item#renderAsOriginal</target>
        </trans-unit>
        <trans-unit id="04ff7ea7667d21c7bc1bdce72043027eb84ffa1c" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#selected</source>
          <target state="translated">TabBarIOS.Item#selected</target>
        </trans-unit>
        <trans-unit id="2ac50dd58f21f14c1cd3eb3920c4c686c8efbf96" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#selectedIcon</source>
          <target state="translated">TabBarIOS.Item#selectedIcon</target>
        </trans-unit>
        <trans-unit id="cff9db2f94f12c4d641d3c52849a5ad779a5288d" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#style</source>
          <target state="translated">TabBarIOS.Item#style</target>
        </trans-unit>
        <trans-unit id="75ba326ddc4f84c1d73c8e443aea2ffe8628f39f" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#systemIcon</source>
          <target state="translated">TabBarIOS.Item#systemIcon</target>
        </trans-unit>
        <trans-unit id="ad48d57518b34ce302340893a66f373900305721" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#title</source>
          <target state="translated">TabBarIOS.Item#title</target>
        </trans-unit>
        <trans-unit id="da4db21f2118a27664957aee84bff276367de957" translate="yes" xml:space="preserve">
          <source>Tag the relevant people.</source>
          <target state="translated">関連する人にタグを付ける。</target>
        </trans-unit>
        <trans-unit id="275a74c20fe10f11bf259b293e851b3c9c4a51ec" translate="yes" xml:space="preserve">
          <source>Tag used to log scroll performance on this scroll view. Will force momentum events to be turned on (see sendMomentumEvents). This doesn't do anything out of the box and you need to implement a custom native FpsListener for it to be useful.</source>
          <target state="translated">このスクロールビューのスクロールパフォーマンスを記録するために使用されるタグ。モメンタムイベントを強制的にオンにします (sendMomentumEvents を参照)。これは何もしないので、便利に使うにはカスタムのネイティブ FpsListener を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5ad300d8ec641cfc0395022b20434e7be669b27" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;animated#configuring-animations&quot;&gt;Configuring animations&lt;/a&gt; section of the &lt;code&gt;Animated&lt;/code&gt; API reference to learn more about all the config parameters supported by the built-in animations.</source>
          <target state="translated">見てみましょう&lt;a href=&quot;animated#configuring-animations&quot;&gt;設定のアニメーション&lt;/a&gt;のセクション &lt;code&gt;Animated&lt;/code&gt; ビルトインのアニメーションがサポートしているすべての設定パラメータの詳細学ぶためにAPIリファレンス。</target>
        </trans-unit>
        <trans-unit id="9b2172a91891422ad3b56afdfe7b38c5150bf994" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot;&gt;Fetch Request docs&lt;/a&gt; for a full list of properties.</source>
          <target state="translated">プロパティの完全なリストについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot;&gt;フェッチリクエストのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="986b4c180f80d224eb70f830468a2eb9d7d3b48f" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;features requested&lt;/a&gt; by others in the community and consider opening a pull request if you see something you want to work on.</source>
          <target state="translated">コミュニティの他の人から&lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;リクエスト&lt;/a&gt;された機能を見て、作業したいものが見つかったらプルリクエストを開くことを検討してください。</target>
        </trans-unit>
        <trans-unit id="54acef368e36ad72557d1dd4d5bbca95451e8fb6" translate="yes" xml:space="preserve">
          <source>Takes a data entry from the data source and its ids and should return a renderable component to be rendered as the row. By default the data is exactly what was put into the data source, but it's also possible to provide custom extractors. ListView can be notified when a row is being highlighted by calling &lt;code&gt;highlightRow(sectionID, rowID)&lt;/code&gt;. This sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you to control the separators above and below the highlighted row. The highlighted state of a row can be reset by calling highlightRow(null).</source>
          <target state="translated">データソースとそのIDからデータエントリを取得し、行としてレンダリングされるレンダリング可能なコンポーネントを返します。デフォルトでは、データはデータソースに入力されたものとまったく同じですが、カスタムエクストラクターを提供することもできます。行が強調表示されているときにListViewに通知するには、 &lt;code&gt;highlightRow(sectionID, rowID)&lt;/code&gt; 呼び出します。これにより、renderSeparatorの隣接行ハイライトのブール値が設定され、ハイライトされた行の上下のセパレーターを制御できるようになります。行の強調表示された状態は、highlightRow（null）を呼び出すことによってリセットできます。</target>
        </trans-unit>
        <trans-unit id="b44ab2bb0eeeb75bcb345f01af8941b831cdf765" translate="yes" xml:space="preserve">
          <source>Takes an array of mappings and extracts values from each arg accordingly, then calls &lt;code&gt;setValue&lt;/code&gt; on the mapped outputs. e.g.</source>
          <target state="translated">マッピングの配列を取り、それに応じて各引数から値を抽出し、マッピングされた出力で &lt;code&gt;setValue&lt;/code&gt; を呼び出します。例えば</target>
        </trans-unit>
        <trans-unit id="8eebfb97ca4c2f545460d8a2a8fdbf543274eaab" translate="yes" xml:space="preserve">
          <source>Takes an item from &lt;code&gt;data&lt;/code&gt; and renders it into the list</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; からアイテムを取得し、それをリストにレンダリングします</target>
        </trans-unit>
        <trans-unit id="80e405629f366aab799ea6c84106f9e23731f2c5" translate="yes" xml:space="preserve">
          <source>Takes an item from &lt;code&gt;data&lt;/code&gt; and renders it into the list.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; からアイテムを取得し、リストにレンダリングします。</target>
        </trans-unit>
        <trans-unit id="14f9dfa0db8e74a49c5c7d7b439b89b961cd390a" translate="yes" xml:space="preserve">
          <source>Tells the list an interaction has occured, which should trigger viewability calculations, e.g. if &lt;code&gt;waitForInteractions&lt;/code&gt; is true and the user has not scrolled. This is typically called by taps on items or by navigation actions.</source>
          <target state="translated">インタラクションが発生したことをリストに伝えます。これにより、たとえば、 &lt;code&gt;waitForInteractions&lt;/code&gt; がtrueでユーザーがスクロールしていない場合に、視認性の計算がトリガーされます。これは通常、アイテムのタップまたはナビゲーションアクションによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a26f916e2d89adb6afc5a647f984ab00c43a1130" translate="yes" xml:space="preserve">
          <source>Tells the list an interaction has occurred, which should trigger viewability calculations, e.g. if &lt;code&gt;waitForInteractions&lt;/code&gt; is true and the user has not scrolled. This is typically called by taps on items or by navigation actions.</source>
          <target state="translated">インタラクションが発生したことをリストに &lt;code&gt;waitForInteractions&lt;/code&gt; します。これにより、たとえば、waitForInteractionsがtrueでユーザーがスクロールしていない場合に、視認性の計算がトリガーされます。これは通常、アイテムのタップまたはナビゲーションアクションによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0b4cd4f995019d6ff36200be6e215aeb53a19138" translate="yes" xml:space="preserve">
          <source>Terminating a process on port 8081</source>
          <target state="translated">ポート 8081 でのプロセスの終了</target>
        </trans-unit>
        <trans-unit id="5c2bfa76d23bccc54d981cb25c3fb6c74e0041ad" translate="yes" xml:space="preserve">
          <source>Test and Measure Improvements</source>
          <target state="translated">テストと測定の改善</target>
        </trans-unit>
        <trans-unit id="afa2ab77f0e4c73a5b8752118ebc04b1efa8e6f1" translate="yes" xml:space="preserve">
          <source>Test plan</source>
          <target state="translated">テスト計画</target>
        </trans-unit>
        <trans-unit id="f4df32c15dea68447d29987dfd251d7dcdff81c9" translate="yes" xml:space="preserve">
          <source>Test your integration</source>
          <target state="translated">統合テスト</target>
        </trans-unit>
        <trans-unit id="b21cc0be41a02fff0c48957fb274aeb3bbfe02db" translate="yes" xml:space="preserve">
          <source>Testing VoiceOver Support (iOS)</source>
          <target state="translated">VoiceOverサポートのテスト(iOS)</target>
        </trans-unit>
        <trans-unit id="603caced5f80d81b533e86d7cefae6e72d9f8d18" translate="yes" xml:space="preserve">
          <source>Testing the release build of your app</source>
          <target state="translated">アプリのリリースビルドをテストする</target>
        </trans-unit>
        <trans-unit id="7c2ec7e2152ee65a2c55691b84e1418d1179b25d" translate="yes" xml:space="preserve">
          <source>Testing your Changes</source>
          <target state="translated">変更内容のテスト</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="3d9b17f71a061efc1822ec65908a81acf32f3db2" translate="yes" xml:space="preserve">
          <source>Text Style Props</source>
          <target state="translated">テキストスタイルの小道具</target>
        </trans-unit>
        <trans-unit id="c61f972954a30d711b9ba989e46737a9e7ba2f36" translate="yes" xml:space="preserve">
          <source>Text Style Props#color</source>
          <target state="translated">テキストスタイル小道具#カラー</target>
        </trans-unit>
        <trans-unit id="4d88aa486bbea57cbeedd5cf8cc4ee9f91dc2a51" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontFamily</source>
          <target state="translated">テキストスタイルの小道具#fontFamily</target>
        </trans-unit>
        <trans-unit id="c18e6d10b3da32f05c19c47a00c69cc604759340" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontSize</source>
          <target state="translated">テキスト スタイル プロップス#fontSize</target>
        </trans-unit>
        <trans-unit id="eae60d841c6501f22b4535fbc6d0b90bcd0f0a1d" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontStyle</source>
          <target state="translated">テキスト・スタイル・プロップス#fontStyle</target>
        </trans-unit>
        <trans-unit id="e5748425fb1080eeb8994c10ee3414d9d0e443ff" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontVariant</source>
          <target state="translated">テキス ト ス タ イル小道具#fontVariant</target>
        </trans-unit>
        <trans-unit id="26805327c87d6572dc6306017a732d9d0b72d0ad" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontWeight</source>
          <target state="translated">テキストスタイルの小道具#fontWeight</target>
        </trans-unit>
        <trans-unit id="0ac49c52da74c8d7c6b6b39aab1c62eac018ea86" translate="yes" xml:space="preserve">
          <source>Text Style Props#includeFontPadding</source>
          <target state="translated">テキスト スタイル プロップス#includeFontPadding</target>
        </trans-unit>
        <trans-unit id="ad204b577b20d3585a7a20efdedcf18a19bc11a7" translate="yes" xml:space="preserve">
          <source>Text Style Props#letterSpacing</source>
          <target state="translated">テキストスタイルの小道具#letterSpacing</target>
        </trans-unit>
        <trans-unit id="a42abd51e8c07bc32a0ef68183128b6ef9460eb9" translate="yes" xml:space="preserve">
          <source>Text Style Props#lineHeight</source>
          <target state="translated">テキスト スタイル プロップス#lineHeight</target>
        </trans-unit>
        <trans-unit id="cf7dedb68a4dafefb2882ee07a0525bf198d1906" translate="yes" xml:space="preserve">
          <source>Text Style Props#textAlign</source>
          <target state="translated">テキストスタイル小道具#textAlign</target>
        </trans-unit>
        <trans-unit id="1e91f0978efd58b434dcee80523fc7cde4f66dbb" translate="yes" xml:space="preserve">
          <source>Text Style Props#textAlignVertical</source>
          <target state="translated">テキスト スタイル小道具#textAlignVertical</target>
        </trans-unit>
        <trans-unit id="cd06ff340c555b98ea8300703e56b9f68c8c937c" translate="yes" xml:space="preserve">
          <source>Text Style Props#textDecorationColor</source>
          <target state="translated">テキストスタイル小道具#textDecorationColor</target>
        </trans-unit>
        <trans-unit id="94114fa8cdfd58f254dcdaf0b2d12d62215207fe" translate="yes" xml:space="preserve">
          <source>Text Style Props#textDecorationLine</source>
          <target state="translated">テキストスタイル小道具#textDecorationLine</target>
        </trans-unit>
        <trans-unit id="5dbfafeea7bc54ce2bf17c0074811e97452514fd" translate="yes" xml:space="preserve">
          <source>Text Style Props#textDecorationStyle</source>
          <target state="translated">テキストスタイルの小道具#textDecorationStyle</target>
        </trans-unit>
        <trans-unit id="101e1e04d57d1f45c0a30a0e81e750b3bb632caa" translate="yes" xml:space="preserve">
          <source>Text Style Props#textShadowColor</source>
          <target state="translated">テキスト スタイル小道具#textShadowColor</target>
        </trans-unit>
        <trans-unit id="55eaf6dfa1430a525a265de9c02c93dba606d279" translate="yes" xml:space="preserve">
          <source>Text Style Props#textShadowOffset</source>
          <target state="translated">テキスト スタイル プロップス#textShadowOffset</target>
        </trans-unit>
        <trans-unit id="6e1e0c8ff094ee6ddf7951b9d5628b9235a92b62" translate="yes" xml:space="preserve">
          <source>Text Style Props#textShadowRadius</source>
          <target state="translated">テキストスタイル小道具#textShadowRadius</target>
        </trans-unit>
        <trans-unit id="d14b9cf6d9e0b8684b8e534f7fd4ed850728550f" translate="yes" xml:space="preserve">
          <source>Text Style Props#textTransform</source>
          <target state="translated">テキスト スタイル プロップス#textTransform</target>
        </trans-unit>
        <trans-unit id="f7f64f3848c3e638784cfad9dcabdb2a3b9db466" translate="yes" xml:space="preserve">
          <source>Text Style Props#writingDirection</source>
          <target state="translated">テキストスタイルの小道具#ライティングディレクション</target>
        </trans-unit>
        <trans-unit id="b24d012cf2fc8780b4a27af04a714fc84dfc095c" translate="yes" xml:space="preserve">
          <source>Text input is one of the ways the user interacts with the app. Next, let's look at another type of input and &lt;a href=&quot;handling-touches&quot;&gt;learn how to handle touches&lt;/a&gt;.</source>
          <target state="translated">テキスト入力は、ユーザーがアプリを操作する方法の1つです。次に、別のタイプの入力を見て、&lt;a href=&quot;handling-touches&quot;&gt;タッチの処理方法を学び&lt;/a&gt;ましょう。</target>
        </trans-unit>
        <trans-unit id="e18f59cc06178d7daed9eea6487c99fafa7082bc" translate="yes" xml:space="preserve">
          <source>Text that appears under the icon. It is ignored when a system icon is defined.</source>
          <target state="translated">アイコンの下に表示されるテキスト。システムアイコンが定義されている場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="49691735842942bb3626d19a6587fd5b270cc4af" translate="yes" xml:space="preserve">
          <source>Text to display for blindness accessibility features</source>
          <target state="translated">目の不自由な方のアクセシビリティ機能のために表示するテキスト</target>
        </trans-unit>
        <trans-unit id="e24797a4945527f162b6657319c304ec12799559" translate="yes" xml:space="preserve">
          <source>Text to display inside the button</source>
          <target state="translated">ボタンの内側に表示するテキスト</target>
        </trans-unit>
        <trans-unit id="64d6154cd2887defb16791899f63b8ea1be44aa6" translate="yes" xml:space="preserve">
          <source>Text#accessible</source>
          <target state="translated">Text#accessible</target>
        </trans-unit>
        <trans-unit id="4c275467640d49b14746bcdae295ddd8f447ede4" translate="yes" xml:space="preserve">
          <source>Text#adjustsFontSizeToFit</source>
          <target state="translated">Text#adjustsFontSizeToFit</target>
        </trans-unit>
        <trans-unit id="20ea9eb12e7e39abdef33e26d9e8f04c8d9b899b" translate="yes" xml:space="preserve">
          <source>Text#allowFontScaling</source>
          <target state="translated">Text#allowFontScaling</target>
        </trans-unit>
        <trans-unit id="d298ed01d54553352f12154455017a29e2d44756" translate="yes" xml:space="preserve">
          <source>Text#disabled</source>
          <target state="translated">Text#disabled</target>
        </trans-unit>
        <trans-unit id="e8659fe4ff2b9a59cc6965e05619a9dea632f049" translate="yes" xml:space="preserve">
          <source>Text#ellipsizeMode</source>
          <target state="translated">Text#ellipsizeMode</target>
        </trans-unit>
        <trans-unit id="310ecba5f158ea34bfd695bf14b9613c55be00cf" translate="yes" xml:space="preserve">
          <source>Text#minimumFontScale</source>
          <target state="translated">Text#minimumFontScale</target>
        </trans-unit>
        <trans-unit id="ee41f87c5957ea64738307ed55cd00f9ccda8ae0" translate="yes" xml:space="preserve">
          <source>Text#nativeID</source>
          <target state="translated">Text#nativeID</target>
        </trans-unit>
        <trans-unit id="63d0c1a80db2df719726788d3f01889c88f9e34f" translate="yes" xml:space="preserve">
          <source>Text#numberOfLines</source>
          <target state="translated">Text#numberOfLines</target>
        </trans-unit>
        <trans-unit id="10eb56de8aae2e832a210f9e383a6343494c7a03" translate="yes" xml:space="preserve">
          <source>Text#onLayout</source>
          <target state="translated">Text#onLayout</target>
        </trans-unit>
        <trans-unit id="94c2b5c42f22db009ad076155e9e939edf7629eb" translate="yes" xml:space="preserve">
          <source>Text#onLongPress</source>
          <target state="translated">Text#onLongPress</target>
        </trans-unit>
        <trans-unit id="b4199c8c3178ce3e5c421ee90a00722658326faa" translate="yes" xml:space="preserve">
          <source>Text#onPress</source>
          <target state="translated">Text#onPress</target>
        </trans-unit>
        <trans-unit id="8bb0af8e6128747344dd111237460fb1fefcf2d7" translate="yes" xml:space="preserve">
          <source>Text#pressRetentionOffset</source>
          <target state="translated">Text#pressRetentionOffset</target>
        </trans-unit>
        <trans-unit id="7afe4f98923e67fe1f06a72a39133cfaaa1b3bf0" translate="yes" xml:space="preserve">
          <source>Text#selectable</source>
          <target state="translated">Text#selectable</target>
        </trans-unit>
        <trans-unit id="2835181c04c591fc6b106d4ef29434f09b482650" translate="yes" xml:space="preserve">
          <source>Text#selectionColor</source>
          <target state="translated">Text#selectionColor</target>
        </trans-unit>
        <trans-unit id="a80176ae16b7d7bd30166c2bd16e81eed6907b3a" translate="yes" xml:space="preserve">
          <source>Text#style</source>
          <target state="translated">Text#style</target>
        </trans-unit>
        <trans-unit id="d22f6dd375901a286f96248be0cad34aea905dcb" translate="yes" xml:space="preserve">
          <source>Text#suppressHighlighting</source>
          <target state="translated">Text#suppressHighlighting</target>
        </trans-unit>
        <trans-unit id="d9f7071ad3f626557595f73d5e868ddefe4ac17b" translate="yes" xml:space="preserve">
          <source>Text#testID</source>
          <target state="translated">Text#testID</target>
        </trans-unit>
        <trans-unit id="e787a060a125df55c55f90a86563a1e953e458a6" translate="yes" xml:space="preserve">
          <source>Text#textBreakStrategy</source>
          <target state="translated">Text#textBreakStrategy</target>
        </trans-unit>
        <trans-unit id="5e2fc1bfacb6999f20887e827d2295c0b41a052c" translate="yes" xml:space="preserve">
          <source>TextInput</source>
          <target state="translated">TextInput</target>
        </trans-unit>
        <trans-unit id="8f6137a54cf9649f19ce4e5bf54bad3e5a4a2ab4" translate="yes" xml:space="preserve">
          <source>TextInput#allowFontScaling</source>
          <target state="translated">TextInput#allowFontScaling</target>
        </trans-unit>
        <trans-unit id="c51861b14fb332ee422a9c826d41f0ab3595fe57" translate="yes" xml:space="preserve">
          <source>TextInput#autoCapitalize</source>
          <target state="translated">TextInput#autoCapitalize</target>
        </trans-unit>
        <trans-unit id="e7db14b30fc6e2726c296b453007fa5e438815ce" translate="yes" xml:space="preserve">
          <source>TextInput#autoCorrect</source>
          <target state="translated">TextInput#autoCorrect</target>
        </trans-unit>
        <trans-unit id="22af55a058b06fd3c4863d76cd5d1a01779d1e4e" translate="yes" xml:space="preserve">
          <source>TextInput#autoFocus</source>
          <target state="translated">TextInput#autoFocus</target>
        </trans-unit>
        <trans-unit id="ab4516fe355d6805bce3b15fce544c2b15fa796f" translate="yes" xml:space="preserve">
          <source>TextInput#blurOnSubmit</source>
          <target state="translated">TextInput#blurOnSubmit</target>
        </trans-unit>
        <trans-unit id="461708f4c1351733c637054ac6e26151d92e7227" translate="yes" xml:space="preserve">
          <source>TextInput#caretHidden</source>
          <target state="translated">TextInput#caretHidden</target>
        </trans-unit>
        <trans-unit id="37aa1f7717c20567bd5ea953ee2e4c1318be5df4" translate="yes" xml:space="preserve">
          <source>TextInput#clearButtonMode</source>
          <target state="translated">TextInput#clearButtonMode</target>
        </trans-unit>
        <trans-unit id="cef83d09f349312e62c1bc8054e7ee91682b7696" translate="yes" xml:space="preserve">
          <source>TextInput#clearTextOnFocus</source>
          <target state="translated">TextInput#clearTextOnFocus</target>
        </trans-unit>
        <trans-unit id="b41a0c303c0090490da47a440c5f3d532674a35d" translate="yes" xml:space="preserve">
          <source>TextInput#contextMenuHidden</source>
          <target state="translated">TextInput#contextMenuHidden</target>
        </trans-unit>
        <trans-unit id="d1335f308c541c432e7c0e5d4c9f1734daf1359c" translate="yes" xml:space="preserve">
          <source>TextInput#dataDetectorTypes</source>
          <target state="translated">TextInput#dataDetectorTypes</target>
        </trans-unit>
        <trans-unit id="6ac968b65946bf6094e1e1a3445c8d442a648ad9" translate="yes" xml:space="preserve">
          <source>TextInput#defaultValue</source>
          <target state="translated">TextInput#defaultValue</target>
        </trans-unit>
        <trans-unit id="6d7e3f71db3c07a79343a8d817397e48e729c00e" translate="yes" xml:space="preserve">
          <source>TextInput#disableFullscreenUI</source>
          <target state="translated">TextInput#disableFullscreenUI</target>
        </trans-unit>
        <trans-unit id="fab8e5117095706b69c4505133499ad8ca759bfd" translate="yes" xml:space="preserve">
          <source>TextInput#editable</source>
          <target state="translated">TextInput#editable</target>
        </trans-unit>
        <trans-unit id="7c35e7d91d6a7dbe76276505c5b7cbcf47ff5d96" translate="yes" xml:space="preserve">
          <source>TextInput#enablesReturnKeyAutomatically</source>
          <target state="translated">TextInput#enablesReturnKeyAutomatically</target>
        </trans-unit>
        <trans-unit id="7714dff4044659b2521b4d13cc3464b4439c8e5f" translate="yes" xml:space="preserve">
          <source>TextInput#inlineImageLeft</source>
          <target state="translated">TextInput#inlineImageLeft</target>
        </trans-unit>
        <trans-unit id="3e6a1b4f1c164ce84aa70282910a8317b56ee4ed" translate="yes" xml:space="preserve">
          <source>TextInput#inlineImagePadding</source>
          <target state="translated">TextInput#inlineImagePadding</target>
        </trans-unit>
        <trans-unit id="792b3d396d147da1d46049d4d700bd625e4b61ac" translate="yes" xml:space="preserve">
          <source>TextInput#keyboardAppearance</source>
          <target state="translated">TextInput#keyboardAppearance</target>
        </trans-unit>
        <trans-unit id="0eb680e7cb53a7859a0ceab462835a53923b4620" translate="yes" xml:space="preserve">
          <source>TextInput#keyboardType</source>
          <target state="translated">TextInput#keyboardType</target>
        </trans-unit>
        <trans-unit id="f5f83356b44f2af81386e42406b60fabb779bd0f" translate="yes" xml:space="preserve">
          <source>TextInput#maxLength</source>
          <target state="translated">TextInput#maxLength</target>
        </trans-unit>
        <trans-unit id="49e767f8ed2f53203511f724a9b0b91edefe8d1b" translate="yes" xml:space="preserve">
          <source>TextInput#multiline</source>
          <target state="translated">TextInput#multiline</target>
        </trans-unit>
        <trans-unit id="a3f3aaeb6f5d45ea67736f337d3004a50ce485bf" translate="yes" xml:space="preserve">
          <source>TextInput#numberOfLines</source>
          <target state="translated">TextInput#numberOfLines</target>
        </trans-unit>
        <trans-unit id="0384193061322bf7dc26b14a506c88be5703df77" translate="yes" xml:space="preserve">
          <source>TextInput#onBlur</source>
          <target state="translated">TextInput#onBlur</target>
        </trans-unit>
        <trans-unit id="34249b260b87a48c290b207f6e8d3ef288017267" translate="yes" xml:space="preserve">
          <source>TextInput#onChange</source>
          <target state="translated">TextInput#onChange</target>
        </trans-unit>
        <trans-unit id="ec7d55015235475c8e571d5b42cbbb8111a37ceb" translate="yes" xml:space="preserve">
          <source>TextInput#onChangeText</source>
          <target state="translated">TextInput#onChangeText</target>
        </trans-unit>
        <trans-unit id="f060e56c9c23fe3042ee04412ed16c7ddae37328" translate="yes" xml:space="preserve">
          <source>TextInput#onContentSizeChange</source>
          <target state="translated">TextInput#onContentSizeChange</target>
        </trans-unit>
        <trans-unit id="7e313e1bb0da0342de34879fc43cce51873384f3" translate="yes" xml:space="preserve">
          <source>TextInput#onEndEditing</source>
          <target state="translated">TextInput#onEndEditing</target>
        </trans-unit>
        <trans-unit id="de6e2416c294e8c35ee274e7f5df8473db83c70d" translate="yes" xml:space="preserve">
          <source>TextInput#onFocus</source>
          <target state="translated">TextInput#onFocus</target>
        </trans-unit>
        <trans-unit id="2ebe4a9d104b15b32780209e2742e3386a7a99c4" translate="yes" xml:space="preserve">
          <source>TextInput#onKeyPress</source>
          <target state="translated">TextInput#onKeyPress</target>
        </trans-unit>
        <trans-unit id="280edfdc559df16cc8f51c66a206403475ad6525" translate="yes" xml:space="preserve">
          <source>TextInput#onLayout</source>
          <target state="translated">TextInput#onLayout</target>
        </trans-unit>
        <trans-unit id="bcf85f903d101173a56d48b9fb1a8121e725a31c" translate="yes" xml:space="preserve">
          <source>TextInput#onScroll</source>
          <target state="translated">TextInput#onScroll</target>
        </trans-unit>
        <trans-unit id="720784f322877b59e78d138fc18540a00f248023" translate="yes" xml:space="preserve">
          <source>TextInput#onSelectionChange</source>
          <target state="translated">TextInput#onSelectionChange</target>
        </trans-unit>
        <trans-unit id="c13e2f90b4e4f3680053aed8e2831022d131ac5b" translate="yes" xml:space="preserve">
          <source>TextInput#onSubmitEditing</source>
          <target state="translated">TextInput#onSubmitEditing</target>
        </trans-unit>
        <trans-unit id="86095f4941e44c2eb4064fe2064cb54c8bb9fff7" translate="yes" xml:space="preserve">
          <source>TextInput#placeholder</source>
          <target state="translated">TextInput#placeholder</target>
        </trans-unit>
        <trans-unit id="037602ff9a199b8042fda3ca0ac59986f385e161" translate="yes" xml:space="preserve">
          <source>TextInput#placeholderTextColor</source>
          <target state="translated">TextInput#placeholderTextColor</target>
        </trans-unit>
        <trans-unit id="6ac658211b9757139e91c1175358cf27826fb58e" translate="yes" xml:space="preserve">
          <source>TextInput#returnKeyLabel</source>
          <target state="translated">TextInput#returnKeyLabel</target>
        </trans-unit>
        <trans-unit id="b08bb90350dc980f5f83fc50c764c3a7f02c1eb6" translate="yes" xml:space="preserve">
          <source>TextInput#returnKeyType</source>
          <target state="translated">TextInput#returnKeyType</target>
        </trans-unit>
        <trans-unit id="9cb8528f926aee22bb7b60978c6a1b417d20c8cd" translate="yes" xml:space="preserve">
          <source>TextInput#secureTextEntry</source>
          <target state="translated">TextInput#secureTextEntry</target>
        </trans-unit>
        <trans-unit id="56387d0343ed84ecd1f7406b846517f0ebaefaa9" translate="yes" xml:space="preserve">
          <source>TextInput#selectTextOnFocus</source>
          <target state="translated">TextInput#selectTextOnFocus</target>
        </trans-unit>
        <trans-unit id="683c6cae4732e73ef0ed7da3008e693666cc7aa9" translate="yes" xml:space="preserve">
          <source>TextInput#selection</source>
          <target state="translated">TextInput#selection</target>
        </trans-unit>
        <trans-unit id="7f07636a844dbd13d5f17b4bf79d006bf65f6532" translate="yes" xml:space="preserve">
          <source>TextInput#selectionColor</source>
          <target state="translated">TextInput#selectionColor</target>
        </trans-unit>
        <trans-unit id="813cf9cc2a600775baaf4df236c2a1ece4b84fda" translate="yes" xml:space="preserve">
          <source>TextInput#selectionState</source>
          <target state="translated">TextInput#selectionState</target>
        </trans-unit>
        <trans-unit id="9c9342cbf35d00ceae8490e5952cee9f07a0353a" translate="yes" xml:space="preserve">
          <source>TextInput#spellCheck</source>
          <target state="translated">TextInput#spellCheck</target>
        </trans-unit>
        <trans-unit id="17fa34c340a284f138ed6791d90d6f1819e27e86" translate="yes" xml:space="preserve">
          <source>TextInput#style</source>
          <target state="translated">TextInput#style</target>
        </trans-unit>
        <trans-unit id="cfea93f40ec533ebe0a5fbbbcb0be7d4b8aba1fd" translate="yes" xml:space="preserve">
          <source>TextInput#textBreakStrategy</source>
          <target state="translated">TextInput#textBreakStrategy</target>
        </trans-unit>
        <trans-unit id="3823e0b281484b519274e44c50bfe8bcd62b89fc" translate="yes" xml:space="preserve">
          <source>TextInput#textContentType</source>
          <target state="translated">TextInput#textContentType</target>
        </trans-unit>
        <trans-unit id="c2f1d571cc1dc38ffbcf13899cc6e6820194fd7a" translate="yes" xml:space="preserve">
          <source>TextInput#underlineColorAndroid</source>
          <target state="translated">TextInput#underlineColorAndroid</target>
        </trans-unit>
        <trans-unit id="f47415806cbf61cd7f26e86532063ad0ad6788a4" translate="yes" xml:space="preserve">
          <source>TextInput#value</source>
          <target state="translated">TextInput#value</target>
        </trans-unit>
        <trans-unit id="b9d0a24d4f3442934667ffe906449c64977c8d92" translate="yes" xml:space="preserve">
          <source>TextInput.clear()</source>
          <target state="translated">TextInput.clear()</target>
        </trans-unit>
        <trans-unit id="dc112032cfd811093afb84b77b7793e1d70c9c40" translate="yes" xml:space="preserve">
          <source>TextInput.isFocused()</source>
          <target state="translated">TextInput.isFocused()</target>
        </trans-unit>
        <trans-unit id="da1acfac6c17674970b8e393431f09ea853f0850" translate="yes" xml:space="preserve">
          <source>Thanks for making the pull request, but we are closing it due to inactivity. If you want to get your proposed changes merged, please rebase your branch with master and send a new pull request.</source>
          <target state="translated">プルリクエストをしていただきありがとうございますが、活動休止中のためクローズしています。提案された変更をマージしてもらいたい場合は、masterでブランチをリベースして、新しいプルリクエストを送ってください。</target>
        </trans-unit>
        <trans-unit id="e93f4cf2c16977aa0828b84202ee64df60519c65" translate="yes" xml:space="preserve">
          <source>That's it!</source>
          <target state="translated">それだ!</target>
        </trans-unit>
        <trans-unit id="e55c8d6a3020fe886e1d39aa6a7e439952698f6c" translate="yes" xml:space="preserve">
          <source>That's it. We did not remove the &lt;code&gt;INTERNET&lt;/code&gt; permission as pretty much all apps use it. Now whenever you create a production APK all these 4 permissions will be removed. When you create a debug APK (&lt;code&gt;react-native run-android&lt;/code&gt;) it will install the APK with only the three permissions removed, and &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; will remain.</source>
          <target state="translated">それでおしまい。ほとんどすべてのアプリで使用されているため、 &lt;code&gt;INTERNET&lt;/code&gt; アクセス許可は削除しませんでした。これで、製品APKを作成するたびに、これらの4つの権限がすべて削除されます。デバッグAPK（ &lt;code&gt;react-native run-android&lt;/code&gt; ）を作成すると、3つの権限のみが削除されたAPKがインストールされ、 &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; が残ります。</target>
        </trans-unit>
        <trans-unit id="6080d90a81febb097c98ed7fa2f273fb55cf8412" translate="yes" xml:space="preserve">
          <source>The 'callback' function takes one parameter, the zero-based index of the selected item.</source>
          <target state="translated">コールバック」関数は1つのパラメータを取り、選択された項目のゼロベースのインデックスを取ります。</target>
        </trans-unit>
        <trans-unit id="24e54117e5c494ef260259e099f3fe33fbbf239a" translate="yes" xml:space="preserve">
          <source>The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional &lt;code&gt;stack&lt;/code&gt; property of type &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">'failureCallback'関数は、エラーオブジェクトという1つのパラメーターを取ります。このオブジェクトで定義されている唯一のプロパティは、 &lt;code&gt;string&lt;/code&gt; 型のオプションの &lt;code&gt;stack&lt;/code&gt; プロパティです。</target>
        </trans-unit>
        <trans-unit id="44c015d8837473f0f54a94bbbe1a489b83113a27" translate="yes" xml:space="preserve">
          <source>The 'showWithGravityAndOffset' function adds on the ability to specify offset These offset values will translate to pixels.</source>
          <target state="translated">showWithGravityAndOffset' 関数は、オフセットを指定する機能を追加しました。 これらのオフセット値はピクセルに変換されます。</target>
        </trans-unit>
        <trans-unit id="6f39a292b1eddb5636c7ab14123b16876fb25d18" translate="yes" xml:space="preserve">
          <source>The 'successCallback' function takes two parameters:</source>
          <target state="translated">successCallback' 関数は 2 つのパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="8bf8f7269f76092d7aef471e68eff6a8491a8718" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;animated&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; API is designed to make it very easy to concisely express a wide variety of interesting animation and interaction patterns in a very performant way. &lt;code&gt;Animated&lt;/code&gt; focuses on declarative relationships between inputs and outputs, with configurable transforms in between, and simple &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt; methods to control time-based animation execution.</source>
          <target state="translated">&lt;a href=&quot;animated&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt; APIは簡潔に非常にパフォーマンスのように面白いアニメーションとの相互作用のパターンの多種多様を表現するために非常に簡単にそれを作るために設計されています。 &lt;code&gt;Animated&lt;/code&gt; は、入力と出力の間の宣言的な関係に焦点を当て、その間の構成可能な変換と、時間ベースのアニメーション実行を制御するための単純な &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; メソッドを備えています。</target>
        </trans-unit>
        <trans-unit id="4c5982a502ab62e111c85a3f615073fd5b1d877b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;debugging#react-developer-tools&quot;&gt;React Developer Tools&lt;/a&gt; are great for debugging React and React Native apps.</source>
          <target state="translated">&lt;a href=&quot;debugging#react-developer-tools&quot;&gt;開発者ツールが反応&lt;/a&gt;反応し、ネイティブアプリのデバッグを反応させるのに最適です。</target>
        </trans-unit>
        <trans-unit id="7f28e384f786987743bbc97a993a87a3817c1e7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;easing#poly&quot;&gt;&lt;code&gt;poly&lt;/code&gt;&lt;/a&gt; function can be used to implement quartic, quintic, and other higher power functions.</source>
          <target state="translated">&lt;a href=&quot;easing#poly&quot;&gt; &lt;code&gt;poly&lt;/code&gt; &lt;/a&gt;機能は、四次五次、および他の高電力機能を実装するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e9e79f972a4e185717ca452e81bc8b0bbeb7db83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest API&lt;/a&gt; is built in to React Native. This means that you can use third party libraries such as &lt;a href=&quot;https://github.com/niftylettuce/frisbee&quot;&gt;frisbee&lt;/a&gt; or &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt; that depend on it, or you can use the XMLHttpRequest API directly if you prefer.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequestのAPIは、&lt;/a&gt;ネイティブを反応させることで構築されています。これは、それに依存する&lt;a href=&quot;https://github.com/niftylettuce/frisbee&quot;&gt;frisbee&lt;/a&gt;や&lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt;などのサードパーティライブラリを使用できること、または必要に応じてXMLHttpRequest APIを直接使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="6a3215e9e755d5dfeb85680b0770fe96018cd5ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://discuss.reactjs.org/&quot;&gt;forum at discuss.reactjs.org&lt;/a&gt; is a great place for discussion about best practices and application architecture as well as the future of React Native.</source>
          <target state="translated">&lt;a href=&quot;https://discuss.reactjs.org/&quot;&gt;Discussion.reactjs.org&lt;/a&gt;のフォーラムは、ベストプラクティスやアプリケーションアーキテクチャ、React Nativeの将来について話し合うのに最適な場所です。</target>
        </trans-unit>
        <trans-unit id="7767d6134433ed26fa9021bdcdae2607b1c47cc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;&lt;code&gt;facebook/react-native&lt;/code&gt;&lt;/a&gt; repository on GitHub contains a mirror of the React Native library used internally at Facebook. The GitHub repository is linked to Facebook's internal source control, and all changes made to the internal React Native project &lt;a href=&quot;https://github.com/facebook/react-native/commits/master&quot;&gt;get synced to the &lt;code&gt;master&lt;/code&gt; branch on GitHub&lt;/a&gt; on an ongoing basis. Having Facebook's internal source control serve as the source of truth allows engineers at Facebook outside of the React Native team to move fast and contritube from an environment they are comfortable in.</source>
          <target state="translated">GitHub の&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt; &lt;code&gt;facebook/react-native&lt;/code&gt; &lt;/a&gt;リポジトリには、Facebookで内部的に使用されているReact Nativeライブラリのミラーが含まれています。GitHubリポジトリはFacebookの内部ソース管理にリンクされており、内部のReact Nativeプロジェクトに加えられたすべての変更は、継続的&lt;a href=&quot;https://github.com/facebook/react-native/commits/master&quot;&gt;にGitHub &lt;/a&gt;の &lt;code&gt;master&lt;/code&gt; ブランチに同期されます。Facebookの内部ソース管理が真の情報源として機能することで、FacebookのエンジニアはReact Nativeチームの外にいて、快適な環境から素早く移動し、貢献することができます。</target>
        </trans-unit>
        <trans-unit id="3f498c9af7aadf6496e3e42d9b85b59c41ff62e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://twitter.com/reactjs&quot;&gt;React Twitter account&lt;/a&gt; covers both React and React Native. Follow the React Native &lt;a href=&quot;https://twitter.com/reactnative&quot;&gt;Twitter account&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react-native/blog/&quot;&gt;blog&lt;/a&gt; to find out what's happening in the world of React Native.</source>
          <target state="translated">&lt;a href=&quot;https://twitter.com/reactjs&quot;&gt;Twitterアカウントを反応させ、&lt;/a&gt;カバーを両方に反応し、ネイティブ反応します。React Nativeの&lt;a href=&quot;https://twitter.com/reactnative&quot;&gt;Twitterアカウント&lt;/a&gt;と&lt;a href=&quot;https://facebook.github.io/react-native/blog/&quot;&gt;ブログ&lt;/a&gt;をフォローして、React Native の世界で何が起こっているかを調べてください。</target>
        </trans-unit>
        <trans-unit id="6eab6f552bee74930768c7a6a83d475b633eecb1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scrollview&quot;&gt;ScrollView&lt;/a&gt; is a generic scrolling container that can host multiple components and views. The scrollable items need not be homogeneous, and you can scroll both vertically and horizontally (by setting the &lt;code&gt;horizontal&lt;/code&gt; property).</source>
          <target state="translated">&lt;a href=&quot;scrollview&quot;&gt;ScrollViewは、&lt;/a&gt;複数のコンポーネントとビューをホストすることができ、一般的なスクロールコンテナです。スクロール可能なアイテムは同種である必要はなく、（ &lt;code&gt;horizontal&lt;/code&gt; プロパティを設定することにより）垂直方向と水平方向の両方にスクロールできます。</target>
        </trans-unit>
        <trans-unit id="019ba09058d94cdfe07b47451523c4232e4049e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; element is special relative to layout: everything inside is no longer using the flexbox layout but using text layout. This means that elements inside of a &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; are no longer rectangles, but wrap when they see the end of the line.</source>
          <target state="translated">&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 要素は、レイアウトに特別な相対的ではありません：すべての内部には、もはやフレキシボックスのレイアウトを使用しますが、テキストのレイアウトを使用しています。つまり、 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 内の要素は長方形ではなく、行の終わりを見ると折り返されます。</target>
        </trans-unit>
        <trans-unit id="31e6e328bf618f065a57d83a16179606b8cb76ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AccessibilityInfo&lt;/code&gt; API allows you to determine whether or not a screen reader is currently active. See the &lt;a href=&quot;accessibilityinfo&quot;&gt;AccessibilityInfo documentation&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;AccessibilityInfo&lt;/code&gt; APIを使用すると、スクリーンリーダーが現在アクティブであるかどうかを判断することができます。詳細については、&lt;a href=&quot;accessibilityinfo&quot;&gt;AccessibilityInfoのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="992237d59098c3ffb9bd5d4da57082ead0db8e2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Animated&lt;/code&gt; API is designed to be serializable. By using the &lt;a href=&quot;http://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html&quot;&gt;native driver&lt;/a&gt;, we send everything about the animation to native before starting the animation, allowing native code to perform the animation on the UI thread without having to go through the bridge on every frame. Once the animation has started, the JS thread can be blocked without affecting the animation.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; APIは直列化可能になるように設計されています。&lt;a href=&quot;http://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html&quot;&gt;ネイティブドライバー&lt;/a&gt;を使用することにより、アニメーションを開始する前に、アニメーションに関するすべてをネイティブに送信します。これにより、ネイティブコードは、すべてのフレームのブリッジを経由することなく、UIスレッドでアニメーションを実行できます。アニメーションが開始されると、アニメーションに影響を与えることなくJSスレッドをブロックできます。</target>
        </trans-unit>
        <trans-unit id="8c147dfb9c4fd69046b04e85c0899a72ffd58adc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Animated&lt;/code&gt; library is designed to make animations fluid, powerful, and easy to build and maintain. &lt;code&gt;Animated&lt;/code&gt; focuses on declarative relationships between inputs and outputs, with configurable transforms in between, and simple &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt; methods to control time-based animation execution.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; ライブラリはアニメーションは、流体強力で、かつ簡単に構築し、維持できるように設計されています。 &lt;code&gt;Animated&lt;/code&gt; は、入力と出力の間の宣言的な関係に焦点を当て、その間の構成可能な変換と、時間ベースのアニメーション実行を制御するための単純な &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; メソッドを備えています。</target>
        </trans-unit>
        <trans-unit id="838d0eef79c469f7be1ef1efdad13fae666a0b3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncStorage&lt;/code&gt; JavaScript code is a simple facade that provides a clear JavaScript API, real &lt;code&gt;Error&lt;/code&gt; objects, and simple non-multi functions. Each method in the API returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;AsyncStorage&lt;/code&gt; JavaScriptコードは、明確なJavaScriptのAPIを提供し、単純なファサード、本物である &lt;code&gt;Error&lt;/code&gt; オブジェクト、および簡単な非マルチ機能。APIの各メソッドは &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="db60d8e8e420e046bac2940142c1119a61791ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Easing&lt;/code&gt; module implements common easing functions. This module is used by &lt;a href=&quot;animated#timing&quot;&gt;Animated.timing()&lt;/a&gt; to convey physically believable motion in animations.</source>
          <target state="translated">&lt;code&gt;Easing&lt;/code&gt; モジュールの実装は、一般的な機能を容易に。このモジュールは、&lt;a href=&quot;animated#timing&quot;&gt;Animated.timing（）&lt;/a&gt;によって使用され、物理的に信頼できるモーションをアニメーションで伝えます。</target>
        </trans-unit>
        <trans-unit id="a0c907ccba8dc64a79bba191474dfec3878dcaa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Easing&lt;/code&gt; module provides several predefined animations through the following methods:</source>
          <target state="translated">&lt;code&gt;Easing&lt;/code&gt; モジュールは、以下の方法により、いくつかの事前定義されたアニメーションを提供します。</target>
        </trans-unit>
        <trans-unit id="de603da1d3fd2216bdae2451ad3ed9dc395b97aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatList&lt;/code&gt; component displays a scrolling list of changing, but similarly structured, data. &lt;code&gt;FlatList&lt;/code&gt; works well for long lists of data, where the number of items might change over time. Unlike the more generic &lt;a href=&quot;using-a-scrollview&quot;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;FlatList&lt;/code&gt; only renders elements that are currently showing on the screen, not all the elements at once.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; 成分ディスプレイ変更のスクロール・リストが、同様の構成、データ。 &lt;code&gt;FlatList&lt;/code&gt; は、項目数が時間の経過とともに変化する可能性がある、データの長いリストに適しています。より一般的なとは異なり&lt;a href=&quot;using-a-scrollview&quot;&gt; &lt;code&gt;ScrollView&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;FlatList&lt;/code&gt; は唯一、現在ではないすべての要素を一度に、画面に表示されている要素をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="6ada2a76971bcdc889aa6fdb02b63d36ede5c0ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatList&lt;/code&gt; component requires two props: &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;renderItem&lt;/code&gt;. &lt;code&gt;data&lt;/code&gt; is the source of information for the list. &lt;code&gt;renderItem&lt;/code&gt; takes one item from the source and returns a formatted component to render.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; コンポーネントには、 &lt;code&gt;data&lt;/code&gt; と &lt;code&gt;renderItem&lt;/code&gt; の 2つのプロパティが必要です。 &lt;code&gt;data&lt;/code&gt; はリストの情報源です。 &lt;code&gt;renderItem&lt;/code&gt; はソースから1つのアイテムを取り、レンダリングするフォーマット済みコンポーネントを返します。</target>
        </trans-unit>
        <trans-unit id="aa2d6ff751205e977e6681dc333a916e5ef8798e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Podfile&lt;/code&gt; will contain a boilerplate setup that you will tweak for your integration purposes. In the end, &lt;code&gt;Podfile&lt;/code&gt; should look something similar to this:</source>
          <target state="translated">&lt;code&gt;Podfile&lt;/code&gt; は、あなたの統合のために微調整します定型の設定が含まれています。最終的に、 &lt;code&gt;Podfile&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="21493eb99bd77ff635aaf2cc6725c0361c82d6fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; implementation uses &lt;code&gt;setImmediate&lt;/code&gt; as its asynchronicity primitive.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 実装が使用しています &lt;code&gt;setImmediate&lt;/code&gt; をその非同期プリミティブとして。</target>
        </trans-unit>
        <trans-unit id="9f57f6849264e3c7bd4eb1912bd142636a8a36a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RCTDatePickerIOSConsts&lt;/code&gt; constants are exported from native by grabbing the actual frame of the native component like so:</source>
          <target state="translated">&lt;code&gt;RCTDatePickerIOSConsts&lt;/code&gt; の定数はそうのような天然成分の実際のフレームをつかむことにより、ネイティブからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="f64f90185b94cf6ae96b552b642603cb1d68f23d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ViewToken&lt;/code&gt; type is exported by &lt;code&gt;ViewabilityHelper.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ViewToken&lt;/code&gt; のタイプは、によってエクスポートされ &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cfaa1846c5e7be2d6ffba4bc400bd7672d7c0d20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addListener&lt;/code&gt; function connects a JavaScript function to an identified native keyboard notification event.</source>
          <target state="translated">&lt;code&gt;addListener&lt;/code&gt; の機能が特定されているネイティブキーボードの通知イベントにJavaScript関数を接続しています。</target>
        </trans-unit>
        <trans-unit id="2be63025d666e244fa92a2449edc41cf725527d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;animationType&lt;/code&gt; prop controls how the modal animates.</source>
          <target state="translated">&lt;code&gt;animationType&lt;/code&gt; の小道具コントロールがどのようにモーダルアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="7e663d3352bd4af230ed6a2abb005537d9d4ad84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hardwareAccelerated&lt;/code&gt; prop controls whether to force hardware acceleration for the underlying window.</source>
          <target state="translated">&lt;code&gt;hardwareAccelerated&lt;/code&gt; か下地ウィンドウの力ハードウェアアクセラレーションに小道具を制御します。</target>
        </trans-unit>
        <trans-unit id="cecd566e7e09df18e77731887dfa11b7d29a5627" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialProperties&lt;/code&gt; are here for illustration purposes so we have some data for our high score screen. In our React Native component, we will use &lt;code&gt;this.props&lt;/code&gt; to get access to that data.</source>
          <target state="translated">&lt;code&gt;initialProperties&lt;/code&gt; は、我々はハイスコア画面のためのいくつかのデータを持っているので、説明の目的のためにここにいます。React Nativeコンポーネントでは、 &lt;code&gt;this.props&lt;/code&gt; を使用してそのデータにアクセスします。</target>
        </trans-unit>
        <trans-unit id="8b9b4323d8f1f8257fb3c54bc46f4a7d345f2004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interpolate()&lt;/code&gt; function allows input ranges to map to different output ranges. By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value. It uses lineal interpolation by default but also supports easing functions.</source>
          <target state="translated">&lt;code&gt;interpolate()&lt;/code&gt; 関数は、入力範囲が異なる出力範囲にマッピングすることを可能にします。デフォルトでは、指定された範囲を超えて曲線を外挿しますが、出力値をクランプすることもできます。デフォルトでは線形補間を使用しますが、イージング関数もサポートしています。</target>
        </trans-unit>
        <trans-unit id="7b484fdb057756de32d246de5fadffd833f20261" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;leader&lt;/code&gt; and &lt;code&gt;follower&lt;/code&gt; animated values would be implemented using &lt;code&gt;Animated.ValueXY()&lt;/code&gt;. &lt;code&gt;ValueXY&lt;/code&gt; is a handy way to deal with 2D interactions, such as panning or dragging. It is a simple wrapper that basically contains two &lt;code&gt;Animated.Value&lt;/code&gt; instances and some helper functions that call through to them, making &lt;code&gt;ValueXY&lt;/code&gt; a drop-in replacement for &lt;code&gt;Value&lt;/code&gt; in many cases. It allows us to track both x and y values in the example above.</source>
          <target state="translated">&lt;code&gt;leader&lt;/code&gt; と &lt;code&gt;follower&lt;/code&gt; 値を使用して実施されるアニメーション &lt;code&gt;Animated.ValueXY()&lt;/code&gt; 。 &lt;code&gt;ValueXY&lt;/code&gt; は、パンやドラッグなどの2Dインタラクションを処理する便利な方法です。これは基本的に2つの &lt;code&gt;Animated.Value&lt;/code&gt; インスタンスとそれらを呼び出すいくつかのヘルパー関数を含む単純なラッパーであり、多くの場合、 &lt;code&gt;ValueXY&lt;/code&gt; は &lt;code&gt;Value&lt;/code&gt; のドロップイン置換になります。上記の例では、x値とy値の両方を追跡できます。</target>
        </trans-unit>
        <trans-unit id="3e2823bfe7865551264688a14dc524bda6c6c04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;methodQueue&lt;/code&gt; method will be called once when the module is initialized, and then retained by the bridge, so there is no need to retain the queue yourself, unless you wish to make use of it within your module. However, if you wish to share the same queue between multiple modules then you will need to ensure that you retain and return the same queue instance for each of them; merely returning a queue of the same name for each won't work.</source>
          <target state="translated">&lt;code&gt;methodQueue&lt;/code&gt; の方法は、モジュールが初期化されるときに一度呼び出され、その後、ブリッジによって保持されますので、あなたがあなたのモジュール内で、それを利用することを希望する場合を除き、キュー自分自身を保持する必要はありません。ただし、複数のモジュール間で同じキューを共有する場合は、モジュールごとに同じキューインスタンスを保持して返すようにする必要があります。それぞれに対して同じ名前のキューを返すだけでは機能しません。</target>
        </trans-unit>
        <trans-unit id="ba06800dab3ea7169e19d71f06e51d51a6f5ad36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onDismiss&lt;/code&gt; prop allows passing a function that will be called once the modal has been dismissed.</source>
          <target state="translated">&lt;code&gt;onDismiss&lt;/code&gt; 小道具は、モーダルが却下された後に呼び出される関数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="22af4f6c8fa9a8459d70d1bfe9024eb3a0d5aeef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onOrientationChange&lt;/code&gt; callback is called when the orientation changes while the modal is being displayed. The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.</source>
          <target state="translated">&lt;code&gt;onOrientationChange&lt;/code&gt; のモーダルが表示されている間に向きが変化したときにコールバックが呼び出されます。提供される方向は、「縦」または「横」のみです。このコールバックは、現在の向きに関係なく、初期レンダリングでも呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4ceb7d8cbebe1074f7cde332280ad93d98e68a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onRequestClose&lt;/code&gt; callback is called when the user taps the hardware back button on Android or the menu button on Apple TV. Because of this required prop, be aware that &lt;code&gt;BackHandler&lt;/code&gt; events will not be emitted as long as the modal is open.</source>
          <target state="translated">&lt;code&gt;onRequestClose&lt;/code&gt; ユーザーは、Android上のハードウェアの戻るボタンまたはApple TVのメニューボタンをタップしたときにコールバックが呼び出されます。この必須の &lt;code&gt;BackHandler&lt;/code&gt; ため、モーダルが開いている限り、BackHandlerイベントは発行されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="16d45c61475deebfd8ff7357e406099d320a800b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onShow&lt;/code&gt; prop allows passing a function that will be called once the modal has been shown.</source>
          <target state="translated">&lt;code&gt;onShow&lt;/code&gt; 小道具はモーダルが示された後に呼び出される関数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f63b69aa936f9d64088fba49ac62784242b2349b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;presentationStyle&lt;/code&gt; prop controls how the modal appears (generally on larger devices such as iPad or plus-sized iPhones). See &lt;a href=&quot;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&quot;&gt;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;presentationStyle&lt;/code&gt; プロップコントロール（一般に、サイズプラスiPadやiPhoneのようなより大きなデバイス上の）方法モーダル現れます。詳細については、&lt;a href=&quot;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&quot;&gt;https：//developer.apple.com/reference/uikit/uimodalpresentationstyle&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="73d99501d071ea1931b564c8a4d3b926f2080155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;react-native-git-upgrade&lt;/code&gt; module provides a CLI and must be installed globally:</source>
          <target state="translated">&lt;code&gt;react-native-git-upgrade&lt;/code&gt; モジュールは、CLIを提供し、グローバルにインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="d56687b236a3206ec18dc5db4fd2184d7ddc53ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; syntax described above can be used to statically include audio, video or document files in your project as well. Most common file types are supported including &lt;code&gt;.mp3&lt;/code&gt;, &lt;code&gt;.wav&lt;/code&gt;, &lt;code&gt;.mp4&lt;/code&gt;, &lt;code&gt;.mov&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.pdf&lt;/code&gt;. See &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/util/Config.js#L68&quot;&gt;packager defaults&lt;/a&gt; for the full list.</source>
          <target state="translated">上記の &lt;code&gt;require&lt;/code&gt; 構文を使用して、プロジェクトにオーディオ、ビデオ、またはドキュメントファイルを静的に含めることもできます。 &lt;code&gt;.mp3&lt;/code&gt; 、 &lt;code&gt;.wav&lt;/code&gt; 、 &lt;code&gt;.mp4&lt;/code&gt; 、 &lt;code&gt;.mov&lt;/code&gt; 、 &lt;code&gt;.html&lt;/code&gt; 、 &lt;code&gt;.pdf&lt;/code&gt; など、最も一般的なファイルタイプがサポートされています。完全なリストについては、&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/util/Config.js#L68&quot;&gt;パッケージャのデフォルト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b95b6be280f5c1a0c88602d0aaf4f3b8d242d54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rowIdentities&lt;/code&gt; is a 2D array of identifiers for rows. ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...]. If not provided, it's assumed that the keys of the section data are the row identities.</source>
          <target state="translated">&lt;code&gt;rowIdentities&lt;/code&gt; は、行の識別子の2次元アレイです。すなわち。[['a1'、 'a2']、['b1'、 'b2'、 'b3']、...]。指定しない場合、セクションデータのキーは行IDであると見なされます。</target>
        </trans-unit>
        <trans-unit id="25dc8b0c046a6d61726fa16b0f209357274e8183" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;style&lt;/code&gt; prop can be a plain old JavaScript object. That's the simplest and what we usually use for example code. You can also pass an array of styles - the last style in the array has precedence, so you can use this to inherit styles.</source>
          <target state="translated">&lt;code&gt;style&lt;/code&gt; 小道具は、昔ながらのJavaScriptのオブジェクトにすることができます。これが最も簡単で、通常サンプルコードに使用します。スタイルの配列を渡すこともできます。配列の最後のスタイルが優先されるため、これを使用してスタイルを継承できます。</target>
        </trans-unit>
        <trans-unit id="f9266269f97688236752f488b5538f8ff18dfd4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supportedOrientations&lt;/code&gt; prop allows the modal to be rotated to any of the specified orientations. On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field. When using &lt;code&gt;presentationStyle&lt;/code&gt; of &lt;code&gt;pageSheet&lt;/code&gt; or &lt;code&gt;formSheet&lt;/code&gt;, this property will be ignored by iOS.</source>
          <target state="translated">&lt;code&gt;supportedOrientations&lt;/code&gt; プロップモーダルは、指定された向きのいずれかに回転させることを可能にします。iOSでも、モーダルはアプリのInfo.plistのUISupportedInterfaceOrientationsフィールドで指定されているものによって制限されます。 &lt;code&gt;pageSheet&lt;/code&gt; または &lt;code&gt;formSheet&lt;/code&gt; の &lt;code&gt;presentationStyle&lt;/code&gt; を使用する場合、このプロパティはiOSによって無視されます。</target>
        </trans-unit>
        <trans-unit id="12dc993adb59e81c5b74589e7afa69a5e98d28a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparent&lt;/code&gt; prop determines whether your modal will fill the entire view. Setting this to &lt;code&gt;true&lt;/code&gt; will render the modal over a transparent background.</source>
          <target state="translated">&lt;code&gt;transparent&lt;/code&gt; 小道具は、あなたのモーダルビュー全体を埋めるかどうかを決定します。これを &lt;code&gt;true&lt;/code&gt; に設定すると、モーダルが透明な背景の上にレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="0340383d69fb1020ed8e647955f682ae8fbe4fb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;visible&lt;/code&gt; prop determines whether your modal is visible.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; 小道具は、あなたのモーダルが表示されているかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="86d9dbb1b582ae40d8e1783e6f26131547dd4195" translate="yes" xml:space="preserve">
          <source>The Android unit tests do not run in an emulator. They just use a normal Java installation. The default macOS Java install is insufficient, you may need to install &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java 8 (JDK8)&lt;/a&gt;. You can type &lt;code&gt;javac -version&lt;/code&gt; in a terminal to see what version you have:</source>
          <target state="translated">Android単体テストはエミュレーターでは実行されません。通常のJavaインストールを使用するだけです。デフォルトのmacOS Javaインストールでは不十分です&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;。Java8（JDK8）の&lt;/a&gt;インストールが必要になる場合があります。あなたは入力でき &lt;code&gt;javac -version&lt;/code&gt; あなたが持っているバージョンを確認するために、端末に：</target>
        </trans-unit>
        <trans-unit id="3b1588a3390ab265f0d13c40edcff3074636e6e4" translate="yes" xml:space="preserve">
          <source>The Animated API currently calculates each keyframe on-demand on the JavaScript thread unless you &lt;a href=&quot;https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html#how-do-i-use-this-in-my-app&quot;&gt;set &lt;code&gt;useNativeDriver: true&lt;/code&gt;&lt;/a&gt;, while LayoutAnimation leverages Core Animation and is unaffected by JS thread and main thread frame drops.</source>
          <target state="translated">現在、Animated APIは、&lt;a href=&quot;https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html#how-do-i-use-this-in-my-app&quot;&gt; &lt;code&gt;useNativeDriver: true&lt;/code&gt; &lt;/a&gt;を設定しない限り、JavaScriptスレッドで各キーフレームをオンデマンドで計算しますが、LayoutAnimationはコアアニメーションを利用し、JSスレッドやメインスレッドフレームのドロップの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="62fbe28e1ecbb418fd2ca87a435d256e14c91d8f" translate="yes" xml:space="preserve">
          <source>The CalendarManager module is instantiated on the Objective-C side using a [CalendarManager new] call. The return type of bridge methods is always &lt;code&gt;void&lt;/code&gt;. React Native bridge is asynchronous, so the only way to pass a result to JavaScript is by using callbacks or emitting events (see below).</source>
          <target state="translated">CalendarManagerモジュールは、[CalendarManager new]呼び出しを使用してObjective-C側でインスタンス化されます。ブリッジメソッドの戻り値の型は常に &lt;code&gt;void&lt;/code&gt; です。React Nativeブリッジは非同期であるため、結果をJavaScriptに渡す唯一の方法は、コールバックを使用するか、イベントを発行することです（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="07008625f9c2f52c06be218dfb50406128a3287f" translate="yes" xml:space="preserve">
          <source>The Developer Menu is disabled in release (production) builds.</source>
          <target state="translated">リリース(本番)ビルドでは、開発者メニューは無効になっています。</target>
        </trans-unit>
        <trans-unit id="9ad9935fc1f4cbb15ca4bc69d648cf02ae6bc0e9" translate="yes" xml:space="preserve">
          <source>The Facebook GitHub Bot was used to allow members of the community to perform administrative actions such as labeling and closing issues. The bot is no longer necessary, as maintainers will be granted the necessary permissions to manage issues. If you are interested in maintaining the repo, please reach out to H&amp;eacute;ctor Ramos (@hramos) on GitHub.</source>
          <target state="translated">Facebook GitHubボットは、コミュニティのメンバーが問題のラベル付けやクローズなどの管理アクションを実行できるようにするために使用されました。メンテナーには問題を管理するために必要な権限が付与されるため、ボットは不要になりました。リポジトリのメンテナンスに興味がある場合は、GitHubのH&amp;eacute;ctorRamos（@hramos）に連絡してください。</target>
        </trans-unit>
        <trans-unit id="b50a2ba1aca28cee75a1a5c1ae2f9119e17a953a" translate="yes" xml:space="preserve">
          <source>The Geolocation API extends the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation&quot;&gt;Geolocation web spec&lt;/a&gt;.</source>
          <target state="translated">Geolocation APIは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation&quot;&gt;Geolocation Web仕様を&lt;/a&gt;拡張します。</target>
        </trans-unit>
        <trans-unit id="0787c007008eff3b8c52ccc7660ec76c7b554958" translate="yes" xml:space="preserve">
          <source>The JS API</source>
          <target state="translated">JS API</target>
        </trans-unit>
        <trans-unit id="9ae4341f130a124d6b987ae6abc8891876c21f60" translate="yes" xml:space="preserve">
          <source>The Java API</source>
          <target state="translated">Java API</target>
        </trans-unit>
        <trans-unit id="f4ce28826126c85a8eaaaba1f5ba70796c227938" translate="yes" xml:space="preserve">
          <source>The JavaScript counterpart of this method returns a Promise. This means you can use the &lt;code&gt;await&lt;/code&gt; keyword within an async function to call it and wait for its result:</source>
          <target state="translated">このメソッドの対応するJavaScriptはPromiseを返します。つまり、非同期関数内で &lt;code&gt;await&lt;/code&gt; キーワードを使用して、それを呼び出し、その結果を待つことができます。</target>
        </trans-unit>
        <trans-unit id="81dabcfcd4b5e905eb29ad82fb0c89657ebbd03d" translate="yes" xml:space="preserve">
          <source>The Keyboard module allows you to listen for native events and react to them, as well as make changes to the keyboard, like dismissing it.</source>
          <target state="translated">Keyboardモジュールでは、ネイティブイベントをリッスンしてそれに反応したり、キーボードを解除するなどの変更を行うことができます。</target>
        </trans-unit>
        <trans-unit id="505d8367b6af55ff0ca263eaa28304dcf0fef70a" translate="yes" xml:space="preserve">
          <source>The Magic: &lt;code&gt;RCTRootView&lt;/code&gt;</source>
          <target state="translated">マジック： &lt;code&gt;RCTRootView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d7b77441a250ed5052f005826acd7ae8e9adbc9" translate="yes" xml:space="preserve">
          <source>The Magic: &lt;code&gt;ReactRootView&lt;/code&gt;</source>
          <target state="translated">マジック： &lt;code&gt;ReactRootView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0537cac877d5dbdf4afe26e07526115c1c97035f" translate="yes" xml:space="preserve">
          <source>The Modal component is a simple way to present content above an enclosing view.</source>
          <target state="translated">モーダルコンポーネントは、囲んだビューの上にコンテンツを表示するシンプルな方法です。</target>
        </trans-unit>
        <trans-unit id="6a3ab81cdd1df975944732370cef371d355ea02d" translate="yes" xml:space="preserve">
          <source>The RNTester app has various examples of &lt;code&gt;Animated&lt;/code&gt; in use:</source>
          <target state="translated">RNTesterアプリには、使用中の &lt;code&gt;Animated&lt;/code&gt; さまざまな例があります。</target>
        </trans-unit>
        <trans-unit id="3c8577da6a4a042011ab64dee2c86bdc49a5357c" translate="yes" xml:space="preserve">
          <source>The RNTester app supports Apple TV; use the &lt;code&gt;RNTester-tvOS&lt;/code&gt; build target to build for tvOS.</source>
          <target state="translated">RNTesterアプリはApple TVをサポートしています。 &lt;code&gt;RNTester-tvOS&lt;/code&gt; ビルドターゲットを使用して、tvOS用にビルドします。</target>
        </trans-unit>
        <trans-unit id="4a1713bcf0b41c545ec5070e8560a7d0fdb8160d" translate="yes" xml:space="preserve">
          <source>The React Native CLI</source>
          <target state="translated">React Native CLI</target>
        </trans-unit>
        <trans-unit id="1bd1354d786b5956eb1776b0fd2d43e62f580db8" translate="yes" xml:space="preserve">
          <source>The React Native component</source>
          <target state="translated">React Nativeコンポーネント</target>
        </trans-unit>
        <trans-unit id="60b46d20bc98d8ec50ddeb1d02865fea3d2c5347" translate="yes" xml:space="preserve">
          <source>The React Native packager runs on port 8081. If another process is already using that port, you can either terminate that process, or change the port that the packager uses.</source>
          <target state="translated">React Native パッケージャーはポート 8081 で動作します。他のプロセスが既にそのポートを使用している場合は、そのプロセスを終了させるか、パッケージャーが使用するポートを変更することができます。</target>
        </trans-unit>
        <trans-unit id="f23a4e00712e9270a9522207ee08934fda35117c" translate="yes" xml:space="preserve">
          <source>The React Native repo has several tests you can run to verify you haven't caused a regression with your PR. These tests are run using &lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;Circle&lt;/a&gt;, a continuous integration system. Circle will automatically annotate pull requests with the test results.</source>
          <target state="translated">React Nativeリポジトリには、PRで回帰を引き起こしていないことを確認するために実行できるいくつかのテストがあります。これらのテストは、継続的インテグレーションシステムである&lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;Circle&lt;/a&gt;を使用して実行されます。Circleはプルリクエストにテスト結果を自動的に注釈します。</target>
        </trans-unit>
        <trans-unit id="dc6cc40db6e7fa2b228d13055b7c389acdaa30b2" translate="yes" xml:space="preserve">
          <source>The React Native tools require some environment variables to be set up in order to build apps with native code.</source>
          <target state="translated">React Nativeツールでは、ネイティブコードでアプリを構築するために、いくつかの環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="846b2dc8b25acd05a41b497a1547258c8865a9f8" translate="yes" xml:space="preserve">
          <source>The SDK Manager can also be found within the Android Studio &quot;Preferences&quot; dialog, under &lt;strong&gt;Appearance &amp;amp; Behavior&lt;/strong&gt; &amp;rarr; &lt;strong&gt;System Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Android SDK&lt;/strong&gt;.</source>
          <target state="translated">SDK Managerはまたの下で、Androidのメーカー「環境設定」ダイアログボックスの中に見つけることができます&lt;strong&gt;外観＆行動&lt;/strong&gt; &amp;rarr; &lt;strong&gt;システム設定&lt;/strong&gt; &amp;rarr; &lt;strong&gt;AndroidのSDK&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ea66f4613c985554e6d46984a68565d9de0c6837" translate="yes" xml:space="preserve">
          <source>The SDK Manager can be accessed from the &quot;Welcome to Android Studio&quot; screen. Click on &quot;Configure&quot;, then select &quot;SDK Manager&quot;.</source>
          <target state="translated">SDKマネージャーは、「Android Studioへようこそ」画面からアクセスできます。設定」をクリックし、「SDKマネージャー」を選択します。</target>
        </trans-unit>
        <trans-unit id="9534a45514d8132daa975ae1eafa2a43af4bcfc5" translate="yes" xml:space="preserve">
          <source>The SDK is installed, by default, at the following location:</source>
          <target state="translated">SDKは、デフォルトでは以下の場所にインストールされます。</target>
        </trans-unit>
        <trans-unit id="893c7f67380120bd0fc5f2de79db4b387c5e875c" translate="yes" xml:space="preserve">
          <source>The ScrollView works best to present a small amount of things of a limited size. All the elements and views of a &lt;code&gt;ScrollView&lt;/code&gt; are rendered, even if they are not currently shown on the screen. If you have a long list of more items than can fit on the screen, you should use a &lt;code&gt;FlatList&lt;/code&gt; instead. So let's &lt;a href=&quot;using-a-listview&quot;&gt;learn about list views&lt;/a&gt; next.</source>
          <target state="translated">ScrollViewは、限られたサイズの少量のものを表示するのに最適です。 &lt;code&gt;ScrollView&lt;/code&gt; のすべての要素とビューは、現在画面に表示されていなくてもレンダリングされます。画面に収まりきらないアイテムの長いリストがある場合は、代わりに &lt;code&gt;FlatList&lt;/code&gt; を使用する必要があります。それでは、次に&lt;a href=&quot;using-a-listview&quot;&gt;リストビューについて学び&lt;/a&gt;ましょう。</target>
        </trans-unit>
        <trans-unit id="c1c4bc8d04d3e6b646c9fe548b8be5454e9e5bd1" translate="yes" xml:space="preserve">
          <source>The Toast Module</source>
          <target state="translated">トーストモジュール</target>
        </trans-unit>
        <trans-unit id="c0f5750b5c0a4e3fdbbf3c6a5dea9ed4f789ee22" translate="yes" xml:space="preserve">
          <source>The URL to open.</source>
          <target state="translated">開くURLです。</target>
        </trans-unit>
        <trans-unit id="caf03acaa75d68377a6e2af2ecb0e7a7f171601e" translate="yes" xml:space="preserve">
          <source>The Vibration API is exposed at &lt;code&gt;Vibration.vibrate()&lt;/code&gt;. The vibration is asynchronous so this method will return immediately.</source>
          <target state="translated">Vibration APIは &lt;code&gt;Vibration.vibrate()&lt;/code&gt; で公開されています。振動は非同期であるため、このメソッドはすぐに戻ります。</target>
        </trans-unit>
        <trans-unit id="1f8d6ff10078074f00191439939ab39467bceaa2" translate="yes" xml:space="preserve">
          <source>The Vibration API is exposed at &lt;code&gt;VibrationIOS.vibrate()&lt;/code&gt;. On iOS, calling this function will trigger a one second vibration. The vibration is asynchronous so this method will return immediately.</source>
          <target state="translated">Vibration APIは &lt;code&gt;VibrationIOS.vibrate()&lt;/code&gt; で公開されています。iOSでは、この関数を呼び出すと1秒のバイブレーションがトリガーされます。振動は非同期であるため、このメソッドはすぐに戻ります。</target>
        </trans-unit>
        <trans-unit id="44aff4ce641012c993c80d4fe100b14c5e7e250a" translate="yes" xml:space="preserve">
          <source>The View is now responding for touch events. This is the time to highlight and show the user what is happening.</source>
          <target state="translated">ビューがタッチイベントに反応するようになりました。この時こそ、何が起こっているのかをハイライトしてユーザーに見せることができます。</target>
        </trans-unit>
        <trans-unit id="007fb43d0830e4aa85e4cb52c6dfe8f34962890a" translate="yes" xml:space="preserve">
          <source>The above command will automatically run your app on the iOS Simulator by default. If you want to run the app on an actual physical iOS device, please follow the instructions &lt;a href=&quot;running-on-device&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">上記のコマンドは、デフォルトでiOSシミュレーターでアプリを自動的に実行します。あなたは、実際の物理的なiOSデバイス上でアプリケーションを実行したい場合は、指示に従ってください&lt;a href=&quot;running-on-device&quot;&gt;ここに&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e82ba2fde92bfbf2b714c33de2998b218c94080" translate="yes" xml:space="preserve">
          <source>The above examples show how you can make a request. In many cases, you will want to do something with the response.</source>
          <target state="translated">上記の例では、リクエストの仕方を紹介しました。多くの場合、レスポンスで何かをしたいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="19503d7e2267c6c194fa4746886e8da7d1f876be" translate="yes" xml:space="preserve">
          <source>The above will configure Stetho v1.5.0. You can check at &lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;http://facebook.github.io/stetho/&lt;/a&gt; if a newer version is available.</source>
          <target state="translated">上記はStetho v1.5.0を設定します。新しいバージョンが利用可能かどうかは、&lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;http：//facebook.github.io/stetho/で&lt;/a&gt;確認できます。</target>
        </trans-unit>
        <trans-unit id="f2b4fe6c2cc64decf98a5c1ae5373ead8a757f21" translate="yes" xml:space="preserve">
          <source>The actual data to render, akin to the &lt;code&gt;data&lt;/code&gt; prop in &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;FlatList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">似てレンダリングする実際のデータ、 &lt;code&gt;data&lt;/code&gt; で小道具&lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;FlatList&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83eb476e82dab922f1ff49ecff3b7260c0f5eb7b" translate="yes" xml:space="preserve">
          <source>The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to &lt;code&gt;{top: 0, left: 0, bottom: 0, right: 0}&lt;/code&gt;.</source>
          <target state="translated">スクロールビューのコンテンツがスクロールビューの端から挿入される量。デフォルトは &lt;code&gt;{top: 0, left: 0, bottom: 0, right: 0}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fa349c1a56437d813c481e56f564c8c95f42629e" translate="yes" xml:space="preserve">
          <source>The amount by which the scroll view indicators are inset from the edges of the scroll view. This should normally be set to the same value as the &lt;code&gt;contentInset&lt;/code&gt;. Defaults to &lt;code&gt;{0, 0, 0, 0}&lt;/code&gt;.</source>
          <target state="translated">スクロールビューインジケーターがスクロールビューの端から挿入される量。通常、これは &lt;code&gt;contentInset&lt;/code&gt; と同じ値に設定する必要があります。デフォルトは &lt;code&gt;{0, 0, 0, 0}&lt;/code&gt; 0、0、0、0 }です。</target>
        </trans-unit>
        <trans-unit id="b833d2ce3772f4f0a562c22c2b9d37507aa2a0f6" translate="yes" xml:space="preserve">
          <source>The amount by which the web view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</source>
          <target state="translated">ウェブビューのコンテンツをスクロールビューの端から挿入する量を指定します。デフォルトは{top.top:0,left:0,bottom.0,右:0}です。</target>
        </trans-unit>
        <trans-unit id="2177fbdcf1769660b4b6c4b249c6028aef969a3f" translate="yes" xml:space="preserve">
          <source>The available keys for the &lt;code&gt;options&lt;/code&gt; object are:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; オブジェクトで使用できるキーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8cbb2dda4399e0fb2fd18825b12855dadd0de4cf" translate="yes" xml:space="preserve">
          <source>The background color of the refresh indicator.</source>
          <target state="translated">リフレッシュインジケータの背景色。</target>
        </trans-unit>
        <trans-unit id="e03f5b1cf1755ca492e2aeba5b9c21dcaa41c376" translate="yes" xml:space="preserve">
          <source>The background color of the status bar.</source>
          <target state="translated">ステータスバーの背景色。</target>
        </trans-unit>
        <trans-unit id="3c18f66b86b18c1525b72494f1df2d570d63cc93" translate="yes" xml:space="preserve">
          <source>The bridge initializes any registered RCTBridgeModules automatically, however you may wish to instantiate your own module instances (so you may inject dependencies, for example).</source>
          <target state="translated">ブリッジは登録されたRCTBridgeModulesを自動的に初期化しますが、独自のモジュールインスタンスをインスタンス化したいと思うかもしれません(例えば、依存性を注入することができます)。</target>
        </trans-unit>
        <trans-unit id="5a7ca8aad43a7c1c289a3cd5a27d22ded6a10b38" translate="yes" xml:space="preserve">
          <source>The change event name.</source>
          <target state="translated">変更イベント名です。</target>
        </trans-unit>
        <trans-unit id="45f4cc1332ec9b3e0abd4e5f40a6465b28e10ee2" translate="yes" xml:space="preserve">
          <source>The code above adds a &lt;code&gt;_handleNavigationRequest&lt;/code&gt; private method that is invoked from the &lt;code&gt;NavigatorIOS&lt;/code&gt; component when the right navigation bar item is pressed. To get access to the navigator functionality, a reference to it is saved in the &lt;code&gt;ref&lt;/code&gt; prop and later referenced to push a new scene into the navigation stack.</source>
          <target state="translated">上記のコードは、右側のナビゲーションバー項目が押されたときに &lt;code&gt;NavigatorIOS&lt;/code&gt; コンポーネントから呼び出される &lt;code&gt;_handleNavigationRequest&lt;/code&gt; プライベートメソッドを追加します。ナビゲーター機能にアクセスするために、ナビゲーターへの参照が &lt;code&gt;ref&lt;/code&gt; プロップに保存され、後で参照されて新しいシーンがナビゲーションスタックにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="6e8dc02211742dde009ce948ab738d8506229056" translate="yes" xml:space="preserve">
          <source>The color of the &lt;code&gt;TextInput&lt;/code&gt; underline.</source>
          <target state="translated">&lt;code&gt;TextInput&lt;/code&gt; 下線の色。</target>
        </trans-unit>
        <trans-unit id="5ee59cf8f04d002b4cadc4e0e89545fe3a8bd202" translate="yes" xml:space="preserve">
          <source>The color of the refresh indicator.</source>
          <target state="translated">リフレッシュインジケーターの色です。</target>
        </trans-unit>
        <trans-unit id="c3565cd21b2872d4f3d9642f100bf29f4e1128e1" translate="yes" xml:space="preserve">
          <source>The color of the underlay that will show through when the touch is active.</source>
          <target state="translated">タッチがアクティブなときに透けて見える下敷きの色。</target>
        </trans-unit>
        <trans-unit id="d12f9ef2f382c8fdeb436b8f4fde77341213d0c7" translate="yes" xml:space="preserve">
          <source>The color used for the track to the left of the button. Overrides the default blue gradient image on iOS.</source>
          <target state="translated">ボタンの左側のトラックに使用される色です。iOSのデフォルトの青のグラデーション画像を上書きします。</target>
        </trans-unit>
        <trans-unit id="e6181bcdc78752c9916a7f71ab582ee16d905bc8" translate="yes" xml:space="preserve">
          <source>The color used for the track to the right of the button. Overrides the default gray gradient image on iOS.</source>
          <target state="translated">ボタンの右側のトラックに使用される色。iOSのデフォルトのグレーグラデーション画像を上書きします。</target>
        </trans-unit>
        <trans-unit id="afabd6fe8970895298517bc90aec1b090b28239e" translate="yes" xml:space="preserve">
          <source>The colors (at least one) that will be used to draw the refresh indicator.</source>
          <target state="translated">リフレッシュインジケータを描画するために使用される色(少なくとも1つ)。</target>
        </trans-unit>
        <trans-unit id="c8bc08b3e7ea5d5b5018045a4f8abcb54cbdeab3" translate="yes" xml:space="preserve">
          <source>The command name identifies the parameters that a command would expect. When the command parameter is surrounded by greater-than, less-than symbols &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt;, this indicates that the parameter is expected. When a parameter is surrounded by brackets &lt;code&gt;[ ]&lt;/code&gt;, this indicates that the parameter is optional.</source>
          <target state="translated">コマンド名は、コマンドが予期するパラメータを識別します。コマンド・パラメーターが大なり記号、小なり記号 &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; で囲まれている場合、これはパラメーターが予期されていることを示しています。パラメータが角括弧 &lt;code&gt;[ ]&lt;/code&gt; で囲まれている場合、これはパラメータがオプションであることを示しています。</target>
        </trans-unit>
        <trans-unit id="5cb5c64090454c0c777cd0e805871882b50a3e59" translate="yes" xml:space="preserve">
          <source>The common pattern we use when embedding native in React Native is to make the native component's RCTViewManager a delegate for the views, sending events back to JavaScript via the bridge. This keeps related event calls in one place.</source>
          <target state="translated">React Native にネイティブを埋め込む際に使用する一般的なパターンは、ネイティブコンポーネントの RCTViewManager をビューのデリゲートにして、ブリッジを介して JavaScript にイベントを送り返すというものです。これにより、関連するイベントの呼び出しを一箇所にまとめておくことができます。</target>
        </trans-unit>
        <trans-unit id="b6b13aa3635472311d2d6e1d7e8954dc1de874a5" translate="yes" xml:space="preserve">
          <source>The community solution to navigation is a standalone library that allows developers to set up the screens of an app with just a few lines of code.</source>
          <target state="translated">ナビゲーションのコミュニティソリューションは、開発者が数行のコードでアプリの画面を設定できるスタンドアロンライブラリです。</target>
        </trans-unit>
        <trans-unit id="69c141ef736909141f287b6a6286f78f44509fd2" translate="yes" xml:space="preserve">
          <source>The constructor takes in a params argument that can contain any of the following:</source>
          <target state="translated">コンストラクタは、以下のいずれかを含むことができる params 引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="94d17bb69d28f91b17d9ae78a963106f9291aa73" translate="yes" xml:space="preserve">
          <source>The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.</source>
          <target state="translated">コンテンツのインセットは、ナビゲーションボタンとメニュー以外のツールバーコンテンツの有効領域に影響を与えます。インセットは、これらのコンポーネントの最小マージンを定義し、よく知られているグリッドラインに沿ってツールバーのコンテンツを効果的に配置するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e1e41abdd048a9ccc7b6b18d29f6eb4eeda2c2c3" translate="yes" xml:space="preserve">
          <source>The content was successfully shared.</source>
          <target state="translated">無事に内容を共有することができました。</target>
        </trans-unit>
        <trans-unit id="b938b60cf6ccfe7afbe5434375a8f25ecf692570" translate="yes" xml:space="preserve">
          <source>The core team will be monitoring for pull requests. Read &lt;a href=&quot;maintainers#handling-pull-requests&quot;&gt;what to expect from maintainers&lt;/a&gt; to understand what may happen after you open a pull request.</source>
          <target state="translated">コアチームはプルリクエストを監視します。&lt;a href=&quot;maintainers#handling-pull-requests&quot;&gt;メンテナに期待することを&lt;/a&gt;読んで、プルリクエストを開いた後に何が起こるかを理解してください。</target>
        </trans-unit>
        <trans-unit id="8b1c9393a2d305ef587e5171a25a3b1e5e12d965" translate="yes" xml:space="preserve">
          <source>The core team will be monitoring for pull requests. When we get one, we'll run some Facebook-specific integration tests on it first. From here, we'll need to get another person to sign off on the changes and then merge the pull request. For API changes we may need to fix internal uses, which could cause some delay. We'll do our best to provide updates and feedback throughout the process.</source>
          <target state="translated">コアチームはプルリクエストを監視しています。プルリクエストが来たら、まずFacebookに特化した統合テストを実行します。ここからは、別の人に変更のサインオフをしてもらい、プルリクエストをマージする必要があります。API の変更については、内部での使用を修正する必要があるかもしれないので、多少の遅延が発生する可能性があります。プロセスを通してアップデートとフィードバックを提供できるように最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="69370ead0af92daa61e7dd3afe76b7b9226f7e9b" translate="yes" xml:space="preserve">
          <source>The current scale of the scroll view content. The default value is 1.0.</source>
          <target state="translated">スクロールビューのコンテンツの現在のスケール。デフォルト値は 1.0 です。</target>
        </trans-unit>
        <trans-unit id="189d819788cb7129f34b4f19db137231c96f862f" translate="yes" xml:space="preserve">
          <source>The currently selected date.</source>
          <target state="translated">現在選択されている日付。</target>
        </trans-unit>
        <trans-unit id="d2131260c4a24598e3cba9f270e85308a43e59d1" translate="yes" xml:space="preserve">
          <source>The currently supported formats are &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;jpg&lt;/code&gt;, &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;bmp&lt;/code&gt;, &lt;code&gt;gif&lt;/code&gt;, &lt;code&gt;webp&lt;/code&gt; (Android only), &lt;code&gt;psd&lt;/code&gt; (iOS only).</source>
          <target state="translated">現在サポートされている形式は、 &lt;code&gt;png&lt;/code&gt; 、 &lt;code&gt;jpg&lt;/code&gt; 、 &lt;code&gt;jpeg&lt;/code&gt; 、 &lt;code&gt;bmp&lt;/code&gt; 、 &lt;code&gt;gif&lt;/code&gt; 、 &lt;code&gt;webp&lt;/code&gt; （Androidのみ）、 &lt;code&gt;psd&lt;/code&gt; （iOSのみ）です。</target>
        </trans-unit>
        <trans-unit id="f33bf7802d824a734ab74c6f8f739b9bf465bc3f" translate="yes" xml:space="preserve">
          <source>The data for rendering items in this section. Array of objects, much like &lt;a href=&quot;flatlist#data&quot;&gt;&lt;code&gt;FlatList&lt;/code&gt;'s data prop&lt;/a&gt;.</source>
          <target state="translated">このセクションのアイテムをレンダリングするためのデータ。&lt;a href=&quot;flatlist#data&quot;&gt; &lt;code&gt;FlatList&lt;/code&gt; のデータプロパティ&lt;/a&gt;によく似たオブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="721c8884815f348d6ecb022a9fb505a1a317b917" translate="yes" xml:space="preserve">
          <source>The date picker mode.</source>
          <target state="translated">日付ピッカーモードです。</target>
        </trans-unit>
        <trans-unit id="efd3b77cb55246a2c4204e13156ff3455e8db6c4" translate="yes" xml:space="preserve">
          <source>The debugger will receive a list of all project roots, separated by a space. For example, if you set &lt;code&gt;REACT_DEBUGGER=&quot;node /path/to/launchDebugger.js --port 2345 --type ReactNative&quot;&lt;/code&gt;, then the command &lt;code&gt;node /path/to/launchDebugger.js --port 2345 --type ReactNative /path/to/reactNative/app&lt;/code&gt; will be used to start your debugger.</source>
          <target state="translated">デバッガーは、スペースで区切られたすべてのプロジェクトルートのリストを受け取ります。たとえば、 &lt;code&gt;REACT_DEBUGGER=&quot;node /path/to/launchDebugger.js --port 2345 --type ReactNative&quot;&lt;/code&gt; を設定した場合、コマンド &lt;code&gt;node /path/to/launchDebugger.js --port 2345 --type ReactNative /path/to/reactNative/app&lt;/code&gt; はデバッガーを起動するために使用されます。</target>
        </trans-unit>
        <trans-unit id="187f1fc57bb7fee83c69d4712eaa1bfd310814e7" translate="yes" xml:space="preserve">
          <source>The default accessor functions assume this is an array of objects with shape &lt;code&gt;{key: string}&lt;/code&gt; but you can override &lt;code&gt;getItem&lt;/code&gt;, &lt;code&gt;getItemCount&lt;/code&gt;, and &lt;code&gt;keyExtractor&lt;/code&gt; to handle any type of index-based data.</source>
          <target state="translated">デフォルトのアクセッサ関数は、この形状を持つオブジェクトの配列であると仮定する &lt;code&gt;{key: string}&lt;/code&gt; が、オーバーライドすることができる &lt;code&gt;getItem&lt;/code&gt; 、 &lt;code&gt;getItemCount&lt;/code&gt; 、及び &lt;code&gt;keyExtractor&lt;/code&gt; をインデックスベースの任意のタイプのデータを処理します。</target>
        </trans-unit>
        <trans-unit id="d21e42b542810f976858e9c193dd5dea6f38a59d" translate="yes" xml:space="preserve">
          <source>The default background color of the navigation bar.</source>
          <target state="translated">ナビゲーションバーのデフォルトの背景色。</target>
        </trans-unit>
        <trans-unit id="0993da60f25edae4e6cb1899b5d69398e152ff2d" translate="yes" xml:space="preserve">
          <source>The default color used for the buttons in the navigation bar.</source>
          <target state="translated">ナビゲーションバーのボタンに使用されるデフォルトの色。</target>
        </trans-unit>
        <trans-unit id="a8384720909edef346e851d5b257194b1558cdd8" translate="yes" xml:space="preserve">
          <source>The default extractor expects data of one of the following forms:</source>
          <target state="translated">デフォルトの抽出器は、以下のいずれかの形式のデータを期待しています。</target>
        </trans-unit>
        <trans-unit id="41c2d6fee3f5794643529d5aac3e5bf4be04874e" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;tail&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;tail&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2185216ec6ee788486d7243373d90ca3594cfcd8" translate="yes" xml:space="preserve">
          <source>The default permissions that get added are:</source>
          <target state="translated">追加されるデフォルトのパーミッションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bbd45e70329d2e6a727a3be379cf1290582031c8" translate="yes" xml:space="preserve">
          <source>The default text color of the navigation bar title.</source>
          <target state="translated">ナビゲーションバーのタイトルのデフォルトのテキスト色。</target>
        </trans-unit>
        <trans-unit id="494276631b5f3b087181905257d4760f4e776c94" translate="yes" xml:space="preserve">
          <source>The default text in text input.</source>
          <target state="translated">テキスト入力のデフォルトのテキスト。</target>
        </trans-unit>
        <trans-unit id="4fd1614d4306cac3234a71f8aebade13c67d1368" translate="yes" xml:space="preserve">
          <source>The default wrapper style for components in the navigator. A common use case is to set the &lt;code&gt;backgroundColor&lt;/code&gt; for every scene.</source>
          <target state="translated">ナビゲーターのコンポーネントのデフォルトのラッパースタイル。一般的な使用例は、すべてのシーンに &lt;code&gt;backgroundColor&lt;/code&gt; を設定することです。</target>
        </trans-unit>
        <trans-unit id="308e2ddfaa04ffa90bfb01ac32302d9161d76d04" translate="yes" xml:space="preserve">
          <source>The device names correspond to the list of devices available in Xcode. You can check your available devices by running &lt;code&gt;xcrun simctl list devices&lt;/code&gt; from the console.</source>
          <target state="translated">デバイス名は、Xcodeで利用可能なデバイスのリストに対応しています。コンソールから &lt;code&gt;xcrun simctl list devices&lt;/code&gt; を実行すると、使用可能なデバイスを確認できます。</target>
        </trans-unit>
        <trans-unit id="a67b4a8fc2b1e7a8a584d9d3b0833044e93eeba5" translate="yes" xml:space="preserve">
          <source>The dialog has been dismissed.</source>
          <target state="translated">ダイアログが解除されました。</target>
        </trans-unit>
        <trans-unit id="22d13e56b1ec589d092e670c2d3116ecf6869efb" translate="yes" xml:space="preserve">
          <source>The dialog has been dismissed. @platform ios</source>
          <target state="translated">ダイアログが解除されました。プラットフォーム ios</target>
        </trans-unit>
        <trans-unit id="8688e1dc6946318c386fe5cc5186ddd541be7233" translate="yes" xml:space="preserve">
          <source>The dialog's title.</source>
          <target state="translated">ダイアログのタイトル。</target>
        </trans-unit>
        <trans-unit id="5a49bf3c3edc0df6bf46cdfb99659679f9e28c55" translate="yes" xml:space="preserve">
          <source>The dialog's title. Passing null or '' will hide the title.</source>
          <target state="translated">ダイアログのタイトル。nullまたは''を渡すとタイトルが非表示になります。</target>
        </trans-unit>
        <trans-unit id="5ba74ca11f6ca07d294b30b43727538a30b13434" translate="yes" xml:space="preserve">
          <source>The easiest way to install Xcode is via the &lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;Mac App Store&lt;/a&gt;. Installing Xcode will also install the iOS Simulator and all the necessary tools to build your iOS app.</source>
          <target state="translated">Xcodeをインストールする最も簡単な方法は、&lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;Mac App Storeを使用すること&lt;/a&gt;です。Xcodeをインストールすると、iOSシミュレータと、iOSアプリを構築するために必要なすべてのツールもインストールされます。</target>
        </trans-unit>
        <trans-unit id="a21eb16fa61a72014070b7e917662d58ec9b5551" translate="yes" xml:space="preserve">
          <source>The event subscriptions are called in reverse order (i.e. last registered subscription first), and if one subscription returns true then subscriptions registered earlier will not be called.</source>
          <target state="translated">イベントサブスクリプションは逆順に呼び出され (つまり、最後に登録されたサブスクリプションが最初に呼び出されます)、1 つのサブスクリプションが true を返す場合は、以前に登録されたサブスクリプションは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="2c58fb42292aac42bc8f6615a4a1236c1d90fc31" translate="yes" xml:space="preserve">
          <source>The fact that native modules are singletons limits the mechanism in the context of embedding. Let's say we have a React Native component embedded in a native view and we want to update the native, parent view. Using the native module mechanism, we would export a function that not only takes expected arguments, but also an identifier of the parent native view. The identifier would be used to retrieve a reference to the parent view to update. That said, we would need to keep a mapping from identifiers to native views in the module.</source>
          <target state="translated">ネイティブモジュールがシングルトンであるという事実は、埋め込みの文脈でのメカニズムを制限しています。例えば、React Native コンポーネントをネイティブビューに埋め込んでいて、ネイティブの親ビューを更新したいとします。ネイティブモジュールのメカニズムを使って、期待される引数だけでなく、親のネイティブビューの識別子も受け取る関数をエクスポートします。識別子は、更新する親ビューへの参照を取得するために使用されます。識別子からネイティブビューへのマッピングをモジュール内に保持しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="1b1abcbee252eb1c0ea3bbe1f74f3b750892b55f" translate="yes" xml:space="preserve">
          <source>The final Java step is to register the ViewManager to the application, this happens in a similar way to &lt;a href=&quot;native-modules-android&quot;&gt;Native Modules&lt;/a&gt;, via the applications package member function &lt;code&gt;createViewManagers.&lt;/code&gt;</source>
          <target state="translated">Javaの最後のステップは、アプリケーションにViewManagerを登録することです。これは、アプリケーションパッケージメンバー関数 &lt;code&gt;createViewManagers.&lt;/code&gt; 介して、&lt;a href=&quot;native-modules-android&quot;&gt;ネイティブモジュール&lt;/a&gt;と同様の方法で行われます。</target>
        </trans-unit>
        <trans-unit id="aea2211b3602d80b88b10e78044f2242e5076be6" translate="yes" xml:space="preserve">
          <source>The first bit of code we will write is the actual React Native code for the new &quot;High Score&quot; screen that will be integrated into our application.</source>
          <target state="translated">最初に書くコードは、アプリケーションに統合される新しい「ハイスコア」画面のための実際のReact Nativeコードです。</target>
        </trans-unit>
        <trans-unit id="3e31a0ab116e734974ca9f3bb524782a1fa4879a" translate="yes" xml:space="preserve">
          <source>The first step for debugging this jank is to answer the fundamental question of where your time is being spent during each 16ms frame. For that, we'll be using a standard Android profiling tool called &lt;code&gt;systrace&lt;/code&gt;.</source>
          <target state="translated">このジャンクをデバッグするための最初のステップは、各16ミリ秒フレームのどこで時間が費やされているかという基本的な質問に答えることです。そのために、 &lt;code&gt;systrace&lt;/code&gt; と呼ばれる標準のAndroidプロファイリングツールを使用します。</target>
        </trans-unit>
        <trans-unit id="039fa912693bf062ff5382cdf4de803cf73680fa" translate="yes" xml:space="preserve">
          <source>The first step is to install in your project:</source>
          <target state="translated">まずはプロジェクトにインストールします。</target>
        </trans-unit>
        <trans-unit id="4b91bfe31eef52e29d637012888f6db174d61a71" translate="yes" xml:space="preserve">
          <source>The first thing we can do to make this component more usable is to bridge over some native properties. Let's say we want to be able to disable zooming and specify the visible region. Disabling zoom is a simple boolean, so we add this one line:</source>
          <target state="translated">このコンポーネントをより使いやすくするために最初にできることは、いくつかのネイティブプロパティをブリッジすることです。例えば、ズームを無効にして表示領域を指定できるようにしたいとしましょう。ズームを無効にするのは単純なブール値なので、この一行を追加します。</target>
        </trans-unit>
        <trans-unit id="63881562a6f919ae3a78b4dfb56b128190dd0d76" translate="yes" xml:space="preserve">
          <source>The folks who built the app for Facebook's F8 conference also &lt;a href=&quot;https://github.com/fbsamples/f8app&quot;&gt;open-sourced the code&lt;/a&gt; and wrote up a &lt;a href=&quot;http://makeitopen.com/&quot;&gt;detailed series of tutorials&lt;/a&gt;. This is useful if you want a more in-depth example that's more realistic than most sample apps out there.</source>
          <target state="translated">FacebookのF8会議用にアプリを作成した人々も&lt;a href=&quot;https://github.com/fbsamples/f8app&quot;&gt;、コード&lt;/a&gt;をオープンソース化し、&lt;a href=&quot;http://makeitopen.com/&quot;&gt;詳細なチュートリアルシリーズを作成しました&lt;/a&gt;。これは、市販されているほとんどのサンプルアプリよりも現実的な、より詳細な例が必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="221632fa2f7cb525be495895e8ff449bee0e8fd0" translate="yes" xml:space="preserve">
          <source>The following argument types are supported for methods annotated with &lt;code&gt;@ReactMethod&lt;/code&gt; and they directly map to their JavaScript equivalents</source>
          <target state="translated">次の引数の型は、 &lt;code&gt;@ReactMethod&lt;/code&gt; アノテーションが付けられたメソッドでサポートされており、同等のJavaScriptに直接マップされます</target>
        </trans-unit>
        <trans-unit id="f439c6ef4e1a0ae57d846ec3d6e60df150551193" translate="yes" xml:space="preserve">
          <source>The following helpers are used to modify other easing functions.</source>
          <target state="translated">以下のヘルパーは、他のイージング関数を変更するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0bc06a063c30621d34184397a674775d958c6980" translate="yes" xml:space="preserve">
          <source>The following image demonstrates that you can put almost anything behind the mask. The three examples shown are masked &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">次の画像は、マスクの後ろにほとんど何でも置くことができることを示しています。示されている3つの例は、マスクされた &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eb7dfdd4d23add6b4f89b38e4a46d709d9ef6b28" translate="yes" xml:space="preserve">
          <source>The following is adapted from the excellent &lt;a href=&quot;https://opensource.guide/&quot;&gt;Open Source Guide&lt;/a&gt; from GitHub and reflects how the maintainers of React Native are encouraged to handle your contributions.</source>
          <target state="translated">以下は、GitHubの優れた&lt;a href=&quot;https://opensource.guide/&quot;&gt;オープンソースガイド&lt;/a&gt;からの抜粋であり、React Nativeのメンテナーがあなたの貢献を処理するよう奨励されている方法を反映しています。</target>
        </trans-unit>
        <trans-unit id="4f254b12eab595fa8027f4f8853fff7b40d5328e" translate="yes" xml:space="preserve">
          <source>The following values work across platforms:</source>
          <target state="translated">以下の値は、プラットフォームを超えて機能します。</target>
        </trans-unit>
        <trans-unit id="04930774ba9ab3abb21c8b866e6dc6d8da7f1b7a" translate="yes" xml:space="preserve">
          <source>The following values work on Android only:</source>
          <target state="translated">以下の値はAndroidのみで動作します。</target>
        </trans-unit>
        <trans-unit id="6f96a234ddf648b28b5199b0decbd2e929e98c2b" translate="yes" xml:space="preserve">
          <source>The following values work on iOS only:</source>
          <target state="translated">以下の値はiOSのみで動作します。</target>
        </trans-unit>
        <trans-unit id="77c97fc1195acdc67739a05ce53b9662a4830e71" translate="yes" xml:space="preserve">
          <source>The foreground color of the spinner (default is gray).</source>
          <target state="translated">スピナーの前景色 (デフォルトは灰色)。</target>
        </trans-unit>
        <trans-unit id="7df29c3006994f598facf9c754780a7a4a70c2d5" translate="yes" xml:space="preserve">
          <source>The friction/tension or bounciness/speed options match the spring model in &lt;a href=&quot;https://github.com/facebook/pop&quot;&gt;Facebook Pop&lt;/a&gt;, &lt;a href=&quot;http://facebook.github.io/rebound/&quot;&gt;Rebound&lt;/a&gt;, and &lt;a href=&quot;http://origami.design/&quot;&gt;Origami&lt;/a&gt;.</source>
          <target state="translated">摩擦/張力または弾力/速度のオプションは、&lt;a href=&quot;https://github.com/facebook/pop&quot;&gt;Facebook Pop&lt;/a&gt;、&lt;a href=&quot;http://facebook.github.io/rebound/&quot;&gt;Rebound&lt;/a&gt;、および&lt;a href=&quot;http://origami.design/&quot;&gt;Origami&lt;/a&gt;の春モデルと一致します。</target>
        </trans-unit>
        <trans-unit id="311a86822eda9c8d439ddb3168ab87e1332bc527" translate="yes" xml:space="preserve">
          <source>The function that will be called if the image was successfully found and width and height retrieved.</source>
          <target state="translated">画像が正常に検出され、幅と高さが取得された場合に呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="97e5a3af183dba8164127100bfab944978fe8cea" translate="yes" xml:space="preserve">
          <source>The function that will be called if there was an error, such as failing to retrieve the image.</source>
          <target state="translated">画像の取得に失敗したなどのエラーが発生した場合に呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="78be74f2cf30fef2c1637b6d49a49244d9b6e8d4" translate="yes" xml:space="preserve">
          <source>The function will be passed an object with the following keys:</source>
          <target state="translated">この関数には、以下のキーを持つオブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="fecd05060321962a49f809c752372294a085d1d1" translate="yes" xml:space="preserve">
          <source>The generated APK can be found under &lt;code&gt;android/app/build/outputs/apk/app-release.apk&lt;/code&gt;, and is ready to be distributed.</source>
          <target state="translated">生成されたAPKは &lt;code&gt;android/app/build/outputs/apk/app-release.apk&lt;/code&gt; にあり、配布する準備ができています。</target>
        </trans-unit>
        <trans-unit id="d92ae19b8995b8f955a69e7170c77900c21de1e0" translate="yes" xml:space="preserve">
          <source>The gesture responder system manages the lifecycle of gestures in your app. A touch can go through several phases as the app determines what the user's intention is. For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping. This can even change during the duration of a touch. There can also be multiple simultaneous touches.</source>
          <target state="translated">ジェスチャ レスポンダ システムは、アプリ内のジェスチャのライフサイクルを管理します。アプリがユーザーの意図を判断するため、タッチはいくつかの段階を経ることがあります。たとえば、アプリはタッチがスクロールしているのか、ウィジェット上でスライドしているのか、タップしているのかを判断する必要があります。これは、タッチの持続時間の間に変更されることもあります。また、複数の同時タッチも可能です。</target>
        </trans-unit>
        <trans-unit id="a3346f289bf62c95f547c1a51d6ff1295ea32e72" translate="yes" xml:space="preserve">
          <source>The header and footer are always rendered (if these props are provided) on every render pass. If they are expensive to re-render, wrap them in StaticContainer or other mechanism as appropriate. Footer is always at the bottom of the list, and header at the top, on every render pass. In a horizontal ListView, the header is rendered on the left and the footer on the right.</source>
          <target state="translated">ヘッダーとフッターは、レンダーパスごとに(これらの小道具が提供されている場合)常にレンダリングされます。再レンダリングに費用がかかる場合は、StaticContainer またはその他のメカニズムで適切にラップします。フッターは常にリストの一番下に、ヘッダーは一番上に表示されます。水平な ListView では、ヘッダは左に、フッタは右にレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="0bf23c80a6c29741ab70cd48daaa738389b8bbe9" translate="yes" xml:space="preserve">
          <source>The highlight and cursor color of the text input.</source>
          <target state="translated">テキスト入力のハイライトとカーソルの色。</target>
        </trans-unit>
        <trans-unit id="893347ca0e703f0904da2b7f97991e4061ac3634" translate="yes" xml:space="preserve">
          <source>The highlight color of the text.</source>
          <target state="translated">テキストのハイライトカラーです。</target>
        </trans-unit>
        <trans-unit id="8d9809434d83464674dfe92f30c507ff86a23933" translate="yes" xml:space="preserve">
          <source>The image name is resolved the same way JS modules are resolved. In the example above, the packager will look for &lt;code&gt;my-icon.png&lt;/code&gt; in the same folder as the component that requires it. Also, if you have &lt;code&gt;my-icon.ios.png&lt;/code&gt; and &lt;code&gt;my-icon.android.png&lt;/code&gt;, the packager will pick the correct file for the platform.</source>
          <target state="translated">イメージ名は、JSモジュールが解決されるのと同じ方法で解決されます。上記の例では、パッケージャは、それを必要とするコンポーネントと同じフォルダで &lt;code&gt;my-icon.png&lt;/code&gt; を探します。また、 &lt;code&gt;my-icon.ios.png&lt;/code&gt; および &lt;code&gt;my-icon.android.png&lt;/code&gt; がある場合、パッケージャはプラットフォームに適したファイルを選択します。</target>
        </trans-unit>
        <trans-unit id="ce20467627ab1a3958213389bfd2c53752cb0616" translate="yes" xml:space="preserve">
          <source>The image source (either a remote URL or a local file resource).</source>
          <target state="translated">画像ソース(リモートURLまたはローカルファイルリソース)。</target>
        </trans-unit>
        <trans-unit id="ceeeb0b112ea5912e550276c316898a430bb1f4b" translate="yes" xml:space="preserve">
          <source>The index in &lt;code&gt;props.values&lt;/code&gt; of the segment to be (pre)selected.</source>
          <target state="translated">（事前に）選択されるセグメントの &lt;code&gt;props.values&lt;/code&gt; のインデックス。</target>
        </trans-unit>
        <trans-unit id="248bef3fccc82aeff5c14f09e20a0dbb7659f4db" translate="yes" xml:space="preserve">
          <source>The instructions are a bit different depending on your development operating system, and whether you want to start developing for iOS or Android. If you want to develop for both iOS and Android, that's fine - you just have to pick one to start with, since the setup is a bit different.</source>
          <target state="translated">開発OSや、iOSとAndroidのどちらで開発を開始するかによって、手順は少し異なります。iOSとAndroidの両方で開発したいのであれば、それはそれでいいのですが、設定が少し違うので、どちらかを選んで始めればいいだけです。</target>
        </trans-unit>
        <trans-unit id="ad8641b58ce8d70c517df1c687aae6b6b2d250d0" translate="yes" xml:space="preserve">
          <source>The integration tests should only take a few minutes to run on a modern developer machine.</source>
          <target state="translated">統合テストは、最新の開発者マシンで実行するのに数分しかかからないはずです。</target>
        </trans-unit>
        <trans-unit id="511be5acf4aeb6bdd8d407a74ce4808ac29cc950" translate="yes" xml:space="preserve">
          <source>The interval at which minutes can be selected.</source>
          <target state="translated">分を選択できる間隔です。</target>
        </trans-unit>
        <trans-unit id="6c05f2b6b7c96ec92c55143249948cb08b21bdc1" translate="yes" xml:space="preserve">
          <source>The keyboard type of first text field(if exists). One of 'default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter' or 'web-search'.</source>
          <target state="translated">最初のテキストフィールドのキーボードタイプ(存在する場合)。default'、'email-address'、'numeric'、'phone-pad'、'ascii-capable'、'number-and-punctuation'、'url'、'number-pad'、'name-phone-pad'、'decimal-pad'、'twitter'または'web-search'のいずれか。</target>
        </trans-unit>
        <trans-unit id="896873b80afa8ea216c736de96f1313d55fc8c6d" translate="yes" xml:space="preserve">
          <source>The keys to integrating React Native components into your Android application are to:</source>
          <target state="translated">React Native コンポーネントを Android アプリケーションに統合するための鍵は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="aafc35ac616dfea6b8eeaf3818cca61f3ae96c01" translate="yes" xml:space="preserve">
          <source>The keys to integrating React Native components into your iOS application are to:</source>
          <target state="translated">React NativeコンポーネントをiOSアプリケーションに統合するための鍵は、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="33e6d1d8c65f5e76a4bdc0d4e26a78c30610d54e" translate="yes" xml:space="preserve">
          <source>The keystore contains a single key, valid for 10000 days. The alias is a name that you will use later when signing your app, so remember to take note of the alias.</source>
          <target state="translated">キーストアには、10000日間有効な1つのキーが含まれています。エイリアスは、後にアプリに署名する際に使用する名前なので、エイリアスに注意してください。</target>
        </trans-unit>
        <trans-unit id="ccd857175b40970a08bb5f75225af76911a4fb9a" translate="yes" xml:space="preserve">
          <source>The labels for the control's segment buttons, in order.</source>
          <target state="translated">コントロールのセグメントボタンのラベルを順に表示します。</target>
        </trans-unit>
        <trans-unit id="570b3ac24ca8cff422f45c8885def124c44eb345" translate="yes" xml:space="preserve">
          <source>The last step within Java is to register the Module; this happens in the &lt;code&gt;createNativeModules&lt;/code&gt; of your apps package. If a module is not registered it will not be available from JavaScript.</source>
          <target state="translated">Javaの最後のステップは、モジュールの登録です。これは、アプリパッケージの &lt;code&gt;createNativeModules&lt;/code&gt; で発生します。モジュールが登録されていない場合、JavaScriptから使用できません。</target>
        </trans-unit>
        <trans-unit id="bb6782dcd3aa45f17c80741940077e2dfe3991b8" translate="yes" xml:space="preserve">
          <source>The list of supported &lt;code&gt;subspec&lt;/code&gt;s is available in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React.podspec&quot;&gt;&lt;code&gt;/node_modules/react-native/React.podspec&lt;/code&gt;&lt;/a&gt;. They are generally named by functionality. For example, you will generally always want the &lt;code&gt;Core&lt;/code&gt;&lt;code&gt;subspec&lt;/code&gt;. That will get you the &lt;code&gt;AppRegistry&lt;/code&gt;, &lt;code&gt;StyleSheet&lt;/code&gt;, &lt;code&gt;View&lt;/code&gt; and other core React Native libraries. If you want to add the React Native &lt;code&gt;Text&lt;/code&gt; library (e.g., for &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; elements), then you will need the &lt;code&gt;RCTText&lt;/code&gt;&lt;code&gt;subspec&lt;/code&gt;. If you want the &lt;code&gt;Image&lt;/code&gt; library (e.g., for &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; elements), then you will need the &lt;code&gt;RCTImage&lt;/code&gt;&lt;code&gt;subspec&lt;/code&gt;.</source>
          <target state="translated">サポートのリスト &lt;code&gt;subspec&lt;/code&gt; sがで利用可能です&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React.podspec&quot;&gt; &lt;code&gt;/node_modules/react-native/React.podspec&lt;/code&gt; &lt;/a&gt;。それらは一般に機能によって名前が付けられます。たとえば、通常は常に &lt;code&gt;Core&lt;/code&gt; &lt;code&gt;subspec&lt;/code&gt; です。これにより、 &lt;code&gt;AppRegistry&lt;/code&gt; 、 &lt;code&gt;StyleSheet&lt;/code&gt; 、 &lt;code&gt;View&lt;/code&gt; およびその他のコアReact Nativeライブラリが取得されます。Reactネイティブ &lt;code&gt;Text&lt;/code&gt; ライブラリを追加する場合（ &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 要素など）、 &lt;code&gt;RCTText&lt;/code&gt; &lt;code&gt;subspec&lt;/code&gt; が必要になります。 &lt;code&gt;Image&lt;/code&gt; ライブラリが必要な場合（たとえば、 &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; 要素の場合）、 &lt;code&gt;RCTImage&lt;/code&gt; &lt;code&gt;subspec&lt;/code&gt; が必要になります。。</target>
        </trans-unit>
        <trans-unit id="dc7958efd147f967eb239e7133833d760d0f1f36" translate="yes" xml:space="preserve">
          <source>The loaded module names get us part of the way there, but we actually need absolute module paths, so the next script will set that up. Add &lt;code&gt;packager/generateModulePaths.js&lt;/code&gt; to your project with the following:</source>
          <target state="translated">ロードされたモジュール名は、その方法の一部を取得しますが、実際には絶対モジュールパスが必要なので、次のスクリプトで設定します。以下を使用して、 &lt;code&gt;packager/generateModulePaths.js&lt;/code&gt; をプロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="a24bbfab5d5b017da5648ce46952a8e022dee88a" translate="yes" xml:space="preserve">
          <source>The local CLI</source>
          <target state="translated">ローカル CLI</target>
        </trans-unit>
        <trans-unit id="3a58dc76d6c2012a3a4457d5c081a5cdcafc5810" translate="yes" xml:space="preserve">
          <source>The locale for the date picker. Value needs to be a &lt;a href=&quot;https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html&quot;&gt;Locale ID&lt;/a&gt;.</source>
          <target state="translated">日付ピッカーのロケール。値は&lt;a href=&quot;https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html&quot;&gt;ロケールID&lt;/a&gt;である必要があります。</target>
        </trans-unit>
        <trans-unit id="f919883a93eca04a7d2c0cd18c9a70b60405bd9b" translate="yes" xml:space="preserve">
          <source>The location of the image.</source>
          <target state="translated">画像の位置です。</target>
        </trans-unit>
        <trans-unit id="000a2d762395d80a888e04bebdc35b95130b1e1c" translate="yes" xml:space="preserve">
          <source>The main drawback of cross-language properties is that they do not support callbacks, which would allow us to handle bottom-up data bindings. Imagine you have a small RN view that you want to be removed from the native parent view as a result of a JS action. There is no way to do that with props, as the information would need to go bottom-up.</source>
          <target state="translated">クロスランゲージプロパティの主な欠点は、コールバックをサポートしていないことです。小さなRNビューを持っていて、JSアクションの結果としてネイティブの親ビューから削除したいと想像してみてください。情報はボトムアップで取得する必要があるので、プロップスではそれを行う方法がありません。</target>
        </trans-unit>
        <trans-unit id="16fea9a858cc8fe5ed1bec0da37fecce9c79b794" translate="yes" xml:space="preserve">
          <source>The maximum allowed zoom scale. The default value is 1.0.</source>
          <target state="translated">許可されている最大のズームスケールです。デフォルト値は1.0です。</target>
        </trans-unit>
        <trans-unit id="d7a989a848211d407d41fa475478b6c13a8b8003" translate="yes" xml:space="preserve">
          <source>The maximum number of items to render in each incremental render batch. The more rendered at once, the better the fill rate, but responsiveness my suffer because rendering content may interfere with responding to button taps or other interactions.</source>
          <target state="translated">各インクリメンタル レンダー バッチでレンダリングするアイテムの最大数。一度にレンダリングする数が多ければ多いほど、塗りつぶし率は向上しますが、コンテンツのレンダリングがボタンタップやその他のインタラクションへの反応を妨げる可能性があるため、応答性が低下します。</target>
        </trans-unit>
        <trans-unit id="8caa7cb26bc8baac7e92d6cab12ea97daab32b37" translate="yes" xml:space="preserve">
          <source>The mechanism that should be used to resize the image when the image's dimensions differ from the image view's dimensions. Defaults to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="translated">画像のサイズが画像ビューのサイズと異なる場合に画像のサイズを変更するために使用するメカニズム。デフォルトは &lt;code&gt;auto&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f31ba748102187c7d20a3c323280c0ec4f58f3d0" translate="yes" xml:space="preserve">
          <source>The memory limit of a Today widget is 16 MB. As it happens, Today widget implementations using React Native may work unreliably because the memory usage tends to be too high. You can tell if your Today widget is exceeding the memory limit if it yields the message 'Unable to Load':</source>
          <target state="translated">Todayウィジェットのメモリ制限は16MBです。たまたまですが、React Native を使った Today ウィジェットの実装は、メモリ使用量が高すぎる傾向があるため、信頼性の低い動作をするかもしれません。Today ウィジェットがメモリ制限を超えているかどうかは、「Unable to Load」というメッセージが表示されればわかります。</target>
        </trans-unit>
        <trans-unit id="1a14c48613de548e060eeefdf2683cceb9843824" translate="yes" xml:space="preserve">
          <source>The method returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">このメソッドは &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="d894f082385702d79dc9d6de8340176f18320360" translate="yes" xml:space="preserve">
          <source>The method returns a &lt;code&gt;Promise&lt;/code&gt; object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected.</source>
          <target state="translated">このメソッドは &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。ユーザーが開くダイアログを確認するか、URLが自動的に開くと、Promiseは解決されます。ユーザーが開いているダイアログをキャンセルした場合、またはURLに登録されたアプリケーションがない場合、プロミスは拒否されます。</target>
        </trans-unit>
        <trans-unit id="d4d66bdd5be505ddb21f1ec7bffb16779387c343" translate="yes" xml:space="preserve">
          <source>The method returns a &lt;code&gt;Promise&lt;/code&gt; object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened.</source>
          <target state="translated">このメソッドは &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。指定されたURLを処理できるかどうかが判断されると、promiseが解決され、最初のパラメーターはそれを開くことができるかどうかです。</target>
        </trans-unit>
        <trans-unit id="a54f9442e4e022ba82c1168fab092f0a1d1487de" translate="yes" xml:space="preserve">
          <source>The methods described here are available on most of the default components provided by React Native. Note, however, that they are &lt;em&gt;not&lt;/em&gt; available on composite components that aren't directly backed by a native view. This will generally include most components that you define in your own app.</source>
          <target state="translated">ここで説明するメソッドは、React Nativeが提供するほとんどのデフォルトコンポーネントで使用できます。ただし、ネイティブビューで直接サポートされていない複合コンポーネントでは使用でき&lt;em&gt;ませ&lt;/em&gt;ん。これには通常、独自のアプリで定義するほとんどのコンポーネントが含まれます。</target>
        </trans-unit>
        <trans-unit id="a66a39ed26f56985424e218dfc07bb77464e5efd" translate="yes" xml:space="preserve">
          <source>The minimum allowed zoom scale. The default value is 1.0.</source>
          <target state="translated">許容される最小のズームスケール。デフォルト値は1.0です。</target>
        </trans-unit>
        <trans-unit id="f594c7116228c1bda6af2842899a9fc7f608b954" translate="yes" xml:space="preserve">
          <source>The module &lt;code&gt;react-native-git-upgrade&lt;/code&gt; provides a one-step operation to upgrade the source files with a minimum of conflicts. Under the hood, it consists in 2 phases:</source>
          <target state="translated">モジュール &lt;code&gt;react-native-git-upgrade&lt;/code&gt; は、最小限の競合でソースファイルをアップグレードするためのワンステップ操作を提供します。内部的には、2つのフェーズで構成されています。</target>
        </trans-unit>
        <trans-unit id="e928b777710f48cf90e0fb3faace725cbe9e7806" translate="yes" xml:space="preserve">
          <source>The most fundamental component for building a UI, &lt;code&gt;View&lt;/code&gt; is a container that supports layout with &lt;a href=&quot;flexbox&quot;&gt;flexbox&lt;/a&gt;, &lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;, &lt;a href=&quot;handling-touches&quot;&gt;some touch handling&lt;/a&gt;, and &lt;a href=&quot;accessibility&quot;&gt;accessibility&lt;/a&gt; controls. &lt;code&gt;View&lt;/code&gt; maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a &lt;code&gt;UIView&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;android.view&lt;/code&gt;, etc.</source>
          <target state="translated">UIを構築するための最も基本的なコンポーネントである &lt;code&gt;View&lt;/code&gt; は、&lt;a href=&quot;flexbox&quot;&gt;flexbox&lt;/a&gt;、&lt;a href=&quot;style&quot;&gt;スタイル&lt;/a&gt;、&lt;a href=&quot;handling-touches&quot;&gt;一部のタッチ処理&lt;/a&gt;、および&lt;a href=&quot;accessibility&quot;&gt;アクセシビリティ&lt;/a&gt;コントロールを使用したレイアウトをサポートするコンテナーです。 &lt;code&gt;View&lt;/code&gt; は、それが &lt;code&gt;UIView&lt;/code&gt; 、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 、 &lt;code&gt;android.view&lt;/code&gt; などであるかどうかに関係なく、React Nativeが実行されているプラ​​ットフォームの同等のネイティブビューに直接マップします。</target>
        </trans-unit>
        <trans-unit id="20b440a15c2782386b326ee7f9e59c280bd7fdd9" translate="yes" xml:space="preserve">
          <source>The most fundamental component for building a UI.</source>
          <target state="translated">UIを構築するための最も基本的な要素です。</target>
        </trans-unit>
        <trans-unit id="09fb3ed5734c2ba461620b29a8389e6b26a3a9fb" translate="yes" xml:space="preserve">
          <source>The name of the method exported to JavaScript is the native method's name up to the first colon. React Native also defines a macro called &lt;code&gt;RCT_REMAP_METHOD()&lt;/code&gt; to specify the JavaScript method's name. This is useful when multiple native methods are the same up to the first colon and would have conflicting JavaScript names.</source>
          <target state="translated">JavaScriptにエクスポートされるメソッドの名前は、最初のコロンまでのネイティブメソッドの名前です。React Nativeは、 &lt;code&gt;RCT_REMAP_METHOD()&lt;/code&gt; というマクロを定義して、JavaScriptメソッドの名前を指定します。これは、複数のネイティブメソッドが最初のコロンまで同じで、JavaScript名が競合している場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3709290d1cd99d279d5416fb66abd23169c42589" translate="yes" xml:space="preserve">
          <source>The native driver also works with &lt;code&gt;Animated.event&lt;/code&gt;. This is specially useful for animations that follow the scroll position as without the native driver, the animation will always run a frame behind the gesture due to the async nature of React Native.</source>
          <target state="translated">ネイティブドライバは &lt;code&gt;Animated.event&lt;/code&gt; でも動作します。これは、ネイティブドライバーがないため、スクロール位置に続くアニメーションに特に役立ちます。ReactNativeの非同期の性質により、アニメーションは常にジェスチャーの後ろにフレームを実行します。</target>
        </trans-unit>
        <trans-unit id="18b5fb2c3aba96245852f59c34d66a2d1fff21a4" translate="yes" xml:space="preserve">
          <source>The native module can signal events to JavaScript without being invoked directly. The preferred way to do this is to subclass &lt;code&gt;RCTEventEmitter&lt;/code&gt;, implement &lt;code&gt;supportedEvents&lt;/code&gt; and call &lt;code&gt;self sendEventWithName&lt;/code&gt;:</source>
          <target state="translated">ネイティブモジュールは、直接呼び出されることなくJavaScriptにイベントを通知できます。これを行うための推奨方法は、 &lt;code&gt;RCTEventEmitter&lt;/code&gt; をサブクラス化し、 &lt;code&gt;supportedEvents&lt;/code&gt; を実装して、 &lt;code&gt;self sendEventWithName&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="37b5da301799d317e450df6d2f3ddaa28c4fa855" translate="yes" xml:space="preserve">
          <source>The native module should not have any assumptions about what thread it is being called on. React Native invokes native modules methods on a separate serial GCD queue, but this is an implementation detail and might change. The &lt;code&gt;- (dispatch_queue_t)methodQueue&lt;/code&gt; method allows the native module to specify which queue its methods should be run on. For example, if it needs to use a main-thread-only iOS API, it should specify this via:</source>
          <target state="translated">ネイティブモジュールには、どのスレッドで呼び出されているかについての想定があってはなりません。React Nativeは別のシリアルGCDキューでネイティブモジュールメソッドを呼び出しますが、これは実装の詳細であり、変更される可能性があります。 &lt;code&gt;- (dispatch_queue_t)methodQueue&lt;/code&gt; 方法は、ネイティブモジュールは、そのメソッドが上で実行されなければならないキューを指定することができます。たとえば、メインスレッドのみのiOS APIを使用する必要がある場合は、次のように指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6e5c828a253793e2d9d2b4710789384fec7a0fa6" translate="yes" xml:space="preserve">
          <source>The navigation view that will be rendered to the side of the screen and can be pulled in.</source>
          <target state="translated">横にレンダリングされて引き寄せられるナビゲーションビュー。</target>
        </trans-unit>
        <trans-unit id="662fc0d74c4ebf3be45a793dcf6fa4c7bb8e2732" translate="yes" xml:space="preserve">
          <source>The new npm package may contain updates to the files that are normally generated when you run &lt;code&gt;react-native init&lt;/code&gt;, like the iOS and the Android sub-projects.</source>
          <target state="translated">新しいnpmパッケージには、iOSやAndroidサブプロジェクトなどの &lt;code&gt;react-native init&lt;/code&gt; を実行したときに通常生成されるファイルへの更新が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="a1d9cd0084a459520640409a6b121e0aa168b1bb" translate="yes" xml:space="preserve">
          <source>The new route that replaces the previous scene.</source>
          <target state="translated">前のシーンと入れ替わる新ルート。</target>
        </trans-unit>
        <trans-unit id="c928c8a63d43039ea62fb17c74dfe3b7525046f3" translate="yes" xml:space="preserve">
          <source>The new route that will replace the specified one.</source>
          <target state="translated">指定したルートを置き換える新しいルート。</target>
        </trans-unit>
        <trans-unit id="1010747221de7b8ffb2b4766e4737955a0993420" translate="yes" xml:space="preserve">
          <source>The new route that will replace the topmost item.</source>
          <target state="translated">一番上の項目を入れ替える新ルート。</target>
        </trans-unit>
        <trans-unit id="489cc098b261e438c5e057e4d9f2c08b9292dda4" translate="yes" xml:space="preserve">
          <source>The new route to navigate to.</source>
          <target state="translated">にナビゲートする新ルート。</target>
        </trans-unit>
        <trans-unit id="ad70826a31ebd14f0a3752e7bca3e7a598aaa50f" translate="yes" xml:space="preserve">
          <source>The new route to will replace the previous scene.</source>
          <target state="translated">新しいルートtoは、前のシーンの代わりになります。</target>
        </trans-unit>
        <trans-unit id="39640a860aea859ad4a286cfef78ac5ef96dcc56" translate="yes" xml:space="preserve">
          <source>The number of scenes to pop.</source>
          <target state="translated">ポップになるシーンの数。</target>
        </trans-unit>
        <trans-unit id="e36223905e0e89454fb6c1a6983e7485bbf115ea" translate="yes" xml:space="preserve">
          <source>The other new thing going on here is the &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; component. A &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; is useful as a container for other components, to help control style and layout.</source>
          <target state="translated">ここで行われているもう1つの新しいことは、&lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;コンポーネントです。A &lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; は&lt;/a&gt;、ヘルプコントロールのスタイルとレイアウトに、他のコンポーネントのコンテナとして有用です。</target>
        </trans-unit>
        <trans-unit id="0a37992d56d976fb19664f412559457cde83717c" translate="yes" xml:space="preserve">
          <source>The other unusual thing in this code example is &lt;code&gt;&amp;lt;View&amp;gt;&amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt;&amp;lt;/View&amp;gt;&lt;/code&gt;. This is JSX - a syntax for embedding XML within JavaScript. Many frameworks use a special templating language which lets you embed code inside markup language. In React, this is reversed. JSX lets you write your markup language inside code. It looks like HTML on the web, except instead of web things like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, you use React components. In this case, &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; is a built-in component that just displays some text and &lt;code&gt;View&lt;/code&gt; is like the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このコード例の他の珍しいことは、 &lt;code&gt;&amp;lt;View&amp;gt;&amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt;&amp;lt;/View&amp;gt;&lt;/code&gt; です。これはJSXです。JavaScript内にXMLを埋め込むための構文です。多くのフレームワークは、マークアップ言語内にコードを埋め込むことができる特別なテンプレート言語を使用しています。 Reactでは、これは逆になります。 JSXでは、コード内にマークアップ言語を記述できます。 WebではHTMLのように見えますが、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; などのWebの代わりにReactコンポーネントを使用します。この場合、 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; は組み込みのコンポーネントであり、テキストを &lt;code&gt;View&lt;/code&gt; するだけで、Viewは &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; のようなものです。</target>
        </trans-unit>
        <trans-unit id="a53e83d5be38ec47bf1748ae62b1ba247fe67af6" translate="yes" xml:space="preserve">
          <source>The package needs to be provided in the &lt;code&gt;getPackages&lt;/code&gt; method of the &lt;code&gt;MainApplication.java&lt;/code&gt; file. This file exists under the android folder in your react-native application directory. The path to this file is: &lt;code&gt;android/app/src/main/java/com/your-app-name/MainApplication.java&lt;/code&gt;.</source>
          <target state="translated">パッケージは、 &lt;code&gt;MainApplication.java&lt;/code&gt; ファイルの &lt;code&gt;getPackages&lt;/code&gt; メソッドで提供する必要があります。このファイルは、react-nativeアプリケーションディレクトリのandroidフォルダーの下にあります。このファイルへのパスは、 &lt;code&gt;android/app/src/main/java/com/your-app-name/MainApplication.java&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2c97eea1deefaceba58e6d32e57c6a94b27a5601" translate="yes" xml:space="preserve">
          <source>The packager knows the image dimensions, no need to duplicate it in the code.</source>
          <target state="translated">パッ ケージャは画像の寸法を知っているので、コードの中でそれを複製する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5c8a2c2e006e39effe75271a7965ce7b80f6e9d6" translate="yes" xml:space="preserve">
          <source>The permission to check for.</source>
          <target state="translated">チェックするための許可証です。</target>
        </trans-unit>
        <trans-unit id="e8493b81a1016dfec936898b56e484c6385c1cfd" translate="yes" xml:space="preserve">
          <source>The permission to request.</source>
          <target state="translated">依頼の許可。</target>
        </trans-unit>
        <trans-unit id="af14789cf0a69dcff551bd42aac668c1ab81ce3b" translate="yes" xml:space="preserve">
          <source>The preloadedModules entry in the config indicates which modules should be marked as preloaded by the unbundler. When the bundle is loaded, those modules are immediately loaded, before any requires have even executed. The blacklist entry indicates that those modules should not be required inline. Because they are preloaded, there is no performance benefit from using an inline require. In fact the javascript spends extra time resolving the inline require every time the imports are referenced.</source>
          <target state="translated">設定の preloadedModules エントリは、どのモジュールをアンバンドラーがプリロードするかを示します。バンドルがロードされると、それらのモジュールは require が実行される前にすぐにロードされます。ブラックリストエントリは、それらのモジュールをインラインで要求してはいけないことを示します。これらのモジュールはプリロードされているので、インラインでrequireしてもパフォーマンス上のメリットはありません。実際、インポートが参照されるたびに、javascriptはインラインのrequireを解決するために余分な時間を費やしています。</target>
        </trans-unit>
        <trans-unit id="f1bdbabdb16e4cb925e7907171a4fb67ae3be579" translate="yes" xml:space="preserve">
          <source>The problem exposing properties of native components is covered in detail in &lt;a href=&quot;native-components-ios#properties&quot;&gt;this article&lt;/a&gt;. In short, export properties with &lt;code&gt;RCT_CUSTOM_VIEW_PROPERTY&lt;/code&gt; macro in your custom native component, then just use them in React Native as if the component was an ordinary React Native component.</source>
          <target state="translated">&lt;a href=&quot;native-components-ios#properties&quot;&gt;この記事&lt;/a&gt;では、ネイティブコンポーネントのプロパティを公開する問題について詳しく説明します。つまり、カスタムネイティブコンポーネントで &lt;code&gt;RCT_CUSTOM_VIEW_PROPERTY&lt;/code&gt; マクロを使用してプロパティをエクスポートし、コンポーネントが通常のReact Nativeコンポーネントであるかのように、それらをReact Nativeで使用します。</target>
        </trans-unit>
        <trans-unit id="537aa47c01854db8240851f3629e46043409e86e" translate="yes" xml:space="preserve">
          <source>The progress bar style.</source>
          <target state="translated">プログレスバーのスタイル。</target>
        </trans-unit>
        <trans-unit id="8869ca6b151fe507a8ae1321573b18fbff6fd6eb" translate="yes" xml:space="preserve">
          <source>The progress value (between 0 and 1).</source>
          <target state="translated">進捗値(0~1の間)。</target>
        </trans-unit>
        <trans-unit id="85268e57d560cc7536342dd8a65aa766d08b18b9" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;SafeAreaView&lt;/code&gt; is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices.</source>
          <target state="translated">&lt;code&gt;SafeAreaView&lt;/code&gt; の目的は、デバイスの安全領域境界内にコンテンツをレンダリングすることです。現在、iOSデバイスにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="e261b880251a6a44c14a8b699e31744b414e5ed1" translate="yes" xml:space="preserve">
          <source>The remainder of this guide only applies to projects made with &lt;code&gt;react-native init&lt;/code&gt; or to those made with Create React Native App which have since ejected. For more information about ejecting, please see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;guide&lt;/a&gt; on the Create React Native App repository.</source>
          <target state="translated">このガイドの残りの部分は、 &lt;code&gt;react-native init&lt;/code&gt; で作成されたプロジェクトまたはCreate React Native Appで作成されたプロジェクトにのみ適用されます。イジェクトの詳細については、Create React Native Appリポジトリの&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="881ba3deffeafa7cc7782449c93683d68b7e307d" translate="yes" xml:space="preserve">
          <source>The remote location of the image.</source>
          <target state="translated">画像の遠隔地。</target>
        </trans-unit>
        <trans-unit id="74344a2f618b88aec5f2166a95a8e6a4a3652c52" translate="yes" xml:space="preserve">
          <source>The render function will be passed an object with the following keys:</source>
          <target state="translated">レンダー関数には、以下のキーを持つオブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="14618f9ff8d9aded4dd2a97c769210a6fd29ad4c" translate="yes" xml:space="preserve">
          <source>The responder has been taken from the &lt;code&gt;View&lt;/code&gt;. Might be taken by other views after a call to &lt;code&gt;onResponderTerminationRequest&lt;/code&gt;, or might be taken by the OS without asking (e.g., happens with control center/ notification center on iOS)</source>
          <target state="translated">レスポンダは &lt;code&gt;View&lt;/code&gt; から削除されました。 &lt;code&gt;onResponderTerminationRequest&lt;/code&gt; を呼び出した後、他のビューに表示される場合や、OSに確認なしで表示される場合があります（iOSのコントロールセンター/通知センターなどで発生します）。</target>
        </trans-unit>
        <trans-unit id="36e69c4dde39630f4fc79cbaef732d5b7877c706" translate="yes" xml:space="preserve">
          <source>The responder system can be complicated to use. So we have provided an abstract &lt;code&gt;Touchable&lt;/code&gt; implementation for things that should be &quot;tappable&quot;. This uses the responder system and allows you to easily configure tap interactions declaratively. Use &lt;code&gt;TouchableHighlight&lt;/code&gt; anywhere where you would use a button or link on web.</source>
          <target state="translated">レスポンダーシステムの使用は複雑になる場合があります。したがって、「タップ可能」である必要があるものに対して抽象的な &lt;code&gt;Touchable&lt;/code&gt; 実装を提供しました。これはレスポンダーシステムを使用し、タップ操作を宣言的に簡単に構成できます。使用 &lt;code&gt;TouchableHighlight&lt;/code&gt; のあなたがウェブ上のボタンやリンクを使用するどこでも。</target>
        </trans-unit>
        <trans-unit id="6dfbc243b05d992d23ce146205888358c76115e1" translate="yes" xml:space="preserve">
          <source>The ripple color</source>
          <target state="translated">波紋の色</target>
        </trans-unit>
        <trans-unit id="b30852fde6529e85dc3c210f1ee36c229763d450" translate="yes" xml:space="preserve">
          <source>The rotate transformations require a string so that the transform may be expressed in degrees (deg) or radians (rad). For example:</source>
          <target state="translated">回転変換には文字列が必要なので、変換は度(deg)またはラジアン(rad)で表されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b0b34f6c9f735900d7e3afd846181a45e92be29a" translate="yes" xml:space="preserve">
          <source>The route into the stack that should be replaced. If it is negative, it counts from the back of the stack.</source>
          <target state="translated">置き換えられるべきスタックへのルート。負数の場合はスタックの後ろから数えます。</target>
        </trans-unit>
        <trans-unit id="1a264e63b00894ee54c4555e7307e67a35e41b3d" translate="yes" xml:space="preserve">
          <source>The same concept applies to React Native. As long as we are building our application purely within the framework, we can drive our app with properties and callbacks. But, when we mix React Native and native components, we need some special, cross-language mechanisms that would allow us to pass information between them.</source>
          <target state="translated">React Native にも同じコンセプトが適用されます。純粋にフレームワーク内でアプリケーションを構築している限り、プロパティとコールバックでアプリを動かすことができます。しかし、React Native とネイティブコンポーネントを混在させる場合、両者の間で情報を受け渡すための特別なクロスランゲージメカニズムが必要になります。</target>
        </trans-unit>
        <trans-unit id="38f8a48abb7817f47344238b25a64d4df8fb747c" translate="yes" xml:space="preserve">
          <source>The same tests discussed above for iOS will also run on tvOS. In the RNTester Xcode project, select the RNTester-tvOS target, and you can follow the same steps above to run the tests in Xcode.</source>
          <target state="translated">iOS用に上記で説明したのと同じテストがtvOSでも実行されます。RNTester Xcodeプロジェクトで、RNTester-tvOSターゲットを選択し、上記と同じ手順でXcodeでテストを実行することができます。</target>
        </trans-unit>
        <trans-unit id="3774f6e821740f9e47e5936052e951273e64a175" translate="yes" xml:space="preserve">
          <source>The security model for XMLHttpRequest is different than on web as there is no concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; in native apps.</source>
          <target state="translated">XMLHttpRequestのセキュリティモデルは、ネイティブアプリに&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt;の概念がないため、Webとは異なります。</target>
        </trans-unit>
        <trans-unit id="299470c7bd804fa5b7fe68f85b1e6977e389694d" translate="yes" xml:space="preserve">
          <source>The selected index can be changed on the fly by assigning the selectedIndex prop to a state variable, then changing that variable. Note that the state variable would need to be updated as the user selects a value and changes the index, as shown in the example below.</source>
          <target state="translated">selectedIndex プロップをステート変数に代入し、その変数を変更することで、選択されたインデックスをその場で変更することができます。以下の例のように、ユーザが値を選択してインデックスを変更すると、ステート変数が更新される必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="707928309c9a6c225b22a11d7ceb24307cccc99a" translate="yes" xml:space="preserve">
          <source>The simplest scenario is when we have a React Native app with a fixed size, which is known to the native side. In particular, a full-screen React Native view falls into this case. If we want a smaller root view, we can explicitly set RCTRootView's frame.</source>
          <target state="translated">最もシンプルなシナリオは、ネイティブ側に知られているサイズが固定されたReact Nativeアプリがある場合です。特にフルスクリーンのReact Nativeビューはこのケースに該当します。ルートビューを小さくしたい場合は、RCTRootViewのフレームを明示的に設定します。</target>
        </trans-unit>
        <trans-unit id="59578814b7be6e9853392ab733ab491b689f5f07" translate="yes" xml:space="preserve">
          <source>The simplest use case is to plop down a &lt;code&gt;TextInput&lt;/code&gt; and subscribe to the &lt;code&gt;onChangeText&lt;/code&gt; events to read the user input. There are also other events, such as &lt;code&gt;onSubmitEditing&lt;/code&gt; and &lt;code&gt;onFocus&lt;/code&gt; that can be subscribed to. A simple example:</source>
          <target state="translated">最も簡単な使用例は、 &lt;code&gt;TextInput&lt;/code&gt; を展開し、 &lt;code&gt;onChangeText&lt;/code&gt; イベントをサブスクライブしてユーザー入力を読み取ることです。サブスクライブできる &lt;code&gt;onSubmitEditing&lt;/code&gt; や &lt;code&gt;onFocus&lt;/code&gt; などの他のイベントもあります。簡単な例：</target>
        </trans-unit>
        <trans-unit id="885e0faaf4c77172a5a209dc660b25f17d4f7cfa" translate="yes" xml:space="preserve">
          <source>The simplest way to set the dimensions of a component is by adding a fixed &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; to style. All dimensions in React Native are unitless, and represent density-independent pixels.</source>
          <target state="translated">コンポーネントの寸法を設定する最も簡単な方法は、スタイルに固定の &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; を追加することです。React Nativeのすべての寸法は単位がなく、密度に依存しないピクセルを表します。</target>
        </trans-unit>
        <trans-unit id="7a14a078e55223d40a77b561027fd314b485ac0c" translate="yes" xml:space="preserve">
          <source>The simplest workflow for creating an animation is to create an &lt;code&gt;Animated.Value&lt;/code&gt;, hook it up to one or more style attributes of an animated component, and then drive updates via animations using &lt;code&gt;Animated.timing()&lt;/code&gt;:</source>
          <target state="translated">アニメーションを作成するための最も簡単なワークフローは、 &lt;code&gt;Animated.Value&lt;/code&gt; を作成し、それをアニメーション化されたコンポーネントの1つ以上のスタイル属性にフックし、次に &lt;code&gt;Animated.timing()&lt;/code&gt; を使用してアニメーションを介して更新を駆動することです。</target>
        </trans-unit>
        <trans-unit id="98cc8d421410e7416e335e353bad2aa18e7f8bd2" translate="yes" xml:space="preserve">
          <source>The skew transformations require a string so that the transform may be expressed in degrees (deg). For example:</source>
          <target state="translated">斜行変換は文字列を必要とするので、変換は度(deg)で表されます。例えば</target>
        </trans-unit>
        <trans-unit id="435dd6dc202bde91139dd2f37cb384cd6871b0b7" translate="yes" xml:space="preserve">
          <source>The specific steps are different depending on what platform you're targeting.</source>
          <target state="translated">具体的な手順は、どのプラットフォームをターゲットにしているかによって異なります。</target>
        </trans-unit>
        <trans-unit id="ce662cafcc2a7155e8604df008bc85e2daa4ddc6" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;methodQueue&lt;/code&gt; will be shared by all of the methods in your module. If &lt;em&gt;just one&lt;/em&gt; of your methods is long-running (or needs to be run on a different queue than the others for some reason), you can use &lt;code&gt;dispatch_async&lt;/code&gt; inside the method to perform that particular method's code on another queue, without affecting the others:</source>
          <target state="translated">指定された &lt;code&gt;methodQueue&lt;/code&gt; は、モジュール内のすべてのメソッドによって共有されます。場合は&lt;em&gt;一つだけ&lt;/em&gt;、あなたの方法のは、長時間実行（または何らかの理由で他とは異なるキュー上で実行する必要があります）され、あなたが使用することができます &lt;code&gt;dispatch_async&lt;/code&gt; を他の人に影響を与えずに、別のキューにその特定のメソッドのコードを実行するメソッド内：</target>
        </trans-unit>
        <trans-unit id="fe65d0cd27237ba285083a8b361fdff4b6799aec" translate="yes" xml:space="preserve">
          <source>The start and end of the text input's selection. Set start and end to the same value to position the cursor.</source>
          <target state="translated">テキスト入力の選択の開始と終了を指定します。開始と終了を同じ値に設定してカーソルの位置を決めます。</target>
        </trans-unit>
        <trans-unit id="10b123821f4ba4cc03134d9f2de7e33637887a4a" translate="yes" xml:space="preserve">
          <source>The string that will be rendered before text input has been entered.</source>
          <target state="translated">テキスト入力が入力される前にレンダリングされる文字列。</target>
        </trans-unit>
        <trans-unit id="bd80dc055a7033e71a1266331bc932f351dc1828" translate="yes" xml:space="preserve">
          <source>The style of the content container(View) when behavior is 'position'.</source>
          <target state="translated">ビヘイビアが 'position' の場合のコンテントコンテナ(View)のスタイル。</target>
        </trans-unit>
        <trans-unit id="999cd7fca17803306a02a56c280cd945ae3046a5" translate="yes" xml:space="preserve">
          <source>The style of the navigation bar. Supported values are 'default', 'black'. Use 'black' instead of setting &lt;code&gt;barTintColor&lt;/code&gt; to black. This produces a navigation bar with the native iOS style with higher translucency.</source>
          <target state="translated">ナビゲーションバーのスタイル。サポートされる値は「デフォルト」、「ブラック」です。 &lt;code&gt;barTintColor&lt;/code&gt; を黒に設定する代わりに 'black'を使用します。これにより、透明度の高いネイティブiOSスタイルのナビゲーションバーが生成されます。</target>
        </trans-unit>
        <trans-unit id="268d9e130d69d670509aaa394cdde48c7a09eb08" translate="yes" xml:space="preserve">
          <source>The style of the scroll indicators.</source>
          <target state="translated">スクロールインジケーターのスタイル。</target>
        </trans-unit>
        <trans-unit id="045d295e1dff870cb4e6e3168bf2ffd02bbf8ddd" translate="yes" xml:space="preserve">
          <source>The style of the tab bar. Supported values are 'default', 'black'. Use 'black' instead of setting &lt;code&gt;barTintColor&lt;/code&gt; to black. This produces a tab bar with the native iOS style with higher translucency.</source>
          <target state="translated">タブバーのスタイル。サポートされる値は「デフォルト」、「ブラック」です。 &lt;code&gt;barTintColor&lt;/code&gt; を黒に設定する代わりに 'black'を使用します。これにより、透明度の高いネイティブiOSスタイルのタブバーが生成されます。</target>
        </trans-unit>
        <trans-unit id="a61b73901ecdcbc62e86c7a2735de2e3c5b0b334" translate="yes" xml:space="preserve">
          <source>The style to apply to the &lt;code&gt;WebView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; に適用するスタイル。</target>
        </trans-unit>
        <trans-unit id="35cfdee68e4c34c52dad690fd5741d78a797bf33" translate="yes" xml:space="preserve">
          <source>The templates are upgraded in a optimized way. You still may encounter conflicts but only where the Git 3-way merge have failed, depending on the version and how you modified your sources.</source>
          <target state="translated">テンプレートは最適化された方法でアップグレードされています。バージョンやソースをどのように変更したかにもよりますが、Git の 3 者間マージが失敗した場合にのみ、コンフリクトが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="26efa6168325b3edf70ec515a0043a8d57d4094a" translate="yes" xml:space="preserve">
          <source>The tests themselves are written in JS, and must call &lt;code&gt;TestModule.markTestCompleted()&lt;/code&gt; when they are done, otherwise the test will timeout and fail. Test failures are primarily indicated by throwing a JS exception. It is also possible to test error conditions with &lt;code&gt;runTest:module:initialProps:expectErrorRegex:&lt;/code&gt; or &lt;code&gt;runTest:module:initialProps:expectErrorBlock:&lt;/code&gt; which will expect an error to be thrown and verify the error matches the provided criteria.</source>
          <target state="translated">テスト自体はJSで記述されており、 &lt;code&gt;TestModule.markTestCompleted()&lt;/code&gt; 時にTestModule.markTestCompleted（）を呼び出す必要があります。そうしないと、テストがタイムアウトして失敗します。テストの失敗は主に、JS例外のスローによって示されます。 &lt;code&gt;runTest:module:initialProps:expectErrorRegex:&lt;/code&gt; または &lt;code&gt;runTest:module:initialProps:expectErrorBlock:&lt;/code&gt; を使用してエラー条件をテストすることもできます。これにより、エラーがスローされることが予期され、エラーが提供された基準に一致することを確認します。</target>
        </trans-unit>
        <trans-unit id="b23e0987d00a9ae81d7bee3c69a402b5778d6ac4" translate="yes" xml:space="preserve">
          <source>The tests themselves live in the &lt;code&gt;__tests__&lt;/code&gt; directories of the files they test. See &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/__tests__/TouchableHighlight-test.js&quot;&gt;&lt;code&gt;TouchableHighlight-test.js&lt;/code&gt;&lt;/a&gt; for a basic example.</source>
          <target state="translated">テスト自体は、テストするファイルの &lt;code&gt;__tests__&lt;/code&gt; ディレクトリにあります。基本的な例については、&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/__tests__/TouchableHighlight-test.js&quot;&gt; &lt;code&gt;TouchableHighlight-test.js&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ac0913da6fc5fe96f136edaf9fcc55923515e2d" translate="yes" xml:space="preserve">
          <source>The text color of the placeholder string.</source>
          <target state="translated">プレースホルダ文字列のテキスト色。</target>
        </trans-unit>
        <trans-unit id="32731387d77ec71d4eabebc2c9661c9e3815d310" translate="yes" xml:space="preserve">
          <source>The text that's read by the screen reader when the user interacts with the image.</source>
          <target state="translated">ユーザーが画像と対話したときにスクリーンリーダーが読み取るテキスト。</target>
        </trans-unit>
        <trans-unit id="d299fb38cca83d0802dff201a7e8545b98ddc8df" translate="yes" xml:space="preserve">
          <source>The tint color of the progress bar itself.</source>
          <target state="translated">プログレスバー自体の色合い。</target>
        </trans-unit>
        <trans-unit id="a0a2cc99e32c187a3eb75e1baac402c3400c6544" translate="yes" xml:space="preserve">
          <source>The tint color of the progress bar track.</source>
          <target state="translated">プログレスバートラックの色合い。</target>
        </trans-unit>
        <trans-unit id="270deb5d45572540f091490e5891e12e566c5110" translate="yes" xml:space="preserve">
          <source>The title displayed under the refresh indicator.</source>
          <target state="translated">リフレッシュインジケーターの下に表示されるタイトル。</target>
        </trans-unit>
        <trans-unit id="73691e9264c62832caf924a09e78d7171e6da674" translate="yes" xml:space="preserve">
          <source>The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</source>
          <target state="translated">タッチ エリアが親ビューの境界を超えることはなく、タッチが重複する 2 つのビューに当たった場合は、兄弟ビューの Z-index が常に優先されます。</target>
        </trans-unit>
        <trans-unit id="d083d0655b4da3d0f82d421de5813611ab7eb57f" translate="yes" xml:space="preserve">
          <source>The touch handling system considers one or more active touches to be an 'interaction' and will delay &lt;code&gt;runAfterInteractions()&lt;/code&gt; callbacks until all touches have ended or been cancelled.</source>
          <target state="translated">タッチ処理システムは、1つ以上のアクティブなタッチを「相互作用」と &lt;code&gt;runAfterInteractions()&lt;/code&gt; 、すべてのタッチが終了するかキャンセルされるまでrunAfterInteractions（）コールバックを遅らせます。</target>
        </trans-unit>
        <trans-unit id="b5a0c192ea3c01be308a5069260cd03f62aea189" translate="yes" xml:space="preserve">
          <source>The touch responder system is needed to allow components to negotiate these touch interactions without any additional knowledge about their parent or child components.</source>
          <target state="translated">コンポーネントが親コンポーネントや子コンポーネントに関する追加の知識を持たずに、これらのタッチインタラクションを交渉できるようにするために、タッチレスポンダシステムが必要とされています。</target>
        </trans-unit>
        <trans-unit id="06f94eed98331787cf231249738a3efe27c05907" translate="yes" xml:space="preserve">
          <source>The transition effect when showing and hiding the status bar using the &lt;code&gt;hidden&lt;/code&gt; prop. Defaults to 'fade'.</source>
          <target state="translated">&lt;code&gt;hidden&lt;/code&gt; 小道具を使用してステータスバーを表示または非表示にするときの遷移効果。デフォルトは「フェード」です。</target>
        </trans-unit>
        <trans-unit id="f5161854f9420eaf902c06ea7194c47b6760b3ee" translate="yes" xml:space="preserve">
          <source>The underlay comes from wrapping the child in a new View, which can affect layout, and sometimes cause unwanted visual artifacts if not used correctly, for example if the backgroundColor of the wrapped view isn't explicitly set to an opaque color.</source>
          <target state="translated">これはレイアウトに影響を与え、正しく使用されない場合には、例えばラップされたビューの backgroundColor が明示的に不透明な色に設定されていない場合など、不要な視覚的アーチファクトを引き起こすことがあります。</target>
        </trans-unit>
        <trans-unit id="bfcf7eaa6a7ce49a18ab1243b13a25b2305c54a4" translate="yes" xml:space="preserve">
          <source>The user is moving their finger.</source>
          <target state="translated">ユーザーは指を動かしています。</target>
        </trans-unit>
        <trans-unit id="94f86370a25279c6a221ae85efbac74f340d8629" translate="yes" xml:space="preserve">
          <source>The user's permission is required in order to access the Camera Roll on devices running iOS 10 or later. Add the &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; key in your &lt;code&gt;Info.plist&lt;/code&gt; with a string that describes how your app will use this data. This key will appear as &lt;code&gt;Privacy - Photo Library Usage Description&lt;/code&gt; in Xcode.</source>
          <target state="translated">iOS 10以降を実行しているデバイスでカメラロールにアクセスするには、ユーザーの許可が必要です。 &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; キーを &lt;code&gt;Info.plist&lt;/code&gt; に追加し、アプリがこのデータをどのように使用するかを説明する文字列を追加します。このキーは、Xcodeで &lt;code&gt;Privacy - Photo Library Usage Description&lt;/code&gt; として表示されます。</target>
        </trans-unit>
        <trans-unit id="b3462092cef005a614428165f33a9ccb7ce45d52" translate="yes" xml:space="preserve">
          <source>The value of the switch. If true the switch will be turned on. Default value is false.</source>
          <target state="translated">スイッチの値です。true の場合、スイッチがオンになります。デフォルト値は false です。</target>
        </trans-unit>
        <trans-unit id="c502d0d82ca04243d426898e385a6456f2302455" translate="yes" xml:space="preserve">
          <source>The value to show for the text input. &lt;code&gt;TextInput&lt;/code&gt; is a controlled component, which means the native value will be forced to match this value prop if provided. For most uses, this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same. In addition to simply setting the same value, either set &lt;code&gt;editable={false}&lt;/code&gt;, or set/update &lt;code&gt;maxLength&lt;/code&gt; to prevent unwanted edits without flicker.</source>
          <target state="translated">テキスト入力に表示する値。 &lt;code&gt;TextInput&lt;/code&gt; は制御されたコンポーネントです。つまり、提供されている場合、ネイティブ値はこの値プロパティと一致するように強制されます。ほとんどの用途でこれはうまく機能しますが、場合によってはちらつきが発生することがあります。1つの一般的な原因は、値を同じにして編集を妨げることです。同じ値を設定するだけでなく、 &lt;code&gt;editable={false}&lt;/code&gt; を設定するか、 &lt;code&gt;maxLength&lt;/code&gt; を設定/更新して、ちらつきのない不要な編集を防止します。</target>
        </trans-unit>
        <trans-unit id="bcf7e0493641e1d3111e8880577f119b79d3fc4a" translate="yes" xml:space="preserve">
          <source>The version string &lt;code&gt;1.8.x_xxx&lt;/code&gt; corresponds to JDK 8.</source>
          <target state="translated">バージョン文字列 &lt;code&gt;1.8.x_xxx&lt;/code&gt; はJDK 8に対応しています。</target>
        </trans-unit>
        <trans-unit id="7b31530b32a80831a81b4b40f5cacca0649ce97c" translate="yes" xml:space="preserve">
          <source>The very final step is to create the JavaScript module that defines the interface layer between Java and JavaScript for the users of your new view. Much of the effort is handled by internal React code in Java and JavaScript and all that is left for you is to describe the &lt;code&gt;propTypes&lt;/code&gt;.</source>
          <target state="translated">最後のステップは、新しいビューのユーザーのために、JavaとJavaScriptの間のインターフェース層を定義するJavaScriptモジュールを作成することです。取り組みの多くは、JavaとJavaScriptの内部Reactコードによって処理され、 &lt;code&gt;propTypes&lt;/code&gt; はpropTypesを記述するだけです。</target>
        </trans-unit>
        <trans-unit id="42df6bf8492f799336e3dfb9a8e2de3937accc1f" translate="yes" xml:space="preserve">
          <source>The views in React Navigation use native components and the &lt;a href=&quot;animated&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; library to deliver 60fps animations that are run on the native thread. Plus, the animations and gestures can be easily customized.</source>
          <target state="translated">React Navigationのビューは、ネイティブコンポーネントと&lt;a href=&quot;animated&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt;ライブラリを使用して、ネイティブスレッドで実行される60fpsアニメーションを配信します。さらに、アニメーションとジェスチャーは簡単にカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="e130dc096c63ecbb9456a66ae954f0c438fe93c6" translate="yes" xml:space="preserve">
          <source>Then add the service to your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file:</source>
          <target state="translated">次に、サービスを &lt;code&gt;AndroidManifest.xml&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="569a0fa47c022d0e8d2e1db354946c75fe508528" translate="yes" xml:space="preserve">
          <source>Then create a private implementation file that will register the required information with the React Native bridge:</source>
          <target state="translated">そして、必要な情報をReact Nativeブリッジに登録するプライベート実装ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="5a747952f220762dc27361ff93a4e5f1a8bfc4bc" translate="yes" xml:space="preserve">
          <source>Then run the following commands to create a new React Native project called &quot;AwesomeProject&quot;:</source>
          <target state="translated">続いて以下のコマンドを実行して、「AwesomeProject」というReact Nativeプロジェクトを新規作成します。</target>
        </trans-unit>
        <trans-unit id="c082168ff646d35830a603004efb2e22324c2424" translate="yes" xml:space="preserve">
          <source>Then run the following to terminate the process:</source>
          <target state="translated">そして、以下を実行してプロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="12ed92a5245e0740aa75b1a110854778ec7f18f1" translate="yes" xml:space="preserve">
          <source>Then select a React component in React DevTools. There is a search box at the top that helps you find one by name. As soon as you select it, it will be available as &lt;code&gt;$r&lt;/code&gt; in the Chrome console, letting you inspect its props, state, and instance properties.</source>
          <target state="translated">次に、React DevToolsでReactコンポーネントを選択します。上部に検索ボックスがあり、名前で検索することができます。選択するとすぐに、Chromeコンソールで &lt;code&gt;$r&lt;/code&gt; として使用できるようになり、プロパティ、状態、インスタンスのプロパティを確認できます。</target>
        </trans-unit>
        <trans-unit id="0a36900e0d30d4901c62b197e418c55b9158b831" translate="yes" xml:space="preserve">
          <source>Then you can quickly create an app with a home screen and a profile screen:</source>
          <target state="translated">そうすれば、ホーム画面やプロフィール画面のあるアプリをすぐに作成できます。</target>
        </trans-unit>
        <trans-unit id="aabf20a2ce39770c6ea443537f9ca9a180e77eeb" translate="yes" xml:space="preserve">
          <source>Then you just need a little bit of JavaScript to make this a usable React component:</source>
          <target state="translated">あとは、これを使えるReactコンポーネントにするために、JavaScriptを少し使うだけです。</target>
        </trans-unit>
        <trans-unit id="074c07ad771748ee4516287b79348e32f94a5412" translate="yes" xml:space="preserve">
          <source>Then, click &quot;Next&quot; to install all of these components.</source>
          <target state="translated">そして、「次へ」をクリックして、これらのコンポーネントをすべてインストールします。</target>
        </trans-unit>
        <trans-unit id="8846f81fe4c2504387e1ed895213695e34c7c1fd" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;SomeTaskName.js&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;SomeTaskName.js&lt;/code&gt; で：</target>
        </trans-unit>
        <trans-unit id="1712054043ce978a69f64bcb85109731af670272" translate="yes" xml:space="preserve">
          <source>Then, the patch is applied on the user's sources.</source>
          <target state="translated">その後、ユーザーのソースにパッチが適用されます。</target>
        </trans-unit>
        <trans-unit id="75f1a1dade7ab0adc4f6b5f67b167c6912625a77" translate="yes" xml:space="preserve">
          <source>There are a few performance operations designed to make ListView scroll smoothly while dynamically loading potentially very large (or conceptually infinite) data sets:</source>
          <target state="translated">非常に大きな(または概念的に無限の)データセットを動的にロードしながら、ListViewをスムーズにスクロールできるように設計されたパフォーマンス操作がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="04b525506e8f51360c4fbaf7b61f701b8eed133c" translate="yes" xml:space="preserve">
          <source>There are a lot more things you might want to do with a text input. For example, you could validate the text inside while the user types. For more detailed examples, see the &lt;a href=&quot;https://reactjs.org/docs/forms.html#controlled-components&quot;&gt;React docs on controlled components&lt;/a&gt;, or the &lt;a href=&quot;textinput&quot;&gt;reference docs for TextInput&lt;/a&gt;.</source>
          <target state="translated">テキスト入力で実行できることは他にもたくさんあります。たとえば、ユーザーが入力している間にテキストを検証できます。詳細な例については、&lt;a href=&quot;https://reactjs.org/docs/forms.html#controlled-components&quot;&gt;制御されるコンポーネントに関するReactのドキュメント&lt;/a&gt;、または&lt;a href=&quot;textinput&quot;&gt;TextInputのリファレンスドキュメントを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7efe98812c9e9deaaba59f28660baa998042fdab" translate="yes" xml:space="preserve">
          <source>There are a lot more ways to customize text style. Check out the &lt;a href=&quot;text&quot;&gt;Text component reference&lt;/a&gt; for a complete list.</source>
          <target state="translated">テキストのスタイルをカスタマイズする方法は他にもたくさんあります。完全なリストについては、&lt;a href=&quot;text&quot;&gt;Textコンポーネントリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="00d66e35ac092c3346534604118518f3a7e3d2f9" translate="yes" xml:space="preserve">
          <source>There are a lot of &lt;a href=&quot;http://www.meetup.com/topics/react-native/&quot;&gt;React Native Meetups&lt;/a&gt; that happen around the world. Often there is React Native content in React meetups as well.</source>
          <target state="translated">世界中で起こっている多くの&lt;a href=&quot;http://www.meetup.com/topics/react-native/&quot;&gt;React NativeのMeetup&lt;/a&gt;があります。多くの場合、ReactミートアップにもReact Nativeコンテンツがあります。</target>
        </trans-unit>
        <trans-unit id="4a4688b1ed5bf83899d113e3605b1e8be88da161" translate="yes" xml:space="preserve">
          <source>There are many ways to contribute to React Native, and many of them do not involve writing any code. Here's a few ideas to get started:</source>
          <target state="translated">React Nativeに貢献する方法はたくさんありますが、その多くはコードを書かないことが多いです。ここでは、始めるためのアイデアをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="80f84fe3f4e52e203116e302af4e5b9042a4a77c" translate="yes" xml:space="preserve">
          <source>There are some cases where an animated value needs to invert another animated value for calculation. An example is inverting a scale (2x --&amp;gt; 0.5x):</source>
          <target state="translated">アニメーション値が計算のために別のアニメーション値を反転する必要がある場合があります。例はスケールを反転します（2x-&amp;gt; 0.5x）：</target>
        </trans-unit>
        <trans-unit id="0ba262cc1e0d7b9a2f0104ad76ee69f3a9c3b861" translate="yes" xml:space="preserve">
          <source>There are some instances where hot reloading cannot be implemented perfectly. If you run into any issues, use a full reload to reset your app.</source>
          <target state="translated">ホットリロードを完全に実装できない場合があります。問題が発生した場合は、フルリロードを使用してアプリをリセットしてください。</target>
        </trans-unit>
        <trans-unit id="33342ff1d7873051c95802d721ef9c6febc4748f" translate="yes" xml:space="preserve">
          <source>There are tons of native UI widgets out there ready to be used in the latest apps - some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like &lt;code&gt;ScrollView&lt;/code&gt; and &lt;code&gt;TextInput&lt;/code&gt;, but not all of them, and certainly not ones you might have written yourself for a previous app. Fortunately, it's quite easy to wrap up these existing components for seamless integration with your React Native application.</source>
          <target state="translated">最新のアプリですぐに使用できるネイティブUIウィジェットがたくさんあります。それらの一部はプラットフォームの一部であり、その他はサードパーティライブラリとして利用できます。さらに、独自のポートフォリオで使用されているものもあります。 React Nativeには、 &lt;code&gt;ScrollView&lt;/code&gt; や &lt;code&gt;TextInput&lt;/code&gt; のようないくつかの最も重要なプラットフォームコンポーネントが既にラップされていますが、それらのすべてではありません。また、以前のアプリ用に自分で作成したコンポーネントもありません。幸い、React Nativeアプリケーションとのシームレスな統合のために、これらの既存のコンポーネントをラップするのは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="bb781c96f4a71de015bb7a594fd12e2d7c7e08c7" translate="yes" xml:space="preserve">
          <source>There are two types of data that control a component: &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt;. &lt;code&gt;props&lt;/code&gt; are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">コンポーネントを制御するデータには、 &lt;code&gt;props&lt;/code&gt; と &lt;code&gt;state&lt;/code&gt; の 2つのタイプがあります。 &lt;code&gt;props&lt;/code&gt; は親によって設定され、コンポーネントの存続期間を通じて固定されます。変更されるデータについては、 &lt;code&gt;state&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a35ff9b7cbdae590ccb56dde5ed3a20f0cd54a7f" translate="yes" xml:space="preserve">
          <source>There are two value types you can use with &lt;code&gt;Animated&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; で使用できる2つの値タイプがあります。</target>
        </trans-unit>
        <trans-unit id="38a3371286c5be9258fae18d52a4b725cbb64a19" translate="yes" xml:space="preserve">
          <source>There is a CocoaPods plugin called &lt;a href=&quot;https://github.com/orta/cocoapods-fix-react-native&quot;&gt;cocoapods-fix-react-native&lt;/a&gt; which handles any potential post-fixing of the source code due to differences when using a dependency manager.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/orta/cocoapods-fix-react-native&quot;&gt;cocoapods-fix-react-native&lt;/a&gt;と呼ばれるCocoaPodsプラグインがあり、依存関係マネージャーを使用する際の違いによるソースコードの修正後の可能性を処理します。</target>
        </trans-unit>
        <trans-unit id="789c3667e76fbda7af363c11e805d9d580365195" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;Platform.select&lt;/code&gt; method available, that given an object containing Platform.OS as keys, returns the value for the platform you are currently running on.</source>
          <target state="translated">あり &lt;code&gt;Platform.select&lt;/code&gt; の可能な方法は、キーとしてPlatform.OSを含むオブジェクトを指定して、あなたが現在実行されているプラットフォームの値を返すことを、。</target>
        </trans-unit>
        <trans-unit id="cc37fe05f09583620569db494e062716999e75b7" translate="yes" xml:space="preserve">
          <source>There is also a function &lt;code&gt;showWithGravity&lt;/code&gt; to specify the layout gravity. May be ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.</source>
          <target state="translated">レイアウトの重力を指定する関数 &lt;code&gt;showWithGravity&lt;/code&gt; もあります。ToastAndroid.TOP、ToastAndroid.BOTTOM、ToastAndroid.CENTERの場合があります。</target>
        </trans-unit>
        <trans-unit id="3cd07d09d5988953984d912a17f7a627f379ebc0" translate="yes" xml:space="preserve">
          <source>There is no way to update only a few properties at a time. We suggest that you build it into your own wrapper instead.</source>
          <target state="translated">一度にいくつかのプロパティだけを更新する方法はありません。代わりに独自のラッパーに組み込むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="72666930a6ed5228aacbcfaddae069319f9ebad3" translate="yes" xml:space="preserve">
          <source>There isn't an easy way to mitigate this unless you're able to postpone creating new UI until after the interaction, or you are able to simplify the UI you're creating. The react native team is working on an infrastructure level solution for this that will allow new UI to be created and configured off the main thread, allowing the interaction to continue smoothly.</source>
          <target state="translated">インタラクションが終わるまで新しいUIの作成を延期するか、作成中のUIをシンプルにすることができない限り、これを緩和する簡単な方法はありません。リアクトネイティブチームは、メインスレッドから新しいUIを作成して設定できるようにし、インタラクションをスムーズに継続できるようにするためのインフラレベルのソリューションに取り組んでいます。</target>
        </trans-unit>
        <trans-unit id="bf44e1f64b0dc379672897b51ce7798884c8b791" translate="yes" xml:space="preserve">
          <source>There will be no effect on devices that do not support Vibration, eg. the iOS simulator.</source>
          <target state="translated">iOSシミュレータなど、バイブレーションをサポートしていないデバイスには影響はありません。</target>
        </trans-unit>
        <trans-unit id="0e9d82714860becc2d982293d9c3fc717f67e7a7" translate="yes" xml:space="preserve">
          <source>There will be no effect on devices that do not support Vibration, eg. the simulator.</source>
          <target state="translated">バイブレーションをサポートしていないデバイス、例えばシミュレータには影響がありません。</target>
        </trans-unit>
        <trans-unit id="14bfe4c96bb7c5de2222130ff48f9e735b88d918" translate="yes" xml:space="preserve">
          <source>These approaches provide no safety checks. It's up to you to guarantee that those images are available in the application. Also you have to specify image dimensions manually.</source>
          <target state="translated">これらのアプローチでは、安全性のチェックは行われません。これらの画像がアプリケーションで利用可能であることを保証するのはあなた次第です。また、画像の寸法を手動で指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="fe5bc62249ecb7cba8779c543ffe93b15437829d" translate="yes" xml:space="preserve">
          <source>These are going to be global gradle variables, which we can later use in our gradle config to sign our app.</source>
          <target state="translated">これらはグローバルな gradle 変数となり、後に gradle の設定でアプリに署名するために使用します。</target>
        </trans-unit>
        <trans-unit id="0ad48da747249d0a489297a9c9c515a3f559be2f" translate="yes" xml:space="preserve">
          <source>These are some common issues you may run into while setting up React Native. If you encounter something that is not listed here, try &lt;a href=&quot;https://github.com/facebook/react-native/issues/&quot;&gt;searching for the issue in GitHub&lt;/a&gt;.</source>
          <target state="translated">これらは、React Nativeのセットアップ中に遭遇する可能性があるいくつかの一般的な問題です。ここに記載されていない問題が発生した場合は&lt;a href=&quot;https://github.com/facebook/react-native/issues/&quot;&gt;、GitHubで問題を検索して&lt;/a&gt;みてください。</target>
        </trans-unit>
        <trans-unit id="e19f556521403a22e4c8f656dcebf9c5c1d2f633" translate="yes" xml:space="preserve">
          <source>These components may come in handy for certain applications. For an exhaustive list of components and APIs, check out the sidebar to the left.</source>
          <target state="translated">これらのコンポーネントは、特定のアプリケーションに便利な場合があります。コンポーネントとAPIの網羅的なリストについては、左側のサイドバーをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="2a05e360350d15c249e088ac0093fdc1c7cf3a01" translate="yes" xml:space="preserve">
          <source>These conversion functions are designed to safely process any JSON that the JS might throw at them by displaying &quot;RedBox&quot; errors and returning standard initialization values when missing keys or other developer errors are encountered.</source>
          <target state="translated">これらの変換関数は、&quot;RedBox &quot;エラーを表示し、キーの欠落やその他の開発者エラーが発生した場合に標準の初期化値を返すことで、JSが投げかけてくるかもしれないJSONを安全に処理するように設計されています。</target>
        </trans-unit>
        <trans-unit id="d8e705b851b3585c4c6119e2184784fe48d5c869" translate="yes" xml:space="preserve">
          <source>These features make users more comfortable while using an app, because it allows people to experiment and interact without fear of making mistakes.</source>
          <target state="translated">これらの機能を使えば、失敗を恐れずに実験や交流ができるので、アプリを使っている間もユーザーは快適に過ごすことができます。</target>
        </trans-unit>
        <trans-unit id="28a40c8f7c447501b26ecb4b7960212be6476531" translate="yes" xml:space="preserve">
          <source>These lines represent the USB devices currently connected to your machine.</source>
          <target state="translated">これらの行は、現在お使いのマシンに接続されているUSBデバイスを表しています。</target>
        </trans-unit>
        <trans-unit id="6d6eb553a5de5b30b726de612c51db1e8e8c7222" translate="yes" xml:space="preserve">
          <source>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</source>
          <target state="translated">これらのスタイルは、すべての子ビューをラップするスクロールビューコンテンツコンテナに適用されます。例</target>
        </trans-unit>
        <trans-unit id="3b1ece141e072ff5af934d6577658a366e7c9ca4" translate="yes" xml:space="preserve">
          <source>These subclasses are essentially singletons - only one instance of each is created by the bridge. They vend native views to the &lt;code&gt;NativeViewHierarchyManager&lt;/code&gt;, which delegates back to them to set and update the properties of the views as necessary. The &lt;code&gt;ViewManagers&lt;/code&gt; are also typically the delegates for the views, sending events back to JavaScript via the bridge.</source>
          <target state="translated">これらのサブクラスは基本的にシングルトンです。ブリッジによって作成されるのは、それぞれ1つのインスタンスだけです。ネイティブビューを &lt;code&gt;NativeViewHierarchyManager&lt;/code&gt; に提供します。NativeViewHierarchyManagerは、必要に応じてビューのプロパティを設定および更新するためにそれらにデリゲートします。 &lt;code&gt;ViewManagers&lt;/code&gt; はブリッジを経由して戻ってJavaScriptにイベントを送信する、一般的にも、ビューの代理人です。</target>
        </trans-unit>
        <trans-unit id="57ab75c71e06661a026368f99a009a5fc31c8c87" translate="yes" xml:space="preserve">
          <source>This API only works in projects made with &lt;code&gt;react-native init&lt;/code&gt; or in those made with Create React Native App which have since ejected. For more information about ejecting, please see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;guide&lt;/a&gt; on the Create React Native App repository.</source>
          <target state="translated">このAPIは、 &lt;code&gt;react-native init&lt;/code&gt; で作成されたプロジェクトまたはCreate React Native Appで作成されたプロジェクトでのみ機能します。イジェクトの詳細については、Create React Native Appリポジトリの&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="801323845c18ba7304eeae010c132af00021ce07" translate="yes" xml:space="preserve">
          <source>This allows JavaScript to control what happens when the user presses the hardware back button (e.g. to implement navigation). When JavaScript doesn't handle the back button press, your &lt;code&gt;invokeDefaultOnBackPressed&lt;/code&gt; method will be called. By default this simply finishes your &lt;code&gt;Activity&lt;/code&gt;.</source>
          <target state="translated">これにより、JavaScriptは、ユーザーがハードウェアの戻るボタンを押したときの動作を制御できます（たとえば、ナビゲーションを実装するため）。JavaScriptが戻るボタンの押下を処理しない場合、 &lt;code&gt;invokeDefaultOnBackPressed&lt;/code&gt; メソッドが呼び出されます。デフォルトでは、これは単に &lt;code&gt;Activity&lt;/code&gt; 終了するだけです。</target>
        </trans-unit>
        <trans-unit id="c027e0c2fbc01fa0e9d2952239d9527248c55799" translate="yes" xml:space="preserve">
          <source>This allows us to write the following code and know that the child will have its opacity updated in response to taps, without the child having any knowledge of that fact or requiring any changes to its implementation:</source>
          <target state="translated">これにより、次のようなコードを書くことができ、子機がその事実を知らなくても、実装の変更を必要としなくても、タップに応じて子機の不透明度が更新されることを知ることができるようになります。</target>
        </trans-unit>
        <trans-unit id="234de2e0a0bc55d82490e410e8d9667d6ffeee21" translate="yes" xml:space="preserve">
          <source>This allows you to batch the fetching of items given an array of &lt;code&gt;key&lt;/code&gt; inputs. Your callback will be invoked with an array of corresponding key-value pairs found:</source>
          <target state="translated">これにより、 &lt;code&gt;key&lt;/code&gt; 入力の配列を指定してアイテムのフェッチをバッチ処理できます。コールバックは、対応するキーと値のペアの配列が見つかったときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7cc5df55746760864f2ec6ffaf372b4c5e981c1a" translate="yes" xml:space="preserve">
          <source>This app doesn't do very much</source>
          <target state="translated">このアプリはあまりやらない</target>
        </trans-unit>
        <trans-unit id="a578e5c8556d1a59d950beaf60a16c63266e2a22" translate="yes" xml:space="preserve">
          <source>This callback is invoked with the raw event, which we typically process in the wrapper component to make a simpler API:</source>
          <target state="translated">このコールバックは生のイベントで呼び出され、通常はラッパーコンポーネントで処理してAPIをシンプルにしています。</target>
        </trans-unit>
        <trans-unit id="9543aad7dde842ffb079abd78b07a74be60b58cb" translate="yes" xml:space="preserve">
          <source>This callback will be called once ViewPager finish navigating to selected page (when user swipes between pages). The &lt;code&gt;event.nativeEvent&lt;/code&gt; object passed to this callback will have following fields:</source>
          <target state="translated">このコールバックは、ViewPagerが選択されたページへの移動を終了すると（ユーザーがページ間をスワイプしたときに）呼び出されます。 &lt;code&gt;event.nativeEvent&lt;/code&gt; のこのコールバックに渡されたオブジェクトは、次のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="928f1332e3c7d94a7d8c7304c30bffb7365f77d1" translate="yes" xml:space="preserve">
          <source>This can be one of the following values:</source>
          <target state="translated">これは以下の値のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="97c2b9cfa0ee7116d238874f86461c20697ebfda" translate="yes" xml:space="preserve">
          <source>This case is covered in &lt;a href=&quot;native-components-ios#styles&quot;&gt;this article&lt;/a&gt;. Basically, as all our native react views are subclasses of &lt;code&gt;UIView&lt;/code&gt;, most style and size attributes will work like you would expect out of the box.</source>
          <target state="translated">このケースについては、&lt;a href=&quot;native-components-ios#styles&quot;&gt;この記事で説明し&lt;/a&gt;ます。基本的に、すべてのネイティブリアクションビューは &lt;code&gt;UIView&lt;/code&gt; のサブクラスであるため、ほとんどのスタイルとサイズの属性はそのままの状態で動作します。</target>
        </trans-unit>
        <trans-unit id="af0421c05fb8390e670ebc79ede98af0b2ae69f4" translate="yes" xml:space="preserve">
          <source>This command prompts you for passwords for the keystore and key, and to provide the Distinguished Name fields for your key. It then generates the keystore as a file called &lt;code&gt;my-release-key.keystore&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、キーストアとキーのパスワードの入力と、キーの識別名フィールドの入力を求めます。次に、キーストアを &lt;code&gt;my-release-key.keystore&lt;/code&gt; というファイルとして生成します。</target>
        </trans-unit>
        <trans-unit id="e228388487cba327b323e19ae7ad6c36ea08359e" translate="yes" xml:space="preserve">
          <source>This component can also be used to create sticky text inputs (text inputs which are anchored to the top of the keyboard). To do this, wrap a &lt;code&gt;TextInput&lt;/code&gt; with the &lt;code&gt;InputAccessoryView&lt;/code&gt; component, and don't set a &lt;code&gt;nativeID&lt;/code&gt;. For an example, look at &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/RNTester/js/InputAccessoryViewExample.js&quot;&gt;InputAccessoryViewExample.js&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントは、スティッキーテキスト入力（キーボードの上部に固定されているテキスト入力）の作成にも使用できます。これを行うには、 &lt;code&gt;TextInput&lt;/code&gt; を &lt;code&gt;InputAccessoryView&lt;/code&gt; コンポーネントでラップし、nativeIDを設定しないで &lt;code&gt;nativeID&lt;/code&gt; 。例については、&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/RNTester/js/InputAccessoryViewExample.js&quot;&gt;InputAccessoryViewExample.jsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="094121364efc46523beb851f803d91f5e7e1c277" translate="yes" xml:space="preserve">
          <source>This component is used inside a &lt;code&gt;ScrollView&lt;/code&gt; to add pull to refresh functionality.</source>
          <target state="translated">このコンポーネントは、 &lt;code&gt;ScrollView&lt;/code&gt; 内で使用され、プルして更新する機能を追加します。</target>
        </trans-unit>
        <trans-unit id="fba05360c9194acf6b39f5a348d39f4bcbc16240" translate="yes" xml:space="preserve">
          <source>This component is used inside a ScrollView or ListView to add pull to refresh functionality. When the ScrollView is at &lt;code&gt;scrollY: 0&lt;/code&gt;, swiping down triggers an &lt;code&gt;onRefresh&lt;/code&gt; event.</source>
          <target state="translated">このコンポーネントは、ScrollViewまたはListView内で使用され、プルして更新する機能を追加します。ScrollViewが &lt;code&gt;scrollY: 0&lt;/code&gt; 場合、下にスワイプすると &lt;code&gt;onRefresh&lt;/code&gt; イベントがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="e906f78c4fc3b80d1924e7adbd6fe660a6478454" translate="yes" xml:space="preserve">
          <source>This configures the text input. One of 'plain-text', 'secure-text' or 'login-password'.</source>
          <target state="translated">テキスト入力を設定します。プレーンテキスト」、「セキュアテキスト」、「ログインパスワード」のいずれかを設定します。</target>
        </trans-unit>
        <trans-unit id="3b22b261ceac526a1adb89d6d5e594327bfdae2c" translate="yes" xml:space="preserve">
          <source>This constant will always be a round number of pixels (so a line defined by it can look crisp) and will try to match the standard width of a thin line on the underlying platform. However, you should not rely on it being a constant size, because on different platforms and screen densities its value may be calculated differently.</source>
          <target state="translated">この定数は常にピクセルの丸い数となり(これによって定義された線は鮮明に見えます)、基礎となるプラットフォーム上の細い線の標準的な幅と一致しようとします。しかし、異なるプラットフォームやスクリーンの密度によっては、その値の計算が異なる可能性があるため、一定のサイズであることに頼るべきではありません。</target>
        </trans-unit>
        <trans-unit id="7c5d379ad863ce62011612edecf0a6dd9ebd213c" translate="yes" xml:space="preserve">
          <source>This controls how often the scroll event will be fired while scrolling (as a time interval in ms). A lower number yields better accuracy for code that is tracking the scroll position, but can lead to scroll performance problems due to the volume of information being send over the bridge. You will not notice a difference between values set between 1-16 as the JS run loop is synced to the screen refresh rate. If you do not need precise scroll position tracking, set this value higher to limit the information being sent across the bridge. The default value is zero, which results in the scroll event being sent only once each time the view is scrolled.</source>
          <target state="translated">これは、スクロール中にスクロールイベントを発生させる頻度を制御します(ms 単位の時間間隔で)。数値が低いほど、スクロール位置を追跡するコードの精度が向上しますが、ブリッジを介して送信される情報量が多いため、スクロールのパフォーマンスに問題が生じる可能性があります。JS 実行ループは画面のリフレッシュ レートに同期しているため、1~16 の間に設定された値の違いに気づくことはありません。正確なスクロール位置のトラッキングを必要としない場合は、この値を高く設定して、ブリッジを介して送信される情報を制限してください。デフォルト値はゼロで、ビューがスクロールされるたびにスクロールイベントが一度だけ送信されます。</target>
        </trans-unit>
        <trans-unit id="d834df1ea3cfec45cc3cf5e89666f239364e3178" translate="yes" xml:space="preserve">
          <source>This defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels.</source>
          <target state="translated">これは、タッチイベントがビューからどのくらい離れたところから開始できるかを定義します。一般的なインターフェースのガイドラインでは、タッチターゲットは少なくとも30~40ポイント/密度に依存しないピクセルであることを推奨しています。</target>
        </trans-unit>
        <trans-unit id="1116ebca89c716f7dddb07e94d117734a7686315" translate="yes" xml:space="preserve">
          <source>This defines how far your touch can start away from the button. This is added to &lt;code&gt;pressRetentionOffset&lt;/code&gt; when moving off of the button. ** NOTE ** The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</source>
          <target state="translated">これは、タッチがボタンからどれだけ離れて開始できるかを定義します。これは、ボタンから &lt;code&gt;pressRetentionOffset&lt;/code&gt; ときにpressRetentionOffsetに追加されます。 **注**タッチ領域が親ビューの境界を超えて拡大することはなく、タッチが2つの重複するビューに当たった場合、兄弟ビューのZ-indexが常に優先されます。</target>
        </trans-unit>
        <trans-unit id="af7258b8c3ca5e80ea3b8f919d20e048d8161548" translate="yes" xml:space="preserve">
          <source>This disables the 'layout-only view removal' optimization for this view!</source>
          <target state="translated">これは、このビューの「レイアウトのみのビュー削除」の最適化を無効にします!</target>
        </trans-unit>
        <trans-unit id="01cfc03dd8cac1d87f641e6189969983b5ca8752" translate="yes" xml:space="preserve">
          <source>This document is about testing your changes to React Native as a &lt;a href=&quot;contributing&quot;&gt;contributor&lt;/a&gt;. If you're interested in testing a React Native app, check out the &lt;a href=&quot;https://facebook.github.io/jest/docs/en/tutorial-react-native.html&quot;&gt;React Native Tutorial&lt;/a&gt; on the Jest website.</source>
          <target state="translated">このドキュメントは、&lt;a href=&quot;contributing&quot;&gt;貢献者&lt;/a&gt;としてのReact Nativeへの変更をテストすることを目的としています。React Nativeアプリのテストに興味がある場合は、Jest Webサイトの&lt;a href=&quot;https://facebook.github.io/jest/docs/en/tutorial-react-native.html&quot;&gt;React Nativeチュートリアル&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="601446ae494b64bfc06cdfa632336e0cc35505c9" translate="yes" xml:space="preserve">
          <source>This doesn't seem right. Why is it being called so often? Are they actually different events? The answers to these questions will probably depend on your product code. And many times, you'll want to look into &lt;a href=&quot;https://facebook.github.io/react/component-specs.md#updating-shouldcomponentupdate&quot;&gt;shouldComponentUpdate&lt;/a&gt;.</source>
          <target state="translated">これは正しくないようです。なぜそんなに頻繁に呼ばれるのですか？それらは実際に異なるイベントですか？これらの質問に対する答えは、おそらく製品コードによって異なります。そして、何度も、&lt;a href=&quot;https://facebook.github.io/react/component-specs.md#updating-shouldcomponentupdate&quot;&gt;shouldComponentUpdate&lt;/a&gt;を調べたいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="1d5208709b796e4e0ac5666a55b7c7958cc9d1b2" translate="yes" xml:space="preserve">
          <source>This event is fired immediately once the layout has been calculated, but the new layout may not yet be reflected on the screen at the time the event is received, especially if a layout animation is in progress.</source>
          <target state="translated">このイベントはレイアウトが計算されるとすぐに発生しますが、イベントを受信した時点ではまだ新しいレイアウトが画面に反映されていない可能性があります(特にレイアウトアニメーションが進行中の場合)。</target>
        </trans-unit>
        <trans-unit id="d13c76e68eb8a30b6c2e3799e7d6623f282da6e4" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;View&lt;/code&gt; that wraps two colored boxes and a text component in a row with padding.</source>
          <target state="translated">この例では、2つの色の付いたボックスとテキストコンポーネントをパディングで1行にラップする &lt;code&gt;View&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="2a097180ba5c84376ca288b0aeebea462bc81f84" translate="yes" xml:space="preserve">
          <source>This example creates a simple &lt;code&gt;FlatList&lt;/code&gt; of hardcoded data. Each item in the &lt;code&gt;data&lt;/code&gt; props is rendered as a &lt;code&gt;Text&lt;/code&gt; component. The &lt;code&gt;FlatListBasics&lt;/code&gt; component then renders the &lt;code&gt;FlatList&lt;/code&gt; and all &lt;code&gt;Text&lt;/code&gt; components.</source>
          <target state="translated">この例では、ハードコードされたデータの単純な &lt;code&gt;FlatList&lt;/code&gt; を作成します。 &lt;code&gt;data&lt;/code&gt; プロパティの各アイテムは、 &lt;code&gt;Text&lt;/code&gt; コンポーネントとしてレンダリングされます。次に、 &lt;code&gt;FlatListBasics&lt;/code&gt; コンポーネントは、 &lt;code&gt;FlatList&lt;/code&gt; およびすべての &lt;code&gt;Text&lt;/code&gt; コンポーネントをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="097bbafb6e3dd816019aefa356bc1811b8014c67" translate="yes" xml:space="preserve">
          <source>This example creates a vertical &lt;code&gt;ScrollView&lt;/code&gt; with both images and text mixed together.</source>
          <target state="translated">この例では、画像とテキストの両方が混合された垂直 &lt;code&gt;ScrollView&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="e640d33fef6b627ef19f059672ebeade4a5d5fe0" translate="yes" xml:space="preserve">
          <source>This example shows fetching and displaying an image from local storage as well as one from network and even from data provided in the &lt;code&gt;'data:'&lt;/code&gt; uri scheme.</source>
          <target state="translated">この例は、ローカルストレージからのイメージだけでなく、ネットワークからのイメージ、および &lt;code&gt;'data:'&lt;/code&gt; URIスキームで提供されたデータからのイメージのフェッチと表示を示しています。</target>
        </trans-unit>
        <trans-unit id="72dd788ea01930caf13ac7fa6bceec3bbad90407" translate="yes" xml:space="preserve">
          <source>This example uses a preset value, you can customize the animations as you need, see &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/LayoutAnimation/LayoutAnimation.js&quot;&gt;LayoutAnimation.js&lt;/a&gt; for more information.</source>
          <target state="translated">この例ではプリセット値を使用しており、必要に応じてアニメーションをカスタマイズできます。詳細については、&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/LayoutAnimation/LayoutAnimation.js&quot;&gt;LayoutAnimation.js&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aed8ea6851a6b0c9c1047ddd151cd05b26391c4b" translate="yes" xml:space="preserve">
          <source>This example will only ever appear to say &quot;Current state is: active&quot; because the app is only visible to the user when in the &lt;code&gt;active&lt;/code&gt; state, and the null state will happen only momentarily.</source>
          <target state="translated">この例は、「現在の状態は：アクティブです」とだけ表示されます。これは、アプリが &lt;code&gt;active&lt;/code&gt; 状態のときにのみユーザーに表示され、Null状態が発生するのは一時的なためです。</target>
        </trans-unit>
        <trans-unit id="950fe2614a1cbf9e3b1703841a441c3765c5e407" translate="yes" xml:space="preserve">
          <source>This exposes the native ToastAndroid module as a JS module. This has a function 'show' which takes the following parameters:</source>
          <target state="translated">これは、ネイティブのToastAndroidモジュールをJSモジュールとして公開します。これは以下のパラメータを取る関数 'show' を持っています。</target>
        </trans-unit>
        <trans-unit id="3420b9f14b2ff6146ff731501c2a8ed98ad17ebd" translate="yes" xml:space="preserve">
          <source>This function is called on long press.</source>
          <target state="translated">この機能は長押しで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8da5c7897fd470a9d9c68f392fcf69ca66f4a70e" translate="yes" xml:space="preserve">
          <source>This function is called on press.</source>
          <target state="translated">この関数は、プレス時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b6de1ae72f9d64602cc2b6634c0036b342970c57" translate="yes" xml:space="preserve">
          <source>This function then returns the reference to the listener.</source>
          <target state="translated">この関数は、リスナーへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="b94c47492f86ad8af1986eea05fe48784b65b1c3" translate="yes" xml:space="preserve">
          <source>This guide covered many of the aspects of bridging over custom native components, but there is even more you might need to consider, such as custom hooks for inserting and laying out subviews. If you want to go even deeper, check out the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Views&quot;&gt;source code&lt;/a&gt; of some of the implemented components.</source>
          <target state="translated">このガイドでは、カスタムネイティブコンポーネントのブリッジングの多くの側面について説明しましたが、サブビューを挿入してレイアウトするためのカスタムフックなど、さらに検討する必要があるかもしれません。さらに詳しく知りたい場合は、実装されているコンポーネントの一部の&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Views&quot;&gt;ソースコード&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="2f71b5503abd44360766902b9b8630363509ce4a" translate="yes" xml:space="preserve">
          <source>This guide covers the various navigation components available in React Native. If you are just getting started with navigation, you will probably want to use &lt;a href=&quot;navigation#react-navigation&quot;&gt;React Navigation&lt;/a&gt;. React Navigation provides an easy to use navigation solution, with the ability to present common stack navigation and tabbed navigation patterns on both iOS and Android. As this is a JavaScript implementation, it provides the greatest amount of configurability as well as flexibility when integrating with state management libraries such as &lt;a href=&quot;https://reactnavigation.org/docs/redux-integration.html&quot;&gt;redux&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、React Nativeで使用できるさまざまなナビゲーションコンポーネントについて説明します。ナビゲーションを始めたばかりの場合は、おそらく&lt;a href=&quot;navigation#react-navigation&quot;&gt;React Navigation&lt;/a&gt;を使用することをお勧めします。React Navigationは使いやすいナビゲーションソリューションを提供し、iOSとAndroidの両方で一般的なスタックナビゲーションとタブ付きナビゲーションパターンを表示する機能を備えています。これはJavaScript実装であるため、&lt;a href=&quot;https://reactnavigation.org/docs/redux-integration.html&quot;&gt;redux&lt;/a&gt;などの状態管理ライブラリと統合するときに、最大限の構成可能性と柔軟性を提供します。</target>
        </trans-unit>
        <trans-unit id="764c0c1850c39368c045b5a79d4b8f01afd3a483" translate="yes" xml:space="preserve">
          <source>This guide is intended to teach you some basics to help you to &lt;a href=&quot;performance#profiling&quot;&gt;troubleshoot performance issues&lt;/a&gt;, as well as discuss &lt;a href=&quot;performance#common-sources-of-performance-problems&quot;&gt;common sources of problems and their suggested solutions&lt;/a&gt;.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;performance#profiling&quot;&gt;パフォーマンスの問題のトラブルシューティング&lt;/a&gt;に役立ついくつかの基本を教えるとともに&lt;a href=&quot;performance#common-sources-of-performance-problems&quot;&gt;、問題の一般的な原因とその解決策&lt;/a&gt;について説明することを目的としています。</target>
        </trans-unit>
        <trans-unit id="fadff495ade83f37aa005235048cc00987093157" translate="yes" xml:space="preserve">
          <source>This guide will use the &lt;a href=&quot;http://developer.android.com/reference/android/widget/Toast.html&quot;&gt;Toast&lt;/a&gt; example. Let's say we would like to be able to create a toast message from JavaScript.</source>
          <target state="translated">このガイドでは、&lt;a href=&quot;http://developer.android.com/reference/android/widget/Toast.html&quot;&gt;トーストの&lt;/a&gt;例を使用します。JavaScriptからトーストメッセージを作成できるようにしたいとします。</target>
        </trans-unit>
        <trans-unit id="19f8cce1cd453cfd55859ca8ae6b6b1e61f0df42" translate="yes" xml:space="preserve">
          <source>This guide will use the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DataManagement/Conceptual/EventKitProgGuide/Introduction/Introduction.html&quot;&gt;iOS Calendar API&lt;/a&gt; example. Let's say we would like to be able to access the iOS calendar from JavaScript.</source>
          <target state="translated">このガイドでは、&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DataManagement/Conceptual/EventKitProgGuide/Introduction/Introduction.html&quot;&gt;iOSカレンダーAPIの&lt;/a&gt;例を使用します。JavaScriptからiOSカレンダーにアクセスできるようにしたいとします。</target>
        </trans-unit>
        <trans-unit id="9a9154ee6d573635a70b6374d41d1d9e70ff590e" translate="yes" xml:space="preserve">
          <source>This is OK, it means we also need to install React:</source>
          <target state="translated">これはOK、Reactもインストールする必要があるということです。</target>
        </trans-unit>
        <trans-unit id="df13ef2de2fb7594856954e6efb5e265a7752985" translate="yes" xml:space="preserve">
          <source>This is a &lt;code&gt;PureComponent&lt;/code&gt; which means that it will not re-render if &lt;code&gt;props&lt;/code&gt; remain shallow- equal. Make sure that everything your &lt;code&gt;renderItem&lt;/code&gt; function depends on is passed as a prop (e.g. &lt;code&gt;extraData&lt;/code&gt;) that is not &lt;code&gt;===&lt;/code&gt; after updates, otherwise your UI may not update on changes. This includes the &lt;code&gt;data&lt;/code&gt; prop and parent component state.</source>
          <target state="translated">これは、 &lt;code&gt;PureComponent&lt;/code&gt; あれば手段はそれがないことを再描画 &lt;code&gt;props&lt;/code&gt; 浅が同じまま。 &lt;code&gt;renderItem&lt;/code&gt; 関数が依存するすべてのものが、更新後に &lt;code&gt;===&lt;/code&gt; ではないプロップ（ &lt;code&gt;extraData&lt;/code&gt; など）として渡されることを確認してください。そうしないと、UIが変更時に更新されない場合があります。これには、 &lt;code&gt;data&lt;/code&gt; プロパティと親コンポーネントの状態が含まれます。</target>
        </trans-unit>
        <trans-unit id="ea176feaac8d25f73ab6ba694db37600e632e5b0" translate="yes" xml:space="preserve">
          <source>This is a controlled component that requires an &lt;code&gt;onValueChange&lt;/code&gt; callback that updates the &lt;code&gt;value&lt;/code&gt; prop in order for the component to reflect user actions. If the &lt;code&gt;value&lt;/code&gt; prop is not updated, the component will continue to render the supplied &lt;code&gt;value&lt;/code&gt; prop instead of the expected result of any user actions.</source>
          <target state="translated">これは、コンポーネントがユーザーアクションを反映するために &lt;code&gt;value&lt;/code&gt; &lt;code&gt;onValueChange&lt;/code&gt; を更新するonValueChangeコールバックを必要とする制御されたコンポーネントです。 &lt;code&gt;value&lt;/code&gt; プロパティが更新されない場合、コンポーネントは、ユーザーアクションの予期される結果ではなく、指定された &lt;code&gt;value&lt;/code&gt; プロパティをレンダリングし続けます。</target>
        </trans-unit>
        <trans-unit id="a26dd46c9fd7637cd0b36d5a00752ce14aab1ba2" translate="yes" xml:space="preserve">
          <source>This is a convenience wrapper around &lt;a href=&quot;virtualizedlist&quot;&gt;&lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt;&lt;/a&gt;, and thus inherits its props (as well as those of &lt;a href=&quot;scrollview&quot;&gt;&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt;&lt;/a&gt; that aren't explicitly listed here, along with the following caveats:</source>
          <target state="translated">これは&lt;a href=&quot;virtualizedlist&quot;&gt; &lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt; の&lt;/a&gt;便利なラッパーであるため、その&lt;a href=&quot;scrollview&quot;&gt; &lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; &lt;/a&gt;（およびここに明示的にリストされていない&amp;lt;ScrollView&amp;gt;のプロパティ）を継承します。以下の警告も含まれます。</target>
        </trans-unit>
        <trans-unit id="088d27e1e8c77500053aaabdaf671afa75a1f65a" translate="yes" xml:space="preserve">
          <source>This is a convenience wrapper around &lt;a href=&quot;virtualizedlist&quot;&gt;&lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt;&lt;/a&gt;, and thus inherits its props (as well as those of &lt;a href=&quot;scrollview&quot;&gt;&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt;&lt;/a&gt;) that aren't explicitly listed here, along with the following caveats:</source>
          <target state="translated">これは、&lt;a href=&quot;virtualizedlist&quot;&gt; &lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt; の&lt;/a&gt;便利なラッパーであるため、ここに明示的にリストされていない小道具（および&lt;a href=&quot;scrollview&quot;&gt; &lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; の&lt;/a&gt;小道具）を継承します。以下の警告も含まれます。</target>
        </trans-unit>
        <trans-unit id="0efe5d310385b7ed2c8cc4cb75e404936463aa82" translate="yes" xml:space="preserve">
          <source>This is a more advanced guide that shows how to build a native module. It assumes the reader knows Objective-C or Swift and core libraries (Foundation, UIKit).</source>
          <target state="translated">これは、ネイティブモジュールを構築する方法を示す、より高度なガイドです。読者がObjective-CまたはSwiftとコアライブラリ(Foundation,UIKit)を知っていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="58d463b5ee6d3824cf058e14aad3baacc2c3b052" translate="yes" xml:space="preserve">
          <source>This is a shortcut for &lt;code&gt;rgba(0,0,0,0)&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;rgba(0,0,0,0)&lt;/code&gt; のショートカットです：</target>
        </trans-unit>
        <trans-unit id="5dc9165e9384905a992f2c196858db764afaf5fa" translate="yes" xml:space="preserve">
          <source>This is a special performance property exposed by &lt;code&gt;RCTView&lt;/code&gt; and is useful for scrolling content when there are many subviews, most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound. The subviews must also have &lt;code&gt;overflow: hidden&lt;/code&gt;, as should the containing view (or one of its superviews).</source>
          <target state="translated">これは &lt;code&gt;RCTView&lt;/code&gt; によって公開される特別なパフォーマンスプロパティであり、多くのサブビューがあり、そのほとんどがオフスクリーンである場合にコンテンツをスクロールするのに役立ちます。このプロパティを有効にするには、その境界の外に広がる多くのサブビューを含むビューに適用する必要があります。サブビューにも &lt;code&gt;overflow: hidden&lt;/code&gt; 必要です：含まれるビュー（またはそのスーパービューの1つ）と同様に、hidden。</target>
        </trans-unit>
        <trans-unit id="e9d2a916aba1d06a39c281da6ae94219e845931e" translate="yes" xml:space="preserve">
          <source>This is an API that works both on iOS and Android and can show static alerts. To show an alert that prompts the user to enter some information, see &lt;code&gt;AlertIOS&lt;/code&gt;; entering text in an alert is common on iOS only.</source>
          <target state="translated">これは、iOSとAndroidの両方で機能し、静的アラートを表示できるAPIです。ユーザーに情報の入力を求める警告を表示するには、 &lt;code&gt;AlertIOS&lt;/code&gt; を参照してください。警告にテキストを入力することは、iOSでのみ一般的です。</target>
        </trans-unit>
        <trans-unit id="99a6a48284b10184dd8820f726f2b46558622a40" translate="yes" xml:space="preserve">
          <source>This is called when the user changes the date or time in the UI. The first and only argument is a Date object representing the new date and time.</source>
          <target state="translated">これは、ユーザーが UI で日付や時刻を変更したときに呼び出されます。最初の唯一の引数は、新しい日時を表す Date オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="12637247c1fe88f8f68aaac554130ec9c3802bdd" translate="yes" xml:space="preserve">
          <source>This is computationally intensive compared to the original example - React needs to re-render the component hierarchy each time the opacity changes, even though other properties of the view and its children haven't changed. Usually this overhead isn't a concern but when performing continuous animations and responding to gestures, judiciously optimizing your components can improve your animations' fidelity.</source>
          <target state="translated">これは、元の例に比べて計算量が多くなります-ビューとその子の他のプロパティが変更されていなくても、不透明度が変更されるたびに、React はコンポーネント階層を再レンダリングする必要があります。通常、このオーバーヘッドは気になりませんが、連続的なアニメーションを実行したり、ジェスチャーに反応したりする場合は、コンポーネントを慎重に最適化することで、アニメーションの忠実度を向上させることができます。</target>
        </trans-unit>
        <trans-unit id="6f0a7d0902e7f077c2024aa460dd7af9d9e7d246" translate="yes" xml:space="preserve">
          <source>This is done in an optimized way that is faster than calling &lt;code&gt;setState&lt;/code&gt; and re-rendering.</source>
          <target state="translated">これは、 &lt;code&gt;setState&lt;/code&gt; を呼び出して再レンダリングするよりも高速な最適化された方法で行われます。</target>
        </trans-unit>
        <trans-unit id="96b36adeed315f989331032cf58ae2468abc2578" translate="yes" xml:space="preserve">
          <source>This is especially true when you have text with a transparent background positioned on top of an image, or any other situation where alpha compositing would be required to re-draw the view on each frame. You will find that enabling &lt;code&gt;shouldRasterizeIOS&lt;/code&gt; or &lt;code&gt;renderToHardwareTextureAndroid&lt;/code&gt; can help with this significantly.</source>
          <target state="translated">これは、画像の上に透明な背景が配置されたテキストがある場合や、各フレームでビューを再描画するためにアルファ合成が必要になるその他の状況に当てはまります。 &lt;code&gt;shouldRasterizeIOS&lt;/code&gt; または &lt;code&gt;renderToHardwareTextureAndroid&lt;/code&gt; を有効にすると、これに大きく役立つことがわかります。</target>
        </trans-unit>
        <trans-unit id="72b474cd435a147a556cd54897bc57a285a7cdb2" translate="yes" xml:space="preserve">
          <source>This is not called by default due to performance overhead, but it's useful for finding traces which spend too much time in JSON.</source>
          <target state="translated">これはパフォーマンスのオーバーヘッドのためにデフォルトでは呼び出されませんが、JSONに時間をかけすぎているトレースを見つけるのに便利です。</target>
        </trans-unit>
        <trans-unit id="385a00629c4c21eee8f6409bb615fdb8e4fc5a52" translate="yes" xml:space="preserve">
          <source>This is not necessary if you are integrating React Native into an existing application, if you &quot;ejected&quot; from Create React Native App, or if you're adding Android support to an existing React Native project (see &lt;a href=&quot;platform-specific-code&quot;&gt;Platform Specific Code&lt;/a&gt;).</source>
          <target state="translated">React Nativeを既存のアプリケーションに統合する場合、Create React Native Appから「削除」する場合、または既存のReact NativeプロジェクトにAndroidサポートを追加する場合（&lt;a href=&quot;platform-specific-code&quot;&gt;プラットフォーム固有のコードを&lt;/a&gt;参照）は、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="b909d0401ca91b82ea47fee4665950cc57626714" translate="yes" xml:space="preserve">
          <source>This is not necessary if you are integrating React Native into an existing application, if you &quot;ejected&quot; from Create React Native App, or if you're adding iOS support to an existing React Native project (see &lt;a href=&quot;platform-specific-code&quot;&gt;Platform Specific Code&lt;/a&gt;).</source>
          <target state="translated">React Nativeを既存のアプリケーションに統合する場合、Create React Native Appから「削除」する場合、またはiOSサポートを既存のReact Nativeプロジェクトに追加する場合（&lt;a href=&quot;platform-specific-code&quot;&gt;プラットフォーム固有のコードを&lt;/a&gt;参照）、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="81fc4b4ed8a96be269a24e3630359e455854a42f" translate="yes" xml:space="preserve">
          <source>This is now a fully-functioning native map view component in JavaScript, complete with pinch-zoom and other native gesture support. We can't really control it from JavaScript yet, though :(</source>
          <target state="translated">これは、ピンチズームやその他のネイティブジェスチャーをサポートした、完全に機能するJavaScriptのネイティブマップビューコンポーネントです。まだ JavaScript からの制御はできませんが。</target>
        </trans-unit>
        <trans-unit id="525b2d553248954fb8b44422be820c9ce75bddbc" translate="yes" xml:space="preserve">
          <source>This is only used in dev mode when reloading JavaScript from the development server, so you can strip this in release builds if you need to.</source>
          <target state="translated">これは開発サーバーから JavaScript をリロードする際にのみ使用されるので、必要であればリリースビルドで削除することができます。</target>
        </trans-unit>
        <trans-unit id="f615b7beb80dc23062c6f35875edf9041c7eb92c" translate="yes" xml:space="preserve">
          <source>This is recommended for very small and dynamic images only, like icons in a list from a DB.</source>
          <target state="translated">DBからのリストのアイコンのように、非常に小さくて動的な画像のみにおすすめです。</target>
        </trans-unit>
        <trans-unit id="c2b8537b320037cf179daabe5fac751267be7749" translate="yes" xml:space="preserve">
          <source>This is the distance between the top of the user screen and the react native view, may be non-zero in some use cases.</source>
          <target state="translated">これはユーザー画面の上部とリアクトネイティブビューの間の距離で、使用例によってはゼロではない場合もあります。</target>
        </trans-unit>
        <trans-unit id="e4d54bdd57b334e73adf1ac0efb59940242adf70" translate="yes" xml:space="preserve">
          <source>This is useful with scroll events, for example, to show the navbar when scrolling up and to hide it when scrolling down.</source>
          <target state="translated">これはスクロールイベントで便利です。例えば、上にスクロールしているときはナビバーを表示し、下にスクロールしているときはナビバーを非表示にします。</target>
        </trans-unit>
        <trans-unit id="a9f024d6e5fa5f41792c5ee3505d2fa72fe6a752" translate="yes" xml:space="preserve">
          <source>This is where &lt;code&gt;FlatList&lt;/code&gt; comes into play. &lt;code&gt;FlatList&lt;/code&gt; renders items lazily, just when they are about to appear, and removes items that scroll way off screen to save memory and processing time.</source>
          <target state="translated">ここで &lt;code&gt;FlatList&lt;/code&gt; が役立ちます。 &lt;code&gt;FlatList&lt;/code&gt; は、表示される直前にアイテムを遅延表示し、画面からはみ出るアイテムを削除して、メモリと処理時間を節約します。</target>
        </trans-unit>
        <trans-unit id="d1c394c0d13cb72926cf0481c61eeee64a1ab349" translate="yes" xml:space="preserve">
          <source>This library does not ship with React Native - in order to use it on your project, you will need to install it with &lt;code&gt;npm i react-timer-mixin --save&lt;/code&gt; from your project directory.</source>
          <target state="translated">このライブラリはReact Nativeには同梱されていません。プロジェクトで使用するには、プロジェクトディレクトリから &lt;code&gt;npm i react-timer-mixin --save&lt;/code&gt; を使用してインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="879fbff809517327163d1a254188ed29ebe8d802" translate="yes" xml:space="preserve">
          <source>This may improve scroll performance for large lists.</source>
          <target state="translated">これにより、大きなリストのスクロール性能が向上する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f69aa61eb018c5246c726465c6330765cb34a9a4" translate="yes" xml:space="preserve">
          <source>This method internally uses &lt;code&gt;StyleSheetRegistry.getStyleByID(style)&lt;/code&gt; to resolve style objects represented by IDs. Thus, an array of style objects (instances of &lt;code&gt;StyleSheet.create()&lt;/code&gt;), are individually resolved to, their respective objects, merged as one and then returned. This also explains the alternative use.</source>
          <target state="translated">このメソッドは、内部的に &lt;code&gt;StyleSheetRegistry.getStyleByID(style)&lt;/code&gt; を使用して、IDで表されるスタイルオブジェクトを解決します。したがって、スタイルオブジェクトの配列（ &lt;code&gt;StyleSheet.create()&lt;/code&gt; のインスタンス）は、それぞれのオブジェクトに個別に解決され、1つとしてマージされてから返されます。これは、代替の使用についても説明しています。</target>
        </trans-unit>
        <trans-unit id="19c3fb29a7603834deb54b850eea3273b0cc3d40" translate="yes" xml:space="preserve">
          <source>This method is available for remote notifications that have been received via: &lt;code&gt;application:didReceiveRemoteNotification:fetchCompletionHandler:&lt;/code&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler&quot;&gt;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler&lt;/a&gt;:</source>
          <target state="translated">このメソッドは、 &lt;code&gt;application:didReceiveRemoteNotification:fetchCompletionHandler:&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler&quot;&gt;https &lt;/a&gt;://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/を介して受信されたリモート通知で使用できます。 UIApplicationDelegate / application：didReceiveRemoteNotification：fetchCompletionHandler：</target>
        </trans-unit>
        <trans-unit id="cf5e3a8b01dfd91b63b225a42e908be6a62c1e20" translate="yes" xml:space="preserve">
          <source>This method returns a promise that will resolve when the user accepts, rejects, or if the permissions were previously rejected. The promise resolves to the current state of the permission.</source>
          <target state="translated">このメソッドは、ユーザーが受け入れたとき、拒否したとき、または以前にパーミッションが拒否されたときに解決するプロミスを返します。プロミスはパーミッションの現在の状態に解決されます。</target>
        </trans-unit>
        <trans-unit id="9fb388aa1e89f0f8d773cbab6b7219805aa700ed" translate="yes" xml:space="preserve">
          <source>This method returns a promise. If the app was launched by a push notification, this promise resolves to an object of type &lt;code&gt;PushNotificationIOS&lt;/code&gt;. Otherwise, it resolves to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このメソッドはpromiseを返します。アプリがプッシュ通知によって起動された場合、このプロミスはタイプ &lt;code&gt;PushNotificationIOS&lt;/code&gt; のオブジェクトに解決されます。それ以外の場合は、 &lt;code&gt;null&lt;/code&gt; に解決されます。</target>
        </trans-unit>
        <trans-unit id="a592bf9d480d697930fad782945fc55a15cd5824" translate="yes" xml:space="preserve">
          <source>This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first.</source>
          <target state="translated">このメソッドは、システムが指定した URL を開く方法を知らない場合に失敗します。http(s)以外の URL を渡している場合は、まず {@code canOpenURL}をチェックするのがベストです。</target>
        </trans-unit>
        <trans-unit id="103a497420423a87836bf74252ccf681b79b2416" translate="yes" xml:space="preserve">
          <source>This method would be accessed in JavaScript using:</source>
          <target state="translated">このメソッドは、JavaScriptで以下のようにアクセスします。</target>
        </trans-unit>
        <trans-unit id="2261160404950e08088ac018c0b7f317489efbe4" translate="yes" xml:space="preserve">
          <source>This often happens during &lt;code&gt;Navigator&lt;/code&gt; transitions: when you push a new route, the JavaScript thread needs to render all of the components necessary for the scene in order to send over the proper commands to the native side to create the backing views. It's common for the work being done here to take a few frames and cause &lt;a href=&quot;http://jankfree.org/&quot;&gt;jank&lt;/a&gt; because the transition is controlled by the JavaScript thread. Sometimes components will do additional work on &lt;code&gt;componentDidMount&lt;/code&gt;, which might result in a second stutter in the transition.</source>
          <target state="translated">これは、 &lt;code&gt;Navigator&lt;/code&gt; 移行中によく発生します。新しいルートをプッシュすると、JavaScriptスレッドが適切なコマンドをネイティブ側に送信してバッキングビューを作成するために、シーンに必要なすべてのコンポーネントをレンダリングする必要があります。ここで行われている作業では、トランジションがJavaScriptスレッドによって制御されているため、数フレームかかり、&lt;a href=&quot;http://jankfree.org/&quot;&gt;ジャンクが&lt;/a&gt;発生するのが一般的です。場合によっては、コンポーネントがcomponentDidMountに対して追加の作業を行うことがあり &lt;code&gt;componentDidMount&lt;/code&gt; 。これにより、遷移で2つ目の途切れが生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="0c77c88cc594de09f771d17a070cd93e0b846c0a" translate="yes" xml:space="preserve">
          <source>This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a &lt;code&gt;text&lt;/code&gt; key, as well as optional &lt;code&gt;onPress&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; keys. &lt;code&gt;style&lt;/code&gt; should be one of 'default', 'cancel' or 'destructive'.</source>
          <target state="translated">このオプションの引数は、単一引数の関数またはボタンの配列のいずれかである必要があります。関数を渡した場合、ユーザーが「OK」をタップすると呼び出されます。ボタン設定の配列を渡す場合、各ボタンには &lt;code&gt;text&lt;/code&gt; キーと、オプションの &lt;code&gt;onPress&lt;/code&gt; キーと &lt;code&gt;style&lt;/code&gt; キーを含める必要があります。 &lt;code&gt;style&lt;/code&gt; は、「デフォルト」、「キャンセル」、または「破壊的」のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="3320bb53cecccf21c496152fce27fa50241dcd43" translate="yes" xml:space="preserve">
          <source>This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called with the prompt's value when the user taps 'OK'. If passed an array of button configurations, each button should include a &lt;code&gt;text&lt;/code&gt; key, as well as optional &lt;code&gt;onPress&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; keys (see example). &lt;code&gt;style&lt;/code&gt; should be one of 'default', 'cancel' or 'destructive'.</source>
          <target state="translated">このオプションの引数は、単一引数の関数またはボタンの配列のいずれかである必要があります。関数を渡した場合、ユーザーが[OK]をタップすると、プロンプトの値で呼び出されます。ボタン設定の配列を渡す場合、各ボタンには &lt;code&gt;text&lt;/code&gt; キーと、オプションの &lt;code&gt;onPress&lt;/code&gt; および &lt;code&gt;style&lt;/code&gt; キーを含める必要があります（例を参照）。 &lt;code&gt;style&lt;/code&gt; は、「デフォルト」、「キャンセル」、または「破壊的」のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="d8f2592c783597970e92fa047830553ca3373903" translate="yes" xml:space="preserve">
          <source>This page will help you install and build your first React Native app. If you already have React Native installed, you can skip ahead to the &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt;.</source>
          <target state="translated">このページは、最初のReact Nativeアプリをインストールして構築するのに役立ちます。React Nativeがすでにインストールされている場合は、スキップして&lt;a href=&quot;tutorial&quot;&gt;チュートリアルに&lt;/a&gt;進むことができます。</target>
        </trans-unit>
        <trans-unit id="43bc53b4331ebbf9d823b4ccdd0bfa415b61d989" translate="yes" xml:space="preserve">
          <source>This performs the same function as the &lt;code&gt;cloneWithRows&lt;/code&gt; function but here you also specify what your &lt;code&gt;sectionIdentities&lt;/code&gt; are. If you don't care about sections you should safely be able to use &lt;code&gt;cloneWithRows&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;cloneWithRows&lt;/code&gt; 関数と同じ機能を実行しますが、ここで &lt;code&gt;sectionIdentities&lt;/code&gt; を指定することもできます。セクションを気にしない場合は、 &lt;code&gt;cloneWithRows&lt;/code&gt; を安全に使用できるはずです。</target>
        </trans-unit>
        <trans-unit id="dc958ccada810154a48732d0e2b59d563e66fc2e" translate="yes" xml:space="preserve">
          <source>This prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments. The native side will then choose the best &lt;code&gt;uri&lt;/code&gt; to display based on the measured size of the image container. A &lt;code&gt;cache&lt;/code&gt; property can be added to control how networked request interacts with the local cache.</source>
          <target state="translated">この小道具には、幅と高さ、および場合によってはスケールやその他のURI引数とともに指定された複数のリモートURLを含めることもできます。ネイティブ側は、画像コンテナの測定サイズに基づいて、表示する最適な &lt;code&gt;uri&lt;/code&gt; を選択します。 &lt;code&gt;cache&lt;/code&gt; プロパティは、ローカルキャッシュとどのようにネットワーク接続要求の相互作用を制御するために添加することができます。</target>
        </trans-unit>
        <trans-unit id="f3e2ab2d63d36f62a4097bf54961555e18caef91" translate="yes" xml:space="preserve">
          <source>This prop is commonly used with &lt;code&gt;ellipsizeMode&lt;/code&gt;.</source>
          <target state="translated">この小道具は通常 &lt;code&gt;ellipsizeMode&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="a8b0815991f548cd64f0ce862f42cf4063c64b97" translate="yes" xml:space="preserve">
          <source>This property specifies how the safe area insets are used to modify the content area of the scroll view. The default value of this property is &quot;never&quot;. Available on iOS 11 and later.</source>
          <target state="translated">このプロパティは、安全領域インセットがスクロールビューのコンテンツ領域を変更するためにどのように使用されるかを指定します。このプロパティのデフォルト値は &quot;never &quot;です。iOS 11以降で利用可能です。</target>
        </trans-unit>
        <trans-unit id="0a79e5dec25c1a523b210e024f4d100a31807f8a" translate="yes" xml:space="preserve">
          <source>This property takes an array of objects, where each object has the following keys:</source>
          <target state="translated">このプロパティはオブジェクトの配列を取り、各オブジェクトは以下のキーを持ちます。</target>
        </trans-unit>
        <trans-unit id="87c0238db7d2aa7900d737e3109af9b2fbd09da1" translate="yes" xml:space="preserve">
          <source>This script attempts to map from the module names to module paths. Its not foolproof though, for instance, it ignores platform specific files (*ios.js, and *.android.js). However based on initial testing, it handles 95% of cases. When it runs, after some time it should complete and output a file named &lt;code&gt;packager/modulePaths.js&lt;/code&gt;. It should contain paths to module files that are relative to your projects root. You can commit modulePaths.js to your repo so it is transportable.</source>
          <target state="translated">このスクリプトは、モジュール名からモジュールパスへのマッピングを試みます。ただし、絶対確実ではありませんが、たとえば、プラットフォーム固有のファイル（* ios.js、および* .android.js）は無視されます。ただし、初期テストに基づいて、95％のケースを処理します。実行すると、しばらくすると、それが完了し、 &lt;code&gt;packager/modulePaths.js&lt;/code&gt; という名前のファイルが出力されます。プロジェクトのルートからの相対パスであるモジュールファイルへのパスを含める必要があります。modulePaths.jsをリポジトリにコミットして、トランスポート可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="469af447dd8150c7205482df7bc69441fa1a6480" translate="yes" xml:space="preserve">
          <source>This section is more experimental than others because we don't have a solid set of best practices around callbacks yet.</source>
          <target state="translated">このセクションは他のセクションよりも実験的なものです。</target>
        </trans-unit>
        <trans-unit id="33c3b258dfa8566284e35490f2ddf0a6240b5aa6" translate="yes" xml:space="preserve">
          <source>This section only applies to projects made with &lt;code&gt;react-native init&lt;/code&gt; or to those made with Create React Native App which have since ejected. For more information about ejecting, please see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;guide&lt;/a&gt; on the Create React Native App repository.</source>
          <target state="translated">このセクションは、 &lt;code&gt;react-native init&lt;/code&gt; で作成されたプロジェクトまたはCreate React Native Appで作成されたプロジェクトにのみ適用されます。イジェクトの詳細については、Create React Native Appリポジトリの&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1899a78bc738ea9a1d7a7912e3e40e21417a49c9" translate="yes" xml:space="preserve">
          <source>This should only be called from native code by sending the didUpdateDimensions event.</source>
          <target state="translated">これは、didUpdateDimensions イベントを送信することによってのみ、ネイティブ コードから呼び出されるべきです。</target>
        </trans-unit>
        <trans-unit id="4f8baf6716df0c58ec2fe7f1b362acd6370b64fc" translate="yes" xml:space="preserve">
          <source>This style takes precedence over the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; styles.</source>
          <target state="translated">このスタイルは、より優先され &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;right&lt;/code&gt; スタイル。</target>
        </trans-unit>
        <trans-unit id="248075517f17409952b8950d98aa3dd331616006" translate="yes" xml:space="preserve">
          <source>This style takes precedence over the &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; styles.</source>
          <target state="translated">このスタイルは、 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 、および &lt;code&gt;end&lt;/code&gt; スタイルよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="3168c87e990bac7c17434cadd2bd6fd628bc2220" translate="yes" xml:space="preserve">
          <source>This will automatically remove all &lt;code&gt;console.*&lt;/code&gt; calls in the release (production) versions of your project.</source>
          <target state="translated">これにより、プロジェクトのリリース（本番）バージョンのすべての &lt;code&gt;console.*&lt;/code&gt; 呼び出しが自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="2eb2ca5c78d44af579285e1d9b7d6125e67b09c8" translate="yes" xml:space="preserve">
          <source>This will check your files against the latest template and perform the following:</source>
          <target state="translated">これにより、ファイルを最新のテンプレートと照らし合わせてチェックし、以下を実行します。</target>
        </trans-unit>
        <trans-unit id="08d487e08791a4afe0f61aa0b0ce7bda14507677" translate="yes" xml:space="preserve">
          <source>This will eliminate a lot of hard work tracking down bugs, such as crashes caused by timeouts firing after a component has been unmounted.</source>
          <target state="translated">これにより、コンポーネントがアンマウントされた後にタイムアウトが発生してクラッシュが発生するなど、バグを追跡するための多くのハードワークが解消されます。</target>
        </trans-unit>
        <trans-unit id="213511d48aec4b8eee142dbd08bc3d2e7e2535ca" translate="yes" xml:space="preserve">
          <source>This will now reference the &lt;code&gt;main.jsbundle&lt;/code&gt; resource file that is created during the &lt;code&gt;Bundle React Native code and images&lt;/code&gt; Build Phase in Xcode.</source>
          <target state="translated">これにより、Xcode の &lt;code&gt;Bundle React Native code and images&lt;/code&gt; ビルドフェーズ中に作成される &lt;code&gt;main.jsbundle&lt;/code&gt; リソースファイルが参照されます。</target>
        </trans-unit>
        <trans-unit id="091a3653458a2bb847bcb3c3427f4746ee0b94b8" translate="yes" xml:space="preserve">
          <source>This will package everything that would typically be included in the &lt;code&gt;android&lt;/code&gt; directory of your &lt;code&gt;node_modules/react-native/&lt;/code&gt; installation in the root directory of your React Native checkout.</source>
          <target state="translated">これは通常、React Nativeチェックアウトのルートディレクトリにある &lt;code&gt;node_modules/react-native/&lt;/code&gt; インストールの &lt;code&gt;android&lt;/code&gt; ディレクトリに含まれるすべてのものをパッケージ化します。</target>
        </trans-unit>
        <trans-unit id="db6c7ffc36edeab7a4d26569ca167ccd247e08a8" translate="yes" xml:space="preserve">
          <source>This will print a message similar to the following (scroll up in the yarn output to see it):</source>
          <target state="translated">これにより、以下のようなメッセージが表示されます(ヤーンの出力を上にスクロールして見ることができます)。</target>
        </trans-unit>
        <trans-unit id="6010b29a3d8662b06ba17a4fe0d6fff436f7f810" translate="yes" xml:space="preserve">
          <source>This will render a blue label on iOS, and a blue rounded rectangle with white text on Android. Pressing the button will call the &quot;onPress&quot; function, which in this case displays an alert popup. If you like, you can specify a &quot;color&quot; prop to change the color of your button.</source>
          <target state="translated">これにより、iOSでは青いラベルが表示され、Androidでは青い丸みを帯びた四角形に白いテキストが表示されます。ボタンを押すと &quot;onPress&quot; 関数が呼び出され、この場合は警告ポップアップが表示されます。もしよければ、&quot;color &quot;プロップを指定してボタンの色を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="d82c2390c03255287b8b41f929d55d482fae5642" translate="yes" xml:space="preserve">
          <source>This will result in a container having &lt;code&gt;flex: 1&lt;/code&gt; on both platforms, a red background color on iOS, and a blue background color on Android.</source>
          <target state="translated">これにより、コンテナーの &lt;code&gt;flex: 1&lt;/code&gt; になります。両方のプラットフォームで1、iOSでは赤い背景色、Androidでは青い背景色になります。</target>
        </trans-unit>
        <trans-unit id="f6f08daa062f7cd8baa541e61bb425c265f5898f" translate="yes" xml:space="preserve">
          <source>This will start a development server for you.</source>
          <target state="translated">これで開発サーバーが起動します。</target>
        </trans-unit>
        <trans-unit id="a3074276c1aa65eaf1d046ad6f6215021ffc6b12" translate="yes" xml:space="preserve">
          <source>Though you may have installed the &lt;code&gt;react-native-cli&lt;/code&gt; via npm as a separate module, it is a shell for accessing the CLI embedded in the React Native of each project. Your commands and their effects are dependent on the version of the module of &lt;code&gt;react-native&lt;/code&gt; in context of the project. This guide will give a brief overview of the CLI in the module.</source>
          <target state="translated">npmを介して個別のモジュールとして &lt;code&gt;react-native-cli&lt;/code&gt; をインストールした可能性がありますが、これは各プロジェクトのReact Nativeに埋め込まれたCLIにアクセスするためのシェルです。コマンドとその効果は、プロジェクトのコンテキストでの &lt;code&gt;react-native&lt;/code&gt; モジュールのバージョンに依存します。このガイドでは、モジュールのCLIの概要を説明します。</target>
        </trans-unit>
        <trans-unit id="5541d0b76d127f6a3c54bbc247ffcc1b6c2bbc25" translate="yes" xml:space="preserve">
          <source>Threading</source>
          <target state="translated">Threading</target>
        </trans-unit>
        <trans-unit id="236758baf2d1f4e9e50870f9c35a578bfad9929b" translate="yes" xml:space="preserve">
          <source>Three buttons mean 'neutral', 'negative', 'positive' (such as 'Later', 'Cancel', 'OK')</source>
          <target state="translated">3つのボタンは「ニュートラル」「ネガティブ」「ポジティブ」(「後で」「キャンセル」「OK」など)を意味します。</target>
        </trans-unit>
        <trans-unit id="3937302e43d6795dd2ba380b09f29bcb5916b250" translate="yes" xml:space="preserve">
          <source>Three standard easing functions are provided:</source>
          <target state="translated">3つの標準的なイージング機能を搭載しています。</target>
        </trans-unit>
        <trans-unit id="218fe1c150b8e4e874fcd136f65c00092debbd09" translate="yes" xml:space="preserve">
          <source>Threshold in pixels (virtual, not physical) for calling onEndReached.</source>
          <target state="translated">onEndReached を呼び出すためのしきい値をピクセル単位で指定します(物理的ではなく仮想)。</target>
        </trans-unit>
        <trans-unit id="205b6a46e3d1b0637597ade9c38bdf1e45565662" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid</source>
          <target state="translated">TimePickerAndroid</target>
        </trans-unit>
        <trans-unit id="ffca255421eef1e58970752ade9e94264336a9fb" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid.dismissedAction()</source>
          <target state="translated">TimePickerAndroid.dismissedAction()</target>
        </trans-unit>
        <trans-unit id="0773daf0a687f2a88d206c54b56883dfe37bd0af" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid.open()</source>
          <target state="translated">TimePickerAndroid.open()</target>
        </trans-unit>
        <trans-unit id="fd877ef8eb38572d715b15d14edc129bb1947ff1" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid.timeSetAction()</source>
          <target state="translated">TimePickerAndroid.timeSetAction()</target>
        </trans-unit>
        <trans-unit id="f46212363e678ee97e4206fd8e79d9de3ece700b" translate="yes" xml:space="preserve">
          <source>TimerMixin</source>
          <target state="translated">TimerMixin</target>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="24c1f5b8292a5d203884073f480ea8bb1efa9cda" translate="yes" xml:space="preserve">
          <source>Timers are an important part of an application and React Native implements the &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers&quot;&gt;browser timers&lt;/a&gt;.</source>
          <target state="translated">タイマーはアプリケーションの重要な部分であり、React Nativeは&lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers&quot;&gt;ブラウザータイマーを&lt;/a&gt;実装します。</target>
        </trans-unit>
        <trans-unit id="0e80c78fe00de24a898a7ae47a8b1d680deaf816" translate="yes" xml:space="preserve">
          <source>Timezone offset in minutes.</source>
          <target state="translated">タイムゾーンを分単位でオフセットしています。</target>
        </trans-unit>
        <trans-unit id="5446e9af023e67acb45771c3714df8111e1c7ae4" translate="yes" xml:space="preserve">
          <source>Title color.</source>
          <target state="translated">タイトルカラー。</target>
        </trans-unit>
        <trans-unit id="f589f114f90883d51f1743f27a1eb723613c7b22" translate="yes" xml:space="preserve">
          <source>To &quot;stop&quot; an application when a view should be destroyed, call &lt;code&gt;AppRegistry.unmountApplicationComponentAtRootTag&lt;/code&gt; with the tag that was passed into &lt;code&gt;runApplication&lt;/code&gt;. These should always be used as a pair.</source>
          <target state="translated">ビューを &lt;code&gt;AppRegistry.unmountApplicationComponentAtRootTag&lt;/code&gt; 必要があるときにアプリケーションを「停止」するには、 &lt;code&gt;runApplication&lt;/code&gt; に渡されたタグを使用してAppRegistry.unmountApplicationComponentAtRootTagを呼び出します。これらは常にペアで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="52aacd3deea38df46a465a38e4f9fb7c2916c99a" translate="yes" xml:space="preserve">
          <source>To configure your app to be built using the &lt;code&gt;Release&lt;/code&gt; scheme, go to &lt;strong&gt;Product&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Scheme&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Edit Scheme&lt;/strong&gt;. Select the &lt;strong&gt;Run&lt;/strong&gt; tab in the sidebar, then set the Build Configuration dropdown to &lt;code&gt;Release&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Release&lt;/code&gt; スキームを使用してビルドするようにアプリを構成するには、[ &lt;strong&gt;製品]&lt;/strong&gt; &amp;rarr;[ &lt;strong&gt;スキーム]&lt;/strong&gt; &amp;rarr;[ &lt;strong&gt;スキームの編集]に移動します&lt;/strong&gt;。サイドバーの[ &lt;strong&gt;実行&lt;/strong&gt; ]タブを選択し、[ビルド構成]ドロップダウンを[ &lt;code&gt;Release&lt;/code&gt; ]に設定します。</target>
        </trans-unit>
        <trans-unit id="ff59d7aff49f763fc1d5fd7587ec27067cddc25b" translate="yes" xml:space="preserve">
          <source>To debug the JavaScript code in Chrome, select &quot;Debug JS Remotely&quot; from the Developer Menu. This will open a new tab at &lt;a href=&quot;http://localhost:8081/debugger-ui&quot;&gt;http://localhost:8081/debugger-ui&lt;/a&gt;.</source>
          <target state="translated">ChromeでJavaScriptコードをデバッグするには、開発者メニューから[JavaScriptをリモートでデバッグ]を選択します。これにより、&lt;a href=&quot;http://localhost:8081/debugger-ui&quot;&gt;http：// localhost：8081 / debugger-uiに&lt;/a&gt;新しいタブが開きます。</target>
        </trans-unit>
        <trans-unit id="d9a2873f948fa14a383e8bb50a2f61ca81dbda2d" translate="yes" xml:space="preserve">
          <source>To disable autofill, set &lt;code&gt;textContentType&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">自動入力を無効にするには、 &lt;code&gt;textContentType&lt;/code&gt; を &lt;code&gt;none&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="1df9e8dffcbe777ba957881cdf85687f0806c986" translate="yes" xml:space="preserve">
          <source>To document the properties (and which values they accept) of our MapView component we'll add a wrapper component and document the interface with React &lt;code&gt;PropTypes&lt;/code&gt;:</source>
          <target state="translated">MapViewコンポーネントのプロパティ（およびそれらが受け入れる値）を文書化するために、ラッパーコンポーネントを追加し、React &lt;code&gt;PropTypes&lt;/code&gt; とのインターフェースを文書化します。</target>
        </trans-unit>
        <trans-unit id="05fe3207e4e0bc5c86d89c1132b73dcef95813e1" translate="yes" xml:space="preserve">
          <source>To enable Proguard, edit &lt;code&gt;android/app/build.gradle&lt;/code&gt;:</source>
          <target state="translated">Proguardを有効にするには、 &lt;code&gt;android/app/build.gradle&lt;/code&gt; を編集します：</target>
        </trans-unit>
        <trans-unit id="2f742ad58da04725cd32af7049ca731dd63fc5b6" translate="yes" xml:space="preserve">
          <source>To enable USB debugging on your device, you will first need to enable the &quot;Developer options&quot; menu by going to &lt;strong&gt;Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;About phone&lt;/strong&gt; and then tapping the &lt;code&gt;Build number&lt;/code&gt; row at the bottom seven times. You can then go back to &lt;strong&gt;Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Developer options&lt;/strong&gt; to enable &quot;USB debugging&quot;.</source>
          <target state="translated">デバイスでUSBデバッグを有効にするには、まず&lt;strong&gt;[設定]&lt;/strong&gt; &amp;rarr; &lt;strong&gt;[ &lt;/strong&gt;&lt;strong&gt;端末情報&lt;/strong&gt;&lt;strong&gt;]に移動&lt;/strong&gt;し、下部の[ &lt;code&gt;Build number&lt;/code&gt; 行を7回タップして、&lt;strong&gt;[&lt;/strong&gt;開発者向けオプション]メニューを有効にする必要があります。次に、&lt;strong&gt;設定&lt;/strong&gt; &amp;rarr; &lt;strong&gt;開発者向けオプション&lt;/strong&gt;に戻って、「USBデバッグ」を有効にし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0840fa70e8738b8a054ad31a6ccc66cdba8cb255" translate="yes" xml:space="preserve">
          <source>To enable VoiceOver, go to the Settings app on your iOS device. Tap General, then Accessibility. There you will find many tools that people use to make their devices more usable, such as bolder text, increased contrast, and VoiceOver.</source>
          <target state="translated">VoiceOverを有効にするには、iOSデバイスの「設定」アプリにアクセスします。一般」、「アクセシビリティ」の順にタップします。そこには、テキストを太くしたり、コントラストを上げたり、VoiceOverなど、デバイスをより使いやすくするために人々が使っているツールがたくさんあります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
