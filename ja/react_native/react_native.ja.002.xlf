<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="53bfc941ff777e1ad334177159ab5a83ba0cdebb" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerSection()</source>
          <target state="translated">AppRegistry.registerSection()</target>
        </trans-unit>
        <trans-unit id="d407537ad0749765e1075d36cdac77dbe0bc069f" translate="yes" xml:space="preserve">
          <source>AppRegistry.runApplication()</source>
          <target state="translated">AppRegistry.runApplication()</target>
        </trans-unit>
        <trans-unit id="9753350a20dd203ce1d378546af1945a7b752c58" translate="yes" xml:space="preserve">
          <source>AppRegistry.setComponentProviderInstrumentationHook()</source>
          <target state="translated">AppRegistry.setComponentProviderInstrumentationHook()</target>
        </trans-unit>
        <trans-unit id="4bfad7d6f592fa4b82e4245d2c989e0db98afee6" translate="yes" xml:space="preserve">
          <source>AppRegistry.setWrapperComponentProvider()</source>
          <target state="translated">AppRegistry.setWrapperComponentProvider()</target>
        </trans-unit>
        <trans-unit id="81da68608a18380d2513233907e4d36bdeee7892" translate="yes" xml:space="preserve">
          <source>AppRegistry.startHeadlessTask()</source>
          <target state="translated">AppRegistry.startHeadlessTask()</target>
        </trans-unit>
        <trans-unit id="a1a11f9a57749e7ab0f087705e7f45eb2cf93f2e" translate="yes" xml:space="preserve">
          <source>AppRegistry.unmountApplicationComponentAtRootTag()</source>
          <target state="translated">AppRegistry.unmountApplicationComponentAtRootTag()</target>
        </trans-unit>
        <trans-unit id="13a00860aa30c3fe01abe1d769a88218083764f9" translate="yes" xml:space="preserve">
          <source>AppState</source>
          <target state="translated">AppState</target>
        </trans-unit>
        <trans-unit id="0eb1fc74f73f3ec8dbe688a31c908c108d6e0677" translate="yes" xml:space="preserve">
          <source>AppState is frequently used to determine the intent and proper behavior when handling push notifications.</source>
          <target state="translated">AppStateは、プッシュ通知を処理する際の意図と適切な動作を判断するために頻繁に使用されます。</target>
        </trans-unit>
        <trans-unit id="f7aee2dd002c8b2d02954bc1108e59b88a42ae92" translate="yes" xml:space="preserve">
          <source>AppState#currentState</source>
          <target state="translated">AppState#currentState</target>
        </trans-unit>
        <trans-unit id="6d8e0907c806e3c0db6cf12544a5efa6a1bd94c1" translate="yes" xml:space="preserve">
          <source>AppState.addEventListener()</source>
          <target state="translated">AppState.addEventListener()</target>
        </trans-unit>
        <trans-unit id="e30747d1fb74876fb2c5568b15360a9fba9be563" translate="yes" xml:space="preserve">
          <source>AppState.removeEventListener()</source>
          <target state="translated">AppState.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="4b1d5768bf02c995c76d44fcf7d52f46feaccb06" translate="yes" xml:space="preserve">
          <source>Apple TV</source>
          <target state="translated">アップルテレビ</target>
        </trans-unit>
        <trans-unit id="e21332f547df93c48f47f2d27fe950a257cdba55" translate="yes" xml:space="preserve">
          <source>Apple has blocked implicit cleartext HTTP resource loading. So we need to add the following our project's &lt;code&gt;Info.plist&lt;/code&gt; (or equivalent) file.</source>
          <target state="translated">Appleは暗黙のクリアテキストHTTPリソースの読み込みをブロックしました。したがって、次のプロジェクトの &lt;code&gt;Info.plist&lt;/code&gt; （または同等の）ファイルを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="7de0baa0a73331130988eb617dac1160696ecad6" translate="yes" xml:space="preserve">
          <source>Applications can schedule tasks to run after interactions with the following:</source>
          <target state="translated">アプリケーションは、以下のようなインタラクションの後に実行するタスクをスケジュールすることができます。</target>
        </trans-unit>
        <trans-unit id="ecbcebb2b3ff827126c79fdce3b0656422688ae7" translate="yes" xml:space="preserve">
          <source>Argument Types</source>
          <target state="translated">引数の種類</target>
        </trans-unit>
        <trans-unit id="4fbf2a28f6e9acedbd1d791fba6138914d435e51" translate="yes" xml:space="preserve">
          <source>Argument list too long: recursive header expansion failed</source>
          <target state="translated">引数リストが長すぎます。</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="37e87bd2fa28b5b92f9726d48c7b97ec377d253e" translate="yes" xml:space="preserve">
          <source>Array of animations may run in parallel (overlap), but are started in sequence with successive delays. Nice for doing trailing effects.</source>
          <target state="translated">アニメーションの配列は並列に実行されることがありますが(オーバーラップ)、連続した遅延で連続して開始されます。トレイリング効果を行うのに適しています。</target>
        </trans-unit>
        <trans-unit id="eb8359c9e37b820a8a4fb359bf9b3fd9ced1d9db" translate="yes" xml:space="preserve">
          <source>Array of key for the items to delete.</source>
          <target state="translated">削除する項目のキーの配列。</target>
        </trans-unit>
        <trans-unit id="c6727e401eaa6d55520a259c555cd24ad9c0e26d" translate="yes" xml:space="preserve">
          <source>Array of key for the items to get.</source>
          <target state="translated">取得するアイテムのキーの配列。</target>
        </trans-unit>
        <trans-unit id="4b3896c24e555d213f91fda162d6593fc1cbf644" translate="yes" xml:space="preserve">
          <source>Array of key-value array for the items to merge.</source>
          <target state="translated">マージする項目のキー値の配列。</target>
        </trans-unit>
        <trans-unit id="b51ec6992711baa28f328f4b5be4c4a7b4cbc0d3" translate="yes" xml:space="preserve">
          <source>Array of key-value array for the items to set.</source>
          <target state="translated">設定する項目のキー値の配列。</target>
        </trans-unit>
        <trans-unit id="8deda8f287ccaa61963b38b07fe6649d7cd48007" translate="yes" xml:space="preserve">
          <source>Array of notification identifiers.</source>
          <target state="translated">通知識別子の配列。</target>
        </trans-unit>
        <trans-unit id="aa8a7634e6518ac9ae30e0f1d42b6f33a7b500c2" translate="yes" xml:space="preserve">
          <source>Array of permission to request.</source>
          <target state="translated">要求する許可の配列。</target>
        </trans-unit>
        <trans-unit id="30d8112e86665f9e47c2cea3343349de85ee2f99" translate="yes" xml:space="preserve">
          <source>Array or buttons</source>
          <target state="translated">配列またはボタン</target>
        </trans-unit>
        <trans-unit id="04c6170fc9c6385c5b6cb63e39a33a8c4db2b979" translate="yes" xml:space="preserve">
          <source>Array&amp;lt;Array</source>
          <target state="translated">Array&amp;lt;Array</target>
        </trans-unit>
        <trans-unit id="679ef0f69b71ffcfffd14154349f3a662a2bf231" translate="yes" xml:space="preserve">
          <source>Array.from</source>
          <target state="translated">Array.from</target>
        </trans-unit>
        <trans-unit id="706cad37d3daf58f186aa10521349d0471f045bf" translate="yes" xml:space="preserve">
          <source>Array.prototype.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt;find&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex&quot;&gt;findIndex&lt;/a&gt;}</source>
          <target state="translated">Array.prototype。{ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt;find&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex&quot;&gt;findIndex&lt;/a&gt; }</target>
        </trans-unit>
        <trans-unit id="4e772098d96be21b32a9d5d74a244e07d08a625b" translate="yes" xml:space="preserve">
          <source>Array.prototype.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot;&gt;includes&lt;/a&gt;}</source>
          <target state="translated">Array.prototype.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot;&gt;includes&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="5be215c0273436e5cd85975ee8a43b5f371d1fff" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;CalendarManager.addEvent&lt;/code&gt; method gets more and more complex, the number of arguments will grow. Some of them might be optional. In this case it's worth considering changing the API a little bit to accept a dictionary of event attributes, like this:</source>
          <target state="translated">以下のよう &lt;code&gt;CalendarManager.addEvent&lt;/code&gt; の方法はますます複雑になります、引数の数が増加します。それらのいくつかはオプションであるかもしれません。この場合、次のように、イベント属性の辞書を受け入れるようにAPIを少し変更することを検討する価値があります。</target>
        </trans-unit>
        <trans-unit id="4335835ab2a265e786fa8827cc70f3ba87aa2884" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;NavigatorIOS&lt;/code&gt; leverages native UIKit navigation, it will automatically render a navigation bar with a back button and title.</source>
          <target state="translated">以下のよう &lt;code&gt;NavigatorIOS&lt;/code&gt; は、ネイティブのUIKitナビゲーションを活用し、それが自動的にバックボタンとタイトルとナビゲーションバーをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="632bb53488f096b6a1ec9a8f899e6757fd78d541" translate="yes" xml:space="preserve">
          <source>As a browser polyfill, this API is available through the &lt;code&gt;navigator.geolocation&lt;/code&gt; global - you do not need to &lt;code&gt;import&lt;/code&gt; it.</source>
          <target state="translated">ブラウザのポリフィルとして、このAPIは &lt;code&gt;navigator.geolocation&lt;/code&gt; グローバルを介して利用できます。 &lt;code&gt;import&lt;/code&gt; する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a682435a88c528a631cdd244dd2c60b9d2a45134" translate="yes" xml:space="preserve">
          <source>As a component grows in complexity, it is often cleaner to use &lt;code&gt;StyleSheet.create&lt;/code&gt; to define several styles in one place. Here's an example:</source>
          <target state="translated">コンポーネントが複雑になるにつれて、 &lt;code&gt;StyleSheet.create&lt;/code&gt; を使用して1つの場所で複数のスタイルを定義する方がきれいな場合があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="9f2bfddbb8c5205963ebfb8caf745c502baaf179" translate="yes" xml:space="preserve">
          <source>As always, to obtain a native node handle for a component, you can use &lt;code&gt;ReactNative.findNodeHandle(component)&lt;/code&gt;.</source>
          <target state="translated">いつものように、コンポーネントのネイティブノードハンドルを取得するには、 &lt;code&gt;ReactNative.findNodeHandle(component)&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d5b60e22b491181785451c1943de51bb964ea713" translate="yes" xml:space="preserve">
          <source>As events can be sent from anywhere, they can introduce spaghetti-style dependencies into your project.</source>
          <target state="translated">イベントはどこからでも送信できるので、プロジェクトにスパゲッティスタイルの依存関係を導入することができます。</target>
        </trans-unit>
        <trans-unit id="e77d63852574a7fcd7b7d1c3a2fc8605ea297973" translate="yes" xml:space="preserve">
          <source>As it happens, if a maintainer cannot easily reproduce the issue, one cannot reasonably expect them to be able to work on a fix. The maintainer will let you know this is the case, and your issue will be closed.</source>
          <target state="translated">たまたまですが、メンテナがその問題を簡単に再現できない場合、メンテナが修正作業をしてくれることを合理的に期待することはできません。メンテナはその旨をあなたに伝え、あなたの問題は解決されます。</target>
        </trans-unit>
        <trans-unit id="c3333c68849636382f507c100fb5b1b623307acb" translate="yes" xml:space="preserve">
          <source>As mentioned &lt;a href=&quot;direct-manipulation&quot;&gt;in the Direct Manipulation section&lt;/a&gt;, &lt;code&gt;setNativeProps&lt;/code&gt; allows us to modify properties of native-backed components (components that are actually backed by native views, unlike composite components) directly, without having to &lt;code&gt;setState&lt;/code&gt; and re-render the component hierarchy.</source>
          <target state="translated">上述したように&lt;a href=&quot;direct-manipulation&quot;&gt;直接操作部に&lt;/a&gt;、 &lt;code&gt;setNativeProps&lt;/code&gt; はしなくても、私たちは直接ネイティブ・バックコンポーネント（実際には複合コンポーネントとは異なり、ネイティブビューによってバックアップされているコンポーネント）のプロパティを変更することを可能にする &lt;code&gt;setState&lt;/code&gt; およびコンポーネントの階層を再レンダリング。</target>
        </trans-unit>
        <trans-unit id="95f35ad4c50fe4b12dddefde75a39eb9d54e9622" translate="yes" xml:space="preserve">
          <source>As mentioned above, &lt;code&gt;Navigator&lt;/code&gt; animations are controlled by the JavaScript thread. Imagine the &quot;push from right&quot; scene transition: each frame, the new scene is moved from the right to left, starting offscreen (let's say at an x-offset of 320) and ultimately settling when the scene sits at an x-offset of</source>
          <target state="translated">上記のように、 &lt;code&gt;Navigator&lt;/code&gt; アニメーションはJavaScriptスレッドによって制御されます。「プッシュフロムライト」のシーン遷移を想像してください。各フレームで、新しいシーンは右から左に移動し、オフスクリーンから始まり（xオフセット320としましょう）、最終的にシーンがxオフセットに座ったときに整定します。</target>
        </trans-unit>
        <trans-unit id="c0415f8ce2baa271850a76c588aba51cf7d7d340" translate="yes" xml:space="preserve">
          <source>As of iOS 9, your app needs to provide the &lt;code&gt;LSApplicationQueriesSchemes&lt;/code&gt; key inside &lt;code&gt;Info.plist&lt;/code&gt; or canOpenURL will always return false.</source>
          <target state="translated">iOS 9以降、アプリは &lt;code&gt;Info.plist&lt;/code&gt; 内に &lt;code&gt;LSApplicationQueriesSchemes&lt;/code&gt; キーを提供する必要があります。そうでない場合、canOpenURLは常にfalseを返します。</target>
        </trans-unit>
        <trans-unit id="9d9560f05b22bc06f21d62d5d5634e06781f0d12" translate="yes" xml:space="preserve">
          <source>As stated in the previous chapter, using properties comes with some limitations. Sometimes properties are not enough to drive the logic of our app and we need a solution that gives more flexibility. This chapter covers other communication techniques available in React Native. They can be used for internal communication (between JS and native layers in RN) as well as for external communication (between RN and the 'pure native' part of your app).</source>
          <target state="translated">前の章で述べたように、プロパティの使用にはいくつかの制限があります。ときにはプロパティだけではアプリのロジックを駆動するのに十分ではなく、より柔軟性のあるソリューションが必要になることもあります。この章では、React Native で利用できる他の通信技術について説明します。これらは、内部通信(RN の JS とネイティブレイヤーの間)や外部通信(RN とアプリの「ピュアネイティブ」部分の間)にも使用できます。</target>
        </trans-unit>
        <trans-unit id="f8693718b71d20326dcdf0e5dbbcce700987c903" translate="yes" xml:space="preserve">
          <source>As the name implies, it is only available on iOS. Take a look at &lt;a href=&quot;https://reactnavigation.org/&quot;&gt;&lt;code&gt;React Navigation&lt;/code&gt;&lt;/a&gt; for a cross-platform solution in JavaScript, or check out either of these components for native solutions: &lt;a href=&quot;http://airbnb.io/native-navigation/&quot;&gt;native-navigation&lt;/a&gt;, &lt;a href=&quot;https://github.com/wix/react-native-navigation&quot;&gt;react-native-navigation&lt;/a&gt;.</source>
          <target state="translated">名前が示すように、iOSでのみ使用できます。見てみましょう&lt;a href=&quot;https://reactnavigation.org/&quot;&gt; &lt;code&gt;React Navigation&lt;/code&gt; &lt;/a&gt;：JavaScriptでクロスプラットフォームソリューションのために、またはネイティブのソリューションのいずれかのために、これらのコンポーネントのチェックアウト&lt;a href=&quot;http://airbnb.io/native-navigation/&quot;&gt;ネイティブナビゲーション&lt;/a&gt;、&lt;a href=&quot;https://github.com/wix/react-native-navigation&quot;&gt;反応するネイティブ・ナビゲーションを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="42b79be96e4070fe37855632edf58a8095f5ac2f" translate="yes" xml:space="preserve">
          <source>As these extensions are loaded outside of the regular app sandbox, it's highly likely that several of these app extensions will be loaded simultaneously. As you might expect, these extensions have small memory usage limits. Keep these in mind when developing your app extensions. It's always highly recommended to test your application on an actual device, and more so when developing app extensions: too frequently, developers find that their extension works just fine in the iOS Simulator, only to get user reports that their extension is not loading on actual devices.</source>
          <target state="translated">これらの拡張機能は通常のアプリのサンドボックスの外でロードされるため、複数のアプリ拡張機能が同時にロードされる可能性が高いです。ご期待通り、これらの拡張機能にはメモリ使用量の制限があります。アプリ拡張機能を開発する際には、この点に注意してください。アプリ拡張機能を開発する際には、実際のデバイスでアプリケーションをテストすることを強くお勧めします。開発者がiOSシミュレータで拡張機能が正常に動作していることに気付いても、実際のデバイスではロードされないというユーザーの報告を受けることが多すぎます。</target>
        </trans-unit>
        <trans-unit id="ef9197258e8ff3623e3f8972dde27e41c0a7ee4e" translate="yes" xml:space="preserve">
          <source>As with a RedBox, you can use &lt;code&gt;console.warn()&lt;/code&gt; to trigger a YellowBox.</source>
          <target state="translated">RedBoxと同様に、 &lt;code&gt;console.warn()&lt;/code&gt; を使用してYellowBoxをトリガーできます。</target>
        </trans-unit>
        <trans-unit id="71f1c92f8ef7b31497c6be4da079de6a72047965" translate="yes" xml:space="preserve">
          <source>As your App Bundle grows in size, you may start to see a white screen flash between your splash screen and the display of your root application view. If this is the case, you can add the following code to &lt;code&gt;AppDelegate.m&lt;/code&gt; in order to keep your splash screen displayed during the transition.</source>
          <target state="translated">App Bundleのサイズが大きくなると、スプラッシュスクリーンとルートアプリケーションビューの表示の間に白い画面が点滅し始める場合があります。この場合は、移行中にスプラッシュ画面を表示し続けるために、次のコードを &lt;code&gt;AppDelegate.m&lt;/code&gt; に追加できます。</target>
        </trans-unit>
        <trans-unit id="1dbf8fe98b2f9b8810e645a8b03f26b64b831d7a" translate="yes" xml:space="preserve">
          <source>Ask for more information if the issue does not provide all the details required by the template.</source>
          <target state="translated">問題がテンプレートで必要とされるすべての詳細を提供していない場合は、詳細を問い合わせてください。</target>
        </trans-unit>
        <trans-unit id="cd5f89b46e24016c449dbec9415190b0f38bc3f6" translate="yes" xml:space="preserve">
          <source>Ask for test plans and review code.</source>
          <target state="translated">テスト計画やコードの見直しをお願いします。</target>
        </trans-unit>
        <trans-unit id="3a4472aebeb4444eebdb79747bb30d7ca2929b5d" translate="yes" xml:space="preserve">
          <source>Ask the author &quot;Can you rebase please?&quot; and add the label 'Needs response from author'.</source>
          <target state="translated">著者に「Can you rebase please? &quot;と聞いて、&quot;Needs response from author &quot;というラベルを追加してください。</target>
        </trans-unit>
        <trans-unit id="9f0186c9ab577dd79ff062543e6b42d477d42b6d" translate="yes" xml:space="preserve">
          <source>Ask the author to release it a separate npm module and close the pull request.</source>
          <target state="translated">作者に別の npm モジュールとしてリリースしてもらい、プルリクエストを閉じます。</target>
        </trans-unit>
        <trans-unit id="9fd4dcfc4fd87aa057aba918bd67400529545265" translate="yes" xml:space="preserve">
          <source>Ask the author to split it.</source>
          <target state="translated">作者に分けてもらいましょう。</target>
        </trans-unit>
        <trans-unit id="37d651a7063366a7d981378da37356c482330fc4" translate="yes" xml:space="preserve">
          <source>Aspect ratio control the size of the undefined dimension of a node. Aspect ratio is a non-standard property only available in react native and not CSS.</source>
          <target state="translated">アスペクト比は、ノードの未定義寸法のサイズを制御します。アスペクト比は react native でのみ利用可能な非標準のプロパティであり、CSS ではありません。</target>
        </trans-unit>
        <trans-unit id="0cb81b7e835017c6c249b19fca4961dae354955c" translate="yes" xml:space="preserve">
          <source>Aspect ratio takes min/max dimensions into account</source>
          <target state="translated">アスペクト比は最小/最大寸法を考慮しています。</target>
        </trans-unit>
        <trans-unit id="dfa758127336ebe157d32315fc727c8c92548eb4" translate="yes" xml:space="preserve">
          <source>Assign this property to a custom function which will be called when someone performs the &quot;magic tap&quot; gesture, which is a double-tap with two fingers. A magic tap function should perform the most relevant action a user could take on a component. In the Phone app on iPhone, a magic tap answers a phone call, or ends the current one. If the selected element does not have an &lt;code&gt;onMagicTap&lt;/code&gt; function, the system will traverse up the view hierarchy until it finds a view that does.</source>
          <target state="translated">このプロパティをカスタム関数に割り当てます。カスタム関数は、2本の指でダブルタップする「マジックタップ」ジェスチャーを実行したときに呼び出されます。マジックタップ機能は、ユーザーがコンポーネントに対して実行できる最も関連性の高いアクションを実行する必要があります。iPhoneの電話アプリでは、マジックタップで通話に応答するか、現在の通話を終了します。選択した要素に &lt;code&gt;onMagicTap&lt;/code&gt; 関数がない場合、システムは、ビューが見つかるまでビュー階層を上に移動します。</target>
        </trans-unit>
        <trans-unit id="d471ae289d315423fd708a316c3f02170cb40cc8" translate="yes" xml:space="preserve">
          <source>Assigns a maximum track image. Only static images are supported. The leftmost pixel of the image will be stretched to fill the track.</source>
          <target state="translated">最大トラック画像を割り当てます。静的なイメージのみサポートされます。画像の左端のピクセルがトラックを埋めるように引き伸ばされます。</target>
        </trans-unit>
        <trans-unit id="792d671d9e94d316c2ae8db2068503cb0943fe8a" translate="yes" xml:space="preserve">
          <source>Assigns a minimum track image. Only static images are supported. The rightmost pixel of the image will be stretched to fill the track.</source>
          <target state="translated">最小トラック画像を割り当てます。静的な画像のみサポートされます。画像の右端のピクセルはトラックを埋めるように引き伸ばされます。</target>
        </trans-unit>
        <trans-unit id="2d50d8857d784eafd5d11d1c07b9aa95740172c3" translate="yes" xml:space="preserve">
          <source>Assigns a single image for the track. Only static images are supported. The center pixel of the image will be stretched to fill the track.</source>
          <target state="translated">トラックに単一の画像を割り当てます。静的なイメージだけがサポートされます。画像の中心ピクセルはトラックを埋めるように引き伸ばされます。</target>
        </trans-unit>
        <trans-unit id="d190bddcb6d691658a7b7506348fdf8720bbdd78" translate="yes" xml:space="preserve">
          <source>Assume the &lt;a href=&quot;https://github.com/JoelMarcey/iOS-2048&quot;&gt;app for integration&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/2048_%28video_game%29&quot;&gt;2048&lt;/a&gt; game. Here is what the main menu of the native application looks like without React Native.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JoelMarcey/iOS-2048&quot;&gt;統合用&lt;/a&gt;のアプリが&lt;a href=&quot;https://en.wikipedia.org/wiki/2048_%28video_game%29&quot;&gt;2048&lt;/a&gt;ゲームであると想定します。以下は、React Nativeを使用しない場合のネイティブアプリケーションのメインメニューです。</target>
        </trans-unit>
        <trans-unit id="d48886bb860a150bb70976e80563fb2ebe160e8d" translate="yes" xml:space="preserve">
          <source>Assume the &lt;a href=&quot;https://github.com/JoelMarcey/swift-2048&quot;&gt;app for integration&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/2048_%28video_game%29&quot;&gt;2048&lt;/a&gt; game. Here is what the main menu of the native application looks like without React Native.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JoelMarcey/swift-2048&quot;&gt;統合用&lt;/a&gt;のアプリが&lt;a href=&quot;https://en.wikipedia.org/wiki/2048_%28video_game%29&quot;&gt;2048&lt;/a&gt;ゲームであると想定します。以下は、React Nativeを使用しない場合のネイティブアプリケーションのメインメニューです。</target>
        </trans-unit>
        <trans-unit id="121d03efb590af67826176ade97347bc7f7a9232" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;code&gt;MyAppText&lt;/code&gt; is a component that simply renders out its children into a &lt;code&gt;Text&lt;/code&gt; component with styling, then &lt;code&gt;MyAppHeaderText&lt;/code&gt; can be defined as follows:</source>
          <target state="translated">仮定すると &lt;code&gt;MyAppText&lt;/code&gt; は単純にその子をレンダリングするコンポーネントである &lt;code&gt;Text&lt;/code&gt; スタイリングを持つコンポーネント、そして &lt;code&gt;MyAppHeaderText&lt;/code&gt; は、次のように定義することができます。</target>
        </trans-unit>
        <trans-unit id="3664f1208c16cc9efe75a4f6948ee034df7afba5" translate="yes" xml:space="preserve">
          <source>Assuming that you have &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node&lt;/a&gt; installed, you can use npm to install the &lt;code&gt;create-react-native-app&lt;/code&gt; command line utility:</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Nodeが&lt;/a&gt;インストールされていると仮定すると、npmを使用して &lt;code&gt;create-react-native-app&lt;/code&gt; コマンドラインユーティリティをインストールできます。</target>
        </trans-unit>
        <trans-unit id="5a32c13aa494ead9b16390121d3b2b353f04d0bb" translate="yes" xml:space="preserve">
          <source>Assuming you have the Android SDK installed, run &lt;code&gt;android&lt;/code&gt; to open the Android SDK Manager.</source>
          <target state="translated">Android SDKがインストールされていると仮定して、 &lt;code&gt;android&lt;/code&gt; を実行してAndroid SDK Managerを開きます。</target>
        </trans-unit>
        <trans-unit id="cec32c7f17c13e655df8cc406ae95e7ff9543f50" translate="yes" xml:space="preserve">
          <source>AsyncStorage</source>
          <target state="translated">AsyncStorage</target>
        </trans-unit>
        <trans-unit id="b5978b8e08a641fdecdc698052a197b505a0f235" translate="yes" xml:space="preserve">
          <source>AsyncStorage.clear()</source>
          <target state="translated">AsyncStorage.clear()</target>
        </trans-unit>
        <trans-unit id="bc7d0d096184a9493a962b9072a72ef46a28f54a" translate="yes" xml:space="preserve">
          <source>AsyncStorage.flushGetRequests()</source>
          <target state="translated">AsyncStorage.flushGetRequests()</target>
        </trans-unit>
        <trans-unit id="4538158316456b88549d6180d8e10d2048acb8b7" translate="yes" xml:space="preserve">
          <source>AsyncStorage.getAllKeys()</source>
          <target state="translated">AsyncStorage.getAllKeys()</target>
        </trans-unit>
        <trans-unit id="4e5f220ddd7db951fcc967969c9a1204344557de" translate="yes" xml:space="preserve">
          <source>AsyncStorage.getItem()</source>
          <target state="translated">AsyncStorage.getItem()</target>
        </trans-unit>
        <trans-unit id="90508cdd96473555b9aa00a8a0c921a901a329de" translate="yes" xml:space="preserve">
          <source>AsyncStorage.mergeItem()</source>
          <target state="translated">AsyncStorage.mergeItem()</target>
        </trans-unit>
        <trans-unit id="fc234d763f86916fa596cf7efe819932dcae9c30" translate="yes" xml:space="preserve">
          <source>AsyncStorage.multiGet()</source>
          <target state="translated">AsyncStorage.multiGet()</target>
        </trans-unit>
        <trans-unit id="b3b665e52eac73ae142d821a1d47c0933ffd6eff" translate="yes" xml:space="preserve">
          <source>AsyncStorage.multiMerge()</source>
          <target state="translated">AsyncStorage.multiMerge()</target>
        </trans-unit>
        <trans-unit id="16e9f2a36fdf30e01961b8d5bc820fb8eaca190a" translate="yes" xml:space="preserve">
          <source>AsyncStorage.multiRemove()</source>
          <target state="translated">AsyncStorage.multiRemove()</target>
        </trans-unit>
        <trans-unit id="206f50782b9876ceab80ab14a5a98bf8b68b544f" translate="yes" xml:space="preserve">
          <source>AsyncStorage.multiSet()</source>
          <target state="translated">AsyncStorage.multiSet()</target>
        </trans-unit>
        <trans-unit id="21d5c6b9938386f659b7416db1b75b0c6d6547ae" translate="yes" xml:space="preserve">
          <source>AsyncStorage.removeItem()</source>
          <target state="translated">AsyncStorage.removeItem()</target>
        </trans-unit>
        <trans-unit id="1ba9696aa03c911e5d9a3e080ba0ef91d1962a83" translate="yes" xml:space="preserve">
          <source>AsyncStorage.setItem()</source>
          <target state="translated">AsyncStorage.setItem()</target>
        </trans-unit>
        <trans-unit id="4fce4de38578ca89eb79f518c8a3e4aedea2fbef" translate="yes" xml:space="preserve">
          <source>At least one of URL and message is required.</source>
          <target state="translated">URLとメッセージのうち、少なくとも1つは必須です。</target>
        </trans-unit>
        <trans-unit id="cc7f45024a4452bcbf28e4d8b991f7201c9f5a1e" translate="yes" xml:space="preserve">
          <source>At least one of the &lt;code&gt;viewAreaCoveragePercentThreshold&lt;/code&gt; or &lt;code&gt;itemVisiblePercentThreshold&lt;/code&gt; is required. This needs to be done in the &lt;code&gt;constructor&lt;/code&gt; to avoid following error (&lt;a href=&quot;https://github.com/facebook/react-native/issues/17408&quot;&gt;ref&lt;/a&gt;):</source>
          <target state="translated">&lt;code&gt;viewAreaCoveragePercentThreshold&lt;/code&gt; または &lt;code&gt;itemVisiblePercentThreshold&lt;/code&gt; の少なくとも1つが必要です。これは、次のエラー（&lt;a href=&quot;https://github.com/facebook/react-native/issues/17408&quot;&gt;ref&lt;/a&gt;）を回避するために &lt;code&gt;constructor&lt;/code&gt; で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="a51751bd62d263d42e34545a6bed7d2013b913ee" translate="yes" xml:space="preserve">
          <source>At the end of each command entry is an export. The export is an object with a function to perform, description of the command, and the command name. The object structure for the &lt;code&gt;link&lt;/code&gt; command looks like so:</source>
          <target state="translated">各コマンドエントリの最後にエクスポートがあります。エクスポートは、実行する機能、コマンドの説明、およびコマンド名を持つオブジェクトです。 &lt;code&gt;link&lt;/code&gt; コマンドのオブジェクト構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b038d8bf95b5fcb409d812ccdd8ed2d87ea8f908" translate="yes" xml:space="preserve">
          <source>At the moment it only supports having a single View instance as a child node, as it's implemented by replacing that View with another instance of RCTView node with some additional properties set.</source>
          <target state="translated">現時点では、単一のViewインスタンスを子ノードとして持つことのみをサポートしており、そのViewをいくつかの追加プロパティを設定したRCTViewノードの別のインスタンスに置き換えることで実装されています。</target>
        </trans-unit>
        <trans-unit id="1e627ac177f9c2d1dd9f5c057b97eb035bb65d20" translate="yes" xml:space="preserve">
          <source>At the top of your &lt;code&gt;AppDelegate.m&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;AppDelegate.m&lt;/code&gt; の上部に：</target>
        </trans-unit>
        <trans-unit id="ae82dba444c4fb7de632968bc85976093bb060e0" translate="yes" xml:space="preserve">
          <source>At the very bottom of the Accessibility settings, there is an &quot;Accessibility Shortcut&quot;. You can use this to toggle VoiceOver by triple clicking the Home button.</source>
          <target state="translated">アクセシビリティ設定の一番下に「アクセシビリティ・ショートカット」があります。これを使って、ホームボタンをトリプルクリックすることでVoiceOverを切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="d6c313f991cebd999c5d837e945a65cd705ab682" translate="yes" xml:space="preserve">
          <source>At this point you can continue developing your app as usual. Refer to our &lt;a href=&quot;debugging&quot;&gt;debugging&lt;/a&gt; and &lt;a href=&quot;running-on-device&quot;&gt;deployment&lt;/a&gt; docs to learn more about working with React Native.</source>
          <target state="translated">この時点で、通常どおりアプリの開発を続行できます。React Nativeの操作の詳細については、&lt;a href=&quot;debugging&quot;&gt;デバッグ&lt;/a&gt;および&lt;a href=&quot;running-on-device&quot;&gt;デプロイメントの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c2cb6f38d7fb1b895692ac80c0aaea9460245e6d" translate="yes" xml:space="preserve">
          <source>At this point, you'll have some very helpful information to inform your next steps.</source>
          <target state="translated">この時点で、次のステップを知らせるために非常に役立つ情報がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a7ac8fb84678f6722eb512ca08022569244a5b6f" translate="yes" xml:space="preserve">
          <source>Attaches a listener to remote or local notification events while the app is running in the foreground or the background.</source>
          <target state="translated">アプリがフォアグラウンドまたはバックグラウンドで実行されている間、リモートまたはローカルの通知イベントにリスナーをアタッチします。</target>
        </trans-unit>
        <trans-unit id="66b6afc23f48f6673b618c48fea647d89c775e13" translate="yes" xml:space="preserve">
          <source>Automatic linking</source>
          <target state="translated">自動リンク</target>
        </trans-unit>
        <trans-unit id="fc81ff80f8e6052fe25a57d57eff97d6f24e1045" translate="yes" xml:space="preserve">
          <source>Automatic reloading</source>
          <target state="translated">自動リロード</target>
        </trans-unit>
        <trans-unit id="488364693728431b98a4e484e1c02f83af8b2278" translate="yes" xml:space="preserve">
          <source>Automatically animates views to their new positions when the next layout happens.</source>
          <target state="translated">次のレイアウトが発生したときに、自動的にビューを新しい位置にアニメーションさせます。</target>
        </trans-unit>
        <trans-unit id="744801c552f2f78d2ffcbb8171413fb489a40e7e" translate="yes" xml:space="preserve">
          <source>Available as constants under &lt;code&gt;PermissionsAndroid.PERMISSIONS&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;PermissionsAndroid.PERMISSIONS&lt;/code&gt; で定数として使用できます。</target>
        </trans-unit>
        <trans-unit id="84d94cb9c71e31b715123b810476af974ad0529c" translate="yes" xml:space="preserve">
          <source>Available as constants under &lt;code&gt;PermissionsAndroid.RESULTS&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;PermissionsAndroid.RESULTS&lt;/code&gt; で定数として使用できます。</target>
        </trans-unit>
        <trans-unit id="034b52dbf273fd283001f5432f08e32a91248e37" translate="yes" xml:space="preserve">
          <source>Available on Android. Detect if the current active connection is metered or not. A network is classified as metered when the user is sensitive to heavy data usage on that connection due to monetary costs, data limitations or battery/performance issues.</source>
          <target state="translated">Androidで利用可能。現在のアクティブな接続がメータリングされているかどうかを検出します。ネットワークは、金銭的なコスト、データの制限、またはバッテリー/パフォーマンスの問題のために、ユーザーがその接続上で大量のデータ使用に敏感な場合、従量制に分類されます。</target>
        </trans-unit>
        <trans-unit id="c346f5f60b516e8432f8a27316773e7a5ff80a91" translate="yes" xml:space="preserve">
          <source>Available on all platforms. Asynchronously fetch a boolean to determine internet connectivity.</source>
          <target state="translated">すべてのプラットフォームで利用可能。インターネット接続性を判断するためのブール値を非同期的に取得します。</target>
        </trans-unit>
        <trans-unit id="4fc010a74cdc59ca35401c6897cf1ecd5be04a7c" translate="yes" xml:space="preserve">
          <source>Avoiding conflicts with the render function</source>
          <target state="translated">レンダリング関数との競合を避ける</target>
        </trans-unit>
        <trans-unit id="fa20105aa345410ab501f91e0512eb5f24554007" translate="yes" xml:space="preserve">
          <source>BackAndroid</source>
          <target state="translated">BackAndroid</target>
        </trans-unit>
        <trans-unit id="33e6cc2f8f3a04e75e39a1b3bf8a126c59f45b05" translate="yes" xml:space="preserve">
          <source>BackAndroid.addEventListener()</source>
          <target state="translated">BackAndroid.addEventListener()</target>
        </trans-unit>
        <trans-unit id="c8f0d467ca6464abf06fbc8f7c5232bd3f14465d" translate="yes" xml:space="preserve">
          <source>BackAndroid.exitApp()</source>
          <target state="translated">BackAndroid.exitApp()</target>
        </trans-unit>
        <trans-unit id="e27f166d85a03d4434ee7425229dd00df6394b2f" translate="yes" xml:space="preserve">
          <source>BackAndroid.removeEventListener()</source>
          <target state="translated">BackAndroid.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="c194d518c5b05fd222260529aa2693dbca0e8793" translate="yes" xml:space="preserve">
          <source>BackHandler</source>
          <target state="translated">BackHandler</target>
        </trans-unit>
        <trans-unit id="d93e50fb92d250461c32a3eacee7ec68c378f082" translate="yes" xml:space="preserve">
          <source>BackHandler.addEventListener()</source>
          <target state="translated">BackHandler.addEventListener()</target>
        </trans-unit>
        <trans-unit id="4fdadf0597a2b13574c3b8aadf1e9d8c7a7947c7" translate="yes" xml:space="preserve">
          <source>BackHandler.exitApp()</source>
          <target state="translated">BackHandler.exitApp()</target>
        </trans-unit>
        <trans-unit id="0333332b35382f4ab65e8fc94e2158b2b5705955" translate="yes" xml:space="preserve">
          <source>BackHandler.removeEventListener()</source>
          <target state="translated">BackHandler.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="871df390417c9fa097c361271429e48fb1d7c4e3" translate="yes" xml:space="preserve">
          <source>Background Image via Nesting</source>
          <target state="translated">背景画像 via ネスティング</target>
        </trans-unit>
        <trans-unit id="471c600b5a8503ae398208618e439624919010e9" translate="yes" xml:space="preserve">
          <source>Background color for the badge. Available since iOS 10.</source>
          <target state="translated">バッジの背景色。iOS 10から利用可能。</target>
        </trans-unit>
        <trans-unit id="1bffb116bc21bec6ab134c151a86945e1c9126d6" translate="yes" xml:space="preserve">
          <source>Background color of the tab bar</source>
          <target state="translated">タブバーの背景色</target>
        </trans-unit>
        <trans-unit id="dbcecfe0effbdacf6bad365b395a0a12fb453361" translate="yes" xml:space="preserve">
          <source>Background color when the switch is turned on.</source>
          <target state="translated">スイッチON時の背景色。</target>
        </trans-unit>
        <trans-unit id="b4cfbbd8d7fda2328dc9bffeb53b21d3a80dc900" translate="yes" xml:space="preserve">
          <source>Background color.</source>
          <target state="translated">背景色。</target>
        </trans-unit>
        <trans-unit id="d027ff3de876a1e4a34723cbca0f52651b59053d" translate="yes" xml:space="preserve">
          <source>Background drawable of native feedback touchable can be customized with &lt;code&gt;background&lt;/code&gt; property.</source>
          <target state="translated">タッチ可能なネイティブフィードバックの背景ドローアブルは、 &lt;code&gt;background&lt;/code&gt; プロパティでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="0f08183a3988f5c5ebf89ab00c4b8391a977cde7" translate="yes" xml:space="preserve">
          <source>Badge number for the app icon.</source>
          <target state="translated">アプリアイコンのバッジ番号です。</target>
        </trans-unit>
        <trans-unit id="686d132eb0c4b01c305a144b30da62ee77250309" translate="yes" xml:space="preserve">
          <source>Base implementation for the more convenient &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sectionlist&quot;&gt;&lt;code&gt;&amp;lt;SectionList&amp;gt;&lt;/code&gt;&lt;/a&gt; components, which are also better documented. In general, this should only really be used if you need more flexibility than &lt;code&gt;FlatList&lt;/code&gt; provides, e.g. for use with immutable data instead of plain arrays.</source>
          <target state="translated">文書化された、より便利な&lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;sectionlist&quot;&gt; &lt;code&gt;&amp;lt;SectionList&amp;gt;&lt;/code&gt; &lt;/a&gt;コンポーネントの基本実装。一般に、これは、 &lt;code&gt;FlatList&lt;/code&gt; が提供する以上の柔軟性が必要な場合にのみ実際に使用する必要があります。たとえば、単純な配列の代わりに不変データで使用します。</target>
        </trans-unit>
        <trans-unit id="ba074ee17445a6f1ca7d215a898ac904956e1601" translate="yes" xml:space="preserve">
          <source>Basic Components</source>
          <target state="translated">基本コンポーネント</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="65f639d2a40570f68ed54fc56bf243ceac2035a0" translate="yes" xml:space="preserve">
          <source>Basic usage:</source>
          <target state="translated">基本的な使い方です。</target>
        </trans-unit>
        <trans-unit id="c4e6bb8e67df41fe9c9e275052b3772708ed15ab" translate="yes" xml:space="preserve">
          <source>Batch operation to merge in existing and new values for a given set of keys. This assumes that the values are stringified JSON. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">特定のキーセットの既存の値と新しい値をマージするバッチ操作。これは、値が文字列化されたJSONであることを前提としています。 &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="bf2450835e1d1918fdc47ac4d8772ae0487d38df" translate="yes" xml:space="preserve">
          <source>Be careful not to overuse this or your memory usage could go through the roof. Profile your performance and memory usage when using these props. If you don't plan to move a view anymore, turn this property off.</source>
          <target state="translated">これを使いすぎないように注意してください。これらのプロップを使用する際には、パフォーマンスとメモリ使用量をプロファイルしてください。もうビューを移動する予定がない場合は、このプロパティをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="7c3bb156b969090b0b867243b709ad8e0d18f501" translate="yes" xml:space="preserve">
          <source>Be careful with &lt;code&gt;onStartShould*&lt;/code&gt; callbacks. They only reflect updated &lt;code&gt;gestureState&lt;/code&gt; for start/end events that bubble/capture to the Node. Once the node is the responder, you can rely on every start/end event being processed by the gesture and &lt;code&gt;gestureState&lt;/code&gt; being updated accordingly. (numberActiveTouches) may not be totally accurate unless you are the responder.</source>
          <target state="translated">&lt;code&gt;onStartShould*&lt;/code&gt; コールバックには注意してください。ノードに &lt;code&gt;gestureState&lt;/code&gt; /キャプチャする開始/終了イベントのジェスチャー状態の更新のみを反映します。ノードがレスポンダーになると、ジェスチャーによって処理されるすべての開始/終了イベントと &lt;code&gt;gestureState&lt;/code&gt; に応じて更新されるジェスチャー状態に依存できます。（numberActiveTouches）は、レスポンダでない限り、完全に正確ではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="d689faeb914b92ca56dcd20571bf6585148f4873" translate="yes" xml:space="preserve">
          <source>Bear in mind</source>
          <target state="translated">心に留めておく</target>
        </trans-unit>
        <trans-unit id="bb9b859bdefd6d3c541942f44900c8d84c5c20e2" translate="yes" xml:space="preserve">
          <source>Because React Native projects built with native code are essentially made up of an Android project, an iOS project, and a JavaScript project, upgrading can be rather tricky. Here's what you need to do to upgrade from an older version of React Native.</source>
          <target state="translated">ネイティブコードで構築されたReact Nativeプロジェクトは、基本的にAndroidプロジェクト、iOSプロジェクト、JavaScriptプロジェクトで構成されているため、アップグレードはかなり厄介です。ここでは、古いバージョンのReact Nativeからアップグレードするために必要なことを説明します。</target>
        </trans-unit>
        <trans-unit id="b41b17e2629bd1a2fbf431d26a48e82bf201f947" translate="yes" xml:space="preserve">
          <source>Because the entire configuration is declarative, we will be able to implement further optimizations that serialize the configuration and runs the animation on a high-priority thread.</source>
          <target state="translated">設定全体が宣言的であるため、設定をシリアライズして優先度の高いスレッドでアニメーションを実行する最適化をさらに実装することができるようになります。</target>
        </trans-unit>
        <trans-unit id="c7f2b419d1bed580fa00609d0b15aa46309f00a7" translate="yes" xml:space="preserve">
          <source>Because you don't build any native code when using Create React Native App to create a project, it's not possible to include custom native modules beyond the React Native APIs and components that are available in the Expo client app.</source>
          <target state="translated">Create React Native Appを使ってプロジェクトを作成する際にネイティブコードを構築しないため、Expoクライアントアプリで利用できるReact Native APIやコンポーネントを超えたカスタムネイティブモジュールを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="92a7a7f0f524028b2271e591f1aec0b5d28fc368" translate="yes" xml:space="preserve">
          <source>Before opening your pull request, make sure you have fully tested your changes. Test your changes locally and by running the various tests provided.</source>
          <target state="translated">プルリクエストを開く前に、変更内容が完全にテストされていることを確認してください。変更内容をローカルでテストしたり、提供されている様々なテストを実行したりしてください。</target>
        </trans-unit>
        <trans-unit id="3b4bae76a46cadb483247639484d32052a0152fa" translate="yes" xml:space="preserve">
          <source>Before react-native can execute JS code, that code must be loaded into memory and parsed. With a standard bundle if you load a 50mb bundle, all 50mb must be loaded and parsed before any of it can be executed. The optimization behind unbundling is that you can load only the portion of the 50mb that you actually need at startup, and progressively load more of the bundle as those sections are needed.</source>
          <target state="translated">react-native が JS コードを実行する前に、そのコードをメモリにロードして解析しなければなりません。標準バンドルの場合、50mb のバンドルをロードすると、50mb のすべてをロードして解析してから実行しなければなりません。アンバンドルの背後にある最適化は、起動時に実際に必要な 50mb の部分だけをロードし、それらのセクションが必要になるにつれて徐々に多くのバンドルをロードすることができるということです。</target>
        </trans-unit>
        <trans-unit id="ef370a784a490f8b1049215b8ede74cc8d104756" translate="yes" xml:space="preserve">
          <source>Before uploading the release build to the Play Store, make sure you test it thoroughly. First uninstall any previous version of the app you already have installed. Install it on the device using:</source>
          <target state="translated">リリースビルドをPlayストアにアップロードする前に、十分にテストしてください。まず、すでにインストールされているアプリの以前のバージョンをアンインストールします。を使ってデバイスにインストールします。</target>
        </trans-unit>
        <trans-unit id="cdaa3f285a06f69ffb78c6705fc3926572febbf8" translate="yes" xml:space="preserve">
          <source>Before you integrate React Native into your application, you will want to decide what parts of the React Native framework you would like to integrate. We will use CocoaPods to specify which of these &quot;subspecs&quot; your app will depend on.</source>
          <target state="translated">React Native をアプリケーションに統合する前に、React Native フレームワークのどの部分を統合したいかを決めておきましょう。CocoaPods を使って、アプリがどの「サブスペック」に依存するかを指定します。</target>
        </trans-unit>
        <trans-unit id="06b87acc32d5e1f5691b391a1aeace5d88afbdea" translate="yes" xml:space="preserve">
          <source>Behind the scenes, React Native converts this to a flat &lt;code&gt;NSAttributedString&lt;/code&gt; or &lt;code&gt;SpannableString&lt;/code&gt; that contains the following information:</source>
          <target state="translated">背後で、React Nativeはこれをフラットな &lt;code&gt;NSAttributedString&lt;/code&gt; または &lt;code&gt;SpannableString&lt;/code&gt; に変換し、次の情報を含みます。</target>
        </trans-unit>
        <trans-unit id="4d2e58d408d6fc0ae3dec3cbe4d6b69acbf22f21" translate="yes" xml:space="preserve">
          <source>Best Camera Roll Image</source>
          <target state="translated">ベストカメラロール画像</target>
        </trans-unit>
        <trans-unit id="36de90e22d47f94d755a4b1bb70aaddc1bb47593" translate="yes" xml:space="preserve">
          <source>Best Practices</source>
          <target state="translated">ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="0067153ebfb89f6958b5cc70d6a3e2aac4cf1508" translate="yes" xml:space="preserve">
          <source>Beyond Toasts</source>
          <target state="translated">乾杯を超えて</target>
        </trans-unit>
        <trans-unit id="1fb173455c35544c3b252d7ee987714898cf89d9" translate="yes" xml:space="preserve">
          <source>Blank space to show between pages. This is only visible while scrolling, pages are still edge-to-edge.</source>
          <target state="translated">ページ間に表示される空白スペース。これはスクロール中にのみ表示され、ページは端から端まで表示されます。</target>
        </trans-unit>
        <trans-unit id="d3655590a86638e0fe380d796badd7105c6c5add" translate="yes" xml:space="preserve">
          <source>Boolean that controls whether the web content is scaled to fit the view and enables the user to change the scale. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ビューに合わせてWebコンテンツを拡大縮小するかどうかを制御し、ユーザーが拡大縮小を変更できるようにするブール値。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8ef143ae9fe2d4cf06caca128cb3a3fd06450d9d" translate="yes" xml:space="preserve">
          <source>Boolean that determines whether HTML5 audio and video requires the user to tap them before they start playing. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">HTML5オーディオとビデオで、ユーザーが再生を開始する前にそれらをタップする必要があるかどうかを決定するブール値。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="701a9750b1b1950014a1b8f5828157baadff1a9c" translate="yes" xml:space="preserve">
          <source>Boolean that determines whether HTML5 videos play inline or use the native full-screen controller. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">HTML5ビデオをインラインで再生するか、ネイティブのフルスクリーンコントローラーを使用するかを決定するブール値。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="55e8512bf76b30077bf48895fda1a056f2847023" translate="yes" xml:space="preserve">
          <source>Boolean that sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin. Including accessing content from other file scheme URLs. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ファイルスキームURLのコンテキストで実行されているJavaScriptが任意のオリジンからコンテンツにアクセスできるようにするかどうかを設定するブール値。他のファイルスキームURLのコンテンツへのアクセスを含みます。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b06010a0090fd7f2b677712baf21a18eeb175c0d" translate="yes" xml:space="preserve">
          <source>Boolean value that determines whether scrolling is enabled in the &lt;code&gt;WebView&lt;/code&gt;. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; でスクロールが有効かどうかを決定するブール値。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="64ad40deb9f77f20affb6fa6503cab971fe63420" translate="yes" xml:space="preserve">
          <source>Boolean value that determines whether the web view bounces when it reaches the edge of the content. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">コンテンツの端に達したときにWebビューがバウンドするかどうかを決定するブール値。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4040dfb9d753949f6ee76b05dfe4f11f791b5d29" translate="yes" xml:space="preserve">
          <source>Boolean value that forces the &lt;code&gt;WebView&lt;/code&gt; to show the loading view on the first load. This prop must be set to &lt;code&gt;true&lt;/code&gt; in order for the &lt;code&gt;renderLoading&lt;/code&gt; prop to work.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; が最初のロード時にロードビューを表示するように強制するブール値。 &lt;code&gt;renderLoading&lt;/code&gt; プロップを機能させるには、このプロップを &lt;code&gt;true&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="36848458bebef214ab688a7260b717a2d6fca193" translate="yes" xml:space="preserve">
          <source>Boolean value that indicates whether the interactive pop gesture is enabled. This is useful for enabling/disabling the back swipe navigation gesture.</source>
          <target state="translated">インタラクティブなポップジェスチャーを有効にするかどうかを示すブール値。これは、バックスワイプナビゲーションジェスチャーの有効化/無効化に便利です。</target>
        </trans-unit>
        <trans-unit id="d8509998202a84e01236de2066f3fe3fac7ff038" translate="yes" xml:space="preserve">
          <source>Boolean value that indicates whether the navigation bar is hidden by default.</source>
          <target state="translated">デフォルトでナビゲーションバーが非表示になっているかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="1e6f7ccd892808eb00940133e1d70600591b1d79" translate="yes" xml:space="preserve">
          <source>Boolean value that indicates whether the navigation bar is translucent by default</source>
          <target state="translated">デフォルトでナビゲーションバーが半透明かどうかを示すブール値</target>
        </trans-unit>
        <trans-unit id="9564418cb6344f3d1d6aec1303362c755635863f" translate="yes" xml:space="preserve">
          <source>Boolean value that indicates whether to hide the 1px hairline shadow by default.</source>
          <target state="translated">デフォルトで1pxのヘアラインシャドウを非表示にするかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="325809a15f2fc0bb033be7088c94d7783a57c152" translate="yes" xml:space="preserve">
          <source>Boolean value to control whether DOM Storage is enabled. Used only in Android.</source>
          <target state="translated">DOM Storage を有効にするかどうかを制御するためのブール値。Android でのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="9429c6ff2d6dda3dda358d1f9db4773fd632dfb9" translate="yes" xml:space="preserve">
          <source>Boolean value to enable JavaScript in the &lt;code&gt;WebView&lt;/code&gt;. Used on Android only as JavaScript is enabled by default on iOS. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; で JavaScriptを有効にするブール値。iOSではJavaScriptがデフォルトで有効になっているため、Androidでのみ使用されます。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b32216b5eb804aedc713a4778a5d182bea86505b" translate="yes" xml:space="preserve">
          <source>Boolean value to enable third party cookies in the &lt;code&gt;WebView&lt;/code&gt;. Used on Android Lollipop and above only as third party cookies are enabled by default on Android Kitkat and below and on iOS. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; でサードパーティのCookieを有効にするブール値。Android Lollipop以降でのみ使用されます。サードパーティのCookieは、Android Kitkat以下およびiOSではデフォルトで有効になっています。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2caf2fa3a2ed3b7786f10d3ea2b04d05f68e72e2" translate="yes" xml:space="preserve">
          <source>Border color on iOS and background color on Android when the switch is turned off.</source>
          <target state="translated">iOSではボーダー色、Androidではスイッチをオフにした時の背景色。</target>
        </trans-unit>
        <trans-unit id="07d3823dee1485e526b60c57d471482ff1708572" translate="yes" xml:space="preserve">
          <source>Both iOS and Android allow you to display formatted text by annotating ranges of a string with specific formatting like bold or colored text (&lt;code&gt;NSAttributedString&lt;/code&gt; on iOS, &lt;code&gt;SpannableString&lt;/code&gt; on Android). In practice, this is very tedious. For React Native, we decided to use web paradigm for this where you can nest text to achieve the same effect.</source>
          <target state="translated">iOSとAndroidの両方を使用すると、太字や色付きのテキストのような書式設定、特定の文字列（の範囲注釈を付けることでフォーマットされたテキストを表示できるようにする &lt;code&gt;NSAttributedString&lt;/code&gt; iOSの上、 &lt;code&gt;SpannableString&lt;/code&gt; Android上では）。実際には、これは非常に退屈です。React Nativeの場合、テキストをネストして同じ効果を得ることができるWebパラダイムを使用することにしました。</target>
        </trans-unit>
        <trans-unit id="9cfa79836c47d1272c85fded22294209ab772cee" translate="yes" xml:space="preserve">
          <source>Both iOS and Android provide APIs for making apps accessible to people with disabilities. In addition, both platforms provide bundled assistive technologies, like the screen readers VoiceOver (iOS) and TalkBack (Android) for the visually impaired. Similarly, in React Native we have included APIs designed to provide developers with support for making apps more accessible. Take note, iOS and Android differ slightly in their approaches, and thus the React Native implementations may vary by platform.</source>
          <target state="translated">iOSもAndroidも、障害者がアプリをアクセシブルにするためのAPIを提供しています。さらに、両方のプラットフォームには、視覚障害者向けのスクリーンリーダー VoiceOver (iOS)や TalkBack (Android)などの支援技術がバンドルされています。同様に、React Native では、アプリをよりアクセシブルにするためのサポートを開発者に提供するために設計された API が含まれています。iOS と Android はアプローチが若干異なるため、React Native の実装はプラットフォームによって異なる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dc5fb1b69e1cd7c6f45de8dab4af7c32e99dcf70" translate="yes" xml:space="preserve">
          <source>Brackets on &lt;em&gt;every&lt;/em&gt;&lt;code&gt;if&lt;/code&gt;, on the &lt;em&gt;same&lt;/em&gt; line</source>
          <target state="translated">&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;if&lt;/code&gt; のブラケット、&lt;em&gt;同じ&lt;/em&gt;行</target>
        </trans-unit>
        <trans-unit id="b7e0211b0af196ad88335bb6bcd03b4dbc205f28" translate="yes" xml:space="preserve">
          <source>Branch organization</source>
          <target state="translated">支店組織</target>
        </trans-unit>
        <trans-unit id="87e2f27b9815cbdd5c08413b590c4d5b0a33ea28" translate="yes" xml:space="preserve">
          <source>Breaking changes</source>
          <target state="translated">変化を壊す</target>
        </trans-unit>
        <trans-unit id="1a483226071240505119d97b1f1efeb6d3419f97" translate="yes" xml:space="preserve">
          <source>Broadcast receiver then handles intent that was broadcasted in onReceive function. This is a great place to check whether your app is on foreground or not. If app is not on foreground we can prepare our intent to be started, with no information or additional information bundled using &lt;code&gt;putExtra&lt;/code&gt; (keep in mind bundle can handle only parcelable values). In the end service is started and wakelock is acquired.</source>
          <target state="translated">ブロードキャストレシーバーは、onReceive関数でブロードキャストされたインテントを処理します。これは、アプリがフォアグラウンドにあるかどうかを確認するのに最適な場所です。アプリがフォアグラウンドにない場合、情報を追加せず、または &lt;code&gt;putExtra&lt;/code&gt; を使用してバンドルされた追加情報を使用して、インテントを開始する準備をすることができます（バンドルはパーセル可能な値のみを処理できることに注意してください）。最終的にサービスが開始され、ウェイクロックが取得されます。</target>
        </trans-unit>
        <trans-unit id="8fe44ed8719f4eb65e53ac30bdf0bbdeac52874f" translate="yes" xml:space="preserve">
          <source>Browse &lt;a href=&quot;https://stackoverflow.com/questions/tagged/react-native&quot;&gt;Stack Overflow&lt;/a&gt; and answer questions. This will help you get familiarized with common pitfalls or misunderstandings, which can be useful when contributing updates to the documentation.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/tagged/react-native&quot;&gt;Stack Overflow&lt;/a&gt;を閲覧して質問に答えます。これは、よくある落とし穴や誤解に慣れるのに役立ちます。これは、ドキュメントの更新を提供するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="translated">Bugs</target>
        </trans-unit>
        <trans-unit id="1f671ba1e77aee527cc750937e253994fcd1eeea" translate="yes" xml:space="preserve">
          <source>Build changes</source>
          <target state="translated">ビルドの変更</target>
        </trans-unit>
        <trans-unit id="38bd3004a7372312e1cee54721753ccaa756a0d5" translate="yes" xml:space="preserve">
          <source>Building For Apple TV</source>
          <target state="translated">Apple TVのためのビルディング</target>
        </trans-unit>
        <trans-unit id="eedc5da4c1893f5a87de5803a710a9f85a060c8e" translate="yes" xml:space="preserve">
          <source>Building Projects with Native Code</source>
          <target state="translated">ネイティブコードを使用した建築プロジェクト</target>
        </trans-unit>
        <trans-unit id="800f9b0ed622af08de25447ef0c5bb7914b22b1a" translate="yes" xml:space="preserve">
          <source>Building React Native from source</source>
          <target state="translated">ソースからReact Nativeを構築する</target>
        </trans-unit>
        <trans-unit id="14117cd75ab0e53a4a9cbf6b8cd174581a1e563d" translate="yes" xml:space="preserve">
          <source>Building an app for distribution in the App Store requires using the &lt;code&gt;Release&lt;/code&gt; scheme in Xcode. Apps built for &lt;code&gt;Release&lt;/code&gt; will automatically disable the in-app Developer menu, which will prevent your users from inadvertently accessing the menu in production. It will also bundle the JavaScript locally, so you can put the app on a device and test whilst not connected to the computer.</source>
          <target state="translated">App Storeで配布するアプリを構築するには、Xcodeの &lt;code&gt;Release&lt;/code&gt; スキームを使用する必要があります。 &lt;code&gt;Release&lt;/code&gt; 用に作成されたアプリは、アプリ内のデベロッパーメニューを自動的に無効にします。これにより、ユーザーが本番環境のメニューに誤ってアクセスすることを防ぎます。また、JavaScriptをローカルにバンドルするため、コンピューターに接続せずにデバイスにアプリを配置してテストできます。</target>
        </trans-unit>
        <trans-unit id="681ad3a1e50b5988df2cde3159ded1d12baced42" translate="yes" xml:space="preserve">
          <source>Building for Maven/Nexus deployment</source>
          <target state="translated">Maven/Nexusデプロイのためのビルド</target>
        </trans-unit>
        <trans-unit id="e2e829937f9f765094dcebfd1bdc2684a18117dd" translate="yes" xml:space="preserve">
          <source>Building from Android Studio</source>
          <target state="translated">Android Studioからのビルド</target>
        </trans-unit>
        <trans-unit id="9c81844c692424c0e7e4d68528ebbfe3c61b5a39" translate="yes" xml:space="preserve">
          <source>Building from source can take a long time, especially for the first build, as it needs to download ~200 MB of artifacts and compile the native code. Every time you update the &lt;code&gt;react-native&lt;/code&gt; version from your repo, the build directory may get deleted, and all the files are re-downloaded. To avoid this, you might want to change your build directory path by editing the &lt;code&gt;~/.gradle/init.gradle&lt;/code&gt; file:</source>
          <target state="translated">ソースからのビルドには、特に最初のビルドの場合、200 MBのアーティファクトをダウンロードしてネイティブコードをコンパイルする必要があるため、時間がかかることがあります。リポから &lt;code&gt;react-native&lt;/code&gt; バージョンを更新するたびに、ビルドディレクトリが削除され、すべてのファイルが再ダウンロードされます。これを回避するには、 &lt;code&gt;~/.gradle/init.gradle&lt;/code&gt; ファイルを編集して、ビルドディレクトリパスを変更します。</target>
        </trans-unit>
        <trans-unit id="a0603e6f1d1f8c427cad406e03ecfa4bf082e099" translate="yes" xml:space="preserve">
          <source>Building the source</source>
          <target state="translated">ソースの構築</target>
        </trans-unit>
        <trans-unit id="f38bb7b56d9a2eddc3b8b979fecd81b83fa44598" translate="yes" xml:space="preserve">
          <source>Building your app for production</source>
          <target state="translated">制作用アプリの構築</target>
        </trans-unit>
        <trans-unit id="50b01ea3ff81182988ada16996258ec91da841a4" translate="yes" xml:space="preserve">
          <source>But by using the automatic type conversion feature, we can skip the manual conversion step completely, and just write:</source>
          <target state="translated">しかし、自動型変換機能を使えば、手動変換のステップを完全にスキップして、ただ書くだけです。</target>
        </trans-unit>
        <trans-unit id="fb4a4c8d8abac6c1a93e5b01e6bd1ff61660f900" translate="yes" xml:space="preserve">
          <source>But first, &lt;a href=&quot;performance#running-in-development-mode-dev-true&quot;&gt;&lt;strong&gt;make sure that Development Mode is OFF!&lt;/strong&gt;&lt;/a&gt; You should see &lt;code&gt;__DEV__ === false, development-level warning are OFF, performance optimizations are ON&lt;/code&gt; in your application logs.</source>
          <target state="translated">ただし、最初に、&lt;a href=&quot;performance#running-in-development-mode-dev-true&quot;&gt;&lt;strong&gt;開発モードがオフ&lt;/strong&gt;&lt;/a&gt;になっ&lt;strong&gt;ていることを確認してください。&lt;/strong&gt;アプリケーションログで &lt;code&gt;__DEV__ === false, development-level warning are OFF, performance optimizations are ON&lt;/code&gt; になっているはずです。</target>
        </trans-unit>
        <trans-unit id="97dc6c61d84a5c74d6305b7c5742006f968a4002" translate="yes" xml:space="preserve">
          <source>But it also works with any type that is supported by the &lt;code&gt;RCTConvert&lt;/code&gt; class (see &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTConvert.h&quot;&gt;&lt;code&gt;RCTConvert&lt;/code&gt;&lt;/a&gt; for details). The &lt;code&gt;RCTConvert&lt;/code&gt; helper functions all accept a JSON value as input and map it to a native Objective-C type or class.</source>
          <target state="translated">ただし、 &lt;code&gt;RCTConvert&lt;/code&gt; クラスでサポートされている任意のタイプでも機能します（詳細については、&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTConvert.h&quot;&gt; &lt;code&gt;RCTConvert&lt;/code&gt; &lt;/a&gt;を参照してください）。 &lt;code&gt;RCTConvert&lt;/code&gt; のヘルパー機能は、すべての入力としてJSON値を受け入れて、ネイティブのObjective-Cのタイプまたはクラスにマップ。</target>
        </trans-unit>
        <trans-unit id="794145f030ff721599a0353a9b2e59e9a92b9bf1" translate="yes" xml:space="preserve">
          <source>Button</source>
          <target state="translated">Button</target>
        </trans-unit>
        <trans-unit id="347b2acc059b527694a480bf662b4d3f15ff6a73" translate="yes" xml:space="preserve">
          <source>Button label</source>
          <target state="translated">ボタンラベル</target>
        </trans-unit>
        <trans-unit id="7279bf748482c7b54668700925789b57a1a3616c" translate="yes" xml:space="preserve">
          <source>Button style</source>
          <target state="translated">ボタンスタイル</target>
        </trans-unit>
        <trans-unit id="7e93841c0dddf047a74444dc61bed546b1ca86c6" translate="yes" xml:space="preserve">
          <source>Button#accessibilityLabel</source>
          <target state="translated">Button#accessibilityLabel</target>
        </trans-unit>
        <trans-unit id="d23fc83b9723b45ec66b6529c1de7db5c4019fb9" translate="yes" xml:space="preserve">
          <source>Button#color</source>
          <target state="translated">Button#color</target>
        </trans-unit>
        <trans-unit id="d4586c10ea67711dee19e6f4582bde094c718105" translate="yes" xml:space="preserve">
          <source>Button#disabled</source>
          <target state="translated">Button#disabled</target>
        </trans-unit>
        <trans-unit id="5d692d1bafe757feb6dfd5be52926146dde500ee" translate="yes" xml:space="preserve">
          <source>Button#hasTVPreferredFocus</source>
          <target state="translated">Button#hasTVPreferredFocus</target>
        </trans-unit>
        <trans-unit id="aa123233e9457ffde5698e5fe19159dfde3c34d3" translate="yes" xml:space="preserve">
          <source>Button#onPress</source>
          <target state="translated">Button#onPress</target>
        </trans-unit>
        <trans-unit id="e535e5eed21201a17af8bf5c9ba68423b95e7586" translate="yes" xml:space="preserve">
          <source>Button#testID</source>
          <target state="translated">Button#testID</target>
        </trans-unit>
        <trans-unit id="86270a392d8314f6c41ec5356967b84c07dbedde" translate="yes" xml:space="preserve">
          <source>Button#title</source>
          <target state="translated">Button#title</target>
        </trans-unit>
        <trans-unit id="5e9bd74225220dc4a114da281d35652ab2345d87" translate="yes" xml:space="preserve">
          <source>ButtonsArray</source>
          <target state="translated">ButtonsArray</target>
        </trans-unit>
        <trans-unit id="71445e93bbe0ec3bd8bbf41af982b9a1fca6e2e5" translate="yes" xml:space="preserve">
          <source>By &lt;a href=&quot;https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation&quot;&gt;intelligently applying &lt;code&gt;shouldComponentUpdate&lt;/code&gt;&lt;/a&gt; you can avoid the unnecessary overhead involved in reconciling unchanged component subtrees, to the point where it may be performant enough to use &lt;code&gt;setState&lt;/code&gt; instead of &lt;code&gt;setNativeProps&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation&quot;&gt;インテリジェントに適用 &lt;code&gt;shouldComponentUpdate&lt;/code&gt; を&lt;/a&gt;あなたは使用するパフォーマンス十分かもしれ点まで、和解そのままコンポーネントのサブツリーに関与不要なオーバーヘッドを回避することができ &lt;code&gt;setState&lt;/code&gt; の代わり &lt;code&gt;setNativeProps&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a1c28e0c12d655ac4e61e379b076ac814af23d25" translate="yes" xml:space="preserve">
          <source>By binding the &lt;code&gt;onPressItem&lt;/code&gt; handler, the props will remain &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;PureComponent&lt;/code&gt; will prevent wasteful re-renders unless the actual &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;, or &lt;code&gt;title&lt;/code&gt; props change, even if the components rendered in &lt;code&gt;MyListItem&lt;/code&gt; did not have such optimizations.</source>
          <target state="translated">結合によって &lt;code&gt;onPressItem&lt;/code&gt; ハンドラを、小道具が残る &lt;code&gt;===&lt;/code&gt; と &lt;code&gt;PureComponent&lt;/code&gt; は、実際のない限り、再レンダリング無駄に防ぐことができます &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;selected&lt;/code&gt; 、または &lt;code&gt;title&lt;/code&gt; でレンダリングコンポーネントた場合でも、変更を小道具 &lt;code&gt;MyListItem&lt;/code&gt; は、このような最適化を持っていませんでした。</target>
        </trans-unit>
        <trans-unit id="db0c3083ddc58cd886c014d04358e134cd61e8e4" translate="yes" xml:space="preserve">
          <source>By contributing to React Native, you agree that your contributions will be licensed under its BSD license.</source>
          <target state="translated">React Nativeに貢献することで、あなたの貢献がそのBSDライセンスの下でライセンスされることに同意したことになります。</target>
        </trans-unit>
        <trans-unit id="f6e50136bcdd019f8f37baf30cf2d20c2a8a8cb4" translate="yes" xml:space="preserve">
          <source>By default alerts on Android can be dismissed by tapping outside of the alert box. This event can be handled by providing an optional &lt;code&gt;options&lt;/code&gt; parameter, with an &lt;code&gt;onDismiss&lt;/code&gt; callback property &lt;code&gt;{ onDismiss: () =&amp;gt; {} }&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Androidのアラートは、アラートボックスの外側をタップして閉じることができます。このイベントは、オプションの &lt;code&gt;options&lt;/code&gt; パラメータと &lt;code&gt;onDismiss&lt;/code&gt; コールバックプロパティ &lt;code&gt;{ onDismiss: () =&amp;gt; {} }&lt;/code&gt; 指定することで処理できます。</target>
        </trans-unit>
        <trans-unit id="1b3fd56c245a8c58ab84884f713169085f618db5" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;PanResponder&lt;/code&gt; holds an &lt;code&gt;InteractionManager&lt;/code&gt; handle to block long-running JS events from interrupting active gestures.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;PanResponder&lt;/code&gt; は &lt;code&gt;InteractionManager&lt;/code&gt; ハンドルを保持して、実行時間の長いJSイベントがアクティブなジェスチャーに割り込むのをブロックします。</target>
        </trans-unit>
        <trans-unit id="d87a793a9576d6dd40e1a9c43377b7bf57417ac6" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;timing&lt;/code&gt; will use a easeInOut curve that conveys gradual acceleration to full speed and concludes by gradually decelerating to a stop. You can specify a different easing function by passing a &lt;code&gt;easing&lt;/code&gt; parameter. Custom &lt;code&gt;duration&lt;/code&gt; or even a &lt;code&gt;delay&lt;/code&gt; before the animation starts is also supported.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;timing&lt;/code&gt; はeaseInOutカーブを使用します。このカーブは、緩やかな加速を最高速度に伝え、徐々に減速して停止します。 &lt;code&gt;easing&lt;/code&gt; パラメータを渡すことで、別のイージング関数を指定できます。カスタムの &lt;code&gt;duration&lt;/code&gt; やアニメーションが始まる前の &lt;code&gt;delay&lt;/code&gt; もサポートされています。</target>
        </trans-unit>
        <trans-unit id="f1e8fab6e324dc0cf11f178083e7343d6533c46a" translate="yes" xml:space="preserve">
          <source>By default, iOS will block any request that's not encrypted using SSL. If you need to fetch from a cleartext URL (one that begins with &lt;code&gt;http&lt;/code&gt;) you will first need to &lt;a href=&quot;integration-with-existing-apps#test-your-integration&quot;&gt;add an App Transport Security exception&lt;/a&gt;. If you know ahead of time what domains you will need access to, it is more secure to add exceptions just for those domains; if the domains are not known until runtime you can &lt;a href=&quot;integration-with-existing-apps#app-transport-security&quot;&gt;disable ATS completely&lt;/a&gt;. Note however that from January 2017, &lt;a href=&quot;https://forums.developer.apple.com/thread/48979&quot;&gt;Apple's App Store review will require reasonable justification for disabling ATS&lt;/a&gt;. See &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&quot;&gt;Apple's documentation&lt;/a&gt; for more information.</source>
          <target state="translated">デフォルトでは、iOSはSSLを使用して暗号化されていないすべてのリクエストをブロックします。クリアテキストのURL（ &lt;code&gt;http&lt;/code&gt; で始まるURL）からフェッチする必要がある場合は、最初に&lt;a href=&quot;integration-with-existing-apps#test-your-integration&quot;&gt;App Transport Security例外&lt;/a&gt;を追加する必要があります。アクセスする必要のあるドメインが事前にわかっている場合は、それらのドメインのみに例外を追加する方が安全です。実行時までドメインが不明な場合は、&lt;a href=&quot;integration-with-existing-apps#app-transport-security&quot;&gt;ATSを完全に無効に&lt;/a&gt;できます。ただし、2017年1月以降、&lt;a href=&quot;https://forums.developer.apple.com/thread/48979&quot;&gt;AppleのApp Storeレビューでは、ATSを無効にする正当な理由が必要になる&lt;/a&gt;ことに注意してください。詳細については、&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&quot;&gt;Appleのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c5eedbfc338dc9c534bca7374473262365788831" translate="yes" xml:space="preserve">
          <source>By default, if one animation is stopped or interrupted, then all other animations in the group are also stopped.</source>
          <target state="translated">デフォルトでは、1つのアニメーションが停止または中断された場合、グループ内の他のすべてのアニメーションも停止します。</target>
        </trans-unit>
        <trans-unit id="047b6fea757e75226da27bd8e93b77de00f15dc0" translate="yes" xml:space="preserve">
          <source>By default, queued tasks are executed together in a loop in one &lt;code&gt;setImmediate&lt;/code&gt; batch. If &lt;code&gt;setDeadline&lt;/code&gt; is called with a positive number, then tasks will only be executed until the deadline (in terms of js event loop run time) approaches, at which point execution will yield via setTimeout, allowing events such as touches to start interactions and block queued tasks from executing, making apps more responsive.</source>
          <target state="translated">デフォルトでは、キューに入れられたタスクは、1つの &lt;code&gt;setImmediate&lt;/code&gt; バッチのループで一緒に実行されます。場合 &lt;code&gt;setDeadline&lt;/code&gt; は正の数で呼び出され、その後のタスクは、その時点の実行にかかるタッチなどのイベントが相互作用を開始し、キューに入れられたブロックできるように、setTimeoutを介してもたらす、接近（JSイベントループの実行時間の点で）デッドラインまで実行されますタスクが実行されないようにし、アプリの応答性を高めます。</target>
        </trans-unit>
        <trans-unit id="08e9947a627dbd3a88c3495c8f2917bf4923875f" translate="yes" xml:space="preserve">
          <source>By default, some permissions are added to your Android APK.</source>
          <target state="translated">デフォルトでは、いくつかのパーミッションがあなたのAndroid APKに追加されます。</target>
        </trans-unit>
        <trans-unit id="088853aea38ddc18a9cb8e4b436969ff98107f14" translate="yes" xml:space="preserve">
          <source>By default, the date picker will use the device's timezone. With this parameter, it is possible to force a certain timezone offset. For instance, to show times in Pacific Standard Time, pass -7 * 60.</source>
          <target state="translated">デフォルトでは、日付ピッカーはデバイスのタイムゾーンを使用します。このパラメータを使用して、特定のタイムゾーンのオフセットを強制的に設定することができます。例えば、太平洋標準時を表示するには -7*60 を指定します。</target>
        </trans-unit>
        <trans-unit id="4583a0a777c5bd1657524037139bc816f5995c7c" translate="yes" xml:space="preserve">
          <source>By default, the generated APK has the native code for both x86 and ARMv7a CPU architectures. This makes it easier to share APKs that run on almost all Android devices. However, this has the downside that there will be some unused native code on any device, leading to unnecessarily bigger APKs.</source>
          <target state="translated">デフォルトでは、生成されたAPKはx86とARMv7aの両方のCPUアーキテクチャ用のネイティブコードを持っています。これにより、ほぼすべてのAndroidデバイス上で動作するAPKの共有が容易になります。しかし、これはどのデバイスにも未使用のネイティブコードが存在し、不必要に大きなAPKにつながるという欠点があります。</target>
        </trans-unit>
        <trans-unit id="9d5c500b3840a26070ff56172980039de6955fd4" translate="yes" xml:space="preserve">
          <source>By default, the list looks for a &lt;code&gt;key&lt;/code&gt; prop on each item and uses that for the React key. Alternatively, you can provide a custom &lt;code&gt;keyExtractor&lt;/code&gt; prop.</source>
          <target state="translated">デフォルトでは、リストは各アイテムの &lt;code&gt;key&lt;/code&gt; プロップを探し、それをReactキーに使用します。または、カスタムの &lt;code&gt;keyExtractor&lt;/code&gt; プロップを提供できます。</target>
        </trans-unit>
        <trans-unit id="cd295ca481340f68b1d6c390e9147f83283201ce" translate="yes" xml:space="preserve">
          <source>By default, your app will crash if you try to run a task while the app is in the foreground. This is to prevent developers from shooting themselves in the foot by doing a lot of work in a task and slowing the UI. You can pass a fourth &lt;code&gt;boolean&lt;/code&gt; argument to control this behaviour.</source>
          <target state="translated">デフォルトでは、アプリがフォアグラウンドにあるときにタスクを実行しようとすると、アプリがクラッシュします。これは、開発者がタスクで多くの作業を行い、UIを遅くすることにより、自分自身を撃ち抜くことを防ぐためです。この動作を制御するために、4番目の &lt;code&gt;boolean&lt;/code&gt; 引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d7fb9f01de53f39e9220ff991f682c1c866cdcc4" translate="yes" xml:space="preserve">
          <source>By moving styles away from the render function, you're making the code easier to understand.</source>
          <target state="translated">スタイルをレンダー関数から遠ざけることで、コードを理解しやすくしています。</target>
        </trans-unit>
        <trans-unit id="0b075b48641038c9f7772ad6ddf05ff73d8a77f4" translate="yes" xml:space="preserve">
          <source>By passing &lt;code&gt;extraData={this.state}&lt;/code&gt; to &lt;code&gt;FlatList&lt;/code&gt; we make sure &lt;code&gt;FlatList&lt;/code&gt; itself will re-render when the &lt;code&gt;state.selected&lt;/code&gt; changes. Without setting this prop, &lt;code&gt;FlatList&lt;/code&gt; would not know it needs to re-render any items because it is also a &lt;code&gt;PureComponent&lt;/code&gt; and the prop comparison will not show any changes.</source>
          <target state="translated">渡すことによって &lt;code&gt;extraData={this.state}&lt;/code&gt; に &lt;code&gt;FlatList&lt;/code&gt; 我々は確認して &lt;code&gt;FlatList&lt;/code&gt; 時に自身が再レンダリングされます &lt;code&gt;state.selected&lt;/code&gt; 変更。このプロップを設定しないと、 &lt;code&gt;FlatList&lt;/code&gt; はアイテムを再レンダリングする必要があることを認識しません。これは、 &lt;code&gt;PureComponent&lt;/code&gt; でもあり、プロップの比較で変更が表示されないためです。</target>
        </trans-unit>
        <trans-unit id="81c8dd2b2df905b4646ca75a946a2b7ea2dbc119" translate="yes" xml:space="preserve">
          <source>By using the native driver, we send everything about the animation to native before starting the animation, allowing native code to perform the animation on the UI thread without having to go through the bridge on every frame. Once the animation has started, the JS thread can be blocked without affecting the animation.</source>
          <target state="translated">ネイティブドライバを使用することで、アニメーションを開始する前にアニメーションに関するすべての情報をネイティブに送ることができ、ネイティブコードがフレームごとにブリッジを通過することなくUIスレッド上でアニメーションを実行できるようになります。アニメーションが開始されると、アニメーションに影響を与えることなくJSスレッドをブロックすることができます。</target>
        </trans-unit>
        <trans-unit id="ae43d55902c795d6b12487dbfe3696c297f10842" translate="yes" xml:space="preserve">
          <source>Cache Control (iOS Only)</source>
          <target state="translated">キャッシュ制御(iOSのみ</target>
        </trans-unit>
        <trans-unit id="a935b34a18c6b702fa70c595f96c5cae7e84c320" translate="yes" xml:space="preserve">
          <source>Call this to batch the deletion of all keys in the &lt;code&gt;keys&lt;/code&gt; array. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">これを呼び出して、 &lt;code&gt;keys&lt;/code&gt; 配列内のすべてのキーの削除をバッチ処理します。 &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="4e1b428f73dc048d6717ecd831621a0cb4281f53" translate="yes" xml:space="preserve">
          <source>Call this to execute when the remote notification handling is complete. When calling this block, pass in the fetch result value that best describes the results of your operation. You &lt;em&gt;must&lt;/em&gt; call this handler and should do so as soon as possible. For a list of possible values, see &lt;code&gt;PushNotificationIOS.FetchResult&lt;/code&gt;.</source>
          <target state="translated">これを呼び出して、リモート通知処理が完了したときに実行します。このブロックを呼び出すときは、操作の結果を最もよく表すフェッチ結果値を渡します。このハンドラを呼び出す必要があり、できるだけ早く呼び出す&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。可能な値のリストについては、 &lt;code&gt;PushNotificationIOS.FetchResult&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7017bfb39831f0ea6dce133251ae0aab507f3d66" translate="yes" xml:space="preserve">
          <source>Callback called when the icon is selected.</source>
          <target state="translated">アイコンが選択されたときに呼び出されるコールバック</target>
        </trans-unit>
        <trans-unit id="b3bdaab1bc5b6d45f1762a8deb467cb30b1f101b" translate="yes" xml:space="preserve">
          <source>Callback continuously called while the user is dragging the slider.</source>
          <target state="translated">ユーザーがスライダをドラッグしている間、コールバックが継続的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ac87fe01b8b1aa1c79801caf087504a2462c16ac" translate="yes" xml:space="preserve">
          <source>Callback for when an item is selected. This is called with the following parameters:</source>
          <target state="translated">アイテムが選択されたときのコールバック。これは以下のパラメータで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9a53360a5d07e9b96cf6ce78661985fffae03188" translate="yes" xml:space="preserve">
          <source>Callback function when button pressed</source>
          <target state="translated">ボタン押下時のコールバック機能</target>
        </trans-unit>
        <trans-unit id="de376aa0d44c0f06e6d846e240d1c402a4734170" translate="yes" xml:space="preserve">
          <source>Callback that is called when a key is pressed. This will be called with &lt;code&gt;{ nativeEvent: { key: keyValue } }&lt;/code&gt; where &lt;code&gt;keyValue&lt;/code&gt; is &lt;code&gt;'Enter'&lt;/code&gt; or &lt;code&gt;'Backspace'&lt;/code&gt; for respective keys and the typed-in character otherwise including &lt;code&gt;' '&lt;/code&gt; for space. Fires before &lt;code&gt;onChange&lt;/code&gt; callbacks. Note: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.</source>
          <target state="translated">キーが押されたときに呼び出されるコールバック。これは、 &lt;code&gt;{ nativeEvent: { key: keyValue } }&lt;/code&gt; で呼び出されます。ここで、 &lt;code&gt;keyValue&lt;/code&gt; は、それぞれのキーの &lt;code&gt;'Enter'&lt;/code&gt; または &lt;code&gt;'Backspace'&lt;/code&gt; であり、入力した文字は、スペースの場合は &lt;code&gt;' '&lt;/code&gt; を含みます。 &lt;code&gt;onChange&lt;/code&gt; コールバックの前に発生します。注：Androidでは、ソフトキーボードからの入力のみが処理され、ハードウェアキーボード入力は処理されません。</target>
        </trans-unit>
        <trans-unit id="dfe33e65ec5e9ec1e5a1bdc15bf50bd2bd01ff3b" translate="yes" xml:space="preserve">
          <source>Callback that is called when an action is selected. The only argument that is passed to the callback is the position of the action in the actions array.</source>
          <target state="translated">アクションが選択されたときに呼び出されるコールバック。コールバックに渡される引数は、アクション配列内のアクションの位置のみです。</target>
        </trans-unit>
        <trans-unit id="7273ed7cbd62ec2530c3a9a4350f4f074a1de8af" translate="yes" xml:space="preserve">
          <source>Callback that is called when text input ends.</source>
          <target state="translated">テキスト入力が終了したときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="66257709d240d73c5d471ff7dcc43e52dfae47ae" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input is blurred.</source>
          <target state="translated">テキスト入力がぼやけたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="5932e2c67ca6c4c735795276fd0bd914fa813c5e" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input is focused.</source>
          <target state="translated">テキスト入力がフォーカスされたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="927a8b7c62cc07a3725d0c6a4635dbbe50824c4c" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input selection is changed. This will be called with &lt;code&gt;{ nativeEvent: { selection: { start, end } } }&lt;/code&gt;.</source>
          <target state="translated">テキスト入力選択が変更されたときに呼び出されるコールバック。これは、 &lt;code&gt;{ nativeEvent: { selection: { start, end } } }&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="756311e134f8ca6373e07f34c91be1082ab4b0b8" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input's content size changes. This will be called with &lt;code&gt;{ nativeEvent: { contentSize: { width, height } } }&lt;/code&gt;.</source>
          <target state="translated">テキスト入力のコンテンツサイズが変更されたときに呼び出されるコールバック。これは、 &lt;code&gt;{ nativeEvent: { contentSize: { width, height } } }&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9a27b024b76f438e6f57942cee35d79805a4d461" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input's submit button is pressed. Invalid if &lt;code&gt;multiline={true}&lt;/code&gt; is specified.</source>
          <target state="translated">テキスト入力の送信ボタンが押されたときに呼び出されるコールバック。 &lt;code&gt;multiline={true}&lt;/code&gt; が指定されている場合は無効です。</target>
        </trans-unit>
        <trans-unit id="6a72ba4342f7c5739f7b11b4efa6ec963b2dbca2" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input's text changes.</source>
          <target state="translated">テキスト入力のテキストが変更されたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="fc17fc1b574ff74ca70c41596f2e8f78ad1718a1" translate="yes" xml:space="preserve">
          <source>Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.</source>
          <target state="translated">テキスト入力のテキストが変更されたときに呼び出されるコールバック。変更されたテキストは、コールバックハンドラの引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="a23d2b7f90c128fb6ab9d91659212f22a302c195" translate="yes" xml:space="preserve">
          <source>Callback that is called when the user releases the slider, regardless if the value has changed. The current value is passed as an argument to the callback handler.</source>
          <target state="translated">値が変更されているかどうかに関わらず、ユーザーがスライダーを解放したときに呼び出されるコールバック。現在の値は、コールバック ハンドラの引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="6e7fb2aa305d75b3ba9dd8ca6d2f8dbe5d98b7f3" translate="yes" xml:space="preserve">
          <source>Callback that is called when the user taps a segment; passes the event as an argument</source>
          <target state="translated">ユーザーがセグメントをタップしたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="6b174fb9640794dcd166246fbc6351dd771d22f4" translate="yes" xml:space="preserve">
          <source>Callback that is called when the user taps a segment; passes the segment's value as an argument</source>
          <target state="translated">ユーザーがセグメントをタップしたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="5d14691e53e684cc28aefc6e850d887809deae6e" translate="yes" xml:space="preserve">
          <source>Callback when this tab is being selected, you should change the state of your component to set selected={true}.</source>
          <target state="translated">このタブが選択されているときのコールバックは、コンポーネントの状態を変更してselected={true}とする必要があります。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="f4305c84190d63e588b92b1baf54a762a21e1bc3" translate="yes" xml:space="preserve">
          <source>Called as soon as the touch is released even before onPress.</source>
          <target state="translated">onPress前でもタッチが離されるとすぐに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="508e599fe81f875812272aa6b87717faadafb769" translate="yes" xml:space="preserve">
          <source>Called as soon as the touchable element is pressed and invoked even before onPress. This can be useful when making network requests.</source>
          <target state="translated">タッチ可能な要素が押されるとすぐに呼び出され、onPressの前にも呼び出されます。これは、ネットワークリクエストを行う際に便利です。</target>
        </trans-unit>
        <trans-unit id="0b2e3584b0fa7bc17417558d3969b5a59f133336" translate="yes" xml:space="preserve">
          <source>Called immediately after the underlay is hidden</source>
          <target state="translated">アンダーレイが隠された直後に呼び出される</target>
        </trans-unit>
        <trans-unit id="6e62a0769a5c5f2334c76b35f51aeabee6ecae8f" translate="yes" xml:space="preserve">
          <source>Called immediately after the underlay is shown</source>
          <target state="translated">アンダーレイが表示された直後に呼び出される</target>
        </trans-unit>
        <trans-unit id="982e7813775e11f8c5cc7b83dca6f79f34284567" translate="yes" xml:space="preserve">
          <source>Called once when the scroll position gets within &lt;code&gt;onEndReachedThreshold&lt;/code&gt; of the rendered content.</source>
          <target state="translated">スクロール位置がレンダリングされたコンテンツの &lt;code&gt;onEndReachedThreshold&lt;/code&gt; 内に入ると1回呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6fc1565c7232ca9311b177def2bbecd4faf9e637" translate="yes" xml:space="preserve">
          <source>Called when all rows have been rendered and the list has been scrolled to within onEndReachedThreshold of the bottom. The native scroll event is provided.</source>
          <target state="translated">すべての行がレンダリングされ、リストが底辺の onEndReachedThreshold の範囲内までスクロールされたときにコールされます。ネイティブスクロールイベントが提供されます。</target>
        </trans-unit>
        <trans-unit id="6674fe34af2a6b35269ce219f2f765ba2e7d9269" translate="yes" xml:space="preserve">
          <source>Called when scrollable content view of the ScrollView changes.</source>
          <target state="translated">ScrollView のスクロール可能なコンテンツビューが変更されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1fad384e038ee318a1443cbd3e3f7ac6d978e4e4" translate="yes" xml:space="preserve">
          <source>Called when the animation finished. Only supported on iOS.</source>
          <target state="translated">アニメーションが終了したときに呼び出されます。iOSのみ対応しています。</target>
        </trans-unit>
        <trans-unit id="1f207281eac1cf05996cf8623928f2d192de5ecd" translate="yes" xml:space="preserve">
          <source>Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).</source>
          <target state="translated">モメンタムスクロールが終了したときにコールされます(ScrollViewが滑って停止するときに発生するスクロール)。</target>
        </trans-unit>
        <trans-unit id="65466f9b19c5f8ff9277d206781b2c6d7d267c2f" translate="yes" xml:space="preserve">
          <source>Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).</source>
          <target state="translated">モメンタムスクロール(ScrollViewが滑って停止するときに発生するスクロール)が開始されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a4329e3b426e5c6b0cf0db0b368a34286f863a45" translate="yes" xml:space="preserve">
          <source>Called when the set of visible rows changes. &lt;code&gt;visibleRows&lt;/code&gt; maps { sectionID: { rowID: true }} for all the visible rows, and &lt;code&gt;changedRows&lt;/code&gt; maps { sectionID: { rowID: true | false }} for the rows that have changed their visibility, with true indicating visible, and false indicating the view has moved out of view.</source>
          <target state="translated">表示されている行のセットが変更されたときに呼び出されます。 &lt;code&gt;visibleRows&lt;/code&gt; は、すべての可視行の{sectionID：{rowID：true}}をマップし、 &lt;code&gt;changedRows&lt;/code&gt; は{sectionID：{rowID：true | false}}は、可視性が変更された行に対して表示されます。trueは可視を示し、falseはビューがビューの外に移動したことを示します。</target>
        </trans-unit>
        <trans-unit id="6cda678fdd004694e0790115da6d4dcdadf28dac" translate="yes" xml:space="preserve">
          <source>Called when the touch is released, but not if cancelled (e.g. by a scroll that steals the responder lock).</source>
          <target state="translated">タッチが解除されたときに呼び出されますが、キャンセルされた場合は呼び出されません (レスポンダロックを盗むスクロールなど)。</target>
        </trans-unit>
        <trans-unit id="e3a80153b412228daa7908bd91581aa7104771ac" translate="yes" xml:space="preserve">
          <source>Called when the user begins to drag the scroll view.</source>
          <target state="translated">ユーザがスクロールビューをドラッグし始めたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6f49334419799b108eb2a40e41314772b157b255" translate="yes" xml:space="preserve">
          <source>Called when the user stops dragging the scroll view and it either stops or begins to glide.</source>
          <target state="translated">ユーザーがスクロールビューのドラッグを停止し、スクロールビューが停止または滑空を開始したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="46dea5f25ccca5b3680785b6b62140a1794fa780" translate="yes" xml:space="preserve">
          <source>Called when the view starts refreshing.</source>
          <target state="translated">ビューの更新を開始するときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d57900d7434f25faeddf0b83b6471869a9e218cd" translate="yes" xml:space="preserve">
          <source>Called when the viewability of rows changes, as defined by the &lt;code&gt;viewabilityConfig&lt;/code&gt; prop.</source>
          <target state="translated">で定義された行の視認性は、変化したときに呼び出され &lt;code&gt;viewabilityConfig&lt;/code&gt; の小道具。</target>
        </trans-unit>
        <trans-unit id="017ce4d18a871c3d5dc97575ff48cbf7b270f15f" translate="yes" xml:space="preserve">
          <source>Calling React Native functions from native (events)</source>
          <target state="translated">ネイティブ(イベント)からReact Nativeの関数を呼び出す</target>
        </trans-unit>
        <trans-unit id="d09cc0d3fe18f5ce5c9b91548d1e29bc3368f0e9" translate="yes" xml:space="preserve">
          <source>Calling native functions from React Native (native modules)</source>
          <target state="translated">React Native(ネイティブモジュール)からネイティブ関数を呼び出す</target>
        </trans-unit>
        <trans-unit id="ee0dc26bf091a171a29d75a241a08edae77ef029" translate="yes" xml:space="preserve">
          <source>CameraRoll</source>
          <target state="translated">CameraRoll</target>
        </trans-unit>
        <trans-unit id="4507be6d1be7658a365f87de7f08091de12e6a99" translate="yes" xml:space="preserve">
          <source>CameraRoll.getPhotos()</source>
          <target state="translated">CameraRoll.getPhotos()</target>
        </trans-unit>
        <trans-unit id="9e109c83e03e3eb9cf93d2ed9e9a504f22833411" translate="yes" xml:space="preserve">
          <source>CameraRoll.saveToCameraRoll()</source>
          <target state="translated">CameraRoll.saveToCameraRoll()</target>
        </trans-unit>
        <trans-unit id="42897e94926d939e093af13bb30769c2534e024d" translate="yes" xml:space="preserve">
          <source>Can accept a number as returned by &lt;code&gt;require('./image.jpg')&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require('./image.jpg')&lt;/code&gt; が返す数値を受け入れることができます</target>
        </trans-unit>
        <trans-unit id="7bc46bffdbf6867d46c0eda2c11995708c6e44fd" translate="yes" xml:space="preserve">
          <source>Can tell &lt;code&gt;TextInput&lt;/code&gt; to automatically capitalize certain characters.</source>
          <target state="translated">&lt;code&gt;TextInput&lt;/code&gt; に特定の文字を自動的に大文字にするように指示できます。</target>
        </trans-unit>
        <trans-unit id="ef6da776a323654939dbf5ede6724aee73b5d556" translate="yes" xml:space="preserve">
          <source>Can the issue be reproduced on the latest release candidate? Post a comment with the version you tested.</source>
          <target state="translated">この問題は最新のリリース候補で再現できますか?テストしたバージョンをコメントで投稿してください。</target>
        </trans-unit>
        <trans-unit id="ebcbf915c84f4032a72adc30fc2a97c9dfd43f95" translate="yes" xml:space="preserve">
          <source>Cancel button style</source>
          <target state="translated">キャンセルボタンのスタイル</target>
        </trans-unit>
        <trans-unit id="b2f20423bee50894f22c73c8d9291b630e57e363" translate="yes" xml:space="preserve">
          <source>Cancel local notifications.</source>
          <target state="translated">ローカル通知をキャンセルします。</target>
        </trans-unit>
        <trans-unit id="2551e47762745b2bd1db967a8dab6b1f7e64436d" translate="yes" xml:space="preserve">
          <source>Cancel-ability- when making an action, the user should be able to abort it mid-touch by dragging their finger away</source>
          <target state="translated">キャンセル機能-アクションを実行する際に、ユーザーは指をドラッグすることで途中で中止することができます。</target>
        </trans-unit>
        <trans-unit id="72dc55a4aaa78979a71d6fbb8f85306ea7758246" translate="yes" xml:space="preserve">
          <source>Cancels all scheduled localNotifications</source>
          <target state="translated">スケジュールされたすべての localNotifications をキャンセルします。</target>
        </trans-unit>
        <trans-unit id="8af01560a935947e2a9cbe400db36df08a5d2be3" translate="yes" xml:space="preserve">
          <source>Capture ShouldSet Handlers</source>
          <target state="translated">キャプチャ ShouldSet ハンドラ</target>
        </trans-unit>
        <trans-unit id="c9858e4ae62a57450487f13d91f6a18b2366b908" translate="yes" xml:space="preserve">
          <source>Case 1: Error &quot;code&quot;:&quot;ENOSPC&quot;,&quot;errno&quot;:&quot;ENOSPC&quot;</source>
          <target state="translated">ケース1:エラー &quot;code&quot;:&quot;ENOSPC&quot;,&quot;errno&quot;:&quot;ENOSPC&quot;</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="2480f4a426ee72a3f6daf975f41b3976cd3d2933" translate="yes" xml:space="preserve">
          <source>Caveats:</source>
          <target state="translated">Caveats:</target>
        </trans-unit>
        <trans-unit id="7435c82b90b290ed2c2f65ada1af2f1b70ef0ec5" translate="yes" xml:space="preserve">
          <source>Certain components may have properties that work on one platform only. All of these props are annotated with &lt;code&gt;@platform&lt;/code&gt; and have a small badge next to them on the website.</source>
          <target state="translated">特定のコンポーネントには、1つのプラットフォームでのみ機能するプロパティがあります。これらの小道具はすべて &lt;code&gt;@platform&lt;/code&gt; で注釈が付けられており、ウェブサイトの横に小さなバッジが付いています。</target>
        </trans-unit>
        <trans-unit id="59eade438f8d4ce9807ab81f80a7e245f9c87c75" translate="yes" xml:space="preserve">
          <source>Certain resize modes, such as 'contain'</source>
          <target state="translated">特定のリサイズモード、例えば 'contain' のような</target>
        </trans-unit>
        <trans-unit id="418b432ffdb92b4f7abd72341b3cbceb7897b9c6" translate="yes" xml:space="preserve">
          <source>Changes the color of all the non-transparent pixels to the tintColor.</source>
          <target state="translated">透明でないすべてのピクセルの色を tintColor に変更します。</target>
        </trans-unit>
        <trans-unit id="9efce88e31d077529847f0b2fbb2ad54f10fb8a1" translate="yes" xml:space="preserve">
          <source>Check TouchableNativeFeedback.canUseNativeForeground() first, as this is only available on Android 6.0 and above. If you try to use this on older versions you will get a warning and fallback to background.</source>
          <target state="translated">Android 6.0以上でしか使えないので、まずTouchableNativeFeedback.canUseNativeForeground()を確認してください。それ以前のバージョンで使おうとすると警告が表示され、バックグラウンドにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7ab7ca8f2f8ff85f3ed46e8c223c51fe74074dc9" translate="yes" xml:space="preserve">
          <source>Check if the ImageStore contains image data for the specified URI. @platform ios</source>
          <target state="translated">ImageStoreに指定したURIの画像データが含まれているかどうかをチェックします。プラットフォーム ios</target>
        </trans-unit>
        <trans-unit id="9d0f6dd6a1eb9df1c654142563d09116fb1422f5" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;textinput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt; docs&lt;/a&gt; for more configuration options.</source>
          <target state="translated">その他の構成オプションについては、&lt;a href=&quot;textinput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; のドキュメント&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="f9af44822fd6568dccc6030d736690e356f45ddc" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;navigatorios&quot;&gt;&lt;code&gt;NavigatorIOS&lt;/code&gt; reference docs&lt;/a&gt; to learn more about this component.</source>
          <target state="translated">このコンポーネントの詳細については、&lt;a href=&quot;navigatorios&quot;&gt; &lt;code&gt;NavigatorIOS&lt;/code&gt; リファレンスドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="240bd8ca994ee136b276f8a1f4613a5ea8c721dd" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;testing&quot;&gt;Testing your changes guide&lt;/a&gt; to find out about the numerous tests which has been provided to help ensure that any new changes wont cause a regression.</source>
          <target state="translated">新しい変更がリグレッションを引き起こさないことを確認するために提供されている数多くのテストについては&lt;a href=&quot;testing&quot;&gt;、変更&lt;/a&gt;のテストガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5b2a743b173b25fcab44d88e6e7b6e824636cc2c" translate="yes" xml:space="preserve">
          <source>Check this checkbox at the top right of the screen to highlight the 16ms frame boundaries:</source>
          <target state="translated">画面右上のこのチェックボックスにチェックを入れると、16msのフレーム境界が強調表示されます。</target>
        </trans-unit>
        <trans-unit id="3e02022a553ea2dc644e56a852d564737984e914" translate="yes" xml:space="preserve">
          <source>Checking if a Screen Reader is Enabled</source>
          <target state="translated">スクリーンリーダーが有効になっているかどうかを確認する</target>
        </trans-unit>
        <trans-unit id="2090a9562bfc5ad0b02a854508b2be5cef33b727" translate="yes" xml:space="preserve">
          <source>Choose keyboard type (e.g. email, numeric)</source>
          <target state="translated">キーボードの種類を選択します。</target>
        </trans-unit>
        <trans-unit id="1a8485d3e880605b600989eca22589ccfd6769e5" translate="yes" xml:space="preserve">
          <source>Chrome Developer Tools</source>
          <target state="translated">Chrome デベロッパーツール</target>
        </trans-unit>
        <trans-unit id="1e6932e08ace422d92be5d24e643fae4c96c5a0a" translate="yes" xml:space="preserve">
          <source>Click &quot;Next&quot; then &quot;Finish&quot; to create your AVD. At this point you should be able to click on the green triangle button next to your AVD to launch it, then proceed to the next step.</source>
          <target state="translated">次へ」をクリックし、「完了」をクリックしてAVDを作成します。この時点で、AVDの横にある緑色の三角ボタンをクリックしてAVDを起動し、次のステップに進みます。</target>
        </trans-unit>
        <trans-unit id="4867addd0527518396ffbb03cd37299c178f646b" translate="yes" xml:space="preserve">
          <source>Click on your main project file (the one that represents the &lt;code&gt;.xcodeproj&lt;/code&gt;) select &lt;code&gt;Build Phases&lt;/code&gt; and drag the static library from the &lt;code&gt;Products&lt;/code&gt; folder inside the Library you are importing to &lt;code&gt;Link Binary With Libraries&lt;/code&gt;</source>
          <target state="translated">メインプロジェクトファイル（ &lt;code&gt;.xcodeproj&lt;/code&gt; を表すファイル）をクリックして[ &lt;code&gt;Build Phases&lt;/code&gt; を選択し、静的ライブラリを、インポートするライブラリ内の &lt;code&gt;Products&lt;/code&gt; フォルダーから &lt;code&gt;Link Binary With Libraries&lt;/code&gt; をリンクにドラッグします。</target>
        </trans-unit>
        <trans-unit id="5efe0c9323a499a8546aeac42d4b659bd2a4039f" translate="yes" xml:space="preserve">
          <source>Clipboard</source>
          <target state="translated">Clipboard</target>
        </trans-unit>
        <trans-unit id="cd6de1a706090ea23c71ef20bfbe14eaddd20c0c" translate="yes" xml:space="preserve">
          <source>Clipboard.getString()</source>
          <target state="translated">Clipboard.getString()</target>
        </trans-unit>
        <trans-unit id="724af364732d03f8b6e6017d8570dd39a8841ad9" translate="yes" xml:space="preserve">
          <source>Clipboard.setString()</source>
          <target state="translated">Clipboard.setString()</target>
        </trans-unit>
        <trans-unit id="29ce24dd9ca3899e134b37e35b8f95b965033f9f" translate="yes" xml:space="preserve">
          <source>Clones this &lt;code&gt;ListViewDataSource&lt;/code&gt; with the specified &lt;code&gt;dataBlob&lt;/code&gt; and &lt;code&gt;rowIdentities&lt;/code&gt;. The &lt;code&gt;dataBlob&lt;/code&gt; is just an arbitrary blob of data. At construction an extractor to get the interesting information was defined (or the default was used).</source>
          <target state="translated">この &lt;code&gt;ListViewDataSource&lt;/code&gt; を、指定された &lt;code&gt;dataBlob&lt;/code&gt; および &lt;code&gt;rowIdentities&lt;/code&gt; で複製します。 &lt;code&gt;dataBlob&lt;/code&gt; は、データの単なる任意のブロブです。構築時に、興味深い情報を取得するためのエクストラクターが定義されました（またはデフォルトが使用されました）。</target>
        </trans-unit>
        <trans-unit id="8e9aa5b787a213c17008a136e1c3f3e76b208b07" translate="yes" xml:space="preserve">
          <source>Closes the drawer.</source>
          <target state="translated">引き出しを閉める。</target>
        </trans-unit>
        <trans-unit id="3291a88221350208f0bdc43d6647900cce209844" translate="yes" xml:space="preserve">
          <source>Closing pull requests</source>
          <target state="translated">プルリクエストを閉じる</target>
        </trans-unit>
        <trans-unit id="e7dc1f58b1ebed71fbca665be08411c0b9cacaab" translate="yes" xml:space="preserve">
          <source>Code Conventions</source>
          <target state="translated">コード規約</target>
        </trans-unit>
        <trans-unit id="b396b16cf33702d9ef44ebb186da71939e0e1ca9" translate="yes" xml:space="preserve">
          <source>Code changes</source>
          <target state="translated">コードの変更</target>
        </trans-unit>
        <trans-unit id="1bb31113cc8d5e98e76571d9b1cc75cd9b29b00d" translate="yes" xml:space="preserve">
          <source>Code integration</source>
          <target state="translated">コード統合</target>
        </trans-unit>
        <trans-unit id="264398069882e7753347718021d0c9c51b7ce8fc" translate="yes" xml:space="preserve">
          <source>Code of Conduct</source>
          <target state="translated">行動規範</target>
        </trans-unit>
        <trans-unit id="fde9afb7f5bc348142904c816d272491c40b384d" translate="yes" xml:space="preserve">
          <source>Code quality:</source>
          <target state="translated">コードの品質。</target>
        </trans-unit>
        <trans-unit id="9dc1650335a9fee042b824b7be6b555ded6d2cfc" translate="yes" xml:space="preserve">
          <source>Color Reference</source>
          <target state="translated">カラーリファレンス</target>
        </trans-unit>
        <trans-unit id="2048d1f06f3e0917b363fe28c22f0f6f94479dc1" translate="yes" xml:space="preserve">
          <source>Color Reference#transparent</source>
          <target state="translated">カラーリファレンス#透明</target>
        </trans-unit>
        <trans-unit id="5941766d615b2d317b7fdb6078d72fd2e3bcce3d" translate="yes" xml:space="preserve">
          <source>Color of text on unselected tabs</source>
          <target state="translated">選択されていないタブのテキストの色</target>
        </trans-unit>
        <trans-unit id="edbc35a2a73d87bd037972f9a256159e3f0027c8" translate="yes" xml:space="preserve">
          <source>Color of the currently selected tab icon</source>
          <target state="translated">現在選択されているタブアイコンの色</target>
        </trans-unit>
        <trans-unit id="536d24112ea548f478af9f09dba202d7ebb2919b" translate="yes" xml:space="preserve">
          <source>Color of the foreground switch grip.</source>
          <target state="translated">前景のスイッチグリップの色。</target>
        </trans-unit>
        <trans-unit id="251766baa58e272e61ce366855633c3fb5755b24" translate="yes" xml:space="preserve">
          <source>Color of the foreground switch grip. If this is set on iOS, the switch grip will lose its drop shadow.</source>
          <target state="translated">前景のスイッチグリップの色。iOSで設定すると、スイッチグリップのドロップシャドウが無くなります。</target>
        </trans-unit>
        <trans-unit id="ca1b755b1a0d62a59d474204528062eb8bc42852" translate="yes" xml:space="preserve">
          <source>Color of the progress bar.</source>
          <target state="translated">プログレスバーの色。</target>
        </trans-unit>
        <trans-unit id="18571c54bf2d18e7dfabf473e925f0742a58b1bf" translate="yes" xml:space="preserve">
          <source>Color of the text (iOS), or background color of the button (Android)</source>
          <target state="translated">テキストの色(iOS)、またはボタンの背景色(Android</target>
        </trans-unit>
        <trans-unit id="9d04a095b45bdadab50d969c3dacff40af5d4776" translate="yes" xml:space="preserve">
          <source>Color of unselected tab icons. Available since iOS 10.</source>
          <target state="translated">選択されていないタブアイコンの色。iOS 10から利用可能。</target>
        </trans-unit>
        <trans-unit id="e0fb9599f26fdbf2f74542b337bf0d66da2bde3e" translate="yes" xml:space="preserve">
          <source>Combining animated values</source>
          <target state="translated">アニメーション化された値の組み合わせ</target>
        </trans-unit>
        <trans-unit id="1876987fa1a8f54ef9b28b3c2b0111b8b2e44d4a" translate="yes" xml:space="preserve">
          <source>Command Line Tools</source>
          <target state="translated">コマンドラインツール</target>
        </trans-unit>
        <trans-unit id="f44db32b83eb4d12b06de89b1940ca27225bef0a" translate="yes" xml:space="preserve">
          <source>Command Line Tools for Xcode</source>
          <target state="translated">Xcodeのコマンドラインツール</target>
        </trans-unit>
        <trans-unit id="df6ae9a8171fb87a560ae376260f8710c0e3ca4c" translate="yes" xml:space="preserve">
          <source>Command definitions</source>
          <target state="translated">コマンド定義</target>
        </trans-unit>
        <trans-unit id="a0e1d95a3e2bf55b7459826ede7881617e068881" translate="yes" xml:space="preserve">
          <source>Common sources of performance problems</source>
          <target state="translated">性能問題の共通の原因</target>
        </trans-unit>
        <trans-unit id="49f97a5240599c0263c81276e7cbf8821a4f4794" translate="yes" xml:space="preserve">
          <source>CommonJS require</source>
          <target state="translated">CommonJSが必要です。</target>
        </trans-unit>
        <trans-unit id="5a75086b322d9ded0526128c1d7b04a2cb0e1116" translate="yes" xml:space="preserve">
          <source>Communication between native and React Native</source>
          <target state="translated">ネイティブとReact Nativeの通信</target>
        </trans-unit>
        <trans-unit id="7e5a9c615486c718ca573afa65ac728bacea2543" translate="yes" xml:space="preserve">
          <source>Compare this to other scheduling alternatives:</source>
          <target state="translated">他のスケジューリングの選択肢と比較してみてください。</target>
        </trans-unit>
        <trans-unit id="c595347091cabcf552b31bbd9a21db24a98eb68a" translate="yes" xml:space="preserve">
          <source>Component that wraps platform ScrollView while providing integration with touch locking &quot;responder&quot; system.</source>
          <target state="translated">タッチロック式の「レスポンダ」システムとの統合を提供しながら、プラットフォームの ScrollView をラップするコンポーネント。</target>
        </trans-unit>
        <trans-unit id="c97636c2f5fee4312156752e0e55deaf958fda30" translate="yes" xml:space="preserve">
          <source>Component to control the app status bar.</source>
          <target state="translated">アプリのステータスバーを制御するためのコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="54a3f0a4aead7af383ec6ef28a4a81c7a685a65f" translate="yes" xml:space="preserve">
          <source>Components and APIs</source>
          <target state="translated">コンポーネントとAPI</target>
        </trans-unit>
        <trans-unit id="ba3b4684cbc543f07064c3dcdf100a52a4b12a06" translate="yes" xml:space="preserve">
          <source>Components in React Native are &lt;a href=&quot;style&quot;&gt;styled using JavaScript&lt;/a&gt;. Color properties usually match how &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;CSS works on the web&lt;/a&gt;.</source>
          <target state="translated">React Nativeのコンポーネントは、&lt;a href=&quot;style&quot;&gt;JavaScriptを使用し&lt;/a&gt;てスタイル設定されます。色のプロパティは通常&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;、WebでのCSSの動作と&lt;/a&gt;一致します。</target>
        </trans-unit>
        <trans-unit id="1ad7ba85bf3af78ee9c3cf90579234f2b00e19c7" translate="yes" xml:space="preserve">
          <source>Components: ActivityIndicator</source>
          <target state="translated">コンポーネントです。アクティビティインジケータ</target>
        </trans-unit>
        <trans-unit id="6b864b621b531ef7e388c0380086846bf211129a" translate="yes" xml:space="preserve">
          <source>Components: Button</source>
          <target state="translated">コンポーネント。ボタン</target>
        </trans-unit>
        <trans-unit id="d6c57fb3fb2fe19cbf88430c8c3ce2be20a52381" translate="yes" xml:space="preserve">
          <source>Components: DatePickerIOS</source>
          <target state="translated">コンポーネント:DatePickerIOS</target>
        </trans-unit>
        <trans-unit id="b37c36a1b166823e4e40257fb6832813f0790506" translate="yes" xml:space="preserve">
          <source>Components: DrawerLayoutAndroid</source>
          <target state="translated">コンポーネントです。DrawerLayoutAndroid</target>
        </trans-unit>
        <trans-unit id="df420bdeaa08426e4e05d3d17014eb662ee941bc" translate="yes" xml:space="preserve">
          <source>Components: FlatList</source>
          <target state="translated">コンポーネントです。フラットリスト</target>
        </trans-unit>
        <trans-unit id="34e54973e51799a09c10b42b49fca5c323a082a0" translate="yes" xml:space="preserve">
          <source>Components: Image</source>
          <target state="translated">コンポーネント。イメージ</target>
        </trans-unit>
        <trans-unit id="ac4fcbeef64f83663f769c828dd4ba750baa63bf" translate="yes" xml:space="preserve">
          <source>Components: InputAccessoryView</source>
          <target state="translated">コンポーネントです。InputAccessoryView</target>
        </trans-unit>
        <trans-unit id="e6300b5d902861b30fa94fbc5de7cea5a1e3c5bf" translate="yes" xml:space="preserve">
          <source>Components: KeyboardAvoidingView</source>
          <target state="translated">コンポーネントを使用しています。キーボード回避ビュー</target>
        </trans-unit>
        <trans-unit id="3d4ffcf142372e151902c34b7223262e8f42ebaa" translate="yes" xml:space="preserve">
          <source>Components: ListView</source>
          <target state="translated">コンポーネントです。リストビュー</target>
        </trans-unit>
        <trans-unit id="1182bde7a5bfdb29a4f084f19aa97179081607ce" translate="yes" xml:space="preserve">
          <source>Components: MaskedViewIOS</source>
          <target state="translated">コンポーネントです。MaskedViewIOS</target>
        </trans-unit>
        <trans-unit id="055f49d7e3cd7452c1f8b23000c162dcd8fbca8b" translate="yes" xml:space="preserve">
          <source>Components: Modal</source>
          <target state="translated">コンポーネント。モーダル</target>
        </trans-unit>
        <trans-unit id="76b2bfd8ef44324f2da213502cf9e2c5b58a2dce" translate="yes" xml:space="preserve">
          <source>Components: NavigatorIOS</source>
          <target state="translated">コンポーネントです。NavigatorIOS</target>
        </trans-unit>
        <trans-unit id="3dee150a29cc50770f58f4f304483ad42f490de8" translate="yes" xml:space="preserve">
          <source>Components: Picker</source>
          <target state="translated">コンポーネント。ピッカー</target>
        </trans-unit>
        <trans-unit id="dcb4e7955a76d89e92f51aa6ddbe0372ce3c33b0" translate="yes" xml:space="preserve">
          <source>Components: PickerIOS</source>
          <target state="translated">コンポーネントです。ピッカーIOS</target>
        </trans-unit>
        <trans-unit id="55ba1d490506069e5ef87d135135c00eba8ce9b6" translate="yes" xml:space="preserve">
          <source>Components: ProgressBarAndroid</source>
          <target state="translated">コンポーネントです。ProgressBarAndroid</target>
        </trans-unit>
        <trans-unit id="55c1cafb53d3a4809937b2a5a0ca1d8800b39278" translate="yes" xml:space="preserve">
          <source>Components: ProgressViewIOS</source>
          <target state="translated">コンポーネントです。ProgressViewIOS</target>
        </trans-unit>
        <trans-unit id="26c0668d40f84ce9456018bb180812bf2b7dd2ae" translate="yes" xml:space="preserve">
          <source>Components: RefreshControl</source>
          <target state="translated">コンポーネントを使用しています。RefreshControl</target>
        </trans-unit>
        <trans-unit id="9f51a8f76073d2634c2795b8933cc2c2b1b8795d" translate="yes" xml:space="preserve">
          <source>Components: SafeAreaView</source>
          <target state="translated">コンポーネントです。セーフエリアビュー</target>
        </trans-unit>
        <trans-unit id="67b489c95078a424d272c398c448390844b9aec0" translate="yes" xml:space="preserve">
          <source>Components: ScrollView</source>
          <target state="translated">コンポーネントです。スクロールビュー</target>
        </trans-unit>
        <trans-unit id="28d06ed6e7343294820f7a3dfa0f8cb6321b6fec" translate="yes" xml:space="preserve">
          <source>Components: SectionList</source>
          <target state="translated">コンポーネントです。セクションリスト</target>
        </trans-unit>
        <trans-unit id="3d461418b0f5910d09308441adb672427eaaf9a3" translate="yes" xml:space="preserve">
          <source>Components: SegmentedControlIOS</source>
          <target state="translated">コンポーネントです。SegmentedControlIOS</target>
        </trans-unit>
        <trans-unit id="47f461cbe18cb31990d3ce4f1ccfeb0fd8e6856b" translate="yes" xml:space="preserve">
          <source>Components: Slider</source>
          <target state="translated">コンポーネント。スライダー</target>
        </trans-unit>
        <trans-unit id="f7379b9c0cd45d41e0304104266032a9563d32a4" translate="yes" xml:space="preserve">
          <source>Components: SnapshotViewIOS</source>
          <target state="translated">コンポーネントです。SnapshotViewIOS</target>
        </trans-unit>
        <trans-unit id="63c4b78c5267e5f011db7c2dbad49f7faf1503a4" translate="yes" xml:space="preserve">
          <source>Components: StatusBar</source>
          <target state="translated">コンポーネントです。ステータスバー</target>
        </trans-unit>
        <trans-unit id="cb627e0d54fb767745202ef38865eb7bdbf68cb3" translate="yes" xml:space="preserve">
          <source>Components: Switch</source>
          <target state="translated">コンポーネント。スイッチ</target>
        </trans-unit>
        <trans-unit id="063c41be90eca0f379931c5ad3b9935df1025de6" translate="yes" xml:space="preserve">
          <source>Components: TabBarIOS</source>
          <target state="translated">コンポーネントです。TabBarIOS</target>
        </trans-unit>
        <trans-unit id="9017d2d1e48af1bbe44fa3f0a0517458f7a4e087" translate="yes" xml:space="preserve">
          <source>Components: TabBarIOS.Item</source>
          <target state="translated">コンポーネントです。TabBarIOS.Item</target>
        </trans-unit>
        <trans-unit id="3dfc980a4e9f8e171c6d1df64b9827d001b15ab7" translate="yes" xml:space="preserve">
          <source>Components: Text</source>
          <target state="translated">コンポーネント。テキスト</target>
        </trans-unit>
        <trans-unit id="a8640555848eea5394bcfe0396c2ea7f5dcb48c8" translate="yes" xml:space="preserve">
          <source>Components: TextInput</source>
          <target state="translated">コンポーネントを使用しています。テキスト入力</target>
        </trans-unit>
        <trans-unit id="1d44cd9cd9fc7873a1840adb3d5aed2200a508a1" translate="yes" xml:space="preserve">
          <source>Components: ToolbarAndroid</source>
          <target state="translated">コンポーネントです。ツールバーAndroid</target>
        </trans-unit>
        <trans-unit id="ba5e7c1a45fce6031b1e8b122ac0d3a57e59cfdc" translate="yes" xml:space="preserve">
          <source>Components: TouchableHighlight</source>
          <target state="translated">コンポーネントです。タッチ可能ハイライト</target>
        </trans-unit>
        <trans-unit id="5f91282ecf96fcb403dedc6f4c0da1fa56746ba9" translate="yes" xml:space="preserve">
          <source>Components: TouchableNativeFeedback</source>
          <target state="translated">コンポーネントを使用しています。TouchableNativeFeedback</target>
        </trans-unit>
        <trans-unit id="1dc3dd48bcc0b1d81a4469eedc21589e70ca7fc5" translate="yes" xml:space="preserve">
          <source>Components: TouchableOpacity</source>
          <target state="translated">コンポーネントです。タッチ可能な不透明度</target>
        </trans-unit>
        <trans-unit id="74dfb246852ae2c4828fde8a995258545c38cf85" translate="yes" xml:space="preserve">
          <source>Components: TouchableWithoutFeedback</source>
          <target state="translated">コンポーネントです。TouchableWithoutFeedback</target>
        </trans-unit>
        <trans-unit id="95b6487f54af6b4ffa1bb4580643436b1bdfbdea" translate="yes" xml:space="preserve">
          <source>Components: View</source>
          <target state="translated">コンポーネントです。表示</target>
        </trans-unit>
        <trans-unit id="6574972828e0f3490308913edf5cbf8d6c74e9d7" translate="yes" xml:space="preserve">
          <source>Components: ViewPagerAndroid</source>
          <target state="translated">コンポーネントです。ViewPagerAndroid</target>
        </trans-unit>
        <trans-unit id="71a44ecf9ddf20dd355c6cd19a0aea07f2b3eab9" translate="yes" xml:space="preserve">
          <source>Components: VirtualizedList</source>
          <target state="translated">コンポーネントを使用しています。VirtualizedList</target>
        </trans-unit>
        <trans-unit id="af6d4cfff87c8d1c20d901a1d7a612b0413b7c2e" translate="yes" xml:space="preserve">
          <source>Components: WebView</source>
          <target state="translated">コンポーネント。ウェブビュー</target>
        </trans-unit>
        <trans-unit id="79a0f252e798bd9561af21507c0090967d9a1952" translate="yes" xml:space="preserve">
          <source>Composing &lt;code&gt;MyAppText&lt;/code&gt; in this way ensures that we get the styles from a top-level component, but leaves us the ability to add / override them in specific use cases.</source>
          <target state="translated">作曲 &lt;code&gt;MyAppText&lt;/code&gt; このように、我々はトップレベルのコンポーネントからスタイルを取得することを保証しますが、葉たちの特定のユースケースでそれらを上書き/追加する機能。</target>
        </trans-unit>
        <trans-unit id="e2444115e627d2d7b1de4541f5b8edac3734c1be" translate="yes" xml:space="preserve">
          <source>Composing animations</source>
          <target state="translated">アニメーションの合成</target>
        </trans-unit>
        <trans-unit id="b62b8cff4bbc26edbfc8dc734c0691653978d694" translate="yes" xml:space="preserve">
          <source>Composite components and setNativeProps</source>
          <target state="translated">複合コンポーネントとsetNativeProps</target>
        </trans-unit>
        <trans-unit id="afc96ea62c41bc73a15ce6e046eeaa6dcc541e0e" translate="yes" xml:space="preserve">
          <source>Composite components are not backed by a native view, so you cannot call &lt;code&gt;setNativeProps&lt;/code&gt; on them. Consider this example:</source>
          <target state="translated">複合コンポーネントはネイティブビューによってサポートされないため、それら &lt;code&gt;setNativeProps&lt;/code&gt; を呼び出すことはできません。この例を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="85191683af3cffbe6b4b85317dbb31ebf21fe909" translate="yes" xml:space="preserve">
          <source>Config is an object that may have the following options.</source>
          <target state="translated">Configは、以下のオプションを持つことができるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="045c6d644083bf3fd59174379182295a710e9b37" translate="yes" xml:space="preserve">
          <source>Config is an object that may have the following options:</source>
          <target state="translated">Configは、以下のオプションを持つことができるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="11829e71ec401eaf4f9e61ab4be890f9639f99f2" translate="yes" xml:space="preserve">
          <source>Configurable viewability callbacks.</source>
          <target state="translated">設定可能なビューアビリティコールバック。</target>
        </trans-unit>
        <trans-unit id="cfc3edafe888e36b86e4d0711bfcad6fae1ab4b7" translate="yes" xml:space="preserve">
          <source>Configuration and Permissions</source>
          <target state="translated">設定と許可</target>
        </trans-unit>
        <trans-unit id="106a1c50d1f23332a8db85773e5e67248a77a6b6" translate="yes" xml:space="preserve">
          <source>Configure Preloading and Inline Requires</source>
          <target state="translated">プリロードとインラインを設定する</target>
        </trans-unit>
        <trans-unit id="bceee43bc22ebf883a0a07953c23c3fd6c5578b2" translate="yes" xml:space="preserve">
          <source>Configure text inputs</source>
          <target state="translated">テキスト入力の設定</target>
        </trans-unit>
        <trans-unit id="e90dabcdc09e8f5768f4e06e8ee5abc8b4b5021d" translate="yes" xml:space="preserve">
          <source>Configuring CocoaPods dependencies</source>
          <target state="translated">CocoaPods の依存関係を設定する</target>
        </trans-unit>
        <trans-unit id="74ba5c3f55f3132a7ef3ca002ee69ab84fbdb52f" translate="yes" xml:space="preserve">
          <source>Configuring animations</source>
          <target state="translated">アニメーションの設定</target>
        </trans-unit>
        <trans-unit id="90db9ec7bdc5d365d4c8b0c92cc584dbca0f5763" translate="yes" xml:space="preserve">
          <source>Configuring maven</source>
          <target state="translated">maven の設定</target>
        </trans-unit>
        <trans-unit id="1d4bbe83ba23763c80663d8265c91ada9be0e40f" translate="yes" xml:space="preserve">
          <source>Configuring permissions</source>
          <target state="translated">パーミッションの設定</target>
        </trans-unit>
        <trans-unit id="83582ce5746ed50edf418f58f64e80093bf7fcbf" translate="yes" xml:space="preserve">
          <source>Conflicted files include delimiters which make very clear where the changes come from. For example:</source>
          <target state="translated">矛盾したファイルには、変更がどこから来たのかを明確にするデリミタが含まれています。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f77b205a2e544248635f0bf2c03f3ea5234e66f6" translate="yes" xml:space="preserve">
          <source>Congratulations! You've successfully run and modified your first React Native app.</source>
          <target state="translated">おめでとうございます。最初のReact Nativeアプリの実行と修正に成功しました。</target>
        </trans-unit>
        <trans-unit id="fb08d4f654a58c4e5b0b4c0f302054eb7b5f62d0" translate="yes" xml:space="preserve">
          <source>Connect your iOS device to your Mac using a USB to Lightning cable. Navigate to the &lt;code&gt;ios&lt;/code&gt; folder in your project, then open the &lt;code&gt;.xcodeproj&lt;/code&gt; file within it using Xcode.</source>
          <target state="translated">USB-Lightningケーブルを使用してiOSデバイスをMacに接続します。移動し &lt;code&gt;ios&lt;/code&gt; 、次に開く、プロジェクト内のフォルダ &lt;code&gt;.xcodeproj&lt;/code&gt; のXcodeを使用して、その中にファイルを。</target>
        </trans-unit>
        <trans-unit id="acc7680899a45c57cf73be9bd6024480324e6877" translate="yes" xml:space="preserve">
          <source>Connecting to the development server</source>
          <target state="translated">開発サーバーへの接続</target>
        </trans-unit>
        <trans-unit id="f95dfab429d54bd47b5d4453e381611f757203b8" translate="yes" xml:space="preserve">
          <source>Connection to &lt;a href=&quot;running-on-device&quot;&gt;http://localhost:8081/debugger-proxy?role=client&lt;/a&gt; timed out. Are you running node proxy? If you are running on the device, check if you have the right IP address in &lt;code&gt;RCTWebSocketExecutor.m&lt;/code&gt;.</source>
          <target state="translated">接続&lt;a href=&quot;running-on-device&quot;&gt;のhttp：// localhostを：？8081 /デバッガプロキシ役割=クライアントが&lt;/a&gt;タイムアウトしました。ノードプロキシを実行していますか？デバイスで実行している場合は、 &lt;code&gt;RCTWebSocketExecutor.m&lt;/code&gt; に正しいIPアドレスがあるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="b9c93efe2e761dd4117be77a6ecabd62ebca3115" translate="yes" xml:space="preserve">
          <source>ConnectionType enum</source>
          <target state="translated">コネクションタイプ列挙</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="7970b166b8b703d528c27cae2e5fe502a4e8e8b5" translate="yes" xml:space="preserve">
          <source>Container that allows to flip left and right between child views.</source>
          <target state="translated">子ビュー間で左右反転できるコンテナ。</target>
        </trans-unit>
        <trans-unit id="2771a3a035809649400db49164471d2b11cd014c" translate="yes" xml:space="preserve">
          <source>Container that allows to flip left and right between child views. Each child view of the &lt;code&gt;ViewPagerAndroid&lt;/code&gt; will be treated as a separate page and will be stretched to fill the &lt;code&gt;ViewPagerAndroid&lt;/code&gt;.</source>
          <target state="translated">子ビュー間で左右を反転できるコンテナ。 &lt;code&gt;ViewPagerAndroid&lt;/code&gt; の各子ビューは個別のページとして扱われ、 &lt;code&gt;ViewPagerAndroid&lt;/code&gt; を満たすように引き伸ばされます。</target>
        </trans-unit>
        <trans-unit id="e040a458f46532a90ec69fa0b4bfc33ba151c98b" translate="yes" xml:space="preserve">
          <source>Containers</source>
          <target state="translated">Containers</target>
        </trans-unit>
        <trans-unit id="4f9be057f0ea5d2ba72fd2c810e8d7b9aa98b469" translate="yes" xml:space="preserve">
          <source>Content</source>
          <target state="translated">Content</target>
        </trans-unit>
        <trans-unit id="4cd01fa6da2a20b54a68b624f9314b8122f6fb44" translate="yes" xml:space="preserve">
          <source>Continuous integration tests</source>
          <target state="translated">継続的な統合テスト</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="43756307ea38982d8f04a469849a3beb8c877711" translate="yes" xml:space="preserve">
          <source>Contributions are very welcome. If you think you need help planning your contribution, please hop into &lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZjGY5n&quot;&gt;#react-native&lt;/a&gt; and let people know you're looking for a mentor.</source>
          <target state="translated">貢献は大歓迎です。貢献の計画に支援が必要だと思われる場合は、&lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZjGY5n&quot;&gt;＃react-native&lt;/a&gt;にアクセスして、メンターを探していることを人々に知らせてください。</target>
        </trans-unit>
        <trans-unit id="252ec0974fd54909c66147278bad948ac3aeb026" translate="yes" xml:space="preserve">
          <source>Contributor License Agreement (CLA)</source>
          <target state="translated">コントリビューターライセンス契約(CLA)</target>
        </trans-unit>
        <trans-unit id="c730562e2a63df748862606462ba86ae0dcc3c94" translate="yes" xml:space="preserve">
          <source>Control the translucency of the status bar</source>
          <target state="translated">ステータスバーの半透明度をコントロールする</target>
        </trans-unit>
        <trans-unit id="785680df798711fb8287e1cd7c0edbb349a3cde6" translate="yes" xml:space="preserve">
          <source>Control the visibility of the network activity indicator</source>
          <target state="translated">ネットワーク アクティビティ インジケータの可視性を制御する</target>
        </trans-unit>
        <trans-unit id="8586a7efb415973bb7d397955e5d81ccabe42c48" translate="yes" xml:space="preserve">
          <source>Controls how view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. Works for Android only.</source>
          <target state="translated">アクセシビリティイベントを発生させるかどうか、また画面を照会するアクセシビリティサービスに報告されるかどうかなど、ビューがアクセシビリティにとって重要であるかどうかを制御します。Androidでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="cee59faabc796367ca433c455afac6467d22a748" translate="yes" xml:space="preserve">
          <source>Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true.</source>
          <target state="translated">ナビゲーションバーやタブバー/ツールバーの後ろに配置されたスクロールビューのコンテンツインセットをiOSが自動的に調整するかどうかをコントロールします。デフォルト値は true です。</target>
        </trans-unit>
        <trans-unit id="eb03f4cb2bf810dc91392b194d4c4232e2498eb4" translate="yes" xml:space="preserve">
          <source>Controls whether the &lt;code&gt;View&lt;/code&gt; can be the target of touch events.</source>
          <target state="translated">&lt;code&gt;View&lt;/code&gt; をタッチイベントのターゲットにできるかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="a35d9dc4f324b40e541b37a92878d4869a94b59a" translate="yes" xml:space="preserve">
          <source>Controls whether to adjust the content inset for web views that are placed behind a navigation bar, tab bar, or toolbar. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ナビゲーションバー、タブバー、またはツールバーの背後に配置されているWebビューのコンテンツインセットを調整するかどうかを制御します。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a61061282c91e01cecbe5166519f8d74f712486f" translate="yes" xml:space="preserve">
          <source>Converts a layout size (dp) to pixel size (px).</source>
          <target state="translated">レイアウトサイズ(dp)をピクセルサイズ(px)に変換します。</target>
        </trans-unit>
        <trans-unit id="8cf56bc419f770fb15abf654c87dc1b04e53baed" translate="yes" xml:space="preserve">
          <source>Copy and paste this to the top of your new file(s):</source>
          <target state="translated">これをコピーして、新しいファイルの先頭に貼り付けてください。</target>
        </trans-unit>
        <trans-unit id="0c61626f5fbb2b463252ba1acb5a51430fdb3833" translate="yes" xml:space="preserve">
          <source>Copyright Notice for files</source>
          <target state="translated">ファイルの著作権表示</target>
        </trans-unit>
        <trans-unit id="c8f8d35785ff3369d9bbf054cf50b6e78add9164" translate="yes" xml:space="preserve">
          <source>Core contributors to React Native meet monthly and post their meeting notes on the &lt;a href=&quot;https://facebook.github.io/react-native/blog&quot;&gt;React Native blog&lt;/a&gt;. You can also find ad hoc discussions at &lt;a href=&quot;https://discuss.reactjs.org/&quot;&gt;https://discuss.reactjs.org/&lt;/a&gt;.</source>
          <target state="translated">React Nativeの中心的な貢献者は毎月会合を持ち、&lt;a href=&quot;https://facebook.github.io/react-native/blog&quot;&gt;React Nativeブログに&lt;/a&gt;ミーティングノートを投稿します。また、&lt;a href=&quot;https://discuss.reactjs.org/&quot;&gt;https：&lt;/a&gt; //discuss.reactjs.org/でアドホックディスカッションを見つけることもできます。</target>
        </trans-unit>
        <trans-unit id="5ca76516dbc5d1c28a796b3284326b6831f376a9" translate="yes" xml:space="preserve">
          <source>Create React Native App also has a &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md&quot;&gt;user guide&lt;/a&gt; you can reference if you have questions specific to the tool.</source>
          <target state="translated">Create React Native App には、ツールに固有の質問がある場合に参照できる&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md&quot;&gt;ユーザーガイド&lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="596352b3ddb80a0c8d321777cd6d0feb48614005" translate="yes" xml:space="preserve">
          <source>Create React Native App configures your project to use the most recent React Native version that is supported by the Expo client app. The Expo client app usually gains support for a given React Native version about a week after the React Native version is released as stable. You can check &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/VERSIONS.md&quot;&gt;this document&lt;/a&gt; to find out what versions are supported.</source>
          <target state="translated">Create React Native Appは、Expoクライアントアプリでサポートされている最新のReact Nativeバージョンを使用するようにプロジェクトを構成します。Expoクライアントアプリは通常、React Nativeバージョンが安定版としてリリースされてから約1週間後に、特定のReact Nativeバージョンのサポートを取得します。&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/VERSIONS.md&quot;&gt;このドキュメント&lt;/a&gt;をチェックして、サポートされているバージョンを確認できます。</target>
        </trans-unit>
        <trans-unit id="bc3cceb848dd634bb69f37b895b9de48bd721a08" translate="yes" xml:space="preserve">
          <source>Create React Native App makes it really easy to run your React Native app on a physical device without setting up a development environment. If you want to run your app on the iOS Simulator or an Android Virtual Device, please refer to the instructions for building projects with native code to learn how to install Xcode and set up your Android development environment.</source>
          <target state="translated">Create React Native Appを使うと、開発環境を設定せずに物理デバイス上でReact Nativeアプリを本当に簡単に実行することができます。iOSシミュレータやAndroid仮想デバイスでアプリを実行したい場合は、ネイティブコードでプロジェクトをビルドする方法を参考にして、Xcodeのインストール方法やAndroid開発環境の設定方法を確認してください。</target>
        </trans-unit>
        <trans-unit id="fecdf1cf0738c25f24731e41409b3c7259f3892a" translate="yes" xml:space="preserve">
          <source>Create React Native App projects</source>
          <target state="translated">Reactネイティブアプリのプロジェクトを作成する</target>
        </trans-unit>
        <trans-unit id="7576373164cb019a76e0bdb035240d04fd6cf667" translate="yes" xml:space="preserve">
          <source>Create a folder in your project called packager, and create a single file named config.js. Add the following:</source>
          <target state="translated">プロジェクト内にpackagerというフォルダを作成し、config.jsという名前のファイルを1つ作成します。以下を追加します。</target>
        </trans-unit>
        <trans-unit id="dfa3c774633604d7d236d426ff6f1a2e8cacf497" translate="yes" xml:space="preserve">
          <source>Create a new Animated value that is limited between 2 values. It uses the difference between the last value so even if the value is far from the bounds it will start changing when the value starts getting closer again. (&lt;code&gt;value = clamp(value + diff, min, max)&lt;/code&gt;).</source>
          <target state="translated">2つの値の間で制限されている新しいアニメーション値を作成します。最後の値の差を使用するので、値が境界から離れていても、値が再び近づき始めると変化し始めます。（ &lt;code&gt;value = clamp(value + diff, min, max)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="654f27c456c49fad3f3d0991bb719831a7bae79b" translate="yes" xml:space="preserve">
          <source>Create a new StyleSheet:</source>
          <target state="translated">新しいスタイルシートを作成します。</target>
        </trans-unit>
        <trans-unit id="eea1c6c113e25f144ec854250425dd7525143dc1" translate="yes" xml:space="preserve">
          <source>Create an Android Toast alert.</source>
          <target state="translated">Android Toastのアラートを作成します。</target>
        </trans-unit>
        <trans-unit id="f792fff6f4b6e7ed5161aad6f0089c4c1c37c546" translate="yes" xml:space="preserve">
          <source>Create an iOS alert dialog with a message or create a prompt for user input.</source>
          <target state="translated">メッセージ付きのiOSアラートダイアログを作成したり、ユーザー入力のプロンプトを作成したりします。</target>
        </trans-unit>
        <trans-unit id="718e3efb6771a52a768ef6788731f4abf3d97f2d" translate="yes" xml:space="preserve">
          <source>Create and display a popup alert.</source>
          <target state="translated">ポップアップアラートを作成して表示します。</target>
        </trans-unit>
        <trans-unit id="5f8db9aee1e0ed2cbf51f411802932fe4b812bfb" translate="yes" xml:space="preserve">
          <source>Create and display a prompt to enter some text.</source>
          <target state="translated">テキストを入力するプロンプトを作成して表示します。</target>
        </trans-unit>
        <trans-unit id="2f3c14bac189d3fe1cb9db6572a28525d8353efe" translate="yes" xml:space="preserve">
          <source>Create the ViewManager subclass.</source>
          <target state="translated">ViewManagerのサブクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="2aa8eb4e0b108038fade4d565491955079d819c4" translate="yes" xml:space="preserve">
          <source>Create the following Java classes to wrap the Stetho call, one for release and one for debug:</source>
          <target state="translated">以下のJavaクラスを作成して、Stetho呼び出しをラップします。</target>
        </trans-unit>
        <trans-unit id="2be67e7dd95b88c1dbc685ac6ed9b2d669142a23" translate="yes" xml:space="preserve">
          <source>Creates a StyleSheet style reference from the given object.</source>
          <target state="translated">指定したオブジェクトから StyleSheet スタイル参照を作成します。</target>
        </trans-unit>
        <trans-unit id="a09a7934cb2e00de6d50b218a84f38c86102bb49" translate="yes" xml:space="preserve">
          <source>Creates a new Animated value composed by dividing the first Animated value by the second Animated value.</source>
          <target state="translated">1つ目のアニメーション値を2つ目のアニメーション値で割って新しいアニメーション値を作成します。</target>
        </trans-unit>
        <trans-unit id="3ea9bbfeeac2b9976dffff0d9529f6c279c8188f" translate="yes" xml:space="preserve">
          <source>Creates a new Animated value composed by subtracting the second Animated value from the first Animated value.</source>
          <target state="translated">1つ目のアニメイト値から2つ目のアニメイト値を差し引いて構成された新しいアニメイト値を作成します。</target>
        </trans-unit>
        <trans-unit id="61989521a2e6fa27c6e6c5bbb958af7f9eeedd9d" translate="yes" xml:space="preserve">
          <source>Creates a new Animated value composed from two Animated values added together.</source>
          <target state="translated">2つのアニメーション値を足し合わせて構成された新しいアニメーション値を作成します。</target>
        </trans-unit>
        <trans-unit id="eeb9046d2f19ee9efd06e537c71b4e4494ec2fd6" translate="yes" xml:space="preserve">
          <source>Creates a new Animated value composed from two Animated values multiplied together.</source>
          <target state="translated">2つのアニメーション値を掛け合わせて新しいアニメーション値を作成します。</target>
        </trans-unit>
        <trans-unit id="b4a255f6109554155fe296aa3fc69e837083fd11" translate="yes" xml:space="preserve">
          <source>Creates a new Animated value that is the (non-negative) modulo of the provided Animated value</source>
          <target state="translated">指定されたアニメーション値の(負ではない)モジュロである新しいアニメーション値を作成します。</target>
        </trans-unit>
        <trans-unit id="661a3e7dcfd319e1bceffaf165cf955d69eb0d37" translate="yes" xml:space="preserve">
          <source>Creates an object that represent android theme's default background for borderless selectable elements (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+.</source>
          <target state="translated">ボーダーレスな選択可能要素のためのandroidテーマのデフォルトの背景を表すオブジェクトを作成します(?android:attr/selectableItemBackgroundBorderless)。android APIレベル21+で利用可能です。</target>
        </trans-unit>
        <trans-unit id="be0ce7adab6cb32ae8f8c0bb2da47a15c5f24f26" translate="yes" xml:space="preserve">
          <source>Creates an object that represents android theme's default background for selectable elements (?android:attr/selectableItemBackground).</source>
          <target state="translated">選択可能な要素のためのandroidテーマのデフォルトの背景を表すオブジェクトを作成します(?android:attr/selectableItemBackground)。</target>
        </trans-unit>
        <trans-unit id="5b0685cb3c99ad16413567dd88ddd4b335651382" translate="yes" xml:space="preserve">
          <source>Creates an object that represents ripple drawable with specified color (as a string). If property &lt;code&gt;borderless&lt;/code&gt; evaluates to true the ripple will render outside of the view bounds (see native actionbar buttons as an example of that behavior). This background type is available on Android API level 21+.</source>
          <target state="translated">（文字列として）指定された色でドローアブルを表すオブジェクトを作成します。プロパティ &lt;code&gt;borderless&lt;/code&gt; がtrueと評価された場合、リップルはビューの境界の外にレンダリングされます（その動作の例としてネイティブアクションバーボタンを参照してください）。この背景タイプは、Android APIレベル21以上で使用できます。</target>
        </trans-unit>
        <trans-unit id="34fda308dfbdd4f79c684f1715e470c47ce04ee9" translate="yes" xml:space="preserve">
          <source>Creating a new application</source>
          <target state="translated">新規アプリケーションの作成</target>
        </trans-unit>
        <trans-unit id="6e99a73603683748bbccbcf659bca36a6f958520" translate="yes" xml:space="preserve">
          <source>Creating a release build in Android Studio</source>
          <target state="translated">Android Studioでリリースビルドを作成する</target>
        </trans-unit>
        <trans-unit id="e0704a854e5d0da08924c8a7fce595581bea5854" translate="yes" xml:space="preserve">
          <source>Creating an iOS alert:</source>
          <target state="translated">iOSのアラートを作成します。</target>
        </trans-unit>
        <trans-unit id="cff689fa77888d32990e4842de035f2f4cc0343d" translate="yes" xml:space="preserve">
          <source>Creating an iOS prompt:</source>
          <target state="translated">iOSのプロンプトを作成します。</target>
        </trans-unit>
        <trans-unit id="bd3da99bccdafb7abc3b6c296d3b6d6fa8ae6c4d" translate="yes" xml:space="preserve">
          <source>Creating new views on the UI thread</source>
          <target state="translated">UIスレッドに新しいビューを作成する</target>
        </trans-unit>
        <trans-unit id="877195f630fc9b1367714f5d6e92494258178679" translate="yes" xml:space="preserve">
          <source>Crop the image specified by the URI param. If URI points to a remote image, it will be downloaded automatically. If the image cannot be loaded/downloaded, the failure callback will be called.</source>
          <target state="translated">URIパラメータで指定された画像をトリミングします。URIがリモート画像を指している場合は,自動的にダウンロードされます.画像のロード/ダウンロードができなかった場合は,失敗コールバックが呼ばれます.</target>
        </trans-unit>
        <trans-unit id="f9c331801b6f8b618119179435f1532e3ca71e69" translate="yes" xml:space="preserve">
          <source>Cross platform values for &lt;code&gt;ConnectionType&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ConnectionType&lt;/code&gt; のクロスプラットフォーム値：</target>
        </trans-unit>
        <trans-unit id="999f66afcc47f4a79a3a7fe2dd5deb1078b8245b" translate="yes" xml:space="preserve">
          <source>Cross platform values for &lt;code&gt;EffectiveConnectionType&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;EffectiveConnectionType&lt;/code&gt; のクロスプラットフォーム値：</target>
        </trans-unit>
        <trans-unit id="e5665fdbfe64240d6d207e9317c3dfd40e6c0b11" translate="yes" xml:space="preserve">
          <source>Currently this is only implemented on Android and reflects the user preference set in Settings &amp;gt; Display &amp;gt; Font size, on iOS it will always return the default pixel ratio. @platform android</source>
          <target state="translated">現在、これはAndroidにのみ実装されており、[設定]&amp;gt; [ディスプレイ]&amp;gt; [フォントサイズ]で設定されたユーザー設定を反映しています。iOSでは、常にデフォルトのピクセル比を返します。@platform android</target>
        </trans-unit>
        <trans-unit id="8453aa5457d06d84c9f509167399bbf656b8519d" translate="yes" xml:space="preserve">
          <source>Custom debugger commands executed this way should be short-lived processes, and they shouldn't produce more than 200 kilobytes of output.</source>
          <target state="translated">この方法で実行されるカスタムデバッガコマンドは、短命なプロセスであるべきであり、200 キロバイト以上の出力を生成してはいけません。</target>
        </trans-unit>
        <trans-unit id="7613b5f2ff9ccc754abee18a5ee9c7cf8fb91536" translate="yes" xml:space="preserve">
          <source>DEPRECATED - use one of the new list components, such as &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;FlatList&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sectionlist&quot;&gt;&lt;code&gt;SectionList&lt;/code&gt;&lt;/a&gt; for bounded memory use, fewer bugs, better performance, an easier to use API, and more features. Check out this &lt;a href=&quot;https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html&quot;&gt;blog post&lt;/a&gt; for more details.</source>
          <target state="translated">非推奨- 制限付きメモリの使用、バグの減少、パフォーマンスの向上、APIの使いやすさ、その他の機能には、&lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;FlatList&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;sectionlist&quot;&gt; &lt;code&gt;SectionList&lt;/code&gt; &lt;/a&gt;などの新しいリストコンポーネントのいずれかを使用します。詳細については、この&lt;a href=&quot;https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html&quot;&gt;ブログ投稿&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="952fb371ececd7f48e11d4195db58224fde1a9a5" translate="yes" xml:space="preserve">
          <source>Dark background, white texts and icons</source>
          <target state="translated">暗い背景、白いテキストとアイコン</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="6c2f88394e1ad191a5a07fd62c6c0e585da8900a" translate="yes" xml:space="preserve">
          <source>Date change handler.</source>
          <target state="translated">日付変更ハンドラ。</target>
        </trans-unit>
        <trans-unit id="e5ec63bc5398daca985d124acd3661c293e465f4" translate="yes" xml:space="preserve">
          <source>DatePickerAndroid</source>
          <target state="translated">DatePickerAndroid</target>
        </trans-unit>
        <trans-unit id="abf2107ab8b8c9e4e0019c42e518535503c5347d" translate="yes" xml:space="preserve">
          <source>DatePickerAndroid.dateSetAction()</source>
          <target state="translated">DatePickerAndroid.dateSetAction()</target>
        </trans-unit>
        <trans-unit id="1d9c8e60ee5b6b2062a7684308ac4d063ad7c9d9" translate="yes" xml:space="preserve">
          <source>DatePickerAndroid.dismissedAction()</source>
          <target state="translated">DatePickerAndroid.dismissedAction()</target>
        </trans-unit>
        <trans-unit id="cb0ad5dc12144f0499a4e563b1e8adee8720f68a" translate="yes" xml:space="preserve">
          <source>DatePickerAndroid.open()</source>
          <target state="translated">DatePickerAndroid.open()</target>
        </trans-unit>
        <trans-unit id="454ed5b5cbfe72a3640fb6bd4f3935e792dc633a" translate="yes" xml:space="preserve">
          <source>DatePickerIOS</source>
          <target state="translated">DatePickerIOS</target>
        </trans-unit>
        <trans-unit id="8cb2a68e114e1f1175aa6a74486f1a70b9382603" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#date</source>
          <target state="translated">DatePickerIOS#date</target>
        </trans-unit>
        <trans-unit id="b5f28ed1c24b1f06fabfef4556f73424448f6aa5" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#locale</source>
          <target state="translated">DatePickerIOS#locale</target>
        </trans-unit>
        <trans-unit id="b8a2245da174b7247d87108ae63d8014053b722f" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#maximumDate</source>
          <target state="translated">DatePickerIOS#maximumDate</target>
        </trans-unit>
        <trans-unit id="10bbcd4d40a53b3e67039526eb60765ea64275c7" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#minimumDate</source>
          <target state="translated">DatePickerIOS#minimumDate</target>
        </trans-unit>
        <trans-unit id="4107c5c5d295c6b8e2036859150d7920042db1cf" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#minuteInterval</source>
          <target state="translated">DatePickerIOS#minuteInterval</target>
        </trans-unit>
        <trans-unit id="fcaf11e79a958d816beff1fbc4256feeb6f3fa7d" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#mode</source>
          <target state="translated">DatePickerIOS#mode</target>
        </trans-unit>
        <trans-unit id="6b3194318519e18f74a249eb0d11b50fd79ea686" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#onDateChange</source>
          <target state="translated">DatePickerIOS#onDateChange</target>
        </trans-unit>
        <trans-unit id="6790a881f27fc7c8d6a7c14360bd10f6a67bcee3" translate="yes" xml:space="preserve">
          <source>DatePickerIOS#timeZoneOffsetInMinutes</source>
          <target state="translated">DatePickerIOS#timeZoneOffsetInMinutes</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="07df3f2663b43ce817f4952984a52be527b61790" translate="yes" xml:space="preserve">
          <source>Debugging in Ejected Apps</source>
          <target state="translated">排出されたアプリのデバッグ</target>
        </trans-unit>
        <trans-unit id="77197659727070c800445b2de24adcaa211dcecd" translate="yes" xml:space="preserve">
          <source>Debugging native code</source>
          <target state="translated">ネイティブコードのデバッグ</target>
        </trans-unit>
        <trans-unit id="a6fe9c5cf6a9723fb863445a38d7f62ae68cbbd0" translate="yes" xml:space="preserve">
          <source>Debugging on a device with Chrome Developer Tools</source>
          <target state="translated">Chrome Developer Tools でデバイスをデバッグする</target>
        </trans-unit>
        <trans-unit id="02c5927d5556800050c0d0397dc57fc94de3667d" translate="yes" xml:space="preserve">
          <source>Debugging using a custom JavaScript debugger</source>
          <target state="translated">カスタム JavaScript デバッガを使ったデバッグ</target>
        </trans-unit>
        <trans-unit id="4a25f6df0195c0317dd36163abcd8669baab2f71" translate="yes" xml:space="preserve">
          <source>Debugging with &lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;Stetho&lt;/a&gt; on Android</source>
          <target state="translated">Android での&lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;Stethoを使用&lt;/a&gt;したデバッグ</target>
        </trans-unit>
        <trans-unit id="e5ea543956568c5d4d0902ace1e4e631af2bc82e" translate="yes" xml:space="preserve">
          <source>DecomposedMatrixPropType</source>
          <target state="translated">DecomposedMatrixPropType</target>
        </trans-unit>
        <trans-unit id="cd7700ad9be5ffc112f1a8e817bf96c6f95eebdf" translate="yes" xml:space="preserve">
          <source>Default alert with no inputs</source>
          <target state="translated">入力なしのデフォルトアラート</target>
        </trans-unit>
        <trans-unit id="4ded9799f4fdebf15e6e43e057512875f5f87215" translate="yes" xml:space="preserve">
          <source>Default bounciness is 1, which overshoots a little bit once. 0 bounciness doesn't overshoot at all, and bounciness of N &amp;gt; 1 will overshoot about N times.</source>
          <target state="translated">デフォルトの弾力は1で、少しオーバーシュートします。0の弾力はオーバーシュートしません。N&amp;gt; 1の弾力は約N回オーバーシュートします。</target>
        </trans-unit>
        <trans-unit id="8ac56b05507ca86a31c921315f03ff43544e73b6" translate="yes" xml:space="preserve">
          <source>Default button style</source>
          <target state="translated">デフォルトのボタンスタイル</target>
        </trans-unit>
        <trans-unit id="d981b59e452376c245d8082b15e8998d53187f5b" translate="yes" xml:space="preserve">
          <source>Default is set to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;none&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="b1806b1b488bbb320ceffc6815281887736da5df" translate="yes" xml:space="preserve">
          <source>Default is set to &lt;code&gt;overFullScreen&lt;/code&gt; or &lt;code&gt;fullScreen&lt;/code&gt; depending on &lt;code&gt;transparent&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;transparent&lt;/code&gt; プロパティに応じて、デフォルトは &lt;code&gt;overFullScreen&lt;/code&gt; または &lt;code&gt;fullScreen&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="47559547b8fd1819ccf816708321e56eeffa62dd" translate="yes" xml:space="preserve">
          <source>Default renderer for every item in every section. Can be over-ridden on a per-section basis. Should return a React element.</source>
          <target state="translated">すべてのセクションのすべてのアイテムのデフォルトのレンダラー。セクションごとにオーバーライドすることができます。React 要素を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="4365baff72f31f48c9456b07939654e7738e011b" translate="yes" xml:space="preserve">
          <source>Default status bar style (dark for iOS, light for Android)</source>
          <target state="translated">デフォルトのステータスバーのスタイル(iOSは暗め、Androidは明るめ</target>
        </trans-unit>
        <trans-unit id="d97f69d721242223ecdd553d82579213060d01ad" translate="yes" xml:space="preserve">
          <source>Defusing situations</source>
          <target state="translated">解読の状況</target>
        </trans-unit>
        <trans-unit id="a7e2e253fbf49aaef0797c2ef1b54d040f5e10c8" translate="yes" xml:space="preserve">
          <source>Delay in ms, from onPressIn, before onLongPress is called.</source>
          <target state="translated">onPressIn から onLongPress が呼び出されるまでの遅延時間 (ミリ秒)。</target>
        </trans-unit>
        <trans-unit id="9321a967a2b86af21d2b5741f62b58ca8df308ba" translate="yes" xml:space="preserve">
          <source>Delay in ms, from the release of the touch, before onPressOut is called.</source>
          <target state="translated">タッチを離してから onPressOut が呼ばれるまでの時間(ミリ秒)。</target>
        </trans-unit>
        <trans-unit id="5411169f0b3337271ff06c8c76c12a0413b4a3c3" translate="yes" xml:space="preserve">
          <source>Delay in ms, from the start of the touch, before onPressIn is called.</source>
          <target state="translated">タッチが始まってから onPressIn が呼ばれるまでの時間(ミリ秒)。</target>
        </trans-unit>
        <trans-unit id="6e3eb81376eb07686606d8cc068187399a69a345" translate="yes" xml:space="preserve">
          <source>Delete an image from the ImageStore. Images are stored in memory and must be manually removed when you are finished with them, otherwise they will continue to use up RAM until the app is terminated. It is safe to call &lt;code&gt;removeImageForTag()&lt;/code&gt; without first calling &lt;code&gt;hasImageForTag()&lt;/code&gt;, it will simply fail silently. @platform ios</source>
          <target state="translated">ImageStoreから画像を削除します。画像はメモリに保存され、使い終わったら手動で削除する必要があります。そうしないと、アプリが終了するまでRAMを使い続けます。呼び出しても安全である &lt;code&gt;removeImageForTag()&lt;/code&gt; 最初に呼び出さずに &lt;code&gt;hasImageForTag()&lt;/code&gt; 、それは単に黙って失敗します。@platform ios</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依存性注入</target>
        </trans-unit>
        <trans-unit id="e1171e4ddb2939137f9a26ebc2d5d018b20fbace" translate="yes" xml:space="preserve">
          <source>Deprecated, do not use.</source>
          <target state="translated">非推奨、使用しないでください。</target>
        </trans-unit>
        <trans-unit id="0977eccaf7445c744479373e8d28b0ea4b69111b" translate="yes" xml:space="preserve">
          <source>Deprecated, use &lt;code&gt;scrollTo&lt;/code&gt; instead.</source>
          <target state="translated">廃止されました。代わりに &lt;code&gt;scrollTo&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="dad2d16ba5775b9af4899b687670ed40137d0f2e" translate="yes" xml:space="preserve">
          <source>Deprecated. Use BackHandler instead.</source>
          <target state="translated">非推奨。代わりにBackHandlerを使用してください。</target>
        </trans-unit>
        <trans-unit id="24cf08f1248f2d564a7ae8c17a3063e7267b63fd" translate="yes" xml:space="preserve">
          <source>Deprecated. Use the transform prop instead.</source>
          <target state="translated">非推奨。代わりに transform プロップを使用してください。</target>
        </trans-unit>
        <trans-unit id="8d0e8d7e0ff949fb64d57a5880c58a011001715e" translate="yes" xml:space="preserve">
          <source>Describe your &lt;a href=&quot;contributing#test-plan&quot;&gt;&lt;strong&gt;test plan&lt;/strong&gt;&lt;/a&gt; in your pull request description. Make sure to &lt;a href=&quot;testing&quot;&gt;test your changes&lt;/a&gt;!</source>
          <target state="translated">あなたの説明&lt;a href=&quot;contributing#test-plan&quot;&gt;&lt;strong&gt;テスト計画は、&lt;/strong&gt;&lt;/a&gt;あなたのプル要求の記述で。必ず&lt;a href=&quot;testing&quot;&gt;変更&lt;/a&gt;をテストしてください！</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="76ba503c67d408cf6c19133bcbea6b8b95f8ba25" translate="yes" xml:space="preserve">
          <source>Destructive button style</source>
          <target state="translated">破壊的なボタンスタイル</target>
        </trans-unit>
        <trans-unit id="f950184f883e92265756c7cdfedd06e8f2042e87" translate="yes" xml:space="preserve">
          <source>Detect hardware button presses for back navigation.</source>
          <target state="translated">バックナビゲーションのためのハードウェアボタンの押下を検出します。</target>
        </trans-unit>
        <trans-unit id="17632e014a22e8a51f4fb176ab2dffd8db5c3191" translate="yes" xml:space="preserve">
          <source>Detecting the Android version</source>
          <target state="translated">Androidのバージョンを検出する</target>
        </trans-unit>
        <trans-unit id="0c5822d4b5a19029fc73edd14c1e2ab5c884a6cb" translate="yes" xml:space="preserve">
          <source>Detecting the iOS version</source>
          <target state="translated">iOSのバージョンを検出する</target>
        </trans-unit>
        <trans-unit id="e259c7e6f68f5d54dfcf2c678e960de24e56e3bf" translate="yes" xml:space="preserve">
          <source>Determine whether or not an installed app can handle a given URL.</source>
          <target state="translated">インストールされているアプリが、指定された URL を処理できるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="7af56b2c59b527a09786a1e3d6750bff9780d459" translate="yes" xml:space="preserve">
          <source>Determines how many items are in the data blob.</source>
          <target state="translated">データブロブ内の項目数を決定します。</target>
        </trans-unit>
        <trans-unit id="5a416d1b3619aa9cbced576e55fefbffa34f9ea7" translate="yes" xml:space="preserve">
          <source>Determines how the return key should look. On Android you can also use &lt;code&gt;returnKeyLabel&lt;/code&gt;.</source>
          <target state="translated">リターンキーの外観を決定します。Androidでは、 &lt;code&gt;returnKeyLabel&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="5fa377c73b9443e28eeb3febff7e670ec05ed4de" translate="yes" xml:space="preserve">
          <source>Determines how to resize the image when the frame doesn't match the raw image dimensions.</source>
          <target state="translated">フレームが生の画像の寸法と一致しない場合に、画像のサイズを変更する方法を決定します。</target>
        </trans-unit>
        <trans-unit id="261a10a144861c73a30611cb5aa1236a7b045abf" translate="yes" xml:space="preserve">
          <source>Determines the color of the keyboard.</source>
          <target state="translated">キーボードの色を決定します。</target>
        </trans-unit>
        <trans-unit id="757816d1414ab8167c4c2a82dbdb292d419e47c2" translate="yes" xml:space="preserve">
          <source>Determines the location of the given view in the window and returns the values via an async callback. If the React root view is embedded in another native view, this will give you the absolute coordinates. If successful, the callback will be called with the following arguments:</source>
          <target state="translated">ウィンドウ内の与えられたビューの位置を決定し、非同期コールバックを介して値を返します。Reactのルートビューが他のネイティブビューに埋め込まれている場合は、絶対座標を返します。成功した場合、コールバックは以下の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="14956f9061ccaf7c18bab6ecb040baca4e7030ba" translate="yes" xml:space="preserve">
          <source>Determines the location on screen, width, and height of the given view and returns the values via an async callback. If successful, the callback will be called with the following arguments:</source>
          <target state="translated">指定したビューの画面上の位置、幅、高さを決定し、非同期コールバックで値を返します。成功した場合、コールバックは以下の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="24f513d65fc6cee7639e774119c1b2e0e2530065" translate="yes" xml:space="preserve">
          <source>Determines the maximum number of items rendered outside of the visible area, in units of visible lengths. So if your list fills the screen, then &lt;code&gt;windowSize={21}&lt;/code&gt; (the default) will render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing this number will reduce memory consumption and may improve performance, but will increase the chance that fast scrolling may reveal momentary blank areas of unrendered content.</source>
          <target state="translated">可視領域の外側にレンダリングされるアイテムの最大数を、可視の長さの単位で決定します。したがって、リストが画面 &lt;code&gt;windowSize={21}&lt;/code&gt; 表示される場合、windowSize = {21}（デフォルト）は、表示可能な画面領域に加えて、ビューポートの上と下に最大10画面を表示します。この数を減らすと、メモリの消費量が減り、パフォーマンスが向上する可能性がありますが、高速スクロールにより、レンダリングされていないコンテンツの一時的な空白領域が表示される可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="ebb124fd167aded46efb5a62099ffccfa1e9a18f" translate="yes" xml:space="preserve">
          <source>Determines the type of background drawable that's going to be used to display feedback. It takes an object with &lt;code&gt;type&lt;/code&gt; property and extra data depending on the &lt;code&gt;type&lt;/code&gt;. It's recommended to use one of the static methods to generate that dictionary.</source>
          <target state="translated">フィードバックの表示に使用される背景ドローアブルのタイプを決定します。これは、 &lt;code&gt;type&lt;/code&gt; プロパティを持つオブジェクトと、 &lt;code&gt;type&lt;/code&gt; 応じて追加のデータを取ります。その辞書を生成するには、静的メソッドの1つを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a1702a5c4070d76e9ba5a854e4be621f195bf0f" translate="yes" xml:space="preserve">
          <source>Determines the types of data converted to clickable URLs in the text input. Only valid if &lt;code&gt;multiline={true}&lt;/code&gt; and &lt;code&gt;editable={false}&lt;/code&gt;. By default no data types are detected.</source>
          <target state="translated">テキスト入力でクリック可能なURLに変換されるデータのタイプを決定します。 &lt;code&gt;multiline={true}&lt;/code&gt; および &lt;code&gt;editable={false}&lt;/code&gt; の場合にのみ有効です。デフォルトでは、データタイプは検出されません。</target>
        </trans-unit>
        <trans-unit id="dc56f61b00919b3c480f8436cc0bde18cb93796f" translate="yes" xml:space="preserve">
          <source>Determines the types of data converted to clickable URLs in the web view's content. By default only phone numbers are detected.</source>
          <target state="translated">ウェブビューのコンテンツでクリック可能なURLに変換されるデータの種類を決定します。デフォルトでは電話番号のみが検出されます。</target>
        </trans-unit>
        <trans-unit id="627094028593a09ffd2e22b8af76eebf308bfbfd" translate="yes" xml:space="preserve">
          <source>Determines what the opacity of the wrapped view should be when touch is active.</source>
          <target state="translated">タッチがアクティブなときにラップされたビューの不透明度を指定します。</target>
        </trans-unit>
        <trans-unit id="c16a325c91ad8b3eb902ec68fe86dfe8ebae963b" translate="yes" xml:space="preserve">
          <source>Determines what the opacity of the wrapped view should be when touch is active. Defaults to 0.2.</source>
          <target state="translated">タッチがアクティブなときにラップされたビューの不透明度を指定します。デフォルトは 0.2 です。</target>
        </trans-unit>
        <trans-unit id="76ba8fd83f526ae327bb44e469c7cacf72b8c5ca" translate="yes" xml:space="preserve">
          <source>Determines when the keyboard should stay visible after a tap.</source>
          <target state="translated">タップ後にキーボードが表示されたままになるタイミングを指定します。</target>
        </trans-unit>
        <trans-unit id="205b1e8bda4e61213c1477db0f58545c0589c0cf" translate="yes" xml:space="preserve">
          <source>Determines whether the keyboard gets dismissed in response to a drag.</source>
          <target state="translated">ドラッグに反応してキーボードが外されるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="822d494ce0dda7bc93ff235f3f20668b3c654d49" translate="yes" xml:space="preserve">
          <source>Determines which keyboard to open, e.g.&lt;code&gt;numeric&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;numeric&lt;/code&gt; 、開くキーボードを決定します。</target>
        </trans-unit>
        <trans-unit id="ff183b6dff0e5f378846b2e2ee7e0974d7ac4d5b" translate="yes" xml:space="preserve">
          <source>Develop your React Native components in JavaScript.</source>
          <target state="translated">JavaScriptでReact Nativeコンポーネントを開発します。</target>
        </trans-unit>
        <trans-unit id="2fd853ef36aed219bdfba7d253cc30c3cfd09e32" translate="yes" xml:space="preserve">
          <source>Development OS: &lt;a href=&quot;javascript:void(0);&quot;&gt;macOS&lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Linux&lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Windows&lt;/a&gt;</source>
          <target state="translated">開発OS：&lt;a href=&quot;javascript:void(0);&quot;&gt;macOS &lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Linux &lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Windows&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ec20707446f55747eb3547dca713032f138215c" translate="yes" xml:space="preserve">
          <source>Development OS: &lt;a href=&quot;javascript:void(0);&quot;&gt;macOS&lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Windows&lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Linux&lt;/a&gt; Target OS: &lt;a href=&quot;javascript:void(0);&quot;&gt;iOS&lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Android&lt;/a&gt;</source>
          <target state="translated">開発OS：&lt;a href=&quot;javascript:void(0);&quot;&gt;macOS &lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Windows &lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Linux&lt;/a&gt;ターゲットOS：&lt;a href=&quot;javascript:void(0);&quot;&gt;iOS &lt;/a&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;Android&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c659a411024775bc5400ece139ed7c5058937b1d" translate="yes" xml:space="preserve">
          <source>Development Tools</source>
          <target state="translated">開発ツール</target>
        </trans-unit>
        <trans-unit id="9f4ca9ec08715def4a822d25f75f2d9b79b931c0" translate="yes" xml:space="preserve">
          <source>Dimensions</source>
          <target state="translated">Dimensions</target>
        </trans-unit>
        <trans-unit id="17cc7fd349e5dae88134e32a1626aeb3ba67eedb" translate="yes" xml:space="preserve">
          <source>Dimensions.addEventListener()</source>
          <target state="translated">Dimensions.addEventListener()</target>
        </trans-unit>
        <trans-unit id="230c04d961ad119cae09bb9576265549264f8628" translate="yes" xml:space="preserve">
          <source>Dimensions.get()</source>
          <target state="translated">Dimensions.get()</target>
        </trans-unit>
        <trans-unit id="96a2722d44af301c2eb859eb3d8dd00c7abc76c9" translate="yes" xml:space="preserve">
          <source>Dimensions.removeEventListener()</source>
          <target state="translated">Dimensions.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="a1d4572c0b0a5d94ba4146c25fed7de581ca594b" translate="yes" xml:space="preserve">
          <source>Dimensions.set()</source>
          <target state="translated">Dimensions.set()</target>
        </trans-unit>
        <trans-unit id="0087cb74d67247e454ffd807f7a39b4fa4d444f4" translate="yes" xml:space="preserve">
          <source>Direct Manipulation</source>
          <target state="translated">直接操作</target>
        </trans-unit>
        <trans-unit id="07037cf386d70d70a7330855b12e45618845d62a" translate="yes" xml:space="preserve">
          <source>Direct manipulation will not be a tool that you reach for frequently; you will typically only be using it for creating continuous animations to avoid the overhead of rendering the component hierarchy and reconciling many views. &lt;code&gt;setNativeProps&lt;/code&gt; is imperative and stores state in the native layer (DOM, UIView, etc.) and not within your React components, which makes your code more difficult to reason about. Before you use it, try to solve your problem with &lt;code&gt;setState&lt;/code&gt; and &lt;a href=&quot;http://facebook.github.io/react/advanced-performance.md#shouldcomponentupdate-in-action&quot;&gt;shouldComponentUpdate&lt;/a&gt;.</source>
          <target state="translated">直接操作は、頻繁にアクセスするツールにはなりません。通常は、コンポーネントの階層をレンダリングして多くのビューを調整するオーバーヘッドを回避するために、連続したアニメーションを作成するためにのみ使用します。 &lt;code&gt;setNativeProps&lt;/code&gt; は命令型であり、状態をネイティブレイヤー（DOM、UIViewなど）に格納し、Reactコンポーネント内には格納しないため、コードの推論がより困難になります。使用する前に、 &lt;code&gt;setState&lt;/code&gt; および&lt;a href=&quot;http://facebook.github.io/react/advanced-performance.md#shouldcomponentupdate-in-action&quot;&gt;shouldComponentUpdate&lt;/a&gt;を使用して問題を解決してください。</target>
        </trans-unit>
        <trans-unit id="6e3da966fde97abe1d040aab6b25ba7ad49f9f23" translate="yes" xml:space="preserve">
          <source>Dismisses the active keyboard and removes focus.</source>
          <target state="translated">アクティブなキーボードを解除し、フォーカスを外します。</target>
        </trans-unit>
        <trans-unit id="506c6c88f1cc339182d4a1f5759ebc25c9428bd5" translate="yes" xml:space="preserve">
          <source>Display an iOS action sheet. The &lt;code&gt;options&lt;/code&gt; object must contain one or more of:</source>
          <target state="translated">iOSアクションシートを表示します。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、1つ以上を含む必要があります。</target>
        </trans-unit>
        <trans-unit id="1caa72417b154b535cae85684927195ea4a0ca7d" translate="yes" xml:space="preserve">
          <source>Display the iOS share sheet. The &lt;code&gt;options&lt;/code&gt; object should contain one or both of &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; and can additionally have a &lt;code&gt;subject&lt;/code&gt; or &lt;code&gt;excludedActivityTypes&lt;/code&gt;:</source>
          <target state="translated">iOS共有シートを表示します。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、1つまたは両方含まれている必要があります &lt;code&gt;message&lt;/code&gt; と &lt;code&gt;url&lt;/code&gt; 、さらに持つことができ &lt;code&gt;subject&lt;/code&gt; や &lt;code&gt;excludedActivityTypes&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="1c7f27745c3be8188d9edd248851742cbc3ddd4d" translate="yes" xml:space="preserve">
          <source>Displaying a basic button</source>
          <target state="translated">基本ボタンの表示</target>
        </trans-unit>
        <trans-unit id="c9fcf0d7dfbdce0fda475f08c1553e44ea4b467a" translate="yes" xml:space="preserve">
          <source>Displays a circular loading indicator.</source>
          <target state="translated">円形のローディングインジケータを表示します。</target>
        </trans-unit>
        <trans-unit id="28965ff3c652cd61e1e5b9c4f1f6a9a79f5051f8" translate="yes" xml:space="preserve">
          <source>Displays the scroll indicators momentarily.</source>
          <target state="translated">スクロールインジケータを瞬時に表示します。</target>
        </trans-unit>
        <trans-unit id="86a94333ff830a72adf09d0b37eee168080a3c6f" translate="yes" xml:space="preserve">
          <source>Do not use the optional parameters of &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;setTimeout&lt;/code&gt; および &lt;code&gt;setInterval&lt;/code&gt; のオプションパラメータを使用しないでください</target>
        </trans-unit>
        <trans-unit id="0431c693c039ca5456bce2609f1ffe641d182438" translate="yes" xml:space="preserve">
          <source>Do not use unless you have a very good reason. All elements that respond to press should have a visual feedback when touched.</source>
          <target state="translated">よほどの理由がない限り使用しないでください。プレスに反応するすべての要素は、触ったときに視覚的なフィードバックを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="663bf42ab2ffa357c91d1aa15ef68c8da7e6b09e" translate="yes" xml:space="preserve">
          <source>Do not wrap lines at 80 characters - configure your editor to soft-wrap when editing documentation.</source>
          <target state="translated">80文字で行を折り返さない-ドキュメントを編集する際には、ソフトラップするようにエディタを設定してください。</target>
        </trans-unit>
        <trans-unit id="4cd503ccf205862463b7786875fbd0a8ae753ec0" translate="yes" xml:space="preserve">
          <source>DocumentSelectionState</source>
          <target state="translated">DocumentSelectionState</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="f1e73e6a24693d389fd7f9aeec2412b800b72af8" translate="yes" xml:space="preserve">
          <source>Does not work for static image resources.</source>
          <target state="translated">静的な画像リソースに対しては動作しません。</target>
        </trans-unit>
        <trans-unit id="5c061446591e50bec2ee147d113f0445d2d24a60" translate="yes" xml:space="preserve">
          <source>Does this view want to &quot;claim&quot; touch responsiveness? This is called for every touch move on the &lt;code&gt;View&lt;/code&gt; when it is not the responder.</source>
          <target state="translated">このビューはタッチの応答性を「要求」しますか？これは、レスポンダーではないときに、 &lt;code&gt;View&lt;/code&gt; 上のすべてのタッチ移動で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="12415ae6466274a906e26e76bee019302486f063" translate="yes" xml:space="preserve">
          <source>Does this view want to become responder on the start of a touch?</source>
          <target state="translated">このビューは、タッチの開始時にレスポンダになりたいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="b31470b2f0cb31fd9ecd013bad3ce30a302d0a89" translate="yes" xml:space="preserve">
          <source>Doesn't yet support other contained responders from blocking this scroll view from becoming the responder.</source>
          <target state="translated">このスクロールビューがレスポンダになるのをブロックすることから他のレスポンダをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="f5fa33a9e741bf3de6e993b259623c8a40a1f759" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to replace the paths with correct ones and create the assets folder if it doesn&amp;rsquo;t exist.</source>
          <target state="translated">パスを正しいパスに置き換えることを忘れないでください、そしてそれが存在しない場合はアセットフォルダーを作成してください。</target>
        </trans-unit>
        <trans-unit id="818ee4662d0f1641ae42713e3cf05d27bfdd5625" translate="yes" xml:space="preserve">
          <source>Don't forget to catch any errors that may be thrown by &lt;code&gt;fetch&lt;/code&gt;, otherwise they will be dropped silently.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; によってスローされる可能性のあるエラーをキャッチすることを忘れないでください。そうしないと、エラーが表示されずにドロップされます。</target>
        </trans-unit>
        <trans-unit id="2406392cf4515cbb1766536dd15257ecd018e7b4" translate="yes" xml:space="preserve">
          <source>Done! All libraries with native dependencies should be successfully linked to your iOS/Android project.</source>
          <target state="translated">完了です。ネイティブの依存関係にあるすべてのライブラリが、iOS/Androidプロジェクトに正常にリンクされているはずです。</target>
        </trans-unit>
        <trans-unit id="c8ca888418dd5e916a163275aef87397ef851f61" translate="yes" xml:space="preserve">
          <source>Download links for Android NDK</source>
          <target state="translated">Android NDKのダウンロードリンク</target>
        </trans-unit>
        <trans-unit id="942c281c59dedad86d43dbbf1697457353cf62f5" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid</source>
          <target state="translated">DrawerLayoutAndroid</target>
        </trans-unit>
        <trans-unit id="96b627198aab4397572098d87935f8979333e62e" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#drawerBackgroundColor</source>
          <target state="translated">DrawerLayoutAndroid#drawerBackgroundColor</target>
        </trans-unit>
        <trans-unit id="9e3294f5bb27e8d7bf797561213bee8a396f1566" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#drawerLockMode</source>
          <target state="translated">DrawerLayoutAndroid#drawerLockMode</target>
        </trans-unit>
        <trans-unit id="b1fc9352aede4daff2dcfb2a69ba70e05ac6968c" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#drawerPosition</source>
          <target state="translated">DrawerLayoutAndroid#drawerPosition</target>
        </trans-unit>
        <trans-unit id="600adcc1f6c45d0ad37e0f0455bc2b20a1dc685b" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#drawerWidth</source>
          <target state="translated">DrawerLayoutAndroid#drawerWidth</target>
        </trans-unit>
        <trans-unit id="32d4eae50e1ca5e6cd2c098c192823f8780bcfe3" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#keyboardDismissMode</source>
          <target state="translated">DrawerLayoutAndroid#keyboardDismissMode</target>
        </trans-unit>
        <trans-unit id="bdaef6dd20a4a5f4bf2871375d664ffd0e2a8aa6" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#onDrawerClose</source>
          <target state="translated">DrawerLayoutAndroid#onDrawerClose</target>
        </trans-unit>
        <trans-unit id="79245153209d84b47bf015af4e58112eca9e36da" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#onDrawerOpen</source>
          <target state="translated">DrawerLayoutAndroid#onDrawerOpen</target>
        </trans-unit>
        <trans-unit id="a6dee6d5ef4c19f708523302467e0fd0094f750c" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#onDrawerSlide</source>
          <target state="translated">DrawerLayoutAndroid#onDrawerSlide</target>
        </trans-unit>
        <trans-unit id="d1a32cabcb7905c3afcca14a3a8d164ad3058fea" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#onDrawerStateChanged</source>
          <target state="translated">DrawerLayoutAndroid#onDrawerStateChanged</target>
        </trans-unit>
        <trans-unit id="f0c773296221f88e87b1fecfc6b61e02db037b18" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#renderNavigationView</source>
          <target state="translated">DrawerLayoutAndroid#renderNavigationView</target>
        </trans-unit>
        <trans-unit id="9ab467a95a99e035de773b6c94141297bed70ed6" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid#statusBarBackgroundColor</source>
          <target state="translated">DrawerLayoutAndroid#statusBarBackgroundColor</target>
        </trans-unit>
        <trans-unit id="23d97bce32eca47a101aacdbb83854054b4065ad" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid.closeDrawer()</source>
          <target state="translated">DrawerLayoutAndroid.closeDrawer()</target>
        </trans-unit>
        <trans-unit id="8e1bb468072bb321841e8d61162fb62540a0e7ce" translate="yes" xml:space="preserve">
          <source>DrawerLayoutAndroid.openDrawer()</source>
          <target state="translated">DrawerLayoutAndroid.openDrawer()</target>
        </trans-unit>
        <trans-unit id="4716372ff2da1e79e14c34272bc05824a14bbe49" translate="yes" xml:space="preserve">
          <source>Dropping JS thread FPS because of doing a lot of work on the JavaScript thread at the same time</source>
          <target state="translated">JavaScriptスレッドでの作業を同時に行うため、JSスレッドのFPSが低下する</target>
        </trans-unit>
        <trans-unit id="f03204c8c97fc70a7c06dd2eb90fe74bd70f90d1" translate="yes" xml:space="preserve">
          <source>During the development process, React Native has loaded your JavaScript code dynamically at runtime. For a production build, you want to pre-package the JavaScript bundle and distribute it inside your application. Doing this requires a code change in your code so that it knows to load the static bundle.</source>
          <target state="translated">開発プロセスの間、React Native は実行時に JavaScript コードを動的にロードしています。本番環境でのビルドでは、JavaScript バンドルを事前にパッケージ化してアプリケーション内に配布したいと思います。そのためには、静的バンドルをロードするようにコードを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="02957381f086d7a70ffa685322ea2b1f8bb72d3d" translate="yes" xml:space="preserve">
          <source>ES5</source>
          <target state="translated">ES5</target>
        </trans-unit>
        <trans-unit id="f340712260381d35a53813a65d261137ac25e7e6" translate="yes" xml:space="preserve">
          <source>ES6</source>
          <target state="translated">ES6</target>
        </trans-unit>
        <trans-unit id="cf8549779b4fe3c34654cabcc67ad70efa187f92" translate="yes" xml:space="preserve">
          <source>ES6 standards</source>
          <target state="translated">ES6規格</target>
        </trans-unit>
        <trans-unit id="a3ae3124cb93f8e2f6ff34e27e9b964cbdbbc7f0" translate="yes" xml:space="preserve">
          <source>ES7</source>
          <target state="translated">ES7</target>
        </trans-unit>
        <trans-unit id="c265dfa2ef36b1f84f88c19256ab5cbfc8beb55a" translate="yes" xml:space="preserve">
          <source>ES8</source>
          <target state="translated">ES8</target>
        </trans-unit>
        <trans-unit id="1e6e245244682f5cfb4893ad29681ba8098b3918" translate="yes" xml:space="preserve">
          <source>Each cell is rendered using this element. Can be a React Component Class,or a render function. Defaults to using &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各セルは、この要素を使用してレンダリングされます。Reactコンポーネントクラスまたはレンダリング関数を使用できます。デフォルトでは&lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="ae682745bf7c3c04ea76322c0830b51ffdcc10cd" translate="yes" xml:space="preserve">
          <source>Each change in color is a frame -- remember that in order to display a frame, all our UI work needs to be done by the end of that 16ms period. Notice that no thread is working close to the frame boundary. An application rendering like this is rendering at 60 FPS.</source>
          <target state="translated">色の変化はそれぞれフレームです --フレームを表示するためには、16ms の期間の終わりまでにすべての UI 作業が完了する必要があることを覚えておいてください。フレームの境界付近ではどのスレッドも作業していないことに注意してください。このようなアプリケーションのレンダリングは、60 FPSでレンダリングされています。</target>
        </trans-unit>
        <trans-unit id="e49fac3c16a22a30567a9505b0c579b78ad03184" translate="yes" xml:space="preserve">
          <source>Each frame during this transition, the JavaScript thread needs to send a new x-offset to the main thread. If the JavaScript thread is locked up, it cannot do this and so no update occurs on that frame and the animation stutters.</source>
          <target state="translated">この遷移の間の各フレームでは、JavaScript スレッドはメインスレッドに新しい x-オフセットを送信する必要があります。JavaScript スレッドがロックアップされている場合、これができないため、そのフレームでは更新が行われず、アニメーションはスタッタリングします。</target>
        </trans-unit>
        <trans-unit id="b994d3ffd7f7dfe07c08219e7e1ebeb57770d404" translate="yes" xml:space="preserve">
          <source>Each property can be run through an interpolation first. An interpolation maps input ranges to output ranges, typically using a linear interpolation but also supports easing functions. By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value.</source>
          <target state="translated">各プロパティは、最初に補間を実行することができます。補間は入力範囲を出力範囲にマップし、通常は線形補間を使用しますが、イージング関数もサポートしています。デフォルトでは、与えられた範囲を超えて曲線を外挿しますが、出力値をクランプすることもできます。</target>
        </trans-unit>
        <trans-unit id="3b764a093768046fc982d321a641af663ce70b0c" translate="yes" xml:space="preserve">
          <source>Each screen component can set navigation options such as the header title. It can use action creators on the &lt;code&gt;navigation&lt;/code&gt; prop to link to other screens:</source>
          <target state="translated">各画面コンポーネントは、ヘッダータイトルなどのナビゲーションオプションを設定できます。 &lt;code&gt;navigation&lt;/code&gt; プロップでアクションクリエーターを使用して、他の画面にリンクできます。</target>
        </trans-unit>
        <trans-unit id="0c8709a43f69a8c12f45e58b4bcdf5a46f1ca867" translate="yes" xml:space="preserve">
          <source>Easing</source>
          <target state="translated">Easing</target>
        </trans-unit>
        <trans-unit id="49c8eb8f81872d9e279fb040e9dca52582c23e47" translate="yes" xml:space="preserve">
          <source>Easing.back()</source>
          <target state="translated">Easing.back()</target>
        </trans-unit>
        <trans-unit id="97a6f5849e32e021d282c0286a898410fade4693" translate="yes" xml:space="preserve">
          <source>Easing.bezier()</source>
          <target state="translated">Easing.bezier()</target>
        </trans-unit>
        <trans-unit id="a83e9808e3f982ffacc97c219a9912a09976cc16" translate="yes" xml:space="preserve">
          <source>Easing.bounce()</source>
          <target state="translated">Easing.bounce()</target>
        </trans-unit>
        <trans-unit id="f57597caef2a7731baa0da14c538b031a132ba2e" translate="yes" xml:space="preserve">
          <source>Easing.circle()</source>
          <target state="translated">Easing.circle()</target>
        </trans-unit>
        <trans-unit id="df10fff6f2c57d6cfe2c87ac684647b9fbfc3c2c" translate="yes" xml:space="preserve">
          <source>Easing.cubic()</source>
          <target state="translated">Easing.cubic()</target>
        </trans-unit>
        <trans-unit id="031cdbfc508e40f1893f5f2041a4c014a6df46d8" translate="yes" xml:space="preserve">
          <source>Easing.ease()</source>
          <target state="translated">Easing.ease()</target>
        </trans-unit>
        <trans-unit id="46e513157f47ee06a4af6df687ff0b85c769d6f7" translate="yes" xml:space="preserve">
          <source>Easing.elastic()</source>
          <target state="translated">Easing.elastic()</target>
        </trans-unit>
        <trans-unit id="48c2845035ee41df000a0999094997f214550834" translate="yes" xml:space="preserve">
          <source>Easing.exp()</source>
          <target state="translated">Easing.exp()</target>
        </trans-unit>
        <trans-unit id="9ba4871a36de9a56a18c91b5b9328ff3edebe794" translate="yes" xml:space="preserve">
          <source>Easing.in()</source>
          <target state="translated">Easing.in()</target>
        </trans-unit>
        <trans-unit id="c73c1fd5e84ade3a9f06f4b8a43e4eaf852041c9" translate="yes" xml:space="preserve">
          <source>Easing.inOut()</source>
          <target state="translated">Easing.inOut()</target>
        </trans-unit>
        <trans-unit id="037997e4f2dcdff0bc8fbd05d76e02c762045530" translate="yes" xml:space="preserve">
          <source>Easing.linear()</source>
          <target state="translated">Easing.linear()</target>
        </trans-unit>
        <trans-unit id="0fb34b76aea8d0559162f81f218809a962276540" translate="yes" xml:space="preserve">
          <source>Easing.out()</source>
          <target state="translated">Easing.out()</target>
        </trans-unit>
        <trans-unit id="18678b2e1bda5b1498b5b93dafb07e95eec178d7" translate="yes" xml:space="preserve">
          <source>Easing.poly()</source>
          <target state="translated">Easing.poly()</target>
        </trans-unit>
        <trans-unit id="45bc3409cb197c3cb0005331ee443f8410a12bac" translate="yes" xml:space="preserve">
          <source>Easing.quad()</source>
          <target state="translated">Easing.quad()</target>
        </trans-unit>
        <trans-unit id="14d8c74e0b2ac27386f99a8ce202152caabb234e" translate="yes" xml:space="preserve">
          <source>Easing.sin()</source>
          <target state="translated">Easing.sin()</target>
        </trans-unit>
        <trans-unit id="54e939afb818ada8b62e571f2ab175b20a9742d5" translate="yes" xml:space="preserve">
          <source>Easing.step0()</source>
          <target state="translated">Easing.step0()</target>
        </trans-unit>
        <trans-unit id="6ab16d864bded32bc8db03147f3a12ce5bae520e" translate="yes" xml:space="preserve">
          <source>Easing.step1()</source>
          <target state="translated">Easing.step1()</target>
        </trans-unit>
        <trans-unit id="0a872b0dd128efbf0fbb23b371af6b27e428ae2f" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;android/app/build.gradle&lt;/code&gt; in your project folder and add the signing config,</source>
          <target state="translated">プロジェクトフォルダーの &lt;code&gt;android/app/build.gradle&lt;/code&gt; ファイルを編集し、署名設定を追加します。</target>
        </trans-unit>
        <trans-unit id="ce13466a3efe62ea6b36dfcac30dea7eaca46fdb" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; or &lt;code&gt;android/gradle.properties&lt;/code&gt; and add the following (replace &lt;code&gt;*****&lt;/code&gt; with the correct keystore password, alias and key password),</source>
          <target state="translated">ファイル &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; または &lt;code&gt;android/gradle.properties&lt;/code&gt; を編集し、以下を追加します（ &lt;code&gt;*****&lt;/code&gt; を正しいキーストアパスワード、エイリアス、およびキーパスワードに置き換えます）。</target>
        </trans-unit>
        <trans-unit id="fecf55e44323010f5d8e124a1229de0376a885eb" translate="yes" xml:space="preserve">
          <source>Edit your android/app/build.gradle file to include &lt;code&gt;bundleConfig: &quot;packager/config.js&quot;,&lt;/code&gt;.</source>
          <target state="translated">android / app / build.gradleファイルを編集して &lt;code&gt;bundleConfig: &quot;packager/config.js&quot;,&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="7bab005e0c4b5f6ea4ea053560e6992cddc59998" translate="yes" xml:space="preserve">
          <source>EffectiveConnectionType enum</source>
          <target state="translated">EffectiveConnectionType enum</target>
        </trans-unit>
        <trans-unit id="2251de58c53a64c3879c641bca10bc2746fe4d8c" translate="yes" xml:space="preserve">
          <source>Either way, you will need to prepare the device to run Android apps for development.</source>
          <target state="translated">いずれにしても、開発にはAndroidアプリを動作させるための端末を用意する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d67fafadcb3cc61f24e92ae5f38fa949d87b8ed" translate="yes" xml:space="preserve">
          <source>Enable Gradle</source>
          <target state="translated">Gradleを有効にする</target>
        </trans-unit>
        <trans-unit id="22b2d6a4e1a6946024c94f288bcf5168e325e6ad" translate="yes" xml:space="preserve">
          <source>Enable Unbundling</source>
          <target state="translated">アンバンドルを有効にする</target>
        </trans-unit>
        <trans-unit id="1129083828ef6bf4ff0bcfa3a5a88c20f198c844" translate="yes" xml:space="preserve">
          <source>Enable or disable autocapitalization and autocorrect</source>
          <target state="translated">自動大文字化とオートコレクトを有効または無効にする</target>
        </trans-unit>
        <trans-unit id="f8af4181f34c2a619fd717fcbb1dafb882dd3933" translate="yes" xml:space="preserve">
          <source>Enable unbundling in Xcode by editing the build phase &quot;Bundle React Native code and images&quot;. Before &lt;code&gt;../node_modules/react-native/packager/react-native-xcode.sh&lt;/code&gt; add &lt;code&gt;export BUNDLE_COMMAND=&quot;unbundle&quot;&lt;/code&gt;:</source>
          <target state="translated">ビルドフェーズ「Bactle React Native code and images」を編集して、Xcodeでのバンドル解除を有効にします。 &lt;code&gt;../node_modules/react-native/packager/react-native-xcode.sh&lt;/code&gt; の前に &lt;code&gt;export BUNDLE_COMMAND=&quot;unbundle&quot;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="d4777b39c30a81f25eef595aabebfe134c11cfc9" translate="yes" xml:space="preserve">
          <source>Enabled or disabled KeyboardAvoidingView.</source>
          <target state="translated">KeyboardAvoidingViewを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="b5431c34df9879927414eb19d0967d797f8780df" translate="yes" xml:space="preserve">
          <source>Enables nested scrolling for Android API level 21+. Nested scrolling is supported by default on iOS.</source>
          <target state="translated">Android APIレベル21以上で入れ子になったスクロールを有効にします。iOSでは、入れ子になったスクロールはデフォルトでサポートされています。</target>
        </trans-unit>
        <trans-unit id="3e83b44929b44819faf0fa9bf90a43face53f56d" translate="yes" xml:space="preserve">
          <source>Enabling Keyboard Shortcuts</source>
          <target state="translated">キーボードショートカットを有効にする</target>
        </trans-unit>
        <trans-unit id="1a4e11fda60a95e9f0935998482aa48acdc3a59e" translate="yes" xml:space="preserve">
          <source>Enabling Proguard to reduce the size of the APK (optional)</source>
          <target state="translated">Proguardを有効にしてAPKのサイズを縮小する(オプション</target>
        </trans-unit>
        <trans-unit id="e6f6463c153c032ec57c13a6815c6707e987c657" translate="yes" xml:space="preserve">
          <source>End-to-end tests</source>
          <target state="translated">エンドツーエンドテスト</target>
        </trans-unit>
        <trans-unit id="7db165ce324dbf4aefe3486876b2674737c2c05c" translate="yes" xml:space="preserve">
          <source>Entering text on touch phone is a challenge - small screen, software keyboard. But based on what kind of data you need, you can make it easier by properly configuring the text inputs:</source>
          <target state="translated">小さな画面、ソフトウェアキーボード-タッチフォンでテキストを入力することは、課題です。しかし、あなたが必要とするデータの種類に基づいて、あなたは適切にテキスト入力を設定することで、それを容易にすることができます。</target>
        </trans-unit>
        <trans-unit id="62d5278824a7f49ae22cdc4c92b679bf8d3c3fe2" translate="yes" xml:space="preserve">
          <source>Enum Constants</source>
          <target state="translated">列挙定数</target>
        </trans-unit>
        <trans-unit id="67ff2817539603af0d74d000fa923d716787a761" translate="yes" xml:space="preserve">
          <source>Enums that are defined via &lt;code&gt;NS_ENUM&lt;/code&gt; cannot be used as method arguments without first extending RCTConvert.</source>
          <target state="translated">NS_ENUMを介して定義された &lt;code&gt;NS_ENUM&lt;/code&gt; は、最初にRCTConvertを拡張しないと、メソッド引数として使用できません。</target>
        </trans-unit>
        <trans-unit id="5921552c997cab15f4208392f22d21bddf0ae1f4" translate="yes" xml:space="preserve">
          <source>Erases &lt;em&gt;all&lt;/em&gt;&lt;code&gt;AsyncStorage&lt;/code&gt; for all clients, libraries, etc. You probably don't want to call this; use &lt;code&gt;removeItem&lt;/code&gt; or &lt;code&gt;multiRemove&lt;/code&gt; to clear only your app's keys. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">消去し&lt;em&gt;、すべての&lt;/em&gt; &lt;code&gt;AsyncStorage&lt;/code&gt; あなたはおそらくこれを呼び出すにしたくないなどのすべてのクライアント、ライブラリのを、。 &lt;code&gt;removeItem&lt;/code&gt; または &lt;code&gt;multiRemove&lt;/code&gt; を使用して、アプリのキーのみをクリアします。 &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="7c010902d0440cf360f3d4c5b3444f63c57d787e" translate="yes" xml:space="preserve">
          <source>Errors and warnings are displayed inside your app in development builds.</source>
          <target state="translated">開発ビルドでは、アプリ内にエラーや警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="8468a312811e8016c781e141c00fa57fc056e664" translate="yes" xml:space="preserve">
          <source>Even if the feature does belong in the core library, adding it means maintaining it. A maintainer will encourage you to submit a pull request or otherwise post your request to &lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;Canny&lt;/a&gt;.</source>
          <target state="translated">機能がコアライブラリに属していても、追加することは維持することを意味します。メンテナはプルリクエストを提出するか、&lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;キャニーに&lt;/a&gt;リクエストを投稿することを勧めます。</target>
        </trans-unit>
        <trans-unit id="b57eacc5c8e71a031ceb7f41a26c29a8d2d53f04" translate="yes" xml:space="preserve">
          <source>Even though these three permissions are not listed in the manifest they get added in. We add the three permissions with &lt;code&gt;tools:node=&quot;remove&quot;&lt;/code&gt; attribute, to make sure it gets removed during build. Note that the package identifier will be different, for below it is &quot;com.myapp&quot; because the project was created with &lt;code&gt;react-native init myapp&lt;/code&gt;.</source>
          <target state="translated">これらの3つのアクセス許可は、追加されるマニフェストにリストされていませんが、ビルド時に削除されるように、 &lt;code&gt;tools:node=&quot;remove&quot;&lt;/code&gt; 属性を使用して3つのアクセス許可を追加します。プロジェクトは &lt;code&gt;react-native init myapp&lt;/code&gt; で作成されたため、パッケージ識別子は異なることに注意してください。以下では「com.myapp」です。</target>
        </trans-unit>
        <trans-unit id="b58c3448bcde8ed7540e661383a9c1a1aba5f858" translate="yes" xml:space="preserve">
          <source>Even without unbundling inline requires can lead to startup time improvements, because the code within VeryExpensive.js will only execute once it is required for the first time.</source>
          <target state="translated">インラインのrequireをアンバンドルしなくても、VeryExpensive.js内のコードは初めてrequireされたときにのみ実行されるため、起動時間の改善につながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ad8919ace091b14011c6439cfd5e1707b58f5abd" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="translated">Event</target>
        </trans-unit>
        <trans-unit id="9a5bef4fa7e175e4bd865b1e27968cffd8579a3a" translate="yes" xml:space="preserve">
          <source>Event type.</source>
          <target state="translated">イベントの種類。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="f0532de293c9cfae0f6c94230a8e99f179303c8e" translate="yes" xml:space="preserve">
          <source>Events are described in detail in &lt;a href=&quot;native-components-ios#events&quot;&gt;this article&lt;/a&gt;. Note that using events gives us no guarantees about execution time, as the event is handled on a separate thread.</source>
          <target state="translated">イベントについては、&lt;a href=&quot;native-components-ios#events&quot;&gt;この記事&lt;/a&gt;で詳しく説明します。イベントは別のスレッドで処理されるため、イベントを使用しても実行時間は保証されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f8a6d70d7b567b890e113692c96fb0795266598" translate="yes" xml:space="preserve">
          <source>Events are powerful, because they allow us to change React Native components without needing a reference to them. However, there are some pitfalls that you can fall into while using them:</source>
          <target state="translated">イベントは、React Native コンポーネントを参照することなく変更できるので、強力です。しかし、イベントを使用している間に陥る可能性のある落とし穴がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9cb5d5205da66f572488f05ddaadc378830af5dc" translate="yes" xml:space="preserve">
          <source>Events share namespace, which means that you may encounter some name collisions. Collisions will not be detected statically, which makes them hard to debug.</source>
          <target state="translated">イベントは名前空間を共有しているため、名前の衝突が発生する可能性があります。衝突は静的には検出されないため、デバッグが困難になります。</target>
        </trans-unit>
        <trans-unit id="fca9c8fd91e45328072a0922a3964216729d0303" translate="yes" xml:space="preserve">
          <source>Every app is different, but it may make sense to only load the modules you need for the very first screen. When you are satisified, put the output of the loadedModuleNames into a file named packager/moduleNames.js.</source>
          <target state="translated">アプリごとに異なりますが、最初の画面に必要なモジュールだけをロードするのは理にかなっているかもしれません。納得のいく結果が得られたら、loadedModuleNamesの出力をpackager/moduleNames.jsという名前のファイルに入れます。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="654d7a479004b2b26e7de7b5ed9cd79a331ded80" translate="yes" xml:space="preserve">
          <source>Example Usage</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="8ca59f5e7b121d68e4da3fc9bb32800021a873dd" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;maximumDate&lt;/code&gt; set to December 31, 2017:</source>
          <target state="translated">&lt;code&gt;maximumDate&lt;/code&gt; を 2017年12月31日に設定した例：</target>
        </trans-unit>
        <trans-unit id="be344a4b114e4c5cbddf4e2faad62b41bda76973" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;minuteInterval&lt;/code&gt; set to &lt;code&gt;10&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;minuteInterval&lt;/code&gt; を &lt;code&gt;10&lt;/code&gt; に設定した例：</target>
        </trans-unit>
        <trans-unit id="7d488ef955e46b32616b9103a8dd11b57f5d8ee2" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;mode&lt;/code&gt; set to &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, and &lt;code&gt;datetime&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; を &lt;code&gt;date&lt;/code&gt; 、 &lt;code&gt;time&lt;/code&gt; 、および &lt;code&gt;datetime&lt;/code&gt; に設定した例：</target>
        </trans-unit>
        <trans-unit id="2ec5718a2713b78e172bce50ded59c76d755f09c" translate="yes" xml:space="preserve">
          <source>Example with custom buttons:</source>
          <target state="translated">カスタムボタンを使用した例。</target>
        </trans-unit>
        <trans-unit id="93203edc52c977e00514ccdf263b82d413832ee8" translate="yes" xml:space="preserve">
          <source>Example with the default button and a custom callback:</source>
          <target state="translated">デフォルトのボタンとカスタムコールバックの例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="3c724daaf2729c4f39a6ae6f0c7d36b271449f86" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;var {height, width} = Dimensions.get('window');&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;var {height, width} = Dimensions.get('window');&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="16ae5bc83f061518ccc14cf01744a99fd85bf309" translate="yes" xml:space="preserve">
          <source>Except from &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;@ReactProp&lt;/code&gt; annotation may take following optional arguments: &lt;code&gt;defaultBoolean&lt;/code&gt;, &lt;code&gt;defaultInt&lt;/code&gt;, &lt;code&gt;defaultFloat&lt;/code&gt;. Those arguments should be of the corresponding primitive type (accordingly &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;) and the value provided will be passed to the setter method in case when the property that the setter is referencing has been removed from the component. Note that &quot;default&quot; values are only provided for primitive types, in case when setter is of some complex type, &lt;code&gt;null&lt;/code&gt; will be provided as a default value in case when corresponding property gets removed.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; を除いて、 &lt;code&gt;@ReactProp&lt;/code&gt; アノテーションは次のオプションの引数を取ることができます： &lt;code&gt;defaultBoolean&lt;/code&gt; 、 &lt;code&gt;defaultInt&lt;/code&gt; 、 &lt;code&gt;defaultFloat&lt;/code&gt; 。これらの引数は、対応するプリミティブ型（したがって、 &lt;code&gt;boolean&lt;/code&gt; 、 &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;float&lt;/code&gt; ）である必要があり、提供された値は、セッターが参照しているプロパティがコンポーネントから削除された場合に、セッターメソッドに渡されます。 「デフォルト」値はプリミティブ型に対してのみ提供されることに注意してください。セッターが何らかの複合型である場合、対応するプロパティが削除された場合のデフォルト値として &lt;code&gt;null&lt;/code&gt; が提供されます。</target>
        </trans-unit>
        <trans-unit id="72a16b927e87405c356b73a2c662b3ec3b75c26a" translate="yes" xml:space="preserve">
          <source>Exceptions can be made if multiple people appear to be affected by the issue, especially right after a new React Native release is cut.</source>
          <target state="translated">複数の人が問題の影響を受けているように見える場合、特に新しい React Native リリースがカットされた直後に例外が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="26393134f67efac97c9240e57c32d0c90edf0461" translate="yes" xml:space="preserve">
          <source>Executed when transitioning between pages (ether because of animation for the requested page change or when user is swiping/dragging between pages) The &lt;code&gt;event.nativeEvent&lt;/code&gt; object for this callback will carry following data:</source>
          <target state="translated">ページ間の遷移時に実行されます（要求されたページ変更のアニメーションのため、またはユーザーがページ間でスワイプ/ドラッグしている場合）。このコールバックの &lt;code&gt;event.nativeEvent&lt;/code&gt; オブジェクトは、次のデータを保持します。</target>
        </trans-unit>
        <trans-unit id="14409c06d75acfdbdc6e80cb3baf8353b108268f" translate="yes" xml:space="preserve">
          <source>Expects a params with the shape described below.</source>
          <target state="translated">以下のような形状のparamsを想定しています。</target>
        </trans-unit>
        <trans-unit id="89add2b28dee8fd5a38b4b36a5fe1b53e7530121" translate="yes" xml:space="preserve">
          <source>Experimental: When true, offscreen child views (whose &lt;code&gt;overflow&lt;/code&gt; value is &lt;code&gt;hidden&lt;/code&gt;) are removed from their native backing superview when offscreen. This can improve scrolling performance on long lists. The default value is true.</source>
          <target state="translated">試験運用：trueの場合、オフスクリーンの子ビュー（ &lt;code&gt;overflow&lt;/code&gt; 値が &lt;code&gt;hidden&lt;/code&gt; ）は、オフスクリーン時にネイティブバッキングスーパービューから削除されます。これにより、長いリストのスクロールパフォーマンスが向上します。デフォルト値はtrueです。</target>
        </trans-unit>
        <trans-unit id="7fb92fb78aa274a17e799046b0be650fa71027c1" translate="yes" xml:space="preserve">
          <source>Exporting Constants</source>
          <target state="translated">定数のエクスポート</target>
        </trans-unit>
        <trans-unit id="f06e9dd15439cb8550335e9da42e3a5f7221b967" translate="yes" xml:space="preserve">
          <source>Exporting Swift</source>
          <target state="translated">スイフトのエクスポート</target>
        </trans-unit>
        <trans-unit id="b8af06374d1f520b6d7d0c395e2cf11d4003cdc8" translate="yes" xml:space="preserve">
          <source>Exports some data, e.g. for perf investigations or analytics.</source>
          <target state="translated">PER調査や分析などのために、いくつかのデータをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="e31e4341ce8d6b7f1295dc40e0e0abbf38066789" translate="yes" xml:space="preserve">
          <source>Expose view property setters using &lt;code&gt;@ReactProp&lt;/code&gt; (or &lt;code&gt;@ReactPropGroup&lt;/code&gt;) annotation</source>
          <target state="translated">&lt;code&gt;@ReactProp&lt;/code&gt; （または &lt;code&gt;@ReactPropGroup&lt;/code&gt; ）アノテーションを使用してビュープロパティセッターを公開する</target>
        </trans-unit>
        <trans-unit id="5b588a73ceb6e278c19a67d2ed042d02ae8fa3be" translate="yes" xml:space="preserve">
          <source>Exposing a view is simple:</source>
          <target state="translated">ビューを公開するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="25a8d3280014afe10d21748d14c1fa3ed60c2a95" translate="yes" xml:space="preserve">
          <source>Extending React Native</source>
          <target state="translated">React Nativeを拡張する</target>
        </trans-unit>
        <trans-unit id="85355a7d47bedf8ca8b88f8a4f0dd10502f1a385" translate="yes" xml:space="preserve">
          <source>Facebook GitHub Bot</source>
          <target state="translated">Facebook GitHub Bot</target>
        </trans-unit>
        <trans-unit id="7a34d69d052620a5a705ea8b6a433d7c0f56b7a8" translate="yes" xml:space="preserve">
          <source>Facebook has a &lt;a href=&quot;https://www.facebook.com/whitehat/&quot;&gt;bounty program&lt;/a&gt; for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.</source>
          <target state="translated">Facebookには、セキュリティバグを安全に開示するための&lt;a href=&quot;https://www.facebook.com/whitehat/&quot;&gt;賞金プログラム&lt;/a&gt;があります。そのことを念頭に置いて、公の問題を提出しないでください。そのページで説明されているプロセスを実行します。</target>
        </trans-unit>
        <trans-unit id="989e1dbe2ae3d8362757cee6cc1170930288ad46" translate="yes" xml:space="preserve">
          <source>Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.</source>
          <target state="translated">Facebookは、プロジェクト参加者が遵守することを期待する行動規範を採用しています。許容されるアクションと許容されないアクションを理解できるように、&lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;全文を&lt;/a&gt;読んでください。</target>
        </trans-unit>
        <trans-unit id="158b825587003e5a31cbb7836b58402c53312665" translate="yes" xml:space="preserve">
          <source>Fade animation</source>
          <target state="translated">フェードアニメーション</target>
        </trans-unit>
        <trans-unit id="aeaeaa75f6f029910584080d6f741675afd3a53c" translate="yes" xml:space="preserve">
          <source>Feedback/highlighting- show the user what is handling their touch, and what will happen when they release the gesture</source>
          <target state="translated">フィードバック/ハイライト-ユーザーがタッチを操作している内容と、ジェスチャーを離したときに何が起こるかを表示します。</target>
        </trans-unit>
        <trans-unit id="1df382c4e090d17485a4dca478e9b68ac692cad9" translate="yes" xml:space="preserve">
          <source>Fellow developers write and publish React Native modules to npm and open source them on GitHub.</source>
          <target state="translated">仲間の開発者がReact Nativeモジュールを書いてnpmに公開したり、GitHubでオープンソース化したりしています。</target>
        </trans-unit>
        <trans-unit id="2ef72030fe1aba8779e87b53c910401306facd66" translate="yes" xml:space="preserve">
          <source>Fetch also takes an optional second argument that allows you to customize the HTTP request. You may want to specify additional headers, or make a POST request:</source>
          <target state="translated">Fetch はオプションの二番目の引数も取り、HTTP リクエストをカスタマイズすることができます。追加のヘッダを指定したり、POST リクエストを作成したりすることができます。</target>
        </trans-unit>
        <trans-unit id="056393a13b7e465ecd971ca89e2bde649c0faf86" translate="yes" xml:space="preserve">
          <source>Fetches an item for a &lt;code&gt;key&lt;/code&gt; and invokes a callback upon completion. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 項目をフェッチし、完了時にコールバックを呼び出します。 &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6e6413bc18ecd6574573937523813fe77e1d165e" translate="yes" xml:space="preserve">
          <source>Fetching a correctly sized image</source>
          <target state="translated">正しいサイズの画像を取得する</target>
        </trans-unit>
        <trans-unit id="c5d190bee7433c3dfc7bf32f5587889ab4caa03e" translate="yes" xml:space="preserve">
          <source>Fetching data:</source>
          <target state="translated">データを取得します。</target>
        </trans-unit>
        <trans-unit id="405a9984f38fac02e14f2a46c89a7233677ca8ca" translate="yes" xml:space="preserve">
          <source>Finally, click &quot;Apply&quot; to download and install the Android SDK and related build tools.</source>
          <target state="translated">最後に「適用」をクリックしてAndroid SDKと関連するビルドツールをダウンロードしてインストールします。</target>
        </trans-unit>
        <trans-unit id="694e591738cff976efbd47c1bb46e5646e9df70c" translate="yes" xml:space="preserve">
          <source>Finally, make sure end-to-end tests run successfully by executing the following script:</source>
          <target state="translated">最後に、以下のスクリプトを実行して、エンドツーエンドテストが正常に実行されることを確認します。</target>
        </trans-unit>
        <trans-unit id="862f9d01b058f12f0fc593dd006b10a06fba1601" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;code&gt;onActivityResult()&lt;/code&gt; method (as shown in the code below) has to be overridden to handle the permission Accepted or Denied cases for consistent UX.</source>
          <target state="translated">最後に、一貫性のあるUXのAcceptedまたはDeniedパーミッションのケースを処理するには、 &lt;code&gt;onActivityResult()&lt;/code&gt; メソッド（以下のコードに示す）をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="a3b817b96843f9e05235c4604c5009aca7b06a44" translate="yes" xml:space="preserve">
          <source>Finally, to enable support for &lt;code&gt;notification&lt;/code&gt; and &lt;code&gt;register&lt;/code&gt; events you need to augment your AppDelegate.</source>
          <target state="translated">最後に、のサポートを有効にする &lt;code&gt;notification&lt;/code&gt; し、 &lt;code&gt;register&lt;/code&gt; 、あなたのAppDelegateを強化する必要があるイベントを。</target>
        </trans-unit>
        <trans-unit id="f8de81ab65869a21c02dc99be0e8e423f46339c5" translate="yes" xml:space="preserve">
          <source>Finally, we need to hook up the dev menu. By default, this is activated by (rage) shaking the device, but this is not very useful in emulators. So we make it show when you press the hardware menu button (use &lt;code&gt;Ctrl + M&lt;/code&gt; if you're using Android Studio emulator):</source>
          <target state="translated">最後に、開発メニューを接続する必要があります。デフォルトでは、これはデバイスを（激怒）シェイクすることでアクティブになりますが、エミュレーターではあまり役に立ちません。ハードウェアメニューボタンを押したときに表示されるようにします（Android Studioエミュレーターを使用している場合は &lt;code&gt;Ctrl + M&lt;/code&gt; を使用します）：</target>
        </trans-unit>
        <trans-unit id="83e7d3dcf4ea6fcb04bce680b51b99ed1f63a293" translate="yes" xml:space="preserve">
          <source>Finally, you can update &quot;start&quot; under &quot;scripts&quot; on your package.json to use the config:</source>
          <target state="translated">最後に、package.jsonの &quot;scripts &quot;の下の &quot;start &quot;を更新して、configを使うようにします。</target>
        </trans-unit>
        <trans-unit id="afbe7f44ba852160e14c772eb2765a1baee6c389" translate="yes" xml:space="preserve">
          <source>Fired at the end of the touch.</source>
          <target state="translated">タッチの最後に発射。</target>
        </trans-unit>
        <trans-unit id="81b27877d25f61bf66626d2ba7760e7631012d47" translate="yes" xml:space="preserve">
          <source>Fires at most once per frame during scrolling. The frequency of the events can be controlled using the &lt;code&gt;scrollEventThrottle&lt;/code&gt; prop.</source>
          <target state="translated">スクロール中にフレームごとに最大1回発生します。イベントの頻度は、 &lt;code&gt;scrollEventThrottle&lt;/code&gt; プロップを使用して制御できます。</target>
        </trans-unit>
        <trans-unit id="a5bc42a9042dd31a78a21bb5c1f2b9ea15ac433d" translate="yes" xml:space="preserve">
          <source>First &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;RCTRootView&lt;/code&gt; header.</source>
          <target state="translated">まず、 &lt;code&gt;RCTRootView&lt;/code&gt; ヘッダーを &lt;code&gt;import&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="503ec5270e3efd17a1737ec181f8687319f9d75f" translate="yes" xml:space="preserve">
          <source>First &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;React&lt;/code&gt; library.</source>
          <target state="translated">最初に &lt;code&gt;React&lt;/code&gt; ライブラリーを &lt;code&gt;import&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="69f14251209b72d455674789e6a32dd0473c6a6e" translate="yes" xml:space="preserve">
          <source>First of all, ES2015 (also known as ES6) is a set of improvements to JavaScript that is now part of the official standard, but not yet supported by all browsers, so often it isn't used yet in web development. React Native ships with ES2015 support, so you can use this stuff without worrying about compatibility. &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, and &lt;code&gt;extends&lt;/code&gt; in the example above are all ES2015 features. If you aren't familiar with ES2015, you can probably pick it up just by reading through sample code like this tutorial has. If you want, &lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;this page&lt;/a&gt; has a good overview of ES2015 features.</source>
          <target state="translated">まず第一に、ES2015（ES6としても知られています）はJavaScriptに対する一連の改善であり、現在は公式標準の一部になっていますが、まだすべてのブラウザーでサポートされていないため、多くの場合、Web開発ではまだ使用されていません。 React NativeにはES2015サポートが付属しているため、互換性を気にすることなくこの機能を使用できます。上記の例の &lt;code&gt;import&lt;/code&gt; 、 &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;extends&lt;/code&gt; はすべてES2015の機能です。 ES2015に慣れていない場合は、このチュートリアルのようにサンプルコードを読むだけで、おそらくそれを理解できます。必要に応じて、&lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;このページ&lt;/a&gt;にES2015の機能の概要がわかります。</target>
        </trans-unit>
        <trans-unit id="c8d4ec8a3692c4d7d56c46a544b294af66115a1e" translate="yes" xml:space="preserve">
          <source>First, connect a device that exhibits the stuttering you want to investigate to your computer via USB and get it to the point right before the navigation/animation you want to profile. Run &lt;code&gt;systrace&lt;/code&gt; as follows:</source>
          <target state="translated">まず、調査したい吃音を示すデバイスをUSB経由でコンピューターに接続し、プロファイリングしたいナビゲーション/アニメーションの直前に到達させます。次のように &lt;code&gt;systrace&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="14ebc920ffc42e4166db1af3010c9045d30c2686" translate="yes" xml:space="preserve">
          <source>First, create an empty &lt;code&gt;index.js&lt;/code&gt; file in the root of your React Native project.</source>
          <target state="translated">まず、React Nativeプロジェクトのルートに空の &lt;code&gt;index.js&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="ee645b33192391e608d53808517d22f02537f932" translate="yes" xml:space="preserve">
          <source>First, follow the instructions for debugging in Chrome to open the Chrome console.</source>
          <target state="translated">まず、Chromeでのデバッグの手順に従って、Chromeのコンソールを開きます。</target>
        </trans-unit>
        <trans-unit id="5bf9ef3526633572cdfdbff0a2a121a67226c82b" translate="yes" xml:space="preserve">
          <source>First, it computes a Git patch between both old and new template files,</source>
          <target state="translated">まず、古いテンプレートファイルと新しいテンプレートファイルの間でGitパッチを計算します。</target>
        </trans-unit>
        <trans-unit id="8254ef6843b423cd5f3c71c963c59ce350b3a35a" translate="yes" xml:space="preserve">
          <source>First, you need to install &lt;code&gt;react-native&lt;/code&gt; from your fork. For example, to install the master branch from the official repo, run the following:</source>
          <target state="translated">まず、フォークから &lt;code&gt;react-native&lt;/code&gt; をインストールする必要があります。たとえば、公式リポジトリからマスターブランチをインストールするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="eb05df5ecb8189e41d24db480f05870dea2b4e55" translate="yes" xml:space="preserve">
          <source>Fixed Dimensions</source>
          <target state="translated">固定寸法</target>
        </trans-unit>
        <trans-unit id="cd2daf88a968f6f26a46ca77509be6a5efaf59ef" translate="yes" xml:space="preserve">
          <source>Flag indicating whether empty section headers should be rendered. In the future release empty section headers will be rendered by default, and the flag will be deprecated. If empty sections are not desired to be rendered their indices should be excluded from sectionID object.</source>
          <target state="translated">空のセクションヘッダをレンダリングするかどうかを示すフラグ。将来のリリースでは、空のセクションヘッダはデフォルトでレンダリングされ、このフラグは非推奨となります。空のセクションをレンダリングしたくない場合は、そのインデックスを sectionID オブジェクトから除外しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3d4e92610c72ba20d328c65ff359db3f56ae803a" translate="yes" xml:space="preserve">
          <source>Flag issues that are stale or that should be closed.</source>
          <target state="translated">陳腐化している問題や閉鎖すべき問題にフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="88428348f6f3678ff972d86f4cc12169bc9ea643" translate="yes" xml:space="preserve">
          <source>FlatList</source>
          <target state="translated">FlatList</target>
        </trans-unit>
        <trans-unit id="6f0564800cc4122bc1186f75704b61ee0965a6fb" translate="yes" xml:space="preserve">
          <source>FlatList#ItemSeparatorComponent</source>
          <target state="translated">FlatList#ItemSeparatorComponent</target>
        </trans-unit>
        <trans-unit id="b9e031138e0b7c4e7fad00a752afbd6d8d1b4443" translate="yes" xml:space="preserve">
          <source>FlatList#ListEmptyComponent</source>
          <target state="translated">FlatList#ListEmptyComponent</target>
        </trans-unit>
        <trans-unit id="11d67d81a7cdab0d3a5168200fd8b3132b6382d1" translate="yes" xml:space="preserve">
          <source>FlatList#ListFooterComponent</source>
          <target state="translated">FlatList#ListFooterComponent</target>
        </trans-unit>
        <trans-unit id="5e1b146ccf7c0b041da98c90261e585a60ed7122" translate="yes" xml:space="preserve">
          <source>FlatList#ListHeaderComponent</source>
          <target state="translated">FlatList#ListHeaderComponent</target>
        </trans-unit>
        <trans-unit id="258068de58bcd64d756fb8e63f058d91c1c46549" translate="yes" xml:space="preserve">
          <source>FlatList#columnWrapperStyle</source>
          <target state="translated">FlatList#columnWrapperStyle</target>
        </trans-unit>
        <trans-unit id="26633fb0c366c73851de815bc2bd9658ca64f60f" translate="yes" xml:space="preserve">
          <source>FlatList#data</source>
          <target state="translated">FlatList#data</target>
        </trans-unit>
        <trans-unit id="0e7c4fd626efb5698a075e96a1876c069924f906" translate="yes" xml:space="preserve">
          <source>FlatList#extraData</source>
          <target state="translated">FlatList#extraData</target>
        </trans-unit>
        <trans-unit id="1e0ca49a34def7d4825e5b430579aaf2864b1034" translate="yes" xml:space="preserve">
          <source>FlatList#getItemLayout</source>
          <target state="translated">FlatList#getItemLayout</target>
        </trans-unit>
        <trans-unit id="b73afca5e0569e874371bd0933bc11c5a08e9ffe" translate="yes" xml:space="preserve">
          <source>FlatList#horizontal</source>
          <target state="translated">FlatList#horizontal</target>
        </trans-unit>
        <trans-unit id="ca5646ca07a88ab1c540978b0238c44896676a8f" translate="yes" xml:space="preserve">
          <source>FlatList#initialNumToRender</source>
          <target state="translated">FlatList#initialNumToRender</target>
        </trans-unit>
        <trans-unit id="28c0eace558b570b26e60d526bf1797ae10f0014" translate="yes" xml:space="preserve">
          <source>FlatList#initialScrollIndex</source>
          <target state="translated">FlatList#initialScrollIndex</target>
        </trans-unit>
        <trans-unit id="179576b754eb8554c485925e3458567cea101462" translate="yes" xml:space="preserve">
          <source>FlatList#inverted</source>
          <target state="translated">FlatList#inverted</target>
        </trans-unit>
        <trans-unit id="9b8eedfc54cb23262c825577d3d0e1d17dcd1102" translate="yes" xml:space="preserve">
          <source>FlatList#keyExtractor</source>
          <target state="translated">FlatList#keyExtractor</target>
        </trans-unit>
        <trans-unit id="bfa1c4c010e6d5cb522d3b1111009e18001a14b2" translate="yes" xml:space="preserve">
          <source>FlatList#legacyImplementation</source>
          <target state="translated">FlatList#legacyImplementation</target>
        </trans-unit>
        <trans-unit id="dc4f7b926edbd3fedc10313a2e33213a4f32883e" translate="yes" xml:space="preserve">
          <source>FlatList#numColumns</source>
          <target state="translated">FlatList#numColumns</target>
        </trans-unit>
        <trans-unit id="5d01ba612d3e9d6a59a11543e7f43b5b1ada49fb" translate="yes" xml:space="preserve">
          <source>FlatList#onEndReached</source>
          <target state="translated">FlatList#onEndReached</target>
        </trans-unit>
        <trans-unit id="4c014aae36bc850e122e312be32c240210926250" translate="yes" xml:space="preserve">
          <source>FlatList#onEndReachedThreshold</source>
          <target state="translated">FlatList#onEndReachedThreshold</target>
        </trans-unit>
        <trans-unit id="48921ac1b3b9dcb131cc2cffa12ebdb2b039d16d" translate="yes" xml:space="preserve">
          <source>FlatList#onRefresh</source>
          <target state="translated">FlatList#onRefresh</target>
        </trans-unit>
        <trans-unit id="aca3e5403c6c192abba49dfd9cae0f87fbc832c9" translate="yes" xml:space="preserve">
          <source>FlatList#onViewableItemsChanged</source>
          <target state="translated">FlatList#onViewableItemsChanged</target>
        </trans-unit>
        <trans-unit id="268a84f14fbbd59cf4d359d1305a1ac8af99b753" translate="yes" xml:space="preserve">
          <source>FlatList#progressViewOffset</source>
          <target state="translated">FlatList#progressViewOffset</target>
        </trans-unit>
        <trans-unit id="15aac77f6a3af138b599375872e89200cf6ce3e6" translate="yes" xml:space="preserve">
          <source>FlatList#refreshing</source>
          <target state="translated">FlatList#refreshing</target>
        </trans-unit>
        <trans-unit id="c4bc17a42d3f48cad7d9cf8d648f212e9b6b58d3" translate="yes" xml:space="preserve">
          <source>FlatList#removeClippedSubviews</source>
          <target state="translated">FlatList#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="1beb35572460b548e2ca6ced405d84ddfb8dfb81" translate="yes" xml:space="preserve">
          <source>FlatList#renderItem</source>
          <target state="translated">FlatList#renderItem</target>
        </trans-unit>
        <trans-unit id="ebee103bfb51e02de3d1e8c8f42be326c261c7bc" translate="yes" xml:space="preserve">
          <source>FlatList#viewabilityConfig</source>
          <target state="translated">FlatList#viewabilityConfig</target>
        </trans-unit>
        <trans-unit id="3c95e7c700295a85a5d01e24a0a9260d7d9bcf8f" translate="yes" xml:space="preserve">
          <source>FlatList#viewabilityConfigCallbackPairs</source>
          <target state="translated">FlatList#viewabilityConfigCallbackPairs</target>
        </trans-unit>
        <trans-unit id="f24818b266d819463939baf77ea76a07a1b22f03" translate="yes" xml:space="preserve">
          <source>FlatList.flashScrollIndicators()</source>
          <target state="translated">FlatList.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="da4cf6369c3e94f8c30c5c7445df9af914bd0dea" translate="yes" xml:space="preserve">
          <source>FlatList.recordInteraction()</source>
          <target state="translated">FlatList.recordInteraction()</target>
        </trans-unit>
        <trans-unit id="3e98497b69afa04a215bb6300bb3c436d511b65b" translate="yes" xml:space="preserve">
          <source>FlatList.scrollToEnd()</source>
          <target state="translated">FlatList.scrollToEnd()</target>
        </trans-unit>
        <trans-unit id="a557c3d36f68f6ff91a207373986431f25814a1e" translate="yes" xml:space="preserve">
          <source>FlatList.scrollToIndex()</source>
          <target state="translated">FlatList.scrollToIndex()</target>
        </trans-unit>
        <trans-unit id="1c49a2f2177e2d30ec889075a47adb45f4c8823a" translate="yes" xml:space="preserve">
          <source>FlatList.scrollToItem()</source>
          <target state="translated">FlatList.scrollToItem()</target>
        </trans-unit>
        <trans-unit id="67d2a39ad285a4e1bd0a98786073931a6b703160" translate="yes" xml:space="preserve">
          <source>FlatList.scrollToOffset()</source>
          <target state="translated">FlatList.scrollToOffset()</target>
        </trans-unit>
        <trans-unit id="b2775b3d5dc82ee2dfc98acdb1396627da657f6f" translate="yes" xml:space="preserve">
          <source>Flattens an array of style objects, into one aggregated style object. Alternatively, this method can be used to lookup IDs, returned by &lt;code&gt;StyleSheet.register&lt;/code&gt;.</source>
          <target state="translated">スタイルオブジェクトの配列を1つの集約スタイルオブジェクトにフラット化します。あるいは、このメソッドを使用して、 &lt;code&gt;StyleSheet.register&lt;/code&gt; によって返されるIDを検索できます。</target>
        </trans-unit>
        <trans-unit id="afc775108cdab5d88fc25f884af27bd879e1f74e" translate="yes" xml:space="preserve">
          <source>Flex Dimensions</source>
          <target state="translated">屈曲寸法</target>
        </trans-unit>
        <trans-unit id="e49d6b0b7c68cd89fd5caa400d23f17915cdb4bd" translate="yes" xml:space="preserve">
          <source>Flex Direction</source>
          <target state="translated">屈曲方向</target>
        </trans-unit>
        <trans-unit id="e4a5023921b5f618743ec45c6bf896ee9d6f5f98" translate="yes" xml:space="preserve">
          <source>Flexbox works the same way in React Native as it does in CSS on the web, with a few exceptions. The defaults are different, with &lt;code&gt;flexDirection&lt;/code&gt; defaulting to &lt;code&gt;column&lt;/code&gt; instead of &lt;code&gt;row&lt;/code&gt;, and the &lt;code&gt;flex&lt;/code&gt; parameter only supporting a single number.</source>
          <target state="translated">Flexboxは、いくつかの例外を除いて、React NativeでWeb上のCSSと同じように機能します。デフォルトは異なり、 &lt;code&gt;flexDirection&lt;/code&gt; のデフォルトは &lt;code&gt;row&lt;/code&gt; ではなく &lt;code&gt;column&lt;/code&gt; であり、 &lt;code&gt;flex&lt;/code&gt; パラメータは単一の数値のみをサポートします。</target>
        </trans-unit>
        <trans-unit id="86eff8eb789b097ddca83f2c9c4617ed23605105" translate="yes" xml:space="preserve">
          <source>Flow</source>
          <target state="translated">Flow</target>
        </trans-unit>
        <trans-unit id="9e6c618ebf88f066a7c8022c567f89e4e50a44e2" translate="yes" xml:space="preserve">
          <source>Flushes any pending requests using a single batch call to get the data.</source>
          <target state="translated">データを取得するために単一のバッチコールを使用して、保留中のリクエストをすべてフラッシュします。</target>
        </trans-unit>
        <trans-unit id="365d37d6a8009b43ecb3b2bea23e8aa64ba37c37" translate="yes" xml:space="preserve">
          <source>Focus the first field automatically</source>
          <target state="translated">最初のフィールドを自動的にフォーカス</target>
        </trans-unit>
        <trans-unit id="47d6cb9d2080261999b8a8c279bb2b6bc1fb4297" translate="yes" xml:space="preserve">
          <source>Follow the &lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html#buildinstall&quot;&gt;Watchman installation guide&lt;/a&gt; to compile and install Watchman from source.</source>
          <target state="translated">&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html#buildinstall&quot;&gt;Watchmanインストールガイド&lt;/a&gt;に従って、Watchmanをコンパイルしてソースからインストールします。</target>
        </trans-unit>
        <trans-unit id="48bd0dd3c47d94ca021bf17ca2fa1f79af0f2a17" translate="yes" xml:space="preserve">
          <source>Follow the &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;installation instructions for your Linux distribution&lt;/a&gt; to install Node 8 or newer.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;Linuxディストリビューションのインストール手順&lt;/a&gt;に従って、ノード8以降をインストールします。</target>
        </trans-unit>
        <trans-unit id="d1c111479cbdb486ebff5ec41aaaf20020311c37" translate="yes" xml:space="preserve">
          <source>Follow the instructions for building apps with native code from the &lt;a href=&quot;getting-started&quot;&gt;Getting Started guide&lt;/a&gt; to configure your development environment for building React Native apps for Android.</source>
          <target state="translated">&lt;a href=&quot;getting-started&quot;&gt;スタートガイドの&lt;/a&gt;ネイティブコードでアプリを構築するための手順に従って、Android用のReactネイティブアプリを構築するための開発環境を構成します。</target>
        </trans-unit>
        <trans-unit id="da751a3b3003a8dd0bd5a1479d34b7494542ccc9" translate="yes" xml:space="preserve">
          <source>Follow the instructions for building apps with native code from the &lt;a href=&quot;getting-started&quot;&gt;Getting Started guide&lt;/a&gt; to configure your development environment for building React Native apps for iOS.</source>
          <target state="translated">&lt;a href=&quot;getting-started&quot;&gt;スタートガイドの&lt;/a&gt;ネイティブコードを使用してアプリを構築する手順に従って、iOS用のReactネイティブアプリを構築するための開発環境を構成します。</target>
        </trans-unit>
        <trans-unit id="9b73913d9434a82f77eac1189975c0214443900a" translate="yes" xml:space="preserve">
          <source>Follow these instructions if you need to build native code in your project. For example, if you are integrating React Native into an existing application, or if you &quot;ejected&quot; from &lt;a href=&quot;index&quot;&gt;Create React Native App&lt;/a&gt;, you'll need this section.</source>
          <target state="translated">プロジェクトでネイティブコードをビルドする必要がある場合は、以下の手順に従ってください。たとえば、React Nativeを既存のアプリケーションに統合する場合、または&lt;a href=&quot;index&quot;&gt;Create React Native App&lt;/a&gt;から「削除」する場合は、このセクションが必要になります。</target>
        </trans-unit>
        <trans-unit id="83544f1d3d5e242f2e87b9a465821b38ae79072a" translate="yes" xml:space="preserve">
          <source>Follow this guide to enable Stetho for Debug mode:</source>
          <target state="translated">デバッグモードのStethoを有効にするには、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="6d54a5169e171ca1a7536cd79bff67adb95ec0bf" translate="yes" xml:space="preserve">
          <source>Following lines shows part of Android manifest file for registering broadcast receiver.</source>
          <target state="translated">以下の行は、ブロードキャスト受信機を登録するためのAndroidマニフェストファイルの一部を示しています。</target>
        </trans-unit>
        <trans-unit id="31386cd7f0a438d70e75734a4709efa8925abd36" translate="yes" xml:space="preserve">
          <source>Footer support.</source>
          <target state="translated">フッターサポート。</target>
        </trans-unit>
        <trans-unit id="065edf7ee2b0c3aa8fbce7531d990d9157c40da9" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;View&lt;/code&gt; responder props (e.g., &lt;code&gt;onResponderMove&lt;/code&gt;), the synthetic touch event passed to them are of the following form:</source>
          <target state="translated">以下のため &lt;code&gt;View&lt;/code&gt; 応答の小道具（例えば、 &lt;code&gt;onResponderMove&lt;/code&gt; ）、渡された合成タッチイベントには、次の形式です。</target>
        </trans-unit>
        <trans-unit id="955f4da86b399f65fb99c8345aea4f6f8130a673" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;stretch&lt;/code&gt; to have an effect, children must not have a fixed dimension along the secondary axis. In the following example, setting &lt;code&gt;alignItems: stretch&lt;/code&gt; does nothing until the &lt;code&gt;width: 50&lt;/code&gt; is removed from the children.</source>
          <target state="translated">以下のために &lt;code&gt;stretch&lt;/code&gt; 効果を持つために、子どもたちは二軸に沿って一定の大きさを持っていなければなりません。次の例では、 &lt;code&gt;alignItems: stretch&lt;/code&gt; 設定しても、 &lt;code&gt;width: 50&lt;/code&gt; が子から削除されるまで何も行われません。</target>
        </trans-unit>
        <trans-unit id="217080a5e94bc1f45db021ebb81c1196cb630815" translate="yes" xml:space="preserve">
          <source>For a complete intro to React Navigation, follow the &lt;a href=&quot;https://reactnavigation.org/docs/getting-started.html&quot;&gt;React Navigation Getting Started Guide&lt;/a&gt;, or browse other docs such as the &lt;a href=&quot;https://expo.io/@react-navigation/NavigationPlayground&quot;&gt;Intro to Navigators&lt;/a&gt;.</source>
          <target state="translated">React Navigationの完全な紹介については、&lt;a href=&quot;https://reactnavigation.org/docs/getting-started.html&quot;&gt;React Navigation Getting Started Guide&lt;/a&gt;に従うか、&lt;a href=&quot;https://expo.io/@react-navigation/NavigationPlayground&quot;&gt;Intro to Navigators&lt;/a&gt;などの他のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0dc21061dffdc859db6a7175186eed3bd4457308" translate="yes" xml:space="preserve">
          <source>For cases where using a component is not ideal, there is also an imperative API exposed as static functions on the component. It is however not recommended to use the static API and the component for the same prop because any value set by the static API will get overriden by the one set by the component in the next render.</source>
          <target state="translated">コンポーネントを使用することが理想的でない場合は、コンポーネント上の静的関数として公開されている必須APIもあります。しかし、同じプロップに静的 API とコンポーネントを使用することは推奨されません。 なぜなら、静的 API で設定された値は、次のレンダリングでコンポーネントで設定された値で上書きされてしまうからです。</target>
        </trans-unit>
        <trans-unit id="c1ffb78235cab4ee03e6620fc6b0ea89966c2032" translate="yes" xml:space="preserve">
          <source>For details of how this works under the hood, see &lt;a href=&quot;http://frescolib.org/docs/rounded-corners-and-circles.html&quot;&gt;http://frescolib.org/docs/rounded-corners-and-circles.html&lt;/a&gt;</source>
          <target state="translated">これが内部でどのように機能するかの詳細については、&lt;a href=&quot;http://frescolib.org/docs/rounded-corners-and-circles.html&quot;&gt;http：//frescolib.org/docs/rounded-corners-and-circles.htmlを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3511dbd17633b50b75d0a16a2bb19ce2228e85ff" translate="yes" xml:space="preserve">
          <source>For details of how this works under the hood, see &lt;a href=&quot;http://frescolib.org/rounded-corners-and-circles.md&quot;&gt;http://frescolib.org/rounded-corners-and-circles.md&lt;/a&gt;</source>
          <target state="translated">これが内部でどのように機能するかの詳細については、&lt;a href=&quot;http://frescolib.org/rounded-corners-and-circles.md&quot;&gt;http：//frescolib.org/rounded-corners-and-circles.mdを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3017ced938a16c607fba1f8c9b27dd76a529559" translate="yes" xml:space="preserve">
          <source>For example, a container view that fades in when it is mounted may look like this:</source>
          <target state="translated">例えば、コンテナビューがマウントされるとフェードインするコンテナビューは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="8464c3ae2eaa034c66a1b130ba7d50db596b38e6" translate="yes" xml:space="preserve">
          <source>For example, if a touchable view has a height of 20 the touchable height can be extended to 40 with &lt;code&gt;hitSlop={{top: 10, bottom: 10, left: 0, right: 0}}&lt;/code&gt;</source>
          <target state="translated">たとえば、 &lt;code&gt;hitSlop={{top: 10, bottom: 10, left: 0, right: 0}}&lt;/code&gt; 可能なビューの高さが20の場合、hitSlop = {{top：10、bottom：10、left：0、right：0}}でタッチ可能な高さを40に拡張できます。</target>
        </trans-unit>
        <trans-unit id="2fc772141f74b3004d0bee7d7ade15c50a157e5b" translate="yes" xml:space="preserve">
          <source>For example, if we want to create a 2-second long animation of an object that slightly backs up before moving to its final position:</source>
          <target state="translated">例えば、オブジェクトが最終位置に移動する前に少し後退する2秒の長さのアニメーションを作成したい場合。</target>
        </trans-unit>
        <trans-unit id="58ba168aac70dfd1cee7ea8b814f6f124ddce552" translate="yes" xml:space="preserve">
          <source>For example, in a window that contains sibling views &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, setting &lt;code&gt;accessibilityElementsHidden&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; on view &lt;code&gt;B&lt;/code&gt; causes VoiceOver to ignore the elements in the view &lt;code&gt;B&lt;/code&gt;. This is similar to the Android property &lt;code&gt;importantForAccessibility=&quot;no-hide-descendants&quot;&lt;/code&gt;.</source>
          <target state="translated">たとえば、兄弟のビュー &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; を含むウィンドウで、ビュー &lt;code&gt;B&lt;/code&gt; の &lt;code&gt;accessibilityElementsHidden&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、VoiceOverはビュー &lt;code&gt;B&lt;/code&gt; の要素を無視します。これは、Androidのプロパティ &lt;code&gt;importantForAccessibility=&quot;no-hide-descendants&quot;&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="d2cfe073ab4d3cea72124ca4269a1436425ad1df" translate="yes" xml:space="preserve">
          <source>For example, in a window that contains sibling views &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, setting &lt;code&gt;accessibilityViewIsModal&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; on view &lt;code&gt;B&lt;/code&gt; causes VoiceOver to ignore the elements in the view &lt;code&gt;A&lt;/code&gt;. On the other hand, if view &lt;code&gt;B&lt;/code&gt; contains a child view &lt;code&gt;C&lt;/code&gt; and you set &lt;code&gt;accessibilityViewIsModal&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; on view &lt;code&gt;C&lt;/code&gt;, VoiceOver does not ignore the elements in view &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">たとえば、兄弟ビュー &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; を含むウィンドウで、ビュー &lt;code&gt;B&lt;/code&gt; の &lt;code&gt;accessibilityViewIsModal&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、VoiceOverはビュー &lt;code&gt;A&lt;/code&gt; の要素を無視します。ビュー一方、 &lt;code&gt;B&lt;/code&gt; は、子ビュー含まれている &lt;code&gt;C&lt;/code&gt; を、あなたが設定 &lt;code&gt;accessibilityViewIsModal&lt;/code&gt; をする &lt;code&gt;true&lt;/code&gt; ビューの上に &lt;code&gt;C&lt;/code&gt; 、VoiceOverがビュー内の要素を無視しません &lt;code&gt;A&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8ea51c79878b6b81077d0d7c4096e8e1a53cf453" translate="yes" xml:space="preserve">
          <source>For example, let's say that as the user types, you're translating their words into a different language. In this new language, every single word is written the same way: 🍕. So the sentence &quot;Hello there Bob&quot; would be translated as &quot;🍕🍕🍕&quot;.</source>
          <target state="translated">例えば、ユーザーが入力した言葉を別の言語に翻訳しているとしましょう。この新しい言語では、すべての単語は同じように書かれています:🍕.ですから、&quot;Hello there Bob &quot;という文章は&quot;🍕🍕🍕&quot;と翻訳されます。</target>
        </trans-unit>
        <trans-unit id="aaa0191edd8fa387a71372b624c4c913aa56d559" translate="yes" xml:space="preserve">
          <source>For example, let's say we want to make text that blinks all the time. The text itself gets set once when the blinking component gets created, so the text itself is a &lt;code&gt;prop&lt;/code&gt;. The &quot;whether the text is currently on or off&quot; changes over time, so that should be kept in &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">たとえば、常に点滅するテキストを作成するとします。点滅するコンポーネントが作成されると、テキスト自体が一度設定されるため、テキスト自体は &lt;code&gt;prop&lt;/code&gt; です。「テキストが現在オンかオフか」は時間とともに変化するため、 &lt;code&gt;state&lt;/code&gt; 維持する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8b86ba05999c9fadf31952cc2641e7bb0e7b826" translate="yes" xml:space="preserve">
          <source>For example, one basic React Native component is the &lt;code&gt;Image&lt;/code&gt;. When you create an image, you can use a prop named &lt;code&gt;source&lt;/code&gt; to control what image it shows.</source>
          <target state="translated">たとえば、1つの基本的なReact Nativeコンポーネントは &lt;code&gt;Image&lt;/code&gt; です。画像を作成するときは、 &lt;code&gt;source&lt;/code&gt; という名前のプロップを使用して、表示する画像を制御できます。</target>
        </trans-unit>
        <trans-unit id="3f3436e51ace44d57b910e0fb6474b14008e53f6" translate="yes" xml:space="preserve">
          <source>For example, say you have the following files in your project:</source>
          <target state="translated">例えば、あなたのプロジェクトに以下のファイルがあるとします。</target>
        </trans-unit>
        <trans-unit id="782d67e85cbce19da30a2759f4842f650cdfd065" translate="yes" xml:space="preserve">
          <source>For example, the following animation coasts to a stop, then it springs back while twirling in parallel:</source>
          <target state="translated">例えば、次のようなアニメーションは、横滑りして停止した後、平行に回転しながらバネで戻ってきます。</target>
        </trans-unit>
        <trans-unit id="fc246f9e47c7aadae0b44a10f926ef14b5b6ec43" translate="yes" xml:space="preserve">
          <source>For example, the result of &lt;code&gt;require('./my-icon.png')&lt;/code&gt; might be:</source>
          <target state="translated">たとえば、 &lt;code&gt;require('./my-icon.png')&lt;/code&gt; の結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b1d93867a5cb4dbeb6c4f11917c58675d2ef4841" translate="yes" xml:space="preserve">
          <source>For example, when working with horizontal scrolling gestures, you would do the following in order to map &lt;code&gt;event.nativeEvent.contentOffset.x&lt;/code&gt; to &lt;code&gt;scrollX&lt;/code&gt; (an &lt;code&gt;Animated.Value&lt;/code&gt;):</source>
          <target state="translated">たとえば、水平スクロールジェスチャーを使用する場合、 &lt;code&gt;event.nativeEvent.contentOffset.x&lt;/code&gt; を &lt;code&gt;scrollX&lt;/code&gt; （ &lt;code&gt;Animated.Value&lt;/code&gt; ）にマップするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="2dcb624b849e2a53ae40c3bf916aef449fd65257" translate="yes" xml:space="preserve">
          <source>For example, you may want to think about your &lt;code&gt;Animated.Value&lt;/code&gt; as going from 0 to 1, but animate the position from 150px to 0px and the opacity from 0 to 1. This can easily be done by modifying &lt;code&gt;style&lt;/code&gt; from the example above like so:</source>
          <target state="translated">たとえば、 &lt;code&gt;Animated.Value&lt;/code&gt; を0から1に移動すると考えて、位置を150pxから0pxに、不透明度を0から1にアニメーション化したい場合があります。これは、上記の例のように &lt;code&gt;style&lt;/code&gt; を変更することで簡単に行えます。：</target>
        </trans-unit>
        <trans-unit id="6af7133697b9647fd8baba49238afbbb6689b885" translate="yes" xml:space="preserve">
          <source>For higher-level gesture interpretation, check out &lt;a href=&quot;panresponder&quot;&gt;PanResponder&lt;/a&gt;.</source>
          <target state="translated">より高いレベルのジェスチャー解釈については、&lt;a href=&quot;panresponder&quot;&gt;PanResponderを&lt;/a&gt;チェックしてください。</target>
        </trans-unit>
        <trans-unit id="3392e60cbfec71464bba2e148ee0854d35689f29" translate="yes" xml:space="preserve">
          <source>For iOS 11+ you can set &lt;code&gt;textContentType&lt;/code&gt; to &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt; to enable autofill of login details from the device keychain.</source>
          <target state="translated">iOS 11以降では、 &lt;code&gt;textContentType&lt;/code&gt; を &lt;code&gt;username&lt;/code&gt; または &lt;code&gt;password&lt;/code&gt; に設定して、デバイスのキーチェーンからのログイン詳細の自動入力を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="b265ae462e01e4f2b00ea10e77e8c4274e5e4275" translate="yes" xml:space="preserve">
          <source>For iOS, Instruments is an invaluable tool, and on Android you should learn to use &lt;a href=&quot;performance#profiling-android-ui-performance-with-systrace&quot;&gt;&lt;code&gt;systrace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">iOSの場合、Instrumentsは非常に貴重なツールであり、Androidでは&lt;a href=&quot;performance#profiling-android-ui-performance-with-systrace&quot;&gt; &lt;code&gt;systrace&lt;/code&gt; の&lt;/a&gt;使用方法を学ぶ必要があります。</target>
        </trans-unit>
        <trans-unit id="76c5ba0dc7a063615d58ab41d2e5addbf4cb361c" translate="yes" xml:space="preserve">
          <source>For images in the Android assets folder, use the &lt;code&gt;asset:/&lt;/code&gt; scheme:</source>
          <target state="translated">Androidアセットフォルダー内の画像の場合は、 &lt;code&gt;asset:/&lt;/code&gt; スキームを使用します。</target>
        </trans-unit>
        <trans-unit id="1105afbe4f32cbef79b891b29b2d3f98c6ee1ace" translate="yes" xml:space="preserve">
          <source>For images included via Xcode asset catalogs or in the Android drawable folder, use the image name without the extension:</source>
          <target state="translated">XcodeのアセットカタログやAndroid drawableフォルダに含まれる画像には、拡張子を付けずに画像名を使用してください。</target>
        </trans-unit>
        <trans-unit id="3481b7018b5f631814bd73d84a0ab5f19c577d8b" translate="yes" xml:space="preserve">
          <source>For information on how to build the React Native project locally with your changes, make sure to read through the &lt;a href=&quot;building-from-source&quot;&gt;Building React Native from source guide&lt;/a&gt;.</source>
          <target state="translated">React Nativeプロジェクトを変更を加えてローカルでビルドする方法については、&lt;a href=&quot;building-from-source&quot;&gt;Building React Native from source guide&lt;/a&gt;を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="b6dc1185685cbb5feb7fc4a0c15297b8ffd2ab69" translate="yes" xml:space="preserve">
          <source>For instance, to make an RN app 200 (logical) pixels high, and the hosting view's width wide, we could do:</source>
          <target state="translated">例えば、RNアプリを200(論理)ピクセルの高さにして、ホスティングビューの幅を広くするには</target>
        </trans-unit>
        <trans-unit id="c4b36ac3d58a12b76886693c01c0868f1abcf0c0" translate="yes" xml:space="preserve">
          <source>For instructions on how to add support for deep linking on Android, refer to &lt;a href=&quot;http://developer.android.com/training/app-indexing/deep-linking.html#adding-filters&quot;&gt;Enabling Deep Links for App Content - Add Intent Filters for Your Deep Links&lt;/a&gt;.</source>
          <target state="translated">Androidで&lt;a href=&quot;http://developer.android.com/training/app-indexing/deep-linking.html#adding-filters&quot;&gt;ディープリンクの&lt;/a&gt;サポートを追加する方法については、「アプリコンテンツのディープリンクを有効にする-ディープリンクのインテントフィルターを追加する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="be769a462cf3d46d323ad6edb74f1888a9b843cd" translate="yes" xml:space="preserve">
          <source>For more examples of sending events to JavaScript, see &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Geolocation/RCTLocationObserver.m&quot;&gt;&lt;code&gt;RCTLocationObserver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">イベントをJavaScriptに送信するその他の例については、&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Geolocation/RCTLocationObserver.m&quot;&gt; &lt;code&gt;RCTLocationObserver&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d016bd1e1a5dad1a57cc0b25cadb6b5a8627f615" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html&quot;&gt;Apple's documentation&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html&quot;&gt;Appleのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0771a7336d4771b30c1e77a83acad44ff7eea638" translate="yes" xml:space="preserve">
          <source>For most React Native applications, your business logic will run on the JavaScript thread. This is where your React application lives, API calls are made, touch events are processed, etc... Updates to native-backed views are batched and sent over to the native side at the end of each iteration of the event loop, before the frame deadline (if all goes well). If the JavaScript thread is unresponsive for a frame, it will be considered a dropped frame. For example, if you were to call &lt;code&gt;this.setState&lt;/code&gt; on the root component of a complex application and it resulted in re-rendering computationally expensive component subtrees, it's conceivable that this might take 200ms and result in 12 frames being dropped. Any animations controlled by JavaScript would appear to freeze during that time. If anything takes longer than 100ms, the user will feel it.</source>
          <target state="translated">ほとんどのReact Nativeアプリケーションでは、ビジネスロジックはJavaScriptスレッドで実行されます。これは、Reactアプリケーションが存在する場所、API呼び出しが行われる場所、タッチイベントが処理される場所などです。ネイティブバッキングビューへの更新はバッチ処理され、イベントループの各反復の最後に、前にネイティブ側に送信されます。フレームの締め切り（すべてうまくいく場合）。 JavaScriptスレッドがフレームに対して応答しない場合、ドロップされたフレームと見なされます。たとえば、 &lt;code&gt;this.setState&lt;/code&gt; を呼び出すと複雑なアプリケーションのルートコンポーネントで計算コストの高いコンポーネントサブツリーが再レンダリングされる場合、これには200ミリ秒かかり、12フレームがドロップされる可能性があると考えられます。JavaScriptで制御されているアニメーションは、その間フリーズしているように見えます。何かが100msより長くかかる場合、ユーザーはそれを感じます。</target>
        </trans-unit>
        <trans-unit id="ada42e3353d4cb4add58738e41455a11812944b7" translate="yes" xml:space="preserve">
          <source>For most of the libs it will be as simple as dragging two files, sometimes a third step will be necessary, but no more than that.</source>
          <target state="translated">ほとんどのlibでは、2つのファイルをドラッグするのと同じくらい簡単で、時には3つ目のステップが必要になることもありますが、それ以上は必要ありません。</target>
        </trans-unit>
        <trans-unit id="c1a943910620b2121440b46a29dce10bc50c02fb" translate="yes" xml:space="preserve">
          <source>For simplicity, data is just a plain array. If you want to use something else, like an immutable list, use the underlying &lt;a href=&quot;virtualizedlist&quot;&gt;&lt;code&gt;VirtualizedList&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="translated">簡単にするために、データは単純な配列です。不変リストのような他のものを使用したい場合は、基になる&lt;a href=&quot;virtualizedlist&quot;&gt; &lt;code&gt;VirtualizedList&lt;/code&gt; を&lt;/a&gt;直接使用してください。</target>
        </trans-unit>
        <trans-unit id="6ff4e74deefbeebcdd9ff2505666045ca1f3fb5f" translate="yes" xml:space="preserve">
          <source>For this example we are going to walk through the implementation requirements to allow the use of ImageViews in JavaScript.</source>
          <target state="translated">この例では、JavaScriptでImageViewsを使用できるようにするための実装要件を説明します。</target>
        </trans-unit>
        <trans-unit id="7ec416c4eff0fa744a167548667ff78f25142956" translate="yes" xml:space="preserve">
          <source>For those of you new to Swift and Objective-C, whenever you &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot;&gt;mix the two languages in an iOS project&lt;/a&gt;, you will also need an additional bridging file, known as a bridging header, to expose the Objective-C files to Swift. Xcode will offer to create this header file for you if you add your Swift file to your app through the Xcode &lt;code&gt;File&amp;gt;New File&lt;/code&gt; menu option. You will need to import &lt;code&gt;RCTBridgeModule.h&lt;/code&gt; in this header file.</source>
          <target state="translated">SwiftとObjective-Cを&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot;&gt;初めて使用する場合、iOSプロジェクト&lt;/a&gt;で2つの言語を混在させる場合は常に、Objective-CファイルをSwiftに公開するために、ブリッジングヘッダーと呼ばれる追加のブリッジングファイルも必要になります。Xcodeの &lt;code&gt;File&amp;gt;New File&lt;/code&gt; ] &amp;gt; [新しいファイル ]メニューオプションを使用してアプリにSwiftファイルを追加すると、Xcodeはこのヘッダーファイルの作成を提案します。このヘッダーファイルに &lt;code&gt;RCTBridgeModule.h&lt;/code&gt; をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="fc7eef2217e1465637550956b220d5e69523aaf1" translate="yes" xml:space="preserve">
          <source>For web URLs, the protocol (&quot;http://&quot;, &quot;https://&quot;) must be set accordingly!</source>
          <target state="translated">ウェブURLの場合は、プロトコル(&quot;http://&quot;,&quot;https://&quot;)を適宜設定する必要があります!</target>
        </trans-unit>
        <trans-unit id="8414e0b43fad0da17998077d81c5569c98b2a8ae" translate="yes" xml:space="preserve">
          <source>Fork &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;the repository&lt;/a&gt; and create your branch from &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;リポジトリ&lt;/a&gt;をフォークし、 &lt;code&gt;master&lt;/code&gt; からブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="b55d66f5b5ca16e818c976cff8cfb3ed5e38801a" translate="yes" xml:space="preserve">
          <source>Forward setNativeProps to a child</source>
          <target state="translated">setNativePropsを子に転送する</target>
        </trans-unit>
        <trans-unit id="21a9553b1661589687053f55eaf5dac8d27d436a" translate="yes" xml:space="preserve">
          <source>From the Welcome screen of Android Studio choose &quot;Import project&quot; and select the &lt;code&gt;android&lt;/code&gt; folder of your app.</source>
          <target state="translated">Android Studioのウェルカム画面から「プロジェクトのインポート」を選択し、アプリの &lt;code&gt;android&lt;/code&gt; フォルダーを選択します。</target>
        </trans-unit>
        <trans-unit id="7bda1fe547f8b14e4f7b191cbe3c2290730b384c" translate="yes" xml:space="preserve">
          <source>From the above line, you want to grab the first four digits from the device ID:</source>
          <target state="translated">上の行から、デバイスIDの最初の4桁を取得したいと思います。</target>
        </trans-unit>
        <trans-unit id="3a46977d8f6b69085f0a8234aeabcd0813c2eed7" translate="yes" xml:space="preserve">
          <source>Fully cross-platform.</source>
          <target state="translated">完全にクロスプラットフォーム。</target>
        </trans-unit>
        <trans-unit id="1d14382ed643abb2d94a648fe01c13bda5709132" translate="yes" xml:space="preserve">
          <source>Function called when the drawer state has changed. The drawer can be in 3 states:</source>
          <target state="translated">ドロワーの状態が変化したときに呼び出される関数です。ドロワーの状態は3つあります。</target>
        </trans-unit>
        <trans-unit id="089dc6630b3da523813fd1783668fd7b8d40cf0d" translate="yes" xml:space="preserve">
          <source>Function called when the page scrolling state has changed. The page scrolling state can be in 3 states:</source>
          <target state="translated">ページスクロールの状態が変化したときに呼び出される関数です。ページスクロールの状態は3つの状態があります。</target>
        </trans-unit>
        <trans-unit id="707c15436797b45b12163fa480b1831d4c74ee81" translate="yes" xml:space="preserve">
          <source>Function called whenever the navigation view has been closed.</source>
          <target state="translated">ナビゲーションビューが閉じられたときに呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="e11e06d4629564851df83186dafd9f53f8288170" translate="yes" xml:space="preserve">
          <source>Function called whenever the navigation view has been opened.</source>
          <target state="translated">ナビゲーションビューが開かれたときに呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="98122b9c90c0a399817fdb6cb24587b0b156b6b0" translate="yes" xml:space="preserve">
          <source>Function called whenever there is an interaction with the navigation view.</source>
          <target state="translated">ナビゲーションビューとのインタラクションがあるときに呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="0ef9f50e0ef7640791cdaebc580e26cc9c0719eb" translate="yes" xml:space="preserve">
          <source>Function that accepts a string that will be passed to the WebView and executed immediately as JavaScript.</source>
          <target state="translated">WebViewに渡され、JavaScriptとして即座に実行される文字列を受け付ける関数です。</target>
        </trans-unit>
        <trans-unit id="5bb91b05f9a31565dbef5e74cefc687207ffd09b" translate="yes" xml:space="preserve">
          <source>Function that allows custom handling of any web view requests. Return &lt;code&gt;true&lt;/code&gt; from the function to continue loading the request and &lt;code&gt;false&lt;/code&gt; to stop loading.</source>
          <target state="translated">Webビュー要求のカスタム処理を可能にする関数。関数から &lt;code&gt;true&lt;/code&gt; を返すとリクエストの読み込みが続行され、 &lt;code&gt;false&lt;/code&gt; を返すと読み込みが中止されます。</target>
        </trans-unit>
        <trans-unit id="299664a4e3c23fb2599ca2321e40ea2cffc284e1" translate="yes" xml:space="preserve">
          <source>Function that is invoked when the &lt;code&gt;WebView&lt;/code&gt; has finished loading.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; の読み込みが完了したときに呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="a6f2429e8d0cee66207a629168b87ce7f08254e4" translate="yes" xml:space="preserve">
          <source>Function that is invoked when the &lt;code&gt;WebView&lt;/code&gt; load fails.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; のロードが失敗したときに呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="39bf9695243c9acbaad2462d0c62ca6d1c874d34" translate="yes" xml:space="preserve">
          <source>Function that is invoked when the &lt;code&gt;WebView&lt;/code&gt; load succeeds or fails.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; のロードが成功または失敗したときに呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="25c0f0214cdbc29e7311cbbdc4337879c530455d" translate="yes" xml:space="preserve">
          <source>Function that is invoked when the &lt;code&gt;WebView&lt;/code&gt; loading starts or ends.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; のロードが開始または終了したときに呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="ae4032ad4b39ae70c8664d0d27411ae1ad96d50a" translate="yes" xml:space="preserve">
          <source>Function that is invoked when the &lt;code&gt;WebView&lt;/code&gt; starts loading.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; がロードを開始するときに呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="99071765cb59c10d2d03445feac8547c877c681a" translate="yes" xml:space="preserve">
          <source>Function that returns a loading indicator. The startInLoadingState prop must be set to true in order to use this prop.</source>
          <target state="translated">ローディングインジケータを返す関数です。このプロップを使用するには、startInLoadingStateプロップをtrueに設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="8601030e428783f37cf6de2a2a0fb214cb2ef03b" translate="yes" xml:space="preserve">
          <source>Function that returns a view to show if there's an error.</source>
          <target state="translated">エラーが発生した場合に表示するビューを返す関数です。</target>
        </trans-unit>
        <trans-unit id="503b2478a1c2562d6f7e1dd9184490248e1c3684" translate="yes" xml:space="preserve">
          <source>Function that will be called an array of any key-specific errors found.</source>
          <target state="translated">見つかったキー固有のエラーの配列を呼び出す関数。</target>
        </trans-unit>
        <trans-unit id="426a25cd0cd671ff5ed6ee9825f0c26592de3df0" translate="yes" xml:space="preserve">
          <source>Function that will be called the keys found and any error.</source>
          <target state="translated">見つかったキーとエラーがあった場合に呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="133e3f0b570095e779187cd7013f0b01c227c840" translate="yes" xml:space="preserve">
          <source>Function that will be called with a key-value array of the results, plus an array of any key-specific errors found.</source>
          <target state="translated">結果のキー値の配列と、見つかったキー固有のエラーの配列で呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="fb4ab798ff50cad8ab9b2bad42d66e3ce0ca3f41" translate="yes" xml:space="preserve">
          <source>Function that will be called with a result if found or any error.</source>
          <target state="translated">見つかった場合やエラーが発生した場合に結果とともに呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="3bfe089325e6092f054e6ad083799fd6e50c7343" translate="yes" xml:space="preserve">
          <source>Function that will be called with an array of any key-specific errors found.</source>
          <target state="translated">見つかったキー固有のエラーの配列を指定して呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="9324920f05c900252788cb04adbeec45e32c69c7" translate="yes" xml:space="preserve">
          <source>Function that will be called with any error.</source>
          <target state="translated">エラーが発生した場合に呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="ff1a2fdd0a089c50bcc53e18ccc884a7454ebea5" translate="yes" xml:space="preserve">
          <source>Function which receive an array of delivered notifications.</source>
          <target state="translated">配信された通知の配列を受信する関数です。</target>
        </trans-unit>
        <trans-unit id="176c5ac2ee182667f154b4235ca1dcdc8d72c232" translate="yes" xml:space="preserve">
          <source>GIF and WebP support on Android</source>
          <target state="translated">AndroidでのGIFとWebPのサポート</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="3cc0e2bc875e05a8d59f11e3aeeedd23794271f9" translate="yes" xml:space="preserve">
          <source>Generally, you can use &lt;a href=&quot;touchablehighlight&quot;&gt;&lt;strong&gt;TouchableHighlight&lt;/strong&gt;&lt;/a&gt; anywhere you would use a button or link on web. The view's background will be darkened when the user presses down on the button.</source>
          <target state="translated">通常、&lt;a href=&quot;touchablehighlight&quot;&gt;&lt;strong&gt;TouchableHighlightは&lt;/strong&gt;&lt;/a&gt;、Web上のボタンやリンクを使用する場所ならどこでも使用できます。ユーザーがボタンを押すと、ビューの背景が暗くなります。</target>
        </trans-unit>
        <trans-unit id="25507da2e3841aa714095e4779611b29e22eeca9" translate="yes" xml:space="preserve">
          <source>Generating Signed APK</source>
          <target state="translated">署名付きAPKの生成</target>
        </trans-unit>
        <trans-unit id="36225949cb5474024f61ea5770e0b0b72123afd0" translate="yes" xml:space="preserve">
          <source>Generating a signing key</source>
          <target state="translated">署名鍵の生成</target>
        </trans-unit>
        <trans-unit id="250d8dacb7906de234e553854cdd64d292462d95" translate="yes" xml:space="preserve">
          <source>Generating the release APK</source>
          <target state="translated">リリースAPKの生成</target>
        </trans-unit>
        <trans-unit id="2ee8f734456eeec6f1528c29e7b9dd676c82ba5c" translate="yes" xml:space="preserve">
          <source>Geolocation</source>
          <target state="translated">Geolocation</target>
        </trans-unit>
        <trans-unit id="d98bf6af9094f6832331f2596ee633e73f9cfdd6" translate="yes" xml:space="preserve">
          <source>Geolocation.clearWatch()</source>
          <target state="translated">Geolocation.clearWatch()</target>
        </trans-unit>
        <trans-unit id="f445cc30dadbc29cd71c97e635d451a9e58b38b9" translate="yes" xml:space="preserve">
          <source>Geolocation.getCurrentPosition()</source>
          <target state="translated">Geolocation.getCurrentPosition()</target>
        </trans-unit>
        <trans-unit id="b276c17aa4f36ae99597c5edc34be0b616542bcb" translate="yes" xml:space="preserve">
          <source>Geolocation.requestAuthorization()</source>
          <target state="translated">Geolocation.requestAuthorization()</target>
        </trans-unit>
        <trans-unit id="f58135ae2c15fc1b6f925144ccad50a71accdf46" translate="yes" xml:space="preserve">
          <source>Geolocation.setRNConfiguration()</source>
          <target state="translated">Geolocation.setRNConfiguration()</target>
        </trans-unit>
        <trans-unit id="9313dabf124dde649f8070abcd0491c5facfbf4f" translate="yes" xml:space="preserve">
          <source>Geolocation.stopObserving()</source>
          <target state="translated">Geolocation.stopObserving()</target>
        </trans-unit>
        <trans-unit id="682bf951f1bdff3d975fa515be358d3cd3b088e8" translate="yes" xml:space="preserve">
          <source>Geolocation.watchPosition()</source>
          <target state="translated">Geolocation.watchPosition()</target>
        </trans-unit>
        <trans-unit id="f0208fd79dfcd41317b2125e6c7707915772fad5" translate="yes" xml:space="preserve">
          <source>Gesture Responder System</source>
          <target state="translated">ジェスチャーレスポンダシステム</target>
        </trans-unit>
        <trans-unit id="eab7158c5c5628ad19f3270a81633df7a1f28e20" translate="yes" xml:space="preserve">
          <source>Gestures, like panning or scrolling, and other events can map directly to animated values using &lt;a href=&quot;animated#event&quot;&gt;&lt;code&gt;Animated.event&lt;/code&gt;&lt;/a&gt;. This is done with a structured map syntax so that values can be extracted from complex event objects. The first level is an array to allow mapping across multiple args, and that array contains nested objects.</source>
          <target state="translated">パンやスクロールなどのジェスチャーやその他のイベントは、&lt;a href=&quot;animated#event&quot;&gt; &lt;code&gt;Animated.event&lt;/code&gt; &lt;/a&gt;を使用してアニメーション値に直接マッピングできます。これは構造化されたマップ構文で行われるため、複雑なイベントオブジェクトから値を抽出できます。最初のレベルは、複数の引数間でのマッピングを可能にする配列であり、その配列にはネストされたオブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="d8625ab78b0de42bd010659e522bf1c4b8535bf3" translate="yes" xml:space="preserve">
          <source>Gestures, like panning or scrolling, and other events can map directly to animated values using &lt;code&gt;Animated.event()&lt;/code&gt;. This is done with a structured map syntax so that values can be extracted from complex event objects. The first level is an array to allow mapping across multiple args, and that array contains nested objects.</source>
          <target state="translated">パンやスクロールなどのジェスチャーやその他のイベントは、 &lt;code&gt;Animated.event()&lt;/code&gt; を使用してアニメーション値に直接マップできます。これは構造化されたマップ構文で行われるため、複雑なイベントオブジェクトから値を抽出できます。最初のレベルは、複数の引数間でのマッピングを可能にする配列であり、その配列にはネストされたオブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="b7c2f6621bd073ef00d0f4742159fe62373a249d" translate="yes" xml:space="preserve">
          <source>Get content of string type, this method returns a &lt;code&gt;Promise&lt;/code&gt;, so you can use following code to get clipboard content</source>
          <target state="translated">文字列型のコンテンツを取得します。このメソッドは &lt;code&gt;Promise&lt;/code&gt; を返すため、次のコードを使用してクリップボードのコンテンツを取得できます</target>
        </trans-unit>
        <trans-unit id="9f348749c4acee27668c43a17377d1de6118c2ea" translate="yes" xml:space="preserve">
          <source>Get involved</source>
          <target state="translated">参加する</target>
        </trans-unit>
        <trans-unit id="9fe13a7dd7c6a01a88c8276a66775e1dca00bead" translate="yes" xml:space="preserve">
          <source>Gets &lt;em&gt;all&lt;/em&gt; keys known to your app; for all callers, libraries, etc. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">アプリに既知の&lt;em&gt;すべての&lt;/em&gt;キーを取得&lt;em&gt;し&lt;/em&gt;ます。すべての呼び出し元、ライブラリなど &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="bc095c4df2b5d97d059e98f405fffa7e80d132f9" translate="yes" xml:space="preserve">
          <source>Gets the badge count number from the &lt;code&gt;aps&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;aps&lt;/code&gt; オブジェクトからバッジカウント数を取得します</target>
        </trans-unit>
        <trans-unit id="02218c26bb68f240f2e26e3f8271cfbe61a6a2b6" translate="yes" xml:space="preserve">
          <source>Gets the category string from the &lt;code&gt;aps&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;aps&lt;/code&gt; オブジェクトからカテゴリ文字列を取得します</target>
        </trans-unit>
        <trans-unit id="a444e7a56c05746cc04a7fdde44727743f8834eb" translate="yes" xml:space="preserve">
          <source>Gets the content-available number from the &lt;code&gt;aps&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;aps&lt;/code&gt; オブジェクトからコンテンツ利用可能数を取得します</target>
        </trans-unit>
        <trans-unit id="0c5cecadbb6f938ce8d2bde1ed1ca0045b7197ac" translate="yes" xml:space="preserve">
          <source>Gets the current badge number for the app icon on the home screen</source>
          <target state="translated">ホーム画面上のアプリアイコンの現在のバッジ番号を取得します。</target>
        </trans-unit>
        <trans-unit id="47ec24b8ba205824c88f3336e3f2842874333545" translate="yes" xml:space="preserve">
          <source>Gets the data object on the notif</source>
          <target state="translated">NOTIF上のデータオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="c5275a7102eed64ff927bc402739aaf6f6efe9fe" translate="yes" xml:space="preserve">
          <source>Gets the data required to render the row.</source>
          <target state="translated">行のレンダリングに必要なデータを取得します。</target>
        </trans-unit>
        <trans-unit id="f398e5fef7e878afb62af7f43bacabb6f3f6340b" translate="yes" xml:space="preserve">
          <source>Gets the data required to render the section header</source>
          <target state="translated">セクションヘッダのレンダリングに必要なデータを取得します。</target>
        </trans-unit>
        <trans-unit id="f7e21e5021de7ed960bd0c2f346941663a58cf84" translate="yes" xml:space="preserve">
          <source>Gets the local notifications that are currently scheduled.</source>
          <target state="translated">現在スケジュールされているローカル通知を取得します。</target>
        </trans-unit>
        <trans-unit id="70acf31423894581d858855741cc30789f208e19" translate="yes" xml:space="preserve">
          <source>Gets the notification's main message from the &lt;code&gt;aps&lt;/code&gt; object</source>
          <target state="translated">通知のメインメッセージを &lt;code&gt;aps&lt;/code&gt; オブジェクトから取得します</target>
        </trans-unit>
        <trans-unit id="e50379e9f2ce75317e495a6580251641ac9b3792" translate="yes" xml:space="preserve">
          <source>Gets the rowID at index provided if the dataSource arrays were flattened, or null of out of range indexes.</source>
          <target state="translated">dataSource配列が平坦化された場合に指定されたインデックスの行IDを取得します。</target>
        </trans-unit>
        <trans-unit id="5df6642372a0732c901702f9131e5ed5b28b57c2" translate="yes" xml:space="preserve">
          <source>Gets the sectionID at index provided if the dataSource arrays were flattened, or null for out of range indexes.</source>
          <target state="translated">dataSource配列が平坦化されている場合は指定されたインデックスのセクションIDを、範囲外のインデックスの場合はNULLを取得します。</target>
        </trans-unit>
        <trans-unit id="aee3fae3cea9676954ed0d3a92efa5e7b6df202b" translate="yes" xml:space="preserve">
          <source>Gets the sound string from the &lt;code&gt;aps&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;aps&lt;/code&gt; オブジェクトからサウンド文字列を取得します</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="70601251f0dfe99c947741950cbc736ef17852bf" translate="yes" xml:space="preserve">
          <source>Getting activity result from &lt;code&gt;startActivityForResult&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;startActivityForResult&lt;/code&gt; からのアクティビティ結果の取得</target>
        </trans-unit>
        <trans-unit id="1124320d65c4464fe2fb5af8aa848dbb8a3b068d" translate="yes" xml:space="preserve">
          <source>Give the keyboard and the system information about the expected semantic meaning for the content that users enter.</source>
          <target state="translated">ユーザーが入力したコンテンツに期待される意味的な意味についての情報をキーボードとシステムに与える。</target>
        </trans-unit>
        <trans-unit id="77c7f81316062de9bdce891626fd9b07ece11a3a" translate="yes" xml:space="preserve">
          <source>Go ahead and play around with the &lt;code&gt;Button&lt;/code&gt; component using the example below. You can select which platform your app is previewed in by clicking on the toggle in the bottom right, then click on &quot;Tap to Play&quot; to preview the app.</source>
          <target state="translated">以下の例を使用して、 &lt;code&gt;Button&lt;/code&gt; コンポーネントをいじってください。右下のトグルをクリックしてアプリをプレビューするプラットフォームを選択し、[タップして再生]をクリックしてアプリをプレビューできます。</target>
        </trans-unit>
        <trans-unit id="135aa88458df6969b99a88a406fded7877850449" translate="yes" xml:space="preserve">
          <source>Go back N scenes at once. When N=1, behavior matches &lt;code&gt;pop()&lt;/code&gt;.</source>
          <target state="translated">一度にNシーン戻ります。N = 1の場合、動作は &lt;code&gt;pop()&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="f691264791c7b9e18fba79020b4cc117af140931" translate="yes" xml:space="preserve">
          <source>Go back one page in the web view's history.</source>
          <target state="translated">ウェブビューの履歴を1ページ遡る。</target>
        </trans-unit>
        <trans-unit id="e728f0bbcf7851be441eb1f63a3a8bd6b4641a45" translate="yes" xml:space="preserve">
          <source>Go back to the &lt;strong&gt;Developer menu&lt;/strong&gt; and select &lt;strong&gt;Reload JS&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;開発]メニューに&lt;/strong&gt;戻り、[ &lt;strong&gt;JSの再読み込み&lt;/strong&gt;&lt;strong&gt;]&lt;/strong&gt;を選択します。</target>
        </trans-unit>
        <trans-unit id="4158de443f7a7986f829b8bbce4f7d7127f2673d" translate="yes" xml:space="preserve">
          <source>Go back to the item for a particular route object.</source>
          <target state="translated">特定のルートオブジェクトの項目に戻ります。</target>
        </trans-unit>
        <trans-unit id="8eac02273175491d2128459303920ef4048b44d3" translate="yes" xml:space="preserve">
          <source>Go back to the topmost item in the navigation stack.</source>
          <target state="translated">ナビゲーションスタックの一番上の項目に戻ります。</target>
        </trans-unit>
        <trans-unit id="b45ffc74f2d1d324848046d0816245c74a36f24d" translate="yes" xml:space="preserve">
          <source>Go forward one page in the web view's history.</source>
          <target state="translated">ウェブビューの履歴を1ページ進めます。</target>
        </trans-unit>
        <trans-unit id="3bf32b8cc186744349d58a9882f620b5d7cfaee7" translate="yes" xml:space="preserve">
          <source>Go to &lt;strong&gt;Dev Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Debug server host for device&lt;/strong&gt;.</source>
          <target state="translated">行く&lt;strong&gt;のDev設定&lt;/strong&gt; &amp;rarr; &lt;strong&gt;デバイスのデバッグ・サーバーのホスト&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d34bad1ef5955b5510603bc6d6cc476d75a64d28" translate="yes" xml:space="preserve">
          <source>Go to the &lt;code&gt;android/app/src/&lt;/code&gt; directory. Create a new directory inside this directory, called &lt;code&gt;release&lt;/code&gt;. (path: &lt;code&gt;android/app/src/release/&lt;/code&gt;)</source>
          <target state="translated">行く &lt;code&gt;android/app/src/&lt;/code&gt; ディレクトリ。このディレクトリ内に &lt;code&gt;release&lt;/code&gt; という名前の新しいディレクトリを作成します。（パス： &lt;code&gt;android/app/src/release/&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="15459de3f0ddb344ad669d7d9d130cb6b3cd7325" translate="yes" xml:space="preserve">
          <source>Go to the root directory for your project and create a new &lt;code&gt;package.json&lt;/code&gt; file with the following contents:</source>
          <target state="translated">プロジェクトのルートディレクトリに移動し、次の内容で新しい &lt;code&gt;package.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="865f2faf843a3c21fafd98d4f7c857001b538409" translate="yes" xml:space="preserve">
          <source>Going Deeper</source>
          <target state="translated">もっと深くへ</target>
        </trans-unit>
        <trans-unit id="550649dc93b16f95ca88dee1e31946d4b1e73b9c" translate="yes" xml:space="preserve">
          <source>Good point. To make components do more interesting things, you need to &lt;a href=&quot;props&quot;&gt;learn about Props&lt;/a&gt;.</source>
          <target state="translated">いい視点ね。コンポーネントにもっと面白いことをさ&lt;a href=&quot;props&quot;&gt;せるには、小道具について学ぶ&lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="5af4fe2c0a54d67b6d804d43f204c209174874e9" translate="yes" xml:space="preserve">
          <source>Gradle build fails in &lt;code&gt;ndk-build&lt;/code&gt;. See the section about &lt;code&gt;local.properties&lt;/code&gt; file above.</source>
          <target state="translated">Gradleビルドが &lt;code&gt;ndk-build&lt;/code&gt; buildで失敗します。上記の &lt;code&gt;local.properties&lt;/code&gt; ファイルに関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f52338c59e5631f533233db3ab655b1a362f5ae1" translate="yes" xml:space="preserve">
          <source>Gradle's &lt;code&gt;assembleRelease&lt;/code&gt; will bundle all the JavaScript needed to run your app into the APK. If you need to change the way the JavaScript bundle and/or drawable resources are bundled (e.g. if you changed the default file/folder names or the general structure of the project), have a look at &lt;code&gt;android/app/build.gradle&lt;/code&gt; to see how you can update it to reflect these changes.</source>
          <target state="translated">Gradleの &lt;code&gt;assembleRelease&lt;/code&gt; は、アプリを実行するために必要なすべてのJavaScriptをAPKにバンドルします。JavaScriptバンドルやドローアブルリソースのバンドル方法を変更する必要がある場合（たとえば、デフォルトのファイル/フォルダー名またはプロジェクトの一般的な構造を変更した場合）は、 &lt;code&gt;android/app/build.gradle&lt;/code&gt; を見てください。これらの変更を反映するために更新する方法。</target>
        </trans-unit>
        <trans-unit id="5c272417b7db8c23f4414a469d289bb05829eea3" translate="yes" xml:space="preserve">
          <source>Guaranteed to return an integer number.</source>
          <target state="translated">整数を返すことを保証します。</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">ガイド</target>
        </trans-unit>
        <trans-unit id="c662cdcc8bc1e6111cb3f8a588a57bfe32b810d8" translate="yes" xml:space="preserve">
          <source>Guides (Android)</source>
          <target state="translated">ガイド (Android)</target>
        </trans-unit>
        <trans-unit id="92e43918ad8214972cf0cfffd072c843f84a2304" translate="yes" xml:space="preserve">
          <source>Guides (iOS)</source>
          <target state="translated">ガイド (iOS)</target>
        </trans-unit>
        <trans-unit id="54cb1f0e43db81ea3bbc6a8c290885b04476f0f8" translate="yes" xml:space="preserve">
          <source>Handle push notifications for your app, including permission handling and icon badge number.</source>
          <target state="translated">アプリのプッシュ通知の処理(パーミッションの処理やアイコンバッジ番号など)。</target>
        </trans-unit>
        <trans-unit id="79e330a3fd95b126ac8440419a7a14c7e378bb38" translate="yes" xml:space="preserve">
          <source>Handler function is passed the content width and content height as parameters: &lt;code&gt;(contentWidth, contentHeight)&lt;/code&gt;</source>
          <target state="translated">ハンドラー関数には、パラメーターとしてコンテンツの幅とコンテンツの高さが渡されます： &lt;code&gt;(contentWidth, contentHeight)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ffbb3ec8d0fe2ca7761b7c0f489cdab34fa340e1" translate="yes" xml:space="preserve">
          <source>Handler to be called when the user taps the button</source>
          <target state="translated">ユーザーがボタンをタップしたときに呼び出されるハンドラ</target>
        </trans-unit>
        <trans-unit id="81c06bcc5db9bd50782915982da40843afcb564d" translate="yes" xml:space="preserve">
          <source>Handling Issues</source>
          <target state="translated">問題の処理</target>
        </trans-unit>
        <trans-unit id="bd48edb1435162dc827bd5d51c66753b9795d23f" translate="yes" xml:space="preserve">
          <source>Handling Navigation</source>
          <target state="translated">ナビゲーションの取り扱い</target>
        </trans-unit>
        <trans-unit id="52276e6f725cce763850595f2bb090995da441f0" translate="yes" xml:space="preserve">
          <source>Handling Text Input</source>
          <target state="translated">テキスト入力の処理</target>
        </trans-unit>
        <trans-unit id="d2a741f8f0b64513ac07dbaa127945614d3b7ace" translate="yes" xml:space="preserve">
          <source>Handling Touches</source>
          <target state="translated">ハンドリングタッチ</target>
        </trans-unit>
        <trans-unit id="56cabfd2d8bbae444eee3019aea33ff1cfd66583" translate="yes" xml:space="preserve">
          <source>Handling deep links</source>
          <target state="translated">ディープリンクの取り扱い</target>
        </trans-unit>
        <trans-unit id="d5f776e023f5b5d4180f8d46b42156c117e20a49" translate="yes" xml:space="preserve">
          <source>Handling gestures and other events</source>
          <target state="translated">ジェスチャーなどの処理</target>
        </trans-unit>
        <trans-unit id="5ae1d13b8383547b3294c62b46e1e10399bd0095" translate="yes" xml:space="preserve">
          <source>Handling pull requests</source>
          <target state="translated">プルリクエストの処理</target>
        </trans-unit>
        <trans-unit id="d0291e226f2fc8867ad6e7d9dd86d7a204320974" translate="yes" xml:space="preserve">
          <source>Handling the response</source>
          <target state="translated">レスポンスの処理</target>
        </trans-unit>
        <trans-unit id="8d4d60cf3464f232bfd0fcd94bb1703d9da19d91" translate="yes" xml:space="preserve">
          <source>Header support.</source>
          <target state="translated">ヘッダーをサポートしています。</target>
        </trans-unit>
        <trans-unit id="84fe3202f0491812a305508b18a00686e3d86a41" translate="yes" xml:space="preserve">
          <source>Headless JS</source>
          <target state="translated">ヘッドレスJS</target>
        </trans-unit>
        <trans-unit id="c4eb4dea9990971c4ad8a2eac2186097afb7eb8a" translate="yes" xml:space="preserve">
          <source>Headless JS is a way to run tasks in JavaScript while your app is in the background. It can be used, for example, to sync fresh data, handle push notifications, or play music.</source>
          <target state="translated">ヘッドレス JS は、アプリがバックグラウンドにある間に JavaScript でタスクを実行する方法です。例えば、新鮮なデータを同期したり、プッシュ通知を処理したり、音楽を再生したりすることができます。</target>
        </trans-unit>
        <trans-unit id="e03b130bd2be2c0ab5510c7463c80de6a7f56cc0" translate="yes" xml:space="preserve">
          <source>Height and Width</source>
          <target state="translated">高さと幅</target>
        </trans-unit>
        <trans-unit id="0a4d55a8d778e5022fab701977c5d840bbc486d0" translate="yes" xml:space="preserve">
          <source>Hello World</source>
          <target state="translated">ハローワールド</target>
        </trans-unit>
        <trans-unit id="f200dfc083bb5c6a0280eab74cf62db66584f587" translate="yes" xml:space="preserve">
          <source>Helper for creating a config for &lt;code&gt;configureNext&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;configureNext&lt;/code&gt; の構成を作成するためのヘルパー。</target>
        </trans-unit>
        <trans-unit id="42f57c6a5f9df4449f018226a5c404b98c6f17ed" translate="yes" xml:space="preserve">
          <source>Here are some benefits that you get:</source>
          <target state="translated">貰える特典をご紹介します。</target>
        </trans-unit>
        <trans-unit id="07a107974666bfa36b3a0683f40e20c1978c9596" translate="yes" xml:space="preserve">
          <source>Here are the few steps to link your libraries that contain native code</source>
          <target state="translated">ここでは、ネイティブコードを含むライブラリをリンクするためのいくつかの手順を説明します。</target>
        </trans-unit>
        <trans-unit id="da2e7d6d4a37eb2a33223886905395607ce86d16" translate="yes" xml:space="preserve">
          <source>Here is the &lt;em&gt;React Native&lt;/em&gt; high score screen:</source>
          <target state="translated">これは、&lt;em&gt;React Native&lt;/em&gt;ハイスコ​​ア画面です。</target>
        </trans-unit>
        <trans-unit id="ff85603b57cc09b0ab2ba0a624d612acfc30c0cb" translate="yes" xml:space="preserve">
          <source>Here is the &lt;em&gt;native&lt;/em&gt; application home screen:</source>
          <target state="translated">これが&lt;em&gt;ネイティブ&lt;/em&gt;アプリケーションのホーム画面です。</target>
        </trans-unit>
        <trans-unit id="6476219aeb835aa0378c98dce8f4f17d4c9f13b3" translate="yes" xml:space="preserve">
          <source>Here you can see that the shape of the region is explicit in the JS documentation - ideally we could codegen some of this stuff, but that's not happening yet.</source>
          <target state="translated">ここでは、リージョンの形状が JS ドキュメントで明示されていることがわかります-理想的には、このようなものをコード化することができますが、それはまだ実現していません。</target>
        </trans-unit>
        <trans-unit id="46f3341609ce260175814b222b7f2396dc796074" translate="yes" xml:space="preserve">
          <source>Here's a full list of React Native's &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/babel-preset/configs/main.js#L16&quot;&gt;enabled transformations&lt;/a&gt;.</source>
          <target state="translated">以下は、React Nativeで&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/babel-preset/configs/main.js#L16&quot;&gt;有効になっている変換&lt;/a&gt;の完全なリストです。</target>
        </trans-unit>
        <trans-unit id="f239420fb80be12bea4bddf2da8f10b117ec2406" translate="yes" xml:space="preserve">
          <source>Here's a small example illustrating how to use &lt;code&gt;AccessibilityInfo&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;AccessibilityInfo&lt;/code&gt; の使用方法を示す小さな例を次に示します。</target>
        </trans-unit>
        <trans-unit id="27dde3158075c8956ee24af53b5a7f9b499411dd" translate="yes" xml:space="preserve">
          <source>Heterogeneous data and item rendering support.</source>
          <target state="translated">異種データとアイテムレンダリングをサポート。</target>
        </trans-unit>
        <trans-unit id="31df4f09b0ae14fe98d76b9e2b17d68641949ad4" translate="yes" xml:space="preserve">
          <source>Hey @author, thanks for sending the pull request. Can you please add all the info specified in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;template&lt;/a&gt;? This is necessary for people to be able to understand and review your pull request.</source>
          <target state="translated">プル@リクエストを送ってくれてありがとう@author、ありがとう。&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;テンプレートで&lt;/a&gt;指定されたすべての情報を追加できますか？これは、人々があなたのプルリクエストを理解してレビューできるようにするために必要です。</target>
        </trans-unit>
        <trans-unit id="4827ff4cee15b4160249ed01975ad0936a4682fa" translate="yes" xml:space="preserve">
          <source>Hide the status bar.</source>
          <target state="translated">ステータスバーを非表示にします。</target>
        </trans-unit>
        <trans-unit id="811bada9095701cf474ac6d77a61ae3b7e552d10" translate="yes" xml:space="preserve">
          <source>High Five!</source>
          <target state="translated">ハイファイブ!</target>
        </trans-unit>
        <trans-unit id="2284d040f5091f510de37a154536196310f9c02d" translate="yes" xml:space="preserve">
          <source>Hint</source>
          <target state="translated">Hint</target>
        </trans-unit>
        <trans-unit id="d677da37990b25ae744a8bbdfd1dd8ea477685a1" translate="yes" xml:space="preserve">
          <source>Hit &lt;code&gt;⌘R&lt;/code&gt; in your iOS Simulator to reload the app and see your changes!</source>
          <target state="translated">ヒット &lt;code&gt;⌘R&lt;/code&gt; をアプリをリロードして変更を確認するためにあなたのiOSシミュレータで！</target>
        </trans-unit>
        <trans-unit id="4f57a1ce99e68a7b05c42d0a7ea0070eafabd31c" translate="yes" xml:space="preserve">
          <source>Horizontal</source>
          <target state="translated">Horizontal</target>
        </trans-unit>
        <trans-unit id="18c816a7c45af76ced2433fba26b9a1a2a936201" translate="yes" xml:space="preserve">
          <source>How early to start rendering rows before they come on screen, in pixels.</source>
          <target state="translated">画面に表示される前に行のレンダリングを開始するには、どのくらいの時間がかかるのか、ピクセル単位で表示されます。</target>
        </trans-unit>
        <trans-unit id="fbfd8fe50984e9b44241a968dc6c2de76f1f8a97" translate="yes" xml:space="preserve">
          <source>How far from the end (in units of visible length of the list) the bottom edge of the list must be from the end of the content to trigger the &lt;code&gt;onEndReached&lt;/code&gt; callback. Thus a value of 0.5 will trigger &lt;code&gt;onEndReached&lt;/code&gt; when the end of the content is within half the visible length of the list.</source>
          <target state="translated">&lt;code&gt;onEndReached&lt;/code&gt; コールバックをトリガーするには、リストの下端が（リストの表示可能な長さの単位で）コンテンツの最後からどれくらい離れている必要があります。したがって、値0.5は、コンテンツの終わりがリストの表示可能な長さの半分以内にあるときに &lt;code&gt;onEndReached&lt;/code&gt; をトリガーします。</target>
        </trans-unit>
        <trans-unit id="073c6b2e1b63f9419f37ed494a8a06363b39bd92" translate="yes" xml:space="preserve">
          <source>How many items to render in the initial batch. This should be enough to fill the screen but not much more. Note these items will never be unmounted as part of the windowed rendering in order to improve perceived performance of scroll-to-top actions.</source>
          <target state="translated">最初のバッチでレンダリングするアイテムの数。これは画面を一杯にするのに十分な数ですが、それ以上にはなりません。スクロールからトップへのアクションのパフォーマンスを向上させるために、これらのアイテムはウィンドウレンダリングの一部としては決してアンマウントされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7f96156af4fac959d3172050c2649c288d84ebbb" translate="yes" xml:space="preserve">
          <source>How many rows to render on initial component mount. Use this to make it so that the first screen worth of data appears at one time instead of over the course of multiple frames.</source>
          <target state="translated">最初のコンポーネントマウント時にレンダリングする行数。これを使用して、最初の画面に価値のあるデータが複数のフレームにわたって表示されるのではなく、一度に表示されるようにします。</target>
        </trans-unit>
        <trans-unit id="95885b1160ade6b19f2fc26175b00e5522fc969a" translate="yes" xml:space="preserve">
          <source>How to Contribute</source>
          <target state="translated">貢献の仕方</target>
        </trans-unit>
        <trans-unit id="d39549faf087552ec8b01a05c0088a2b86afc12f" translate="yes" xml:space="preserve">
          <source>How we prioritize pull requests</source>
          <target state="translated">プルリクエストの優先順位の付け方</target>
        </trans-unit>
        <trans-unit id="a21d5872ff13b1c3e6076e5a27adc34acd51a213" translate="yes" xml:space="preserve">
          <source>How we review pull requests</source>
          <target state="translated">プルリクエストの見直し方法</target>
        </trans-unit>
        <trans-unit id="e3cd21653b2aec00c3034210b4f2708a237bd673" translate="yes" xml:space="preserve">
          <source>However, sometimes a parent will want to make sure that it becomes responder. This can be handled by using the capture phase. Before the responder system bubbles up from the deepest component, it will do a capture phase, firing &lt;code&gt;on*ShouldSetResponderCapture&lt;/code&gt;. So if a parent View wants to prevent the child from becoming responder on a touch start, it should have a &lt;code&gt;onStartShouldSetResponderCapture&lt;/code&gt; handler which returns true.</source>
          <target state="translated">ただし、親がレスポンダーになることを確認したい場合があります。これは、キャプチャフェーズを使用して処理できます。レスポンダーシステムが最も深いコンポーネントから浮上する前に、 &lt;code&gt;on*ShouldSetResponderCapture&lt;/code&gt; するキャプチャフェーズを実行します。したがって、親ビューがタッチスタートで子がレスポンダーにならないようにする場合は、trueを返す &lt;code&gt;onStartShouldSetResponderCapture&lt;/code&gt; ハンドラーが必要です。</target>
        </trans-unit>
        <trans-unit id="f83d9c481801e0a69e14cc33b7686ac535ebf0ad" translate="yes" xml:space="preserve">
          <source>However, there are still some styles that the linter cannot pick up.</source>
          <target state="translated">とはいえ、リンターでは拾えないスタイルもあります。</target>
        </trans-unit>
        <trans-unit id="ccdf54ed32f9ed52c9fccc1915a7023d8eeb01e7" translate="yes" xml:space="preserve">
          <source>However, when &lt;code&gt;react-devtools&lt;/code&gt; is running, Inspector will enter a special collapsed mode, and instead use the DevTools as primary UI. In this mode, clicking on something in the simulator will bring up the relevant components in the DevTools:</source>
          <target state="translated">ただし、 &lt;code&gt;react-devtools&lt;/code&gt; が実行されている場合、Inspectorは特別な折りたたみモードに入り、代わりにDevToolsをプライマリUIとして使用します。このモードでは、シミュレータで何かをクリックすると、DevToolsに関連するコンポーネントが表示されます。</target>
        </trans-unit>
        <trans-unit id="cf897ec8e41fbd3acf28660c23b0f7e840f9b528" translate="yes" xml:space="preserve">
          <source>Hue-saturation-lightness</source>
          <target state="translated">Hue-saturation-lightness</target>
        </trans-unit>
        <trans-unit id="da999bef13ef7585c122270bc5e0059c1a79847d" translate="yes" xml:space="preserve">
          <source>Id as returned by &lt;code&gt;watchPosition()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;watchPosition()&lt;/code&gt; によって返されるID 。</target>
        </trans-unit>
        <trans-unit id="9b33a5651708278eb6ecab3db7d153be44411482" translate="yes" xml:space="preserve">
          <source>Id as returned by prefetch()</source>
          <target state="translated">prefetch()で返された ID</target>
        </trans-unit>
        <trans-unit id="c4598eee7d150df39592d8e060c11add8a15d0d9" translate="yes" xml:space="preserve">
          <source>Identifying a culprit</source>
          <target state="translated">犯人の特定</target>
        </trans-unit>
        <trans-unit id="9235b9d1ba2e5003c36c64f761c121658be12c95" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, disables auto-correct. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、自動修正を無効にします。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eabd7a9b9ad2c45955dbd12197d8fa3f99f87dfa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, disables spell-check style (i.e. red underlines). The default value is inherited from &lt;code&gt;autoCorrect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、スペルチェックスタイルを無効にします（つまり、赤い下線）。デフォルト値は &lt;code&gt;autoCorrect&lt;/code&gt; から継承されます。</target>
        </trans-unit>
        <trans-unit id="3f4c34d5311be307cdec315f375f3a117ec0672e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, text is not editable. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、テキストは編集できません。デフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c3e4e369bc42c2a5febb7dca484651c7eaac6fed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;rationale&lt;/code&gt; is provided, this function checks with the OS whether it is necessary to show a dialog explaining why the permission is needed (&lt;a href=&quot;https://developer.android.com/training/permissions/requesting.html#explain&quot;&gt;https://developer.android.com/training/permissions/requesting.html#explain&lt;/a&gt;) and then shows the system permission dialog.</source>
          <target state="translated">&lt;code&gt;rationale&lt;/code&gt; が提供されている場合、この関数は、権限が必要な理由を説明するダイアログ（&lt;a href=&quot;https://developer.android.com/training/permissions/requesting.html#explain&quot;&gt;https://developer.android.com/training/permissions/requesting.html#explain&lt;/a&gt;）を表示する必要があるかどうかをOSに確認し、システム許可ダイアログ。</target>
        </trans-unit>
        <trans-unit id="16e455197b46afeb23aa6126dd6e9f705b5d9fe0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, all text will automatically be selected on focus.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、すべてのテキストが自動的にピント上で選択されます。</target>
        </trans-unit>
        <trans-unit id="9844c693df422afc821a6eb8f0514fc38b0761a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, caret is hidden. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、キャレットが隠されています。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4015745bebce1679a2efee8fbe384b177eb5127e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, clears the text field automatically when editing begins.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 編集を開始したときに、自動的にテキストフィールドをクリアします。</target>
        </trans-unit>
        <trans-unit id="33039c0981625855de3fb649e09346e658c62163" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, context menu is hidden. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、コンテキストメニューが隠されています。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ae0b627d8f66073324ed6902adbc3509d3e870a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, focuses the input on &lt;code&gt;componentDidMount&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、入力を &lt;code&gt;componentDidMount&lt;/code&gt; にフォーカスします。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7db2859088b3c1c4a53efeac55e22f3c050d2eca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the keyboard disables the return key when there is no text and automatically enables it when there is text. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; テキストがないとき、キーボードはリターンキーを無効にして、自動的にテキストがある場合、それを可能にします。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="838a92415d4956be5b8621e80eaa22ab3c5ca8bc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the text field will blur when submitted. The default value is true for single-line fields and false for multiline fields. Note that for multiline fields, setting &lt;code&gt;blurOnSubmit&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; means that pressing return will blur the field and trigger the &lt;code&gt;onSubmitEditing&lt;/code&gt; event instead of inserting a newline into the field.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 提出時に、テキストフィールドがぼやけます。デフォルト値は、単一行フィールドの場合はtrue、複数行フィールドの場合はfalseです。複数行フィールドの場合、 &lt;code&gt;blurOnSubmit&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、改行をフィールドに挿入する代わりに、 &lt;code&gt;onSubmitEditing&lt;/code&gt; を押すとフィールドがぼかされ、onSubmitEditingイベントがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="0bdd9741459484335c693ab41f6cfba9badbbddb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the text input can be multiple lines. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、テキスト入力が複数行することができます。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="65b861f28d1702df9ce4288fb1a80e56c0cf1a4d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the text input obscures the text entered so that sensitive text like passwords stay secure. The default value is &lt;code&gt;false&lt;/code&gt;. Does not work with 'multiline={true}'.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、テキスト入力は、パスワードのようなものに敏感なテキストを安全に滞在して入力したテキストをあいまいにしています。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。'multiline = {true}'では機能しません。</target>
        </trans-unit>
        <trans-unit id="47587f7c2245a48322b311bcf60d4751d3ee6c73" translate="yes" xml:space="preserve">
          <source>If a contributor becomes hostile or disrespectful, they will be referred to the &lt;a href=&quot;https://code.facebook.com/codeofconduct&quot;&gt;Code of Conduct&lt;/a&gt;. Negative users will be blocked, and inappropriate comments will be deleted.</source>
          <target state="translated">寄稿者が敵対的または失礼になった場合は&lt;a href=&quot;https://code.facebook.com/codeofconduct&quot;&gt;、行動規範&lt;/a&gt;が参照されます。否定的なユーザーはブロックされ、不適切なコメントは削除されます。</target>
        </trans-unit>
        <trans-unit id="b87ad9d324b7f249275eb6ad0b65c0e986c90fb0" translate="yes" xml:space="preserve">
          <source>If a file in the template is identical to your file, it is skipped.</source>
          <target state="translated">テンプレート内のファイルが自分のファイルと同じ場合はスキップされます。</target>
        </trans-unit>
        <trans-unit id="6427bf9f58367a3f3a550e876f312b7b6412dc97" translate="yes" xml:space="preserve">
          <source>If a file is different in your project than the template, you will be prompted; you have options to keep your file or overwrite it with the template version.</source>
          <target state="translated">プロジェクト内のファイルがテンプレートと異なる場合、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="70bdb8e2713d64b49e956721d0588461bf9d3b71" translate="yes" xml:space="preserve">
          <source>If a font scale is not set, this returns the device pixel ratio.</source>
          <target state="translated">フォントスケールが設定されていない場合は、デバイスのピクセル比を返します。</target>
        </trans-unit>
        <trans-unit id="170da03f63bd9055caf186a5b2ae0eae41fa03fd" translate="yes" xml:space="preserve">
          <source>If a issue is still open after going through all of the checks above, it will move on to the triage stage. A maintainer will then do the following:</source>
          <target state="translated">上記のすべてのチェックを行っても課題がまだ開いている場合は、トリアージ・ステージに進みます。メンテナは以下のことを行います。</target>
        </trans-unit>
        <trans-unit id="8765e358c5c435d60632a38896b4e7a7a8d09e20" translate="yes" xml:space="preserve">
          <source>If a map is provided to the method, only the permissions with truthy values will be requested.</source>
          <target state="translated">メソッドにマップが提供された場合、truthy 値を持つパーミッションのみが要求されます。</target>
        </trans-unit>
        <trans-unit id="fb62a943cd9bfd1734a114c234f942b4096144de" translate="yes" xml:space="preserve">
          <source>If a method call spans multiple lines closing bracket is on the same line as the last argument.</source>
          <target state="translated">メソッド呼び出しが複数行にまたがる場合は、最後の引数と同じ行に括弧を付けます。</target>
        </trans-unit>
        <trans-unit id="01f0dd657d5d52719edd21b36f1fb901a1c2a98c" translate="yes" xml:space="preserve">
          <source>If a method header doesn't fit on one line each argument goes on a separate line.</source>
          <target state="translated">メソッドヘッダが一行に収まらない場合、各引数は別の行に置かれます。</target>
        </trans-unit>
        <trans-unit id="5c90225c300c61aeffbb98e78cef502d379ef3f4" translate="yes" xml:space="preserve">
          <source>If a parent &lt;code&gt;View&lt;/code&gt; wants to prevent a child &lt;code&gt;View&lt;/code&gt; from becoming responder on a move, it should have this handler which returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">親 &lt;code&gt;View&lt;/code&gt; が子 &lt;code&gt;View&lt;/code&gt; が移動時にレスポンダーになるのを防ぎたい場合は、 &lt;code&gt;true&lt;/code&gt; を返すこのハンドラーが必要です。</target>
        </trans-unit>
        <trans-unit id="f54013e0a7603f4fae5b2bbceb4a9b105d44c20f" translate="yes" xml:space="preserve">
          <source>If a parent &lt;code&gt;View&lt;/code&gt; wants to prevent a child &lt;code&gt;View&lt;/code&gt; from becoming responder on a touch start, it should have this handler which returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">親 &lt;code&gt;View&lt;/code&gt; が子 &lt;code&gt;View&lt;/code&gt; がタッチスタートでレスポンダーにならないようにする &lt;code&gt;true&lt;/code&gt; を返すこのハンドラーが必要です。</target>
        </trans-unit>
        <trans-unit id="8777d238936bc0b4d7183780bca516bd025dc82d" translate="yes" xml:space="preserve">
          <source>If a user has previously turned off a permission that you prompt for, the OS will advise your app to show a rationale for needing the permission. The optional &lt;code&gt;rationale&lt;/code&gt; argument will show a dialog prompt only if necessary - otherwise the normal permission prompt will appear.</source>
          <target state="translated">ユーザーが以前に求めた権限をオフにしている場合、OSはアプリに、権限を必要とする根拠を示すようアドバイスします。オプションの &lt;code&gt;rationale&lt;/code&gt; 引数は、必要な場合にのみダイアログプロンプトを表示します。それ以外の場合は、通常の許可プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="5122d195daff936d8a1e142fc1c2e02f0decf77a" translate="yes" xml:space="preserve">
          <source>If defined, the provided image resource will be rendered on the left. The image resource must be inside &lt;code&gt;/android/app/src/main/res/drawable&lt;/code&gt; and referenced like</source>
          <target state="translated">定義されている場合、提供された画像リソースは左側にレンダリングされます。画像リソースは &lt;code&gt;/android/app/src/main/res/drawable&lt;/code&gt; 内にあり、以下のように参照される必要があります</target>
        </trans-unit>
        <trans-unit id="b84fbe05be78e833c8459ab736f83de066b8b97d" translate="yes" xml:space="preserve">
          <source>If everything is set up correctly, you should see your new app running in your Android emulator shortly.</source>
          <target state="translated">すべてが正しく設定されている場合は、すぐにあなたのAndroidエミュレータで実行されている新しいアプリを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="2e6e11a5e64638444df3789c7c5523a0ce8709eb" translate="yes" xml:space="preserve">
          <source>If everything is set up correctly, your device will be listed as the build target in the Xcode toolbar, and it will also appear in the Devices pane (&lt;code&gt;⇧⌘2&lt;/code&gt;). You can now press the &lt;strong&gt;Build and run&lt;/strong&gt; button (&lt;code&gt;⌘R&lt;/code&gt;) or select &lt;strong&gt;Run&lt;/strong&gt; from the &lt;strong&gt;Product&lt;/strong&gt; menu. Your app will launch on your device shortly.</source>
          <target state="translated">すべてが正しく設定されている場合、デバイスはXcodeツールバーのビルドターゲットとしてリストされ、デバイスペイン（ &lt;code&gt;⇧⌘2&lt;/code&gt; ）にも表示されます。これで、[ &lt;strong&gt;ビルドして実行&lt;/strong&gt; ]ボタン（ &lt;code&gt;⌘R&lt;/code&gt; ）を押すか、[ &lt;strong&gt;製品&lt;/strong&gt; ]メニューから[ &lt;strong&gt;実行&lt;/strong&gt; ]を選択できます。アプリはまもなくデバイス上で起動します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0fc10595a33db716addb465a4b5a12bbe267a34" translate="yes" xml:space="preserve">
          <source>If false the user won't be able to interact with the control. Default value is true.</source>
          <target state="translated">falseの場合、ユーザーはコントロールと対話することができません。デフォルト値は true です。</target>
        </trans-unit>
        <trans-unit id="3a9b1878933eb8847a56a21228d10efeeec43f79" translate="yes" xml:space="preserve">
          <source>If it doesn't resolve your local IP address either the &lt;strong&gt;xip.io&lt;/strong&gt; service is down or more likely your router prevents it.</source>
          <target state="translated">ローカルIPアドレスが解決されない場合は、&lt;strong&gt;xip.io&lt;/strong&gt;サービスが停止しているか、ルーターがそれを阻止している可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba56c6329b24b108dfa39441afb52ec8893a4c66" translate="yes" xml:space="preserve">
          <source>If not, link to the style guide and add the label 'Needs revision'.</source>
          <target state="translated">そうでない場合は、スタイルガイドにリンクし、「改訂が必要」というラベルを追加してください。</target>
        </trans-unit>
        <trans-unit id="e591db29d71259568a1d322febed68f829c4bd19" translate="yes" xml:space="preserve">
          <source>If not, the maintainer will ask you to provide more information by filling out the issue template, then they will close the issue.</source>
          <target state="translated">そうでない場合は、メンテナが課題テンプレートに記入してより多くの情報を提供するように求めてきますので、課題は終了します。</target>
        </trans-unit>
        <trans-unit id="9f73fb631027a26d8bf5c1d042529d661ae9e2fe" translate="yes" xml:space="preserve">
          <source>If one animation is stopped or interrupted, then all other animations in the group are also stopped. &lt;code&gt;Animated.parallel&lt;/code&gt; has a &lt;code&gt;stopTogether&lt;/code&gt; option that can be set to &lt;code&gt;false&lt;/code&gt; to disable this.</source>
          <target state="translated">1つのアニメーションが停止または中断されると、グループ内の他のすべてのアニメーションも停止されます。 &lt;code&gt;Animated.parallel&lt;/code&gt; には、これを無効にするために &lt;code&gt;false&lt;/code&gt; に設定できる &lt;code&gt;stopTogether&lt;/code&gt; オプションがあります。</target>
        </trans-unit>
        <trans-unit id="aaaebfc5439c089d56593c081e2092c6b0b88709" translate="yes" xml:space="preserve">
          <source>If passing a number:</source>
          <target state="translated">数字を渡す場合。</target>
        </trans-unit>
        <trans-unit id="7f9d3284665021abf2662ac52d42ec4e2f0fc105" translate="yes" xml:space="preserve">
          <source>If passing an object, the general shape is &lt;code&gt;{uri: string, width: number, height: number, scale: number}&lt;/code&gt;:</source>
          <target state="translated">オブジェクトを渡す場合、一般的な形状は &lt;code&gt;{uri: string, width: number, height: number, scale: number}&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2b0d01101cec5f39422f49f5f6d2d2ccc3b73c0a" translate="yes" xml:space="preserve">
          <source>If provided, a header is rendered for this section.</source>
          <target state="translated">指定された場合、このセクションのヘッダがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="0354c67432339936cd5269d3f95635335cae21b4" translate="yes" xml:space="preserve">
          <source>If provided, a renderable component to be rendered as the separator below each row but not the last row if there is a section header below. Take a sectionID and rowID of the row above and whether its adjacent row is highlighted.</source>
          <target state="translated">提供されている場合は、各行の下にセクションヘッダーがある場合は最後の行ではなく、各行の下にセパレータとしてレンダリングされるレンダリング可能なコンポーネントを指定します。上の行の sectionID と rowID、そして隣接する行がハイライトされているかどうかを受け取ります。</target>
        </trans-unit>
        <trans-unit id="4fca30ec8903cb7f3e2a016ba42532cfa379fccb" translate="yes" xml:space="preserve">
          <source>If provided, a standard &lt;code&gt;RefreshControl&lt;/code&gt; will be added for &quot;Pull to Refresh&quot; functionality. Make sure to also set the &lt;code&gt;refreshing&lt;/code&gt; prop correctly.</source>
          <target state="translated">提供される場合、「Pull to Refresh」機能のために標準の &lt;code&gt;RefreshControl&lt;/code&gt; が追加されます。 &lt;code&gt;refreshing&lt;/code&gt; 小道具も正しく設定してください。</target>
        </trans-unit>
        <trans-unit id="32e48d0db46a1cfd624155fba70d4d3a7bfece18" translate="yes" xml:space="preserve">
          <source>If provided, a standard RefreshControl will be added for &quot;Pull to Refresh&quot; functionality. Make sure to also set the &lt;code&gt;refreshing&lt;/code&gt; prop correctly.</source>
          <target state="translated">提供される場合、「Pull to Refresh」機能のために標準のRefreshControlが追加されます。 &lt;code&gt;refreshing&lt;/code&gt; 小道具も正しく設定してください。</target>
        </trans-unit>
        <trans-unit id="ab1af9c8f3f636a57ae36c772be9544be67075ed" translate="yes" xml:space="preserve">
          <source>If set to false, the picker will be disabled, i.e. the user will not be able to make a selection.</source>
          <target state="translated">falseに設定すると、ピッカーは無効になります。</target>
        </trans-unit>
        <trans-unit id="6bd67b1171c8210e594e9292f804f3b2cc96c30b" translate="yes" xml:space="preserve">
          <source>If set to true it renders the image as original, it defaults to being displayed as a template</source>
          <target state="translated">true に設定すると画像をオリジナルのままレンダリングし、デフォルトではテンプレートとして表示されます。</target>
        </trans-unit>
        <trans-unit id="315bf97e6eb6418e2802625025ed76e4cccc4ca8" translate="yes" xml:space="preserve">
          <source>If so, expect to be asked if the issue can be reproduced in the latest release candidate.</source>
          <target state="translated">もしそうであれば、最新のリリース候補でその問題が再現できるかどうかを尋ねられることを期待してください。</target>
        </trans-unit>
        <trans-unit id="fca5eae04fed2c3ee248c1dfc65975e4d033af72" translate="yes" xml:space="preserve">
          <source>If so, is there any information missing from the bug report? Post a comment with all the information required by the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;issue template&lt;/a&gt;.</source>
          <target state="translated">もしそうなら、バグレポートから欠落している情報はありますか？&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;課題テンプレートに&lt;/a&gt;必要なすべての情報をコメントに投稿します。</target>
        </trans-unit>
        <trans-unit id="a69ec66a57f7fbe7148653aa8bd170b3360fc70c" translate="yes" xml:space="preserve">
          <source>If the View returns true and attempts to become the responder, one of the following will happen:</source>
          <target state="translated">ビューが true を返してレスポンダになろうとすると、以下のいずれかが発生します。</target>
        </trans-unit>
        <trans-unit id="420f97ff6f75ab3f1fa0bc303a0907dc913fd3a4" translate="yes" xml:space="preserve">
          <source>If the app launch was triggered by an app link, it will give the link url, otherwise it will give &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">アプリの起動がアプリのリンクによってトリガーされた場合は、リンクのURLが表示されます。それ以外の場合は、 &lt;code&gt;null&lt;/code&gt; が表示されます</target>
        </trans-unit>
        <trans-unit id="18f64cf8bac6898d806492d2acb632849022c3af" translate="yes" xml:space="preserve">
          <source>If the basic button doesn't look right for your app, you can build your own button using any of the &quot;Touchable&quot; components provided by React Native. The &quot;Touchable&quot; components provide the capability to capture tapping gestures, and can display feedback when a gesture is recognized. These components do not provide any default styling, however, so you will need to do a bit of work to get them looking nicely in your app.</source>
          <target state="translated">基本的なボタンがアプリに合わない場合は、React Nativeが提供する「Touchable」コンポーネントを使って独自のボタンを作ることができます。Touchable」コンポーネントは、タップジェスチャーをキャプチャする機能を提供し、ジェスチャーが認識されたときにフィードバックを表示することができます。しかし、これらのコンポーネントはデフォルトのスタイリングを提供していないので、アプリ内できれいに見えるようにするには少し作業が必要になります。</target>
        </trans-unit>
        <trans-unit id="95f10becf6f1214e1438ae62c6b7262f74e1d1e9" translate="yes" xml:space="preserve">
          <source>If the checkboxes are grayed out, you will have a chance to install these components later on.</source>
          <target state="translated">チェックボックスがグレー表示になっている場合は、後でこれらのコンポーネントをインストールする機会があります。</target>
        </trans-unit>
        <trans-unit id="d5d0e26d353f5339aa9b5f6994bec014d178cec1" translate="yes" xml:space="preserve">
          <source>If the cropping process is successful, the resultant cropped image will be stored in the ImageStore, and the URI returned in the success callback will point to the image in the store. Remember to delete the cropped image from the ImageStore when you are done with it.</source>
          <target state="translated">切り抜き処理が成功した場合、結果として切り抜かれた画像はImageStoreに保存され、成功コールバックで返されたURIがストア内の画像を指すようになります。切り抜き処理が完了したら、ImageStoreから切り抜いた画像を削除することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="cea6e0b7de5f5b21a83ad7e9934ce742c1be1a47" translate="yes" xml:space="preserve">
          <source>If the library has native code, there must be a &lt;code&gt;.xcodeproj&lt;/code&gt; file inside it's folder. Drag this file to your project on Xcode (usually under the &lt;code&gt;Libraries&lt;/code&gt; group on Xcode);</source>
          <target state="translated">ライブラリにネイティブコードがある場合は、そのフォルダー内に &lt;code&gt;.xcodeproj&lt;/code&gt; ファイルが必要です。このファイルをXcodeのプロジェクト（通常はXcodeの &lt;code&gt;Libraries&lt;/code&gt; グループの下）にドラッグします。</target>
        </trans-unit>
        <trans-unit id="283167a7e52faae044913a8f459b508f0b211ff4" translate="yes" xml:space="preserve">
          <source>If the network activity indicator should be visible.</source>
          <target state="translated">ネットワーク アクティビティ インジケータが表示されている必要がある場合。</target>
        </trans-unit>
        <trans-unit id="914e202dac878e470e0e48bd47a0e62848a5be0b" translate="yes" xml:space="preserve">
          <source>If the progress bar will show indeterminate progress. Note that this can only be false if styleAttr is Horizontal.</source>
          <target state="translated">プログレスバーに不確定な進行状況が表示される場合。styleAttr が Horizontal の場合のみ false になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="19476a262915a224146aa5b8f3003edc986efcaf" translate="yes" xml:space="preserve">
          <source>If the ripple can render outside it's bounds</source>
          <target state="translated">リップルが範囲外にレンダリングできる場合</target>
        </trans-unit>
        <trans-unit id="5ea205d6bbfab7e83ba052a80fe4195ef04d0f05" translate="yes" xml:space="preserve">
          <source>If the status bar is hidden.</source>
          <target state="translated">ステータスバーが非表示の場合</target>
        </trans-unit>
        <trans-unit id="05360855fd4fe8c6b18bb46aa45ec5d307ed9d1c" translate="yes" xml:space="preserve">
          <source>If the status bar is translucent. When translucent is set to true, the app will draw under the status bar. This is useful when using a semi transparent status bar color.</source>
          <target state="translated">ステータスバーが半透明の場合。半透明がtrueに設定されている場合、アプリはステータスバーの下に描画します。半透明のステータスバーの色を使用している場合に便利です。</target>
        </trans-unit>
        <trans-unit id="86e69fda245d86b4c76315223cc8c7e49bf3c7bc" translate="yes" xml:space="preserve">
          <source>If the tag has a file extension of .mov or .mp4, it will be inferred as a video. Otherwise it will be treated as a photo. To override the automatic choice, you can pass an optional &lt;code&gt;type&lt;/code&gt; parameter that must be one of 'photo' or 'video'.</source>
          <target state="translated">タグのファイル拡張子が.movまたは.mp4の場合は、動画として推測されます。それ以外の場合は、写真として扱われます。自動選択をオーバーライドするには、「photo」または「video」のいずれかでなければならないオプションの &lt;code&gt;type&lt;/code&gt; パラメーターを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="372a26f58d0a73e03e46c2ba5e351d39d86e69df" translate="yes" xml:space="preserve">
          <source>If the toolbar has an only child, it will be displayed between the title and actions.</source>
          <target state="translated">ツールバーに唯一の子がある場合は、タイトルとアクションの間に表示されます。</target>
        </trans-unit>
        <trans-unit id="6d3c262e8f7c6e11f79744d3b78e53fca5cc74f8" translate="yes" xml:space="preserve">
          <source>If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.</source>
          <target state="translated">ステータスバーのプロパティ変更の間の遷移をアニメーション化するかどうか。backgroundColor、barStyle、hiddenでサポートされています。</target>
        </trans-unit>
        <trans-unit id="5143b8e7e83329df0e0fc52940bc81f32af829fd" translate="yes" xml:space="preserve">
          <source>If the view is responding, the following handlers can be called:</source>
          <target state="translated">ビューが応答している場合は、以下のハンドラを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4146c6f2fc9831d2379a2c296f5a5b8242d8cee9" translate="yes" xml:space="preserve">
          <source>If there is a new file in the template, it is simply created.</source>
          <target state="translated">テンプレート内に新規ファイルがある場合は、単純に作成されます。</target>
        </trans-unit>
        <trans-unit id="dc46a1877dbf34284abc4b19831c9867efb3eb52" translate="yes" xml:space="preserve">
          <source>If there were major changes, run this in a terminal to get these:</source>
          <target state="translated">大きな変更があった場合は、ターミナルでこれを実行して、これらを取得します。</target>
        </trans-unit>
        <trans-unit id="bc76b2ab401dbb084bf3582159ed6d514f79933f" translate="yes" xml:space="preserve">
          <source>If these don't help and you want to dig deeper into what the GPU is actually doing, you can check out &lt;a href=&quot;http://developer.android.com/tools/help/gltracer.html&quot;&gt;Tracer for OpenGL ES&lt;/a&gt;.</source>
          <target state="translated">これらが役に立たず、GPUが実際に行っていることをさらに詳しく知りたい場合は&lt;a href=&quot;http://developer.android.com/tools/help/gltracer.html&quot;&gt;、OpenGL ESのトレーサーを&lt;/a&gt;チェックしてください。</target>
        </trans-unit>
        <trans-unit id="f42a850312f12d820ccd6cd96075b10af05ad0ae" translate="yes" xml:space="preserve">
          <source>If this button doesn't look right for your app, you can build your own button using &lt;a href=&quot;touchableopacity&quot;&gt;TouchableOpacity&lt;/a&gt; or &lt;a href=&quot;touchablenativefeedback&quot;&gt;TouchableNativeFeedback&lt;/a&gt;. For inspiration, look at the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js&quot;&gt;source code for this button component&lt;/a&gt;. Or, take a look at the &lt;a href=&quot;https://js.coach/react-native?search=button&quot;&gt;wide variety of button components built by the community&lt;/a&gt;.</source>
          <target state="translated">このボタンがアプリに&lt;a href=&quot;touchableopacity&quot;&gt;適さ&lt;/a&gt;ない場合は、TouchableOpacityまたは&lt;a href=&quot;touchablenativefeedback&quot;&gt;TouchableNativeFeedback&lt;/a&gt;を使用して独自のボタンを作成できます。インスピレーションについては&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js&quot;&gt;、このボタンコンポーネントのソースコードをご覧ください&lt;/a&gt;。または、&lt;a href=&quot;https://js.coach/react-native?search=button&quot;&gt;コミュニティによって作成されたさまざまなボタンコンポーネントをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32299d04a14d349b02bf78a6fff8b5d0e27ecddd" translate="yes" xml:space="preserve">
          <source>If this fails with errors mentioning &lt;code&gt;xcrun&lt;/code&gt;, make sure that in Xcode in Preferences &amp;gt; Locations the Command Line Tools are assigned.</source>
          <target state="translated">これが &lt;code&gt;xcrun&lt;/code&gt; に関するエラーで失敗する場合は、[設定]&amp;gt; [場所]の[Xcode]でコマンドラインツールが割り当てられていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="c4681e7d690c9b48795485a84612f9964a4b98e8" translate="yes" xml:space="preserve">
          <source>If this is a vertical ListView scrolls to the bottom. If this is a horizontal ListView scrolls to the right.</source>
          <target state="translated">縦長のリストビューの場合は下にスクロールします。横長の場合は右にスクロールします。</target>
        </trans-unit>
        <trans-unit id="e240bbf5c45e25898af57d813815e2366441f1d4" translate="yes" xml:space="preserve">
          <source>If this is a vertical ScrollView scrolls to the bottom. If this is a horizontal ScrollView scrolls to the right.</source>
          <target state="translated">縦スクロールの場合は下にスクロールします。横スクロールの場合は右にスクロールします。</target>
        </trans-unit>
        <trans-unit id="3d37cb5ca993455015fd755df71b1b8ae578231d" translate="yes" xml:space="preserve">
          <source>If this is your first time running an app on your iOS device, you may need to register your device for development. Open the &lt;strong&gt;Product&lt;/strong&gt; menu from Xcode's menubar, then go to &lt;strong&gt;Destination&lt;/strong&gt;. Look for and select your device from the list. Xcode will then register your device for development.</source>
          <target state="translated">iOSデバイスで初めてアプリを実行する場合は、開発用にデバイスを登録する必要がある場合があります。Xcodeのメニューバーから[ &lt;strong&gt;Product&lt;/strong&gt; ]メニューを開き、[ &lt;strong&gt;Destination]に&lt;/strong&gt;移動します。リストからデバイスを探して選択します。Xcodeは開発用にデバイスを登録します。</target>
        </trans-unit>
        <trans-unit id="9937a1717ef07a5a5a5c9846cf4fe0f572610c1b" translate="yes" xml:space="preserve">
          <source>If this prop is not provided, the default behavior is for the back swipe gesture to be enabled when the navigation bar is shown and disabled when the navigation bar is hidden. Once you've provided the &lt;code&gt;interactivePopGestureEnabled&lt;/code&gt; prop, you can never restore the default behavior.</source>
          <target state="translated">この小道具が提供されていない場合、デフォルトの動作では、ナビゲーションバーが表示されているときに戻るスワイプジェスチャーが有効になり、ナビゲーションバーが非表示になっているときには無効になります。 &lt;code&gt;interactivePopGestureEnabled&lt;/code&gt; プロップを提供すると、デフォルトの動作に戻すことはできません。</target>
        </trans-unit>
        <trans-unit id="4779e97013d5129fbd816a53996a6eb62f3d8670" translate="yes" xml:space="preserve">
          <source>If true the user won't be able to move the slider. Default value is false.</source>
          <target state="translated">true の場合、ユーザーはスライダーを動かすことができません。デフォルト値はfalseです。</target>
        </trans-unit>
        <trans-unit id="24784b24006ca76f4fb6580595dce9e978014a43" translate="yes" xml:space="preserve">
          <source>If true the user won't be able to toggle the switch. Default value is false.</source>
          <target state="translated">true の場合、ユーザーはスイッチを切り替えることができません。デフォルト値は false です。</target>
        </trans-unit>
        <trans-unit id="935604f1a96035c36b1cae9e646b47bb65a34e74" translate="yes" xml:space="preserve">
          <source>If true, disable all interactions for this component.</source>
          <target state="translated">true の場合、このコンポーネントのすべてのインタラクションを無効にします。</target>
        </trans-unit>
        <trans-unit id="05bdf87b49c5d235828158ebd3578d84a551e6da" translate="yes" xml:space="preserve">
          <source>If true, renders items next to each other horizontally instead of stacked vertically.</source>
          <target state="translated">true の場合、アイテムを縦に重ねるのではなく、横に並べて表示します。</target>
        </trans-unit>
        <trans-unit id="1e7a09fb4459d4e568a9139a36948911807e345a" translate="yes" xml:space="preserve">
          <source>If true, then selecting a segment won't persist visually. The &lt;code&gt;onValueChange&lt;/code&gt; callback will still work as expected.</source>
          <target state="translated">trueの場合、セグメントの選択は視覚的に保持されません。 &lt;code&gt;onValueChange&lt;/code&gt; の期待通りにコールバックがまだ動作します。</target>
        </trans-unit>
        <trans-unit id="8b292f57cf8efd17cc5f3b1bc4a40b54a8e4d228" translate="yes" xml:space="preserve">
          <source>If you added React Native manually to your project, make sure you have included all the relevant dependencies that you are using, like &lt;code&gt;RCTText.xcodeproj&lt;/code&gt;, &lt;code&gt;RCTImage.xcodeproj&lt;/code&gt;. Next, the binaries built by these dependencies have to be linked to your app binary. Use the &lt;code&gt;Linked Frameworks and Binaries&lt;/code&gt; section in the Xcode project settings. More detailed steps are here: &lt;a href=&quot;linking-libraries-ios#content&quot;&gt;Linking Libraries&lt;/a&gt;.</source>
          <target state="translated">React Nativeを手動でプロジェクトに追加した場合は、 &lt;code&gt;RCTText.xcodeproj&lt;/code&gt; 、 &lt;code&gt;RCTImage.xcodeproj&lt;/code&gt; など、使用している関連するすべての依存関係が含まれていることを確認してください。次に、これらの依存関係によって構築されたバイナリをアプリのバイナリにリンクする必要があります。Xcodeプロジェクト設定の &lt;code&gt;Linked Frameworks and Binaries&lt;/code&gt; セクションを使用します。詳細な手順はこちら：&lt;a href=&quot;linking-libraries-ios#content&quot;&gt;ライブラリのリンク&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="024abc4e891f945002bf2193552d9d6ddcbe78c4" translate="yes" xml:space="preserve">
          <source>If you are adding new functionality or introducing a change in behavior, we will ask you to update the documentation to reflect your changes. The docs are hosted as part of the React Native website. The website itself is hosted on GitHub Pages and is automatically generated &lt;a href=&quot;https://github.com/facebook/react-native-website/tree/master/docs&quot;&gt;from the Markdown sources&lt;/a&gt;.</source>
          <target state="translated">新しい機能を追加したり、動作に変更を加えたりする場合は、変更を反映するようにドキュメントを更新するように求められます。ドキュメントは、React Native Webサイトの一部としてホストされています。ウェブサイト自体はGitHub Pagesでホストさ&lt;a href=&quot;https://github.com/facebook/react-native-website/tree/master/docs&quot;&gt;れ、Markdownソースから&lt;/a&gt;自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="eb824e1b58c03524f3bddd9d5dca4c8b245cc8a5" translate="yes" xml:space="preserve">
          <source>If you are building a hybrid app (some UIs in React Native, some UIs in platform code) you can still use images that are already bundled into the app.</source>
          <target state="translated">ハイブリッドアプリ(一部のUIはReact Nativeで、一部のUIはプラットフォームコードで)を構築している場合でも、すでにアプリにバンドルされている画像を使用することができます。</target>
        </trans-unit>
        <trans-unit id="dafe04acec2dbd04838e9f50d51c5b20703437c0" translate="yes" xml:space="preserve">
          <source>If you are feeling curious, you can play around with sample code directly in the web simulators. You can also paste it into your &lt;code&gt;App.js&lt;/code&gt; file to create a real app on your local machine.</source>
          <target state="translated">好奇心が強い場合は、サンプルコードをWebシミュレーターで直接試すことができます。 &lt;code&gt;App.js&lt;/code&gt; ファイルに貼り付けて、ローカルマシンで実際のアプリを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="c9f3c2de45b3e04aa2d6158debca94143d593472" translate="yes" xml:space="preserve">
          <source>If you are getting module resolution issues when running your application please see &lt;a href=&quot;https://github.com/facebook/react-native/issues/4968&quot;&gt;this GitHub issue&lt;/a&gt; for information and possible resolution. &lt;a href=&quot;https://github.com/facebook/react-native/issues/4968#issuecomment-220941717&quot;&gt;This comment&lt;/a&gt; seemed to be the latest possible resolution.</source>
          <target state="translated">アプリケーションの実行時にモジュール解決の問題が発生する場合は、&lt;a href=&quot;https://github.com/facebook/react-native/issues/4968&quot;&gt;このGitHubの問題&lt;/a&gt;を参照して、解決策と考えられる情報を確認してください。&lt;a href=&quot;https://github.com/facebook/react-native/issues/4968#issuecomment-220941717&quot;&gt;このコメント&lt;/a&gt;は可能な限り最新の解決策のようです。</target>
        </trans-unit>
        <trans-unit id="e4a8d5ac217cac570e91097f6cfb650206d3f5cb" translate="yes" xml:space="preserve">
          <source>If you are specifying the rowIdentities or sectionIdentities, then &lt;code&gt;getRowAndSectionCount&lt;/code&gt; will return the number of rows &amp;amp; sections in the filtered data source.</source>
          <target state="translated">あなたがrowIdentitiesやsectionIdentitiesを指定している場合は、 &lt;code&gt;getRowAndSectionCount&lt;/code&gt; は、フィルタリングされたデータソース内の行とセクションの数を返します。</target>
        </trans-unit>
        <trans-unit id="09cdc039af10ce3e48968ab2b0e2d02d5e54b9ca" translate="yes" xml:space="preserve">
          <source>If you are specifying the rowIdentities or sectionIdentities, then &lt;code&gt;getRowCount&lt;/code&gt; will return the number of rows in the filtered data source.</source>
          <target state="translated">rowIdentitiesまたはsectionIdentitiesを指定している場合、 &lt;code&gt;getRowCount&lt;/code&gt; はフィルターされたデータソースの行数を返します。</target>
        </trans-unit>
        <trans-unit id="ce86e13ffdf6a45ae3f769db714bef3adab811cb" translate="yes" xml:space="preserve">
          <source>If you are targeting devices running iOS 11 or later, you will also need to add the &lt;code&gt;NSPhotoLibraryAddUsageDescription&lt;/code&gt; key in your &lt;code&gt;Info.plist&lt;/code&gt;. Use this key to define a string that describes how your app will use this data. By adding this key to your &lt;code&gt;Info.plist&lt;/code&gt;, you will be able to request write-only access permission from the user. If you try to save to the camera roll without this permission, your app will exit.</source>
          <target state="translated">iOS 11以降を実行しているデバイスをターゲットにしている場合は、 &lt;code&gt;Info.plist&lt;/code&gt; に &lt;code&gt;NSPhotoLibraryAddUsageDescription&lt;/code&gt; キーも追加する必要があります。このキーを使用して、アプリがこのデータを使用する方法を説明する文字列を定義します。このキーを &lt;code&gt;Info.plist&lt;/code&gt; に追加することで、ユーザーに書き込み専用アクセス許可をリクエストできます。この権限なしでカメラロールに保存しようとすると、アプリが終了します。</target>
        </trans-unit>
        <trans-unit id="867b1363b1951b1863ce7c40747625e01aac77fe" translate="yes" xml:space="preserve">
          <source>If you are targetting Android version &amp;lt;5, use the &lt;code&gt;AppCompatActivity&lt;/code&gt; class from the &lt;code&gt;com.android.support:appcompat&lt;/code&gt; package instead of &lt;code&gt;Activity&lt;/code&gt;.</source>
          <target state="translated">Androidバージョン&amp;lt;5を対象とする場合は、 &lt;code&gt;Activity&lt;/code&gt; ではなく、 &lt;code&gt;com.android.support:appcompat&lt;/code&gt; パッケージの &lt;code&gt;AppCompatActivity&lt;/code&gt; クラスを使用します。</target>
        </trans-unit>
        <trans-unit id="aeafd838e628b1fb71619adbdb03d13aac8abb9a" translate="yes" xml:space="preserve">
          <source>If you are using Android Studio, use &lt;code&gt;Alt + Enter&lt;/code&gt; to add all missing imports in your MyReactActivity class. Be careful to use your package&amp;rsquo;s &lt;code&gt;BuildConfig&lt;/code&gt; and not the one from the &lt;code&gt;facebook&lt;/code&gt; package.</source>
          <target state="translated">Android Studioを使用している場合は、 &lt;code&gt;Alt + Enter&lt;/code&gt; を使用して、不足しているすべてのインポートをMyReactActivityクラスに追加します。 &lt;code&gt;facebook&lt;/code&gt; パッケージからのものではなく、パッケージの &lt;code&gt;BuildConfig&lt;/code&gt; を使用するように注意してください。</target>
        </trans-unit>
        <trans-unit id="8e21d13c2e37d604133e7b70566ed82f2cafbee4" translate="yes" xml:space="preserve">
          <source>If you are using CocoaPods for React Native, make sure to include the &lt;code&gt;RCTGeolocation&lt;/code&gt; sub-podspec.</source>
          <target state="translated">CocoaPods for React Nativeを使用している場合は、必ず &lt;code&gt;RCTGeolocation&lt;/code&gt; サブポッドスペックを含めてください。</target>
        </trans-unit>
        <trans-unit id="b1e05959af9c40b3598c1051d232b2d6d679be33" translate="yes" xml:space="preserve">
          <source>If you are using CocoaPods, verify that you have added React along with the subspecs to the &lt;code&gt;Podfile&lt;/code&gt;. For example, if you were using the &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Image /&amp;gt;&lt;/code&gt; and &lt;code&gt;fetch()&lt;/code&gt; APIs, you would need to add these in your &lt;code&gt;Podfile&lt;/code&gt;:</source>
          <target state="translated">あなたはCocoaPodsを使用している場合は、あなたがにsubspecsと一緒に反応させ、追加されていることを確認し &lt;code&gt;Podfile&lt;/code&gt; 。たとえば、 &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;Image /&amp;gt;&lt;/code&gt; 、および &lt;code&gt;fetch()&lt;/code&gt; APIを使用している場合は、これらを &lt;code&gt;Podfile&lt;/code&gt; に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca9046408a373ee9b09f3c96ff542ed56522c950" translate="yes" xml:space="preserve">
          <source>If you are using Xcode or your favorite editor, build and run your native iOS application as normal. Alternatively, you can run the app from the command line using:</source>
          <target state="translated">Xcode またはお気に入りのエディタを使用している場合は、通常通りネイティブの iOS アプリケーションをビルドして実行してください。または、以下のようにコマンドラインからアプリを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="9e8a7ac3dc67068f95cb56f928b04f952201c452" translate="yes" xml:space="preserve">
          <source>If you are using a ListView, you must provide a &lt;code&gt;rowHasChanged&lt;/code&gt; function that can reduce a lot of work by quickly determining whether or not a row needs to be re-rendered. If you are using immutable data structures, this would be as simple as a reference equality check.</source>
          <target state="translated">ListViewを使用している場合は、行を再レンダリングする必要があるかどうかをすばやく判断することで多くの作業を削減できる &lt;code&gt;rowHasChanged&lt;/code&gt; 関数を提供する必要があります。不変のデータ構造を使用している場合、これは参照の等価性チェックと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="5c78a4d340add68bcaaef71914704f7d0618804b" translate="yes" xml:space="preserve">
          <source>If you are using a starter kit for React Native, replace the &quot;HelloWorld&quot; string with the one in your index.js file (it&amp;rsquo;s the first argument to the &lt;code&gt;AppRegistry.registerComponent()&lt;/code&gt; method).</source>
          <target state="translated">React Nativeのスターターキットを使用している場合は、 &quot;HelloWorld&quot;文字列をindex.jsファイル内の文字列に置き換えます（これは &lt;code&gt;AppRegistry.registerComponent()&lt;/code&gt; メソッドの最初の引数です）。</target>
        </trans-unit>
        <trans-unit id="f01bc1132a4c8163ac39b68fb07ea712997edcf0" translate="yes" xml:space="preserve">
          <source>If you can't get this to work, see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt; section in the README for Create React Native App.</source>
          <target state="translated">これが機能しない場合は、READMEのCreate React Native AppのREADMEの&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#troubleshooting&quot;&gt;トラブルシューティングの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="78f4db6e86c8da0eab6958b8d5b9e3091f43f40c" translate="yes" xml:space="preserve">
          <source>If you can't get this to work, see the &lt;a href=&quot;troubleshooting#content&quot;&gt;Troubleshooting&lt;/a&gt; page.</source>
          <target state="translated">これが機能しない場合は、&lt;a href=&quot;troubleshooting#content&quot;&gt;トラブルシューティングの&lt;/a&gt;ページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="7a0a166164154ea4aaf51a1e2101467a2f8e5cae" translate="yes" xml:space="preserve">
          <source>If you do need to call it from native, then we need to know the library's headers. To achieve that you have to go to your project's file, select &lt;code&gt;Build Settings&lt;/code&gt; and search for &lt;code&gt;Header Search Paths&lt;/code&gt;. There you should include the path to your library. (This documentation used to recommend using &lt;code&gt;recursive&lt;/code&gt;, but this is no longer recommended, as it can cause subtle build failures, especially with CocoaPods.)</source>
          <target state="translated">ネイティブから呼び出す必要がある場合は、ライブラリのヘッダーを知る必要があります。これを行うには、プロジェクトのファイルに移動する必要があります。[ &lt;code&gt;Build Settings&lt;/code&gt; を選択し、[ &lt;code&gt;Header Search Paths&lt;/code&gt; ]を検索します。そこでライブラリへのパスを含める必要があります。（このドキュメントでは、 &lt;code&gt;recursive&lt;/code&gt; 使用を推奨していましたが、特にCocoaPodsで微妙なビルドエラーを引き起こす可能性があるため、これは推奨されなくなりました。）</target>
        </trans-unit>
        <trans-unit id="28acd896507153cb9200a0006b28914e6a3454fd" translate="yes" xml:space="preserve">
          <source>If you do not call this method your background remote notifications could be throttled, to read more about it see the above documentation link.</source>
          <target state="translated">このメソッドを呼び出さなかった場合、バックグラウンドでのリモート通知がスロットルされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="734d9e6d6e18e089708f34f87c6d33f16af6fb39" translate="yes" xml:space="preserve">
          <source>If you don't have HAXM installed, click on &quot;Install HAXM&quot; or follow &lt;a href=&quot;https://github.com/intel/haxm/wiki/Installation-Instructions-on-Windows&quot;&gt;these instructions&lt;/a&gt; to set it up, then go back to the AVD Manager.</source>
          <target state="translated">HAXMをインストールしていない場合は、[Install HAXM]をクリックするか、以下&lt;a href=&quot;https://github.com/intel/haxm/wiki/Installation-Instructions-on-Windows&quot;&gt;の手順に従って&lt;/a&gt;セットアップしてから、AVD Managerに戻ります。</target>
        </trans-unit>
        <trans-unit id="207ea399ccc0398c73d4860c8a3bad07190ec627" translate="yes" xml:space="preserve">
          <source>If you don't have HAXM installed, follow &lt;a href=&quot;https://github.com/intel/haxm/wiki/Installation-Instructions-on-macOS&quot;&gt;these instructions&lt;/a&gt; to set it up, then go back to the AVD Manager.</source>
          <target state="translated">HAXMをインストールしていない場合は、次&lt;a href=&quot;https://github.com/intel/haxm/wiki/Installation-Instructions-on-macOS&quot;&gt;の手順に従って&lt;/a&gt;セットアップし、AVD Managerに戻ります。</target>
        </trans-unit>
        <trans-unit id="24118fb8a262e2db57b17f1a1869278490d1dd19" translate="yes" xml:space="preserve">
          <source>If you don't need section support and want a simpler interface, use &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セクションのサポートが不要で、よりシンプルなインターフェースが必要な場合は、&lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="32795d72a1425a4da4ae2ac3357a780f73d17afb" translate="yes" xml:space="preserve">
          <source>If you encounter a ShellCommandUnresponsiveException exception such as:</source>
          <target state="translated">などのShellCommandUnresponsiveException例外が発生した場合。</target>
        </trans-unit>
        <trans-unit id="908e619ed2d878e40f106fa684fd800ce9178beb" translate="yes" xml:space="preserve">
          <source>If you encounter an error such as &lt;code&gt;npm WARN locking Error: EACCES&lt;/code&gt; while using the React Native CLI, try running the following:</source>
          <target state="translated">&lt;code&gt;npm WARN locking Error: EACCES&lt;/code&gt; などのエラーがReact Native CLIの使用中に発生した場合は、以下を実行してみてください。</target>
        </trans-unit>
        <trans-unit id="256eafa143c61842d2067071eca222c3311a8776" translate="yes" xml:space="preserve">
          <source>If you find an issue you would like to fix, &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#your-first-pull-request&quot;&gt;open a pull request&lt;/a&gt;. Issues tagged as &lt;a href=&quot;https://github.com/facebook/react-native/labels/Good%20first%20issue&quot;&gt;&lt;em&gt;Good first issue&lt;/em&gt;&lt;/a&gt; are a good place to get started.</source>
          <target state="translated">修正したい問題を見つけたら&lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#your-first-pull-request&quot;&gt;、プルリクエストを開き&lt;/a&gt;ます。&lt;a href=&quot;https://github.com/facebook/react-native/labels/Good%20first%20issue&quot;&gt;&lt;em&gt;最初の問題&lt;/em&gt;&lt;/a&gt;としてタグ付けされた&lt;em&gt;問題&lt;/em&gt;は、開始するのに適した場所です。</target>
        </trans-unit>
        <trans-unit id="8824a1923e42b32983e75b67d5b55923f1a3af29" translate="yes" xml:space="preserve">
          <source>If you find that you need to push up a locally compiled React Native .aar and related files to a remote Nexus repository, you can.</source>
          <target state="translated">ローカルでコンパイルされたReact Nativeの.aaと関連ファイルをリモートのNexusリポジトリにプッシュアップする必要がある場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="2ff6ad794267c5c353bb2a09c43ec0df627fba41" translate="yes" xml:space="preserve">
          <source>If you find your animations with dropping frames (performing below 60 frames per second), look into using &lt;code&gt;setNativeProps&lt;/code&gt; or &lt;code&gt;shouldComponentUpdate&lt;/code&gt; to optimize them. Or you could run the animations on the UI thread rather than the JavaScript thread &lt;a href=&quot;http://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html&quot;&gt;with the useNativeDriver option&lt;/a&gt;. You may also want to defer any computationally intensive work until after animations are complete, using the &lt;a href=&quot;interactionmanager&quot;&gt;InteractionManager&lt;/a&gt;. You can monitor the frame rate by using the In-App Developer Menu &quot;FPS Monitor&quot; tool.</source>
          <target state="translated">フレームがドロップするアニメーション（毎秒60フレーム未満で実行）が &lt;code&gt;setNativeProps&lt;/code&gt; 場合は、setNativePropsまたは &lt;code&gt;shouldComponentUpdate&lt;/code&gt; を使用してそれらを最適化することを検討してください。または&lt;a href=&quot;http://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html&quot;&gt;、useNativeDriverオプションを&lt;/a&gt;使用して、JavaScriptスレッドではなくUIスレッドでアニメーションを実行することもできます。&lt;a href=&quot;interactionmanager&quot;&gt;InteractionManager&lt;/a&gt;を使用して、アニメーションが完了するまで計算集約的な作業を延期することもできます。アプリ内デベロッパーメニューの「FPSモニター」ツールを使用して、フレームレートを監視できます。</target>
        </trans-unit>
        <trans-unit id="8a8be1f074243d8da0cab32ae34f33ede2ad7a95" translate="yes" xml:space="preserve">
          <source>If you get a &quot;bridge configuration isn't available&quot; error, see &lt;a href=&quot;running-on-device#method-1-using-adb-reverse-recommended&quot;&gt;Using adb reverse&lt;/a&gt;.</source>
          <target state="translated">「ブリッジ構成を利用できません」というエラーが発生した場合は、&lt;a href=&quot;running-on-device#method-1-using-adb-reverse-recommended&quot;&gt;adb reverseの使用を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3969ba527d9ba4f574a2e35684e1ee2cc03291aa" translate="yes" xml:space="preserve">
          <source>If you get a warning such as &quot;&lt;em&gt;The &lt;code&gt;swift-2048 [Debug]&lt;/code&gt; target overrides the &lt;code&gt;FRAMEWORK_SEARCH_PATHS&lt;/code&gt; build setting defined in &lt;code&gt;Pods/Target Support Files/Pods-swift-2048/Pods-swift-2048.debug.xcconfig&lt;/code&gt;. This can lead to problems with the CocoaPods installation&lt;/em&gt;&quot;, then make sure the &lt;code&gt;Framework Search Paths&lt;/code&gt; in &lt;code&gt;Build Settings&lt;/code&gt; for both &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; only contain &lt;code&gt;$(inherited)&lt;/code&gt;.</source>
          <target state="translated">あなたのような警告が出た場合、「&lt;em&gt; &lt;code&gt;swift-2048 [Debug]&lt;/code&gt; &lt;/em&gt;&lt;em&gt;ターゲットは上書きされます&lt;/em&gt;&lt;em&gt; &lt;code&gt;FRAMEWORK_SEARCH_PATHS&lt;/code&gt; が&lt;/em&gt;&lt;em&gt;で定義されたビルド設定&lt;/em&gt;&lt;em&gt; &lt;code&gt;Pods/Target Support Files/Pods-swift-2048/Pods-swift-2048.debug.xcconfig&lt;/code&gt; &lt;/em&gt;&lt;em&gt;。これは問題につながることができますCocoaPodsをインストールする場合は、&lt;/em&gt;「 &lt;code&gt;Build Settings&lt;/code&gt; &lt;code&gt;Debug&lt;/code&gt; と &lt;code&gt;Release&lt;/code&gt; 両方の &lt;code&gt;Framework Search Paths&lt;/code&gt; に &lt;code&gt;$(inherited)&lt;/code&gt; のみが含まれていることを確認してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="efa77441fd75185d1e2504971db87d50b512ee3a" translate="yes" xml:space="preserve">
          <source>If you get an error like &lt;code&gt;Cannot find module 'npmlog'&lt;/code&gt;, try installing npm directly: &lt;code&gt;curl -0 -L https://npmjs.org/install.sh | sudo sh&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cannot find module 'npmlog'&lt;/code&gt; などのエラーが発生した場合は、npmを直接インストールしてみてください。curl &lt;code&gt;curl -0 -L https://npmjs.org/install.sh | sudo sh&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fb38f7560bc0ed51954c2a23d1bbeb762a0de86" translate="yes" xml:space="preserve">
          <source>If you have a large app you may want to consider unbundling and using inline requires. This is useful for apps that have a large number of screens which may not ever be opened during a typical usage of the app. Generally it is useful to apps that have large amounts of code that are not needed for a while after startup. For instance the app includes complicated profile screens or lesser used features, but most sessions only involve visiting the main screen of the app for updates. We can optimize the loading of the bundle by using the unbundle feature of the packager and requiring those features and screens inline (when they are actually used).</source>
          <target state="translated">大規模なアプリを使用している場合は、アンバンドルしてインライン要求を使用することを検討するとよいでしょう。これは、アプリの通常の使用時には開くことがないような画面数の多いアプリに便利です。一般的に、起動後しばらくの間は必要のない大量のコードを持つアプリに便利です。例えば、アプリには複雑なプロフィール画面やあまり使われていない機能が含まれていますが、ほとんどのセッションでは更新のためにアプリのメイン画面にアクセスするだけです。パッケージャーのアンバンドル機能を利用して、それらの機能や画面をインラインで(実際に使用する場合に)要求することで、バンドルの読み込みを最適化することができます。</target>
        </trans-unit>
        <trans-unit id="e6bbf0099e44b36f5524b2ec07c5fbcdfb3405a0" translate="yes" xml:space="preserve">
          <source>If you have a physical Android device, you can use it for development in place of an AVD by plugging it in to your computer using a USB cable and following the instructions &lt;a href=&quot;running-on-device&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">物理的なAndroidデバイスをお持ちの場合は、USBケーブルを使用してコンピューターに接続し、&lt;a href=&quot;running-on-device&quot;&gt;こちら&lt;/a&gt;の手順に従ってAVDの代わりに開発に使用できます。</target>
        </trans-unit>
        <trans-unit id="4c70c88f59c14101a33f54da16617cdd6d582141" translate="yes" xml:space="preserve">
          <source>If you have already installed Node on your system, make sure it is Node 8 or newer.</source>
          <target state="translated">すでにシステムにNodeをインストールしている場合は、Node 8以降であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="905435acf1425fefb6f025b1b85a26d14ae0dfd7" translate="yes" xml:space="preserve">
          <source>If you have already installed Node on your system, make sure it is Node 8 or newer. If you already have a JDK on your system, make sure it is version 8 or newer.</source>
          <target state="translated">すでにシステムにNodeをインストールしている場合は、Node 8以降であることを確認してください。システムにJDKが既にインストールされている場合は、それがバージョン8またはそれより新しいものであることを確認してください。</target>
        </trans-unit>
        <trans-unit id="78ef09e7e6280c353222e06a1ee25f02dc2c053c" translate="yes" xml:space="preserve">
          <source>If you have already installed Xcode on your system, make sure it is version 8 or higher.</source>
          <target state="translated">すでにXcodeをインストールしている場合は、バージョン8以上であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="f9d19d7c1199fb82ef1016466604ca8ff26ab36c" translate="yes" xml:space="preserve">
          <source>If you have any issues, ensure that your Mac and device are on the same network and can reach each other. Many open wireless networks with captive portals are configured to prevent devices from reaching other devices on the network. You may use your device's Personal Hotspot feature in this case.</source>
          <target state="translated">問題がある場合は、Macとデバイスが同じネットワーク上にあり、お互いに到達できることを確認してください。キャプティブポータルを備えたオープンワイヤレスネットワークの多くは、デバイスがネットワーク上の他のデバイスに到達できないように設定されています。この場合は、デバイスのパーソナルホットスポット機能を使用することができます。</target>
        </trans-unit>
        <trans-unit id="5f2826843b699e70f443d151cc9b23f7371bd1e6" translate="yes" xml:space="preserve">
          <source>If you have just installed Android Studio, you will likely need to &lt;a href=&quot;https://developer.android.com/studio/run/managing-avds.html&quot;&gt;create a new AVD&lt;/a&gt;. Select &quot;Create Virtual Device...&quot;, then pick any Phone from the list and click &quot;Next&quot;.</source>
          <target state="translated">Android Studioをインストールしたばかりの場合は、おそらく&lt;a href=&quot;https://developer.android.com/studio/run/managing-avds.html&quot;&gt;新しいAVD&lt;/a&gt;を作成する必要があります。「仮想デバイスの作成...」を選択し、リストから任意の電話を選択して「次へ」をクリックします。</target>
        </trans-unit>
        <trans-unit id="89b3283a8223db6eb235760a4013ba47660eb3af" translate="yes" xml:space="preserve">
          <source>If you have questions about using React Native, the &lt;a href=&quot;http://facebook.github.io/react-native/help.html&quot;&gt;Community page&lt;/a&gt; list various resources that should help you get started.</source>
          <target state="translated">React Nativeの使用について質問がある場合は、&lt;a href=&quot;http://facebook.github.io/react-native/help.html&quot;&gt;コミュニティーページ&lt;/a&gt;に、始めるのに役立つさまざまなリソースがリストされています。</target>
        </trans-unit>
        <trans-unit id="f31659395ab1b8e0a4ec91d38cd18cbd259ff5a8" translate="yes" xml:space="preserve">
          <source>If you haven't already, &lt;a href=&quot;https://code.facebook.com/cla&quot;&gt;sign the CLA&lt;/a&gt;.</source>
          <target state="translated">まだ&lt;a href=&quot;https://code.facebook.com/cla&quot;&gt;署名し&lt;/a&gt;ていない場合は、CLAに署名してください。</target>
        </trans-unit>
        <trans-unit id="95f257f03a7ffada370a1e2cbab42bc908abb368" translate="yes" xml:space="preserve">
          <source>If you identified a JS problem, look for clues in the specific JS that you're executing. In the scenario above, we see &lt;code&gt;RCTEventEmitter&lt;/code&gt; being called multiple times per frame. Here's a zoom-in of the JS thread from the trace above:</source>
          <target state="translated">JSの問題を特定した場合は、実行している特定のJSで手掛かりを探します。上記のシナリオでは、 &lt;code&gt;RCTEventEmitter&lt;/code&gt; がフレームごとに複数回呼び出されています。上記のトレースからのJSスレッドのズームインは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0d8d3d87fcc079aaa4f6b4e052f3098a5005e559" translate="yes" xml:space="preserve">
          <source>If you identified a native UI problem, there are usually two scenarios:</source>
          <target state="translated">ネイティブ UI の問題を特定した場合、通常は 2 つのシナリオがあります。</target>
        </trans-unit>
        <trans-unit id="f79b704a02aa9c3fb09e24dab7f1328c6868c385" translate="yes" xml:space="preserve">
          <source>If you intend to change the public API, or make any non-trivial changes to the implementation, we recommend &lt;a href=&quot;https://github.com/facebook/react-native/issues/new?title=%5BProposal%5D&quot;&gt;filing an issue&lt;/a&gt; that includes &lt;code&gt;[Proposal]&lt;/code&gt; in the title. This lets us reach an agreement on your proposal before you put significant effort into it. These types of issues should be rare. If you have been contributing to the project long enough, you will probably already have access to the &lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/&quot;&gt;React Native Core Contributors&lt;/a&gt; Facebook Group, where this sort of discussion is usually held.</source>
          <target state="translated">パブリックAPIを変更する場合、または実装に重要な変更を加える場合は、タイトルに &lt;code&gt;[Proposal]&lt;/code&gt; を含む&lt;a href=&quot;https://github.com/facebook/react-native/issues/new?title=%5BProposal%5D&quot;&gt;問題&lt;/a&gt;を提出することをお勧めします。これにより、大幅な努力を払う前に、提案について合意に達することができます。これらのタイプの問題はまれです。プロジェクトに十分な期間貢献してきた場合は、おそらくこの種のディスカッションが通常行われている&lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/&quot;&gt;React Native Core Contributors&lt;/a&gt; Facebook Groupにすでにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="65d9e511c02255b688a4ba058139b96e7496fb0c" translate="yes" xml:space="preserve">
          <source>If you just read through this website, you should be able to build a pretty cool React Native app. But React Native isn't just a product made by one company - it's a community of thousands of developers. So if you're interested in React Native, here's some related stuff you might want to check out.</source>
          <target state="translated">このウェブサイトを読むだけで、かなりクールなReact Nativeアプリを作ることができるはずです。しかし、React Nativeは一企業が作った製品ではなく、何千人もの開発者のコミュニティです。もしあなたがReact Nativeに興味を持っているのであれば、以下の関連記事をチェックしてみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="3c42e29cc54af6e298354121f35ba4ecd01462fc" translate="yes" xml:space="preserve">
          <source>If you know that you'll eventually need to include your own native code, Create React Native App is still a good way to get started. In that case you'll just need to &quot;&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#ejecting-from-create-react-native-app&quot;&gt;eject&lt;/a&gt;&quot; eventually to create your own native builds. If you do eject, the &quot;Building Projects with Native Code&quot; instructions will be required to continue working on your project.</source>
          <target state="translated">最終的に独自のネイティブコードを含める必要があることがわかっている場合でも、Create React Native Appは、始めるための良い方法です。その場合、独自のネイティブビルドを作成するには、最終的に「&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#ejecting-from-create-react-native-app&quot;&gt;排出&lt;/a&gt;」する必要があるだけです。イジェクトした場合、プロジェクトでの作業を続行するには、「ネイティブコードを使用したプロジェクトのビルド」の指示が必要になります。</target>
        </trans-unit>
        <trans-unit id="e0337ac88674e9a3e330df51330d772e3a6486fa" translate="yes" xml:space="preserve">
          <source>If you look at the implementation of &lt;code&gt;setNativeProps&lt;/code&gt; in &lt;a href=&quot;https://github.com/facebook/react/blob/master/src/renderers/native/NativeMethodsMixin.js&quot;&gt;NativeMethodsMixin.js&lt;/a&gt; you will notice that it is a wrapper around &lt;code&gt;RCTUIManager.updateView&lt;/code&gt; - this is the exact same function call that results from re-rendering - see &lt;a href=&quot;https://github.com/facebook/react/blob/master/src/renderers/native/ReactNativeBaseComponent.js&quot;&gt;receiveComponent in ReactNativeBaseComponent.js&lt;/a&gt;.</source>
          <target state="translated">あなたはの実装を見れば &lt;code&gt;setNativeProps&lt;/code&gt; で&lt;a href=&quot;https://github.com/facebook/react/blob/master/src/renderers/native/NativeMethodsMixin.js&quot;&gt;NativeMethodsMixin.js&lt;/a&gt;あなたはそれがラッパーであることがわかります &lt;code&gt;RCTUIManager.updateView&lt;/code&gt; -参照-これは再レンダリングの結果はまったく同じことを関数呼び出しである&lt;a href=&quot;https://github.com/facebook/react/blob/master/src/renderers/native/ReactNativeBaseComponent.js&quot;&gt;ReactNativeBaseComponent.jsでreceiveComponentを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a7a28b1f4c7827fcd704b9cc276d230b99b15a3" translate="yes" xml:space="preserve">
          <source>If you made changes to React Native and submit a pull request, all tests will run on your pull request automatically. To run the tests locally, see &lt;a href=&quot;testing&quot;&gt;Testing your Changes&lt;/a&gt;.</source>
          <target state="translated">React Nativeに変更を加えてプルリクエストを送信すると、すべてのテストがプルリクエストで自動的に実行されます。テストをローカルで実行するには&lt;a href=&quot;testing&quot;&gt;、変更のテストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2d104ed5b9bec8091e7a9ccdd5fa95755b6f0262" translate="yes" xml:space="preserve">
          <source>If you make a change that affects a snapshot test in a PR, such as adding a new example case to one of the examples that is snapshotted, you'll need to re-record the snapshot reference image. To do this, simply change to &lt;code&gt;_runner.recordMode = YES;&lt;/code&gt; in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/RNTester/RNTesterIntegrationTests/RNTesterSnapshotTests.m#L42&quot;&gt;RNTester/RNTesterSnapshotTests.m&lt;/a&gt;, re-run the failing tests, then flip record back to &lt;code&gt;NO&lt;/code&gt; and submit/update your PR and wait to see if the Circle build passes.</source>
          <target state="translated">スナップショットが作成されたサンプルの1つに新しいサンプルケースを追加するなど、PRのスナップショットテストに影響を与える変更を行った場合は、スナップショットの参照イメージを再記録する必要があります。これを行うには、単に &lt;code&gt;_runner.recordMode = YES;&lt;/code&gt; 変更します。で&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/RNTester/RNTesterIntegrationTests/RNTesterSnapshotTests.m#L42&quot;&gt;RNTester / RNTesterSnapshotTests.m&lt;/a&gt;、その後、フリップレコードフェイルバックテストを再実行して &lt;code&gt;NO&lt;/code&gt; をして提出/あなたのPRを更新し、サークルのビルドが通るかどうかを確認するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="d98923cbac42bc3bdbb3ed26b4f058d794e74fd2" translate="yes" xml:space="preserve">
          <source>If you need section support, use &lt;a href=&quot;sectionlist&quot;&gt;&lt;code&gt;&amp;lt;SectionList&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セクションのサポートが必要な場合は、&lt;a href=&quot;sectionlist&quot;&gt; &lt;code&gt;&amp;lt;SectionList&amp;gt;&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="808ff7d26547f4efcec5ce1df59e09f1f93a733b" translate="yes" xml:space="preserve">
          <source>If you need to access to the &lt;code&gt;DevSettingsActivity&lt;/code&gt; add to your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;DevSettingsActivity&lt;/code&gt; にアクセスする必要がある場合は、 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="d45e8703d461675a62e377092b237bbbb74155a8" translate="yes" xml:space="preserve">
          <source>If you need to handle a tap gesture but you don't want any feedback to be displayed, use &lt;a href=&quot;touchablewithoutfeedback&quot;&gt;&lt;strong&gt;TouchableWithoutFeedback&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">タップジェスチャを処理する必要があるが、フィードバックを表示したくない場合は、&lt;a href=&quot;touchablewithoutfeedback&quot;&gt;&lt;strong&gt;TouchableWithoutFeedbackを&lt;/strong&gt;&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="21b84c611725faef61bea54fda9ec05ecf854ff7" translate="yes" xml:space="preserve">
          <source>If you noticed chop, however, you might see something like this:</source>
          <target state="translated">しかし、チョップに気がついたら、こんな感じのものが出てくるかもしれません。</target>
        </trans-unit>
        <trans-unit id="78fd14aa10e8ba8e1efb9ef05ffaf286dc71e797" translate="yes" xml:space="preserve">
          <source>If you plan to make changes in Java code, we recommend enabling &lt;a href=&quot;https://docs.gradle.org/2.9/userguide/gradle_daemon.html&quot;&gt;Gradle Daemon&lt;/a&gt; to speed up builds.</source>
          <target state="translated">Javaコードを変更する場合は、&lt;a href=&quot;https://docs.gradle.org/2.9/userguide/gradle_daemon.html&quot;&gt;Gradle Daemon&lt;/a&gt;を有効にしてビルドを高速化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="71f06e7d505ec53f5e0163059839ef2e6041bfd7" translate="yes" xml:space="preserve">
          <source>If you run into any issues, it may be possible that one of your Chrome extensions is interacting in unexpected ways with the debugger. Try disabling all of your extensions and re-enabling them one-by-one until you find the problematic extension.</source>
          <target state="translated">問題が発生した場合は、Chrome 拡張機能のいずれかがデバッガーと予期せぬ方法で相互作用している可能性があります。問題のある拡張機能が見つかるまで、すべての拡張機能を無効にして、1 つずつ有効にしなおしてみてください。</target>
        </trans-unit>
        <trans-unit id="0411a7bbb7629d39e8df988f571f12fd132e79da" translate="yes" xml:space="preserve">
          <source>If you run into any issues, please take a look at Apple's &lt;a href=&quot;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/LaunchingYourApponDevices/LaunchingYourApponDevices.html#//apple_ref/doc/uid/TP40012582-CH27-SW4&quot;&gt;Launching Your App on a Device&lt;/a&gt; docs.</source>
          <target state="translated">問題が発生した場合は、Appleの&lt;a href=&quot;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/LaunchingYourApponDevices/LaunchingYourApponDevices.html#//apple_ref/doc/uid/TP40012582-CH27-SW4&quot;&gt;「デバイスでのアプリ&lt;/a&gt;の起動」ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4ac0568bbe9d1e5690c818c6fd1723d1b629820e" translate="yes" xml:space="preserve">
          <source>If you run into issues where running &lt;code&gt;react-native init&lt;/code&gt; hangs in your system, try running it again in verbose mode and refering to &lt;a href=&quot;https://github.com/facebook/react-native/issues/2797&quot;&gt;#2797&lt;/a&gt; for common causes:</source>
          <target state="translated">システムで &lt;code&gt;react-native init&lt;/code&gt; がハングする問題に遭遇した場合は、冗長モードでもう一度実行して、一般的な原因について&lt;a href=&quot;https://github.com/facebook/react-native/issues/2797&quot;&gt;＃2797&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8829c5586dd1afe149687650e52831acbe29df02" translate="yes" xml:space="preserve">
          <source>If you run this you will immediately see this error: &lt;code&gt;Touchable child must either be native or forward setNativeProps to a native component&lt;/code&gt;. This occurs because &lt;code&gt;MyButton&lt;/code&gt; isn't directly backed by a native view whose opacity should be set. You can think about it like this: if you define a component with &lt;code&gt;createReactClass&lt;/code&gt; you would not expect to be able to set a style prop on it and have that work - you would need to pass the style prop down to a child, unless you are wrapping a native component. Similarly, we are going to forward &lt;code&gt;setNativeProps&lt;/code&gt; to a native-backed child component.</source>
          <target state="translated">これを実行すると、すぐに次のエラーが表示され &lt;code&gt;Touchable child must either be native or forward setNativeProps to a native component&lt;/code&gt; 。タッチ可能な子はネイティブであるか、setNativePropsをネイティブコンポーネントに転送する必要があります。これは、 &lt;code&gt;MyButton&lt;/code&gt; が不透明度を設定する必要があるネイティブビューによって直接サポートされていないために発生します。次のように考えることができます： &lt;code&gt;createReactClass&lt;/code&gt; でコンポーネントを定義する場合、スタイルプロップを設定してその機能を期待することはできません-あなたがそうでなければ、スタイルプロップを子に渡す必要がありますネイティブコンポーネントをラップします。同様に、 &lt;code&gt;setNativeProps&lt;/code&gt; をネイティブの子コンポーネントに転送します。</target>
        </trans-unit>
        <trans-unit id="d35cd1ffc7842f423ff2c2b426b8170304d2b897" translate="yes" xml:space="preserve">
          <source>If you saw a warning about the peerDependency, also upgrade &lt;code&gt;react&lt;/code&gt; by running:</source>
          <target state="translated">peerDependencyに関する警告が表示された場合は、次のコマンドを実行してアップグレードの &lt;code&gt;react&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="1d279a1e6f34e3fe16f6b716b86b2f343d818a8c" translate="yes" xml:space="preserve">
          <source>If you specify one button, it will be the 'positive' one (such as 'OK')</source>
          <target state="translated">1つのボタンを指定すると、それは「正」のボタンになります(「OK」など)。</target>
        </trans-unit>
        <trans-unit id="4dc8cbca4d71860e6126327d8937c724766e79e6" translate="yes" xml:space="preserve">
          <source>If you start your service from a &lt;code&gt;BroadcastReceiver&lt;/code&gt;, make sure to call &lt;code&gt;HeadlessJsTaskService.acquireWakeLockNow()&lt;/code&gt; before returning from &lt;code&gt;onReceive()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BroadcastReceiver&lt;/code&gt; からサービスを開始する場合は、 &lt;code&gt;onReceive()&lt;/code&gt; から戻る前に必ず &lt;code&gt;HeadlessJsTaskService.acquireWakeLockNow()&lt;/code&gt; を呼び出してください。</target>
        </trans-unit>
        <trans-unit id="4c08476eb5c103b9788c84dfbeef4cfaeb4df3ff" translate="yes" xml:space="preserve">
          <source>If you update a property that is also managed by the render function, you might end up with some unpredictable and confusing bugs because anytime the component re-renders and that property changes, whatever value was previously set from &lt;code&gt;setNativeProps&lt;/code&gt; will be completely ignored and overridden.</source>
          <target state="translated">render関数でも管理されているプロパティを更新すると、コンポーネントが再レンダリングされてそのプロパティが変更される &lt;code&gt;setNativeProps&lt;/code&gt; に、以前にsetNativePropsから設定された値が完全に無視されてオーバーライドされるため、予期しない混乱するバグが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="52412dec37b4e504993becccf24dd0dc0854d865" translate="yes" xml:space="preserve">
          <source>If you use 3rd-party React Native modules, you need to override their dependencies so that they don't bundle the pre-compiled library. Otherwise you'll get an error while compiling - &lt;code&gt;Error: more than one library with package name 'com.facebook.react'&lt;/code&gt;.</source>
          <target state="translated">サードパーティのReact Nativeモジュールを使用する場合は、それらが依存関係をオーバーライドして、コンパイル済みライブラリがバンドルされないようにする必要があります。そうしないと、コンパイル中にエラーが発生します- &lt;code&gt;Error: more than one library with package name 'com.facebook.react'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff920b77d7c73fa60ae5c51db25b7a4761ff77f5" translate="yes" xml:space="preserve">
          <source>If you use several instances of the same React Native component and you want to distinguish them from the perspective of your event, you'll likely need to introduce identifiers and pass them along with events (you can use the native view's &lt;code&gt;reactTag&lt;/code&gt; as an identifier).</source>
          <target state="translated">同じReact Nativeコンポーネントの複数のインスタンスを使用していて、それらをイベントの観点から区別したい場合は、識別子を導入し、それらをイベントと一緒に渡す必要があります（ネイティブビューの &lt;code&gt;reactTag&lt;/code&gt; を識別子として使用できます）。 。</target>
        </trans-unit>
        <trans-unit id="d5b7da4cf8caf1a334e5ef33417d07226a6440fe" translate="yes" xml:space="preserve">
          <source>If you used Create React Native App to set up your project, you can preview your app on a device by scanning the QR code with the Expo app. In order to build and run your app on a device, you will need to eject and install the native code dependencies from the &lt;a href=&quot;getting-started&quot;&gt;Getting Started guide&lt;/a&gt;.</source>
          <target state="translated">Create React Native Appを使用してプロジェクトを設定した場合は、ExpoアプリでQRコードをスキャンすることにより、デバイスでアプリをプレビューできます。デバイスでアプリをビルドして実行するには、&lt;a href=&quot;getting-started&quot;&gt;スタートガイド&lt;/a&gt;からネイティブコードの依存関係を取り出してインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="6f65a636580931872be5381a089ff56360e030e6" translate="yes" xml:space="preserve">
          <source>If you want to add this new React Native code to an existing application, check out the &lt;a href=&quot;integration-with-existing-apps&quot;&gt;Integration guide&lt;/a&gt;.</source>
          <target state="translated">この新しいReact Nativeコードを既存のアプリケーションに追加する場合は、&lt;a href=&quot;integration-with-existing-apps&quot;&gt;統合ガイドを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="04fbb7cc854d5b1dcff7ce493b4b9c6308523c86" translate="yes" xml:space="preserve">
          <source>If you want to check if any installed app can handle a given URL beforehand you can call</source>
          <target state="translated">インストールされているアプリが指定されたURLを扱えるかどうかを事前にチェックしたい場合は</target>
        </trans-unit>
        <trans-unit id="08f89df0522c9eb20cb4c01e648774a540298514" translate="yes" xml:space="preserve">
          <source>If you want to ensure that you are always using a specific React Native version in your native build, replace &lt;code&gt;+&lt;/code&gt; with an actual React Native version you've downloaded from &lt;code&gt;npm&lt;/code&gt;.</source>
          <target state="translated">ネイティブビルドで常に特定のReact Nativeバージョンを使用していることを確認するには、 &lt;code&gt;+&lt;/code&gt; を &lt;code&gt;npm&lt;/code&gt; からダウンロードした実際のReact Nativeバージョンに置き換えます。</target>
        </trans-unit>
        <trans-unit id="989128ec7001153dfc47bd349d1c67a0c9b76187" translate="yes" xml:space="preserve">
          <source>If you want to pass error-like objects to JavaScript, use &lt;code&gt;RCTMakeError&lt;/code&gt; from &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTUtils.h&quot;&gt;&lt;code&gt;RCTUtils.h&lt;/code&gt;&lt;/a&gt;. Right now this just passes an Error-shaped dictionary to JavaScript, but we would like to automatically generate real JavaScript &lt;code&gt;Error&lt;/code&gt; objects in the future.</source>
          <target state="translated">あなたはJavaScriptにエラーのようなオブジェクトを渡したい場合は、使用 &lt;code&gt;RCTMakeError&lt;/code&gt; をから&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTUtils.h&quot;&gt; &lt;code&gt;RCTUtils.h&lt;/code&gt; &lt;/a&gt;。現在、これはエラー型のディクショナリをJavaScriptに渡すだけですが、将来的には実際のJavaScript &lt;code&gt;Error&lt;/code&gt; オブジェクトを自動的に生成したいと考えています。</target>
        </trans-unit>
        <trans-unit id="bdc9fef6352be4177ed1a4f9e2abe060a2d20647" translate="yes" xml:space="preserve">
          <source>If you want to position a child relative to something that is not its parent, just don't use styles for that. Use the component tree.</source>
          <target state="translated">親ではないものに対して子を相対的に配置したい場合は、スタイルを使用しないでください。コンポーネントツリーを使います。</target>
        </trans-unit>
        <trans-unit id="c73d93e475d8fda65eb6afb31fe93a2d01b3bce5" translate="yes" xml:space="preserve">
          <source>If you want to position a child using specific numbers of logical pixels relative to its parent, set the child to have &lt;code&gt;absolute&lt;/code&gt; position.</source>
          <target state="translated">親に対して相対的な特定の数の論理ピクセルを使用して子を配置する場合は、子を &lt;code&gt;absolute&lt;/code&gt; 位置に設定します。</target>
        </trans-unit>
        <trans-unit id="a492c6a27684a37e4db5bd7cc45b27445b0e7963" translate="yes" xml:space="preserve">
          <source>If you want to render a set of data broken into logical sections, maybe with section headers, similar to &lt;code&gt;UITableView&lt;/code&gt;s on iOS, then a &lt;a href=&quot;sectionlist&quot;&gt;SectionList&lt;/a&gt; is the way to go.</source>
          <target state="translated">iOSの &lt;code&gt;UITableView&lt;/code&gt; のように、データのセットを論理セクションに分割し、セクションヘッダーを使用してレンダリングする場合は、&lt;a href=&quot;sectionlist&quot;&gt;SectionList&lt;/a&gt;が適しています。</target>
        </trans-unit>
        <trans-unit id="ff04973c203485c1d3579dcc3633baa1a99e7b31" translate="yes" xml:space="preserve">
          <source>If you wish to receive the intent in an existing instance of MainActivity, you may set the &lt;code&gt;launchMode&lt;/code&gt; of MainActivity to &lt;code&gt;singleTask&lt;/code&gt; in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. See &lt;a href=&quot;http://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt;&lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">あなたはMainActivityの既存のインスタンスに意図を入手したい場合には、設定すること &lt;code&gt;launchMode&lt;/code&gt; にMainActivityのを &lt;code&gt;singleTask&lt;/code&gt; に &lt;code&gt;AndroidManifest.xml&lt;/code&gt; を。詳細については、&lt;a href=&quot;http://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt; &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="34974a7b6333dd4d47937da2f81d7c97df0e2bfd" translate="yes" xml:space="preserve">
          <source>If you would like to request a new feature or enhancement but are not yet thinking about opening a pull request, we have a &lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;place to track feature requests&lt;/a&gt;.</source>
          <target state="translated">新しい機能や拡張機能をリクエストしたいがプルリクエストを開くことをまだ検討していない場合は、&lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;機能リクエストを追跡することができます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a7351691461fcaf1832d5ad6e1302279bd6c5d6c" translate="yes" xml:space="preserve">
          <source>If you would like to set such things as the HTTP-Verb, Headers or a Body along with the image request, you may do this by defining these properties on the source object:</source>
          <target state="translated">HTTP-Verb、ヘッダ、ボディなどを画像リクエストと一緒に設定したい場合は、ソースオブジェクトにこれらのプロパティを定義することで、これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="b53c5c457aa5e479d2eafd76fba1ff1692750d39" translate="yes" xml:space="preserve">
          <source>If you'd like to achieve a native look and feel on both iOS and Android, or you're integrating React Native into an app that already manages navigation natively, the following libraries provide native navigation on both platforms: &lt;a href=&quot;http://airbnb.io/native-navigation/&quot;&gt;native-navigation&lt;/a&gt;, &lt;a href=&quot;https://github.com/wix/react-native-navigation&quot;&gt;react-native-navigation&lt;/a&gt;.</source>
          <target state="translated">iOSとAndroidの両方でネイティブのルックアンドフィールを実現したい場合、またはナビゲーションをネイティブで管理しているアプリにReact Nativeを統合する場合、次のライブラリーは両方のプラットフォームでネイティブナビゲーションを提供します：&lt;a href=&quot;http://airbnb.io/native-navigation/&quot;&gt;native-navigation&lt;/a&gt;、&lt;a href=&quot;https://github.com/wix/react-native-navigation&quot;&gt;react-ネイティブナビゲーション&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="590474d5a014532bba91c05a16b11efa1b70253c" translate="yes" xml:space="preserve">
          <source>If you're curious to learn more about React Native, continue on to the &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt;.</source>
          <target state="translated">React Nativeについて詳しく知りたい場合は、&lt;a href=&quot;tutorial&quot;&gt;チュートリアルに&lt;/a&gt;進んでください。</target>
        </trans-unit>
        <trans-unit id="9f9520c16f2c7b61640591551549a03a8807cea5" translate="yes" xml:space="preserve">
          <source>If you're integrating React Native into an existing project, you'll want to skip Create React Native App and go directly to setting up the native build environment. Select &quot;Building Projects with Native Code&quot; above for instructions on configuring a native build environment for React Native.</source>
          <target state="translated">既存のプロジェクトにReact Nativeを統合する場合は、React Nativeアプリの作成をスキップして、直接ネイティブビルド環境の設定に進みます。React Native のネイティブビルド環境を設定する方法については、上記の「ネイティブコードでプロジェクトを構築する」を選択してください。</target>
        </trans-unit>
        <trans-unit id="8bb769f0b299bd8f8998f6bc2722e6601a24f82f" translate="yes" xml:space="preserve">
          <source>If you're looking for a library that does a specific thing, check out &lt;a href=&quot;http://www.awesome-react-native.com/&quot;&gt;Awesome React Native&lt;/a&gt;, a curated list of components that also has demos, articles, and other stuff.</source>
          <target state="translated">特定のことを行うライブラリを探している場合は、デモ、記事、およびその他のものも含まれているコンポーネントの精選されたリストである&lt;a href=&quot;http://www.awesome-react-native.com/&quot;&gt;Awesome React Nativeを&lt;/a&gt;チェックしてください。</target>
        </trans-unit>
        <trans-unit id="7a245f652eacb668eda59d97ceaaec2ba4104cee" translate="yes" xml:space="preserve">
          <source>If you're only fixing a bug, it's fine to submit a pull request right away but we still recommend to file an issue detailing what you're fixing. This is helpful in case we don't accept that specific fix but want to keep track of the issue.</source>
          <target state="translated">バグを修正するだけであれば、すぐにプルリクエストを提出しても構いませんが、何を修正しているのかを詳細に記載した課題を提出することをお勧めします。これは、特定の修正を受け付けないが、問題を追跡したい場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="04971e23f04a87e7a9ae34a9bdd7ef776fb5670d" translate="yes" xml:space="preserve">
          <source>If you're only targeting iOS, you may want to also check out &lt;a href=&quot;navigation#navigatorios&quot;&gt;NavigatorIOS&lt;/a&gt; as a way of providing a native look and feel with minimal configuration, as it provides a wrapper around the native &lt;code&gt;UINavigationController&lt;/code&gt; class. This component will not work on Android, however.</source>
          <target state="translated">iOSのみを対象としている場合、ネイティブの &lt;code&gt;UINavigationController&lt;/code&gt; クラスのラッパーを提供するため、最小限の構成でネイティブのルックアンドフィールを提供する方法として&lt;a href=&quot;navigation#navigatorios&quot;&gt;NavigatorIOS&lt;/a&gt;もチェックすることをお勧めします。ただし、このコンポーネントはAndroidでは機能しません。</target>
        </trans-unit>
        <trans-unit id="647499582180c5f6c2f31fb9c0d3e8adc7451471" translate="yes" xml:space="preserve">
          <source>If you're targeting iOS 8.x or older, you can use the following code instead:</source>
          <target state="translated">iOS 8.x以前を対象としている場合は、代わりに以下のコードを使用することができます。</target>
        </trans-unit>
        <trans-unit id="c83fec1d6c0e955c6ac3bedea00c5e1f1d3b208f" translate="yes" xml:space="preserve">
          <source>If you're using Create React Native App, console logs already appear in the same terminal output as the packager.</source>
          <target state="translated">Create React Native Appを使用している場合、コンソールログはすでにパッケージャーと同じターミナル出力に表示されています。</target>
        </trans-unit>
        <trans-unit id="a32b0f9ee7ed7b3ee5fe846aad675b0c58fc145a" translate="yes" xml:space="preserve">
          <source>If you're using Create React Native App, this is configured for you already.</source>
          <target state="translated">Create React Native Appを使用している場合は、すでに設定されています。</target>
        </trans-unit>
        <trans-unit id="66ea57047c8cc84e6fb819a3631cdbe4489b79be" translate="yes" xml:space="preserve">
          <source>If you're using React Native, you probably already know about &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. So I feel a bit silly mentioning this. But if you haven't, check out React - it's the best way to build a modern website.</source>
          <target state="translated">React Nativeを使用している場合は、おそらくすでに&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;について知っているでしょう。だから私はこれについて少しばかげていると思います。しかし、そうでない場合は、Reactをチェックしてください。これは、最新のWebサイトを構築するための最良の方法です。</target>
        </trans-unit>
        <trans-unit id="4549db902f4d23e60cbe12d627506bc3b58e70d5" translate="yes" xml:space="preserve">
          <source>If you've added a new module, add a &lt;code&gt;@providesModule &amp;lt;moduleName&amp;gt;&lt;/code&gt; at the end of the comment. This will allow the haste package manager to find it.</source>
          <target state="translated">新しいモジュールを追加した &lt;code&gt;@providesModule &amp;lt;moduleName&amp;gt;&lt;/code&gt; は、コメントの最後に@providesModule &amp;lt;moduleName&amp;gt;を追加します。これにより、急いでパッケージマネージャーがそれを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="921d59ac6a6c549642fe23e21b9069eb4c206173" translate="yes" xml:space="preserve">
          <source>If you've added code that should be tested, add tests!</source>
          <target state="translated">テストすべきコードを追加した場合は、テストを追加してください!</target>
        </trans-unit>
        <trans-unit id="aa3b8ad64e63ba6d03ee298d813ad7f775f38c54" translate="yes" xml:space="preserve">
          <source>If you've changed APIs, update the documentation via an additional PR to the &lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;react-native-website&lt;/a&gt; repo.</source>
          <target state="translated">APIを変更した場合は、追加のPRを介して、&lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;react-native-website&lt;/a&gt;リポジトリのドキュメントを更新してください。</target>
        </trans-unit>
        <trans-unit id="5df1afffd6600abe0819fef28296cb2271c8ee07" translate="yes" xml:space="preserve">
          <source>If you've gotten here by reading linearly through the tutorial, then you are a pretty impressive human being. Congratulations. Next, you might want to check out &lt;a href=&quot;more-resources&quot;&gt;all the cool stuff the community does with React Native&lt;/a&gt;.</source>
          <target state="translated">チュートリアルを直線的に読んでここに到達した場合、あなたはかなり印象的な人間です。おめでとう。次に、&lt;a href=&quot;more-resources&quot;&gt;コミュニティがReact Nativeで&lt;/a&gt;行うすべてのすばらしい機能をチェックすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="45f68e11928e0ddb05f682925ff3b2d1d3346623" translate="yes" xml:space="preserve">
          <source>If you've updated the docs, verify the website locally and submit screenshots if applicable (see the &lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;react-native-website&lt;/a&gt; README).</source>
          <target state="translated">ドキュメントを更新した場合は、ローカルでWebサイトを確認し、必要に応じてスクリーンショットを送信します（&lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;react-native-website&lt;/a&gt; READMEを参照）。</target>
        </trans-unit>
        <trans-unit id="ad2f4e549af45b5361cf3a980a969e70cc61ade8" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;FlatList&lt;/code&gt;&lt;/a&gt; is rendering slow, be sure that you've implemented &lt;a href=&quot;flatlist#getitemlayout&quot;&gt;&lt;code&gt;getItemLayout&lt;/code&gt;&lt;/a&gt; to optimize rendering speed by skipping measurement of the rendered items.</source>
          <target state="translated">あなたの場合は&lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;FlatList&lt;/code&gt; が&lt;/a&gt;遅いレンダリングされ、あなたが実装されてきたことを確認してください&lt;a href=&quot;flatlist#getitemlayout&quot;&gt; &lt;code&gt;getItemLayout&lt;/code&gt; を&lt;/a&gt;レンダリング項目の測定をスキップしてレンダリング速度を最適化します。</target>
        </trans-unit>
        <trans-unit id="4dce5e8a5780a0d999cb110e968f6ce86eadd905" translate="yes" xml:space="preserve">
          <source>If your app is targeting the Android &lt;code&gt;API level 23&lt;/code&gt; or greater, make sure you have the permission &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; enabled for the development build. You can check this with &lt;code&gt;Settings.canDrawOverlays(this);&lt;/code&gt;. This is required in dev builds because React Native development errors must be displayed above all the other windows. Due to the new permissions system introduced in the API level 23 (Android M), the user needs to approve it. This can be achieved by adding the following code to your Activity's in &lt;code&gt;onCreate()&lt;/code&gt; method.</source>
          <target state="translated">アプリがAndroid &lt;code&gt;API level 23&lt;/code&gt; 以上をターゲットにしている場合は、開発ビルドで &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; 権限が有効になっていることを確認してください。これは、 &lt;code&gt;Settings.canDrawOverlays(this);&lt;/code&gt; で確認できます。。React Native開発エラーを他のすべてのウィンドウの上に表示する必要があるため、これは開発ビルドで必要です。APIレベル23（Android M）で導入された新しい権限システムのため、ユーザーはそれを承認する必要があります。これは、アクティビティの &lt;code&gt;onCreate()&lt;/code&gt; メソッドに次のコードを追加することで実現できます。</target>
        </trans-unit>
        <trans-unit id="aaa442e9c8534c08d7ebc94f0ea858802d7e66dd" translate="yes" xml:space="preserve">
          <source>If your app is using &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal Links&lt;/a&gt;, you'll need to add the following code as well:</source>
          <target state="translated">アプリで&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;ユニバーサルリンク&lt;/a&gt;を使用している場合は、次のコードも追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="98f05ecc27e0540e6eadcbb6a7104c7b369c9d08" translate="yes" xml:space="preserve">
          <source>If your app was launched from an external url registered to your app you can access and handle it from any component you want with</source>
          <target state="translated">アプリに登録されている外部URLからアプリが起動した場合は、任意のコンポーネントからアクセスして処理することができます。</target>
        </trans-unit>
        <trans-unit id="4ee31af7ae001109d3dabcf23621de35076babd7" translate="yes" xml:space="preserve">
          <source>If your application needs to access HTTP resources on production, see &lt;a href=&quot;http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/&quot;&gt;this post&lt;/a&gt; to learn how to configure ATS on your project.</source>
          <target state="translated">アプリケーションが本番環境のHTTPリソースにアクセスする必要がある場合は、&lt;a href=&quot;http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/&quot;&gt;この投稿&lt;/a&gt;を参照して、プロジェクトでATSを構成する方法を学んでください。</target>
        </trans-unit>
        <trans-unit id="de744dbb2078d4140232bc4870a395c91664c0b4" translate="yes" xml:space="preserve">
          <source>If your pull request is merged, a core contributor will update the &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Breaking-Changes&quot;&gt;list of breaking changes&lt;/a&gt; which is then used to populate the release notes.</source>
          <target state="translated">プルリクエストがマージされた場合、コアコントリビューターが重大&lt;a href=&quot;https://github.com/facebook/react-native/wiki/Breaking-Changes&quot;&gt;な変更&lt;/a&gt;のリストを更新し、リリースノートへの入力に使用されます。</target>
        </trans-unit>
        <trans-unit id="b071d71588767fbde5b53687390f45cfe83ec688" translate="yes" xml:space="preserve">
          <source>If your trace .html file isn't opening correctly, check your browser console for the following:</source>
          <target state="translated">トレース .html ファイルが正しく開かない場合は、ブラウザのコンソールで以下の内容を確認してください。</target>
        </trans-unit>
        <trans-unit id="50e19fda0d5b4b74a4a1a1d584e56578693a4ea4" translate="yes" xml:space="preserve">
          <source>Image</source>
          <target state="translated">Image</target>
        </trans-unit>
        <trans-unit id="8c5c533b00a53925bd9f4a98f7ccff66e76090ea" translate="yes" xml:space="preserve">
          <source>Image Style Props</source>
          <target state="translated">イメージスタイルの小道具</target>
        </trans-unit>
        <trans-unit id="6360007aa3a70f902fe0a85400a1fb4956f0cc71" translate="yes" xml:space="preserve">
          <source>Image Style Props#backfaceVisibility</source>
          <target state="translated">イメージスタイル小道具#backface可視化</target>
        </trans-unit>
        <trans-unit id="56309d89b5b2b19b4623a34cb1f32940a76268c4" translate="yes" xml:space="preserve">
          <source>Image Style Props#backgroundColor</source>
          <target state="translated">イメージスタイルの小道具#backgroundColor</target>
        </trans-unit>
        <trans-unit id="9add8bde56efc96be61947f8609eb01acdc98836" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderBottomLeftRadius</source>
          <target state="translated">画像スタイル小道具#borderBottomLeftRadius</target>
        </trans-unit>
        <trans-unit id="b3f7e6e54c04c772eb209d62fd7d3a60c4fcfa6a" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderBottomRightRadius</source>
          <target state="translated">画像スタイル小道具#borderBottomRightRadius</target>
        </trans-unit>
        <trans-unit id="f7417cb47e7052835f80fabb0fb9936f7eba0a7a" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderColor</source>
          <target state="translated">Image Style Props#borderColor</target>
        </trans-unit>
        <trans-unit id="5c1de2555cfb05fcf4fab63060c8fac4e2e6d010" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderRadius</source>
          <target state="translated">イメージスタイル小道具#borderRadius</target>
        </trans-unit>
        <trans-unit id="33c9b9b05b4e5e5270f71b36df4ba5a1e463f972" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderTopLeftRadius</source>
          <target state="translated">イメージスタイル小道具#borderTopLeftRadius</target>
        </trans-unit>
        <trans-unit id="5a1593af2a4dfecb89ebfdaff451b00b4a4e9855" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderTopRightRadius</source>
          <target state="translated">イメージスタイル小道具#borderTopRightRadius</target>
        </trans-unit>
        <trans-unit id="07c66755304bfa5179cbe0078bcfd8130de636c1" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderWidth</source>
          <target state="translated">画像スタイルプロップス#borderWidth</target>
        </trans-unit>
        <trans-unit id="c39ce427826d1e92ee683fe8378673818561ca57" translate="yes" xml:space="preserve">
          <source>Image Style Props#opacity</source>
          <target state="translated">イメージスタイル小道具#オパシティ</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
