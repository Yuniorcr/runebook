<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="d1d72184530a656fdccd1381c470bfe7b9a60855" translate="yes" xml:space="preserve">
          <source>An attempt was made to add more headers after the headers had already been sent.</source>
          <target state="translated">すでにヘッダが送信された後に、さらにヘッダを追加しようとしました。</target>
        </trans-unit>
        <trans-unit id="0aef3ca6688fdcd5a6abf0034aded36436d1594a" translate="yes" xml:space="preserve">
          <source>An attempt was made to allocate memory (usually in the C++ layer) but it failed.</source>
          <target state="translated">メモリの割り当てを試みましたが(通常は C++レイヤ)、失敗しました。</target>
        </trans-unit>
        <trans-unit id="94b8a515e6d0a8e5d1fd5611d9398b4c7daee2fd" translate="yes" xml:space="preserve">
          <source>An attempt was made to bind a socket that has already been bound.</source>
          <target state="translated">既にバインドされているソケットをバインドしようとしました。</target>
        </trans-unit>
        <trans-unit id="7a3d8cbf689a1ea17719779588db7ec5823968cc" translate="yes" xml:space="preserve">
          <source>An attempt was made to call &lt;a href=&quot;stream#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; on a &lt;a href=&quot;stream#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">試みは、コールに行われた&lt;a href=&quot;stream#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;stream#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリーム。</target>
        </trans-unit>
        <trans-unit id="ae7bcf236212820634cc8aa2e0590dc65a75b1ec" translate="yes" xml:space="preserve">
          <source>An attempt was made to call &lt;a href=&quot;stream#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push()&lt;/code&gt;&lt;/a&gt; after a &lt;code&gt;null&lt;/code&gt;(EOF) had been pushed to the stream.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; （EOF）がストリームにプッシュされた後で&lt;a href=&quot;stream#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push()&lt;/code&gt; &lt;/a&gt;を呼び出そうとしました。</target>
        </trans-unit>
        <trans-unit id="f64bf355b077035b7adccd78c55caaea62cff40a" translate="yes" xml:space="preserve">
          <source>An attempt was made to call &lt;a href=&quot;stream#stream_readable_unshift_chunk_encoding&quot;&gt;&lt;code&gt;stream.unshift()&lt;/code&gt;&lt;/a&gt; after the &lt;code&gt;'end'&lt;/code&gt; event was emitted.</source>
          <target state="translated">&lt;code&gt;'end'&lt;/code&gt; イベントが&lt;a href=&quot;stream#stream_readable_unshift_chunk_encoding&quot;&gt; &lt;code&gt;stream.unshift()&lt;/code&gt; &lt;/a&gt;された後でstream.unshift（）を呼び出そうとしました。</target>
        </trans-unit>
        <trans-unit id="3717b7ba58eb9fe0851743f1720f213f5417fd82" translate="yes" xml:space="preserve">
          <source>An attempt was made to call &lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.write()&lt;/code&gt;&lt;/a&gt; after &lt;code&gt;stream.end()&lt;/code&gt; has been called.</source>
          <target state="translated">試みは、コールに行われた&lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.write()&lt;/code&gt; &lt;/a&gt;の後 &lt;code&gt;stream.end()&lt;/code&gt; と呼ばれてきました。</target>
        </trans-unit>
        <trans-unit id="d6bd8744ec6a998f776bbb0497bb8464cf1914a0" translate="yes" xml:space="preserve">
          <source>An attempt was made to call &lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.write()&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;null&lt;/code&gt; chunk.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; チャンクで&lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.write()&lt;/code&gt; &lt;/a&gt;を呼び出そうとしました。</target>
        </trans-unit>
        <trans-unit id="5eae4e8a0fc9875cafae6760b9106a1f9cbcdda2" translate="yes" xml:space="preserve">
          <source>An attempt was made to close the &lt;code&gt;process.stderr&lt;/code&gt; stream. By design, Node.js does not allow &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; streams to be closed by user code.</source>
          <target state="translated">&lt;code&gt;process.stderr&lt;/code&gt; ストリームを閉じようとしました。設計上、Node.jsでは、ユーザーコードによって &lt;code&gt;stdout&lt;/code&gt; または &lt;code&gt;stderr&lt;/code&gt; ストリームを閉じることができません。</target>
        </trans-unit>
        <trans-unit id="c073e49efda7449e4a8d4cac06da260fb76c650d" translate="yes" xml:space="preserve">
          <source>An attempt was made to close the &lt;code&gt;process.stdout&lt;/code&gt; stream. By design, Node.js does not allow &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; streams to be closed by user code.</source>
          <target state="translated">&lt;code&gt;process.stdout&lt;/code&gt; ストリームを閉じようとしました。設計上、Node.jsでは、ユーザーコードによって &lt;code&gt;stdout&lt;/code&gt; または &lt;code&gt;stderr&lt;/code&gt; ストリームを閉じることができません。</target>
        </trans-unit>
        <trans-unit id="dd5edaf940158b00303e893908f89f4a65645052" translate="yes" xml:space="preserve">
          <source>An attempt was made to connect a &lt;code&gt;Http2Session&lt;/code&gt; object to a &lt;code&gt;net.Socket&lt;/code&gt; or &lt;code&gt;tls.TLSSocket&lt;/code&gt; that had already been bound to another &lt;code&gt;Http2Session&lt;/code&gt; object.</source>
          <target state="translated">試みが接続するためになされた &lt;code&gt;Http2Session&lt;/code&gt; にオブジェクト &lt;code&gt;net.Socket&lt;/code&gt; または &lt;code&gt;tls.TLSSocket&lt;/code&gt; すでに別にバインドされていた &lt;code&gt;Http2Session&lt;/code&gt; のオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="f2b9d36028970855e4c9b80a62fa248b85acb752" translate="yes" xml:space="preserve">
          <source>An attempt was made to create a Node.js &lt;code&gt;Buffer&lt;/code&gt; instance from addon or embedder code, while in a JS engine Context that is not associated with a Node.js instance. The data passed to the &lt;code&gt;Buffer&lt;/code&gt; method will have been released by the time the method returns.</source>
          <target state="translated">Node.jsインスタンスに関連付けられていないJSエンジンコンテキストで、アドオンまたは埋め込みコードからNode.js &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成しようとしました。 &lt;code&gt;Buffer&lt;/code&gt; メソッドに渡されたデータは、メソッドが戻るまでに解放されます。</target>
        </trans-unit>
        <trans-unit id="221a7bc963c1d88ce0f240d01d98bd33d7b90a4c" translate="yes" xml:space="preserve">
          <source>An attempt was made to create a child Node.js process using more than one IPC communication channel. See the documentation for the &lt;a href=&quot;child_process&quot;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">複数のIPC通信チャネルを使用して子Node.jsプロセスを作成しようとしました。詳細については、&lt;a href=&quot;child_process&quot;&gt; &lt;code&gt;child_process&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d7061bac40769f9cf27c501e961b72b96f4e5cc1" translate="yes" xml:space="preserve">
          <source>An attempt was made to create a push stream, which had been disabled by the client.</source>
          <target state="translated">プッシュストリームを作成しようとしましたが、クライアントによって無効化されていました。</target>
        </trans-unit>
        <trans-unit id="0fb687fe2aab131f5ab02b2d239f2121ac82904c" translate="yes" xml:space="preserve">
          <source>An attempt was made to directly manipulate (read, write, pause, resume, etc.) a socket attached to an &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Http2Session&lt;/code&gt; に接続されたソケットを直接操作（読み取り、書き込み、一時停止、再開など）しようとしました。</target>
        </trans-unit>
        <trans-unit id="a5d115806eb6f1d8b11759e547f04248d97a42db" translate="yes" xml:space="preserve">
          <source>An attempt was made to disconnect an IPC communication channel that was already disconnected. See the documentation for the &lt;a href=&quot;child_process&quot;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">すでに切断されているIPC通信チャネルを切断しようとしました。詳細については、&lt;a href=&quot;child_process&quot;&gt; &lt;code&gt;child_process&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fa5aa3219563ef3bf4f7158882c643f10825232c" translate="yes" xml:space="preserve">
          <source>An attempt was made to enable or disable FIPS mode, but FIPS mode was not available.</source>
          <target state="translated">FIPSモードを有効または無効にしようとしましたが、FIPSモードは使用できませんでした。</target>
        </trans-unit>
        <trans-unit id="d37181181b8e8fec72f2fde4222a810822974798" translate="yes" xml:space="preserve">
          <source>An attempt was made to initiate a new push stream from within a push stream. Nested push streams are not permitted.</source>
          <target state="translated">プッシュストリーム内から新しいプッシュストリームを開始しようとしました。入れ子になったプッシュストリームは許可されていません。</target>
        </trans-unit>
        <trans-unit id="a70c3d061ab6a283d45fac39f6fd2f75b36a2761" translate="yes" xml:space="preserve">
          <source>An attempt was made to initiate operations on a watcher returned by &lt;code&gt;fs.watch()&lt;/code&gt; that has not yet been started.</source>
          <target state="translated">まだ開始されていない &lt;code&gt;fs.watch()&lt;/code&gt; によって返されたウォッチャーで操作を開始しようとしました。</target>
        </trans-unit>
        <trans-unit id="e3e1be8f1dcc3264a9ffaf35261f1b6c16243b7e" translate="yes" xml:space="preserve">
          <source>An attempt was made to issue Server Name Indication from a TLS server-side socket, which is only valid from a client.</source>
          <target state="translated">クライアントからのみ有効なTLSサーバサイドソケットからサーバ名表示を発行しようとしました。</target>
        </trans-unit>
        <trans-unit id="c74c198d1e7a19ccc916f60f97790a27f99f2fcc" translate="yes" xml:space="preserve">
          <source>An attempt was made to launch a Node.js process with an unknown &lt;code&gt;stdin&lt;/code&gt; file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it.</source>
          <target state="translated">不明な &lt;code&gt;stdin&lt;/code&gt; ファイルタイプでNode.jsプロセスを起動しようとしました。このエラーは通常、Node.js自体にバグがあることを示していますが、ユーザーコードによってトリガーされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="647f33438d70586fc223c060ab0724c64eae8be4" translate="yes" xml:space="preserve">
          <source>An attempt was made to launch a Node.js process with an unknown &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it.</source>
          <target state="translated">不明な &lt;code&gt;stdout&lt;/code&gt; または &lt;code&gt;stderr&lt;/code&gt; ファイルタイプでNode.jsプロセスを起動しようとしました。このエラーは通常、Node.js自体にバグがあることを示していますが、ユーザーコードによってトリガーされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="585af3617fecdf1f98b24d17cfb041c2c1480b9c" translate="yes" xml:space="preserve">
          <source>An attempt was made to load a module with an unknown or unsupported file extension.</source>
          <target state="translated">未知の、またはサポートされていないファイル拡張子を持つモジュールをロードしようとしました。</target>
        </trans-unit>
        <trans-unit id="33cb71670cdc6252b60c2fd86c653487c833e2f0" translate="yes" xml:space="preserve">
          <source>An attempt was made to load a module with an unknown or unsupported format.</source>
          <target state="translated">未知の形式またはサポートされていない形式のモジュールをロードしようとしました。</target>
        </trans-unit>
        <trans-unit id="36dbd7a7266484831c62bc15994e72619be965b5" translate="yes" xml:space="preserve">
          <source>An attempt was made to load a policy manifest, but the manifest had multiple entries for a resource which did not match each other. Update the manifest entries to match in order to resolve this error. See the documentation for &lt;a href=&quot;policy&quot;&gt;policy&lt;/a&gt; manifests for more information.</source>
          <target state="translated">ポリシーマニフェストを読み込もうとしましたが、マニフェストにリソースの複数のエントリがあり、互いに一致していません。このエラーを解決するには、一致するようにマニフェストエントリを更新します。詳細については、&lt;a href=&quot;policy&quot;&gt;ポリシー&lt;/a&gt;マニフェストのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ffa70d1244ab6a62821622db6810ea06700d6cc8" translate="yes" xml:space="preserve">
          <source>An attempt was made to load a policy manifest, but the manifest was unable to be parsed. See the documentation for &lt;a href=&quot;policy&quot;&gt;policy&lt;/a&gt; manifests for more information.</source>
          <target state="translated">ポリシーマニフェストをロードしようとしましたが、マニフェストを解析できませんでした。詳細については、&lt;a href=&quot;policy&quot;&gt;ポリシー&lt;/a&gt;マニフェストのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="cf3ceabeeb7f60b9e659a72e695a654bb5df2db6" translate="yes" xml:space="preserve">
          <source>An attempt was made to load a resource, but the resource did not match the integrity defined by the policy manifest. See the documentation for &lt;a href=&quot;policy&quot;&gt;policy&lt;/a&gt; manifests for more information.</source>
          <target state="translated">リソースをロードしようとしましたが、リソースはポリシーマニフェストで定義されている整合性と一致しませんでした。詳細については、&lt;a href=&quot;policy&quot;&gt;ポリシー&lt;/a&gt;マニフェストのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="7334a0764b055151ea1b0bc7b2e64740fda86d64" translate="yes" xml:space="preserve">
          <source>An attempt was made to load a resource, but the resource was not listed as a dependency from the location that attempted to load it. See the documentation for &lt;a href=&quot;policy&quot;&gt;policy&lt;/a&gt; manifests for more information.</source>
          <target state="translated">リソースをロードしようとしましたが、そのリソースは、ロードしようとした場所からの依存関係としてリストされていませんでした。詳細については、&lt;a href=&quot;policy&quot;&gt;ポリシー&lt;/a&gt;マニフェストのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="fb6a0b3865a27b364260a9ebd4a30cab5d1a287b" translate="yes" xml:space="preserve">
          <source>An attempt was made to open an IPC communication channel with a synchronously forked Node.js process. See the documentation for the &lt;a href=&quot;child_process&quot;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">同期的にフォークされたNode.jsプロセスでIPC通信チャネルを開こうとしました。詳細については、&lt;a href=&quot;child_process&quot;&gt; &lt;code&gt;child_process&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6a3ad4b416ff38b3f08a1c9dfb33b85b8d0ad9b" translate="yes" xml:space="preserve">
          <source>An attempt was made to operate on an already closed socket.</source>
          <target state="translated">すでに閉じられているソケットで操作を試みた。</target>
        </trans-unit>
        <trans-unit id="8ab3615b6d03c6635591fa1326e12eac6794c407" translate="yes" xml:space="preserve">
          <source>An attempt was made to read an encrypted key without specifying a passphrase.</source>
          <target state="translated">パスフレーズを指定せずに暗号化された鍵を読もうとしました。</target>
        </trans-unit>
        <trans-unit id="ae9a452dac6b52e478056f107acb1635e59f820c" translate="yes" xml:space="preserve">
          <source>An attempt was made to read from a policy manifest, but the manifest initialization has not yet taken place. This is likely a bug in Node.js.</source>
          <target state="translated">ポリシーマニフェストからの読み込みを試みましたが、マニフェストの初期化はまだ行われていません。これはNode.jsのバグである可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="0cda91245cc03c8715350454edfde8d7a069c964" translate="yes" xml:space="preserve">
          <source>An attempt was made to register something that is not a function as an &lt;code&gt;AsyncHooks&lt;/code&gt; callback.</source>
          <target state="translated">関数ではない何かを &lt;code&gt;AsyncHooks&lt;/code&gt; コールバックとして登録しようとしました。</target>
        </trans-unit>
        <trans-unit id="6facf4ea803873e43d0e21d44ae5050ed4942e5f" translate="yes" xml:space="preserve">
          <source>An attempt was made to renegotiate TLS on a socket instance with TLS disabled.</source>
          <target state="translated">TLS を無効にしたソケットインスタンスで TLS の再ネゴシエーションを試みました。</target>
        </trans-unit>
        <trans-unit id="48efea40af6c91f463bde8a678a9e0858c01c7f4" translate="yes" xml:space="preserve">
          <source>An attempt was made to send an unsupported &quot;handle&quot; over an IPC communication channel to a child process. See &lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;subprocess.send()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;process.send()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">サポートされていない「ハンドル」をIPC通信チャネルを介して子プロセスに送信しようとしました。詳細については、&lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;process.send()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="70211bbbf23cffa831a7eea10d2797dcf5bc4ca4" translate="yes" xml:space="preserve">
          <source>An attempt was made to send multiple response headers.</source>
          <target state="translated">複数の応答ヘッダを送信しようとしました。</target>
        </trans-unit>
        <trans-unit id="c89c48a0e6ac156a6ab469b87a8aca246f2ea15e" translate="yes" xml:space="preserve">
          <source>An attempt was made to start a watcher returned by &lt;code&gt;fs.watch()&lt;/code&gt; that has already been started.</source>
          <target state="translated">すでに開始されている &lt;code&gt;fs.watch()&lt;/code&gt; によって返されたウォッチャーを開始しようとしました。</target>
        </trans-unit>
        <trans-unit id="7bfb99f351199b0f29e8c1812878ad8d06a0b8b3" translate="yes" xml:space="preserve">
          <source>An attempt was made to use a URL of an incompatible scheme (protocol) for a specific purpose. It is only used in the &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt; support in the &lt;a href=&quot;fs&quot;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt; module (which only accepts URLs with &lt;code&gt;'file'&lt;/code&gt; scheme), but may be used in other Node.js APIs as well in the future.</source>
          <target state="translated">特定の目的で、互換性のないスキーム（プロトコル）のURLを使用しようとしました。これは、&lt;a href=&quot;fs&quot;&gt; &lt;code&gt;fs&lt;/code&gt; &lt;/a&gt;モジュールの&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt;サポート（ &lt;code&gt;'file'&lt;/code&gt; スキームのURLのみを受け入れる）でのみ使用されますが、将来、他のNode.js APIでも使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4d5f594ff3b1b28f71108f82d6def6c9de2d4184" translate="yes" xml:space="preserve">
          <source>An attempt was made to use an IPC communication channel that was already closed.</source>
          <target state="translated">既に閉鎖されているIPC通信チャネルを使用しようとしました。</target>
        </trans-unit>
        <trans-unit id="e2f366ef1b99c43d5aed653a929cf6ee883705fd" translate="yes" xml:space="preserve">
          <source>An attempt was made to use crypto features while Node.js was not compiled with OpenSSL crypto support.</source>
          <target state="translated">Node.jsがOpenSSLのcryptoサポートでコンパイルされていない間に、crypto機能を使用する試みが行われました。</target>
        </trans-unit>
        <trans-unit id="9a512584707fdbf50d4db8b542f934eba5f5bf67" translate="yes" xml:space="preserve">
          <source>An attempt was made to use features that require &lt;a href=&quot;intl#intl_internationalization_support&quot;&gt;ICU&lt;/a&gt;, but Node.js was not compiled with ICU support.</source>
          <target state="translated">&lt;a href=&quot;intl#intl_internationalization_support&quot;&gt;ICU&lt;/a&gt;を必要とする機能を使用しようとしましたが、Node.jsはICUサポートでコンパイルされていません。</target>
        </trans-unit>
        <trans-unit id="5b1ec20dd75d25d7bfbdcb2df49e2704cd6e66d8" translate="yes" xml:space="preserve">
          <source>An attempt was made to use the &lt;code&gt;Http2Stream.prototype.responseWithFile()&lt;/code&gt; API to send a directory.</source>
          <target state="translated">&lt;code&gt;Http2Stream.prototype.responseWithFile()&lt;/code&gt; APIを使用してディレクトリを送信しようとしました。</target>
        </trans-unit>
        <trans-unit id="ce4546dfa07ff88232d6b712aac6b5a0ba01ab6e" translate="yes" xml:space="preserve">
          <source>An attempt was made to use the &lt;code&gt;Http2Stream.prototype.responseWithFile()&lt;/code&gt; API to send something other than a regular file, but &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; options were provided.</source>
          <target state="translated">&lt;code&gt;Http2Stream.prototype.responseWithFile()&lt;/code&gt; APIを使用して通常のファイル以外のものを送信しようとしましたが、 &lt;code&gt;offset&lt;/code&gt; または &lt;code&gt;length&lt;/code&gt; オプションが指定されていました。</target>
        </trans-unit>
        <trans-unit id="6841145dd82a74fda1d0ba32e0520caac47c3f81" translate="yes" xml:space="preserve">
          <source>An attempt was made to use the &lt;code&gt;socket&lt;/code&gt; property of an &lt;code&gt;Http2Session&lt;/code&gt; that has already been closed.</source>
          <target state="translated">すでに閉じられている &lt;code&gt;Http2Session&lt;/code&gt; の &lt;code&gt;socket&lt;/code&gt; プロパティを使用しようとしました。</target>
        </trans-unit>
        <trans-unit id="41ded658c0189aef4c62e5802352500a3719e73c" translate="yes" xml:space="preserve">
          <source>An easier method of constructing the &lt;code&gt;mode&lt;/code&gt; is to use a sequence of three octal digits (e.g. &lt;code&gt;765&lt;/code&gt;). The left-most digit (&lt;code&gt;7&lt;/code&gt; in the example), specifies the permissions for the file owner. The middle digit (&lt;code&gt;6&lt;/code&gt; in the example), specifies permissions for the group. The right-most digit (&lt;code&gt;5&lt;/code&gt; in the example), specifies the permissions for others.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; を構成するより簡単な方法は、3桁の8進数（例： &lt;code&gt;765&lt;/code&gt; ）のシーケンスを使用することです。左端の数字（例では &lt;code&gt;7&lt;/code&gt; ）は、ファイル所有者の許可を指定します。中央の数字（例では &lt;code&gt;6&lt;/code&gt; ）は、グループの権限を指定します。右端の数字（例では &lt;code&gt;5&lt;/code&gt; ）は、他のユーザーの権限を指定します。</target>
        </trans-unit>
        <trans-unit id="2829be5c371485a4ee50f7de235df7c2f3c0de45" translate="yes" xml:space="preserve">
          <source>An element in the &lt;code&gt;iterable&lt;/code&gt; provided to the &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG&lt;/a&gt;&lt;a href=&quot;url#url_constructor_new_urlsearchparams_iterable&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; constructor&lt;/a&gt; did not represent a &lt;code&gt;[name, value]&lt;/code&gt; tuple &amp;ndash; that is, if an element is not iterable, or does not consist of exactly two elements.</source>
          <target state="translated">&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG &lt;/a&gt;&lt;a href=&quot;url#url_constructor_new_urlsearchparams_iterable&quot;&gt; &lt;code&gt;URLSearchParams&lt;/code&gt; &lt;/a&gt;コンストラクターに提供された &lt;code&gt;iterable&lt;/code&gt; オブジェクトの要素は、 &lt;code&gt;[name, value]&lt;/code&gt; タプルを表していませんでした。つまり、要素が反復可能でないか、厳密に2つの要素で構成されていない場合です。</target>
        </trans-unit>
        <trans-unit id="bbf47fd2a9974fbb7ae5670d62629dd7cac3a535" translate="yes" xml:space="preserve">
          <source>An error occurred while attempting to retrieve the JavaScript &lt;code&gt;undefined&lt;/code&gt; value.</source>
          <target state="translated">JavaScriptの &lt;code&gt;undefined&lt;/code&gt; 値を取得しようとしたときにエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="c8c9c484df91866961d4f9b4dde2b66a719cccfd" translate="yes" xml:space="preserve">
          <source>An error occurred while invoking the JavaScript portion of the thread-safe function.</source>
          <target state="translated">スレッドセーフ関数のJavaScript部分の呼び出し中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="ec428230d44ff8e4f65fe85a02547d51e535b8a0" translate="yes" xml:space="preserve">
          <source>An error occurred while issuing a command via the &lt;code&gt;inspector&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュール経由でコマンドを発行中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="aceeb92c7e672dbe96b5bc629cd8fe021f134903" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;code&gt;stream.finished()&lt;/code&gt; and &lt;code&gt;stream.pipeline()&lt;/code&gt;, when a stream or a pipeline ends non gracefully with no explicit error.</source>
          <target state="translated">ストリームまたはパイプラインが明示的なエラーなしで正常に終了しない場合、 &lt;code&gt;stream.finished()&lt;/code&gt; および &lt;code&gt;stream.pipeline()&lt;/code&gt; によって返されるエラー。</target>
        </trans-unit>
        <trans-unit id="dacde5f35318339673bdd3e80f2305d6416c3174" translate="yes" xml:space="preserve">
          <source>An error will be thrown if an invalid address is provided.</source>
          <target state="translated">無効なアドレスが提供された場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="d17b8d98a540bae9dcb283f60ef724034d72f057" translate="yes" xml:space="preserve">
          <source>An example of the possible output looks like:</source>
          <target state="translated">可能な出力の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="ef4051855537ff25bfcec1b43d6c23a547d8eeea" translate="yes" xml:space="preserve">
          <source>An example of this object looks like:</source>
          <target state="translated">このオブジェクトの例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="dd7b93e397ecc47eaefd5ddf11e2dd3a5ecf52fc" translate="yes" xml:space="preserve">
          <source>An example policy file that would allow loading a file &lt;code&gt;checked.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;checked.js&lt;/code&gt; ファイルのロードを許可するポリシーファイルの例：</target>
        </trans-unit>
        <trans-unit id="2dba28fa39644fb344561450fbc7221ec876ad05" translate="yes" xml:space="preserve">
          <source>An example socket listening on an exclusive port is shown below.</source>
          <target state="translated">以下に排他的なポートをリッスンするソケットの例を示します。</target>
        </trans-unit>
        <trans-unit id="0bfe7463612d597b46ebcb572f5c9578c2184e10" translate="yes" xml:space="preserve">
          <source>An example to read the last 10 bytes of a file which is 100 bytes long:</source>
          <target state="translated">100バイト長のファイルの最後の10バイトを読み込む例。</target>
        </trans-unit>
        <trans-unit id="c8d30ee4a50e6e4b86d9d75d96b03bc39c11b3fe" translate="yes" xml:space="preserve">
          <source>An exception is thrown when any of the input arguments specify invalid values or types.</source>
          <target state="translated">入力引数のいずれかが無効な値や型を指定した場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="3bde95521f017404d4980ffe8a6e1bec685970ed" translate="yes" xml:space="preserve">
          <source>An exception is thrown when key derivation fails, otherwise the derived key is returned as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーの導出に失敗すると例外がスローされます。それ以外の場合、導出されたキーは&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;として返されます。</target>
        </trans-unit>
        <trans-unit id="fea6f070cd0b84891be844a8303fa5b64d18cd5e" translate="yes" xml:space="preserve">
          <source>An exception will be thrown if there is no active inspector.</source>
          <target state="translated">アクティブなインスペクタが存在しない場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="e07a43c5ecaa51806da3107ae1ddcb6b26acfe0e" translate="yes" xml:space="preserve">
          <source>An excessive amount of TLS renegotiations is detected, which is a potential vector for denial-of-service attacks.</source>
          <target state="translated">TLS の再ネゴシエーションが過剰に検出され、サービス拒否攻撃の可能性があります。</target>
        </trans-unit>
        <trans-unit id="82d19b06a61b76fe42960a67fd72ca25306e372e" translate="yes" xml:space="preserve">
          <source>An immutable array of strings representing the root certificates (in PEM format) used for verifying peer certificates. This is the default value of the &lt;code&gt;ca&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ピア証明書の検証に使用されるルート証明書（PEM形式）を表す文字列の不変の配列。これは、&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;ca&lt;/code&gt; オプションのデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="f64687b379f25cbf7341d6c2db0587a3a214b1a6" translate="yes" xml:space="preserve">
          <source>An implementation of the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt;&lt;code&gt;TextDecoder&lt;/code&gt; API.</source>
          <target state="translated">&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWGエンコーディング標準&lt;/a&gt; &lt;code&gt;TextDecoder&lt;/code&gt; API の実装。</target>
        </trans-unit>
        <trans-unit id="465486ad112893f6cf37e501cabba08f692f0c30" translate="yes" xml:space="preserve">
          <source>An implementation of the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt;&lt;code&gt;TextEncoder&lt;/code&gt; API. All instances of &lt;code&gt;TextEncoder&lt;/code&gt; only support UTF-8 encoding.</source>
          <target state="translated">&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWGエンコーディング標準&lt;/a&gt; &lt;code&gt;TextEncoder&lt;/code&gt; API の実装。 &lt;code&gt;TextEncoder&lt;/code&gt; のすべてのインスタンスは、UTF-8エンコーディングのみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="772f242da466fc2876537ecd2e8ecd5fbfa3671c" translate="yes" xml:space="preserve">
          <source>An important drawback when calling &lt;code&gt;process.dlopen()&lt;/code&gt; is that the &lt;code&gt;module&lt;/code&gt; instance must be passed. Functions exported by the C++ Addon will be accessible via &lt;code&gt;module.exports&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.dlopen()&lt;/code&gt; を呼び出すときの重要な欠点は、 &lt;code&gt;module&lt;/code&gt; インスタンスを渡す必要があることです。C ++アドオンによってエクスポートされた関数には、 &lt;code&gt;module.exports&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2ebe1511f4205a6788c71fe6bfbaa3175a76fbf3" translate="yes" xml:space="preserve">
          <source>An improved alternative API is available.</source>
          <target state="translated">改良された代替APIが利用可能です。</target>
        </trans-unit>
        <trans-unit id="75991723a893d8562531695bc09a4b9d4688d3a7" translate="yes" xml:space="preserve">
          <source>An independent resolver for DNS requests.</source>
          <target state="translated">DNSリクエストのための独立したリゾルバ。</target>
        </trans-unit>
        <trans-unit id="cf8bc634a78c05d439a35bcfcabef1d71264eeba" translate="yes" xml:space="preserve">
          <source>An instance of the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class that provides performance metrics for specific Node.js operational milestones.</source>
          <target state="translated">特定のNode.js運用マイルストーンのパフォーマンスメトリックを提供する &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="073f106d3f9e3d5509f6a7b0b26f848582951349" translate="yes" xml:space="preserve">
          <source>An integer identifier for the current thread. On the corresponding worker object (if there is any), it is available as &lt;a href=&quot;#worker_threads_worker_threadid_1&quot;&gt;&lt;code&gt;worker.threadId&lt;/code&gt;&lt;/a&gt;. This value is unique for each &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; instance inside a single process.</source>
          <target state="translated">現在のスレッドの整数識別子。対応するワーカーオブジェクト（存在する場合）では、&lt;a href=&quot;#worker_threads_worker_threadid_1&quot;&gt; &lt;code&gt;worker.threadId&lt;/code&gt; &lt;/a&gt;として使用できます。この値は、単一のプロセス内の各&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;インスタンスで一意です。</target>
        </trans-unit>
        <trans-unit id="2f5ec5e060c74b93d50346bf8f6f2198cd3ecdb3" translate="yes" xml:space="preserve">
          <source>An integer identifier for the referenced thread. Inside the worker thread, it is available as &lt;a href=&quot;#worker_threads_worker_threadid&quot;&gt;&lt;code&gt;require('worker_threads').threadId&lt;/code&gt;&lt;/a&gt;. This value is unique for each &lt;code&gt;Worker&lt;/code&gt; instance inside a single process.</source>
          <target state="translated">参照されるスレッドの整数識別子。ワーカースレッド内では、&lt;a href=&quot;#worker_threads_worker_threadid&quot;&gt; &lt;code&gt;require('worker_threads').threadId&lt;/code&gt; &lt;/a&gt;として使用できます。この値は、単一のプロセス内の各 &lt;code&gt;Worker&lt;/code&gt; インスタンスで一意です。</target>
        </trans-unit>
        <trans-unit id="62c6f6c1e4eb21e635a4551d4f5637d6dfc06901" translate="yes" xml:space="preserve">
          <source>An internal method used to parse and execute &lt;code&gt;REPLServer&lt;/code&gt; keywords. Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;keyword&lt;/code&gt; is a valid keyword, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;REPLServer&lt;/code&gt; キーワードの解析と実行に使用される内部メソッド。 &lt;code&gt;keyword&lt;/code&gt; が有効なキーワードの場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4d397be77840ab5f827913c084b4c79b7fe2a871" translate="yes" xml:space="preserve">
          <source>An invalid (negative) size was passed for either the &lt;code&gt;recvBufferSize&lt;/code&gt; or &lt;code&gt;sendBufferSize&lt;/code&gt; options in &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;recvBufferSize&lt;/code&gt; または &lt;code&gt;sendBufferSize&lt;/code&gt; オプションに無効な（負の）サイズが渡されました。</target>
        </trans-unit>
        <trans-unit id="7811c770cd0545873f140d055f4619346dfbfaff" translate="yes" xml:space="preserve">
          <source>An invalid &lt;a href=&quot;crypto#crypto_crypto_gethashes&quot;&gt;crypto digest algorithm&lt;/a&gt; was specified.</source>
          <target state="translated">無効な&lt;a href=&quot;crypto#crypto_crypto_gethashes&quot;&gt;暗号ダイジェストアルゴリズム&lt;/a&gt;が指定されました。</target>
        </trans-unit>
        <trans-unit id="b3c155df62e478d3b9758238feb53f02d10d5052" translate="yes" xml:space="preserve">
          <source>An invalid &lt;code&gt;asyncId&lt;/code&gt; or &lt;code&gt;triggerAsyncId&lt;/code&gt; was passed using &lt;code&gt;AsyncHooks&lt;/code&gt;. An id less than -1 should never happen.</source>
          <target state="translated">&lt;code&gt;triggerAsyncId&lt;/code&gt; を使用して、無効な &lt;code&gt;asyncId&lt;/code&gt; またはtriggerAsyncIdが渡され &lt;code&gt;AsyncHooks&lt;/code&gt; 。-1未満のIDは決して発生しません。</target>
        </trans-unit>
        <trans-unit id="53097ec4ce908207bdaf04b568c122a0bf8fb6ed" translate="yes" xml:space="preserve">
          <source>An invalid &lt;code&gt;options.protocol&lt;/code&gt; was passed to &lt;code&gt;http.request()&lt;/code&gt;.</source>
          <target state="translated">無効な &lt;code&gt;options.protocol&lt;/code&gt; が &lt;code&gt;http.request()&lt;/code&gt; に渡されました。</target>
        </trans-unit>
        <trans-unit id="42218c520bddcf03f853c29f8c39cb72deb7af44" translate="yes" xml:space="preserve">
          <source>An invalid &lt;code&gt;package.json&lt;/code&gt; file was found which failed parsing.</source>
          <target state="translated">解析に失敗する無効な &lt;code&gt;package.json&lt;/code&gt; ファイルが見つかりました。</target>
        </trans-unit>
        <trans-unit id="9137a3f9b39eceb7fdf8223922ed3ee4bc96892f" translate="yes" xml:space="preserve">
          <source>An invalid HTTP header value was specified.</source>
          <target state="translated">無効な HTTP ヘッダー値が指定されました。</target>
        </trans-unit>
        <trans-unit id="4d9592829c9771da1ed36ca7f3ae4ac3e02fb945" translate="yes" xml:space="preserve">
          <source>An invalid HTTP informational status code has been specified. Informational status codes must be an integer between &lt;code&gt;100&lt;/code&gt; and &lt;code&gt;199&lt;/code&gt; (inclusive).</source>
          <target state="translated">無効なHTTP情報ステータスコードが指定されました。情報のステータスコードは、の間の整数でなければならない &lt;code&gt;100&lt;/code&gt; 及び &lt;code&gt;199&lt;/code&gt; （両端を含みます）。</target>
        </trans-unit>
        <trans-unit id="83799af7f1d4bcb81b1ba9abe624aceb9dd1dd5f" translate="yes" xml:space="preserve">
          <source>An invalid HTTP status code has been specified. Status codes must be an integer between &lt;code&gt;100&lt;/code&gt; and &lt;code&gt;599&lt;/code&gt; (inclusive).</source>
          <target state="translated">無効なHTTPステータスコードが指定されました。ステータスコードは、の間の整数でなければならない &lt;code&gt;100&lt;/code&gt; 及び &lt;code&gt;599&lt;/code&gt; （両端を含みます）。</target>
        </trans-unit>
        <trans-unit id="a2b589c62d968af0c7d9fadb38e1a1697e4c0a9c" translate="yes" xml:space="preserve">
          <source>An invalid HTTP token was supplied.</source>
          <target state="translated">無効な HTTP トークンが提供されました。</target>
        </trans-unit>
        <trans-unit id="1b05ff2c6deb148ba62b8fd02c85c5fe55314f80" translate="yes" xml:space="preserve">
          <source>An invalid HTTP/2 header value was specified.</source>
          <target state="translated">無効な HTTP/2 ヘッダー値が指定されました。</target>
        </trans-unit>
        <trans-unit id="c275cebc9b7406d1b49bb487d1475c5739fe123b" translate="yes" xml:space="preserve">
          <source>An invalid URI was passed.</source>
          <target state="translated">無効な URI が渡されました。</target>
        </trans-unit>
        <trans-unit id="ee3a107d8f7d196eb5efd8908e428b326baa42e0" translate="yes" xml:space="preserve">
          <source>An invalid URL was passed to the &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG&lt;/a&gt;&lt;a href=&quot;url#url_constructor_new_url_input_base&quot;&gt;&lt;code&gt;URL&lt;/code&gt; constructor&lt;/a&gt; to be parsed. The thrown error object typically has an additional property &lt;code&gt;'input'&lt;/code&gt; that contains the URL that failed to parse.</source>
          <target state="translated">無効なURLが&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG &lt;/a&gt;&lt;a href=&quot;url#url_constructor_new_url_input_base&quot;&gt; &lt;code&gt;URL&lt;/code&gt; コンストラクター&lt;/a&gt;に渡されて解析されました。スローされたエラーオブジェクトには、通常、解析に失敗したURLを含む追加のプロパティ &lt;code&gt;'input'&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="8ad4b296955522d81c3e29330609d148ae654284" translate="yes" xml:space="preserve">
          <source>An invalid crypto engine identifier was passed to &lt;a href=&quot;crypto#crypto_crypto_setengine_engine_flags&quot;&gt;&lt;code&gt;require('crypto').setEngine()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">無効な暗号エンジン識別子が&lt;a href=&quot;crypto#crypto_crypto_setengine_engine_flags&quot;&gt; &lt;code&gt;require('crypto').setEngine()&lt;/code&gt; &lt;/a&gt;に渡されました。</target>
        </trans-unit>
        <trans-unit id="3c87de6f3d6bde59b26313418fd494f0540a908b" translate="yes" xml:space="preserve">
          <source>An invalid or unexpected value was passed in an options object.</source>
          <target state="translated">無効な値または予期しない値がオプション・オブジェクトに渡されました。</target>
        </trans-unit>
        <trans-unit id="de46bdff8a429a43fe6d0229ba2dab03fb547365" translate="yes" xml:space="preserve">
          <source>An invalid or unknown encoding option was passed to an API.</source>
          <target state="translated">無効または不明なエンコーディングオプションが API に渡されました。</target>
        </trans-unit>
        <trans-unit id="24caaedef2e4a699105e8a8fc8217ae223022cf7" translate="yes" xml:space="preserve">
          <source>An invalid or unknown file encoding was passed.</source>
          <target state="translated">無効または不明なファイルエンコーディングが渡されました。</target>
        </trans-unit>
        <trans-unit id="a007b066557bd652706f1a74c116ab07f669750a" translate="yes" xml:space="preserve">
          <source>An invalid or unknown process signal was passed to an API expecting a valid signal (such as &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">無効または不明なプロセス信号が、有効な信号を期待するAPI（&lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; &lt;/a&gt;など）に渡されました。</target>
        </trans-unit>
        <trans-unit id="a2cc1bcceb942d934ea0b3721ed55b0e52bb22c4" translate="yes" xml:space="preserve">
          <source>An invalid or unsupported value was passed for a given argument.</source>
          <target state="translated">無効な値またはサポートされていない値が、指定された引数に渡されました。</target>
        </trans-unit>
        <trans-unit id="7467250ab9219c384d82de1c709db4f285ccad29" translate="yes" xml:space="preserve">
          <source>An invalid parameter key was passed during construction of a Brotli stream.</source>
          <target state="translated">Brotli ストリームの構築中に無効なパラメータ・キーが渡されました。</target>
        </trans-unit>
        <trans-unit id="81a0ff15c7024ddfbc1bf026e9ad2665191b4014" translate="yes" xml:space="preserve">
          <source>An invalid symlink type was passed to the &lt;a href=&quot;fs#fs_fs_symlink_target_path_type_callback&quot;&gt;&lt;code&gt;fs.symlink()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fs#fs_fs_symlinksync_target_path_type&quot;&gt;&lt;code&gt;fs.symlinkSync()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">無効なシンボリックリンクタイプが&lt;a href=&quot;fs#fs_fs_symlink_target_path_type_callback&quot;&gt; &lt;code&gt;fs.symlink()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;fs#fs_fs_symlinksync_target_path_type&quot;&gt; &lt;code&gt;fs.symlinkSync()&lt;/code&gt; &lt;/a&gt;メソッドに渡されました。</target>
        </trans-unit>
        <trans-unit id="00a8ea030cf6ba0724a3964f36a2d15725147280" translate="yes" xml:space="preserve">
          <source>An invalid transfer object was passed to &lt;code&gt;postMessage()&lt;/code&gt;.</source>
          <target state="translated">無効な転送オブジェクトが &lt;code&gt;postMessage()&lt;/code&gt; に渡されました。</target>
        </trans-unit>
        <trans-unit id="a2b09312d9dbda06905e152f8c7977c5e852e71e" translate="yes" xml:space="preserve">
          <source>An invalid value for the &lt;code&gt;format&lt;/code&gt; argument was passed to the &lt;code&gt;crypto.ECDH()&lt;/code&gt; class &lt;code&gt;getPublicKey()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数の無効な値が &lt;code&gt;crypto.ECDH()&lt;/code&gt; クラスの &lt;code&gt;getPublicKey()&lt;/code&gt; メソッドに渡されました。</target>
        </trans-unit>
        <trans-unit id="bc084bd4b5ed2a8658576de1650e9b190ed4b7c4" translate="yes" xml:space="preserve">
          <source>An invalid value for the &lt;code&gt;key&lt;/code&gt; argument has been passed to the &lt;code&gt;crypto.ECDH()&lt;/code&gt; class &lt;code&gt;computeSecret()&lt;/code&gt; method. It means that the public key lies outside of the elliptic curve.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 引数の無効な値が、 &lt;code&gt;crypto.ECDH()&lt;/code&gt; クラスの &lt;code&gt;computeSecret()&lt;/code&gt; メソッドに渡されました。これは、公開鍵が楕円曲線の外側にあることを意味します。</target>
        </trans-unit>
        <trans-unit id="3009fac2b6e73c17013ea91a7f4eaedc24157a05" translate="yes" xml:space="preserve">
          <source>An invalid value has been specified for an HTTP/2 setting.</source>
          <target state="translated">HTTP/2 設定に無効な値が指定されました。</target>
        </trans-unit>
        <trans-unit id="32ab517d4da5af678eb83c61361b8c36f8e2b5d5" translate="yes" xml:space="preserve">
          <source>An iterable argument (i.e. a value that works with &lt;code&gt;for...of&lt;/code&gt; loops) was required, but not provided to a Node.js API.</source>
          <target state="translated">反復可能な引数（つまり &lt;code&gt;for...of&lt;/code&gt; ループで機能する値）が必要でしたが、Node.js APIに提供されていません。</target>
        </trans-unit>
        <trans-unit id="4610068747893484ab3879a4c639d496953ba03a" translate="yes" xml:space="preserve">
          <source>An npm module like &lt;a href=&quot;https://www.npmjs.com/package/asn1.js&quot;&gt;asn1.js&lt;/a&gt; may be used to parse the certificates.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/asn1.js&quot;&gt;asn1.js&lt;/a&gt;などのnpmモジュールを使用して、証明書を解析できます。</target>
        </trans-unit>
        <trans-unit id="95da227cd31de28e86d36a76b4b278ad4698ef51" translate="yes" xml:space="preserve">
          <source>An object containing the outbound headers sent for this &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Http2Stream&lt;/code&gt; に送信される送信ヘッダーを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="183b51e83da82dce17c49c6f273d37539988cb1c" translate="yes" xml:space="preserve">
          <source>An object containing the outbound trailers sent for this &lt;code&gt;HttpStream&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;HttpStream&lt;/code&gt; に送信される送信トレーラーを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="63f487c2ed91ee4a19f8894795e55dc5b677aaaf" translate="yes" xml:space="preserve">
          <source>An object describing the current status of this &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Http2Session&lt;/code&gt; の現在のステータスを説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="12b7871e6761c9fb25bf5b796b0baadaa89a7ed5" translate="yes" xml:space="preserve">
          <source>An object which contains arrays of sockets currently awaiting use by the agent when &lt;code&gt;keepAlive&lt;/code&gt; is enabled. Do not modify.</source>
          <target state="translated">&lt;code&gt;keepAlive&lt;/code&gt; が有効な場合にエージェントによる使用を現在待機しているソケットの配列を含むオブジェクト。変更しないでください。</target>
        </trans-unit>
        <trans-unit id="0bec9feba2dd520f9e0bbc76822cbb0e52455087" translate="yes" xml:space="preserve">
          <source>An object which contains arrays of sockets currently in use by the agent. Do not modify.</source>
          <target state="translated">エージェントが現在使用しているソケットの配列を含むオブジェクト。変更しないでください。</target>
        </trans-unit>
        <trans-unit id="574531c54ab478f216006078f3cf769b59551436" translate="yes" xml:space="preserve">
          <source>An object which contains queues of requests that have not yet been assigned to sockets. Do not modify.</source>
          <target state="translated">まだソケットに割り当てられていないリクエストのキューを含むオブジェクト。変更しないでください。</target>
        </trans-unit>
        <trans-unit id="8b65eb047b7d478fbb60f8f45b17eea8fff6a0c1" translate="yes" xml:space="preserve">
          <source>An operation outside the bounds of a &lt;code&gt;Buffer&lt;/code&gt; was attempted.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; の境界外の操作が試行されました。</target>
        </trans-unit>
        <trans-unit id="af34a6f3533f1490f6c0ad6743f050beea1de990" translate="yes" xml:space="preserve">
          <source>An operation was performed on a stream that had already been destroyed.</source>
          <target state="translated">すでに破壊されていたストリームに対して操作が行われました。</target>
        </trans-unit>
        <trans-unit id="932cb566059b93f41fa9ea4f4b56532c06b7c507" translate="yes" xml:space="preserve">
          <source>An option pair is incompatible with each other and can not be used at the same time.</source>
          <target state="translated">オプションペアはお互いに互換性がなく、同時に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="95444c63949101ef084927c9ccadb4abbaaedae0" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;callback&lt;/code&gt; function may be specified to as a way of reporting DNS errors or for determining when it is safe to reuse the &lt;code&gt;buf&lt;/code&gt; object. DNS lookups delay the time to send for at least one tick of the Node.js event loop.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; 関数は、DNSエラーを報告する方法として、または &lt;code&gt;buf&lt;/code&gt; オブジェクトを安全に再利用できる時期を決定するために指定できます。DNSルックアップは、Node.jsイベントループの少なくとも1ティックの送信時間を遅らせます。</target>
        </trans-unit>
        <trans-unit id="b20732420864901a779e958ee3751618b59c91e1" translate="yes" xml:space="preserve">
          <source>An overview of available Node.js and JavaScript features for each &lt;code&gt;configure&lt;/code&gt; option:</source>
          <target state="translated">各 &lt;code&gt;configure&lt;/code&gt; オプションで使用可能なNode.jsおよびJavaScript機能の概要：</target>
        </trans-unit>
        <trans-unit id="517634b9ccd1b10a5177eb481209c6e3ea5f0285" translate="yes" xml:space="preserve">
          <source>An unhandled error occurred (for instance, when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; but an &lt;code&gt;'error'&lt;/code&gt; handler is not registered).</source>
          <target state="translated">未処理のエラーが発生しました（たとえば、 &lt;code&gt;'error'&lt;/code&gt; イベントが&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;によって発行されたが、 &lt;code&gt;'error'&lt;/code&gt; ハンドラーが登録されていない場合）。</target>
        </trans-unit>
        <trans-unit id="c03eb20f5f7c3d76127e4c989549f01734b6a592" translate="yes" xml:space="preserve">
          <source>An unspecified or non-specific system error has occurred within the Node.js process. The error object will have an &lt;code&gt;err.info&lt;/code&gt; object property with additional details.</source>
          <target state="translated">Node.jsプロセス内で不特定または非特定のシステムエラーが発生しました。エラーオブジェクトには、追加の詳細を含む &lt;code&gt;err.info&lt;/code&gt; オブジェクトプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="67258f57db5b4a3cc9c6a65e3e3c6dfb93bb7131" translate="yes" xml:space="preserve">
          <source>An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when &lt;code&gt;windowBits&lt;/code&gt; is set to 8 for raw deflate streams. zlib would automatically set &lt;code&gt;windowBits&lt;/code&gt; to 9 if was initially set to 8. Newer versions of zlib will throw an exception, so Node.js restored the original behavior of upgrading a value of 8 to 9, since passing &lt;code&gt;windowBits = 9&lt;/code&gt; to zlib actually results in a compressed stream that effectively uses an 8-bit window only.</source>
          <target state="translated">zLibを1.2.8から1.2.11にアップグレードすると、生の収縮ストリームの &lt;code&gt;windowBits&lt;/code&gt; が8に設定されている場合の動作が変更されました。zlib が最初に8に設定されていた場合、zlibは自動的に &lt;code&gt;windowBits&lt;/code&gt; を9に設定します。新しいバージョンのzlibは例外をスローします。そのため、Node.jsは、 &lt;code&gt;windowBits = 9&lt;/code&gt; をzlibに渡すと実際に8ビットウィンドウのみを効果的に使用する圧縮ストリーム。</target>
        </trans-unit>
        <trans-unit id="00e6d062dac71b7d742d5963e696914e6babed7f" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;process.argv&lt;/code&gt;:</source>
          <target state="translated">そして、 &lt;code&gt;process.argv&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1682ca355307660a3f96e00d5d42a46511a1296d" translate="yes" xml:space="preserve">
          <source>And then the child script, &lt;code&gt;'sub.js'&lt;/code&gt; might look like this:</source>
          <target state="translated">そして、子スクリプト &lt;code&gt;'sub.js'&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b3c11e24252f2dad6195fd778356100cba5fea75" translate="yes" xml:space="preserve">
          <source>Another common scenario is creating JavaScript functions that wrap C++ functions and returning those back to JavaScript:</source>
          <target state="translated">もう一つの一般的なシナリオは、C++関数をラップして JavaScript 関数を作成し、それを JavaScript に戻すというものです。</target>
        </trans-unit>
        <trans-unit id="2063cb7c40b85070ef82e59ab101799c2f0c63ba" translate="yes" xml:space="preserve">
          <source>Another option is to use the macro &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt;, which will also construct a context-aware addon. Unlike &lt;code&gt;NODE_MODULE()&lt;/code&gt;, which is used to construct an addon around a given addon initializer function, &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; serves as the declaration of such an initializer to be followed by a function body.</source>
          <target state="translated">もう1つのオプションは、コンテキスト認識アドオンを構築するマクロ &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; を使用することです。特定のアドオン初期化関数の周りにアドオンを構築するために使用される &lt;code&gt;NODE_MODULE()&lt;/code&gt; とは異なり、 &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; は、関数本体が後に続く初期化子の宣言として機能します。</target>
        </trans-unit>
        <trans-unit id="64bee649fb004765d623fe6d5f4bbb2d5c4fca3f" translate="yes" xml:space="preserve">
          <source>Another subtlety with promises is that &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; callbacks are run only on chained promises. That means promises not created by &lt;code&gt;then()&lt;/code&gt;/&lt;code&gt;catch()&lt;/code&gt; will not have the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; callbacks fired on them. For more details see the details of the V8 &lt;a href=&quot;https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit&quot;&gt;PromiseHooks&lt;/a&gt; API.</source>
          <target state="translated">約束のもう一つの微妙な点である &lt;code&gt;before&lt;/code&gt; と &lt;code&gt;after&lt;/code&gt; コールバックが唯一の連鎖約束で実行されます。つまり、 &lt;code&gt;then()&lt;/code&gt; / &lt;code&gt;catch()&lt;/code&gt; で作成されていないプロミスは &lt;code&gt;after&lt;/code&gt; コールバックの &lt;code&gt;before&lt;/code&gt; と後が呼び出されません。詳細については、V8 &lt;a href=&quot;https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit&quot;&gt;PromiseHooks&lt;/a&gt; APIの詳細を参照してください。</target>
        </trans-unit>
        <trans-unit id="452132444b9c17b1f4a3b5f53e637fb09b4050d7" translate="yes" xml:space="preserve">
          <source>Another way of stating this is that, unlike in synchronous code where there is an ever-growing list of unhandled exceptions, with Promises there can be a growing-and-shrinking list of unhandled rejections.</source>
          <target state="translated">別の言い方をすると、同期コードでは処理されない例外のリストが増え続けるのとは異なり、Promisesでは処理されない拒否のリストが増えたり減ったりすることがあるということです。</target>
        </trans-unit>
        <trans-unit id="d37742033adba3790a77e5a50e4d67d2fc75cc7f" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;Promise&lt;/code&gt;s created in VM contexts no longer have a &lt;code&gt;.domain&lt;/code&gt; property. Their handlers are still executed in the proper domain, however, and &lt;code&gt;Promise&lt;/code&gt;s created in the main context still possess a &lt;code&gt;.domain&lt;/code&gt; property.</source>
          <target state="translated">どれ &lt;code&gt;Promise&lt;/code&gt; の作成したVMのコンテキストでは、もはやありません &lt;code&gt;.domain&lt;/code&gt; をプロパティを。ただし、それらのハンドラは引き続き適切なドメインで実行され、メインコンテキストで作成された &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;.domain&lt;/code&gt; プロパティを保持しています。</target>
        </trans-unit>
        <trans-unit id="d2ee797e574b6c944fe2a4ff3ef79ed761ea396d" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; instance may be passed as &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; または &lt;code&gt;DataView&lt;/code&gt; インスタンスはすべて、 &lt;code&gt;buffer&lt;/code&gt; として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="53139ef94d4a1932a95d3ff3710e504d2f270c2b" translate="yes" xml:space="preserve">
          <source>Any N-API function call may result in a pending JavaScript exception. This is obviously the case for any function that may cause the execution of JavaScript, but N-API specifies that an exception may be pending on return from any of the API functions.</source>
          <target state="translated">N-API 関数の呼び出しは、保留中の JavaScript 例外を発生させる可能性があります。これは明らかに JavaScript の実行を引き起こす可能性のあるすべての関数に当てはまりますが、N-API は API 関数のいずれかからの戻り時に例外が保留される可能性があることを指定しています。</target>
        </trans-unit>
        <trans-unit id="f85017420a48e8df1372d29bc406784baba94cd7" translate="yes" xml:space="preserve">
          <source>Any invalid URL characters appearing in the value assigned the &lt;code&gt;search&lt;/code&gt; property will be &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; プロパティに割り当てられた値に表示される無効なURL文字は、&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;パーセントエンコードされ&lt;/a&gt;ます。パーセントエンコードする文字の選択は、&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;メソッドが生成するものと多少異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="6c0b537637fbe5a97a8ea510f2cc54388523c455" translate="yes" xml:space="preserve">
          <source>Any invalid URL characters appearing in the value assigned the &lt;code&gt;username&lt;/code&gt; property will be &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">&lt;code&gt;username&lt;/code&gt; プロパティに割り当てられた値に含まれる無効なURL文字は、&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;パーセントエンコードされ&lt;/a&gt;ます。パーセントエンコードする文字の選択は、&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;メソッドが生成するものと多少異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="33cefc2f0c821e251811ee0c15f7e371f67bef7f" translate="yes" xml:space="preserve">
          <source>Any invalid exports entries will be ignored. This includes exports not starting with &lt;code&gt;&quot;./&quot;&lt;/code&gt; or a missing trailing &lt;code&gt;&quot;/&quot;&lt;/code&gt; for directory exports.</source>
          <target state="translated">無効なエクスポートエントリは無視されます。これには、 &lt;code&gt;&quot;./&quot;&lt;/code&gt; ないエクスポート、またはディレクトリエクスポートの末尾の &lt;code&gt;&quot;/&quot;&lt;/code&gt; 欠落しているエクスポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="f5bcc1ea4bc6c1ed082dc9c60625ca47a450accf" translate="yes" xml:space="preserve">
          <source>Any non-&lt;code&gt;NULL&lt;/code&gt; data which is passed to this API via the &lt;code&gt;data&lt;/code&gt; field of the &lt;code&gt;napi_property_descriptor&lt;/code&gt; items can be associated with &lt;code&gt;object&lt;/code&gt; and freed whenever &lt;code&gt;object&lt;/code&gt; is garbage-collected by passing both &lt;code&gt;object&lt;/code&gt; and the data to &lt;a href=&quot;#n_api_napi_add_finalizer&quot;&gt;&lt;code&gt;napi_add_finalizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">任意の非 &lt;code&gt;NULL&lt;/code&gt; を介して、このAPIに渡されるデータ &lt;code&gt;data&lt;/code&gt; のフィールド &lt;code&gt;napi_property_descriptor&lt;/code&gt; のアイテムを関連付けることができる &lt;code&gt;object&lt;/code&gt; といつでも解放され &lt;code&gt;object&lt;/code&gt; 両方渡すことによってガベージコレクトされ &lt;code&gt;object&lt;/code&gt; およびデータを&lt;a href=&quot;#n_api_napi_add_finalizer&quot;&gt; &lt;code&gt;napi_add_finalizer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b71b60681d96bc59be31fce9833b0e59c9bccd7a" translate="yes" xml:space="preserve">
          <source>Any non-&lt;code&gt;NULL&lt;/code&gt; data which is passed to this API via the &lt;code&gt;data&lt;/code&gt; parameter can be associated with the resulting JavaScript function (which is returned in the &lt;code&gt;result&lt;/code&gt; parameter) and freed whenever the function is garbage-collected by passing both the JavaScript function and the data to &lt;a href=&quot;#n_api_napi_add_finalizer&quot;&gt;&lt;code&gt;napi_add_finalizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">任意の非 &lt;code&gt;NULL&lt;/code&gt; を介して、このAPIに渡されるデータ &lt;code&gt;data&lt;/code&gt; パラメータが（に返され、得られたJavaScript関数に関連付けることができる &lt;code&gt;result&lt;/code&gt; パラメータ）と機能は、JavaScript関数とデータの両方を通過させることによって、ガベージコレクションであるときはいつでも解放します&lt;a href=&quot;#n_api_napi_add_finalizer&quot;&gt; &lt;code&gt;napi_add_finalizer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e4341c0c549edc565f407301b6c4985e11671d8" translate="yes" xml:space="preserve">
          <source>Any non-&lt;code&gt;NULL&lt;/code&gt; data which is passed to this API via the &lt;code&gt;data&lt;/code&gt; parameter or via the &lt;code&gt;data&lt;/code&gt; field of the &lt;code&gt;napi_property_descriptor&lt;/code&gt; array items can be associated with the resulting JavaScript constructor (which is returned in the &lt;code&gt;result&lt;/code&gt; parameter) and freed whenever the class is garbage-collected by passing both the JavaScript function and the data to &lt;a href=&quot;#n_api_napi_add_finalizer&quot;&gt;&lt;code&gt;napi_add_finalizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">任意の非 &lt;code&gt;NULL&lt;/code&gt; を介して、このAPIに渡されるデータ &lt;code&gt;data&lt;/code&gt; パラメータまたは介して &lt;code&gt;data&lt;/code&gt; のフィールド &lt;code&gt;napi_property_descriptor&lt;/code&gt; のアレイ項目が（に返され、得られたJavaScriptのコンストラクタと関連付けることができ &lt;code&gt;result&lt;/code&gt; パラメータ）とクラスがgarbage-あるときはいつでも解放しますJavaScript関数とデータの両方を&lt;a href=&quot;#n_api_napi_add_finalizer&quot;&gt; &lt;code&gt;napi_add_finalizer&lt;/code&gt; に&lt;/a&gt;渡すことによって収集されます。</target>
        </trans-unit>
        <trans-unit id="73a727689faff81bf2a17c199450888eb6c590f0" translate="yes" xml:space="preserve">
          <source>Any readable file descriptor, not necessarily for a regular file, is supported now.</source>
          <target state="translated">通常のファイルに限らず、任意の可読ファイル記述子がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="b22e6a46bdfd55ba2aa0919e34f00684aa3e276f" translate="yes" xml:space="preserve">
          <source>Any readable file, not necessarily a regular file, is supported now.</source>
          <target state="translated">通常のファイルでなくても、読めるファイルであれば何でもサポートされています。</target>
        </trans-unit>
        <trans-unit id="818029576311bb510aea405d8af84fb06b2a3ef6" translate="yes" xml:space="preserve">
          <source>Any settings changes only affect future calls to &lt;code&gt;.fork()&lt;/code&gt; and have no effect on workers that are already running.</source>
          <target state="translated">設定の変更は、将来の &lt;code&gt;.fork()&lt;/code&gt; の呼び出しにのみ影響し、すでに実行中のワーカーには影響しません。</target>
        </trans-unit>
        <trans-unit id="086f6b403d4a50e709d7333c42d7e59d2ae3e96e" translate="yes" xml:space="preserve">
          <source>Any specified &lt;code&gt;FileHandle&lt;/code&gt; has to support reading.</source>
          <target state="translated">指定された &lt;code&gt;FileHandle&lt;/code&gt; は、読み取りをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="f583facec8aebea8206ac5d519e4fe6a6f4a03d3" translate="yes" xml:space="preserve">
          <source>Any specified &lt;code&gt;FileHandle&lt;/code&gt; has to support writing.</source>
          <target state="translated">指定された &lt;code&gt;FileHandle&lt;/code&gt; は、書き込みをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="a8a24fd396ece2a0faf7e58fc0b99ffc56f0fe3f" translate="yes" xml:space="preserve">
          <source>Any specified file descriptor has to support reading.</source>
          <target state="translated">指定されたファイルディスクリプタは読み込みに対応している必要があります。</target>
        </trans-unit>
        <trans-unit id="9087fb8a7f21f4d737d5e8de7a92e255f7cce8b3" translate="yes" xml:space="preserve">
          <source>Any specifier string that is &lt;code&gt;require()&lt;/code&gt;ed and not listed in the dependencies will result in an error according to the policy.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; されていて、依存関係にリストされていない指定子文字列は、ポリシーに従ってエラーになります。</target>
        </trans-unit>
        <trans-unit id="3e45c7483390d6f6e779f68ded599f2da9295662" translate="yes" xml:space="preserve">
          <source>Any time an &lt;code&gt;Error&lt;/code&gt; object is routed through a domain, a few extra fields are added to it.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; オブジェクトがドメインを経由するたびに、いくつかのフィールドが追加されます。</target>
        </trans-unit>
        <trans-unit id="2d6c4b0264c6ae8f3ac16fb7f4789ba95a8d8a9e" translate="yes" xml:space="preserve">
          <source>Any use of the JavaScript &lt;code&gt;throw&lt;/code&gt; mechanism will raise an exception that &lt;em&gt;must&lt;/em&gt; be handled using &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; or the Node.js process will exit immediately.</source>
          <target state="translated">JavaScript &lt;code&gt;throw&lt;/code&gt; メカニズムを使用すると、 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; を使用して処理する&lt;em&gt;必要&lt;/em&gt;がある例外が発生するか、Node.jsプロセスがすぐに終了します。</target>
        </trans-unit>
        <trans-unit id="9792aabb6a042539f039ce61b4052386400e3e32" translate="yes" xml:space="preserve">
          <source>Apart from the debugger, various V8 Profilers are available through the DevTools protocol.</source>
          <target state="translated">デバッガとは別に、DevToolsプロトコルを介して様々なV8プロファイラが利用できます。</target>
        </trans-unit>
        <trans-unit id="9101900f5bcd15c384db52a54e7b3cb3dd6a21a4" translate="yes" xml:space="preserve">
          <source>Append a new name-value pair to the query string.</source>
          <target state="translated">新しい名前と値のペアをクエリ文字列に追加します。</target>
        </trans-unit>
        <trans-unit id="7f80fbc082b95cbd92edc2ffd0f1f111c7c6d25f" translate="yes" xml:space="preserve">
          <source>Applications running in Node.js will generally experience four categories of errors:</source>
          <target state="translated">Node.jsで実行されているアプリケーションは、一般的に4つのカテゴリーのエラーを経験します。</target>
        </trans-unit>
        <trans-unit id="ecfcbffbbe3ee7ba37594d932db7c2aa3c1f766c" translate="yes" xml:space="preserve">
          <source>Applications that are either writing data to or consuming data from a stream are not required to implement the stream interfaces directly and will generally have no reason to call &lt;code&gt;require('stream')&lt;/code&gt;.</source>
          <target state="translated">ストリームにデータを書き込んだり、ストリームからデータを消費したりするアプリケーションは、ストリームインターフェイスを直接実装する必要はなく、通常は &lt;code&gt;require('stream')&lt;/code&gt; を呼び出す理由はありません。</target>
        </trans-unit>
        <trans-unit id="d70e34d28832a1567a71e9e777653995535deb8c" translate="yes" xml:space="preserve">
          <source>Applies multiple bug workarounds within OpenSSL. See &lt;a href=&quot;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&quot;&gt;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&lt;/a&gt; for detail.</source>
          <target state="translated">OpenSSL内で複数のバグ回避策を適用します。詳細については、&lt;a href=&quot;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&quot;&gt;https：//www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ebbc578afdf322ff682f84b74e88081b7c51adb5" translate="yes" xml:space="preserve">
          <source>Array fallback support is provided for exports, similarly to import maps in order to be forward-compatible with fallback workflows in future:</source>
          <target state="translated">将来的にフォールバックワークフローとの互換性を保つために、インポートマップと同様にエクスポートにも配列フォールバックのサポートが提供されています。</target>
        </trans-unit>
        <trans-unit id="05fd7fe7245edc46acd4190581f9b48212b293f9" translate="yes" xml:space="preserve">
          <source>ArrayBuffers now also show their binary contents.</source>
          <target state="translated">ArrayBuffersもバイナリの内容を表示するようになりました。</target>
        </trans-unit>
        <trans-unit id="9e67ec885b4b216999aa38417b40b9b22ba7be16" translate="yes" xml:space="preserve">
          <source>As CCM processes the whole message at once, &lt;code&gt;update()&lt;/code&gt; can only be called once.</source>
          <target state="translated">CCMはメッセージ全体を一度に処理するため、 &lt;code&gt;update()&lt;/code&gt; は一度しか呼び出せません。</target>
        </trans-unit>
        <trans-unit id="bb4c3e05dd1e4e6e4215b9b7958808323444b6a0" translate="yes" xml:space="preserve">
          <source>As N-API calls are made, handles to objects in the heap for the underlying VM may be returned as &lt;code&gt;napi_values&lt;/code&gt;. These handles must hold the objects 'live' until they are no longer required by the native code, otherwise the objects could be collected before the native code was finished using them.</source>
          <target state="translated">N-API呼び出しが行われると、基になるVMのヒープ内のオブジェクトへのハンドルが &lt;code&gt;napi_values&lt;/code&gt; として返される場合があります。これらのハンドルは、ネイティブコードで必要とされなくなるまでオブジェクトを「ライブ」に保持する必要があります。そうしないと、ネイティブコードがオブジェクトの使用を完了する前にオブジェクトが収集される可能性があります。</target>
        </trans-unit>
        <trans-unit id="db28e83227a15b74952266fb23d62f73dacbe341" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt; that is both readable and writable, where data is written to produce a computed HMAC digest on the readable side, or</source>
          <target state="translated">読み取り可能で書き込み可能な&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt;として、読み取り可能な側で計算されたHMACダイジェストを生成するためにデータが書き込まれる、または</target>
        </trans-unit>
        <trans-unit id="403e4e4b5bba26b7f611afd2c7e889715289f136" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt; that is both readable and writable, where data is written to produce a computed hash digest on the readable side, or</source>
          <target state="translated">読み取り可能で書き込み可能な&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt;として、読み取り可能な側で計算されたハッシュダイジェストを生成するためにデータが書き込まれる、または</target>
        </trans-unit>
        <trans-unit id="015221db5afe28932e1236c8b140c5f28f25468b" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt; that is both readable and writable, where plain encrypted data is written to produce unencrypted data on the readable side, or</source>
          <target state="translated">読み取りと書き込みの両方が可能な&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt;として、プレーンな暗号化データが書き込まれ、読み取り側で暗号化されていないデータが生成されます。</target>
        </trans-unit>
        <trans-unit id="c5b8647298ff710d8d93d34f4c639461d091a5f9" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt; that is both readable and writable, where plain unencrypted data is written to produce encrypted data on the readable side, or</source>
          <target state="translated">読み取りと書き込みの両方が可能な&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt;として、プレーンな非暗号化データが書き込まれ、読み取り側で暗号化されたデータが生成されます。</target>
        </trans-unit>
        <trans-unit id="6b5fed1d45eebfac25d71dd1fe587cdd9807849f" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream, &lt;code&gt;process.stdin&lt;/code&gt; can also be used in &quot;old&quot; mode that is compatible with scripts written for Node.js prior to v0.10. For more information see &lt;a href=&quot;stream#stream_compatibility_with_older_node_js_versions&quot;&gt;Stream compatibility&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;デュプレックス&lt;/a&gt;ストリームとして、 &lt;code&gt;process.stdin&lt;/code&gt; は、v0.10より前のNode.js用に記述されたスクリプトと互換性のある「古い」モードでも使用できます。詳細については、&lt;a href=&quot;stream#stream_compatibility_with_older_node_js_versions&quot;&gt;ストリームの互換性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="410e9b2d10ecce76dabfb86570274d72595219f8" translate="yes" xml:space="preserve">
          <source>As a best practice, listeners should always be added for the &lt;code&gt;'error'&lt;/code&gt; events.</source>
          <target state="translated">ベストプラクティスとして、リスナーは常に &lt;code&gt;'error'&lt;/code&gt; イベントに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ee474e3e0f75aba8a0736f69b8fe3ae0054fcc7" translate="yes" xml:space="preserve">
          <source>As a best practice, warnings should be emitted only once per process. To do so, it is recommended to place the &lt;code&gt;emitWarning()&lt;/code&gt; behind a simple boolean flag as illustrated in the example below:</source>
          <target state="translated">ベストプラクティスとして、警告はプロセスごとに1回だけ発行する必要があります。そのためには、次の例に示すように、 &lt;code&gt;emitWarning()&lt;/code&gt; を単純なブールフラグの後ろに配置することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="893a0e7985d40d06428253f41d17249252e5e982" translate="yes" xml:space="preserve">
          <source>As a result, these functions cannot have the same negative impact on other processing that happens on libuv's threadpool that &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; can have.</source>
          <target state="translated">その結果、これらの関数は、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;が持つ可能性があるlibuvのスレッドプールで発生する他の処理に同じ悪影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="96a263bf9c3a3e1471b7d6a5199c7e547aff51ba" translate="yes" xml:space="preserve">
          <source>As a still supported legacy interface, it is possible (but not recommended) to create new instances of the &lt;code&gt;crypto.Certificate&lt;/code&gt; class as illustrated in the examples below.</source>
          <target state="translated">引き続きサポートされているレガシーインターフェイスとして、次の例に示すように、 &lt;code&gt;crypto.Certificate&lt;/code&gt; クラスの新しいインスタンスを作成することができます（ただし、お勧めしません）。</target>
        </trans-unit>
        <trans-unit id="e23817098cad54d24748fb2d93a355688874a756" translate="yes" xml:space="preserve">
          <source>As a user is typing input into the REPL prompt, pressing the &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; key will send the current line of input to the &lt;code&gt;eval&lt;/code&gt; function. In order to support multi-line input, the eval function can return an instance of &lt;code&gt;repl.Recoverable&lt;/code&gt; to the provided callback function:</source>
          <target state="translated">ユーザーがREPLプロンプトに入力を入力しているときに &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; キーを押すと、現在の入力行が &lt;code&gt;eval&lt;/code&gt; 関数に送信されます。複数行入力をサポートするために、eval関数は &lt;code&gt;repl.Recoverable&lt;/code&gt; のインスタンスを提供されたコールバック関数に返すことができます。</target>
        </trans-unit>
        <trans-unit id="c6fccee8b9bf59fc86ce6a5d4bb65cd0cfc15faa" translate="yes" xml:space="preserve">
          <source>As a writable &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt; where written data is used to validate against the supplied signature, or</source>
          <target state="translated">提供された署名に対して検証するために書き込まれたデータが使用される書き込み可能な&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt;として、または</target>
        </trans-unit>
        <trans-unit id="7cde42be763a9088ab70ccb8053a1f89a2cbb50d" translate="yes" xml:space="preserve">
          <source>As a writable &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt;, where data to be signed is written and the &lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt;&lt;code&gt;sign.sign()&lt;/code&gt;&lt;/a&gt; method is used to generate and return the signature, or</source>
          <target state="translated">書き込み可能な&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt;として。署名するデータが書き込まれ、&lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt; &lt;code&gt;sign.sign()&lt;/code&gt; &lt;/a&gt;メソッドを使用して署名が生成および返されます。</target>
        </trans-unit>
        <trans-unit id="3e8cba4404bac289608092f10fc7651b5ba03b91" translate="yes" xml:space="preserve">
          <source>As an alternative, use one of the following methods of constructing &lt;code&gt;Buffer&lt;/code&gt; objects:</source>
          <target state="translated">別の方法として、次のいずれかの方法で &lt;code&gt;Buffer&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="64039998e2554e82f38720b063b23f0119dbc6a6" translate="yes" xml:space="preserve">
          <source>As illustrated in the example, &lt;code&gt;executionAsyncId()&lt;/code&gt; and &lt;code&gt;execution&lt;/code&gt; each specify the value of the current execution context; which is delineated by calls to &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;.</source>
          <target state="translated">例に示すように、 &lt;code&gt;executionAsyncId()&lt;/code&gt; および &lt;code&gt;execution&lt;/code&gt; はそれぞれ、現在の実行コンテキストの値を指定します。これは &lt;code&gt;before&lt;/code&gt; と &lt;code&gt;after&lt;/code&gt; の呼び出しによって示されます。</target>
        </trans-unit>
        <trans-unit id="3918c9c0d50d8a4f8d9aaf017bcc2ec5ad9770f5" translate="yes" xml:space="preserve">
          <source>As object handles are returned they are associated with a 'scope'. The lifespan for the default scope is tied to the lifespan of the native method call. The result is that, by default, handles remain valid and the objects associated with these handles will be held live for the lifespan of the native method call.</source>
          <target state="translated">オブジェクトハンドルが返されると、それらは「スコープ」に関連付けられます。デフォルトのスコープの有効期間は、ネイティブメソッドコールの有効期間に関連付けられています。その結果、デフォルトではハンドルは有効なままであり、これらのハンドルに関連付けられたオブジェクトはネイティブメソッドコールの寿命まで保持されることになります。</target>
        </trans-unit>
        <trans-unit id="9834fff63d7588efa59326159f69c956659559ab" translate="yes" xml:space="preserve">
          <source>As of Node.js 8.0.0, the handlers of Promises are run inside the domain in which the call to &lt;code&gt;.then()&lt;/code&gt; or &lt;code&gt;.catch()&lt;/code&gt; itself was made:</source>
          <target state="translated">Node.js 8.0.0以降、 &lt;code&gt;.catch()&lt;/code&gt; のハンドラーは、 &lt;code&gt;.then()&lt;/code&gt; または.catch（）自体が呼び出されたドメイン内で実行されます。</target>
        </trans-unit>
        <trans-unit id="0189f8b9225df62e106eca8c4f6f6f1b44cad42e" translate="yes" xml:space="preserve">
          <source>As of Node.js v0.10, &lt;a href=&quot;#dgram_socket_bind_options_callback&quot;&gt;&lt;code&gt;dgram.Socket#bind()&lt;/code&gt;&lt;/a&gt; changed to an asynchronous execution model. Legacy code would use synchronous behavior:</source>
          <target state="translated">Node.js v0.10以降、&lt;a href=&quot;#dgram_socket_bind_options_callback&quot;&gt; &lt;code&gt;dgram.Socket#bind()&lt;/code&gt; &lt;/a&gt;は非同期実行モデルに変更されました。レガシーコードは同期動作を使用します：</target>
        </trans-unit>
        <trans-unit id="3ac9c4c0bb4477aaaa1e3745bbccb9965faf1342" translate="yes" xml:space="preserve">
          <source>As of v10.0.0, a deprecation warning is printed at runtime when &lt;code&gt;--pending-deprecation&lt;/code&gt; is used or when the calling code is outside &lt;code&gt;node_modules&lt;/code&gt; in order to better target developers, rather than users.</source>
          <target state="translated">v10.0.0以降、 &lt;code&gt;--pending-deprecation&lt;/code&gt; が使用されている場合、または呼び出しコードが &lt;code&gt;node_modules&lt;/code&gt; の外部にある場合、ユーザーではなく開発者をターゲットにするために、実行時に非推奨の警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="962c0a4bd1f3b3a805e3165b8c265f126b2e5613" translate="yes" xml:space="preserve">
          <source>As standalone program:</source>
          <target state="translated">スタンドアロンプログラムとして。</target>
        </trans-unit>
        <trans-unit id="e5fc8eed674c2cbb60f3a625bde43e1979c80ee0" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;Finished&lt;/code&gt; messages are message digests of the complete handshake (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can be used for external authentication procedures when the authentication provided by SSL/TLS is not desired or is not enough.</source>
          <target state="translated">&lt;code&gt;Finished&lt;/code&gt; メッセージが（TLS 1.0よりSSL 3.0のための192ビットの合計）は、完全なハンドシェイクのメッセージダイジェストであるSSL / TLSによって提供される認証が望まれていないか、ない場合には、それらは外部の認証手順のために使用することができます足りる。</target>
        </trans-unit>
        <trans-unit id="88bf2c870d425e8691eb66779c8b4b9673081e4d" translate="yes" xml:space="preserve">
          <source>As the original API was undocumented and not generally useful for non-internal code, no replacement API is provided.</source>
          <target state="translated">元のAPIは文書化されておらず、非内部コードでは一般的に有用ではないため、代替APIは提供されていません。</target>
        </trans-unit>
        <trans-unit id="7ce5ed7b5a829f51c0fead622120a3acc5c7dea0" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;process.mainModule&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; if there is no entry script.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; &lt;/a&gt;と同様に、エントリスクリプトがない場合、 &lt;code&gt;process.mainModule&lt;/code&gt; は &lt;code&gt;undefined&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="3e93aac3acee4e879ccffb8b3d225e86c77d9862" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;import&lt;/code&gt; statements, for ES module usage the value of &lt;code&gt;&quot;main&quot;&lt;/code&gt; must be a full path including extension: &lt;code&gt;&quot;./index.mjs&quot;&lt;/code&gt;, not &lt;code&gt;&quot;./index&quot;&lt;/code&gt;.</source>
          <target state="translated">同じように &lt;code&gt;import&lt;/code&gt; 文、ESモジュールの使用のための値は &lt;code&gt;&quot;main&quot;&lt;/code&gt; 拡張子を含む完全なパスでなければなりません： &lt;code&gt;&quot;./index.mjs&quot;&lt;/code&gt; ではなく、 &lt;code&gt;&quot;./index&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f13dc0c86f08a261569b0c58c81b9883fa1e85d" translate="yes" xml:space="preserve">
          <source>As with checking for the server &lt;a href=&quot;#tls_event_secureconnection&quot;&gt;&lt;code&gt;'secureConnection'&lt;/code&gt;&lt;/a&gt; event, &lt;code&gt;pair.cleartext.authorized&lt;/code&gt; should be inspected to confirm whether the certificate used is properly authorized.</source>
          <target state="translated">サーバーの&lt;a href=&quot;#tls_event_secureconnection&quot;&gt; &lt;code&gt;'secureConnection'&lt;/code&gt; &lt;/a&gt;イベントのチェックと同様に、 &lt;code&gt;pair.cleartext.authorized&lt;/code&gt; を調べて、使用されている証明書が適切に承認されているかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="4141add45a26459c4bd39909388482311f6fe29a" translate="yes" xml:space="preserve">
          <source>Assert</source>
          <target state="translated">Assert</target>
        </trans-unit>
        <trans-unit id="37ea4209ca4e870468d734a52d1e7e3c8af0584a" translate="yes" xml:space="preserve">
          <source>Assert: &lt;em&gt;resolved&lt;/em&gt; is a String.</source>
          <target state="translated">アサート：&lt;em&gt;解決済み&lt;/em&gt;は文字列です。</target>
        </trans-unit>
        <trans-unit id="882349c7f5112244b43b6c72ec0991bbb983fb67" translate="yes" xml:space="preserve">
          <source>Assert: &lt;em&gt;url&lt;/em&gt; corresponds to an existing file.</source>
          <target state="translated">アサート：&lt;em&gt;URL&lt;/em&gt;は既存のファイルに対応します。</target>
        </trans-unit>
        <trans-unit id="ee8316c0bc9494b895cb21ebd8868a9b57e28863" translate="yes" xml:space="preserve">
          <source>Assertion Testing</source>
          <target state="translated">アサーションテスト</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="d49cc2d0a2b818e7ed5faf9ef6b509305fbc9efa" translate="yes" xml:space="preserve">
          <source>Asserts that the function &lt;code&gt;fn&lt;/code&gt; does not throw an error.</source>
          <target state="translated">関数 &lt;code&gt;fn&lt;/code&gt; がエラーをスローしないことを表明します。</target>
        </trans-unit>
        <trans-unit id="e3957fccdb81b71e89905ba8f09f2b54b8f61f26" translate="yes" xml:space="preserve">
          <source>Assigning a property on &lt;code&gt;process.env&lt;/code&gt; will implicitly convert the value to a string. &lt;strong&gt;This behavior is deprecated.&lt;/strong&gt; Future versions of Node.js may throw an error when the value is not a string, number, or boolean.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; にプロパティを割り当てると、値が暗黙的に文字列に変換されます。&lt;strong&gt;この動作は非推奨です。&lt;/strong&gt;Node.jsの将来のバージョンでは、値が文字列、数値、またはブール値でない場合、エラーがスローされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8bd1090099518731cb82358f7150ea7e8e18982b" translate="yes" xml:space="preserve">
          <source>Assigning properties to the top-level &lt;code&gt;this&lt;/code&gt; as an alternative to &lt;code&gt;module.exports&lt;/code&gt; is deprecated. Developers should use &lt;code&gt;exports&lt;/code&gt; or &lt;code&gt;module.exports&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; の代わりとしてプロパティを最上位の &lt;code&gt;this&lt;/code&gt; に割り当てることは非推奨です。代わりに、開発者は &lt;code&gt;exports&lt;/code&gt; または &lt;code&gt;module.exports&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="06d00ede6deb155e49dc8cf86da916484c857d23" translate="yes" xml:space="preserve">
          <source>Assignment of the &lt;code&gt;_&lt;/code&gt; (underscore) variable</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; （アンダースコア）変数の割り当て</target>
        </trans-unit>
        <trans-unit id="d665fccb55c06268901cada38d0f82a9235c5575" translate="yes" xml:space="preserve">
          <source>Assignment to &lt;code&gt;module.exports&lt;/code&gt; must be done immediately. It cannot be done in any callbacks. This does not work:</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; への割り当てはすぐに行う必要があります。コールバックでは実行できません。これは動作しません：</target>
        </trans-unit>
        <trans-unit id="619b9ed00714b4d15db0a5b484877fe8405aa504" translate="yes" xml:space="preserve">
          <source>Associates the &lt;code&gt;dgram.Socket&lt;/code&gt; to a remote address and port. Every message sent by this handle is automatically sent to that destination. Also, the socket will only receive messages from that remote peer. Trying to call &lt;code&gt;connect()&lt;/code&gt; on an already connected socket will result in an &lt;a href=&quot;errors#errors_err_socket_dgram_is_connected&quot;&gt;&lt;code&gt;ERR_SOCKET_DGRAM_IS_CONNECTED&lt;/code&gt;&lt;/a&gt; exception. If &lt;code&gt;address&lt;/code&gt; is not provided, &lt;code&gt;'127.0.0.1'&lt;/code&gt; (for &lt;code&gt;udp4&lt;/code&gt; sockets) or &lt;code&gt;'::1'&lt;/code&gt; (for &lt;code&gt;udp6&lt;/code&gt; sockets) will be used by default. Once the connection is complete, a &lt;code&gt;'connect'&lt;/code&gt; event is emitted and the optional &lt;code&gt;callback&lt;/code&gt; function is called. In case of failure, the &lt;code&gt;callback&lt;/code&gt; is called or, failing this, an &lt;code&gt;'error'&lt;/code&gt; event is emitted.</source>
          <target state="translated">関連付け &lt;code&gt;dgram.Socket&lt;/code&gt; をリモートアドレスとポートに。このハンドルによって送信されるすべてのメッセージは、その宛先に自動的に送信されます。また、ソケットはそのリモートピアからのメッセージのみを受信します。すでに接続されているソケットで &lt;code&gt;connect()&lt;/code&gt; を呼び出そうとすると、&lt;a href=&quot;errors#errors_err_socket_dgram_is_connected&quot;&gt; &lt;code&gt;ERR_SOCKET_DGRAM_IS_CONNECTED&lt;/code&gt; &lt;/a&gt;例外が発生します。場合は &lt;code&gt;address&lt;/code&gt; 提供されていない、 &lt;code&gt;'127.0.0.1'&lt;/code&gt; （用 &lt;code&gt;udp4&lt;/code&gt; ソケット）または &lt;code&gt;'::1'&lt;/code&gt; （のための &lt;code&gt;udp6&lt;/code&gt; ソケット）がデフォルトで使用されます。接続が完了すると、 &lt;code&gt;'connect'&lt;/code&gt; イベントが発行され、オプションの &lt;code&gt;callback&lt;/code&gt; 関数が呼び出されます。失敗した場合、 &lt;code&gt;callback&lt;/code&gt; が呼び出されるか、これに失敗すると、 &lt;code&gt;'error'&lt;/code&gt; イベントが発行されます。</target>
        </trans-unit>
        <trans-unit id="d25c13e3a0fb1554e04e5083d12ad3e76e2f517a" translate="yes" xml:space="preserve">
          <source>Assuming an &lt;code&gt;index.mjs&lt;/code&gt; with</source>
          <target state="translated">仮定 &lt;code&gt;index.mjs&lt;/code&gt; をして</target>
        </trans-unit>
        <trans-unit id="3751c055775a3fd5e46bc50c33f4f8776b5e7427" translate="yes" xml:space="preserve">
          <source>Async Hooks</source>
          <target state="translated">非同期フック</target>
        </trans-unit>
        <trans-unit id="fbc139f7b1d50b9a66c62a8fe1c5279a87451a00" translate="yes" xml:space="preserve">
          <source>Async iterators register a permanent error handler on the stream to prevent any unhandled post-destroy errors.</source>
          <target state="translated">非同期イテレータは、処理されない破壊後のエラーを防ぐために、ストリームに恒久的なエラーハンドラを登録します。</target>
        </trans-unit>
        <trans-unit id="df5103c1d76d680bba6764bfa32d48a6b5502e54" translate="yes" xml:space="preserve">
          <source>AsyncResource</source>
          <target state="translated">AsyncResource</target>
        </trans-unit>
        <trans-unit id="207846314a3990e8fdd3da08a9a913a385115f88" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/close.2.html&quot;&gt;&lt;code&gt;close(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/close.2.html&quot;&gt; &lt;code&gt;close(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="81c6358263c307be9ef8a686829bbed957e65382" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchmod.2.html&quot;&gt;&lt;code&gt;fchmod(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchmod.2.html&quot;&gt; &lt;code&gt;fchmod(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="bddd536b720e4429ebd9c889527ed28b6809dfa4" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt;&lt;code&gt;fchown(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt; &lt;code&gt;fchown(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="bb4350c9f114fb8c3901ce0679f5b22f08672228" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt;&lt;code&gt;fdatasync(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt; &lt;code&gt;fdatasync(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="ad34fcb6ace8aca75784902aada9d9e60f1b585a" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt;&lt;code&gt;fdatasync(2)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt; &lt;code&gt;fdatasync(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="6ee0688b451469c96f066d51ebaee75bb1f3da28" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt;&lt;code&gt;fstat(2)&lt;/code&gt;&lt;/a&gt;. The callback gets two arguments &lt;code&gt;(err, stats)&lt;/code&gt; where &lt;code&gt;stats&lt;/code&gt; is an &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object. &lt;code&gt;fstat()&lt;/code&gt; is identical to &lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;stat()&lt;/code&gt;&lt;/a&gt;, except that the file to be stat-ed is specified by the file descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt; &lt;code&gt;fstat(2)&lt;/code&gt; &lt;/a&gt;。コールバックは、二つの引数を取得し &lt;code&gt;(err, stats)&lt;/code&gt; &lt;code&gt;stats&lt;/code&gt; ある&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;オブジェクト。 &lt;code&gt;fstat()&lt;/code&gt; はstat（）と同じですが、&lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;stat()&lt;/code&gt; &lt;/a&gt;のファイルがファイル記述子 &lt;code&gt;fd&lt;/code&gt; によって指定される点が異なります。</target>
        </trans-unit>
        <trans-unit id="24e6bc0bc1531b9eeca11deee09b0488be7a6867" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt;&lt;code&gt;fsync(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt; &lt;code&gt;fsync(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="c8ac0192924aff15e0c7c0acd33305cc5aa9309e" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt;&lt;code&gt;fsync(2)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt; &lt;code&gt;fsync(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="4b0c2bb494df453aecfc68a06ab9c256c05509c0" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/ftruncate.2.html&quot;&gt;&lt;code&gt;ftruncate(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/ftruncate.2.html&quot;&gt; &lt;code&gt;ftruncate(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="06dc3705c43322a051005430ab1d26a877c762fe" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt;&lt;code&gt;lchown(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt; &lt;code&gt;lchown(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="cfa6408a63fd1c60aef183cde8c36d760fa12120" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt;&lt;code&gt;link(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt; &lt;code&gt;link(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="9dc810a7f0da4267a165ebaa07ff3b7ea8bcb3af" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt;&lt;code&gt;link(2)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt; &lt;code&gt;link(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="48142cc3d8a92cae4496ba279455589953a6b3a9" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt;&lt;code&gt;lstat(2)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object for the given symbolic link &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt; &lt;code&gt;lstat(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Promise&lt;/code&gt; して解決した&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;与えられたシンボリックリンクのオブジェクト &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="875263631be328f78228047f131d9988dea3d292" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt;&lt;code&gt;lstat(2)&lt;/code&gt;&lt;/a&gt;. The callback gets two arguments &lt;code&gt;(err, stats)&lt;/code&gt; where &lt;code&gt;stats&lt;/code&gt; is a &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object. &lt;code&gt;lstat()&lt;/code&gt; is identical to &lt;code&gt;stat()&lt;/code&gt;, except that if &lt;code&gt;path&lt;/code&gt; is a symbolic link, then the link itself is stat-ed, not the file that it refers to.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt; &lt;code&gt;lstat(2)&lt;/code&gt; &lt;/a&gt;。コールバックは、二つの引数を取得し &lt;code&gt;(err, stats)&lt;/code&gt; &lt;code&gt;stats&lt;/code&gt; ある&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;オブジェクト。 &lt;code&gt;lstat()&lt;/code&gt; と同一である &lt;code&gt;stat()&lt;/code&gt; 、を除いた場合、その &lt;code&gt;path&lt;/code&gt; シンボリックリンクであり、リンク自体はSTAT-EDはなく、それが参照するファイルです。</target>
        </trans-unit>
        <trans-unit id="f764dc94aab80d6bfa0fd0bec45fd64486a8310f" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt;&lt;code&gt;readlink(2)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;code&gt;linkString&lt;/code&gt; upon success.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt; &lt;code&gt;readlink(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Promise&lt;/code&gt; して解決され &lt;code&gt;linkString&lt;/code&gt; 成功時。</target>
        </trans-unit>
        <trans-unit id="046dd32472c9747bf8fae24c7e00dfc7dd0e552d" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt;&lt;code&gt;readlink(2)&lt;/code&gt;&lt;/a&gt;. The callback gets two arguments &lt;code&gt;(err, linkString)&lt;/code&gt;.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt; &lt;code&gt;readlink(2)&lt;/code&gt; &lt;/a&gt;。コールバックは2つの引数 &lt;code&gt;(err, linkString)&lt;/code&gt; 取得します。</target>
        </trans-unit>
        <trans-unit id="cd168382f6368986c9aa40e2ab34d1be126cbe49" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt;&lt;code&gt;rmdir(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt; &lt;code&gt;rmdir(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="b8f047acee63c91786a3a386a177a4ee8d8d42ff" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt;&lt;code&gt;stat(2)&lt;/code&gt;&lt;/a&gt;. The callback gets two arguments &lt;code&gt;(err, stats)&lt;/code&gt; where &lt;code&gt;stats&lt;/code&gt; is an &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt; &lt;code&gt;stat(2)&lt;/code&gt; &lt;/a&gt;。コールバックは、二つの引数を取得し &lt;code&gt;(err, stats)&lt;/code&gt; &lt;code&gt;stats&lt;/code&gt; ある&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3d3193c4695bbec930962bab113df5c656f11410" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/symlink.2.html&quot;&gt;&lt;code&gt;symlink(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback. The &lt;code&gt;type&lt;/code&gt; argument is only available on Windows and ignored on other platforms. It can be set to &lt;code&gt;'dir'&lt;/code&gt;, &lt;code&gt;'file'&lt;/code&gt;, or &lt;code&gt;'junction'&lt;/code&gt;. If the &lt;code&gt;type&lt;/code&gt; argument is not set, Node will autodetect &lt;code&gt;target&lt;/code&gt; type and use &lt;code&gt;'file'&lt;/code&gt; or &lt;code&gt;'dir'&lt;/code&gt;. If the &lt;code&gt;target&lt;/code&gt; does not exist, &lt;code&gt;'file'&lt;/code&gt; will be used. Windows junction points require the destination path to be absolute. When using &lt;code&gt;'junction'&lt;/code&gt;, the &lt;code&gt;target&lt;/code&gt; argument will automatically be normalized to absolute path.</source>
          <target state="translated">非同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/symlink.2.html&quot;&gt; &lt;code&gt;symlink(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。 &lt;code&gt;type&lt;/code&gt; 引数は、Windows上でのみ利用可能であり、他のプラットフォームでは無視します。 &lt;code&gt;'dir'&lt;/code&gt; 、 &lt;code&gt;'file'&lt;/code&gt; 、または &lt;code&gt;'junction'&lt;/code&gt; に設定できます。 &lt;code&gt;type&lt;/code&gt; 引数が設定されていない場合、Nodeは &lt;code&gt;target&lt;/code&gt; タイプを自動検出し、 &lt;code&gt;'file'&lt;/code&gt; または &lt;code&gt;'dir'&lt;/code&gt; を使用します。場合は &lt;code&gt;target&lt;/code&gt; 存在しない、 &lt;code&gt;'file'&lt;/code&gt; 使用します。 Windowsジャンクションポイントでは、宛先パスを絶対パスにする必要があります。 &lt;code&gt;'junction'&lt;/code&gt; を使用する場合、 &lt;code&gt;target&lt;/code&gt; 引数は自動的に絶対パスに正規化されます。</target>
        </trans-unit>
        <trans-unit id="5becefe8f043e2409d28bd6644782d0e8c9ed483" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt;&lt;code&gt;truncate(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, &lt;code&gt;fs.ftruncate()&lt;/code&gt; is called.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt; &lt;code&gt;truncate(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。ファイル記述子を最初の引数として渡すこともできます。この場合、 &lt;code&gt;fs.ftruncate()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="086e500b32994a55adb4a9bb6803347f1f01c959" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt;&lt;code&gt;unlink(2)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="translated">非同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt; &lt;code&gt;unlink(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="30eda89daf29dd37b5c33ea6af171a0cbda2f48a" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt;&lt;code&gt;readdir(3)&lt;/code&gt;&lt;/a&gt;. Reads the contents of a directory. The callback gets two arguments &lt;code&gt;(err, files)&lt;/code&gt; where &lt;code&gt;files&lt;/code&gt; is an array of the names of the files in the directory excluding &lt;code&gt;'.'&lt;/code&gt; and &lt;code&gt;'..'&lt;/code&gt;.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt; &lt;code&gt;readdir(3)&lt;/code&gt; &lt;/a&gt;。ディレクトリの内容を読み取ります。コールバックは二つの引数を取得 &lt;code&gt;(err, files)&lt;/code&gt; &lt;code&gt;files&lt;/code&gt; 除くディレクトリ内のファイルの名前の配列であるが &lt;code&gt;'.'&lt;/code&gt; および &lt;code&gt;'..'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbb0824a63d5adeba58c7e2befadf249fff6a34a" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b83a298e5187f5282e1f6ffbb164af6c666961b4" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt;&lt;code&gt;lchmod(2)&lt;/code&gt;&lt;/a&gt;. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt; &lt;code&gt;lchmod(2)&lt;/code&gt; &lt;/a&gt;。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="5c386e768f620d9421694511c41f1869a7099c6b" translate="yes" xml:space="preserve">
          <source>Asynchronous Process Creation</source>
          <target state="translated">非同期プロセス作成</target>
        </trans-unit>
        <trans-unit id="870352c416c2838c61264150314eaa4a679049d3" translate="yes" xml:space="preserve">
          <source>Asynchronous Thread-safe Function Calls</source>
          <target state="translated">非同期スレッドセーフ関数呼び出し</target>
        </trans-unit>
        <trans-unit id="a03fedb2a557050dce7a75bc3afc2350375e0e56" translate="yes" xml:space="preserve">
          <source>Asynchronous context example</source>
          <target state="translated">非同期コンテキストの例</target>
        </trans-unit>
        <trans-unit id="932d1107f2520700d1c17c3a107f791d9049a851" translate="yes" xml:space="preserve">
          <source>Asynchronous file open that returns a &lt;code&gt;Promise&lt;/code&gt; that, when resolved, yields a &lt;code&gt;FileHandle&lt;/code&gt; object. See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt;&lt;code&gt;open(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">解決されたときに &lt;code&gt;FileHandle&lt;/code&gt; オブジェクトを生成する &lt;code&gt;Promise&lt;/code&gt; を返す非同期ファイルオープン。&lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt; &lt;code&gt;open(2)&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6e7ff50f9f2650749375c6de24e52e7612612d38" translate="yes" xml:space="preserve">
          <source>Asynchronous file open. See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt;&lt;code&gt;open(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期ファイルが開いています。&lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt; &lt;code&gt;open(2)&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51ae8164adb84cce822fb1485a5cdaf4e6f315d5" translate="yes" xml:space="preserve">
          <source>Asynchronous system APIs are used by Node.js whenever possible, but where they do not exist, libuv's threadpool is used to create asynchronous node APIs based on synchronous system APIs. Node.js APIs that use the threadpool are:</source>
          <target state="translated">非同期システムAPIは可能な限りNode.jsで使用されますが、存在しない場合はlibuvのthreadpoolを使用して同期システムAPIをベースに非同期ノードAPIを作成します。スレッドプールを使用するNode.jsのAPIは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c3df2a3d6f21d146c21574f761ef4944133d9a7e" translate="yes" xml:space="preserve">
          <source>Asynchronous vs. Synchronous</source>
          <target state="translated">非同期 vs.同期</target>
        </trans-unit>
        <trans-unit id="41ff317f81343d387b04d108c5d6283c4dcb0935" translate="yes" xml:space="preserve">
          <source>Asynchronously append data to a file, creating the file if it does not yet exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データを非同期でファイルに追加し、まだ存在しない場合はファイルを作成します。 &lt;code&gt;data&lt;/code&gt; は文字列または&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="98a5c4afe98dc5cc8dcf18f90e97c71e236ec74c" translate="yes" xml:space="preserve">
          <source>Asynchronously append data to a file, creating the file if it does not yet exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no arguments upon success.</source>
          <target state="translated">データを非同期でファイルに追加し、まだ存在しない場合はファイルを作成します。 &lt;code&gt;data&lt;/code&gt; は文字列または&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="976cd5376ce8651fee81ccbed770f762bd05a695" translate="yes" xml:space="preserve">
          <source>Asynchronously append data to this file, creating the file if it does not yet exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no arguments upon success.</source>
          <target state="translated">このファイルに非同期でデータを追加し、まだ存在しない場合はファイルを作成します。 &lt;code&gt;data&lt;/code&gt; は文字列または&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="1892b7d4690e77e49d808bad31fc4422c9b65b09" translate="yes" xml:space="preserve">
          <source>Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期にファイルの所有者とグループを変更します。例外が発生する可能性がある以外の引数は、完了コールバックには与えられません。</target>
        </trans-unit>
        <trans-unit id="2dfd976004fd3b58537d85e14c807b6633f9f8bd" translate="yes" xml:space="preserve">
          <source>Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期的にファイルのパーミッションを変更します。可能な例外以外の引数は、完了コールバックには与えられません。</target>
        </trans-unit>
        <trans-unit id="7fc5972b2e83a394368241b636afbbaac521139f" translate="yes" xml:space="preserve">
          <source>Asynchronously computes the canonical pathname by resolving &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt; and symbolic links.</source>
          <target state="translated">を解決することにより、正規のパス名を非同期的に計算し &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;..&lt;/code&gt; およびシンボリックリンク。</target>
        </trans-unit>
        <trans-unit id="61e758277c877bffb922ed73601c1ec773283bec" translate="yes" xml:space="preserve">
          <source>Asynchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it already exists. No arguments other than a possible exception are given to the callback function. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; を &lt;code&gt;dest&lt;/code&gt; に非同期にコピーします。デフォルトでは、 &lt;code&gt;dest&lt;/code&gt; はすでに存在する場合は上書きされます。起こり得る例外以外の引数は、コールバック関数に渡されません。Node.jsは、コピー操作のアトミック性を保証しません。宛先ファイルが書き込み用に開かれた後にエラーが発生した場合、Node.jsは宛先を削除しようとします。</target>
        </trans-unit>
        <trans-unit id="0574311e1ef2b3da4f080981eca1cd288383a2b2" translate="yes" xml:space="preserve">
          <source>Asynchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it already exists. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no arguments upon success.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; を &lt;code&gt;dest&lt;/code&gt; に非同期にコピーします。デフォルトでは、 &lt;code&gt;dest&lt;/code&gt; はすでに存在する場合は上書きされます。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="d96ee6aa922ef2ca4b26e5513d0f8a3a0c0fff67" translate="yes" xml:space="preserve">
          <source>Asynchronously creates a directory then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">非同期でディレクトリを作成し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="ec0c8dd0fcddb9b0398d333f8377db08d57ba88c" translate="yes" xml:space="preserve">
          <source>Asynchronously creates a directory. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期的にディレクトリを作成します。例外が発生する可能性がある以外の引数は、完了コールバックには与えられません。</target>
        </trans-unit>
        <trans-unit id="939198d49e024c21a1e1e8e46a1c0cdcd9fe7a68" translate="yes" xml:space="preserve">
          <source>Asynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks.</source>
          <target state="translated">サーバー上の同時接続数を非同期で取得します。ソケットがフォークに送られた場合に動作します。</target>
        </trans-unit>
        <trans-unit id="14b60a1ac407f4352799156d07820adf71cf5f4b" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the entire contents of a file.</source>
          <target state="translated">非同期にファイルの内容全体を読み込みます。</target>
        </trans-unit>
        <trans-unit id="766290f37aa426d8129aecd96082d0a6226bde50" translate="yes" xml:space="preserve">
          <source>Asynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期的にファイルまたはシンボリックリンクを削除します。可能な例外以外の引数は、完了コールバックには与えられません。</target>
        </trans-unit>
        <trans-unit id="d8843625268d4b77ea1512d3934aa5ff87185eb5" translate="yes" xml:space="preserve">
          <source>Asynchronously rename file at &lt;code&gt;oldPath&lt;/code&gt; to the pathname provided as &lt;code&gt;newPath&lt;/code&gt;. In the case that &lt;code&gt;newPath&lt;/code&gt; already exists, it will be overwritten. If there is a directory at &lt;code&gt;newPath&lt;/code&gt;, an error will be raised instead. No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">非同期でファイル名を変更 &lt;code&gt;oldPath&lt;/code&gt; として提供したパス名に &lt;code&gt;newPath&lt;/code&gt; 。 &lt;code&gt;newPath&lt;/code&gt; がすでに存在する場合は、上書きされます。 &lt;code&gt;newPath&lt;/code&gt; にディレクトリがある場合、代わりにエラーが発生します。起こりうる例外以外の引数は、完了コールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="58ece64d813f422b3fc9b6ecb0f0ff6b40f7434c" translate="yes" xml:space="preserve">
          <source>Asynchronously writes data to a file, replacing the file if it already exists. &lt;code&gt;data&lt;/code&gt; can be a string or a buffer. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no arguments upon success.</source>
          <target state="translated">非同期でファイルにデータを書き込み、ファイルが既に存在する場合はそれを置き換えます。 &lt;code&gt;data&lt;/code&gt; は文字列またはバッファです。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="40afcfc38b7a5f2938ce36281f7fe9f5e8725769" translate="yes" xml:space="preserve">
          <source>At this time coverage is only collected in the main thread and will not be output for code executed by worker threads.</source>
          <target state="translated">この時点では、カバレッジはメインスレッドにのみ収集され、ワーカースレッドで実行されるコードに対しては出力されません。</target>
        </trans-unit>
        <trans-unit id="b19f4cf9dafd0485024999c5ac53d9a2b7fe4ae4" translate="yes" xml:space="preserve">
          <source>AtExit hooks</source>
          <target state="translated">AtExitフック</target>
        </trans-unit>
        <trans-unit id="cea32cf122572dc5951380b0e98cbcb8bd4712d4" translate="yes" xml:space="preserve">
          <source>Attaching a &lt;code&gt;'data'&lt;/code&gt; event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available.</source>
          <target state="translated">明示的に一時停止されていないストリームに &lt;code&gt;'data'&lt;/code&gt; イベントリスナーをアタッチすると、ストリームがフローモードに切り替わります。その後、データが利用可能になるとすぐに渡されます。</target>
        </trans-unit>
        <trans-unit id="fd087322b0e9680ce97117b3037d67b230d66cc7" translate="yes" xml:space="preserve">
          <source>Attempting to fill a non-zero length buffer with a zero length buffer triggers a thrown exception.</source>
          <target state="translated">ゼロ長ではないバッファをゼロ長のバッファで埋めようとすると、スローされた例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e2e0426506e4725ac2d5585b495d07354c95a392" translate="yes" xml:space="preserve">
          <source>Attempting to resume normally after an uncaught exception can be similar to pulling out of the power cord when upgrading a computer &amp;mdash; nine out of ten times nothing happens - but the 10th time, the system becomes corrupted.</source>
          <target state="translated">キャッチされなかった例外の後に正常に再開しようとすることは、コンピュータをアップグレードするときに電源コードを抜くことに似ています。10回のうち9回は何も起こりませんが、10回目はシステムが破損します。</target>
        </trans-unit>
        <trans-unit id="11d283b1b61a25bccb1159e09a9877652fcdcde4" translate="yes" xml:space="preserve">
          <source>Attempting to set a TLS protocol &lt;code&gt;minVersion&lt;/code&gt; or &lt;code&gt;maxVersion&lt;/code&gt; conflicts with an attempt to set the &lt;code&gt;secureProtocol&lt;/code&gt; explicitly. Use one mechanism or the other.</source>
          <target state="translated">TLSプロトコルの &lt;code&gt;minVersion&lt;/code&gt; または &lt;code&gt;maxVersion&lt;/code&gt; を設定しようとすると、 &lt;code&gt;secureProtocol&lt;/code&gt; を明示的に設定しようとすると競合します。どちらかのメカニズムを使用します。</target>
        </trans-unit>
        <trans-unit id="e7450aeaf10a1d9835fb22749c80944a631c9bd8" translate="yes" xml:space="preserve">
          <source>Attempting to set a header field name or value that contains invalid characters will result in a &lt;a href=&quot;errors#errors_class_typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; being thrown.</source>
          <target state="translated">無効な文字を含むヘッダーフィールド名または値を設定しようとすると、&lt;a href=&quot;errors#errors_class_typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="0562a89091aa1d9d44d65d1f29272422e1ef026f" translate="yes" xml:space="preserve">
          <source>Attempts to use the server's preferences instead of the client's when selecting a cipher. Behavior depends on protocol version. See &lt;a href=&quot;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&quot;&gt;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&lt;/a&gt;.</source>
          <target state="translated">暗号を選択するときに、クライアントの設定ではなくサーバーの設定を使用しようとします。動作はプロトコルのバージョンによって異なります。&lt;a href=&quot;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html&quot;&gt;https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.htmlを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c1bb6246c4b5eba2405c8d2e267c8ad678a420d" translate="yes" xml:space="preserve">
          <source>Automatically zero-fills all newly allocated &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt;&lt;code&gt;SlowBuffer&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">新しく割り当てられたすべての&lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt; &lt;code&gt;SlowBuffer&lt;/code&gt; &lt;/a&gt;インスタンスを自動的にゼロで埋めます。</target>
        </trans-unit>
        <trans-unit id="681b5b5ae10b994e61d9fc53cf8a95498ff0df39" translate="yes" xml:space="preserve">
          <source>Availability</source>
          <target state="translated">Availability</target>
        </trans-unit>
        <trans-unit id="71ea6ab27794b1b786ec6f49c43b3be10f62e11b" translate="yes" xml:space="preserve">
          <source>Avoid using &lt;code&gt;require.extensions&lt;/code&gt;. Use could cause subtle bugs and resolving the extensions gets slower with each registered extension.</source>
          <target state="translated">&lt;code&gt;require.extensions&lt;/code&gt; の使用は避けてください。使用すると微妙なバグが発生する可能性があり、拡張機能の解決は登録された拡張機能ごとに遅くなります。</target>
        </trans-unit>
        <trans-unit id="0c375b39ededa122db6c5e755a1b2e705c13957d" translate="yes" xml:space="preserve">
          <source>Avoiding duplicate warnings</source>
          <target state="translated">重複警告の回避</target>
        </trans-unit>
        <trans-unit id="8fb72a563299c6d5a3e07e89e022add61bdd6549" translate="yes" xml:space="preserve">
          <source>Awaits the &lt;code&gt;asyncFn&lt;/code&gt; promise or, if &lt;code&gt;asyncFn&lt;/code&gt; is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is not rejected.</source>
          <target state="translated">待っ &lt;code&gt;asyncFn&lt;/code&gt; の約束や、場合 &lt;code&gt;asyncFn&lt;/code&gt; は関数であり、すぐに関数を呼び出すと、完全に返された約束をお待ちしております。次に、約束が拒否されていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="3d138ce5c31c73160ab7311fdf77259757306f4a" translate="yes" xml:space="preserve">
          <source>Awaits the &lt;code&gt;asyncFn&lt;/code&gt; promise or, if &lt;code&gt;asyncFn&lt;/code&gt; is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is rejected.</source>
          <target state="translated">待っ &lt;code&gt;asyncFn&lt;/code&gt; の約束や、場合 &lt;code&gt;asyncFn&lt;/code&gt; は関数であり、すぐに関数を呼び出すと、完全に返された約束をお待ちしております。次に、約束が拒否されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="a4707f4e95ebcde082b4994eb1217fdc6dea792d" translate="yes" xml:space="preserve">
          <source>Bare specifier package resolution lookup through node_modules</source>
          <target state="translated">node_modules を通じてパッケージの解像度を検索するベア指定子</target>
        </trans-unit>
        <trans-unit id="b6b433ea5c3c6467576319c5fbc52ef203bda84f" translate="yes" xml:space="preserve">
          <source>Bare specifiers, and the bare specifier portion of deep import specifiers, are strings; but everything else in a specifier is a URL.</source>
          <target state="translated">ベア指定子とディープインポート指定子のベア指定子部分は文字列ですが、指定子内の他のすべてのものは URL です。</target>
        </trans-unit>
        <trans-unit id="23565a0ceba01f9ffe5b0dc7106e82f8b29f21cf" translate="yes" xml:space="preserve">
          <source>Based on the recommendations of &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf&quot;&gt;NIST SP 800-131A&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf&quot;&gt;NIST SP 800-131Aの&lt;/a&gt;推奨に基づく：</target>
        </trans-unit>
        <trans-unit id="13280a7df8d3cffc696b26b23c5b717ddabf4d54" translate="yes" xml:space="preserve">
          <source>Basic N-API Data Types</source>
          <target state="translated">基本的なN-APIデータ型</target>
        </trans-unit>
        <trans-unit id="0531950c357a602b86bea24e2ae4c86d1cdf0398" translate="yes" xml:space="preserve">
          <source>Be an N-API addon, or</source>
          <target state="translated">N-APIアドオンであるか</target>
        </trans-unit>
        <trans-unit id="210405f699c0ae9511b9065687cdcbd88db13e20" translate="yes" xml:space="preserve">
          <source>Be aware that in the &lt;code&gt;repl&lt;/code&gt; the error message will be different to the one thrown in a file! See below for further details.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; では、エラーメッセージはファイルでスローされたものとは異なることに注意してください。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a0176b12890631168006259f0fec8076d0bcb6f7" translate="yes" xml:space="preserve">
          <source>Be aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.</source>
          <target state="translated">子プロセスの環境が明示的に設定されていない限り、この環境変数はすべての子プロセスに継承され、その子プロセスがOpenSSLを使用している場合、nodeと同じCAを信頼することになる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a6afc55c88fc97ff27bc08b6c490a5d05c14cd25" translate="yes" xml:space="preserve">
          <source>Be declared as context-aware using &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; as described above</source>
          <target state="translated">上記のように &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; を使用してコンテキスト対応として宣言されている</target>
        </trans-unit>
        <trans-unit id="8a4b3d89eb904333fb7d3756c67f2538d7f90ca9" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; streams are both &lt;code&gt;Readable&lt;/code&gt; and &lt;code&gt;Writable&lt;/code&gt;, each maintains &lt;em&gt;two&lt;/em&gt; separate internal buffers used for reading and writing, allowing each side to operate independently of the other while maintaining an appropriate and efficient flow of data. For example, &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; instances are &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams whose &lt;code&gt;Readable&lt;/code&gt; side allows consumption of data received &lt;em&gt;from&lt;/em&gt; the socket and whose &lt;code&gt;Writable&lt;/code&gt; side allows writing data &lt;em&gt;to&lt;/em&gt; the socket. Because data may be written to the socket at a faster or slower rate than data is received, it is important for each side to operate (and buffer) independently of the other.</source>
          <target state="translated">ため&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;ストリームは両方とも &lt;code&gt;Readable&lt;/code&gt; 及び &lt;code&gt;Writable&lt;/code&gt; 、それぞれが維持&lt;em&gt;2つの&lt;/em&gt;読み書き、データの適切かつ効率的な流れを維持しながら、それぞれの側が他方の独立して動作することを可能にするために使用される別の内部バッファを。例えば、&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; の&lt;/a&gt;インスタンスがある&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;そのストリーム &lt;code&gt;Readable&lt;/code&gt; 側受信したデータの消費可能にする&lt;em&gt;から&lt;/em&gt;ソケットを、その &lt;code&gt;Writable&lt;/code&gt; サイドデータを書き込むことを可能&lt;em&gt;に&lt;/em&gt;ソケット。データは、データが受信されるよりも速いまたは遅い速度でソケットに書き込まれる可能性があるため、それぞれが独立して動作（およびバッファリング）することが重要です。</target>
        </trans-unit>
        <trans-unit id="e43c36cf51a09fe109b357563f98d416ccca8572" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;PerformanceObserver&lt;/code&gt; instances introduce their own additional performance overhead, instances should not be left subscribed to notifications indefinitely. Users should disconnect observers as soon as they are no longer needed.</source>
          <target state="translated">ので &lt;code&gt;PerformanceObserver&lt;/code&gt; のインスタンスは、独自の追加のパフォーマンス・オーバーヘッドを導入し、インスタンスは無期限通知に加入したままにしないでください。ユーザーは、不要になったオブザーバーをすぐに切断する必要があります。</target>
        </trans-unit>
        <trans-unit id="ee71d7f7ec47191268617382ca43907ab99fd18f" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;kill()&lt;/code&gt; attempts to gracefully disconnect the worker process, it is susceptible to waiting indefinitely for the disconnect to complete. For example, if the worker enters an infinite loop, a graceful disconnect will never occur. If the graceful disconnect behavior is not needed, use &lt;code&gt;worker.process.kill()&lt;/code&gt;.</source>
          <target state="translated">ので &lt;code&gt;kill()&lt;/code&gt; 正常ワーカープロセスを切断しようとする試み、それが完全に切断するために無期限に待機しているの影響を受けやすいです。たとえば、ワーカーが無限ループに入った場合、正常な切断は発生しません。正常な切断動作が必要ない場合は、 &lt;code&gt;worker.process.kill()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="ef790698716c7ee0f926d652933fd27ca728b2e9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;module&lt;/code&gt; provides a &lt;code&gt;filename&lt;/code&gt; property (normally equivalent to &lt;code&gt;__filename&lt;/code&gt;), the entry point of the current application can be obtained by checking &lt;code&gt;require.main.filename&lt;/code&gt;.</source>
          <target state="translated">ので、 &lt;code&gt;module&lt;/code&gt; 提供する &lt;code&gt;filename&lt;/code&gt; プロパティ（に通常同等 &lt;code&gt;__filename&lt;/code&gt; に）、現在のアプリケーションのエントリポイントをチェックすることによって得ることができる &lt;code&gt;require.main.filename&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="5b50eed8d664c34b92740bfba845ba13677a5bfc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;nice&lt;/code&gt; values are Unix-specific, on Windows the &lt;code&gt;nice&lt;/code&gt; values of all processors are always 0.</source>
          <target state="translated">ので &lt;code&gt;nice&lt;/code&gt; 値は、UNIX固有のもので、Windows上で &lt;code&gt;nice&lt;/code&gt; すべてのプロセッサの値は常に0です。</target>
        </trans-unit>
        <trans-unit id="3936d9e027d4f7d849f82ddac675cb6b070b6236" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;server.listen()&lt;/code&gt; hands off most of the work to the master process, there are three cases where the behavior between a normal Node.js process and a cluster worker differs:</source>
          <target state="translated">&lt;code&gt;server.listen()&lt;/code&gt; はほとんどの作業をマスタープロセスに渡すため、通常のNode.jsプロセスとクラスターワーカーの間の動作が異なる3つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="cc143ffcb4d59a69f5c64c321bc5d4cc6f4da8fe" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;vm.runInThisContext()&lt;/code&gt; does not have access to the local scope, &lt;code&gt;localVar&lt;/code&gt; is unchanged. In contrast, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;does&lt;/em&gt; have access to the local scope, so the value &lt;code&gt;localVar&lt;/code&gt; is changed. In this way &lt;code&gt;vm.runInThisContext()&lt;/code&gt; is much like an &lt;a href=&quot;https://es5.github.io/#x10.4.2&quot;&gt;indirect &lt;code&gt;eval()&lt;/code&gt; call&lt;/a&gt;, e.g. &lt;code&gt;(0,eval)('code')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vm.runInThisContext()&lt;/code&gt; はローカルスコープにアクセスできないため、 &lt;code&gt;localVar&lt;/code&gt; は変更されません。対照的に、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;&lt;em&gt;は&lt;/em&gt;ローカルスコープにアクセスできるため、値 &lt;code&gt;localVar&lt;/code&gt; が変更されます。このように、 &lt;code&gt;vm.runInThisContext()&lt;/code&gt; は、&lt;a href=&quot;https://es5.github.io/#x10.4.2&quot;&gt;間接的な &lt;code&gt;eval()&lt;/code&gt; 呼び出し&lt;/a&gt;に似ています（例： &lt;code&gt;(0,eval)('code')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a298b78360dc43f65882b92f932e420a9328bc04" translate="yes" xml:space="preserve">
          <source>Because JavaScript does not have support for multiple inheritance, the &lt;code&gt;stream.Duplex&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream (as opposed to extending the &lt;code&gt;stream.Readable&lt;/code&gt;&lt;em&gt;and&lt;/em&gt;&lt;code&gt;stream.Writable&lt;/code&gt; classes).</source>
          <target state="translated">JavaScriptは多重継承をサポートしていないため、 &lt;code&gt;stream.Duplex&lt;/code&gt; クラスは、（ &lt;code&gt;stream.Readable&lt;/code&gt; &lt;em&gt;および&lt;/em&gt; &lt;code&gt;stream.Writable&lt;/code&gt; クラスを拡張するのではなく）&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームを実装するように拡張されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81b13c52658ca440c352bc51da120443fe5a4fc8" translate="yes" xml:space="preserve">
          <source>Because RSA public keys can be derived from private keys, a private key may be passed instead of a public key.</source>
          <target state="translated">RSA 公開鍵は秘密鍵から派生することができるため、公開鍵の代わりに秘密鍵を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2ac5a6d6dda6d588b0c5c357a8ed768499a1bccf" translate="yes" xml:space="preserve">
          <source>Because libuv's threadpool has a fixed size, it means that if for whatever reason any of these APIs takes a long time, other (seemingly unrelated) APIs that run in libuv's threadpool will experience degraded performance. In order to mitigate this issue, one potential solution is to increase the size of libuv's threadpool by setting the &lt;code&gt;'UV_THREADPOOL_SIZE'&lt;/code&gt; environment variable to a value greater than &lt;code&gt;4&lt;/code&gt; (its current default value). For more information, see the &lt;a href=&quot;http://docs.libuv.org/en/latest/threadpool.html&quot;&gt;libuv threadpool documentation&lt;/a&gt;.</source>
          <target state="translated">libuvのスレッドプールはサイズが固定されているため、何らかの理由でこれらのAPIのいずれかに時間がかかる場合、libuvのスレッドプールで実行される他の（一見無関係な）APIのパフォーマンスが低下することを意味します。この問題を軽減するための1つの潜在的な解決策は、 &lt;code&gt;'UV_THREADPOOL_SIZE'&lt;/code&gt; 環境変数を &lt;code&gt;4&lt;/code&gt; （現在のデフォルト値）より大きい値に設定して、libuvのスレッドプールのサイズを増やすことです。詳細については、&lt;a href=&quot;http://docs.libuv.org/en/latest/threadpool.html&quot;&gt;libuvスレッドプールのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f37f5b4a775883f5f6850c3e2e1562e198f6ea2" translate="yes" xml:space="preserve">
          <source>Because listeners are managed using an internal array, calling this will change the position indices of any listener registered &lt;em&gt;after&lt;/em&gt; the listener being removed. This will not impact the order in which listeners are called, but it means that any copies of the listener array as returned by the &lt;code&gt;emitter.listeners()&lt;/code&gt; method will need to be recreated.</source>
          <target state="translated">リスナーは内部配列を使用して管理されるため、これを呼び出すと、リスナーが削除された&lt;em&gt;後&lt;/em&gt;に登録さ&lt;em&gt;れ&lt;/em&gt;たリスナーの位置インデックスが変更されます。これは、リスナーが呼び出される順序には影響しませんが、 &lt;code&gt;emitter.listeners()&lt;/code&gt; すべてのコピーを再作成する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="849a766d1b140b80f9c44a7ca0d9d61ba5900944" translate="yes" xml:space="preserve">
          <source>Because long living server connections may block workers from disconnecting, it may be useful to send a message, so application specific actions may be taken to close them. It also may be useful to implement a timeout, killing a worker if the &lt;code&gt;'disconnect'&lt;/code&gt; event has not been emitted after some time.</source>
          <target state="translated">長時間のサーバー接続はワーカーの切断をブロックする可能性があるため、メッセージを送信すると便利な場合があります。そのため、アプリケーション固有のアクションを実行してそれらを閉じることができます。また、タイムアウトを実装して、 &lt;code&gt;'disconnect'&lt;/code&gt; イベントがしばらく発行されなかった場合にワーカーを強制終了することも役立ちます。</target>
        </trans-unit>
        <trans-unit id="f7456de8b5ba506390ade664594484a04a7cc299" translate="yes" xml:space="preserve">
          <source>Because of the internal mechanics of how the &lt;code&gt;process.nextTick()&lt;/code&gt; queue and the microtask queue that underlies Promises are implemented within V8 and Node.js, it is possible for code running within a context to &quot;escape&quot; the &lt;code&gt;timeout&lt;/code&gt; set using &lt;code&gt;vm.runInContext()&lt;/code&gt;, &lt;code&gt;vm.runInNewContext()&lt;/code&gt;, and &lt;code&gt;vm.runInThisContext()&lt;/code&gt;.</source>
          <target state="translated">Promiseの基礎となる &lt;code&gt;process.nextTick()&lt;/code&gt; キューとマイクロタスクキューがV8およびNode.js内に実装される方法の内部メカニズムにより、コンテキスト内で実行されているコードが &lt;code&gt;vm.runInContext()&lt;/code&gt; を使用して &lt;code&gt;timeout&lt;/code&gt; セットを「エスケープ」する可能性があります（）、 &lt;code&gt;vm.runInNewContext()&lt;/code&gt; 、および &lt;code&gt;vm.runInThisContext()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4366452e42133138d37a810cef33032932211dc3" translate="yes" xml:space="preserve">
          <source>Because of the need for standard compliance, this method does not allow users to customize the serialization process of the URL. For more flexibility, &lt;a href=&quot;#url_url_format_url_options&quot;&gt;&lt;code&gt;require('url').format()&lt;/code&gt;&lt;/a&gt; method might be of interest.</source>
          <target state="translated">標準に準拠する必要があるため、この方法では、ユーザーはURLのシリアル化プロセスをカスタマイズできません。柔軟性を高めるために、&lt;a href=&quot;#url_url_format_url_options&quot;&gt; &lt;code&gt;require('url').format()&lt;/code&gt; &lt;/a&gt;メソッドが役立ちます。</target>
        </trans-unit>
        <trans-unit id="60997f539863f89d6061a5995c36fb4628070f39" translate="yes" xml:space="preserve">
          <source>Because of the specific serialization and processing requirements imposed by the HTTP/2 protocol, it is not recommended for user code to read data from or write data to a &lt;code&gt;Socket&lt;/code&gt; instance bound to a &lt;code&gt;Http2Session&lt;/code&gt;. Doing so can put the HTTP/2 session into an indeterminate state causing the session and the socket to become unusable.</source>
          <target state="translated">HTTP / 2プロトコルによって課される特定のシリアル化および処理要件のため、ユーザーコードが &lt;code&gt;Http2Session&lt;/code&gt; にバインドされた &lt;code&gt;Socket&lt;/code&gt; インスタンスからデータを読み取ったり、そこにデータを書き込んだりすることはお勧めしません。これを行うと、HTTP / 2セッションが不確定な状態になり、セッションとソケットが使用できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="691e395104f8dc313bf0ef893e4c24f4eaba778d" translate="yes" xml:space="preserve">
          <source>Because printing to the console is an asynchronous operation, &lt;code&gt;console.log()&lt;/code&gt; will cause the AsyncHooks callbacks to be called. Using &lt;code&gt;console.log()&lt;/code&gt; or similar asynchronous operations inside an AsyncHooks callback function will thus cause an infinite recursion. An easy solution to this when debugging is to use a synchronous logging operation such as &lt;code&gt;fs.writeFileSync(file, msg, flag)&lt;/code&gt;. This will print to the file and will not invoke AsyncHooks recursively because it is synchronous.</source>
          <target state="translated">コンソールへの出力は非同期操作であるため、 &lt;code&gt;console.log()&lt;/code&gt; によってAsyncHooksコールバックが呼び出されます。したがって、AsyncHooksコールバック関数内で &lt;code&gt;console.log()&lt;/code&gt; または同様の非同期操作を使用すると、無限再帰が発生します。デバッグ時のこれに対する簡単な解決策は、 &lt;code&gt;fs.writeFileSync(file, msg, flag)&lt;/code&gt; などの同期ロギング操作を使用することです。これはファイルに出力され、同期であるためAsyncHooksを再帰的に呼び出しません。</target>
        </trans-unit>
        <trans-unit id="86bb2b19e31fabe9224782de43b7a53fdd55cf16" translate="yes" xml:space="preserve">
          <source>Because public keys can be derived from private keys, a private key may be passed instead of a public key.</source>
          <target state="translated">公開鍵は秘密鍵から派生することができるので、公開鍵の代わりに秘密鍵を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="302ca8c64322bc742ed684aba5f1bdb2293fb035" translate="yes" xml:space="preserve">
          <source>Because public keys can be derived from private keys, a private key may be passed instead of a public key. In that case, this function behaves as if &lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt;&lt;code&gt;crypto.createPrivateKey()&lt;/code&gt;&lt;/a&gt; had been called, except that the type of the returned &lt;code&gt;KeyObject&lt;/code&gt; will be &lt;code&gt;'public'&lt;/code&gt; and that the private key cannot be extracted from the returned &lt;code&gt;KeyObject&lt;/code&gt;. Similarly, if a &lt;code&gt;KeyObject&lt;/code&gt; with type &lt;code&gt;'private'&lt;/code&gt; is given, a new &lt;code&gt;KeyObject&lt;/code&gt; with type &lt;code&gt;'public'&lt;/code&gt; will be returned and it will be impossible to extract the private key from the returned object.</source>
          <target state="translated">公開鍵は秘密鍵から導出できるため、公開鍵の代わりに秘密鍵を渡すことができます。その場合、この関数は、返された &lt;code&gt;KeyObject&lt;/code&gt; のタイプが &lt;code&gt;'public'&lt;/code&gt; され、返された &lt;code&gt;KeyObject&lt;/code&gt; から秘密鍵を抽出できないことを除いて、&lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt; &lt;code&gt;crypto.createPrivateKey()&lt;/code&gt; &lt;/a&gt;が呼び出されたかのように動作します。同様に、タイプ &lt;code&gt;'private'&lt;/code&gt; &lt;code&gt;KeyObject&lt;/code&gt; が指定された場合、タイプ &lt;code&gt;'public'&lt;/code&gt; 新しい &lt;code&gt;KeyObject&lt;/code&gt; が返され、返されたオブジェクトから秘密鍵を抽出することはできません。</target>
        </trans-unit>
        <trans-unit id="05ecf9b2eaee27ff7c7a9da7750dcabd7d10fe69" translate="yes" xml:space="preserve">
          <source>Because public keys can be derived from private keys, a private key or a public key may be passed for &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">公開鍵は秘密鍵から導出できるため、秘密鍵または公開鍵をkeyに渡すことができ &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="751d641184d0abb77bddb3c071ae868de829e68a" translate="yes" xml:space="preserve">
          <source>Because the Euro (&lt;code&gt;&amp;euro;&lt;/code&gt;) sign is not representable in US-ASCII, it is replaced with &lt;code&gt;?&lt;/code&gt; in the transcoded &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">ユーロ（ &lt;code&gt;&amp;euro;&lt;/code&gt; ）記号はUS-ASCIIでは表現できないため、 &lt;code&gt;?&lt;/code&gt; に置き換えられます。トランスコードされた &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc43de7f332dadbf8e964b31bf82337c42ae6a98" translate="yes" xml:space="preserve">
          <source>Because the behavior of &lt;code&gt;new Buffer()&lt;/code&gt; is different depending on the type of the first argument, security and reliability issues can be inadvertently introduced into applications when argument validation or &lt;code&gt;Buffer&lt;/code&gt; initialization is not performed.</source>
          <target state="translated">&lt;code&gt;new Buffer()&lt;/code&gt; の動作は最初の引数のタイプによって異なるため、引数の検証または &lt;code&gt;Buffer&lt;/code&gt; の初期化が実行されない場合、セキュリティと信頼性の問題がアプリケーションに誤って導入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8b80ae2aab5463a2451e9e29994ea910f7cbfd3b" translate="yes" xml:space="preserve">
          <source>Because the exact path to the compiled Addon binary can vary depending on how it is compiled (i.e. sometimes it may be in &lt;code&gt;./build/Debug/&lt;/code&gt;), Addons can use the &lt;a href=&quot;https://github.com/TooTallNate/node-bindings&quot;&gt;bindings&lt;/a&gt; package to load the compiled module.</source>
          <target state="translated">コンパイルされたアドオンバイナリへの正確なパスは、それがどのようにコンパイルされるか（つまり、. &lt;code&gt;./build/Debug/&lt;/code&gt; ある場合がある）によって異なるため、アドオンは&lt;a href=&quot;https://github.com/TooTallNate/node-bindings&quot;&gt;bindings&lt;/a&gt;パッケージを使用してコンパイルされたモジュールをロードできます。</target>
        </trans-unit>
        <trans-unit id="960d327e7a558fd7889ffc561ca8765449c5ca4e" translate="yes" xml:space="preserve">
          <source>Because the object cloning uses the structured clone algorithm, non-enumerable properties, property accessors, and object prototypes are not preserved. In particular, &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects will be read as plain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;s on the receiving side.</source>
          <target state="translated">オブジェクトのクローンは構造化クローンアルゴリズムを使用するため、列挙できないプロパティ、プロパティアクセサー、およびオブジェクトプロトタイプは保持されません。特に、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;オブジェクトは受信側でプレーンな&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;として読み取られます。</target>
        </trans-unit>
        <trans-unit id="11a2ae3e203e98e6708ca3bfd5ea9f78d0b7445b" translate="yes" xml:space="preserve">
          <source>Because workers are all separate processes, they can be killed or re-spawned depending on a program's needs, without affecting other workers. As long as there are some workers still alive, the server will continue to accept connections. If no workers are alive, existing connections will be dropped and new connections will be refused. Node.js does not automatically manage the number of workers, however. It is the application's responsibility to manage the worker pool based on its own needs.</source>
          <target state="translated">ワーカーはすべて独立したプロセスであるため、プログラムの必要性に応じて、他のワーカーに影響を与えることなく、ワーカーを終了させたり、再生成させたりすることができます。まだ何人かのワーカーが生きている限り、サーバは接続を受け付け続けます。ワーカーが生きていない場合、既存の接続は切断され、新しい接続は拒否されます。ただし、Node.jsはワーカーの数を自動的に管理するわけではありません。アプリケーション自身のニーズに基づいてワーカープールを管理するのはアプリケーションの責任です。</target>
        </trans-unit>
        <trans-unit id="9d8251ebd1fcaa7d77c2d759766cc9c3e0380b63" translate="yes" xml:space="preserve">
          <source>Becomes &lt;code&gt;true&lt;/code&gt; when &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;イベントが発生したときに &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="aa8f810adb45fb720b0fea2ba6a9771faf5aa1f3" translate="yes" xml:space="preserve">
          <source>Before Node.js v6.0, this event emitted only the message and the handle, but not the worker object, contrary to what the documentation stated.</source>
          <target state="translated">Node.js v6.0以前では、ドキュメントに記載されていることに反して、このイベントはメッセージとハンドルのみを放出し、ワーカーオブジェクトは放出しませんでした。</target>
        </trans-unit>
        <trans-unit id="1862072372d6d10bc19cd20b5f8c5559cb8e3e70" translate="yes" xml:space="preserve">
          <source>Before a module's code is executed, Node.js will wrap it with a function wrapper that looks like the following:</source>
          <target state="translated">モジュールのコードが実行される前に、Node.jsは以下のような関数ラッパーでラップします。</target>
        </trans-unit>
        <trans-unit id="f998e665a4896197d04f48db4a8da278e7a7df50" translate="yes" xml:space="preserve">
          <source>Beginning in Node.js v11.0.0, calling these functions with &lt;code&gt;digest&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt; will print a deprecation warning to align with the behavior when &lt;code&gt;digest&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Node.js v11.0.0から、 &lt;code&gt;digest&lt;/code&gt; を &lt;code&gt;null&lt;/code&gt; に設定してこれらの関数を呼び出すと、 &lt;code&gt;digest&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; 場合の動作に合わせて非推奨の警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="2c0d66b8d04e6d1cb2aa6cafcc5829a375657d21" translate="yes" xml:space="preserve">
          <source>Below is an example that resolves &lt;code&gt;'archive.org'&lt;/code&gt; then reverse resolves the IP addresses that are returned.</source>
          <target state="translated">以下は、 &lt;code&gt;'archive.org'&lt;/code&gt; を解決してから、返されるIPアドレスを逆解決する例です。</target>
        </trans-unit>
        <trans-unit id="72e3c3bc48b16a53304db10d8a9c608f131d7315" translate="yes" xml:space="preserve">
          <source>Below we give a suggested directory structure that could work:</source>
          <target state="translated">以下、私たちは動作する可能性のある提案されたディレクトリ構造を与えます。</target>
        </trans-unit>
        <trans-unit id="11b7e6e8c6eb35d20df4fedefc372c1c039a0fe1" translate="yes" xml:space="preserve">
          <source>Below, &lt;code&gt;bar.js&lt;/code&gt; makes use of the &lt;code&gt;square&lt;/code&gt; module, which exports a Square class:</source>
          <target state="translated">以下では、 &lt;code&gt;bar.js&lt;/code&gt; は、 &lt;code&gt;square&lt;/code&gt; クラスをエクスポートするsquareモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="17a245da23b3bed21115eda617d0db2f2984f389" translate="yes" xml:space="preserve">
          <source>Besides the async nature to await the completion behaves identically to &lt;a href=&quot;#assert_assert_doesnotthrow_fn_error_message&quot;&gt;&lt;code&gt;assert.doesNotThrow()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">完了を待つという非同期の性質に加えて、&lt;a href=&quot;#assert_assert_doesnotthrow_fn_error_message&quot;&gt; &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; &lt;/a&gt;と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="a45abf14381a4bb6f946b2d0bd65a076aa40ecf7" translate="yes" xml:space="preserve">
          <source>Besides the async nature to await the completion behaves identically to &lt;a href=&quot;#assert_assert_throws_fn_error_message&quot;&gt;&lt;code&gt;assert.throws()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">完了を待つという非同期の性質に加えて、&lt;a href=&quot;#assert_assert_throws_fn_error_message&quot;&gt; &lt;code&gt;assert.throws()&lt;/code&gt; &lt;/a&gt;と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="104fb1cb9588bb03abf68534a3546fd1945904e8" translate="yes" xml:space="preserve">
          <source>Binding the inspector to a public IP (including &lt;code&gt;0.0.0.0&lt;/code&gt;) with an open port is insecure, as it allows external hosts to connect to the inspector and perform a &lt;a href=&quot;https://www.owasp.org/index.php/Code_Injection&quot;&gt;remote code execution&lt;/a&gt; attack.</source>
          <target state="translated">外部ホストがインスペクターに接続して&lt;a href=&quot;https://www.owasp.org/index.php/Code_Injection&quot;&gt;リモートコード実行&lt;/a&gt;攻撃を実行できるため、開いているポートを使用してインスペクターをパブリックIP（ &lt;code&gt;0.0.0.0&lt;/code&gt; を含む）にバインドすることは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="f8c050254283d9f51e63070acdc4fe2abff851c1" translate="yes" xml:space="preserve">
          <source>Bit mask used to extract the file type code.</source>
          <target state="translated">ファイルタイプのコードを抽出するために使用されるビットマスク。</target>
        </trans-unit>
        <trans-unit id="38ca86f6b20a1c3f7445af772467122bf0798bbd" translate="yes" xml:space="preserve">
          <source>Blocking calls like these are mostly useful for simplifying general-purpose scripting tasks and for simplifying the loading/processing of application configuration at startup.</source>
          <target state="translated">これらのような呼び出しをブロックすることは、汎用的なスクリプティングタスクを簡素化したり、起動時のアプリケーション設定のロード/処理を簡素化したりするのに役立つことがほとんどです。</target>
        </trans-unit>
        <trans-unit id="e49e46f83817ae076662a9e1ac7de55763706d82" translate="yes" xml:space="preserve">
          <source>Blocks until a client (existing or connected later) has sent &lt;code&gt;Runtime.runIfWaitingForDebugger&lt;/code&gt; command.</source>
          <target state="translated">クライアント（既存または後で接続）が &lt;code&gt;Runtime.runIfWaitingForDebugger&lt;/code&gt; コマンドを送信するまでブロックします。</target>
        </trans-unit>
        <trans-unit id="d1dce5d4ec8a3cc9860ad75df035f434cb66662f" translate="yes" xml:space="preserve">
          <source>Boolean (read-only). True if headers were sent, false otherwise.</source>
          <target state="translated">ブール値 (読み取り専用)。ヘッダが送信された場合は真、そうでない場合は偽。</target>
        </trans-unit>
        <trans-unit id="76723148e1cbee2a4ed22f5975c62c431496c11c" translate="yes" xml:space="preserve">
          <source>Boolean flag enabling &amp;ldquo;Large Window Brotli&amp;rdquo; mode (not compatible with the Brotli format as standardized in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7932.txt&quot;&gt;RFC 7932&lt;/a&gt;).</source>
          <target state="translated">「Large Window Brotli」モードを有効にするブールフラグ（&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7932.txt&quot;&gt;RFC 7932で&lt;/a&gt;標準化されているBrotli形式と互換性がありません）。</target>
        </trans-unit>
        <trans-unit id="f451a245fcf06000ff5387581d65d298c952f303" translate="yes" xml:space="preserve">
          <source>Boolean flag that affects internal memory allocation patterns.</source>
          <target state="translated">内部メモリ割り当てパターンに影響を与えるブール値フラグ。</target>
        </trans-unit>
        <trans-unit id="3a42a4932b1e3f92c12fd5ce48d4cc1f4d19e1b3" translate="yes" xml:space="preserve">
          <source>Boolean flag that decreases compression ratio in favour of decompression speed.</source>
          <target state="translated">伸長速度を優先して圧縮率を低下させるブール値フラグ。</target>
        </trans-unit>
        <trans-unit id="92d4f753ad73b5c861d36157e9f3f2578a9cdcf2" translate="yes" xml:space="preserve">
          <source>Boolean value that indicates whether the response has completed. Starts as &lt;code&gt;false&lt;/code&gt;. After &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; executes, the value will be &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">応答が完了したかどうかを示すブール値。 &lt;code&gt;false&lt;/code&gt; として開始します。後&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;を実行、値がされます &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf2822adc71f67075195db6338c46e0cce22a6a1" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; streams use the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; API in various ways to communicate the current state of the stream.</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;ストリームと読み取り可能ストリームはどちらも、&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; APIをさまざまな方法で使用して、ストリームの現在の状態を伝えます。</target>
        </trans-unit>
        <trans-unit id="92e8067b8a9edf1e60f4288801983d6541113def" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; streams will store data in an internal buffer that can be retrieved using &lt;code&gt;writable.writableBuffer&lt;/code&gt; or &lt;code&gt;readable.readableBuffer&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームと&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;ストリームはどちらも、それぞれ &lt;code&gt;writable.writableBuffer&lt;/code&gt; または &lt;code&gt;readable.readableBuffer&lt;/code&gt; を使用して取得できる内部バッファーにデータを格納します。</target>
        </trans-unit>
        <trans-unit id="bbec51338c60c845af43267d174e455dc0392770" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;breakEvalOnSigint&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; options were set in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt; config, which is not supported.</source>
          <target state="translated">&lt;code&gt;breakEvalOnSigint&lt;/code&gt; オプションと &lt;code&gt;eval&lt;/code&gt; オプションの両方が&lt;a href=&quot;repl&quot;&gt; &lt;code&gt;REPL&lt;/code&gt; 構成で&lt;/a&gt;設定されましたが、これはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="a948f8e347862760ffc1a502a3aebe8d17c52726" translate="yes" xml:space="preserve">
          <source>Both session identifiers and session tickets timeout, causing the server to create new sessions. The timeout can be configured with the &lt;code&gt;sessionTimeout&lt;/code&gt; option of &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セッション識別子とセッションチケットの両方がタイムアウトし、サーバーが新しいセッションを作成します。タイムアウトは&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;sessionTimeout&lt;/code&gt; オプションで設定できます。</target>
        </trans-unit>
        <trans-unit id="b99eb128fc73ee445a8e902924f23b26a340df57" translate="yes" xml:space="preserve">
          <source>Breaking changes to the API are expected in a future major release.</source>
          <target state="translated">APIの変更は、今後のメジャーリリースで予定されています。</target>
        </trans-unit>
        <trans-unit id="21a8752f2df54d656b09cd2a499cb3a3403ec7ca" translate="yes" xml:space="preserve">
          <source>Breakpoints</source>
          <target state="translated">Breakpoints</target>
        </trans-unit>
        <trans-unit id="0770db595a77f58797f867ec2524689f875b8bc6" translate="yes" xml:space="preserve">
          <source>Broadcasts a datagram on the socket. For connectionless sockets, the destination &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; must be specified. Connected sockets, on the other hand, will use their associated remote endpoint, so the &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; arguments must not be set.</source>
          <target state="translated">ソケットでデータグラムをブロードキャストします。コネクションレス型ソケットの場合、宛先 &lt;code&gt;port&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; 指定する必要があります。一方、接続されたソケットは、関連付けられたリモートエンドポイントを使用するため、 &lt;code&gt;port&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; 引数を設定しないでください。</target>
        </trans-unit>
        <trans-unit id="4e011f868d39eb819acc8009c284479fbc5351d2" translate="yes" xml:space="preserve">
          <source>Brotli constants</source>
          <target state="translated">ブロトリ定数</target>
        </trans-unit>
        <trans-unit id="e35a1d0137590ab6558bd54fa26cadd2e3428d43" translate="yes" xml:space="preserve">
          <source>BrotliOptions</source>
          <target state="translated">BrotliOptions</target>
        </trans-unit>
        <trans-unit id="0e4985a83b4840ac6d361b21c082a700081c8d07" translate="yes" xml:space="preserve">
          <source>Browser-compatible &lt;code&gt;URL&lt;/code&gt; class, implemented by following the WHATWG URL Standard. &lt;a href=&quot;https://url.spec.whatwg.org/#example-url-parsing&quot;&gt;Examples of parsed URLs&lt;/a&gt; may be found in the Standard itself. The &lt;code&gt;URL&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">WHATWG URL標準に従って実装された、ブラウザ互換の &lt;code&gt;URL&lt;/code&gt; クラス。&lt;a href=&quot;https://url.spec.whatwg.org/#example-url-parsing&quot;&gt;解析されたURLの例は&lt;/a&gt;、標準自体にあります。 &lt;code&gt;URL&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="2be5f64b36230104ef9c6e230215846a83d18df6" translate="yes" xml:space="preserve">
          <source>Buffer</source>
          <target state="translated">Buffer</target>
        </trans-unit>
        <trans-unit id="12e4f799634fb783b669c5f1d00234c89318acee" translate="yes" xml:space="preserve">
          <source>Buffer Constants</source>
          <target state="translated">バッファ定数</target>
        </trans-unit>
        <trans-unit id="23dd82d623fb976c8b655f70d02fd824c2106844" translate="yes" xml:space="preserve">
          <source>Buffering</source>
          <target state="translated">Buffering</target>
        </trans-unit>
        <trans-unit id="80ec43af70811a5e711008f27e40e58380191823" translate="yes" xml:space="preserve">
          <source>Buffers and Character Encodings</source>
          <target state="translated">バッファと文字エンコード</target>
        </trans-unit>
        <trans-unit id="8d8051eed2cbf5d235babea08ddbf266827a3a5d" translate="yes" xml:space="preserve">
          <source>Buffers and TypedArray</source>
          <target state="translated">バッファとTypedArray</target>
        </trans-unit>
        <trans-unit id="e5720d067f317b23fcf4f1282e5377ded87d7b40" translate="yes" xml:space="preserve">
          <source>Buffers and iteration</source>
          <target state="translated">バッファとイテレーション</target>
        </trans-unit>
        <trans-unit id="6c3e65ffe7f20f69532c70292e8fe02a0ac31970" translate="yes" xml:space="preserve">
          <source>Build with a pre-installed ICU (&lt;code&gt;system-icu&lt;/code&gt;)</source>
          <target state="translated">プレインストールされたICU（ &lt;code&gt;system-icu&lt;/code&gt; ）でビルド</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">Building</target>
        </trans-unit>
        <trans-unit id="9bcc2b6605f2f44e32f3bbfe699d332c866107ee" translate="yes" xml:space="preserve">
          <source>Built-in libraries are now available as predefined variables.</source>
          <target state="translated">組み込みのライブラリが定義済みの変数として利用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="50db02894a4e9938cec795aa1e98dc847d42a037" translate="yes" xml:space="preserve">
          <source>Builtin modules</source>
          <target state="translated">ビルトインモジュール</target>
        </trans-unit>
        <trans-unit id="fb4ef6d1d8f93b1f5e0dce50d53bb7dc4546a3d7" translate="yes" xml:space="preserve">
          <source>Builtin modules will provide named exports of their public API, as well as a default export which can be used for, among other things, modifying the named exports. Named exports of builtin modules are updated when the corresponding exports property is accessed, redefined, or deleted.</source>
          <target state="translated">ビルトインモジュールは、そのパブリック API の名前付きエクスポートと、名前付きエクスポートを修正するために使用できるデフォルトのエクスポートを提供します。ビルトインモジュールの名前付きエクスポートは、対応する exports プロパティにアクセス、再定義、または削除されたときに更新されます。</target>
        </trans-unit>
        <trans-unit id="6cc4d8aacb34c43335f1e66ea99bef9e07fbcadb" translate="yes" xml:space="preserve">
          <source>By default (&lt;code&gt;allowHalfOpen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;) the socket will send a FIN packet back and destroy its file descriptor once it has written out its pending write queue. However, if &lt;code&gt;allowHalfOpen&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the socket will not automatically &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; its writable side, allowing the user to write arbitrary amounts of data. The user must call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; explicitly to close the connection (i.e. sending a FIN packet back).</source>
          <target state="translated">デフォルトでは（ &lt;code&gt;allowHalfOpen&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合）、ソケットはFINパケットを送り返し、保留中の書き込みキューを書き出すと、ファイル記述子を破棄します。ただし、 &lt;code&gt;allowHalfOpen&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合、ソケットは書き込み可能な側を自動的に&lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;end()&lt;/code&gt; &lt;/a&gt;しないため、ユーザーは任意の量のデータを書き込むことができます。ユーザーは&lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;end()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出して接続を閉じる（つまり、FINパケットを送り返す）必要があります。</target>
        </trans-unit>
        <trans-unit id="11ee0c95f68c87a49aaea054c734f0756de04a7a" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;EventEmitter&lt;/code&gt;s will print a warning if more than &lt;code&gt;10&lt;/code&gt; listeners are added for a particular event. This is a useful default that helps finding memory leaks. Obviously, not all events should be limited to just 10 listeners. The &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; method allows the limit to be modified for this specific &lt;code&gt;EventEmitter&lt;/code&gt; instance. The value can be set to &lt;code&gt;Infinity&lt;/code&gt; (or &lt;code&gt;0&lt;/code&gt;) to indicate an unlimited number of listeners.</source>
          <target state="translated">デフォルトでは、特定のイベントに &lt;code&gt;10&lt;/code&gt; を超えるリスナーが追加された場合、 &lt;code&gt;EventEmitter&lt;/code&gt; は警告を出力します。これは、メモリリークの検出に役立つ便利なデフォルトです。もちろん、すべてのイベントが10人のリスナーに限定されるわけではありません。 &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; メソッドは、限界が、この特定のために修正されることを可能に &lt;code&gt;EventEmitter&lt;/code&gt; インスタンス。値を &lt;code&gt;Infinity&lt;/code&gt; （または &lt;code&gt;0&lt;/code&gt; ）に設定して、リスナーの数が無制限であることを示すことができます。</target>
        </trans-unit>
        <trans-unit id="202557f7f915841f681d6b58d74b773f875d4053" translate="yes" xml:space="preserve">
          <source>By default all unhandled rejections trigger a warning plus a deprecation warning for the very first unhandled rejection in case no &lt;a href=&quot;process#process_event_unhandledrejection&quot;&gt;&lt;code&gt;unhandledRejection&lt;/code&gt;&lt;/a&gt; hook is used.</source>
          <target state="translated">デフォルトでは、すべての未処理の拒否は警告に加えて、&lt;a href=&quot;process#process_event_unhandledrejection&quot;&gt; &lt;code&gt;unhandledRejection&lt;/code&gt; &lt;/a&gt;フックが使用されていない場合の最初の未処理の拒否に対する非推奨警告をトリガーします。</target>
        </trans-unit>
        <trans-unit id="2ca914c407c4d158688627fe49d3c90e1428e782" translate="yes" xml:space="preserve">
          <source>By default inspector websocket url is available in stderr and under &lt;code&gt;/json/list&lt;/code&gt; endpoint on &lt;code&gt;http://host:port/json/list&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、インスペクターのwebsocketのURLは、stderrと &lt;code&gt;http://host:port/json/list&lt;/code&gt; の &lt;code&gt;/json/list&lt;/code&gt; エンドポイントの下にあります。</target>
        </trans-unit>
        <trans-unit id="5f91080334739e3155e81d4196ebb3f760a35023" translate="yes" xml:space="preserve">
          <source>By default set to 256. For agents with &lt;code&gt;keepAlive&lt;/code&gt; enabled, this sets the maximum number of sockets that will be left open in the free state.</source>
          <target state="translated">デフォルトでは256に設定されています &lt;code&gt;keepAlive&lt;/code&gt; 有効になっているエージェントの場合、これは空き状態で開いたままにされるソケットの最大数を設定します。</target>
        </trans-unit>
        <trans-unit id="b65d1a50bed16c68390d90247b5f954900e6c6a4" translate="yes" xml:space="preserve">
          <source>By default set to &lt;code&gt;Infinity&lt;/code&gt;. Determines how many concurrent sockets the agent can have open per origin. Origin is the returned value of &lt;a href=&quot;#http_agent_getname_options&quot;&gt;&lt;code&gt;agent.getName()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは &lt;code&gt;Infinity&lt;/code&gt; に設定されています。エージェントがオリジンごとに開くことができる同時ソケットの数を決定します。Originは、&lt;a href=&quot;#http_agent_getname_options&quot;&gt; &lt;code&gt;agent.getName()&lt;/code&gt; の&lt;/a&gt;戻り値です。</target>
        </trans-unit>
        <trans-unit id="28813e2e7dfe7803dcf71ad39048b5aacd0e60af" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;node.async_hooks&lt;/code&gt;, and &lt;code&gt;v8&lt;/code&gt; categories are enabled.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;node&lt;/code&gt; 、 &lt;code&gt;node.async_hooks&lt;/code&gt; 、および &lt;code&gt;v8&lt;/code&gt; カテゴリーが有効になっています。</target>
        </trans-unit>
        <trans-unit id="d63f54a664f33273ebb1fe71197458ae8fa1d6cb" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instances format output using the &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; method before writing the output to the provided &lt;code&gt;Writable&lt;/code&gt; stream (&lt;code&gt;process.stdout&lt;/code&gt; by default). The &lt;code&gt;showProxy&lt;/code&gt; inspection option is set to true by default and the &lt;code&gt;colors&lt;/code&gt; option is set to true depending on the REPL's &lt;code&gt;useColors&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;インスタンスは、提供された &lt;code&gt;Writable&lt;/code&gt; ストリーム（デフォルトでは &lt;code&gt;process.stdout&lt;/code&gt; ）に出力を書き込む前に、&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;メソッドを使用して出力をフォーマットします。 &lt;code&gt;showProxy&lt;/code&gt; の検査オプションはデフォルトでtrueに設定されており、 &lt;code&gt;colors&lt;/code&gt; オプションは、REPLのに応じて、trueに設定されている &lt;code&gt;useColors&lt;/code&gt; のオプション。</target>
        </trans-unit>
        <trans-unit id="8bf222e54eb55d9b78ad98ea0087d0727c9eb2bb" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; is called on the destination &lt;code&gt;Writable&lt;/code&gt; stream when the source &lt;code&gt;Readable&lt;/code&gt; stream emits &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt;, so that the destination is no longer writable. To disable this default behavior, the &lt;code&gt;end&lt;/code&gt; option can be passed as &lt;code&gt;false&lt;/code&gt;, causing the destination stream to remain open:</source>
          <target state="translated">デフォルトでは、ソースの &lt;code&gt;Readable&lt;/code&gt; ストリームが&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; を&lt;/a&gt;&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;と、宛先 &lt;code&gt;Writable&lt;/code&gt; ストリームでstream.end（）が呼び出されるため、宛先は書き込み可能ではなくなります。このデフォルトの動作を無効にするには、 &lt;code&gt;end&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; として渡し、宛先ストリームを開いたままにします。</target>
        </trans-unit>
        <trans-unit id="0cfb62c9e90d2b1c492b84ce0e3e9f6be5a1b1f1" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;child_process.fork()&lt;/code&gt; will spawn new Node.js instances using the &lt;a href=&quot;process#process_process_execpath&quot;&gt;&lt;code&gt;process.execPath&lt;/code&gt;&lt;/a&gt; of the parent process. The &lt;code&gt;execPath&lt;/code&gt; property in the &lt;code&gt;options&lt;/code&gt; object allows for an alternative execution path to be used.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;child_process.fork()&lt;/code&gt; は親プロセスの&lt;a href=&quot;process#process_process_execpath&quot;&gt; &lt;code&gt;process.execPath&lt;/code&gt; &lt;/a&gt;を使用して新しいNode.jsインスタンスを生成します。 &lt;code&gt;options&lt;/code&gt; オブジェクトの &lt;code&gt;execPath&lt;/code&gt; プロパティを使用すると、代替実行パスを使用できます。</target>
        </trans-unit>
        <trans-unit id="b37951cc194679e9b33730db8a32abc81d440f81" translate="yes" xml:space="preserve">
          <source>By default, Node.js will print process warnings to &lt;code&gt;stderr&lt;/code&gt;. The &lt;code&gt;--no-warnings&lt;/code&gt; command-line option can be used to suppress the default console output but the &lt;code&gt;'warning'&lt;/code&gt; event will still be emitted by the &lt;code&gt;process&lt;/code&gt; object.</source>
          <target state="translated">デフォルトでは、Node.jsはプロセス警告を &lt;code&gt;stderr&lt;/code&gt; に出力します。 &lt;code&gt;--no-warnings&lt;/code&gt; コマンドラインオプションは、デフォルトのコンソール出力を抑制するために使用することができますが、 &lt;code&gt;'warning'&lt;/code&gt; のイベントがまだによって放出される &lt;code&gt;process&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7d8427586d102b75ae9ef1d8e24762397831f29e" translate="yes" xml:space="preserve">
          <source>By default, a maximum of &lt;code&gt;10&lt;/code&gt; listeners can be registered for any single event. This limit can be changed for individual &lt;code&gt;EventEmitter&lt;/code&gt; instances using the &lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt;&lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt;&lt;/a&gt; method. To change the default for &lt;em&gt;all&lt;/em&gt;&lt;code&gt;EventEmitter&lt;/code&gt; instances, the &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; property can be used. If this value is not a positive number, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">デフォルトでは、1つのイベントに対して最大 &lt;code&gt;10&lt;/code&gt; のリスナーを登録できます。この制限は、&lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt; &lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt; &lt;/a&gt;メソッドを使用して、個々の &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスに対して変更できます。&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスのデフォルトを変更するには、 &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; プロパティを使用できます。この値が正数でない場合、 &lt;code&gt;TypeError&lt;/code&gt; がスローされます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="27f87a2e565b134494421fe1803569e3bfac561b" translate="yes" xml:space="preserve">
          <source>By default, all &lt;code&gt;Immediate&lt;/code&gt; objects are &quot;ref'ed&quot;, making it normally unnecessary to call &lt;code&gt;immediate.ref()&lt;/code&gt; unless &lt;code&gt;immediate.unref()&lt;/code&gt; had been called previously.</source>
          <target state="translated">デフォルトでは、すべての &lt;code&gt;Immediate&lt;/code&gt; オブジェクトが「参照」されるため、以前に &lt;code&gt;immediate.unref()&lt;/code&gt; が呼び出されていなかった場合を除き、通常は &lt;code&gt;immediate.ref()&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="3a5d92384948c12af2e5fca7d9dad8301e55f2c2" translate="yes" xml:space="preserve">
          <source>By default, all &lt;code&gt;Timeout&lt;/code&gt; objects are &quot;ref'ed&quot;, making it normally unnecessary to call &lt;code&gt;timeout.ref()&lt;/code&gt; unless &lt;code&gt;timeout.unref()&lt;/code&gt; had been called previously.</source>
          <target state="translated">デフォルトでは、すべての &lt;code&gt;Timeout&lt;/code&gt; オブジェクトが「参照」されるため、 &lt;code&gt;timeout.unref()&lt;/code&gt; が以前に呼び出されていなければ、通常は &lt;code&gt;timeout.ref()&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="f8d76964354342530522f73f2faa55b344082b7c" translate="yes" xml:space="preserve">
          <source>By default, all instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; use an evaluation function that evaluates JavaScript expressions and provides access to Node.js' built-in modules. This default behavior can be overridden by passing in an alternative evaluation function when the &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance is created.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;すべてのインスタンスは、JavaScript式を評価し、Node.jsの組み込みモジュールへのアクセスを提供する評価関数を使用します。このデフォルトの動作は、&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;インスタンスの作成時に代替評価関数を渡すことでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="aae30d5c73d9d79e8a2188bc5f4b152b12c62f43" translate="yes" xml:space="preserve">
          <source>By default, all subpaths from a package can be imported (&lt;code&gt;import 'pkg/x.js'&lt;/code&gt;). Custom subpath aliasing and encapsulation can be provided through the &lt;code&gt;&quot;exports&quot;&lt;/code&gt; field.</source>
          <target state="translated">デフォルトでは、パッケージのすべてのサブパスを &lt;code&gt;import 'pkg/x.js'&lt;/code&gt; できます（import 'pkg / x.js'）。カスタムのサブパスのエイリアスとカプセル化は、 &lt;code&gt;&quot;exports&quot;&lt;/code&gt; フィールドで提供できます。</target>
        </trans-unit>
        <trans-unit id="04197712c1c9818e08ac42b34fb5a047bccfe77f" translate="yes" xml:space="preserve">
          <source>By default, binding a socket will cause it to block the Node.js process from exiting as long as the socket is open. The &lt;code&gt;socket.unref()&lt;/code&gt; method can be used to exclude the socket from the reference counting that keeps the Node.js process active, allowing the process to exit even if the socket is still listening.</source>
          <target state="translated">デフォルトでは、ソケットをバインドすると、ソケットが開いている限り、Node.jsプロセスの終了がブロックされます。 &lt;code&gt;socket.unref()&lt;/code&gt; メソッドは、プロセスがソケットがまだ聴いている場合でも終了することができ、Node.jsのがアクティブなプロセス保持参照カウントからソケットを除外するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="efcba8983b787530ecb21473310e7ebe0a8f27e7" translate="yes" xml:space="preserve">
          <source>By default, binding a socket will cause it to block the Node.js process from exiting as long as the socket is open. The &lt;code&gt;socket.unref()&lt;/code&gt; method can be used to exclude the socket from the reference counting that keeps the Node.js process active. The &lt;code&gt;socket.ref()&lt;/code&gt; method adds the socket back to the reference counting and restores the default behavior.</source>
          <target state="translated">デフォルトでは、ソケットをバインドすると、ソケットが開いている限り、Node.jsプロセスの終了がブロックされます。 &lt;code&gt;socket.unref()&lt;/code&gt; メソッドは、アクティブなNode.jsのプロセスを維持参照カウントからソケットを除外するために使用することができます。 &lt;code&gt;socket.ref()&lt;/code&gt; メソッドは、参照カウントにソケットバックを追加し、デフォルトの動作を復元します。</target>
        </trans-unit>
        <trans-unit id="c5ce7b938deba67e4d499ae5b1d2870e58e4d6c1" translate="yes" xml:space="preserve">
          <source>By default, characters requiring percent-encoding within the query string will be encoded as UTF-8. If an alternative encoding is required, then an alternative &lt;code&gt;encodeURIComponent&lt;/code&gt; option will need to be specified:</source>
          <target state="translated">デフォルトでは、クエリ文字列内でパーセントエンコーディングを必要とする文字は、UTF-8としてエンコードされます。別のエンコーディングが必要な場合は、別の &lt;code&gt;encodeURIComponent&lt;/code&gt; オプションを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="586223b1036b0561eb25201451bf0ae34312f587" translate="yes" xml:space="preserve">
          <source>By default, event listeners are invoked in the order they are added. The &lt;code&gt;emitter.prependListener()&lt;/code&gt; method can be used as an alternative to add the event listener to the beginning of the listeners array.</source>
          <target state="translated">デフォルトでは、イベントリスナーは追加された順に呼び出されます。 &lt;code&gt;emitter.prependListener()&lt;/code&gt; メソッドは、リスナーの配列の先頭にイベントリスナーを追加するための代替として使用することができます。</target>
        </trans-unit>
        <trans-unit id="c1e38041b50c72489bd19f967717d2410cc8d13c" translate="yes" xml:space="preserve">
          <source>By default, event listeners are invoked in the order they are added. The &lt;code&gt;emitter.prependOnceListener()&lt;/code&gt; method can be used as an alternative to add the event listener to the beginning of the listeners array.</source>
          <target state="translated">デフォルトでは、イベントリスナーは追加された順に呼び出されます。 &lt;code&gt;emitter.prependOnceListener()&lt;/code&gt; メソッドは、リスナーの配列の先頭にイベントリスナーを追加するための代替として使用することができます。</target>
        </trans-unit>
        <trans-unit id="56b6961294edb6e4c7b9e26709dab66bab2bf262" translate="yes" xml:space="preserve">
          <source>By default, no encoding is assigned and stream data will be returned as &lt;code&gt;Buffer&lt;/code&gt; objects. Setting an encoding causes the stream data to be returned as strings of the specified encoding rather than as &lt;code&gt;Buffer&lt;/code&gt; objects. For instance, calling &lt;code&gt;readable.setEncoding('utf8')&lt;/code&gt; will cause the output data to be interpreted as UTF-8 data, and passed as strings. Calling &lt;code&gt;readable.setEncoding('hex')&lt;/code&gt; will cause the data to be encoded in hexadecimal string format.</source>
          <target state="translated">デフォルトでは、エンコーディングは割り当てられておらず、ストリームデータは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして返されます。エンコーディングを設定すると、ストリームデータは、 &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとしてではなく、指定されたエンコーディングの文字列として返されます。たとえば、 &lt;code&gt;readable.setEncoding('utf8')&lt;/code&gt; を呼び出すと、出力データがUTF-8データとして解釈され、文字列として渡されます。 &lt;code&gt;readable.setEncoding('hex')&lt;/code&gt; を呼び出すと、データが16進文字列形式でエンコードされます。</target>
        </trans-unit>
        <trans-unit id="ff40ed54cc4f4ccd28ee10c0119b4a839b9b0115" translate="yes" xml:space="preserve">
          <source>By default, percent-encoded characters within the query string will be assumed to use UTF-8 encoding. If an alternative character encoding is used, then an alternative &lt;code&gt;decodeURIComponent&lt;/code&gt; option will need to be specified:</source>
          <target state="translated">デフォルトでは、クエリ文字列内のパーセントエンコードされた文字はUTF-8エンコーディングを使用すると想定されます。別の文字エンコーディングを使用する場合は、別の &lt;code&gt;decodeURIComponent&lt;/code&gt; オプションを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="60948785cd003c40a0a9c199059ae2a5361c36dc" translate="yes" xml:space="preserve">
          <source>By default, pipes for &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; are established between the parent Node.js process and the spawned child. These pipes have limited (and platform-specific) capacity. If the child process writes to stdout in excess of that limit without the output being captured, the child process will block waiting for the pipe buffer to accept more data. This is identical to the behavior of pipes in the shell. Use the &lt;code&gt;{ stdio: 'ignore' }&lt;/code&gt; option if the output will not be consumed.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、および &lt;code&gt;stderr&lt;/code&gt; のパイプは、親Node.jsプロセスと生成された子の間に確立されます。これらのパイプは、制限された（およびプラットフォーム固有の）容量を持っています。子プロセスが出力をキャプチャせずにその制限を超えてstdoutに書き込む場合、子プロセスはパイプバッファーがさらにデータを受け入れるのを待ってブロックします。これは、シェルのパイプの動作と同じです。出力が消費されない場合は、 &lt;code&gt;{ stdio: 'ignore' }&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="400d0ff5bd73c75192c512fbb90cd09f96e28a06" translate="yes" xml:space="preserve">
          <source>By default, promise executions are not assigned &lt;code&gt;asyncId&lt;/code&gt;s due to the relatively expensive nature of the &lt;a href=&quot;https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit&quot;&gt;promise introspection API&lt;/a&gt; provided by V8. This means that programs using promises or &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; will not get correct execution and trigger ids for promise callback contexts by default.</source>
          <target state="translated">デフォルトでは、V8が提供する&lt;a href=&quot;https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit&quot;&gt;promiseイントロスペクションAPI&lt;/a&gt;は比較的 &lt;code&gt;asyncId&lt;/code&gt; が高いため、promiseの実行にはasyncIdが割り当てられません。つまり、promise または &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; を使用するプログラムは、デフォルトでは正しい実行を取得せず、promiseコールバックコンテキストのIDをトリガーしません。</target>
        </trans-unit>
        <trans-unit id="181c6af1d7f4577c1f0e360a950d5338345d6d32" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;querystring.unescape()&lt;/code&gt; method will attempt to use the JavaScript built-in &lt;code&gt;decodeURIComponent()&lt;/code&gt; method to decode. If that fails, a safer equivalent that does not throw on malformed URLs will be used.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;querystring.unescape()&lt;/code&gt; メソッドは、JavaScriptが内蔵された使用しようと &lt;code&gt;decodeURIComponent()&lt;/code&gt; のデコードに方法を。それが失敗した場合、不正なURLをスローしない、より安全な同等のものが使用されます。</target>
        </trans-unit>
        <trans-unit id="1666cd8e190f6bfded703574656e38b236afc740" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;zlib&lt;/code&gt; methods will throw an error when decompressing truncated data. However, if it is known that the data is incomplete, or the desire is to inspect only the beginning of a compressed file, it is possible to suppress the default error handling by changing the flushing method that is used to decompress the last chunk of input data:</source>
          <target state="translated">デフォルトでは、切り詰められたデータを解凍すると、 &lt;code&gt;zlib&lt;/code&gt; メソッドはエラーをスローします。ただし、データが不完全であることがわかっている場合、または圧縮ファイルの先頭のみを検査したい場合は、入力の最後のチャンクを解凍するために使用されるフラッシュ方法を変更することにより、デフォルトのエラー処理を抑制できます。データ：</target>
        </trans-unit>
        <trans-unit id="da9bb8d34bf7939f5a332d099389ca45ca0d4075" translate="yes" xml:space="preserve">
          <source>By default, the Node.js REPL will persist history between &lt;code&gt;node&lt;/code&gt; REPL sessions by saving inputs to a &lt;code&gt;.node_repl_history&lt;/code&gt; file located in the user's home directory. This can be disabled by setting the environment variable &lt;code&gt;NODE_REPL_HISTORY=''&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Node.js REPLは、ユーザーのホームディレクトリにある &lt;code&gt;.node_repl_history&lt;/code&gt; ファイルに入力を保存することにより、 &lt;code&gt;node&lt;/code&gt; REPLセッション間で履歴を保持します。これは、環境変数 &lt;code&gt;NODE_REPL_HISTORY=''&lt;/code&gt; を設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="44601c24d6f4b82c2931ad704e76a372c8d477a1" translate="yes" xml:space="preserve">
          <source>By default, the Server's timeout value is 2 minutes, and sockets are destroyed automatically if they time out. However, if a callback is assigned to the Server's &lt;code&gt;'timeout'&lt;/code&gt; event, timeouts must be handled explicitly.</source>
          <target state="translated">デフォルトでは、サーバーのタイムアウト値は2分で、タイムアウトになるとソケットは自動的に破棄されます。ただし、コールバックがサーバーの &lt;code&gt;'timeout'&lt;/code&gt; イベントに割り当てられている場合、タイムアウトは明示的に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e32233c5b26929d2746af8624aac399f7bc395a" translate="yes" xml:space="preserve">
          <source>By default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given &lt;code&gt;subprocess&lt;/code&gt; to exit, use the &lt;code&gt;subprocess.unref()&lt;/code&gt; method. Doing so will cause the parent's event loop to not include the child in its reference count, allowing the parent to exit independently of the child, unless there is an established IPC channel between the child and the parent.</source>
          <target state="translated">デフォルトでは、親はデタッチされた子が終了するのを待ちます。親が特定の &lt;code&gt;subprocess&lt;/code&gt; 終了を待機しないようにするには、 &lt;code&gt;subprocess.unref()&lt;/code&gt; メソッドを使用します。これにより、親のイベントループの参照カウントに子が含まれなくなり、子と親の間に確立されたIPCチャネルがない限り、親は子から独立して終了できます。</target>
        </trans-unit>
        <trans-unit id="86a29b8b2ca676c37fefa70d058c06106a270d08" translate="yes" xml:space="preserve">
          <source>By default, this function is the same as &lt;a href=&quot;net#net_net_createconnection_options_connectlistener&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;. However, custom agents may override this method in case greater flexibility is desired.</source>
          <target state="translated">デフォルトでは、この関数は&lt;a href=&quot;net#net_net_createconnection_options_connectlistener&quot;&gt; &lt;code&gt;net.createConnection()&lt;/code&gt; &lt;/a&gt;と同じです。ただし、より高い柔軟性が必要な場合は、カスタムエージェントでこのメソッドをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="8f8fd8723941036d695781128838085d766645f8" translate="yes" xml:space="preserve">
          <source>By default, when Node.js loads a module from a path that is symbolically linked to a different on-disk location, Node.js will dereference the link and use the actual on-disk &quot;real path&quot; of the module as both an identifier and as a root path to locate other dependency modules. In most cases, this default behavior is acceptable. However, when using symbolically linked peer dependencies, as illustrated in the example below, the default behavior causes an exception to be thrown if &lt;code&gt;moduleA&lt;/code&gt; attempts to require &lt;code&gt;moduleB&lt;/code&gt; as a peer dependency:</source>
          <target state="translated">デフォルトでは、Node.jsがディスク上の別の場所にシンボリックにリンクされているパスからモジュールをロードすると、Node.jsはリンクを逆参照し、モジュールの実際のディスク上の「実際のパス」を識別子として使用します他の依存関係モジュールを見つけるためのルートパスとして。ほとんどの場合、このデフォルトの動作で問題ありません。ただし、以下の例に示すように、シンボリックにリンクされたピア依存関係を使用する場合、 &lt;code&gt;moduleA&lt;/code&gt; が &lt;code&gt;moduleB&lt;/code&gt; をピア依存関係として要求しようとすると、デフォルトの動作により例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7fe520cb3ead24e33697421d46ca31e0abf7c414" translate="yes" xml:space="preserve">
          <source>By default, when a timer is scheduled using either &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;, the Node.js event loop will continue running as long as the timer is active. Each of the &lt;code&gt;Timeout&lt;/code&gt; objects returned by these functions export both &lt;code&gt;timeout.ref()&lt;/code&gt; and &lt;code&gt;timeout.unref()&lt;/code&gt; functions that can be used to control this default behavior.</source>
          <target state="translated">デフォルトでは、タイマーが&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; の&lt;/a&gt;いずれかを使用してスケジュールされている場合、タイマーがアクティブである限り、Node.jsイベントループは実行を継続します。それぞれの &lt;code&gt;Timeout&lt;/code&gt; これらの関数によって返されたオブジェクトは、両方のエクスポート &lt;code&gt;timeout.ref()&lt;/code&gt; と &lt;code&gt;timeout.unref()&lt;/code&gt; このデフォルトの動作を制御するために使用することができる機能を。</target>
        </trans-unit>
        <trans-unit id="3065fbd5646405d3e034627f36e052d9f472adf5" translate="yes" xml:space="preserve">
          <source>By default, when an immediate is scheduled, the Node.js event loop will continue running as long as the immediate is active. The &lt;code&gt;Immediate&lt;/code&gt; object returned by &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt; exports both &lt;code&gt;immediate.ref()&lt;/code&gt; and &lt;code&gt;immediate.unref()&lt;/code&gt; functions that can be used to control this default behavior.</source>
          <target state="translated">デフォルトでは、即時がスケジュールされている場合、即時がアクティブである限り、Node.jsイベントループは実行を継続します。 &lt;code&gt;Immediate&lt;/code&gt; によって返されるオブジェクト&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;の両方のエクスポート &lt;code&gt;immediate.ref()&lt;/code&gt; と &lt;code&gt;immediate.unref()&lt;/code&gt; このデフォルトの動作を制御するために使用することができる機能。</target>
        </trans-unit>
        <trans-unit id="df525b9b496d3a9417e6e2e2031510338cec6c44" translate="yes" xml:space="preserve">
          <source>By doing this, Node.js achieves a few things:</source>
          <target state="translated">これを行うことで、Node.jsはいくつかのことを達成します。</target>
        </trans-unit>
        <trans-unit id="1d98a58837334c775ed31c6b9b2008e929d36ff9" translate="yes" xml:space="preserve">
          <source>By starting a REPL from a Unix socket-based server instead of stdin, it is possible to connect to a long-running Node.js process without restarting it.</source>
          <target state="translated">stdinではなくUnixソケットベースのサーバーからREPLを起動することで、長時間稼働しているNode.jsプロセスを再起動せずに接続することができます。</target>
        </trans-unit>
        <trans-unit id="9a35d14f9d97613dca3959200e44548caf1a0658" translate="yes" xml:space="preserve">
          <source>By the time &lt;code&gt;main.js&lt;/code&gt; has loaded both modules, they're both finished. The output of this program would thus be:</source>
          <target state="translated">&lt;code&gt;main.js&lt;/code&gt; が両方のモジュールをロードするまでに、それらは両方とも完了しています。したがって、このプログラムの出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5eb9b00d1377cab123223f4390f9cd60acd57dc7" translate="yes" xml:space="preserve">
          <source>By the very nature of how &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt; works in JavaScript, there is almost never any way to safely &quot;pick up where it left off&quot;, without leaking references, or creating some other sort of undefined brittle state.</source>
          <target state="translated">JavaScriptで&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw&quot;&gt; &lt;code&gt;throw&lt;/code&gt; &lt;/a&gt;がどのように機能するかという性質上、参照をリークしたり、他の種類の未定義の脆弱な状態を作成したりせずに、安全に「中断したところから再開する」方法はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="5525b6de8ddff52f4df5811bac7fe5456dec1113" translate="yes" xml:space="preserve">
          <source>By using the context of a domain, and the resilience of separating our program into multiple worker processes, we can react more appropriately, and handle errors with much greater safety.</source>
          <target state="translated">ドメインのコンテキストと、プログラムを複数のワーカープロセスに分離することによる回復力を利用することで、より適切に反応し、より安全にエラーを処理することができるようになります。</target>
        </trans-unit>
        <trans-unit id="5519037c56c2d8df2d0e0bdc1591904d18fac337" translate="yes" xml:space="preserve">
          <source>C++ Addons</source>
          <target state="translated">C++アドオン</target>
        </trans-unit>
        <trans-unit id="9e192c5e28df91fd85df36b2994082e21e363a26" translate="yes" xml:space="preserve">
          <source>C/C++ Addons</source>
          <target state="translated">C/C++アドオン</target>
        </trans-unit>
        <trans-unit id="d78bb26a6e6f8ac8e8e6f66793335ae354220795" translate="yes" xml:space="preserve">
          <source>C/C++ Addons - N-API</source>
          <target state="translated">C/C++アドオン-N-API</target>
        </trans-unit>
        <trans-unit id="fe67e8a053fa3580820f1db7af794d2048bdd882" translate="yes" xml:space="preserve">
          <source>CCM is one of the supported &lt;a href=&quot;https://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;AEAD algorithms&lt;/a&gt;. Applications which use this mode must adhere to certain restrictions when using the cipher API:</source>
          <target state="translated">CCMは、サポートされている&lt;a href=&quot;https://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;AEADアルゴリズムの&lt;/a&gt; 1つです。このモードを使用するアプリケーションは、暗号APIを使用するときに特定の制限に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="8f16dd9b7ab2f0aa0df63aa37c3d38f01cb28a48" translate="yes" xml:space="preserve">
          <source>CCM mode</source>
          <target state="translated">シーシーエムモード</target>
        </trans-unit>
        <trans-unit id="91d0e532c4be585300e6d6a20ca189552961b8ba" translate="yes" xml:space="preserve">
          <source>CPU Profiler</source>
          <target state="translated">CPUプロファイラ</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="678e05070eba083ba5fa14b65273946fcb07e6f5" translate="yes" xml:space="preserve">
          <source>Calculates and returns the signature for &lt;code&gt;data&lt;/code&gt; using the given private key and algorithm. If &lt;code&gt;algorithm&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, then the algorithm is dependent upon the key type (especially Ed25519 and Ed448).</source>
          <target state="translated">指定された秘密鍵とアルゴリズムを使用して、 &lt;code&gt;data&lt;/code&gt; の署名を計算して返します。場合 &lt;code&gt;algorithm&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 場合、アルゴリズムは、キータイプ（特にEd25519とEd448）に依存しています。</target>
        </trans-unit>
        <trans-unit id="95fd630d6511caa5d9699d2bac443dbcb5fa3f73" translate="yes" xml:space="preserve">
          <source>Calculates the HMAC digest of all of the data passed using &lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt;&lt;code&gt;hmac.update()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;encoding&lt;/code&gt; is provided a string is returned; otherwise a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; is returned;</source>
          <target state="translated">&lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt; &lt;code&gt;hmac.update()&lt;/code&gt; &lt;/a&gt;を使用して渡されたすべてのデータのHMACダイジェストを計算します。場合 &lt;code&gt;encoding&lt;/code&gt; 提供された文字列が返されます。それ以外の場合、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="5a14de9b1932649b90d15be6146d2618d7a14172" translate="yes" xml:space="preserve">
          <source>Calculates the digest of all of the data passed to be hashed (using the &lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt;&lt;code&gt;hash.update()&lt;/code&gt;&lt;/a&gt; method). If &lt;code&gt;encoding&lt;/code&gt; is provided a string will be returned; otherwise a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">ハッシュされるために渡されたすべてのデータのダイジェストを計算します（&lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt; &lt;code&gt;hash.update()&lt;/code&gt; &lt;/a&gt;メソッドを使用）。場合 &lt;code&gt;encoding&lt;/code&gt; 提供された文字列が返されます。それ以外の場合は、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="e9457a235861724a763c06f0e5d6db4023735abd" translate="yes" xml:space="preserve">
          <source>Calculates the signature on all the data passed through using either &lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt;&lt;code&gt;sign.update()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;sign.write()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt; &lt;code&gt;sign.update()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;sign.write()&lt;/code&gt; の&lt;/a&gt;いずれかを使用して、渡されたすべてのデータの署名を計算します。</target>
        </trans-unit>
        <trans-unit id="ceb0224f01d6ba9708d6616ddb7f724d30e14596" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;#http2_http2stream_pushstream_headers_options_callback&quot;&gt;&lt;code&gt;http2stream.pushStream()&lt;/code&gt;&lt;/a&gt; with the given headers, and wrap the given &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; on a newly created &lt;code&gt;Http2ServerResponse&lt;/code&gt; as the callback parameter if successful. When &lt;code&gt;Http2ServerRequest&lt;/code&gt; is closed, the callback is called with an error &lt;code&gt;ERR_HTTP2_INVALID_STREAM&lt;/code&gt;.</source>
          <target state="translated">コール&lt;a href=&quot;#http2_http2stream_pushstream_headers_options_callback&quot;&gt; &lt;code&gt;http2stream.pushStream()&lt;/code&gt; &lt;/a&gt;与えられたヘッダと、与えられたラップ&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; を&lt;/a&gt;新たに作成した上で &lt;code&gt;Http2ServerResponse&lt;/code&gt; 成功した場合、コールバックパラメータとして。とき &lt;code&gt;Http2ServerRequest&lt;/code&gt; が閉じられ、コールバックはエラーと呼ばれる &lt;code&gt;ERR_HTTP2_INVALID_STREAM&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a6320cde93d6145af956e406100afd55854873b" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;napi_get_version()&lt;/code&gt; to determine if the API is available.</source>
          <target state="translated">&lt;code&gt;napi_get_version()&lt;/code&gt; を呼び出して、APIが使用可能かどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="ca4a1fc3fd98d71afaa54ca82c4213922df7f62c" translate="yes" xml:space="preserve">
          <source>Call Results</source>
          <target state="translated">通話結果</target>
        </trans-unit>
        <trans-unit id="8054d82d9e8e1519fa719c6aeec455ce54f1c2d3" translate="yes" xml:space="preserve">
          <source>Call all &lt;code&gt;destroy&lt;/code&gt; hooks. This should only ever be called once. An error will be thrown if it is called more than once. This &lt;strong&gt;must&lt;/strong&gt; be manually called. If the resource is left to be collected by the GC then the &lt;code&gt;destroy&lt;/code&gt; hooks will never be called.</source>
          <target state="translated">すべての &lt;code&gt;destroy&lt;/code&gt; フックを呼び出します。これは一度だけ呼び出されるべきです。複数回呼び出されるとエラーが発生します。これ&lt;strong&gt;は&lt;/strong&gt;手動で呼び出す&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。リソースがGCによって収集されたままになっている場合、 &lt;code&gt;destroy&lt;/code&gt; フックは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="d57087226be0373a2bba4cdeb9c854cbb6cbe9b4" translate="yes" xml:space="preserve">
          <source>Call the provided function with the provided arguments in the execution context of the async resource. This will establish the context, trigger the AsyncHooks before callbacks, call the function, trigger the AsyncHooks after callbacks, and then restore the original execution context.</source>
          <target state="translated">非同期リソースの実行コンテキストで、指定された引数で指定された関数を呼び出します。これにより、コンテキストが確立され、コールバックの前にAsyncHooksがトリガーされ、関数が呼び出され、コールバックの後にAsyncHooksがトリガーされ、元の実行コンテキストが復元されます。</target>
        </trans-unit>
        <trans-unit id="eee0872ef4ee5ce397c4c9b72978c9263346a48c" translate="yes" xml:space="preserve">
          <source>Callback functions must satisfy the following signature:</source>
          <target state="translated">コールバック関数は、以下のシグネチャを満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="5a9afb6f68faba23dc84836881b9eb5b8a1b083a" translate="yes" xml:space="preserve">
          <source>Callback should take two arguments &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">コールバックは &lt;code&gt;err&lt;/code&gt; と &lt;code&gt;count&lt;/code&gt; の 2つの引数を取る必要があります。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="085c86076e0bb62f3d96e8ab9ed524f7896b4f57" translate="yes" xml:space="preserve">
          <source>Callbacks are run in last-in first-out order.</source>
          <target state="translated">コールバックは、最後から順番に実行されます。</target>
        </trans-unit>
        <trans-unit id="97f0ddda0975556fed24b899d76bd09f3d4af829" translate="yes" xml:space="preserve">
          <source>Called after the resource corresponding to &lt;code&gt;asyncId&lt;/code&gt; is destroyed. It is also called asynchronously from the embedder API &lt;code&gt;emitDestroy()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;asyncId&lt;/code&gt; に対応するリソースが破棄された後に呼び出されます。また、組み込みAPIの &lt;code&gt;emitDestroy()&lt;/code&gt; から非同期的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f73bc7c18321ec878ed5be8f3a395fdb861c3a42" translate="yes" xml:space="preserve">
          <source>Called immediately after the callback specified in &lt;code&gt;before&lt;/code&gt; is completed.</source>
          <target state="translated">&lt;code&gt;before&lt;/code&gt; で指定したコールバックが完了した直後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="67c2b8bea298c5f79d398c93c499cd6cc2cc63bc" translate="yes" xml:space="preserve">
          <source>Called when &lt;code&gt;socket&lt;/code&gt; is attached to &lt;code&gt;request&lt;/code&gt; after being persisted because of the keep-alive options. Default behavior is to:</source>
          <target state="translated">キープアライブオプションのために永続化された後、 &lt;code&gt;socket&lt;/code&gt; が &lt;code&gt;request&lt;/code&gt; にアタッチされたときに呼び出されます。デフォルトの動作は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b43ca4223265ca6ece79115569f4b471b8e6e5b1" translate="yes" xml:space="preserve">
          <source>Called when &lt;code&gt;socket&lt;/code&gt; is detached from a request and could be persisted by the &lt;code&gt;Agent&lt;/code&gt;. Default behavior is to:</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; がリクエストから切り離され、 &lt;code&gt;Agent&lt;/code&gt; によって永続化される可能性があるときに呼び出されます。デフォルトの動作は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b6e0fac62afd6b0e58d7b3a3ab50ee2fe316fbd3" translate="yes" xml:space="preserve">
          <source>Called when a class is constructed that has the &lt;em&gt;possibility&lt;/em&gt; to emit an asynchronous event. This &lt;em&gt;does not&lt;/em&gt; mean the instance must call &lt;code&gt;before&lt;/code&gt;/&lt;code&gt;after&lt;/code&gt; before &lt;code&gt;destroy&lt;/code&gt; is called, only that the possibility exists.</source>
          <target state="translated">非同期イベントを発行する&lt;em&gt;可能性の&lt;/em&gt;あるクラスが構築されるときに呼び出されます。これ&lt;em&gt;は&lt;/em&gt;、インスタンスが &lt;code&gt;destroy&lt;/code&gt; が呼び出される &lt;code&gt;before&lt;/code&gt; / &lt;code&gt;after&lt;/code&gt; に呼び出される必要&lt;em&gt;があることを&lt;/em&gt;意味するので&lt;em&gt;はなく&lt;/em&gt;、可能性が存在するだけです。</target>
        </trans-unit>
        <trans-unit id="3d63fa3265203b858c580696f09f2e560a220bbb" translate="yes" xml:space="preserve">
          <source>Called when the &lt;code&gt;resolve&lt;/code&gt; function passed to the &lt;code&gt;Promise&lt;/code&gt; constructor is invoked (either directly or through other means of resolving a promise).</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; コンストラクターに渡された &lt;code&gt;resolve&lt;/code&gt; 関数が呼び出されたときに呼び出されます（直接または他の方法でpromiseを解決します）。</target>
        </trans-unit>
        <trans-unit id="0006d6166a25633ad05674dbf8d3d512c6337747" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; can be significantly slower than the alternative &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; but ensures that the newly created &lt;code&gt;Buffer&lt;/code&gt; instance contents will &lt;em&gt;never contain sensitive data&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; の&lt;/a&gt;呼び出しは、代替の&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;よりも大幅に遅くなる可能性がありますが、新しく作成された &lt;code&gt;Buffer&lt;/code&gt; インスタンスの内容に&lt;em&gt;機密データが含ま&lt;/em&gt;れる&lt;em&gt;ことはありません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="15ca5213e7d7180fac30f6abbb6f91cb46f2b44a" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read([size])&lt;/code&gt;&lt;/a&gt; after the &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event has been emitted will return &lt;code&gt;null&lt;/code&gt;. No runtime error will be raised.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;イベントが&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read([size])&lt;/code&gt; &lt;/a&gt;後にstream.read（[size]）を呼び出すと、 &lt;code&gt;null&lt;/code&gt; が返されます。実行時エラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="5a327da6454f2c24bf02624120f5cf6246f42a8a" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#zlib_zlib_flush_kind_callback&quot;&gt;&lt;code&gt;.flush()&lt;/code&gt;&lt;/a&gt; on a compression stream will make &lt;code&gt;zlib&lt;/code&gt; return as much output as currently possible. This may come at the cost of degraded compression quality, but can be useful when data needs to be available as soon as possible.</source>
          <target state="translated">圧縮ストリームで&lt;a href=&quot;#zlib_zlib_flush_kind_callback&quot;&gt; &lt;code&gt;.flush()&lt;/code&gt; &lt;/a&gt;を呼び出すと、 &lt;code&gt;zlib&lt;/code&gt; は現在可能な限り多くの出力を返します。これは圧縮品質の低下という犠牲を払うことになるかもしれませんが、データをできるだけ早く利用可能にする必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d5e90c94816b0161805991665f9858088f6d8052" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;assert.fail()&lt;/code&gt; with more than one argument is deprecated and emits a warning.</source>
          <target state="translated">複数の引数を指定して &lt;code&gt;assert.fail()&lt;/code&gt; を呼び出すことは非推奨であり、警告を発します。</target>
        </trans-unit>
        <trans-unit id="20eb687e2b4b0f97d82ec63e8f711bda6bfced13" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;callback(err)&lt;/code&gt; will result in a &lt;code&gt;socket.destroy(err)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;callback(err)&lt;/code&gt; を呼び出すと、 &lt;code&gt;socket.destroy(err)&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8f20fc2ded04c4e55d0dd45d3b69ac3563bd9616" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;console.assert()&lt;/code&gt; with a falsy assertion will only cause the &lt;code&gt;message&lt;/code&gt; to be printed to the console without interrupting execution of subsequent code.</source>
          <target state="translated">偽のアサーションで &lt;code&gt;console.assert()&lt;/code&gt; を呼び出すと、後続のコードの実行を中断することなく、 &lt;code&gt;message&lt;/code&gt; がコンソールに出力されるだけです。</target>
        </trans-unit>
        <trans-unit id="2eb35ea5b21c7f0f049a33e3bc5d6ddad7969a8f" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;enter()&lt;/code&gt; changes only the active domain, and does not alter the domain itself. &lt;code&gt;enter()&lt;/code&gt; and &lt;code&gt;exit()&lt;/code&gt; can be called an arbitrary number of times on a single domain.</source>
          <target state="translated">&lt;code&gt;enter()&lt;/code&gt; を呼び出すと、アクティブなドメインのみが変更され、ドメイン自体は変更されません。 &lt;code&gt;enter()&lt;/code&gt; と &lt;code&gt;exit()&lt;/code&gt; は、単一のドメインで任意の回数呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="f05af83268fb80cda3c54af7b3d16fdd9cc8698c" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;exit()&lt;/code&gt; changes only the active domain, and does not alter the domain itself. &lt;code&gt;enter()&lt;/code&gt; and &lt;code&gt;exit()&lt;/code&gt; can be called an arbitrary number of times on a single domain.</source>
          <target state="translated">&lt;code&gt;exit()&lt;/code&gt; を呼び出すと、アクティブなドメインのみが変更され、ドメイン自体は変更されません。 &lt;code&gt;enter()&lt;/code&gt; と &lt;code&gt;exit()&lt;/code&gt; は、単一のドメインで任意の回数呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ec8aa57b24478363b554d3943852be6a13be5ced" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;fs.unwatchFile()&lt;/code&gt; with a filename that is not being watched is a no-op, not an error.</source>
          <target state="translated">監視されていないファイル名を使用して &lt;code&gt;fs.unwatchFile()&lt;/code&gt; を呼び出すと、エラーではなく何も行われません。</target>
        </trans-unit>
        <trans-unit id="b0a4d0906433636ff7d216bf870a15233e09ddee" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;http2stream.pushStream()&lt;/code&gt; from within a pushed stream is not permitted and will throw an error.</source>
          <target state="translated">プッシュされたストリーム内から &lt;code&gt;http2stream.pushStream()&lt;/code&gt; を呼び出すことは許可されておらず、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="d4f0d5f458a3b6c7a483e701e66f4412e43f2090" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;napi_wrap()&lt;/code&gt; a second time on an object will return an error. To associate another native instance with the object, use &lt;code&gt;napi_remove_wrap()&lt;/code&gt; first.</source>
          <target state="translated">オブジェクトに対して2回目に &lt;code&gt;napi_wrap()&lt;/code&gt; を呼び出すと、エラーが返されます。別のネイティブインスタンスをオブジェクトに &lt;code&gt;napi_remove_wrap()&lt;/code&gt; 、最初にnapi_remove_wrap（）を使用します。</target>
        </trans-unit>
        <trans-unit id="5ebda8add9c29049e05ed036aff1782a09cb87b1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;process.exit()&lt;/code&gt; will force the process to exit as quickly as possible even if there are still asynchronous operations pending that have not yet completed fully, including I/O operations to &lt;code&gt;process.stdout&lt;/code&gt; and &lt;code&gt;process.stderr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.stdout&lt;/code&gt; や &lt;code&gt;process.stderr&lt;/code&gt; へのI / O操作など、まだ完全に完了していない保留中の非同期操作がまだある場合でも、 &lt;code&gt;process.exit()&lt;/code&gt; を呼び出すと、可能な限り迅速にプロセスが終了します。</target>
        </trans-unit>
        <trans-unit id="7323b93b8e12f957933a587d47060d857018d255" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;readable.pause()&lt;/code&gt;, &lt;code&gt;readable.unpipe()&lt;/code&gt;, or receiving backpressure will cause the &lt;code&gt;readable.readableFlowing&lt;/code&gt; to be set as &lt;code&gt;false&lt;/code&gt;, temporarily halting the flowing of events but &lt;em&gt;not&lt;/em&gt; halting the generation of data. While in this state, attaching a listener for the &lt;code&gt;'data'&lt;/code&gt; event will not switch &lt;code&gt;readable.readableFlowing&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;readable.pause()&lt;/code&gt; 、 &lt;code&gt;readable.unpipe()&lt;/code&gt; 、または背圧を受信する原因となります &lt;code&gt;readable.readableFlowing&lt;/code&gt; をとして設定する &lt;code&gt;false&lt;/code&gt; 一時的なイベントの流れが、停止、&lt;em&gt;ない&lt;/em&gt;データの生成を停止させます。この状態にある間、 &lt;code&gt;'data'&lt;/code&gt; イベントのリスナーをアタッチしても、 &lt;code&gt;readable.readableFlowing&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に切り替えません。</target>
        </trans-unit>
        <trans-unit id="2a3f3a11ea8f6637aadcb714ac4728d792909580" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;realpath&lt;/code&gt; now works again for various edge cases on Windows.</source>
          <target state="translated">Windowsのさまざまなエッジケースで &lt;code&gt;realpath&lt;/code&gt; の呼び出しが再び機能するようになりました。</target>
        </trans-unit>
        <trans-unit id="a4e9f23e24b8d27f39bddad7d86d865e2f7733e8" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;realpathSync&lt;/code&gt; now works again for various edge cases on Windows.</source>
          <target state="translated">Windowsのさまざまなエッジケースで &lt;code&gt;realpathSync&lt;/code&gt; の呼び出しが再び機能するようになりました。</target>
        </trans-unit>
        <trans-unit id="5b678714991b62ac3cce51d8357294b5bf1dceb4" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;rl.close()&lt;/code&gt; does not immediately stop other events (including &lt;code&gt;'line'&lt;/code&gt;) from being emitted by the &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;rl.close()&lt;/code&gt; を呼び出しても、他のイベント（ &lt;code&gt;'line'&lt;/code&gt; を含む）が &lt;code&gt;readline.Interface&lt;/code&gt; インスタンスによって発行されるのを直ちに停止することはありません。</target>
        </trans-unit>
        <trans-unit id="b6f61394faa3e62d84c5820e41b7b246c12212e0" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;rl.pause()&lt;/code&gt; does not immediately pause other events (including &lt;code&gt;'line'&lt;/code&gt;) from being emitted by the &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;rl.pause()&lt;/code&gt; を呼び出しても、他のイベント（ &lt;code&gt;'line'&lt;/code&gt; を含む）が &lt;code&gt;readline.Interface&lt;/code&gt; インスタンスによって発行されるのを直ちに一時停止することはありません。</target>
        </trans-unit>
        <trans-unit id="8dea4b251b7c8b9c8fc41a049eef8c3b77a55bda" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;socket.ref()&lt;/code&gt; multiples times will have no additional effect.</source>
          <target state="translated">&lt;code&gt;socket.ref()&lt;/code&gt; を複数回呼び出しても、追加の効果はありません。</target>
        </trans-unit>
        <trans-unit id="a06a1edf1cea527997b3f2119ac83309d1ae5287" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;socket.unref()&lt;/code&gt; multiple times will have no addition effect.</source>
          <target state="translated">&lt;code&gt;socket.unref()&lt;/code&gt; を複数回呼び出しても、追加の効果はありません。</target>
        </trans-unit>
        <trans-unit id="38a1a6ceda16214f70b7617e7a0377890f834eed" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;subprocess.ref()&lt;/code&gt; after making a call to &lt;code&gt;subprocess.unref()&lt;/code&gt; will restore the removed reference count for the child process, forcing the parent to wait for the child to exit before exiting itself.</source>
          <target state="translated">呼び出し &lt;code&gt;subprocess.ref()&lt;/code&gt; への呼び出しを行った後 &lt;code&gt;subprocess.unref()&lt;/code&gt; 自体を終了する前に終了するには、子供を待つために親を強制的に、子プロセスのために取り外さ参照カウントを復元します。</target>
        </trans-unit>
        <trans-unit id="2833339af51f066ced2f958bc0e1083995e97d16" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;timeout.unref()&lt;/code&gt; creates an internal timer that will wake the Node.js event loop. Creating too many of these can adversely impact performance of the Node.js application.</source>
          <target state="translated">&lt;code&gt;timeout.unref()&lt;/code&gt; を呼び出すと、Node.jsイベントループを起こす内部タイマーが作成されます。これらを作成しすぎると、Node.jsアプリケーションのパフォーマンスに悪影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="f95e54c427a7b734f1c32352760edb016c2bd068" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;unref()&lt;/code&gt; on a port will allow the thread to exit if this is the only active handle in the event system. If the port is already &lt;code&gt;unref()&lt;/code&gt;ed calling &lt;code&gt;unref()&lt;/code&gt; again will have no effect.</source>
          <target state="translated">ポートで &lt;code&gt;unref()&lt;/code&gt; を呼び出すと、これがイベントシステムで唯一のアクティブなハンドルである場合、スレッドは終了できます。ポートがすでに &lt;code&gt;unref()&lt;/code&gt; である場合、再度 &lt;code&gt;unref()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="02352fed74503165b45a489b4daee80456ad1743" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;unref()&lt;/code&gt; on a server will allow the program to exit if this is the only active server in the event system. If the server is already &lt;code&gt;unref&lt;/code&gt;ed calling &lt;code&gt;unref()&lt;/code&gt; again will have no effect.</source>
          <target state="translated">サーバーで &lt;code&gt;unref()&lt;/code&gt; を呼び出すと、これがイベントシステムで唯一のアクティブサーバーである場合にプログラムが終了します。サーバーがすでに &lt;code&gt;unref&lt;/code&gt; 場合、再度 &lt;code&gt;unref()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="4469cbd36594d3df846fdd2c07cb60bc99b17a15" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;unref()&lt;/code&gt; on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already &lt;code&gt;unref&lt;/code&gt;ed calling &lt;code&gt;unref()&lt;/code&gt; again will have no effect.</source>
          <target state="translated">ソケットで &lt;code&gt;unref()&lt;/code&gt; を呼び出すと、これがイベントシステムで唯一のアクティブなソケットである場合、プログラムは終了します。ソケットがすでに &lt;code&gt;unref&lt;/code&gt; されていない場合、再度 &lt;code&gt;unref()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="14de61ab041c4868c205fac22161fa4869982342" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;unref()&lt;/code&gt; on a worker will allow the thread to exit if this is the only active handle in the event system. If the worker is already &lt;code&gt;unref()&lt;/code&gt;ed calling &lt;code&gt;unref()&lt;/code&gt; again will have no effect.</source>
          <target state="translated">これがイベントシステムで唯一のアクティブなハンドルである場合、ワーカーで &lt;code&gt;unref()&lt;/code&gt; を呼び出すと、スレッドが終了します。ワーカーがすでに &lt;code&gt;unref()&lt;/code&gt; を実行している場合、再度 &lt;code&gt;unref()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="7ab25ca3d5236395bcb978792bef3d17b01a9a47" translate="yes" xml:space="preserve">
          <source>Calling an asynchronous function without a callback throws a &lt;code&gt;TypeError&lt;/code&gt; in Node.js 10.0.0 onwards. See &lt;a href=&quot;https://github.com/nodejs/node/pull/12562&quot;&gt;https://github.com/nodejs/node/pull/12562&lt;/a&gt;.</source>
          <target state="translated">コールバックなしで非同期関数を呼び出すと、Node.js 10.0.0以降で &lt;code&gt;TypeError&lt;/code&gt; がスローされます。&lt;a href=&quot;https://github.com/nodejs/node/pull/12562&quot;&gt;https://github.com/nodejs/node/pull/12562を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e000b78e4a066abb436dcedf2fd0197163f31621" translate="yes" xml:space="preserve">
          <source>Calling the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method to send the data to a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、データを&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;に送信します。</target>
        </trans-unit>
        <trans-unit id="e6a5dd85e64a357d2f59a1b2211f6e5f33f7c20e" translate="yes" xml:space="preserve">
          <source>Calling the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="b3c47f789d09be5edd65ad6fc03b86c1aeef7e16" translate="yes" xml:space="preserve">
          <source>Calling the &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.write()&lt;/code&gt;&lt;/a&gt; method after calling &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; will raise an error.</source>
          <target state="translated">呼び出し&lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.write()&lt;/code&gt; &lt;/a&gt;呼び出した後方法&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1f85bd2e8a09f4bcd7f2dfe1cb1939e8aeea38bc" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;writable.end()&lt;/code&gt; method signals that no more data will be written to the &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;. The optional &lt;code&gt;chunk&lt;/code&gt; and &lt;code&gt;encoding&lt;/code&gt; arguments allow one final additional chunk of data to be written immediately before closing the stream. If provided, the optional &lt;code&gt;callback&lt;/code&gt; function is attached as a listener for the &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;writable.end()&lt;/code&gt; メソッドを呼び出すと、それ以上データが&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; に&lt;/a&gt;書き込まれないことを通知します。オプションの &lt;code&gt;chunk&lt;/code&gt; および &lt;code&gt;encoding&lt;/code&gt; 引数を使用すると、ストリームを閉じる直前に、データの最後の追加チャンクを書き込むことができます。提供されている場合、オプションの &lt;code&gt;callback&lt;/code&gt; 関数は&lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;イベントのリスナーとして接続されます。</target>
        </trans-unit>
        <trans-unit id="486450554d452ea3ef58646033a7abfef517ec1c" translate="yes" xml:space="preserve">
          <source>Calling this constructor emits a deprecation warning now.</source>
          <target state="translated">このコンストラクタを呼び出すと、現在では非推奨の警告を発します。</target>
        </trans-unit>
        <trans-unit id="f248cdb963d84cfbf437baaa656287502ce623ff" translate="yes" xml:space="preserve">
          <source>Calling this constructor emits a deprecation warning when run from code outside the &lt;code&gt;node_modules&lt;/code&gt; directory.</source>
          <target state="translated">このコンストラクターを呼び出すと、 &lt;code&gt;node_modules&lt;/code&gt; ディレクトリ外のコードから実行すると、非推奨の警告が発生します。</target>
        </trans-unit>
        <trans-unit id="70ddef5f629bd63f186e419574fe226c58ab4950" translate="yes" xml:space="preserve">
          <source>Calling this constructor no longer emits a deprecation warning.</source>
          <target state="translated">このコンストラクタを呼び出すと、非推奨の警告が出なくなりました。</target>
        </trans-unit>
        <trans-unit id="a8116dccb9c8a3d9df8fbc521eec3b56fbd9a274" translate="yes" xml:space="preserve">
          <source>Calling this function without passing the &lt;code&gt;digest&lt;/code&gt; parameter is deprecated now and will emit a warning.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; パラメータを渡さずにこの関数を呼び出すことは現在廃止されており、警告を発します。</target>
        </trans-unit>
        <trans-unit id="548e58a933c8dfc41643f5b26e2332c4a57e23fb" translate="yes" xml:space="preserve">
          <source>Calling this only flushes data from the internal &lt;code&gt;zlib&lt;/code&gt; state, and does not perform flushing of any kind on the streams level. Rather, it behaves like a normal call to &lt;code&gt;.write()&lt;/code&gt;, i.e. it will be queued up behind other pending writes and will only produce output when data is being read from the stream.</source>
          <target state="translated">これを呼び出すと、内部 &lt;code&gt;zlib&lt;/code&gt; 状態からデータがフラッシュされるだけで、ストリームレベルでのフラッシュは実行されません。むしろ、それは &lt;code&gt;.write()&lt;/code&gt; への通常の呼び出しのように動作します。つまり、他の保留中の書き込みの後ろにキューに入れられ、ストリームからデータが読み取られているときにのみ出力を生成します。</target>
        </trans-unit>
        <trans-unit id="e20bdaa1bb2c895cecf9eb2cc38bf17eafebab5c" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;net#net_socket_ref&quot;&gt;&lt;code&gt;ref()&lt;/code&gt;&lt;/a&gt; on this &lt;code&gt;Http2Session&lt;/code&gt; instance's underlying &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">呼び出しは&lt;a href=&quot;net#net_socket_ref&quot;&gt; &lt;code&gt;ref()&lt;/code&gt; &lt;/a&gt;、この上 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスの基礎となる&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="152fa161791d1088060c2efd968b8eee1abf6c87" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;net#net_socket_unref&quot;&gt;&lt;code&gt;unref()&lt;/code&gt;&lt;/a&gt; on this &lt;code&gt;Http2Session&lt;/code&gt; instance's underlying &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コール&lt;a href=&quot;net#net_socket_unref&quot;&gt; &lt;code&gt;unref()&lt;/code&gt; &lt;/a&gt;この上 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスの基礎となる&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a14ca6bd4c2f0838399d694595ecf5310324eb4" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;.disconnect()&lt;/code&gt; on each worker in &lt;code&gt;cluster.workers&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cluster.workers&lt;/code&gt; の各ワーカーで &lt;code&gt;.disconnect()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="796b1e900e21675ef7498b7a251fcc986ab7ad4c" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;destroy()&lt;/code&gt; on the &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; that received the &lt;a href=&quot;#http2_class_http2_http2serverrequest&quot;&gt;&lt;code&gt;Http2ServerRequest&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;error&lt;/code&gt; is provided, an &lt;code&gt;'error'&lt;/code&gt; event is emitted and &lt;code&gt;error&lt;/code&gt; is passed as an argument to any listeners on the event.</source>
          <target state="translated">&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;を受け取った&lt;a href=&quot;#http2_class_http2_http2serverrequest&quot;&gt; &lt;code&gt;Http2ServerRequest&lt;/code&gt; &lt;/a&gt; &lt;code&gt;destroy()&lt;/code&gt; を呼び出します。場合は &lt;code&gt;error&lt;/code&gt; 提供され、 &lt;code&gt;'error'&lt;/code&gt; イベントが放出され、 &lt;code&gt;error&lt;/code&gt; イベント上の任意のリスナーに引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="508f724bce65948e92b765d2568208e631d6f536" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;destroy()&lt;/code&gt; on the socket that received the &lt;code&gt;IncomingMessage&lt;/code&gt;. If &lt;code&gt;error&lt;/code&gt; is provided, an &lt;code&gt;'error'&lt;/code&gt; event is emitted and &lt;code&gt;error&lt;/code&gt; is passed as an argument to any listeners on the event.</source>
          <target state="translated">&lt;code&gt;IncomingMessage&lt;/code&gt; を受け取ったソケットで &lt;code&gt;destroy()&lt;/code&gt; を呼び出します。場合は &lt;code&gt;error&lt;/code&gt; 提供され、 &lt;code&gt;'error'&lt;/code&gt; イベントが放出され、 &lt;code&gt;error&lt;/code&gt; イベント上の任意のリスナーに引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="9844a074979212b87bb51b9fdd608eeae7d70d55" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;message.connection.setTimeout(msecs, callback)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;message.connection.setTimeout(msecs, callback)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="77dfd2135f4db726c47299bb55be26f7f4525a46" translate="yes" xml:space="preserve">
          <source>Cancel</source>
          <target state="translated">Cancel</target>
        </trans-unit>
        <trans-unit id="4ee591c4cf7f779e828b9fc5cc36321f176c8cf7" translate="yes" xml:space="preserve">
          <source>Cancel all outstanding DNS queries made by this resolver. The corresponding callbacks will be called with an error with code &lt;code&gt;ECANCELLED&lt;/code&gt;.</source>
          <target state="translated">このリゾルバによって行われたすべての未解決のDNSクエリをキャンセルします。対応するコールバックは、コード &lt;code&gt;ECANCELLED&lt;/code&gt; のエラーで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c2463832da8de25f89b0d8f4332b7e4c84c0a9c1" translate="yes" xml:space="preserve">
          <source>Cancelling Timers</source>
          <target state="translated">タイマーのキャンセル</target>
        </trans-unit>
        <trans-unit id="de46483cb35a84fb4908eb275a79a7f998204985" translate="yes" xml:space="preserve">
          <source>Cancels a &lt;code&gt;Timeout&lt;/code&gt; object created by &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Timeout&lt;/code&gt; オブジェクトをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="78f7c92b5120d3533261efea5775bdb5aa171065" translate="yes" xml:space="preserve">
          <source>Cancels a &lt;code&gt;Timeout&lt;/code&gt; object created by &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Timeout&lt;/code&gt; オブジェクトをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="4ff2323e5e56e86f75579626820c490b760d9f85" translate="yes" xml:space="preserve">
          <source>Cancels an &lt;code&gt;Immediate&lt;/code&gt; object created by &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Immediate&lt;/code&gt; オブジェクトをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="1b1d770c3ecdca9ecf80bacdda11923dcbcea1ca" translate="yes" xml:space="preserve">
          <source>Care must be taken when using &lt;code&gt;Transform&lt;/code&gt; streams in that data written to the stream can cause the &lt;code&gt;Writable&lt;/code&gt; side of the stream to become paused if the output on the &lt;code&gt;Readable&lt;/code&gt; side is not consumed.</source>
          <target state="translated">ストリームに書き込まれたデータが &lt;code&gt;Readable&lt;/code&gt; 側の出力が消費されない場合、ストリームの &lt;code&gt;Writable&lt;/code&gt; 側が一時停止する可能性があるため、 &lt;code&gt;Transform&lt;/code&gt; ストリームを使用する場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="96a42da72cf01756093a37d8bd374857d5a0b61c" translate="yes" xml:space="preserve">
          <source>Careful planning is required to allow cyclic module dependencies to work correctly within an application.</source>
          <target state="translated">アプリケーション内で循環型モジュールの依存関係が正しく動作するようにするためには、慎重な計画が必要です。</target>
        </trans-unit>
        <trans-unit id="78f8544ebbc1f8c06e2c0bc866cc14bb1d9b7692" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; to be set.</source>
          <target state="translated">原因 &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="e8bf593e3d4c135822610c6b1cedd2aabaf63730" translate="yes" xml:space="preserve">
          <source>Causes the salt length for &lt;code&gt;RSA_PKCS1_PSS_PADDING&lt;/code&gt; to be determined automatically when verifying a signature.</source>
          <target state="translated">署名の検証時に、 &lt;code&gt;RSA_PKCS1_PSS_PADDING&lt;/code&gt; のソルト長が自動的に決定されます。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="5f3225c71f034b1eb05a74dd4d995132bb2a8513" translate="yes" xml:space="preserve">
          <source>Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner or others is not implemented.</source>
          <target state="translated">警告:Windowsでは書き込み権限のみが変更可能で、グループ、所有者、その他の権限の区別は実装されていません。</target>
        </trans-unit>
        <trans-unit id="542a6be4be44519412c0a6a33063a112f507d046" translate="yes" xml:space="preserve">
          <source>Certain platforms (macOS, Linux) will use the value of &lt;code&gt;argv[0]&lt;/code&gt; for the process title while others (Windows, SunOS) will use &lt;code&gt;command&lt;/code&gt;.</source>
          <target state="translated">特定のプラットフォーム（macOS、Linux）はプロセスタイトルに &lt;code&gt;argv[0]&lt;/code&gt; 値を使用し、他のプラットフォーム（Windows、SunOS）は &lt;code&gt;command&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8e6cefad56966b7f11fbbc717428ce6f816c9f77" translate="yes" xml:space="preserve">
          <source>Certain versions of &lt;code&gt;node::MakeCallback&lt;/code&gt; APIs available to native modules are deprecated. Please use the versions of the API that accept an &lt;code&gt;async_context&lt;/code&gt; parameter.</source>
          <target state="translated">ネイティブモジュールで使用可能な &lt;code&gt;node::MakeCallback&lt;/code&gt; APIの特定のバージョンは非推奨です。 &lt;code&gt;async_context&lt;/code&gt; パラメータを受け入れるバージョンのAPIを使用してください。</target>
        </trans-unit>
        <trans-unit id="10de46b3b341b6f837cf6d72972b9bf2b3f6e491" translate="yes" xml:space="preserve">
          <source>Certificate</source>
          <target state="translated">Certificate</target>
        </trans-unit>
        <trans-unit id="ba0b998ec4ee590a1525fb9ce924b5c6c3d689ee" translate="yes" xml:space="preserve">
          <source>Certificate Object</source>
          <target state="translated">証明書オブジェクト</target>
        </trans-unit>
        <trans-unit id="b969b822cb62addc88af143d23d0f7ca1f38e76b" translate="yes" xml:space="preserve">
          <source>Certificate.exportChallenge(spkac)</source>
          <target state="translated">Certificate.exportChallenge(spkac)</target>
        </trans-unit>
        <trans-unit id="79c9f188b04a8c83116afff3489959f7520adee3" translate="yes" xml:space="preserve">
          <source>Certificate.exportPublicKey(spkac[, encoding])</source>
          <target state="translated">Certificate.exportPublicKey(spkac[,encoding])</target>
        </trans-unit>
        <trans-unit id="1dda9c4a42569f11fa531833a979e7b26c3cb3c1" translate="yes" xml:space="preserve">
          <source>Certificate.verifySpkac(spkac)</source>
          <target state="translated">Certificate.verifySpkac(spkac)</target>
        </trans-unit>
        <trans-unit id="14f98dd21e4e93a81eb0a556a457909ea7edded1" translate="yes" xml:space="preserve">
          <source>Change the file system timestamps of the object referenced by &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 参照されているオブジェクトのファイルシステムのタイムスタンプを変更し、成功すると引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="f5ae887dbdc3043d85987ab885ebc8cadc9b1f81" translate="yes" xml:space="preserve">
          <source>Change the file system timestamps of the object referenced by &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; によって参照されるオブジェクトのファイルシステムのタイムスタンプを変更します。</target>
        </trans-unit>
        <trans-unit id="cae08d63ae772c6156e3a92a9ac517d0ce8564cb" translate="yes" xml:space="preserve">
          <source>Change the file system timestamps of the object referenced by the &lt;code&gt;FileHandle&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; によって参照されるオブジェクトのファイルシステムのタイムスタンプを変更し、成功すると引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="46496f35fc19324406d7348485838237b7709596" translate="yes" xml:space="preserve">
          <source>Change the file system timestamps of the object referenced by the supplied file descriptor. See &lt;a href=&quot;#fs_fs_utimes_path_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.utimes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">提供されたファイル記述子によって参照されるオブジェクトのファイルシステムのタイムスタンプを変更します。&lt;a href=&quot;#fs_fs_utimes_path_atime_mtime_callback&quot;&gt; &lt;code&gt;fs.utimes()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3ff552ade7769c53f6d53d34c42849496b1419f" translate="yes" xml:space="preserve">
          <source>Change to asynchronous &lt;code&gt;socket.bind()&lt;/code&gt; behavior</source>
          <target state="translated">非同期の &lt;code&gt;socket.bind()&lt;/code&gt; 動作に変更</target>
        </trans-unit>
        <trans-unit id="99165cb6ce1ec2addb736cdc095a100703df24e7" translate="yes" xml:space="preserve">
          <source>Changed error format to better support invalid public key error</source>
          <target state="translated">エラー形式を変更し、無効な公開鍵エラーをより良くサポートするようになりました。</target>
        </trans-unit>
        <trans-unit id="8cbaeeddc5694fae75217f3656be4ccd5dbd5707" translate="yes" xml:space="preserve">
          <source>Changed from &lt;code&gt;--diagnostic-report-directory&lt;/code&gt; to &lt;code&gt;--report-directory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-directory&lt;/code&gt; から &lt;code&gt;--report-directory&lt;/code&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="8aa57de6dce6ee1c35c6aba7426503281876b258" translate="yes" xml:space="preserve">
          <source>Changes</source>
          <target state="translated">Changes</target>
        </trans-unit>
        <trans-unit id="910411f3f6621c104d1594e3a510db26b10b2e3e" translate="yes" xml:space="preserve">
          <source>Changes the ownership of a file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">ファイルの所有権を変更し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="238102f2dbe75cd58d3152e5d40da5207a0dd1e7" translate="yes" xml:space="preserve">
          <source>Changes the ownership of the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">ファイルの所有権を変更し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="6fcb78fa81d0e40788cd6b2553daffb7f76a6bdf" translate="yes" xml:space="preserve">
          <source>Changes the ownership on a symbolic link then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">シンボリックリンクの所有権を変更し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="f1109f85ae69d0a1f63b598004239d9b62102c98" translate="yes" xml:space="preserve">
          <source>Changes the permissions of a file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon succces.</source>
          <target state="translated">ファイルのアクセス許可を変更し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="65e2973aa15d11dbeae3f78f93ed89c70ba95575" translate="yes" xml:space="preserve">
          <source>Changes the permissions on a symbolic link then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success. This method is only implemented on macOS.</source>
          <target state="translated">シンボリックリンクのアクセス許可を変更し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。このメソッドはmacOSでのみ実装されます。</target>
        </trans-unit>
        <trans-unit id="3500b4fbd8a4cb2108b880eb1ad0fe03d4ca6987" translate="yes" xml:space="preserve">
          <source>Changes to the ticket keys are effective only for future server connections. Existing or currently pending server connections will use the previous keys.</source>
          <target state="translated">チケットキーの変更は、今後のサーバー接続にのみ有効です。既存または現在保留中のサーバー接続では、以前のキーが使用されます。</target>
        </trans-unit>
        <trans-unit id="e3d42fec64aa51ec3ce090c90f06d00fa184adfb" translate="yes" xml:space="preserve">
          <source>Child Node.js processes will have a &lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;process.send()&lt;/code&gt;&lt;/a&gt; method of their own that allows the child to send messages back to the parent.</source>
          <target state="translated">子Node.jsプロセスには、子が親にメッセージを送信できるようにする独自の&lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;process.send()&lt;/code&gt; &lt;/a&gt;メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="26963308dd032b828d8addf78d8674866f0ac4ef" translate="yes" xml:space="preserve">
          <source>Child Process</source>
          <target state="translated">チャイルドプロセス</target>
        </trans-unit>
        <trans-unit id="5091e72502f618e2b372fcb37e80054927942ac3" translate="yes" xml:space="preserve">
          <source>Child Processes</source>
          <target state="translated">チャイルドプロセス</target>
        </trans-unit>
        <trans-unit id="05bd3c97ff8e567451615977d0e45a00fedacf24" translate="yes" xml:space="preserve">
          <source>ChildProcess</source>
          <target state="translated">ChildProcess</target>
        </trans-unit>
        <trans-unit id="61723dd6e790f56bdc8e9ea2ef53b6104004e939" translate="yes" xml:space="preserve">
          <source>Choose One API Style</source>
          <target state="translated">APIスタイルの選択</target>
        </trans-unit>
        <trans-unit id="5dc240f4f7aa523c3a97c7be9bf36139a483fb72" translate="yes" xml:space="preserve">
          <source>Chooses an HTTP parser library. Available values are:</source>
          <target state="translated">HTTP パーサライブラリを選択します。利用可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0ad1793e0814a287884fb61a145e768578af3982" translate="yes" xml:space="preserve">
          <source>Cipher</source>
          <target state="translated">Cipher</target>
        </trans-unit>
        <trans-unit id="1be878e682a29c4dd57e8d0f3cb03ae1d3ad43d9" translate="yes" xml:space="preserve">
          <source>Cipher names that start with &lt;code&gt;'tls_'&lt;/code&gt; are for TLSv1.3, all the others are for TLSv1.2 and below.</source>
          <target state="translated">&lt;code&gt;'tls_'&lt;/code&gt; で始まる暗号名はTLSv1.3用で、その他はすべてTLSv1.2以下用です。</target>
        </trans-unit>
        <trans-unit id="62654c79e461119e8f24bd51dd8ebab7b66e8a41" translate="yes" xml:space="preserve">
          <source>Ciphers in OCB mode are now supported.</source>
          <target state="translated">OCBモードの暗号がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="e4bc2fab9760903c2ea26724c3ee3a290eccac10" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.alloc(size[, fill[, encoding]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L326&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.alloc（size [、fill [、encoding]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L326&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bd304f348bb695261ba6cd32faa4e542940dfe5" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.allocUnsafe(size)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L339&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.allocUnsafe（size）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L339&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="86e43f6edbc5b8167cea5a836ddcaea95350c1d0" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.allocUnsafeSlow(size)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L349&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.allocUnsafeSlow（size）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L349&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="00b00d723cbd9373eb70e3428493296f8775d55d" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.byteLength(string[, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L556&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.byteLength（string [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L556&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a4b100e5aeee6d2ef611bc39a6eaf423c586cc2" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.compare(buf1, buf2)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L478&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.compare（buf1、buf2）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L478&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="c605df86339fa80c38fb11bfcb08f5bfe7302a88" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.concat(list[, totalLength])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L500&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.concat（list [、totalLength]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L500&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef8e43b8edb032504b82ee3dd2f60ea929fb6aff" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.from(array)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.from（array）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12be169b38b981d89e1db463bcda8517c860d3c8" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.from（arrayBuffer [、byteOffset [、length]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4de54c149a71d5b78b579751a9dc245f37848cc" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.from(buffer)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.from（buffer）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="9494cd46f5ae3b535bc3943acba5b4db19453fa5" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.from(object[, offsetOrEncoding[, length]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.from（object [、offsetOrEncoding [、length]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0595098369046930958f6b9830440c03bf1370fd" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.from(string[, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.from（string [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L264&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62c86e84072bc4c8feeed65e43f41328af790778" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.isBuffer(obj)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L474&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.isBuffer（obj）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L474&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4789044f0b05a25b98df355135b972c8c20e68fe" translate="yes" xml:space="preserve">
          <source>Class Method: Buffer.isEncoding(encoding)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L494&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスメソッド：Buffer.isEncoding（encoding）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L494&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="336213b6b5e5ec95aa5e83647d4c38b8f2b0a3d7" translate="yes" xml:space="preserve">
          <source>Class Method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])</source>
          <target state="translated">クラスメソッドです。ECDH.convertKey(key,curve[,inputEncoding[,outputEncoding[,format]]])</target>
        </trans-unit>
        <trans-unit id="b15f11a262a1df7da3c3768795bea76a9e35e5d6" translate="yes" xml:space="preserve">
          <source>Class Property: Buffer.poolSize&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L103&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラスプロパティ：Buffer.poolSize &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L103&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="3bee5dca77717117d2ea3be02b0a85e8328b8363" translate="yes" xml:space="preserve">
          <source>Class: AssertionError</source>
          <target state="translated">クラスを使用しています。アサーションエラー</target>
        </trans-unit>
        <trans-unit id="6d89c69c426d0de4237b573e03a1b16d394b233d" translate="yes" xml:space="preserve">
          <source>Class: AsyncResource&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L133&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：AsyncResource &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L133&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="df6870e0644ad25a7dc8c078eb6c7058e89330f0" translate="yes" xml:space="preserve">
          <source>Class: BrotliOptions</source>
          <target state="translated">クラスです。BrotliOptions</target>
        </trans-unit>
        <trans-unit id="ee91340540f9ff1d6eda0c3ff2611deada61f014" translate="yes" xml:space="preserve">
          <source>Class: Buffer</source>
          <target state="translated">クラスです。バッファ</target>
        </trans-unit>
        <trans-unit id="7ea07e6292c4eec4c072b03d25a18317615da40d" translate="yes" xml:space="preserve">
          <source>Class: Certificate</source>
          <target state="translated">クラス。証明書</target>
        </trans-unit>
        <trans-unit id="6dfca7a0da2800bb450081a25c4c6922ded53539" translate="yes" xml:space="preserve">
          <source>Class: ChildProcess</source>
          <target state="translated">クラスを使用しています。子プロセス</target>
        </trans-unit>
        <trans-unit id="5f35c36984a11b5cb8f9df9b480e1dc1ad48cee7" translate="yes" xml:space="preserve">
          <source>Class: Cipher</source>
          <target state="translated">クラス サイファー</target>
        </trans-unit>
        <trans-unit id="9772ea16b0b16a53ce1f500faf71e260f1958af6" translate="yes" xml:space="preserve">
          <source>Class: ClientHttp2Session</source>
          <target state="translated">クラスを使用しています。ClientHttp2Session</target>
        </trans-unit>
        <trans-unit id="a0a74d71da9cf4b5a7d1fb9b972c8d3b30c490d3" translate="yes" xml:space="preserve">
          <source>Class: ClientHttp2Stream</source>
          <target state="translated">クラスを使用しています。ClientHttp2Stream</target>
        </trans-unit>
        <trans-unit id="b1030ee1d76abf669683f525fd54f40dadf6ec4a" translate="yes" xml:space="preserve">
          <source>Class: Console</source>
          <target state="translated">クラスでの使用を想定しています。コンソール</target>
        </trans-unit>
        <trans-unit id="94be7767bc80ec7404f3c0c38ab40f134438abc1" translate="yes" xml:space="preserve">
          <source>Class: CryptoStream</source>
          <target state="translated">クラスです。CryptoStream</target>
        </trans-unit>
        <trans-unit id="8d4ba27c6fec639f6690b510c5baa27c6f946d5c" translate="yes" xml:space="preserve">
          <source>Class: Decipher</source>
          <target state="translated">クラス。解読</target>
        </trans-unit>
        <trans-unit id="d76911ae52c82753ed4161e351b3461546f92494" translate="yes" xml:space="preserve">
          <source>Class: DiffieHellman</source>
          <target state="translated">クラスです。DiffieHellman</target>
        </trans-unit>
        <trans-unit id="401e3ac552c57c25fc587e4be68d0dc6f51e8ed5" translate="yes" xml:space="preserve">
          <source>Class: DiffieHellmanGroup</source>
          <target state="translated">クラスです。DiffieHellmanGroup</target>
        </trans-unit>
        <trans-unit id="36860b0af82237a08fe0c130cbd1111d75165a57" translate="yes" xml:space="preserve">
          <source>Class: Domain</source>
          <target state="translated">クラス。ドメイン</target>
        </trans-unit>
        <trans-unit id="9b7002b14ba51117138db0d08961dd313855042b" translate="yes" xml:space="preserve">
          <source>Class: ECDH</source>
          <target state="translated">クラスです。ECDH</target>
        </trans-unit>
        <trans-unit id="8a3a597e3722137704da8f7dc8649f5cbe6a85e8" translate="yes" xml:space="preserve">
          <source>Class: Error</source>
          <target state="translated">クラス。エラー</target>
        </trans-unit>
        <trans-unit id="fc67e3d56e36bfdaff45abf4ea446a2ceb036d7b" translate="yes" xml:space="preserve">
          <source>Class: EventEmitter</source>
          <target state="translated">クラスを使用しています。イベント送信者</target>
        </trans-unit>
        <trans-unit id="eb651ff99a194e6231d2d6a9ccddb0992d633985" translate="yes" xml:space="preserve">
          <source>Class: Hash</source>
          <target state="translated">クラスです。ハッシュ</target>
        </trans-unit>
        <trans-unit id="7edcd9901bee03137f2198db15bad6fb165c2489" translate="yes" xml:space="preserve">
          <source>Class: Histogram</source>
          <target state="translated">クラス。ヒストグラム</target>
        </trans-unit>
        <trans-unit id="e7712bf8c14c2b069bd415f8ad1039d0fa70ade9" translate="yes" xml:space="preserve">
          <source>Class: Hmac</source>
          <target state="translated">クラスです。Hmac</target>
        </trans-unit>
        <trans-unit id="055143c248f2dd8abbfca2cf9d3de70c4542fbf6" translate="yes" xml:space="preserve">
          <source>Class: Http2SecureServer</source>
          <target state="translated">クラスを使用しています。Http2SecureServer</target>
        </trans-unit>
        <trans-unit id="53d5b1cdfe9ecfd0452ec17f8c7de326dbf1ab2c" translate="yes" xml:space="preserve">
          <source>Class: Http2Server</source>
          <target state="translated">クラスを使用しています。Http2Server</target>
        </trans-unit>
        <trans-unit id="62a12fdafb1c79fe966203dce5ee47d5945e2a80" translate="yes" xml:space="preserve">
          <source>Class: Http2Session</source>
          <target state="translated">クラスを使用しています。Http2Session</target>
        </trans-unit>
        <trans-unit id="d0c0e4d5bd1a7f02848afd26d4226fc6b34792c8" translate="yes" xml:space="preserve">
          <source>Class: Http2Stream</source>
          <target state="translated">クラスを使用しています。Http2Stream</target>
        </trans-unit>
        <trans-unit id="c9ed8e0724da394f68c9c7aac8606be05926a4c9" translate="yes" xml:space="preserve">
          <source>Class: Immediate</source>
          <target state="translated">クラス 即時</target>
        </trans-unit>
        <trans-unit id="f8ade0adf31707c878b07c45fa034fddbb4dee06" translate="yes" xml:space="preserve">
          <source>Class: Interface</source>
          <target state="translated">クラスです。インターフェース</target>
        </trans-unit>
        <trans-unit id="ddbf474d24c91341d0b5b926b44739b30142c430" translate="yes" xml:space="preserve">
          <source>Class: KeyObject</source>
          <target state="translated">クラスを使用しています。キーオブジェクト</target>
        </trans-unit>
        <trans-unit id="4a11c864b5123ffac1bf02b1987894716e9178e0" translate="yes" xml:space="preserve">
          <source>Class: MessageChannel</source>
          <target state="translated">クラスを使用しています。メッセージチャンネル</target>
        </trans-unit>
        <trans-unit id="ee173713a0263c0b29641e9c44da5d8804f1c133" translate="yes" xml:space="preserve">
          <source>Class: MessagePort</source>
          <target state="translated">クラスを使用しています。メッセージポート</target>
        </trans-unit>
        <trans-unit id="b6c40d8ac65690b8494f8e70f5c90fed80ace506" translate="yes" xml:space="preserve">
          <source>Class: Options</source>
          <target state="translated">クラス。オプション</target>
        </trans-unit>
        <trans-unit id="95e417bb475601667efac8864a2d2f34dcbc6435" translate="yes" xml:space="preserve">
          <source>Class: Performance</source>
          <target state="translated">クラス パフォーマンス</target>
        </trans-unit>
        <trans-unit id="1febc9f73366381df9c70bb9e370d1872b0ca1fc" translate="yes" xml:space="preserve">
          <source>Class: PerformanceEntry</source>
          <target state="translated">クラス。パフォーマンスエントリー</target>
        </trans-unit>
        <trans-unit id="660bc1eb3347f57ca0d77ff6760720b78cef946c" translate="yes" xml:space="preserve">
          <source>Class: PerformanceNodeTiming extends PerformanceEntry</source>
          <target state="translated">クラスを継承しています。PerformanceNodeTiming は PerformanceEntry を継承しています。</target>
        </trans-unit>
        <trans-unit id="49bd12691709816f0ad3cf3f60bf556a88a495e8" translate="yes" xml:space="preserve">
          <source>Class: PerformanceObserver&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/perf_hooks.js#L285&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：PerformanceObserver &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/perf_hooks.js#L285&quot;&gt;[ソース]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b2d71bddd2159350b0710cec7f08c41e14aad67b" translate="yes" xml:space="preserve">
          <source>Class: PerformanceObserverEntryList</source>
          <target state="translated">クラスです。PerformanceObserverEntryList</target>
        </trans-unit>
        <trans-unit id="7971aa490eae2ba6177d084efef15f00e8a231aa" translate="yes" xml:space="preserve">
          <source>Class: REPLServer</source>
          <target state="translated">クラスを使用しています。REPLServer</target>
        </trans-unit>
        <trans-unit id="bb53bf2faac6d90fa3c4bcef9dd2ea033396da60" translate="yes" xml:space="preserve">
          <source>Class: RangeError</source>
          <target state="translated">クラスを使用しています。RangeError</target>
        </trans-unit>
        <trans-unit id="1ff1cba0df1133bd5ee2d424e6bfb925546fb9a7" translate="yes" xml:space="preserve">
          <source>Class: ReferenceError</source>
          <target state="translated">クラスを使用しています。リファレンスエラー</target>
        </trans-unit>
        <trans-unit id="d6610a9a095cbb5bceb184ea6ef03375195896d7" translate="yes" xml:space="preserve">
          <source>Class: SecurePair</source>
          <target state="translated">クラスを使用しています。セキュアペア</target>
        </trans-unit>
        <trans-unit id="73983d4b4ae4bcf52d5358959a5ebcaf0f4db5ff" translate="yes" xml:space="preserve">
          <source>Class: ServerHttp2Session</source>
          <target state="translated">クラスを提供しています。ServerHttp2Session</target>
        </trans-unit>
        <trans-unit id="90ecafc208a992e89d97aec23cfba5674695dfa1" translate="yes" xml:space="preserve">
          <source>Class: ServerHttp2Stream</source>
          <target state="translated">クラスを使用しています。ServerHttp2Stream</target>
        </trans-unit>
        <trans-unit id="f02b8d27a4e11d427a9c8ffcd8a58e6cb0dcb8fe" translate="yes" xml:space="preserve">
          <source>Class: Sign</source>
          <target state="translated">クラス サイン</target>
        </trans-unit>
        <trans-unit id="f402f70409b707e1cf81e329bd1d9cbb04e722ba" translate="yes" xml:space="preserve">
          <source>Class: SlowBuffer</source>
          <target state="translated">クラスを使用しています。スローバッファ</target>
        </trans-unit>
        <trans-unit id="14ea72601a1e4445d77a12385d1928ffeeb3a975" translate="yes" xml:space="preserve">
          <source>Class: StringDecoder</source>
          <target state="translated">クラスを使用しています。StringDecoder</target>
        </trans-unit>
        <trans-unit id="c039928f51b3ce557b08b8c161c9776f3919083c" translate="yes" xml:space="preserve">
          <source>Class: SyntaxError</source>
          <target state="translated">クラスを使用しています。クラス:SyntaxError</target>
        </trans-unit>
        <trans-unit id="6546bd0dc67ac75ecbb21fa8ef97ac2784e2c42a" translate="yes" xml:space="preserve">
          <source>Class: SystemError</source>
          <target state="translated">クラスを使用しています。クラス:SystemError</target>
        </trans-unit>
        <trans-unit id="ca77ab749f487047c1c339f8f61efb068e74444f" translate="yes" xml:space="preserve">
          <source>Class: Timeout</source>
          <target state="translated">クラス。タイムアウト</target>
        </trans-unit>
        <trans-unit id="a07fa94c48261641deb021767e49ce5bbbe00343" translate="yes" xml:space="preserve">
          <source>Class: TypeError</source>
          <target state="translated">クラスを使用しています。タイプエラー</target>
        </trans-unit>
        <trans-unit id="9cbe7b594a816b5b5a63f3cd1339263238406bf2" translate="yes" xml:space="preserve">
          <source>Class: URL</source>
          <target state="translated">クラスです。URL</target>
        </trans-unit>
        <trans-unit id="c1ede861f38dede64144117f0a263f47d5cb3acd" translate="yes" xml:space="preserve">
          <source>Class: URLSearchParams</source>
          <target state="translated">クラスを使用しています。URLSearchParams</target>
        </trans-unit>
        <trans-unit id="2c3dbdb817da19e37677c7b22b7b3ea95743a02f" translate="yes" xml:space="preserve">
          <source>Class: Verify</source>
          <target state="translated">クラスです。ベリファイ</target>
        </trans-unit>
        <trans-unit id="d3d940ddc9abe58f39b5d8a8d49d75f2bf5a37cb" translate="yes" xml:space="preserve">
          <source>Class: Worker</source>
          <target state="translated">クラス。労働者</target>
        </trans-unit>
        <trans-unit id="ee0069323931cb8188be353cd2eff2673625921b" translate="yes" xml:space="preserve">
          <source>Class: assert.AssertionError&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L135&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：assert.AssertionError &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L135&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="da7646356f2df51dc886844401490ff50a7b8df9" translate="yes" xml:space="preserve">
          <source>Class: dgram.Socket&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/dgram.js#L88&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：dgram.Socket &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/dgram.js#L88&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="3f1245d31deaf0cd8a70c45ad46da689a419a765" translate="yes" xml:space="preserve">
          <source>Class: dns.Resolver</source>
          <target state="translated">クラス:dns.リゾルバ</target>
        </trans-unit>
        <trans-unit id="5eec419c0c522138b6d28cc206a9e5de84a0c64f" translate="yes" xml:space="preserve">
          <source>Class: dnsPromises.Resolver</source>
          <target state="translated">クラス:dnsPromises.リゾルバ</target>
        </trans-unit>
        <trans-unit id="63d596a0474b09de3ce23542bb0817ecd855247d" translate="yes" xml:space="preserve">
          <source>Class: fs.Dirent</source>
          <target state="translated">クラス:fs.Dirent</target>
        </trans-unit>
        <trans-unit id="32bb13d3d8cd1233db6906a10144788baafc15d8" translate="yes" xml:space="preserve">
          <source>Class: fs.FSWatcher</source>
          <target state="translated">クラス:fs.FSWatcher</target>
        </trans-unit>
        <trans-unit id="572eca4917fc3210a922b60070778ee660105b83" translate="yes" xml:space="preserve">
          <source>Class: fs.ReadStream</source>
          <target state="translated">クラス:fs.ReadStream</target>
        </trans-unit>
        <trans-unit id="1d3e6ac82044e79293f42dd0965dbdbe0823ea5b" translate="yes" xml:space="preserve">
          <source>Class: fs.Stats</source>
          <target state="translated">クラス:fs.Stats</target>
        </trans-unit>
        <trans-unit id="a2c81974801e4aff8ac1e5ba5973db293f034c82" translate="yes" xml:space="preserve">
          <source>Class: fs.WriteStream</source>
          <target state="translated">クラス:fs.WriteStream</target>
        </trans-unit>
        <trans-unit id="dd3d2d41e4d8701b85414e4141372fd43c9fe051" translate="yes" xml:space="preserve">
          <source>Class: http.Agent</source>
          <target state="translated">クラス:http.Agent</target>
        </trans-unit>
        <trans-unit id="858ae2efe19958bc0bcd201c0d05ed287bb41ab6" translate="yes" xml:space="preserve">
          <source>Class: http.ClientRequest</source>
          <target state="translated">クラス:http.ClientRequest</target>
        </trans-unit>
        <trans-unit id="f0f90a86616b70b7c34a7291a6fc608129d8462e" translate="yes" xml:space="preserve">
          <source>Class: http.IncomingMessage</source>
          <target state="translated">クラス:http.IncomingMessage</target>
        </trans-unit>
        <trans-unit id="ef0141af934b8c39f1edab875f23ee69096d2056" translate="yes" xml:space="preserve">
          <source>Class: http.Server</source>
          <target state="translated">クラス:http.Server</target>
        </trans-unit>
        <trans-unit id="cc662b9c387098851edd45a7ed5e318b286d4c31" translate="yes" xml:space="preserve">
          <source>Class: http.ServerResponse</source>
          <target state="translated">クラス:http.ServerResponse</target>
        </trans-unit>
        <trans-unit id="8ede30dd7e205f2ad51ffd5043b6d2c5253499b8" translate="yes" xml:space="preserve">
          <source>Class: http2.Http2ServerRequest</source>
          <target state="translated">クラス:http2.Http2ServerRequest</target>
        </trans-unit>
        <trans-unit id="f53b529b3e1e7a29a3a635b33a5a680c1b4a2ad6" translate="yes" xml:space="preserve">
          <source>Class: http2.Http2ServerResponse</source>
          <target state="translated">クラス:http2.Http2ServerResponse</target>
        </trans-unit>
        <trans-unit id="4d73fc1bdc8c0b1c0bea59de1af87ad1d4d21ef8" translate="yes" xml:space="preserve">
          <source>Class: https.Agent&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L144&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：https.Agent &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L144&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="3a5ce6b058e98b48dd8ff9073173543677d09416" translate="yes" xml:space="preserve">
          <source>Class: https.Server&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L46&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：https.Server &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L46&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="c0073527762c3a38e48ff45f4735d8e0f019fe89" translate="yes" xml:space="preserve">
          <source>Class: inspector.Session</source>
          <target state="translated">クラス:inspector.Session</target>
        </trans-unit>
        <trans-unit id="f7c9efa3f1c0df2ce051ba9dced85f1d7ca51e75" translate="yes" xml:space="preserve">
          <source>Class: net.Server&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/net.js#L1070&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：net.Server &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/net.js#L1070&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="3c728b92ec9ed66645064171f51275b5522d4bad" translate="yes" xml:space="preserve">
          <source>Class: net.Socket&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/net.js#L236&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：net.Socket &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/net.js#L236&quot;&gt;[ソース]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4585dad1ddb9ee702a469e8b3ce45cb5368dad87" translate="yes" xml:space="preserve">
          <source>Class: stream.Duplex</source>
          <target state="translated">クラス:stream.Duplex</target>
        </trans-unit>
        <trans-unit id="591fded34eab8e336702db78394cd67506a57fec" translate="yes" xml:space="preserve">
          <source>Class: stream.PassThrough</source>
          <target state="translated">クラス:stream.PassThrough</target>
        </trans-unit>
        <trans-unit id="e727b34caa07882e0e3d2f424db4c9f32759ef32" translate="yes" xml:space="preserve">
          <source>Class: stream.Readable</source>
          <target state="translated">クラス:stream.Readable</target>
        </trans-unit>
        <trans-unit id="27c7c100e21b60cfe9f259349393d2d59e19a8d7" translate="yes" xml:space="preserve">
          <source>Class: stream.Transform</source>
          <target state="translated">クラス:stream.Transform</target>
        </trans-unit>
        <trans-unit id="e7fc0551d9f93663b10b16f1c305f9b6761ccea4" translate="yes" xml:space="preserve">
          <source>Class: stream.Writable</source>
          <target state="translated">クラス:stream.Writable</target>
        </trans-unit>
        <trans-unit id="cf580adf552f5943b00465f95eb1d451f48f362a" translate="yes" xml:space="preserve">
          <source>Class: tls.Server</source>
          <target state="translated">クラス:tls.Server</target>
        </trans-unit>
        <trans-unit id="266c110f36269a9dd6d8b7179dcbd694534d7fef" translate="yes" xml:space="preserve">
          <source>Class: tls.TLSSocket</source>
          <target state="translated">クラス:tls.TLSSocket</target>
        </trans-unit>
        <trans-unit id="8cda23b6d1e9dc869f485f0a6b4ae5cec1c4fcc1" translate="yes" xml:space="preserve">
          <source>Class: tty.ReadStream&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/tty.js#L42&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：tty.ReadStream &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/tty.js#L42&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="14c4e5000edbe8baf9291fcfad1d7c5bf7ca76cc" translate="yes" xml:space="preserve">
          <source>Class: tty.WriteStream&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/tty.js#L80&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：tty.WriteStream &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/tty.js#L80&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="2176201a8eb17202fda9eada206590ab0d8a5f3b" translate="yes" xml:space="preserve">
          <source>Class: util.TextDecoder</source>
          <target state="translated">クラス:util.TextDecoder</target>
        </trans-unit>
        <trans-unit id="225a821ad4ae8dd42565de0ab9fc4d91effbf7d9" translate="yes" xml:space="preserve">
          <source>Class: util.TextEncoder</source>
          <target state="translated">クラス:util.TextEncoder</target>
        </trans-unit>
        <trans-unit id="a1dd6ce5fb062867f583fca6877bd4e08ce6e249" translate="yes" xml:space="preserve">
          <source>Class: vm.Script</source>
          <target state="translated">クラス:vm.Script</target>
        </trans-unit>
        <trans-unit id="9c140e48cc581e4c97b858c58702bd26a98f14d8" translate="yes" xml:space="preserve">
          <source>Class: vm.SourceTextModule</source>
          <target state="translated">クラス:vm.SourceTextModule</target>
        </trans-unit>
        <trans-unit id="3c540cf26c882374d4b6c797ba59f97b5c4df290" translate="yes" xml:space="preserve">
          <source>Class: zlib.BrotliCompress&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L815&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.BrotliCompress &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L815&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="21ad982768a17be628b475c2929baf1a8593f2b4" translate="yes" xml:space="preserve">
          <source>Class: zlib.BrotliDecompress&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L823&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.BrotliDecompress &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L823&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="f550d3b072eb35f957e9787e2fc811a678680a42" translate="yes" xml:space="preserve">
          <source>Class: zlib.Deflate&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L695&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.Deflate &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L695&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="f821e12183e76cf6291d97bc0a98ebc35e5016e1" translate="yes" xml:space="preserve">
          <source>Class: zlib.DeflateRaw&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L727&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.DeflateRaw &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L727&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e85c06b5b12e00902e6cd83d551a80afd898508" translate="yes" xml:space="preserve">
          <source>Class: zlib.Gunzip&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L719&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.Gunzip &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L719&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="a7c198a3e256c2e36c67572a7f0cc7ecc2ece130" translate="yes" xml:space="preserve">
          <source>Class: zlib.Gzip&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L711&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.Gzip &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L711&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="4322d196f046aebe16fe93df5fca9302e83174e4" translate="yes" xml:space="preserve">
          <source>Class: zlib.Inflate&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L703&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.Inflate &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L703&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1916fabc525d061eecf452a39a4962c7e46d94c3" translate="yes" xml:space="preserve">
          <source>Class: zlib.InflateRaw&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L736&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.InflateRaw &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L736&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1350d4e7ef7676f24a19f7dd15e6ec215e8aa27" translate="yes" xml:space="preserve">
          <source>Class: zlib.Unzip&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L744&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">クラス：zlib.Unzip &lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/zlib.js#L744&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="980ed6673f63de346b3d489473fbef175ec32df7" translate="yes" xml:space="preserve">
          <source>Class: zlib.ZlibBase</source>
          <target state="translated">クラス:zlib.ZlibBase</target>
        </trans-unit>
        <trans-unit id="ccfc0c40cf622522920c5b4968f2565c85442775" translate="yes" xml:space="preserve">
          <source>Cleanup on exit of the current Node.js instance</source>
          <target state="translated">現在のNode.jsインスタンスの終了時にクリーンアップする</target>
        </trans-unit>
        <trans-unit id="83530e1815352d08d7559083ed9fe11b37d61b98" translate="yes" xml:space="preserve">
          <source>Client connects to the server and sends an &lt;code&gt;'OCSPRequest'&lt;/code&gt; (via the status info extension in ClientHello).</source>
          <target state="translated">クライアントはサーバーに接続し、 &lt;code&gt;'OCSPRequest'&lt;/code&gt; を送信します（ClientHelloのステータス情報拡張を介して）。</target>
        </trans-unit>
        <trans-unit id="9b7cc2a0a237b02bd18c475c2ab878b20b029ff1" translate="yes" xml:space="preserve">
          <source>Client validates the response and either destroys the socket or performs a handshake.</source>
          <target state="translated">クライアントはレスポンスを検証し、ソケットを破棄するか、ハンドシェイクを実行します。</target>
        </trans-unit>
        <trans-unit id="5d3a08e6b324632a99205ff0c000dd4b31ad8fa4" translate="yes" xml:space="preserve">
          <source>Client-initiated renegotiation attack mitigation</source>
          <target state="translated">クライアント主導の再交渉攻撃の緩和</target>
        </trans-unit>
        <trans-unit id="3f05c67d59ace95834a9f9bd821143e71e8efc0a" translate="yes" xml:space="preserve">
          <source>Client-side example</source>
          <target state="translated">クライアント側の例</target>
        </trans-unit>
        <trans-unit id="5b197dbe61813078ff8e2b5e607665e44a4c4995" translate="yes" xml:space="preserve">
          <source>ClientHttp2Session</source>
          <target state="translated">ClientHttp2Session</target>
        </trans-unit>
        <trans-unit id="7fc70a335ae1867faaff77960fa66720966f0085" translate="yes" xml:space="preserve">
          <source>ClientHttp2Stream</source>
          <target state="translated">ClientHttp2Stream</target>
        </trans-unit>
        <trans-unit id="9356a7830a1ab4cfef496cc697121b119fad5c6f" translate="yes" xml:space="preserve">
          <source>Close the underlying handle.</source>
          <target state="translated">下にあるハンドルを閉じます。</target>
        </trans-unit>
        <trans-unit id="ae50316a0aa7c9805d6ed82df38055ff62f8937a" translate="yes" xml:space="preserve">
          <source>Close the underlying socket and stop listening for data on it. If a callback is provided, it is added as a listener for the &lt;a href=&quot;#dgram_event_close&quot;&gt;&lt;code&gt;'close'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">基になるソケットを閉じて、その上のデータのリッスンを停止します。コールバックが提供されている場合、&lt;a href=&quot;#dgram_event_close&quot;&gt; &lt;code&gt;'close'&lt;/code&gt; &lt;/a&gt;イベントのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="c1e3ae6a3f36eae2e25af6e890e376b2aff0609c" translate="yes" xml:space="preserve">
          <source>Closes the &lt;code&gt;Http2Stream&lt;/code&gt; instance by sending an &lt;code&gt;RST_STREAM&lt;/code&gt; frame to the connected HTTP/2 peer.</source>
          <target state="translated">接続されているHTTP / 2ピアに &lt;code&gt;RST_STREAM&lt;/code&gt; フレームを送信して、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスを閉じます。</target>
        </trans-unit>
        <trans-unit id="90aa5c8c38b8453581e4f0a38f89caf25684cae6" translate="yes" xml:space="preserve">
          <source>Closes the IPC channel between parent and child, allowing the child to exit gracefully once there are no other connections keeping it alive. After calling this method the &lt;code&gt;subprocess.connected&lt;/code&gt; and &lt;code&gt;process.connected&lt;/code&gt; properties in both the parent and child (respectively) will be set to &lt;code&gt;false&lt;/code&gt;, and it will be no longer possible to pass messages between the processes.</source>
          <target state="translated">親と子の間のIPCチャネルを閉じ、他の接続が存在しない場合、子が正常に終了できるようにします。このメソッドを呼び出した後、親と子の両方の &lt;code&gt;subprocess.connected&lt;/code&gt; プロパティと &lt;code&gt;process.connected&lt;/code&gt; プロパティは（それぞれ） &lt;code&gt;false&lt;/code&gt; に設定され、プロセス間でメッセージを渡すことができなくなります。</target>
        </trans-unit>
        <trans-unit id="b23804a0449627c9510bdc5ef3368ac152ce239a" translate="yes" xml:space="preserve">
          <source>Closes the file descriptor.</source>
          <target state="translated">ファイルディスクリプタを閉じます。</target>
        </trans-unit>
        <trans-unit id="d75dc68bbdd56c9cbd58d4bbdabda84bcca2c47f" translate="yes" xml:space="preserve">
          <source>Cluster</source>
          <target state="translated">Cluster</target>
        </trans-unit>
        <trans-unit id="ef502b0ca48abd2a5e8cec682e639ff6c32d7286" translate="yes" xml:space="preserve">
          <source>Coercing the offsets to integers now handles values outside the 32-bit integer range properly.</source>
          <target state="translated">オフセットを整数に強制すると、32ビット整数範囲外の値が適切に処理されるようになりました。</target>
        </trans-unit>
        <trans-unit id="1bfa05f9053ea71498a731db3bc6837c2172ca1a" translate="yes" xml:space="preserve">
          <source>Collecting HTTP/2 Performance Metrics</source>
          <target state="translated">HTTP/2 パフォーマンス・メトリクスの収集</target>
        </trans-unit>
        <trans-unit id="c5f5792195fb8136faeef77ceb20296d74989e1c" translate="yes" xml:space="preserve">
          <source>Color output (if enabled) of &lt;code&gt;util.inspect&lt;/code&gt; is customizable globally via the &lt;code&gt;util.inspect.styles&lt;/code&gt; and &lt;code&gt;util.inspect.colors&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;util.inspect&lt;/code&gt; のカラー出力（有効な場合）は、 &lt;code&gt;util.inspect.styles&lt;/code&gt; および &lt;code&gt;util.inspect.colors&lt;/code&gt; プロパティを介してグローバルにカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="e0d8230784db766154d6c1ff4966e49efa892e1f" translate="yes" xml:space="preserve">
          <source>Color styling uses ANSI control codes that may not be supported on all terminals. To verify color support use &lt;a href=&quot;tty#tty_writestream_hascolors_count_env&quot;&gt;&lt;code&gt;tty.hasColors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カラースタイリングは、一部の端末ではサポートされていない可能性があるANSI制御コードを使用します。カラーサポートを確認するには、&lt;a href=&quot;tty#tty_writestream_hascolors_count_env&quot;&gt; &lt;code&gt;tty.hasColors()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4b91918e82d5cef17a745f0886369f20996ba6c7" translate="yes" xml:space="preserve">
          <source>Command Line Options</source>
          <target state="translated">コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">コマンド参照</target>
        </trans-unit>
        <trans-unit id="0f0b4b72394982e026b43cb2db09fa5145ad7301" translate="yes" xml:space="preserve">
          <source>Commands and Special Keys</source>
          <target state="translated">コマンドと特殊キー</target>
        </trans-unit>
        <trans-unit id="92be5fa035fee22260aba9f79a65963da742ee1d" translate="yes" xml:space="preserve">
          <source>Common System Errors</source>
          <target state="translated">一般的なシステムエラー</target>
        </trans-unit>
        <trans-unit id="542deb57ecc58fd227e59b53356f94558c609262" translate="yes" xml:space="preserve">
          <source>CommonJS, JSON, and Native Modules</source>
          <target state="translated">CommonJS、JSON、ネイティブモジュール</target>
        </trans-unit>
        <trans-unit id="cf0e4eba6367908e6a37758a03578c6a444962e7" translate="yes" xml:space="preserve">
          <source>CommonJS, JSON, and Native modules can be used with &lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJS、JSON、およびネイティブモジュールは、&lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt; &lt;code&gt;module.createRequire()&lt;/code&gt; で&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="53ccb30453ab89dbc276697018900c2f50212b90" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;buf1&lt;/code&gt; to &lt;code&gt;buf2&lt;/code&gt; typically for the purpose of sorting arrays of &lt;code&gt;Buffer&lt;/code&gt; instances. This is equivalent to calling &lt;a href=&quot;#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend&quot;&gt;&lt;code&gt;buf1.compare(buf2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;Buffer&lt;/code&gt; インスタンスの配列をソートする目的で、 &lt;code&gt;buf1&lt;/code&gt; と &lt;code&gt;buf2&lt;/code&gt; を比較します。これは、&lt;a href=&quot;#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend&quot;&gt; &lt;code&gt;buf1.compare(buf2)&lt;/code&gt; &lt;/a&gt;を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="7329f3b38a62c0f324292d3fe25680d52a97fdaa" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;buf&lt;/code&gt; with &lt;code&gt;target&lt;/code&gt; and returns a number indicating whether &lt;code&gt;buf&lt;/code&gt; comes before, after, or is the same as &lt;code&gt;target&lt;/code&gt; in sort order. Comparison is based on the actual sequence of bytes in each &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">比較 &lt;code&gt;buf&lt;/code&gt; 用いて &lt;code&gt;target&lt;/code&gt; とするかどうかを示す番号を返し &lt;code&gt;buf&lt;/code&gt; が後、前に来るか、または同じである &lt;code&gt;target&lt;/code&gt; ソート順です。比較は、各 &lt;code&gt;Buffer&lt;/code&gt; の実際のバイトシーケンスに基づいています。</target>
        </trans-unit>
        <trans-unit id="9b52e2ee6d651b57fdc9ad10d7bbb24ca5e9c359" translate="yes" xml:space="preserve">
          <source>Comparison details</source>
          <target state="translated">比較の詳細</target>
        </trans-unit>
        <trans-unit id="949928fcaffafca4a96e2dcf44af151918d71bd2" translate="yes" xml:space="preserve">
          <source>Compatibility API</source>
          <target state="translated">互換性API</target>
        </trans-unit>
        <trans-unit id="e1685df32db96b50d7007e22511d7c8fcb7a3937" translate="yes" xml:space="preserve">
          <source>Compatibility with Older Node.js Versions</source>
          <target state="translated">古いNode.jsバージョンとの互換性</target>
        </trans-unit>
        <trans-unit id="07d07b5e3b2ed558031b18dcb738c564565b0303" translate="yes" xml:space="preserve">
          <source>Compile-time deprecation.</source>
          <target state="translated">コンパイル時の非推奨。</target>
        </trans-unit>
        <trans-unit id="2c48a836dcb6a5027e827d0e895d6df08489f9ae" translate="yes" xml:space="preserve">
          <source>Compiles the given code into the provided context/sandbox (if no context is supplied, the current context is used), and returns it wrapped inside a function with the given &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="translated">指定されたコードを指定されたコンテキスト/サンドボックスにコンパイルし（コンテキストが指定されていない場合は現在のコンテキストが使用されます）、指定された &lt;code&gt;params&lt;/code&gt; で関数内にラップして返します。</target>
        </trans-unit>
        <trans-unit id="6bc5a622940147f5fde54e40bd8f9dd42748aa3f" translate="yes" xml:space="preserve">
          <source>Compress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_brotlicompress&quot;&gt;&lt;code&gt;BrotliCompress&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_brotlicompress&quot;&gt; &lt;code&gt;BrotliCompress&lt;/code&gt; &lt;/a&gt;を使用してデータのチャンクを圧縮します。</target>
        </trans-unit>
        <trans-unit id="a51ef9aa08748a455d376a484ca7a4ea2014c614" translate="yes" xml:space="preserve">
          <source>Compress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_deflate&quot;&gt;&lt;code&gt;Deflate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_deflate&quot;&gt; &lt;code&gt;Deflate&lt;/code&gt; &lt;/a&gt;でデータのチャンクを圧縮します。</target>
        </trans-unit>
        <trans-unit id="882c021e07cd95aa9596d9bb97bbd683575e933a" translate="yes" xml:space="preserve">
          <source>Compress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_deflateraw&quot;&gt;&lt;code&gt;DeflateRaw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_deflateraw&quot;&gt; &lt;code&gt;DeflateRaw&lt;/code&gt; &lt;/a&gt;を使用してデータのチャンクを圧縮します。</target>
        </trans-unit>
        <trans-unit id="ddd950feef64772a2192ddc0fbfad70c8e5937b3" translate="yes" xml:space="preserve">
          <source>Compress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_gzip&quot;&gt;&lt;code&gt;Gzip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データのチャンクを&lt;a href=&quot;#zlib_class_zlib_gzip&quot;&gt; &lt;code&gt;Gzip&lt;/code&gt; &lt;/a&gt;で圧縮します。</target>
        </trans-unit>
        <trans-unit id="0b836e8e2670339cdd499dfccffc683fa0654654" translate="yes" xml:space="preserve">
          <source>Compress data using deflate, and do not append a &lt;code&gt;zlib&lt;/code&gt; header.</source>
          <target state="translated">deflateを使用してデータを圧縮し、 &lt;code&gt;zlib&lt;/code&gt; ヘッダーを追加しません。</target>
        </trans-unit>
        <trans-unit id="6a5f382fe2bc977e5ffd68e64b49abcba50f3889" translate="yes" xml:space="preserve">
          <source>Compress data using deflate.</source>
          <target state="translated">deflateを使ってデータを圧縮します。</target>
        </trans-unit>
        <trans-unit id="5eff9f796879353b5f4b6b64990c52eba1c7edd4" translate="yes" xml:space="preserve">
          <source>Compress data using gzip.</source>
          <target state="translated">gzipを使ってデータを圧縮します。</target>
        </trans-unit>
        <trans-unit id="7d1f912218507ca3cc5b73350cf1bb6c9f78c08b" translate="yes" xml:space="preserve">
          <source>Compress data using the Brotli algorithm.</source>
          <target state="translated">Brotliアルゴリズムを使用してデータを圧縮します。</target>
        </trans-unit>
        <trans-unit id="c6c1e5d1d739c448afb871c4436a6df754d47162" translate="yes" xml:space="preserve">
          <source>Compressing HTTP requests and responses</source>
          <target state="translated">HTTP リクエストとレスポンスを圧縮する</target>
        </trans-unit>
        <trans-unit id="2a729b5fe3cc43023943afc839ec7f014a9775a2" translate="yes" xml:space="preserve">
          <source>Compressing or decompressing a stream (such as a file) can be accomplished by piping the source stream data through a &lt;code&gt;zlib&lt;/code&gt; stream into a destination stream:</source>
          <target state="translated">ストリーム（ファイルなど）の圧縮または解凍は、 &lt;code&gt;zlib&lt;/code&gt; ストリームを介してソースストリームデータを宛先ストリームにパイプすることで実行できます。</target>
        </trans-unit>
        <trans-unit id="687646452a200d59908103e90311205bb64151d2" translate="yes" xml:space="preserve">
          <source>Compression Error</source>
          <target state="translated">圧縮エラー</target>
        </trans-unit>
        <trans-unit id="f06bcf5b1e1b82469c32de085fda03a5c32340dc" translate="yes" xml:space="preserve">
          <source>Compression levels.</source>
          <target state="translated">圧縮レベル。</target>
        </trans-unit>
        <trans-unit id="107902d2b7faa488b978b8da1c9fb43aaf256260" translate="yes" xml:space="preserve">
          <source>Compression strategy.</source>
          <target state="translated">圧縮戦略。</target>
        </trans-unit>
        <trans-unit id="705d2325d10730a4e64b75746d16d86a88621f64" translate="yes" xml:space="preserve">
          <source>Compressor options</source>
          <target state="translated">コンプレッサーオプション</target>
        </trans-unit>
        <trans-unit id="209cfc803ab4bbccd1b92cc5d64c90559099e286" translate="yes" xml:space="preserve">
          <source>Computes the shared secret using &lt;code&gt;otherPublicKey&lt;/code&gt; as the other party's public key and returns the computed shared secret. The supplied key is interpreted using specified &lt;code&gt;inputEncoding&lt;/code&gt;, and the returned secret is encoded using the specified &lt;code&gt;outputEncoding&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, &lt;code&gt;otherPublicKey&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;otherPublicKey&lt;/code&gt; を相手の公開鍵として使用して共有秘密を計算し、計算した共有秘密を返します。指定されたキーは指定された &lt;code&gt;inputEncoding&lt;/code&gt; を使用して解釈され、返されたシークレットは指定された &lt;code&gt;outputEncoding&lt;/code&gt; を使用してエンコードされます。場合 &lt;code&gt;inputEncoding&lt;/code&gt; が設けられておらず、 &lt;code&gt;otherPublicKey&lt;/code&gt; があると予想される&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad3852bf7998d9f16ec46b178a773a89c513afcb" translate="yes" xml:space="preserve">
          <source>Computes the shared secret using &lt;code&gt;otherPublicKey&lt;/code&gt; as the other party's public key and returns the computed shared secret. The supplied key is interpreted using the specified &lt;code&gt;inputEncoding&lt;/code&gt;, and secret is encoded using specified &lt;code&gt;outputEncoding&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, &lt;code&gt;otherPublicKey&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;otherPublicKey&lt;/code&gt; を相手の公開鍵として使用して共有秘密を計算し、計算した共有秘密を返します。指定されたキーは指定された &lt;code&gt;inputEncoding&lt;/code&gt; を使用して解釈され、シークレットは指定された &lt;code&gt;outputEncoding&lt;/code&gt; を使用してエンコードされます。場合 &lt;code&gt;inputEncoding&lt;/code&gt; が設けられておらず、 &lt;code&gt;otherPublicKey&lt;/code&gt; があると予想される&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="ad824d940265b366316a0d82798b4bfaaaaa9bca" translate="yes" xml:space="preserve">
          <source>Configuration on module initialization is also available via environment variables:</source>
          <target state="translated">モジュールの初期化に関する設定は環境変数でも可能です。</target>
        </trans-unit>
        <trans-unit id="fd343cadfd8c4297debd9367427b8e3199a5a455" translate="yes" xml:space="preserve">
          <source>Connect Error</source>
          <target state="translated">接続エラー</target>
        </trans-unit>
        <trans-unit id="cfd483354feaaad4c6488ff4e153b453de9c1f84" translate="yes" xml:space="preserve">
          <source>Connects a session to the inspector back-end. An exception will be thrown if there is already a connected session established either through the API or by a front-end connected to the Inspector WebSocket port.</source>
          <target state="translated">セッションをインスペクタのバックエンドに接続します。APIを介して、またはInspector WebSocketポートに接続されたフロントエンドによって、すでに接続されたセッションが確立されている場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7bce5eea9f5285b9caff03061be93178944a6b70" translate="yes" xml:space="preserve">
          <source>Consider this situation:</source>
          <target state="translated">この状況を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="f65dd03fe32462c1ef50bf727e2875b6d0a13a52" translate="yes" xml:space="preserve">
          <source>Consistently set socket timeout only when the socket connects.</source>
          <target state="translated">ソケットが接続した時のみ、一貫してソケットのタイムアウトを設定する。</target>
        </trans-unit>
        <trans-unit id="9f3341d3710b74c1bace9f7d9d287f157faea4f4" translate="yes" xml:space="preserve">
          <source>Console</source>
          <target state="translated">Console</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="6885ebdd7073d6b1008150a4271ba49427d73555" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;tls.TLSSocket&lt;/code&gt; object from an existing TCP socket.</source>
          <target state="translated">既存のTCPソケットから新しい &lt;code&gt;tls.TLSSocket&lt;/code&gt; オブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="db5f47689fca29a6b2a3dc3a12435f09750e7ad1" translate="yes" xml:space="preserve">
          <source>Constructor: new URL(input[, base])</source>
          <target state="translated">コンストラクタ:新しい URL(input[,base)</target>
        </trans-unit>
        <trans-unit id="6e8280b203fc633489ff031c747d433819075e43" translate="yes" xml:space="preserve">
          <source>Constructor: new URLSearchParams()</source>
          <target state="translated">コンストラクタ:new URLSearchParams()</target>
        </trans-unit>
        <trans-unit id="d7a12d65ee7485d2e8c5b3d322591654410166c6" translate="yes" xml:space="preserve">
          <source>Constructor: new URLSearchParams(iterable)</source>
          <target state="translated">コンストラクタ:new URLSearchParams(iterable)</target>
        </trans-unit>
        <trans-unit id="ef957972061dfe971ae7ed8328f33934f82d6362" translate="yes" xml:space="preserve">
          <source>Constructor: new URLSearchParams(obj)</source>
          <target state="translated">コンストラクタ:new URLSearchParams(obj)</target>
        </trans-unit>
        <trans-unit id="acb5d88524215896d0eda1d976bf13a13625463b" translate="yes" xml:space="preserve">
          <source>Constructor: new URLSearchParams(string)</source>
          <target state="translated">コンストラクタ:new URLSearchParams(string)</target>
        </trans-unit>
        <trans-unit id="11a89e914bedec196f22f206b290ec5629177b77" translate="yes" xml:space="preserve">
          <source>Constructor: new inspector.Session()</source>
          <target state="translated">コンストラクタ:new inspector.Session()</target>
        </trans-unit>
        <trans-unit id="cf9ed2b3923e5608b657c5193c702543f56a3ead" translate="yes" xml:space="preserve">
          <source>Constructor: new stream.Writable([options])</source>
          <target state="translated">コンストラクタ:new stream.Writable([options])</target>
        </trans-unit>
        <trans-unit id="efebf4343b8cda5afd208f14a3c5c74922c3e79e" translate="yes" xml:space="preserve">
          <source>Constructor: new vm.Script(code[, options])</source>
          <target state="translated">コンストラクタ:new vm.Script(code[,options])</target>
        </trans-unit>
        <trans-unit id="bf01f0a8a66bcc77139555e7b0fbc9aef87caedf" translate="yes" xml:space="preserve">
          <source>Constructor: new vm.SourceTextModule(code[, options])</source>
          <target state="translated">コンストラクタ:new vm.SourceTextModule(code[,options])</target>
        </trans-unit>
        <trans-unit id="7a2716cd99df92c674d90bf3be7264f6c1b60a32" translate="yes" xml:space="preserve">
          <source>Consuming Readable Streams with Async Iterators</source>
          <target state="translated">非同期イテレータで可読ストリームを消費する</target>
        </trans-unit>
        <trans-unit id="2313cde4c4d594475138fe868c498b0196dee663" translate="yes" xml:space="preserve">
          <source>Context properties are not read-only by default. To specify read-only globals, context properties must be defined using &lt;code&gt;Object.defineProperty()&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、コンテキストプロパティは読み取り専用ではありません。読み取り専用グローバルを指定するには、 &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用してコンテキストプロパティを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d9f3f1e0279409b35f7d388561f45dd59523090e" translate="yes" xml:space="preserve">
          <source>Context-aware addons</source>
          <target state="translated">コンテキストを考慮したアドオン</target>
        </trans-unit>
        <trans-unit id="ad25394c09efd907bfecf00713c6f5d1dd3ed976" translate="yes" xml:space="preserve">
          <source>Continue the next loop iteration.</source>
          <target state="translated">次のループの繰り返しを続けます。</target>
        </trans-unit>
        <trans-unit id="93299bc1cf08a655446ad464b16460a92aa9cf8b" translate="yes" xml:space="preserve">
          <source>Convenience Methods</source>
          <target state="translated">便利な方法</target>
        </trans-unit>
        <trans-unit id="6b7736b5866f1089792465dadb41af34bd95c7f1" translate="yes" xml:space="preserve">
          <source>Converts the EC Diffie-Hellman public key specified by &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;curve&lt;/code&gt; to the format specified by &lt;code&gt;format&lt;/code&gt;. The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt;, &lt;code&gt;'uncompressed'&lt;/code&gt; or &lt;code&gt;'hybrid'&lt;/code&gt;. The supplied key is interpreted using the specified &lt;code&gt;inputEncoding&lt;/code&gt;, and the returned key is encoded using the specified &lt;code&gt;outputEncoding&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; および &lt;code&gt;curve&lt;/code&gt; で指定されたEC Diffie-Hellman公開鍵をformatで指定された &lt;code&gt;format&lt;/code&gt; 。 &lt;code&gt;format&lt;/code&gt; 引数指定をコードすることができ、ポイント &lt;code&gt;'compressed'&lt;/code&gt; 、 &lt;code&gt;'uncompressed'&lt;/code&gt; または &lt;code&gt;'hybrid'&lt;/code&gt; 。指定されたキーは指定された &lt;code&gt;inputEncoding&lt;/code&gt; を使用して解釈され、返されたキーは指定された &lt;code&gt;outputEncoding&lt;/code&gt; を使用してエンコードされます。</target>
        </trans-unit>
        <trans-unit id="d0346e3fd785f5d99144a1c02b9c2e857197d198" translate="yes" xml:space="preserve">
          <source>Copies data from a region of &lt;code&gt;buf&lt;/code&gt; to a region in &lt;code&gt;target&lt;/code&gt; even if the &lt;code&gt;target&lt;/code&gt; memory region overlaps with &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; メモリ領域が &lt;code&gt;buf&lt;/code&gt; とオーバーラップしている場合でも、 &lt;code&gt;buf&lt;/code&gt; の領域から &lt;code&gt;target&lt;/code&gt; 領域にデータをコピーします。</target>
        </trans-unit>
        <trans-unit id="c55f0139cfd5b9e65c5f39963edca4667e1a93a7" translate="yes" xml:space="preserve">
          <source>Copies the passed &lt;code&gt;buffer&lt;/code&gt; data onto a new &lt;code&gt;Buffer&lt;/code&gt; instance.</source>
          <target state="translated">渡された &lt;code&gt;buffer&lt;/code&gt; データを新しい &lt;code&gt;Buffer&lt;/code&gt; インスタンスにコピーします。</target>
        </trans-unit>
        <trans-unit id="3a78fa347747de6accab57af2e36f26f24b67750" translate="yes" xml:space="preserve">
          <source>Core API</source>
          <target state="translated">コアAPI</target>
        </trans-unit>
        <trans-unit id="bc6e3a410aa372c2487ec123aa51c13c61ba9355" translate="yes" xml:space="preserve">
          <source>Core Modules</source>
          <target state="translated">コアモジュール</target>
        </trans-unit>
        <trans-unit id="c53b1974c86fa9608a82f8d059769ee1122bda7d" translate="yes" xml:space="preserve">
          <source>Core modules are always preferentially loaded if their identifier is passed to &lt;code&gt;require()&lt;/code&gt;. For instance, &lt;code&gt;require('http')&lt;/code&gt; will always return the built in HTTP module, even if there is a file by that name.</source>
          <target state="translated">識別子が &lt;code&gt;require()&lt;/code&gt; に渡された場合、コアモジュールは常に優先的にロードされます。たとえば、 &lt;code&gt;require('http')&lt;/code&gt; は、その名前のファイルがある場合でも、常に組み込みのHTTPモジュールを返します。</target>
        </trans-unit>
        <trans-unit id="30058252154c7f3803e95e6a2422e4ba07598d74" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-getmodulenamespace&quot;&gt;GetModuleNamespace&lt;/a&gt; abstract operation in the ECMAScript specification.</source>
          <target state="translated">ECMAScript仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-getmodulenamespace&quot;&gt;GetModuleNamespace&lt;/a&gt;抽象操作に対応します。</target>
        </trans-unit>
        <trans-unit id="89d8020a2038620e82de4de9ad4ab548d1ac8cb7" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-moduledeclarationinstantiation&quot;&gt;Instantiate() concrete method&lt;/a&gt; field of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s in the ECMAScript specification.</source>
          <target state="translated">ECMAScript仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-moduledeclarationinstantiation&quot;&gt;Instantiate（）具象メソッド&lt;/a&gt;フィールドに対応します。</target>
        </trans-unit>
        <trans-unit id="335aeb0ce7e1295242e1a5b080497af27b11aaa3" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-moduleevaluation&quot;&gt;Evaluate() concrete method&lt;/a&gt; field of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s in the ECMAScript specification.</source>
          <target state="translated">ECMAScript仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-moduleevaluation&quot;&gt;Evaluate（）具象メソッド&lt;/a&gt;フィールドに対応します。</target>
        </trans-unit>
        <trans-unit id="658703ed3a262a18969f60248ee132196f23b4cd" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;code&gt;SSL_get_finished&lt;/code&gt; routine in OpenSSL and may be used to implement the &lt;code&gt;tls-unique&lt;/code&gt; channel binding from &lt;a href=&quot;https://tools.ietf.org/html/rfc5929&quot;&gt;RFC 5929&lt;/a&gt;.</source>
          <target state="translated">OpenSSL の &lt;code&gt;SSL_get_finished&lt;/code&gt; ルーチンに対応し、&lt;a href=&quot;https://tools.ietf.org/html/rfc5929&quot;&gt;RFC 5929の&lt;/a&gt; &lt;code&gt;tls-unique&lt;/code&gt; チャネルバインディングを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="6bd33cb10079a3c04fe16b0de64bd1b1cae43516" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;code&gt;SSL_get_peer_finished&lt;/code&gt; routine in OpenSSL and may be used to implement the &lt;code&gt;tls-unique&lt;/code&gt; channel binding from &lt;a href=&quot;https://tools.ietf.org/html/rfc5929&quot;&gt;RFC 5929&lt;/a&gt;.</source>
          <target state="translated">OpenSSL の &lt;code&gt;SSL_get_peer_finished&lt;/code&gt; ルーチンに対応し、&lt;a href=&quot;https://tools.ietf.org/html/rfc5929&quot;&gt;RFC 5929の&lt;/a&gt; &lt;code&gt;tls-unique&lt;/code&gt; チャネルバインディングを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="8619ca0519ef68f2c83155b82feff00c5c8697ad" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;code&gt;[[EvaluationError]]&lt;/code&gt; field of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s in the ECMAScript specification.</source>
          <target state="translated">ECMAScript仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;の &lt;code&gt;[[EvaluationError]]&lt;/code&gt; フィールドに対応します。</target>
        </trans-unit>
        <trans-unit id="97b96a087d8c17e6c540a8830c50f96b012edbec" translate="yes" xml:space="preserve">
          <source>Corresponds to the &lt;code&gt;[[RequestedModules]]&lt;/code&gt; field of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s in the ECMAScript specification.</source>
          <target state="translated">ECMAScript仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;の &lt;code&gt;[[RequestedModules]]&lt;/code&gt; フィールドに対応します。</target>
        </trans-unit>
        <trans-unit id="610dd1b37fc977df7dde1d4da1429edaaa5c502d" translate="yes" xml:space="preserve">
          <source>Create a new instance of the &lt;code&gt;inspector.Session&lt;/code&gt; class. The inspector session needs to be connected through &lt;a href=&quot;#inspector_session_connect&quot;&gt;&lt;code&gt;session.connect()&lt;/code&gt;&lt;/a&gt; before the messages can be dispatched to the inspector backend.</source>
          <target state="translated">&lt;code&gt;inspector.Session&lt;/code&gt; クラスの新しいインスタンスを作成します。メッセージをインスペクターバックエンドにディスパッチする前に、インスペクターセッションを&lt;a href=&quot;#inspector_session_connect&quot;&gt; &lt;code&gt;session.connect()&lt;/code&gt; で&lt;/a&gt;接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="9bcc409e40ec595c6632ed9d65254ab363ea9e00" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;AsyncIterator&lt;/code&gt; object that iterates through each line in the input stream as a string. This method allows asynchronous iteration of &lt;code&gt;readline.Interface&lt;/code&gt; objects through &lt;code&gt;for await...of&lt;/code&gt; loops.</source>
          <target state="translated">入力ストリームの各行を文字列として反復する &lt;code&gt;AsyncIterator&lt;/code&gt; オブジェクトを作成します。このメソッドを使用すると &lt;code&gt;for await...of&lt;/code&gt; ループを介して &lt;code&gt;readline.Interface&lt;/code&gt; オブジェクトを非同期で反復できます。</target>
        </trans-unit>
        <trans-unit id="49faf71491f45e8f62679a49f7c9cffd0d05f4b6" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;.stack&lt;/code&gt; property on &lt;code&gt;targetObject&lt;/code&gt;, which when accessed returns a string representing the location in the code at which &lt;code&gt;Error.captureStackTrace()&lt;/code&gt; was called.</source>
          <target state="translated">作成 &lt;code&gt;.stack&lt;/code&gt; のプロパティ &lt;code&gt;targetObject&lt;/code&gt; れるコード内の位置を表す文字列どのアクセス戻り、 &lt;code&gt;Error.captureStackTrace()&lt;/code&gt; を呼ばれました。</target>
        </trans-unit>
        <trans-unit id="861ea554e920de38cd6ca9bf8e78d7fc3fdea253" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DiffieHellman&lt;/code&gt; key exchange object and generates a prime of &lt;code&gt;primeLength&lt;/code&gt; bits using an optional specific numeric &lt;code&gt;generator&lt;/code&gt;. If &lt;code&gt;generator&lt;/code&gt; is not specified, the value &lt;code&gt;2&lt;/code&gt; is used.</source>
          <target state="translated">作成し &lt;code&gt;DiffieHellman&lt;/code&gt; 鍵交換オブジェクトの素数生成 &lt;code&gt;primeLength&lt;/code&gt; の任意の特定の数値使用ビット &lt;code&gt;generator&lt;/code&gt; 。 &lt;code&gt;generator&lt;/code&gt; が指定されていない場合、値 &lt;code&gt;2&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="94ccec7a1bed4822778508279eba1d3cdea49d1f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DiffieHellman&lt;/code&gt; key exchange object using the supplied &lt;code&gt;prime&lt;/code&gt; and an optional specific &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;prime&lt;/code&gt; とオプションの特定の &lt;code&gt;generator&lt;/code&gt; を使用して、 &lt;code&gt;DiffieHellman&lt;/code&gt; 鍵交換オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="633f7290cffe7d54d5d107ea22501818af866c84" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Histogram&lt;/code&gt; object that samples and reports the event loop delay over time. The delays will be reported in nanoseconds.</source>
          <target state="translated">時間の経過に伴うイベントループ遅延をサンプリングして報告する &lt;code&gt;Histogram&lt;/code&gt; オブジェクトを作成します。遅延はナノ秒単位で報告されます。</target>
        </trans-unit>
        <trans-unit id="84d9586a173a523d220f163d6b9034f1ebee6404" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Promise&lt;/code&gt; that is resolved when the &lt;code&gt;EventEmitter&lt;/code&gt; emits the given event or that is rejected when the &lt;code&gt;EventEmitter&lt;/code&gt; emits &lt;code&gt;'error'&lt;/code&gt;. The &lt;code&gt;Promise&lt;/code&gt; will resolve with an array of all the arguments emitted to the given event.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; が指定されたイベントを発行するときに解決される、または &lt;code&gt;EventEmitter&lt;/code&gt; が &lt;code&gt;'error'&lt;/code&gt; を発行するときに拒否される &lt;code&gt;Promise&lt;/code&gt; を作成します。 &lt;code&gt;Promise&lt;/code&gt; 指定されたイベントに放出されたすべての引数の配列を持つ解決されます。</target>
        </trans-unit>
        <trans-unit id="969be098b1da05dd2bc5a306c3c8264e3355f80f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;dgram.Socket&lt;/code&gt; object of the specified &lt;code&gt;type&lt;/code&gt;. The &lt;code&gt;type&lt;/code&gt; argument can be either &lt;code&gt;'udp4'&lt;/code&gt; or &lt;code&gt;'udp6'&lt;/code&gt;. An optional &lt;code&gt;callback&lt;/code&gt; function can be passed which is added as a listener for &lt;code&gt;'message'&lt;/code&gt; events.</source>
          <target state="translated">指定された &lt;code&gt;type&lt;/code&gt; &lt;code&gt;dgram.Socket&lt;/code&gt; オブジェクトを作成します。 &lt;code&gt;type&lt;/code&gt; 引数は、いずれかになります &lt;code&gt;'udp4'&lt;/code&gt; または &lt;code&gt;'udp6'&lt;/code&gt; 。 &lt;code&gt;'message'&lt;/code&gt; イベントのリスナーとして追加されるオプションの &lt;code&gt;callback&lt;/code&gt; 関数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="46ace698cde21ad3955f493363d8d446265cd505" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;dgram.Socket&lt;/code&gt; object. Once the socket is created, calling &lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt;&lt;code&gt;socket.bind()&lt;/code&gt;&lt;/a&gt; will instruct the socket to begin listening for datagram messages. When &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are not passed to &lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt;&lt;code&gt;socket.bind()&lt;/code&gt;&lt;/a&gt; the method will bind the socket to the &quot;all interfaces&quot; address on a random port (it does the right thing for both &lt;code&gt;udp4&lt;/code&gt; and &lt;code&gt;udp6&lt;/code&gt; sockets). The bound address and port can be retrieved using &lt;a href=&quot;#dgram_socket_address&quot;&gt;&lt;code&gt;socket.address().address&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#dgram_socket_address&quot;&gt;&lt;code&gt;socket.address().port&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;dgram.Socket&lt;/code&gt; オブジェクトを作成します。ソケットが作成されたら、&lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt; &lt;code&gt;socket.bind()&lt;/code&gt; &lt;/a&gt;を呼び出すと、ソケットにデータグラムメッセージのリスニングを開始するように指示します。 &lt;code&gt;address&lt;/code&gt; と &lt;code&gt;port&lt;/code&gt; が&lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt; &lt;code&gt;socket.bind()&lt;/code&gt; に&lt;/a&gt;渡されない場合、メソッドはソケットをランダムポートの「すべてのインターフェース」アドレスにバインドします（ &lt;code&gt;udp4&lt;/code&gt; ソケットと &lt;code&gt;udp6&lt;/code&gt; ソケットの両方で正しいことを行います）。バインドされたアドレスとポートは、&lt;a href=&quot;#dgram_socket_address&quot;&gt; &lt;code&gt;socket.address().address&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#dgram_socket_address&quot;&gt; &lt;code&gt;socket.address().port&lt;/code&gt; &lt;/a&gt;を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="d15582251fcfe3743db495b81d51ed26272aa3de" translate="yes" xml:space="preserve">
          <source>Creates a code cache that can be used with the Script constructor's &lt;code&gt;cachedData&lt;/code&gt; option. Returns a Buffer. This method may be called at any time and any number of times.</source>
          <target state="translated">スクリプトコンストラクターの &lt;code&gt;cachedData&lt;/code&gt; オプションで使用できるコードキャッシュを作成します。バッファを返します。このメソッドはいつでも、何回でも呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9cf2b8c4ea0eb4eefc28ec317ad6837af1158c25" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#tls_class_tls_server&quot;&gt;&lt;code&gt;tls.Server&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;secureConnectionListener&lt;/code&gt;, if provided, is automatically set as a listener for the &lt;a href=&quot;#tls_event_secureconnection&quot;&gt;&lt;code&gt;'secureConnection'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">新しい&lt;a href=&quot;#tls_class_tls_server&quot;&gt; &lt;code&gt;tls.Server&lt;/code&gt; を&lt;/a&gt;作成します。 &lt;code&gt;secureConnectionListener&lt;/code&gt; は、提供された場合、自動的にのリスナーとして設定されている&lt;a href=&quot;#tls_event_secureconnection&quot;&gt; &lt;code&gt;'secureConnection'&lt;/code&gt; &lt;/a&gt;イベント。</target>
        </trans-unit>
        <trans-unit id="d173b01aad9dfdc8a52f33573498da41307864c8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Buffer&lt;/code&gt; containing &lt;code&gt;string&lt;/code&gt;. The &lt;code&gt;encoding&lt;/code&gt; parameter identifies the character encoding of &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; を含む新しい &lt;code&gt;Buffer&lt;/code&gt; を作成します。 &lt;code&gt;encoding&lt;/code&gt; パラメータ識別の文字エンコーディング &lt;code&gt;string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf51154b8c41364cbbddecade887b89d2c6563a4" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Console&lt;/code&gt; with one or two writable stream instances. &lt;code&gt;stdout&lt;/code&gt; is a writable stream to print log or info output. &lt;code&gt;stderr&lt;/code&gt; is used for warning or error output. If &lt;code&gt;stderr&lt;/code&gt; is not provided, &lt;code&gt;stdout&lt;/code&gt; is used for &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">1つまたは2つの書き込み可能なストリームインスタンスで新しい &lt;code&gt;Console&lt;/code&gt; を作成します。 &lt;code&gt;stdout&lt;/code&gt; は、ログまたは情報出力を出力するための書き込み可能なストリームです。 &lt;code&gt;stderr&lt;/code&gt; は警告またはエラー出力に使用されます。場合は &lt;code&gt;stderr&lt;/code&gt; 提供されていない、 &lt;code&gt;stdout&lt;/code&gt; が使用され &lt;code&gt;stderr&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="2d4e1d962e7f5b123017efe6e420af0a8aac8274" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Deserializer&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Deserializer&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="7872b5d87fca267c6b8f4b8e93ec4b1a28842ac9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Error&lt;/code&gt; object and sets the &lt;code&gt;error.message&lt;/code&gt; property to the provided text message. If an object is passed as &lt;code&gt;message&lt;/code&gt;, the text message is generated by calling &lt;code&gt;message.toString()&lt;/code&gt;. The &lt;code&gt;error.stack&lt;/code&gt; property will represent the point in the code at which &lt;code&gt;new Error()&lt;/code&gt; was called. Stack traces are dependent on &lt;a href=&quot;https://github.com/v8/v8/wiki/Stack-Trace-API&quot;&gt;V8's stack trace API&lt;/a&gt;. Stack traces extend only to either (a) the beginning of &lt;em&gt;synchronous code execution&lt;/em&gt;, or (b) the number of frames given by the property &lt;code&gt;Error.stackTraceLimit&lt;/code&gt;, whichever is smaller.</source>
          <target state="translated">新しい &lt;code&gt;Error&lt;/code&gt; オブジェクトを作成し、 &lt;code&gt;error.message&lt;/code&gt; プロパティを指定されたテキストメッセージに設定します。オブジェクトが &lt;code&gt;message&lt;/code&gt; として渡される場合、テキストメッセージは &lt;code&gt;message.toString()&lt;/code&gt; を呼び出すことによって生成されます。 &lt;code&gt;error.stack&lt;/code&gt; のプロパティは、コード内のポイントを表すます &lt;code&gt;new Error()&lt;/code&gt; と呼ばれていました。スタックトレースは、&lt;a href=&quot;https://github.com/v8/v8/wiki/Stack-Trace-API&quot;&gt;V8のスタックトレースAPIに&lt;/a&gt;依存しています。スタックトレースは、（a）&lt;em&gt;同期コード実行の&lt;/em&gt;開始、または（b）プロパティ &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; で指定されたフレーム数のいずれか小さい方にのみ拡張されます。</target>
        </trans-unit>
        <trans-unit id="c9f35e67567b47c684eeffac3d1e66e7c87f030a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;PerformanceMark&lt;/code&gt; entry in the Performance Timeline. A &lt;code&gt;PerformanceMark&lt;/code&gt; is a subclass of &lt;code&gt;PerformanceEntry&lt;/code&gt; whose &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is always &lt;code&gt;'mark'&lt;/code&gt;, and whose &lt;code&gt;performanceEntry.duration&lt;/code&gt; is always &lt;code&gt;0&lt;/code&gt;. Performance marks are used to mark specific significant moments in the Performance Timeline.</source>
          <target state="translated">パフォーマンスタイムラインに新しい &lt;code&gt;PerformanceMark&lt;/code&gt; エントリを作成します。 A &lt;code&gt;PerformanceMark&lt;/code&gt; はのサブクラスである &lt;code&gt;PerformanceEntry&lt;/code&gt; &lt;code&gt;performanceEntry.entryType&lt;/code&gt; 常に &lt;code&gt;'mark'&lt;/code&gt; 、およびその &lt;code&gt;performanceEntry.duration&lt;/code&gt; は常に &lt;code&gt;0&lt;/code&gt; 。パフォーマンスマークは、パフォーマンスタイムラインで特定の重要な瞬間をマークするために使用されます。</target>
        </trans-unit>
        <trans-unit id="a9c508f0e96dc24226b4b314d31b9faf4350b538" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;PerformanceMeasure&lt;/code&gt; entry in the Performance Timeline. A &lt;code&gt;PerformanceMeasure&lt;/code&gt; is a subclass of &lt;code&gt;PerformanceEntry&lt;/code&gt; whose &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is always &lt;code&gt;'measure'&lt;/code&gt;, and whose &lt;code&gt;performanceEntry.duration&lt;/code&gt; measures the number of milliseconds elapsed since &lt;code&gt;startMark&lt;/code&gt; and &lt;code&gt;endMark&lt;/code&gt;.</source>
          <target state="translated">パフォーマンスタイムラインに新しい &lt;code&gt;PerformanceMeasure&lt;/code&gt; エントリを作成します。A &lt;code&gt;PerformanceMeasure&lt;/code&gt; はのサブクラスである &lt;code&gt;PerformanceEntry&lt;/code&gt; &lt;code&gt;performanceEntry.entryType&lt;/code&gt; 常に &lt;code&gt;'measure'&lt;/code&gt; 、およびその &lt;code&gt;performanceEntry.duration&lt;/code&gt; の対策ミリ秒数からの経過 &lt;code&gt;startMark&lt;/code&gt; と &lt;code&gt;endMark&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba42bd2ef1522141d74454b4c85fc78b302b41e0" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Serializer&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Serializer&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="5f3d7fd224b9e2172664c9deee0c85084b49b0b3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;StringDecoder&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;StringDecoder&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="87db8396c574fc6b711f2bac00caa7973058f54e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;URL&lt;/code&gt; object by parsing the &lt;code&gt;input&lt;/code&gt; relative to the &lt;code&gt;base&lt;/code&gt;. If &lt;code&gt;base&lt;/code&gt; is passed as a string, it will be parsed equivalent to &lt;code&gt;new URL(base)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; を基準にして &lt;code&gt;input&lt;/code&gt; 解析することにより、新しい &lt;code&gt;URL&lt;/code&gt; オブジェクトを作成します。 &lt;code&gt;base&lt;/code&gt; が文字列として渡される場合、 &lt;code&gt;new URL(base)&lt;/code&gt; と同等に解析されます。</target>
        </trans-unit>
        <trans-unit id="0c50716411a3db17d970b33b214901d027924525" translate="yes" xml:space="preserve">
          <source>Creates a new ES &lt;code&gt;Module&lt;/code&gt; object.</source>
          <target state="translated">新しいES &lt;code&gt;Module&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="4b032e823eb03edd65ef1ba7c46ebbb6f8de2a82" translate="yes" xml:space="preserve">
          <source>Creates a new TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server.</source>
          <target state="translated">新しいTCPまたは&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;サーバーを作成します。</target>
        </trans-unit>
        <trans-unit id="e776f7fa7e23615b2d8bf8c1ff1d7b5837a9c840" translate="yes" xml:space="preserve">
          <source>Creates a new secure pair object with two streams, one of which reads and writes the encrypted data and the other of which reads and writes the cleartext data. Generally, the encrypted stream is piped to/from an incoming encrypted data stream and the cleartext one is used as a replacement for the initial encrypted stream.</source>
          <target state="translated">暗号化されたデータを読み書きするストリームと、 明文データを読み書きするストリームの2つのストリームを持つ新しいセキュアペアオブジェクトを作成します。一般的に、暗号化されたストリームは暗号化されたデータストリームとの間でパイプ接続され、 明文のストリームは最初の暗号化されたストリームの代替として使用されます。</target>
        </trans-unit>
        <trans-unit id="acc52bfbed8482fc6bbd3689ddd2a9ebbfb324c3" translate="yes" xml:space="preserve">
          <source>Creates a new socket object.</source>
          <target state="translated">新しいソケットオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="2f6e7b9d4b6897b9e7c68dd1a7dc11dc7bc6d632" translate="yes" xml:space="preserve">
          <source>Creates a predefined &lt;code&gt;DiffieHellman&lt;/code&gt; key exchange object. The supported groups are: &lt;code&gt;'modp1'&lt;/code&gt;, &lt;code&gt;'modp2'&lt;/code&gt;, &lt;code&gt;'modp5'&lt;/code&gt; (defined in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2412.txt&quot;&gt;RFC 2412&lt;/a&gt;, but see &lt;a href=&quot;#crypto_support_for_weak_or_compromised_algorithms&quot;&gt;Caveats&lt;/a&gt;) and &lt;code&gt;'modp14'&lt;/code&gt;, &lt;code&gt;'modp15'&lt;/code&gt;, &lt;code&gt;'modp16'&lt;/code&gt;, &lt;code&gt;'modp17'&lt;/code&gt;, &lt;code&gt;'modp18'&lt;/code&gt; (defined in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3526.txt&quot;&gt;RFC 3526&lt;/a&gt;). The returned object mimics the interface of objects created by &lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt;&lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt;&lt;/a&gt;, but will not allow changing the keys (with &lt;a href=&quot;#crypto_diffiehellman_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;diffieHellman.setPublicKey()&lt;/code&gt;&lt;/a&gt;, for example). The advantage of using this method is that the parties do not have to generate nor exchange a group modulus beforehand, saving both processor and communication time.</source>
          <target state="translated">定義済みの &lt;code&gt;DiffieHellman&lt;/code&gt; 鍵交換オブジェクトを作成します。サポートされている基である： &lt;code&gt;'modp1'&lt;/code&gt; 、 &lt;code&gt;'modp2'&lt;/code&gt; 、 &lt;code&gt;'modp5'&lt;/code&gt; （で定義された&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2412.txt&quot;&gt;RFC 2412&lt;/a&gt;が、参照&lt;a href=&quot;#crypto_support_for_weak_or_compromised_algorithms&quot;&gt;警告を&lt;/a&gt;）および &lt;code&gt;'modp14'&lt;/code&gt; 、 &lt;code&gt;'modp15'&lt;/code&gt; 、 &lt;code&gt;'modp16'&lt;/code&gt; 、 &lt;code&gt;'modp17'&lt;/code&gt; 、 &lt;code&gt;'modp18'&lt;/code&gt; （で定義された&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3526.txt&quot;&gt;RFC 3526&lt;/a&gt;）。返されたオブジェクトは、&lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt; &lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt; &lt;/a&gt;によって作成されたオブジェクトのインターフェースを模倣していますが、キーの変更は許可していません（&lt;a href=&quot;#crypto_diffiehellman_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;diffieHellman.setPublicKey()&lt;/code&gt; を使用)&lt;/a&gt;、 例えば）。この方法を使用する利点は、当事者が事前にグループモジュラスを生成または交換する必要がないため、プロセッサと通信時間の両方を節約できることです。</target>
        </trans-unit>
        <trans-unit id="2ae01e34f86babf6cfc9d4db217d4b26f757b780" translate="yes" xml:space="preserve">
          <source>Creates a symbolic link then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">シンボリックリンクを作成し、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="8dbfeb5ffe7100c76afddc5e2c44f9500b4a53f4" translate="yes" xml:space="preserve">
          <source>Creates a unique temporary directory and resolves the &lt;code&gt;Promise&lt;/code&gt; with the created folder path. A unique directory name is generated by appending six random characters to the end of the provided &lt;code&gt;prefix&lt;/code&gt;. Due to platform inconsistencies, avoid trailing &lt;code&gt;X&lt;/code&gt; characters in &lt;code&gt;prefix&lt;/code&gt;. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing &lt;code&gt;X&lt;/code&gt; characters in &lt;code&gt;prefix&lt;/code&gt; with random characters.</source>
          <target state="translated">一意の一時ディレクトリを作成し、作成したフォルダーパスで &lt;code&gt;Promise&lt;/code&gt; を解決します。指定された &lt;code&gt;prefix&lt;/code&gt; 最後にランダムな6文字を追加することにより、一意のディレクトリ名が生成されます。プラットフォームに不整合があるため、 &lt;code&gt;prefix&lt;/code&gt; の末尾に &lt;code&gt;X&lt;/code&gt; 文字を付けないでください。一部のプラットフォーム、特にBSDは、6つを超えるランダムな文字を返し、 &lt;code&gt;prefix&lt;/code&gt; 末尾の &lt;code&gt;X&lt;/code&gt; 文字をランダムな文字に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="f7800e1b0e924145a98553afbc8fdeebd911cc03" translate="yes" xml:space="preserve">
          <source>Creates a unique temporary directory.</source>
          <target state="translated">固有の一時ディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="aefff0ae1012c84ba50832c935ee6a4688705cf8" translate="yes" xml:space="preserve">
          <source>Creates an Elliptic Curve Diffie-Hellman (&lt;code&gt;ECDH&lt;/code&gt;) key exchange object using a predefined curve specified by the &lt;code&gt;curveName&lt;/code&gt; string. Use &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt;&lt;code&gt;crypto.getCurves()&lt;/code&gt;&lt;/a&gt; to obtain a list of available curve names. On recent OpenSSL releases, &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; will also display the name and description of each available elliptic curve.</source>
          <target state="translated">&lt;code&gt;curveName&lt;/code&gt; 文字列で指定された定義済みの曲線を使用して、楕円曲線Diffie-Hellman（ &lt;code&gt;ECDH&lt;/code&gt; ）鍵交換オブジェクトを作成します。使用可能な曲線名のリストを取得するには、&lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt; &lt;code&gt;crypto.getCurves()&lt;/code&gt; &lt;/a&gt;を使用します。最近のOpenSSLリリースでは、 &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; は、使用可能な各楕円曲線の名前と説明も表示します。</target>
        </trans-unit>
        <trans-unit id="3ff0f91d2c8c792bd5d5ecdc7c9fce7305188495" translate="yes" xml:space="preserve">
          <source>Creates an new &lt;code&gt;TextDecoder&lt;/code&gt; instance. The &lt;code&gt;encoding&lt;/code&gt; may specify one of the supported encodings or an alias.</source>
          <target state="translated">新しい &lt;code&gt;TextDecoder&lt;/code&gt; インスタンスを作成します。 &lt;code&gt;encoding&lt;/code&gt; サポートされているエンコーディングまたはエイリアスのいずれかを指定することができます。</target>
        </trans-unit>
        <trans-unit id="4f8dd7aadaa774fd3a0ee0850e1bf1a2d26e9d0b" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Cipher&lt;/code&gt; object that uses the given &lt;code&gt;algorithm&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; と &lt;code&gt;password&lt;/code&gt; を使用する &lt;code&gt;Cipher&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="97d96bcb151743f1ae0f093f6fb0b4c794492163" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Cipher&lt;/code&gt; object, with the given &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt; and initialization vector (&lt;code&gt;iv&lt;/code&gt;).</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、初期化ベクトル（ &lt;code&gt;iv&lt;/code&gt; ）で &lt;code&gt;Cipher&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="86bfab5bc0d4753aa7e45ac9e9b549b256f27690" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Decipher&lt;/code&gt; object that uses the given &lt;code&gt;algorithm&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; (key).</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; と &lt;code&gt;password&lt;/code&gt; （キー）を使用する &lt;code&gt;Decipher&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="05daf002c0718e44663e4dfbf83d75c2601dca76" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Decipher&lt;/code&gt; object that uses the given &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt; and initialization vector (&lt;code&gt;iv&lt;/code&gt;).</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、および初期化ベクトル（ &lt;code&gt;iv&lt;/code&gt; ）を使用する &lt;code&gt;Decipher&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="dfbe3921bacab7503435332811688b212f7c21c0" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Hash&lt;/code&gt; object that can be used to generate hash digests using the given &lt;code&gt;algorithm&lt;/code&gt;. Optional &lt;code&gt;options&lt;/code&gt; argument controls stream behavior. For XOF hash functions such as &lt;code&gt;'shake256'&lt;/code&gt;, the &lt;code&gt;outputLength&lt;/code&gt; option can be used to specify the desired output length in bytes.</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; を使用してハッシュダイジェストを生成するために使用できる &lt;code&gt;Hash&lt;/code&gt; オブジェクトを作成して返します。オプションの &lt;code&gt;options&lt;/code&gt; 引数は、ストリームの動作を制御します。 &lt;code&gt;'shake256'&lt;/code&gt; などのXOFハッシュ関数の場合、 &lt;code&gt;outputLength&lt;/code&gt; オプションを使用して、必要な出力長をバイト単位で指定できます。</target>
        </trans-unit>
        <trans-unit id="0f23e8a3f43c21c2627b1021a92c09d404368794" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Sign&lt;/code&gt; object that uses the given &lt;code&gt;algorithm&lt;/code&gt;. Use &lt;a href=&quot;#crypto_crypto_gethashes&quot;&gt;&lt;code&gt;crypto.getHashes()&lt;/code&gt;&lt;/a&gt; to obtain the names of the available digest algorithms. Optional &lt;code&gt;options&lt;/code&gt; argument controls the &lt;code&gt;stream.Writable&lt;/code&gt; behavior.</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; を使用する &lt;code&gt;Sign&lt;/code&gt; オブジェクトを作成して返します。使用可能なダイジェストアルゴリズムの名前を取得するには、&lt;a href=&quot;#crypto_crypto_gethashes&quot;&gt; &lt;code&gt;crypto.getHashes()&lt;/code&gt; &lt;/a&gt;を使用します。オプションの &lt;code&gt;options&lt;/code&gt; 引数は、 &lt;code&gt;stream.Writable&lt;/code&gt; の動作を制御します。</target>
        </trans-unit>
        <trans-unit id="cd8bf2612bd86aa139c5b56cd0caf9506739a20c" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Tracing&lt;/code&gt; object for the given set of &lt;code&gt;categories&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;categories&lt;/code&gt; セットの &lt;code&gt;Tracing&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="db92d150d8909efcd50b9a4bd6b14b435b57c1dd" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;code&gt;Verify&lt;/code&gt; object that uses the given algorithm. Use &lt;a href=&quot;#crypto_crypto_gethashes&quot;&gt;&lt;code&gt;crypto.getHashes()&lt;/code&gt;&lt;/a&gt; to obtain an array of names of the available signing algorithms. Optional &lt;code&gt;options&lt;/code&gt; argument controls the &lt;code&gt;stream.Writable&lt;/code&gt; behavior.</source>
          <target state="translated">指定されたアルゴリズムを使用する &lt;code&gt;Verify&lt;/code&gt; オブジェクトを作成して返します。使用可能な署名アルゴリズムの名前の配列を取得するには、&lt;a href=&quot;#crypto_crypto_gethashes&quot;&gt; &lt;code&gt;crypto.getHashes()&lt;/code&gt; &lt;/a&gt;を使用します。オプションの &lt;code&gt;options&lt;/code&gt; 引数は、 &lt;code&gt;stream.Writable&lt;/code&gt; の動作を制御します。</target>
        </trans-unit>
        <trans-unit id="db710d2a72118c7d92a15e1433250866576f2fd1" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_brotlicompress&quot;&gt;&lt;code&gt;BrotliCompress&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_brotlicompress&quot;&gt; &lt;code&gt;BrotliCompress&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="910bb78abfc9a859998a74678c629277026f290c" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_brotlidecompress&quot;&gt;&lt;code&gt;BrotliDecompress&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_brotlidecompress&quot;&gt; &lt;code&gt;BrotliDecompress&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="9c7288d6bb60992c5befb81b2d42446effa47b79" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_deflate&quot;&gt;&lt;code&gt;Deflate&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_deflate&quot;&gt; &lt;code&gt;Deflate&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="41a2248d33fcee16a941bdea0fc7e6525918416b" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_deflateraw&quot;&gt;&lt;code&gt;DeflateRaw&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_deflateraw&quot;&gt; &lt;code&gt;DeflateRaw&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="0dbf195d9c9fbc21046c761cbdadb545f1837e17" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_gunzip&quot;&gt;&lt;code&gt;Gunzip&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_gunzip&quot;&gt; &lt;code&gt;Gunzip&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="95f22b4640ff2203f5e47db51892eb380fccfe3d" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_gzip&quot;&gt;&lt;code&gt;Gzip&lt;/code&gt;&lt;/a&gt; object. See &lt;a href=&quot;#zlib_zlib&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_gzip&quot;&gt; &lt;code&gt;Gzip&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。&lt;a href=&quot;#zlib_zlib&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1b2da6e5b341be788ca6de1b30803c698d0b7575" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_inflate&quot;&gt;&lt;code&gt;Inflate&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_inflate&quot;&gt; &lt;code&gt;Inflate&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="e2daa256748e8e5fe70fda4713de295ebbf30735" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_inflateraw&quot;&gt;&lt;code&gt;InflateRaw&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_inflateraw&quot;&gt; &lt;code&gt;InflateRaw&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="43b4d69666843c880b0a8ce0fb473fd3f4499f9c" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#zlib_class_zlib_unzip&quot;&gt;&lt;code&gt;Unzip&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#zlib_class_zlib_unzip&quot;&gt; &lt;code&gt;Unzip&lt;/code&gt; &lt;/a&gt;オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="7cea4a3ecf372d6ec7165bb99279d250e5b23609" translate="yes" xml:space="preserve">
          <source>Creates and returns a new key object containing a private key. If &lt;code&gt;key&lt;/code&gt; is a string or &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt; is assumed to be &lt;code&gt;'pem'&lt;/code&gt;; otherwise, &lt;code&gt;key&lt;/code&gt; must be an object with the properties described above.</source>
          <target state="translated">秘密鍵を含む新しい鍵オブジェクトを作成して返します。場合 &lt;code&gt;key&lt;/code&gt; 文字列またはある &lt;code&gt;Buffer&lt;/code&gt; 、 &lt;code&gt;format&lt;/code&gt; であると仮定される &lt;code&gt;'pem'&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;key&lt;/code&gt; は上記のプロパティを持つオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="c804ec74ed5f02d037070d65a57297f0eea24d7c" translate="yes" xml:space="preserve">
          <source>Creates and returns a new key object containing a public key. If &lt;code&gt;key&lt;/code&gt; is a string or &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt; is assumed to be &lt;code&gt;'pem'&lt;/code&gt;; if &lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;KeyObject&lt;/code&gt; with type &lt;code&gt;'private'&lt;/code&gt;, the public key is derived from the given private key; otherwise, &lt;code&gt;key&lt;/code&gt; must be an object with the properties described above.</source>
          <target state="translated">公開鍵を含む新しい鍵オブジェクトを作成して返します。場合 &lt;code&gt;key&lt;/code&gt; 文字列またはある &lt;code&gt;Buffer&lt;/code&gt; 、 &lt;code&gt;format&lt;/code&gt; であると仮定される &lt;code&gt;'pem'&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; がタイプ &lt;code&gt;'private'&lt;/code&gt; の &lt;code&gt;KeyObject&lt;/code&gt; の場合、公開鍵は指定された秘密鍵から派生します。それ以外の場合、 &lt;code&gt;key&lt;/code&gt; は上記のプロパティを持つオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="5437727c2dcdf3fb4e73b69e059be356a7c50e80" translate="yes" xml:space="preserve">
          <source>Creates and returns a new key object containing a secret key for symmetric encryption or &lt;code&gt;Hmac&lt;/code&gt;.</source>
          <target state="translated">対称暗号化または &lt;code&gt;Hmac&lt;/code&gt; の秘密鍵を含む新しい鍵オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="046fe71abcb910163bfbfce07bf64001443712d8" translate="yes" xml:space="preserve">
          <source>Creates and returns an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterator&lt;/a&gt; for &lt;code&gt;buf&lt;/code&gt; values (bytes). This function is called automatically when a &lt;code&gt;Buffer&lt;/code&gt; is used in a &lt;code&gt;for..of&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; 値（バイト）の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;反復子&lt;/a&gt;を作成して返します。この関数は、 &lt;code&gt;for..of&lt;/code&gt; ステートメントで &lt;code&gt;Buffer&lt;/code&gt; が使用されると自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3d62268c7950db94b9a92f74779207323cdc52e9" translate="yes" xml:space="preserve">
          <source>Creates and returns an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterator&lt;/a&gt; of &lt;code&gt;[index, byte]&lt;/code&gt; pairs from the contents of &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; の内容から &lt;code&gt;[index, byte]&lt;/code&gt; ペアの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;イテレータ&lt;/a&gt;を作成して返します。</target>
        </trans-unit>
        <trans-unit id="4c8f73eabddcfa4986a12c810155d3dac99e6ef8" translate="yes" xml:space="preserve">
          <source>Creates and returns an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterator&lt;/a&gt; of &lt;code&gt;buf&lt;/code&gt; keys (indices).</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; キー（インデックス）の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;反復子&lt;/a&gt;を作成して返します。</target>
        </trans-unit>
        <trans-unit id="f696e266ec1284b435f285957d301e9a5ca61ca1" translate="yes" xml:space="preserve">
          <source>Creates and returns an &lt;code&gt;Hmac&lt;/code&gt; object that uses the given &lt;code&gt;algorithm&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt;. Optional &lt;code&gt;options&lt;/code&gt; argument controls stream behavior.</source>
          <target state="translated">指定された &lt;code&gt;algorithm&lt;/code&gt; と &lt;code&gt;key&lt;/code&gt; を使用する &lt;code&gt;Hmac&lt;/code&gt; オブジェクトを作成して返します。オプションの &lt;code&gt;options&lt;/code&gt; 引数は、ストリームの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="f41c5af14aa6a079567de94c5e39061124b3400f" translate="yes" xml:space="preserve">
          <source>Creating &lt;code&gt;Worker&lt;/code&gt; instances inside of other &lt;code&gt;Worker&lt;/code&gt;s is possible.</source>
          <target state="translated">他の &lt;code&gt;Worker&lt;/code&gt; 内に &lt;code&gt;Worker&lt;/code&gt; インスタンスを作成することが可能です。</target>
        </trans-unit>
        <trans-unit id="4b302ceb28568307311ff1b214724fe907d6ece1" translate="yes" xml:space="preserve">
          <source>Creating Readable Streams with Async Generators</source>
          <target state="translated">非同期生成器を使用した可読ストリームの作成</target>
        </trans-unit>
        <trans-unit id="5bb4d1497f2be8242e2bd704d3afed44f8d9b22c" translate="yes" xml:space="preserve">
          <source>Creating a new &lt;code&gt;vm.Script&lt;/code&gt; object compiles &lt;code&gt;code&lt;/code&gt; but does not run it. The compiled &lt;code&gt;vm.Script&lt;/code&gt; can be run later multiple times. The &lt;code&gt;code&lt;/code&gt; is not bound to any global object; rather, it is bound before each run, just for that run.</source>
          <target state="translated">新しい &lt;code&gt;vm.Script&lt;/code&gt; オブジェクトを作成すると、 &lt;code&gt;code&lt;/code&gt; はコンパイルされますが、実行されません。コンパイルされた &lt;code&gt;vm.Script&lt;/code&gt; は後で複数回実行できます。 &lt;code&gt;code&lt;/code&gt; 任意のグローバルオブジェクトにバインドされていません。むしろ、それはその実行のために、各実行の前にバインドされます。</target>
        </trans-unit>
        <trans-unit id="d4a1fc8d2739887fb7436a40a98232e2d08acef8" translate="yes" xml:space="preserve">
          <source>Creating a new resolver uses the default server settings. Setting the servers used for a resolver using &lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt;&lt;code&gt;resolver.setServers()&lt;/code&gt;&lt;/a&gt; does not affect other resolvers:</source>
          <target state="translated">新しいリゾルバーを作成すると、デフォルトのサーバー設定が使用されます。&lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt; &lt;code&gt;resolver.setServers()&lt;/code&gt; &lt;/a&gt;を使用してリゾルバーに使用されるサーバーを設定しても、他のリゾルバーには影響しません。</target>
        </trans-unit>
        <trans-unit id="c9898857154be7c693dd6c4e5c9e30b390179899" translate="yes" xml:space="preserve">
          <source>Creating a new resolver uses the default server settings. Setting the servers used for a resolver using &lt;a href=&quot;#dns_dnspromises_setservers_servers&quot;&gt;&lt;code&gt;resolver.setServers()&lt;/code&gt;&lt;/a&gt; does not affect other resolvers:</source>
          <target state="translated">新しいリゾルバーを作成すると、デフォルトのサーバー設定が使用されます。&lt;a href=&quot;#dns_dnspromises_setservers_servers&quot;&gt; &lt;code&gt;resolver.setServers()&lt;/code&gt; &lt;/a&gt;を使用してリゾルバーに使用されるサーバーを設定しても、他のリゾルバーには影響しません。</target>
        </trans-unit>
        <trans-unit id="859af298e2258f383cb18d630c5f7ad1a78e291c" translate="yes" xml:space="preserve">
          <source>Creating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below:</source>
          <target state="translated">OpenSSL コマンドライン・インターフェースを使用して自己署名証明書を作成する方法を以下の例で説明します。</target>
        </trans-unit>
        <trans-unit id="281ff6a3059c1f6ed0a254ee0efd442720f6b82b" translate="yes" xml:space="preserve">
          <source>Creating and maintaining an addon that benefits from the ABI stability provided by N-API carries with it certain &lt;a href=&quot;n-api#n_api_implications_of_abi_stability&quot;&gt;implementation considerations&lt;/a&gt;.</source>
          <target state="translated">N-APIによって提供されるABIの安定性の恩恵を受けるアドオンの作成と維持には、特定の&lt;a href=&quot;n-api#n_api_implications_of_abi_stability&quot;&gt;実装に関する考慮事項&lt;/a&gt;が伴います。</target>
        </trans-unit>
        <trans-unit id="e13e0554f557ba882751e261b5a60777b337bea6" translate="yes" xml:space="preserve">
          <source>Creation</source>
          <target state="translated">Creation</target>
        </trans-unit>
        <trans-unit id="e158a0e5361840fbb27d9dee0315ebf553283bc3" translate="yes" xml:space="preserve">
          <source>Creation of a &lt;a href=&quot;zlib&quot;&gt;&lt;code&gt;zlib&lt;/code&gt;&lt;/a&gt; object failed due to incorrect configuration.</source>
          <target state="translated">構成が正しくないため、&lt;a href=&quot;zlib&quot;&gt; &lt;code&gt;zlib&lt;/code&gt; &lt;/a&gt;オブジェクトの作成に失敗しました。</target>
        </trans-unit>
        <trans-unit id="e849494484ed2e3c1a93babc3e347d2e98ac8604" translate="yes" xml:space="preserve">
          <source>Crypto</source>
          <target state="translated">Crypto</target>
        </trans-unit>
        <trans-unit id="ad966676447bf067d6159b58c8d9636c78cf1a40" translate="yes" xml:space="preserve">
          <source>Crypto Constants</source>
          <target state="translated">暗号定数</target>
        </trans-unit>
        <trans-unit id="9654ee1c347773162335e16a3dc47973dae4c65c" translate="yes" xml:space="preserve">
          <source>CryptoStream</source>
          <target state="translated">CryptoStream</target>
        </trans-unit>
        <trans-unit id="15c665816aa82707fbf80cbec61ecd394e060366" translate="yes" xml:space="preserve">
          <source>Currently only the &amp;ldquo;default export&amp;rdquo; is supported for CommonJS files or packages:</source>
          <target state="translated">現在、CommonJSファイルまたはパッケージでは「デフォルトのエクスポート」のみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="37c61c4cb455a903ad09bf2181f46777058288c6" translate="yes" xml:space="preserve">
          <source>Currently possible values are:</source>
          <target state="translated">現在可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="3580625f03297579863311a1444aaed2a0cd29c6" translate="yes" xml:space="preserve">
          <source>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note the character &quot;E&quot; appended to the traditional abbreviations):</source>
          <target state="translated">現在、完全な前方秘匿を実現するためには、2つの方法が一般的に使用されています(従来の略語に「E」という文字が付加されていることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="74c4f4eb27002360755a576ca8fb848155143a5a" translate="yes" xml:space="preserve">
          <source>Currently, &lt;code&gt;for await...of&lt;/code&gt; loop can be a bit slower. If &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; flow and speed are both essential, a mixed approach can be applied:</source>
          <target state="translated">現在、 &lt;code&gt;for await...of&lt;/code&gt; ループは少し遅い場合があります。場合 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 流れと速度の両方が必須である、混合アプローチを適用することができます。</target>
        </trans-unit>
        <trans-unit id="328afef5c7ee2861dc1344ae4feffaac29949ef9" translate="yes" xml:space="preserve">
          <source>Custom &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; implementations &lt;em&gt;may&lt;/em&gt; implement the &lt;code&gt;transform._flush()&lt;/code&gt; method. This will be called when there is no more written data to be consumed, but before the &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event is emitted signaling the end of the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">カスタム&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;実装で&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;transform._flush()&lt;/code&gt; メソッドを実装&lt;em&gt;でき&lt;/em&gt;ます。これは、消費される書き込みデータがなくなったときに呼び出されますが、&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;イベントが発行されてから&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;ストリームの終了を通知する前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3e6a583187c72696117a6ebb5c2d5f872c9d5f8b" translate="yes" xml:space="preserve">
          <source>Custom &lt;code&gt;Duplex&lt;/code&gt; streams &lt;em&gt;must&lt;/em&gt; call the &lt;code&gt;new stream.Duplex([options])&lt;/code&gt; constructor and implement &lt;em&gt;both&lt;/em&gt; the &lt;code&gt;readable._read()&lt;/code&gt; and &lt;code&gt;writable._write()&lt;/code&gt; methods.</source>
          <target state="translated">カスタム &lt;code&gt;Duplex&lt;/code&gt; ストリーム&lt;em&gt;なければなりません&lt;/em&gt;呼び出す &lt;code&gt;new stream.Duplex([options])&lt;/code&gt; コンストラクタを実装し、&lt;em&gt;両方&lt;/em&gt; &lt;code&gt;readable._read()&lt;/code&gt; と &lt;code&gt;writable._write()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="d1c5efe40f367d812fccf5c2f294af0f1f1a02fd" translate="yes" xml:space="preserve">
          <source>Custom &lt;code&gt;Readable&lt;/code&gt; streams &lt;em&gt;must&lt;/em&gt; call the &lt;code&gt;new stream.Readable([options])&lt;/code&gt; constructor and implement the &lt;code&gt;readable._read()&lt;/code&gt; method.</source>
          <target state="translated">カスタムの &lt;code&gt;Readable&lt;/code&gt; ストリーム&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;new stream.Readable([options])&lt;/code&gt; コンストラクターを呼び出して、leaible._read &lt;code&gt;readable._read()&lt;/code&gt; メソッドを実装する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8651edb1971cccfdd90f17fdad43e9030a954aa2" translate="yes" xml:space="preserve">
          <source>Custom &lt;code&gt;Writable&lt;/code&gt; streams &lt;em&gt;must&lt;/em&gt; call the &lt;code&gt;new stream.Writable([options])&lt;/code&gt; constructor and implement the &lt;code&gt;writable._write()&lt;/code&gt; method. The &lt;code&gt;writable._writev()&lt;/code&gt; method &lt;em&gt;may&lt;/em&gt; also be implemented.</source>
          <target state="translated">カスタム &lt;code&gt;Writable&lt;/code&gt; ストリーム&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;new stream.Writable([options])&lt;/code&gt; コンストラクターを呼び出して、 &lt;code&gt;writable._write()&lt;/code&gt; メソッドを実装する&lt;em&gt;必要があり&lt;/em&gt;ます。 &lt;code&gt;writable._writev()&lt;/code&gt; メソッドが&lt;em&gt;できる&lt;/em&gt;にも実現すること。</target>
        </trans-unit>
        <trans-unit id="9e60d8ad094ec27952577a405e93a261987d1313" translate="yes" xml:space="preserve">
          <source>Custom &lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt; functions typically return a string but may return a value of any type that will be formatted accordingly by &lt;code&gt;util.inspect()&lt;/code&gt;.</source>
          <target state="translated">カスタム &lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt; 関数は通常、文字列を返しますが、 &lt;code&gt;util.inspect()&lt;/code&gt; によってフォーマットされる任意のタイプの値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="384a7e4db30f89fc72c3c090991519ba0980fa09" translate="yes" xml:space="preserve">
          <source>Custom Asynchronous Operations</source>
          <target state="translated">カスタム非同期操作</target>
        </trans-unit>
        <trans-unit id="c2d3af7ed1269787b3f905f1ebb743a5369bb1bd" translate="yes" xml:space="preserve">
          <source>Custom Evaluation Functions</source>
          <target state="translated">カスタム評価機能</target>
        </trans-unit>
        <trans-unit id="6445c8568aa7b6058d96f0f5d2e8851cd208e442" translate="yes" xml:space="preserve">
          <source>Custom dictionaries are now supported by &lt;code&gt;InflateRaw&lt;/code&gt;.</source>
          <target state="translated">カスタム辞書が &lt;code&gt;InflateRaw&lt;/code&gt; でサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="108963fbc6ff9a4bbd95e23e408e53066d58ec0d" translate="yes" xml:space="preserve">
          <source>Custom error validation:</source>
          <target state="translated">カスタムエラーの検証。</target>
        </trans-unit>
        <trans-unit id="80eb443f3ab134e25aea7fc6ba84cf767387aa29" translate="yes" xml:space="preserve">
          <source>Custom inspection functions can now return &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">カスタム検査機能は現在、返すことができ &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32e5526a656dd195eb28b226185900d2a27b55d4" translate="yes" xml:space="preserve">
          <source>Custom inspection functions on Objects</source>
          <target state="translated">オブジェクトのカスタム検査機能</target>
        </trans-unit>
        <trans-unit id="c5b3c107bf9cdad2c6a30640529d42a81e56b173" translate="yes" xml:space="preserve">
          <source>Custom promisified functions</source>
          <target state="translated">カスタムプロミス化された機能</target>
        </trans-unit>
        <trans-unit id="71bef58a330c9b2a591a74330fc89e9ad572480a" translate="yes" xml:space="preserve">
          <source>Custom validation object/error instance:</source>
          <target state="translated">カスタム検証オブジェクト/エラーインスタンス。</target>
        </trans-unit>
        <trans-unit id="b43b849f9ae704f1648e93a5d460cfed34c61d47" translate="yes" xml:space="preserve">
          <source>Customizing &lt;code&gt;util.inspect&lt;/code&gt; colors</source>
          <target state="translated">&lt;code&gt;util.inspect&lt;/code&gt; 色のカスタマイズ</target>
        </trans-unit>
        <trans-unit id="0edb34c3d8f095735c75f3f6eebfec33a07f4130" translate="yes" xml:space="preserve">
          <source>Customizing ESM specifier resolution algorithm</source>
          <target state="translated">ESM指定子の解決アルゴリズムのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="1d3eb47b58d51936ae62f16b19a1268d6ba6fa3a" translate="yes" xml:space="preserve">
          <source>Customizing REPL Output</source>
          <target state="translated">REPL出力のカスタマイズ</target>
        </trans-unit>
        <trans-unit id="97f064aff5a5a2219a6dc94f9eacd00f29d6f9fe" translate="yes" xml:space="preserve">
          <source>Cycles</source>
          <target state="translated">Cycles</target>
        </trans-unit>
        <trans-unit id="181260347610d38bccbe216528a040a22e0c31a6" translate="yes" xml:space="preserve">
          <source>DEP0001: http.OutgoingMessage.prototype.flush</source>
          <target state="translated">DEP0001:http.OutgoingMessage.prototype.flush</target>
        </trans-unit>
        <trans-unit id="db811586843d3ab823fb0690d86a246f076af9ee" translate="yes" xml:space="preserve">
          <source>DEP0002: require('_linklist')</source>
          <target state="translated">DEP0002:require('_linklist')</target>
        </trans-unit>
        <trans-unit id="d7d2826b43fc8cd5bbf68f66cdbb3432ad0d0261" translate="yes" xml:space="preserve">
          <source>DEP0003: _writableState.buffer</source>
          <target state="translated">DEP0003.書き換え可能な状態のバッファ</target>
        </trans-unit>
        <trans-unit id="175b6de37a20b6e579c256ea9a7172580a2a7b14" translate="yes" xml:space="preserve">
          <source>DEP0004: CryptoStream.prototype.readyState</source>
          <target state="translated">DEP0004.CryptoStream.prototype.readyState</target>
        </trans-unit>
        <trans-unit id="38a42e1eb4e00bd9d784859f28cac734719cb47f" translate="yes" xml:space="preserve">
          <source>DEP0005: Buffer() constructor</source>
          <target state="translated">DEP0005.Buffer()コンストラクタ</target>
        </trans-unit>
        <trans-unit id="9f69d8434dd6043ca4f9863da425c71d4f8b4a58" translate="yes" xml:space="preserve">
          <source>DEP0006: child_process options.customFds</source>
          <target state="translated">DEP0006:child_process options.customFds</target>
        </trans-unit>
        <trans-unit id="2c7687356708e53bb03ebdb309d787fa148273a9" translate="yes" xml:space="preserve">
          <source>DEP0007: Replace cluster worker.suicide with worker.exitedAfterDisconnect</source>
          <target state="translated">DEP0007。クラスタワーカーのワーカー.suicideをワーカー.exitedAfterDisconnectで置き換える</target>
        </trans-unit>
        <trans-unit id="c5a11f6b7afe6e1641de65cb5d50f19210aada17" translate="yes" xml:space="preserve">
          <source>DEP0008: require('constants')</source>
          <target state="translated">DEP0008:require('定数')</target>
        </trans-unit>
        <trans-unit id="87d0ac5b822174e2be70cbec3abac8e152f563a2" translate="yes" xml:space="preserve">
          <source>DEP0009: crypto.pbkdf2 without digest</source>
          <target state="translated">DEP0009:ダイジェストなしの crypto.pbkdf2</target>
        </trans-unit>
        <trans-unit id="1c497a679c79fc4c69292018d43e4559b0ac2413" translate="yes" xml:space="preserve">
          <source>DEP0010: crypto.createCredentials</source>
          <target state="translated">DEP0010:crypto.createCredentials</target>
        </trans-unit>
        <trans-unit id="ae10ac0b8fc4a6d8c98e6a51d9fb8e44ab34b1df" translate="yes" xml:space="preserve">
          <source>DEP0011: crypto.Credentials</source>
          <target state="translated">DEP0011:crypto.Credentials</target>
        </trans-unit>
        <trans-unit id="d3a71ce205b48babe6c90e7f907d58fbd17dfd6a" translate="yes" xml:space="preserve">
          <source>DEP0012: Domain.dispose</source>
          <target state="translated">DEP0012:Domain.dispose</target>
        </trans-unit>
        <trans-unit id="a26ad7ed77d1e1fec63c5eb1e75c6d74a5959fbc" translate="yes" xml:space="preserve">
          <source>DEP0013: fs asynchronous function without callback</source>
          <target state="translated">DEP0013:コールバックのない fs 非同期関数</target>
        </trans-unit>
        <trans-unit id="47e7868cbbc035988386a3affdfbc92a5e6a78e9" translate="yes" xml:space="preserve">
          <source>DEP0014: fs.read legacy String interface</source>
          <target state="translated">DEP0014:fs.read レガシー文字列インタフェース</target>
        </trans-unit>
        <trans-unit id="4fa3397e75e98f30ebbb208af1b61ee67e5be3f4" translate="yes" xml:space="preserve">
          <source>DEP0015: fs.readSync legacy String interface</source>
          <target state="translated">DEP0015:レガシー文字列インタフェース fs.readSync</target>
        </trans-unit>
        <trans-unit id="51ca7c26404986d5b3451435367f963386c17668" translate="yes" xml:space="preserve">
          <source>DEP0016: GLOBAL/root</source>
          <target state="translated">DEP0016。グローバル/ルート</target>
        </trans-unit>
        <trans-unit id="ee0a5dc8ef9ad615ea6d8087c887810ccc5e5435" translate="yes" xml:space="preserve">
          <source>DEP0017: Intl.v8BreakIterator</source>
          <target state="translated">DEP0017。Intl.v8BreakIterator</target>
        </trans-unit>
        <trans-unit id="07671985a361d615ab78402ad3a4a1944f441fe8" translate="yes" xml:space="preserve">
          <source>DEP0018: Unhandled promise rejections</source>
          <target state="translated">DEP0018.手つかずの約束拒否</target>
        </trans-unit>
        <trans-unit id="1c48ca9221b1390ae100d21485dd5efd2b1e0f06" translate="yes" xml:space="preserve">
          <source>DEP0019: require('.') resolved outside directory</source>
          <target state="translated">DEP0019:require('.')がディレクトリ外で解決されました。</target>
        </trans-unit>
        <trans-unit id="9e913497bba91765d8a33ccb377fe4eb998bb896" translate="yes" xml:space="preserve">
          <source>DEP0020: Server.connections</source>
          <target state="translated">DEP0020:Server.con connections</target>
        </trans-unit>
        <trans-unit id="52ab1ad67f60ec89d2f4020a498ae3814e18ccc5" translate="yes" xml:space="preserve">
          <source>DEP0021: Server.listenFD</source>
          <target state="translated">DEP0021.Server.listenFD</target>
        </trans-unit>
        <trans-unit id="228ac6129e463511657ea20810b2ecd28a412d3e" translate="yes" xml:space="preserve">
          <source>DEP0022: os.tmpDir()</source>
          <target state="translated">DEP0022:os.tmpDir()</target>
        </trans-unit>
        <trans-unit id="ceb47e792f73636d4d5902394990e63db24ef503" translate="yes" xml:space="preserve">
          <source>DEP0023: os.getNetworkInterfaces()</source>
          <target state="translated">DEP0023:os.getNetworkInterfaces()</target>
        </trans-unit>
        <trans-unit id="9d8b35d0e5c5dbef90247b7fd50f1b31faf5cf93" translate="yes" xml:space="preserve">
          <source>DEP0024: REPLServer.prototype.convertToContext()</source>
          <target state="translated">DEP0024。REPLServer.prototype.convertToContext()</target>
        </trans-unit>
        <trans-unit id="845f81194a693dd601035277ae71effef155ac15" translate="yes" xml:space="preserve">
          <source>DEP0025: require('sys')</source>
          <target state="translated">DEP0025:require('sys')</target>
        </trans-unit>
        <trans-unit id="1e0b2fbc6d3ea611dd21abe2cec67e7b80926869" translate="yes" xml:space="preserve">
          <source>DEP0026: util.print()</source>
          <target state="translated">DEP0026:util.print()</target>
        </trans-unit>
        <trans-unit id="adab1d15a03ddb636e120706d886e8f5a4d35e26" translate="yes" xml:space="preserve">
          <source>DEP0027: util.puts()</source>
          <target state="translated">DEP0027:util.puts()</target>
        </trans-unit>
        <trans-unit id="09a1f60306e02272b7980ea5d9599788daadb376" translate="yes" xml:space="preserve">
          <source>DEP0028: util.debug()</source>
          <target state="translated">DEP0028:util.debug()</target>
        </trans-unit>
        <trans-unit id="f654c7a40e78a0eb142e62cc0d8137023f1b8629" translate="yes" xml:space="preserve">
          <source>DEP0029: util.error()</source>
          <target state="translated">DEP0029:util.error()</target>
        </trans-unit>
        <trans-unit id="7a89d71d17e27ca9f382ea6f1d981a8218d855bf" translate="yes" xml:space="preserve">
          <source>DEP0030: SlowBuffer</source>
          <target state="translated">DEP0030:スローバッファ</target>
        </trans-unit>
        <trans-unit id="98de69ca0acc868a75643d8dcf5de5959bf0e76e" translate="yes" xml:space="preserve">
          <source>DEP0031: ecdh.setPublicKey()</source>
          <target state="translated">DEP0031:ecdh.setPublicKey()</target>
        </trans-unit>
        <trans-unit id="6602362f91e73319c257db85bfad5c60692a1f3c" translate="yes" xml:space="preserve">
          <source>DEP0032: domain module</source>
          <target state="translated">DEP0032:ドメインモジュール</target>
        </trans-unit>
        <trans-unit id="5a517fdd416d730a1a0cbc117ebce8092852c356" translate="yes" xml:space="preserve">
          <source>DEP0033: EventEmitter.listenerCount()</source>
          <target state="translated">DEP0033.EventEmitter.listenerCount()</target>
        </trans-unit>
        <trans-unit id="63a61780945c902eb61dd21547ff578ed40890a5" translate="yes" xml:space="preserve">
          <source>DEP0034: fs.exists(path, callback)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L206&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0034：fs.exists（path、callback）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L206&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="4cc548cd471299c5ab77bc4df714e0d8adff1498" translate="yes" xml:space="preserve">
          <source>DEP0035: fs.lchmod(path, mode, callback)</source>
          <target state="translated">DEP0035:fs.lchmod(path,mode,callback)</target>
        </trans-unit>
        <trans-unit id="df15e1f4a20c2f6c1a8364dd28e035de2392eb49" translate="yes" xml:space="preserve">
          <source>DEP0036: fs.lchmodSync(path, mode)</source>
          <target state="translated">DEP0036:fs.lchmodSync(path,mode)</target>
        </trans-unit>
        <trans-unit id="04dd0966062896e4ed5b16ad2eb2b323d7462f6f" translate="yes" xml:space="preserve">
          <source>DEP0037: fs.lchown(path, uid, gid, callback)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L1090&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0037：fs.lchown（パス、uid、gid、コールバック）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L1090&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="084b173a1d85c1821d4f3a13c46d56f0e80814c0" translate="yes" xml:space="preserve">
          <source>DEP0038: fs.lchownSync(path, uid, gid)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L1100&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0038：fs.lchownSync（パス、uid、gid）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L1100&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="fd7ad4e8eb56ecb10cabdb660d5a8dec5bf3e3d3" translate="yes" xml:space="preserve">
          <source>DEP0039: require.extensions</source>
          <target state="translated">DEP0039:require.extensions</target>
        </trans-unit>
        <trans-unit id="176f5b1252ea99dfbca94904d4b2d5a7dbe66070" translate="yes" xml:space="preserve">
          <source>DEP0040: punycode module</source>
          <target state="translated">DEP0040:punycode モジュール</target>
        </trans-unit>
        <trans-unit id="bf8098eac909adabdc49d6d09a3d4af20348d137" translate="yes" xml:space="preserve">
          <source>DEP0041: NODE_REPL_HISTORY_FILE environment variable</source>
          <target state="translated">DEP0041:NODE_REPL_HISTORY_FILE 環境変数</target>
        </trans-unit>
        <trans-unit id="05f6a925d701bd842ff5228feda0db840c2e9614" translate="yes" xml:space="preserve">
          <source>DEP0042: tls.CryptoStream</source>
          <target state="translated">DEP0042:tls.CryptoStream</target>
        </trans-unit>
        <trans-unit id="8781cfcf5bfb84cb2cbb2eddb935a5375d19bfbe" translate="yes" xml:space="preserve">
          <source>DEP0043: tls.SecurePair</source>
          <target state="translated">DEP0043:tls.SecurePair</target>
        </trans-unit>
        <trans-unit id="2b3881a6a82257d54f8feef2373e66e2d2825302" translate="yes" xml:space="preserve">
          <source>DEP0044: util.isArray()</source>
          <target state="translated">DEP0044:util.isArray()</target>
        </trans-unit>
        <trans-unit id="710f3843a0527cfd00df73e7d1db6f410e285ce8" translate="yes" xml:space="preserve">
          <source>DEP0045: util.isBoolean()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L55&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0045：util.isBoolean（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L55&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="1aea2ddc5414628c4331e10d63f42b92e13f3bbc" translate="yes" xml:space="preserve">
          <source>DEP0046: util.isBuffer()</source>
          <target state="translated">DEP0046:util.isBuffer()</target>
        </trans-unit>
        <trans-unit id="44b740ad505d1cb6cdec80d5be04528598c842c0" translate="yes" xml:space="preserve">
          <source>DEP0047: util.isDate()</source>
          <target state="translated">DEP0047:util.isDate()</target>
        </trans-unit>
        <trans-unit id="5a67e639836e8937db8e993edfdaa78a39d9539f" translate="yes" xml:space="preserve">
          <source>DEP0048: util.isError()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L87&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0048：util.isError（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L87&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="d5b5ad2179d761cc149d4db8b60dbcacda0c191f" translate="yes" xml:space="preserve">
          <source>DEP0049: util.isFunction()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L91&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0049：util.isFunction（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L91&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="064a67f91bce745d2d27fb5d73b9ee7d88a61128" translate="yes" xml:space="preserve">
          <source>DEP0050: util.isNull()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L59&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0050：util.isNull（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L59&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="592c1088effff2c9a193abb973fe08caf870d7f6" translate="yes" xml:space="preserve">
          <source>DEP0051: util.isNullOrUndefined()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L63&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0051：util.isNullOrUndefined（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L63&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="f899d2b58a80abd3437616f7dfa359b4afa3a31d" translate="yes" xml:space="preserve">
          <source>DEP0052: util.isNumber()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L67&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0052：util.isNumber（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L67&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="755c22d6eb992c78bb5f5214e5b961d2edb3469e" translate="yes" xml:space="preserve">
          <source>DEP0053 util.isObject()</source>
          <target state="translated">DEP0053 util.isObject()</target>
        </trans-unit>
        <trans-unit id="587631cd2d79b0cb1d2ca334a75496b416d83d86" translate="yes" xml:space="preserve">
          <source>DEP0054: util.isPrimitive()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L95&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0054：util.isPrimitive（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L95&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="14b0d2074c966ec0239d6d07624776ab39db72ab" translate="yes" xml:space="preserve">
          <source>DEP0055: util.isRegExp()</source>
          <target state="translated">DEP0055:util.isRegExp()</target>
        </trans-unit>
        <trans-unit id="20c9be669fd8d537f653875881aaf3c46eb4eeae" translate="yes" xml:space="preserve">
          <source>DEP0056: util.isString()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L71&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0056：util.isString（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L71&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="0e3e6d38f008e9c6de1d1b7d0885e456b2eb2c0b" translate="yes" xml:space="preserve">
          <source>DEP0057: util.isSymbol()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L75&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0057：util.isSymbol（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L75&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="fd34e92af7c23ba7bce2f59a19f79610fea8e394" translate="yes" xml:space="preserve">
          <source>DEP0058: util.isUndefined()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L79&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0058：util.isUndefined（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L79&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="f3935869d21cbb3f0d45dbe8bfaaa3276348c607" translate="yes" xml:space="preserve">
          <source>DEP0059: util.log()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L118&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0059：util.log（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/util.js#L118&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="cbb44fb45b4abf324f1139b9a5035e2f9a648991" translate="yes" xml:space="preserve">
          <source>DEP0060: util._extend()</source>
          <target state="translated">DEP0060:util._extend()</target>
        </trans-unit>
        <trans-unit id="a45922680bf90954888a3cc1742b24504d30b283" translate="yes" xml:space="preserve">
          <source>DEP0061: fs.SyncWriteStream</source>
          <target state="translated">DEP0061:fs.SyncWriteStream</target>
        </trans-unit>
        <trans-unit id="2ee556a6c0f3d22e47651510bd5376a65f3b24a4" translate="yes" xml:space="preserve">
          <source>DEP0062: node --debug</source>
          <target state="translated">DEP0062:ノード --debug</target>
        </trans-unit>
        <trans-unit id="8da770448a5de1ecb62d6c775926d07c6ed0f932" translate="yes" xml:space="preserve">
          <source>DEP0063: ServerResponse.prototype.writeHeader()</source>
          <target state="translated">DEP0063.ServerResponse.prototype.writeHeader()</target>
        </trans-unit>
        <trans-unit id="2a429ab899216f49653d4922df38415346344e67" translate="yes" xml:space="preserve">
          <source>DEP0064: tls.createSecurePair()</source>
          <target state="translated">DEP0064:tls.createSecurePair()</target>
        </trans-unit>
        <trans-unit id="d29d355c6a8bd8f24ec818fe6fae487ee033f04c" translate="yes" xml:space="preserve">
          <source>DEP0065: repl.REPL_MODE_MAGIC and NODE_REPL_MODE=magic</source>
          <target state="translated">DEP0065:repl.REPL_MODE_MAGICおよびNODE_REPL_MODE=magic</target>
        </trans-unit>
        <trans-unit id="8648c74e5602b3ca96dc90a009f388c26ad684d6" translate="yes" xml:space="preserve">
          <source>DEP0066: OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames</source>
          <target state="translated">DEP0066:OutgoingMessage.prototype._headers,OutgoingMessage.prototype._headerNames</target>
        </trans-unit>
        <trans-unit id="580079a21020b20cb2cb2609c8ada6819a83d9a5" translate="yes" xml:space="preserve">
          <source>DEP0067: OutgoingMessage.prototype._renderHeaders</source>
          <target state="translated">DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.DEP0067.OutgoingMessage.prototype._renderHeaders</target>
        </trans-unit>
        <trans-unit id="6c183af9a2e9e3043f11355e17a89b9628a28707" translate="yes" xml:space="preserve">
          <source>DEP0068: node debug</source>
          <target state="translated">DEP0068:ノードのデバッグ</target>
        </trans-unit>
        <trans-unit id="ee38252d1829ce440716b62478e009bdf22221c7" translate="yes" xml:space="preserve">
          <source>DEP0069: vm.runInDebugContext(string)</source>
          <target state="translated">DEP0069:vm.runInDebugContext(string)</target>
        </trans-unit>
        <trans-unit id="a7f036738eb3d3cf5acddd984282ea1f53b06924" translate="yes" xml:space="preserve">
          <source>DEP0070: async_hooks.currentId()</source>
          <target state="translated">DEP0070:async_hooks.currentId()</target>
        </trans-unit>
        <trans-unit id="8c79319e5e3cf879ccc8fd2d245f40f459d69c9d" translate="yes" xml:space="preserve">
          <source>DEP0071: async_hooks.triggerId()</source>
          <target state="translated">DEP0071:async_hooks.triggerId()</target>
        </trans-unit>
        <trans-unit id="564deeb4de3c7990589faf13cb0845457709a0c9" translate="yes" xml:space="preserve">
          <source>DEP0072: async_hooks.AsyncResource.triggerId()</source>
          <target state="translated">DEP0072:async_hooks.AsyncResource.triggerId()</target>
        </trans-unit>
        <trans-unit id="d41b5cdd606c15e2314e390c1f8ad4959fe2c118" translate="yes" xml:space="preserve">
          <source>DEP0073: Several internal properties of net.Server</source>
          <target state="translated">DEP0073:net.Server のいくつかの内部プロパティ</target>
        </trans-unit>
        <trans-unit id="10bd72f88a0e6ec1105031f59298324cd305482c" translate="yes" xml:space="preserve">
          <source>DEP0074: REPLServer.bufferedCommand</source>
          <target state="translated">DEP0074.REPLServer.bufferedCommand</target>
        </trans-unit>
        <trans-unit id="56a456b8d04924bce83a53e07150c1982ee00c04" translate="yes" xml:space="preserve">
          <source>DEP0075: REPLServer.parseREPLKeyword()</source>
          <target state="translated">DEP0075。REPLServer.parseREPLKeyword()</target>
        </trans-unit>
        <trans-unit id="a4e712fb818197bd796389661a785d6c6b53a402" translate="yes" xml:space="preserve">
          <source>DEP0076: tls.parseCertString()</source>
          <target state="translated">DEP0076:tls.parseCertString()</target>
        </trans-unit>
        <trans-unit id="827fb274c931c6d67af948ca8cb48d46960b2bc5" translate="yes" xml:space="preserve">
          <source>DEP0077: Module._debug()</source>
          <target state="translated">DEP0077.Module._debug()</target>
        </trans-unit>
        <trans-unit id="4b51f849982248d62ac0684e99b69c2d052b27a2" translate="yes" xml:space="preserve">
          <source>DEP0078: REPLServer.turnOffEditorMode()</source>
          <target state="translated">DEP0078:REPLServer.turnOffEditorMode()</target>
        </trans-unit>
        <trans-unit id="89c6bfc424f4e2abb92bcb654264643c48f1f951" translate="yes" xml:space="preserve">
          <source>DEP0079: Custom inspection function on Objects via .inspect()</source>
          <target state="translated">DEP0079..expect()によるオブジェクトのカスタム検査機能</target>
        </trans-unit>
        <trans-unit id="8f019603cc50583a7f104dd22f6e9244987a66aa" translate="yes" xml:space="preserve">
          <source>DEP0080: path._makeLong()</source>
          <target state="translated">DEP0080:path._makeLong()</target>
        </trans-unit>
        <trans-unit id="542687c54b65b71a2d3b64415504c4eab36463c7" translate="yes" xml:space="preserve">
          <source>DEP0081: fs.truncate() using a file descriptor&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L654&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0081：ファイル記述子を使用したfs.truncate（）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/fs.js#L654&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="a2dff893b25a009c92416832b4981652ca30bcb2" translate="yes" xml:space="preserve">
          <source>DEP0082: REPLServer.prototype.memory()</source>
          <target state="translated">DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.DEP0082.REPLServer.prototype.memory()</target>
        </trans-unit>
        <trans-unit id="d70923d0c949900cfb2b82aec8b22854b2334430" translate="yes" xml:space="preserve">
          <source>DEP0083: Disabling ECDH by setting ecdhCurve to false</source>
          <target state="translated">DEP0083:ecdhCurve を false に設定して ECDH を無効にする</target>
        </trans-unit>
        <trans-unit id="608e7032b3ff7be0240828567205ef58c1dbe26e" translate="yes" xml:space="preserve">
          <source>DEP0084: requiring bundled internal dependencies</source>
          <target state="translated">DEP0084:バンドルされた内部依存関係を要求する</target>
        </trans-unit>
        <trans-unit id="3b0510a5ddf7a53ade86c6cb522aa2d0e68a9653" translate="yes" xml:space="preserve">
          <source>DEP0085: AsyncHooks Sensitive API</source>
          <target state="translated">DEP0085:AsyncHooks センシティブ API</target>
        </trans-unit>
        <trans-unit id="3112dab5399a482cdf7257d5ba4a114955eb87c8" translate="yes" xml:space="preserve">
          <source>DEP0086: Remove runInAsyncIdScope</source>
          <target state="translated">DEP0086。runInAsyncIdScope を削除</target>
        </trans-unit>
        <trans-unit id="511ff1c42d98e093f9ab9293471e77253d6bcbc3" translate="yes" xml:space="preserve">
          <source>DEP0089: require('assert')</source>
          <target state="translated">DEP0089:require('assert')</target>
        </trans-unit>
        <trans-unit id="5a4ec9c582f555ae08a1de56565a33475e78784b" translate="yes" xml:space="preserve">
          <source>DEP0090: Invalid GCM authentication tag lengths</source>
          <target state="translated">DEP0090:無効な GCM 認証タグの長さ</target>
        </trans-unit>
        <trans-unit id="2c5db7a096e70ef1154214d857180b654a1d711c" translate="yes" xml:space="preserve">
          <source>DEP0091: crypto.DEFAULT_ENCODING</source>
          <target state="translated">DEP0091:crypto.DEFAULT_ENCODING</target>
        </trans-unit>
        <trans-unit id="73edd01924b96adac0db88e9aceb3145aa45523a" translate="yes" xml:space="preserve">
          <source>DEP0092: Top-level &lt;code&gt;this&lt;/code&gt; bound to &lt;code&gt;module.exports&lt;/code&gt;</source>
          <target state="translated">DEP0092： &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;module.exports&lt;/code&gt; にバインドされたトップレベル</target>
        </trans-unit>
        <trans-unit id="cddecf272e2acb5ec2d3ced7cddd81b513ef1bba" translate="yes" xml:space="preserve">
          <source>DEP0093: crypto.fips is deprecated and replaced.</source>
          <target state="translated">DEP0093:crypto.fips は非推奨となり、置き換えられました。</target>
        </trans-unit>
        <trans-unit id="0f8821f39e8713accd9c40fc0ebf48486ad13ec7" translate="yes" xml:space="preserve">
          <source>DEP0094: Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than one argument.</source>
          <target state="translated">DEP0094：複数の引数を指定して &lt;code&gt;assert.fail()&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="e1ad756dd64d4af6899d2a9586dc60310383d569" translate="yes" xml:space="preserve">
          <source>DEP0095: timers.enroll()</source>
          <target state="translated">DEP0095:timers.en enroll()</target>
        </trans-unit>
        <trans-unit id="fc15d7ea3647bf6ea8ed0ce5b08e6f17fd0e5b27" translate="yes" xml:space="preserve">
          <source>DEP0096: timers.unenroll()</source>
          <target state="translated">DEP0096:timers.unenroll()</target>
        </trans-unit>
        <trans-unit id="4ec3bc6704b3f482b506229dac56d41374f30e1b" translate="yes" xml:space="preserve">
          <source>DEP0097: MakeCallback with domain property</source>
          <target state="translated">DEP0097:ドメイン プロパティでの MakeCallback</target>
        </trans-unit>
        <trans-unit id="0ffd3c377f5619c4d643d99a658993e4b6aba656" translate="yes" xml:space="preserve">
          <source>DEP0098: AsyncHooks Embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs</source>
          <target state="translated">DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.DEP0098.AsyncHooks エンベッダー AsyncResource.emitBefore と AsyncResource.emitAfter の API</target>
        </trans-unit>
        <trans-unit id="2ffc9a68386d98739278fd1241e28b27ed7db86b" translate="yes" xml:space="preserve">
          <source>DEP0099: async context-unaware node::MakeCallback C++ APIs</source>
          <target state="translated">DEP0099:非同期コンテキスト非対応 node::MakeCallback C++APIs</target>
        </trans-unit>
        <trans-unit id="07b0cb55827f155d511617f638757dde1f01fff0" translate="yes" xml:space="preserve">
          <source>DEP0100: process.assert()</source>
          <target state="translated">DEP0100:process.assert()</target>
        </trans-unit>
        <trans-unit id="e48311ba2bac7cd6ff97203e9a8d5415749373af" translate="yes" xml:space="preserve">
          <source>DEP0101: --with-lttng</source>
          <target state="translated">DEP0101:--with-lttng</target>
        </trans-unit>
        <trans-unit id="dde10af1a782eaa051b12f57380b1866ae891e33" translate="yes" xml:space="preserve">
          <source>DEP0102: Using &lt;code&gt;noAssert&lt;/code&gt; in Buffer#(read|write) operations.</source>
          <target state="translated">DEP0102：Buffer＃（read | write）操作で &lt;code&gt;noAssert&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="13585dbcb7b546e190db0f25da7844deebaed2d8" translate="yes" xml:space="preserve">
          <source>DEP0103: process.binding('util').is[...] typechecks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c784bbacecb12e2254f20ff783709ba624967f7" translate="yes" xml:space="preserve">
          <source>DEP0104: process.env string coercion</source>
          <target state="translated">DEP0104:process.env 文字列強制</target>
        </trans-unit>
        <trans-unit id="660af96369847d87c4de2c1fc9050ab3c55779d8" translate="yes" xml:space="preserve">
          <source>DEP0105: decipher.finaltol</source>
          <target state="translated">DEP0105:decipher.finaltol</target>
        </trans-unit>
        <trans-unit id="3679a05e090eb40b09cf43513ab8a6b6fc6383ea" translate="yes" xml:space="preserve">
          <source>DEP0106: crypto.createCipher and crypto.createDecipher</source>
          <target state="translated">DEP0106:crypto.createCipher および crypto.createDecipher</target>
        </trans-unit>
        <trans-unit id="4e19a817ad17db1735756932336fd2111c271f29" translate="yes" xml:space="preserve">
          <source>DEP0107: tls.convertNPNProtocols()</source>
          <target state="translated">DEP0107:tls.convertNPNProtocols()</target>
        </trans-unit>
        <trans-unit id="6a1ab5f7213725281a594a88364230f57e6e95d2" translate="yes" xml:space="preserve">
          <source>DEP0108: zlib.bytesRead</source>
          <target state="translated">DEP0108:zlib.bytesRead</target>
        </trans-unit>
        <trans-unit id="0c46c7a0029c930bc65e8cdd57fa7feee35e47fd" translate="yes" xml:space="preserve">
          <source>DEP0109: http, https, and tls support for invalid URLs</source>
          <target state="translated">DEP0109:無効な URL に対する http、https、および tls のサポート</target>
        </trans-unit>
        <trans-unit id="6fdf988cbf974f0506e9c71df3ddfaf999ac9f8f" translate="yes" xml:space="preserve">
          <source>DEP0110: vm.Script cached data</source>
          <target state="translated">DEP0110:vm.Script キャッシュされたデータ</target>
        </trans-unit>
        <trans-unit id="666b614603d5dae9840dd5b0769923ba7d5ded92" translate="yes" xml:space="preserve">
          <source>DEP0111: process.binding()</source>
          <target state="translated">DEP0111:process.binding()</target>
        </trans-unit>
        <trans-unit id="fae9f73df174c329b2ce302aafa2e29bc5a8fb52" translate="yes" xml:space="preserve">
          <source>DEP0112: dgram private APIs</source>
          <target state="translated">DEP0112:dgramプライベートAPI</target>
        </trans-unit>
        <trans-unit id="453d7b0bd954bbbf5369cd77d881a5686c9dadc2" translate="yes" xml:space="preserve">
          <source>DEP0113: Cipher.setAuthTag(), Decipher.getAuthTag()</source>
          <target state="translated">DEP0113。Cipher.setAuthTag(),Decipher.getAuthTag()</target>
        </trans-unit>
        <trans-unit id="bdab6b71f9be9845b63ed4cb8b32ea85e3f96872" translate="yes" xml:space="preserve">
          <source>DEP0114: crypto._toBuf()</source>
          <target state="translated">DEP0114:crypto._toBuf()</target>
        </trans-unit>
        <trans-unit id="c380e656cadfc2ef584efb6a1eb58e6b6a031eae" translate="yes" xml:space="preserve">
          <source>DEP0115: crypto.prng(), crypto.pseudoRandomBytes(), crypto.rng()</source>
          <target state="translated">DEP0115:crypto.prng()、crypto.pseudoRandomBytes()、crypto.rng()</target>
        </trans-unit>
        <trans-unit id="91b34ce0b32454e9afcefff459cb6edf35d3f32a" translate="yes" xml:space="preserve">
          <source>DEP0116: Legacy URL API</source>
          <target state="translated">DEP0116.レガシー URL API</target>
        </trans-unit>
        <trans-unit id="3f2ba0a9c4dbf302735c5f3000409a6d4582a315" translate="yes" xml:space="preserve">
          <source>DEP0117: Native crypto handles</source>
          <target state="translated">DEP0117:ネイティブの暗号ハンドル</target>
        </trans-unit>
        <trans-unit id="0923a0ff14ca53c76e9ebdd39c3befbc2e6ebb8e" translate="yes" xml:space="preserve">
          <source>DEP0118: dns.lookup() support for a falsy hostname&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/dns.js#L90&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">DEP0118：偽のホスト名&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/dns.js#L90&quot;&gt;[&lt;/a&gt;ソース]の dns.lookup（）サポート</target>
        </trans-unit>
        <trans-unit id="a03a65784ae0db5882fd10d1ad3213a3023a88b4" translate="yes" xml:space="preserve">
          <source>DEP0119: process.binding('uv').errname() private API</source>
          <target state="translated">DEP0119:process.binding('uv').errname()private API</target>
        </trans-unit>
        <trans-unit id="c6c6d893979162685e9056c979740465e0192de9" translate="yes" xml:space="preserve">
          <source>DEP0120: Windows Performance Counter Support</source>
          <target state="translated">DEP0120。Windowsパフォーマンスカウンターのサポート</target>
        </trans-unit>
        <trans-unit id="4f4445f4f2d7846c82d9916e60e323ecb4661456" translate="yes" xml:space="preserve">
          <source>DEP0121: net._setSimultaneousAccepts()</source>
          <target state="translated">DEP0121:net._setSimultaneousAccepts()</target>
        </trans-unit>
        <trans-unit id="06bd792b69ba63f6b05e70c57264a2534ea65da4" translate="yes" xml:space="preserve">
          <source>DEP0122: tls Server.prototype.setOptions()</source>
          <target state="translated">DEP0122:tls Server.prototype.setOptions()</target>
        </trans-unit>
        <trans-unit id="c827866fdd4262824587092f0251cae9572edffe" translate="yes" xml:space="preserve">
          <source>DEP0123: setting the TLS ServerName to an IP address</source>
          <target state="translated">DEP0123:TLS ServerName を IP アドレスに設定する</target>
        </trans-unit>
        <trans-unit id="8e4c506f70296e8e58fc7eeec295333deb1c9167" translate="yes" xml:space="preserve">
          <source>DEP0124: using REPLServer.rli</source>
          <target state="translated">DEP0124:REPLServer.rli の使用</target>
        </trans-unit>
        <trans-unit id="b3b323f9c441f5091d86070e7b91bce61d7e5fb5" translate="yes" xml:space="preserve">
          <source>DEP0125: require('_stream_wrap')</source>
          <target state="translated">DEP0125:require('_stream_wrap')</target>
        </trans-unit>
        <trans-unit id="8e245f07b02a1bbfe51cf85b89c7241cff59c313" translate="yes" xml:space="preserve">
          <source>DEP0126: timers.active()</source>
          <target state="translated">DEP0126:timers.active()</target>
        </trans-unit>
        <trans-unit id="5887910a75679c56327bdbff264a059ed785056b" translate="yes" xml:space="preserve">
          <source>DEP0127: timers._unrefActive()</source>
          <target state="translated">DEP0127:timers._unrefActive()</target>
        </trans-unit>
        <trans-unit id="e9e4df1f09db8516eb484c23752f4fef842decea" translate="yes" xml:space="preserve">
          <source>DEP0128: modules with an invalid &lt;code&gt;main&lt;/code&gt; entry and an &lt;code&gt;index.js&lt;/code&gt; file</source>
          <target state="translated">DEP0128：無効な &lt;code&gt;main&lt;/code&gt; エントリと &lt;code&gt;index.js&lt;/code&gt; ファイルを持つモジュール</target>
        </trans-unit>
        <trans-unit id="9268dd7bb7604f6fd0f31347ebf3a909af60b033" translate="yes" xml:space="preserve">
          <source>DEP0129: ChildProcess._channel</source>
          <target state="translated">DEP0129:ChildProcess._channel</target>
        </trans-unit>
        <trans-unit id="26df7ccc8404b2ea0e6ec615033499f5c791ffe8" translate="yes" xml:space="preserve">
          <source>DEP0130: Module.createRequireFromPath()</source>
          <target state="translated">DEP0130を使用しています。Module.createRequireFromPath()</target>
        </trans-unit>
        <trans-unit id="c43d08ea68b3731d74753c53671217c4e988d72f" translate="yes" xml:space="preserve">
          <source>DEP0131: Legacy HTTP parser</source>
          <target state="translated">DEP0131:レガシー HTTP パーサー</target>
        </trans-unit>
        <trans-unit id="1a0a8c3a719544e4a7154e28ee9207fc0317830e" translate="yes" xml:space="preserve">
          <source>DEP0132: worker.terminate() with callback</source>
          <target state="translated">DEP0132:worker.terminate()をコールバックにした</target>
        </trans-unit>
        <trans-unit id="3ddc21b1eaa5ad6e57bb26bc517091c9b2d2e86d" translate="yes" xml:space="preserve">
          <source>DNS</source>
          <target state="translated">DNS</target>
        </trans-unit>
        <trans-unit id="6754f5502828f15dd52a01c8d7f5671d5a7a1103" translate="yes" xml:space="preserve">
          <source>DNS Promises API</source>
          <target state="translated">DNS プロミス API</target>
        </trans-unit>
        <trans-unit id="87cceeb3f262876bc42dda6c83145f634eb6a7d7" translate="yes" xml:space="preserve">
          <source>DNS server operators may choose not to respond to &lt;code&gt;ANY&lt;/code&gt; queries. It may be better to call individual methods like &lt;a href=&quot;#dns_dns_resolve4_hostname_options_callback&quot;&gt;&lt;code&gt;dns.resolve4()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#dns_dns_resolvemx_hostname_callback&quot;&gt;&lt;code&gt;dns.resolveMx()&lt;/code&gt;&lt;/a&gt;, and so on. For more details, see &lt;a href=&quot;https://tools.ietf.org/html/rfc8482&quot;&gt;RFC 8482&lt;/a&gt;.</source>
          <target state="translated">DNSサーバーオペレーターは、 &lt;code&gt;ANY&lt;/code&gt; クエリにも応答しないことを選択できます。&lt;a href=&quot;#dns_dns_resolve4_hostname_options_callback&quot;&gt; &lt;code&gt;dns.resolve4()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#dns_dns_resolvemx_hostname_callback&quot;&gt; &lt;code&gt;dns.resolveMx()&lt;/code&gt; &lt;/a&gt;などの個別のメソッドを呼び出す方がよい場合があります。詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc8482&quot;&gt;RFC 8482を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7f2bd1783046a733f5023f751242ebdb09c74444" translate="yes" xml:space="preserve">
          <source>Data could be sent on a socket.</source>
          <target state="translated">データはソケットで送ることができました。</target>
        </trans-unit>
        <trans-unit id="85254476d82ec01be8f3b5cd8f3d21cb777cb590" translate="yes" xml:space="preserve">
          <source>Data is buffered in &lt;code&gt;Readable&lt;/code&gt; streams when the implementation calls &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;. If the consumer of the Stream does not call &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt;, the data will sit in the internal queue until it is consumed.</source>
          <target state="translated">実装が&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; を&lt;/a&gt;呼び出すと、データは &lt;code&gt;Readable&lt;/code&gt; ストリームにバッファーされます。Streamのコンシューマーが&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read()&lt;/code&gt; を&lt;/a&gt;呼び出さない場合、データは消費されるまで内部キューに残ります。</target>
        </trans-unit>
        <trans-unit id="8c5039d3d6548742d4067316c3b558c43041e195" translate="yes" xml:space="preserve">
          <source>Data is buffered in &lt;code&gt;Writable&lt;/code&gt; streams when the &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.write(chunk)&lt;/code&gt;&lt;/a&gt; method is called repeatedly. While the total size of the internal write buffer is below the threshold set by &lt;code&gt;highWaterMark&lt;/code&gt;, calls to &lt;code&gt;writable.write()&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;. Once the size of the internal buffer reaches or exceeds the &lt;code&gt;highWaterMark&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; will be returned.</source>
          <target state="translated">&lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;writable.write(chunk)&lt;/code&gt; &lt;/a&gt;メソッドが繰り返し呼び出されると、データは &lt;code&gt;Writable&lt;/code&gt; ストリームにバッファーされます。内部書き込みバッファーの合計サイズが &lt;code&gt;highWaterMark&lt;/code&gt; によって設定されたしきい値を下回っている間、 &lt;code&gt;writable.write()&lt;/code&gt; への呼び出しは &lt;code&gt;true&lt;/code&gt; を返します。内部バッファーのサイズが &lt;code&gt;highWaterMark&lt;/code&gt; に達するか超えると、 &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="648ad664e37c72cf0b7ccb84b96178c006f0bf40" translate="yes" xml:space="preserve">
          <source>Data passed to a Brotli stream was not successfully compressed.</source>
          <target state="translated">Brotli ストリームに渡されたデータは正常に圧縮されませんでした。</target>
        </trans-unit>
        <trans-unit id="f06dfb622a43d7eb38bee27a79740d16c9f86791" translate="yes" xml:space="preserve">
          <source>Data path for ICU (&lt;code&gt;Intl&lt;/code&gt; object) data. Will extend linked-in data when compiled with small-icu support.</source>
          <target state="translated">ICU（ &lt;code&gt;Intl&lt;/code&gt; オブジェクト）データのデータパス。small-icuサポートでコンパイルすると、リンクされたデータを拡張します。</target>
        </trans-unit>
        <trans-unit id="7b52c91ba78ff932d753b1ba6e5c2167e91e9f5f" translate="yes" xml:space="preserve">
          <source>Data provided to &lt;code&gt;TextDecoder()&lt;/code&gt; API was invalid according to the encoding provided.</source>
          <target state="translated">&lt;code&gt;TextDecoder()&lt;/code&gt; APIに提供されたデータは、提供されたエンコードに従って無効でした。</target>
        </trans-unit>
        <trans-unit id="4e116004a82e1f0284e392d65b10ab896099fffa" translate="yes" xml:space="preserve">
          <source>Deactivate the inspector. Blocks until there are no active connections.</source>
          <target state="translated">インスペクタを非アクティブにします。アクティブな接続がなくなるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="33ef7c16d13cc6c14173b0445ecb490c2434821c" translate="yes" xml:space="preserve">
          <source>DebugContext has been removed in V8 and is not available in Node.js 10+.</source>
          <target state="translated">DebugContextはV8で削除され、Node.js 10+では利用できなくなりました。</target>
        </trans-unit>
        <trans-unit id="f328913d9ef8e3e8f1c6e853a6a633d12493170b" translate="yes" xml:space="preserve">
          <source>DebugContext was an experimental API.</source>
          <target state="translated">DebugContextは実験的なAPIでした。</target>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="translated">Debugger</target>
        </trans-unit>
        <trans-unit id="f390868c0654dcbccc335b5d71c6db5b368565dc" translate="yes" xml:space="preserve">
          <source>Decipher</source>
          <target state="translated">Decipher</target>
        </trans-unit>
        <trans-unit id="e80d4b2ee209eaab2e8654c2248eb145f42ba021" translate="yes" xml:space="preserve">
          <source>Decodes &lt;code&gt;buf&lt;/code&gt; to a string according to the specified character encoding in &lt;code&gt;encoding&lt;/code&gt;. &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; may be passed to decode only a subset of &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">encodingで指定された文字エンコーディングに従って &lt;code&gt;buf&lt;/code&gt; を文字列にデコードし &lt;code&gt;encoding&lt;/code&gt; 。 &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; を渡して、 &lt;code&gt;buf&lt;/code&gt; のサブセットのみをデコードできます。</target>
        </trans-unit>
        <trans-unit id="48c48030e1706aaf755a1d5a3d8cbaefd39a00e1" translate="yes" xml:space="preserve">
          <source>Decodes the &lt;code&gt;input&lt;/code&gt; and returns a string. If &lt;code&gt;options.stream&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, any incomplete byte sequences occurring at the end of the &lt;code&gt;input&lt;/code&gt; are buffered internally and emitted after the next call to &lt;code&gt;textDecoder.decode()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; をデコードして文字列を返します。 &lt;code&gt;options.stream&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、 &lt;code&gt;input&lt;/code&gt; の最後に発生する不完全なバイトシーケンスは内部でバッファリングされ、次に &lt;code&gt;textDecoder.decode()&lt;/code&gt; が呼び出された後に出力されます。</target>
        </trans-unit>
        <trans-unit id="cdfbf00495fd4e44a325d07310b260d38846ac8e" translate="yes" xml:space="preserve">
          <source>Decoding buffers in a Writable Stream</source>
          <target state="translated">書き込み可能なストリームのバッファのデコード</target>
        </trans-unit>
        <trans-unit id="1f36b1ca963e5190d40b0c9c73204803bbef712e" translate="yes" xml:space="preserve">
          <source>Decoding buffers is a common task, for instance, when using transformers whose input is a string. This is not a trivial process when using multi-byte characters encoding, such as UTF-8. The following example shows how to decode multi-byte strings using &lt;code&gt;StringDecoder&lt;/code&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バッファのデコードは、たとえば、入力が文字列であるトランスフォーマを使用する場合の一般的なタスクです。これは、UTF-8などのマルチバイト文字エンコーディングを使用する場合の簡単なプロセスではありません。次の例は、 &lt;code&gt;StringDecoder&lt;/code&gt; および&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;を使用してマルチバイト文字列をデコードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="06bcebee3ddca6ec69e832bf19fb5e5159930a2a" translate="yes" xml:space="preserve">
          <source>Decompress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_brotlidecompress&quot;&gt;&lt;code&gt;BrotliDecompress&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_brotlidecompress&quot;&gt; &lt;code&gt;BrotliDecompress&lt;/code&gt; &lt;/a&gt;を使用してデータのチャンクを解凍します。</target>
        </trans-unit>
        <trans-unit id="ad5a384034d646797aafc7a78a5d444c47fdab28" translate="yes" xml:space="preserve">
          <source>Decompress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_gunzip&quot;&gt;&lt;code&gt;Gunzip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_gunzip&quot;&gt; &lt;code&gt;Gunzip&lt;/code&gt; &lt;/a&gt;でデータのチャンクを解凍します。</target>
        </trans-unit>
        <trans-unit id="5afcc373b804d657d17352ebf72247b50af224d4" translate="yes" xml:space="preserve">
          <source>Decompress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_inflate&quot;&gt;&lt;code&gt;Inflate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_inflate&quot;&gt; &lt;code&gt;Inflate&lt;/code&gt; &lt;/a&gt;でデータのチャンクを解凍します。</target>
        </trans-unit>
        <trans-unit id="5140476bb83a8705f462c3a590e85a2bd4b428e6" translate="yes" xml:space="preserve">
          <source>Decompress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_inflateraw&quot;&gt;&lt;code&gt;InflateRaw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_inflateraw&quot;&gt; &lt;code&gt;InflateRaw&lt;/code&gt; &lt;/a&gt;を使用してデータのチャンクを解凍します。</target>
        </trans-unit>
        <trans-unit id="c062bd64dd81265bfc43b3435302430dd8ff4851" translate="yes" xml:space="preserve">
          <source>Decompress a chunk of data with &lt;a href=&quot;#zlib_class_zlib_unzip&quot;&gt;&lt;code&gt;Unzip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#zlib_class_zlib_unzip&quot;&gt; &lt;code&gt;Unzip&lt;/code&gt; &lt;/a&gt;でデータのチャンクを解凍します。</target>
        </trans-unit>
        <trans-unit id="19c8c4b636d01cfc59969c08df8148062a628ab6" translate="yes" xml:space="preserve">
          <source>Decompress a deflate stream.</source>
          <target state="translated">デフレートストリームを解凍します。</target>
        </trans-unit>
        <trans-unit id="a1a3b891d05a831e17d3bc4a3150c24aaa8a29e6" translate="yes" xml:space="preserve">
          <source>Decompress a gzip stream.</source>
          <target state="translated">gzipストリームを解凍します。</target>
        </trans-unit>
        <trans-unit id="4067139138e281390912b18bc94470eef739cfbf" translate="yes" xml:space="preserve">
          <source>Decompress a raw deflate stream.</source>
          <target state="translated">生のデフレートストリームを解凍します。</target>
        </trans-unit>
        <trans-unit id="cf7e90e079e97a1ad0532273cc471cc3c540c5af" translate="yes" xml:space="preserve">
          <source>Decompress data using the Brotli algorithm.</source>
          <target state="translated">Brotliアルゴリズムを使用してデータを解凍します。</target>
        </trans-unit>
        <trans-unit id="cb80ce30a8088f6348ef336fff8c67a7c64a652f" translate="yes" xml:space="preserve">
          <source>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting the header.</source>
          <target state="translated">ヘッダを自動検出することで、Gzip または Deflate で圧縮されたストリームを解凍する。</target>
        </trans-unit>
        <trans-unit id="a34c79e64ceccc0189c30c9c4d0875d6441c158d" translate="yes" xml:space="preserve">
          <source>Decompressor options</source>
          <target state="translated">デコンプレッサーのオプション</target>
        </trans-unit>
        <trans-unit id="46f514dfa23e138b085fb83292e6225d8783f651" translate="yes" xml:space="preserve">
          <source>Decreases indentation of subsequent lines by two spaces.</source>
          <target state="translated">後続行のインデントを2スペース分減らします。</target>
        </trans-unit>
        <trans-unit id="8d181d14c29fc23559105d381058a7d8efd52c04" translate="yes" xml:space="preserve">
          <source>Decrypts &lt;code&gt;buffer&lt;/code&gt; with &lt;code&gt;key&lt;/code&gt;.&lt;code&gt;buffer&lt;/code&gt; was previously encrypted using the corresponding private key, for example using &lt;a href=&quot;#crypto_crypto_privateencrypt_privatekey_buffer&quot;&gt;&lt;code&gt;crypto.privateEncrypt()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">復号化は、 &lt;code&gt;buffer&lt;/code&gt; と &lt;code&gt;key&lt;/code&gt; 。 &lt;code&gt;buffer&lt;/code&gt; は、対応する秘密鍵を使用して、たとえば&lt;a href=&quot;#crypto_crypto_privateencrypt_privatekey_buffer&quot;&gt; &lt;code&gt;crypto.privateEncrypt()&lt;/code&gt; &lt;/a&gt;を使用して以前に暗号化されていました。</target>
        </trans-unit>
        <trans-unit id="51bd2cf97f30421a75b4814cfd8cd07552d923f6" translate="yes" xml:space="preserve">
          <source>Decrypts &lt;code&gt;buffer&lt;/code&gt; with &lt;code&gt;privateKey&lt;/code&gt;. &lt;code&gt;buffer&lt;/code&gt; was previously encrypted using the corresponding public key, for example using &lt;a href=&quot;#crypto_crypto_publicencrypt_key_buffer&quot;&gt;&lt;code&gt;crypto.publicEncrypt()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">privateKeyを使用して &lt;code&gt;buffer&lt;/code&gt; を &lt;code&gt;privateKey&lt;/code&gt; ます。 &lt;code&gt;buffer&lt;/code&gt; は以前、たとえば&lt;a href=&quot;#crypto_crypto_publicencrypt_key_buffer&quot;&gt; &lt;code&gt;crypto.publicEncrypt()&lt;/code&gt; &lt;/a&gt;を使用するなど、対応する公開鍵を使用して暗号化されていました。</target>
        </trans-unit>
        <trans-unit id="44754971f3e2c785c56b5d1f064552ac8ed0bcbb" translate="yes" xml:space="preserve">
          <source>Default Evaluation</source>
          <target state="translated">デフォルト評価</target>
        </trans-unit>
        <trans-unit id="3b886c1a2b0441af01939be9b1b08c3f77703b61" translate="yes" xml:space="preserve">
          <source>Default Windows Shell</source>
          <target state="translated">デフォルトのWindowsシェル</target>
        </trans-unit>
        <trans-unit id="5b0a62957312ac3aeea395e99736e06361fdd261" translate="yes" xml:space="preserve">
          <source>Default behavior is to try close the socket with a HTTP '400 Bad Request', or a HTTP '431 Request Header Fields Too Large' in the case of a &lt;a href=&quot;errors#errors_hpe_header_overflow&quot;&gt;&lt;code&gt;HPE_HEADER_OVERFLOW&lt;/code&gt;&lt;/a&gt; error. If the socket is not writable it is immediately destroyed.</source>
          <target state="translated">デフォルトの動作では、&lt;a href=&quot;errors#errors_hpe_header_overflow&quot;&gt; &lt;code&gt;HPE_HEADER_OVERFLOW&lt;/code&gt; &lt;/a&gt;エラーの場合は、HTTP '400 Bad Request'またはHTTP '431 Request Header Fields Too Large'でソケットを閉じようとします。ソケットが書き込み可能でない場合は、すぐに破棄されます。</target>
        </trans-unit>
        <trans-unit id="2299ed289f228d0a68bd3dec6d87946c164aeaf5" translate="yes" xml:space="preserve">
          <source>Default host is &lt;code&gt;127.0.0.1&lt;/code&gt;.</source>
          <target state="translated">デフォルトのホストは &lt;code&gt;127.0.0.1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e5f6cfffd4c81f627f867646cbb86920a00e082e" translate="yes" xml:space="preserve">
          <source>Default value changed to &lt;code&gt;'auto'&lt;/code&gt;.</source>
          <target state="translated">デフォルト値が &lt;code&gt;'auto'&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="fe49fd23159452f2b96e95562656691fc3338589" translate="yes" xml:space="preserve">
          <source>Defines a JavaScript class that corresponds to a C++ class, including:</source>
          <target state="translated">C++クラスに対応するJavaScriptクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="9257df6968cf1915a17cecc9f88fc09634336063" translate="yes" xml:space="preserve">
          <source>Delivers a JSON-formatted diagnostic summary, written to a file.</source>
          <target state="translated">ファイルに書き込まれた JSON 形式の診断サマリーを提供します。</target>
        </trans-unit>
        <trans-unit id="af94e20c59cdea7a140824e371ecc097bbc42162" translate="yes" xml:space="preserve">
          <source>Dependency Redirection</source>
          <target state="translated">依存関係のリダイレクション</target>
        </trans-unit>
        <trans-unit id="2ad89969675a37342c3edce7dd34d17b138dd004" translate="yes" xml:space="preserve">
          <source>Depending on the type of this &lt;code&gt;KeyObject&lt;/code&gt;, this property is either &lt;code&gt;'secret'&lt;/code&gt; for secret (symmetric) keys, &lt;code&gt;'public'&lt;/code&gt; for public (asymmetric) keys or &lt;code&gt;'private'&lt;/code&gt; for private (asymmetric) keys.</source>
          <target state="translated">このプロパティは、この &lt;code&gt;KeyObject&lt;/code&gt; のタイプに応じて、秘密（対称）鍵の場合は &lt;code&gt;'secret'&lt;/code&gt; &lt;code&gt;'public'&lt;/code&gt; 、公開（非対称）鍵の場合は「public」、秘密（非対称）鍵の場合は &lt;code&gt;'private'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="600c4c32abbd0e6044d374f8d9f63e6c5b81d165" translate="yes" xml:space="preserve">
          <source>Deprecated APIs</source>
          <target state="translated">非推奨API</target>
        </trans-unit>
        <trans-unit id="856ba5473ec8cad599babd8b0934d313f1280c7c" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;a href=&quot;#zlib_zlib_byteswritten&quot;&gt;&lt;code&gt;zlib.bytesWritten&lt;/code&gt;&lt;/a&gt;. This original name was chosen because it also made sense to interpret the value as the number of bytes read by the engine, but is inconsistent with other streams in Node.js that expose values under these names.</source>
          <target state="translated">&lt;a href=&quot;#zlib_zlib_byteswritten&quot;&gt; &lt;code&gt;zlib.bytesWritten&lt;/code&gt; の非&lt;/a&gt;推奨のエイリアス。この元の名前が選択されたのは、値をエンジンによって読み取られたバイト数として解釈することも理にかなっているが、これらの名前で値を公開するNode.jsの他のストリームと一貫性がないためです。</target>
        </trans-unit>
        <trans-unit id="5a619f68fe4b1d3a884749b6cf464e6db518ee00" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;a href=&quot;zlib#zlib_zlib_byteswritten&quot;&gt;&lt;code&gt;zlib.bytesWritten&lt;/code&gt;&lt;/a&gt;. This original name was chosen because it also made sense to interpret the value as the number of bytes read by the engine, but is inconsistent with other streams in Node.js that expose values under these names.</source>
          <target state="translated">&lt;a href=&quot;zlib#zlib_zlib_byteswritten&quot;&gt; &lt;code&gt;zlib.bytesWritten&lt;/code&gt; の非&lt;/a&gt;推奨のエイリアス。この元の名前が選択されたのは、値をエンジンによって読み取られたバイト数として解釈することも理にかなっているが、これらの名前で値を公開するNode.jsの他のストリームと一貫性がないためです。</target>
        </trans-unit>
        <trans-unit id="e5f14f30758d2d6ea9cffdbbb2368b6a0979cf24" translate="yes" xml:space="preserve">
          <source>Deprecated since: v0.11.3</source>
          <target state="translated">非推奨:v0.11.3 以降</target>
        </trans-unit>
        <trans-unit id="96caca7cbb6da35f4dc74ad4c0040a3cccc6913b" translate="yes" xml:space="preserve">
          <source>Deprecated since: v0.4.7</source>
          <target state="translated">非推奨:v0.4.7 以降</target>
        </trans-unit>
        <trans-unit id="9fb6f36ea3bca8d58a0d84de923aa82e392da25c" translate="yes" xml:space="preserve">
          <source>Deprecated since: v1.0.0</source>
          <target state="translated">非推奨:v1.0.0 以降</target>
        </trans-unit>
        <trans-unit id="348248ddaa1cdd44ecc61542cfb2f31b3cce5cc0" translate="yes" xml:space="preserve">
          <source>Deprecated since: v10.0.0</source>
          <target state="translated">非推奨:v10.0.0 以降</target>
        </trans-unit>
        <trans-unit id="7f34cfe1c36b6f9e54da751eab46e93397f90dde" translate="yes" xml:space="preserve">
          <source>Deprecated since: v6.0.0</source>
          <target state="translated">非推奨:v6.0.0 以降</target>
        </trans-unit>
        <trans-unit id="af394c36faf163331d10c99a2e57b822b425b09e" translate="yes" xml:space="preserve">
          <source>Deprecated since: v8.0.0</source>
          <target state="translated">非推奨:v8.0.0 以降</target>
        </trans-unit>
        <trans-unit id="a13790a7e95ef239db036f8c379c072a4a060e84" translate="yes" xml:space="preserve">
          <source>Deprecation revoked.</source>
          <target state="translated">非推奨は取り消されました。</target>
        </trans-unit>
        <trans-unit id="0f6862149419ae85aefe710a80687791c97c3ca0" translate="yes" xml:space="preserve">
          <source>Deprecation warnings are only emitted once for each code.</source>
          <target state="translated">非推奨の警告は、各コードに対して一度しか出ません。</target>
        </trans-unit>
        <trans-unit id="b4fa06040f1d56075d73067a758963f828e1fd68" translate="yes" xml:space="preserve">
          <source>Describes the type of a &lt;code&gt;napi_value&lt;/code&gt;. This generally corresponds to the types described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types&quot;&gt;Section 6.1&lt;/a&gt; of the ECMAScript Language Specification. In addition to types in that section, &lt;code&gt;napi_valuetype&lt;/code&gt; can also represent &lt;code&gt;Function&lt;/code&gt;s and &lt;code&gt;Object&lt;/code&gt;s with external data.</source>
          <target state="translated">&lt;code&gt;napi_value&lt;/code&gt; のタイプを説明します。これは通常、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types&quot;&gt;セクション6.1&lt;/a&gt;で説明されているタイプに対応しています。そのセクションのタイプに加えて、 &lt;code&gt;napi_valuetype&lt;/code&gt; は外部データを使用して &lt;code&gt;Function&lt;/code&gt; と &lt;code&gt;Object&lt;/code&gt; を表すこともできます。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="390047beac1da6b367244db62abe0220afd7c230" translate="yes" xml:space="preserve">
          <source>Deserializes a JavaScript value from the buffer and returns it.</source>
          <target state="translated">バッファからJavaScriptの値をデシリアライズして返します。</target>
        </trans-unit>
        <trans-unit id="5495661e23dc306b26bbde2187f1921cea74ae29" translate="yes" xml:space="preserve">
          <source>Design and Features</source>
          <target state="translated">デザインと特徴</target>
        </trans-unit>
        <trans-unit id="b591adba6e7c7194700046fc3eadaee15957b5a3" translate="yes" xml:space="preserve">
          <source>Despite the relative order of TLSv1.3 and TLSv1.2 cipher suites, the TLSv1.3 protocol is significantly more secure than TLSv1.2, and will always be chosen over TLSv1.2 if the handshake indicates it is supported, and if any TLSv1.3 cipher suites are enabled.</source>
          <target state="translated">TLSv1.3 と TLSv1.2 の暗号スイートの相対的な順序にもかかわらず、TLSv1.3 プロトコルは TLSv1.2 よりもはるかに安全であり、ハンドシェイクでサポートされていることが示され、TLSv1.3 暗号スイートが有効になっている場合には、常に TLSv1.2 よりも TLSv1.3 が選択されることになります。</target>
        </trans-unit>
        <trans-unit id="8e562a55abd1f8392c45d5ede015d3aa4a2ec026" translate="yes" xml:space="preserve">
          <source>Destroy any sockets that are currently in use by the agent.</source>
          <target state="translated">エージェントが現在使用しているソケットをすべて破棄します。</target>
        </trans-unit>
        <trans-unit id="0d55748d3853459e04c56e204bca37704361aa9e" translate="yes" xml:space="preserve">
          <source>Destroy the stream, and optionally emit an &lt;code&gt;'error'&lt;/code&gt; event. After this call, the transform stream would release any internal resources. Implementors should not override this method, but instead implement &lt;a href=&quot;#stream_readable_destroy_err_callback&quot;&gt;&lt;code&gt;readable._destroy()&lt;/code&gt;&lt;/a&gt;. The default implementation of &lt;code&gt;_destroy()&lt;/code&gt; for &lt;code&gt;Transform&lt;/code&gt; also emit &lt;code&gt;'close'&lt;/code&gt; unless &lt;code&gt;emitClose&lt;/code&gt; is set in false.</source>
          <target state="translated">ストリームを破棄し、オプションで &lt;code&gt;'error'&lt;/code&gt; イベントを発行します。この呼び出しの後、変換ストリームはすべての内部リソースを解放します。実装者は、このメソッドをオーバーライドするのではなく、代わりに&lt;a href=&quot;#stream_readable_destroy_err_callback&quot;&gt; &lt;code&gt;readable._destroy()&lt;/code&gt; を&lt;/a&gt;実装してください。デフォルトの実装 &lt;code&gt;_destroy()&lt;/code&gt; のための &lt;code&gt;Transform&lt;/code&gt; も発する &lt;code&gt;'close'&lt;/code&gt; しない限り、 &lt;code&gt;emitClose&lt;/code&gt; が偽に設定されています。</target>
        </trans-unit>
        <trans-unit id="f9f81f51d0cb8e795613293bf800bce11c40f041" translate="yes" xml:space="preserve">
          <source>Destroy the stream. Optionally emit an &lt;code&gt;'error'&lt;/code&gt; event, and emit a &lt;code&gt;'close'&lt;/code&gt; event unless &lt;code&gt;emitClose&lt;/code&gt; is set in &lt;code&gt;false&lt;/code&gt;. After this call, the readable stream will release any internal resources and subsequent calls to &lt;code&gt;push()&lt;/code&gt; will be ignored. Implementors should not override this method, but instead implement &lt;a href=&quot;#stream_readable_destroy_err_callback&quot;&gt;&lt;code&gt;readable._destroy()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ストリームを破棄します。オプションで、 &lt;code&gt;'error'&lt;/code&gt; イベントを &lt;code&gt;emitClose&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されていない限り、 &lt;code&gt;'close'&lt;/code&gt; イベントを発行します。この呼び出しの後、読み取り可能なストリームはすべての内部リソースを解放し、その後の &lt;code&gt;push()&lt;/code&gt; の呼び出しは無視されます。実装者は、このメソッドをオーバーライドするのではなく、代わりに&lt;a href=&quot;#stream_readable_destroy_err_callback&quot;&gt; &lt;code&gt;readable._destroy()&lt;/code&gt; を&lt;/a&gt;実装してください。</target>
        </trans-unit>
        <trans-unit id="de4e0dc9611878d625675a232ffdbc2edc54da75" translate="yes" xml:space="preserve">
          <source>Destroy the stream. Optionally emit an &lt;code&gt;'error'&lt;/code&gt; event, and emit a &lt;code&gt;'close'&lt;/code&gt; event unless &lt;code&gt;emitClose&lt;/code&gt; is set in &lt;code&gt;false&lt;/code&gt;. After this call, the writable stream has ended and subsequent calls to &lt;code&gt;write()&lt;/code&gt; or &lt;code&gt;end()&lt;/code&gt; will result in an &lt;code&gt;ERR_STREAM_DESTROYED&lt;/code&gt; error. This is a destructive and immediate way to destroy a stream. Previous calls to &lt;code&gt;write()&lt;/code&gt; may not have drained, and may trigger an &lt;code&gt;ERR_STREAM_DESTROYED&lt;/code&gt; error. Use &lt;code&gt;end()&lt;/code&gt; instead of destroy if data should flush before close, or wait for the &lt;code&gt;'drain'&lt;/code&gt; event before destroying the stream. Implementors should not override this method, but instead implement &lt;a href=&quot;#stream_writable_destroy_err_callback&quot;&gt;&lt;code&gt;writable._destroy()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ストリームを破棄します。オプションで、 &lt;code&gt;'error'&lt;/code&gt; イベントを &lt;code&gt;emitClose&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されていない限り、 &lt;code&gt;'close'&lt;/code&gt; イベントを発行します。この呼び出しの後、書き込み可能なストリームは終了し、その後の &lt;code&gt;write()&lt;/code&gt; または &lt;code&gt;end()&lt;/code&gt; の呼び出しは、 &lt;code&gt;ERR_STREAM_DESTROYED&lt;/code&gt; エラーになります。これは、ストリームを破壊するための破壊的かつ即時的な方法です。以前の &lt;code&gt;write()&lt;/code&gt; の呼び出しはドレインされていない可能性があり、 &lt;code&gt;ERR_STREAM_DESTROYED&lt;/code&gt; エラーをトリガーする可能性があります。データを閉じる前にフラッシュするか、 &lt;code&gt;'drain'&lt;/code&gt; 待つ場合は、destroyではなく &lt;code&gt;end()&lt;/code&gt; を使用してください。ストリームを破棄する前のイベント。実装者はこのメソッドをオーバーライドするのではなく、代わりに&lt;a href=&quot;#stream_writable_destroy_err_callback&quot;&gt; &lt;code&gt;writable._destroy()&lt;/code&gt; を&lt;/a&gt;実装してください。</target>
        </trans-unit>
        <trans-unit id="d5c53e3e08d26edb69d4944cdf8d485692edcbd8" translate="yes" xml:space="preserve">
          <source>Destruction</source>
          <target state="translated">Destruction</target>
        </trans-unit>
        <trans-unit id="4ce4d86c1f0b4dbb39f3e561e11c722c13ddd153" translate="yes" xml:space="preserve">
          <source>Detecting internationalization support</source>
          <target state="translated">国際化支援の検出</target>
        </trans-unit>
        <trans-unit id="74c236e3e380215e434be32968bce04a96089402" translate="yes" xml:space="preserve">
          <source>Determines the actual location of &lt;code&gt;path&lt;/code&gt; using the same semantics as the &lt;code&gt;fs.realpath.native()&lt;/code&gt; function then resolves the &lt;code&gt;Promise&lt;/code&gt; with the resolved path.</source>
          <target state="translated">&lt;code&gt;fs.realpath.native()&lt;/code&gt; 関数と同じセマンティクスを使用して &lt;code&gt;path&lt;/code&gt; の実際の場所を決定し、解決されたパスで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="d6b4e96fbd4121828c8906a0d25bec18c4d3ff18" translate="yes" xml:space="preserve">
          <source>Determining if crypto support is unavailable</source>
          <target state="translated">crypto サポートが利用できないかどうかの判断</target>
        </trans-unit>
        <trans-unit id="657dfd8a592244058d554d1320ac76115aa9348e" translate="yes" xml:space="preserve">
          <source>Developers must refer to the documentation for each method to determine exactly how errors raised by those methods are propagated.</source>
          <target state="translated">開発者は、各メソッドで発生したエラーがどのように伝搬されるかについては、各メソッドのドキュメントを参照しなければなりません。</target>
        </trans-unit>
        <trans-unit id="794c3450aca7c08c20339961c0afae2d85c80657" translate="yes" xml:space="preserve">
          <source>Developers using &lt;code&gt;stream.unshift()&lt;/code&gt; often should consider switching to use of a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream instead. See the &lt;a href=&quot;#stream_api_for_stream_implementers&quot;&gt;API for Stream Implementers&lt;/a&gt; section for more information.</source>
          <target state="translated">&lt;code&gt;stream.unshift()&lt;/code&gt; を使用する開発者は、代わりに&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;ストリームの使用に切り替えることを検討する必要があります。詳細については&lt;a href=&quot;#stream_api_for_stream_implementers&quot;&gt;、Stream Implementers&lt;/a&gt;のAPIセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c674911d78ae8caa68c1cce359bdddf80007790b" translate="yes" xml:space="preserve">
          <source>Developers wishing to implement new types of streams should refer to the section &lt;a href=&quot;#stream_api_for_stream_implementers&quot;&gt;API for Stream Implementers&lt;/a&gt;.</source>
          <target state="translated">新しいタイプのストリームを実装したい開発者は&lt;a href=&quot;#stream_api_for_stream_implementers&quot;&gt;、ストリームインプリメンターのAPI&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="64037b21ea56c6e5525dd26f5aff682f2f9de92f" translate="yes" xml:space="preserve">
          <source>Diagnostic Report</source>
          <target state="translated">診断レポート</target>
        </trans-unit>
        <trans-unit id="0ba3cd50a4935725c184aeea695f21c734322da5" translate="yes" xml:space="preserve">
          <source>Differences Between ES Modules and CommonJS</source>
          <target state="translated">ESモジュールとCommonJSの違い</target>
        </trans-unit>
        <trans-unit id="59fd3b625177917302e96344be83f7d7839d835e" translate="yes" xml:space="preserve">
          <source>Different Node.js build configurations support different sets of encodings. While a very basic set of encodings is supported even on Node.js builds without ICU enabled, support for some encodings is provided only when Node.js is built with ICU and using the full ICU data (see &lt;a href=&quot;intl&quot;&gt;Internationalization&lt;/a&gt;).</source>
          <target state="translated">Node.jsビルド構成が異なると、サポートするエンコードのセットも異なります。ICUが有効になっていないNode.jsビルドでも非常に基本的なエンコーディングのセットがサポートされますが、一部のエンコーディングのサポートは、Node.jsがICUでビルドされ、完全なICUデータを使用する場合にのみ提供されます（&lt;a href=&quot;intl&quot;&gt;国際化を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="29733e6a0edb35cb4cc40ee1e4bd280c24a5b978" translate="yes" xml:space="preserve">
          <source>DiffieHellman</source>
          <target state="translated">DiffieHellman</target>
        </trans-unit>
        <trans-unit id="409d5ac9ec42b5899b0cddc8061499a5e1dc3a5d" translate="yes" xml:space="preserve">
          <source>DiffieHellmanGroup</source>
          <target state="translated">DiffieHellmanGroup</target>
        </trans-unit>
        <trans-unit id="5bfc4cb8137a344c838d00c80f7bb716ee159960" translate="yes" xml:space="preserve">
          <source>Directory where the report is written. The default value is the empty string, indicating that reports are written to the current working directory of the Node.js process.</source>
          <target state="translated">レポートが書き込まれるディレクトリ。デフォルト値は空の文字列で、レポートがNode.jsプロセスの現在の作業ディレクトリに書き込まれることを示します。</target>
        </trans-unit>
        <trans-unit id="21a03b65103aaf1e2642a9af8880d72bb4394301" translate="yes" xml:space="preserve">
          <source>Disable all internationalization features (&lt;code&gt;none&lt;/code&gt;)</source>
          <target state="translated">すべての国際化機能を無効にする（ &lt;code&gt;none&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8035fc62f2dc02d49d71bd1c011755912f6c6931" translate="yes" xml:space="preserve">
          <source>Disable the callbacks for a given &lt;code&gt;AsyncHook&lt;/code&gt; instance from the global pool of &lt;code&gt;AsyncHook&lt;/code&gt; callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.</source>
          <target state="translated">実行する &lt;code&gt;AsyncHook&lt;/code&gt; コールバックのグローバルプールから、特定の &lt;code&gt;AsyncHook&lt;/code&gt; インスタンスのコールバックを無効にします。フックが無効になると、有効になるまで再度呼び出されません。</target>
        </trans-unit>
        <trans-unit id="4bef3ed63631c6ef55e8b35b275b558fbb6c513e" translate="yes" xml:space="preserve">
          <source>Disables TLS renegotiation for this &lt;code&gt;TLSSocket&lt;/code&gt; instance. Once called, attempts to renegotiate will trigger an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;TLSSocket&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;TLSSocket&lt;/code&gt; インスタンスのTLS再ネゴシエーションを無効にします。呼び出されると、再ネゴシエーションを試みると、 &lt;code&gt;TLSSocket&lt;/code&gt; で &lt;code&gt;'error'&lt;/code&gt; イベントがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="581ffffd0cffddbf71f48e75fd414588f5c4122a" translate="yes" xml:space="preserve">
          <source>Disables further sending of messages on either side of the connection. This method can be called when no further communication will happen over this &lt;code&gt;MessagePort&lt;/code&gt;.</source>
          <target state="translated">接続のどちらの側でもメッセージの送信を無効にします。このメソッドは、この &lt;code&gt;MessagePort&lt;/code&gt; を介してそれ以上通信が行われないときに呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5a03e9900f2b53c087e219c2ed21f070f7dd8e0d" translate="yes" xml:space="preserve">
          <source>Disables runtime checks for &lt;code&gt;async_hooks&lt;/code&gt;. These will still be enabled dynamically when &lt;code&gt;async_hooks&lt;/code&gt; is enabled.</source>
          <target state="translated">&lt;code&gt;async_hooks&lt;/code&gt; のランタイムチェックを無効にします。これらは、 &lt;code&gt;async_hooks&lt;/code&gt; が有効な場合でも動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="98acc2aa0330465a519c397c8cb101e49add5d78" translate="yes" xml:space="preserve">
          <source>Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;noDelay&lt;/code&gt; will immediately fire off data each time &lt;code&gt;socket.write()&lt;/code&gt; is called.</source>
          <target state="translated">Nagleアルゴリズムを無効にします。デフォルトでは、TCP接続はNagleアルゴリズムを使用し、送信前にデータをバッファーに入れます。 &lt;code&gt;noDelay&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; を設定すると、 &lt;code&gt;socket.write()&lt;/code&gt; が呼び出されるたびにデータが即座に起動されます。</target>
        </trans-unit>
        <trans-unit id="c159ecfde59c900c84757a3d0d279ad56de1879b" translate="yes" xml:space="preserve">
          <source>Disables the event loop delay sample timer. Returns &lt;code&gt;true&lt;/code&gt; if the timer was stopped, &lt;code&gt;false&lt;/code&gt; if it was already stopped.</source>
          <target state="translated">イベントループ遅延サンプルタイマーを無効にします。タイマーが停止した場合は &lt;code&gt;true&lt;/code&gt; を返し、すでに停止している場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="73d783e69f131827123e53208ae2f3f27f94f5a0" translate="yes" xml:space="preserve">
          <source>Disables this &lt;code&gt;Tracing&lt;/code&gt; object.</source>
          <target state="translated">この &lt;code&gt;Tracing&lt;/code&gt; オブジェクトを無効にします。</target>
        </trans-unit>
        <trans-unit id="de7fb4726a63453ee9afeefcce30af41754052b2" translate="yes" xml:space="preserve">
          <source>Disabling color support is also possible by using the &lt;code&gt;NO_COLOR&lt;/code&gt; and &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables.</source>
          <target state="translated">&lt;code&gt;NO_COLOR&lt;/code&gt; および &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; 環境変数を使用して、カラーサポートを無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="bfef358031c3cfcd8e47f2b92d64b1361c9a172f" translate="yes" xml:space="preserve">
          <source>Disconnects the &lt;code&gt;PerformanceObserver&lt;/code&gt; instance from all notifications.</source>
          <target state="translated">すべての通知から &lt;code&gt;PerformanceObserver&lt;/code&gt; インスタンスを切断します。</target>
        </trans-unit>
        <trans-unit id="fb39337855578963549c4963a96410ae1fdabd92" translate="yes" xml:space="preserve">
          <source>Do not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes.</source>
          <target state="translated">拡張情報の内容や形式はSemVerの対象外であり、随時変更される可能性があるため、これらに依存しないでください。また、ログの記録のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="4a70c21a815eb80311127275f07365f1d1bc9e27" translate="yes" xml:space="preserve">
          <source>Documentation-only</source>
          <target state="translated">Documentation-only</target>
        </trans-unit>
        <trans-unit id="44dd587a15ce2123ce78b5f4738dc74587ed0c18" translate="yes" xml:space="preserve">
          <source>Documentation-only deprecation.</source>
          <target state="translated">ドキュメントのみの非推奨。</target>
        </trans-unit>
        <trans-unit id="bf7e5326727c13d46f6921d75a79c20dcde73667" translate="yes" xml:space="preserve">
          <source>Documentation-only.</source>
          <target state="translated">Documentation-only.</target>
        </trans-unit>
        <trans-unit id="9b10914d8b0a097ace7176e8973f5c3dee92bb44" translate="yes" xml:space="preserve">
          <source>Domain</source>
          <target state="translated">Domain</target>
        </trans-unit>
        <trans-unit id="35f786c43913fd6752ceb11754048b3b2fda027e" translate="yes" xml:space="preserve">
          <source>Domain error handlers are not a substitute for closing down a process when an error occurs.</source>
          <target state="translated">ドメインエラーハンドラは、エラーが発生したときにプロセスを閉じる代わりにはなりません。</target>
        </trans-unit>
        <trans-unit id="3f61a99801e80f3c961e144ae6393cf083130286" translate="yes" xml:space="preserve">
          <source>Domains and Promises</source>
          <target state="translated">ドメインと約束</target>
        </trans-unit>
        <trans-unit id="6614285a545c400bf4bf81e0524c4ff4ba840035" translate="yes" xml:space="preserve">
          <source>Domains provide a way to handle multiple different IO operations as a single group. If any of the event emitters or callbacks registered to a domain emit an &lt;code&gt;'error'&lt;/code&gt; event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the &lt;code&gt;process.on('uncaughtException')&lt;/code&gt; handler, or causing the program to exit immediately with an error code.</source>
          <target state="translated">ドメインは、複数の異なるIO操作を単一のグループとして処理する方法を提供します。ドメインに登録されているイベントエミッターまたはコールバックのいずれかが &lt;code&gt;'error'&lt;/code&gt; イベントを発行するか、エラーをスローした場合、 &lt;code&gt;process.on('uncaughtException')&lt;/code&gt; 内のエラーのコンテキストを失うのではなく、ドメインオブジェクトに通知されます。on（ 'uncaughtException'）ハンドラー、またはエラーコードでプログラムをすぐに終了させます。</target>
        </trans-unit>
        <trans-unit id="888326864daa93338bf319489bbf11bdf6ec4dcd" translate="yes" xml:space="preserve">
          <source>Domains will not interfere with the error handling mechanisms for Promises. In other words, no &lt;code&gt;'error'&lt;/code&gt; event will be emitted for unhandled &lt;code&gt;Promise&lt;/code&gt; rejections.</source>
          <target state="translated">ドメインはPromiseのエラー処理メカニズムを妨害しません。言い換えると、未処理の &lt;code&gt;Promise&lt;/code&gt; 拒否に対して &lt;code&gt;'error'&lt;/code&gt; イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="21053d27055f82d2d0f7195192f568f593259389" translate="yes" xml:space="preserve">
          <source>Don't call &lt;code&gt;server.address()&lt;/code&gt; until the &lt;code&gt;'listening'&lt;/code&gt; event has been emitted.</source>
          <target state="translated">&lt;code&gt;'listening'&lt;/code&gt; イベントが発生するまで &lt;code&gt;server.address()&lt;/code&gt; を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="b9a3ac0ca62253a0bb3f6fbad18fa05f3fd5dabb" translate="yes" xml:space="preserve">
          <source>Due to the confusing notation, it is recommended not to use a string as the second argument. This might lead to difficult-to-spot errors.</source>
          <target state="translated">紛らわしい表記のため、第二引数に文字列を使用しないことをお勧めします。これは、見つけにくいエラーを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="fa4613df630b7614199b7d7f77b3ae2b2f825722" translate="yes" xml:space="preserve">
          <source>Duplex and Transform Streams</source>
          <target state="translated">デュプレックスおよびトランスフォームストリーム</target>
        </trans-unit>
        <trans-unit id="255bb45b988270dacd723293be3b8d4e7f8f6dca" translate="yes" xml:space="preserve">
          <source>Duplex streams are streams that implement both the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="translated">デュプレックスストリームは、&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;インターフェイスと書き込み可能インターフェイスの両方を実装するストリームです。</target>
        </trans-unit>
        <trans-unit id="004b25ba47ebda8431a821487a590e19f4c9f306" translate="yes" xml:space="preserve">
          <source>Duplicate keys are allowed.</source>
          <target state="translated">鍵の重複は許可されています。</target>
        </trans-unit>
        <trans-unit id="80e1e446529af320900f6303313e2532650b7332" translate="yes" xml:space="preserve">
          <source>Duplicates in raw headers are handled in the following ways, depending on the header name:</source>
          <target state="translated">生のヘッダ内の重複は、ヘッダ名に応じて以下の方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="cc9b5efdf24b88e5ce195071d356a02a0de772c9" translate="yes" xml:space="preserve">
          <source>Duplicates of &lt;code&gt;:status&lt;/code&gt;, &lt;code&gt;:method&lt;/code&gt;, &lt;code&gt;:authority&lt;/code&gt;, &lt;code&gt;:scheme&lt;/code&gt;, &lt;code&gt;:path&lt;/code&gt;, &lt;code&gt;:protocol&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;authorization&lt;/code&gt;, &lt;code&gt;access-control-allow-credentials&lt;/code&gt;, &lt;code&gt;access-control-max-age&lt;/code&gt;, &lt;code&gt;access-control-request-method&lt;/code&gt;, &lt;code&gt;content-encoding&lt;/code&gt;, &lt;code&gt;content-language&lt;/code&gt;, &lt;code&gt;content-length&lt;/code&gt;, &lt;code&gt;content-location&lt;/code&gt;, &lt;code&gt;content-md5&lt;/code&gt;, &lt;code&gt;content-range&lt;/code&gt;, &lt;code&gt;content-type&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;dnt&lt;/code&gt;, &lt;code&gt;etag&lt;/code&gt;, &lt;code&gt;expires&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;if-match&lt;/code&gt;, &lt;code&gt;if-modified-since&lt;/code&gt;, &lt;code&gt;if-none-match&lt;/code&gt;, &lt;code&gt;if-range&lt;/code&gt;, &lt;code&gt;if-unmodified-since&lt;/code&gt;, &lt;code&gt;last-modified&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;max-forwards&lt;/code&gt;, &lt;code&gt;proxy-authorization&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;referer&lt;/code&gt;,&lt;code&gt;retry-after&lt;/code&gt;, &lt;code&gt;tk&lt;/code&gt;, &lt;code&gt;upgrade-insecure-requests&lt;/code&gt;, &lt;code&gt;user-agent&lt;/code&gt; or &lt;code&gt;x-content-type-options&lt;/code&gt; are discarded.</source>
          <target state="translated">重複 &lt;code&gt;:status&lt;/code&gt; 、 &lt;code&gt;:method&lt;/code&gt; 、 &lt;code&gt;:authority&lt;/code&gt; 、 &lt;code&gt;:scheme&lt;/code&gt; 、 &lt;code&gt;:path&lt;/code&gt; 、 &lt;code&gt;:protocol&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; 、 &lt;code&gt;authorization&lt;/code&gt; 、 &lt;code&gt;access-control-allow-credentials&lt;/code&gt; 、 &lt;code&gt;access-control-max-age&lt;/code&gt; 、 &lt;code&gt;access-control-request-method&lt;/code&gt; 、 &lt;code&gt;content-encoding&lt;/code&gt; 、 &lt;code&gt;content-language&lt;/code&gt; 、 &lt;code&gt;content-length&lt;/code&gt; 、 &lt;code&gt;content-location&lt;/code&gt; 、 &lt;code&gt;content-md5&lt;/code&gt; 、 &lt;code&gt;content-range&lt;/code&gt; 、 &lt;code&gt;content-type&lt;/code&gt; 、 &lt;code&gt;date&lt;/code&gt; 、 &lt;code&gt;dnt&lt;/code&gt; 、 &lt;code&gt;etag&lt;/code&gt; 、 &lt;code&gt;expires&lt;/code&gt; 、 &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;if-match&lt;/code&gt; 、 &lt;code&gt;if-modified-since&lt;/code&gt; 、 &lt;code&gt;if-none-match&lt;/code&gt; 、 &lt;code&gt;if-range&lt;/code&gt; 、 &lt;code&gt;if-unmodified-since&lt;/code&gt; 、 &lt;code&gt;last-modified&lt;/code&gt; 、 &lt;code&gt;location&lt;/code&gt; 、 &lt;code&gt;max-forwards&lt;/code&gt; 、 &lt;code&gt;proxy-authorization&lt;/code&gt; 、 &lt;code&gt;range&lt;/code&gt; 、 &lt;code&gt;referer&lt;/code&gt; 、 &lt;code&gt;retry-after&lt;/code&gt; 、 &lt;code&gt;tk&lt;/code&gt; 、 &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; 、 &lt;code&gt;user-agent&lt;/code&gt; または &lt;code&gt;x-content-type-options&lt;/code&gt; は破棄されます。</target>
        </trans-unit>
        <trans-unit id="e1d675e92eb30287a6b88d70b41e44ab6f8dcbc2" translate="yes" xml:space="preserve">
          <source>Duplicates of &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;authorization&lt;/code&gt;, &lt;code&gt;content-length&lt;/code&gt;, &lt;code&gt;content-type&lt;/code&gt;, &lt;code&gt;etag&lt;/code&gt;, &lt;code&gt;expires&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;if-modified-since&lt;/code&gt;, &lt;code&gt;if-unmodified-since&lt;/code&gt;, &lt;code&gt;last-modified&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;max-forwards&lt;/code&gt;, &lt;code&gt;proxy-authorization&lt;/code&gt;, &lt;code&gt;referer&lt;/code&gt;, &lt;code&gt;retry-after&lt;/code&gt;, or &lt;code&gt;user-agent&lt;/code&gt; are discarded.</source>
          <target state="translated">重複 &lt;code&gt;age&lt;/code&gt; 、 &lt;code&gt;authorization&lt;/code&gt; 、 &lt;code&gt;content-length&lt;/code&gt; 、 &lt;code&gt;content-type&lt;/code&gt; 、 &lt;code&gt;etag&lt;/code&gt; 、 &lt;code&gt;expires&lt;/code&gt; 、 &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;if-modified-since&lt;/code&gt; 、 &lt;code&gt;if-unmodified-since&lt;/code&gt; 、 &lt;code&gt;last-modified&lt;/code&gt; 、 &lt;code&gt;location&lt;/code&gt; 、 &lt;code&gt;max-forwards&lt;/code&gt; 、 &lt;code&gt;proxy-authorization&lt;/code&gt; 、 &lt;code&gt;referer&lt;/code&gt; 、 &lt;code&gt;retry-after&lt;/code&gt; または &lt;code&gt;user-agent&lt;/code&gt; は破棄されます。</target>
        </trans-unit>
        <trans-unit id="33b8aeb01097401c77ab71b3cf438522291c651c" translate="yes" xml:space="preserve">
          <source>During the &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event, one can add listeners to the response object; particularly to listen for the &lt;code&gt;'data'&lt;/code&gt; event.</source>
          <target state="translated">&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;イベント中に、リスナーを応答オブジェクトに追加できます。特に &lt;code&gt;'data'&lt;/code&gt; イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="dc077acf6f95a3e8824118b666d018d947ceeff8" translate="yes" xml:space="preserve">
          <source>Dynamic &lt;code&gt;import()&lt;/code&gt; is supported in both CommonJS and ES modules. It can be used to include ES module files from CommonJS code.</source>
          <target state="translated">動的 &lt;code&gt;import()&lt;/code&gt; はCommonJSとESモジュールの両方でサポートされています。CommonJSコードからESモジュールファイルを含めるために使用できます。</target>
        </trans-unit>
        <trans-unit id="0954f87308a8410ef97b9aff9d04f7e1bc6dafe2" translate="yes" xml:space="preserve">
          <source>Dynamic instantiate hook</source>
          <target state="translated">ダイナミックインスタンシエートフック</target>
        </trans-unit>
        <trans-unit id="370c5248a318d69e94070d5e36c62b581ab0b5e3" translate="yes" xml:space="preserve">
          <source>Dynamically update the compression level and compression strategy. Only applicable to deflate algorithm.</source>
          <target state="translated">圧縮レベルと圧縮戦略を動的に更新します。デフレートアルゴリズムにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="d9946cf9424837cc9e4582083e3465c72fdf1cb9" translate="yes" xml:space="preserve">
          <source>ECDH</source>
          <target state="translated">ECDH</target>
        </trans-unit>
        <trans-unit id="8d5ae855b245854a9486a29c685e9c12f8f271fd" translate="yes" xml:space="preserve">
          <source>ECDH.convertKey()</source>
          <target state="translated">ECDH.convertKey()</target>
        </trans-unit>
        <trans-unit id="7880aae07f8933a1f52d7d459bf18866fb8beb73" translate="yes" xml:space="preserve">
          <source>ECMAScript Modules</source>
          <target state="translated">ECMAScript モジュール</target>
        </trans-unit>
        <trans-unit id="34ea73b41a89c80ddd3041575cb44a7f83077544" translate="yes" xml:space="preserve">
          <source>ECMAScript modules are &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-modules&quot;&gt;the official standard format&lt;/a&gt; to package JavaScript code for reuse. Modules are defined using a variety of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statements.</source>
          <target state="translated">ECMAScriptモジュールは&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-modules&quot;&gt;、&lt;/a&gt;再利用のためにJavaScriptコードをパッケージ化する公式の標準形式です。モジュールは、さまざまな&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;ステートメントを使用して定義されます。</target>
        </trans-unit>
        <trans-unit id="c2d677248c5b0a6bfd2247da65d793af22c4cb66" translate="yes" xml:space="preserve">
          <source>ERR_AMBIGUOUS_ARGUMENT</source>
          <target state="translated">ERR_AMBIGUOUS_ARGUMENT</target>
        </trans-unit>
        <trans-unit id="86bbca81f0be1485de435fae0b52eadc8541e0ec" translate="yes" xml:space="preserve">
          <source>ERR_ARG_NOT_ITERABLE</source>
          <target state="translated">ERR_ARG_NOT_ITERABLE</target>
        </trans-unit>
        <trans-unit id="8a9d678f86d7053f6d8c7a1e7b8238bc10f27315" translate="yes" xml:space="preserve">
          <source>ERR_ASSERTION</source>
          <target state="translated">ERR_ASSERTION</target>
        </trans-unit>
        <trans-unit id="e94e4c5690274f399c9acec74f381892212a3557" translate="yes" xml:space="preserve">
          <source>ERR_ASYNC_CALLBACK</source>
          <target state="translated">ERR_ASYNC_CALLBACK</target>
        </trans-unit>
        <trans-unit id="dcf695e5585567115223e3f768008698f8cd233c" translate="yes" xml:space="preserve">
          <source>ERR_ASYNC_TYPE</source>
          <target state="translated">ERR_ASYNC_TYPE</target>
        </trans-unit>
        <trans-unit id="ce67e8240a0d852115f644932b9f936cbd2aa37f" translate="yes" xml:space="preserve">
          <source>ERR_BROTLI_COMPRESSION_FAILED</source>
          <target state="translated">ERR_BROTLI_COMPRESSION_FAILED</target>
        </trans-unit>
        <trans-unit id="6ec3da60c1507b83a1eb8a9eab968246a0596be2" translate="yes" xml:space="preserve">
          <source>ERR_BROTLI_INVALID_PARAM</source>
          <target state="translated">ERR_BROTLI_INVALID_PARAM</target>
        </trans-unit>
        <trans-unit id="68d2826dd91d7ce41f50e78b001ee4d60bc5cd38" translate="yes" xml:space="preserve">
          <source>ERR_BUFFER_CONTEXT_NOT_AVAILABLE</source>
          <target state="translated">ERR_BUFFER_CONTEXT_NOT_AVAILABLE</target>
        </trans-unit>
        <trans-unit id="1f447b4e78386c090b0137afbe160e3e7be3185c" translate="yes" xml:space="preserve">
          <source>ERR_BUFFER_OUT_OF_BOUNDS</source>
          <target state="translated">ERR_BUFFER_OUT_OF_BOUNDS</target>
        </trans-unit>
        <trans-unit id="6fd025abe161047ef401ebd09c50703f87daaf9a" translate="yes" xml:space="preserve">
          <source>ERR_BUFFER_TOO_LARGE</source>
          <target state="translated">ERR_BUFFER_TOO_LARGE</target>
        </trans-unit>
        <trans-unit id="0050d27b0c01d934334588e2505034a002479b65" translate="yes" xml:space="preserve">
          <source>ERR_CANNOT_TRANSFER_OBJECT</source>
          <target state="translated">ERR_CANNOT_TRANSFER_OBJECT</target>
        </trans-unit>
        <trans-unit id="0611ca8a7212ca6f502457a686f4ce009cbc47c3" translate="yes" xml:space="preserve">
          <source>ERR_CANNOT_WATCH_SIGINT</source>
          <target state="translated">ERR_CANNOT_WATCH_SIGINT</target>
        </trans-unit>
        <trans-unit id="30d2822c6a2c6a34adacf783302ac9f3253cf0e4" translate="yes" xml:space="preserve">
          <source>ERR_CHILD_CLOSED_BEFORE_REPLY</source>
          <target state="translated">ERR_CHILD_CLOSED_BEFORE_REPLY</target>
        </trans-unit>
        <trans-unit id="a1fab4baa42bdc6262876b109d99e41e12e21f25" translate="yes" xml:space="preserve">
          <source>ERR_CHILD_PROCESS_IPC_REQUIRED</source>
          <target state="translated">ERR_CHILD_PROCESS_IPC_REQUIRED</target>
        </trans-unit>
        <trans-unit id="770696566bf8ae46d4d932a7ba4845ed86399c7b" translate="yes" xml:space="preserve">
          <source>ERR_CHILD_PROCESS_STDIO_MAXBUFFER</source>
          <target state="translated">ERR_CHILD_PROCESS_STDIO_MAXBUFFER</target>
        </trans-unit>
        <trans-unit id="aa7925bc0a1bb709a9c84cf0d1ed99d56527b2a7" translate="yes" xml:space="preserve">
          <source>ERR_CLOSED_MESSAGE_PORT</source>
          <target state="translated">ERR_CLOSED_MESSAGE_PORT</target>
        </trans-unit>
        <trans-unit id="7bda6043e616813c71984e4b5399f72b1c0424c2" translate="yes" xml:space="preserve">
          <source>ERR_CONSOLE_WRITABLE_STREAM</source>
          <target state="translated">ERR_CONSOLE_WRITABLE_STREAM</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
