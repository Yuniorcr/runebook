<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="ecfed31ae4afe696ad0187f8d5a4df3436474fff" translate="yes" xml:space="preserve">
          <source>The actual call into JavaScript is controlled by the callback given via the &lt;code&gt;call_js_cb&lt;/code&gt; parameter. &lt;code&gt;call_js_cb&lt;/code&gt; is invoked on the main thread once for each value that was placed into the queue by a successful call to &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;. If such a callback is not given, a default callback will be used, and the resulting JavaScript call will have no arguments. The &lt;code&gt;call_js_cb&lt;/code&gt; callback receives the JavaScript function to call as a &lt;code&gt;napi_value&lt;/code&gt; in its parameters, as well as the &lt;code&gt;void*&lt;/code&gt; context pointer used when creating the &lt;code&gt;napi_threadsafe_function&lt;/code&gt;, and the next data pointer that was created by one of the secondary threads. The callback can then use an API such as &lt;code&gt;napi_call_function()&lt;/code&gt; to call into JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7459e78387875c44f8b117729e1c1215f75ce7" translate="yes" xml:space="preserve">
          <source>The algorithm to load an ES module specifier is given through the &lt;strong&gt;ESM_RESOLVE&lt;/strong&gt; method below. It returns the resolved URL for a module specifier relative to a parentURL, in addition to the unique module format for that resolved URL given by the &lt;strong&gt;ESM_FORMAT&lt;/strong&gt; routine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2865caae4196a8ce3cb3455bc08c0ec48f21572" translate="yes" xml:space="preserve">
          <source>The amount of bytes sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752de4e522104a321897ca061b65431f0e708ede" translate="yes" xml:space="preserve">
          <source>The amount of data potentially buffered depends on the &lt;code&gt;highWaterMark&lt;/code&gt; option passed into the stream's constructor. For normal streams, the &lt;code&gt;highWaterMark&lt;/code&gt; option specifies a &lt;a href=&quot;#stream_highwatermark_discrepancy_after_calling_readable_setencoding&quot;&gt;total number of bytes&lt;/a&gt;. For streams operating in object mode, the &lt;code&gt;highWaterMark&lt;/code&gt; specifies a total number of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35a8acfb4310a6ca1417d5aa116ec24991910cc" translate="yes" xml:space="preserve">
          <source>The amount of received bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a3ec9f8979cb49a74a9496133dd67ae0c17a07" translate="yes" xml:space="preserve">
          <source>The argument passed to &lt;code&gt;socket.setMulticastTTL()&lt;/code&gt; is a number of hops between 0 and 255. The default on most systems is &lt;code&gt;1&lt;/code&gt; but can vary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9f655d796d6f2a9f8642f9fc8ebbdd26684f1a" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;socket.setTTL()&lt;/code&gt; is a number of hops between 1 and 255. The default on most systems is 64 but can vary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf15292e9849dd748e24ee05e44ad5013d7601b" translate="yes" xml:space="preserve">
          <source>The arguments can now be &lt;code&gt;Uint8Array&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b0cf0042f4eeeae17370a371bf3f66d0da118c" translate="yes" xml:space="preserve">
          <source>The asynchronous form always takes a completion callback as its last argument. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation was completed successfully, then the first argument will be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291ef0fd2d2520243cf6bfecb8993ceec5c2fef1" translate="yes" xml:space="preserve">
          <source>The asynchronous version of &lt;code&gt;crypto.randomBytes()&lt;/code&gt; is carried out in a single threadpool request. To minimize threadpool task length variation, partition large &lt;code&gt;randomBytes&lt;/code&gt; requests when doing so as part of fulfilling a client request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a806f088e76048a6ac24766e6eacdc252a91a7d9" translate="yes" xml:space="preserve">
          <source>The asynchronous version of &lt;code&gt;crypto.randomFill()&lt;/code&gt; is carried out in a single threadpool request. To minimize threadpool task length variation, partition large &lt;code&gt;randomFill&lt;/code&gt; requests when doing so as part of fulfilling a client request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3731f815cd4296b5ee24c9c4ab6b0ab9a153dc" translate="yes" xml:space="preserve">
          <source>The authentication tag length must be specified during cipher creation by setting the &lt;code&gt;authTagLength&lt;/code&gt; option and must be one of 4, 6, 8, 10, 12, 14 or 16 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b6f8e05b9649ed665f924974cc7ad085f20636" translate="yes" xml:space="preserve">
          <source>The available categories are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266c4cc94f24b9eaff50ca9e1bdd0832d10d0467" translate="yes" xml:space="preserve">
          <source>The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the &lt;code&gt;'a+'&lt;/code&gt; flag - see example below - will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a &lt;code&gt;FileHandle&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3f1fdcc1fd05030a6a5539c961c34e59c014a7" translate="yes" xml:space="preserve">
          <source>The better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8c06964af99516ebd182cbce0225e7ac0ebb47" translate="yes" xml:space="preserve">
          <source>The boolean &lt;a href=&quot;#cluster_worker_exitedafterdisconnect&quot;&gt;&lt;code&gt;worker.exitedAfterDisconnect&lt;/code&gt;&lt;/a&gt; allows distinguishing between voluntary and accidental exit, the master may choose not to respawn a worker based on this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fbe8cde36d276b791db6e0cd726aac4a0099ce" translate="yes" xml:space="preserve">
          <source>The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf32702437464172afacdfdde8fc219e9132b629" translate="yes" xml:space="preserve">
          <source>The callback gets two arguments &lt;code&gt;(err, fd)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f91cf0f06ebc87e9db6de7e904fb20acc36a02" translate="yes" xml:space="preserve">
          <source>The callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event, and if not handled will exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8002ca8095bc3f9827de3ef7438330229b189b" translate="yes" xml:space="preserve">
          <source>The callback is given the three arguments, &lt;code&gt;(err, bytesRead, buffer)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5cc049183053def3a207d9ee2ca536647f2e271" translate="yes" xml:space="preserve">
          <source>The callback is passed two arguments &lt;code&gt;(err, data)&lt;/code&gt;, where &lt;code&gt;data&lt;/code&gt; is the contents of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96e8c0e949764bf072f76b4c48317bd2bcaf81e" translate="yes" xml:space="preserve">
          <source>The callback may also be invoked with &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;call_js_cb&lt;/code&gt; both set to &lt;code&gt;NULL&lt;/code&gt; to indicate that calls into JavaScript are no longer possible, while items remain in the queue that may need to be freed. This normally occurs when the Node.js process exits while there is a thread-safe function still active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa70d55901ac5a01f67f2c36fccbc4b1f44a9e6" translate="yes" xml:space="preserve">
          <source>The callback will be given three arguments &lt;code&gt;(err, bytesWritten, buffer)&lt;/code&gt; where &lt;code&gt;bytesWritten&lt;/code&gt; specifies how many &lt;em&gt;bytes&lt;/em&gt; were written from &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f96a34aeb9b8f13cf0531eaa66a0f0138bda350" translate="yes" xml:space="preserve">
          <source>The callback will be given three arguments: &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;bytesWritten&lt;/code&gt;, and &lt;code&gt;buffers&lt;/code&gt;. &lt;code&gt;bytesWritten&lt;/code&gt; is how many bytes were written from &lt;code&gt;buffers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca12069aa877b52e7bb977d5913b75f27786fe0" translate="yes" xml:space="preserve">
          <source>The callback will be invoked with three arguments: an error argument that will be &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;PING&lt;/code&gt; was successfully acknowledged, a &lt;code&gt;duration&lt;/code&gt; argument that reports the number of milliseconds elapsed since the ping was sent and the acknowledgment was received, and a &lt;code&gt;Buffer&lt;/code&gt; containing the 8-byte &lt;code&gt;PING&lt;/code&gt; payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116b1007dccbbdde251923f7ad95904c99b31733" translate="yes" xml:space="preserve">
          <source>The callback will receive the arguments &lt;code&gt;(err, written, string)&lt;/code&gt; where &lt;code&gt;written&lt;/code&gt; specifies how many &lt;em&gt;bytes&lt;/em&gt; the passed string required to be written. Bytes written is not necessarily the same as string characters written. See &lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;&lt;code&gt;Buffer.byteLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb6aebd3a361c3a662f43db3ae173689e5c7cf2" translate="yes" xml:space="preserve">
          <source>The callbacks &lt;code&gt;init()&lt;/code&gt;/&lt;code&gt;before()&lt;/code&gt;/&lt;code&gt;after()&lt;/code&gt;/&lt;code&gt;destroy()&lt;/code&gt; are called for the respective asynchronous event during a resource's lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff9309107e860b24455f540b834f14dc084f8e1" translate="yes" xml:space="preserve">
          <source>The callbacks will be inherited via the prototype chain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aba9e941b743a0ba1b1b3db4505bad8d964129a" translate="yes" xml:space="preserve">
          <source>The certificate may contain information about the public key, depending on the key type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129c1d6ce76304307ec415e5247eb789e7d9e3e4" translate="yes" xml:space="preserve">
          <source>The character encodings currently supported by Node.js include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7b9bd04765b05a8f07a7075a5c54bf00d05417" translate="yes" xml:space="preserve">
          <source>The child would then receive the server object as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bced28a5dc6de3cb93394d620aff5d1b3935c1" translate="yes" xml:space="preserve">
          <source>The choice to build a context-aware addon carries with it the responsibility of carefully managing global static data. Since the addon may be loaded multiple times, potentially even from different threads, any global static data stored in the addon must be properly protected, and must not contain any persistent references to JavaScript objects. The reason for this is that JavaScript objects are only valid in one context, and will likely cause a crash when accessed from the wrong context or from a different thread than the one on which they were created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702a2d85959883967425d972382b385fac4e2d47" translate="yes" xml:space="preserve">
          <source>The cipher &lt;code&gt;chacha20-poly1305&lt;/code&gt; is now supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505c80df480bcf5affdccf4c5f99a1ee38af773f" translate="yes" xml:space="preserve">
          <source>The ciphers list can contain a mixture of TLSv1.3 cipher suite names, the ones that start with &lt;code&gt;'TLS_'&lt;/code&gt;, and specifications for TLSv1.2 and below cipher suites. The TLSv1.2 ciphers support a legacy specification format, consult the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt; documentation for details, but those specifications do &lt;em&gt;not&lt;/em&gt; apply to TLSv1.3 ciphers. The TLSv1.3 suites can only be enabled by including their full name in the cipher list. They cannot, for example, be enabled or disabled by using the legacy TLSv1.2 &lt;code&gt;'EECDH'&lt;/code&gt; or &lt;code&gt;'!EECDH'&lt;/code&gt; specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cf85038ecf1f428f2c584d9f7bd5ccc75adb7f" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;AsyncResource&lt;/code&gt; is designed to be extended by the embedder's async resources. Using this, users can easily trigger the lifetime events of their own resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24db6bc18d31361f8935db2215b4b23721678e22" translate="yes" xml:space="preserve">
          <source>The class is now available on the global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9276c199dcaa044d43e534bee7ec29f5ce383910" translate="yes" xml:space="preserve">
          <source>The cluster module allows easy creation of child processes that all share server ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e260c2e8ff2b3624fcd4e9411f07dcc9655f3db3" translate="yes" xml:space="preserve">
          <source>The cluster module supports two methods of distributing incoming connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68df9708e3d0d3eddef8ce802e18951683a0f588" translate="yes" xml:space="preserve">
          <source>The consequence of this internal buffering is that memory may grow. This property shows the number of characters currently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written, but the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b0b7947887e3177fb32878a7f6377630a45255" translate="yes" xml:space="preserve">
          <source>The constants like &lt;code&gt;fs.R_OK&lt;/code&gt;, etc which were present directly on &lt;code&gt;fs&lt;/code&gt; were moved into &lt;code&gt;fs.constants&lt;/code&gt; as a soft deprecation. Thus for Node.js &lt;code&gt;&amp;lt; v6.3.0&lt;/code&gt; use &lt;code&gt;fs&lt;/code&gt; to access those constants, or do something like &lt;code&gt;(fs.constants || fs).R_OK&lt;/code&gt; to work with all versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfd95b3ca9ee7199060e6e1715e8bcbcbb0aa56" translate="yes" xml:space="preserve">
          <source>The content of the &lt;code&gt;napi_extended_error_info&lt;/code&gt; returned is only valid up until an n-api function is called on the same &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37322a017055be672ead9b7bce8d7251c4fb3b11" translate="yes" xml:space="preserve">
          <source>The content of the diagnostic report can be returned as a JavaScript Object via an API call from a JavaScript application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94462a68854dcc9df8d84a5d4715ade8e88dcd2b" translate="yes" xml:space="preserve">
          <source>The content of the report consists of a header section containing the event type, date, time, PID and Node.js version, sections containing JavaScript and native stack traces, a section containing V8 heap information, a section containing &lt;code&gt;libuv&lt;/code&gt; handle information and an OS platform information section showing CPU and memory usage and system limits. An example report can be triggered using the Node.js REPL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddd64b488a8422aa4a3f8c20eed7a178725c29f" translate="yes" xml:space="preserve">
          <source>The context-aware addon can be structured to avoid global static data by performing the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca567f36b677c5cb9763a70027bdd30de5f61620" translate="yes" xml:space="preserve">
          <source>The convenience variables &lt;code&gt;__filename&lt;/code&gt; and &lt;code&gt;__dirname&lt;/code&gt;, containing the module's absolute filename and directory path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694e515eb057c18adb64b8be49347f6111aff135" translate="yes" xml:space="preserve">
          <source>The converse of &lt;code&gt;RTLD_GLOBAL&lt;/code&gt;. This is the default behavior if neither flag is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c041965ccb05cbcc2b2498f3f98ef7349f8774c" translate="yes" xml:space="preserve">
          <source>The core modules are defined within Node.js's source and are located in the &lt;code&gt;lib/&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60dec677cc19fbe9b8602f6c55cb17a67fa7e2c" translate="yes" xml:space="preserve">
          <source>The correct use of &lt;code&gt;'uncaughtException'&lt;/code&gt; is to perform synchronous cleanup of allocated resources (e.g. file descriptors, handles, etc) before shutting down the process. &lt;strong&gt;It is not safe to resume normal operation after &lt;code&gt;'uncaughtException'&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534f58fa46d21aba1104952457ca5c04ac5b893c" translate="yes" xml:space="preserve">
          <source>The created folder path is passed as a string to the callback's second parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a041f97cc4e73b998491a2c8188d0d2bd2b85e8" translate="yes" xml:space="preserve">
          <source>The created value is not an object, and therefore does not support additional properties. It is considered a distinct value type: calling &lt;code&gt;napi_typeof()&lt;/code&gt; with an external value yields &lt;code&gt;napi_external&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e69b4a01df1a61066a9ce7a18a8823cf91a55a0" translate="yes" xml:space="preserve">
          <source>The current linking status of &lt;code&gt;module&lt;/code&gt;. It will be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604e58117e969d3ee3e9fa8801b2d02f3bb873dc" translate="yes" xml:space="preserve">
          <source>The current module's status does not allow for this operation. The specific meaning of the error depends on the specific function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f77c9d8e4f62fe3ec3a09fb65f2570da38f3d0c" translate="yes" xml:space="preserve">
          <source>The current possible values are: &lt;code&gt;'arm'&lt;/code&gt;, &lt;code&gt;'arm64'&lt;/code&gt;, &lt;code&gt;'ia32'&lt;/code&gt;, &lt;code&gt;'mips'&lt;/code&gt;, &lt;code&gt;'mipsel'&lt;/code&gt;, &lt;code&gt;'ppc'&lt;/code&gt;, &lt;code&gt;'ppc64'&lt;/code&gt;, &lt;code&gt;'s390'&lt;/code&gt;, &lt;code&gt;'s390x'&lt;/code&gt;, &lt;code&gt;'x32'&lt;/code&gt;, and &lt;code&gt;'x64'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f2aa30537d2a94aab319cde4595eaa5a193929" translate="yes" xml:space="preserve">
          <source>The current specifier resolution does not support all default behavior of the CommonJS loader. One of the behavior differences is automatic resolution of file extensions and the ability to import directories that have an index file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7340d732bc4f74892a449e92c3a9d1a66649a5d" translate="yes" xml:space="preserve">
          <source>The current status of the module. Will be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7823a9aa167ea3d4beea31a35714835371f04c5" translate="yes" xml:space="preserve">
          <source>The data arriving from the secondary thread via the queue is given in the &lt;code&gt;data&lt;/code&gt; parameter and the JavaScript function to call is given in the &lt;code&gt;js_callback&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47cc91b138d94f64283a7019417203b465b938e" translate="yes" xml:space="preserve">
          <source>The data is cloned as if using &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt;, according to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dc76e6845e847d601765b5f200dde07614a3a4" translate="yes" xml:space="preserve">
          <source>The data will be lost if there is no listener when a &lt;code&gt;Socket&lt;/code&gt; emits a &lt;code&gt;'data'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424a5b793d70583c5cb89e2883eb2b3acc0af5a2" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#http_http_globalagent&quot;&gt;&lt;code&gt;http.globalAgent&lt;/code&gt;&lt;/a&gt; that is used by &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt; has all of these values set to their respective defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45622ce3718f46c787db722917b25603b428ce8d" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;inputEncoding&lt;/code&gt; changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9dcea9957bb03769108610d78d2c722541b6f4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;inputEncoding&lt;/code&gt; changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e29c53bf5cedf603de21a2fe3e36cae8ccef2" translate="yes" xml:space="preserve">
          <source>The default Node.js ES module resolution function is provided as a third argument to the resolver for easy compatibility workflows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e149389a3c51155d4602420a22a0808ef50b764f" translate="yes" xml:space="preserve">
          <source>The default action of calling &lt;code&gt;.destroy()&lt;/code&gt; on the &lt;code&gt;socket&lt;/code&gt; will no longer take place if there are listeners attached for &lt;code&gt;'clientError'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037f6425f19247726590a65496e73da3e211f467" translate="yes" xml:space="preserve">
          <source>The default behavior will return a 431 Request Header Fields Too Large if a HPE_HEADER_OVERFLOW error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9302b7a92d56642d560974704122ede73aa0f99d" translate="yes" xml:space="preserve">
          <source>The default can also be replaced on a per client or server basis using the &lt;code&gt;ciphers&lt;/code&gt; option from &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;, which is also available in &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;, and when creating new &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bbf774c7da53135f47084850fa248daa49cf18" translate="yes" xml:space="preserve">
          <source>The default cipher suite included within Node.js has been carefully selected to reflect current security best practices and risk mitigation. Changing the default cipher suite can have a significant impact on the security of an application. The &lt;code&gt;--tls-cipher-list&lt;/code&gt; switch and &lt;code&gt;ciphers&lt;/code&gt; option should by used only if absolutely necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e2179dc54344f056b0decf54f9e52896f35ce1" translate="yes" xml:space="preserve">
          <source>The default cipher suite prefers GCM ciphers for &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites&quot;&gt;Chrome's 'modern cryptography' setting&lt;/a&gt; and also prefers ECDHE and DHE ciphers for Perfect Forward Secrecy, while offering &lt;em&gt;some&lt;/em&gt; backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c94173505dabb90bff349caf3b6e28c76cde35" translate="yes" xml:space="preserve">
          <source>The default curve name to use for ECDH key agreement in a tls server. The default value is &lt;code&gt;'auto'&lt;/code&gt;. See &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0778671ccbc9625a83b9f92ee296a2658f4dfff" translate="yes" xml:space="preserve">
          <source>The default encoding for &lt;code&gt;password&lt;/code&gt; if it is a string changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcb8db5cc34d864f90eddb699c015081a96297f" translate="yes" xml:space="preserve">
          <source>The default encoding to use for functions that can take either strings or &lt;a href=&quot;buffer&quot;&gt;buffers&lt;/a&gt;. The default value is &lt;code&gt;'buffer'&lt;/code&gt;, which makes methods default to &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0ae7f7212ef53218a990773857d3a20b74faa5" translate="yes" xml:space="preserve">
          <source>The default evaluator provides access to any variables that exist in the global scope. It is possible to expose a variable to the REPL explicitly by assigning it to the &lt;code&gt;context&lt;/code&gt; object associated with each &lt;code&gt;REPLServer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef6999caafa42e1fa0985f55ff6f38a2c0c82ba" translate="yes" xml:space="preserve">
          <source>The default evaluator supports direct evaluation of JavaScript expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfef051942d11a17c2cb3bac8ddcb75ee42bdbd" translate="yes" xml:space="preserve">
          <source>The default evaluator will automatically load Node.js core modules into the REPL environment when used. For instance, unless otherwise declared as a global or scoped variable, the input &lt;code&gt;fs&lt;/code&gt; will be evaluated on-demand as &lt;code&gt;global.fs = require('fs')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2e99648a3e680c5642e93ef4f08787fbb963d6" translate="yes" xml:space="preserve">
          <source>The default evaluator will, by default, assign the result of the most recently evaluated expression to the special variable &lt;code&gt;_&lt;/code&gt; (underscore). Explicitly setting &lt;code&gt;_&lt;/code&gt; to a value will disable this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe86dc7499b2f2504270c087ed480381407986c" translate="yes" xml:space="preserve">
          <source>The default for the encoding parameters changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fa3b4409ef85a1be285a1185d85e86da0c3c99" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;explicit&lt;/code&gt;, which requires providing the full path to a module. The &lt;code&gt;node&lt;/code&gt; mode will enable support for optional file extensions and the ability to import a directory that has an index file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22dd5b7f37d3175e6a2d67fba4aa13c2f98f537" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;llhttp&lt;/code&gt;, unless otherwise specified when building Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894fb1f385daf51f85572a8a7c60aa9aa6778da7" translate="yes" xml:space="preserve">
          <source>The default operation of the &lt;code&gt;path&lt;/code&gt; module varies based on the operating system on which a Node.js application is running. Specifically, when running on a Windows operating system, the &lt;code&gt;path&lt;/code&gt; module will assume that Windows-style paths are being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d442f7826b0f19502c0bf256c75a5c50b16d0c" translate="yes" xml:space="preserve">
          <source>The default process scheduling priority. This corresponds to &lt;code&gt;NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;0&lt;/code&gt; on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c251e35032fe92a7793aba7069dcc830b94bfb" translate="yes" xml:space="preserve">
          <source>The default renegotiation limits should not be modified without a full understanding of the implications and risks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b7bcc17765718245517a14a51988bbaafe7fd1" translate="yes" xml:space="preserve">
          <source>The default styles and associated colors are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1598a2f5f22914893d0936f932737ab462261a2" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;10&lt;/code&gt; but may be set to any valid JavaScript number. Changes will affect any stack trace captured &lt;em&gt;after&lt;/em&gt; the value has been changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfe5e502595198cf936b72689bf013987b09e5d" translate="yes" xml:space="preserve">
          <source>The defaults above apply to the first call only; the defaults for later calls are the current values at the time of &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea578a19411c9ccf375f0f3b1630215e405e21f3" translate="yes" xml:space="preserve">
          <source>The deferred object is freed upon successful completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014b37147f5f5b20f9f952c77143b7ae77c5373a" translate="yes" xml:space="preserve">
          <source>The dependencies are keyed by the requested string specifier and have values of either &lt;code&gt;true&lt;/code&gt; or a string pointing to a module that will be resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc767baaa2fbc0edadfb6dbb5fcc35b1fb8b2531" translate="yes" xml:space="preserve">
          <source>The destructor for a wrapper object will run when the object is garbage-collected. For destructor testing, there are command-line flags that can be used to make it possible to force garbage collection. These flags are provided by the underlying V8 JavaScript engine. They are subject to change or removal at any time. They are not documented by Node.js or V8, and they should never be used outside of testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ce80971e310e3ec3ee6cd0b337307c7fa1f596" translate="yes" xml:space="preserve">
          <source>The difference from directly calling &lt;code&gt;fs.write()&lt;/code&gt; is that under some unusual conditions, &lt;code&gt;fs.write()&lt;/code&gt; may write only part of the buffer and will need to be retried to write the remaining data, whereas &lt;code&gt;fs.writeFile()&lt;/code&gt; will retry until the data is entirely written (or an error occurs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8ecf893c2df1ff2904e309973b97beb8f1d939" translate="yes" xml:space="preserve">
          <source>The directory name of the current module. This is the same as the &lt;a href=&quot;path#path_path_dirname_path&quot;&gt;&lt;code&gt;path.dirname()&lt;/code&gt;&lt;/a&gt; of the &lt;a href=&quot;#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad0f8a6baae40a95ed3db2f59199a04f367f259" translate="yes" xml:space="preserve">
          <source>The effect of calling &lt;code&gt;process.disconnect()&lt;/code&gt; is the same as calling &lt;a href=&quot;child_process#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;ChildProcess.disconnect()&lt;/code&gt;&lt;/a&gt; from the parent process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a377736575964238d7b29d25721cb94a28e972ae" translate="yes" xml:space="preserve">
          <source>The elements of &lt;code&gt;list&lt;/code&gt; can now be &lt;code&gt;Uint8Array&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f28522157a9426c5f81f77230a9678e411fb42" translate="yes" xml:space="preserve">
          <source>The embedded API provided by AsyncHooks exposes &lt;code&gt;.emitBefore()&lt;/code&gt; and &lt;code&gt;.emitAfter()&lt;/code&gt; methods which are very easy to use incorrectly which can lead to unrecoverable errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308ef7a28f597422070882e9c448b7b77d348344" translate="yes" xml:space="preserve">
          <source>The emitted warning can be inspected with &lt;a href=&quot;process#process_event_warning&quot;&gt;&lt;code&gt;process.on('warning')&lt;/code&gt;&lt;/a&gt; and will have the additional &lt;code&gt;emitter&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; properties, referring to the event emitter instance, the event&amp;rsquo;s name and the number of attached listeners, respectively. Its &lt;code&gt;name&lt;/code&gt; property is set to &lt;code&gt;'MaxListenersExceededWarning'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd59bd3076447e9cc4efabee6cf2beb7857aab9" translate="yes" xml:space="preserve">
          <source>The encoding supported by the &lt;code&gt;TextDecoder&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bca291a385c7124fbe4f264a429759a9910bc1a" translate="yes" xml:space="preserve">
          <source>The encoding supported by the &lt;code&gt;TextEncoder&lt;/code&gt; instance. Always set to &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14993bef185de40fca6f37f6025f6adc4a6d38bc" translate="yes" xml:space="preserve">
          <source>The end result is that the addon only uses the exported C APIs. As a result, it still gets the benefits of the ABI stability provided by the C API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d491534acac8b5c333bb2ec685b11ff9198bfc" translate="yes" xml:space="preserve">
          <source>The equivalent can be done using N-API values with the following snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d783475a1d8cf1593dcf10fc96ac93b5e7fefe" translate="yes" xml:space="preserve">
          <source>The event handler is executed with two arguments, the &lt;code&gt;worker&lt;/code&gt; contains the worker object and the &lt;code&gt;address&lt;/code&gt; object contains the following connection properties: &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;addressType&lt;/code&gt;. This is very useful if the worker is listening on more than one address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f66f6f56b2d0f62c5b2f68996f376b675b6f0b" translate="yes" xml:space="preserve">
          <source>The event listener should perform a lookup in external storage for the &lt;code&gt;sessionData&lt;/code&gt; saved by the &lt;a href=&quot;#tls_event_newsession&quot;&gt;&lt;code&gt;'newSession'&lt;/code&gt;&lt;/a&gt; event handler using the given &lt;code&gt;sessionId&lt;/code&gt;. If found, call &lt;code&gt;callback(null, sessionData)&lt;/code&gt; to resume the session. If not found, the session cannot be resumed. &lt;code&gt;callback()&lt;/code&gt; must be called without &lt;code&gt;sessionData&lt;/code&gt; so that the handshake can continue and a new session can be created. It is possible to call &lt;code&gt;callback(err)&lt;/code&gt; to terminate the incoming connection and destroy the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8dbce94f12021debc1c57fcb99388c2187b7fdc" translate="yes" xml:space="preserve">
          <source>The example below shows how to load a C++ Addon, named as &lt;code&gt;binding&lt;/code&gt;, that exports a &lt;code&gt;foo&lt;/code&gt; function. All the symbols will be loaded before the call returns, by passing the &lt;code&gt;RTLD_NOW&lt;/code&gt; constant. In this example the constant is assumed to be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c629104a0ddee7a4876950fb0838db38bc7275bd" translate="yes" xml:space="preserve">
          <source>The examples given below are drastically simplified to show the basic concept. Using &lt;code&gt;zlib&lt;/code&gt; encoding can be expensive, and the results ought to be cached. See &lt;a href=&quot;#zlib_memory_usage_tuning&quot;&gt;Memory Usage Tuning&lt;/a&gt; for more information on the speed/memory/compression tradeoffs involved in &lt;code&gt;zlib&lt;/code&gt; usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642427622751275891701914a8d55f1bd6738f2f" translate="yes" xml:space="preserve">
          <source>The exclusive flag &lt;code&gt;'x'&lt;/code&gt; (&lt;code&gt;O_EXCL&lt;/code&gt; flag in &lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt;&lt;code&gt;open(2)&lt;/code&gt;&lt;/a&gt;) ensures that path is newly created. On POSIX systems, path is considered to exist even if it is a symlink to a non-existent file. The exclusive flag may or may not work with network file systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f991ef69223e9cd0846243129d8f311818fe9174" translate="yes" xml:space="preserve">
          <source>The fact that the event is triggered before adding the listener has a subtle but important side effect: any &lt;em&gt;additional&lt;/em&gt; listeners registered to the same &lt;code&gt;name&lt;/code&gt;&lt;em&gt;within&lt;/em&gt; the &lt;code&gt;'newListener'&lt;/code&gt; callback will be inserted &lt;em&gt;before&lt;/em&gt; the listener that is in the process of being added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc04f1dd675259f60dc351def2e3631809ce7e9" translate="yes" xml:space="preserve">
          <source>The features from this module are not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b30dc798ad1553d8e1e5095ee227a809cf1116b" translate="yes" xml:space="preserve">
          <source>The file descriptor is not closed when the stream is closed, so it will need to be closed manually once it is no longer needed. Using the same file descriptor concurrently for multiple streams is not supported and may result in data loss. Re-using a file descriptor after a stream has finished is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddc936e8d4ebc433f25d1e3e819e94434bf989d" translate="yes" xml:space="preserve">
          <source>The file name of the current module. This is the current module file's absolute path with symlinks resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd9d87a037c6b1d7d288a9cff4723a9a82e17eb" translate="yes" xml:space="preserve">
          <source>The file name that this &lt;code&gt;fs.Dirent&lt;/code&gt; object refers to. The type of this value is determined by the &lt;code&gt;options.encoding&lt;/code&gt; passed to &lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt;&lt;code&gt;fs.readdir()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt;&lt;code&gt;fs.readdirSync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23216cb82acb6c74c0ecdccb12ab70a12515fb7" translate="yes" xml:space="preserve">
          <source>The file system block size for i/o operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d9badf2e81e7c2a4a71547744b59260512c87b" translate="yes" xml:space="preserve">
          <source>The file system specific &quot;Inode&quot; number for the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38282d780c53ef35ec0b5aca732b15db81ca69b2" translate="yes" xml:space="preserve">
          <source>The filename extension of the compiled Addon binary is &lt;code&gt;.node&lt;/code&gt; (as opposed to &lt;code&gt;.dll&lt;/code&gt; or &lt;code&gt;.so&lt;/code&gt;). The &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; function is written to look for files with the &lt;code&gt;.node&lt;/code&gt; file extension and initialize those as dynamically-linked libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3696df745998c394540bd5159546abfa00f86f" translate="yes" xml:space="preserve">
          <source>The final argument, &lt;code&gt;callback&lt;/code&gt;, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an &lt;code&gt;Error&lt;/code&gt; object. The following examples check if &lt;code&gt;package.json&lt;/code&gt; exists, and if it is readable or writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69404bc9d9b3943fef57e2e4d39a1da0b6e93fb" translate="yes" xml:space="preserve">
          <source>The first 3 are enabled by default. The last 2 &lt;code&gt;CCM&lt;/code&gt;-based suites are supported by TLSv1.3 because they may be more performant on constrained systems, but they are not enabled by default since they offer less security.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eecb84f910ff00f50424043534c4fedcb7d3584f" translate="yes" xml:space="preserve">
          <source>The first approach is to do any appropriate cleanup and then return so that execution will return to JavaScript. As part of the transition back to JavaScript the exception will be thrown at the point in the JavaScript code where the native method was invoked. The behavior of most N-API calls is unspecified while an exception is pending, and many will simply return &lt;code&gt;napi_pending_exception&lt;/code&gt;, so it is important to do as little as possible and then return to JavaScript where the exception can be handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b9dd847bdc22570d18de4f8cc1566987987006" translate="yes" xml:space="preserve">
          <source>The first is to create a &lt;code&gt;package.json&lt;/code&gt; file in the root of the folder, which specifies a &lt;code&gt;main&lt;/code&gt; module. An example &lt;code&gt;package.json&lt;/code&gt; file might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd86eed1c6f92f82cdfb073363d1441e834fdf86" translate="yes" xml:space="preserve">
          <source>The first line is formatted as &lt;code&gt;&amp;lt;error class name&amp;gt;: &amp;lt;error message&amp;gt;&lt;/code&gt;, and is followed by a series of stack frames (each line beginning with &quot;at &quot;). Each frame describes a call site within the code that lead to the error being generated. V8 attempts to display a name for each function (by variable name, function name, or object method name), but occasionally it will not be able to find a suitable name. If V8 cannot determine a name for the function, only location information will be displayed for that frame. Otherwise, the determined function name will be displayed with location information appended in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4773296c484e1d27c6ce74cc0e57a635c095e4" translate="yes" xml:space="preserve">
          <source>The first line of the trace will be prefixed with &lt;code&gt;${myObject.name}: ${myObject.message}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cac6cb57b6f6d96c270fc2be9cf5074edd981e" translate="yes" xml:space="preserve">
          <source>The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cef4ec1b404b4a3f370637689e111e01d2b492c" translate="yes" xml:space="preserve">
          <source>The first time &lt;a href=&quot;#http2_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, it will send the buffered header information and the first chunk of the body to the client. The second time &lt;a href=&quot;#http2_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4ea19562ddcbdd7307dfffa568d95f6cb64f82" translate="yes" xml:space="preserve">
          <source>The first time &lt;a href=&quot;#http_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, it will send the buffered header information and the first chunk of the body to the client. The second time &lt;a href=&quot;#http_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34b18afec776cbbe19b5510ed53febd92bbb0f1" translate="yes" xml:space="preserve">
          <source>The flags below are deprecated in OpenSSL-1.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c1bb881c181c5773a41231b4007265b0112578" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;addon.cc&lt;/code&gt; implements &lt;code&gt;AtExit&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32c49c908fc409f5d3898e47bc77dd9f1b77a58" translate="yes" xml:space="preserve">
          <source>The following APIs are deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5b7b61227ced1ec217e7db8fa0a09b2666692d" translate="yes" xml:space="preserve">
          <source>The following additional &lt;code&gt;options&lt;/code&gt; from &lt;a href=&quot;tls#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt; are also accepted: &lt;code&gt;ca&lt;/code&gt;, &lt;code&gt;cert&lt;/code&gt;, &lt;code&gt;ciphers&lt;/code&gt;, &lt;code&gt;clientCertEngine&lt;/code&gt;, &lt;code&gt;crl&lt;/code&gt;, &lt;code&gt;dhparam&lt;/code&gt;, &lt;code&gt;ecdhCurve&lt;/code&gt;, &lt;code&gt;honorCipherOrder&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;passphrase&lt;/code&gt;, &lt;code&gt;pfx&lt;/code&gt;, &lt;code&gt;rejectUnauthorized&lt;/code&gt;, &lt;code&gt;secureOptions&lt;/code&gt;, &lt;code&gt;secureProtocol&lt;/code&gt;, &lt;code&gt;servername&lt;/code&gt;, &lt;code&gt;sessionIdContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54447810aa08df7985f4cbfad788a86993e818f3" translate="yes" xml:space="preserve">
          <source>The following additional handling is implemented if the warning &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;'DeprecationWarning'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3a1aa21d21866510e3b76e6d72fba491830b4e" translate="yes" xml:space="preserve">
          <source>The following approach is much better:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827001922af67138a9f878b796dafb9dfb51266f" translate="yes" xml:space="preserve">
          <source>The following can be approximated in N-API using the following snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928dcbed1708cf626131e60e3258e091ed18f8a0" translate="yes" xml:space="preserve">
          <source>The following constants are exported by &lt;code&gt;fs.constants&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d371ce6c00fbacd100137d09136575db666e66b9" translate="yes" xml:space="preserve">
          <source>The following constants are exported by &lt;code&gt;os.constants&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32173a09a1966787fec1f9f5484ce505ae2ecb50" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5687f7198333699b9bae06281375ba0db2ea8a29" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;a href=&quot;#fs_fs_copyfile_src_dest_flags_callback&quot;&gt;&lt;code&gt;fs.copyFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbb7a774533a46ec3115e75cb6cca0eb4ea9349" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;code&gt;fs.open()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b567d00bd5272b3f69cb11dcf5ea3f697aec5d" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object's &lt;code&gt;mode&lt;/code&gt; property for determining a file's type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475faab4f5defb5fe8858da27a2d490930994934" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object's &lt;code&gt;mode&lt;/code&gt; property for determining the access permissions for a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2a8743f98da8d480afb21b23ce442ed0d0b3cd" translate="yes" xml:space="preserve">
          <source>The following constants exported by &lt;code&gt;crypto.constants&lt;/code&gt; apply to various uses of the &lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;tls&lt;/code&gt;, and &lt;code&gt;https&lt;/code&gt; modules and are generally specific to OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae15549ff78e98dd71154b2301ed7ccc1a34836a" translate="yes" xml:space="preserve">
          <source>The following error codes are specific to the Windows operating system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7031bafd5711766cd57423f21784e69b1a456da" translate="yes" xml:space="preserve">
          <source>The following error constants are exported by &lt;code&gt;os.constants.errno&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dafb35125a9eb3c8fd4054107b4b62a1593755e" translate="yes" xml:space="preserve">
          <source>The following example compiles and executes code that increments a global variable and sets a new one. These globals are contained in the &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb21b2c31f6138a4349f1a26ef1d10d1b5ff1a6" translate="yes" xml:space="preserve">
          <source>The following example compiles and executes different scripts using a single &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f13b054eec7d30bcee88681b33d31aab6a969d5" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a &lt;code&gt;global&lt;/code&gt; variable then executes that code multiple times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fb83581f94c76b9a4108a24f049b5e7c53bec4" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the &lt;code&gt;sandbox&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8961b14a215e78e30d4006961e83cb3d04b94d" translate="yes" xml:space="preserve">
          <source>The following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f986012547f55866f8561b75f9f2da61192ba5" translate="yes" xml:space="preserve">
          <source>The following example creates a server that supports both protocols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5bd432616e2fe84714c6f75ee1a73d75ab165a" translate="yes" xml:space="preserve">
          <source>The following example creates an HTTP/2 server using the compatibility API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdc377e86e677c416598d64a5cdb1c3693d42a9" translate="yes" xml:space="preserve">
          <source>The following example does not throw an &lt;code&gt;AssertionError&lt;/code&gt; because the primitives are considered equal by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4910ba61ee0506c832df25c6d6d2b10e0d93c59" translate="yes" xml:space="preserve">
          <source>The following example highlights the effect of the &lt;code&gt;compact&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cceb0a29e3538da1352100db1b933d040903e8" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to read function arguments passed from JavaScript and how to return a result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d76a07c420ceb5f2c6bd3c8d7ed97b0dd6c6ce" translate="yes" xml:space="preserve">
          <source>The following example illustrates the implementation of a context-aware addon:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bde9b74bffc2aa8a07a370885dc11bc36948754" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;readline.Interface&lt;/code&gt; class to implement a small command-line interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca7e485a9304684ecdb6dc7e265702277ba1084" translate="yes" xml:space="preserve">
          <source>The following example illustrates the warning that is printed to &lt;code&gt;stderr&lt;/code&gt; when too many listeners have been added to an event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c0eed2e03aa1a50cbb2152ccfcb53aa848063d" translate="yes" xml:space="preserve">
          <source>The following example illustrates using both &lt;code&gt;vm.runInThisContext()&lt;/code&gt; and the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function to run the same code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a4f9b856247d478fe10097bd422d102e448df8" translate="yes" xml:space="preserve">
          <source>The following example inspects all properties of the &lt;code&gt;util&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b8fa73b8f407954ac2a664ce62506942474b5e" translate="yes" xml:space="preserve">
          <source>The following example measures the duration of &lt;code&gt;require()&lt;/code&gt; operations to load dependencies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c9dcf75697e35586b5a5bb4b1ec0edd1f63f75" translate="yes" xml:space="preserve">
          <source>The following example pipes all of the data from the &lt;code&gt;readable&lt;/code&gt; into a file named &lt;code&gt;file.txt&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41becda6c6ddadb16cb7c297ead592bada0bfdb" translate="yes" xml:space="preserve">
          <source>The following example shows a simple &lt;code&gt;EventEmitter&lt;/code&gt; instance with a single listener. The &lt;code&gt;eventEmitter.on()&lt;/code&gt; method is used to register listeners, while the &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method is used to trigger the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ad747c3e73cbd8af737ecbbdd22c1b787abaf4" translate="yes" xml:space="preserve">
          <source>The following example shows the basic use of the &lt;code&gt;StringDecoder&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1551aa3acf990613538e77ac486dca4770207f7d" translate="yes" xml:space="preserve">
          <source>The following example shows two new commands added to the REPL instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a9bcfb92a0b7ab67cff41af2105cc6ae699957" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt; and Performance APIs to measure the actual duration of a Timeout operation (including the amount of time it to execute the callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754e48d5c1d68cbdb209a06be78e522c57e6261b" translate="yes" xml:space="preserve">
          <source>The following example, for instance, provides separate REPLs on &lt;code&gt;stdin&lt;/code&gt;, a Unix socket, and a TCP socket:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9c42618de47c08d507d4fd8b458fff43a93df5" translate="yes" xml:space="preserve">
          <source>The following flags are available wherever the &lt;code&gt;flag&lt;/code&gt; option takes a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1c76d837f36a3ef7e701cb998880b118d16c09" translate="yes" xml:space="preserve">
          <source>The following flags can be passed as hints to &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a38f3d5894a095d8dc07f60288425cccca1e58c" translate="yes" xml:space="preserve">
          <source>The following flags can be set for advanced control over the compression algorithm and memory usage tuning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4019f64a0bae27f5870fc15735a413e010398918" translate="yes" xml:space="preserve">
          <source>The following illustrates a client for the echo server example from &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d983e488f945092b2073ba9beaf4353b05639e59" translate="yes" xml:space="preserve">
          <source>The following illustrates a hypothetical example of a REPL that performs translation of text from one language to another:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3d12a58aaf804115d14b65f68e56175aecdec4" translate="yes" xml:space="preserve">
          <source>The following illustrates a rather simplistic (and somewhat pointless) custom &lt;code&gt;Writable&lt;/code&gt; stream implementation. While this specific &lt;code&gt;Writable&lt;/code&gt; stream instance is not of any real particular usefulness, the example illustrates each of the required elements of a custom &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab0b3748bcc9f54c4bae9761c0f15c2ce5f381bc" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple HTTP/2 server using the Core API. Since there are no browsers known that support &lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;unencrypted HTTP/2&lt;/a&gt;, the use of &lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt;&lt;code&gt;http2.createSecureServer()&lt;/code&gt;&lt;/a&gt; is necessary when communicating with browser clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af191c6114a1642c6a84dbbd336a0f54f29f788f" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple echo server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4341b6b6e9ceda6da3825b7318e4cb410bd82903" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple example of a &lt;code&gt;Duplex&lt;/code&gt; stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a &lt;code&gt;Duplex&lt;/code&gt; stream that buffers incoming written data via the &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interface that is read back out via the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5273689c2d2292d7ff4ac3bb67b226d3d1e973" translate="yes" xml:space="preserve">
          <source>The following illustrates an HTTP/2 client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d2a922ad3dab12111210bf177cd900efbbaafc" translate="yes" xml:space="preserve">
          <source>The following illustrates resuming a TLS session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278f598f1053fbfcdd5ef1743a8a49fb3459a4b2" translate="yes" xml:space="preserve">
          <source>The following is a basic example of a &lt;code&gt;Readable&lt;/code&gt; stream that emits the numerals from 1 to 1,000,000 in ascending order, and then ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867f597fcc104be5181f22b330bf67d8352af244" translate="yes" xml:space="preserve">
          <source>The following is a simple demonstration of &lt;code&gt;triggerAsyncId&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260f262e327d647faa2a4e5840f83101f8eba105" translate="yes" xml:space="preserve">
          <source>The following is an example with additional information about the calls to &lt;code&gt;init&lt;/code&gt; between the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; calls, specifically what the callback to &lt;code&gt;listen()&lt;/code&gt; will look like. The output formatting is slightly more elaborate to make calling context easier to see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1256eca8571fc116738506ae5b4d0e9994bd1d62" translate="yes" xml:space="preserve">
          <source>The following is an overview of the &lt;code&gt;AsyncResource&lt;/code&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bc83cc4db6270d1ad82593b194f6f877bcf5a6" translate="yes" xml:space="preserve">
          <source>The following is the approximate equivalent of the N-API counterpart:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d649a0ac4bec9151f47c63711d19dadbe0acbb7" translate="yes" xml:space="preserve">
          <source>The following key combinations in the REPL have these special effects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c2fdba97add89a1173ca36a3193d8ce2992ef9" translate="yes" xml:space="preserve">
          <source>The following methods are exposed by the V8 engine in the general API but do not display anything unless used in conjunction with the &lt;a href=&quot;debugger&quot;&gt;inspector&lt;/a&gt; (&lt;code&gt;--inspect&lt;/code&gt; flag).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2f010a82793abfb4a9d63d3276fee7701f3dcd" translate="yes" xml:space="preserve">
          <source>The following methods from the &lt;code&gt;dns&lt;/code&gt; module are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6cdbd66510df63c1ecb7d5213f3039eedea610" translate="yes" xml:space="preserve">
          <source>The following methods from the &lt;code&gt;dnsPromises&lt;/code&gt; API are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac28d8f1b469011af588c78e77fb6ab775d28c2" translate="yes" xml:space="preserve">
          <source>The following process scheduling constants are exported by &lt;code&gt;os.constants.priority&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23710ea5bb9ea17b12e61f234bea0f2bdf42b4d" translate="yes" xml:space="preserve">
          <source>The following signal constants are exported by &lt;code&gt;os.constants.signals&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0c0661c70aca40b78bbbed90aaded64a1d7b2b" translate="yes" xml:space="preserve">
          <source>The following simple example illustrates the basic use of the &lt;code&gt;readline&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b095df75d6e5f3132d17f5e1853a984cc4a69d7" translate="yes" xml:space="preserve">
          <source>The following snippet installs a listener on the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused&quot;&gt;&lt;code&gt;'Debugger.paused'&lt;/code&gt;&lt;/a&gt; event, and prints the reason for program suspension whenever program execution is suspended (through breakpoints, for example):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e62b9cc67d1377899aa5cca1cf3adcd03bb0ba" translate="yes" xml:space="preserve">
          <source>The following special commands are supported by all REPL instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f011333da1f4a77a0b91e406152a711edff558ba" translate="yes" xml:space="preserve">
          <source>The following three variables may be used inside the function body following an invocation of &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b55f4e401abc1ed4f27290d5b75f7d33dac225" translate="yes" xml:space="preserve">
          <source>The following utility functions are also available in case native code needs to create an &lt;code&gt;Error&lt;/code&gt; object: &lt;a href=&quot;#n_api_napi_create_error&quot;&gt;&lt;code&gt;napi_create_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_create_type_error&quot;&gt;&lt;code&gt;napi_create_type_error&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#n_api_napi_create_range_error&quot;&gt;&lt;code&gt;napi_create_range_error&lt;/code&gt;&lt;/a&gt;, where result is the &lt;code&gt;napi_value&lt;/code&gt; that refers to the newly created JavaScript &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1621e464e04069d36635d065a53f19f9b7f89297" translate="yes" xml:space="preserve">
          <source>The following utility functions are also available in case native code needs to throw an exception or determine if a &lt;code&gt;napi_value&lt;/code&gt; is an instance of a JavaScript &lt;code&gt;Error&lt;/code&gt; object: &lt;a href=&quot;#n_api_napi_throw_error&quot;&gt;&lt;code&gt;napi_throw_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_throw_type_error&quot;&gt;&lt;code&gt;napi_throw_type_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_throw_range_error&quot;&gt;&lt;code&gt;napi_throw_range_error&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_is_error&quot;&gt;&lt;code&gt;napi_is_error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd856e5e213c478e5acd13b2d714aebc9d6ad2d" translate="yes" xml:space="preserve">
          <source>The following values are valid flush operations for Brotli-based streams:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738a7c908290a06b8479e3e2410554e41554f7c5" translate="yes" xml:space="preserve">
          <source>The following values are valid for this property (as defined in &lt;code&gt;constants&lt;/code&gt; module):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49edf49d19b5c17b9340b245b83c7fca4b031913" translate="yes" xml:space="preserve">
          <source>The following will also trigger the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7016b7143d75a886c451f603cf021c125c604f1b" translate="yes" xml:space="preserve">
          <source>The following, for instance, will throw the &lt;a href=&quot;errors#errors_class_typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; because there is no matching error type in the assertion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb81ba7cf7f60d6a47251a809d57c4185d8503f" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;alt&lt;/code&gt; parameter is strictly defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838&lt;/a&gt; as an ASCII string containing a comma-delimited list of &quot;alternative&quot; protocols associated with a specific host and port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad732213f9b3400abc0c0e9b66ef4d024bf4da4c" translate="yes" xml:space="preserve">
          <source>The formatting process operates as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f337814fcd91de3a7556e75eda9add23e7ee1277" translate="yes" xml:space="preserve">
          <source>The fulfilled value of a linking promise is not a &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b13dc828820a8586bad1f2362690306cda5b10" translate="yes" xml:space="preserve">
          <source>The full set of possible &lt;code&gt;napi_status&lt;/code&gt; values is defined in &lt;code&gt;napi_api_types.h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c714d055cf64b4d18934498a66680f7181dff0ed" translate="yes" xml:space="preserve">
          <source>The fully resolved filename of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b507486ca1a6dcd2b0885675ab7c24ab99d378e" translate="yes" xml:space="preserve">
          <source>The function call does not return, the process will be terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b122914b230c847485ca349abc7360f05a5492f8" translate="yes" xml:space="preserve">
          <source>The function is expected to return a &lt;code&gt;Module&lt;/code&gt; object or a &lt;code&gt;Promise&lt;/code&gt; that eventually resolves to a &lt;code&gt;Module&lt;/code&gt; object. The returned &lt;code&gt;Module&lt;/code&gt; must satisfy the following two invariants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6d8c40f84a833fb329f2cae8f5efb837bf68c4" translate="yes" xml:space="preserve">
          <source>The function must have originally been registered with &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;, otherwise the process will abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c483586a4f9507cbc3d3fd24d9b71ec8af1eb54" translate="yes" xml:space="preserve">
          <source>The functions available and how to use them are documented in the section titled &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73e5b48c342bebc80a4170c898186da78c1202a" translate="yes" xml:space="preserve">
          <source>The given callback is registered as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0434bbb6d598e35c8b0d5e01cd6743bb08d18b3" translate="yes" xml:space="preserve">
          <source>The given crypto key object's type is invalid for the attempted operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15355f464703eae74bd506a06b7ddeaa6e863a42" translate="yes" xml:space="preserve">
          <source>The given sequence of paths is processed from right to left, with each subsequent &lt;code&gt;path&lt;/code&gt; prepended until an absolute path is constructed. For instance, given the sequence of path segments: &lt;code&gt;/foo&lt;/code&gt;, &lt;code&gt;/bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;, calling &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; would return &lt;code&gt;/bar/baz&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116c1174f7b0374b189bdc248ad51e1a1c759ce8" translate="yes" xml:space="preserve">
          <source>The global &lt;code&gt;console&lt;/code&gt; is a special &lt;code&gt;Console&lt;/code&gt; whose output is sent to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt;. It is equivalent to calling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8071093900b9cffe0f9d5d764501c77193fb3b5" translate="yes" xml:space="preserve">
          <source>The graph only shows &lt;em&gt;when&lt;/em&gt; a resource was created, not &lt;em&gt;why&lt;/em&gt;, so to track the &lt;em&gt;why&lt;/em&gt; use &lt;code&gt;triggerAsyncId&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c2df2630147331ef167e43f5bfee36cfe7ff49" translate="yes" xml:space="preserve">
          <source>The group may read and write the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba78c097f5014bcc5443343dc28bab106befcb25" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js environment was initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b8c9ee8fc1b0b78b060b35f917660bed2faee1" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js event loop exited. If the event loop has not yet exited, the property has the value of -1. It can only have a value of not -1 in a handler of the &lt;a href=&quot;process#process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04181966da212756623d143ee5508e37cfa98637" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js event loop started. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ae321117af7a2e6dc9e7505340ff9e12463a1c" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js process completed bootstrapping. If bootstrapping has not yet finished, the property has the value of -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071df5fd57717fbd6090f443bfda8ce228353c66" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js process was initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c67dbbf7296ae4aa2f9c5436c0e093271dafc64" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the V8 platform was initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f903809143489fbc93090cbbcce31200a3d632" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp marking the starting time of the Performance Entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d718b76cc617048137f79b76b3096eb28ab803f" translate="yes" xml:space="preserve">
          <source>The highest process scheduling priority. This corresponds to &lt;code&gt;REALTIME_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-20&lt;/code&gt; on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88efed373aad8c0a32d816872573d22440d5f941" translate="yes" xml:space="preserve">
          <source>The hooks will be called in reverse order, i.e. the most recently added one will be called first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe35588d2e0f56ae4c4254cfae039f3d4a9c4e1" translate="yes" xml:space="preserve">
          <source>The host is not accessible from public networks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c45254dfbe7a98e1f87576c63ddee48c0ed2ca" translate="yes" xml:space="preserve">
          <source>The identifier for the module. Typically this is the fully resolved filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e46e4c795af885884ca96415b2f4fd958aa35fa" translate="yes" xml:space="preserve">
          <source>The implementation code for a stream should &lt;em&gt;never&lt;/em&gt; call the &quot;public&quot; methods of a stream that are intended for use by consumers (as described in the &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;API for Stream Consumers&lt;/a&gt; section). Doing so may lead to adverse side effects in application code consuming the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b68703a9e2dcb076edca10edad1d01a02d8f51" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;code&gt;myobject.cc&lt;/code&gt; is similar to the previous example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a52a7d9fa897ef7b7e7265d41af6393190e98f2" translate="yes" xml:space="preserve">
          <source>The implementation is now spec compliant and does not throw anymore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e06a2129159e07eb26204cbfea1eda2335fc973" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;crypto.createCipher()&lt;/code&gt; derives keys using the OpenSSL function &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7f9e52a3626b1b50d6b554e45c94d3cc8682bf" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;crypto.createDecipher()&lt;/code&gt; derives keys using the OpenSSL function &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822ad7efe07c30c235e9d7962160db8b807dca79" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;myobject.cc&lt;/code&gt; is similar to before:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51779778d26eca6a63eb3f028558111d37c56cec" translate="yes" xml:space="preserve">
          <source>The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524e8d550227d344d26a7706fc43d6ded573a77c" translate="yes" xml:space="preserve">
          <source>The importance of the distinction between &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; can vary based on platform. On Unix-type operating systems (Unix, Linux, macOS) &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; can be more efficient because it does not spawn a shell by default. On Windows, however, &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files are not executable on their own without a terminal, and therefore cannot be launched using &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt;. When running on Windows, &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files can be invoked using &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;shell&lt;/code&gt; option set, with &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, or by spawning &lt;code&gt;cmd.exe&lt;/code&gt; and passing the &lt;code&gt;.bat&lt;/code&gt; or &lt;code&gt;.cmd&lt;/code&gt; file as an argument (which is what the &lt;code&gt;shell&lt;/code&gt; option and &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; do). In any case, if the script filename contains spaces it needs to be quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068740fb1221112979549812bcb846baefe051e1" translate="yes" xml:space="preserve">
          <source>The important concept to remember is that a &lt;code&gt;Readable&lt;/code&gt; will not generate data until a mechanism for either consuming or ignoring that data is provided. If the consuming mechanism is disabled or taken away, the &lt;code&gt;Readable&lt;/code&gt; will &lt;em&gt;attempt&lt;/em&gt; to stop generating the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93273fa910f64fa7a93e386a6b91c90451e5c871" translate="yes" xml:space="preserve">
          <source>The imported JSON only exposes a &lt;code&gt;default&lt;/code&gt;. There is no support for named exports. A cache entry is created in the CommonJS cache, to avoid duplication. The same object will be returned in CommonJS if the JSON module has already been imported from the same path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfeded4e40086fb8d54687b4f3019eb1ad6070e" translate="yes" xml:space="preserve">
          <source>The index operator &lt;code&gt;[index]&lt;/code&gt; can be used to get and set the octet at position &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;buf&lt;/code&gt;. The values refer to individual bytes, so the legal value range is between &lt;code&gt;0x00&lt;/code&gt; and &lt;code&gt;0xFF&lt;/code&gt; (hex) or &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt; (decimal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d1bc7a978c5a6ebd7e5c67234a0454072f41c9" translate="yes" xml:space="preserve">
          <source>The initialization of a TTY failed due to a system error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b928ce33eba8c7ba3b1cbf7ff98058e999c34bc" translate="yes" xml:space="preserve">
          <source>The input may not be used in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt;. All prohibited inputs are documented in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt;'s documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7964aa0613bd0f93baa04a82c9130ed51a122b" translate="yes" xml:space="preserve">
          <source>The inspection output is now limited to about 128 MB. Data above that size will not be fully inspected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b37df37c8a857d71e292563896d967bae6c8fd4" translate="yes" xml:space="preserve">
          <source>The inspector console does not have API parity with Node.js console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1d24c1edf52323ba588ddcf5bd806599c68a19" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;path._makeLong()&lt;/code&gt; was not intended for public use. However, userland modules have found it useful. The internal API is deprecated and replaced with an identical, public &lt;code&gt;path.toNamespacedPath()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43746a4a6e9a39d1451d57a3a425511033f2b46" translate="yes" xml:space="preserve">
          <source>The key can now be a private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfa394de2adea1a9dffe9daa48cb7c8f6bea746" translate="yes" xml:space="preserve">
          <source>The key used with RSA, DSA, and DH algorithms is recommended to have at least 2048 bits and that of the curve of ECDSA and ECDH at least 224 bits, to be safe to use for several years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682daccc97ee42ee651db4bcf2c6e94124c3b1fc" translate="yes" xml:space="preserve">
          <source>The keys and values are in the same list. It is &lt;em&gt;not&lt;/em&gt; a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee648142cd6bc2a91d3ff824c7754d33d3fb978" translate="yes" xml:space="preserve">
          <source>The last three bytes are null bytes (&lt;code&gt;'\0'&lt;/code&gt;), to compensate the over-truncation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a047e356026001e5862f4364bf432f3f5b8f57" translate="yes" xml:space="preserve">
          <source>The latest version of the V8 inspector protocol is published on the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/&quot;&gt;Chrome DevTools Protocol Viewer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6fe4cc54f3bbbf6cc2f2a8e1a7af78f281efdc" translate="yes" xml:space="preserve">
          <source>The legacy &lt;code&gt;urlObject&lt;/code&gt; (&lt;code&gt;require('url').Url&lt;/code&gt;) is created and returned by the &lt;code&gt;url.parse()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59b0da974ef3079a4d02ad543fa1a44b9facbea" translate="yes" xml:space="preserve">
          <source>The legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0, is deprecated. This deprecation applies to users of the &lt;a href=&quot;cli#cli_http_parser_library&quot;&gt;&lt;code&gt;--http-parser=legacy&lt;/code&gt;&lt;/a&gt; command-line flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b839c62c200fcce6c9f9f11222c1ee0341b1bf83" translate="yes" xml:space="preserve">
          <source>The length of the initialization vector (nonce) &lt;code&gt;N&lt;/code&gt; must be between 7 and 13 bytes (&lt;code&gt;7 &amp;le; N &amp;le; 13&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f8159583783dde7b4028e859056232836bcfe3" translate="yes" xml:space="preserve">
          <source>The length of the plaintext is limited to &lt;code&gt;2 ** (8 * (15 - N))&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d963973bdd341e8c9654a7439d48f73aa9ce4c3c" translate="yes" xml:space="preserve">
          <source>The linker function is allowed to be asynchronous while &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is synchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715536f634e876d37fa2fab56b440dbae4eab00f" translate="yes" xml:space="preserve">
          <source>The linker function is executed during linking, a Node.js-specific stage before instantiation, while &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is called during instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1c54f4d0339ef4fb4064416f1d268d5b877ada" translate="yes" xml:space="preserve">
          <source>The linker function returned a module for which linking has failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc61c4465b811b422205aff9e099a7532eea396" translate="yes" xml:space="preserve">
          <source>The linker function roughly corresponds to the implementation-defined &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; abstract operation in the ECMAScript specification, with a few key differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5cdf801db65ab26ab02fec82d66df22c6e7c37" translate="yes" xml:space="preserve">
          <source>The listener callback function is invoked with the exit code specified either by the &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; property, or the &lt;code&gt;exitCode&lt;/code&gt; argument passed to the &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70ff3ea096a9215253d68eeebe5c29488a92a9f" translate="yes" xml:space="preserve">
          <source>The listener callback function is invoked with the value of &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; passed as the only argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055837d3b4ae741c1c2bb6eeb05d26cac3fdcde4" translate="yes" xml:space="preserve">
          <source>The listener callback gets two arguments &lt;code&gt;(eventType, filename)&lt;/code&gt;. &lt;code&gt;eventType&lt;/code&gt; is either &lt;code&gt;'rename'&lt;/code&gt; or &lt;code&gt;'change'&lt;/code&gt;, and &lt;code&gt;filename&lt;/code&gt; is the name of the file which triggered the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d25269254663bac508549031b78553911b28a42" translate="yes" xml:space="preserve">
          <source>The listener callback is attached to the &lt;code&gt;'change'&lt;/code&gt; event fired by &lt;a href=&quot;#fs_class_fs_fswatcher&quot;&gt;&lt;code&gt;fs.FSWatcher&lt;/code&gt;&lt;/a&gt;, but it is not the same thing as the &lt;code&gt;'change'&lt;/code&gt; value of &lt;code&gt;eventType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3428a49f4a9aef927962af400c0a27d96f893bb5" translate="yes" xml:space="preserve">
          <source>The listener callback is passed three arguments when called:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd489f8ec0206d465fe90b95b4b651b6b4e3293" translate="yes" xml:space="preserve">
          <source>The listener callback will be passed a single &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5b9928c3b053bac6cf69ed39e46e765a674622" translate="yes" xml:space="preserve">
          <source>The listener callback will be passed the chunk of data as a string if a default encoding has been specified for the stream using the &lt;code&gt;readable.setEncoding()&lt;/code&gt; method; otherwise the data will be passed as a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb29c94ac667b5168cac94eb1be7ed4650a37d8" translate="yes" xml:space="preserve">
          <source>The listener function is called with a string containing the single line of received input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c52c037d844d9260cda2c263ecc1633937eb4a" translate="yes" xml:space="preserve">
          <source>The listener function is called without passing any arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eec06a2464b63bfe43f85145310f598d4dd67e9" translate="yes" xml:space="preserve">
          <source>The listener function is invoked without passing any arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aae998a9956fa4170ac3e55b9cc618bd7d7dcbc" translate="yes" xml:space="preserve">
          <source>The literal string &lt;code&gt;:&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0f261769e8eadc7e0487404f29a1a8ee87daf3" translate="yes" xml:space="preserve">
          <source>The load average is a Unix-specific concept with no real equivalent on Windows platforms. On Windows, the return value is always &lt;code&gt;[0, 0, 0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35d013f19eb56251ea330d71e084299ad93abf7" translate="yes" xml:space="preserve">
          <source>The load average is a measure of system activity, calculated by the operating system and expressed as a fractional number. As a rule of thumb, the load average should ideally be less than the number of logical CPUs in the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f0d18d4c3698c55e755528941f4ab02364f269" translate="yes" xml:space="preserve">
          <source>The location information will be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eed34e4bcd621bb071798baa263b1f365323ad1" translate="yes" xml:space="preserve">
          <source>The logging file is by default called &lt;code&gt;node_trace.${rotation}.log&lt;/code&gt;, where &lt;code&gt;${rotation}&lt;/code&gt; is an incrementing log-rotation id. The filepath pattern can be specified with &lt;code&gt;--trace-event-file-pattern&lt;/code&gt; that accepts a template string that supports &lt;code&gt;${rotation}&lt;/code&gt; and &lt;code&gt;${pid}&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800bc2d84885d9da35fe90b70427fd11a65d6618" translate="yes" xml:space="preserve">
          <source>The lowest process scheduling priority. This corresponds to &lt;code&gt;IDLE_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;19&lt;/code&gt; on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b760f7ccb1d6be2e047bdcc423ab12ccf111d220" translate="yes" xml:space="preserve">
          <source>The maximum length of a string instance (in UTF-16 code units) is available as &lt;a href=&quot;#buffer_buffer_constants_max_string_length&quot;&gt;&lt;code&gt;buffer.constants.MAX_STRING_LENGTH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b02915ee04745312429bee12a59d46f9b7698d" translate="yes" xml:space="preserve">
          <source>The maximum number of outstanding (unacknowledged) pings is determined by the &lt;code&gt;maxOutstandingPings&lt;/code&gt; configuration option. The default maximum is 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26eb8053627d47554ec8e4748dd4a8bcdd49e7f" translate="yes" xml:space="preserve">
          <source>The maximum number of symbolic links is platform-independent and generally (much) higher than what the native &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt; implementation supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94ad0cb0a50f3f5bdf9cda632f12e11fe8b2d3c" translate="yes" xml:space="preserve">
          <source>The maximum recorded event loop delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647c52fe290a7aa0392bcd60aa3e9e2f4dab2700" translate="yes" xml:space="preserve">
          <source>The maximum size of an &lt;code&gt;IPv4/v6&lt;/code&gt; datagram depends on the &lt;code&gt;MTU&lt;/code&gt; (&lt;em&gt;Maximum Transmission Unit&lt;/em&gt;) and on the &lt;code&gt;Payload Length&lt;/code&gt; field size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c3f8c7f0bd7f8db827a8ebcb0ca9509efeb97a" translate="yes" xml:space="preserve">
          <source>The mean of the recorded event loop delays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f193e4b5fc479c115e65c9999a21010d722c79d" translate="yes" xml:space="preserve">
          <source>The memory requirements for deflate are (in bytes):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eacc04002b65ca67778dff1de5027c712ab8e1a" translate="yes" xml:space="preserve">
          <source>The memory requirements for inflate are (in bytes) &lt;code&gt;1 &amp;lt;&amp;lt; windowBits&lt;/code&gt;. That is, 32K for &lt;code&gt;windowBits&lt;/code&gt; = 15 (default value) plus a few kilobytes for small objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c881f56c61219eddbd5d1710886ef6e2c313ce3" translate="yes" xml:space="preserve">
          <source>The message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37151c2ac4132bcfb25dd3c68d1938f51160451" translate="yes" xml:space="preserve">
          <source>The message object will be cloned immediately, and can be modified after posting without having side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d1ac7e35b326d112fee222e33f843490785590" translate="yes" xml:space="preserve">
          <source>The method takes an optional callback argument which will be called when finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0afa109747da35e840872d11340eff9b15a2a35" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; of &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; do nothing, and will fail silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65996ffdf606c98d77d22fda6e8263c7bed158b" translate="yes" xml:space="preserve">
          <source>The methods available to open/close escapable scopes are &lt;a href=&quot;#n_api_napi_open_escapable_handle_scope&quot;&gt;&lt;code&gt;napi_open_escapable_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_escapable_handle_scope&quot;&gt;&lt;code&gt;napi_close_escapable_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7f17950f4eb3a239490edb84d05cd598355449" translate="yes" xml:space="preserve">
          <source>The microtask queue is managed by V8 and may be used in a similar manner to the &lt;a href=&quot;process#process_process_nexttick_callback_args&quot;&gt;&lt;code&gt;process.nextTick()&lt;/code&gt;&lt;/a&gt; queue, which is managed by Node.js. The &lt;code&gt;process.nextTick()&lt;/code&gt; queue is always processed before the microtask queue within each turn of the Node.js event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05947aeb4f6c9d9feac9d8917230029f87168411" translate="yes" xml:space="preserve">
          <source>The minimum recorded event loop delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be72cf9e2e6df44acaf71ac6c27e3da259cdcc2" translate="yes" xml:space="preserve">
          <source>The module &lt;code&gt;circle.js&lt;/code&gt; has exported the functions &lt;code&gt;area()&lt;/code&gt; and &lt;code&gt;circumference()&lt;/code&gt;. Functions and objects are added to the root of a module by specifying additional properties on the special &lt;code&gt;exports&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd317962ef868748c6e477d31e0f52215463c2e" translate="yes" xml:space="preserve">
          <source>The module attempted to be linked is not eligible for linking, because of one of the following reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6117dfe73589e1d686592596ca5b97da3586b173" translate="yes" xml:space="preserve">
          <source>The module being returned from the linker function is from a different context than the parent module. Linked modules must share the same context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be65968fa64f9f3415d7e7899fb6ad4d2a42a64" translate="yes" xml:space="preserve">
          <source>The module exports two specific components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3241b3dc4fc159dd6e2590373d2f6edcaca405" translate="yes" xml:space="preserve">
          <source>The module must be successfully linked before instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edecdd64b4818b59b9da919865b135b48e57f0bb" translate="yes" xml:space="preserve">
          <source>The module objects required for the first time by this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0efd9dd4962ae01761dcb591cc702fc4f262e3" translate="yes" xml:space="preserve">
          <source>The module scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783407a2289306a27cdc3bf69c55122205f1e40d" translate="yes" xml:space="preserve">
          <source>The module system is implemented in the &lt;code&gt;require('module')&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca030e9e59563188e9d15b093eec01f36cca3aa6" translate="yes" xml:space="preserve">
          <source>The module that first required this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad9c14b8f764d47a4fb23c7484512d125b92fd5" translate="yes" xml:space="preserve">
          <source>The module was just created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082e3484f6cb16e77ed0dc3f94403f9c18a5ec0a" translate="yes" xml:space="preserve">
          <source>The module wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18aaff3433da4c58d496f8db6bf908cfd48e4f29" translate="yes" xml:space="preserve">
          <source>The most important aspect of a &lt;code&gt;Duplex&lt;/code&gt; stream is that the &lt;code&gt;Readable&lt;/code&gt; and &lt;code&gt;Writable&lt;/code&gt; sides operate independently of one another despite co-existing within a single object instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f36b77ff922a2403a1b2438e1910c61bbb93ec" translate="yes" xml:space="preserve">
          <source>The most important options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a91b5a7f101c727c39dcfae1c0be6d89c0e6303" translate="yes" xml:space="preserve">
          <source>The name of each event will be the uppercase common name for the signal (e.g. &lt;code&gt;'SIGINT'&lt;/code&gt; for &lt;code&gt;SIGINT&lt;/code&gt; signals).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cd701586e7eaa9dfde58572cc7c8d826dd60dc" translate="yes" xml:space="preserve">
          <source>The name of the performance entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec39d8bbebcb83f8210715189a3aea03a7b994d" translate="yes" xml:space="preserve">
          <source>The namespace object of the module. This is only available after instantiation (&lt;code&gt;module.instantiate()&lt;/code&gt;) has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd84ef951114b730ce5684383645649d6a6845e0" translate="yes" xml:space="preserve">
          <source>The native call from &lt;code&gt;process.cpuUsage&lt;/code&gt; could not be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7b61be8fe480e6e6c7b99bd03833436cc52bb9" translate="yes" xml:space="preserve">
          <source>The nearest parent &lt;code&gt;package.json&lt;/code&gt; is defined as the first &lt;code&gt;package.json&lt;/code&gt; found when searching in the current folder, that folder&amp;rsquo;s parent, and so on up until the root of the volume is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47af3d50d7c8bfe981c9b403f0861c45f375cb81" translate="yes" xml:space="preserve">
          <source>The new commands can then be used from within the REPL instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104e36e764dd9d0fb07447c31dcb417f6bea33e2" translate="yes" xml:space="preserve">
          <source>The new settings will not become effective until the &lt;code&gt;SETTINGS&lt;/code&gt; acknowledgment is received and the &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted. It is possible to send multiple &lt;code&gt;SETTINGS&lt;/code&gt; frames while acknowledgment is still pending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010aa406081834f99277106d0000f1552dc8125a" translate="yes" xml:space="preserve">
          <source>The new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4c6fb13126abaa4bc413e810cd00b6053f1ddd" translate="yes" xml:space="preserve">
          <source>The newly created function is not automatically visible from script after this call. Instead, a property must be explicitly set on any object that is visible to JavaScript, in order for the function to be accessible from script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b9c478ea5e686312bd5f0cfbbb2ae1c6a164ca" translate="yes" xml:space="preserve">
          <source>The newly created socket can be either a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint, depending on what it &lt;a href=&quot;#net_socket_connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762b7516f06acc39fd303e873da3eae3984842c2" translate="yes" xml:space="preserve">
          <source>The next difference is the signature for the &lt;code&gt;Init&lt;/code&gt; method. For a N-API module it is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f47c77d786656094e158322f5944ac67692ac6" translate="yes" xml:space="preserve">
          <source>The next program will check for the stats of the given paths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707e00467eb1024ad6a41e2d7fd76cd835c436ed" translate="yes" xml:space="preserve">
          <source>The number of blocks allocated for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a2027f23d852082230368e8e225b949453c0da" translate="yes" xml:space="preserve">
          <source>The number of bytes that have been read so far.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a86f54b7a1f2469bc5f5667c33947867d66d1f" translate="yes" xml:space="preserve">
          <source>The number of bytes written so far. Does not include data that is still queued for writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83db9368d81b7eaf94d6048ec32eddfadddf804d" translate="yes" xml:space="preserve">
          <source>The number of concurrent connections on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b897cc45a35e5f5bff42b399899953585ae33b16" translate="yes" xml:space="preserve">
          <source>The number of frames captured by the stack trace is bounded by the smaller of &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; or the number of available frames on the current event loop tick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6549fcc0f129140e66512a1427b7f4614faf5cbc" translate="yes" xml:space="preserve">
          <source>The number of hard-links that exist for the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adda133b3952499899f6f3919881bfa0307c4d10" translate="yes" xml:space="preserve">
          <source>The number of milliseconds of inactivity a server needs to wait for additional incoming data, after it has finished writing the last response, before a socket will be destroyed. If the server receives new data before the keep-alive timeout has fired, it will reset the regular inactivity timeout, i.e., &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ad62fcca99d252c1246acfaf3c6b73cd75231d" translate="yes" xml:space="preserve">
          <source>The number of milliseconds of inactivity before a socket is presumed to have timed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e172dc32b60a311b65c6eb277f6b79d272de8ad1" translate="yes" xml:space="preserve">
          <source>The number of streams created on a single HTTP/2 session reached the maximum limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485571648f798cc1149fe3dc79decc281b4c7db7" translate="yes" xml:space="preserve">
          <source>The number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac86f8862e149dadb72b2dbeec6eb8381b8ba41a" translate="yes" xml:space="preserve">
          <source>The numeric group identifier of the group that owns the file (POSIX).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fbb303d7117ac0cc3ddd8c21e8aa6323d739de" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the device containing the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bcfd36761a1de493eeb09cab611d6b7581ca7fe" translate="yes" xml:space="preserve">
          <source>The numeric representation of the local port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042883a8dd9e1f35f72278a7a8626cb40d0978ea" translate="yes" xml:space="preserve">
          <source>The numeric representation of the remote port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62dd787bc222e91a4a0ed4bf6ba392d5a6fb778" translate="yes" xml:space="preserve">
          <source>The numeric stream identifier of this &lt;code&gt;Http2Stream&lt;/code&gt; instance. Set to &lt;code&gt;undefined&lt;/code&gt; if the stream identifier has not yet been assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8f383702a5ceae99ce4b389c67ad72755ba3f7" translate="yes" xml:space="preserve">
          <source>The numeric user identifier of the user that owns the file (POSIX).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9383b10ddf25c0ce6d97c93198a1bf00d5916ca1" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;querystring.parse()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be819bdae9121513238d1f9a8e195544167c627a" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;response.getHeaders()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebb203e4256fb19d4ef99599ca9b09d60bab677" translate="yes" xml:space="preserve">
          <source>The object that acts as the namespace for all W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; related functionality. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla Developer Network&lt;/a&gt; for usage and compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5307f8ae4e7b8daeba7438d364931e5ea281096" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are a number of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc78f21c4e5c2db90b51724d6195216ddadfbc62" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;code&gt;.fork()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18120e27e4c6e292bcb271ec4406958e025cda8" translate="yes" xml:space="preserve">
          <source>The only way to know for sure that the datagram has been sent is by using a &lt;code&gt;callback&lt;/code&gt;. If an error occurs and a &lt;code&gt;callback&lt;/code&gt; is given, the error will be passed as the first argument to the &lt;code&gt;callback&lt;/code&gt;. If a &lt;code&gt;callback&lt;/code&gt; is not given, the error is emitted as an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;socket&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad3e7e145c0e7190f2d6920ff4570771b7cd38d" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;a href=&quot;#domain_domain_add_emitter&quot;&gt;&lt;code&gt;domain.add(emitter)&lt;/code&gt;&lt;/a&gt;. Removes domain handling from the specified emitter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caab31fb22afb4b240d3935cb5134e9f4f33d038" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; arguments specify a memory range within the &lt;code&gt;arrayBuffer&lt;/code&gt; that will be shared by the &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b96aca949c2dfad90f34208e151d92d5c4e3782" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: &lt;code&gt;null&lt;/code&gt; on success, or an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4bda021a4230b873e23262d38a21e96fd815c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f75dfbd1ccb81dcb45cc7787f70bf228fab77d5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a388a3c8ef1c6891f4bc45f8cf75c4ca428eb38" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out - this may not be immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4848a2877fc4fdda35fdaabacb12c2f613d9bff6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;constructorOpt&lt;/code&gt; argument accepts a function. If given, all frames above &lt;code&gt;constructorOpt&lt;/code&gt;, including &lt;code&gt;constructorOpt&lt;/code&gt;, will be omitted from the generated stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd4f60ba39ba1f7450156da76a6991f33b60f2b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;flags&lt;/code&gt; argument uses &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; by default. The &lt;code&gt;flags&lt;/code&gt; is a bit field taking one of or a mix of the following flags (defined in &lt;code&gt;crypto.constants&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9f65c30553afbd1b4d82c484f88aa304441ee3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given fd. If the &lt;code&gt;statCheck&lt;/code&gt; function is provided, the &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; method will perform an &lt;code&gt;fs.fstat()&lt;/code&gt; call to collect details on the provided file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ca99509b25a6ab5ee70308bafe39a1b71f3d06" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b397372595487a1e26df98289fea04b5b45c5e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72091fa8c95571c209adee473c28da126c9baae6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3104057b5c38fd9e4bdac45532ce193dd2ed26" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb2522fc8cd80845e2a3e2842ca468e7ddb1fc0" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5b6bb3218a1bc4526850c82e33474df9261f0f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb7ec41225ab0c4c453df7c72a1c959224af868" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb0aa1d9d2894d118c49c7e7622ffb29c1d85fd" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a60b46a69ed6136f940f53c21b10d9760164ad" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b1ce0f8bd5bffe9b99b0262eb3a242c5e14124" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29432448e6ca0758f3927cc455e95393816652f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe44a69d963c148c4578bad831ce5ae5a6ff0b73" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261827080f081a265d9518c196a9756632d4c999" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;sendHandle&lt;/code&gt; argument that may be passed to &lt;code&gt;subprocess.send()&lt;/code&gt; is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Any data that is received and buffered in the socket will not be sent to the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21776c2a95a91147668e079bc279b294e52498a6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;size&lt;/code&gt; argument specifies a specific number of bytes to read. If &lt;code&gt;size&lt;/code&gt; bytes are not available to be read, &lt;code&gt;null&lt;/code&gt; will be returned &lt;em&gt;unless&lt;/em&gt; the stream has ended, in which case all of the data remaining in the internal buffer will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcc1ff991ba74f3e2341e794b5bd2a7209b9bd5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;targetStart&lt;/code&gt;, &lt;code&gt;targetEnd&lt;/code&gt;, &lt;code&gt;sourceStart&lt;/code&gt;, and &lt;code&gt;sourceEnd&lt;/code&gt; arguments can be used to limit the comparison to specific ranges within &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8fd304a1c7493a27d13d17ca2a7665914145e8" translate="yes" xml:space="preserve">
          <source>The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf5d71ef6bb11c383df71dca6fed4c4d1e8880f" translate="yes" xml:space="preserve">
          <source>The output of running this script is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45989adee27623dee9b58303d643cfed64b9aa3e" translate="yes" xml:space="preserve">
          <source>The owner may read, write and execute the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705e766de26998db30b9b74945357c8783455fd0" translate="yes" xml:space="preserve">
          <source>The package scope applies not only to initial entry points (&lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt;) but also to files referenced by &lt;code&gt;import&lt;/code&gt; statements and &lt;code&gt;import()&lt;/code&gt; expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7564c3f9eff583a58e8d21cd99ee8d14688a3bf" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object can be a string now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59339c89766317598c7665c33ea20dd610e99de" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object will never be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2d39c4340f5b4b6c986cba1d575aa90762c3be" translate="yes" xml:space="preserve">
          <source>The path for the main script of a worker is neither an absolute path nor a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a68f2ecb4bd3f38847a7eeccce766303a522feb" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is reading from as specified in the first argument to &lt;code&gt;fs.createReadStream()&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;readStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;readStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bb0d95641a2afd52bb195881c3abca28b19aa5" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is writing to as specified in the first argument to &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5303b9030ddafd814201239d3425172e5de09971" translate="yes" xml:space="preserve">
          <source>The pathname used for the main script of a worker has an unknown file extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842995cd8000d0efb4e4627b63f283405c9de9df" translate="yes" xml:space="preserve">
          <source>The policy manifest will be used to enforce constraints on code loaded by Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37ced12d39d64c1acd89371245e9dd2d45e0ac9" translate="yes" xml:space="preserve">
          <source>The port used by Node.js's debugger when enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95b5aab3ab3fba91f054dea6c27fd9fd3c7181c" translate="yes" xml:space="preserve">
          <source>The port value can be an empty string in which case the port depends on the protocol/scheme:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35240f5bbe9b687669eb3a21a6d605183b197a00" translate="yes" xml:space="preserve">
          <source>The port value may be a number or a string containing a number in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt; (inclusive). Setting the value to the default port of the &lt;code&gt;URL&lt;/code&gt; objects given &lt;code&gt;protocol&lt;/code&gt; will result in the &lt;code&gt;port&lt;/code&gt; value becoming the empty string (&lt;code&gt;''&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e1752bb85ccb2347cdba3385d98029d5ceffb3" translate="yes" xml:space="preserve">
          <source>The predefined color codes are: &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;yellow&lt;/code&gt;. There are also &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt; and &lt;code&gt;inverse&lt;/code&gt; codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8feec306734bdd21e98aea495e525ccece43f81" translate="yes" xml:space="preserve">
          <source>The previously undocumented &lt;code&gt;timers.active()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If re-referencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt;&lt;code&gt;timeout.ref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa2c8b129174c0fc077a4918a3e4b0112acc742" translate="yes" xml:space="preserve">
          <source>The previously undocumented and &quot;private&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If unreferencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt;&lt;code&gt;timeout.unref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301d6f86720b7caebae0c21957576c82619859d7" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to avoid a situation where writing many small chunks of data to a stream do not cause a backup in the internal buffer that would have an adverse impact on performance. In such situations, implementations that implement the &lt;code&gt;writable._writev()&lt;/code&gt; method can perform buffered writes in a more optimized manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64985acfc6f181ff488fc6817834027a19e84721" translate="yes" xml:space="preserve">
          <source>The process could not be killed, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e873e5b18616841f05efdd386c89f6ba201225db" translate="yes" xml:space="preserve">
          <source>The process could not be spawned, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfa64f515a1b0181d935c05f6c69ffff6fbfd05" translate="yes" xml:space="preserve">
          <source>The process object. See the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a87c186d9fc90f05f38ed4cba9e32faeadbae9" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt;. This corresponds to &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-14&lt;/code&gt; on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b5e718648dcd24e1f04e65ec6ef9126189b362" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_LOW&lt;/code&gt; and below &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt;. This corresponds to &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;10&lt;/code&gt; on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f606e78cf90aabba4bf4bb1ef36128cea4c14f" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;. This corresponds to &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-7&lt;/code&gt; on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681821ab96576ebe60cbcdd765ffba967ab60b31" translate="yes" xml:space="preserve">
          <source>The properties available on the assigned network address object include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15089f6598bc6c72817c26575069415cd75bbb85" translate="yes" xml:space="preserve">
          <source>The properties included on each object include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cbb03653d9c062d765fd9dedb500b4ce391d11" translate="yes" xml:space="preserve">
          <source>The protocol identifier (&lt;code&gt;'h2'&lt;/code&gt; in the examples) may be any valid &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN Protocol ID&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682dd72da7ec2fc2dd775aaa85fc979fb00717b6" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt; of the context are made visible through the Inspector API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c874b3f599c2f388ee9adaf7c51cc16c6ca9ab2" translate="yes" xml:space="preserve">
          <source>The provided address family is not understood by the Node.js API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ce53307f0479c8ec03dffd96128613abfed0ef" translate="yes" xml:space="preserve">
          <source>The raw headers as they were received are retained in the &lt;code&gt;rawHeaders&lt;/code&gt; property, which is an array of &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt;. For example, the previous message header object might have a &lt;code&gt;rawHeaders&lt;/code&gt; list like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f581d673868d237fedae3567c8e5ca1905d79d" translate="yes" xml:space="preserve">
          <source>The raw request/response headers list exactly as they were received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b985d4474679d7d8436722ff0ebeff67e3eb82aa" translate="yes" xml:space="preserve">
          <source>The raw request/response trailer keys and values exactly as they were received. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34df59cd5882c36bd6c67c750c332e85dde52821" translate="yes" xml:space="preserve">
          <source>The reading will begin at the current position. For example, if the file already had &lt;code&gt;'Hello World&lt;/code&gt;' and six bytes are read with the file descriptor, the call to &lt;code&gt;fs.readFile()&lt;/code&gt; with the same file descriptor, would give &lt;code&gt;'World'&lt;/code&gt;, rather than &lt;code&gt;'Hello World'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5389685a663870c4323e668ef2d2e417308f1a" translate="yes" xml:space="preserve">
          <source>The reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object's lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e95038a9c64315188042fc9eab57e4956f07d72" translate="yes" xml:space="preserve">
          <source>The reason this is problematic is because writes to &lt;code&gt;process.stdout&lt;/code&gt; in Node.js are sometimes &lt;em&gt;asynchronous&lt;/em&gt; and may occur over multiple ticks of the Node.js event loop. Calling &lt;code&gt;process.exit()&lt;/code&gt;, however, forces the process to exit &lt;em&gt;before&lt;/em&gt; those additional writes to &lt;code&gt;stdout&lt;/code&gt; can be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882e863942bbfdb2c275d570776a56f3cb7eed13" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96411a8d35be2600a6fa3cb907c90d1ed0ea5379" translate="yes" xml:space="preserve">
          <source>The reference must be freed once it is no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da8026af719b1ab6b55c12dbb1cb53a3be6fd63" translate="yes" xml:space="preserve">
          <source>The report is intended for development, test and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f104dfa09be26fcee1ec1287c9793da8d202a7" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. It can also be accessed via &lt;code&gt;req.headers[':authority']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cc8ec77eab284c5b1d9a9e8bee79b0a4e96211" translate="yes" xml:space="preserve">
          <source>The request inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f1ed5fc05d92917b60ebf9072ab11385b53fc9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b820a151f8af96f9a8410852cebe4b9fce928d9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read-only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2b93920ae2dda23261c83e7efa9025f30a8059" translate="yes" xml:space="preserve">
          <source>The request scheme pseudo header field indicating the scheme portion of the target URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62ea70efeb08e31455b4542aaf477b0d2b0fbb4" translate="yes" xml:space="preserve">
          <source>The request to promote a handle is made through &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt;&lt;code&gt;napi_escape_handle&lt;/code&gt;&lt;/a&gt; which can only be called once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35bb861539c1d20772a3a4da4e40cab1b2864ac" translate="yes" xml:space="preserve">
          <source>The request/response headers object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa13e0d6f5d17d44de1820e6c6f833cd6533735" translate="yes" xml:space="preserve">
          <source>The request/response trailers object. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76afa09b3c9e4455c22d150e86e0a878c83b5f18" translate="yes" xml:space="preserve">
          <source>The requested functionality is not supported in worker threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130c49b75db4d5f28d69526125533d14026a98f8" translate="yes" xml:space="preserve">
          <source>The resolve hook returns the resolved file URL and module format for a given module specifier and parent file URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad6fadfeabaeb9c9c66df7b9fd54f216fa3d3aa" translate="yes" xml:space="preserve">
          <source>The resolver has the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965055eab4b20e712cee07e74d7e15f1dc310a7e" translate="yes" xml:space="preserve">
          <source>The response inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18e030ec3ca1714e02a7b098543adb935c78705" translate="yes" xml:space="preserve">
          <source>The result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b8022504a26ffb5513f898bea8594dd091a830" translate="yes" xml:space="preserve">
          <source>The result of a previous call to &lt;code&gt;process.cpuUsage()&lt;/code&gt; can be passed as the argument to the function, to get a diff reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c970c11e0a87e0dc98113377ad10bd2ef4c395a" translate="yes" xml:space="preserve">
          <source>The result of this function no longer contains a fraction component on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350b994c82684bd0c40d5f8bba62015f9d892265" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;BigInt&lt;/code&gt; is calculated as: (&amp;ndash;1)&lt;sup&gt;&lt;code&gt;sign_bit&lt;/code&gt;&lt;/sup&gt; (&lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;1&lt;/sup&gt; + &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090264918bf0db3d97f15783938c5710acd286f9" translate="yes" xml:space="preserve">
          <source>The resulting output will resemble:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6592f1ecacf5d99cad7d854240afeddc010dff43" translate="yes" xml:space="preserve">
          <source>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6755c8e673605ed2b394bffd53b16e00aa04ed50" translate="yes" xml:space="preserve">
          <source>The return value &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; represents the generated key pair. When PEM encoding was selected, the respective key will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d46df7105ceb22c98097c79674b8da75df0880" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns NULL, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7768bae4378835321f00405e40f7b2cd7232e22" translate="yes" xml:space="preserve">
          <source>The return value includes fractions of a second. Use &lt;code&gt;Math.floor()&lt;/code&gt; to get whole seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d244151a2074f335e80ec7c64b042a2a7bf155" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;true&lt;/code&gt; if the internal buffer is less than the &lt;code&gt;highWaterMark&lt;/code&gt; configured when the stream was created after admitting &lt;code&gt;chunk&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; is returned, further attempts to write data to the stream should stop until the &lt;a href=&quot;#stream_event_drain&quot;&gt;&lt;code&gt;'drain'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a297e4c1534ad58591aefd1896f05fb34a3b663" translate="yes" xml:space="preserve">
          <source>The return value will be &lt;code&gt;napi_ok&lt;/code&gt; if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the &lt;code&gt;napi_status&lt;/code&gt; value for the error will be returned. If an exception was thrown, and no error occurred, &lt;code&gt;napi_pending_exception&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30bf17d9b1e59d4e5f5069fa0021e31e3506815" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; will be an object in the target context, and will inherit from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener will also be created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc70b1227f01401a4b050e13257206410687bd0" translate="yes" xml:space="preserve">
          <source>The returned buffer is statically allocated and does not need to be freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fcc6c2ece2cf3c7e594688e04adf2e09823305" translate="yes" xml:space="preserve">
          <source>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03e4b5f6edfce2e491d26c75c656ecf3f9be2a9" translate="yes" xml:space="preserve">
          <source>The returned object no longer inherits from &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efca954612151fbe49aeec68bf42cb1165e6aba5" translate="yes" xml:space="preserve">
          <source>The returned object will have the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2663bc23f657359a1e5a0d9802b2b8ab09e2c133" translate="yes" xml:space="preserve">
          <source>The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17642e3dfd2688c6cd67e72a34c50952e74d46ec" translate="yes" xml:space="preserve">
          <source>The same options as &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61aae47bb566b3e756d07254aa9ebf2e27b0d263" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called, whichever comes first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478005d19999ae183e0f7a9bb0ae6f007bd16fbb" translate="yes" xml:space="preserve">
          <source>The search paths for the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfd0df8336c867963656caf2b437c62fdf98b4d" translate="yes" xml:space="preserve">
          <source>The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt;&lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt;&lt;/a&gt; can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript &lt;code&gt;Object&lt;/code&gt; thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with &lt;a href=&quot;#n_api_napi_throw&quot;&gt;&lt;code&gt;napi_throw&lt;/code&gt;&lt;/a&gt; where error is the JavaScript &lt;code&gt;Error&lt;/code&gt; object to be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc926d997d4c579499bbdcda07f643f7920bddbb" translate="yes" xml:space="preserve">
          <source>The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338ae710bded6a0f6fd004eec96b553cb3dbb378" translate="yes" xml:space="preserve">
          <source>The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15f3c8ca4baed085ff4f00bb83df9df5112dc61" translate="yes" xml:space="preserve">
          <source>The second argument can now be an &lt;code&gt;options&lt;/code&gt; object with &lt;code&gt;recursive&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056385b629217bf4d47083a5cf61e4dbc958e791" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If &lt;code&gt;options&lt;/code&gt; is provided as a string, it specifies the &lt;code&gt;encoding&lt;/code&gt;. Otherwise &lt;code&gt;options&lt;/code&gt; should be passed as an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e19e2fd3684a2ee8b1c503085e8dc2cb74704b7" translate="yes" xml:space="preserve">
          <source>The selected public or private key encoding is incompatible with other options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b9aebdd568a045c5581d3668edfbe15a6a2bea" translate="yes" xml:space="preserve">
          <source>The semantics of Node.js's &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd892ccc6dffe2bd093abfe21edcd6594062c97" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;. The format is backward-compatible (i.e. safe to store to disk).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6375e172794a973dd431fe6fb6d9d47672ad78be" translate="yes" xml:space="preserve">
          <source>The server can be a TCP server or an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server, depending on what it &lt;a href=&quot;#net_server_listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2404f9b86c98cba231fff8bebda45b2ca16649b5" translate="yes" xml:space="preserve">
          <source>The server can be tested by connecting to it using the example client from &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aede112d180e1d47ab7a08eaa5b0ea3c6ed75bc2" translate="yes" xml:space="preserve">
          <source>The server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, &lt;code&gt;callback(null, resp)&lt;/code&gt; is then invoked, where &lt;code&gt;resp&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; instance containing the OCSP response. Both &lt;code&gt;certificate&lt;/code&gt; and &lt;code&gt;issuer&lt;/code&gt; are &lt;code&gt;Buffer&lt;/code&gt; DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76accd0d371c0c87373d40be1eddae24ddb6507b" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command line parsing should be compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21be831d3adf2892b25eaf65824eb2c524ecba41" translate="yes" xml:space="preserve">
          <source>The shell that executed Node.js should see the exit code as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c0d6d3b494c3c20fef212dff014249c946a65b" translate="yes" xml:space="preserve">
          <source>The signal handler will receive the signal's name (&lt;code&gt;'SIGINT'&lt;/code&gt;, &lt;code&gt;'SIGTERM'&lt;/code&gt;, etc.) as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e574501f3a0d99059119864ec3279d3f9294c3" translate="yes" xml:space="preserve">
          <source>The signal used to trigger the creation of a diagnostic report. Defaults to &lt;code&gt;'SIGUSR2'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52541ad62fc4e1c6ca8683f187715851a92c6fd" translate="yes" xml:space="preserve">
          <source>The simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5cdd3536fe2bed3772a134a40f524b1ba55908" translate="yes" xml:space="preserve">
          <source>The socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9568eb7140ccc6f348c4550a9426056f00bc293" translate="yes" xml:space="preserve">
          <source>The specific operation of &lt;code&gt;console.clear()&lt;/code&gt; can vary across operating systems and terminal types. For most Linux operating systems, &lt;code&gt;console.clear()&lt;/code&gt; operates similarly to the &lt;code&gt;clear&lt;/code&gt; shell command. On Windows, &lt;code&gt;console.clear()&lt;/code&gt; will clear only the output in the current terminal viewport for the Node.js binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f56414b822e235f350940f03c7fed02c4a3f19" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;secureProtocol&lt;/code&gt; method is invalid. It is either unknown, or disabled because it is insecure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1dd38b3953bad12ed9a2d4c03e49e9322e0421" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if &lt;code&gt;require()&lt;/code&gt; uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c55e13b6ab04144ed0ca0148cd676f281a362f" translate="yes" xml:space="preserve">
          <source>The specifiers of all dependencies of this module. The returned array is frozen to disallow any changes to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6712a27a78d38007f4db6badef0327b5c9f247ac" translate="yes" xml:space="preserve">
          <source>The speed of &lt;code&gt;zlib&lt;/code&gt; compression is affected most dramatically by the &lt;code&gt;level&lt;/code&gt; setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baae50c19885878970af46308a9fcef6e3ca5413" translate="yes" xml:space="preserve">
          <source>The stack trace is extended to include the point in time at which the &lt;code&gt;domain&lt;/code&gt; module had been loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04dab8c062b60270fff8951733a2c1bf12db8dc" translate="yes" xml:space="preserve">
          <source>The standard deviation of the recorded event loop delays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2ac76df98dbcdd434e991056889f9574990f71" translate="yes" xml:space="preserve">
          <source>The stream is not closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;true&lt;/code&gt; when creating the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44550d4120786eeeb6f0da72c77067c943d5e7f" translate="yes" xml:space="preserve">
          <source>The stream is not piped to any writable destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138b0e7f3ba481dfbd0c57d82fdbac0b326fefae" translate="yes" xml:space="preserve">
          <source>The stream's write() callback and return value are exposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350def31fd9875bd3d581c4fbb2b29aebcde0c4d" translate="yes" xml:space="preserve">
          <source>The string passed to &lt;code&gt;require()&lt;/code&gt; is the name of the target in &lt;code&gt;binding.gyp&lt;/code&gt; responsible for creating the &lt;code&gt;.node&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4858a294cb8f6108238742da8a2f702b4e7800" translate="yes" xml:space="preserve">
          <source>The string representation of the local IP address the remote client is connecting on. For example, in a server listening on &lt;code&gt;'0.0.0.0'&lt;/code&gt;, if a client connects on &lt;code&gt;'192.168.1.1'&lt;/code&gt;, the value of &lt;code&gt;socket.localAddress&lt;/code&gt; would be &lt;code&gt;'192.168.1.1'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c907e196491aec5b81c0d022d86f6e906bde2939" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP address. For example, &lt;code&gt;'74.125.127.100'&lt;/code&gt; or &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt;. Value may be &lt;code&gt;undefined&lt;/code&gt; if the socket is destroyed (for example, if the client disconnected).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2179deb625958e34cb0c9470426542821e19d005" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP family. &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14d2cbabe1d821f1fe19c891d331b602e974058" translate="yes" xml:space="preserve">
          <source>The string representing the stack trace is lazily generated when the &lt;code&gt;error.stack&lt;/code&gt; property is &lt;strong&gt;accessed&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fe85fdbe508ef6c827c907e5d2f1831bd9b29d" translate="yes" xml:space="preserve">
          <source>The substring that was used for the matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4576fd7cf24c54c52dedbc9e9bd4dfe7af6d9fe" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an error occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. By default, the successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. An error will be thrown if any of the input arguments specify invalid values or types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b6f6c400f32e4c15818f48380024fa6f42a8c5" translate="yes" xml:space="preserve">
          <source>The syntax of these values is not validated by the Node.js implementation and are passed through as provided by the user or received from the peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6225c4c4ebdc288d3a2d4ec23c52209f6023bf46" translate="yes" xml:space="preserve">
          <source>The term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;Forward Secrecy&lt;/a&gt;&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5027f2889856b5eff5759ff3a0048ebbb10df85e" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must make no further use of the thread-safe function because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e67c9640ec1fa6137f83769ae5b65b87eb23576" translate="yes" xml:space="preserve">
          <source>The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;Event Loop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24142a2f59af56bc69ad24cdd8ff0eb028144072" translate="yes" xml:space="preserve">
          <source>The times in the stat object have the following semantics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11338b33321f7c1210af69f2e5b2929e07ab4a7f" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b34123fd039eac484c0932d35c7d243a87f909" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724e46ddf25f0bcf42fa24bc37ddf8c0097582d7" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61773109ba1c85f4ebece132711c5158b722aa5c" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069fd01b27a0105d764e62a925be9ce027926e36" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6699921685ac3e2dd128110a9aa9134e05fa52" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c50105501bb2bfd22cb492162a0f85fc156c0e" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04d4005b317a67d275b64117bfd954f165821eb" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee4420a40bacb4b309040070a2a109b60250f40" translate="yes" xml:space="preserve">
          <source>The total number of milliseconds elapsed for this entry. This value will not be meaningful for all Performance Entry types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abafe3c3983a12616d3ab9d5970201bbaeddb49e" translate="yes" xml:space="preserve">
          <source>The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580e806012432ab96eb065a247141bef72a7f774" translate="yes" xml:space="preserve">
          <source>The type of an asynchronous resource was invalid. Users are also able to define their own types if using the public embedder API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fe24a1a4412575d21267293d8a210703d96afd" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. Currently it may be one of: &lt;code&gt;'node'&lt;/code&gt;, &lt;code&gt;'mark'&lt;/code&gt;, &lt;code&gt;'measure'&lt;/code&gt;, &lt;code&gt;'gc'&lt;/code&gt;, &lt;code&gt;'function'&lt;/code&gt;, &lt;code&gt;'http2'&lt;/code&gt; or &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5e053536c481a8b50ecd5b068ee7fcf0ba2c2e" translate="yes" xml:space="preserve">
          <source>The type tags are now properly compared and there are a couple minor comparison adjustments to make the check less surprising.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ae4d26f68ff9e770ba1c7b9fe1bb317ab919ab" translate="yes" xml:space="preserve">
          <source>The typical flow of an OCSP Request is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed60e000342dc962c9266db500477f9e994c8a86" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize such &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b7a5f60ed15b149caff061065151e09d20b14b" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a787b77e22fb6f3e77127ec8593459c30794b75" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;SlowBuffer&lt;/code&gt; instances is &lt;em&gt;not initialized&lt;/em&gt;. The contents of a newly created &lt;code&gt;SlowBuffer&lt;/code&gt; are unknown and may contain sensitive data. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize a &lt;code&gt;SlowBuffer&lt;/code&gt; with zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867a8f54f53cc42a74637197afdab6fff988978b" translate="yes" xml:space="preserve">
          <source>The undocumented &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; function was originally intended for debugging and performance tuning when using the &lt;code&gt;child_process&lt;/code&gt; and &lt;code&gt;cluster&lt;/code&gt; modules on Windows. The function is not generally useful and is being removed. See discussion here: &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b521521f75103faccb7d51cd9d2f1b5e0e6ccaf" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;readable.setEncoding()&lt;/code&gt; will change the behavior of how the &lt;code&gt;highWaterMark&lt;/code&gt; operates in non-object mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27af502777cc48272ed80adad79f83defdbec1fe" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;'error'&lt;/code&gt; event mechanism is most common for &lt;a href=&quot;stream&quot;&gt;stream-based&lt;/a&gt; and &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;event emitter-based&lt;/a&gt; APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9afa630637657eabbb89a3f52ab510d1fb28688" translate="yes" xml:space="preserve">
          <source>The use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using the &lt;code&gt;enableConnectProtocol&lt;/code&gt; setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f4a988511ad2f772cdb10a461f62d9115d066c" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;is experimental&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07b4ef549b464279da1a098d4302bead0c3d309" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;to be experimental&lt;/a&gt; at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941fe2cec88cb061344cd4ca3f47041ec7d3d800" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;0&lt;/code&gt; is now accepted as a file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbfd621c854ebb6c9668e80ef6194f125b93fb8" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;undefined&lt;/code&gt; cannot be used for cases where there is not a thrown exception due to possible ambiguity with &lt;code&gt;throw undefined;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22adcf410f61546f4cf7752ab0362f5a6a5606a" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries several environment variables for the home directory before falling back to the operating system response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c400444128a7253063ab3d3ca508cbfb8b9928" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.hash&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11b40efff2f11ec85da3f23b35a76cc6588c477" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.pathname&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ee59ce8058895b38d6200c77460df3494139ea" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.port&lt;/code&gt; is coerced to a string and appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a81e556419112a8d0a931ecf395dd3247be233" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.search&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7948e802953d66c2402ca8fa5d1b25f66c1e5b8" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;code&gt;postMessage()&lt;/code&gt; contained an object that is not supported for transferring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79bd05eced9303cb66ff355ac9f577ee93b88c0" translate="yes" xml:space="preserve">
          <source>The value returned is an array of objects containing the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7dd665e8fdfe267d513d08093ce8bedbca4171" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if decoding errors result in a &lt;code&gt;TypeError&lt;/code&gt; being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ca85b3627e52d634af29f4b8a623574861fb2b" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if the decoding result will include the byte order mark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104132237db0b7ecb17081ab083c9af7c1d419d4" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; will be available inside the function body following the macro invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3768d673fbfe9fe1a8bf340a95d76c85f8f437" translate="yes" xml:space="preserve">
          <source>The workaround in this situation is to call the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method to begin the flow of data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6edeb8cb0fc86e77857d0fda8d129467b2e13b" translate="yes" xml:space="preserve">
          <source>The worker processes are spawned using the &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052d8814bbbc21731431f0d8bff6bf49f919c5ba" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;request.url&lt;/code&gt; will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c414cc316bb380ca834b2610259a592dc194ac7" translate="yes" xml:space="preserve">
          <source>Then in another file we could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfbe586e02fe7477b1253341534ea2bb9055af6" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;myobject.h&lt;/code&gt;, the wrapper class inherits from &lt;code&gt;node::ObjectWrap&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90426bdb684915cfaf8776137e646120a460c1af" translate="yes" xml:space="preserve">
          <source>Then, the above function can be invoked from a native add-on using the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73571d4285a148f8c850321e41ee7538063e9a0e" translate="yes" xml:space="preserve">
          <source>There are a few design considerations when declaring a module that may be loaded multiple times. The documentation of &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;context-aware addons&lt;/a&gt; provides more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba61ede2581496949913fe44efcbd9784cfd62d9" translate="yes" xml:space="preserve">
          <source>There are a few special headers that should be noted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136d6e7557a4d34635921dd2991584bcb620088d" translate="yes" xml:space="preserve">
          <source>There are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain N-API calls. If there is no other script on the stack the &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt;&lt;code&gt;napi_open_callback_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt;&lt;code&gt;napi_close_callback_scope&lt;/code&gt;&lt;/a&gt; functions can be used to open/close the required scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf25be1fb4ee565e1f98036a323d619cf26ae97" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. From the addon's perspective, this means that it must support multiple initializations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb4ff938e74b88ea0e6e30ab328bd442468ef8f" translate="yes" xml:space="preserve">
          <source>There are equivalents to the zlib options for Brotli-based streams, although these options have different ranges than the zlib ones:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9941613492520ff34cf0deb38e791800ee7a5c07" translate="yes" xml:space="preserve">
          <source>There are four fundamental stream types within Node.js:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde1500fca17353440ae8484822501b542d81fb1" translate="yes" xml:space="preserve">
          <source>There are four types of specifiers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a931ff5d55f1c3afbe2f95105c6e77b48277bb0" translate="yes" xml:space="preserve">
          <source>There are many stream objects provided by Node.js. For instance, a &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;request to an HTTP server&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; are both stream instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b08753e896dc3b6a7c1f8c73d6f29652afc9286" translate="yes" xml:space="preserve">
          <source>There are ongoing efforts to make the latter code possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca70f7a24329f2fb4b95221882a8404c5c05645" translate="yes" xml:space="preserve">
          <source>There are only 5 TLSv1.3 cipher suites:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5431d0afa6129bcba426cef1e17c022c359e7b17" translate="yes" xml:space="preserve">
          <source>There are several options and other constants available for Brotli-based streams:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e16077da0035c3069c49856eb3033b4b72553d" translate="yes" xml:space="preserve">
          <source>There are several options that can be set on Brotli encoders, affecting compression efficiency and speed. Both the keys and the values can be accessed as properties of the &lt;code&gt;zlib.constants&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a19ad87ed88b1d5cfb1b645ade3d15711bd59d" translate="yes" xml:space="preserve">
          <source>There are several types of error conditions that may arise when using the &lt;code&gt;http2&lt;/code&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c7f747d478773cb0c7b9fd07d4c61acf3a4a1f" translate="yes" xml:space="preserve">
          <source>There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call &lt;code&gt;readable.read(0)&lt;/code&gt;, which will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9ef41883fe3bdd2c2207efb8d44bad0186fe1c" translate="yes" xml:space="preserve">
          <source>There are subtle consequences in choosing one over the other, please consult the &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;Implementation considerations section&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6fbe184691d2e54bbf5609f598f34c9f95c95a" translate="yes" xml:space="preserve">
          <source>There are three options for implementing Addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless you need direct access to functionality which is not exposed by N-API, use N-API. Refer to the section &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f793dc4fcaeca43b4ba873686274c2e8f8925a7" translate="yes" xml:space="preserve">
          <source>There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe3f1751523750e75dcc6278c56537ba6011fcb" translate="yes" xml:space="preserve">
          <source>There is a special case when sending a &lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; message. Messages containing a &lt;code&gt;NODE_&lt;/code&gt; prefix in the &lt;code&gt;cmd&lt;/code&gt; property are reserved for use within Node.js core and will not be emitted in the child's &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Rather, such messages are emitted using the &lt;code&gt;'internalMessage'&lt;/code&gt; event and are consumed internally by Node.js. Applications should avoid using such messages or listening for &lt;code&gt;'internalMessage'&lt;/code&gt; events as it is subject to change without notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4a67800306ac64b920c2be0c83ae4d3007f584" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;PROMISE&lt;/code&gt; resource type, which is used to track &lt;code&gt;Promise&lt;/code&gt; instances and asynchronous work scheduled by them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7ccafeacce74e97b6782160f11feb38555669c" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using asynchronous methods. So the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation may complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9499af4d83f7a3933b926f5089a91e801e6f9b3b" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time &amp;mdash; possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41af3e735ab2e346b33ec05065393fa3da84547" translate="yes" xml:space="preserve">
          <source>There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a &lt;code&gt;Hash&lt;/code&gt; stream will only ever have a single chunk of output which is provided when the input is ended. A &lt;code&gt;zlib&lt;/code&gt; stream will produce output that is either much smaller or much larger than its input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6752fbe1232a75370c52187c18b0bfebe5cef5a" translate="yes" xml:space="preserve">
          <source>There is no semi-colon after &lt;code&gt;NODE_MODULE&lt;/code&gt; as it's not a function (see &lt;code&gt;node.h&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1761405f7560e0613a6cad3aca984566accc5d24" translate="yes" xml:space="preserve">
          <source>There is no way to prevent the exiting of the event loop at this point, and once all &lt;code&gt;'exit'&lt;/code&gt; listeners have finished running the Node.js process will terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d9cd97680b932da70dad66e0e134e8da83ab30" translate="yes" xml:space="preserve">
          <source>There is not normally a reason to call this method because &lt;code&gt;ECDH&lt;/code&gt; only requires a private key and the other party's public key to compute the shared secret. Typically either &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; will be called. The &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; method attempts to generate the public point/key associated with the private key being set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3585e14ee5cd0674d2bfffe8a62484838e8f1d" translate="yes" xml:space="preserve">
          <source>There may be a delay between the &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'exit'&lt;/code&gt; events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba3543dee9ea91f94206f53de987930f9874179" translate="yes" xml:space="preserve">
          <source>There was a bug in Node.js or incorrect usage of Node.js internals. To fix the error, open an issue at &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2fa69bb8b4d9e6a5a4775222f61ead5ed51450" translate="yes" xml:space="preserve">
          <source>There was an attempt to use a &lt;code&gt;MessagePort&lt;/code&gt; instance in a closed state, usually after &lt;code&gt;.close()&lt;/code&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754f342c55d3348d9516f90760098a1bea3cfcb1" translate="yes" xml:space="preserve">
          <source>These APIs provide the type &lt;code&gt;napi_threadsafe_function&lt;/code&gt; as well as APIs to create, destroy, and call objects of this type. &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; creates a persistent reference to a &lt;code&gt;napi_value&lt;/code&gt; that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3247d3394f4459aabb0d5e7cfa8d13e0f7db8b" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following: 1. Coerce JavaScript values to specific JavaScript types (such as &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;). 2. Check the type of a JavaScript value. 3. Check for equality between two JavaScript values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a10234d3fe5a51cc4325ae088318cfc712a583" translate="yes" xml:space="preserve">
          <source>These CommonJS variables are not available in ES modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749928e253ba002f7186e912db98b776c93c0d85" translate="yes" xml:space="preserve">
          <source>These advanced options are available for controlling decompression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9f62edc3aaf20d90f4845d04676a42b04260ea" translate="yes" xml:space="preserve">
          <source>These are mostly for historic reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f723d23d902d3dc9557352556e6b5d454055d450" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backwards incompatibility, but they are also expected by some users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5b136b6b60c4ed00d8df2d82c0a6a7ad030249" translate="yes" xml:space="preserve">
          <source>These errors have never been released, but had been present on master between releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d444a6c59b18503b6828306190b3da244c05eaa9" translate="yes" xml:space="preserve">
          <source>These functions are implemented quite differently than &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;. They do not use &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; and they &lt;em&gt;always&lt;/em&gt; perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv's threadpool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cdde9c4ce42694fdfee71a149f5983befb138f" translate="yes" xml:space="preserve">
          <source>These functions implement the following interfaces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067e9ba51bba0fff71ca73b5284b6b724824a791" translate="yes" xml:space="preserve">
          <source>These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the &lt;a href=&quot;modules&quot;&gt;module system documentation&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92a2040e1759234554eb3d95876ef117287affb" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f5c6bb153f7ecd9533f0a1d47aa3444a5f2641" translate="yes" xml:space="preserve">
          <source>These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0406dde620b7e64bbd32e4cb8c0bbc3121260bb2" translate="yes" xml:space="preserve">
          <source>They are used internally by &lt;a href=&quot;console#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30b2dac4cfcbca285a7b7116de61f5f1237d363" translate="yes" xml:space="preserve">
          <source>They do not use the same set of configuration files than what &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses. For instance, &lt;em&gt;they do not use the configuration from &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea56235428b28cef1f2f9acfba69b76b619221b" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2512370bd56df49b594b7a713133b58f497c3cd9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Error&lt;/code&gt; is thrown when a read is attempted on a TTY &lt;code&gt;WriteStream&lt;/code&gt;, such as &lt;code&gt;process.stdout.on('data')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39742e84897b18f0eedc2af5e9fd8236a7c65b9b" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9f6383f8d100211478dc2ef9a8cec62954908a" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735a91d83874cde7676b3e25ee0191cf41805cb1" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b77dc094889eb2692e801516cd866717730e4b3" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7998ea99d1cc838811e0d8df86d28e4a62bc8591" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the external JavaScript value gets collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363266f752f8dea9471bad2f288fed6c4c06c654" translate="yes" xml:space="preserve">
          <source>This API allocates a default JavaScript &lt;code&gt;Object&lt;/code&gt;. It is the equivalent of doing &lt;code&gt;new Object()&lt;/code&gt; in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39488fe93d490d5976e523becbfa7322dd2f6d7" translate="yes" xml:space="preserve">
          <source>This API allocates a work object that is used to execute logic asynchronously. It should be freed using &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt; once the work is no longer required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63e8ba62f11bb852241a2b0aa7b58d201a30b7b" translate="yes" xml:space="preserve">
          <source>This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling &lt;em&gt;into&lt;/em&gt; the add-on's native code &lt;em&gt;from&lt;/em&gt; JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd5fc62dd12610ddf00da4580f78086ea7a8a67" translate="yes" xml:space="preserve">
          <source>This API associates &lt;code&gt;data&lt;/code&gt; with the currently running Agent. &lt;code&gt;data&lt;/code&gt; can later be retrieved using &lt;code&gt;napi_get_instance_data()&lt;/code&gt;. Any existing data associated with the currently running Agent which was set by means of a previous call to &lt;code&gt;napi_set_instance_data()&lt;/code&gt; will be overwritten. If a &lt;code&gt;finalize_cb&lt;/code&gt; was provided by the previous call, it will not be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9807accb784346da4b294170dca41195385db4" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the &lt;code&gt;key&lt;/code&gt; own property from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14effd61c957bf8b764c352d4e546b6d39372bb" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the specified &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefd9d0b3eff1797f4ec8fa9a473e7edc0d2a2cb" translate="yes" xml:space="preserve">
          <source>This API can be called even if there is a pending JavaScript exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de8f84612348b342d10646507923c0aa5b2c0a3" translate="yes" xml:space="preserve">
          <source>This API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and &lt;code&gt;napi_generic_failure&lt;/code&gt; will be returned. If successful, the &lt;code&gt;complete&lt;/code&gt; callback will be invoked with a status value of &lt;code&gt;napi_cancelled&lt;/code&gt;. The work should not be deleted before the &lt;code&gt;complete&lt;/code&gt; callback invocation, even if it has been successfully cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57431dbca7e08b81d45fb5a6037ae282b5c085fc" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named own property. &lt;code&gt;key&lt;/code&gt; must be a string or a &lt;code&gt;Symbol&lt;/code&gt;, or an error will be thrown. N-API will not perform any conversion between data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df00668a39c6c8f23284d619d34702ee2bdec177" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77017a1b76496c7920bf9d3ddbbe51f4eec0e781" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cd50d093b265fd67db2b9b8fc771fec5f784aa" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b04720a7d7ea49d3d60de79014fb69fa8491a06" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e43a0f69097cd9621e0e8616fc96ff13206b854" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a typed array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1512ceb15a56445f12edb557bed0d491dd21b2b" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23864b8fd9618610d06ad4c9de555c8fc662e0f9" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an array buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c7e3fe1e7df4ee3d1c160136ec8c8b57a30461" translate="yes" xml:space="preserve">
          <source>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1aae2a2f436ea48d9c7acff12819c96b4925cc" translate="yes" xml:space="preserve">
          <source>This API converts a single &lt;code&gt;BigInt&lt;/code&gt; value into a sign bit, 64-bit little-endian array, and the number of elements in the array. &lt;code&gt;sign_bit&lt;/code&gt; and &lt;code&gt;words&lt;/code&gt; may be both set to &lt;code&gt;NULL&lt;/code&gt;, in order to get only &lt;code&gt;word_count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0e25291cf2e6b501788d49eeebff5721c4a9c8" translate="yes" xml:space="preserve">
          <source>This API converts an array of unsigned 64-bit words into a single &lt;code&gt;BigInt&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dacc40682bb28b50a6f0c8a84eaeb75999988ac" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a65c954085e0b75e67379733eefa4137788a57" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;uint64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872b6fbfcb10c1766c01c033a11510d812c343c5" translate="yes" xml:space="preserve">
          <source>This API create a new reference with the specified reference count to the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7a9e00501915d315dc9db028de926ed4735c81" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;DataView&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;DataView&lt;/code&gt; objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2689ecf9af46ba39953d951567d6520bf653ba1" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF16-LE-encoded C string. The native string is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7c7b178115d5c2e4337be18e30534c47276b07" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF8-encoded C string. The native string is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8feb6065755866e5b518ec3409fce83787d5f3d" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from an ISO-8859-1-encoded C string. The native string is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e932bf060993a76782b2993b8d0e5d90ca6cbe" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;Symbol&lt;/code&gt; object from a UTF8-encoded C string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3e74bf0ee6bf2199a6c976eeb4432bd41d78cf" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;TypedArray&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;TypedArray&lt;/code&gt; objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7871e3b46d5ec2a3996e81a299debc3b8ecc76" translate="yes" xml:space="preserve">
          <source>This API creates a deferred object and a JavaScript promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25573620c7961f244c4fcf1ec2dc339f590285c9" translate="yes" xml:space="preserve">
          <source>This API decrements the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eff332e350a0e574536ca03420ca38be0ab632a" translate="yes" xml:space="preserve">
          <source>This API deletes the reference passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6fca0a073178b69d2f39a3d83f5c7410fddeac" translate="yes" xml:space="preserve">
          <source>This API frees a previously allocated work object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8d73286c93051c5ede6fc340006b9e8edcb1b1" translate="yes" xml:space="preserve">
          <source>This API gets the element at the requested index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0b9e72b1ac3277c4602c64072072238f09ab14" translate="yes" xml:space="preserve">
          <source>This API gets the requested property from the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a5e0c385afa6d2fa9a179e263dfa1942ac13cb" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToBoolean()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;Section 7.1.2&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25a05e4ed2a43028a62b36f7a945008651ab9c6" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToNumber()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;Section 7.1.3&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcbf1148507fc0d2cb75126a083441bb025a61e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToObject()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96806471eb397aab399550c79244f2cb6c1c198e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06230c0740f7b63f1615ff39e6c8deed4c8847d" translate="yes" xml:space="preserve">
          <source>This API increments the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c58ad460418d4b4b95ff2da9afea0a0ec2d635" translate="yes" xml:space="preserve">
          <source>This API is hazardous because in the following case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb85535a8220d4eff8e0e3a7ee1e3a079d312053" translate="yes" xml:space="preserve">
          <source>This API is no longer deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd41e783eaf560ec51e472abe82e76eb74feeda5" translate="yes" xml:space="preserve">
          <source>This API is under development, and changes (including incompatible changes to the API or wire format) may occur until this warning is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfa3ff17965f642d6a192310726a8f5b8b20e85" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;double&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49877d21ef96ccd14727aaa7c002c5ffab88048a" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bc6f15a322ff8b07f019e96a8cdf7d530c3029" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6503e99b292474ebaf2bcc59e2356b6df0fa3d82" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;uint32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942e3ae495c5a4657aae15a037f4e246e6f8be57" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b33e42364a61da332e3e2db27d345503de5d1d5" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587cd767b10603c8d3213430b7152df4d2279b2e" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of a &lt;code&gt;node::Buffer&lt;/code&gt; and it's length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0254baecc8eba4b547466faecb90c78e6d68158b" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of an &lt;code&gt;ArrayBuffer&lt;/code&gt; and its length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b58192525902070d2c0a7c428788e7464512e3" translate="yes" xml:space="preserve">
          <source>This API is used to return the JavaScript singleton object that is used to represent the given boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8a478e9e4ad0ba2b83ceb79f6fe8b2726590f0" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which makes use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a193c4c7abe861db8905fcb50538ab5a608deb2" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will start making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6266d5dc6d62f9a22ff00a8bf12ea4d6477e4048" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will stop making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab533709169cd3a484819689ba1c7142adf5ce42" translate="yes" xml:space="preserve">
          <source>This API may only be called from the main thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319b4e36a7ead231d4ea80e0de94d083ff5268fa" translate="yes" xml:space="preserve">
          <source>This API open a new scope from which one object can be promoted to the outer scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d428023fa95497e48d68ac408f843d544e50ef9" translate="yes" xml:space="preserve">
          <source>This API open a new scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f3e0e9a51f400dccede73be29a7a7dc94bdbcc" translate="yes" xml:space="preserve">
          <source>This API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d285a239d764c227e486f18daf3332cdb1bfa0" translate="yes" xml:space="preserve">
          <source>This API queries a &lt;code&gt;napi_value&lt;/code&gt; to check if it represents an error object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a858ab5884aa274ef23a00e2dbfc7bb56465d0" translate="yes" xml:space="preserve">
          <source>This API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfac549e19d0fd3951aa268d2754e865e81e0fd" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, it has support for detecting an External value. If &lt;code&gt;value&lt;/code&gt; has a type that is invalid, an error is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52bdf433c534f2133fcb54ff7c6f2707cbe4de1" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;IsArray&lt;/code&gt; operation on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;Section 7.2.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071bc6a2988b5ec1974c804b6e1314b62d4f8f5f" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;instanceof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;Section 12.10.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d161386d078bae13e76126f77747e5f73c7af9e" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the Strict Equality algorithm as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;Section 7.2.14&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9985bed5b2b909c86b4c219b81b72403588f5ec9" translate="yes" xml:space="preserve">
          <source>This API requests that the previously allocated work be scheduled for execution. Once it returns successfully, this API must not be called again with the same &lt;code&gt;napi_async_work&lt;/code&gt; item or the result will be undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d16e5f9910adb2bd8786d4e2bb452ed0ff9dff" translate="yes" xml:space="preserve">
          <source>This API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27002effa854efa84116cc6ba528e82a613dccf1" translate="yes" xml:space="preserve">
          <source>This API retrieves a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure with information about the last error that occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54fae2ce18788face29f37c323cbd4a9728444f" translate="yes" xml:space="preserve">
          <source>This API retrieves data that was previously associated with the currently running Agent via &lt;code&gt;napi_set_instance_data()&lt;/code&gt;. If no data is set, the call will succeed and &lt;code&gt;data&lt;/code&gt; will be set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65239448f493d9f6ef4cbb9fa475b6583cc8a2fc" translate="yes" xml:space="preserve">
          <source>This API retrieves the external data pointer that was previously passed to &lt;code&gt;napi_create_external()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0eee031ab3af3225681355d84afe4145095683c" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db44d290a91d87cc4443be06ede8203a66b55369" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa81b73ac735abebb0edffd8561f17aa7d32742e" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac49581d384370c2fd8061e8992f383a07a12f6" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebdcd06ac50a711b98eac9ad3ba26e473236254" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bae849b3abb7d0a846a00b3211719de9de8557" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;ArrayBuffer&lt;/code&gt;s are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for &lt;code&gt;TypedArray&lt;/code&gt; objects. The &lt;code&gt;ArrayBuffer&lt;/code&gt; allocated will have an underlying byte buffer whose size is determined by the &lt;code&gt;length&lt;/code&gt; parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or &lt;code&gt;DataView&lt;/code&gt; object would need to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abde2fefb489242a6fbaf801b7da355c609cf82" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. The underlying byte buffer of the &lt;code&gt;ArrayBuffer&lt;/code&gt; is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa79ae1b37565525274506b36dd7fc40477368cb" translate="yes" xml:space="preserve">
          <source>This API returns if the &lt;code&gt;Object&lt;/code&gt; passed in has an element at the requested index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c604c612d96a87d8101af3ddf6bfc01f4b4d68ec" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;global&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a7f0383f00e9573b596f72e50a2cb7b8d0000d" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;new.target&lt;/code&gt; of the constructor call. If the current callback is not a constructor call, the result is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0876caff75d7fcb5c27bc7d32784621271953f" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4b499dfda4f2e7f389bb8a459c0442468d26c5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int32&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827d0e5a4fe902762d8fdbd2a59f01ff491412f5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df8e3cc2f4a8dd457d5502a718bb8bd98790b34" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accfb9b3a000444a53160665ebc8ad9cca255ff1" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;uint64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1a204e8e4a5df3c6cc124c41060a09c140f51d" translate="yes" xml:space="preserve">
          <source>This API returns the C boolean primitive equivalent of the given JavaScript &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2b5220b79fdd14c56eb3008d7a5c1f99fb540c" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fc91334d0e8e6d7cd76625caa8bac8a9d82ab4" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive of time value for the given JavaScript &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89a951199f81c03153d5318b6b870955ad2668b" translate="yes" xml:space="preserve">
          <source>This API returns the C primitive equivalent of the given &lt;code&gt;napi_value&lt;/code&gt; as a &lt;code&gt;uint32_t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252de5913968c0e14b8dc66ec544741c0d2689fb" translate="yes" xml:space="preserve">
          <source>This API returns the ISO-8859-1-encoded string corresponding the value passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ae74192a0873baca176de8e267018dc4cfbd5a" translate="yes" xml:space="preserve">
          <source>This API returns the UTF16-encoded string corresponding the value passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c87b6403f35f26e7404749f214ce41091747843" translate="yes" xml:space="preserve">
          <source>This API returns the UTF8-encoded string corresponding the value passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b748b497bba3eb1c898153dfbd929b87db172b" translate="yes" xml:space="preserve">
          <source>This API returns the Undefined object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adba2f90399935e0690e7ea6510c317990dbccfb" translate="yes" xml:space="preserve">
          <source>This API returns the highest N-API version supported by the Node.js runtime. N-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don't support it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522d2a776db00199579b4671e9a78264576e9097" translate="yes" xml:space="preserve">
          <source>This API returns the length of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62dde4493dbecb32a8daa6b7073d93a0a48999a4" translate="yes" xml:space="preserve">
          <source>This API returns the names of the enumerable properties of &lt;code&gt;object&lt;/code&gt; as an array of strings. The properties of &lt;code&gt;object&lt;/code&gt; whose key is a symbol will not be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40720472b0f1b38ae83da6f85669c9b6c99e9e15" translate="yes" xml:space="preserve">
          <source>This API returns true if an exception is pending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f8fc304edc0eb1ff4bd3a9bd31242f6e63b866" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094bf686b8d41acd51551e48f0d5506a78066bcd" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a typed array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8443a100e796e230e9a632cdd639d47a8dd0c30e" translate="yes" xml:space="preserve">
          <source>This API set a property on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055ca98bb19b6d2b39f8280d72632e38436dcde6" translate="yes" xml:space="preserve">
          <source>This API sets and element on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1442d6affa3740f89af3af8d557d700b4757238" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dd51c041226d76a52e71a99edd9a2f1b9f2b71" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4f91f940ec94f29555da2de8b293137ec65b17" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9614bea2e91f427dd259be89411bcf53308e40" translate="yes" xml:space="preserve">
          <source>This API throws the JavaScript value provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f41202181c70e315d0fe22903a8a88e874c6f3" translate="yes" xml:space="preserve">
          <source>This API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5421be1b58e3a5f37657e78acf463c299fc19571" translate="yes" xml:space="preserve">
          <source>This API will return &lt;code&gt;napi_closing&lt;/code&gt; if &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; was called with &lt;code&gt;abort&lt;/code&gt; set to &lt;code&gt;napi_tsfn_abort&lt;/code&gt; from any thread. The value is only added to the queue if the API returns &lt;code&gt;napi_ok&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0484acdcfb56a632e947996df777e0189ffd6889" translate="yes" xml:space="preserve">
          <source>This allows programs to localize their dependencies, so that they do not clash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8849f713925ba1f9a6b09df33af235ddaf81cd16" translate="yes" xml:space="preserve">
          <source>This also works with timers that are returned from &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;. If their callback function throws, it will be caught by the domain &lt;code&gt;'error'&lt;/code&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820157915a230f72b4dfebbb307e744ce07bc105" translate="yes" xml:space="preserve">
          <source>This becomes &lt;code&gt;null&lt;/code&gt; when sending a socket to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;. To poll forks and get current number of active connections, use asynchronous &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt;&lt;code&gt;server.getConnections()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0403c54b19cf7c518c743ac412f170084964d2d4" translate="yes" xml:space="preserve">
          <source>This behavior can be observed by doing something like opening a resource then closing it before the resource can be used. The following snippet demonstrates this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3be871fb0a41430f8168f7829d357513f35f9e" translate="yes" xml:space="preserve">
          <source>This behavior matches how &lt;code&gt;import&lt;/code&gt; behaves in browser environments, assuming a typically configured server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09d684d7a4d21b175c08bdd339dca1134e4b755" translate="yes" xml:space="preserve">
          <source>This can be called many times with new data as it is streamed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c880dd4ffae1216437534bad1ef14743456d2388" translate="yes" xml:space="preserve">
          <source>This can be used primarily to re-initialize REPL context to some pre-defined state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884b5d2f2fb4791a811ef2a6aa11b44f1d059e43" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;code&gt;.fork()&lt;/code&gt; again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cb9ba6df123ad25e5c1f7880d8d7faab015f8c" translate="yes" xml:space="preserve">
          <source>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2698ef50db0dc91fafb011a769f5cfdfc45098" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as the first bytes in this &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;buf&lt;/code&gt; object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c39157bbaadfeac0740fd2bddc3c5a9e18fe2b" translate="yes" xml:space="preserve">
          <source>This can only be called from the master process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf60ae930ac6615a4d1242e8315c9eb04f632ba" translate="yes" xml:space="preserve">
          <source>This can only happen when native addons create &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s in &quot;externalized&quot; mode, or put existing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; into externalized mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6199ec1544ac620470d1eb68d66a477d9db98885" translate="yes" xml:space="preserve">
          <source>This change was made while &lt;code&gt;async_hooks&lt;/code&gt; was an experimental API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c8587a30eab7a428dcbb7513f0b815a15706fa" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt; and has the following additional events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb154621216808fa548d91e360e57e7c8109d9f7" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt;&lt;code&gt;stream.Transform&lt;/code&gt;&lt;/a&gt;, allowing &lt;code&gt;zlib&lt;/code&gt; objects to be used in pipes and similar stream operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e88b64435ae0d469109330906f76139a67a2d71" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;code&gt;tls.Server&lt;/code&gt; and emits events same as &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c329449b1b3c4b04d85f37f6e6b48c47ddc4d5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). A &lt;code&gt;net.Socket&lt;/code&gt; is also a &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;duplex stream&lt;/a&gt;, so it can be both readable and writable, and it is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb39e860eb677e256cb393655fda70a7c3d4eaa" translate="yes" xml:space="preserve">
          <source>This class is now exported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e839a369fec339f5305657a162e8136375a579" translate="yes" xml:space="preserve">
          <source>This class is used to create a TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92b7b6bb57bdc44b8ea493af6aace2149818803" translate="yes" xml:space="preserve">
          <source>This class was renamed from &lt;code&gt;Zlib&lt;/code&gt; to &lt;code&gt;ZlibBase&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244101b103efaee2124df7a27e0b69d17a4c72b4" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642feea22e99d5b86e730cd2666b24ed829c2acf" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70a9e943eb437948e2007e44c804669a3a635f8" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52314f1ca567086d94d0b2153e5c443a8d5ccef" translate="yes" xml:space="preserve">
          <source>This deprecation has been superseded by the deprecation of the &lt;code&gt;process.binding()&lt;/code&gt; API (&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c190b3f34fae908925a1a6be8e8afe5048e36e2" translate="yes" xml:space="preserve">
          <source>This document contains two primary sections and a third section for notes. The first section explains how to use existing streams within an application. The second section explains how to create new types of streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e0d03e950af6c192f429106a4d7a544db728f4" translate="yes" xml:space="preserve">
          <source>This doesn't turn &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt; into a synchronous blocking call. If synchronous operation is desired, something like &lt;code&gt;fs.openSync()&lt;/code&gt; should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511c5720a26dc7d320da43671cc5b1fecc46d7b6" translate="yes" xml:space="preserve">
          <source>This environment variable is ignored when &lt;code&gt;node&lt;/code&gt; runs as setuid root or has Linux file capabilities set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6ca02ed62b1234e7dfc3664b35ddb769fa981f" translate="yes" xml:space="preserve">
          <source>This error is designed to prevent accidentally overwriting a callback registered from another module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9977cdce2fd4b47c0997cc9ad3729a7f41f972a" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d4b6cd4a5729a1807f57603f4e80b4da71d69" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.connection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a890977d51324cd393c8898f763d1cb6d447e8" translate="yes" xml:space="preserve">
          <source>This event is the same as the one provided by &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8091d5c0132da2ce578d23516bf7b26daf3174a5" translate="yes" xml:space="preserve">
          <source>This event might not be emitted if &lt;code&gt;http2stream.end()&lt;/code&gt; is called before trailers are received and the incoming data is not being read or listened for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e42e31a1c6291ea1620368f27b2644f12f5bfaa" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the Addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53e228887749d0c0419e29bc7e571d4700538a6" translate="yes" xml:space="preserve">
          <source>This example will echo back all messages from the master:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85c797866ee7d1ad692e8f7298750e061674f0a" translate="yes" xml:space="preserve">
          <source>This feature depends on the underlying operating system providing a way to be notified of filesystem changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2bb0948bf98b0d72951fab0d71632f50f1639c" translate="yes" xml:space="preserve">
          <source>This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318da36545ca71c8357ead6931515e132410af72" translate="yes" xml:space="preserve">
          <source>This feature is only available if the &lt;code&gt;node&lt;/code&gt; executable was compiled with &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU&lt;/a&gt; enabled. If not, the domain names are passed through unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353351e40895571a9fe1a94d54ee8ac76890b44d" translate="yes" xml:space="preserve">
          <source>This flag exists so that the main module can be opted-in to the same behavior that &lt;code&gt;--preserve-symlinks&lt;/code&gt; gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fd36e23827a3db1f425306badbacaded4ffb64" translate="yes" xml:space="preserve">
          <source>This flag exists to aid in experimentation with the internal implementation of the Node.js http parser. This flag is likely to become a no-op and removed at some point in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef0d9ec3e79a5d118740d96d95026bba3f19b0a" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a676e99b324309fcea6e9319c1afc529b01374" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de80300bdb948c051cf6cc4090a49b1df7ff897" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; before they are run, which has the same signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ca9c092fb3cd108c85d11cc79640ed5f5ff9ea" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;, with some exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68ec689236f9a0971c9dc975d6d90cad1215953" translate="yes" xml:space="preserve">
          <source>This function can be overwritten by providing alternative function as part of the &lt;code&gt;options.checkServerIdentity&lt;/code&gt; option passed to &lt;code&gt;tls.connect()&lt;/code&gt;. The overwriting function can call &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; of course, to augment the checks done with additional verification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19be6f8a2996df1dc3d420cff41c083dff365e49" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt;&lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ad29049dcb1287306ecc15dd61f9a7c9096e21" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt;&lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7a012e16cda321f95feeb4747e891fbb16db52" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will resolve the &lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b8c900f932b0d2bf423ef68b4068f49e84544a" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will return the error &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5697cdda4de768e2cf54b723a122efe5653b963a" translate="yes" xml:space="preserve">
          <source>This function ensures that &lt;code&gt;path&lt;/code&gt; is resolved absolutely, and that the URL control characters are correctly encoded when converting into a File URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1108aee998992248b38802c507c72b2ed7d96209" translate="yes" xml:space="preserve">
          <source>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6da0e5af272e064260e3498115fb5e36dc75e6f" translate="yes" xml:space="preserve">
          <source>This function fills the &lt;code&gt;version&lt;/code&gt; struct with the major, minor, and patch version of Node.js that is currently running, and the &lt;code&gt;release&lt;/code&gt; field with the value of &lt;a href=&quot;process#process_process_release&quot;&gt;&lt;code&gt;process.release.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4badebe3055deecf26d575320a5dc0d908bb82ac" translate="yes" xml:space="preserve">
          <source>This function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native module). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1a128b76492cea694295767529e32daed47241" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the connection is established, the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted. If there is a problem connecting, instead of a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event, an &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event will be emitted with the error passed to the &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; listener. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d4248379ca91265c113f72fb881941a2bc6374" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the server starts listening, the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event will be emitted. The last parameter &lt;code&gt;callback&lt;/code&gt; will be added as a listener for the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bee66a03f4e0be219c5798f053d5e9b9c3e847d" translate="yes" xml:space="preserve">
          <source>This function is based on a constant-time algorithm. Returns true if &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt;, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;capability urls&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f26bf91d7cc00bfeb0aad8763630fd384b5df2c" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;a href=&quot;#util_util_format_format_args&quot;&gt;&lt;code&gt;util.format()&lt;/code&gt;&lt;/a&gt;, except in that it takes an &lt;code&gt;inspectOptions&lt;/code&gt; argument which specifies options that are passed along to &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617bb9f000f555b14d080241e1d35366b287a613" translate="yes" xml:space="preserve">
          <source>This function is not completely equivalent to &lt;code&gt;querystring.parse()&lt;/code&gt;. One difference is that &lt;code&gt;querystring.parse()&lt;/code&gt; does url decoding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6a3e28055b4eb1c155f9eed1a1ea921b27b662" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d18b4c1d734142a1855c74af4c046ac1c0027b" translate="yes" xml:space="preserve">
          <source>This function is only available for zlib-based streams, i.e. not Brotli.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a50b04599b1f0639a100cf46f5d1c6f9b45123c" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcddf4c38c715eb9dc19e1f8b915629007eb9f86" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8337051652d8cca59af0a3ee06f51154cfa9f8" translate="yes" xml:space="preserve">
          <source>This function is only called if the certificate passed all other checks, such as being issued by trusted CA (&lt;code&gt;options.ca&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd8d9762971f53a0f4b9c54c5b91e951886daa4" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; but requires the first argument to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; that will be filled. It also requires that a callback is passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0be84b52a05de61cb37d8e8aafedfc9056c383b" translate="yes" xml:space="preserve">
          <source>This function now returns a Promise. Passing a callback is deprecated, and was useless up to this version, as the Worker was actually terminated synchronously. Terminating is now a fully asynchronous operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894173e491bab80c84c852bbf2fd895d54ca239e" translate="yes" xml:space="preserve">
          <source>This function now supports RSA-PSS keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d299f2177608180223cfccb77b867a0f516eab6" translate="yes" xml:space="preserve">
          <source>This function now supports key objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91771921fecce0493df003c3b93efccae8cfb43d" translate="yes" xml:space="preserve">
          <source>This function operates asynchronously. The &lt;code&gt;'close'&lt;/code&gt; event will be emitted when the server has no more open connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0516587396d5bc4b5aea745b473a81786e9cfdf7" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker is connected to its master via its IPC channel, &lt;code&gt;false&lt;/code&gt; otherwise. A worker is connected to its master after it has been created. It is disconnected after the &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3544713b214d05ed5bf6d144fbd49ea7c59cdb9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af382458c7c1694962f7272d5dc6257cee21c759" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a6696b2b5e9ad1b7f6b1c4ddafeb81b81510f6" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ea37c691223737f81084a936fc91467e04f445" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;filename&lt;/code&gt;, which is the name of a file into which the report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1d19a17165c41d2e0284a1b5c28f86bd5da3dc" translate="yes" xml:space="preserve">
          <source>This function will kill the worker. In the master, it does this by disconnecting the &lt;code&gt;worker.process&lt;/code&gt;, and once disconnected, killing with &lt;code&gt;signal&lt;/code&gt;. In the worker, it does it by disconnecting the channel, and then exiting with code &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc334c0e240796cb69b50cfdf422e85bbfb6b48c" translate="yes" xml:space="preserve">
          <source>This functionality has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e8179328462918849467415bc6e47b53741e6f" translate="yes" xml:space="preserve">
          <source>This happens when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a7c9955e027e73c53547cdbc2c54fa7e69027d" translate="yes" xml:space="preserve">
          <source>This has the same false positives and negatives as described in &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt;&lt;code&gt;writeStream.getColorDepth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af19c7ad3abc63f1d8cfd897e2ce7c93b37d4059" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also currently no way to interact with the Loader, though support is planned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7d6f9a64fbfdcb7e7c59dad106536b0e46b04e" translate="yes" xml:space="preserve">
          <source>This integration is in line with the &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;ES Module Integration Proposal for Web Assembly&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b04d8ad3ebc5af27ac4b4e1c10756739a2d2124" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the socket is not connected yet, either because &lt;code&gt;.connect()&lt;/code&gt; has not yet been called or because it is still in the process of connecting (see &lt;a href=&quot;#net_socket_connecting&quot;&gt;&lt;code&gt;socket.connecting&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a303413dae5cf2f56522f80094d23bc472745a" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615981803bb95c92778608ec98aa86e6b7bec7bb" translate="yes" xml:space="preserve">
          <source>This is a property on the &lt;code&gt;buffer&lt;/code&gt; module returned by &lt;code&gt;require('buffer')&lt;/code&gt;, not on the &lt;code&gt;Buffer&lt;/code&gt; global or a &lt;code&gt;Buffer&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22812016d42b8d66cb470ae9bc87b4d2aece8842" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6edca8b742a017994b5d4c4977f24985399057" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6afd75c5ddd399af67dafff5027ffe863f1e6152" translate="yes" xml:space="preserve">
          <source>This is also emitted in case this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream emits an error when a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream pipes into it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7266000cead4bb9d2f0e14e9324975faa9eb3a46" translate="yes" xml:space="preserve">
          <source>This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac28259e1a0df374cd212eac367f298bb33dcf21" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that is used to represent a JavaScript value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f727952d85916df43ab81b94013dad46a0ffb66" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d7f80ddbb26766196c61aca550b0031231b661" translate="yes" xml:space="preserve">
          <source>This is automatically called by any readline instance on its &lt;code&gt;input&lt;/code&gt; if the &lt;code&gt;input&lt;/code&gt; is a terminal. Closing the &lt;code&gt;readline&lt;/code&gt; instance does not stop the &lt;code&gt;input&lt;/code&gt; from emitting &lt;code&gt;'keypress'&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513ca07430a1834e15b4c394a7795cf89cbe75bd" translate="yes" xml:space="preserve">
          <source>This is important when developing APIs in order to give users the opportunity to assign event handlers &lt;em&gt;after&lt;/em&gt; an object has been constructed but before any I/O has occurred:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357a4cb22700e3b307528201a96ec4a2b0b9733a" translate="yes" xml:space="preserve">
          <source>This is in addition to a single internal output slab buffer of size &lt;code&gt;chunkSize&lt;/code&gt;, which defaults to 16K.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ba21f3ad7e7c13655130ea573064167080a992" translate="yes" xml:space="preserve">
          <source>This is not a hard limit. The &lt;code&gt;EventEmitter&lt;/code&gt; instance will allow more listeners to be added but will output a trace warning to stderr indicating that a &quot;possible EventEmitter memory leak&quot; has been detected. For any single &lt;code&gt;EventEmitter&lt;/code&gt;, the &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; and &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; methods can be used to temporarily avoid this warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d247546ea140a0078a900e014d8747b999296d6" translate="yes" xml:space="preserve">
          <source>This is not a problem in common cases with &lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt;. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c66676dbad5fdaa521ab930e256e4fa335eadac" translate="yes" xml:space="preserve">
          <source>This is now defined as a shared symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5242dbc0ccf6b9ae1f9550732bf4ac3daf1ddd8" translate="yes" xml:space="preserve">
          <source>This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13659d9d635a0bb9731d74ddaa44ccbacf7114d8" translate="yes" xml:space="preserve">
          <source>This is the abstraction to use to reference a &lt;code&gt;napi_value&lt;/code&gt;. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a774ab2a4921da0fd743e3684fff94908d9756" translate="yes" xml:space="preserve">
          <source>This is the extent of Node.js's awareness of &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4dc164d26c00c2e0663b4d38c3db42c8434ee4" translate="yes" xml:space="preserve">
          <source>This is the legacy version of &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt;&lt;code&gt;process.hrtime.bigint()&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;bigint&lt;/code&gt; was introduced in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2525459183823536083e4ebd1435d86bbd1b85ed" translate="yes" xml:space="preserve">
          <source>This is the most basic way to use a domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b89f0e469cc98dfba15cb1d10494441d90a747" translate="yes" xml:space="preserve">
          <source>This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538139721ac2a46c540659479840eaa7091999c5" translate="yes" xml:space="preserve">
          <source>This is the same behavior as &lt;code&gt;buf.subarray()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8885bf9fac1f550c45c516012648aa0d3c485186" translate="yes" xml:space="preserve">
          <source>This is the size (in bytes) of pre-allocated internal &lt;code&gt;Buffer&lt;/code&gt; instances used for pooling. This value may be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48967cae6d1c2b0c2a13e4b791916ed7e65a4ccd" translate="yes" xml:space="preserve">
          <source>This is useful for tracking potential errors in an application while using the &lt;code&gt;Promise&lt;/code&gt; constructor, as multiple resolutions are silently swallowed. However, the occurrence of this event does not necessarily indicate an error. For example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;&lt;code&gt;Promise.race()&lt;/code&gt;&lt;/a&gt; can trigger a &lt;code&gt;'multipleResolves'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01763a87bcd722e13be0664e3816427229bb3d32" translate="yes" xml:space="preserve">
          <source>This issue also occurs when the &lt;code&gt;loop()&lt;/code&gt; call is scheduled using the &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;queueMicrotask()&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84e6ba5ec93b3229b046976c5bb2ea3de0008df" translate="yes" xml:space="preserve">
          <source>This issue occurs because all contexts share the same microtask and nextTick queues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087b80944dc12b408a7190bd19a55dd80487fba1" translate="yes" xml:space="preserve">
          <source>This macro includes &lt;code&gt;NAPI_MODULE&lt;/code&gt;, and declares an &lt;code&gt;Init&lt;/code&gt; function with a special name and with visibility beyond the addon. This will allow Node.js to initialize the module even if it is loaded multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b6d753134ef1843140e701dbcf7c6cf6f1c011" translate="yes" xml:space="preserve">
          <source>This mainly adds some input validation on top of &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt;. As an additional convenience, &lt;code&gt;superConstructor&lt;/code&gt; will be accessible through the &lt;code&gt;constructor.super_&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe38e8ab91654a3718be6a69fd1e9049d8a23cf" translate="yes" xml:space="preserve">
          <source>This method adds HTTP trailing headers (a header but at the end of the message) to the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a6ac889d5d3a2216eb8e367915333b528d1f56" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This API is similar to &lt;code&gt;napi_call_function&lt;/code&gt;. However, it is used to call &lt;em&gt;from&lt;/em&gt; native code back &lt;em&gt;into&lt;/em&gt; JavaScript &lt;em&gt;after&lt;/em&gt; returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around &lt;code&gt;node::MakeCallback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314d268cd28ce9b140b0dded93860db9fb90479e" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back &lt;em&gt;from&lt;/em&gt; the add-on's native code &lt;em&gt;into&lt;/em&gt; JavaScript. For the special case of calling into JavaScript after an async operation, see &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt;&lt;code&gt;napi_make_callback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b47fa157850c2f5703ae846bb53e6699d8248ed" translate="yes" xml:space="preserve">
          <source>This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt;&lt;code&gt;napi_property_descriptor&lt;/code&gt;&lt;/a&gt;). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by &lt;code&gt;DefineOwnProperty()&lt;/code&gt; (described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;Section 9.1.6&lt;/a&gt; of the ECMA-262 specification).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3024bc40da0e8b2f8456ff7b850738108b0ba432" translate="yes" xml:space="preserve">
          <source>This method calls &lt;code&gt;console.log()&lt;/code&gt; passing it the arguments received. This method does not produce any XML formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58dad5fbe14785fff61707964fc0d135efd16a6" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044476cda3ae03b23c22f5aa1722fe2c9153e73c" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass. If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411dbf433a68f70422dbaf488ba5f65a2beaeff4" translate="yes" xml:space="preserve">
          <source>This method can be used to request a peer's certificate after the secure connection has been established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880393178dbd75cbd21c9662d8dee3698a77a077" translate="yes" xml:space="preserve">
          <source>This method can be used, in particular, to increase cache hits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4cb1d7d9a937c696a9d3a130cc76d5f3a14117" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;) to prevent infinite recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce10b9da65b616da4694a90a9e7a21235864fb9b" translate="yes" xml:space="preserve">
          <source>This method defaults to the &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; constructor and can be overridden on subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59adf1d819f06dbe25fb548331d4b223442948c" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the &lt;strong&gt;Profiles&lt;/strong&gt; panel of the inspector. See &lt;a href=&quot;#console_console_profile_label&quot;&gt;&lt;code&gt;console.profile()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec4a52764354b50bcb9a5cfff971e55a8182917" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.markTimeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timestamp_label&quot;&gt;&lt;code&gt;console.timeStamp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9644bae39bdc4b2a06283995736aff4accc9db" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.profile()&lt;/code&gt; method starts a JavaScript CPU profile with an optional label until &lt;a href=&quot;#console_console_profileend_label&quot;&gt;&lt;code&gt;console.profileEnd()&lt;/code&gt;&lt;/a&gt; is called. The profile is then added to the &lt;strong&gt;Profile&lt;/strong&gt; panel of the inspector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b73ac52f9f87f1e288fc8b5563d582410feaa9" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeStamp()&lt;/code&gt; method adds an event with the label &lt;code&gt;'label'&lt;/code&gt; to the &lt;strong&gt;Timeline&lt;/strong&gt; panel of the inspector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902c866e4222a0e01ce48bdc721e0e086336e617" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_time_label&quot;&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dc19b7a95d7304b45400b37628fe89d51d2642" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timelineEnd()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee1a742255ec0013c5a3a66d547b57b65aa47b9" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it will automatically call &lt;code&gt;.start()&lt;/code&gt;, but unsetting it will let messages queue up until a new handler is set or the port is discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfb7ad344e3264e6f56ee6b803df6669da02258" translate="yes" xml:space="preserve">
          <source>This method has a custom variant for promises that is available using &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb57dbb6c324bb36be5d114bc6d97130ad87632c" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e775a3566b8847c710d9cc718838379fe8af31e8" translate="yes" xml:space="preserve">
          <source>This method is almost identical to &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt;&lt;code&gt;domain.bind(callback)&lt;/code&gt;&lt;/a&gt;. However, in addition to catching thrown errors, it will also intercept &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; objects sent as the first argument to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fe8b47083e44662b3b21e0205abdb2450ff04a" translate="yes" xml:space="preserve">
          <source>This method is automatically called when an &lt;code&gt;URL&lt;/code&gt; object is serialized with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28801c3e02284a4ad1c8e05607ca10e063aca0d7" translate="yes" xml:space="preserve">
          <source>This method is called to generate error objects that will be thrown when an object can not be cloned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700f32b0f67ecb7c4ac4e3ae91ec634c886d4a35" translate="yes" xml:space="preserve">
          <source>This method is called to read some kind of host object, i.e. an object that is created by native C++ bindings. If it is not possible to deserialize the data, a suitable exception should be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50d7fb37c7e66d40b59fce47a8cf43fd69d830e" translate="yes" xml:space="preserve">
          <source>This method is called to write some kind of host object, i.e. an object created by native C++ bindings. If it is not possible to serialize &lt;code&gt;object&lt;/code&gt;, a suitable exception should be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc90c26b3f24d636637240e71fd082c904e9c070" translate="yes" xml:space="preserve">
          <source>This method is called when the serializer is going to serialize a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object. It must return an unsigned 32-bit integer ID for the object, using the same ID if this &lt;code&gt;SharedArrayBuffer&lt;/code&gt; has already been serialized. When deserializing, this ID will be passed to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90ca117688b90f4f93a88c2020c612e45a213fe" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_get_property&quot;&gt;&lt;code&gt;napi_get_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0f235c75ab596d17873611663abac578a666d2" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_has_property&quot;&gt;&lt;code&gt;napi_has_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fffe0150f23e478ffc2985c081f396a015cdadd" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_set_property&quot;&gt;&lt;code&gt;napi_set_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3517d618f187f767a89b4300a1b63a8e5b17cacd" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows system. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c983f46e76b9dd0433799a448f5bdb19ed94b9c5" translate="yes" xml:space="preserve">
          <source>This method is not compatible with the &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;, which is a superclass of &lt;code&gt;Buffer&lt;/code&gt;. To copy the slice, use &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32b22b8c3858f8f2465d3884aa82bd24680b6ec" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Deserializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f595b58310133998e11cc3f534439b34974ab0b" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Serializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26e9b3b06705355d77378147bd81e2be0268ac9" translate="yes" xml:space="preserve">
          <source>This method is only available if &lt;code&gt;http2session.type&lt;/code&gt; is equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc56a973921f1c8e3418ef2a7ab83893408b1d1" translate="yes" xml:space="preserve">
          <source>This method is only valid when using &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79bf54fc2158426a1f13109023fc9410f485037" translate="yes" xml:space="preserve">
          <source>This method is used to instantiate a new JavaScript value using a given &lt;code&gt;napi_value&lt;/code&gt; that represents the constructor for the object. For example, consider the following snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137f79d3611d70d649552c51bbc155deba38dbc3" translate="yes" xml:space="preserve">
          <source>This method is used within a callback function to retrieve details about the call like the arguments and the &lt;code&gt;this&lt;/code&gt; pointer from a given callback info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55f033607e44dce887582c62c0f096d380f7f0b" translate="yes" xml:space="preserve">
          <source>This method may be called at most one time on a message before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3526009bcd91f17d5aa041034e585a5c485866dd" translate="yes" xml:space="preserve">
          <source>This method must only be called once on a message and it must be called before &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec2a56a8fed198bcdf723bd5b7ecf90cb7dc580" translate="yes" xml:space="preserve">
          <source>This method no longer supports multiple calls that don&amp;rsquo;t map to individual &lt;code&gt;console.time()&lt;/code&gt; calls; see below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f47d3b4379f25f04e6a25df0b8f764ba8d8b4d" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ClientRequest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29f826336bbe3debd8646a229b260cfd3ea8a80" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ServerResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bead6ce0f903b94b3581fba9b0c460760d9b196" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;decipher&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326608dac58b4293b056bd095e3a8d421c4657b5" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccd72d8d3bfb8524959d772fbf00e2e2ccd4284" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;writable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f736dde7b82e9ca5487f277a3fc447dc5f614522" translate="yes" xml:space="preserve">
          <source>This method now supports passing &lt;code&gt;options&lt;/code&gt;, specifically &lt;code&gt;options.ttl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb4af30902bebe24d30824096149434c6b8e2b5" translate="yes" xml:space="preserve">
          <source>This method now throws if the GCM tag length is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0970dd484b399eb1d57fb730f0ead071cb410ad4" translate="yes" xml:space="preserve">
          <source>This method relies on &lt;code&gt;Object.prototype.toString()&lt;/code&gt; behavior. It is possible to obtain an incorrect result when the &lt;code&gt;object&lt;/code&gt; argument manipulates &lt;code&gt;@@toStringTag&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9bf5991fa9c748c4ddd11e088d41c09880c593" translate="yes" xml:space="preserve">
          <source>This method returns a boolean for flow control now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9df835392f53f83cbf43706f5a9c14ab012c2f6" translate="yes" xml:space="preserve">
          <source>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, &lt;code&gt;response.end()&lt;/code&gt;, MUST be called on each response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91894603a2d6878685230629c869c5cc4c825298" translate="yes" xml:space="preserve">
          <source>This method will throw an error if the target &lt;code&gt;pid&lt;/code&gt; does not exist. As a special case, a signal of &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Windows platforms will throw an error if the &lt;code&gt;pid&lt;/code&gt; is used to kill a process group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a1dc1cbb67ff0479ab2d4ec138ffb994e39f33" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b0496aa78380171e1c86de496fc1c12964b92b" translate="yes" xml:space="preserve">
          <source>This mode provides a good balance between features and binary size, and it is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61829d000837d81bc1af29b5a18d65d68b23b06e" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been instantiated; otherwise it will throw an error. It could be called also when the module has already been evaluated, in which case it will do one of the following two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9b793d8f4835801a2e03d986f43b29e0294b7f" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;. It can be passed to &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt;&lt;code&gt;clearImmediate()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30df376bcf445e9ea2fd9f87e4e31b34c96b80ed" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;. It can be passed to either &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt;&lt;code&gt;clearInterval()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bcec38f2abde0cda814ffe6df5a8ef30f2d46d" translate="yes" xml:space="preserve">
          <source>This object is created internally and returned from &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt;. It represents an &lt;em&gt;in-progress&lt;/em&gt; request whose header has already been queued. The header is still mutable using the &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt;&lt;code&gt;setHeader(name, value)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_getheader_name&quot;&gt;&lt;code&gt;getHeader(name)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_removeheader_name&quot;&gt;&lt;code&gt;removeHeader(name)&lt;/code&gt;&lt;/a&gt; API. The actual header will be sent along with the first data chunk or when calling &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276727d393a49049986a6764a6b9df30b3c6e8d1" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b243244bb0ee3d29d16ef5c4abcf7c8294d4366" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b590c4862d8c62879d75abd1aa21bce18d4bbd42" translate="yes" xml:space="preserve">
          <source>This object is not intended to be changed or set manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d68cfded63649ce7ce6716537aea2949bfdc24a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;UInt8Array&lt;/code&gt; - that is, getting returns &lt;code&gt;undefined&lt;/code&gt; and setting does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5bc0556c47cdb09e41d5ea59f149aa88e6a463" translate="yes" xml:space="preserve">
          <source>This option is a no-op. It is kept for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab4df6e22ae62c4d079027a2c218b72789bdc22" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. See &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; on how to compile a binary using this mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394a6a9a97a53a953940a51f3bdcf234aa0c8526" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the &lt;code&gt;node&lt;/code&gt; executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fb57d096952e1be65ad8500b5938bfe5fc415f" translate="yes" xml:space="preserve">
          <source>This optional function will be called before the stream closes, delaying the &lt;code&gt;'finish'&lt;/code&gt; event until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to close resources or write buffered data before a stream ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a912ac54f282aa0ebdc6b3d1ffc8071941bc6bc" translate="yes" xml:space="preserve">
          <source>This particular operation may be hard to use in a Node.js context, as the streaming layer makes it hard to know which data will end up in this frame. Also, there is currently no way to consume this data through the Node.js API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a02d3eca403bdc666212cf0c86fe38b7d15dd1" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9e3144be10a8f3e780007f6d355783bf984b8d" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be written. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386fd84fec99ef9b47b7d16488786592c44b6e77" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the underlying file has not been opened yet, i.e. before the &lt;code&gt;'ready'&lt;/code&gt; event is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f517051737746faa183df11c32566027df8f1e76" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;undefined&lt;/code&gt; for unrecognized &lt;code&gt;KeyObject&lt;/code&gt; types and symmetric keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3602e2ea022e3bc39b7484318da9a603e6288b8" translate="yes" xml:space="preserve">
          <source>This property is a reference to the instance itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33cc887d6f76fe29d205691170fbab8a5395204" translate="yes" xml:space="preserve">
          <source>This property is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73f92d394bd6733681726663afa3be14f683e89" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a656096a20de49803ec12a402ed5a91dccea98" translate="yes" xml:space="preserve">
          <source>This property is particularly useful as a means of determining if a client or server fully transmitted a message before a connection was terminated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f429a22f8731ad82e20fb7b571d26a7a167f34d0" translate="yes" xml:space="preserve">
          <source>This property now returns &lt;code&gt;undefined&lt;/code&gt; for KeyObject instances of unrecognized type instead of aborting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a6a91551ecd980b558ff842b37549796e6bf30" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters currently buffered to be written. See &lt;a href=&quot;net#net_socket_buffersize&quot;&gt;&lt;code&gt;net.Socket.bufferSize&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275fd6bab7ae5428d094e40bf2e70f30dde5cd7c" translate="yes" xml:space="preserve">
          <source>This represents the underlying binary scalar datatype of the &lt;code&gt;TypedArray&lt;/code&gt;. Elements of this enum correspond to &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750611976052ddea1aefb70b31d097d53f3ce423" translate="yes" xml:space="preserve">
          <source>This restricts the N-API surface to just the functionality that was available in the specified (and earlier) versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e161eae495f60eecc39fcb871e7db25d724d21cd" translate="yes" xml:space="preserve">
          <source>This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47c2c3b1777de556577edd88a50fe16d9b43ef1" translate="yes" xml:space="preserve">
          <source>This should only be disabled for testing; HTTP requires the Date header in responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59eae131a4bc1e43befd9071b9f0e34721e73ef" translate="yes" xml:space="preserve">
          <source>This status does not convey any information regarding if &lt;code&gt;module.link()&lt;/code&gt; has been called. See &lt;code&gt;module.linkingStatus&lt;/code&gt; for that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d49c824be76a8237417ac95208be1205943ec8d" translate="yes" xml:space="preserve">
          <source>This throws an error if &lt;code&gt;value&lt;/code&gt; cannot be serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c184cfb934c9b738977c32837985d21a951b41c" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt;&lt;code&gt;dns.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eeca1c2f00a4310890a7139dcfe6a2e6c8c965b" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt;&lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe3642f2b14cc07a05a25a58a28addaf29cbab1" translate="yes" xml:space="preserve">
          <source>This use of the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module in the REPL has these side effects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba8179089db1922508405d8b782dab836cca61d" translate="yes" xml:space="preserve">
          <source>This value is also available as &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt;&lt;code&gt;buffer.kMaxLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1960fefc47eea7af53d2386124418b76d027b6f6" translate="yes" xml:space="preserve">
          <source>This value may depend on the JS engine that is being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1786c62ca4014aae9c8daf35face4f14af3bb962" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88498e969bb560f2877e63299e4b7964f93ae3a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_exports&quot;&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ae6d48315f5836aaba96e8fe5033389f67632a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d045d7bbd376d894aa22ac1819fb6f7283f644a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0714b1ea5c5b147147404c53c9c7ea1c9d011bd2" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7388904d6f49c90b401aa690cef27c57e52dd479" translate="yes" xml:space="preserve">
          <source>This was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2a6d546b034160617c687e3f2691f4eb71b066" translate="yes" xml:space="preserve">
          <source>This was never a documented feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946c9714458dbb894196ffd1f153f59f0b8d6c98" translate="yes" xml:space="preserve">
          <source>This will ensure that the per-addon-instance data reaches each binding that can be called from JavaScript. The per-addon-instance data must also be passed into any asynchronous callbacks the addon may create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110650dd72d6d2fde8d01c7a0259236b0dc7296b" translate="yes" xml:space="preserve">
          <source>This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25a5d904dfe4b2d558d89e8b007b3cb884783fb" translate="yes" xml:space="preserve">
          <source>This will not work because the callback function passed to &lt;code&gt;fs.readFile()&lt;/code&gt; is called asynchronously. By the time the callback has been called, the surrounding code, including the &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; block, will have already exited. Throwing an error inside the callback &lt;strong&gt;can crash the Node.js process&lt;/strong&gt; in most cases. If &lt;a href=&quot;domain&quot;&gt;domains&lt;/a&gt; are enabled, or a handler has been registered with &lt;code&gt;process.on('uncaughtException')&lt;/code&gt;, such errors can be intercepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b97a9813dd547ff5a18b92d60ea9c7c60a244fb" translate="yes" xml:space="preserve">
          <source>This will opt into the default &lt;code&gt;NAPI_VERSION&lt;/code&gt; for the given release of Node.js. In order to ensure compatibility with specific versions of N-API, the version can be specified explicitly when including the header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b61b4fd778d330c4d9ae04ee169c3836b77a3e" translate="yes" xml:space="preserve">
          <source>This will, however, generally degrade compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898d4d4c37da591f1dbaea989ea4b845e4eb4dcd" translate="yes" xml:space="preserve">
          <source>This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d467439a515ceca23a9a5fc18245fc89bdccd935" translate="yes" xml:space="preserve">
          <source>Though the call to &lt;code&gt;dns.lookup()&lt;/code&gt; will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8b9bcd61ac02e20b1f70392f83be7f64e30820" translate="yes" xml:space="preserve">
          <source>Threadpool Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c31834fd4f46e0567ccae1bc9794a97e2ef2ae6" translate="yes" xml:space="preserve">
          <source>Threads can be added to and removed from a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; object during its existence. Thus, in addition to specifying an initial number of threads upon creation, &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; can be called to indicate that an existing thread will stop making use of the thread-safe function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd491a1a20798b4f3eab7ca47ce9cde3c1a3f963" translate="yes" xml:space="preserve">
          <source>Three States</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50789f4c54d6872bdd31a68fcda1c02e644ea74" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6f0a31b4716ff39675671a8367ef62be40d012" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Package Configuration&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78220df6c48d2fb08d8df29384d6309dc62e9a0" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Specifier&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b845975caf9cd24e6a6a64484cf34be9a5885d" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported File Extension&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274bb320296e78e649774ab7cf14c8bffcb9c969" translate="yes" xml:space="preserve">
          <source>Throw errors for deprecations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b995e33945e66abe60ea39498a0102ea95fab" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide a valid value for one of its returned object properties on execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e035afeae4a1775ec604c8b5d8f677f77e629c2f" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide an expected value type for one of its returned object properties on execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500f81cca30019a552ab883030a9f388e713b7de" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9dfd60d599c5257e4849241e700802dc509d8e" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; instead of &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f533babc33348b6d3fb4950583edc945f148749" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;value&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This is useful when testing the &lt;code&gt;error&lt;/code&gt; argument in callbacks. The stack trace contains all frames from the error passed to &lt;code&gt;ifError()&lt;/code&gt; including the potential new frames for &lt;code&gt;ifError()&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d293028683a03e7c8565aef633c4bd64df69e5d" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;SystemError&lt;/code&gt;&lt;/a&gt; if a user has no &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;homedir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab0da4aef65302e8e7125139145d3ae9207952c" translate="yes" xml:space="preserve">
          <source>Throws an &lt;code&gt;AssertionError&lt;/code&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f221650e50054f81fe163161fb94d86584723cb" translate="yes" xml:space="preserve">
          <source>Throws if the &lt;code&gt;fromEnc&lt;/code&gt; or &lt;code&gt;toEnc&lt;/code&gt; specify invalid character encodings or if conversion from &lt;code&gt;fromEnc&lt;/code&gt; to &lt;code&gt;toEnc&lt;/code&gt; is not permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60660bb221304e5fad9ca2c2dd92e7d7c409ce60" translate="yes" xml:space="preserve">
          <source>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f395da331ca8317cd167d68da7aed50270080a44" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must make use exclusively of N-API by restricting itself to using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="ca7f027cfebdbd1cfd15712b89e96328bae876ed" translate="yes" xml:space="preserve">
          <source>Timeout limitations when using process.nextTick(), Promises, and queueMicrotask()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="2f285c5caf3395120404e2b15ef1afaae7633a15" translate="yes" xml:space="preserve">
          <source>To access the &lt;code&gt;stream&lt;/code&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113093009a6693093866588b6702951e8ef8612a" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with POSIX file paths on any operating system, use &lt;a href=&quot;#path_path_posix&quot;&gt;&lt;code&gt;path.posix&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89017d2ede47b0785d45ee78f6f27262e118a2db" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with Windows file paths on any operating system, use &lt;a href=&quot;#path_path_win32&quot;&gt;&lt;code&gt;path.win32&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45c1d802e95d3410405265dfd8e4d44f4dbfd27" translate="yes" xml:space="preserve">
          <source>To add the method &lt;code&gt;hello&lt;/code&gt; as a function so that it can be called as a method provided by the addon:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c0394f49db892821115b54c6eb0edd5cc1ba09" translate="yes" xml:space="preserve">
          <source>To be notified when the file was modified, not just accessed, it is necessary to compare &lt;code&gt;curr.mtime&lt;/code&gt; and &lt;code&gt;prev.mtime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817d0bb7fcad591dfad28392604533ca026ba506" translate="yes" xml:space="preserve">
          <source>To be used in conjunction with &lt;code&gt;--experimental-modules&lt;/code&gt;. Sets the resolution algorithm for resolving specifiers. Valid options are &lt;code&gt;explicit&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a3354dac48c927a38f89348c115a2d20de7cf0" translate="yes" xml:space="preserve">
          <source>To begin watching an expression, type &lt;code&gt;watch('my_expression')&lt;/code&gt;. The command &lt;code&gt;watchers&lt;/code&gt; will print the active watchers. To remove a watcher, type &lt;code&gt;unwatch('my_expression')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0304f4e61d19a2c2ac88f8d7fae8f457554b26" translate="yes" xml:space="preserve">
          <source>To break on the first line of the application code, pass the &lt;code&gt;--inspect-brk&lt;/code&gt; flag instead of &lt;code&gt;--inspect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22dfb32e7c28d8dcaa05c55a622e6cdce176c30b" translate="yes" xml:space="preserve">
          <source>To build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257192fca64c7e5ef4beea84df13594a588d02bf" translate="yes" xml:space="preserve">
          <source>To change the default timeout use the &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt;&lt;code&gt;--http-server-default-timeout&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bf60ee112d40f394c9009468f70ac11d5c5c03" translate="yes" xml:space="preserve">
          <source>To check for support for a non-English locale (i.e. &lt;code&gt;full-icu&lt;/code&gt; or &lt;code&gt;system-icu&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; can be a good distinguishing factor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9ed209f8f372fe4035b55216331b230379fdb5" translate="yes" xml:space="preserve">
          <source>To check if a file exists without manipulating it afterwards, &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72931344905502cc560ea0d63014dbb48946d73e" translate="yes" xml:space="preserve">
          <source>To check if a stream is connected to a &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; context, check the &lt;code&gt;isTTY&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c7039869bdb8532ecd51ab012fbbe93984c08f" translate="yes" xml:space="preserve">
          <source>To configure any of them, a custom &lt;a href=&quot;#http_class_http_agent&quot;&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/a&gt; instance must be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69007751c2a41a54e8aeb848a171b7cce6a5036" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the second line would just be changed to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a6196d20446e42af34618037ad4de017d40178" translate="yes" xml:space="preserve">
          <source>To control how ICU is used in Node.js, four &lt;code&gt;configure&lt;/code&gt; options are available during compilation. Additional details on how to compile Node.js are documented in &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c2ffbe92be0f9b51c9a83a429725a64f6213f9" translate="yes" xml:space="preserve">
          <source>To correctly order the operations, move the &lt;code&gt;fs.stat()&lt;/code&gt; call into the callback of the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0520e0374ec9ffcd9c6cf5ec0d679283c3270e7" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic module that doesn't correspond to one of the existing &lt;code&gt;format&lt;/code&gt; interpretations, the &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook can be used. This hook is called only for modules that return &lt;code&gt;format: 'dynamic'&lt;/code&gt; from the &lt;code&gt;resolve&lt;/code&gt; hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e176982d3949a6fa8a4834a7abff97fa762f0cb" translate="yes" xml:space="preserve">
          <source>To create custom messaging channels (which is encouraged over using the default global channel because it facilitates separation of concerns), users can create a &lt;code&gt;MessageChannel&lt;/code&gt; object on either thread and pass one of the &lt;code&gt;MessagePort&lt;/code&gt;s on that &lt;code&gt;MessageChannel&lt;/code&gt; to the other thread through a pre-existing channel, such as the global one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c2ed95d362ac6e310208df03daab20b4ae57a0" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152f25ba7578f4f82f7a056c9eb04659230b3677" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variable. This will also deactivate the colors in the REPL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee22bab1313bf7a33041e942c66c0625221d4e94" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652b902ed0de8270b9fb62fc619759f8ad4b57a9" translate="yes" xml:space="preserve">
          <source>To enforce a specific color support, use one of the below environment settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55f753794b1f35b9fdcfce66da0b9225f594ed1" translate="yes" xml:space="preserve">
          <source>To exit with a 'failure' code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba26739dd8d319b8071919705bb005ee5baa56d8" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5727ff4630ff91a10fefc92eb21eadd2192abbee" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fefe10ff6dde1978c8f6041595748b6a6792d9d" translate="yes" xml:space="preserve">
          <source>To fully customize the output of a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance pass in a new function for the &lt;code&gt;writer&lt;/code&gt; option on construction. The following example, for instance, simply converts any input text to upper case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82f342e2108d2b1a12ccbbfb5e1444bf37c6bd0" translate="yes" xml:space="preserve">
          <source>To generate integrity strings, a script such as &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9bff9dfa86ac3f581dc9a1a87860cd6b7f4e57" translate="yes" xml:space="preserve">
          <source>To generate the certificate and key for this example, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f64fd3b92ea07f26cf029da8688a34b5e1c399" translate="yes" xml:space="preserve">
          <source>To get the exact filename that will be loaded when &lt;code&gt;require()&lt;/code&gt; is called, use the &lt;code&gt;require.resolve()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff57305218fef61e7a1c5f3ae88348b43634dfe" translate="yes" xml:space="preserve">
          <source>To get the response, add a listener for &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; to the request object. &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; will be emitted from the request object when the response headers have been received. The &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event is executed with one argument which is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa20aefae1fe619888a9d19f8166927723ea251" translate="yes" xml:space="preserve">
          <source>To guard against crashing the Node.js process the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module can be used. (Note, however, that the &lt;code&gt;domain&lt;/code&gt; module is deprecated.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c953e56d44954a70f8f7788b1edcd731a0e9806" translate="yes" xml:space="preserve">
          <source>To handle this case, N-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae9fb9267ffb10903bb86fc63715f4cd0cfcaaf" translate="yes" xml:space="preserve">
          <source>To have a module execute code multiple times, export a function, and call that function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b15cec207bf8e8429b8350d22d585ee8bda635" translate="yes" xml:space="preserve">
          <source>To illustrate the behavior, imagine this hypothetical implementation of &lt;code&gt;require()&lt;/code&gt;, which is quite similar to what is actually done by &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68e5b68a41d9794b3e7248a2d7f36459e1a791e" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import-expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652a3cd9523950c5d1acf707c7efb8f626e43774" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the third line from the last would just be changed to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e10d026ab12717e40d75bbfd814a562f51e4156" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7d1841b070660f5e124c6d0b0e5f09de0a3865" translate="yes" xml:space="preserve">
          <source>To mitigate tampering with policy files on disk, an integrity for the policy file itself may be provided via &lt;code&gt;--policy-integrity&lt;/code&gt;. This allows running &lt;code&gt;node&lt;/code&gt; and asserting the policy file contents even if the file is changed on disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a99036e7fc6f4dd433ceb4a4d4fe866ee586c79" translate="yes" xml:space="preserve">
          <source>To mitigate the risk, renegotiation is limited to three times every ten minutes. An &lt;code&gt;'error'&lt;/code&gt; event is emitted on the &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instance when this threshold is exceeded. The limits are configurable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd92caa0dd0e220612d4509343caa388124bfc1" translate="yes" xml:space="preserve">
          <source>To nest &lt;code&gt;Domain&lt;/code&gt; objects as children of a parent &lt;code&gt;Domain&lt;/code&gt; they must be explicitly added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3735245b8ad30f17b7512872187c1aa1d62b39" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60e9cd07a257263fb8969b08ff3c393206c09af" translate="yes" xml:space="preserve">
          <source>To receive pushed streams on the client, set a listener for the &lt;code&gt;'stream'&lt;/code&gt; event on the &lt;code&gt;ClientHttp2Session&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa7f2103554e2af5c33c5202941bd62a5133842" translate="yes" xml:space="preserve">
          <source>To restart a crashed application in a more reliable way, whether &lt;code&gt;'uncaughtException'&lt;/code&gt; is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f906fc2e9ed75535f0e33b7e1aaaf78e72fcf87b" translate="yes" xml:space="preserve">
          <source>To set a function to be returned by the &lt;code&gt;require()&lt;/code&gt; for the addon:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f2374e10f3a7eb6b83d547d6c57c17e364858d" translate="yes" xml:space="preserve">
          <source>To test it in JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b29e9bbd29bf287a671314a5215366e894cdec" translate="yes" xml:space="preserve">
          <source>To test it, run the following JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e061ad3871e4c5c14888dba30a6440671c5a6d" translate="yes" xml:space="preserve">
          <source>To test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e39ad99eeff4166287ae62024f1f20d4affe06b" translate="yes" xml:space="preserve">
          <source>To this env, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5395666fc1a664a6eb308266e88f8f63adf53a4" translate="yes" xml:space="preserve">
          <source>To unset the capture function, &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; may be used. Calling this method with a non-&lt;code&gt;null&lt;/code&gt; argument while another capture function is set will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012fe7e6f8e20a96385f534d6d6e01f2918b08c3" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;strict&lt;/code&gt; mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba4716684f52476f95f24b69f86ae65d28cd012" translate="yes" xml:space="preserve">
          <source>To use N-API in the above &quot;Hello world&quot; example, replace the content of &lt;code&gt;hello.cc&lt;/code&gt; with the following. All other instructions remain the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2030286b077ae9f310389c7d604ec2ac5189637" translate="yes" xml:space="preserve">
          <source>To use Perfect Forward Secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409731a0c399b993f15524f4692dc78e27a98aeb" translate="yes" xml:space="preserve">
          <source>To use legacy mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5ad91da59de7323cefe83cf2f0b20fda7969fd" translate="yes" xml:space="preserve">
          <source>To use the HTTP server and client one must &lt;code&gt;require('http')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71784b618df5ed1f33114983208856ba2d4ca1c0" translate="yes" xml:space="preserve">
          <source>To use this module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7399a303049823aaa63a8aa2b18850c567f8783" translate="yes" xml:space="preserve">
          <source>To verify that ICU is enabled at all (&lt;code&gt;system-icu&lt;/code&gt;, &lt;code&gt;small-icu&lt;/code&gt;, or &lt;code&gt;full-icu&lt;/code&gt;), simply checking the existence of &lt;code&gt;Intl&lt;/code&gt; should suffice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767a6b4283338f258039c6484f378f9774bf103f" translate="yes" xml:space="preserve">
          <source>To view this documentation as a manual page in a terminal, run &lt;code&gt;man node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa49ae28e51088359080f4611ccdaeaee55d06b4" translate="yes" xml:space="preserve">
          <source>Too much HTTP header data was received. In order to protect against malicious or malconfigured clients, if more than 8KB of HTTP header data is received then HTTP parsing will abort without a request or response object being created, and an &lt;code&gt;Error&lt;/code&gt; with this code will be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f88bcb86a810807252c2f25ecd279d2e929c894" translate="yes" xml:space="preserve">
          <source>Trace Event provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522930d7db32b707108991daae748228a5372efb" translate="yes" xml:space="preserve">
          <source>Trace Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c7adc15802eb0b8935f3924650c3799b474e55" translate="yes" xml:space="preserve">
          <source>Tracing can be enabled with the &lt;code&gt;--trace-event-categories&lt;/code&gt; command-line flag or by using the &lt;code&gt;trace_events&lt;/code&gt; module. The &lt;code&gt;--trace-event-categories&lt;/code&gt; flag accepts a list of comma-separated category names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e1656659df1321444d7824a33ef26cfdf8bed9" translate="yes" xml:space="preserve">
          <source>Track heap object allocations for heap snapshots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dede6c9f5b091d4f1178b0d775ad848dfc2fe33" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751fa34c39229191e6c74b37aabdea80d0e08f00" translate="yes" xml:space="preserve">
          <source>Trailers will &lt;strong&gt;only&lt;/strong&gt; be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f752da73347f44bd141752afbe732a41e970f215" translate="yes" xml:space="preserve">
          <source>Trailing garbage at the end of the input stream will now result in an &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969267a9a3af0fbc68033e5c7098f852a9c4f7be" translate="yes" xml:space="preserve">
          <source>Trailing headers have already been sent on the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cec91881e34f290385e04905cd9b4c93523b2df" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object will be rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance will take its place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f821472ecd36f99690900f79391a7c77f149a02e" translate="yes" xml:space="preserve">
          <source>Transform streams are &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams where the output is in some way related to the input. Like all &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams, &lt;code&gt;Transform&lt;/code&gt; streams implement both the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d44411ee4a477c4003d0a4fd42fc9852f8eec42" translate="yes" xml:space="preserve">
          <source>Transmits a &lt;code&gt;GOAWAY&lt;/code&gt; frame to the connected peer &lt;em&gt;without&lt;/em&gt; shutting down the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a8085f322954c5cb827e7d3811aff927e4beb4" translate="yes" xml:space="preserve">
          <source>Trigger an &lt;code&gt;'uncaughtException'&lt;/code&gt; in JavaScript. Useful if an async callback throws an exception with no way to recover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fd9bf4f298a1d2622150397c550c3d7a9663cc" translate="yes" xml:space="preserve">
          <source>Triggered immediately after &lt;code&gt;'connect'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00719949dbe60c953bfc33c3a4fc7d650107ce37" translate="yes" xml:space="preserve">
          <source>True if headers were sent, false otherwise (read-only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52aaf50525ff477ac5ccb10f3e94474da0a7e6a3" translate="yes" xml:space="preserve">
          <source>True if the process is a master. This is determined by the &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt;. If &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; is undefined, then &lt;code&gt;isMaster&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f753bfbea14649b01155a879f0a01fd20d9acfb3" translate="yes" xml:space="preserve">
          <source>True if the process is not a master (it is the negation of &lt;code&gt;cluster.isMaster&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a402e4d3f2f574d66f39eac4a0a59eb01b7429dc" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success. The &lt;code&gt;path&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be a string or &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6fcf342166aa2b3f7da014c8cfdbe02e48d00f" translate="yes" xml:space="preserve">
          <source>Truncates the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb397e6582ffce2afa6f0c50c11a1da76968e2e5" translate="yes" xml:space="preserve">
          <source>Try to construct a table with the columns of the properties of &lt;code&gt;tabularData&lt;/code&gt; (or use &lt;code&gt;properties&lt;/code&gt;) and rows of &lt;code&gt;tabularData&lt;/code&gt; and log it. Falls back to just logging the argument if it can&amp;rsquo;t be parsed as tabular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5dbabbefef5321cc8fd2b28e920d3d40a94172" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; throws an &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt;&lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b131d9028db7e6607d213bfbc66c0ff665f5d4" translate="yes" xml:space="preserve">
          <source>Turning auto padding off will only work if the input data's length is a multiple of the ciphers block size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33207f4af1d127df91481b71b60c34a426f9170e" translate="yes" xml:space="preserve">
          <source>Two Reading Modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="e9bad3fe9a9d788bf5ced613088a28a42982f43d" translate="yes" xml:space="preserve">
          <source>Type: Compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2f71bebdcf0432ba9dae30fc4cd34d69a994d9" translate="yes" xml:space="preserve">
          <source>Type: Deprecation revoked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4afacd032dbf0b042ddec6e49a24f87b169ee946" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4038b1c0b648006573b34c3b0edb7a524d16ee2" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0334739797e8108100cffbf45a4decc971aeb44" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05f59a4cce67895e11eed8826cf4cee5bd54571" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf411b4184b37552deeb3149950b164297c489d" translate="yes" xml:space="preserve">
          <source>Type: Runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfbea69b5d285abfce6c4bef135a0ed69b7b0de" translate="yes" xml:space="preserve">
          <source>Type: Runtime (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="44f1ccbdc81b78ae74c2d0ae854796e4d7061770" translate="yes" xml:space="preserve">
          <source>Typed array slices are handled correctly now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f54df64da42601768ef91ee31423fac4d49160" translate="yes" xml:space="preserve">
          <source>Types of Streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7824c5156ab482008ad2ab94f44f8d1d1cdb802" translate="yes" xml:space="preserve">
          <source>Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the &lt;code&gt;data&lt;/code&gt; argument to the finalize callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65c7601001c43a1759b63d4de8c6cbfa1fdec3a" translate="yes" xml:space="preserve">
          <source>Typically, the &lt;code&gt;response&lt;/code&gt; is a digitally signed object from the server's CA that contains information about server's certificate revocation status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a77b330d905af0212c5c7ff0c6a442a27aabe49" translate="yes" xml:space="preserve">
          <source>Typically, the size of the current buffer is measured against the &lt;code&gt;highWaterMark&lt;/code&gt; in &lt;em&gt;bytes&lt;/em&gt;. However, after &lt;code&gt;setEncoding()&lt;/code&gt; is called, the comparison function will begin to measure the buffer's size in &lt;em&gt;characters&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31db7cab86864065f3e106f86c44b514de32cc5" translate="yes" xml:space="preserve">
          <source>UDP/Datagram</source>
          <target state="translated">UDP/Datagram</target>
        </trans-unit>
        <trans-unit id="9f78a32c9e9869badba95ed40dd1e0e645130d94" translate="yes" xml:space="preserve">
          <source>UDP/Datagram Sockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="0aa6d0c7243e93e5b8220dee83a136c689b755fa" translate="yes" xml:space="preserve">
          <source>URL Strings and URL Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668c7293b4faab50fd65a1538e196f37e127ab64" translate="yes" xml:space="preserve">
          <source>URL object support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c577ae467a3484accd429a3a86f410b07ee886" translate="yes" xml:space="preserve">
          <source>URL-based paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="aaa0bde7f5196da87592a553fbff4a7d60686471" translate="yes" xml:space="preserve">
          <source>URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1caa901ddac6183bbfa527108f80fb9a81c3fb50" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A false-y &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf77927f71e28dcf1f204b6a54ebaa27e8f22d5" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;input&lt;/code&gt; string and returns a &lt;code&gt;Uint8Array&lt;/code&gt; containing the encoded bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a020ddc6f85f9747d28e1db856f35e5132b29d" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event if the &lt;code&gt;repl&lt;/code&gt; is used as standalone program. If the &lt;code&gt;repl&lt;/code&gt; is included anywhere in another application, adding a listener for this event will throw an &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355754b0f03869d3cdd89f47abdc47135392a8b0" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, there is no need to modify the report triggering signal. However, if &lt;code&gt;SIGUSR2&lt;/code&gt; is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of &lt;code&gt;SIGUSR2&lt;/code&gt; for the said purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d9c4087497cf56cdc0c9a2696808d747e7494c" translate="yes" xml:space="preserve">
          <source>Under the hood, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses the same operating system facilities as most other programs. For instance, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; will almost always resolve a given name the same way as the &lt;code&gt;ping&lt;/code&gt; command. On most POSIX-like operating systems, the behavior of the &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function can be modified by changing settings in &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt;&lt;code&gt;nsswitch.conf(5)&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;&lt;code&gt;resolv.conf(5)&lt;/code&gt;&lt;/a&gt;, but changing these files will change the behavior of all other programs running on the same operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580e3fbd2559f3ee3cfa1776417d5a62f4c14b7c" translate="yes" xml:space="preserve">
          <source>Underscores instead of dashes are now allowed for Node.js options as well, in addition to V8 options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6da39f1b5c6c93e6c62b868278c8947240fb88" translate="yes" xml:space="preserve">
          <source>Unhandled &lt;code&gt;Promise&lt;/code&gt; rejections will now emit a process warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464f051574cc9f087c75400c48b33f6db9e3b08d" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571721324afa74a8ee617292febb542f1513c933" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the hostname of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929fece4ad5f5e7b4b1b96bae39ed7f671795daa" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances should always be considered a bug in the code or its dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2b51adbc6c7b0bc926ec919779dce328f8537f" translate="yes" xml:space="preserve">
          <source>Unless explicitly specified when creating a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; instance, each &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread has its own copy of &lt;code&gt;process.env&lt;/code&gt;, based on its parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt;, or whatever was specified as the &lt;code&gt;env&lt;/code&gt; option to the &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor. Changes to &lt;code&gt;process.env&lt;/code&gt; will not be visible across &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, and only the main thread can make changes that are visible to the operating system or to native add-ons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2172d325e09251aae77841665a275f9f12e96c85" translate="yes" xml:space="preserve">
          <source>Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; keywords are declared at the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738279034066201991d76c70c2c3ad5d7acd5fb5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt;, it does not support an additional &lt;code&gt;time&lt;/code&gt; argument since the difference can just be computed directly by subtraction of the two &lt;code&gt;bigint&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d31182b596602990e6a1b35091501ddc7cd0bd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if &lt;code&gt;readable.unshift()&lt;/code&gt; is called during a read (i.e. from within a &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;stream._read()&lt;/code&gt;&lt;/a&gt; implementation on a custom stream). Following the call to &lt;code&gt;readable.unshift()&lt;/code&gt; with an immediate &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push('')&lt;/code&gt;&lt;/a&gt; will reset the reading state appropriately, however it is best to simply avoid calling &lt;code&gt;readable.unshift()&lt;/code&gt; while in the process of performing a read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbea780c221ab67ef22ff2efead15150ae9d4ad" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module, duplicate keys in the form of array values are not allowed. Arrays are stringified using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt;&lt;code&gt;array.toString()&lt;/code&gt;&lt;/a&gt;, which simply joins all array elements with commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93286044bb9cc680edddcad0e702f7630a603e80" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;child_process&lt;/code&gt; or &lt;code&gt;cluster&lt;/code&gt;, &lt;code&gt;worker_threads&lt;/code&gt; can share memory. They do so by transferring &lt;code&gt;ArrayBuffer&lt;/code&gt; instances or sharing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
