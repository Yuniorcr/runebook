<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="ad3d4bf25a943f14d92312b632da4e7e0d35d840" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt;&lt;code&gt;fchown(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt; &lt;code&gt;fchown(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f4b4d270194625e7b141610ff1e518b1aac200ab" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt;&lt;code&gt;fdatasync(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt; &lt;code&gt;fdatasync(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc39dd69b8256834e2fb98fb94182119266e1cc6" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt;&lt;code&gt;fstat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt; &lt;code&gt;fstat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44b7f718e15200946f4623cb4b4e33834eb6e7a9" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt;&lt;code&gt;fsync(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt; &lt;code&gt;fsync(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="33c888ae72d3a8a0bb50ca36afa4781566c3ea80" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt;&lt;code&gt;lchown(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt; &lt;code&gt;lchown(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e18926f8587a2af308112d7b0c8264f16748a840" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt;&lt;code&gt;link(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt; &lt;code&gt;link(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2f75f3e28a706c2c6bb9568227b94b6acf713aa2" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt;&lt;code&gt;lstat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt; &lt;code&gt;lstat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6b1b75f489a2cb3ba4ed80adbdbf5ca21bba1eb" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt;&lt;code&gt;readlink(2)&lt;/code&gt;&lt;/a&gt;. Returns the symbolic link's string value.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt; &lt;code&gt;readlink(2)&lt;/code&gt; &lt;/a&gt;。シンボリックリンクの文字列値を返します。</target>
        </trans-unit>
        <trans-unit id="5ffc41f4f1ee61edfc49a65b31715d78d7ffe20f" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt;&lt;code&gt;rename(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt; &lt;code&gt;rename(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="17d3d4c89e4d85e653eafb3177f41259ef26e22c" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt;&lt;code&gt;rmdir(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt; &lt;code&gt;rmdir(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28ee7ed0e188ac9f7826666bd674ecefca61b2c1" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt;&lt;code&gt;stat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt; &lt;code&gt;stat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac126ea425f6a1c40039329050a0f61304da05ae" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt;&lt;code&gt;truncate(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;. A file descriptor can also be passed as the first argument. In this case, &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; is called.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt; &lt;code&gt;truncate(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。ファイル記述子を最初の引数として渡すこともできます。この場合、 &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dac8f3ceb4b160d897767d30f7f2d623ed374f45" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt;&lt;code&gt;unlink(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt; &lt;code&gt;unlink(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="11fd402af8cf61e990e467e592b5310749a1fdd5" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt;&lt;code&gt;readdir(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt; &lt;code&gt;readdir(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2ed53469e7b073c0706036b264bf98d6a1d5c91b" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9b10e55ac57c52c342c6cc931a99b72c4550bed" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt;&lt;code&gt;lchmod(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt; &lt;code&gt;lchmod(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="65e85fe7c1541edcf47592ce96e8d466cd76d7e6" translate="yes" xml:space="preserve">
          <source>Synchronous Process Creation</source>
          <target state="translated">同期プロセス作成</target>
        </trans-unit>
        <trans-unit id="cd9ec333e1e72b40b26740fa15e34a3e6d550f69" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;a href=&quot;#crypto_crypto_randomfill_buffer_offset_size_callback&quot;&gt;&lt;code&gt;crypto.randomFill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_randomfill_buffer_offset_size_callback&quot;&gt; &lt;code&gt;crypto.randomFill()&lt;/code&gt; の&lt;/a&gt;同期バージョン。</target>
        </trans-unit>
        <trans-unit id="5dff00a5c04808239d9aada5c4ca18cb5e7ce49d" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.futimes()&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt; &lt;code&gt;fs.futimes()&lt;/code&gt; の&lt;/a&gt;同期バージョン。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="001890af4b81357646bdfb6c882059353a682a82" translate="yes" xml:space="preserve">
          <source>Synchronous writes avoid problems such as output written with &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;console.error()&lt;/code&gt; being unexpectedly interleaved, or not written at all if &lt;code&gt;process.exit()&lt;/code&gt; is called before an asynchronous write completes. See &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">同期書き込みは、 &lt;code&gt;console.log()&lt;/code&gt; または &lt;code&gt;console.error()&lt;/code&gt; で書き込まれた出力が予期せずインターリーブされる、または非同期書き込みが完了する前に &lt;code&gt;process.exit()&lt;/code&gt; が呼び出された場合にまったく書き込まれないなどの問題を回避します。詳細については、&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="706e7214b2ee4d1df2b9c103d93e993b58d94846" translate="yes" xml:space="preserve">
          <source>Synchronously append data to a file, creating the file if it does not yet exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データをファイルに同期的に追加し、まだ存在しない場合はファイルを作成します。 &lt;code&gt;data&lt;/code&gt; は文字列または&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="caf29ea2fd4cca23c3642744d5dcee4b64efd42f" translate="yes" xml:space="preserve">
          <source>Synchronously calls each of the listeners registered for the event named &lt;code&gt;eventName&lt;/code&gt;, in the order they were registered, passing the supplied arguments to each.</source>
          <target state="translated">&lt;code&gt;eventName&lt;/code&gt; という名前のイベントに登録された各リスナーを、登録された順に同期的に呼び出し、指定された引数をそれぞれに渡します。</target>
        </trans-unit>
        <trans-unit id="87ab9cfcea2b82a6a54ad0e2a1be518d6d0377f0" translate="yes" xml:space="preserve">
          <source>Synchronously changes owner and group of a file. Returns &lt;code&gt;undefined&lt;/code&gt;. This is the synchronous version of &lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.chown()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルの所有者とグループを同期的に変更します。 &lt;code&gt;undefined&lt;/code&gt; を返します。これは&lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt; &lt;code&gt;fs.chown()&lt;/code&gt; の&lt;/a&gt;同期バージョンです。</target>
        </trans-unit>
        <trans-unit id="d3dc8169080cad4aad57268fbcf6dd615144282b" translate="yes" xml:space="preserve">
          <source>Synchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it already exists. Returns &lt;code&gt;undefined&lt;/code&gt;. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; を &lt;code&gt;dest&lt;/code&gt; に同期的にコピーします。デフォルトでは、 &lt;code&gt;dest&lt;/code&gt; はすでに存在する場合は上書きされます。 &lt;code&gt;undefined&lt;/code&gt; を返します。Node.jsは、コピー操作のアトミック性を保証しません。宛先ファイルが書き込み用に開かれた後にエラーが発生した場合、Node.jsは宛先を削除しようとします。</target>
        </trans-unit>
        <trans-unit id="30f949ad2b29c685875d038d9ad67d8db2d3042f" translate="yes" xml:space="preserve">
          <source>Synchronously creates a directory. Returns &lt;code&gt;undefined&lt;/code&gt;. This is the synchronous version of &lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt;&lt;code&gt;fs.mkdir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期してディレクトリを作成します。 &lt;code&gt;undefined&lt;/code&gt; を返します。これは&lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt; &lt;code&gt;fs.mkdir()&lt;/code&gt; の&lt;/a&gt;同期バージョンです。</target>
        </trans-unit>
        <trans-unit id="f76562e0906091f860d2cdc0acfa15b0fc73ae1a" translate="yes" xml:space="preserve">
          <source>Synchronously tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; で指定されたファイルまたはディレクトリに対するユーザーの権限を同期的にテストします。 &lt;code&gt;mode&lt;/code&gt; 引数は、実行されるアクセシビリティチェックを指定するオプションの整数です。 &lt;code&gt;mode&lt;/code&gt; 可能な値については、&lt;a href=&quot;#fs_file_access_constants&quot;&gt;ファイルアクセス定数&lt;/a&gt;を確認してください。2つ以上の値のビット単位ORで構成されるマスクを作成することができます（例： &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="614fbaf6f3d8aa1997a48d7bc9f7c4c3b4540998" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGABRT&lt;/code&gt;</source>
          <target state="translated">同義語 &lt;code&gt;SIGABRT&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d05d361c5d3f5f2c9904e5d32dcd2d56476fed0" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGIO&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SIGIO&lt;/code&gt; の同義語</target>
        </trans-unit>
        <trans-unit id="4f380113053857d9adf18e38f7f28450d82bfa95" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGPWR&lt;/code&gt;</source>
          <target state="translated">同義語 &lt;code&gt;SIGPWR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60d41a9e703a8da02013c9f0bc6fb1550a2b1d32" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGSYS&lt;/code&gt;</source>
          <target state="translated">同義語 &lt;code&gt;SIGSYS&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="1c1e69b645db3a0139b0bc89f68507bb8ecc8a8c" translate="yes" xml:space="preserve">
          <source>Syntax check the script without executing.</source>
          <target state="translated">実行せずにスクリプトをチェックする構文</target>
        </trans-unit>
        <trans-unit id="de4af2ff6c0bd31526ce7f5f8ca08783d0cc5ed7" translate="yes" xml:space="preserve">
          <source>SyntaxError</source>
          <target state="translated">SyntaxError</target>
        </trans-unit>
        <trans-unit id="79c1d6466cbd55165c23ed590e3c50259baeceb4" translate="yes" xml:space="preserve">
          <source>System errors triggered by underlying operating system constraints such as attempting to open a file that does not exist or attempting to send data over a closed socket.</source>
          <target state="translated">存在しないファイルを開こうとしたり、閉じたソケットを介してデータを送信しようとしたりするなど、基本的なオペレーティングシステムの制約によって引き起こされるシステムエラー。</target>
        </trans-unit>
        <trans-unit id="47e68638ef3b94e3c34563e1179f97e827fb9bec" translate="yes" xml:space="preserve">
          <source>SystemError</source>
          <target state="translated">SystemError</target>
        </trans-unit>
        <trans-unit id="7ed3ab6b248830bb34b14b34d5f1d70744e12132" translate="yes" xml:space="preserve">
          <source>TCP sockets</source>
          <target state="translated">ティーシーピーソケット</target>
        </trans-unit>
        <trans-unit id="d3aadd31313f9a9074b62457e4b8d729d92dc3de" translate="yes" xml:space="preserve">
          <source>TLS (SSL)</source>
          <target state="translated">ティーエルエス</target>
        </trans-unit>
        <trans-unit id="e2c513359710071e9f304f670426d7854aaf2267" translate="yes" xml:space="preserve">
          <source>TLS/SSL</source>
          <target state="translated">TLS/SSL</target>
        </trans-unit>
        <trans-unit id="fe30f2453beadbea9e17d4259abd3bb4c69ba8e0" translate="yes" xml:space="preserve">
          <source>TLS/SSL Concepts</source>
          <target state="translated">TLS/SSLの概念</target>
        </trans-unit>
        <trans-unit id="ad92e12207ad9494936c8629c6bf39a6c5c799e5" translate="yes" xml:space="preserve">
          <source>TLSv1.3 does not support renegotiation.</source>
          <target state="translated">TLSv1.3 は再ネゴシエーションをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="e6b1c6a14b3bdb56139962cae23fd38d0a437fb1" translate="yes" xml:space="preserve">
          <source>TLSv1.3 support added.</source>
          <target state="translated">TLSv1.3のサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="8318d6da10486926e0a8f69e39f6a29153e435fc" translate="yes" xml:space="preserve">
          <source>TTY</source>
          <target state="translated">TTY</target>
        </trans-unit>
        <trans-unit id="a14aa46e32a3b69ad4422aaabfff5efd16d76e92" translate="yes" xml:space="preserve">
          <source>TTYs (Terminals): &lt;em&gt;asynchronous&lt;/em&gt; on Windows, &lt;em&gt;synchronous&lt;/em&gt; on POSIX</source>
          <target state="translated">TTYの（ターミナル）：&lt;em&gt;非同期&lt;/em&gt;、Windows上で&lt;em&gt;同期&lt;/em&gt; POSIX上</target>
        </trans-unit>
        <trans-unit id="10cc80972b3b7b3bc0d6f88a871f489f6df934e7" translate="yes" xml:space="preserve">
          <source>Take caution when setting the &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; because the change affects &lt;em&gt;all&lt;/em&gt;&lt;code&gt;EventEmitter&lt;/code&gt; instances, including those created before the change is made. However, calling &lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt;&lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt;&lt;/a&gt; still has precedence over &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt;.</source>
          <target state="translated">変更が行われる前に作成されたものを含む&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスに変更が影響するため、 &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; を設定するときは注意してください。ただし、&lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt; &lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt; の&lt;/a&gt;呼び出しは、依然として &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; よりも優先されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5cf9760f1796a44472ed2a2b443da483fbd7afbc" translate="yes" xml:space="preserve">
          <source>Takes a function following the common error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument, and returns a version that returns promises.</source>
          <target state="translated">一般的なエラーファーストコールバックスタイルに従う関数、つまり &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; コールバックを最後の引数として受け取り、promiseを返すバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="32db24d9bf8ce36a03b9817eec0f05540b3a0a17" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;async&lt;/code&gt; function (or a function that returns a &lt;code&gt;Promise&lt;/code&gt;) and returns a function following the error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument. In the callback, the first argument will be the rejection reason (or &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Promise&lt;/code&gt; resolved), and the second argument will be the resolved value.</source>
          <target state="translated">受け取り &lt;code&gt;async&lt;/code&gt; 関数（または関数が戻っていることを &lt;code&gt;Promise&lt;/code&gt; し、すなわち取って、エラーの最初のコールバックのスタイルを次の関数を返す） &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; 最後の引数としてコールバック。コールバックでは、最初の引数は拒否理由（または &lt;code&gt;Promise&lt;/code&gt; が解決された場合は &lt;code&gt;null&lt;/code&gt; ）であり、2番目の引数は解決された値になります。</target>
        </trans-unit>
        <trans-unit id="7d54b5d8e8aa77fc6ce6677ac24c516b5da46028" translate="yes" xml:space="preserve">
          <source>Taking the earlier example, adding calls to &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt; would ensure that at most a single handle is valid throughout the execution of the loop:</source>
          <target state="translated">前の例では、&lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt;への呼び出しを追加すると、ループの実行全体で最大1つのハンドルが有効になることが保証されます。</target>
        </trans-unit>
        <trans-unit id="dd51a810606018ddf94cd16af005343caaa48e2c" translate="yes" xml:space="preserve">
          <source>Tells the kernel to join a multicast group at the given &lt;code&gt;multicastAddress&lt;/code&gt; and &lt;code&gt;multicastInterface&lt;/code&gt; using the &lt;code&gt;IP_ADD_MEMBERSHIP&lt;/code&gt; socket option. If the &lt;code&gt;multicastInterface&lt;/code&gt; argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call &lt;code&gt;addMembership&lt;/code&gt; multiple times, once per interface.</source>
          <target state="translated">&lt;code&gt;IP_ADD_MEMBERSHIP&lt;/code&gt; ソケットオプションを使用して、指定された &lt;code&gt;multicastAddress&lt;/code&gt; および &lt;code&gt;multicastInterface&lt;/code&gt; でマルチキャストグループに参加するようにカーネルに指示します。 &lt;code&gt;multicastInterface&lt;/code&gt; 引数が指定されていない場合、オペレーティングシステムは1つのインターフェイスを選択し、それにメンバーシップを追加します。使用可能なすべてのインターフェースにメンバーシップを追加するには、インターフェースごとに1回、 &lt;code&gt;addMembership&lt;/code&gt; を複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="68526cb3fb1e6211c4ac6b9eaf5494ac56cc4442" translate="yes" xml:space="preserve">
          <source>Template string specifying the filepath for the trace event data, it supports &lt;code&gt;${rotation}&lt;/code&gt; and &lt;code&gt;${pid}&lt;/code&gt;.</source>
          <target state="translated">トレースイベントデータのファイルパスを指定するテンプレート文字列で、 &lt;code&gt;${rotation}&lt;/code&gt; および &lt;code&gt;${pid}&lt;/code&gt; サポートします。</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="a2aec777fa0c378671997b287a782c6e4b1c8a21" translate="yes" xml:space="preserve">
          <source>Test in JavaScript by running:</source>
          <target state="translated">実行してJavaScriptでテストします。</target>
        </trans-unit>
        <trans-unit id="0aca118537d18c7e7d8980c89a0c419fa4ceca6a" translate="yes" xml:space="preserve">
          <source>Test it with:</source>
          <target state="translated">使ってテストしてみてください。</target>
        </trans-unit>
        <trans-unit id="57ab06e2fee2425b84ed4812cf6062520ce6f01a" translate="yes" xml:space="preserve">
          <source>Test this by using &lt;code&gt;telnet&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;telnet&lt;/code&gt; を使用してこれをテストします。</target>
        </trans-unit>
        <trans-unit id="cf3a0b9ac49cdb286e37c2aa858d35d24b131508" translate="yes" xml:space="preserve">
          <source>Test whether or not the given path exists by checking with the file system. Then call the &lt;code&gt;callback&lt;/code&gt; argument with either true or false:</source>
          <target state="translated">ファイルシステムをチェックして、指定されたパスが存在するかどうかをテストします。次に、trueまたはfalseで &lt;code&gt;callback&lt;/code&gt; 引数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="373f76c3b48e3efa4da67e53a0ad70970dd592e8" translate="yes" xml:space="preserve">
          <source>Tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; で指定されたファイルまたはディレクトリに対するユーザーの権限をテストします。 &lt;code&gt;mode&lt;/code&gt; 引数は、実行されるアクセシビリティチェックを指定するオプションの整数です。 &lt;code&gt;mode&lt;/code&gt; 可能な値については、&lt;a href=&quot;#fs_file_access_constants&quot;&gt;ファイルアクセス定数&lt;/a&gt;を確認してください。2つ以上の値のビット単位ORで構成されるマスクを作成することができます（例： &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="30c798d1cba4352fa5aa1995447937b01d2c89d8" translate="yes" xml:space="preserve">
          <source>Tests for any deep inequality. Opposite of &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">深い不平等がないかテストします。&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; の&lt;/a&gt;反対です。</target>
        </trans-unit>
        <trans-unit id="cca6c7dab0d67fd704d887e9ca5c9c5c95a18254" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. &quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects are recursively evaluated also by the following rules.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; パラメータと &lt;code&gt;expected&lt;/code&gt; パラメータの間の深い同等性をテストします。「深い」同等性とは、子オブジェクトの列挙可能な「独自の」プロパティが、次のルールによっても再帰的に評価されることを意味します。</target>
        </trans-unit>
        <trans-unit id="9dd71746b3ea99569a2d24241a5052d08ebd5d84" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. Consider using &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt; instead. &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; can have potentially surprising results.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; パラメータと &lt;code&gt;expected&lt;/code&gt; パラメータの間の深い同等性をテストします。代わりに&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; の&lt;/a&gt;使用を検討してください。&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;は驚くべき結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="395ce90a87d755e27601a56cb1b664b84baea384" translate="yes" xml:space="preserve">
          <source>Tests for deep strict inequality. Opposite of &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">厳密な不平等をテストします。&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; の&lt;/a&gt;反対です。</target>
        </trans-unit>
        <trans-unit id="463cc035e99c394930e6645776f0a53b43c38377" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;value&lt;/code&gt; is truthy. It is equivalent to &lt;code&gt;assert.equal(!!value, true, message)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が真実かどうかをテストします。 &lt;code&gt;assert.equal(!!value, true, message)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="2a4ea6c5211e7b80703161d41055ac764abd80da" translate="yes" xml:space="preserve">
          <source>Tests if input is an IP address. Returns &lt;code&gt;0&lt;/code&gt; for invalid strings, returns &lt;code&gt;4&lt;/code&gt; for IP version 4 addresses, and returns &lt;code&gt;6&lt;/code&gt; for IP version 6 addresses.</source>
          <target state="translated">入力がIPアドレスかどうかをテストします。無効な文字列の場合は &lt;code&gt;0&lt;/code&gt; を返し、IPバージョン4アドレスの場合は &lt;code&gt;4&lt;/code&gt; を返し、IPバージョン6アドレスの場合は &lt;code&gt;6&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="feefa8a364493389f53430a6de0b21850fee011d" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等価比較&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）を使用して、 &lt;code&gt;actual&lt;/code&gt; パラメーターと &lt;code&gt;expected&lt;/code&gt; パラメーターの間の浅く強制的な等価性をテストします。</target>
        </trans-unit>
        <trans-unit id="44f7e9972b6e6f7c5298385f4b7873077939044b" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive inequality with the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;!=&lt;/code&gt; ).</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等値比較&lt;/a&gt;（ &lt;code&gt;!=&lt;/code&gt; ）を使用して、浅く強制的な不等式をテストします。</target>
        </trans-unit>
        <trans-unit id="5fa3dfda75c4503246ff098aae7b36a9a376efbc" translate="yes" xml:space="preserve">
          <source>Tests strict equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters as determined by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue Comparison&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue比較&lt;/a&gt;によって決定さ &lt;code&gt;expected&lt;/code&gt; た &lt;code&gt;actual&lt;/code&gt; パラメーターと期待されるパラメーターの間の厳密な等価性をテストします。</target>
        </trans-unit>
        <trans-unit id="c3ef22ea86f89b85e92603495ca3f1838f321b32" translate="yes" xml:space="preserve">
          <source>Tests strict inequality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters as determined by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue Comparison&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue比較&lt;/a&gt;によって決定さ &lt;code&gt;expected&lt;/code&gt; た &lt;code&gt;actual&lt;/code&gt; パラメーターと期待されるパラメーターの間の厳密な不等式をテストします。</target>
        </trans-unit>
        <trans-unit id="840c7e38544dbd613fa0b1f9a59f6f627ea3dd88" translate="yes" xml:space="preserve">
          <source>TextDecoder</source>
          <target state="translated">TextDecoder</target>
        </trans-unit>
        <trans-unit id="b1ec439dd8ac6da12ff0821c5bfa7393b4881faa" translate="yes" xml:space="preserve">
          <source>TextEncoder</source>
          <target state="translated">TextEncoder</target>
        </trans-unit>
        <trans-unit id="c42248b8074b4f949d55e28e0d79c0c0d4a648dd" translate="yes" xml:space="preserve">
          <source>That is possible via explicit binding.</source>
          <target state="translated">それは明示的なバインディングを介して可能です。</target>
        </trans-unit>
        <trans-unit id="0b16cd002f41de26f1ea4e18f3c9e90c00d1246b" translate="yes" xml:space="preserve">
          <source>That is: 128K for &lt;code&gt;windowBits&lt;/code&gt; = 15 + 128K for &lt;code&gt;memLevel&lt;/code&gt; = 8 (default values) plus a few kilobytes for small objects.</source>
          <target state="translated">つまり、 &lt;code&gt;windowBits&lt;/code&gt; の場合は128K = 15 + &lt;code&gt;memLevel&lt;/code&gt; = 8の場合は128K （デフォルト値）と小さなオブジェクトの場合は数キロバイト。</target>
        </trans-unit>
        <trans-unit id="a68ade3fe43251a8bf4b61f8712e096777291c78" translate="yes" xml:space="preserve">
          <source>That's usually desired (it saves a TCP round-trip), but not when the first data is not sent until possibly much later. &lt;code&gt;request.flushHeaders()&lt;/code&gt; bypasses the optimization and kickstarts the request.</source>
          <target state="translated">これは通常望ましいことです（TCPラウンドトリップを節約します）が、最初のデータが送信されない場合は、おそらくかなり後であることはありません。 &lt;code&gt;request.flushHeaders()&lt;/code&gt; は最適化をバイパスし、リクエストをキックスタートします。</target>
        </trans-unit>
        <trans-unit id="2ebc326079e65f383e5f73a385a4c2437e971919" translate="yes" xml:space="preserve">
          <source>The &quot;(not locale-aware)&quot; designation denotes that the function carries out its operation just like the non-&lt;code&gt;Locale&lt;/code&gt; version of the function, if one exists. For example, under &lt;code&gt;none&lt;/code&gt; mode, &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;'s operation is identical to that of &lt;code&gt;Date.prototype.toString()&lt;/code&gt;.</source>
          <target state="translated">「（ロケ​​ールを認識しない）」の指定は、関数の非 &lt;code&gt;Locale&lt;/code&gt; バージョンが存在する場合、その関数が非ロケールバージョンと同じように動作することを示します。例えば、下 &lt;code&gt;none&lt;/code&gt; モード、 &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt; の動作と同じである &lt;code&gt;Date.prototype.toString()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac095a03ae1997aefcc713236808ca5097ddd1d7" translate="yes" xml:space="preserve">
          <source>The &quot;not recommended&quot; examples above check for accessibility and then use the file; the &quot;recommended&quot; examples are better because they use the file directly and handle the error, if any.</source>
          <target state="translated">上記の「推奨されない」例は、アクセシビリティをチェックしてからファイルを使用していますが、「推奨される」例は、ファイルを直接使用し、エラーがあればそれを処理するので、より良いです。</target>
        </trans-unit>
        <trans-unit id="6e811cd4964e5f70132f577a1acb4f7a72db2bab" translate="yes" xml:space="preserve">
          <source>The &quot;not recommended&quot; examples above check for existence and then use the file; the &quot;recommended&quot; examples are better because they use the file directly and handle the error, if any.</source>
          <target state="translated">上の「推奨されない」例は、存在をチェックしてからファイルを使用しますが、「推奨される」例は、ファイルを直接使用し、エラーがあればそれを処理するので、より良いです。</target>
        </trans-unit>
        <trans-unit id="94c8ce5178b6bb7d28badf9f2a4281414fb8f41e" translate="yes" xml:space="preserve">
          <source>The &quot;two modes&quot; of operation for a &lt;code&gt;Readable&lt;/code&gt; stream are a simplified abstraction for the more complicated internal state management that is happening within the &lt;code&gt;Readable&lt;/code&gt; stream implementation.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; ストリームの操作の「2つのモード」は、 &lt;code&gt;Readable&lt;/code&gt; ストリームの実装内で行われているより複雑な内部状態管理の簡略化された抽象化です。</target>
        </trans-unit>
        <trans-unit id="56aa934142cd588e17bf9c1e16e0d637af9ba820" translate="yes" xml:space="preserve">
          <source>The 3-digit HTTP response status code. E.G. &lt;code&gt;404&lt;/code&gt;.</source>
          <target state="translated">3桁のHTTP応答ステータスコード。EG &lt;code&gt;404&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48e656032fb575261b8d316d8062bd83e8216921" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object may emit an &lt;a href=&quot;#child_process_event_error&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event if the signal cannot be delivered. Sending a signal to a child process that has already exited is not an error but may have unforeseen consequences. Specifically, if the process identifier (PID) has been reassigned to another process, the signal will be delivered to that process instead which can have unexpected results.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;目的は、発光することができる&lt;a href=&quot;#child_process_event_error&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;信号が配信できない場合、イベントを。すでに終了した子プロセスにシグナルを送信してもエラーにはなりませんが、予期しない結果が生じる可能性があります。具体的には、プロセス識別子（PID）が別のプロセスに再割り当てされた場合、シグナルは代わりにそのプロセスに配信され、予期しない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="40e3287737f4479f804d16c44337bd5db18657bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; methods additionally allow for an optional &lt;code&gt;callback&lt;/code&gt; function to be specified that is invoked when the child process terminates.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;メソッドは、さらにオプションを可能にする &lt;code&gt;callback&lt;/code&gt; 場合、子プロセスが終了呼び出される指定する機能。</target>
        </trans-unit>
        <trans-unit id="657b6c299886316eee3bc58094bef1e2370f9d36" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; method spawns the child process asynchronously, without blocking the Node.js event loop. The &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt; function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;メソッドは、Node.jsのイベントループをブロックすることなく、非同期に子プロセスを生成します。&lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt; &lt;code&gt;child_process.spawnSync()&lt;/code&gt; &lt;/a&gt;関数は、ブロックがいずれかの出口または生成されたプロセスまで、イベントループが終了したことを同期的に同等の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="1688011690fb4378a7719266ac1063b2799fdb70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;メソッドは、他のすべてのNode.jsのAPIの一般的な慣用非同期プログラミングパターンに従います。</target>
        </trans-unit>
        <trans-unit id="182b836ee1769bfedc16b78015980cd0b36abc0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_execsync_command_options&quot;&gt;&lt;code&gt;child_process.execSync()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_child_process_execfilesync_file_args_options&quot;&gt;&lt;code&gt;child_process.execFileSync()&lt;/code&gt;&lt;/a&gt; methods are synchronous and will block the Node.js event loop, pausing execution of any additional code until the spawned process exits.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt; &lt;code&gt;child_process.spawnSync()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_execsync_command_options&quot;&gt; &lt;code&gt;child_process.execSync()&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#child_process_child_process_execfilesync_file_args_options&quot;&gt; &lt;code&gt;child_process.execFileSync()&lt;/code&gt; &lt;/a&gt;メソッドは、同期され、生成されたプロセスが終了するまで、追加のコードの実行を一時停止、Node.jsのイベントループをブロックします。</target>
        </trans-unit>
        <trans-unit id="b3a665070f0e5b8d887ba5e44bc0316e93d97deb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createcipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createCipher()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;Cipher&lt;/code&gt; instances. &lt;code&gt;Cipher&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createcipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createCipher()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Cipher&lt;/code&gt; インスタンス。 &lt;code&gt;Cipher&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="1d8f2ca3fcde3d31aafb5b8d15b5bf8726d59896" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createDecipher()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;Decipher&lt;/code&gt; instances. &lt;code&gt;Decipher&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createDecipher()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Decipher&lt;/code&gt; インスタンス。 &lt;code&gt;Decipher&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="60a0dc8a28700375d6bd094fcb58b82f89d22e4d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Hash&lt;/code&gt; instances. &lt;code&gt;Hash&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Hash&lt;/code&gt; インスタンス。 &lt;code&gt;Hash&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="272aeced5bc0e4813efac50b5c1bc84cdc6fe849" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createhmac_algorithm_key_options&quot;&gt;&lt;code&gt;crypto.createHmac()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Hmac&lt;/code&gt; instances. &lt;code&gt;Hmac&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createhmac_algorithm_key_options&quot;&gt; &lt;code&gt;crypto.createHmac()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Hmac&lt;/code&gt; インスタンス。 &lt;code&gt;Hmac&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="d72bf2ca2aeb5175891eb19c6679170377973cd3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createsign_algorithm_options&quot;&gt;&lt;code&gt;crypto.createSign()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Sign&lt;/code&gt; instances. The argument is the string name of the hash function to use. &lt;code&gt;Sign&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createsign_algorithm_options&quot;&gt; &lt;code&gt;crypto.createSign()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用された &lt;code&gt;Sign&lt;/code&gt; インスタンスを。引数は、使用するハッシュ関数の文字列名です。 &lt;code&gt;Sign&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="2f487e5e25b84ed0186cf99140719bc8c0beea5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createverify_algorithm_options&quot;&gt;&lt;code&gt;crypto.createVerify()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Verify&lt;/code&gt; instances. &lt;code&gt;Verify&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createverify_algorithm_options&quot;&gt; &lt;code&gt;crypto.createVerify()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用されている &lt;code&gt;Verify&lt;/code&gt; インスタンス。 &lt;code&gt;new&lt;/code&gt; キーワードを使用してオブジェクトが直接作成されないことを &lt;code&gt;Verify&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b1a7a1032abf97db10645fe578c6a3a0c928005f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; method is now deprecated as its inclusion in the API is not useful. Either a previously stored private key should be set, which automatically generates the associated public key, or &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; should be called. The main drawback of using &lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; is that it can be used to put the ECDH key pair into an inconsistent state.</source>
          <target state="translated">&lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt; APIでの包含は有用ではないような方法は、現在推奨されていません。以前に保存された秘密鍵を設定して、関連する公開鍵を自動的に生成するか、&lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。&lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt;を使用することの主な欠点は、ECDHキーペアを不整合な状態にするために使用できることです。</target>
        </trans-unit>
        <trans-unit id="af1ea3bd65833e08bbbbcc0fac2f7e6540b19747" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt;&lt;code&gt;dns.setServers()&lt;/code&gt;&lt;/a&gt; method affects only &lt;a href=&quot;#dns_dns_resolve_hostname_rrtype_callback&quot;&gt;&lt;code&gt;dns.resolve()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;dns.resolve*()&lt;/code&gt; and &lt;a href=&quot;#dns_dns_reverse_ip_callback&quot;&gt;&lt;code&gt;dns.reverse()&lt;/code&gt;&lt;/a&gt; (and specifically &lt;em&gt;not&lt;/em&gt;&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt; &lt;code&gt;dns.setServers()&lt;/code&gt; &lt;/a&gt;メソッドのみ影響&lt;a href=&quot;#dns_dns_resolve_hostname_rrtype_callback&quot;&gt; &lt;code&gt;dns.resolve()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;dns.resolve*()&lt;/code&gt; と&lt;a href=&quot;#dns_dns_reverse_ip_callback&quot;&gt; &lt;code&gt;dns.reverse()&lt;/code&gt; &lt;/a&gt;（具体的に&lt;em&gt;はない&lt;/em&gt;&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a5eaca6b7dcaf2d83d377c33b354cdfe71f471cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; object backing the request.</source>
          <target state="translated">&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;要求をバックアップ対象。</target>
        </trans-unit>
        <trans-unit id="8ad81abf7e88f6be9cbd14b6e2a603f4c0d4dea9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; object backing the response.</source>
          <target state="translated">&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;応答をバックアップ対象。</target>
        </trans-unit>
        <trans-unit id="a55f9b45e6e60de3065281239cb831e2bfae2a74" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; API defines a JavaScript class with constructor, static properties and methods, and instance properties and methods that correspond to the C++ class.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; の&lt;/a&gt; APIは、対応するC ++クラスへのコンストラクタ、静的プロパティとメソッド、およびインスタンスのプロパティとメソッドとJavaScriptのクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="23794a3cdf8807a3dc8d04944e8b307aeb2170fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#net_net_connect&quot;&gt;&lt;code&gt;net.connect()&lt;/code&gt;&lt;/a&gt; function is an alias to this function.</source>
          <target state="translated">&lt;a href=&quot;#net_net_connect&quot;&gt; &lt;code&gt;net.connect()&lt;/code&gt; &lt;/a&gt;関数は、この関数の別名です。</target>
        </trans-unit>
        <trans-unit id="81b4b6a978521cef7f07c53b8c5d3a6500dabb8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; events are from the &lt;code&gt;stream.Writable&lt;/code&gt; and &lt;code&gt;stream.Readable&lt;/code&gt; classes, respectively. The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; is called and all chunks have been processed by &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream._transform()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;'end'&lt;/code&gt; event is emitted after all data has been output, which occurs after the callback in &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;のイベントがあるから &lt;code&gt;stream.Writable&lt;/code&gt; と &lt;code&gt;stream.Readable&lt;/code&gt; 、それぞれのクラス。&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;が呼び出され、すべてのチャンクが&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream._transform()&lt;/code&gt; &lt;/a&gt;によって処理された後、 &lt;code&gt;'finish'&lt;/code&gt; イベントが発行されます。 &lt;code&gt;'end'&lt;/code&gt; すべてのデータが中にコールバックした後に発生する出力された後、イベントが発せられる&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; が&lt;/a&gt;呼び出されました。</target>
        </trans-unit>
        <trans-unit id="a91b62e06ce5ed810007ac4394a54ee2b2a2526f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method was advisory, rather than guaranteed. This meant that it was still necessary to be prepared to receive &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events &lt;em&gt;even when the stream was in a paused state&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt;メソッドは、保証ではなく、顧問でした。つまり&lt;em&gt;、ストリームが一時停止状態であっても、&lt;/em&gt;&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;イベントを受信する準備をする必要&lt;em&gt;がありました&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="00ef3a2a185dea6ac7cc3de21b4d4ec335893dc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method is never called.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="ea078fae0cc509318f581c1ffd530ada67fd8ed7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_event_close&quot;&gt;&lt;code&gt;'close'&lt;/code&gt; event&lt;/a&gt; will be emitted on both &lt;code&gt;MessagePort&lt;/code&gt; instances that are part of the channel.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_event_close&quot;&gt; &lt;code&gt;'close'&lt;/code&gt; イベントは&lt;/a&gt;両方に放出される &lt;code&gt;MessagePort&lt;/code&gt; のチャネルの一部であるインスタンス。</target>
        </trans-unit>
        <trans-unit id="2a562b02e59b86e28885161e100a090fa5e871e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_worker_ismainthread&quot;&gt;&lt;code&gt;require('worker_threads').isMainThread&lt;/code&gt;&lt;/a&gt; property is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_worker_ismainthread&quot;&gt; &lt;code&gt;require('worker_threads').isMainThread&lt;/code&gt; &lt;/a&gt;プロパティは次のように設定されている &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b47ce78c8cdb1996966bbb7ad92caede8246ea0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_worker_parentport&quot;&gt;&lt;code&gt;require('worker_threads').parentPort&lt;/code&gt;&lt;/a&gt; message port is available.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_worker_parentport&quot;&gt; &lt;code&gt;require('worker_threads').parentPort&lt;/code&gt; &lt;/a&gt;メッセージポートが使用可能です。</target>
        </trans-unit>
        <trans-unit id="a0788405a7f0d1d62586e574567272093df3cb23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt;&lt;code&gt;SlowBuffer&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;buffer#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt; &lt;code&gt;SlowBuffer&lt;/code&gt; の&lt;/a&gt;クラスが推奨されていません。代わりに&lt;a href=&quot;buffer#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="4a2d10b9b1ed99815980887ff9b6b63ad7fa368a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_force_fips&quot;&gt;&lt;code&gt;--force-fips&lt;/code&gt;&lt;/a&gt; command-line argument was used but there was an attempt to enable or disable FIPS mode in the &lt;code&gt;crypto&lt;/code&gt; module.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_force_fips&quot;&gt; &lt;code&gt;--force-fips&lt;/code&gt; &lt;/a&gt;コマンドライン引数を使用しますがでFIPSモードを有効または無効にする試みがあった &lt;code&gt;crypto&lt;/code&gt; モジュールが。</target>
        </trans-unit>
        <trans-unit id="e983a50c7e4bc0702b1c113981673fe3ac4bc071" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_icu_data_dir_file&quot;&gt;&lt;code&gt;--icu-data-dir&lt;/code&gt;&lt;/a&gt; CLI parameter:</source>
          <target state="translated">&lt;a href=&quot;cli#cli_icu_data_dir_file&quot;&gt; &lt;code&gt;--icu-data-dir&lt;/code&gt; &lt;/a&gt; CLIパラメータ：</target>
        </trans-unit>
        <trans-unit id="3269de477ec16db6d3e4e2e4ec9e89547e253b9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_node_icu_data_file&quot;&gt;&lt;code&gt;NODE_ICU_DATA&lt;/code&gt;&lt;/a&gt; environment variable:</source>
          <target state="translated">&lt;a href=&quot;cli#cli_node_icu_data_file&quot;&gt; &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; の&lt;/a&gt;環境変数：</target>
        </trans-unit>
        <trans-unit id="55cdbfc05e62c6d410e5122eb1c4b31915a547ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_trace_warnings&quot;&gt;&lt;code&gt;--trace-warnings&lt;/code&gt;&lt;/a&gt; command line flag can be used to display the stack trace for such warnings.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_trace_warnings&quot;&gt; &lt;code&gt;--trace-warnings&lt;/code&gt; &lt;/a&gt;コマンド・ライン・フラグは、警告のためにスタックトレースを表示するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="bf5cc0b37d8fefcbb53b715018d9c8c57743b787" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_crypto_default_encoding&quot;&gt;&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt;&lt;/a&gt; property is deprecated.</source>
          <target state="translated">&lt;a href=&quot;crypto#crypto_crypto_default_encoding&quot;&gt; &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; の&lt;/a&gt;プロパティが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="62412f82af2fabb1917c397d074f13965837ec0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_crypto_fips&quot;&gt;&lt;code&gt;crypto.fips&lt;/code&gt;&lt;/a&gt; property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;crypto#crypto_crypto_fips&quot;&gt; &lt;code&gt;crypto.fips&lt;/code&gt; &lt;/a&gt;プロパティが廃止されました。代わりに、 &lt;code&gt;crypto.setFips()&lt;/code&gt; および &lt;code&gt;crypto.getFips()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="b4d433d17fd0d11353c66c15c886e318a5f1dbe0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; method is now deprecated as its inclusion in the API is not useful.</source>
          <target state="translated">&lt;a href=&quot;crypto#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt; APIでの包含は有用ではないような方法は、現在推奨されていません。</target>
        </trans-unit>
        <trans-unit id="3ddb42db48b459691d26c606a371305e9962646c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module is deprecated and should not be used.</source>
          <target state="translated">&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールは廃止され、使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="6b715676783ff70f39d153dfbf49c8d7a8d95c6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;events#events_eventemitter_listenercount_emitter_eventname&quot;&gt;&lt;code&gt;EventEmitter.listenerCount(emitter, eventName)&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;events#events_emitter_listenercount_eventname&quot;&gt;&lt;code&gt;emitter.listenerCount(eventName)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;events#events_eventemitter_listenercount_emitter_eventname&quot;&gt; &lt;code&gt;EventEmitter.listenerCount(emitter, eventName)&lt;/code&gt; &lt;/a&gt; APIが推奨されていません。代わりに、&lt;a href=&quot;events#events_emitter_listenercount_eventname&quot;&gt; &lt;code&gt;emitter.listenerCount(eventName)&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="4787b47a4047863e2178c993d4ef966741994d96" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_exists_path_callback&quot;&gt;&lt;code&gt;fs.exists(path, callback)&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fs#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_exists_path_callback&quot;&gt; &lt;code&gt;fs.exists(path, callback)&lt;/code&gt; &lt;/a&gt; APIは推奨されません。代わりに&lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;fs.stat()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;fs#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="5450f8e3e61962987f25b85a6df69634e3d21306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchmod_path_mode_callback&quot;&gt;&lt;code&gt;fs.lchmod(path, mode, callback)&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchmod_path_mode_callback&quot;&gt; &lt;code&gt;fs.lchmod(path, mode, callback)&lt;/code&gt; &lt;/a&gt; APIが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="f4197c2b634ea325f5f0b8697daf943e117c2877" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchmodsync_path_mode&quot;&gt;&lt;code&gt;fs.lchmodSync(path, mode)&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchmodsync_path_mode&quot;&gt; &lt;code&gt;fs.lchmodSync(path, mode)&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="0ab933eb3e9ecab8394da97c6d83154c68804b34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.lchown(path, uid, gid, callback)&lt;/code&gt;&lt;/a&gt; API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchown_path_uid_gid_callback&quot;&gt; &lt;code&gt;fs.lchown(path, uid, gid, callback)&lt;/code&gt; &lt;/a&gt; APIは廃止されました。必要なサポートAPIがlibuvに追加されたため、非推奨は取り消されました。</target>
        </trans-unit>
        <trans-unit id="17547f204a4a8cd3dd8b5f1b43c67f63b8b73057" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchownsync_path_uid_gid&quot;&gt;&lt;code&gt;fs.lchownSync(path, uid, gid)&lt;/code&gt;&lt;/a&gt; API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchownsync_path_uid_gid&quot;&gt; &lt;code&gt;fs.lchownSync(path, uid, gid)&lt;/code&gt; &lt;/a&gt; APIは廃止されました。必要なサポートAPIがlibuvに追加されたため、非推奨は取り消されました。</target>
        </trans-unit>
        <trans-unit id="c804325c82ccdd29bbeee83eb71644618ad1c016" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt;&lt;code&gt;fs.read()&lt;/code&gt;&lt;/a&gt; legacy &lt;code&gt;String&lt;/code&gt; interface is deprecated. Use the &lt;code&gt;Buffer&lt;/code&gt; API as mentioned in the documentation instead.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt; &lt;code&gt;fs.read()&lt;/code&gt; &lt;/a&gt;レガシー &lt;code&gt;String&lt;/code&gt; インターフェースが廃止されました。代わりに、ドキュメントに記載されている &lt;code&gt;Buffer&lt;/code&gt; APIを使用してください。</target>
        </trans-unit>
        <trans-unit id="3d0b2e1271980488fd62bebefbbcafb3a8039b6b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_readsync_fd_buffer_offset_length_position&quot;&gt;&lt;code&gt;fs.readSync()&lt;/code&gt;&lt;/a&gt; legacy &lt;code&gt;String&lt;/code&gt; interface is deprecated. Use the &lt;code&gt;Buffer&lt;/code&gt; API as mentioned in the documentation instead.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_readsync_fd_buffer_offset_length_position&quot;&gt; &lt;code&gt;fs.readSync()&lt;/code&gt; &lt;/a&gt;レガシー &lt;code&gt;String&lt;/code&gt; インターフェースが廃止されました。代わりに、ドキュメントに記載されている &lt;code&gt;Buffer&lt;/code&gt; APIを使用してください。</target>
        </trans-unit>
        <trans-unit id="7e0e15dd5c7ff4e12c91a264536fb48be906367c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; (or &lt;code&gt;nan&lt;/code&gt;) provide a set of tools that Addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the &lt;code&gt;nan&lt;/code&gt;&lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;examples&lt;/a&gt; for an illustration of how it can be used.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Node.js&lt;/a&gt;（または &lt;code&gt;nan&lt;/code&gt; ）のネイティブ抽象化は、アドオン開発者がV8とNode.jsの過去と将来のリリース間の互換性を保つために使用することが推奨される一連のツールを提供します。使用&lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;例&lt;/a&gt;については、 &lt;code&gt;nan&lt;/code&gt; の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6d4615e7da1a5be9752109051385fe95c802bdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; considers a handful of URL protocol schemes to be &lt;em&gt;special&lt;/em&gt; in terms of how they are parsed and serialized. When a URL is parsed using one of these special protocols, the &lt;code&gt;url.protocol&lt;/code&gt; property may be changed to another special protocol but cannot be changed to a non-special protocol, and vice versa.</source>
          <target state="translated">&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL標準&lt;/a&gt; URLプロトコルスキームの一握りがあることを考えて&lt;em&gt;、特別な&lt;/em&gt;彼らが解析され、どのように直列化されるかという点で。これらの特別なプロトコルの1つを使用してURLを解析する場合、 &lt;code&gt;url.protocol&lt;/code&gt; プロパティは別の特別なプロトコルに変更できますが、特別でないプロトコルに変更することはできず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="fd206683a8c090e699b1fa58c29c9efcca8e48d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; uses a more selective and fine grained approach to selecting encoded characters than that used by the Legacy API.</source>
          <target state="translated">&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL標準は、&lt;/a&gt;レガシーAPIが使用するよりもエンコードされた文字を選択することにより選択し、きめの細かいアプローチを使用しています。</target>
        </trans-unit>
        <trans-unit id="c145134bbf712c2e7b8b2f2e5174f2f626bfc168" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt;&lt;code&gt;timeOrigin&lt;/code&gt;&lt;/a&gt; specifies the high resolution millisecond timestamp at which the current &lt;code&gt;node&lt;/code&gt; process began, measured in Unix time.</source>
          <target state="translated">&lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt; &lt;code&gt;timeOrigin&lt;/code&gt; は&lt;/a&gt;現在れる高解像度ミリ秒のタイムスタンプを指定する &lt;code&gt;node&lt;/code&gt; のUnix時間で測定プロセスが始まったが、。</target>
        </trans-unit>
        <trans-unit id="7d2adb934d58d4e06962a615ed42864be6eca7c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/full-icu&quot;&gt;full-icu&lt;/a&gt; npm module can greatly simplify ICU data installation by detecting the ICU version of the running &lt;code&gt;node&lt;/code&gt; executable and downloading the appropriate data file. After installing the module through &lt;code&gt;npm i full-icu&lt;/code&gt;, the data file will be available at &lt;code&gt;./node_modules/full-icu&lt;/code&gt;. This path can be then passed either to &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; or &lt;code&gt;--icu-data-dir&lt;/code&gt; as shown above to enable full &lt;code&gt;Intl&lt;/code&gt; support.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/full-icu&quot;&gt;フルICU&lt;/a&gt; NPMモジュール実行中のICUバージョン検出することによって大幅に簡素化ICUデータインストールすることができる &lt;code&gt;node&lt;/code&gt; 実行可能ファイルを適切なデータ・ファイルをダウンロードします。 &lt;code&gt;npm i full-icu&lt;/code&gt; を介してモジュールをインストールすると、データファイルは &lt;code&gt;./node_modules/full-icu&lt;/code&gt; にあります。次に、このパスを上記のように &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; または &lt;code&gt;--icu-data-dir&lt;/code&gt; に渡して、完全な &lt;code&gt;Intl&lt;/code&gt; サポートを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="416895945590576bea45ae4f6c939de8d5ff3cfb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules#modules_require_extensions&quot;&gt;&lt;code&gt;require.extensions&lt;/code&gt;&lt;/a&gt; property is deprecated.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_require_extensions&quot;&gt; &lt;code&gt;require.extensions&lt;/code&gt; の&lt;/a&gt;プロパティが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="f57857361da91519c1768f3f7d53e717a06f8e5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; object associated with the connection.</source>
          <target state="translated">&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; の&lt;/a&gt;接続に関連付けられているオブジェクト。</target>
        </trans-unit>
        <trans-unit id="24877f198cc1c87a0e4b125d95b2a45703e83804" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt; method was called when a &lt;code&gt;net.Server&lt;/code&gt; was not running. This applies to all instances of &lt;code&gt;net.Server&lt;/code&gt;, including HTTP, HTTPS, and HTTP/2 &lt;code&gt;Server&lt;/code&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;net#net_server_close_callback&quot;&gt; &lt;code&gt;server.close()&lt;/code&gt; &lt;/a&gt;ときにメソッドが呼び出された &lt;code&gt;net.Server&lt;/code&gt; が実行されていませんでした。これは、HTTP、HTTPS、およびHTTP / 2 &lt;code&gt;Server&lt;/code&gt; インスタンスを含む &lt;code&gt;net.Server&lt;/code&gt; のすべてのインスタンスに適用されます。</target>
        </trans-unit>
        <trans-unit id="915652e40670b66703d29e0c38256d973f8431d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_connections&quot;&gt;&lt;code&gt;Server.connections&lt;/code&gt;&lt;/a&gt; property is deprecated. Please use the &lt;a href=&quot;net#net_server_getconnections_callback&quot;&gt;&lt;code&gt;Server.getConnections()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">&lt;a href=&quot;net#net_server_connections&quot;&gt; &lt;code&gt;Server.connections&lt;/code&gt; &lt;/a&gt;プロパティが廃止されました。代わりに、&lt;a href=&quot;net#net_server_getconnections_callback&quot;&gt; &lt;code&gt;Server.getConnections()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="6f265d2883e4f676e4cd3c41d8c488642a4b375b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_listen&quot;&gt;&lt;code&gt;server.listen()&lt;/code&gt;&lt;/a&gt; method was called while a &lt;code&gt;net.Server&lt;/code&gt; was already listening. This applies to all instances of &lt;code&gt;net.Server&lt;/code&gt;, including HTTP, HTTPS, and HTTP/2 &lt;code&gt;Server&lt;/code&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;net#net_server_listen&quot;&gt; &lt;code&gt;server.listen()&lt;/code&gt; &lt;/a&gt;状態でメソッドを呼び出した &lt;code&gt;net.Server&lt;/code&gt; はすでに聞いていました。これは、HTTP、HTTPS、およびHTTP / 2 &lt;code&gt;Server&lt;/code&gt; インスタンスを含む &lt;code&gt;net.Server&lt;/code&gt; のすべてのインスタンスに適用されます。</target>
        </trans-unit>
        <trans-unit id="253d6a8397e34f584d1c9745f688c4be697f41d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perf_hooks&quot;&gt;Performance Observer&lt;/a&gt; API can be used to collect basic performance metrics for each &lt;code&gt;Http2Session&lt;/code&gt; and &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;perf_hooks&quot;&gt;パフォーマンスオブザーバーの&lt;/a&gt; APIは、それぞれのための基本的なパフォーマンスメトリックを収集するために使用することができ &lt;code&gt;Http2Session&lt;/code&gt; と &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスを。</target>
        </trans-unit>
        <trans-unit id="59c7a2c5551f71a682899eef7cf74848de899dae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Writable&lt;/code&gt; streams are never closed until the Node.js process exits, regardless of the specified options.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Writable&lt;/code&gt; ストリームは、指定されたオプションに関係なく、Node.jsのプロセスが終了するまで閉じされることはありません。</target>
        </trans-unit>
        <trans-unit id="3151c4db34282a1b8e07fe931c2f1458a047f718" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; may be redirected by the parent thread.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; は&lt;/a&gt;親スレッドによってリダイレクトすることができます。</target>
        </trans-unit>
        <trans-unit id="a0fc212c8a2ea41febc29bc21f4ef2413d4927ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;punycode&quot;&gt;&lt;code&gt;punycode&lt;/code&gt;&lt;/a&gt; module is deprecated. Please use a userland alternative instead.</source>
          <target state="translated">&lt;a href=&quot;punycode&quot;&gt; &lt;code&gt;punycode&lt;/code&gt; &lt;/a&gt;モジュールが推奨されていません。代わりにユーザーランドの代替を使用してください。</target>
        </trans-unit>
        <trans-unit id="6431daf4d0142dfe7df617e9d6645252b47e70c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; methods each return objects that represent the scheduled timers. These can be used to cancel the timer and prevent it from triggering.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;、と&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;メソッドスケジュールタイマーを表す各リターンオブジェクト。これらを使用して、タイマーをキャンセルし、トリガーされないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="f0b1ce5dcc2782ce2b6b05b8c6a481feb1f34cdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_cryptostream&quot;&gt;&lt;code&gt;tls.CryptoStream&lt;/code&gt;&lt;/a&gt; class was removed. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;tls#tls_class_cryptostream&quot;&gt; &lt;code&gt;tls.CryptoStream&lt;/code&gt; の&lt;/a&gt;クラスは削除されました。代わりに&lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="67a4449b6148b1eda8420ac93777441f9f6ce373" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_securepair&quot;&gt;&lt;code&gt;tls.SecurePair&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;tls#tls_class_securepair&quot;&gt; &lt;code&gt;tls.SecurePair&lt;/code&gt; の&lt;/a&gt;クラスが推奨されていません。代わりに&lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="ca41300a47e657b9bac3334f3cc7b04056458915" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tracing&quot;&gt;&lt;code&gt;trace_events&lt;/code&gt;&lt;/a&gt; module is not supported.</source>
          <target state="translated">&lt;a href=&quot;tracing&quot;&gt; &lt;code&gt;trace_events&lt;/code&gt; &lt;/a&gt;モジュールはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="bfb5ba2ace2f4a0028e1da1ece0bf9daee144b06" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;url#url_legacy_url_api&quot;&gt;Legacy URL API&lt;/a&gt; is deprecated. This includes &lt;a href=&quot;url#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;url#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;url#url_url_resolve_from_to&quot;&gt;&lt;code&gt;url.resolve()&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;url#url_legacy_urlobject&quot;&gt;legacy &lt;code&gt;urlObject&lt;/code&gt;&lt;/a&gt;. Please use the &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;url#url_legacy_url_api&quot;&gt;レガシーURL APIが&lt;/a&gt;推奨されていません。これには、&lt;a href=&quot;url#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;url#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;url#url_url_resolve_from_to&quot;&gt; &lt;code&gt;url.resolve()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;url#url_legacy_urlobject&quot;&gt;従来の &lt;code&gt;urlObject&lt;/code&gt; が含まれ&lt;/a&gt;ます。代わりに&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL APIを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d0bb3959cb2b9ede93d359620e31194deb615b69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL parser&lt;/a&gt;'s &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalized_domain_name&quot;&gt;internationalized domain names&lt;/a&gt; (IDNs) support</source>
          <target state="translated">&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URLパーサ&lt;/a&gt;の&lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalized_domain_name&quot;&gt;国際化ドメイン名&lt;/a&gt;（IDNを）サポート</target>
        </trans-unit>
        <trans-unit id="bad9bfd66bb55ba2235dd85e59e1613b40fb48ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_extend_target_source&quot;&gt;&lt;code&gt;util._extend()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_extend_target_source&quot;&gt; &lt;code&gt;util._extend()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="24fb8e08f0115ee31b604e3d9cb707532a7f3d68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isarray_object&quot;&gt;&lt;code&gt;util.isArray()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;code&gt;Array.isArray()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isarray_object&quot;&gt; &lt;code&gt;util.isArray()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。代わりに &lt;code&gt;Array.isArray()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3e357fd30970802fa574d6b5b018c648beb3398d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isboolean_object&quot;&gt;&lt;code&gt;util.isBoolean()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isboolean_object&quot;&gt; &lt;code&gt;util.isBoolean()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="e6acacafcb035b94942a2a97144ad31539c3f91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt;&lt;code&gt;util.isBuffer()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;buffer#buffer_class_method_buffer_isbuffer_obj&quot;&gt;&lt;code&gt;Buffer.isBuffer()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt; &lt;code&gt;util.isBuffer()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。代わりに&lt;a href=&quot;buffer#buffer_class_method_buffer_isbuffer_obj&quot;&gt; &lt;code&gt;Buffer.isBuffer()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="1fadb3df5f078ded7af9eb07eb0540836ed20330" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isdate_object&quot;&gt;&lt;code&gt;util.isDate()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isdate_object&quot;&gt; &lt;code&gt;util.isDate()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="cba186e269ab30db0f4997204ac2665f30745036" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_iserror_object&quot;&gt;&lt;code&gt;util.isError()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_iserror_object&quot;&gt; &lt;code&gt;util.isError()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="3eae527fa2790271252e26061067d5b6be5eba03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isfunction_object&quot;&gt;&lt;code&gt;util.isFunction()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isfunction_object&quot;&gt; &lt;code&gt;util.isFunction()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="a70e6c3de90a6ac2102583f433feed90cb85843a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnull_object&quot;&gt;&lt;code&gt;util.isNull()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isnull_object&quot;&gt; &lt;code&gt;util.isNull()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="26b9c813be7a79f319a8271e4f548a90e22e1c86" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnullorundefined_object&quot;&gt;&lt;code&gt;util.isNullOrUndefined()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isnullorundefined_object&quot;&gt; &lt;code&gt;util.isNullOrUndefined()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="f6505ee51314d52f61c0c4e024960bccd690bc39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnumber_object&quot;&gt;&lt;code&gt;util.isNumber()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isnumber_object&quot;&gt; &lt;code&gt;util.isNumber()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="fc675f14e28a144b49f3304e6cc66846864e1ffb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isobject_object&quot;&gt;&lt;code&gt;util.isObject()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isobject_object&quot;&gt; &lt;code&gt;util.isObject()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="1eea74d5193199e9a450d57d153735b76a2b3466" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isprimitive_object&quot;&gt;&lt;code&gt;util.isPrimitive()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isprimitive_object&quot;&gt; &lt;code&gt;util.isPrimitive()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="85fb68081b5c8745039db57d4cf2885c55d9fb26" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isregexp_object&quot;&gt;&lt;code&gt;util.isRegExp()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isregexp_object&quot;&gt; &lt;code&gt;util.isRegExp()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="3ef6a66e04fa8965d8501d2c259ea2dca7cf679c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isstring_object&quot;&gt;&lt;code&gt;util.isString()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isstring_object&quot;&gt; &lt;code&gt;util.isString()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="6ef8b7b760bc341d4a2aba646dd105a36af4be18" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_issymbol_object&quot;&gt;&lt;code&gt;util.isSymbol()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_issymbol_object&quot;&gt; &lt;code&gt;util.isSymbol()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="bda29f3bc4445a30ae931de9d8ecc252ad7751eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isundefined_object&quot;&gt;&lt;code&gt;util.isUndefined()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isundefined_object&quot;&gt; &lt;code&gt;util.isUndefined()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="1a5825539b9e279df51e00a04c9ffe0d213f05a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_log_string&quot;&gt;&lt;code&gt;util.log()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_log_string&quot;&gt; &lt;code&gt;util.log()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="1ae316081841cbae85e514ff3e35cb1804302a11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;main&quot;&lt;/code&gt; field can point to exactly one file, regardless of whether the package is referenced via &lt;code&gt;require&lt;/code&gt; (in a CommonJS context) or &lt;code&gt;import&lt;/code&gt; (in an ES module context). Package authors who want to publish a package to be used in both contexts can do so by setting &lt;code&gt;&quot;main&quot;&lt;/code&gt; to point to the CommonJS entry point and informing the package&amp;rsquo;s users of the path to the ES module entry point. Such a package would be accessible like &lt;code&gt;require('pkg')&lt;/code&gt; and &lt;code&gt;import 'pkg/module.mjs'&lt;/code&gt;. Alternatively the package &lt;code&gt;&quot;main&quot;&lt;/code&gt; could point to the ES module entry point and legacy users could be informed of the CommonJS entry point path, e.g. &lt;code&gt;require('pkg/commonjs')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;main&quot;&lt;/code&gt; フィールドに関係なくパッケージを介して参照されているか否かを、正確に一つのファイルを指すことができる &lt;code&gt;require&lt;/code&gt; （CommonJSコンテキストで）または &lt;code&gt;import&lt;/code&gt; （ESモジュールコンテキストで）。両方のコンテキストで使用されるパッケージを公開するパッケージ作成者は、 &lt;code&gt;&quot;main&quot;&lt;/code&gt; をCommonJSエントリポイントを指すように設定し、ESモジュールエントリポイントへのパスをパッケージのユーザーに通知することで、これを行うことができます。そのようなパッケージは &lt;code&gt;require('pkg')&lt;/code&gt; や &lt;code&gt;import 'pkg/module.mjs'&lt;/code&gt; のようにアクセスできます。あるいは、パッケージ &lt;code&gt;&quot;main&quot;&lt;/code&gt; がESモジュールのエントリポイントをポイントし、レガシーユーザーにCommonJSエントリポイントパスを通知することもできます。例： &lt;code&gt;require('pkg/commonjs')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61c9ebe3c11e206914190083d08bd0af4fef8102" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%d&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; specifiers now support BigInt.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; のと &lt;code&gt;%i&lt;/code&gt; 指定子は今のBigIntをサポートしています。</target>
        </trans-unit>
        <trans-unit id="7ea800961e1445a983637a3fa0d8d83a67bc4be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%f&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; specifiers now support Symbols properly.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; は、 &lt;code&gt;%f&lt;/code&gt; および &lt;code&gt;%i&lt;/code&gt; 正しく記号をサポートしてい指定子。</target>
        </trans-unit>
        <trans-unit id="24aed4099e7c845ded6fe13351fadb51a5d791de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; and &lt;code&gt;%O&lt;/code&gt; specifiers are supported now.</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; および &lt;code&gt;%O&lt;/code&gt; 指定子がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4e831b601d6d2d5d9f79cd2a24fcde96c59f5781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; specifier's &lt;code&gt;depth&lt;/code&gt; has default depth of 4 again.</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; 指定子の &lt;code&gt;depth&lt;/code&gt; 再び4のデフォルトの深さを有しています。</target>
        </trans-unit>
        <trans-unit id="ea86e9d20de063b4c7fd031b6c0ac213659ff329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; specifier's &lt;code&gt;depth&lt;/code&gt; option will now fall back to the default depth.</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; 指定子の &lt;code&gt;depth&lt;/code&gt; オプションは、デフォルトの深さにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="4d5b0636a67f459e393ebbe414afd5f20c75036c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ERR_UNKNOWN_BUILTIN_MODULE'&lt;/code&gt; error code is used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.</source>
          <target state="translated">&lt;code&gt;'ERR_UNKNOWN_BUILTIN_MODULE'&lt;/code&gt; エラーコードは、典型的には、ユーザコードによってトリガされるべきではない内部のNode.jsエラーの特定の種類を識別するために使用されます。このエラーのインスタンスは、Node.jsバイナリ自体の内部バグを示しています。</target>
        </trans-unit>
        <trans-unit id="11ab7ececfa28aafc4aa19ae6385b7c2b8a0cd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'OCSPRequest'&lt;/code&gt; event is emitted when the client sends a certificate status request. The listener callback is passed three arguments when called:</source>
          <target state="translated">&lt;code&gt;'OCSPRequest'&lt;/code&gt; クライアントが証明書の状態要求を送信したときにイベントが放出されます。リスナーコールバックには、呼び出されたときに3つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="8bfe430c226f0a9e2efdb6fcc488124fa32e49cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'OCSPResponse'&lt;/code&gt; event is emitted if the &lt;code&gt;requestOCSP&lt;/code&gt; option was set when the &lt;code&gt;tls.TLSSocket&lt;/code&gt; was created and an OCSP response has been received. The listener callback is passed a single argument when called:</source>
          <target state="translated">&lt;code&gt;'OCSPResponse'&lt;/code&gt; 場合、イベントが発せられる &lt;code&gt;requestOCSP&lt;/code&gt; の際にオプションが設定された &lt;code&gt;tls.TLSSocket&lt;/code&gt; が作成され、OCSP応答が受信されています。リスナーコールバックには、呼び出されたときに単一の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="d3e25a4d64e0a457f91b49f6a798068c9d2d9beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGCONT'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; supported on Windows.</source>
          <target state="translated">&lt;code&gt;'SIGCONT'&lt;/code&gt; イベントがされて&lt;em&gt;いない&lt;/em&gt; Windows上でサポートされています。</target>
        </trans-unit>
        <trans-unit id="ea03decaaaca5df5498dcceb04679c155e8445b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGCONT'&lt;/code&gt; event is emitted when a Node.js process previously moved into the background using &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; (i.e. &lt;code&gt;SIGTSTP&lt;/code&gt;) is then brought back to the foreground using &lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt;&lt;code&gt;fg(1p)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'SIGCONT'&lt;/code&gt; のNode.jsは、以前使用してバックグラウンドに移動工程と、イベントが発せられる &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; （すなわち &lt;code&gt;SIGTSTP&lt;/code&gt; に）戻し前景用いになる&lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt; &lt;code&gt;fg(1p)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99e824d272e95adde2be812dc78ea63b0e40b3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGINT'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; input, known typically as &lt;code&gt;SIGINT&lt;/code&gt;. If there are no &lt;code&gt;'SIGINT'&lt;/code&gt; event listeners registered when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;SIGINT&lt;/code&gt;, the &lt;code&gt;'pause'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">&lt;code&gt;'SIGINT'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームが受信 &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; として一般的に知られている入力、 &lt;code&gt;SIGINT&lt;/code&gt; を。 &lt;code&gt;input&lt;/code&gt; ストリームが &lt;code&gt;SIGINT&lt;/code&gt; を受け取ったときに &lt;code&gt;'SIGINT'&lt;/code&gt; イベントリスナーが登録されていない場合、 &lt;code&gt;'pause'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="58fa1888e379ec7a6b536027558fb242e1b348f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGTSTP'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; supported on Windows.</source>
          <target state="translated">&lt;code&gt;'SIGTSTP'&lt;/code&gt; イベントがされて&lt;em&gt;いない&lt;/em&gt; Windows上でサポートされています。</target>
        </trans-unit>
        <trans-unit id="a2425fdaa44366773b7902f6c2a4bc3c1298d1db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGTSTP'&lt;/code&gt; event is emitted when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; input, typically known as &lt;code&gt;SIGTSTP&lt;/code&gt;. If there are no &lt;code&gt;'SIGTSTP'&lt;/code&gt; event listeners registered when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;SIGTSTP&lt;/code&gt;, the Node.js process will be sent to the background.</source>
          <target state="translated">&lt;code&gt;'SIGTSTP'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームを受信する &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; 典型的に知られている入力、 &lt;code&gt;SIGTSTP&lt;/code&gt; を。 &lt;code&gt;input&lt;/code&gt; ストリームが &lt;code&gt;SIGTSTP&lt;/code&gt; を受信したときに &lt;code&gt;'SIGTSTP'&lt;/code&gt; イベントリスナーが登録されていない場合、Node.jsプロセスがバックグラウンドに送信されます。</target>
        </trans-unit>
        <trans-unit id="c3d458cf8941bf210e3472a7ed859272579c7bd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2ServerRequest&lt;/code&gt; instance is abnormally aborted in mid-communication.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;Http2ServerRequest&lt;/code&gt; インスタンスが異常通信中に中止されます。</target>
        </trans-unit>
        <trans-unit id="49e33cc3abfe5a6aff3be8850a5c7b241d82bc6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2Stream&lt;/code&gt; instance is abnormally aborted in mid-communication.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが異常通信中に中止されます。</target>
        </trans-unit>
        <trans-unit id="329a98287275acec9b408010e3e11c457f416dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event will only be emitted if the &lt;code&gt;Http2ServerRequest&lt;/code&gt; writable side has not been ended.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; 場合、イベントにのみ放出される &lt;code&gt;Http2ServerRequest&lt;/code&gt; 書き込み可能な側面が終了していません。</target>
        </trans-unit>
        <trans-unit id="16cba63c2e802f270ef416ef55a58c2b5601d3b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event will only be emitted if the &lt;code&gt;Http2Stream&lt;/code&gt; writable side has not been ended.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; 場合、イベントにのみ放出される &lt;code&gt;Http2Stream&lt;/code&gt; 書き込み可能な側面が終了していません。</target>
        </trans-unit>
        <trans-unit id="5881a0fcae4dcd20ddaa53a05727df7900384be1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'altsvc'&lt;/code&gt; event is emitted whenever an &lt;code&gt;ALTSVC&lt;/code&gt; frame is received by the client. The event is emitted with the &lt;code&gt;ALTSVC&lt;/code&gt; value, origin, and stream ID. If no &lt;code&gt;origin&lt;/code&gt; is provided in the &lt;code&gt;ALTSVC&lt;/code&gt; frame, &lt;code&gt;origin&lt;/code&gt; will be an empty string.</source>
          <target state="translated">&lt;code&gt;'altsvc'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;ALTSVC&lt;/code&gt; のフレームがクライアントによって受信されます。イベントは、 &lt;code&gt;ALTSVC&lt;/code&gt; 値、発信元、およびストリームID とともに発行されます。 &lt;code&gt;ALTSVC&lt;/code&gt; フレームで &lt;code&gt;origin&lt;/code&gt; が指定されていない場合、 &lt;code&gt;origin&lt;/code&gt; は空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="431c27fffcc5c3515200d9aa796f1881ad21eaaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; emitted for conditions causing explicit termination, such as calling &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; or uncaught exceptions.</source>
          <target state="translated">&lt;code&gt;'beforeExit'&lt;/code&gt; イベントがさ&lt;em&gt;れない&lt;/em&gt;ような呼び出しとして明示的終結を引き起こす条件、のために放出された&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;またはキャッチされない例外。</target>
        </trans-unit>
        <trans-unit id="49bb5c86196c564b79661579857a5af05a391ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the &lt;code&gt;'beforeExit'&lt;/code&gt; event can make asynchronous calls, and thereby cause the Node.js process to continue.</source>
          <target state="translated">&lt;code&gt;'beforeExit'&lt;/code&gt; のNode.jsは、そのイベントループを空にし、スケジュールに追加の仕事を持っていないときに、イベントが発せられます。通常、スケジュールされた作業がない場合、Node.jsプロセスは終了しますが、 &lt;code&gt;'beforeExit'&lt;/code&gt; イベントに登録されたリスナーは非同期呼び出しを行うことができるため、Node.jsプロセスが続行されます。</target>
        </trans-unit>
        <trans-unit id="aaeeb5f96ebb59c101927056a12ccfc0f7339c45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be used as an alternative to the &lt;code&gt;'exit'&lt;/code&gt; event unless the intention is to schedule additional work.</source>
          <target state="translated">&lt;code&gt;'beforeExit'&lt;/code&gt; すべき&lt;em&gt;ではない&lt;/em&gt;の代替として使用する &lt;code&gt;'exit'&lt;/code&gt; の意図は、追加の作業をスケジュールしない限りイベント。</target>
        </trans-unit>
        <trans-unit id="b146ae0e412e32595d3ffe601ee1b5e9eba7dc42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted after a socket is closed with &lt;a href=&quot;#dgram_socket_close_callback&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. Once triggered, no new &lt;code&gt;'message'&lt;/code&gt; events will be emitted on this socket.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; のソケットを用いて閉じた後、イベントが発せられる&lt;a href=&quot;#dgram_socket_close_callback&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;。トリガーされると、このソケットで新しい &lt;code&gt;'message'&lt;/code&gt; イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="e348d7100af21e4929d2a05d5e7b4db74635a645" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted once either side of the channel has been disconnected.</source>
          <target state="translated">チャネルのどちらかの側が切断されると、 &lt;code&gt;'close'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="6453811996b62b86754fbcde8172369282b1c44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted once the &lt;code&gt;Http2Session&lt;/code&gt; has been destroyed. Its listener does not expect any arguments.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; 一度イベントが放出される &lt;code&gt;Http2Session&lt;/code&gt; が破壊されています。そのリスナーは引数を期待しません。</target>
        </trans-unit>
        <trans-unit id="bdc3f031b1bc01954f0e23bc22110442e0956b49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when one of the following occur:</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; 次のいずれかが発生したときにイベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="c7c841e158dd9c22dac46ce613efd65d9aa7cf19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; is destroyed. Once this event is emitted, the &lt;code&gt;Http2Stream&lt;/code&gt; instance is no longer usable.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; ときイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; が破壊されます。このイベントが発生すると、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="ba41a6efcf176543cb43f3bd282ed0424f69070a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the stdio streams of a child process have been closed. This is distinct from the &lt;a href=&quot;#child_process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event, since multiple processes might share the same stdio streams.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; 子プロセスの標準入出力ストリームを閉じたときにイベントが放出されます。複数のプロセスが同じstdioストリームを共有する可能性があるため、これは&lt;a href=&quot;#child_process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;イベントとは異なります。</target>
        </trans-unit>
        <trans-unit id="70155d5dbfc4d7b6f0fa0f01c52f6e2d104d629f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; イベントが生成されたとき（例えば、ファイルディスクリプタ、）ストリームとその基礎となるリソースのいずれかが閉鎖されています。このイベントは、これ以上イベントが発行されず、それ以上の計算が行われないことを示しています。</target>
        </trans-unit>
        <trans-unit id="908f10fad57d5bf5706478e0ac6d3587a72a3e64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'connect'&lt;/code&gt; event is emitted after a socket is associated to a remote address as a result of a successful &lt;a href=&quot;#dgram_socket_connect_port_address_callback&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; ソケットが成功の結果として、リモートアドレスに関連付けられた後にイベントが放出される&lt;a href=&quot;#dgram_socket_connect_port_address_callback&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;呼び出し。</target>
        </trans-unit>
        <trans-unit id="883d87058dd9ee15031c28136444e2fe9937f941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'connect'&lt;/code&gt; event is emitted once the &lt;code&gt;Http2Session&lt;/code&gt; has been successfully connected to the remote peer and communication may begin.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; 一旦イベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; が正常にリモートピアに接続され、通信を開始することができます。</target>
        </trans-unit>
        <trans-unit id="89b2d33ff189c9e8a7cdd81471945bff2164caa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'data'&lt;/code&gt; event is emitted whenever the stream is relinquishing ownership of a chunk of data to a consumer. This may occur whenever the stream is switched in flowing mode by calling &lt;code&gt;readable.pipe()&lt;/code&gt;, &lt;code&gt;readable.resume()&lt;/code&gt;, or by attaching a listener callback to the &lt;code&gt;'data'&lt;/code&gt; event. The &lt;code&gt;'data'&lt;/code&gt; event will also be emitted whenever the &lt;code&gt;readable.read()&lt;/code&gt; method is called and a chunk of data is available to be returned.</source>
          <target state="translated">&lt;code&gt;'data'&lt;/code&gt; ストリームは、消費者へのデータのチャンクの所有権を放棄されたときにイベントが発せられます。これは、 &lt;code&gt;readable.resume()&lt;/code&gt; 、readable.resume（）を呼び出す &lt;code&gt;readable.pipe()&lt;/code&gt; によって、または &lt;code&gt;'data'&lt;/code&gt; イベントにリスナーコールバックをアタッチすることによって、ストリームがフローモードで切り替えられるたびに発生する可能性があります。 &lt;code&gt;'data'&lt;/code&gt; イベントは、たびに放出される &lt;code&gt;readable.read()&lt;/code&gt; メソッドが呼び出され、データのチャンクが返されるために利用可能です。</target>
        </trans-unit>
        <trans-unit id="f3585a0a88cd8b90d12afe8d08d50e684e44726e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted after calling the &lt;a href=&quot;#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;subprocess.disconnect()&lt;/code&gt;&lt;/a&gt; method in parent process or &lt;a href=&quot;process#process_process_disconnect&quot;&gt;&lt;code&gt;process.disconnect()&lt;/code&gt;&lt;/a&gt; in child process. After disconnecting it is no longer possible to send or receive messages, and the &lt;a href=&quot;#child_process_subprocess_connected&quot;&gt;&lt;code&gt;subprocess.connected&lt;/code&gt;&lt;/a&gt; property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; イベントが呼び出した後に放出される&lt;a href=&quot;#child_process_subprocess_disconnect&quot;&gt; &lt;code&gt;subprocess.disconnect()&lt;/code&gt; &lt;/a&gt;親プロセスまたはにおける方法&lt;a href=&quot;process#process_process_disconnect&quot;&gt; &lt;code&gt;process.disconnect()&lt;/code&gt; &lt;/a&gt;子プロセスでは。切断すると、メッセージの送受信ができなくなり、&lt;a href=&quot;#child_process_subprocess_connected&quot;&gt; &lt;code&gt;subprocess.connected&lt;/code&gt; &lt;/a&gt;プロパティが &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="520fdf29c3a9aae399e9ad386de9244085c3f35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'disconnect'&lt;/code&gt; event will be emitted when there are no messages in the process of being received. This will most often be triggered immediately after calling &lt;code&gt;subprocess.disconnect()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; 受信中のプロセスにメッセージがないときにイベントが放出されます。ほとんどの場合、これは &lt;code&gt;subprocess.disconnect()&lt;/code&gt; を呼び出した直後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="6261bd58ea0cfd3a238560b3c12048c5182bb79f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'end'&lt;/code&gt; event &lt;strong&gt;will not be emitted&lt;/strong&gt; unless the data is completely consumed. This can be accomplished by switching the stream into flowing mode, or by calling &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; repeatedly until all data has been consumed.</source>
          <target state="translated">&lt;code&gt;'end'&lt;/code&gt; イベントが&lt;strong&gt;放出されることはありません&lt;/strong&gt;データが完全に消費されていない限り。これは、ストリームをフローモードに切り替えるか、すべてのデータが消費されるまで&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read()&lt;/code&gt; を&lt;/a&gt;繰り返し呼び出すことで実現できます。</target>
        </trans-unit>
        <trans-unit id="f34ffb418ae39563b461a7f6daafc853f64a2b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'end'&lt;/code&gt; event is emitted when there is no more data to be consumed from the stream.</source>
          <target state="translated">&lt;code&gt;'end'&lt;/code&gt; ストリームから消費すべきより多くのデータが存在しない場合、イベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="d605acf2596ab22046861a707f88f2343acbbdf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted if an error occurred while writing or piping data. The listener callback is passed a single &lt;code&gt;Error&lt;/code&gt; argument when called.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; のデータを書き込むや配管中にエラーが発生した場合、イベントが放出されます。リスナーコールバックは、呼び出されたときに単一の &lt;code&gt;Error&lt;/code&gt; 引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="6a83a8802a571046e766d6e8ee09056733af749e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted if the worker thread throws an uncaught exception. In that case, the worker will be terminated.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; ワーカースレッドがキャッチされない例外をスローした場合イベントが放出されます。その場合、ワーカーは終了します。</target>
        </trans-unit>
        <trans-unit id="d397d55086b73ef66d35bd212162ce2c03c17242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted when an error occurs during the processing of an &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; エラーを処理中に発生した場合にイベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="413e3c65c79844f13c63eb7655c4bf843861f36a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted when an error occurs during the processing of an &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; エラーを処理中に発生した場合にイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d6ac5911dfcf76ad7712a935d4826f69712a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted whenever any error occurs. The event handler function is passed a single &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; エラーが発生するたびにイベントが発せられます。イベントハンドラー関数には、単一の &lt;code&gt;Error&lt;/code&gt; オブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="b649c1dab21ce0af6e720c11d2fadb9d7a9e499b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted whenever:</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; イベントがいつでも放出されます。</target>
        </trans-unit>
        <trans-unit id="2fa272f6420b73087035e5ec70afa54b433648bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event may be emitted by a &lt;code&gt;Readable&lt;/code&gt; implementation at any time. Typically, this may occur if the underlying stream is unable to generate data due to an underlying internal failure, or when a stream implementation attempts to push an invalid chunk of data.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; イベントがによって放出される &lt;code&gt;Readable&lt;/code&gt; いつでも実装。通常、これは、基になる内部エラーが原因で基になるストリームがデータを生成できない場合、またはストリーム実装が無効なデータチャンクをプッシュしようとした場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0ae56452417c810dcf262ae98ea22d57c7405134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted after the child process ends. If the process exited, &lt;code&gt;code&lt;/code&gt; is the final exit code of the process, otherwise &lt;code&gt;null&lt;/code&gt;. If the process terminated due to receipt of a signal, &lt;code&gt;signal&lt;/code&gt; is the string name of the signal, otherwise &lt;code&gt;null&lt;/code&gt;. One of the two will always be non-null.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; イベントは、子プロセスが終了した後に放出されます。プロセスが終了した場合、 &lt;code&gt;code&lt;/code&gt; はプロセスの最後の終了コードです。それ以外の場合は &lt;code&gt;null&lt;/code&gt; です。シグナルの受信が原因でプロセスが終了した場合、 &lt;code&gt;signal&lt;/code&gt; はシグナルの文字列名、それ以外の場合は &lt;code&gt;null&lt;/code&gt; です。2つのうちの1つは常にnull以外になります。</target>
        </trans-unit>
        <trans-unit id="123f48934839bfe2588cb02108ecd112f832ccc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted once the worker has stopped. If the worker exited by calling &lt;a href=&quot;process#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;exitCode&lt;/code&gt; parameter will be the passed exit code. If the worker was terminated, the &lt;code&gt;exitCode&lt;/code&gt; parameter will be &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; 労働者が停止した後にイベントが放出されます。労働者が呼び出すことにより終了した場合は&lt;a href=&quot;process#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;exitCode&lt;/code&gt; パラメータが渡された終了コードになります。ワーカーが終了した場合、 &lt;code&gt;exitCode&lt;/code&gt; パラメータは &lt;code&gt;1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="afee462ecbee216bfce98bfc1bb4dd2bd3b53065" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the Node.js process is about to exit as a result of either:</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; のNode.jsプロセスのいずれかの結果として、終了しようとしているときにイベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="9a6f422bb8de57a4477a93475d1191faaff75e7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the REPL is exited either by receiving the &lt;code&gt;.exit&lt;/code&gt; command as input, the user pressing &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; twice to signal &lt;code&gt;SIGINT&lt;/code&gt;, or by pressing &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to signal &lt;code&gt;'end'&lt;/code&gt; on the input stream. The listener callback is invoked without any arguments.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; REPLを受信することによってのいずれかで終了したときにイベントが発せられる &lt;code&gt;.exit&lt;/code&gt; の入力として押下するコマンドを &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 倍信号に &lt;code&gt;SIGINT&lt;/code&gt; 、または押して &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; 信号を &lt;code&gt;'end'&lt;/code&gt; に入力ストリーム。リスナーコールバックは引数なしで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1f963075b240042211e93f34948383cfbb0b6a1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event may or may not fire after an error has occurred. When listening to both the &lt;code&gt;'exit'&lt;/code&gt; and &lt;code&gt;'error'&lt;/code&gt; events, it is important to guard against accidentally invoking handler functions multiple times.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; エラーが発生した後にイベントが火災ではない場合があります。 &lt;code&gt;'exit'&lt;/code&gt; イベントと &lt;code&gt;'error'&lt;/code&gt; イベントの両方をリッスンするときは、誤ってハンドラー関数を何度も呼び出さないようにすることが重要です。</target>
        </trans-unit>
        <trans-unit id="5c045b95a3f3d67c739999dde8aadc99426902a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after the &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; method has been called, and all data has been flushed to the underlying system.</source>
          <target state="translated">&lt;code&gt;'finish'&lt;/code&gt; イベントが後に放出される&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されており、すべてのデータは、基礎となるシステムにフラッシュされています。</target>
        </trans-unit>
        <trans-unit id="b6a22727c894fadd448a7f390fe47d103feecab5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'frameError'&lt;/code&gt; event is emitted when an error occurs while attempting to send a frame on the session. If the frame that could not be sent is associated with a specific &lt;code&gt;Http2Stream&lt;/code&gt;, an attempt to emit a &lt;code&gt;'frameError'&lt;/code&gt; event on the &lt;code&gt;Http2Stream&lt;/code&gt; is made.</source>
          <target state="translated">&lt;code&gt;'frameError'&lt;/code&gt; セッションでフレームを送信しようとした際にエラーが発生したときにイベントが発せられます。送信できなかったフレームは、特定の関連付けられている場合 &lt;code&gt;Http2Stream&lt;/code&gt; 、放出しようとすると &lt;code&gt;'frameError'&lt;/code&gt; にイベントを &lt;code&gt;Http2Stream&lt;/code&gt; が行われます。</target>
        </trans-unit>
        <trans-unit id="760233dbfe4d62c71e85e5b64f2e79daec0b7d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'frameError'&lt;/code&gt; event is emitted when an error occurs while attempting to send a frame. When invoked, the handler function will receive an integer argument identifying the frame type, and an integer argument identifying the error code. The &lt;code&gt;Http2Stream&lt;/code&gt; instance will be destroyed immediately after the &lt;code&gt;'frameError'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;'frameError'&lt;/code&gt; フレームを送信しようとした際にエラーが発生したときにイベントが発せられます。ハンドラー関数が呼び出されると、フレームタイプを識別する整数引数と、エラーコードを識別する整数引数を受け取ります。 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、直後に破棄されます &lt;code&gt;'frameError'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="bc5d72127b4de031733972dd5c7ac0bf407ee9ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'goaway'&lt;/code&gt; event is emitted when a &lt;code&gt;GOAWAY&lt;/code&gt; frame is received.</source>
          <target state="translated">&lt;code&gt;'goaway'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;GOAWAY&lt;/code&gt; のフレームが受信されます。</target>
        </trans-unit>
        <trans-unit id="06fde462f19c33854aa53df976784a61259a9435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'headers'&lt;/code&gt; event is emitted when an additional block of headers is received for a stream, such as when a block of &lt;code&gt;1xx&lt;/code&gt; informational headers is received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'headers'&lt;/code&gt; ヘッダの追加のブロックは、ブロックの場合のように、ストリームの受信されたときにイベントが発せられる &lt;code&gt;1xx&lt;/code&gt; 情報ヘッダが受信されます。リスナーコールバックには、&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;とヘッダーに関連付けられたフラグが渡されます。</target>
        </trans-unit>
        <trans-unit id="79520eba2a068a4c7e9f8acddb2d688f2b3c92e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'iso-8859-16'&lt;/code&gt; encoding listed in the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt; is not supported.</source>
          <target state="translated">&lt;code&gt;'iso-8859-16'&lt;/code&gt; に記載されている符号化&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWGエンコーディング規格は&lt;/a&gt;サポートされていません。</target>
        </trans-unit>
        <trans-unit id="a7281f72a178bef00207240f8d3d065f64e94f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'line'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream receives an end-of-line input (&lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, or &lt;code&gt;\r\n&lt;/code&gt;). This usually occurs when the user presses the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; keys.</source>
          <target state="translated">&lt;code&gt;'line'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームがエンド・オブ・ライン入力（受信 &lt;code&gt;\n&lt;/code&gt; 、 &lt;code&gt;\r&lt;/code&gt; 、または &lt;code&gt;\r\n&lt;/code&gt; ）。これは通常、ユーザーが &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; キーを押したときに発生します。</target>
        </trans-unit>
        <trans-unit id="d1dd53c8b8c5a418dd3a58ccaf51adcf802a8dca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'listening'&lt;/code&gt; event is emitted whenever a socket begins listening for datagram messages. This occurs as soon as UDP sockets are created.</source>
          <target state="translated">&lt;code&gt;'listening'&lt;/code&gt; ソケットがデータグラム・メッセージのリスニングを開始したときにイベントが放出されます。これは、UDPソケットが作成されるとすぐに発生します。</target>
        </trans-unit>
        <trans-unit id="cbdbadeefb4cce49c686eaa4d3978db3435a7c97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted when an acknowledgment &lt;code&gt;SETTINGS&lt;/code&gt; frame has been received.</source>
          <target state="translated">&lt;code&gt;'localSettings'&lt;/code&gt; 肯定応答と、イベントが発せられる &lt;code&gt;SETTINGS&lt;/code&gt; のフレームが受信されています。</target>
        </trans-unit>
        <trans-unit id="f5ca50004941181eea8f74d0fc68816de2de7201" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted for any incoming message, containing the cloned input of &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; イベントはのクローン化された入力を含む、任意の着信メッセージのために放出される&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;port.postMessage()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81b3bdbadfae1e3264119b629189aba2112399d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted when a new datagram is available on a socket. The event handler function is passed two arguments: &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;rinfo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; イベントは、新しいデータグラムソケットで提供されていたときに放出されます。イベントハンドラー関数には、 &lt;code&gt;msg&lt;/code&gt; と &lt;code&gt;rinfo&lt;/code&gt; の 2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="3d138cd76d2b496029c2982956fead778e703deb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted when the worker thread has invoked &lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt;&lt;code&gt;require('worker_threads').parentPort.postMessage()&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;#worker_threads_event_message&quot;&gt;&lt;code&gt;port.on('message')&lt;/code&gt;&lt;/a&gt; event for more details.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; ワーカースレッドが呼び出されたときにイベントが発せられる&lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt; &lt;code&gt;require('worker_threads').parentPort.postMessage()&lt;/code&gt; &lt;/a&gt;。詳細については、&lt;a href=&quot;#worker_threads_event_message&quot;&gt; &lt;code&gt;port.on('message')&lt;/code&gt; &lt;/a&gt;イベントを参照してください。</target>
        </trans-unit>
        <trans-unit id="82ba8dd138e86b900fa9975500671c42d475acfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is triggered when a child process uses &lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;process.send()&lt;/code&gt;&lt;/a&gt; to send messages.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; 子プロセスが使用すると、イベントがトリガされます&lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;process.send()&lt;/code&gt; &lt;/a&gt;メッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="974ad0e64fe6296b3b090d56a32c0565a97e1803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'multipleResolves'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; has been either:</source>
          <target state="translated">&lt;code&gt;'multipleResolves'&lt;/code&gt; いつでもイベントが放出される &lt;code&gt;Promise&lt;/code&gt; どちらかされています：</target>
        </trans-unit>
        <trans-unit id="a80b6d5de14633d665d01a9e2512f0b611fd2f7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'newSession'&lt;/code&gt; event is emitted upon creation of a new TLS session. This may be used to store sessions in external storage. The data should be provided to the &lt;a href=&quot;#tls_event_resumesession&quot;&gt;&lt;code&gt;'resumeSession'&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">&lt;code&gt;'newSession'&lt;/code&gt; イベントは、新たなTLSセッションの作成時に放出されます。これを使用して、セッションを外部ストレージに保存できます。データは&lt;a href=&quot;#tls_event_resumesession&quot;&gt; &lt;code&gt;'resumeSession'&lt;/code&gt; &lt;/a&gt;コールバックに提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0fee03b9371081a1b7ac033a2811eb25d701512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'online'&lt;/code&gt; event is emitted when the worker thread has started executing JavaScript code.</source>
          <target state="translated">&lt;code&gt;'online'&lt;/code&gt; ワーカースレッドがJavaScriptコードの実行を開始したときにイベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="61b0a905df713569973ce617c63dea32723865a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'origin'&lt;/code&gt; event is emitted whenever an &lt;code&gt;ORIGIN&lt;/code&gt; frame is received by the client. The event is emitted with an array of &lt;code&gt;origin&lt;/code&gt; strings. The &lt;code&gt;http2session.originSet&lt;/code&gt; will be updated to include the received origins.</source>
          <target state="translated">&lt;code&gt;'origin'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;ORIGIN&lt;/code&gt; のフレームがクライアントによって受信されます。イベントは、 &lt;code&gt;origin&lt;/code&gt; 文字列の配列で発行されます。 &lt;code&gt;http2session.originSet&lt;/code&gt; は受信起源を含むように更新されます。</target>
        </trans-unit>
        <trans-unit id="f65018cab56b4ae93ba24fd445ffd1c49d1f068d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'origin'&lt;/code&gt; event is only emitted when using a secure TLS connection.</source>
          <target state="translated">&lt;code&gt;'origin'&lt;/code&gt; 安全なTLS接続を使用すると、イベントにのみ放出されます。</target>
        </trans-unit>
        <trans-unit id="ba81bca8b322e658babfec33ee6b3baa6c478b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; and &lt;code&gt;'SIGCONT'&lt;/code&gt; events will not be emitted if the &lt;code&gt;input&lt;/code&gt; was paused before the process was sent to the background.</source>
          <target state="translated">&lt;code&gt;'pause'&lt;/code&gt; と &lt;code&gt;'SIGCONT'&lt;/code&gt; 場合にイベントが放出されない &lt;code&gt;input&lt;/code&gt; 処理はバックグラウンドに送信される前に一時停止されました。</target>
        </trans-unit>
        <trans-unit id="a637b3ce402e4c17d1a124eacd504ebc99f3eb16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; event is emitted when &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; is called and &lt;code&gt;readableFlowing&lt;/code&gt; is not &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'pause'&lt;/code&gt; したときにイベントが発せられる&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; が&lt;/a&gt;呼び出され、 &lt;code&gt;readableFlowing&lt;/code&gt; がない &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4e5586adc19c1a578afc50547341cbae3ad8c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; event is emitted when one of the following occur:</source>
          <target state="translated">&lt;code&gt;'pause'&lt;/code&gt; 次のいずれかが発生したときにイベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="048ea341b0571ea4393ad72e671351d7d6053bdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ping'&lt;/code&gt; event is emitted whenever a &lt;code&gt;PING&lt;/code&gt; frame is received from the connected peer.</source>
          <target state="translated">&lt;code&gt;'ping'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;PING&lt;/code&gt; のフレームが接続ピアから受信されます。</target>
        </trans-unit>
        <trans-unit id="0b5d77dd469f50b5abf03bcacf58c2b55cf6c3b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pipe'&lt;/code&gt; event is emitted when the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method is called on a readable stream, adding this writable to its set of destinations.</source>
          <target state="translated">&lt;code&gt;'pipe'&lt;/code&gt; と、イベントが発せられる&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;メソッドが、目的地のセットには、この書き込み可能を追加、読み取り可能なストリームで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="743cd45272e3e81930c50026e225cdc079b474a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'push'&lt;/code&gt; event is emitted when response headers for a Server Push stream are received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'push'&lt;/code&gt; サーバープッシュストリームの応答ヘッダーが受信されたときにイベントが発せられます。リスナーコールバックには、&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;とヘッダーに関連付けられたフラグが渡されます。</target>
        </trans-unit>
        <trans-unit id="c590ad720763b332369a839ca3aeb58adbd53461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; event is emitted when there is data available to be read from the stream. In some cases, attaching a listener for the &lt;code&gt;'readable'&lt;/code&gt; event will cause some amount of data to be read into an internal buffer.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; ストリームから読み込むことが可能なデータがあるときにイベントが放出されます。場合によっては、 &lt;code&gt;'readable'&lt;/code&gt; イベントのリスナーをアタッチすると、ある程度のデータが内部バッファーに読み込まれます。</target>
        </trans-unit>
        <trans-unit id="3f321790d8533ee1575d152841b2014bbb9a9e1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; event will also be emitted once the end of the stream data has been reached but before the &lt;code&gt;'end'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; ストリームデータの終わりに達した後、しかし前に、イベントにも放出される &lt;code&gt;'end'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="6a33c06469b5000b45fd1ff75e2103ea23711d04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; is always emitted in the next tick after &lt;code&gt;.push()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; 常に後に次のダニに放出される &lt;code&gt;.push()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="331814408ad22b9e15f1f826850a2f2b6d57b17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'rejectionHandled'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; has been rejected and an error handler was attached to it (using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;promise.catch()&lt;/code&gt;&lt;/a&gt;, for example) later than one turn of the Node.js event loop.</source>
          <target state="translated">&lt;code&gt;'rejectionHandled'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;Promise&lt;/code&gt; 拒否され、エラーハンドラが（使用してそれに取り付けられた&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;promise.catch()&lt;/code&gt; &lt;/a&gt; Node.jsのイベントループの一の回転よりも遅いなど）。</target>
        </trans-unit>
        <trans-unit id="cdffe035f7f5e8eeb5025bc5fb803a0ce34a6ec9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'remoteSettings'&lt;/code&gt; event is emitted when a new &lt;code&gt;SETTINGS&lt;/code&gt; frame is received from the connected peer.</source>
          <target state="translated">&lt;code&gt;'remoteSettings'&lt;/code&gt; 新たなときにイベントが発せられる &lt;code&gt;SETTINGS&lt;/code&gt; のフレームが接続されたピアから受信されます。</target>
        </trans-unit>
        <trans-unit id="e7bab2cbef5a8084fcc62f25ae893aa63ee29422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'removeListener'&lt;/code&gt; event is emitted &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;listener&lt;/code&gt; is removed.</source>
          <target state="translated">&lt;code&gt;'removeListener'&lt;/code&gt; イベントが放出され&lt;em&gt;た後、&lt;/em&gt; &lt;code&gt;listener&lt;/code&gt; 削除されます。</target>
        </trans-unit>
        <trans-unit id="2f15eb3db706956bc4a77474ff2fa5c7906f8192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'request'&lt;/code&gt; event works identically on both &lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt; and HTTP/2.</source>
          <target state="translated">&lt;code&gt;'request'&lt;/code&gt; イベントは、両方に同じように動作&lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt;とHTTP / 2。</target>
        </trans-unit>
        <trans-unit id="67038f9420ce56b7d4d983221318c5c2eea5002d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'reset'&lt;/code&gt; event is emitted when the REPL's context is reset. This occurs whenever the &lt;code&gt;.clear&lt;/code&gt; command is received as input &lt;em&gt;unless&lt;/em&gt; the REPL is using the default evaluator and the &lt;code&gt;repl.REPLServer&lt;/code&gt; instance was created with the &lt;code&gt;useGlobal&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. The listener callback will be called with a reference to the &lt;code&gt;context&lt;/code&gt; object as the only argument.</source>
          <target state="translated">&lt;code&gt;'reset'&lt;/code&gt; REPLのコンテキストがリセットされたときにイベントが発せられます。これは、REPLがデフォルトのエバリュエーターを使用していて、 &lt;code&gt;useGlobal&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定して &lt;code&gt;repl.REPLServer&lt;/code&gt; インスタンスが作成されてい&lt;em&gt;ない限り&lt;/em&gt;、 &lt;code&gt;.clear&lt;/code&gt; コマンドが入力として受信されるたびに発生します。リスナーコールバックは、 &lt;code&gt;context&lt;/code&gt; オブジェクトへの参照を唯一の引数として呼び出されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="20a4a05f2093abc18166b110dcd5b70ad9f00eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resize'&lt;/code&gt; event is emitted whenever either of the &lt;code&gt;writeStream.columns&lt;/code&gt; or &lt;code&gt;writeStream.rows&lt;/code&gt; properties have changed. No arguments are passed to the listener callback when called.</source>
          <target state="translated">&lt;code&gt;'resize'&lt;/code&gt; のいずれかのたびにイベントが発せられる &lt;code&gt;writeStream.columns&lt;/code&gt; 又は &lt;code&gt;writeStream.rows&lt;/code&gt; 特性が変更されています。呼び出された場合、引数はリスナーコールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="f8dd7100f65e5be48fd853e4911e57e22c4b6451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'response'&lt;/code&gt; event is emitted when a response &lt;code&gt;HEADERS&lt;/code&gt; frame has been received for this stream from the connected HTTP/2 server. The listener is invoked with two arguments: an &lt;code&gt;Object&lt;/code&gt; containing the received &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt;, and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'response'&lt;/code&gt; の応答と、イベントが発せられる &lt;code&gt;HEADERS&lt;/code&gt; フレームは、接続されたHTTP / 2サーバから、このストリームについて受信されています。：リスナーは2つの引数を指定して呼び出された &lt;code&gt;Object&lt;/code&gt; 受信含む&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;、およびヘッダに関連付けられたフラグ。</target>
        </trans-unit>
        <trans-unit id="54582df4bb78540744ceeaff58f63d87fc95c5ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resume'&lt;/code&gt; event is emitted when &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; is called and &lt;code&gt;readableFlowing&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'resume'&lt;/code&gt; ときイベントが発せられる&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; が&lt;/a&gt;呼び出され、 &lt;code&gt;readableFlowing&lt;/code&gt; はない &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c6dd9b71ac7098f6ea0b70c58c682488ceb44d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resume'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream is resumed.</source>
          <target state="translated">&lt;code&gt;'resume'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームが再開されます。</target>
        </trans-unit>
        <trans-unit id="bef01c7015ad884d3d793c89e4e856737e7f0a19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resumeSession'&lt;/code&gt; event is emitted when the client requests to resume a previous TLS session. The listener callback is passed two arguments when called:</source>
          <target state="translated">&lt;code&gt;'resumeSession'&lt;/code&gt; クライアントの要求が前のTLSセッションを再開したときにイベントが放出されます。リスナーコールバックには、呼び出されたときに2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="2cc0eb4e717982dea937c4e766c505133e21862f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secure'&lt;/code&gt; event is emitted by the &lt;code&gt;SecurePair&lt;/code&gt; object once a secure connection has been established.</source>
          <target state="translated">&lt;code&gt;'secure'&lt;/code&gt; イベントがによって放出される &lt;code&gt;SecurePair&lt;/code&gt; の安全な接続が確立されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="2341e93879ce8f12981105ab49853749cc7e0163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secureConnect'&lt;/code&gt; event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server's certificate has been authorized. It is the client's responsibility to check the &lt;code&gt;tlsSocket.authorized&lt;/code&gt; property to determine if the server certificate was signed by one of the specified CAs. If &lt;code&gt;tlsSocket.authorized === false&lt;/code&gt;, then the error can be found by examining the &lt;code&gt;tlsSocket.authorizationError&lt;/code&gt; property. If ALPN was used, the &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; property can be checked to determine the negotiated protocol.</source>
          <target state="translated">&lt;code&gt;'secureConnect'&lt;/code&gt; 新しい接続のためのハンドシェイクプロセスが正常に完了した後にイベントが放出されます。リスナーコールバックは、サーバーの証明書が承認されているかどうかに関係なく呼び出されます。 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; プロパティをチェックして、サーバー証明書が指定されたいずれかのCAによって署名されているかどうかを判断するのは、クライアントの責任です。 &lt;code&gt;tlsSocket.authorized === false&lt;/code&gt; 場合、 &lt;code&gt;tlsSocket.authorizationError&lt;/code&gt; プロパティを調べることでエラーを見つけることができます。 ALPNが使用された場合、 &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; プロパティをチェックして、ネゴシエートされたプロトコルを判別できます。</target>
        </trans-unit>
        <trans-unit id="4cdfa01e16e883f668e8dcde46ecb8537a05aa84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secureConnection'&lt;/code&gt; event is emitted after the handshaking process for a new connection has successfully completed. The listener callback is passed a single argument when called:</source>
          <target state="translated">&lt;code&gt;'secureConnection'&lt;/code&gt; 新しい接続のためのハンドシェイクプロセスが正常に完了した後にイベントが放出されます。リスナーコールバックには、呼び出されたときに単一の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="2c12fc6f19cad46e27778cdbde243418fc2aa32f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted on a client &lt;code&gt;tls.TLSSocket&lt;/code&gt; when a new session or TLS ticket is available. This may or may not be before the handshake is complete, depending on the TLS protocol version that was negotiated. The event is not emitted on the server, or if a new session was not created, for example, when the connection was resumed. For some TLS protocol versions the event may be emitted multiple times, in which case all the sessions can be used for resumption.</source>
          <target state="translated">&lt;code&gt;'session'&lt;/code&gt; イベントは、クライアント上で放出される &lt;code&gt;tls.TLSSocket&lt;/code&gt; 新しいセッションまたはTLSチケットが利用可能になったとき。これは、ネゴシエートされたTLSプロトコルのバージョンに応じて、ハンドシェイクが完了する前である場合とそうでない場合があります。イベントはサーバーで発行されません。または、接続が再開されたときなど、新しいセッションが作成されなかった場合。一部のTLSプロトコルバージョンでは、イベントが複数回発行される場合があります。その場合、すべてのセッションを再開に使用できます。</target>
        </trans-unit>
        <trans-unit id="d5381be7496a12105803cfef7e039de8630e7cd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Session&lt;/code&gt; is created by the &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'session'&lt;/code&gt; 新しいときにイベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; がによって作成され &lt;code&gt;Http2SecureServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e1eaf0ed898b0fca1a226411fff348f74b7ff52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Session&lt;/code&gt; is created by the &lt;code&gt;Http2Server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'session'&lt;/code&gt; 新しいときにイベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; がによって作成され &lt;code&gt;Http2Server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="238f72829ecaec928f578a773e5441d6c4659596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'sessionError'&lt;/code&gt; event is emitted when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;code&gt;Http2Session&lt;/code&gt; object associated with the &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'sessionError'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;'error'&lt;/code&gt; イベントによって放出される &lt;code&gt;Http2Session&lt;/code&gt; の関連付けられたオブジェクト &lt;code&gt;Http2SecureServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14cd694c9317db24ce6afc17f5aca349dd385bfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'sessionError'&lt;/code&gt; event is emitted when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;code&gt;Http2Session&lt;/code&gt; object associated with the &lt;code&gt;Http2Server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'sessionError'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;'error'&lt;/code&gt; イベントによって放出される &lt;code&gt;Http2Session&lt;/code&gt; の関連付けられたオブジェクト &lt;code&gt;Http2Server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51ea0e301e0ed929a3b9724d7a5f4ae527be5562" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'stream'&lt;/code&gt; event is emitted when a &lt;code&gt;'stream'&lt;/code&gt; event has been emitted by an &lt;code&gt;Http2Session&lt;/code&gt; associated with the server.</source>
          <target state="translated">&lt;code&gt;'stream'&lt;/code&gt; と、イベントが発せられる &lt;code&gt;'stream'&lt;/code&gt; イベントにより放出された &lt;code&gt;Http2Session&lt;/code&gt; サーバに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="65e49bda1180537406c13d55823d09a48f6f4669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'stream'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Stream&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;'stream'&lt;/code&gt; 新しいときにイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; が作成されます。</target>
        </trans-unit>
        <trans-unit id="09e6820161ddb001a04c2443f06c7b6df3cbae18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted after no activity is received for this &lt;code&gt;Http2Stream&lt;/code&gt; within the number of milliseconds set using &lt;code&gt;http2stream.setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; アクティビティは、このために受信されなかった後にイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; ミリ秒数以内に使用して設定 &lt;code&gt;http2stream.setTimeout()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fe5fc81abcb2aae6b9dc8f2243d24b1d7188c7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2secureServer.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 2 minutes.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; を使用して設定のミリ秒の所定の数のサーバ上のアクティビティがないときにイベントが発せられる &lt;code&gt;http2secureServer.setTimeout()&lt;/code&gt; 。&lt;strong&gt;デフォルト：&lt;/strong&gt; 2分。</target>
        </trans-unit>
        <trans-unit id="108936544aea63f28d9a60ebe957d6a7f1889efd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; を使用して設定のミリ秒の所定の数のサーバ上のアクティビティがないときにイベントが発せられる &lt;code&gt;http2server.setTimeout()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39ed4884868474d1d719d77f6fcff51e968f3d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 2 minutes.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; を使用して設定のミリ秒の所定の数のサーバ上のアクティビティがないときにイベントが発せられる &lt;code&gt;http2server.setTimeout()&lt;/code&gt; 。&lt;strong&gt;デフォルト：&lt;/strong&gt; 2分。</target>
        </trans-unit>
        <trans-unit id="6fb78b74b7bacfc18783789bfee8f7f7e26fbb38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'tlsClientError'&lt;/code&gt; event is emitted when an error occurs before a secure connection is established. The listener callback is passed two arguments when called:</source>
          <target state="translated">&lt;code&gt;'tlsClientError'&lt;/code&gt; 安全な接続が確立される前にエラーが発生したときにイベントが発せられます。リスナーコールバックには、呼び出されたときに2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="4fe8033442d93b36467a9592e5b48ab0e305d9e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'trailers'&lt;/code&gt; event is emitted when a block of headers associated with trailing header fields is received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'trailers'&lt;/code&gt; 後続ヘッダフィールドに関連付けられたヘッダブロックを受信したときにイベントが発せられます。リスナーコールバックには、&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;とヘッダーに関連付けられたフラグが渡されます。</target>
        </trans-unit>
        <trans-unit id="23673d04eae7b0bc5661bdbcf6403ecf29c7b20d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted when an uncaught JavaScript exception bubbles all the way back to the event loop. By default, Node.js handles such exceptions by printing the stack trace to &lt;code&gt;stderr&lt;/code&gt; and exiting with code 1, overriding any previously set &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt;. Adding a handler for the &lt;code&gt;'uncaughtException'&lt;/code&gt; event overrides this default behavior. Alternatively, change the &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;'uncaughtException'&lt;/code&gt; handler which will result in the process exiting with the provided exit code. Otherwise, in the presence of such handler the process will exit with 0.</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; キャッチされないJavaScript例外がイベントループまでずっとバックバブル時にイベントが放出されます。デフォルトでは、Node.jsは、スタックトレースを &lt;code&gt;stderr&lt;/code&gt; に出力し、コード1で終了することにより、このような例外を処理します。以前に設定された&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; を&lt;/a&gt;オーバーライドします。 &lt;code&gt;'uncaughtException'&lt;/code&gt; イベントのハンドラーを追加すると、このデフォルトの動作がオーバーライドされます。または、提供された終了コードでプロセスが終了する &lt;code&gt;'uncaughtException'&lt;/code&gt; ハンドラーの&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;を変更します。そうでない場合、そのようなハンドラーが存在すると、プロセスは0で終了します。</target>
        </trans-unit>
        <trans-unit id="093aa13b2c97a6032857fa6ea423e7921815103a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtException'&lt;/code&gt; event is from now on triggered if the repl is used as standalone program.</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; REPLをスタンドアロンプログラムとして使用されている場合、イベントがトリガーになりましたからです。</target>
        </trans-unit>
        <trans-unit id="9a07847bc26be18865a3248444066bcc64a6386e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; is rejected and no error handler is attached to the promise within a turn of the event loop. When programming with Promises, exceptions are encapsulated as &quot;rejected promises&quot;. Rejections can be caught and handled using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;promise.catch()&lt;/code&gt;&lt;/a&gt; and are propagated through a &lt;code&gt;Promise&lt;/code&gt; chain. The &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is useful for detecting and keeping track of promises that were rejected whose rejections have not yet been handled.</source>
          <target state="translated">&lt;code&gt;'unhandledRejection'&lt;/code&gt; いつでもイベントが放出される &lt;code&gt;Promise&lt;/code&gt; 拒否され、エラー・ハンドラは、イベントループのターン内の約束に添付されていません。Promiseでプログラミングする場合、例外は「拒否されたPromise」としてカプセル化されます。拒否は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;promise.catch()&lt;/code&gt; &lt;/a&gt;を使用してキャッチおよび処理でき、 &lt;code&gt;Promise&lt;/code&gt; チェーンを通じて伝播されます。 &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが検出し、その拒否、まだ処理されていない拒否された約束を追跡するために有用です。</target>
        </trans-unit>
        <trans-unit id="5e17ef7fa41c6032423aa7e11ccf9b80fe4dd1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unknownProtocol'&lt;/code&gt; event is emitted when a connecting client fails to negotiate an allowed protocol (i.e. HTTP/2 or HTTP/1.1). The event handler receives the socket for handling. If no listener is registered for this event, the connection is terminated. See the &lt;a href=&quot;#http2_compatibility_api&quot;&gt;Compatibility API&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'unknownProtocol'&lt;/code&gt; イベントは、接続クライアントが許可されたプロトコル（すなわちHTTP / 2またはHTTP / 1.1）を交渉するために失敗したときに放出されます。イベントハンドラーは、処理するソケットを受け取ります。このイベントにリスナーが登録されていない場合、接続は終了します。&lt;a href=&quot;#http2_compatibility_api&quot;&gt;互換性APIを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9bc1afb0dc467971e7c8c541f29dc0ce77428191" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unpipe'&lt;/code&gt; event is emitted when the &lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt;&lt;code&gt;stream.unpipe()&lt;/code&gt;&lt;/a&gt; method is called on a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream, removing this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; from its set of destinations.</source>
          <target state="translated">&lt;code&gt;'unpipe'&lt;/code&gt; ときにイベントが発せられる&lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt; &lt;code&gt;stream.unpipe()&lt;/code&gt; &lt;/a&gt;メソッドは、上で呼び出された&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;この除去、ストリーム&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;目的地のセットから。</target>
        </trans-unit>
        <trans-unit id="9ad68df74b203249636785fbbb8f31130efe9650" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; has queued the final &lt;code&gt;DATA&lt;/code&gt; frame to be sent on a frame and the &lt;code&gt;Http2Stream&lt;/code&gt; is ready to send trailing headers. When initiating a request or response, the &lt;code&gt;waitForTrailers&lt;/code&gt; option must be set for this event to be emitted.</source>
          <target state="translated">&lt;code&gt;'wantTrailers'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; が最終キューに入れられた &lt;code&gt;DATA&lt;/code&gt; フレームに送信されるフレームと &lt;code&gt;Http2Stream&lt;/code&gt; は後続ヘッダを送信する準備ができています。要求または応答を開始するとき、このイベントを &lt;code&gt;waitForTrailers&lt;/code&gt; するには、waitForTrailersオプションを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f77fe3ae22d5c805b787b388eccf38ff6d236031" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'warning'&lt;/code&gt; event is emitted whenever Node.js emits a process warning.</source>
          <target state="translated">Node.jsがプロセス警告を発行するたびに、 &lt;code&gt;'warning'&lt;/code&gt; イベントが発行されます。</target>
        </trans-unit>
        <trans-unit id="9e9f48e2643df52ffddfef6f3c88d585dc1364b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*-deprecation&lt;/code&gt; command line flags only affect warnings that use the name &lt;code&gt;'DeprecationWarning'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*-deprecation&lt;/code&gt; コマンドラインフラグは名前のみ使用警告影響を及ぼす &lt;code&gt;'DeprecationWarning'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38d4545050dbc2c8a080a726ad5533c98d06ab51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--entry-type=...&lt;/code&gt; flag is not compatible with the Node.js REPL.</source>
          <target state="translated">&lt;code&gt;--entry-type=...&lt;/code&gt; フラグのNode.js REPLと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="c4cc81479fbee805579102393c38c6cc511dd6a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--entry-type=commonjs&lt;/code&gt; flag was used to attempt to execute an &lt;code&gt;.mjs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file where the nearest parent &lt;code&gt;package.json&lt;/code&gt; contains &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt;; or the &lt;code&gt;--entry-type=module&lt;/code&gt; flag was used to attempt to execute a &lt;code&gt;.cjs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file where the nearest parent &lt;code&gt;package.json&lt;/code&gt; either lacks a &lt;code&gt;&quot;type&quot;&lt;/code&gt; field or contains &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--entry-type=commonjs&lt;/code&gt; フラグは、実行しようとするために使用された &lt;code&gt;.mjs&lt;/code&gt; ファイルまたは &lt;code&gt;.js&lt;/code&gt; の最も近い親ファイル &lt;code&gt;package.json&lt;/code&gt; が含まれ &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 。または &lt;code&gt;--entry-type=module&lt;/code&gt; フラグが実行しようとするために使用された &lt;code&gt;.cjs&lt;/code&gt; ファイルまたは &lt;code&gt;.js&lt;/code&gt; の最も近い親ファイル &lt;code&gt;package.json&lt;/code&gt; が欠けているいずれかの &lt;code&gt;&quot;type&quot;&lt;/code&gt; フィールドを含んでいるか、 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a26e5cbc4d1f28001634ae58ba9f86157fc53853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--es-module-specifier-resolution=[mode]&lt;/code&gt; flag can be used to customize the extension resolution algorithm. The default mode is &lt;code&gt;explicit&lt;/code&gt;, which requires the full path to a module be provided to the loader. To enable the automatic extension resolution and importing from directories that include an index file use the &lt;code&gt;node&lt;/code&gt; mode.</source>
          <target state="translated">&lt;code&gt;--es-module-specifier-resolution=[mode]&lt;/code&gt; フラグは、拡張解像度アルゴリズムをカスタマイズするために使用することができます。デフォルトのモードは &lt;code&gt;explicit&lt;/code&gt; で、ローダーへのモジュールへのフルパスを提供する必要があります。自動拡張解決を有効にし、インデックスファイルを含むディレクトリからインポートするには、 &lt;code&gt;node&lt;/code&gt; モードを使用します。</target>
        </trans-unit>
        <trans-unit id="7d96684c5374525fe5f2896a118c35d100dd9f80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-modules&lt;/code&gt; flag can be used to enable support for ECMAScript modules (ES modules).</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; フラグのECMAScriptモジュール（ESモジュール）のサポートを可能にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ee3284f640f748accb037052d5de9540a6b3c2c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-policy&lt;/code&gt; flag can be used to enable features for policies when loading modules.</source>
          <target state="translated">&lt;code&gt;--experimental-policy&lt;/code&gt; フラグは、モジュールをロードするときにポリシーの機能を有効にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="45f8d4be1b16580af36211eb2184e713f2cb9f2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--input-type&lt;/code&gt; flag was used to attempt to execute a file. This flag can only be used with input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt; or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--input-type&lt;/code&gt; フラグは、ファイルを実行しようとするために使用されました。このフラグは、 &lt;code&gt;--print&lt;/code&gt; &lt;code&gt;--eval&lt;/code&gt; 、-- print、または &lt;code&gt;STDIN&lt;/code&gt; による入力でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="48ee988f6a0b4b3cc241bf5e59e36e5337844ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; command line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.</source>
          <target state="translated">&lt;code&gt;--preserve-symlinks&lt;/code&gt; ラインフラグがシンボリックリンクピアの依存関係を見つけることができるように、実際の経路とは対照的のNode.jsは、モジュールのシンボリックリンクパスを使用するように指示するコマンド。</target>
        </trans-unit>
        <trans-unit id="dd2428085953e3e18c912f639e577dc736a3e57d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; flag does not apply to the main module, which allows &lt;code&gt;node --preserve-symlinks node_module/.bin/&amp;lt;foo&amp;gt;&lt;/code&gt; to work. To apply the same behavior for the main module, also use &lt;code&gt;--preserve-symlinks-main&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--preserve-symlinks&lt;/code&gt; フラグができ、メインモジュールには適用されない &lt;code&gt;node --preserve-symlinks node_module/.bin/&amp;lt;foo&amp;gt;&lt;/code&gt; 仕事に。同じ動作をメインモジュールに適用するには、 &lt;code&gt;--preserve-symlinks-main&lt;/code&gt; も使用します。</target>
        </trans-unit>
        <trans-unit id="60f5204e6156c13b879f75bc2bdeb77cd740b764" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--require&lt;/code&gt; option is now supported when checking a file.</source>
          <target state="translated">&lt;code&gt;--require&lt;/code&gt; ファイルをチェックする際にオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="03afc2a2819725a665ff93384497c5a6dd67974e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag and &lt;code&gt;process.throwDeprecation&lt;/code&gt; property take precedence over &lt;code&gt;--trace-deprecation&lt;/code&gt; and &lt;code&gt;process.traceDeprecation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--throw-deprecation&lt;/code&gt; コマンドラインフラグと &lt;code&gt;process.throwDeprecation&lt;/code&gt; 以上の財産が優先 &lt;code&gt;--trace-deprecation&lt;/code&gt; と &lt;code&gt;process.traceDeprecation&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7748e47658d28f465e0f702908443bffd47e5677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace-warnings&lt;/code&gt; command-line option can be used to have the default console output for warnings include the full stack trace of the warning.</source>
          <target state="translated">&lt;code&gt;--trace-warnings&lt;/code&gt; 警告は警告の完全なスタックトレースを含めるためのコマンドラインオプションは、デフォルトのコンソール出力を持つように使用することができます。</target>
        </trans-unit>
        <trans-unit id="910fc4fb3a34a12cbb451f186082373ce6a56fd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--with-lttng&lt;/code&gt; compile-time option has been removed.</source>
          <target state="translated">&lt;code&gt;--with-lttng&lt;/code&gt; コンパイル時のオプションが削除されました。</target>
        </trans-unit>
        <trans-unit id="49ec27d09eca7302b82dba6c21ef5b6de51165b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command line option</source>
          <target state="translated">&lt;code&gt;--zero-fill-buffers&lt;/code&gt; コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="d44bdf199493a6f91f2c55bd7a0d4dafee53ad3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are not considered equal anymore.</source>
          <target state="translated">&lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; はもはや等しいと見なされていません。</target>
        </trans-unit>
        <trans-unit id="64c98a5e7ac18374fc6663c8752491fc56a08fa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; extensions may be used to mix types within the same package scope:</source>
          <target state="translated">&lt;code&gt;.mjs&lt;/code&gt; と &lt;code&gt;.cjs&lt;/code&gt; の拡張機能は、同じパッケージの範囲内で型を混合するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d9f9c6fe1bda6cb495fc50c09400d829c18834be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:method&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; pseudo-headers are not specified within &lt;code&gt;headers&lt;/code&gt;, they respectively default to:</source>
          <target state="translated">&lt;code&gt;:method&lt;/code&gt; と &lt;code&gt;:path&lt;/code&gt; 疑似ヘッダは内で指定されていない &lt;code&gt;headers&lt;/code&gt; 、それらはそれぞれにデフォルト：</target>
        </trans-unit>
        <trans-unit id="0fbdd10cf14e123063f1ad68f662b994e5b14f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:status&lt;/code&gt; header is converted to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:status&lt;/code&gt; ヘッダに変換される &lt;code&gt;number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19b2b078e03ca61c0c3a2ac02bbf791223c851cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ALPNProtocols&lt;/code&gt; option can be a &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;ALPNProtocols&lt;/code&gt; のオプションが可能 &lt;code&gt;TypedArray&lt;/code&gt; または &lt;code&gt;DataView&lt;/code&gt; の今。</target>
        </trans-unit>
        <trans-unit id="03c0a26d735adb90e83ae84b4b23b480f2bb6077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncHook&lt;/code&gt; instance is disabled by default. If the &lt;code&gt;AsyncHook&lt;/code&gt; instance should be enabled immediately after creation, the following pattern can be used.</source>
          <target state="translated">&lt;code&gt;AsyncHook&lt;/code&gt; のインスタンスは、デフォルトでは無効になっています。 &lt;code&gt;AsyncHook&lt;/code&gt; インスタンスを作成直後に有効にする必要がある場合は、次のパターンを使用できます。</target>
        </trans-unit>
        <trans-unit id="92482e3afbb86a30bca701deea5ef5e1aa3b1852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer()&lt;/code&gt; function and &lt;code&gt;new Buffer()&lt;/code&gt; constructor are deprecated due to API usability issues that can lead to accidental security issues.</source>
          <target state="translated">&lt;code&gt;Buffer()&lt;/code&gt; 関数と &lt;code&gt;new Buffer()&lt;/code&gt; コンストラクタは、偶発的なセキュリティ上の問題につながる可能APIのユーザビリティの問題が原因推奨されていません。</target>
        </trans-unit>
        <trans-unit id="17975c7ac6c9252a591d0f88b25f283db9f71165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer.from()&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from&quot;&gt;&lt;code&gt;TypedArray.from()&lt;/code&gt;&lt;/a&gt; have different signatures and implementations. Specifically, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; variants accept a second argument that is a mapping function that is invoked on every element of the typed array:</source>
          <target state="translated">&lt;code&gt;Buffer.from()&lt;/code&gt; と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from&quot;&gt; &lt;code&gt;TypedArray.from()&lt;/code&gt; は、&lt;/a&gt;異なるシグネチャと実装を持っています。具体的には、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;バリアントは、型付き配列のすべての要素で呼び出されるマッピング関数である2番目の引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="e3314f82d53657bb32c8b0bf63f070d1a392cb08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer.from()&lt;/code&gt; method, however, does not support the use of a mapping function:</source>
          <target state="translated">&lt;code&gt;Buffer.from()&lt;/code&gt; メソッドは、しかし、マッピング関数の使用をサポートしません。</target>
        </trans-unit>
        <trans-unit id="3d48187fc23c783eaffae70401964e0da90c39c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; クラスは、直接バイナリデータを扱うための世界的なタイプです。さまざまな方法で構築できます。</target>
        </trans-unit>
        <trans-unit id="585f3b86fff89664ab6131088e4c31921218b060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is within the global scope, making it unlikely that one would need to ever use &lt;code&gt;require('buffer').Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; クラスには、それはそう1が今まで使用する必要があるだろうとなって、世界的な範囲内である &lt;code&gt;require('buffer').Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="684e7abad764687ae152e1366f4fcfb15875aae7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; module pre-allocates an internal &lt;code&gt;Buffer&lt;/code&gt; instance of size &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; that is used as a pool for the fast allocation of new &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;code&gt;new Buffer(size)&lt;/code&gt; constructor only when &lt;code&gt;size&lt;/code&gt; is less than or equal to &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; (floor of &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; divided by two).</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 内部モジュール事前割り当て &lt;code&gt;Buffer&lt;/code&gt; サイズのインスタンス&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt;新規の迅速な割り当てのためのプールとして使用される &lt;code&gt;Buffer&lt;/code&gt; のインスタンスが使用して作成した&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;と廃止予定 &lt;code&gt;new Buffer(size)&lt;/code&gt; のみコンストラクタ &lt;code&gt;size&lt;/code&gt; 小さいですか等しい &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; （の床&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; を&lt;/a&gt; 2で割りました）。</target>
        </trans-unit>
        <trans-unit id="c34c1579f9d3091d1c40fe60dbec8ff7528291ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; object's memory is copied to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, not shared.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; オブジェクトのメモリがにコピーされ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;共有されません。</target>
        </trans-unit>
        <trans-unit id="704b960d42ce6ee4bea2be6057aa3c3ef4d88b3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; object's memory is interpreted as an array of distinct elements, and not as a byte array of the target type. That is, &lt;code&gt;new Uint32Array(Buffer.from([1, 2, 3, 4]))&lt;/code&gt; creates a 4-element &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt; with elements &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;, not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt; with a single element &lt;code&gt;[0x1020304]&lt;/code&gt; or &lt;code&gt;[0x4030201]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; オブジェクトのメモリは、別個の要素の配列としてではなく、ターゲット・タイプのバイト配列として解釈されます。すなわち、 &lt;code&gt;new Uint32Array(Buffer.from([1, 2, 3, 4]))&lt;/code&gt; 4要素作成&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; &lt;/a&gt;要素を有する &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt; ではなく&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; を&lt;/a&gt;単一の要素で &lt;code&gt;[0x1020304]&lt;/code&gt; または &lt;code&gt;[0x4030201]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11eb58ed11164726ce6d21f520f0f89a5b64939a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt;s class now inherits from &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; のクラスは今から継承 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cf8ace03d30403e070d9de4de22190c4288a09e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CONNECT&lt;/code&gt; method is used to allow an HTTP/2 server to be used as a proxy for TCP/IP connections.</source>
          <target state="translated">&lt;code&gt;CONNECT&lt;/code&gt; の方法は、HTTP / 2サーバは、TCP / IP接続のためのプロキシとして使用されることを可能にするために使用されます。</target>
        </trans-unit>
        <trans-unit id="961a4f20e145645fc8ffca7ac16191a131fc024d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ClientHttp2Stream&lt;/code&gt; class is an extension of &lt;code&gt;Http2Stream&lt;/code&gt; that is used exclusively on HTTP/2 Clients. &lt;code&gt;Http2Stream&lt;/code&gt; instances on the client provide events such as &lt;code&gt;'response'&lt;/code&gt; and &lt;code&gt;'push'&lt;/code&gt; that are only relevant on the client.</source>
          <target state="translated">&lt;code&gt;ClientHttp2Stream&lt;/code&gt; のクラスはの拡張である &lt;code&gt;Http2Stream&lt;/code&gt; HTTP / 2クライアントでのみ使用されます。クライアントの &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、 &lt;code&gt;'response'&lt;/code&gt; や &lt;code&gt;'push'&lt;/code&gt; など、クライアントにのみ関連するイベントを提供します。</target>
        </trans-unit>
        <trans-unit id="237dfac99ceb30113262b74862ab7b982fdd765f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Console&lt;/code&gt; class can be used to create a simple logger with configurable output streams and can be accessed using either &lt;code&gt;require('console').Console&lt;/code&gt; or &lt;code&gt;console.Console&lt;/code&gt; (or their destructured counterparts):</source>
          <target state="translated">&lt;code&gt;Console&lt;/code&gt; クラスは、構成可能な出力ストリームを持つ単純なロガーを作成するために使用することができ、いずれかを使用してアクセスすることができる &lt;code&gt;require('console').Console&lt;/code&gt; または &lt;code&gt;console.Console&lt;/code&gt; （またはそれらの非構造対応）。</target>
        </trans-unit>
        <trans-unit id="b3479b91f4a9f06b22b5fca034870dcb3c3d2180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Console&lt;/code&gt; constructor now supports an &lt;code&gt;options&lt;/code&gt; argument, and the &lt;code&gt;colorMode&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;Console&lt;/code&gt; コンストラクタがサポートするようになりまし &lt;code&gt;options&lt;/code&gt; 引数を、そして &lt;code&gt;colorMode&lt;/code&gt; オプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="95647c259880f4c6867e28a035da609cf9f22a98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CryptoStream.prototype.readyState&lt;/code&gt; property was removed.</source>
          <target state="translated">&lt;code&gt;CryptoStream.prototype.readyState&lt;/code&gt; プロパティが削除されました。</target>
        </trans-unit>
        <trans-unit id="9e1415e933cffef1a94867e2ba597a959a2e5d9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiffieHellman&lt;/code&gt; class is a utility for creating Diffie-Hellman key exchanges.</source>
          <target state="translated">&lt;code&gt;DiffieHellman&lt;/code&gt; クラスはてDiffieHellmanの鍵交換を作成するためのユーティリティです。</target>
        </trans-unit>
        <trans-unit id="9548581b93240d640677667523fd0ee94db7798f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiffieHellmanGroup&lt;/code&gt; class takes a well-known modp group as its argument but otherwise works the same as &lt;code&gt;DiffieHellman&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DiffieHellmanGroup&lt;/code&gt; のクラスは引数としてよく知られているMODPグループを取りますが、それ以外と同じように動作し &lt;code&gt;DiffieHellman&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cec2a1fa9c52fe93d5184901be8bdb624d2dbeb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Domain&lt;/code&gt; class encapsulates the functionality of routing errors and uncaught exceptions to the active &lt;code&gt;Domain&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; クラスがアクティブにエラーとキャッチされない例外をルーティングする機能をカプセル化 &lt;code&gt;Domain&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5c6c84190a5e08be666ab662c685f538c6bff7f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ECDH&lt;/code&gt; class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH) key exchanges.</source>
          <target state="translated">&lt;code&gt;ECDH&lt;/code&gt; のクラスは、楕円曲線ディフィ-ヘルマン（ECDH）鍵交換を作成するためのユーティリティです。</target>
        </trans-unit>
        <trans-unit id="a60e7d3da510710daa286f535baa3630ec9f2729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; property specifies the number of stack frames collected by a stack trace (whether generated by &lt;code&gt;new Error().stack&lt;/code&gt; or &lt;code&gt;Error.captureStackTrace(obj)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Error.stackTraceLimit&lt;/code&gt; のプロパティには、スタックトレース（によって生成されたかどうかによって収集されたスタックフレームの数を指定する &lt;code&gt;new Error().stack&lt;/code&gt; または &lt;code&gt;Error.captureStackTrace(obj)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5591cd885f1b8837637fc0c070419a2cc4315071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error&lt;/code&gt; names and messages are now properly compared</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 名とメッセージが正しく比較され、</target>
        </trans-unit>
        <trans-unit id="74c3defd6a5b6deb5cd891de560ee91dc83a92e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; calls all listeners synchronously in the order in which they were registered. This is important to ensure the proper sequencing of events and to avoid race conditions or logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the &lt;code&gt;setImmediate()&lt;/code&gt; or &lt;code&gt;process.nextTick()&lt;/code&gt; methods:</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; それらが登録された順に同期すべてのリスナーを呼び出します。これは、イベントの適切なシーケンスを確保し、競合状態や論理エラーを回避するために重要です。リスナー関数は、必要に応じて、 &lt;code&gt;setImmediate()&lt;/code&gt; &lt;code&gt;process.nextTick()&lt;/code&gt; メソッドまたはprocess.nextTick（）メソッドを使用して、操作の非同期モードに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="510d148ff0fbe98acf30ab9a2081857d2a93f0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; class is defined and exposed by the &lt;code&gt;events&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; クラスは以下のように定義し、公開された &lt;code&gt;events&lt;/code&gt; モジュール：</target>
        </trans-unit>
        <trans-unit id="f6e23e7067c0e5dbaa40a250b4e464457e7b388e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; instance will emit its own &lt;code&gt;'newListener'&lt;/code&gt; event &lt;em&gt;before&lt;/em&gt; a listener is added to its internal array of listeners.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; インスタンスは、それ自身の発する &lt;code&gt;'newListener'&lt;/code&gt; イベント&lt;em&gt;の前に&lt;/em&gt;リスナーがリスナーの内部配列に追加されます。</target>
        </trans-unit>
        <trans-unit id="dfeb1c49ebfaf5bf934d6b81d566edb3d8c7c526" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; has to support reading.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 読み取りをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="0012f3238be8c04c425f3363b4025fdc1063a019" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; has to support writing.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 書き込みをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="0c94a51970f81440252550d4c9273fb0d1f4f92b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; must have been opened for appending.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 追加用に開かれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="11154ab149b6892234ea37a705b7295182b7ed53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GLOBAL&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; aliases for the &lt;code&gt;global&lt;/code&gt; property are deprecated and should no longer be used.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; プロパティの &lt;code&gt;GLOBAL&lt;/code&gt; エイリアスと &lt;code&gt;root&lt;/code&gt; エイリアスは非推奨であり、今後は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="0e9e7f936801f2c6f1cd03b0afd04159b01fbe53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; class is a utility for creating hash digests of data. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; クラスは、データのハッシュダイジェストを作成するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="5b0e3b2329da4f0248f2e06ac742acc1bb19364e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; object can not be used again after &lt;code&gt;hash.digest()&lt;/code&gt; method has been called. Multiple calls will cause an error to be thrown.</source>
          <target state="translated">&lt;code&gt;hash.digest()&lt;/code&gt; メソッドが呼び出された後は、 &lt;code&gt;Hash&lt;/code&gt; オブジェクトを再び使用することはできません。複数の呼び出しを行うと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="4d73cdb3a8800f6f58788222cf6b09a4e16e9704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hmac&lt;/code&gt; class is a utility for creating cryptographic HMAC digests. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Hmac&lt;/code&gt; クラスは、暗号HMACダイジェストを作成するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="34a6f3c385334289cc8dca5ad57af1aa934cc351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hmac&lt;/code&gt; object can not be used again after &lt;code&gt;hmac.digest()&lt;/code&gt; has been called. Multiple calls to &lt;code&gt;hmac.digest()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;hmac.digest()&lt;/code&gt; が呼び出された後は、 &lt;code&gt;Hmac&lt;/code&gt; オブジェクトを再び使用することはできません。 &lt;code&gt;hmac.digest()&lt;/code&gt; を複数回呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="fdd188407a46759b1ee1c35887ef9c7a825bdfd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; closed with a non-zero error code.</source>
          <target state="translated">&lt;code&gt;Http2Session&lt;/code&gt; は非ゼロのエラーコードで閉じ。</target>
        </trans-unit>
        <trans-unit id="5d76c8b39de5b7fc902fab8ede861ae4cc2fc88c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; instance will be shut down automatically when the &lt;code&gt;'goaway'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;'goaway'&lt;/code&gt; イベントが発行されると、 &lt;code&gt;Http2Session&lt;/code&gt; インスタンスは自動的にシャットダウンされます。</target>
        </trans-unit>
        <trans-unit id="d7caf622fab7b5caf40c57aeb0f0bd26ae301dc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; settings canceled.</source>
          <target state="translated">&lt;code&gt;Http2Session&lt;/code&gt; の設定がキャンセルされました。</target>
        </trans-unit>
        <trans-unit id="51e143abb35647df3e2b943997a955c876171f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Stream&lt;/code&gt; class is a base for the &lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt;&lt;code&gt;ServerHttp2Stream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt;&lt;code&gt;ClientHttp2Stream&lt;/code&gt;&lt;/a&gt; classes, each of which is used specifically by either the Server or Client side, respectively.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; クラスはのベースで&lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt; &lt;code&gt;ServerHttp2Stream&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt; &lt;code&gt;ClientHttp2Stream&lt;/code&gt; &lt;/a&gt;それぞれ、具体的にサーバまたはクライアント側のいずれかで使用されそれぞれがクラス。</target>
        </trans-unit>
        <trans-unit id="598e51e3af2bb4e6222164b78922892e71acb6ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MTU&lt;/code&gt; is the largest size a given link layer technology can support for datagram messages. For any link, &lt;code&gt;IPv4&lt;/code&gt; mandates a minimum &lt;code&gt;MTU&lt;/code&gt; of &lt;code&gt;68&lt;/code&gt; octets, while the recommended &lt;code&gt;MTU&lt;/code&gt; for IPv4 is &lt;code&gt;576&lt;/code&gt; (typically recommended as the &lt;code&gt;MTU&lt;/code&gt; for dial-up type applications), whether they arrive whole or in fragments.</source>
          <target state="translated">&lt;code&gt;MTU&lt;/code&gt; は、与えられたリンクレイヤ技術は、データグラム・メッセージのためにサポートできる最大サイズです。どのリンクでも、 &lt;code&gt;IPv4&lt;/code&gt; は &lt;code&gt;68&lt;/code&gt; オクテットの最小 &lt;code&gt;MTU&lt;/code&gt; を要求しますが、IPv4 の推奨 &lt;code&gt;MTU&lt;/code&gt; は、全体またはフラグメントで到着するかどうかにかかわらず、 &lt;code&gt;576&lt;/code&gt; （通常、ダイヤルアップタイプアプリケーションの &lt;code&gt;MTU&lt;/code&gt; として推奨）です。</target>
        </trans-unit>
        <trans-unit id="3d73d38a7b4edc972c4eca60995c75fac0b6f4da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module._debug()&lt;/code&gt; function was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;Module._debug()&lt;/code&gt; 関数は、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="3902051e46408eac3f37f5cbedc575dbfa43f481" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="91d8733f70a3ed59c4e362014169d60d93f70694" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; object representing the entry script loaded when the Node.js process launched. See &lt;a href=&quot;#modules_accessing_the_main_module&quot;&gt;&quot;Accessing the main module&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; Node.jsのプロセスが起動時にエントリスクリプトを表すオブジェクトがロードされました。&lt;a href=&quot;#modules_accessing_the_main_module&quot;&gt;「メインモジュールへのアクセス」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f548961702fbdaa669c57caf04ec1584e86af9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NODE_REPL_HISTORY_FILE&lt;/code&gt; environment variable was removed. Please use &lt;code&gt;NODE_REPL_HISTORY&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;NODE_REPL_HISTORY_FILE&lt;/code&gt; の環境変数を除去しました。代わりに &lt;code&gt;NODE_REPL_HISTORY&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="07a5ed6c3b03bfe0f86b3d27a6b9e92fabe92726" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NODE_REPL_MODE&lt;/code&gt; environment variable is used to set the underlying &lt;code&gt;replMode&lt;/code&gt; of an interactive &lt;code&gt;node&lt;/code&gt; session. Its value, &lt;code&gt;magic&lt;/code&gt;, is also removed. Please use &lt;code&gt;sloppy&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;NODE_REPL_MODE&lt;/code&gt; の環境変数は、基礎となる設定するために使用される &lt;code&gt;replMode&lt;/code&gt; 対話の &lt;code&gt;node&lt;/code&gt; セッション。その値 &lt;code&gt;magic&lt;/code&gt; も削除されます。代わりに &lt;code&gt;sloppy&lt;/code&gt; 使用をしてください。</target>
        </trans-unit>
        <trans-unit id="4f57d31fa24c9ab8fa6b54112c6d279905574a10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NaN&lt;/code&gt; is now compared using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevaluezero&quot;&gt;SameValueZero&lt;/a&gt; comparison.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; は今使用して比較され&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevaluezero&quot;&gt;SameValueZeroの&lt;/a&gt;比較を。</target>
        </trans-unit>
        <trans-unit id="f25d757bb0437c0808e30a2c56e76be0fefee1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; and &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; properties were never documented as officially supported properties.</source>
          <target state="translated">&lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; と &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; プロパティが正式にサポートされているプロパティとして文書化されませんでした。</target>
        </trans-unit>
        <trans-unit id="25fe5fbbbdb21df3c56b73ffd31d112176c4a754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype._renderHeaders&lt;/code&gt; property was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;OutgoingMessage.prototype._renderHeaders&lt;/code&gt; プロパティは、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="85be1dae89516e838a638d632c276365895d2cca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype.flush()&lt;/code&gt; method is deprecated. Use &lt;code&gt;OutgoingMessage.prototype.flushHeaders()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;OutgoingMessage.prototype.flush()&lt;/code&gt; メソッドは推奨されています。代わりに &lt;code&gt;OutgoingMessage.prototype.flushHeaders()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7583c7bd3ce3415e55d127bad13f53b600328ee0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Payload Length&lt;/code&gt; field is &lt;code&gt;16 bits&lt;/code&gt; wide, which means that a normal payload exceed 64K octets &lt;em&gt;including&lt;/em&gt; the internet header and data (65,507 bytes = 65,535 &amp;minus; 8 bytes UDP header &amp;minus; 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.</source>
          <target state="translated">&lt;code&gt;Payload Length&lt;/code&gt; フィールドは、 &lt;code&gt;16 bits&lt;/code&gt; ノーマルペイロードは64Kオクテット上回ることを意味する広い、&lt;em&gt;を含む&lt;/em&gt;インターネットヘッダとデータを（65507バイト= 65,535 - 8バイトのUDPヘッダー- 20バイトのIPヘッダ）; これは一般にループバックインターフェイスに当てはまりますが、このような長いデータグラムメッセージは、ほとんどのホストおよびネットワークにとって非現実的です。</target>
        </trans-unit>
        <trans-unit id="11322df6e8f3a45b7544ddbfd8fe2899ff90b6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; class is used to provide access to the &lt;code&gt;PerformanceEntry&lt;/code&gt; instances passed to a &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; のクラスはへのアクセスを提供するために使用される &lt;code&gt;PerformanceEntry&lt;/code&gt; のに渡されたインスタンス &lt;code&gt;PerformanceObserver&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c2150c40d137a3a78d9e3de9caaadd190bb01b4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is not necessarily fulfilled or rejected at this point if the &lt;code&gt;Promise&lt;/code&gt; was resolved by assuming the state of another &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 必ずしも満たされた場合、または、この時点で拒否されていない &lt;code&gt;Promise&lt;/code&gt; 別の状態と仮定することによって解決された &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f10ae6e72704999927267fee59194a33c04c7c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing a reference to the &lt;code&gt;buffer&lt;/code&gt; written.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 含むオブジェクトで解決さ &lt;code&gt;bytesWritten&lt;/code&gt; 書き込まれたバイト数、および特定のプロパティ &lt;code&gt;buffer&lt;/code&gt; への参照を含むプロパティ &lt;code&gt;buffer&lt;/code&gt; 書き込まれています。</target>
        </trans-unit>
        <trans-unit id="c3eb603b33fa227474bbe36e7372860ecd829661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing a reference to the &lt;code&gt;string&lt;/code&gt; written.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 含むオブジェクトで解決さ &lt;code&gt;bytesWritten&lt;/code&gt; 書き込まれたバイト数、および特定のプロパティ &lt;code&gt;buffer&lt;/code&gt; への参照を含むプロパティ &lt;code&gt;string&lt;/code&gt; 書き込まを。</target>
        </trans-unit>
        <trans-unit id="825a385ef4de609d746584469c7c195733f4d069" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffers&lt;/code&gt; property containing a reference to the &lt;code&gt;buffers&lt;/code&gt; input.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 含むオブジェクトで解決さ &lt;code&gt;bytesWritten&lt;/code&gt; 書き込まれたバイト数、および特定のプロパティ &lt;code&gt;buffers&lt;/code&gt; への参照を含むプロパティ &lt;code&gt;buffers&lt;/code&gt; 入力。</target>
        </trans-unit>
        <trans-unit id="7ad21b404605628659537719b01daa3fa49e3b78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object for the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; して解決した&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;与えられたのオブジェクト &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b34c55f6af90344499f9227fbf0f7703ad16276b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with the contents of the file. If no encoding is specified (using &lt;code&gt;options.encoding&lt;/code&gt;), the data is returned as a &lt;code&gt;Buffer&lt;/code&gt; object. Otherwise, the data will be a string.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; ファイルの内容で解決されます。（ &lt;code&gt;options.encoding&lt;/code&gt; を使用して）エンコーディングが指定されていない場合、データは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして返されます。それ以外の場合、データは文字列になります。</target>
        </trans-unit>
        <trans-unit id="d92a386de646198c7629bbf0e8bcfcbbee8353a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; object would have previously been emitted in an &lt;code&gt;'unhandledRejection'&lt;/code&gt; event, but during the course of processing gained a rejection handler.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; オブジェクトは、以前に放出されていたであろう &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが、獲得拒否ハンドラの処理の過程。</target>
        </trans-unit>
        <trans-unit id="95b84d2eeaef21bd512e6f651c98a85d0c11f349" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPLServer.bufferedCommand&lt;/code&gt; property was deprecated in favor of &lt;a href=&quot;repl#repl_replserver_clearbufferedcommand&quot;&gt;&lt;code&gt;REPLServer.clearBufferedCommand()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;REPLServer.bufferedCommand&lt;/code&gt; のプロパティはの賛成で廃止されました&lt;a href=&quot;repl#repl_replserver_clearbufferedcommand&quot;&gt; &lt;code&gt;REPLServer.clearBufferedCommand()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7deb4358683108a00dc65d360c2e1eea2ad2e71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPLServer.prototype.convertToContext()&lt;/code&gt; API has been removed.</source>
          <target state="translated">&lt;code&gt;REPLServer.prototype.convertToContext()&lt;/code&gt; APIは削除されました。</target>
        </trans-unit>
        <trans-unit id="8ec680d58ff39833b259e02131642979355b3954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPL_MAGIC_MODE&lt;/code&gt;&lt;code&gt;replMode&lt;/code&gt; was removed.</source>
          <target state="translated">&lt;code&gt;REPL_MAGIC_MODE&lt;/code&gt; &lt;code&gt;replMode&lt;/code&gt; は削除されました。</target>
        </trans-unit>
        <trans-unit id="35cb8009f6996f2fb52a4b2bab6a52d304d25322" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; can switch back to paused mode using one of the following:</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 、次のいずれかを使用して一時停止モードに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="d455be01e46d6bff48f7600c93471266c9edc7cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose &lt;em&gt;one&lt;/em&gt; of the methods of consuming data and &lt;em&gt;should never&lt;/em&gt; use multiple methods to consume data from a single stream. Specifically, using a combination of &lt;code&gt;on('data')&lt;/code&gt;, &lt;code&gt;on('readable')&lt;/code&gt;, &lt;code&gt;pipe()&lt;/code&gt;, or async iterators could lead to unintuitive behavior.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; ストリームAPIは、複数のNode.jsのバージョン間で進化したストリームデータを消費する複数の方法を提供します。一般に、開発者はデータを消費する方法の&lt;em&gt;1つ&lt;/em&gt;を選択する必要があり、単一のストリームからのデータを消費するために複数の方法を使用し&lt;em&gt;ない&lt;/em&gt;で&lt;em&gt;ください&lt;/em&gt;。具体的には、 &lt;code&gt;on('data')&lt;/code&gt; 、 &lt;code&gt;on('readable')&lt;/code&gt; 、 &lt;code&gt;pipe()&lt;/code&gt; 、または非同期反復子の組み合わせを使用すると、直感的でない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="dc6ef70e5e44b5c5fd7cbeb40c7b98befd8c1d32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; stream will properly handle multi-byte characters delivered through the stream that would otherwise become improperly decoded if simply pulled from the stream as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; ストリームが正しく、単にストリームから引き出された場合にはそうでない場合は、不適切に復号なるストリームを介して配信マルチバイト文字処理する &lt;code&gt;Buffer&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="ba77f1dd7afa6162e4c23e525d9abfc526ccbe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Server.listenFD()&lt;/code&gt; method was deprecated and removed. Please use &lt;a href=&quot;net#net_server_listen_handle_backlog_callback&quot;&gt;&lt;code&gt;Server.listen({fd: &amp;lt;number&amp;gt;})&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;Server.listenFD()&lt;/code&gt; メソッドは廃止して除去しました。代わりに&lt;a href=&quot;net#net_server_listen_handle_backlog_callback&quot;&gt; &lt;code&gt;Server.listen({fd: &amp;lt;number&amp;gt;})&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="e5bbee4c5ac3953d02808c1af81a251e062b54bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerHttp2Stream&lt;/code&gt; class is an extension of &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; that is used exclusively on HTTP/2 Servers. &lt;code&gt;Http2Stream&lt;/code&gt; instances on the server provide additional methods such as &lt;code&gt;http2stream.pushStream()&lt;/code&gt; and &lt;code&gt;http2stream.respond()&lt;/code&gt; that are only relevant on the server.</source>
          <target state="translated">&lt;code&gt;ServerHttp2Stream&lt;/code&gt; のクラスはの拡張である&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt; HTTP / 2サーバー上でのみ使用されます。サーバー上の &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、サーバー上でのみ関連する &lt;code&gt;http2stream.pushStream()&lt;/code&gt; や &lt;code&gt;http2stream.respond()&lt;/code&gt; などの追加メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="260f5173c9b0e346f6c8e494ec720490f9e8f18d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; method was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; メソッドは、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="d6322d71cca5de7fd95668cd54c4afd6280dda05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; content is also compared</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; や &lt;code&gt;Map&lt;/code&gt; コンテンツも比較され</target>
        </trans-unit>
        <trans-unit id="2bb21f70161ab7849ecd22c378497788620b4580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sign&lt;/code&gt; class is a utility for generating signatures. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Sign&lt;/code&gt; クラスは、署名を生成するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="763e027dea1785f195a0fb8439e7699ec0a13aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sign&lt;/code&gt; object can not be again used after &lt;code&gt;sign.sign()&lt;/code&gt; method has been called. Multiple calls to &lt;code&gt;sign.sign()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;sign.sign()&lt;/code&gt; メソッドが呼び出された後は、 &lt;code&gt;Sign&lt;/code&gt; オブジェクトを再び使用することはできません。 &lt;code&gt;sign.sign()&lt;/code&gt; を複数回呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="067224cdaedb01555047e368ecfaed450b4b9d71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is not part of this graph, even though it was the reason for &lt;code&gt;console.log()&lt;/code&gt; being called. This is because binding to a port without a hostname is a &lt;em&gt;synchronous&lt;/em&gt; operation, but to maintain a completely asynchronous API the user's callback is placed in a &lt;code&gt;process.nextTick()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TCPSERVERWRAP&lt;/code&gt; はそれが理由だったにも関わらず、このグラフの一部されていない &lt;code&gt;console.log()&lt;/code&gt; と呼ばれています。これは、ホスト名のないポートへのバインドは&lt;em&gt;同期&lt;/em&gt;操作であるためですが、完全に非同期のAPIを維持するために、ユーザーのコールバックは &lt;code&gt;process.nextTick()&lt;/code&gt; に配置されます。</target>
        </trans-unit>
        <trans-unit id="97bc03b082ece96085c82400600ceae8fe714235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is the server which receives the connections.</source>
          <target state="translated">&lt;code&gt;TCPSERVERWRAP&lt;/code&gt; は、接続を受信するサーバーです。</target>
        </trans-unit>
        <trans-unit id="fc1c7554594dc402923925ed657aa3cde810e524" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPWRAP&lt;/code&gt; is the new connection from the client. When a new connection is made, the &lt;code&gt;TCPWrap&lt;/code&gt; instance is immediately constructed. This happens outside of any JavaScript stack. (An &lt;code&gt;executionAsyncId()&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; means that it is being executed from C++ with no JavaScript stack above it.) With only that information, it would be impossible to link resources together in terms of what caused them to be created, so &lt;code&gt;triggerAsyncId&lt;/code&gt; is given the task of propagating what resource is responsible for the new resource's existence.</source>
          <target state="translated">&lt;code&gt;TCPWRAP&lt;/code&gt; は、クライアントからの新しい接続です。新しい接続が確立されると、 &lt;code&gt;TCPWrap&lt;/code&gt; インスタンスがすぐに構築されます。これは、JavaScriptスタックの外部で発生します。（ &lt;code&gt;executionAsyncId()&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合は、その上にJavaScriptスタックがない状態でC ++から実行されていることを意味します。）その情報だけでは、リソースを作成した原因に関してリソースをリンクすることは不可能であるため、 &lt;code&gt;triggerAsyncId&lt;/code&gt; が指定されます。新しいリソースの存在に責任があるリソースを伝播するタスク。</target>
        </trans-unit>
        <trans-unit id="c8b4a848ccb8bd223a9110350ff0ff3b72da2390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextDecoder&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">&lt;code&gt;TextDecoder&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="4386ce8178a330d40567e2509372c3cf7b2a95a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextEncoder&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">&lt;code&gt;TextEncoder&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="15b7afb5cb9a7558bf2c7c32915c8456523d10ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tracing&lt;/code&gt; object is used to enable or disable tracing for sets of categories. Instances are created using the &lt;code&gt;trace_events.createTracing()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Tracing&lt;/code&gt; オブジェクトは、カテゴリのセットのトレースを有効または無効にするために使用されます。インスタンスは、 &lt;code&gt;trace_events.createTracing()&lt;/code&gt; メソッドを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="02f95b3badbd05241aa901e088ab499ccb3aac01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Trailer&lt;/code&gt; header was set even though the transfer encoding does not support that.</source>
          <target state="translated">&lt;code&gt;Trailer&lt;/code&gt; ヘッダは、転送符号化がそれをサポートしていないにもかかわらず、設定されました。</target>
        </trans-unit>
        <trans-unit id="aa40c498c08a9c2a43b3f98536108d6c36888450" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLSearchParams&lt;/code&gt; API provides read and write access to the query of a &lt;code&gt;URL&lt;/code&gt;. The &lt;code&gt;URLSearchParams&lt;/code&gt; class can also be used standalone with one of the four following constructors. The &lt;code&gt;URLSearchParams&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">&lt;code&gt;URLSearchParams&lt;/code&gt; の APIは、のクエリに対する読み取りおよび書き込みアクセスを提供 &lt;code&gt;URL&lt;/code&gt; を。 &lt;code&gt;URLSearchParams&lt;/code&gt; のクラスには、次の4つのコンストラクタのいずれかでスタンドアロンで使用することができます。 &lt;code&gt;URLSearchParams&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="0bdbb24616ccb50106340987aec8e6ea082fa341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Verify&lt;/code&gt; class is a utility for verifying signatures. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Verify&lt;/code&gt; 、クラス署名を検証するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="5383ec704ee7dc45a94fb456043b3654dc8669de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; and &lt;code&gt;WeakSet&lt;/code&gt; entries can now be inspected as well.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; と &lt;code&gt;WeakSet&lt;/code&gt; エントリは今もとして検査することができます。</target>
        </trans-unit>
        <trans-unit id="9b55d7cf0291e64976ef5c1cd7ee77b82c96e07b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Worker&lt;/code&gt; class represents an independent JavaScript execution thread. Most Node.js APIs are available inside of it.</source>
          <target state="translated">&lt;code&gt;Worker&lt;/code&gt; クラスは独立したJavaScriptの実行スレッドを表します。ほとんどのNode.js APIは、その内部で使用できます。</target>
        </trans-unit>
        <trans-unit id="debf2dcd1404efcdcc721a3846b17e40ea921f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_channel&lt;/code&gt; property of child process objects returned by &lt;code&gt;spawn()&lt;/code&gt; and similar functions is not intended for public use. Use &lt;code&gt;ChildProcess.channel&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;spawn()&lt;/code&gt; および類似の関数によって返される子プロセスオブジェクトの &lt;code&gt;_channel&lt;/code&gt; プロパティは、パブリックで使用するためのものではありません。代わりに &lt;code&gt;ChildProcess.channel&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5075c4bc60a5cfdceb4a171eb24743398afe3236" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_destroy()&lt;/code&gt; method is called by &lt;a href=&quot;#stream_readable_destroy_error&quot;&gt;&lt;code&gt;readable.destroy()&lt;/code&gt;&lt;/a&gt;. It can be overridden by child classes but it &lt;strong&gt;must not&lt;/strong&gt; be called directly.</source>
          <target state="translated">&lt;code&gt;_destroy()&lt;/code&gt; メソッドによって呼び出され&lt;a href=&quot;#stream_readable_destroy_error&quot;&gt; &lt;code&gt;readable.destroy()&lt;/code&gt; &lt;/a&gt;。子クラスでオーバーライドできますが、直接呼び出すこと&lt;strong&gt;はできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8e72d0f6fb0b490c3fdabbf1b786ae5d46602187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_destroy()&lt;/code&gt; method is called by &lt;a href=&quot;#stream_writable_destroy_error&quot;&gt;&lt;code&gt;writable.destroy()&lt;/code&gt;&lt;/a&gt;. It can be overridden by child classes but it &lt;strong&gt;must not&lt;/strong&gt; be called directly.</source>
          <target state="translated">&lt;code&gt;_destroy()&lt;/code&gt; メソッドによって呼び出され&lt;a href=&quot;#stream_writable_destroy_error&quot;&gt; &lt;code&gt;writable.destroy()&lt;/code&gt; &lt;/a&gt;。子クラスでオーバーライドできますが、直接呼び出すこと&lt;strong&gt;はできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="84dfdbc1e4803c46906daad4e04f8b1930dfa32d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_final()&lt;/code&gt; method &lt;strong&gt;must not&lt;/strong&gt; be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">&lt;code&gt;_final()&lt;/code&gt; メソッドは&lt;strong&gt;いけません&lt;/strong&gt;直接呼び出すこと。子クラスによって実装される場合があり、実装されている場合は、内部の &lt;code&gt;Writable&lt;/code&gt; クラスメソッドによってのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6481baedf3e3bdf741a09ffad002a9db9f046d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linklist&lt;/code&gt; module is deprecated. Please use a userland alternative.</source>
          <target state="translated">&lt;code&gt;_linklist&lt;/code&gt; のモジュールが推奨されていません。別のユーザーランドを使用してください。</target>
        </trans-unit>
        <trans-unit id="60118404f8ad4fa8dd8afc9f383d20f4a34244eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_stream_wrap&lt;/code&gt; module is deprecated.</source>
          <target state="translated">&lt;code&gt;_stream_wrap&lt;/code&gt; のモジュールが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="ce85dabf9709d0fdeca06663508b85b7d88af6c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_writableState.buffer&lt;/code&gt; property is deprecated. Use the &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; method instead.</source>
          <target state="translated">&lt;code&gt;_writableState.buffer&lt;/code&gt; のプロパティが推奨されていません。代わりに &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="17864e9884718d6d34787016fba6b3c036adf024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aborted&lt;/code&gt; property is no longer a timestamp number.</source>
          <target state="translated">&lt;code&gt;aborted&lt;/code&gt; プロパティは、もはや、タイムスタンプの数ではありません。</target>
        </trans-unit>
        <trans-unit id="523d60058c4d000c1f8113952c6858ae8be22de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;address&lt;/code&gt; argument is a string. If the value of &lt;code&gt;address&lt;/code&gt; is a host name, DNS will be used to resolve the address of the host. If &lt;code&gt;address&lt;/code&gt; is not provided or otherwise falsy, &lt;code&gt;'127.0.0.1'&lt;/code&gt; (for &lt;code&gt;udp4&lt;/code&gt; sockets) or &lt;code&gt;'::1'&lt;/code&gt; (for &lt;code&gt;udp6&lt;/code&gt; sockets) will be used by default.</source>
          <target state="translated">&lt;code&gt;address&lt;/code&gt; 引数は文字列です。 &lt;code&gt;address&lt;/code&gt; の値がホスト名の場合、DNSを使用してホストのアドレスを解決します。場合は &lt;code&gt;address&lt;/code&gt; 提供されるか、またはそうでなければfalsy、されていない &lt;code&gt;'127.0.0.1'&lt;/code&gt; （用 &lt;code&gt;udp4&lt;/code&gt; ソケット）または &lt;code&gt;'::1'&lt;/code&gt; （のための &lt;code&gt;udp6&lt;/code&gt; ソケット）がデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="0c15e300f4f1ce65070e7ce40a6d7a8e129b3ea0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;address&lt;/code&gt; parameter is always optional now.</source>
          <target state="translated">現在、 &lt;code&gt;address&lt;/code&gt; パラメータは常にオプションです。</target>
        </trans-unit>
        <trans-unit id="7e65a68e4b6dbb69fc77cbd51e46debd22b71448" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addressType&lt;/code&gt; is one of:</source>
          <target state="translated">&lt;code&gt;addressType&lt;/code&gt; 型は、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="c6af5995c277a4d9845542e6926ac54af7d4e41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; is dependent on OpenSSL, examples are &lt;code&gt;'aes192'&lt;/code&gt;, etc. On recent OpenSSL releases, &lt;code&gt;openssl list -cipher-algorithms&lt;/code&gt; (&lt;code&gt;openssl list-cipher-algorithms&lt;/code&gt; for older versions of OpenSSL) will display the available cipher algorithms.</source>
          <target state="translated">&lt;code&gt;algorithm&lt;/code&gt; 、例があるのOpenSSLに依存している &lt;code&gt;'aes192'&lt;/code&gt; の最近のOpenSSLのリリース、オンなど、 &lt;code&gt;openssl list -cipher-algorithms&lt;/code&gt; （ &lt;code&gt;openssl list-cipher-algorithms&lt;/code&gt; のOpenSSLの古いバージョンのために）使用可能な暗号化アルゴリズムが表示されます。</target>
        </trans-unit>
        <trans-unit id="5cf75b3efb8f1b7be9a886e494566b373165e669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are &lt;code&gt;'sha256'&lt;/code&gt;, &lt;code&gt;'sha512'&lt;/code&gt;, etc. On recent releases of OpenSSL, &lt;code&gt;openssl list -digest-algorithms&lt;/code&gt; (&lt;code&gt;openssl list-message-digest-algorithms&lt;/code&gt; for older versions of OpenSSL) will display the available digest algorithms.</source>
          <target state="translated">&lt;code&gt;algorithm&lt;/code&gt; プラットフォーム上のOpenSSLのバージョンでサポートされている利用可能なアルゴリズムに依存しています。例は &lt;code&gt;'sha256'&lt;/code&gt; 、 &lt;code&gt;'sha512'&lt;/code&gt; などです。OpenSSLの最近のリリースでは、 &lt;code&gt;openssl list -digest-algorithms&lt;/code&gt; （ &lt;code&gt;openssl list-message-digest-algorithms&lt;/code&gt; for OpenSSLの古いバージョン）は利用可能なダイジェストアルゴリズムを表示します。</target>
        </trans-unit>
        <trans-unit id="bb522ecae4930018820842e1866a5f7f41282121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;all&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="fe34a1e6e8c173cd3e3b36c3c3fe5e15935de821" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alt&lt;/code&gt; and origin string &lt;em&gt;must&lt;/em&gt; contain only ASCII bytes and are strictly interpreted as a sequence of ASCII bytes. The special value &lt;code&gt;'clear'&lt;/code&gt; may be passed to clear any previously set alternative service for a given domain.</source>
          <target state="translated">&lt;code&gt;alt&lt;/code&gt; と原点文字列が&lt;em&gt;しなければならない&lt;/em&gt;だけでASCIIバイトが含まれており、厳密にASCIIバイトのシーケンスとして解釈されます。特定のドメインに対して以前に設定された代替サービスをクリアするために、特別な値 &lt;code&gt;'clear'&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c533ce6fc04b00d6aa6151f9b741b524ad6aab18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argv0&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;argv0&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d455d0ed53effe3b25db43d1fe5eecafa0a53ae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as+&lt;/code&gt; modes are supported now.</source>
          <target state="translated">&lt;code&gt;as&lt;/code&gt; と &lt;code&gt;as+&lt;/code&gt; のモードがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="25878abdfa306ca7e7dc57e75fe59999862d0b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert.ok()&lt;/code&gt; (no arguments) will now use a predefined error message.</source>
          <target state="translated">&lt;code&gt;assert.ok()&lt;/code&gt; （引数なし）は、現在事前に定義されたエラーメッセージを使用します。</target>
        </trans-unit>
        <trans-unit id="bf53a8640f6c440fb3875834f8fcdab85c39b1b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; module provides a set of assertion functions for verifying invariants. The module provides a recommended &lt;a href=&quot;#assert_strict_mode&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; and a more lenient legacy mode.</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; モジュールは、不変量を検証するためのアサーション機能のセットを提供します。このモジュールは、推奨される&lt;a href=&quot;#assert_strict_mode&quot;&gt; &lt;code&gt;strict&lt;/code&gt; モード&lt;/a&gt;と、より緩やかなレガシーモードを提供します。</target>
        </trans-unit>
        <trans-unit id="a6e4e80944c676b9dad7cb6791bc191cf400c222" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_hooks&lt;/code&gt; module provides an API to register callbacks tracking the lifetime of asynchronous resources created inside a Node.js application. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;async_hooks&lt;/code&gt; のモジュールは、Node.jsのアプリケーション内で作成された非同期資源の寿命を追跡するコールバックを登録するためのAPIを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4ed6459e77932d2b602c852c8885a4589027cf94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_resource_name&lt;/code&gt; identifier is provided by the user and should be representative of the type of async work being performed. It is also recommended to apply namespacing to the identifier, e.g. by including the module name. See the &lt;a href=&quot;async_hooks#async_hooks_type&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt; documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;async_resource_name&lt;/code&gt; の識別子は、ユーザによって提供され、実行される非同期作業の種類の代表であるべきです。また、モジュール名を含めるなどして、名前空間を識別子に適用することをお勧めします。詳細については、&lt;a href=&quot;async_hooks#async_hooks_type&quot;&gt; &lt;code&gt;async_hooks&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d33f473978e21b579a16a230075abfec085ea1a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt; arguments follow these rules:</source>
          <target state="translated">&lt;code&gt;atime&lt;/code&gt; と &lt;code&gt;mtime&lt;/code&gt; の引数は次の規則に従ってください。</target>
        </trans-unit>
        <trans-unit id="449376bcbb92e36dfd1c08d24ffab6c86585eab0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atimeMs&lt;/code&gt;, &lt;code&gt;mtimeMs&lt;/code&gt;, &lt;code&gt;ctimeMs&lt;/code&gt;, &lt;code&gt;birthtimeMs&lt;/code&gt; properties are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;numbers&lt;/a&gt; that hold the corresponding times in milliseconds. Their precision is platform specific. &lt;code&gt;atime&lt;/code&gt;, &lt;code&gt;mtime&lt;/code&gt;, &lt;code&gt;ctime&lt;/code&gt;, and &lt;code&gt;birthtime&lt;/code&gt; are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object alternate representations of the various times. The &lt;code&gt;Date&lt;/code&gt; and number values are not connected. Assigning a new number value, or mutating the &lt;code&gt;Date&lt;/code&gt; value, will not be reflected in the corresponding alternate representation.</source>
          <target state="translated">&lt;code&gt;atimeMs&lt;/code&gt; 、 &lt;code&gt;mtimeMs&lt;/code&gt; 、 &lt;code&gt;ctimeMs&lt;/code&gt; 、 &lt;code&gt;birthtimeMs&lt;/code&gt; のプロパティがある&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;数字&lt;/a&gt;ミリ秒単位で対応する時間を保持します。それらの精度はプラットフォーム固有です。 &lt;code&gt;atime&lt;/code&gt; 、 &lt;code&gt;mtime&lt;/code&gt; 、 &lt;code&gt;ctime&lt;/code&gt; 、および &lt;code&gt;birthtime&lt;/code&gt; は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトのさまざまな時刻の代替表現です。 &lt;code&gt;Date&lt;/code&gt; と番号の値が接続されていません。新しい数値の割り当て、または &lt;code&gt;Date&lt;/code&gt; 値の変更は、対応する代替表現には反映されません。</target>
        </trans-unit>
        <trans-unit id="d1fb10de5b21bd96b1861ce448f3dabf1c6cc6ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; fields are now kept intact when &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; refer to the same host.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; フィールドは、ときになりましそのまま保持されている &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; 、同じホストを参照してください。</target>
        </trans-unit>
        <trans-unit id="4953e8b11cad93b7b9ea12f21981198e9f7d206b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; fields is cleared now the &lt;code&gt;to&lt;/code&gt; parameter contains a hostname.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; フィールドが今クリアされる &lt;code&gt;to&lt;/code&gt; のパラメータは、ホスト名が含まれています。</target>
        </trans-unit>
        <trans-unit id="2cb6e6c52db18c0a11d623417542b47591dd51a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; property is the username and password portion of the URL, also referred to as &lt;em&gt;userinfo&lt;/em&gt;. This string subset follows the &lt;code&gt;protocol&lt;/code&gt; and double slashes (if present) and precedes the &lt;code&gt;host&lt;/code&gt; component, delimited by &lt;code&gt;@&lt;/code&gt;. The string is either the username, or it is the username and password separated by &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; プロパティは、とも呼ばれる、URLのユーザ名とパスワードの部分である&lt;em&gt;のuserinfo&lt;/em&gt;。この文字列サブセットは、 &lt;code&gt;protocol&lt;/code&gt; とダブルスラッシュ（存在する場合）に従い、 &lt;code&gt;host&lt;/code&gt; コンポーネントの前に &lt;code&gt;@&lt;/code&gt; で区切られます。文字列は、ユーザー名、または &lt;code&gt;:&lt;/code&gt; で区切られたユーザー名とパスワードです。</target>
        </trans-unit>
        <trans-unit id="1f38f1de37b0bf494f218ed7c511911f13fa69ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authTagLength&lt;/code&gt; option can now be used to produce shorter authentication tags in GCM mode and defaults to 16 bytes.</source>
          <target state="translated">&lt;code&gt;authTagLength&lt;/code&gt; のオプションは16バイトにGCMモードと、デフォルトで短い認証タグを生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4717ac0a129595a7b0ba8362f889d2eb111be7f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authTagLength&lt;/code&gt; option can now be used to restrict accepted GCM authentication tag lengths.</source>
          <target state="translated">&lt;code&gt;authTagLength&lt;/code&gt; のオプションは、現在受け入れられGCM認証タグの長さを制限するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="f892ccf9ac759a08f758b755e272a341ca380048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoClose&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;autoClose&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="3fe354e440db4d021a80a4a1de3cb0bd0379f9e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;before&lt;/code&gt; callback will be called 0 to N times. The &lt;code&gt;before&lt;/code&gt; callback will typically be called 0 times if the asynchronous operation was cancelled or, for example, if no connections are received by a TCP server. Persistent asynchronous resources like a TCP server will typically call the &lt;code&gt;before&lt;/code&gt; callback multiple times, while other operations like &lt;code&gt;fs.open()&lt;/code&gt; will call it only once.</source>
          <target state="translated">&lt;code&gt;before&lt;/code&gt; のコールバックは、N回に0と呼ばれます。 &lt;code&gt;before&lt;/code&gt; いかなる接続はTCPサーバによって受信されない場合、コールバックは、一般的に、例えば、非同期操作がキャンセルされた場合は0回と呼ばれたりします。通常、TCPサーバーなどの永続的な非同期リソースは &lt;code&gt;before&lt;/code&gt; コールバックを複数回呼び出しますが、 &lt;code&gt;fs.open()&lt;/code&gt; などの他の操作はそれを1回だけ呼び出します。</target>
        </trans-unit>
        <trans-unit id="d2865411787013147736e7c6528d110aada6c506" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bigint&lt;/code&gt; version of the &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt; method returning the current high-resolution real time in a &lt;code&gt;bigint&lt;/code&gt;.</source>
          <target state="translated">現在の高解像度のリアルタイムを &lt;code&gt;bigint&lt;/code&gt; で返す&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;bigint&lt;/code&gt; バージョン。</target>
        </trans-unit>
        <trans-unit id="c48b4d08ed330264b4f8eb1e7a3005009bd60630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakLength&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;breakLength&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="afb9ab51848289ab8d0bcbcce7912894768d7275" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakOnSigint&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;breakOnSigint&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a4c4b22335ca3e1d7d0ed289d2587b07f1094bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buf.parent&lt;/code&gt; property is a deprecated alias for &lt;code&gt;buf.buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buf.parent&lt;/code&gt; のプロパティは非推奨のための別名である &lt;code&gt;buf.buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="751a13b39d085a2e801df110ee05aac2a34358bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; argument may be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 引数はいずれであってもよい &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c35cc0fd059f671ea5de074af24f81f56719ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータができ &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94a104be39c9bc13bef36af071c42ce0cf501caf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータができ &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="f24d6e585cea302eee1c5b8b0d24308bd5f95739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは任意のものとすることができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13347ff52ee272031d0dfa2402f16202165de828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータが今することができ &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6c7846f24666db70fe163eb55c7b74fbe223c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e7550ba45ded2a07645252a3e6d651b429ee3b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc2fa30b3b806b4b669461c2fcdca26d15195f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができ &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="0becffa6e00a391d07ddcfd44821e7c5551acaa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are supported now.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; のパラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="26dde646bc9d6b4b4c3d1dee9bcfb39db3b93a23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca:&lt;/code&gt; option now supports &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ca:&lt;/code&gt; オプションをサポートするようになりましたが、 &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50abb0a253c600119fb0b706154a2d9856c65812" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca&lt;/code&gt; option can now be a single string containing multiple CA certificates.</source>
          <target state="translated">&lt;code&gt;ca&lt;/code&gt; オプションは、複数のCA証明書を含む単一の文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="6b641d22b2c014aa622b9b93bee1c68784632570" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cache&lt;/code&gt; parameter was removed.</source>
          <target state="translated">&lt;code&gt;cache&lt;/code&gt; パラメータが削除されました。</target>
        </trans-unit>
        <trans-unit id="9f1c69c38d8e38e5b17ae605ab46f393e7a823c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cachedData&lt;/code&gt; and &lt;code&gt;produceCachedData&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;cachedData&lt;/code&gt; と &lt;code&gt;produceCachedData&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="1c0e007effbbc122cf39880451c0a560d0bbab07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; argument is optional and will be called when this chunk of data is flushed, but only if the chunk is non-empty.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; の引数はオプションであり、このデータのチャンクがフラッシュされたときに呼び出されますが、チャンクは非空である場合にのみ。</target>
        </trans-unit>
        <trans-unit id="ba29b709f3d8b858f0b327068e0a74f6852badbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. &lt;code&gt;err&lt;/code&gt; is an exception object when key derivation fails, otherwise &lt;code&gt;err&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は二つの引数で呼び出され： &lt;code&gt;err&lt;/code&gt; と &lt;code&gt;derivedKey&lt;/code&gt; 。 &lt;code&gt;err&lt;/code&gt; は、キーの導出に失敗した場合の例外オブジェクトです。それ以外の場合、 &lt;code&gt;err&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; です。 &lt;code&gt;derivedKey&lt;/code&gt; は、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;としてコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="5f9f155ba1bd27d006253becd5a6ecb00b817468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt;, it will be forwarded on to the &lt;code&gt;readable.push()&lt;/code&gt; method. In other words, the following are equivalent:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、現在のチャンクが完全に消費されている場合にのみ呼び出さなければなりません。 &lt;code&gt;callback&lt;/code&gt; 渡される最初の引数は、入力の処理中にエラーが発生した場合は &lt;code&gt;Error&lt;/code&gt; オブジェクトである必要があり、そうでない場合は &lt;code&gt;null&lt;/code&gt; である必要があります。2番目の引数が &lt;code&gt;callback&lt;/code&gt; に渡された場合、それは &lt;code&gt;readable.push()&lt;/code&gt; メソッドに転送されます。つまり、以下は同等です。</target>
        </trans-unit>
        <trans-unit id="ce46ebb800e17eebebaf8f9d46987e9d2dd4f325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function passed to &lt;code&gt;rl.question()&lt;/code&gt; does not follow the typical pattern of accepting an &lt;code&gt;Error&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; as the first argument. The &lt;code&gt;callback&lt;/code&gt; is called with the provided answer as the only argument.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; に渡された関数 &lt;code&gt;rl.question()&lt;/code&gt; は、受け入れの典型的なパターンに従わない &lt;code&gt;Error&lt;/code&gt; オブジェクト、または &lt;code&gt;null&lt;/code&gt; 最初の引数としてあります。 &lt;code&gt;callback&lt;/code&gt; 唯一の引数として提供さ答えで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="652f37b1b2968e2ab32c3881e04612dc419eb654" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function, if specified, will be added as a listener for the &lt;a href=&quot;#tls_event_secureconnect&quot;&gt;&lt;code&gt;'secureConnect'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、指定された場合、のリスナーとして追加されます&lt;a href=&quot;#tls_event_secureconnect&quot;&gt; &lt;code&gt;'secureConnect'&lt;/code&gt; &lt;/a&gt;イベント。</target>
        </trans-unit>
        <trans-unit id="48896b41d9279e5711e050c3ebf37d6393767a0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 二つの引数を取得 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb5d819e0cd349728bee11ce5e3538fc8b3951ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;. May use &lt;code&gt;process.cwd&lt;/code&gt; to resolve relative paths.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 二つの引数を取得 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。相対パスを解決するために &lt;code&gt;process.cwd&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="253886ac3350139a2e4de4d0e7575141b9659fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked when a &lt;code&gt;PerformanceObserver&lt;/code&gt; is notified about new &lt;code&gt;PerformanceEntry&lt;/code&gt; instances. The callback receives a &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; instance and a reference to the &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; ときに呼び出される &lt;code&gt;PerformanceObserver&lt;/code&gt; が新しいについて通知され &lt;code&gt;PerformanceEntry&lt;/code&gt; のインスタンス。コールバックは、受信 &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; のインスタンスと参照 &lt;code&gt;PerformanceObserver&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="9b72dba06513971ab2b899eb65fab8c7b2b0f850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked with a single argument that is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; のインスタンスである単一の引数で呼び出され&lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50db4a4272c90529a835c1153eb71e463f38c65c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; method must be called to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; メソッドは、書き込みが正常に完了またはエラーで失敗したことのいずれかを知らせるために呼び出されなければなりません。渡される最初の引数 &lt;code&gt;callback&lt;/code&gt; でなければならない &lt;code&gt;Error&lt;/code&gt; 呼び出しが失敗した場合、またはオブジェクト &lt;code&gt;null&lt;/code&gt; の書き込みが成功した場合。</target>
        </trans-unit>
        <trans-unit id="179014424211e6954e7ae18e22c66302ded36897" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータはもはやオプションではありません。渡さないと、DEP0013というIDの非推奨警告が発生します。</target>
        </trans-unit>
        <trans-unit id="5938acd6c222b936a76d043fe7bef6a5ee523eb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will throw a &lt;code&gt;TypeError&lt;/code&gt; at runtime.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータはもはやオプションではありません。渡さないと、実行時に &lt;code&gt;TypeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="80d8feeb9e26a94d3dde87faf723b7d3903dbfca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">現在、 &lt;code&gt;callback&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="ba70c7e9c871db219c8a222ad10026562b6f4eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="ff62e0bdb25bf6e3167f8d2e71d5dcb26d11520e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will always be called with &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;error&lt;/code&gt; parameter in case of success.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; いつもと呼ばれる &lt;code&gt;null&lt;/code&gt; として &lt;code&gt;error&lt;/code&gt; 成功した場合のパラメータ。</target>
        </trans-unit>
        <trans-unit id="dc1c85ca488c98544bc81bd9a9e01e47ef3bacd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will likely not be invoked in precisely &lt;code&gt;delay&lt;/code&gt; milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; おそらく正確には呼び出されません &lt;code&gt;delay&lt;/code&gt; （ミリ秒）。Node.jsは、コールバックが発生する正確なタイミングやその順序については保証しません。コールバックは、指定された時間に可能な限り近く呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1922dd3f5d83e12adee6b2b757d0739f0ad27dfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFile()&lt;/code&gt; function is similar to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; except that it does not spawn a shell by default. Rather, the specified executable &lt;code&gt;file&lt;/code&gt; is spawned directly as a new process making it slightly more efficient than &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;child_process.execFile()&lt;/code&gt; 関数はに似ている&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;それがデフォルトでシェルを起動しないことを除いて。むしろ、指定された実行可能 &lt;code&gt;file&lt;/code&gt; は新しいプロセスとして直接生成され、&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;よりもわずかに効率的になります。</target>
        </trans-unit>
        <trans-unit id="2a4a0a2c850eea5f5dfb7d502a45c3991da5e300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFileSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited.</source>
          <target state="translated">&lt;code&gt;child_process.execFileSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまでメソッドが返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。</target>
        </trans-unit>
        <trans-unit id="43e339d998d6a81aa79698538c93cb46b8fd4348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the child process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">&lt;code&gt;child_process.execSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまでメソッドが返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。子プロセスが &lt;code&gt;SIGTERM&lt;/code&gt; シグナルをインターセプトして処理し、終了しない場合、親プロセスは子プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="79ab2f31fa112d0a33071b52bf3919603eb10e38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.fork()&lt;/code&gt; method is a special case of &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; used specifically to spawn new Node.js processes. Like &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object is returned. The returned &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See &lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;subprocess.send()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;child_process.fork()&lt;/code&gt; メソッドは、特殊なケースである&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;新しいNode.jsのプロセスを起動するために特に使用されます。&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;オブジェクトが返されます。返された&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;には、追加の通信チャネルが組み込まれており、親と子の間でメッセージをやり取りできます。詳細については、&lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="baf57fba487307b776480db4b6f5caa8f5c57761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt;, with command line arguments in &lt;code&gt;args&lt;/code&gt;. If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</source>
          <target state="translated">&lt;code&gt;child_process.spawn()&lt;/code&gt; メソッドは、指定された使用して新しいプロセススポーン &lt;code&gt;command&lt;/code&gt; のコマンドライン引数を使用して、 &lt;code&gt;args&lt;/code&gt; 。省略した場合、 &lt;code&gt;args&lt;/code&gt; はデフォルトで空の配列になります。</target>
        </trans-unit>
        <trans-unit id="ff2c5a22e3f39b38bd7778f858fd5a2731fa71b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawnSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">&lt;code&gt;child_process.spawnSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまで関数が返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。プロセスが &lt;code&gt;SIGTERM&lt;/code&gt; シグナルをインターセプトして処理し、終了しない場合、親プロセスは子プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="7e4066aabced91d6898f68577001b144876c3550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn child processes in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt;&lt;code&gt;popen(3)&lt;/code&gt;&lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">&lt;code&gt;child_process&lt;/code&gt; モジュールする、同様の、しかし同一ではない方法でスポーン子プロセスする能力を提供する&lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt; &lt;code&gt;popen(3)&lt;/code&gt; &lt;/a&gt;。この機能は主に、&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="7ab6bb247d807aa99f0d1ad8784b0eb604c5e644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunk&lt;/code&gt; argument can now be a &lt;code&gt;Uint8Array&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;chunk&lt;/code&gt; 引数は、今することができ &lt;code&gt;Uint8Array&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="59a049e2241d0e91f8119efebfab57152070fdcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.getAuthTag()&lt;/code&gt; method should only be called after encryption has been completed using the &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;cipher.getAuthTag()&lt;/code&gt; 暗号化を使用して完了した後にメソッドは、呼び出されるべき&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="fc2e9e0a05a5ea6249159718bf69662d588f281e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cipher.setAAD()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a674ee975c802867ef81a7453297330883d95c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb4365192a6a89f79bcda437a280cc2772a31e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;cipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;cipher.update()&lt;/code&gt; メソッドは、までは新しいデータで複数回呼び出すことができ&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;と呼ばれています。 &lt;code&gt;cipher.update()&lt;/code&gt; 後に&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="eab25cea22e5e6d0a936bebbeff627b02e836ed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;codeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;codeGeneration&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a6544e8c92f9b1421cb39964549a6fba71ba9b10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option accepts numbers for a new output mode.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションは、新しい出力モード用の番号を受け入れます。</target>
        </trans-unit>
        <trans-unit id="4e0fd9c17389d34407b63c9830ee6259874d3554" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="9c60993429a8283c8b6bb30d9d486cf8be30652b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; options default is changed to &lt;code&gt;3&lt;/code&gt; and the &lt;code&gt;breakLength&lt;/code&gt; options default is changed to &lt;code&gt;80&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションのデフォルトに変更された &lt;code&gt;3&lt;/code&gt; 及び &lt;code&gt;breakLength&lt;/code&gt; のオプションのデフォルト値に変更される &lt;code&gt;80&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c8daef3b2446d622017a6e79a063c5bb6f4079c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function can be called asynchronously if it accepts two arguments:</source>
          <target state="translated">次の2つの引数を受け入れる場合、 &lt;code&gt;completer&lt;/code&gt; 関数を非同期で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="978d498a3782c9fe0dec8c9101e02b8242d86778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function takes the current line entered by the user as an argument, and returns an &lt;code&gt;Array&lt;/code&gt; with 2 entries:</source>
          <target state="translated">&lt;code&gt;completer&lt;/code&gt; 関数は、引数として、ユーザによって入力された現在の行を受け取り、戻り &lt;code&gt;Array&lt;/code&gt; 2つのエントリが：</target>
        </trans-unit>
        <trans-unit id="fc31eb91c139ef8d491acdbbebec616d5484155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.debug()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.debug()&lt;/code&gt; 関数の別名で&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="defb8cff6c1e951f6de2d07f458d2babac7ba2a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.info()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.info()&lt;/code&gt; 関数の別名で&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cecd0aff03a02528c4539c7c9f56be627a6fd0bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.warn()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.warn()&lt;/code&gt; 関数での別名である&lt;a href=&quot;#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9c8303533d153fb137daa18d249448d01467f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console&lt;/code&gt; module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.</source>
          <target state="translated">&lt;code&gt;console&lt;/code&gt; モジュールは、Webブラウザが提供するJavaScriptコンソール機構と同様である簡単なデバッグコンソールを提供します。</target>
        </trans-unit>
        <trans-unit id="764cd16bca065f3cc69ab4d8a92233579209fc99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constants&lt;/code&gt; module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the &lt;code&gt;constants&lt;/code&gt; property exposed by the relevant module. For instance, &lt;code&gt;require('fs').constants&lt;/code&gt; and &lt;code&gt;require('os').constants&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constants&lt;/code&gt; モジュールが推奨されていません。特定のNode.js組み込みモジュールに関連する定数へのアクセスが必要な場合、開発者は代わりに、関連するモジュールによって公開される &lt;code&gt;constants&lt;/code&gt; プロパティを参照する必要があります。たとえば、 &lt;code&gt;require('fs').constants&lt;/code&gt; および &lt;code&gt;require('os').constants&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d5392b0ffb88c2d741b4a827845f941c5aa7e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; parameter can refer to an ES6 class now.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; パラメータは現在ES6クラスを参照することができます。</target>
        </trans-unit>
        <trans-unit id="91794b1474f58b591b318c4eb4de0f99f69c42fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from an end user. For instance:</source>
          <target state="translated">&lt;code&gt;constructorOpt&lt;/code&gt; の引数は、エンドユーザからのエラー発生の実装の詳細を隠蔽するために有用です。例えば：</target>
        </trans-unit>
        <trans-unit id="3f58213ab25c95853528316189bfb6d69406e28a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content-length&lt;/code&gt; header field will be automatically set.</source>
          <target state="translated">&lt;code&gt;content-length&lt;/code&gt; ヘッダフィールドが自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="54297810109a40e006edcdd14b8aa735a9c0830f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; given during the call to &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; can be retrieved from any thread with a call to &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; への通話中に所定の &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; を呼び出して、任意のスレッドから取得することができる &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ed0f099bbb846c6a8d341dea02523807f589314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contextCodeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;contextCodeGeneration&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d724f5e9ffe9edd754ed243abdbb481de04378bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cost&lt;/code&gt;, &lt;code&gt;blockSize&lt;/code&gt; and &lt;code&gt;parallelization&lt;/code&gt; option names have been added.</source>
          <target state="translated">&lt;code&gt;cost&lt;/code&gt; 、 &lt;code&gt;blockSize&lt;/code&gt; および &lt;code&gt;parallelization&lt;/code&gt; オプション名が追加されました。</target>
        </trans-unit>
        <trans-unit id="2ebacbab8ba40ddb7c2a01713d06a73151a28484" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crlfDelay&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;crlfDelay&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4f76355cd575f0ec09649052dbc2cc2c523a151b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.Credentials&lt;/code&gt; class was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.SecureContext&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;crypto.Credentials&lt;/code&gt; クラスが削除されました。代わりに&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.SecureContext&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="496c02ce2af63849a303e1f5ac12f7c5f3707e06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backwards compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; のメカニズムが期待レガシープログラムとの下位互換性のために提供される &lt;code&gt;'latin1'&lt;/code&gt; デフォルトのエンコードします。</target>
        </trans-unit>
        <trans-unit id="09a09563094e226c530650f4b442648579a0291b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property can be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback. This property, however, has been deprecated and use should be avoided.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; プロパティは、方法に変更するために使用することができ &lt;code&gt;derivedKey&lt;/code&gt; は、コールバックに渡されます。ただし、このプロパティは廃止されており、使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="252e5ce33b7a0494ca5705dfa01113826b19a5dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property may be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is returned. This property, however, is deprecated and use should be avoided.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; プロパティは、方法に変更するために使用することができる &lt;code&gt;derivedKey&lt;/code&gt; が返されます。ただし、このプロパティは非推奨であり、使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="145e6ed1d4b3ecb5175a68c99648976754551213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto._toBuf()&lt;/code&gt; function was not designed to be used by modules outside of Node.js core and was removed.</source>
          <target state="translated">&lt;code&gt;crypto._toBuf()&lt;/code&gt; 関数は、外部のNode.jsコアのモジュールによって使用されるように設計されていないし、除去しました。</target>
        </trans-unit>
        <trans-unit id="decbf0573b73333da4f753cecb890dd944596753" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.createCredentials()&lt;/code&gt; API was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;crypto.createCredentials()&lt;/code&gt; APIを除去しました。代わりに&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="dfb78b96f9539bdae500b0c828afd631df6535c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.randomBytes()&lt;/code&gt; method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.</source>
          <target state="translated">&lt;code&gt;crypto.randomBytes()&lt;/code&gt; 利用可能な十分なエントロピーがあるまで、この方法では完了しません。これには通常、数ミリ秒以上かかることはありません。ランダムバイトを生成する唯一の時間は、システム全体のエントロピーがまだ低い場合に、ブート直後にブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8339e284a971532b7d28d05ffe582daa5f7966b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールは、OpenSSLのハッシュ、HMAC、暗号、復号、符号のラッパーのセットを含み、および機能を検証する暗号化機能を提供します。</target>
        </trans-unit>
        <trans-unit id="480ec0b6a393327edcc239ebe43596e74863e8c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides the &lt;code&gt;Certificate&lt;/code&gt; class for working with SPKAC data. The most common usage is handling output generated by the HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; element. Node.js uses &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSL's SPKAC implementation&lt;/a&gt; internally.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールが提供 &lt;code&gt;Certificate&lt;/code&gt; SPKACデータを扱うためのクラスを。最も一般的な使用法は、HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; 要素によって生成された出力の処理です。Node.jsは&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSLのSPKAC実装を&lt;/a&gt;内部で使用します。</target>
        </trans-unit>
        <trans-unit id="2a2dac1ece53434551141ebdd9ed53915ef72940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are too weak for safe use.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールは、まだ、すでに危険にさらされており、現在は使用することは推奨されていないいくつかのアルゴリズムをサポートしています。APIは、安全に使用するには弱すぎる、小さい鍵サイズの暗号とハッシュの使用も許可します。</target>
        </trans-unit>
        <trans-unit id="012c7bdf0d9689e836fec05c286230617e01c04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; property returns the total number of bytes written to the underlying socket &lt;em&gt;including&lt;/em&gt; the bytes required for the implementation of the TLS protocol.</source>
          <target state="translated">&lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; プロパティは、下にあるソケットに書き込まれたバイトの総数を返し&lt;em&gt;を含む&lt;/em&gt; TLSプロトコルの実装のために必要なバイト。</target>
        </trans-unit>
        <trans-unit id="a4ffdb22912634d83f537b8778b7f78372135d6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cwd&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;cwd&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a785322575851f3cbfa6c65e6bc51bc7994b4d6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; パラメータは、今することができ &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="059fb205840fb573709992ff65937e48e8c47ccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d699a8e66e291d4dbb66069406e56fa6a3bdbd56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;decipher.setAAD()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd0108662c04d88926a087d2bc8bf093bc824eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; and can only be called once.</source>
          <target state="translated">&lt;code&gt;decipher.setAuthTag()&lt;/code&gt; メソッドが呼び出される前にしなければならない&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;一度だけ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e84318ad593602027e542c7e5bfeb9cd812b2a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6ed87d0293868649e057451f66f944a2b809c18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;decipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;decipher.update()&lt;/code&gt; メソッドがするまで、新しいデータで複数回呼び出すことができます&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;と呼ばれています。 &lt;code&gt;decipher.update()&lt;/code&gt; 後に&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="a0770c4cae4c4f8a3dc5664ccd10e0ca3a8b2e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultOptions&lt;/code&gt; value allows customization of the default options used by &lt;code&gt;util.inspect&lt;/code&gt;. This is useful for functions like &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;util.format&lt;/code&gt; which implicitly call into &lt;code&gt;util.inspect&lt;/code&gt;. It shall be set to an object containing one or more valid &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; options. Setting option properties directly is also supported.</source>
          <target state="translated">&lt;code&gt;defaultOptions&lt;/code&gt; の値がで使用されるデフォルトのオプションをカスタマイズできます &lt;code&gt;util.inspect&lt;/code&gt; を。これは、 &lt;code&gt;util.format&lt;/code&gt; を暗黙的に呼び出す &lt;code&gt;console.log&lt;/code&gt; やutil.formatなどの関数に &lt;code&gt;util.inspect&lt;/code&gt; ます。1つ以上の有効な&lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;オプションを含むオブジェクトに設定する必要があります。オプションプロパティの直接設定もサポートされています。</target>
        </trans-unit>
        <trans-unit id="ef6cc6afd4679ef76190a9f15f4f9a33f7099fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed back to &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt; デフォルトはに戻す &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a51131897a7f510936321ce110be4936110e773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt; に変更デフォルトの &lt;code&gt;20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b84842f945868c618332d4e911b58899660aa5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram.Socket&lt;/code&gt; object is an &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; that encapsulates the datagram functionality.</source>
          <target state="translated">&lt;code&gt;dgram.Socket&lt;/code&gt; のオブジェクトがある&lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;データグラムの機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="86b0893a7f189daf0b825fd662edb92ff8ee749b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module previously contained several APIs that were never meant to accessed outside of Node.js core: &lt;code&gt;Socket.prototype._handle&lt;/code&gt;, &lt;code&gt;Socket.prototype._receiving&lt;/code&gt;, &lt;code&gt;Socket.prototype._bindState&lt;/code&gt;, &lt;code&gt;Socket.prototype._queue&lt;/code&gt;, &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt;, &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt;, &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt;, and &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt;.</source>
          <target state="translated">以前の &lt;code&gt;dgram&lt;/code&gt; モジュールには、Node.jsコアの外部からアクセスすることを意図していないいくつかのAPIが含まれていました： &lt;code&gt;Socket.prototype._handle&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._receiving&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._bindState&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._queue&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt; 、および &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f59c7eb695d24e543b8bf8e05bcf31a8bb305b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP Datagram sockets.</source>
          <target state="translated">&lt;code&gt;dgram&lt;/code&gt; モジュールは、UDPデータグラムソケットの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="e49cb4f4a826367eb475ccde83a8070b593f0ec6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dictionary&lt;/code&gt; オプションが可能 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd508cc93689322f1c77c76b0ee7e9bb1098555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;dictionary&lt;/code&gt; オプションが可能 &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="3f15d09ab57639a0bbd963ccdc2d326537fb64d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; parameter is always required now.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; パラメータは常に必須になりました。</target>
        </trans-unit>
        <trans-unit id="ea73cbcffb6d3d2f70aa60b49f9b6128e82ab354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.promises&lt;/code&gt; API provides an alternative set of asynchronous DNS methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('dns').promises&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dns.promises&lt;/code&gt; の APIが返す非同期DNS法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには &lt;code&gt;require('dns').promises&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ebf732de7db900928d3336c4bb8043ad1b55b006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">&lt;code&gt;dns.setServers()&lt;/code&gt; DNSクエリが進行している状態でメソッドを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="51cfea11e5b64abbc7488234cdc0f7e71e59f882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns&lt;/code&gt; module contains functions belonging to two different categories:</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; モジュールには2つの異なるカテゴリに属する機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="db764debbedbbc99da97635f28c98936c8927a81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dnsPromises.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">&lt;code&gt;dnsPromises.setServers()&lt;/code&gt; DNSクエリが進行している状態でメソッドを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="679e20c13d5a3c302673244281bcd94fae6b6f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;domain&lt;/code&gt; module was not usable since it could not establish the required error handling hooks, because &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; had been called at an earlier point in time.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; ので、それは、フックを取り扱う必要なエラーを確立できませんでしたので、モジュールは使用できませんでした&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; は&lt;/a&gt;、過去の時点で呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="04d4ce38eb55867a1f7955e0fe695cba0c0dd698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; cannot be set to &lt;code&gt;false&lt;/code&gt; anymore due to a change in OpenSSL.</source>
          <target state="translated">&lt;code&gt;ecdhCurve&lt;/code&gt; は、に設定することができない &lt;code&gt;false&lt;/code&gt; のOpenSSLの変化に起因するもう。</target>
        </trans-unit>
        <trans-unit id="742b9fe51501d348db258ff24896c339ef5c45a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option can now be multiple &lt;code&gt;':'&lt;/code&gt; separated curve names or &lt;code&gt;'auto'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ecdhCurve&lt;/code&gt; のオプションは、複数の可能 &lt;code&gt;':'&lt;/code&gt; 曲線名または区切ら &lt;code&gt;'auto'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a892c664f54e9e71b866fc1d18e553d9a45ee0de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option to &lt;code&gt;tls.createSecureContext()&lt;/code&gt; and &lt;code&gt;tls.TLSSocket&lt;/code&gt; could be set to &lt;code&gt;false&lt;/code&gt; to disable ECDH entirely on the server only. This mode was deprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with the client and is now unsupported. Use the &lt;code&gt;ciphers&lt;/code&gt; parameter instead.</source>
          <target state="translated">&lt;code&gt;tls.createSecureContext()&lt;/code&gt; および &lt;code&gt;tls.TLSSocket&lt;/code&gt; の &lt;code&gt;ecdhCurve&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定して、サーバーでのみECDHを完全に無効にすることができます。このモードは、OpenSSL 1.1.0への移行とクライアントとの一貫性のために廃止され、現在はサポートされていません。代わりに &lt;code&gt;ciphers&lt;/code&gt; パラメータを使用してください。</target>
        </trans-unit>
        <trans-unit id="2946f4082b1f02b207349af665cbc73adc1f9552" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enableTrace&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;enableTrace&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="357c0a04ac7d9b56fc95efc24a727a047b1c2cd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; argument is optional and only applies when &lt;code&gt;chunk&lt;/code&gt; is a string. Defaults to &lt;code&gt;'utf8'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 引数はオプションで、ときにのみ適用される &lt;code&gt;chunk&lt;/code&gt; 文字列です。デフォルトは &lt;code&gt;'utf8'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef7385768a7559ac9db4c147901248a0ed8b3a9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option can now explicitly be set to &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; オプションが明示的に設定することができる &lt;code&gt;buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b949d0b7f0849d139bac2ef42775cb8a31f70428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 場合、このオプションは無視され &lt;code&gt;data&lt;/code&gt; バッファです。</target>
        </trans-unit>
        <trans-unit id="b82c726c3a2d2cdae71f022dd63da3f76e7b51f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f494a34f4cd91e5259dbe4178555f1b760f38c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">&lt;code&gt;endMark&lt;/code&gt; の引数は、任意の特定する必要があり&lt;em&gt;、既存の&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; をパフォーマンスタイムラインまたはタイムスタンプが提供するプロパティのいずれかに &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラス。指定された &lt;code&gt;endMark&lt;/code&gt; が存在しない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="035516361da0b390a8068076aae888f97126f601" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enter()&lt;/code&gt; method is plumbing used by the &lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;intercept()&lt;/code&gt; methods to set the active domain. It sets &lt;code&gt;domain.active&lt;/code&gt; and &lt;code&gt;process.domain&lt;/code&gt; to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see &lt;a href=&quot;#domain_domain_exit&quot;&gt;&lt;code&gt;domain.exit()&lt;/code&gt;&lt;/a&gt; for details on the domain stack). The call to &lt;code&gt;enter()&lt;/code&gt; delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">&lt;code&gt;enter()&lt;/code&gt; メソッドは、で使用される配管である &lt;code&gt;run()&lt;/code&gt; 、 &lt;code&gt;bind()&lt;/code&gt; 、及び &lt;code&gt;intercept()&lt;/code&gt; 活性ドメインを設定する方法。 &lt;code&gt;domain.active&lt;/code&gt; と &lt;code&gt;process.domain&lt;/code&gt; をドメインに設定し、ドメインをドメインモジュールが管理するドメインスタックに暗黙的にプッシュします（ドメインスタックの詳細については&lt;a href=&quot;#domain_domain_exit&quot;&gt; &lt;code&gt;domain.exit()&lt;/code&gt; &lt;/a&gt;を参照）。呼び出し &lt;code&gt;enter()&lt;/code&gt; 非同期呼び出しとドメインに結合しているI / O操作のチェーンの始まりを区切ります。</target>
        </trans-unit>
        <trans-unit id="878c228a3891a931f577debd9834c0775a12f11d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entryType&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to &lt;code&gt;'http2'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; の &lt;code&gt;entryType&lt;/code&gt; プロパティは &lt;code&gt;'http2'&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="617453f3174a055bf920718631ceba8eb76b661c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eq&lt;/code&gt; parameter may now have a length of more than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eq&lt;/code&gt; パラメータは、今以上の長さを持っていることが &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64d6d95c1dd980f5b3c2e4b04d2297f9d27e6386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js Error Codes&lt;/a&gt; for details about specific codes.</source>
          <target state="translated">&lt;code&gt;error.code&lt;/code&gt; のプロパティには、エラーの種類を識別する文字列ラベルです。 &lt;code&gt;error.code&lt;/code&gt; は、エラーを識別する最も安定した方法です。Node.jsのメジャーバージョン間でのみ変更されます。対照的に、 &lt;code&gt;error.message&lt;/code&gt; 文字列はNode.jsのすべてのバージョン間で変更される可能性があります。参照してください&lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.jsのエラーコード&lt;/a&gt;の特定のコードの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="3da77ca9b7d80cdbbc4b9941df09bb518dfe59ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string representing the error code.</source>
          <target state="translated">&lt;code&gt;error.code&lt;/code&gt; のプロパティには、エラーコードを表す文字列です。</target>
        </trans-unit>
        <trans-unit id="c17e79c636fe0fafffb682716e2b3876c8f191fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.errno&lt;/code&gt; property is a number or a string. If it is a number, it is a negative value which corresponds to the error code defined in &lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt;&lt;code&gt;libuv Error handling&lt;/code&gt;&lt;/a&gt;. See the libuv &lt;code&gt;errno.h&lt;/code&gt; header file (&lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; in the Node.js source tree) for details. In case of a string, it is the same as &lt;code&gt;error.code&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error.errno&lt;/code&gt; のプロパティには、数値または文字列です。数値の場合は、&lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt; &lt;code&gt;libuv Error handling&lt;/code&gt; &lt;/a&gt;定義されたエラーコードに対応する負の値です。詳細については、libuv &lt;code&gt;errno.h&lt;/code&gt; ヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; ）を参照してください。文字列の場合、 &lt;code&gt;error.code&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="c80fb4345ad46d4df0a661a74199f2ed642ab2a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.message&lt;/code&gt; property is the string description of the error as set by calling &lt;code&gt;new Error(message)&lt;/code&gt;. The &lt;code&gt;message&lt;/code&gt; passed to the constructor will also appear in the first line of the stack trace of the &lt;code&gt;Error&lt;/code&gt;, however changing this property after the &lt;code&gt;Error&lt;/code&gt; object is created &lt;em&gt;may not&lt;/em&gt; change the first line of the stack trace (for example, when &lt;code&gt;error.stack&lt;/code&gt; is read before this property is changed).</source>
          <target state="translated">&lt;code&gt;error.message&lt;/code&gt; プロパティを呼び出すことにより、セットとして、エラーの内容を文字列である &lt;code&gt;new Error(message)&lt;/code&gt; 。 &lt;code&gt;message&lt;/code&gt; コンストラクタに渡されたものスタックトレースの1行目に表示されます &lt;code&gt;Error&lt;/code&gt; が後にこのプロパティを変更し、 &lt;code&gt;Error&lt;/code&gt; オブジェクトが作成されることは&lt;em&gt;ないかもしれない&lt;/em&gt;とき、例えばスタックトレース（の最初の行を変更 &lt;code&gt;error.stack&lt;/code&gt; がありますこのプロパティが変更される前にお読みください）。</target>
        </trans-unit>
        <trans-unit id="25a415e8d164701e31d0b96126983bc43065fc68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.stack&lt;/code&gt; property is a string describing the point in the code at which the &lt;code&gt;Error&lt;/code&gt; was instantiated.</source>
          <target state="translated">&lt;code&gt;error.stack&lt;/code&gt; のプロパティはれるコード内のポイントを説明する文字列で &lt;code&gt;Error&lt;/code&gt; インスタンス化されました。</target>
        </trans-unit>
        <trans-unit id="d5acdef4005210a3526de3c7d5bda753b7e60335" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</source>
          <target state="translated">&lt;code&gt;error.syscall&lt;/code&gt; プロパティが記述した文字列である&lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;システムコール&lt;/a&gt;に失敗しました。</target>
        </trans-unit>
        <trans-unit id="a80d7026184c56cb488e8de9fb1edb33c83fa941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can be an object containing regular expressions now.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは現在、正規表現を含むオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="23ad1e5536984136751e24c5beb50e064c8e1314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an arrow function.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは現在、矢印関数とすることができます。</target>
        </trans-unit>
        <trans-unit id="b920ead4094b0b12297c0fe4c240d5ed11034b0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an object as well.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは、今だけでなく、オブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="2075e684d8f10b167c2b70e099103394abc86151" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. It is important to keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</source>
          <target state="translated">&lt;code&gt;eventEmitter.emit()&lt;/code&gt; メソッドは、引数の任意のセットは、リスナー関数に渡すことを可能にします。通常のリスナー関数が呼び出されると、標準の &lt;code&gt;this&lt;/code&gt; キーワードが意図的に設定され、リスナーが接続されている &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスを参照することに注意してください。</target>
        </trans-unit>
        <trans-unit id="8fd11c7fea7eabceaea846d7b9ea1f99d450ca58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execArgv&lt;/code&gt; option passed to the &lt;code&gt;Worker&lt;/code&gt; constructor contains invalid flags.</source>
          <target state="translated">&lt;code&gt;execArgv&lt;/code&gt; のに渡されたオプション &lt;code&gt;Worker&lt;/code&gt; コンストラクタは無効なフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="e789f0770a175e554087330639eaebd93b4880ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; および &lt;code&gt;complete&lt;/code&gt; コールバックは、それは、それぞれのタスクを完了したときにexecutorが実行する準備ができたときに呼び出されます関数です。</target>
        </trans-unit>
        <trans-unit id="0d3d4486e4b536fc372bcf42a2a03816737fda87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in &lt;code&gt;complete&lt;/code&gt; callback instead. Avoid using the &lt;code&gt;napi_env&lt;/code&gt; parameter in the execute callback as it will likely execute JavaScript.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 機能では、JavaScriptの実行またはJavaScriptオブジェクトとの相互作用が生じる可能性が任意のN-APIの呼び出しを行うことは避けてください。ほとんどの場合、N-API呼び出しを行う必要があるコードは、代わりに &lt;code&gt;complete&lt;/code&gt; コールバックで行う必要があります。JavaScriptを実行する可能性が高いため、実行コールバックで &lt;code&gt;napi_env&lt;/code&gt; パラメータを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6d9348413b98a81a0cf3dd07ab0db2e379200c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;existingPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;existingPath&lt;/code&gt; と &lt;code&gt;newPath&lt;/code&gt; パラメータはWHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="77a9639aa0f385798a0047ae8b69bbc802072163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit()&lt;/code&gt; method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to &lt;code&gt;exit()&lt;/code&gt; delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">&lt;code&gt;exit()&lt;/code&gt; メソッドは、ドメインスタックからそれをポップ、現在のドメインを終了します。実行が非同期呼び出しの異なるチェーンのコンテキストに切り替わるときは常に、現在のドメインが終了していることを確認することが重要です。呼び出し &lt;code&gt;exit()&lt;/code&gt; 区切るのいずれかの終了または非同期呼び出しとドメインにバインドされたI / O操作のチェーンの中断。</target>
        </trans-unit>
        <trans-unit id="48733cf26ae9be875c167b92318f9677041ff285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; variable is available within a module's file-level scope, and is assigned the value of &lt;code&gt;module.exports&lt;/code&gt; before the module is evaluated.</source>
          <target state="translated">&lt;code&gt;exports&lt;/code&gt; 変数は、モジュールのファイルレベルの範囲内で利用可能であり、値が割り当てられる &lt;code&gt;module.exports&lt;/code&gt; はをモジュールが評価される前に。</target>
        </trans-unit>
        <trans-unit id="d4838da588ca8557b0914d534154a3d490886ef3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; パラメータは現在、ファイルディスクリプタすることができます。</target>
        </trans-unit>
        <trans-unit id="22d5077a20466a9b9f6e10fc0c1adc2b51f64e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; argument may not be provided depending on operating system support. If &lt;code&gt;filename&lt;/code&gt; is provided, it will be provided as a &lt;code&gt;Buffer&lt;/code&gt; if &lt;code&gt;fs.watch()&lt;/code&gt; is called with its &lt;code&gt;encoding&lt;/code&gt; option set to &lt;code&gt;'buffer'&lt;/code&gt;, otherwise &lt;code&gt;filename&lt;/code&gt; will be a UTF-8 string.</source>
          <target state="translated">オペレーティングシステムのサポートによっては、 &lt;code&gt;filename&lt;/code&gt; 引数が提供されない場合があります。場合 &lt;code&gt;filename&lt;/code&gt; 提供され、それはのように提供される &lt;code&gt;Buffer&lt;/code&gt; 場合 &lt;code&gt;fs.watch()&lt;/code&gt; は、そのと呼ばれる &lt;code&gt;encoding&lt;/code&gt; のオプションセット &lt;code&gt;'buffer'&lt;/code&gt; 、そうでない場合 &lt;code&gt;filename&lt;/code&gt; UTF-8文字列です。</target>
        </trans-unit>
        <trans-unit id="a28f201faddf9b917438ff36a93787eb3029e6b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="4a5de3e0e6bce547b220fb8ea3feb03044f739ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finishFlush&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;finishFlush&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="2d229be81ffd2afb7635ff4b2f3c0698eb23aefb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finished&lt;/code&gt; API is promisify-able as well;</source>
          <target state="translated">&lt;code&gt;finished&lt;/code&gt; APIは、同様にpromisify-ことができます。</target>
        </trans-unit>
        <trans-unit id="706527d904b2fb4969305ef115835923a10d6a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an integer that allows to specify dlopen behavior. See the &lt;a href=&quot;os#os_dlopen_constants&quot;&gt;&lt;code&gt;os.constants.dlopen&lt;/code&gt;&lt;/a&gt; documentation for details.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数はdlopenの動作を指定することを可能にする整数です。詳細については、&lt;a href=&quot;os#os_dlopen_constants&quot;&gt; &lt;code&gt;os.constants.dlopen&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="27367d1d92b5697db0227446413f596428537264" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is now optional and defaults to &lt;code&gt;'r'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数は、今までオプションで、デフォルトである &lt;code&gt;'r'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09526397e956ee47b394baf26977ccd216515483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is now only taken as such if it actually contains format specifiers.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 、それが実際に書式指定子が含まれている場合、引数は今だけなとしています。</target>
        </trans-unit>
        <trans-unit id="7bc8c5937b73a750bd5e5600d26b1093e5e39a91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt; or &lt;code&gt;'uncompressed'&lt;/code&gt;. If &lt;code&gt;format&lt;/code&gt; is not specified the point will be returned in &lt;code&gt;'uncompressed'&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数指定はコードポイントとすることができる &lt;code&gt;'compressed'&lt;/code&gt; または &lt;code&gt;'uncompressed'&lt;/code&gt; 。 &lt;code&gt;format&lt;/code&gt; が指定されていない場合、ポイントは &lt;code&gt;'uncompressed'&lt;/code&gt; 形式で返されます。</target>
        </trans-unit>
        <trans-unit id="97b07dd8ca3daf75d2585bd7953e09981f85d3b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt; or &lt;code&gt;'uncompressed'&lt;/code&gt;. If &lt;code&gt;format&lt;/code&gt; is not specified, the point will be returned in &lt;code&gt;'uncompressed'&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数指定はコードポイントとすることができる &lt;code&gt;'compressed'&lt;/code&gt; または &lt;code&gt;'uncompressed'&lt;/code&gt; 。 &lt;code&gt;format&lt;/code&gt; が指定されていない場合、ポイントは &lt;code&gt;'uncompressed'&lt;/code&gt; 形式で返されます。</target>
        </trans-unit>
        <trans-unit id="512d1e9cf419c61f987590abd4eda55a0aaece8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.SyncWriteStream&lt;/code&gt; class was never intended to be a publicly accessible API and has been removed. No alternative API is available. Please use a userland alternative.</source>
          <target state="translated">&lt;code&gt;fs.SyncWriteStream&lt;/code&gt; のクラスでは、公的にアクセス可能なAPIであることを意図していなかった、削除されました。代替APIはありません。別のユーザーランドを使用してください。</target>
        </trans-unit>
        <trans-unit id="3b3969f60cc471802155198406af45024556947d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt;&lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator (&lt;code&gt;require('path').sep&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;fs.mkdtemp()&lt;/code&gt; メソッドは、直接6つのランダムに選択された文字を追加します &lt;code&gt;prefix&lt;/code&gt; 文字列。たとえば、ディレクトリ &lt;code&gt;/tmp&lt;/code&gt; を指定した場合、 &lt;code&gt;/tmp&lt;/code&gt; &lt;em&gt;内に&lt;/em&gt;一時ディレクトリを作成する場合、 &lt;code&gt;prefix&lt;/code&gt; はプラットフォーム固有のパス区切り文字で終了する &lt;code&gt;require('path').sep&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b43021409dbaf79c3301901e3b3cddb0257dfdc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.open()&lt;/code&gt; method is used to allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.</source>
          <target state="translated">&lt;code&gt;fs.open()&lt;/code&gt; メソッドは、新しいファイル記述子を割り当てるために使用されます。割り当てられると、ファイル記述子は、ファイルに関するデータの読み取り、書き込み、またはファイルに関する情報の要求に使用できます。</target>
        </trans-unit>
        <trans-unit id="5050f06a70041a240f048ae3b245e2727e08d273" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.promises&lt;/code&gt; API provides an alternative set of asynchronous file system methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('fs').promises&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fs.promises&lt;/code&gt; の APIが返す非同期ファイルシステム方法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには &lt;code&gt;require('fs').promises&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="69891f9554e4820439907262af47444c9b3b47fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.readFile()&lt;/code&gt; function buffers the entire file. To minimize memory costs, when possible prefer streaming via &lt;code&gt;fs.createReadStream()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fs.readFile()&lt;/code&gt; 関数は、ファイル全体をバッファします。メモリコストを最小限に抑えるために、可能な場合は &lt;code&gt;fs.createReadStream()&lt;/code&gt; によるストリーミングを優先します。</target>
        </trans-unit>
        <trans-unit id="71b074ffe9a2bdeb0c4bfd802e18206b5fbec371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.watch&lt;/code&gt; API is not 100% consistent across platforms, and is unavailable in some situations.</source>
          <target state="translated">&lt;code&gt;fs.watch&lt;/code&gt; の APIは、プラットフォーム間で100％一致していない、といくつかの状況では使用できません。</target>
        </trans-unit>
        <trans-unit id="d74ffda80caae1884220c03a1ff7a7eb0f46a69d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs&lt;/code&gt; module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.</source>
          <target state="translated">&lt;code&gt;fs&lt;/code&gt; モジュール密接標準POSIX関数の周りモデル化された方法でファイルシステムと対話するためのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="bbd0e2e565c661b9a3e00926ebd169d183ba557f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt;&lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator (&lt;code&gt;require('path').sep&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; メソッドは、直接6つのランダムに選択された文字を追加します &lt;code&gt;prefix&lt;/code&gt; 文字列。たとえば、ディレクトリ &lt;code&gt;/tmp&lt;/code&gt; を指定した場合、 &lt;code&gt;/tmp&lt;/code&gt; &lt;em&gt;内に&lt;/em&gt;一時ディレクトリを作成する場合、 &lt;code&gt;prefix&lt;/code&gt; はプラットフォーム固有のパス区切り文字で終了する &lt;code&gt;require('path').sep&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e6bed20438607157322dcd80d8999ccaf445c93a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generateKeyPair&lt;/code&gt; and &lt;code&gt;generateKeyPairSync&lt;/code&gt; functions now produce key objects if no encoding was specified.</source>
          <target state="translated">&lt;code&gt;generateKeyPair&lt;/code&gt; と &lt;code&gt;generateKeyPairSync&lt;/code&gt; エンコーディングが指定されていない場合の機能は現在、主要なオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="cf3b6cd25ee8891e4d83936876a193907e6a7ee6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generator&lt;/code&gt; argument can be a number, string, or &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;generator&lt;/code&gt; is not specified, the value &lt;code&gt;2&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;generator&lt;/code&gt; 引数は、数値、文字列、またはことができる&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;generator&lt;/code&gt; が指定されていない場合、値 &lt;code&gt;2&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="7fb03f9df2774a668f92936850f17f31a33d9c3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getters&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;getters&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="c414c011c27eaa196a1f2f35222b45256f28f22a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;groups&lt;/code&gt; array can contain numeric group IDs, group names or both.</source>
          <target state="translated">&lt;code&gt;groups&lt;/code&gt; 配列は、数値のグループID、グループ名、またはその両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="3a833b425252dc97918bfb21e6854a976c340208" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; object can be either a server, a socket (anything with an underlying &lt;code&gt;_handle&lt;/code&gt; member), or an object with an &lt;code&gt;fd&lt;/code&gt; member that is a valid file descriptor.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; オブジェクトは、サーバー、ソケット（基礎となると何のいずれかになります &lt;code&gt;_handle&lt;/code&gt; メンバー）、または持つオブジェクト &lt;code&gt;fd&lt;/code&gt; 有効なファイルディスクリプタであるメンバー。</target>
        </trans-unit>
        <trans-unit id="5fe58b45e79c330bacba8ef6c3d083eec4ad1d42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash&lt;/code&gt; property is the fragment identifier portion of the URL including the leading &lt;code&gt;#&lt;/code&gt; character.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; プロパティは、大手を含むURLのフラグメント識別子部分である &lt;code&gt;#&lt;/code&gt; の文字。</target>
        </trans-unit>
        <trans-unit id="9b971a2c3fa7c4ee351bc0962b6dd290b13d2a41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option defaults to &lt;code&gt;0&lt;/code&gt; in all cases now. Previously, in the absence of the &lt;code&gt;family&lt;/code&gt; option it would default to &lt;code&gt;dns.ADDRCONFIG | dns.V4MAPPED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; にオプションのデフォルトは &lt;code&gt;0&lt;/code&gt; になりましたすべてのケースで。以前は、 &lt;code&gt;family&lt;/code&gt; オプションがない場合、デフォルトで &lt;code&gt;dns.ADDRCONFIG | dns.V4MAPPED&lt;/code&gt; 設定されていました。dns.V4MAPPED。</target>
        </trans-unit>
        <trans-unit id="18653303895ce097a5504ae43d5170d72df3c34a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="053e6bd05fa0fbb307a5d54eb6487d94b8a85e2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="04278f1b07d014dfdc021e46e970ec2ad3bb52d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;historySize&lt;/code&gt; option can be &lt;code&gt;0&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;historySize&lt;/code&gt; のオプションが可能 &lt;code&gt;0&lt;/code&gt; になりました。</target>
        </trans-unit>
        <trans-unit id="bd637527f354d50e0755926a886a0e485028e79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="2749f6daae838de15678cf4dd488bcb1358def17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; property is the full lower-cased host portion of the URL, including the &lt;code&gt;port&lt;/code&gt; if specified.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; プロパティには、URLの完全な、小文字のホスト部分である &lt;code&gt;port&lt;/code&gt; を指定した場合。</target>
        </trans-unit>
        <trans-unit id="6c0c38e22555230472f06d34eb68eaf5ce24d077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; property is the lower-cased host name portion of the &lt;code&gt;host&lt;/code&gt; component &lt;em&gt;without&lt;/em&gt; the &lt;code&gt;port&lt;/code&gt; included.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; プロパティは、下部外装ホスト名部分である &lt;code&gt;host&lt;/code&gt; コンポーネント&lt;em&gt;なし&lt;/em&gt; &lt;code&gt;port&lt;/code&gt; 含ま。</target>
        </trans-unit>
        <trans-unit id="998060cae450269301b689074185c6d9c3eb67ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;href&lt;/code&gt; property is the full URL string that was parsed with both the &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; components converted to lower-case.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; プロパティは両方と解析された完全なURL文字列である &lt;code&gt;protocol&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; 構成要素は、小文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="030f78ddaf21d184576156325eba98bebd2bd148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2.getDefaultSettings()&lt;/code&gt;, &lt;code&gt;http2.getPackedSettings()&lt;/code&gt;, &lt;code&gt;http2.createServer()&lt;/code&gt;, &lt;code&gt;http2.createSecureServer()&lt;/code&gt;, &lt;code&gt;http2session.settings()&lt;/code&gt;, &lt;code&gt;http2session.localSettings&lt;/code&gt;, and &lt;code&gt;http2session.remoteSettings&lt;/code&gt; APIs either return or receive as input an object that defines configuration settings for an &lt;code&gt;Http2Session&lt;/code&gt; object. These objects are ordinary JavaScript objects containing the following properties.</source>
          <target state="translated">&lt;code&gt;http2.getDefaultSettings()&lt;/code&gt; 、 &lt;code&gt;http2.getPackedSettings()&lt;/code&gt; 、 &lt;code&gt;http2.createServer()&lt;/code&gt; 、 &lt;code&gt;http2.createSecureServer()&lt;/code&gt; 、 &lt;code&gt;http2session.settings()&lt;/code&gt; 、 &lt;code&gt;http2session.localSettings&lt;/code&gt; 、及び &lt;code&gt;http2session.remoteSettings&lt;/code&gt; のAPIリターンいずれかまたは入力として定義するオブジェクトを受け取ります &lt;code&gt;Http2Session&lt;/code&gt; オブジェクトの構成設定。これらのオブジェクトは、次のプロパティを含む通常のJavaScriptオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="49f7803f945b28f0689831e69895b549945bf369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2&lt;/code&gt; Core API is much more symmetric between client and server than the &lt;code&gt;http&lt;/code&gt; API. For instance, most events, like &lt;code&gt;'error'&lt;/code&gt;, &lt;code&gt;'connect'&lt;/code&gt; and &lt;code&gt;'stream'&lt;/code&gt;, can be emitted either by client-side code or server-side code.</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; コアAPIは、はるかに対称性よりも、クライアントとサーバの間で &lt;code&gt;http&lt;/code&gt; API。たとえば、 &lt;code&gt;'error'&lt;/code&gt; 、 &lt;code&gt;'connect'&lt;/code&gt; 、 &lt;code&gt;'stream'&lt;/code&gt; などのほとんどのイベントは、クライアント側コードまたはサーバー側コードのいずれかによって発行できます。</target>
        </trans-unit>
        <trans-unit id="17b1e503059e1af4f65e309d49229e66e8fc0e50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2&lt;/code&gt; module provides an implementation of the &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP/2&lt;/a&gt; protocol. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; モジュールのインプリメンテーションを提供&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP / 2&lt;/a&gt;プロトコル。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="221ef6633a5b5159ca7a2ec64108549b9b1ee05c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2session.type&lt;/code&gt; will be equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_SERVER&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance is a server, and &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; if the instance is a client.</source>
          <target state="translated">&lt;code&gt;http2session.type&lt;/code&gt; は等しくなります &lt;code&gt;http2.constants.NGHTTP2_SESSION_SERVER&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスがサーバである、と &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; インスタンスがクライアントである場合。</target>
        </trans-unit>
        <trans-unit id="de2ccc067c77f440a48986ade62790f284e7b4db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.close()&lt;/code&gt; method is called, and pending data has been read.</source>
          <target state="translated">&lt;code&gt;http2stream.close()&lt;/code&gt; メソッドが呼び出され、保留中のデータが読み込まれました。</target>
        </trans-unit>
        <trans-unit id="77560b2b0d8bbfb538a8a3ebe0e37ff202a3f8fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.destroy()&lt;/code&gt; or &lt;code&gt;http2session.destroy()&lt;/code&gt; methods are called.</source>
          <target state="translated">&lt;code&gt;http2stream.destroy()&lt;/code&gt; または &lt;code&gt;http2session.destroy()&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c91e96a400ed5b707a5db055d844cc0bc3b12ca9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.pushStream()&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;http2stream.pushStream()&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c24866f2679c9a1b2b7618cf886b9fc0b058641d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method cannot be called until after the &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted on an &lt;code&gt;Http2Stream&lt;/code&gt; object. The &lt;code&gt;'wantTrailers'&lt;/code&gt; event will only be emitted if the &lt;code&gt;waitForTrailers&lt;/code&gt; option is set for the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; メソッドが完了するまで呼び出すことはできません &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが上に放出される &lt;code&gt;Http2Stream&lt;/code&gt; オブジェクト。 &lt;code&gt;'wantTrailers'&lt;/code&gt; 場合、イベントにのみ放出される &lt;code&gt;waitForTrailers&lt;/code&gt; のオプションが設定されている &lt;code&gt;Http2Stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="358c32f4bc69cf40fd7e6290a30048c00cc82993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; and &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; properties are deprecated. Use one of the public methods (e.g. &lt;code&gt;OutgoingMessage.prototype.getHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.getHeaders()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.getHeaderNames()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.hasHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.removeHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.setHeader()&lt;/code&gt;) for working with outgoing headers.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; モジュール &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; と &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; プロパティが廃止されました。パブリックメソッドの1つを使用します（例： &lt;code&gt;OutgoingMessage.prototype.getHeader()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.getHeaders()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.getHeaderNames()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.hasHeader()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.removeHeader()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.setHeader()&lt;/code&gt; ）。発信ヘッダーを操作します。</target>
        </trans-unit>
        <trans-unit id="637eb8d39fd696e261d53ed71950da5b93479796" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;OutgoingMessage.prototype._renderHeaders()&lt;/code&gt; API is deprecated.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; モジュール &lt;code&gt;OutgoingMessage.prototype._renderHeaders()&lt;/code&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="646d914a75a6436a127ce9860c30e69de08491ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; API is deprecated. Please use &lt;code&gt;ServerResponse.prototype.writeHead()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; モジュール &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; APIは推奨されません。代わりに &lt;code&gt;ServerResponse.prototype.writeHead()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e7261c4b49ac7812caefc611e5afe4d784b89feb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;icu&lt;/code&gt; property is now supported.</source>
          <target state="translated">&lt;code&gt;icu&lt;/code&gt; プロパティがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="e7890dd47100cfd73eb85b14133b651e0037d68a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreErrors&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;ignoreErrors&lt;/code&gt; がのオプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="4ac2e36d27344790e2460b7911af062bfb314225" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; metaproperty is an &lt;code&gt;Object&lt;/code&gt; that contains the following property:</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; のメタプロパティは、 &lt;code&gt;Object&lt;/code&gt; 次のプロパティが含まれています。</target>
        </trans-unit>
        <trans-unit id="49a0c2f363f6d983a8eada0b6fedc41926fc28c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; hook will trigger when an &lt;code&gt;AsyncResource&lt;/code&gt; is instantiated.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 時にフックがトリガーされます &lt;code&gt;AsyncResource&lt;/code&gt; がインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="db4a0b3a2e021f4bdfad5bc1d5a6e56641914872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; option can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; オプションが可能 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af5c3e4a87313354ccf9f4aa00c92f59b988d2c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; option can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; オプションは任意のものとすることができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df7edb459abfc8207448861fb6d62addd3407892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream is not paused and receives the &lt;code&gt;'SIGCONT'&lt;/code&gt; event. (See events &lt;a href=&quot;readline#readline_event_sigtstp&quot;&gt;&lt;code&gt;'SIGTSTP'&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;readline#readline_event_sigcont&quot;&gt;&lt;code&gt;'SIGCONT'&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを一時停止し、受信されていない &lt;code&gt;'SIGCONT'&lt;/code&gt; イベントを。（イベント&lt;a href=&quot;readline#readline_event_sigtstp&quot;&gt; &lt;code&gt;'SIGTSTP'&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;readline#readline_event_sigcont&quot;&gt; &lt;code&gt;'SIGCONT'&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3ee5822dcfd304c76a5ffa2f5d4b728db3799dc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream is paused.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームが一時停止されています。</target>
        </trans-unit>
        <trans-unit id="2df9f73cfc483053aab32bfe5533e1a25c271a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; to signal &lt;code&gt;SIGINT&lt;/code&gt; and there is no &lt;code&gt;'SIGINT'&lt;/code&gt; event listener registered on the &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを受信する &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 知らせるために &lt;code&gt;SIGINT&lt;/code&gt; をなしある &lt;code&gt;'SIGINT'&lt;/code&gt; に登録されたイベントリスナー &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスが。</target>
        </trans-unit>
        <trans-unit id="19ffd24b7be2889cd9b67fc0e30774377bb486cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to signal end-of-transmission (EOT);</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを受信する &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; 信号にエンドオブトランスミッション（EOT）。</target>
        </trans-unit>
        <trans-unit id="fb307dffe6f05523d47993892fbcc5b1b86d93e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives its &lt;code&gt;'end'&lt;/code&gt; event;</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームは、その受信 &lt;code&gt;'end'&lt;/code&gt; イベントを、</target>
        </trans-unit>
        <trans-unit id="d04877e5405a4dc1c1a71d8fe62cd536eaf0588e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspectOptions&lt;/code&gt; option is introduced.</source>
          <target state="translated">&lt;code&gt;inspectOptions&lt;/code&gt; オプションが導入されます。</target>
        </trans-unit>
        <trans-unit id="c8e3f99c777e534b0710502a380d35e942192366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspectPort&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;inspectPort&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f2a23f09be367ac5c32f81df1e0be355bca0f3ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector.Session&lt;/code&gt; is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.</source>
          <target state="translated">&lt;code&gt;inspector.Session&lt;/code&gt; は V8インスペクタのバックエンドにメッセージをディスパッチし、メッセージ応答と通知を受信するために使用されています。</target>
        </trans-unit>
        <trans-unit id="1673d36b6d4ff5339c7cdf1c8ca2771a52789638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; is not active when &lt;code&gt;inspector.waitForDebugger()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; アクティブでないときである &lt;code&gt;inspector.waitForDebugger()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="8f150b7dcc586beef8809bc0c329c872df4c6450" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; module is not available for use.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールは使用できません。</target>
        </trans-unit>
        <trans-unit id="43c935ccd266c90668fafe79ecf59bfac32471dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; module provides an API for interacting with the V8 inspector.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールは、V8インスペクタと対話するためのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="9a3568429cf6b04a52b84c92f6edb033b6d2d0fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ipv6Only&lt;/code&gt; option is supported.</source>
          <target state="translated">&lt;code&gt;ipv6Only&lt;/code&gt; のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="eabb45d71a6ceccea5ae6288c84a3112b1682ea5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;issuer&lt;/code&gt; can be &lt;code&gt;null&lt;/code&gt; if the certificate is either self-signed or the issuer is not in the root certificates list. (An issuer may be provided via the &lt;code&gt;ca&lt;/code&gt; option when establishing the TLS connection.)</source>
          <target state="translated">&lt;code&gt;issuer&lt;/code&gt; することができ &lt;code&gt;null&lt;/code&gt; 証明書がいずれかの自己署名されているか、発行者は、ルート証明書のリストにない場合。（発行者は、TLS接続の確立時に &lt;code&gt;ca&lt;/code&gt; オプションを介して提供される場合があります。）</target>
        </trans-unit>
        <trans-unit id="bfbc853b74447076da49fbe1f1ba5e8d12545de7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; 引数には、できるだけ高いとして設定された数でなければなりません。反復回数が多いほど、派生キーの安全性は高くなりますが、完了するまでの時間が長くなります。</target>
        </trans-unit>
        <trans-unit id="03868ecb29ac859681e14576c1131d0017356374" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iv&lt;/code&gt; parameter may now be &lt;code&gt;null&lt;/code&gt; for ciphers which do not need an initialization vector.</source>
          <target state="translated">&lt;code&gt;iv&lt;/code&gt; パラメータは今かもしれ &lt;code&gt;null&lt;/code&gt; 初期化ベクトルを必要としない暗号の。</target>
        </trans-unit>
        <trans-unit id="8921fa68940edce16e188119827079689fd8187d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a &lt;code&gt;KeyObject&lt;/code&gt; with type &lt;code&gt;private&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の引数は、今することができ &lt;code&gt;KeyObject&lt;/code&gt; タイプと &lt;code&gt;private&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cafd672d3c4665a35d1633dd54172928bcbe5641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a &lt;code&gt;KeyObject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の引数は、今することができ &lt;code&gt;KeyObject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f026eccc533fce80be766457d2fbda4c0a108025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a private key.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 引数は今、秘密鍵することができます。</target>
        </trans-unit>
        <trans-unit id="b9014c3f8163dbd4b28bba211ee7ff2c9d8473c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; is the HMAC key used to generate the cryptographic HMAC hash. If it is a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt;, its type must be &lt;code&gt;secret&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 暗号HMACハッシュを生成するために使用されるHMACキーです。&lt;a href=&quot;#crypto_class_keyobject&quot;&gt; &lt;code&gt;KeyObject&lt;/code&gt; の&lt;/a&gt;場合、その型は &lt;code&gt;secret&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="29ef7b348c30af429329ae739855eee669bfa054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; is the raw key used by the &lt;code&gt;algorithm&lt;/code&gt; and &lt;code&gt;iv&lt;/code&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;initialization vector&lt;/a&gt;. Both arguments must be &lt;code&gt;'utf8'&lt;/code&gt; encoded strings, &lt;a href=&quot;buffer&quot;&gt;Buffers&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;s. The &lt;code&gt;key&lt;/code&gt; may optionally be a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;secret&lt;/code&gt;. If the cipher does not need an initialization vector, &lt;code&gt;iv&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; で使用される生の鍵である &lt;code&gt;algorithm&lt;/code&gt; と &lt;code&gt;iv&lt;/code&gt; ある&lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;初期化ベクトル&lt;/a&gt;。両方の引数は、 &lt;code&gt;'utf8'&lt;/code&gt; エンコードされた文字列、&lt;a href=&quot;buffer&quot;&gt;Buffers&lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; でなければなりません。 &lt;code&gt;key&lt;/code&gt; 、必要に応じかもしれ&lt;a href=&quot;#crypto_class_keyobject&quot;&gt; &lt;code&gt;KeyObject&lt;/code&gt; &lt;/a&gt;型の &lt;code&gt;secret&lt;/code&gt; 。暗号が初期化ベクトルを必要としない場合、 &lt;code&gt;iv&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; になることがあります。</target>
        </trans-unit>
        <trans-unit id="bafa8e5f7656a13a7f0bf36422494a865effaa99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted on a client &lt;code&gt;tls.TLSSocket&lt;/code&gt; when key material is generated or received by the socket. This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times, before or after the handshake completes.</source>
          <target state="translated">&lt;code&gt;keylog&lt;/code&gt; イベントは、クライアントに照射さ &lt;code&gt;tls.TLSSocket&lt;/code&gt; 鍵材料がソケットによって生成または受信されたとき。このキー情報は、キャプチャされたTLSトラフィックを復号化できるため、デバッグ用に保存できます。ハンドシェイクの完了前または完了後に、複数回発行される場合があります。</target>
        </trans-unit>
        <trans-unit id="1b5c9959237d932a1dd90e1d5e7ccd6afbcaa1bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted when key material is generated or received by a connection to this server (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.</source>
          <target state="translated">&lt;code&gt;keylog&lt;/code&gt; 鍵材料は（典型的には、ハンドシェイクの前に完了するが、必ずしもた）このサーバに接続することによって生成または受信されたときにイベントが発せられます。このキー情報は、キャプチャされたTLSトラフィックを復号化できるため、デバッグ用に保存できます。ソケットごとに複数回発行される場合があります。</target>
        </trans-unit>
        <trans-unit id="8e25eb3ce4cc53afe7df92ff2547e9ea6c1abd85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; parameter can now be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; パラメータは、今することができ &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8474fcae614a88cc1859b34f296796c04ff4a24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; gets two arguments the current stat object and the previous stat object:</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 二つの引数、現在のstatオブジェクトと前回のstatオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="b95fd1fb410073e13c6931880070a9ae7e41ec9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0661e96f6a1fa8202e0885fe2e819d379f5b3c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; option is supported.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; オプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="a263c4d70f3c9893353d874e8b88eb6a65c7562d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lts&lt;/code&gt; property is now supported.</source>
          <target state="translated">&lt;code&gt;lts&lt;/code&gt; プロパティがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="b5b4dafcc9dd09a489be54c49427119ae4eacbe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxArrayLength&lt;/code&gt; option is supported now; in particular, long arrays are truncated by default.</source>
          <target state="translated">&lt;code&gt;maxArrayLength&lt;/code&gt; のオプションがサポートされるようになりました。特に、長い配列はデフォルトで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="9f0e93d57c97db265be6481e8ebb1720a769436b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxBuffer&lt;/code&gt; option specifies the largest number of bytes allowed on &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;. If this value is exceeded, then the child process is terminated. This impacts output that includes multibyte character encodings such as UTF-8 or UTF-16. For instance, &lt;code&gt;console.log('中文测试')&lt;/code&gt; will send 13 UTF-8 encoded bytes to &lt;code&gt;stdout&lt;/code&gt; although there are only 4 characters.</source>
          <target state="translated">&lt;code&gt;maxBuffer&lt;/code&gt; のオプションは、上で許可されたバイトの最大数を指定する &lt;code&gt;stdout&lt;/code&gt; や &lt;code&gt;stderr&lt;/code&gt; 。この値を超えると、子プロセスは終了します。これは、UTF-8やUTF-16などのマルチバイト文字エンコーディングを含む出力に影響します。たとえば、 &lt;code&gt;console.log('中文测试')&lt;/code&gt; は、UTF-8でエンコードされた13バイトを &lt;code&gt;stdout&lt;/code&gt; に送信しますが、4文字しかありません。</target>
        </trans-unit>
        <trans-unit id="bdf828d79d9c65c3d2308f93d966b829b5353cb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxHeaderListSize&lt;/code&gt; setting is now strictly enforced.</source>
          <target state="translated">&lt;code&gt;maxHeaderListSize&lt;/code&gt; の設定は今厳密に施行されます。</target>
        </trans-unit>
        <trans-unit id="1a220a1dff3522aa6ba343896510506f310f7309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxmem&lt;/code&gt; value can now be any safe integer.</source>
          <target state="translated">&lt;code&gt;maxmem&lt;/code&gt; 値は現在、任意の安全な整数を指定できます。</target>
        </trans-unit>
        <trans-unit id="2910047a49f404706f3c278c96a92461ef2d5246" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message.aborted&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been aborted.</source>
          <target state="translated">&lt;code&gt;message.aborted&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 要求が中止された場合。</target>
        </trans-unit>
        <trans-unit id="c78b424a8fdbcfde8dcaaaf45220f24d0c8c92ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message.complete&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if a complete HTTP message has been received and successfully parsed.</source>
          <target state="translated">&lt;code&gt;message.complete&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 完全なHTTPメッセージを受信し、正常に解析されている場合。</target>
        </trans-unit>
        <trans-unit id="6ea2ab0f1116b6046fd1c04b56051fcdef1efe04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; parameter is respected now.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; パラメータは現在、尊敬されています。</target>
        </trans-unit>
        <trans-unit id="95cafa66742d9a54e282f1f89e2ac2a52f93ac10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minVersion&lt;/code&gt; and &lt;code&gt;maxVersion&lt;/code&gt; can be used to restrict the allowed TLS protocol versions.</source>
          <target state="translated">&lt;code&gt;minVersion&lt;/code&gt; と &lt;code&gt;maxVersion&lt;/code&gt; のは許容TLSプロトコルバージョンを制限するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="85196439ab75a01651afe6c358739c962e8b4142" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; argument used in both the &lt;code&gt;fs.chmod()&lt;/code&gt; and &lt;code&gt;fs.chmodSync()&lt;/code&gt; methods is a numeric bitmask created using a logical OR of the following constants:</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; の両方で使用される引数 &lt;code&gt;fs.chmod()&lt;/code&gt; と &lt;code&gt;fs.chmodSync()&lt;/code&gt; メソッドは、論理和、次の定数のを使用して作成された数値のビットマスクです。</target>
        </trans-unit>
        <trans-unit id="2ec0556bd164fb5f6f007e756d8a286bbf69595a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.exports&lt;/code&gt; object is created by the &lt;code&gt;Module&lt;/code&gt; system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to &lt;code&gt;module.exports&lt;/code&gt;. Assigning the desired object to &lt;code&gt;exports&lt;/code&gt; will simply rebind the local &lt;code&gt;exports&lt;/code&gt; variable, which is probably not what is desired.</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; はのオブジェクトがによって作成された &lt;code&gt;Module&lt;/code&gt; システム。これは許容できない場合があります。多くの人は、自分のモジュールをあるクラスのインスタンスにしたいと考えています。これを行うには、目的のエクスポートオブジェクトを &lt;code&gt;module.exports&lt;/code&gt; に割り当てます。 &lt;code&gt;exports&lt;/code&gt; 目的のオブジェクトを割り当てると、ローカルの &lt;code&gt;exports&lt;/code&gt; 変数が再バインドされますが、これはおそらく望ましいことではありません。</target>
        </trans-unit>
        <trans-unit id="7741269d9ec5a257707126dc0b6412895ee24cc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.exports&lt;/code&gt; property can be assigned a new value (such as a function or object).</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; はのプロパティは、（関数又はオブジェクトのような）新しい値を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="83b552f2fcab82083bd52fcea2777b5d1ccc766c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.require()&lt;/code&gt; method provides a way to load a module as if &lt;code&gt;require()&lt;/code&gt; was called from the original module.</source>
          <target state="translated">&lt;code&gt;module.require()&lt;/code&gt; メソッドがあるかのようにモジュールをロードする方法を提供 &lt;code&gt;require()&lt;/code&gt; 、元のモジュールから呼び出されました。</target>
        </trans-unit>
        <trans-unit id="0c2cea094d99b8a6b21113410956face81228b7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="7e7a0f9b045b1ebc95a32e313c720c988b31f8ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; objects that the implementor can use to export values from the module.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; と &lt;code&gt;exports&lt;/code&gt; 実装モジュールから値をエクスポートするのに使用できるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a7d0cfde8c11c32a565d5356d3d6a5250d5da0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module_name&lt;/code&gt; must match the filename of the final binary (excluding the &lt;code&gt;.node&lt;/code&gt; suffix).</source>
          <target state="translated">&lt;code&gt;module_name&lt;/code&gt; （除く、最終的なバイナリのファイル名と一致する必要があります &lt;code&gt;.node&lt;/code&gt; ファイルのサフィックスを）。</target>
        </trans-unit>
        <trans-unit id="4327ee27361cd2e73d674b05a8d012bb50878667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; argument contains the message to be sent. Depending on its type, different behavior can apply. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;Uint8Array&lt;/code&gt;, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; specify the offset within the &lt;code&gt;Buffer&lt;/code&gt; where the message begins and the number of bytes in the message, respectively. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;, then it is automatically converted to a &lt;code&gt;Buffer&lt;/code&gt; with &lt;code&gt;'utf8'&lt;/code&gt; encoding. With messages that contain multi-byte characters, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; will be calculated with respect to &lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;byte length&lt;/a&gt; and not the character position. If &lt;code&gt;msg&lt;/code&gt; is an array, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; must not be specified.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 引数には、送信するメッセージが含まれています。そのタイプに応じて、異なる動作が適用される可能性があります。場合 &lt;code&gt;msg&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; 又は &lt;code&gt;Uint8Array&lt;/code&gt; 、 &lt;code&gt;offset&lt;/code&gt; および &lt;code&gt;length&lt;/code&gt; 内のオフセットを指定 &lt;code&gt;Buffer&lt;/code&gt; メッセージが開始され、それぞれのメッセージのバイト数を、。場合 &lt;code&gt;msg&lt;/code&gt; ある &lt;code&gt;String&lt;/code&gt; 、それは自動的に変換され、 &lt;code&gt;Buffer&lt;/code&gt; と &lt;code&gt;'utf8'&lt;/code&gt; エンコーディング。マルチバイト文字を含むメッセージの場合、 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; は&lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;バイト長&lt;/a&gt;に関して計算されます文字の位置ではありません。 &lt;code&gt;msg&lt;/code&gt; が配列の場合、 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; 指定してはなりません。</target>
        </trans-unit>
        <trans-unit id="2075a60413e8276b59620a4d198fc1c48b94d2fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; パラメータができ &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="0d6ec7207b4873c92fc17dd896ab5164bb27bddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can be an array now. Also, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are optional now.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; パラメータは現在、配列にすることができます。また、 &lt;code&gt;offset&lt;/code&gt; パラメータと &lt;code&gt;length&lt;/code&gt; パラメータはオプションになりました。</target>
        </trans-unit>
        <trans-unit id="5ce94e146f1bee23f4a19a2c9729e94ce4ff608c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to either &lt;code&gt;'Http2Stream'&lt;/code&gt; or &lt;code&gt;'Http2Session'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; の &lt;code&gt;name&lt;/code&gt; プロパティは、 &lt;code&gt;'Http2Stream'&lt;/code&gt; または &lt;code&gt;'Http2Session'&lt;/code&gt; いずれかに等しくなります。</target>
        </trans-unit>
        <trans-unit id="fead3a1b10f1cd1219ecd83f4f5309be607d6bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;napi_status&lt;/code&gt; return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information.</source>
          <target state="translated">&lt;code&gt;napi_status&lt;/code&gt; の戻り値は、発生したエラーのVM-独立表現を提供します。エラーを表す文字列やVM（エンジン）固有の情報など、より詳細な情報を取得できると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="a5592b5c4bb94af8a694920848a14649e29bdb54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module provides an asynchronous network API for creating stream-based TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; servers (&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt;) and clients (&lt;a href=&quot;#net_net_createconnection&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;net&lt;/code&gt; モジュールは、ストリームベースのTCPまたは作成するための非同期ネットワークAPIを提供&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;サーバ（&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt; &lt;code&gt;net.createServer()&lt;/code&gt; &lt;/a&gt;）とクライアント（&lt;a href=&quot;#net_net_createconnection&quot;&gt; &lt;code&gt;net.createConnection()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="afe70f2afea81de2ad39fdbdca8f06a2bf7b7881" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module supports IPC with named pipes on Windows, and Unix domain sockets on other operating systems.</source>
          <target state="translated">&lt;code&gt;net&lt;/code&gt; モジュールは、他のオペレーティングシステム上のWindowsとUNIXドメインソケット上の名前付きパイプとIPCをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c99c66ffa459f318d34b430b1960b9ec1ec032dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Buffer(size)&lt;/code&gt; will return zero-filled memory by default.</source>
          <target state="translated">&lt;code&gt;new Buffer(size)&lt;/code&gt; 、デフォルトではゼロで満たされたメモリを返します。</target>
        </trans-unit>
        <trans-unit id="ad7337a8c889e7d305644a015405dea9b202ed4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oaepHash&lt;/code&gt; option was added.</source>
          <target state="translated">&lt;code&gt;oaepHash&lt;/code&gt; のオプションが追加されました。</target>
        </trans-unit>
        <trans-unit id="885ca29403d392148790862294f2104b877b5980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; options may be used to limit the response to a specific range subset. This can be used, for instance, to support HTTP Range requests.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 及び &lt;code&gt;length&lt;/code&gt; オプションは、特定の範囲の部分集合への応答を制限するために使用されてもよいです。これは、たとえば、HTTP範囲要求をサポートするために使用できます。</target>
        </trans-unit>
        <trans-unit id="3912ef30ca5bc4619350e3a871983ad1a82598df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are optional now.</source>
          <target state="translated">現在、 &lt;code&gt;offset&lt;/code&gt; パラメータと &lt;code&gt;length&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="a23df2f613658facfd004babcb0062fd4ef3fab7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oldPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;oldPath&lt;/code&gt; と &lt;code&gt;newPath&lt;/code&gt; パラメータはWHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="b91336e152d266abaf56acd5db6edb3d059c4ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.onError&lt;/code&gt; function may also be used to handle all the errors that could happen before the delivery of the file is initiated. The default behavior is to destroy the stream.</source>
          <target state="translated">&lt;code&gt;options.onError&lt;/code&gt; の機能は、ファイルの配信が開始される前に発生する可能性があり、すべてのエラーを処理するために使用することができます。デフォルトの動作は、ストリームを破棄することです。</target>
        </trans-unit>
        <trans-unit id="88725ed0c752fd2e0d3d7eb4b4fa2aac4684e747" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.selectPadding()&lt;/code&gt; function is invoked once for &lt;em&gt;every&lt;/em&gt;&lt;code&gt;HEADERS&lt;/code&gt; and &lt;code&gt;DATA&lt;/code&gt; frame. This has a definite noticeable impact on performance.</source>
          <target state="translated">&lt;code&gt;options.selectPadding()&lt;/code&gt; 関数は、のために一度呼び出される&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;HEADERS&lt;/code&gt; と &lt;code&gt;DATA&lt;/code&gt; フレーム。これは、パフォーマンスに明確な顕著な影響を及ぼします。</target>
        </trans-unit>
        <trans-unit id="58c22594cb8dda9afe65bb4ffe82eac94dae29bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.selectPadding()&lt;/code&gt; function receives two numeric arguments, &lt;code&gt;frameLen&lt;/code&gt; and &lt;code&gt;maxFrameLen&lt;/code&gt; and must return a number &lt;code&gt;N&lt;/code&gt; such that &lt;code&gt;frameLen &amp;lt;= N &amp;lt;= maxFrameLen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.selectPadding()&lt;/code&gt; 関数は、2つの数値引数、受信 &lt;code&gt;frameLen&lt;/code&gt; と &lt;code&gt;maxFrameLen&lt;/code&gt; をし、数返さなければならない &lt;code&gt;N&lt;/code&gt; ように &lt;code&gt;frameLen &amp;lt;= N &amp;lt;= maxFrameLen&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1c0d85ce19cd9d1ce4392696fd5cac8f4203d86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.statCheck&lt;/code&gt; function may also be used to cancel the send operation by returning &lt;code&gt;false&lt;/code&gt;. For instance, a conditional request may check the stat results to determine if the file has been modified to return an appropriate &lt;code&gt;304&lt;/code&gt; response:</source>
          <target state="translated">&lt;code&gt;options.statCheck&lt;/code&gt; の機能も返すことによって、送信操作をキャンセルするために使用することができる &lt;code&gt;false&lt;/code&gt; 。たとえば、条件付きリクエストは、統計結果をチェックして、適切な &lt;code&gt;304&lt;/code&gt; 応答を返すようにファイルが変更されているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="7a08e01016b2c2502c2e42198c75f2bc1cff02d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.stdio&lt;/code&gt; option is used to configure the pipes that are established between the parent and child process. By default, the child's stdin, stdout, and stderr are redirected to corresponding &lt;a href=&quot;#child_process_subprocess_stdin&quot;&gt;&lt;code&gt;subprocess.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_subprocess_stdout&quot;&gt;&lt;code&gt;subprocess.stdout&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_subprocess_stderr&quot;&gt;&lt;code&gt;subprocess.stderr&lt;/code&gt;&lt;/a&gt; streams on the &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object. This is equivalent to setting the &lt;code&gt;options.stdio&lt;/code&gt; equal to &lt;code&gt;['pipe', 'pipe', 'pipe']&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.stdio&lt;/code&gt; オプションは、親と子プロセスの間で確立されているパイプを設定するために使用されます。デフォルトでは、子のstdin、stdout、およびstderrは、&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;オブジェクトの対応する&lt;a href=&quot;#child_process_subprocess_stdin&quot;&gt; &lt;code&gt;subprocess.stdin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_subprocess_stdout&quot;&gt; &lt;code&gt;subprocess.stdout&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#child_process_subprocess_stderr&quot;&gt; &lt;code&gt;subprocess.stderr&lt;/code&gt; &lt;/a&gt;ストリームにリダイレクトされます。これは、 &lt;code&gt;options.stdio&lt;/code&gt; を &lt;code&gt;['pipe', 'pipe', 'pipe']&lt;/code&gt; に設定することと同じです。</target>
        </trans-unit>
        <trans-unit id="c8dd4ab4f071e2989533d5f91caa4e4a34ce887c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数コントロールが（たとえば、行動をストリーミングし、CCMまたはOCBモードの暗号が使用されている場合を除き、オプションである &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。その場合、 &lt;code&gt;authTagLength&lt;/code&gt; オプションが必須であり、認証タグの長さをバイト単位で指定します。CCM &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;モードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70db3910480442bf6b039c30dead899f0e07b3e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;. In GCM mode, the &lt;code&gt;authTagLength&lt;/code&gt; option is not required but can be used to restrict accepted authentication tags to those with the specified length.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数コントロールが（たとえば、行動をストリーミングし、CCMまたはOCBモードの暗号が使用されている場合を除き、オプションである &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。その場合、 &lt;code&gt;authTagLength&lt;/code&gt; オプションが必須であり、認証タグの長さをバイト単位で指定します。CCM &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;モードを&lt;/a&gt;参照してください。 GCMモードでは、 &lt;code&gt;authTagLength&lt;/code&gt; オプションは必須ではありませんが、受け入れられる認証タグを指定された長さのものに制限するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1f07368952df0b4d175cfc6577e347d6c1e59d58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;. In GCM mode, the &lt;code&gt;authTagLength&lt;/code&gt; option is not required but can be used to set the length of the authentication tag that will be returned by &lt;code&gt;getAuthTag()&lt;/code&gt; and defaults to 16 bytes.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数コントロールが（たとえば、行動をストリーミングし、CCMまたはOCBモードの暗号が使用されている場合を除き、オプションである &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。その場合、 &lt;code&gt;authTagLength&lt;/code&gt; オプションが必須であり、認証タグの長さをバイト単位で指定します。CCM &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;モードを&lt;/a&gt;参照してください。 GCMモードでは、 &lt;code&gt;authTagLength&lt;/code&gt; オプションは必須ではありませんが、 &lt;code&gt;getAuthTag()&lt;/code&gt; によって返される認証タグの長さを設定するために使用できます。デフォルトは16バイトです。</target>
        </trans-unit>
        <trans-unit id="b388a3d7d0f9bca878571c8a6039e4ada05c0bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数はオプションです &lt;code&gt;GCM&lt;/code&gt; と &lt;code&gt;OCB&lt;/code&gt; 。 &lt;code&gt;CCM&lt;/code&gt; を使用する場合は、 &lt;code&gt;plaintextLength&lt;/code&gt; オプションを指定する必要があり、その値はプレーンテキストの長さ（バイト単位）と一致する必要があります。&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCMモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04d1fc8ede515595f0022bbcb95640413bd973e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数はオプションです &lt;code&gt;GCM&lt;/code&gt; 。 &lt;code&gt;CCM&lt;/code&gt; を使用する場合は、 &lt;code&gt;plaintextLength&lt;/code&gt; オプションを指定する必要があり、その値はプレーンテキストの長さ（バイト単位）と一致する必要があります。&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCMモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ffcc3d1f21652c8051ddf089c67bff61f63a2cb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is supported now.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="8c18426cec8944bfcba4ea3507d2515508ff8326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument may be omitted. If provided, it should be an object. The &lt;code&gt;options&lt;/code&gt; object may contain a boolean named &lt;code&gt;persistent&lt;/code&gt; that indicates whether the process should continue to run as long as files are being watched. The &lt;code&gt;options&lt;/code&gt; object may specify an &lt;code&gt;interval&lt;/code&gt; property indicating how often the target should be polled in milliseconds.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数を省略することができます。指定する場合は、オブジェクトにする必要があります。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、名前で指定されたboolean含むことが &lt;code&gt;persistent&lt;/code&gt; プロセスがある限り、ファイルが監視されているように実行し続けるべきかどうかを示します。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、指定することができ &lt;code&gt;interval&lt;/code&gt; ターゲットはミリ秒単位でポーリングする頻度を示すプロパティを。</target>
        </trans-unit>
        <trans-unit id="3ecccc5808da944ebe14cfab94721d12f71b2cf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; object may contain a &lt;code&gt;fd&lt;/code&gt; property. When a &lt;code&gt;fd&lt;/code&gt; greater than &lt;code&gt;0&lt;/code&gt; is set, it will wrap around an existing socket with the given file descriptor. In this case, the properties of &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; オブジェクトが含まれていてもよい &lt;code&gt;fd&lt;/code&gt; のプロパティを。とき &lt;code&gt;fd&lt;/code&gt; より大きく &lt;code&gt;0&lt;/code&gt; が設定されている、それは与えられたファイルディスクリプタで既存のソケットの周りに折り返されます。この場合、 &lt;code&gt;port&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; プロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="f185bba23af7cf7637b219df23160a83316f0b66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; object may contain an additional &lt;code&gt;exclusive&lt;/code&gt; property that is used when using &lt;code&gt;dgram.Socket&lt;/code&gt; objects with the &lt;a href=&quot;cluster&quot;&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/a&gt; module. When &lt;code&gt;exclusive&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (the default), cluster workers will use the same underlying socket handle allowing connection handling duties to be shared. When &lt;code&gt;exclusive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, however, the handle is not shared and attempted port sharing results in an error.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; オブジェクトは、追加含有することができる &lt;code&gt;exclusive&lt;/code&gt; 使用しているときに使用されるプロパティ &lt;code&gt;dgram.Socket&lt;/code&gt; を有するオブジェクトを&lt;a href=&quot;cluster&quot;&gt; &lt;code&gt;cluster&lt;/code&gt; &lt;/a&gt;モジュール。ときに &lt;code&gt;exclusive&lt;/code&gt; に設定されている &lt;code&gt;false&lt;/code&gt; （デフォルト）、クラスタ労働者が業務を取り扱い、接続を共有できるようにすることと同じ基本的なソケットハンドルを使用します。ただし、 &lt;code&gt;exclusive&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、ハンドルは共有されず、ポート共有を試行するとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6fbf7471b69b1732468b84a8b5cd6c3bbd820fbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、WHATWGすることができ &lt;code&gt;URL&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f310b73d29091e1115b087085826cee5193689cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter can now include &lt;code&gt;clientCertEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは今含めることができます &lt;code&gt;clientCertEngine&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c04ccd742cb846d729c46db1c92d993bda691af3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータはオプションになりました。</target>
        </trans-unit>
        <trans-unit id="1544d0a25361e0102480911c75332cf1faf9847a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter now supports &lt;code&gt;net.createServer()&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータがサポートするようになりまし &lt;code&gt;net.createServer()&lt;/code&gt; のオプションを。</target>
        </trans-unit>
        <trans-unit id="11a0da7077baf241c7325863b0e43935555f3a40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="7e73cb4a761c64c133dbf1f7850ece9925d2eed6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter, and the &lt;code&gt;keepOpen&lt;/code&gt; option in particular, is supported now.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータ、および &lt;code&gt;keepOpen&lt;/code&gt; の特にオプションは、サポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="2763cd5beff3c94cee8b93fbe274c8b2cdd696ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;originSet&lt;/code&gt; property is only available when using a secure TLS connection.</source>
          <target state="translated">&lt;code&gt;originSet&lt;/code&gt; のセキュアなTLS接続を使用するときに、プロパティにのみ使用可能です。</target>
        </trans-unit>
        <trans-unit id="0ee9a44acc588d2b0ac4bfb8cdbe73ea5d2ad84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.arch()&lt;/code&gt; method returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.</source>
          <target state="translated">&lt;code&gt;os.arch()&lt;/code&gt; メソッドは、Node.jsのバイナリがコンパイルされたため、オペレーティングシステムのCPUアーキテクチャを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fd4b8a513a4015a14ac01295145fcd7349422760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.cpus()&lt;/code&gt; method returns an array of objects containing information about each logical CPU core.</source>
          <target state="translated">&lt;code&gt;os.cpus()&lt;/code&gt; メソッドは、各論理CPUコアに関する情報を含むオブジェクトの配列を返します。</target>
        </trans-unit>
        <trans-unit id="dd819e9d7af1fe616adb3dde7cf03a235051f4d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.endianness()&lt;/code&gt; method returns a string identifying the endianness of the CPU &lt;em&gt;for which the Node.js binary was compiled&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;os.endianness()&lt;/code&gt; メソッドは、CPUのエンディアン識別する文字列を返し&lt;em&gt;Node.jsのバイナリがコンパイルされたために&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9a88232839cef7e552682cd4db9e7d869e81ce93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.freemem()&lt;/code&gt; method returns the amount of free system memory in bytes as an integer.</source>
          <target state="translated">&lt;code&gt;os.freemem()&lt;/code&gt; メソッドは、整数としてバイト単位で自由なシステムメモリの量を返します。</target>
        </trans-unit>
        <trans-unit id="e9589b6e8570ce552b673c7c3286ac69d95ca7d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.getNetworkInterfaces()&lt;/code&gt; method is deprecated. Please use the &lt;a href=&quot;os#os_os_networkinterfaces&quot;&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">&lt;code&gt;os.getNetworkInterfaces()&lt;/code&gt; メソッドは推奨されています。代わりに&lt;a href=&quot;os#os_os_networkinterfaces&quot;&gt; &lt;code&gt;os.networkInterfaces()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="68455ecd26853fd1c43efff0e0b76dba1707b26e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.getPriority()&lt;/code&gt; method returns the scheduling priority for the process specified by &lt;code&gt;pid&lt;/code&gt;. If &lt;code&gt;pid&lt;/code&gt; is not provided, or is &lt;code&gt;0&lt;/code&gt;, the priority of the current process is returned.</source>
          <target state="translated">&lt;code&gt;os.getPriority()&lt;/code&gt; メソッドは、で指定されたプロセスのスケジューリング優先順位を返し &lt;code&gt;pid&lt;/code&gt; 。場合 &lt;code&gt;pid&lt;/code&gt; 設け、またはされないが &lt;code&gt;0&lt;/code&gt; 、現在のプロセスの優先度が返されます。</target>
        </trans-unit>
        <trans-unit id="ff202cb94fa55d86ebbf8be59a9fe425b0365415" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.homedir()&lt;/code&gt; method returns the home directory of the current user as a string.</source>
          <target state="translated">&lt;code&gt;os.homedir()&lt;/code&gt; メソッドは文字列として現在のユーザのホームディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="08ccc46f0c89757856f0de672fdae7d519bc7bb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.hostname()&lt;/code&gt; method returns the hostname of the operating system as a string.</source>
          <target state="translated">&lt;code&gt;os.hostname()&lt;/code&gt; メソッドは、文字列などのオペレーティング・システムのホスト名を返します。</target>
        </trans-unit>
        <trans-unit id="5c9a1431d7ea068ec0c902acf347c2518816ee86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.loadavg()&lt;/code&gt; method returns an array containing the 1, 5, and 15 minute load averages.</source>
          <target state="translated">&lt;code&gt;os.loadavg()&lt;/code&gt; メソッドは、1を含む配列を返し5、及び15分の平均負荷。</target>
        </trans-unit>
        <trans-unit id="d194900a3e2e0f96f28e2fc9905489cd527a1b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.networkInterfaces()&lt;/code&gt; method returns an object containing only network interfaces that have been assigned a network address.</source>
          <target state="translated">&lt;code&gt;os.networkInterfaces()&lt;/code&gt; メソッドは、ネットワークアドレスを割り当てられている唯一のネットワークインターフェースを含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="e76c72da5ce1666431d22cdc5b11e7141d7dee80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.platform()&lt;/code&gt; method returns a string identifying the operating system platform as set during compile time of Node.js.</source>
          <target state="translated">&lt;code&gt;os.platform()&lt;/code&gt; メソッドは、Node.js.のコンパイル時にセットとしてオペレーティング・システム・プラットフォームを識別する文字列を返します</target>
        </trans-unit>
        <trans-unit id="8f2147ad23c2ec0f83d80f4078e3e27a91e6857f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.release()&lt;/code&gt; method returns a string identifying the operating system release.</source>
          <target state="translated">&lt;code&gt;os.release()&lt;/code&gt; メソッドは、オペレーティングシステムのリリースを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fbfd957e2f788604cd2a912c9f703622e4c74d1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.setPriority()&lt;/code&gt; method attempts to set the scheduling priority for the process specified by &lt;code&gt;pid&lt;/code&gt;. If &lt;code&gt;pid&lt;/code&gt; is not provided, or is &lt;code&gt;0&lt;/code&gt;, the priority of the current process is used.</source>
          <target state="translated">&lt;code&gt;os.setPriority()&lt;/code&gt; で指定されたプロセスのスケジューリング優先順位を設定する方法を試み &lt;code&gt;pid&lt;/code&gt; 。場合 &lt;code&gt;pid&lt;/code&gt; 設け、またはされないが &lt;code&gt;0&lt;/code&gt; 、現在のプロセスの優先順位が使用されます。</target>
        </trans-unit>
        <trans-unit id="2381f4505912aa2a83ede87b6e353a245af8bce9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpDir()&lt;/code&gt; API is deprecated. Please use &lt;a href=&quot;os#os_os_tmpdir&quot;&gt;&lt;code&gt;os.tmpdir()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;os.tmpDir()&lt;/code&gt; APIは推奨されません。代わりに&lt;a href=&quot;os#os_os_tmpdir&quot;&gt; &lt;code&gt;os.tmpdir()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="b4c8d89820967edb5a86cf15fc4f3223e85cb656" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpdir()&lt;/code&gt; method returns a string specifying the operating system's default directory for temporary files.</source>
          <target state="translated">&lt;code&gt;os.tmpdir()&lt;/code&gt; メソッドは、一時ファイルのためのオペレーティングシステムのデフォルトのディレクトリを指定する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fa88528ec6a826f144023495a7b003de6458571a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.totalmem()&lt;/code&gt; method returns the total amount of system memory in bytes as an integer.</source>
          <target state="translated">&lt;code&gt;os.totalmem()&lt;/code&gt; メソッドは、整数バイトのシステムメモリの総量を返します。</target>
        </trans-unit>
        <trans-unit id="704218fb38cc5fde83230e8b7f548bf48215777f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.type()&lt;/code&gt; method returns a string identifying the operating system name as returned by &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;'Linux'&lt;/code&gt; on Linux, &lt;code&gt;'Darwin'&lt;/code&gt; on macOS, and &lt;code&gt;'Windows_NT'&lt;/code&gt; on Windows.</source>
          <target state="translated">&lt;code&gt;os.type()&lt;/code&gt; メソッドの戻りによって返されるオペレーティングシステム名を識別する文字列&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; &lt;/a&gt;。たとえば、 &lt;code&gt;'Linux'&lt;/code&gt; Linux &lt;code&gt;'Darwin'&lt;/code&gt; 、macOSでは「Darwin &lt;code&gt;'Windows_NT'&lt;/code&gt; 、Windowsでは「Windows_NT」などです。</target>
        </trans-unit>
        <trans-unit id="8c622a09d0f16bb6ec01b41edf064ab83a149100" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.uptime()&lt;/code&gt; method returns the system uptime in number of seconds.</source>
          <target state="translated">&lt;code&gt;os.uptime()&lt;/code&gt; メソッドは、秒数で、システムの稼働時間を返します。</target>
        </trans-unit>
        <trans-unit id="bfeef8c91f8d956e86c7a531b06a7f532f2035ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.userInfo()&lt;/code&gt; method returns information about the currently effective user &amp;mdash; on POSIX platforms, this is typically a subset of the password file. The returned object includes the &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;gid&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, and &lt;code&gt;homedir&lt;/code&gt;. On Windows, the &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; fields are &lt;code&gt;-1&lt;/code&gt;, and &lt;code&gt;shell&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; メソッドは、現在有効なユーザーに関する情報を返す- POSIXプラットフォームでは、これは通常、パスワードファイルのサブセットです。返されるオブジェクトには、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;uid&lt;/code&gt; 、 &lt;code&gt;gid&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; 、 &lt;code&gt;homedir&lt;/code&gt; が含まれます。Windowsでは、 &lt;code&gt;uid&lt;/code&gt; および &lt;code&gt;gid&lt;/code&gt; フィールドは &lt;code&gt;-1&lt;/code&gt; で、 &lt;code&gt;shell&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4cb17d14194660fd3cf9cfa11482a196f87f429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os&lt;/code&gt; module provides a number of operating system-related utility methods. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;os&lt;/code&gt; モジュールは、オペレーティングシステム関連のユーティリティの多数の方法を提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="eae6c5263eb3a3adb56e5c667edc4c110678a119" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputEncoding&lt;/code&gt; specifies the output format of the enciphered data. If the &lt;code&gt;outputEncoding&lt;/code&gt; is specified, a string using the specified encoding is returned. If no &lt;code&gt;outputEncoding&lt;/code&gt; is provided, a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;code&gt;outputEncoding&lt;/code&gt; は暗号化されたデータの出力形式を指定します。 &lt;code&gt;outputEncoding&lt;/code&gt; が指定されている場合、指定されたエンコーディングを使用する文字列が返されます。 &lt;code&gt;outputEncoding&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="05eb17785bdeb53b18850ce2ab3ab0ff99d9b5ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputLength&lt;/code&gt; option was added for XOF hash functions.</source>
          <target state="translated">&lt;code&gt;outputLength&lt;/code&gt; のオプションはXOFハッシュ関数のために追加されました。</target>
        </trans-unit>
        <trans-unit id="fdafd20e01a0d40cc24f829e01b07007772132ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt;&lt;code&gt;&quot;main&quot;&lt;/code&gt; field defines the entry point for a package, whether the package is included into CommonJS via &lt;code&gt;require&lt;/code&gt; or into an ES module via &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&quot;main&quot;&lt;/code&gt; フィールドは、を介してパッケージはCommonJSに含まれているか否か、パッケージのエントリポイントを定義する &lt;code&gt;require&lt;/code&gt; を介して、またはESモジュールに &lt;code&gt;import&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f71aede9a83547ad5a39786ee9673bf753810698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parentModuleURL&lt;/code&gt; is provided as &lt;code&gt;undefined&lt;/code&gt; when performing main Node.js load itself.</source>
          <target state="translated">&lt;code&gt;parentModuleURL&lt;/code&gt; はとして提供され &lt;code&gt;undefined&lt;/code&gt; メインのNode.js負荷自体を実行するとき。</target>
        </trans-unit>
        <trans-unit id="40c6fcca460251f4d4fb83bc801b49111c66163b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; is used to derive the cipher key and initialization vector (IV). The value must be either a &lt;code&gt;'latin1'&lt;/code&gt; encoded string, a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;password&lt;/code&gt; 暗号キーと初期化ベクトル（IV）を導出するために使用されます。値は、 &lt;code&gt;'latin1'&lt;/code&gt; エンコードされた文字列、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="188bb6063b9cc56f886f4feab1c8df1de8a2c2ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.basename()&lt;/code&gt; methods returns the last portion of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;basename&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.basename()&lt;/code&gt; メソッドは、最後の部分戻り &lt;code&gt;path&lt;/code&gt; Unixのと同様に、 &lt;code&gt;basename&lt;/code&gt; コマンド。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a46c55b6aac880d7bc1592bfe28b266a7b1031c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.dirname()&lt;/code&gt; method returns the directory name of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;dirname&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.dirname()&lt;/code&gt; メソッドは、ディレクトリ名戻り &lt;code&gt;path&lt;/code&gt; のUnixと同様、 &lt;code&gt;dirname&lt;/code&gt; コマンド。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3f6292e5cd1e0345df138f65b07d3563d7ad4f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.extname()&lt;/code&gt; method returns the extension of the &lt;code&gt;path&lt;/code&gt;, from the last occurrence of the &lt;code&gt;.&lt;/code&gt; (period) character to end of string in the last portion of the &lt;code&gt;path&lt;/code&gt;. If there is no &lt;code&gt;.&lt;/code&gt; in the last portion of the &lt;code&gt;path&lt;/code&gt;, or if there are no &lt;code&gt;.&lt;/code&gt; characters other than the first character of the basename of &lt;code&gt;path&lt;/code&gt; (see &lt;code&gt;path.basename()&lt;/code&gt;) , an empty string is returned.</source>
          <target state="translated">&lt;code&gt;path.extname()&lt;/code&gt; メソッドは、拡張戻り &lt;code&gt;path&lt;/code&gt; の最後の発生から、 &lt;code&gt;.&lt;/code&gt; （ピリオド） &lt;code&gt;path&lt;/code&gt; 最後の部分の文字列の終わりまでの文字。ない場合 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; 最後の部分、またはない場合 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; のベース名の最初の文字（ &lt;code&gt;path.basename()&lt;/code&gt; を参照）以外の文字の場合、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="8e0e67a46c436cf5fe841f17ec165a43522a8571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.format()&lt;/code&gt; method returns a path string from an object. This is the opposite of &lt;a href=&quot;#path_path_parse_path&quot;&gt;&lt;code&gt;path.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.format()&lt;/code&gt; メソッドは、オブジェクトからのパス文字列を返します。これは&lt;a href=&quot;#path_path_parse_path&quot;&gt; &lt;code&gt;path.parse()&lt;/code&gt; の&lt;/a&gt;逆です。</target>
        </trans-unit>
        <trans-unit id="252cfc98db637fc3e0bc47e764b59687b1c5ae77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.isAbsolute()&lt;/code&gt; method determines if &lt;code&gt;path&lt;/code&gt; is an absolute path.</source>
          <target state="translated">&lt;code&gt;path.isAbsolute()&lt;/code&gt; 場合、メソッドは決定 &lt;code&gt;path&lt;/code&gt; 絶対パスです。</target>
        </trans-unit>
        <trans-unit id="23d1f7bebec278f9d7e734b9f87e77484ef62d91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.join()&lt;/code&gt; method joins all given &lt;code&gt;path&lt;/code&gt; segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.</source>
          <target state="translated">&lt;code&gt;path.join()&lt;/code&gt; メソッドは、すべての所与の参加 &lt;code&gt;path&lt;/code&gt; 一緒に区切り文字としてプラットフォーム固有のセパレータを使用してセグメントを、次いで得られたパスを正規化します。</target>
        </trans-unit>
        <trans-unit id="fccc035b7e3371f3ec57061631961afe47bacedc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.normalize()&lt;/code&gt; method normalizes the given &lt;code&gt;path&lt;/code&gt;, resolving &lt;code&gt;'..'&lt;/code&gt; and &lt;code&gt;'.'&lt;/code&gt; segments.</source>
          <target state="translated">&lt;code&gt;path.normalize()&lt;/code&gt; メソッドは、指定された正規化 &lt;code&gt;path&lt;/code&gt; 解決する、 &lt;code&gt;'..'&lt;/code&gt; および &lt;code&gt;'.'&lt;/code&gt; セグメント。</target>
        </trans-unit>
        <trans-unit id="54cf59d346f9b6392b2a87a5566d28221bcb562a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.parse()&lt;/code&gt; method returns an object whose properties represent significant elements of the &lt;code&gt;path&lt;/code&gt;. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.parse()&lt;/code&gt; メソッドは、その特性の重要要素表すオブジェクト戻り &lt;code&gt;path&lt;/code&gt; 。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="37668729a1da9d1c73a91abba8181fc015734cb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.posix&lt;/code&gt; property provides access to POSIX specific implementations of the &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;path.posix&lt;/code&gt; のプロパティは、のPOSIXの特定の実装へのアクセスを提供 &lt;code&gt;path&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="10a83fa0396ec811505daa5cde984be16592ee0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.relative()&lt;/code&gt; method returns the relative path from &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt; based on the current working directory. If &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; each resolve to the same path (after calling &lt;code&gt;path.resolve()&lt;/code&gt; on each), a zero-length string is returned.</source>
          <target state="translated">&lt;code&gt;path.relative()&lt;/code&gt; メソッドからの相対パスを返す &lt;code&gt;from&lt;/code&gt; へ &lt;code&gt;to&lt;/code&gt; 現在の作業ディレクトリに基づきます。 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; がそれぞれ同じパスに解決される場合 &lt;code&gt;path.resolve()&lt;/code&gt; それぞれでpath.resolve（）を呼び出した後）、長さがゼロの文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="581183ca669de52def1090661675d2069384bfd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.resolve()&lt;/code&gt; method resolves a sequence of paths or path segments into an absolute path.</source>
          <target state="translated">&lt;code&gt;path.resolve()&lt;/code&gt; メソッドは、絶対パスにパスまたはパスセグメントのシーケンスを解決します。</target>
        </trans-unit>
        <trans-unit id="fc46e1af8b2b47418d0b18b69062f0e559b72294" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.win32&lt;/code&gt; property provides access to Windows-specific implementations of the &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;path.win32&lt;/code&gt; のプロパティは、Windows固有の実装へのアクセスを提供し &lt;code&gt;path&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="f63bee69cffa8c7230b8d83b01ff643325fa158e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; may be specified as a &lt;code&gt;FileHandle&lt;/code&gt; that has been opened for appending (using &lt;code&gt;fsPromises.open()&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のように指定することができる &lt;code&gt;FileHandle&lt;/code&gt; （使用して追加のために開かれた &lt;code&gt;fsPromises.open()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6e44c0aaf70d7f280a84fa02cdd1307c2a8b5325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; may be specified as a numeric file descriptor that has been opened for appending (using &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.openSync()&lt;/code&gt;). The file descriptor will not be closed automatically.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 追加用に開かれている数値のファイル記述子として指定することができる（使用 &lt;code&gt;fs.open()&lt;/code&gt; または &lt;code&gt;fs.openSync()&lt;/code&gt; ）。ファイル記述子は自動的に閉じられません。</target>
        </trans-unit>
        <trans-unit id="54784f8d6788b2b1af616c6de7cd51656da924fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; module provides utilities for working with file and directory paths. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; モジュールはファイルやディレクトリのパスを操作するためのユーティリティを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0891b7522aea49dbbbd5c5d2e3ee6703a2df6b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="753c6c336baca793a6760ebb70f8457b1c8d3709" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">現在、 &lt;code&gt;path&lt;/code&gt; パラメータはファイル記述子にすることができます。</target>
        </trans-unit>
        <trans-unit id="8226322163fdae4413c7f4db24d0461e11583e74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameters can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートは&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="a636f6e53d1a384050820e5a3525c5fd15f2d5b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; property is a concatenation of the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; プロパティは、連結した &lt;code&gt;pathname&lt;/code&gt; と &lt;code&gt;search&lt;/code&gt; コンポーネント。</target>
        </trans-unit>
        <trans-unit id="cd8b1b1230d3106b94a572ac3ffbd6f8548b801e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathname&lt;/code&gt; property consists of the entire path section of the URL. This is everything following the &lt;code&gt;host&lt;/code&gt; (including the &lt;code&gt;port&lt;/code&gt;) and before the start of the &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;hash&lt;/code&gt; components, delimited by either the ASCII question mark (&lt;code&gt;?&lt;/code&gt;) or hash (&lt;code&gt;#&lt;/code&gt;) characters.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; プロパティは、URLのパス全体のセクションで構成されています。これは、 &lt;code&gt;host&lt;/code&gt; （ &lt;code&gt;port&lt;/code&gt; を含む）の後、 &lt;code&gt;query&lt;/code&gt; または &lt;code&gt;hash&lt;/code&gt; コンポーネントの開始前のすべてであり、ASCII疑問符（ &lt;code&gt;?&lt;/code&gt; ）またはハッシュ（ &lt;code&gt;#&lt;/code&gt; ）文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="919f87148245100aefaf59182626d3fc677bc928" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paths&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;paths&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d69b64872e4dabf952d6da7f4c96857f30589a2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipeline&lt;/code&gt; API is promisify-able as well:</source>
          <target state="translated">&lt;code&gt;pipeline&lt;/code&gt; APIは、同様にpromisify-ことができます：</target>
        </trans-unit>
        <trans-unit id="6fb265fd07a0d7f8e8e2a9f431c481837d8fb7fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; field is copied correctly now.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; フィールドが正しくコピーされます。</target>
        </trans-unit>
        <trans-unit id="5ed15aa76dd58bec9add6b4d7a2c2f7a8bf30e61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; property is the numeric port portion of the &lt;code&gt;host&lt;/code&gt; component.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; プロパティは、数値ポート部である &lt;code&gt;host&lt;/code&gt; コンポーネント。</target>
        </trans-unit>
        <trans-unit id="8b7858034d75ee3f2b3b2de7c9b9a05146723800" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">現在、 &lt;code&gt;position&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="a762a27d128ae739b16dec3315cf9d688d7132bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prime&lt;/code&gt; argument can be a &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">現在、 &lt;code&gt;prime&lt;/code&gt; 引数は &lt;code&gt;Uint8Array&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e0e02f6628331bc85eaeb22e4681f24afb59013" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prime&lt;/code&gt; argument can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; now.</source>
          <target state="translated">現在、 &lt;code&gt;prime&lt;/code&gt; 引数は任意の &lt;code&gt;TypedArray&lt;/code&gt; または &lt;code&gt;DataView&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9ef3092e9402a32d8a11faf19f4c8bd27014d4d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priority&lt;/code&gt; input must be an integer between &lt;code&gt;-20&lt;/code&gt; (high priority) and &lt;code&gt;19&lt;/code&gt; (low priority). Due to differences between Unix priority levels and Windows priority classes, &lt;code&gt;priority&lt;/code&gt; is mapped to one of six priority constants in &lt;code&gt;os.constants.priority&lt;/code&gt;. When retrieving a process priority level, this range mapping may cause the return value to be slightly different on Windows. To avoid confusion, it is recommended to set &lt;code&gt;priority&lt;/code&gt; to one of the priority constants.</source>
          <target state="translated">&lt;code&gt;priority&lt;/code&gt; 入力との間の整数でなければなりません &lt;code&gt;-20&lt;/code&gt; （高優先度）と &lt;code&gt;19&lt;/code&gt; （低優先度）。Unixの優先度レベルとWindowsの優先度クラスの違いにより、 &lt;code&gt;priority&lt;/code&gt; は &lt;code&gt;os.constants.priority&lt;/code&gt; の 6つの優先度定数の1つにマッピングされます。プロセスの優先度レベルを取得する場合、この範囲マッピングにより、Windowsでは戻り値が若干異なる場合があります。混乱を避けるために、 &lt;code&gt;priority&lt;/code&gt; をいずれかの優先度定数に設定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3622698fdbf850cdcfea82b10e7031c7e9a98213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.abort()&lt;/code&gt; method causes the Node.js process to exit immediately and generate a core file.</source>
          <target state="translated">&lt;code&gt;process.abort()&lt;/code&gt; メソッドは、Node.jsのが直ちに終了し、コア・ファイルを生成するために処理させます。</target>
        </trans-unit>
        <trans-unit id="256cd1c7845a467da45db4ea069ac1d3173efd8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; property is a special, read-only &lt;code&gt;Set&lt;/code&gt; of flags allowable within the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; のプロパティは、読み取り専用、特別で &lt;code&gt;Set&lt;/code&gt; 内の許容フラグの&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; の&lt;/a&gt;環境変数。</target>
        </trans-unit>
        <trans-unit id="2a727071fefe2a18d8e379badd7dad07fd67f002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.arch&lt;/code&gt; property returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.</source>
          <target state="translated">&lt;code&gt;process.arch&lt;/code&gt; プロパティは、Node.jsのバイナリがコンパイルされた対象のオペレーティングシステムのCPUアーキテクチャを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="cbb573355c9a987424098eb4d1b59d8d159b0580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv0&lt;/code&gt; property stores a read-only copy of the original value of &lt;code&gt;argv[0]&lt;/code&gt; passed when Node.js starts.</source>
          <target state="translated">&lt;code&gt;process.argv0&lt;/code&gt; プロパティストアは読み取り専用の元の値のコピー &lt;code&gt;argv[0]&lt;/code&gt; のNode.jsの起動時に渡されます。</target>
        </trans-unit>
        <trans-unit id="ea07aeb7f928579452477082622dac424365d23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv&lt;/code&gt; property returns an array containing the command line arguments passed when the Node.js process was launched. The first element will be &lt;a href=&quot;#process_process_execpath&quot;&gt;&lt;code&gt;process.execPath&lt;/code&gt;&lt;/a&gt;. See &lt;code&gt;process.argv0&lt;/code&gt; if access to the original value of &lt;code&gt;argv[0]&lt;/code&gt; is needed. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command line arguments.</source>
          <target state="translated">&lt;code&gt;process.argv&lt;/code&gt; のプロパティは、Node.jsのプロセスが開始された時にライン引数が渡されたコマンドを含む配列を返します。最初の要素は&lt;a href=&quot;#process_process_execpath&quot;&gt; &lt;code&gt;process.execPath&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;argv[0]&lt;/code&gt; 元の値へのアクセスが必要な場合は、 &lt;code&gt;process.argv0&lt;/code&gt; を参照してください。2番目の要素は、実行されるJavaScriptファイルへのパスです。残りの要素は、追加のコマンドライン引数になります。</target>
        </trans-unit>
        <trans-unit id="c6b4b1de939aef4af9e8fcf89d17bebffa3f7e86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.chdir()&lt;/code&gt; method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified &lt;code&gt;directory&lt;/code&gt; does not exist).</source>
          <target state="translated">&lt;code&gt;process.chdir()&lt;/code&gt; メソッドは、Node.jsのプロセスの現在の作業ディレクトリを変更したり（指定した場合、例えばそうすることが失敗した場合に例外をスローし &lt;code&gt;directory&lt;/code&gt; 存在しません）。</target>
        </trans-unit>
        <trans-unit id="506618ff24992beaaf170321a3e3e38432597bf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.config&lt;/code&gt; property is &lt;strong&gt;not&lt;/strong&gt; read-only and there are existing modules in the ecosystem that are known to extend, modify, or entirely replace the value of &lt;code&gt;process.config&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.config&lt;/code&gt; のプロパティがされ&lt;strong&gt;ていない&lt;/strong&gt;読み取り専用で、拡張、変更、または全くの値置き換えることが知られているエコシステム内の既存のモジュールがある &lt;code&gt;process.config&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="f3323519b7dfe1f96d4694e734f3bc092e9dc8cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.config&lt;/code&gt; property returns an &lt;code&gt;Object&lt;/code&gt; containing the JavaScript representation of the configure options used to compile the current Node.js executable. This is the same as the &lt;code&gt;config.gypi&lt;/code&gt; file that was produced when running the &lt;code&gt;./configure&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;process.config&lt;/code&gt; のプロパティを返す &lt;code&gt;Object&lt;/code&gt; 現在のNode.js実行可能ファイルをコンパイルするために使用される設定オプションのJavaScriptの表現を含有します。これは、。/ &lt;code&gt;./configure&lt;/code&gt; スクリプトの実行時に生成された &lt;code&gt;config.gypi&lt;/code&gt; ファイルと同じです。</target>
        </trans-unit>
        <trans-unit id="cf7ff57c67040bc13dfbab7e1084e880809f8679" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.cpuUsage()&lt;/code&gt; method returns the user and system CPU time usage of the current process, in an object with properties &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt;, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process.</source>
          <target state="translated">&lt;code&gt;process.cpuUsage()&lt;/code&gt; メソッドは、プロパティを持つオブジェクトに、現在のプロセスのユーザおよびシステムCPU時間の使用状況を返し &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;system&lt;/code&gt; 値マイクロ秒の値（第2の万）です。これらの値は、ユーザーコードとシステムコードでそれぞれ費やされた時間を測定し、複数のCPUコアがこのプロセスの作業を実行している場合、実際の経過時間より長くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="771947b36c2b55fee12b3a836b78cc4c4e13363f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.cwd()&lt;/code&gt; method returns the current working directory of the Node.js process.</source>
          <target state="translated">&lt;code&gt;process.cwd()&lt;/code&gt; メソッドは、Node.jsのプロセスの現在の作業ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="789be1f7f1a58a4f8e41dc6a7207677908b728fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.dlopen()&lt;/code&gt; method allows to dynamically load shared objects. It is primarily used by &lt;code&gt;require()&lt;/code&gt; to load C++ Addons, and should not be used directly, except in special cases. In other words, &lt;a href=&quot;globals#globals_require&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; should be preferred over &lt;code&gt;process.dlopen()&lt;/code&gt;, unless there are specific reasons.</source>
          <target state="translated">&lt;code&gt;process.dlopen()&lt;/code&gt; メソッドは、動的に共有オブジェクトをロードすることを可能にします。これは主に &lt;code&gt;require()&lt;/code&gt; によってC ++アドオンをロードするために使用され、特別な場合を除いて直接使用しないでください。言い換えると、特別な理由がない限り、&lt;a href=&quot;globals#globals_require&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;process.dlopen()&lt;/code&gt; よりも優先されるべきです。</target>
        </trans-unit>
        <trans-unit id="b810960a380dde20678d8a762550d496b7d4904f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.emitWarning()&lt;/code&gt; method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;process.emitWarning()&lt;/code&gt; メソッドは、カスタムまたは特定用途の処理警告を発するために使用することができます。これらは、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;イベントにハンドラーを追加することでリッスンできます。</target>
        </trans-unit>
        <trans-unit id="a363e8af022e5aace7bd4cc8489cc4b12d310a86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; property returns an object containing the user environment. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/environ.7.html&quot;&gt;&lt;code&gt;environ(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; のプロパティは、ユーザーの環境を含むオブジェクトを返します。&lt;a href=&quot;http://man7.org/linux/man-pages/man7/environ.7.html&quot;&gt; &lt;code&gt;environ(7)&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2735db157a5cf0d02b3e84dbefe75992b18a6f02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execArgv&lt;/code&gt; property returns the set of Node.js-specific command-line options passed when the Node.js process was launched. These options do not appear in the array returned by the &lt;a href=&quot;#process_process_argv&quot;&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/a&gt; property, and do not include the Node.js executable, the name of the script, or any options following the script name. These options are useful in order to spawn child processes with the same execution environment as the parent.</source>
          <target state="translated">&lt;code&gt;process.execArgv&lt;/code&gt; のプロパティは、Node.jsのプロセスが起動されたとき、Node.jsの固有のコマンドラインオプションのセットが渡さ返します。これらのオプションは、&lt;a href=&quot;#process_process_argv&quot;&gt; &lt;code&gt;process.argv&lt;/code&gt; &lt;/a&gt;プロパティによって返される配列には表示されず、Node.js実行可能ファイル、スクリプトの名前、またはスクリプト名に続くオプションは含まれません。これらのオプションは、親と同じ実行環境で子プロセスを生成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="04f3674cccb81b4b3df6feff774a9785180339eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execPath&lt;/code&gt; property returns the absolute pathname of the executable that started the Node.js process.</source>
          <target state="translated">&lt;code&gt;process.execPath&lt;/code&gt; のプロパティは、Node.jsのプロセスを開始した実行可能ファイルの絶対パス名を返します。</target>
        </trans-unit>
        <trans-unit id="bd34beaf709be80f72dd5d32da45aab42c5ff969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method being called explicitly;</source>
          <target state="translated">&lt;code&gt;process.exit()&lt;/code&gt; 明示的に呼び出されるメソッド。</target>
        </trans-unit>
        <trans-unit id="fb84d9b3c71243bbeeef4ef8f2352da9dd648c25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method instructs Node.js to terminate the process synchronously with an exit status of &lt;code&gt;code&lt;/code&gt;. If &lt;code&gt;code&lt;/code&gt; is omitted, exit uses either the 'success' code &lt;code&gt;0&lt;/code&gt; or the value of &lt;code&gt;process.exitCode&lt;/code&gt; if it has been set. Node.js will not terminate until all the &lt;a href=&quot;#process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event listeners are called.</source>
          <target state="translated">&lt;code&gt;process.exit()&lt;/code&gt; メソッドは終了ステータスと同期プロセスを終了するためのNode.jsを指示する &lt;code&gt;code&lt;/code&gt; 。 &lt;code&gt;code&lt;/code&gt; が省略されている場合、exitは「成功」コード &lt;code&gt;0&lt;/code&gt; または設定されている場合は &lt;code&gt;process.exitCode&lt;/code&gt; の値を使用します。Node.jsは、すべての&lt;a href=&quot;#process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;イベントリスナーが呼び出されるまで終了しません。</target>
        </trans-unit>
        <trans-unit id="62d6b7f5898a28e30f2d6fe157c331fd123ade49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getegid()&lt;/code&gt; method returns the numerical effective group identity of the Node.js process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getegid.2.html&quot;&gt;&lt;code&gt;getegid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.getegid()&lt;/code&gt; メソッドは、Node.jsのプロセスの数値有効なグループIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getegid.2.html&quot;&gt; &lt;code&gt;getegid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="ed73c7c214cd4dee204193e3a7ae59aec83c4add" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.geteuid()&lt;/code&gt; method returns the numerical effective user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/geteuid.2.html&quot;&gt;&lt;code&gt;geteuid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.geteuid()&lt;/code&gt; メソッドは、プロセスの数値有効なユーザIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/geteuid.2.html&quot;&gt; &lt;code&gt;geteuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="af132ca481dc153ef9ccfdc5f748fae75cd7e730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getgid()&lt;/code&gt; method returns the numerical group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getgid.2.html&quot;&gt;&lt;code&gt;getgid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.getgid()&lt;/code&gt; メソッドは、プロセスの数値グループIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getgid.2.html&quot;&gt; &lt;code&gt;getgid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3708eae157d7c0dac42a7a30fd0c9654eb1a1766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getgroups()&lt;/code&gt; method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is.</source>
          <target state="translated">&lt;code&gt;process.getgroups()&lt;/code&gt; メソッドは、補助グループIDの配列を返します。POSIXは、有効なグループIDが含まれている場合は未指定のままにしますが、Node.jsは常に含まれていることを保証します。</target>
        </trans-unit>
        <trans-unit id="d5dca59d0c62895f4a7bb800e388aa9d94396a7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getuid()&lt;/code&gt; method returns the numeric user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getuid.2.html&quot;&gt;&lt;code&gt;getuid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.getuid()&lt;/code&gt; メソッドは、プロセスの数値ユーザIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getuid.2.html&quot;&gt; &lt;code&gt;getuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="211a725b7d93a1ec88ccf7daa8269658983d8aac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.hrtime()&lt;/code&gt; method returns the current high-resolution real time in a &lt;code&gt;[seconds, nanoseconds]&lt;/code&gt; tuple &lt;code&gt;Array&lt;/code&gt;, where &lt;code&gt;nanoseconds&lt;/code&gt; is the remaining part of the real time that can't be represented in second precision.</source>
          <target state="translated">&lt;code&gt;process.hrtime()&lt;/code&gt; メソッドは、現在では高解像度の実時間を返し &lt;code&gt;[seconds, nanoseconds]&lt;/code&gt; タプル &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;nanoseconds&lt;/code&gt; 秒精度で表現できない実時間の残りの部分です。</target>
        </trans-unit>
        <trans-unit id="4be5514b03bd6fa1959b502b9f965ad001625a88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.initgroups()&lt;/code&gt; method reads the &lt;code&gt;/etc/group&lt;/code&gt; file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have &lt;code&gt;root&lt;/code&gt; access or the &lt;code&gt;CAP_SETGID&lt;/code&gt; capability.</source>
          <target state="translated">&lt;code&gt;process.initgroups()&lt;/code&gt; メソッドは、読み出し &lt;code&gt;/etc/group&lt;/code&gt; ファイルを、ユーザーがメンバーであるすべてのグループを使用して、グループアクセスリストを初期化します。これは特権操作であり、Node.jsプロセスに &lt;code&gt;root&lt;/code&gt; アクセスまたは &lt;code&gt;CAP_SETGID&lt;/code&gt; 機能のいずれかが必要です。</target>
        </trans-unit>
        <trans-unit id="762e81bf5ea587278c34db5c315aa6c7bd3317a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.kill()&lt;/code&gt; method sends the &lt;code&gt;signal&lt;/code&gt; to the process identified by &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.kill()&lt;/code&gt; メソッドは、送信 &lt;code&gt;signal&lt;/code&gt; によって識別されるプロセスに &lt;code&gt;pid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75f6018d6315d0eee16c17c8d7ee72c0c45f37fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.mainModule&lt;/code&gt; property provides an alternative way of retrieving &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt;. The difference is that if the main module changes at runtime, &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt; may still refer to the original main module in modules that were required before the change occurred. Generally, it's safe to assume that the two refer to the same module.</source>
          <target state="translated">&lt;code&gt;process.mainModule&lt;/code&gt; のプロパティが取得する別の方法を提供&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; を&lt;/a&gt;。違いは、メインモジュールが実行時に変更された場合、&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; &lt;/a&gt;は、変更が発生する前に必要だったモジュールの元のメインモジュールを引き続き参照する可能性があることです。一般に、2つが同じモジュールを参照していると想定しても安全です。</target>
        </trans-unit>
        <trans-unit id="191b911b521fd16f873a9320d9b6eb03a484f7d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.memoryUsage()&lt;/code&gt; method returns an object describing the memory usage of the Node.js process measured in bytes.</source>
          <target state="translated">&lt;code&gt;process.memoryUsage()&lt;/code&gt; メソッドは、バイト単位で測定されたNode.jsのプロセスのメモリ使用量を記述するオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a8983e937ed2efcfdac105808395486f4b6cda97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.noDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--no-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">&lt;code&gt;process.noDeprecation&lt;/code&gt; のプロパティがあるかどうかを示す &lt;code&gt;--no-deprecation&lt;/code&gt; フラグは現在のNode.jsプロセスに設定されています。このフラグの動作の詳細については、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; イベント&lt;/a&gt;と&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; メソッド&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1df30c5c00fda9c639114a7d3b1c2f2d35df2248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.pid&lt;/code&gt; property returns the PID of the process.</source>
          <target state="translated">&lt;code&gt;process.pid&lt;/code&gt; プロパティは、プロセスのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="acaa47049ce31949c1b04bc4f40b7065fb80a583" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.platform&lt;/code&gt; property returns a string identifying the operating system platform on which the Node.js process is running.</source>
          <target state="translated">&lt;code&gt;process.platform&lt;/code&gt; のプロパティは、Node.jsの処理が実行されているオペレーティング・システム・プラットフォームを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="eff9bdee5852ccca216f17f3c7f3889a21c51dc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.ppid&lt;/code&gt; property returns the PID of the current parent process.</source>
          <target state="translated">&lt;code&gt;process.ppid&lt;/code&gt; プロパティは、現在の親プロセスのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="b5be56c986bb2a57fe5b74e3d4ff21efc9a8bc0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.release&lt;/code&gt; property returns an &lt;code&gt;Object&lt;/code&gt; containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.</source>
          <target state="translated">&lt;code&gt;process.release&lt;/code&gt; プロパティを返し &lt;code&gt;Object&lt;/code&gt; ソースtarballとヘッダーのみのtarファイルのURLを含む、現在のリリースに関連するメタデータを含有します。</target>
        </trans-unit>
        <trans-unit id="811c638aa90d3dc585a7798554c7019e09390dc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; function sets a function that will be invoked when an uncaught exception occurs, which will receive the exception value itself as its first argument.</source>
          <target state="translated">&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; 関数は、最初の引数として例外値そのものを受信するキャッチされない例外が発生したときに呼び出される関数を設定します。</target>
        </trans-unit>
        <trans-unit id="2fc2a8eeb7c653eb83e8bcad3bd6133d002b2e9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setegid()&lt;/code&gt; method sets the effective group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setegid.2.html&quot;&gt;&lt;code&gt;setegid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID.</source>
          <target state="translated">&lt;code&gt;process.setegid()&lt;/code&gt; メソッドは、プロセスの実効グループIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setegid.2.html&quot;&gt; &lt;code&gt;setegid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはグループ名の文字列として渡すことができます。グループ名が指定されている場合、このメソッドは、関連付けられている数値IDを解決している間ブロックします。</target>
        </trans-unit>
        <trans-unit id="b5076a0f2622ac5941128ba5a36bf507f3fb4978" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.seteuid()&lt;/code&gt; method sets the effective user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/seteuid.2.html&quot;&gt;&lt;code&gt;seteuid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</source>
          <target state="translated">&lt;code&gt;process.seteuid()&lt;/code&gt; メソッドは、プロセスの有効なユーザIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/seteuid.2.html&quot;&gt; &lt;code&gt;seteuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはユーザー名文字列として渡すことができます。ユーザー名が指定されている場合、関連する数値IDを解決している間、メソッドはブロックします。</target>
        </trans-unit>
        <trans-unit id="fa29192faf11ea969773313f63af6ca30198b281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setgid()&lt;/code&gt; method sets the group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setgid.2.html&quot;&gt;&lt;code&gt;setgid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID.</source>
          <target state="translated">&lt;code&gt;process.setgid()&lt;/code&gt; メソッドは、プロセスのグループIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setgid.2.html&quot;&gt; &lt;code&gt;setgid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはグループ名の文字列として渡すことができます。グループ名が指定されている場合、このメソッドは、関連する数値IDを解決している間ブロックします。</target>
        </trans-unit>
        <trans-unit id="71c4c145094b051c684076f71f43e6e3e387e712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setgroups()&lt;/code&gt; method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have &lt;code&gt;root&lt;/code&gt; or the &lt;code&gt;CAP_SETGID&lt;/code&gt; capability.</source>
          <target state="translated">&lt;code&gt;process.setgroups()&lt;/code&gt; メソッドは、Node.jsのプロセスのための補助グループIDを設定します。これは特権操作であり、Node.jsプロセスに &lt;code&gt;root&lt;/code&gt; または &lt;code&gt;CAP_SETGID&lt;/code&gt; 機能が必要です。</target>
        </trans-unit>
        <trans-unit id="548e1236f80bd23b2ec686e399bbc916d2cb95ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setuid(id)&lt;/code&gt; method sets the user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setuid.2.html&quot;&gt;&lt;code&gt;setuid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</source>
          <target state="translated">&lt;code&gt;process.setuid(id)&lt;/code&gt; メソッドは、プロセスのユーザIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setuid.2.html&quot;&gt; &lt;code&gt;setuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはユーザー名文字列として渡すことができます。ユーザー名が指定されている場合、関連する数値IDを解決している間、メソッドはブロックします。</target>
        </trans-unit>
        <trans-unit id="5081fd6ebb2403afeaea915b7bd21a31860635b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stderr&lt;/code&gt; property returns a stream connected to &lt;code&gt;stderr&lt;/code&gt; (fd &lt;code&gt;2&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;2&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;process.stderr&lt;/code&gt; のプロパティが接続ストリーム戻り &lt;code&gt;stderr&lt;/code&gt; （FD &lt;code&gt;2&lt;/code&gt; ）。fd &lt;code&gt;2&lt;/code&gt; がファイルを参照しない限り、それは&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt;ストリーム）です。この場合、ファイルは&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;書き込み可能な&lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="a1fcfbce9ab7065707f5aa8853282b67206fe402" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stdin&lt;/code&gt; property returns a stream connected to &lt;code&gt;stdin&lt;/code&gt; (fd &lt;code&gt;0&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;0&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;process.stdin&lt;/code&gt; プロパティが接続ストリーム戻り &lt;code&gt;stdin&lt;/code&gt; （FD &lt;code&gt;0&lt;/code&gt; ）。fd &lt;code&gt;0&lt;/code&gt; がファイルを参照しない限り、それは&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt;ストリーム）です。その場合、ファイルは&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;読み取り可能な&lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="eb08e01031c16b9aa9d0024fe2532eb2e3e999a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stdout&lt;/code&gt; property returns a stream connected to &lt;code&gt;stdout&lt;/code&gt; (fd &lt;code&gt;1&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;1&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;process.stdout&lt;/code&gt; のプロパティが接続ストリーム戻り &lt;code&gt;stdout&lt;/code&gt; （FD &lt;code&gt;1&lt;/code&gt; ）。fd &lt;code&gt;1&lt;/code&gt; がファイルを参照しない限り、それは&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt;ストリーム）です。この場合、ファイルは&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;書き込み可能な&lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="9cd576ae3e4876157374a35dbd6210172c5e9640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.throwDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--throw-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">&lt;code&gt;process.throwDeprecation&lt;/code&gt; のプロパティがあるかどうかを示す &lt;code&gt;--throw-deprecation&lt;/code&gt; フラグは現在のNode.jsプロセスに設定されています。このフラグの動作の詳細については、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; イベント&lt;/a&gt;と&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; メソッド&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a15c02c35a18d0437643387e177371d9e6917b1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.title&lt;/code&gt; property returns the current process title (i.e. returns the current value of &lt;code&gt;ps&lt;/code&gt;). Assigning a new value to &lt;code&gt;process.title&lt;/code&gt; modifies the current value of &lt;code&gt;ps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.title&lt;/code&gt; プロパティは、現在のプロセスタイトル（すなわち、現在の値を返す返し &lt;code&gt;ps&lt;/code&gt; ）。 &lt;code&gt;process.title&lt;/code&gt; に新しい値を割り当てると、 &lt;code&gt;ps&lt;/code&gt; の現在の値が変更されます。</target>
        </trans-unit>
        <trans-unit id="b9b5bc60b8b13672f1ce76e6ac6f0e3f1ed8658c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.traceDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--trace-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">&lt;code&gt;process.traceDeprecation&lt;/code&gt; のプロパティがあるかどうかを示す &lt;code&gt;--trace-deprecation&lt;/code&gt; フラグは現在のNode.jsプロセスに設定されています。このフラグの動作の詳細については、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; イベント&lt;/a&gt;と&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; メソッド&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="694d48572e7659a3c90fe3f65ec90ed80b9a9e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.umask()&lt;/code&gt; method sets or returns the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process. Invoked without an argument, the current mask is returned, otherwise the umask is set to the argument value and the previous mask is returned.</source>
          <target state="translated">&lt;code&gt;process.umask()&lt;/code&gt; メソッドのセットや戻りNode.jsのプロセスのファイル・モード作成マスク。子プロセスは親プロセスからマスクを継承します。引数なしで呼び出されると、現在のマスクが返されます。それ以外の場合は、umaskが引数値に設定され、前のマスクが返されます。</target>
        </trans-unit>
        <trans-unit id="d1a2bae7c8b84dc3492873bd48e3d5fc03d34913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.uptime()&lt;/code&gt; method returns the number of seconds the current Node.js process has been running.</source>
          <target state="translated">&lt;code&gt;process.uptime()&lt;/code&gt; メソッドは、現在のNode.jsプロセスが実行された秒数を返します。</target>
        </trans-unit>
        <trans-unit id="a55e19423be1cf5e5fd45f377c01fd1c5c5c7be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.version&lt;/code&gt; property returns the Node.js version string.</source>
          <target state="translated">&lt;code&gt;process.version&lt;/code&gt; のプロパティは、Node.jsのバージョン文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5cd91315fa24f2e5fb1ec6c0fe3012d7b04a6c87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.versions&lt;/code&gt; property returns an object listing the version strings of Node.js and its dependencies. &lt;code&gt;process.versions.modules&lt;/code&gt; indicates the current ABI version, which is increased whenever a C++ API changes. Node.js will refuse to load modules that were compiled against a different module ABI version.</source>
          <target state="translated">&lt;code&gt;process.versions&lt;/code&gt; のプロパティは、Node.jsのとその依存関係のバージョン文字列をリストオブジェクトを返します。 &lt;code&gt;process.versions.modules&lt;/code&gt; は、現在のABIバージョンを示します。これは、C ++ APIが変更されるたびに増加します。Node.jsは、異なるモジュールのABIバージョンに対してコンパイルされたモジュールのロードを拒否します。</target>
        </trans-unit>
        <trans-unit id="ccc599c540c487983716c87164c83eff4013c0e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process&lt;/code&gt; object is a &lt;code&gt;global&lt;/code&gt; that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using &lt;code&gt;require()&lt;/code&gt;. It can also be explicitly accessed using &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; オブジェクトは、 &lt;code&gt;global&lt;/code&gt; 情報を提供すること、および現在のNode.jsプロセスの制御。グローバルとして、 &lt;code&gt;require()&lt;/code&gt; を使用せずにNode.jsアプリケーションで常に使用できます。 &lt;code&gt;require()&lt;/code&gt; を使用して明示的にアクセスすることもできます：</target>
        </trans-unit>
        <trans-unit id="bc3750100f2cebbb32bfd75aab8de7089d8ecadb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process&lt;/code&gt; object is an instance of &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; オブジェクトは、インスタンスである&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16d89af6e6069a7f2da9647bc46587a5e575bc24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; is deprecated in favour of &lt;code&gt;script.createCachedData()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;produceCachedData&lt;/code&gt; はを支持して推奨されません &lt;code&gt;script.createCachedData()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d20471aca1c68e2609119fc1a3be70dd8ae453d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; option is deprecated. Use &lt;a href=&quot;vm#vm_script_createcacheddata&quot;&gt;&lt;code&gt;script.createCachedData()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;produceCachedData&lt;/code&gt; のオプションが推奨されていません。代わりに&lt;a href=&quot;vm#vm_script_createcacheddata&quot;&gt; &lt;code&gt;script.createCachedData()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="826f7bd6fc7391d89e12f247d46ccc2f906c4e5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prompt&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;prompt&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a98c7c4f83c7e514f693d9bddfce7f7e87772c91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;protocol&lt;/code&gt; property identifies the URL's lower-cased protocol scheme.</source>
          <target state="translated">&lt;code&gt;protocol&lt;/code&gt; プロパティは、URLの小文字に変換プロトコルスキームを識別します。</target>
        </trans-unit>
        <trans-unit id="228c4ac856e053044883415e7373842750fd563f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.decode()&lt;/code&gt; method converts a &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; string of ASCII-only characters to the equivalent string of Unicode codepoints.</source>
          <target state="translated">&lt;code&gt;punycode.decode()&lt;/code&gt; メソッドは、変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードの&lt;/a&gt; Unicodeのコードポイントの等価文字列に、ASCII文字のみの文字列。</target>
        </trans-unit>
        <trans-unit id="408bbc431e16aec56b6b6e8fb9712fe1f4b62965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.encode()&lt;/code&gt; method converts a string of Unicode codepoints to a &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; string of ASCII-only characters.</source>
          <target state="translated">&lt;code&gt;punycode.encode()&lt;/code&gt; メソッドは、へのUnicodeコードポイントの文字列に変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードの&lt;/a&gt; ASCIIのみの文字列を。</target>
        </trans-unit>
        <trans-unit id="91875f6288f895ce3a2a09be67905a3132039dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.toASCII()&lt;/code&gt; method converts a Unicode string representing an Internationalized Domain Name to &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt;. Only the non-ASCII parts of the domain name will be converted. Calling &lt;code&gt;punycode.toASCII()&lt;/code&gt; on a string that already only contains ASCII characters will have no effect.</source>
          <target state="translated">&lt;code&gt;punycode.toASCII()&lt;/code&gt; メソッドは、に国際化ドメイン名を表すUnicode文字列に変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードを&lt;/a&gt;。ドメイン名の非ASCII部分のみが変換されます。既にASCII文字のみが含まれている文字列に対して &lt;code&gt;punycode.toASCII()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="cc4b8dfe8ceb6a10ad2abdbc92c91f0d4a7f2f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.toUnicode()&lt;/code&gt; method converts a string representing a domain name containing &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; encoded characters into Unicode. Only the &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; encoded parts of the domain name are be converted.</source>
          <target state="translated">&lt;code&gt;punycode.toUnicode()&lt;/code&gt; メソッドが含まれているドメイン名を表す文字列に変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードが&lt;/a&gt;ユニコード文字にエンコード。ドメイン名の&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycodeで&lt;/a&gt;エンコードされた部分のみが変換されます。</target>
        </trans-unit>
        <trans-unit id="0befa44f7babd888957b6e36c930438b76ffd9ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.ucs2.decode()&lt;/code&gt; method returns an array containing the numeric codepoint values of each Unicode symbol in the string.</source>
          <target state="translated">&lt;code&gt;punycode.ucs2.decode()&lt;/code&gt; メソッドは、文字列内の各Unicodeのシンボルの数値コードポイント値を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="267a9d0ce3eff929cfb8ef044cf76a59b55c9c1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.ucs2.encode()&lt;/code&gt; method returns a string based on an array of numeric code point values.</source>
          <target state="translated">&lt;code&gt;punycode.ucs2.encode()&lt;/code&gt; メソッドは、数値コードポイント値の配列に基づいて、文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8e23d6e8be896f3734158314b4e9867f3ad47751" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module is a bundled version of the &lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt; module. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;punycode&lt;/code&gt; モジュールは、バンドル版のある&lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.jsの&lt;/a&gt;モジュール。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d808670b3cd55126d38e22493d03f04db2cf6c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the &lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt; project.</source>
          <target state="translated">&lt;code&gt;punycode&lt;/code&gt; モジュールのNode.jsで使用されるサードパーティ依存性であり、利便性の開発者に利用可能となります。モジュールの修正またはその他の変更は、&lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt;プロジェクトに送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="41de5cb0574f2fba4ee155fa5a1b2a348c0df173" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module provides a simple implementation of the Punycode standard.</source>
          <target state="translated">&lt;code&gt;punycode&lt;/code&gt; モジュールは、ピュニコード標準の単純な実装を提供します。</target>
        </trans-unit>
        <trans-unit id="73bb1f54941b1b2bcfe26b1faa1939a3272676d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; property is either the query string without the leading ASCII question mark (&lt;code&gt;?&lt;/code&gt;), or an object returned by the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;parse()&lt;/code&gt; method. Whether the &lt;code&gt;query&lt;/code&gt; property is a string or object is determined by the &lt;code&gt;parseQueryString&lt;/code&gt; argument passed to &lt;code&gt;url.parse()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;query&lt;/code&gt; プロパティは、主要なASCIIの疑問符（なしのクエリ文字列のいずれかである &lt;code&gt;?&lt;/code&gt; ）、またはによって返されたオブジェクト&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;モジュールの &lt;code&gt;parse()&lt;/code&gt; メソッド。かどうかを &lt;code&gt;query&lt;/code&gt; プロパティは、文字列またはオブジェクトであることによって決定され &lt;code&gt;parseQueryString&lt;/code&gt; のに渡される引数 &lt;code&gt;url.parse()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2153550243326c160d012c291015912a1ad6a730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.decode()&lt;/code&gt; function is an alias for &lt;code&gt;querystring.parse()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.decode()&lt;/code&gt; 関数での別名である &lt;code&gt;querystring.parse()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bed9c0e3a6a05f53d9ef96d274c51de9ef8679c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.encode()&lt;/code&gt; function is an alias for &lt;code&gt;querystring.stringify()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.encode()&lt;/code&gt; 関数での別名である &lt;code&gt;querystring.stringify()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6132c47d28eb2786bc7bb47dc7d4db7a3c2ff1d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.escape()&lt;/code&gt; method is used by &lt;code&gt;querystring.stringify()&lt;/code&gt; and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement percent-encoding implementation if necessary by assigning &lt;code&gt;querystring.escape&lt;/code&gt; to an alternative function.</source>
          <target state="translated">&lt;code&gt;querystring.escape()&lt;/code&gt; メソッドは、で使用される &lt;code&gt;querystring.stringify()&lt;/code&gt; と一般的に直接使用されることが期待されていません。これは主にエクスポートされ、必要に応じて &lt;code&gt;querystring.escape&lt;/code&gt; を代替関数に割り当てることにより、アプリケーションコードが置換パーセントエンコーディング実装を提供できるようにします。</target>
        </trans-unit>
        <trans-unit id="c5224c380629537428e0e4f4c27dbf51ea35016e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.escape()&lt;/code&gt; method performs URL percent-encoding on the given &lt;code&gt;str&lt;/code&gt; in a manner that is optimized for the specific requirements of URL query strings.</source>
          <target state="translated">&lt;code&gt;querystring.escape()&lt;/code&gt; 所与のメソッドを実行するURLパーセントエンコーディング &lt;code&gt;str&lt;/code&gt; URLのクエリ文字列の特定の要件のために最適化されている方法です。</target>
        </trans-unit>
        <trans-unit id="5a10b77992e833bb7410543f2bec62c4ac5b0e9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.parse()&lt;/code&gt; method parses a URL query string (&lt;code&gt;str&lt;/code&gt;) into a collection of key and value pairs.</source>
          <target state="translated">&lt;code&gt;querystring.parse()&lt;/code&gt; メソッドは、URLのクエリ文字列（解析し、 &lt;code&gt;str&lt;/code&gt; キーと値のペアのコレクションの中に）。</target>
        </trans-unit>
        <trans-unit id="e5a1960ba5fd4e2b74aca2fe1c165907f1f0d579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.stringify()&lt;/code&gt; method produces a URL query string from a given &lt;code&gt;obj&lt;/code&gt; by iterating through the object's &quot;own properties&quot;.</source>
          <target state="translated">&lt;code&gt;querystring.stringify()&lt;/code&gt; メソッドは、指定されたからURLクエリ文字列を生成 &lt;code&gt;obj&lt;/code&gt; 、オブジェクトの「独自のプロパティ」を反復処理による。</target>
        </trans-unit>
        <trans-unit id="c5307406ea6fa7bf57e06f70c0174467f51d9697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.unescape()&lt;/code&gt; method is used by &lt;code&gt;querystring.parse()&lt;/code&gt; and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement decoding implementation if necessary by assigning &lt;code&gt;querystring.unescape&lt;/code&gt; to an alternative function.</source>
          <target state="translated">&lt;code&gt;querystring.unescape()&lt;/code&gt; メソッドは、で使用される &lt;code&gt;querystring.parse()&lt;/code&gt; と一般的に直接使用されることが期待されていません。これは主にエクスポートされ、必要に応じて &lt;code&gt;querystring.unescape&lt;/code&gt; を代替関数に割り当てることにより、アプリケーションコードが代替のデコード実装を提供できるようにします。</target>
        </trans-unit>
        <trans-unit id="3dfebb02c6228ac8a5328e125126812feb5b89f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.unescape()&lt;/code&gt; method performs decoding of URL percent-encoded characters on the given &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.unescape()&lt;/code&gt; 所与のURLパーセントエンコード文字のデコード方法を行う &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d1c0ca34aa769ac9ddc016377ff8b652b08575" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring&lt;/code&gt; module provides utilities for parsing and formatting URL query strings. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;querystring&lt;/code&gt; モジュールは、URLのクエリ文字列を解析してフォーマットするためのユーティリティを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="30245987a4dc60e4e4ad7243ddad02cac4a76463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queueMicrotask()&lt;/code&gt; method queues a microtask to invoke &lt;code&gt;callback&lt;/code&gt;. If &lt;code&gt;callback&lt;/code&gt; throws an exception, the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">&lt;code&gt;queueMicrotask()&lt;/code&gt; メソッドを呼び出すためにマイクロタスクをキューに &lt;code&gt;callback&lt;/code&gt; 。場合 &lt;code&gt;callback&lt;/code&gt; 例外をスローし、&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; オブジェクト&lt;/a&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="39930c61db776c2617ebaa27b1b42a4bdf7d2790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rawPacket&lt;/code&gt; is the current buffer that just parsed. Adding this buffer to the error object of &lt;code&gt;'clientError'&lt;/code&gt; event is to make it possible that developers can log the broken packet.</source>
          <target state="translated">&lt;code&gt;rawPacket&lt;/code&gt; はちょうど解析され、現在のバッファです。このバッファを &lt;code&gt;'clientError'&lt;/code&gt; イベントのエラーオブジェクトに追加すると、開発者が壊れたパケットをログに記録できるようになります。</target>
        </trans-unit>
        <trans-unit id="93ee6743dbfa8019b82c97cbc7225730ee7f7113" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable._read()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;readable._read()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="10cec6d0c6d91f034eb6cec16dd30e3ca6d38432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.isPaused()&lt;/code&gt; method returns the current operating state of the &lt;code&gt;Readable&lt;/code&gt;. This is used primarily by the mechanism that underlies the &lt;code&gt;readable.pipe()&lt;/code&gt; method. In most typical cases, there will be no reason to use this method directly.</source>
          <target state="translated">&lt;code&gt;readable.isPaused()&lt;/code&gt; メソッドは、現在の動作状態を返し &lt;code&gt;Readable&lt;/code&gt; 。これは主に、 &lt;code&gt;readable.pipe()&lt;/code&gt; メソッドの基礎となるメカニズムによって使用されます。ほとんどの場合、この方法を直接使用する理由はありません。</target>
        </trans-unit>
        <trans-unit id="b31cf177473ce29edcad6d40ce117be0e7f14407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pause()&lt;/code&gt; method has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listener.</source>
          <target state="translated">&lt;code&gt;readable.pause()&lt;/code&gt; がある場合、この方法は効果がありません &lt;code&gt;'readable'&lt;/code&gt; イベントリスナ。</target>
        </trans-unit>
        <trans-unit id="b002965c32b67e9b46208135e46530c174b4fc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pause()&lt;/code&gt; method will cause a stream in flowing mode to stop emitting &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer.</source>
          <target state="translated">&lt;code&gt;readable.pause()&lt;/code&gt; メソッドは、発光停止に流れるモードでストリーム原因となります&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;モードを流すアウト切り替え、イベントを。使用可能になったデータはすべて内部バッファーに残ります。</target>
        </trans-unit>
        <trans-unit id="4eb396a0c95f297e4817955f466c443654703ac3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pipe()&lt;/code&gt; method attaches a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream to the &lt;code&gt;readable&lt;/code&gt;, causing it to switch automatically into flowing mode and push all of its data to the attached &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;. The flow of data will be automatically managed so that the destination &lt;code&gt;Writable&lt;/code&gt; stream is not overwhelmed by a faster &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;readable.pipe()&lt;/code&gt; メソッドは、添付&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;にストリームを &lt;code&gt;readable&lt;/code&gt; ことが流れるモードに自動的に切り替わり、添付へのデータの全てをプッシュさせる、&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;。データのフローは自動的に管理されるので、宛先の &lt;code&gt;Writable&lt;/code&gt; ストリームが、より高速 &lt;code&gt;Readable&lt;/code&gt; ストリームによって圧倒されることはありません。</target>
        </trans-unit>
        <trans-unit id="40beb50c9579d94c270f6b6fd52c38e624a46fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pipe()&lt;/code&gt; method returns a reference to the &lt;em&gt;destination&lt;/em&gt; stream making it possible to set up chains of piped streams:</source>
          <target state="translated">&lt;code&gt;readable.pipe()&lt;/code&gt; メソッドへの参照戻り&lt;em&gt;先&lt;/em&gt;パイプストリームのチェーンを設定することが可能となるストリーム。</target>
        </trans-unit>
        <trans-unit id="df0ca1507c102328f0c4d38e0061a85b34869b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is designed to be as flexible as possible. For example, when wrapping a lower-level source that provides some form of pause/resume mechanism, and a data callback, the low-level source can be wrapped by the custom &lt;code&gt;Readable&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;readable.push()&lt;/code&gt; メソッドはできるだけ柔軟であるように設計されます。たとえば、何らかの形式の一時停止/再開メカニズムを提供する下位レベルのソースとデータコールバックをラップする場合、下位レベルのソースはカスタムの &lt;code&gt;Readable&lt;/code&gt; インスタンスによってラップできます。</target>
        </trans-unit>
        <trans-unit id="3f5e547595479ed3384e0eb249b538f6f2836384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is intended be called only by &lt;code&gt;Readable&lt;/code&gt; implementers, and only from within the &lt;code&gt;readable._read()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;readable.push()&lt;/code&gt; のみによって呼び出されるメソッドが意図されている &lt;code&gt;Readable&lt;/code&gt; 実装、およびのみの中から &lt;code&gt;readable._read()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="7524ab06bd3d9013528b860fd7928c96bab32f50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.read()&lt;/code&gt; method pulls some data out of the internal buffer and returns it. If no data available to be read, &lt;code&gt;null&lt;/code&gt; is returned. By default, the data will be returned as a &lt;code&gt;Buffer&lt;/code&gt; object unless an encoding has been specified using the &lt;code&gt;readable.setEncoding()&lt;/code&gt; method or the stream is operating in object mode.</source>
          <target state="translated">&lt;code&gt;readable.read()&lt;/code&gt; メソッドは、内部バッファ及び戻りそこからいくつかのデータを引っ張ります。読み取るデータがない場合は、 &lt;code&gt;null&lt;/code&gt; が返されます。デフォルトでは、 &lt;code&gt;readable.setEncoding()&lt;/code&gt; メソッドを使用してエンコーディングが指定されていないか、ストリームがオブジェクトモードで動作していない限り、データは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして返されます。</target>
        </trans-unit>
        <trans-unit id="6d01a823a8005400d55db78dcbbecbca4b2d2630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.read()&lt;/code&gt; method should only be called on &lt;code&gt;Readable&lt;/code&gt; streams operating in paused mode. In flowing mode, &lt;code&gt;readable.read()&lt;/code&gt; is called automatically until the internal buffer is fully drained.</source>
          <target state="translated">&lt;code&gt;readable.read()&lt;/code&gt; メソッドは、上で呼び出されるべきで &lt;code&gt;Readable&lt;/code&gt; 一時停止モードで動作するストリーム。フローモードでは、内部バッファーが完全に空になるまで、 &lt;code&gt;readable.read()&lt;/code&gt; が自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="deed8c40399d92ccac8f49f87f78ca29453829e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method can be used to fully consume the data from a stream without actually processing any of that data:</source>
          <target state="translated">&lt;code&gt;readable.resume()&lt;/code&gt; メソッドは、完全に実際にそのデータのいずれかを処理することなく、ストリームからデータを消費するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="67b8504af943e24f27cd912b4a2f12f128f2a1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method causes an explicitly paused &lt;code&gt;Readable&lt;/code&gt; stream to resume emitting &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events, switching the stream into flowing mode.</source>
          <target state="translated">&lt;code&gt;readable.resume()&lt;/code&gt; メソッドは、明示的に一時停止させる &lt;code&gt;Readable&lt;/code&gt; 発光再開するストリーム&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;流動モードにストリームを切り替え、イベント。</target>
        </trans-unit>
        <trans-unit id="385656b7c5ea9118f2532b255395a4a4185c8bf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listener.</source>
          <target state="translated">&lt;code&gt;readable.resume()&lt;/code&gt; がある場合、この方法は効果がありません &lt;code&gt;'readable'&lt;/code&gt; イベントリスナ。</target>
        </trans-unit>
        <trans-unit id="c040a86eed6518119372b49051a74bee86060ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.setEncoding()&lt;/code&gt; method sets the character encoding for data read from the &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;readable.setEncoding()&lt;/code&gt; メソッドは、から読み出されたデータをコード文字セット &lt;code&gt;Readable&lt;/code&gt; ストリーム。</target>
        </trans-unit>
        <trans-unit id="346734afb05ca4e259af67e729481a1570cc346e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.unpipe()&lt;/code&gt; method detaches a &lt;code&gt;Writable&lt;/code&gt; stream previously attached using the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;readable.unpipe()&lt;/code&gt; メソッドは、切り離し &lt;code&gt;Writable&lt;/code&gt; 以前に使用して取り付けられたストリーム&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="3c3b8b68124246bfe57ac4975a1c8937cd39a32e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.unshift()&lt;/code&gt; method pushes a chunk of data back into the internal buffer. This is useful in certain situations where a stream is being consumed by code that needs to &quot;un-consume&quot; some amount of data that it has optimistically pulled out of the source, so that the data can be passed on to some other party.</source>
          <target state="translated">&lt;code&gt;readable.unshift()&lt;/code&gt; メソッドは、内部バッファへのデータバックのチャンクを押します。これは、ストリームがソースから楽観的に引き出したある量のデータを「消費しない」必要があるコードによって消費されている特定の状況で役立ちます。これにより、データを他のパーティに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="af39af0d7243c6f7a04b6565b68a4532aecaac6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readableHighWaterMark&lt;/code&gt; and &lt;code&gt;writableHighWaterMark&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;readableHighWaterMark&lt;/code&gt; と &lt;code&gt;writableHighWaterMark&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="caf7cf20b5829c60b2ece6960157ef5b46432184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.Interface&lt;/code&gt; instance is finished once the &lt;code&gt;'close'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;readline.Interface&lt;/code&gt; の後にインスタンスが終了した &lt;code&gt;'close'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="e4bd58e1c634bfc6e7a4aea91a5e49231b1c0690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.clearLine()&lt;/code&gt; method clears current line of given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; stream in a specified direction identified by &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readline.clearLine()&lt;/code&gt; メソッドは、所与の電流線クリア&lt;a href=&quot;tty&quot;&gt;のTTY&lt;/a&gt;によって識別指定された方向に流れを &lt;code&gt;dir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4426aa47fac03cd3a3473ed655e8669aed5da5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.clearScreenDown()&lt;/code&gt; method clears the given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; stream from the current position of the cursor down.</source>
          <target state="translated">&lt;code&gt;readline.clearScreenDown()&lt;/code&gt; メソッドは、指定されたクリア&lt;a href=&quot;tty&quot;&gt;TTYの&lt;/a&gt;カーソルの下の現在位置からのストリームを。</target>
        </trans-unit>
        <trans-unit id="5fc664c5790e107254a94b5912d0bd3240885968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.createInterface()&lt;/code&gt; method creates a new &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;readline.createInterface()&lt;/code&gt; メソッドは、新規作成 &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="5836c4f9ce7c37e68b431dba356d7f48120837c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.cursorTo()&lt;/code&gt; method moves cursor to the specified position in a given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;&lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readline.cursorTo()&lt;/code&gt; メソッドの移動は、所定の指定された位置にカーソル&lt;a href=&quot;tty&quot;&gt;のTTY &lt;/a&gt; &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07bae1b92e44b9c284369abc211727c51537a250" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.emitKeypressEvents()&lt;/code&gt; method causes the given &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream to begin emitting &lt;code&gt;'keypress'&lt;/code&gt; events corresponding to received input.</source>
          <target state="translated">&lt;code&gt;readline.emitKeypressEvents()&lt;/code&gt; メソッドは、指定された原因&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;可読&lt;/a&gt;発光開始するストリームを &lt;code&gt;'keypress'&lt;/code&gt; 受け取った入力に対応するイベント。</target>
        </trans-unit>
        <trans-unit id="17e092a48964934cca04dfb7cdd8d3238574e8df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.moveCursor()&lt;/code&gt; method moves the cursor &lt;em&gt;relative&lt;/em&gt; to its current position in a given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;&lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readline.moveCursor()&lt;/code&gt; メソッドは、カーソル移動&lt;em&gt;の相対的な&lt;/em&gt;所与におけるその現在の位置へ&lt;a href=&quot;tty&quot;&gt;のTTY &lt;/a&gt; &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e79db115dc200fa9356a7c5ef91d8c9284c30f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline&lt;/code&gt; module provides an interface for reading data from a &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream (such as &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt;) one line at a time. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;readline&lt;/code&gt; のモジュールからデータを読み取るためのインターフェースを提供&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;読み取り可能な&lt;/a&gt;（例えば、ストリーム&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;時）一行。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="91a37ef88760a1e1055abebacad77b336f36d8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recvBufferSize&lt;/code&gt; and &lt;code&gt;sendBufferSize&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;recvBufferSize&lt;/code&gt; と &lt;code&gt;sendBufferSize&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="297f39796ec740fbf6ca8c7b4f53526f22394916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl.REPLServer&lt;/code&gt; class inherits from the &lt;a href=&quot;readline#readline_class_interface&quot;&gt;&lt;code&gt;readline.Interface&lt;/code&gt;&lt;/a&gt; class. Instances of &lt;code&gt;repl.REPLServer&lt;/code&gt; are created using the &lt;code&gt;repl.start()&lt;/code&gt; method and &lt;em&gt;should not&lt;/em&gt; be created directly using the JavaScript &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;repl.REPLServer&lt;/code&gt; のからクラスを継承&lt;a href=&quot;readline#readline_class_interface&quot;&gt; &lt;code&gt;readline.Interface&lt;/code&gt; の&lt;/a&gt;クラス。 &lt;code&gt;repl.REPLServer&lt;/code&gt; のインスタンスはrepl.start &lt;code&gt;repl.start()&lt;/code&gt; メソッドを使用して作成されます。JavaScriptの &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成し&lt;em&gt;ない&lt;/em&gt;で&lt;em&gt;ください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="046929e0c4d6f589b8a544a51cc42f7fb89edf9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl.start()&lt;/code&gt; method creates and starts a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;repl.start()&lt;/code&gt; メソッドを作成して開始&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="90f98e1e7da501cb08e226bfb8ef8830de8da4f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; command allows code to be evaluated remotely. The &lt;code&gt;next&lt;/code&gt; command steps to the next line. Type &lt;code&gt;help&lt;/code&gt; to see what other commands are available.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; コマンドは、コードをリモートに評価することを可能にします。 &lt;code&gt;next&lt;/code&gt; のコマンドは、次の行に繰り返します。 &lt;code&gt;help&lt;/code&gt; と入力して、他に利用できるコマンドを確認します。</target>
        </trans-unit>
        <trans-unit id="0c7e83295655ebdff0b8c9ba68d0bc6b523483cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module exports the &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; class. While running, instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;, respectively, or may be connected to any Node.js &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、エクスポート&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;クラスを。実行中、&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;インスタンスはユーザー入力の個々の行を受け入れ、ユーザー定義の評価関数に従ってそれらを評価し、結果を出力します。入力と出力は、それぞれ &lt;code&gt;stdin&lt;/code&gt; と &lt;code&gt;stdout&lt;/code&gt; から、または任意のNode.js &lt;a href=&quot;stream&quot;&gt;ストリームに&lt;/a&gt;接続できます。</target>
        </trans-unit>
        <trans-unit id="1951a81b0b8f762a64a14d642731c2b48d00965d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、スタンドアロンプログラムとして、または他のアプリケーションでincludible両方利用可能である読み取りEVAL-プリントループ（REPL）の実装を提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cf27f1073da71855d9a610f1a35c2a529c179f5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module was unable to parse data from the REPL history file.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、REPL履歴ファイルからのデータを解析することができませんでした。</target>
        </trans-unit>
        <trans-unit id="1a2ad03c80c14a3c16014aedd8e247faf5bc99d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module's &lt;code&gt;REPL_MODE_MAGIC&lt;/code&gt; constant, used for &lt;code&gt;replMode&lt;/code&gt; option, has been removed. Its behavior has been functionally identical to that of &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; since Node.js 6.0.0, when V8 5.0 was imported. Please use &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールの &lt;code&gt;REPL_MODE_MAGIC&lt;/code&gt; のために使用される定数、 &lt;code&gt;replMode&lt;/code&gt; のオプションは、削除されました。その動作は、V8 5.0がインポートされたときのNode.js 6.0.0以降、 &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; の動作と機能的に同じです。代わりに &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7623117240409b0ce2003070bd63b8fe2d453bbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.clearBufferedCommand()&lt;/code&gt; method clears any command that has been buffered but not yet executed. This method is primarily intended to be called from within the action function for commands registered using the &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;replServer.clearBufferedCommand()&lt;/code&gt; メソッドは、バッファではなく、まだ実行されている任意のコマンドをクリアします。このメソッドは、主に &lt;code&gt;replServer.defineCommand()&lt;/code&gt; メソッドを使用して登録されたコマンドのアクション関数内から呼び出されることを目的としています。</target>
        </trans-unit>
        <trans-unit id="8f32cec1ea1335c2f16445f6aac3c850821e3c78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method is used to add new &lt;code&gt;.&lt;/code&gt;-prefixed commands to the REPL instance. Such commands are invoked by typing a &lt;code&gt;.&lt;/code&gt; followed by the &lt;code&gt;keyword&lt;/code&gt;. The &lt;code&gt;cmd&lt;/code&gt; is either a &lt;code&gt;Function&lt;/code&gt; or an &lt;code&gt;Object&lt;/code&gt; with the following properties:</source>
          <target state="translated">&lt;code&gt;replServer.defineCommand()&lt;/code&gt; メソッドは、新しい追加するために使用されます &lt;code&gt;.&lt;/code&gt; -REPLインスタンスへの接頭辞付きコマンド。このようなコマンドは、を入力して呼び出されます &lt;code&gt;.&lt;/code&gt; &lt;code&gt;keyword&lt;/code&gt; 続きます。 &lt;code&gt;cmd&lt;/code&gt; はどちらかである &lt;code&gt;Function&lt;/code&gt; や &lt;code&gt;Object&lt;/code&gt; 次のプロパティを持ちます：</target>
        </trans-unit>
        <trans-unit id="77d9fdd8690bcc5161c48aab54bfce43107e70ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.displayPrompt()&lt;/code&gt; method readies the REPL instance for input from the user, printing the configured &lt;code&gt;prompt&lt;/code&gt; to a new line in the &lt;code&gt;output&lt;/code&gt; and resuming the &lt;code&gt;input&lt;/code&gt; to accept new input.</source>
          <target state="translated">&lt;code&gt;replServer.displayPrompt()&lt;/code&gt; メソッドは、設定、印刷、ユーザからの入力をREPLインスタンスを構える &lt;code&gt;prompt&lt;/code&gt; に新しい行に &lt;code&gt;output&lt;/code&gt; し、再開 &lt;code&gt;input&lt;/code&gt; 新しい入力を受け付けます。</target>
        </trans-unit>
        <trans-unit id="8ae31ac41f2a61484f03761b32d79b09d1466453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.displayPrompt&lt;/code&gt; method is primarily intended to be called from within the action function for commands registered using the &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;replServer.displayPrompt&lt;/code&gt; のコマンドを使用して登録するための方法は、主にアクション関数内から呼び出されることを意図している &lt;code&gt;replServer.defineCommand()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="9023f3594f56fc3e26b7898032e35aeb28ef142f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.aborted&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been aborted.</source>
          <target state="translated">&lt;code&gt;request.aborted&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 要求が中止された場合。</target>
        </trans-unit>
        <trans-unit id="b59052072d1351f3c90fcf75636c42d307d6014a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.finished&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt; has been called. &lt;code&gt;request.end()&lt;/code&gt; will automatically be called if the request was initiated via &lt;a href=&quot;#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;request.finished&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 場合&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt;と呼ばれてきました。リクエストが&lt;a href=&quot;#http_http_get_options_callback&quot;&gt; &lt;code&gt;http.get()&lt;/code&gt; を&lt;/a&gt;介して開始された場合、 &lt;code&gt;request.end()&lt;/code&gt; が自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e3099fd656b83e7763a54f364082aa1b15553996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requestListener&lt;/code&gt; is a function which is automatically added to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;requestListener&lt;/code&gt; は自動的に追加された機能である&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベント。</target>
        </trans-unit>
        <trans-unit id="d168aa9bbd7ab8c6e86509d8b2cf46cf229b468d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require()&lt;/code&gt; in the above case shares the state with the context it is passed from. This may introduce risks when untrusted code is executed, e.g. altering objects in the context in unwanted ways.</source>
          <target state="translated">上記の場合の &lt;code&gt;require()&lt;/code&gt; は、渡されたコンテキストと状態を共有します。これは、信頼できないコードが実行された場合にリスクをもたらす可能性があります。たとえば、コンテキスト内のオブジェクトを望ましくない方法で変更する場合などです。</target>
        </trans-unit>
        <trans-unit id="d31c7e3af9a3b7c6102a0abc6c34e55dcd58c775" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;response.finished&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">&lt;code&gt;response.finished&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 場合&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;と呼ばれてきました。</target>
        </trans-unit>
        <trans-unit id="751ee92ece3e1bd8851491d0e6d3476f732d18c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resume()&lt;/code&gt; has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listening.</source>
          <target state="translated">&lt;code&gt;resume()&lt;/code&gt; がある場合には効果がありません &lt;code&gt;'readable'&lt;/code&gt; イベントのリスニング。</target>
        </trans-unit>
        <trans-unit id="4a799f1ab032fc1a6cef82fa1afa0ac7e9f6b4a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.close()&lt;/code&gt; method closes the &lt;code&gt;readline.Interface&lt;/code&gt; instance and relinquishes control over the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; streams. When called, the &lt;code&gt;'close'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">&lt;code&gt;rl.close()&lt;/code&gt; メソッドが閉じ &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスをオーバー制御放棄 &lt;code&gt;input&lt;/code&gt; 及び &lt;code&gt;output&lt;/code&gt; ストリームを。呼び出されると、 &lt;code&gt;'close'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="e7d58ebe0c855404a134dd7d4758bbda83411900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.close()&lt;/code&gt; method is called and the &lt;code&gt;readline.Interface&lt;/code&gt; instance has relinquished control over the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; streams;</source>
          <target state="translated">&lt;code&gt;rl.close()&lt;/code&gt; メソッドが呼び出され、 &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスは、上制御放棄た &lt;code&gt;input&lt;/code&gt; 及び &lt;code&gt;output&lt;/code&gt; ストリームを。</target>
        </trans-unit>
        <trans-unit id="656cec055c1e88ac7b7963397456f2fd3d5ac25f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.pause()&lt;/code&gt; method pauses the &lt;code&gt;input&lt;/code&gt; stream, allowing it to be resumed later if necessary.</source>
          <target state="translated">&lt;code&gt;rl.pause()&lt;/code&gt; メソッドは、一時停止 &lt;code&gt;input&lt;/code&gt; 必要に応じて、後で再開することを可能にする、ストリーム。</target>
        </trans-unit>
        <trans-unit id="231ef0fff60ee1f800adb18b7cdccf12c25eeea1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.prompt()&lt;/code&gt; method writes the &lt;code&gt;readline.Interface&lt;/code&gt; instances configured &lt;code&gt;prompt&lt;/code&gt; to a new line in &lt;code&gt;output&lt;/code&gt; in order to provide a user with a new location at which to provide input.</source>
          <target state="translated">&lt;code&gt;rl.prompt()&lt;/code&gt; メソッドは、書き込み &lt;code&gt;readline.Interface&lt;/code&gt; の構成例 &lt;code&gt;prompt&lt;/code&gt; に新しい行へ &lt;code&gt;output&lt;/code&gt; の入力を提供するために、新しい場所をユーザに提供するためにあります。</target>
        </trans-unit>
        <trans-unit id="f854a6ae33efe012164ab999bb636997ed8412a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.question()&lt;/code&gt; method displays the &lt;code&gt;query&lt;/code&gt; by writing it to the &lt;code&gt;output&lt;/code&gt;, waits for user input to be provided on &lt;code&gt;input&lt;/code&gt;, then invokes the &lt;code&gt;callback&lt;/code&gt; function passing the provided input as the first argument.</source>
          <target state="translated">&lt;code&gt;rl.question()&lt;/code&gt; メソッドが表示さ &lt;code&gt;query&lt;/code&gt; にそれを書き込むことにより、 &lt;code&gt;output&lt;/code&gt; 、上に提供されるユーザ入力を待つ &lt;code&gt;input&lt;/code&gt; し、呼び出す &lt;code&gt;callback&lt;/code&gt; 最初の引数として与えられた入力を渡す機能。</target>
        </trans-unit>
        <trans-unit id="cd58e2912673539288897b48fb7e4e51af8d97da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.resume()&lt;/code&gt; method resumes the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">&lt;code&gt;rl.resume()&lt;/code&gt; メソッドが再開 &lt;code&gt;input&lt;/code&gt; が一時停止された場合にストリームを。</target>
        </trans-unit>
        <trans-unit id="d7e0ca70a4694f620324f931a7c614e9530d97e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.setPrompt()&lt;/code&gt; method sets the prompt that will be written to &lt;code&gt;output&lt;/code&gt; whenever &lt;code&gt;rl.prompt()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;rl.setPrompt()&lt;/code&gt; メソッドは、に書き込まれるというプロンプト設定 &lt;code&gt;output&lt;/code&gt; たび &lt;code&gt;rl.prompt()&lt;/code&gt; が呼び出されています。</target>
        </trans-unit>
        <trans-unit id="f6c1a88a49e8590ead87e513bf92a8f632c1befb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write either &lt;code&gt;data&lt;/code&gt; or a key sequence identified by &lt;code&gt;key&lt;/code&gt; to the &lt;code&gt;output&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; argument is supported only if &lt;code&gt;output&lt;/code&gt; is a &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; text terminal.</source>
          <target state="translated">&lt;code&gt;rl.write()&lt;/code&gt; メソッドのいずれか書き込む &lt;code&gt;data&lt;/code&gt; によって識別またはキーシーケンス &lt;code&gt;key&lt;/code&gt; に &lt;code&gt;output&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; 引数が場合にのみサポートされて &lt;code&gt;output&lt;/code&gt; ある&lt;a href=&quot;tty&quot;&gt;TTYの&lt;/a&gt;テキスト端末。</target>
        </trans-unit>
        <trans-unit id="41196dd89a1deba404d8e0e8e0fdd66883bb26af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write the data to the &lt;code&gt;readline&lt;/code&gt;&lt;code&gt;Interface&lt;/code&gt;'s &lt;code&gt;input&lt;/code&gt;&lt;em&gt;as if it were provided by the user&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;rl.write()&lt;/code&gt; メソッドは、にデータを書き込む &lt;code&gt;readline&lt;/code&gt; の &lt;code&gt;Interface&lt;/code&gt; の &lt;code&gt;input&lt;/code&gt; &lt;em&gt;、それがユーザによって提供されたかのように&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9c337047522d177bda79f124489b56c36c33708b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;salt&lt;/code&gt; should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf&quot;&gt;NIST SP 800-132&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;salt&lt;/code&gt; 、できるだけ一意である必要があります。ソルトはランダムで、少なくとも16バイト長にすることをお勧めします。詳細については、&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf&quot;&gt;NIST SP 800-132&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aa589028c96e71c62e9b586d1f0c2ca62d142cdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; object can no longer be a function.</source>
          <target state="translated">&lt;code&gt;sandbox&lt;/code&gt; オブジェクトは、もはや機能しないことができます。</target>
        </trans-unit>
        <trans-unit id="d10ba4e8a0c1d8c98f308b168ec8ec270bca7c1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; property consists of the entire &quot;query string&quot; portion of the URL, including the leading ASCII question mark (&lt;code&gt;?&lt;/code&gt;) character.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; プロパティは、主要なASCIIの疑問符（を含むURLの全体の「クエリ文字列」の部分で構成されて &lt;code&gt;?&lt;/code&gt; ）の文字。</target>
        </trans-unit>
        <trans-unit id="40b486985304f73099b4f78d5aefc122c98b347a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; property on the returned URL object is now &lt;code&gt;null&lt;/code&gt; when no query string is present.</source>
          <target state="translated">クエリ文字列が存在しない場合、返されるURLオブジェクトの &lt;code&gt;search&lt;/code&gt; プロパティは &lt;code&gt;null&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8cb34b8f1b3871d967141e43f1347b28b5e1825d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;section&lt;/code&gt; supports wildcard also:</source>
          <target state="translated">この &lt;code&gt;section&lt;/code&gt; はワイルドカードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="b06a6d57aafd3cfb2973ecfafdf82702f3df1908" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;secureContext&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;secureContext&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d7d56b9261eb176b23d8762ecf8514431701b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sendHandle&lt;/code&gt; argument can be used, for instance, to pass the handle of a TCP server object to the child process as illustrated in the example below:</source>
          <target state="translated">&lt;code&gt;sendHandle&lt;/code&gt; 引数は以下の例に示すように、子プロセスにTCPサーバオブジェクトのハンドルを渡すために、例えば、使用することができます。</target>
        </trans-unit>
        <trans-unit id="f5657ee72d6362cb4513b8953d78d812b4bca85c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.addContext()&lt;/code&gt; method adds a secure context that will be used if the client request's SNI name matches the supplied &lt;code&gt;hostname&lt;/code&gt; (or wildcard).</source>
          <target state="translated">&lt;code&gt;server.addContext()&lt;/code&gt; メソッドは、クライアント要求のSNI名が指定され一致した場合に使用される安全な文脈追加 &lt;code&gt;hostname&lt;/code&gt; （またはワイルドカード）を。</target>
        </trans-unit>
        <trans-unit id="7baac3bdf0594cf99c87594fd0400053a3626b59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.close()&lt;/code&gt; method stops the server from accepting new connections.</source>
          <target state="translated">&lt;code&gt;server.close()&lt;/code&gt; メソッドは、新しい接続を受け付けからサーバーを停止します。</target>
        </trans-unit>
        <trans-unit id="00e9fa32d099affec4d987cebd08a43b32bbda61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.listen()&lt;/code&gt; method can be called again if and only if there was an error during the first &lt;code&gt;server.listen()&lt;/code&gt; call or &lt;code&gt;server.close()&lt;/code&gt; has been called. Otherwise, an &lt;code&gt;ERR_SERVER_ALREADY_LISTEN&lt;/code&gt; error will be thrown.</source>
          <target state="translated">&lt;code&gt;server.listen()&lt;/code&gt; メソッドは次の場合に再度呼び出すことができ、エラーが最初の中に存在した場合のみ &lt;code&gt;server.listen()&lt;/code&gt; コールまたは &lt;code&gt;server.close()&lt;/code&gt; と呼ばれています。そうしないと、 &lt;code&gt;ERR_SERVER_ALREADY_LISTEN&lt;/code&gt; エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="0de5d1141e84be1cc2fe33a3c4dc10fab6bffb22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.setSecureContext()&lt;/code&gt; method replaces the secure context of an existing server. Existing connections to the server are not interrupted.</source>
          <target state="translated">&lt;code&gt;server.setSecureContext()&lt;/code&gt; メソッドは、既存のサーバーの安全なコンテキストを置き換えます。サーバーへの既存の接続は中断されません。</target>
        </trans-unit>
        <trans-unit id="4f3fbe161e0f031b5a8998231ac65e19553efbb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;settings&lt;/code&gt; object is the &lt;code&gt;cluster.settings&lt;/code&gt; object at the time &lt;code&gt;.setupMaster()&lt;/code&gt; was called and is advisory only, since multiple calls to &lt;code&gt;.setupMaster()&lt;/code&gt; can be made in a single tick.</source>
          <target state="translated">&lt;code&gt;settings&lt;/code&gt; オブジェクトは &lt;code&gt;cluster.settings&lt;/code&gt; が時刻における物体 &lt;code&gt;.setupMaster()&lt;/code&gt; と呼ばれていたとする複数の呼び出しので、唯一の顧問である &lt;code&gt;.setupMaster()&lt;/code&gt; 単一ティックで作製することができます。</target>
        </trans-unit>
        <trans-unit id="ca40305874430184f507d1ff1620b98dee2a13a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell&lt;/code&gt; option available in &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; is not supported by &lt;code&gt;child_process.fork()&lt;/code&gt; and will be ignored if set.</source>
          <target state="translated">&lt;code&gt;shell&lt;/code&gt; で利用可能なオプション&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;でサポートされていない &lt;code&gt;child_process.fork()&lt;/code&gt; とセットならば無視されます。</target>
        </trans-unit>
        <trans-unit id="789309d654799197d595dae31587b32fcbc40e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;shell&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="131086e035ed08bcd6abed9542fab8e2099a0739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showHidden&lt;/code&gt; option allows &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt; entries to be inspected. If there are more entries than &lt;code&gt;maxArrayLength&lt;/code&gt;, there is no guarantee which entries are displayed. That means retrieving the same &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt; entries twice may result in different output. Furthermore, entries with no remaining strong references may be garbage collected at any time.</source>
          <target state="translated">&lt;code&gt;showHidden&lt;/code&gt; オプションが可能に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; &lt;/a&gt;エントリが検査されます。 &lt;code&gt;maxArrayLength&lt;/code&gt; よりも多くのエントリがある場合、どのエントリが表示されるかは保証されません。つまり、同じ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; &lt;/a&gt;エントリを2回取得すると、出力が異なる場合があります。さらに、強い参照が残っていないエントリは、いつでもガベージコレクションされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="aeeffd142a8b58ab3fd25d52eb6a1a38c53837e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showProxy&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;showProxy&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="02fe55ea31407e76877facbc15d9a22a0783d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; argument is the previously calculated signature for the &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 引数は、のために以前に計算された署名である &lt;code&gt;data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ec046491bd12670eae5fc18363137ed9fe01460" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; argument is the previously calculated signature for the data, in the &lt;code&gt;signatureEncoding&lt;/code&gt;. If a &lt;code&gt;signatureEncoding&lt;/code&gt; is specified, the &lt;code&gt;signature&lt;/code&gt; is expected to be a string; otherwise &lt;code&gt;signature&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 引数はで、データの前に計算された署名である &lt;code&gt;signatureEncoding&lt;/code&gt; 。場合 &lt;code&gt;signatureEncoding&lt;/code&gt; が指定され、 &lt;code&gt;signature&lt;/code&gt; 文字列であると予想されます。それ以外の場合、 &lt;code&gt;signature&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; であると予想されます。</target>
        </trans-unit>
        <trans-unit id="68695d428776a7c74fee782fa95bbce0abf2687f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; argument is advisory. For implementations where a &quot;read&quot; is a single operation that returns data can use the &lt;code&gt;size&lt;/code&gt; argument to determine how much data to fetch. Other implementations may ignore this argument and simply provide data whenever it becomes available. There is no need to &quot;wait&quot; until &lt;code&gt;size&lt;/code&gt; bytes are available before calling &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 引数は顧問です。「読み取り」がデータを返す単一の操作である実装では、 &lt;code&gt;size&lt;/code&gt; 引数を使用して、フェッチするデータの量を決定できます。他の実装では、この引数を無視して、利用可能になったときにデータを提供するだけです。&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; を&lt;/a&gt;呼び出す前に &lt;code&gt;size&lt;/code&gt; バイトが利用可能になるまで「待つ」必要はありません。</target>
        </trans-unit>
        <trans-unit id="b98eea67c5cf6a231230babe352bdbf93c4d8c03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slashes&lt;/code&gt; property is a &lt;code&gt;boolean&lt;/code&gt; with a value of &lt;code&gt;true&lt;/code&gt; if two ASCII forward-slash characters (&lt;code&gt;/&lt;/code&gt;) are required following the colon in the &lt;code&gt;protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slashes&lt;/code&gt; プロパティは、 &lt;code&gt;boolean&lt;/code&gt; 値を持つ &lt;code&gt;true&lt;/code&gt; 2つのASCIIスラッシュ文字が（IF &lt;code&gt;/&lt;/code&gt; ）でコロンの後の必要とされる &lt;code&gt;protocol&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cde32729934909632dd7d9f932044a842cfeda60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket.ref()&lt;/code&gt; method returns a reference to the socket so calls can be chained.</source>
          <target state="translated">&lt;code&gt;socket.ref()&lt;/code&gt; 呼び出しは連鎖することができるので、この方法は、ソケットへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="0e152e8a099033c1331c3bdd0de17b53ae3059c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket.unref()&lt;/code&gt; method returns a reference to the socket so calls can be chained.</source>
          <target state="translated">&lt;code&gt;socket.unref()&lt;/code&gt; 呼び出しは連鎖することができるので、この方法は、ソケットへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="f29bc2fa372e5d9603c756477069df5000ce63d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sorted&lt;/code&gt; option ensures that an object's property insertion order does not impact the result of &lt;code&gt;util.inspect()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sorted&lt;/code&gt; オブジェクトのプロパティの挿入順序が結果に影響しないというオプション性を保証 &lt;code&gt;util.inspect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ac7cb97a611c457d3799d39f5df6768a67cb545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sorted&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;sorted&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0c7015e16b23c8277a7108a06694c98bf45cc13b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;source&lt;/code&gt; パラメータを &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="e5d97670c9965eb774646bb1cacca1be0ca0fad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;square&lt;/code&gt; module is defined in &lt;code&gt;square.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;square&lt;/code&gt; モジュールはで定義され &lt;code&gt;square.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5ef2d45d0dcdb5acc0bbf694fece9d91abd0220c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startMark&lt;/code&gt; argument may identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline, or &lt;em&gt;may&lt;/em&gt; identify any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;startMark&lt;/code&gt; does not exist, then &lt;code&gt;startMark&lt;/code&gt; is set to &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt;&lt;code&gt;timeOrigin&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">&lt;code&gt;startMark&lt;/code&gt; の引数は、任意の識別することができる&lt;em&gt;既存の&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; をパフォーマンスタイムラインで、または&lt;em&gt;こと&lt;/em&gt;により提供されるタイムスタンプのプロパティのいずれかの識別 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラスを。名前付きの &lt;code&gt;startMark&lt;/code&gt; が存在しない場合、 &lt;code&gt;startMark&lt;/code&gt; はデフォルトで&lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt; &lt;code&gt;timeOrigin&lt;/code&gt; に&lt;/a&gt;設定されます。</target>
        </trans-unit>
        <trans-unit id="dcf43343004244fdc72aeb9f8e96c8f8036d6b2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdio&lt;/code&gt; option can now be a string.</source>
          <target state="translated">&lt;code&gt;stdio&lt;/code&gt; のオプションは文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="c1e6b684183674552223009944114d387d473b05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdio&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;stdio&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="26ad0d1530bfcc93190d959f0cb08e32179fc25a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The &lt;code&gt;encoding&lt;/code&gt; option can be used to specify the character encoding used to decode the stdout and stderr output. If &lt;code&gt;encoding&lt;/code&gt; is &lt;code&gt;'buffer'&lt;/code&gt;, or an unrecognized character encoding, &lt;code&gt;Buffer&lt;/code&gt; objects will be passed to the callback instead.</source>
          <target state="translated">&lt;code&gt;stdout&lt;/code&gt; と &lt;code&gt;stderr&lt;/code&gt; コールバックに渡される引数は、子プロセスのstdoutとstderr出力が含まれます。デフォルトでは、Node.jsは出力をUTF-8としてデコードし、文字列をコールバックに渡します。 &lt;code&gt;encoding&lt;/code&gt; オプションは、stdoutとstderr出力をデコードするために使用される文字コードを指定するために使用することができます。場合 &lt;code&gt;encoding&lt;/code&gt; ある &lt;code&gt;'buffer'&lt;/code&gt; 、または認識されない文字エンコーディング、 &lt;code&gt;Buffer&lt;/code&gt; オブジェクトではなく、コールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="084bb7b91e83379175c5022e9cf46939ee8a02bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Duplex&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Readable&lt;/code&gt; and parasitically from &lt;code&gt;stream.Writable&lt;/code&gt;, but &lt;code&gt;instanceof&lt;/code&gt; will work properly for both base classes due to overriding &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance&quot;&gt;&lt;code&gt;Symbol.hasInstance&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;stream.Writable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stream.Duplex&lt;/code&gt; のクラスはからprototypically継承 &lt;code&gt;stream.Readable&lt;/code&gt; と寄生から &lt;code&gt;stream.Writable&lt;/code&gt; が、 &lt;code&gt;instanceof&lt;/code&gt; は原因オーバーライドの両方に、基本クラスのために正しく動作します&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance&quot;&gt; &lt;code&gt;Symbol.hasInstance&lt;/code&gt; を&lt;/a&gt;上 &lt;code&gt;stream.Writable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd0c7035d5887c79e724c63625e2a2fa4f4e00ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.PassThrough&lt;/code&gt; class is a trivial implementation of a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where &lt;code&gt;stream.PassThrough&lt;/code&gt; is useful as a building block for novel sorts of streams.</source>
          <target state="translated">&lt;code&gt;stream.PassThrough&lt;/code&gt; クラスは、些細な実装である&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;単に入力を通過ストリームを出力するまたがっバイト。その目的は主に例とテストですが、 &lt;code&gt;stream.PassThrough&lt;/code&gt; が新しい種類のストリームの構成要素として役立つユースケースがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="ae66ead56bbe01b337d36c610bb9e26b4cd98960" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Readable&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;stream.Readable&lt;/code&gt; クラスが実装するために拡張された&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="0ea09bbb39789ea3cc0eaf44ddee45dcc419148d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;stream.Transform&lt;/code&gt; のクラスを実装するために拡張された&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="c3c1c3a30f04ae9a0da36c430d696738f058704c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Duplex&lt;/code&gt; and implements its own versions of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;code&gt;readable._read()&lt;/code&gt; methods. Custom &lt;code&gt;Transform&lt;/code&gt; implementations &lt;em&gt;must&lt;/em&gt; implement the &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;transform._transform()&lt;/code&gt;&lt;/a&gt; method and &lt;em&gt;may&lt;/em&gt; also implement the &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;stream.Transform&lt;/code&gt; のクラスはprototypicallyから継承 &lt;code&gt;stream.Duplex&lt;/code&gt; と実装独自のバージョン &lt;code&gt;writable._write()&lt;/code&gt; と &lt;code&gt;readable._read()&lt;/code&gt; メソッドを。カスタム &lt;code&gt;Transform&lt;/code&gt; 実装&lt;em&gt;しなければならない&lt;/em&gt;実装&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;transform._transform()&lt;/code&gt; &lt;/a&gt;メソッドをと&lt;em&gt;することができる&lt;/em&gt;にも実装&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="c260d8fd0dab360e2d5844ae6a472872447a2f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Writable&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;stream.Writable&lt;/code&gt; クラスが実装するために拡張された&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="8af51137bee18dc37e015969a47dd4a588a34b6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; method cannot be called after the &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event has been emitted or a runtime error will be thrown.</source>
          <target state="translated">&lt;code&gt;stream.unshift(chunk)&lt;/code&gt; の後にメソッドを呼び出すことはできません&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;イベントが放出されたか、ランタイムエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="691f4859d654b4c9ab45f33157afe7c5bac57435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; module API has been designed to make it possible to easily implement streams using JavaScript's prototypal inheritance model.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; モジュールのAPIは簡単にはJavaScriptの原型継承モデルを使用してストリームを実装することを可能にするように設計されています。</target>
        </trans-unit>
        <trans-unit id="bc56a2c1de4b9e87e59ac1c30d9a0c0a5259ebda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; module is useful for creating new types of stream instances. It is usually not necessary to use the &lt;code&gt;stream&lt;/code&gt; module to consume streams.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; モジュールは、ストリーム・インスタンスの新しいタイプを作成する場合に便利です。通常、 &lt;code&gt;stream&lt;/code&gt; を使用するためにストリームモジュールを使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="357321edbc1568fd30c17cfc80ff0748b6db2542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, &lt;code&gt;DataView&lt;/code&gt; or &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; パラメータは今どんなことができ &lt;code&gt;TypedArray&lt;/code&gt; 、 &lt;code&gt;DataView&lt;/code&gt; または &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a45d51c7cabfc0ab2ba5e3dff6526f12a49bf66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string_decoder&lt;/code&gt; module provides an API for decoding &lt;code&gt;Buffer&lt;/code&gt; objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;string_decoder&lt;/code&gt; のモジュールを復号化するためのAPIを提供する &lt;code&gt;Buffer&lt;/code&gt; ジャムがマルチバイトUTF-8およびUTF-16文字をコードなるように文字列にオブジェクト。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c5126690fac33fb4d5387e26eb565d04e69d7adb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.channel&lt;/code&gt; property is a reference to the child's IPC channel. If no IPC channel currently exists, this property is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subprocess.channel&lt;/code&gt; のプロパティは、子供のIPCチャネルへの参照です。現在IPCチャネルが存在しない場合、このプロパティは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="630496965672d7d17bca3ce951936e1a7f96b9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.connected&lt;/code&gt; property indicates whether it is still possible to send and receive messages from a child process. When &lt;code&gt;subprocess.connected&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it is no longer possible to send or receive messages.</source>
          <target state="translated">&lt;code&gt;subprocess.connected&lt;/code&gt; プロパティは、子プロセスからのメッセージを送受信することは可能であるかどうかを示します。 &lt;code&gt;subprocess.connected&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、メッセージを送受信できなくなります。</target>
        </trans-unit>
        <trans-unit id="85f59425a9992636760b8d033dc4606abef401d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.js&lt;/code&gt; would receive the socket handle as the second argument passed to the event callback function:</source>
          <target state="translated">&lt;code&gt;subprocess.js&lt;/code&gt; は、 2番目の引数はイベントのコールバック関数に渡されたソケットハンドルを受け取ることになります。</target>
        </trans-unit>
        <trans-unit id="f43b8450ff014c705fd9bc6ad073773c1c9f1baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.kill()&lt;/code&gt; method sends a signal to the child process. If no argument is given, the process will be sent the &lt;code&gt;'SIGTERM'&lt;/code&gt; signal. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;&lt;code&gt;signal(7)&lt;/code&gt;&lt;/a&gt; for a list of available signals.</source>
          <target state="translated">&lt;code&gt;subprocess.kill()&lt;/code&gt; メソッドは、子プロセスに信号を送ります。引数を指定しない場合、プロセスには &lt;code&gt;'SIGTERM'&lt;/code&gt; が送信されます。利用可能なシグナルのリストについては、&lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt; &lt;code&gt;signal(7)&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="00e0cd67de99d7123ac0bb29d2796973028616a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.killed&lt;/code&gt; property indicates whether the child process successfully received a signal from &lt;code&gt;subprocess.kill()&lt;/code&gt;. The &lt;code&gt;killed&lt;/code&gt; property does not indicate that the child process has been terminated.</source>
          <target state="translated">&lt;code&gt;subprocess.killed&lt;/code&gt; プロパティは、子プロセスが正常からの信号を受信したか否かを示す &lt;code&gt;subprocess.kill()&lt;/code&gt; 。 &lt;code&gt;killed&lt;/code&gt; プロパティは、子プロセスが終了していることを示すものではありません。</target>
        </trans-unit>
        <trans-unit id="5e369294cd449eb3ac8bc8f7b44bdac1cbfcf71b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module is deprecated. Please use the &lt;a href=&quot;util&quot;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールが推奨されていません。代わりに&lt;a href=&quot;util&quot;&gt; &lt;code&gt;util&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="905f8dec56ddaba13188a29c248c1808e84bc5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; と &lt;code&gt;path&lt;/code&gt; のパラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートは&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="21d47e71ab93ab29a6486089ea585020c6b859dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;target&lt;/code&gt; パラメータを &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="c294ea3b5974cb0ba7306f25aabde6ec0f217395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminal&lt;/code&gt; option now follows the default description in all cases and &lt;code&gt;useColors&lt;/code&gt; checks &lt;code&gt;hasColors()&lt;/code&gt; if available.</source>
          <target state="translated">&lt;code&gt;terminal&lt;/code&gt; オプションは、すべての場合とではデフォルトの説明を次の &lt;code&gt;useColors&lt;/code&gt; チェックする &lt;code&gt;hasColors()&lt;/code&gt; 利用できます。</target>
        </trans-unit>
        <trans-unit id="e53093313524ff1c7d2c347705f27f9f9f795a5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ticketKeys&lt;/code&gt; options is automatically shared between &lt;code&gt;cluster&lt;/code&gt; module workers.</source>
          <target state="translated">&lt;code&gt;ticketKeys&lt;/code&gt; のオプションが自動的に間で共有される &lt;code&gt;cluster&lt;/code&gt; モジュールの労働者。</target>
        </trans-unit>
        <trans-unit id="3f81955b3836a057f5c7a7aaa5ed0a6ca9bc0d2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="17ce97197b4e737e60d8c154549d0fd35ce67577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timer&lt;/code&gt; module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to call &lt;code&gt;require('timers')&lt;/code&gt; to use the API.</source>
          <target state="translated">&lt;code&gt;timer&lt;/code&gt; モジュールは、時間のいくつかの将来の期間で呼び出される関数をスケジュールするための世界的なAPIを公開しています。タイマー関数はグローバルであるため、APIを使用する &lt;code&gt;require('timers')&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="cf7b4966e78b3bf9c81ea7b37f0cbce3a2e65f24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.CryptoStream&lt;/code&gt; class represents a stream of encrypted data. This class is deprecated and should no longer be used.</source>
          <target state="translated">&lt;code&gt;tls.CryptoStream&lt;/code&gt; のクラスは、暗号化されたデータのストリームを表します。このクラスは非推奨であり、今後は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="4924f51a594e62a3e48926493b0830358f972820" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.Server&lt;/code&gt; class is a subclass of &lt;code&gt;net.Server&lt;/code&gt; that accepts encrypted connections using TLS or SSL.</source>
          <target state="translated">&lt;code&gt;tls.Server&lt;/code&gt; のクラスはサブクラスである &lt;code&gt;net.Server&lt;/code&gt; TLSまたはSSLを使用して暗号化された接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="3759526aec41e16a038394bb7b88557096ed9d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.TLSSocket&lt;/code&gt; is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that performs transparent encryption of written data and all required TLS negotiation.</source>
          <target state="translated">&lt;code&gt;tls.TLSSocket&lt;/code&gt; はのサブクラスである&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;書き込まれたデータと、必要なすべてのTLSネゴシエーションの透過的な暗号化を行なうこと。</target>
        </trans-unit>
        <trans-unit id="a53fcb9eccbc70ba28e31c4dc6d95605701391e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecureContext()&lt;/code&gt; method creates a &lt;code&gt;SecureContext&lt;/code&gt; object. It is usable as an argument to several &lt;code&gt;tls&lt;/code&gt; APIs, such as &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tls_server_addcontext_hostname_context&quot;&gt;&lt;code&gt;server.addContext()&lt;/code&gt;&lt;/a&gt;, but has no public methods.</source>
          <target state="translated">&lt;code&gt;tls.createSecureContext()&lt;/code&gt; メソッドは、作成 &lt;code&gt;SecureContext&lt;/code&gt; のオブジェクト。&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#tls_server_addcontext_hostname_context&quot;&gt; &lt;code&gt;server.addContext()&lt;/code&gt; &lt;/a&gt;など、いくつかの &lt;code&gt;tls&lt;/code&gt; APIの引数として使用できますが、パブリックメソッドはありません。</target>
        </trans-unit>
        <trans-unit id="ff58d2e25dc0b6be6c3c7b6f5498a0e15391844f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecurePair()&lt;/code&gt; API was deprecated in documentation in Node.js 0.11.3. Users should use &lt;code&gt;tls.Socket&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;tls.createSecurePair()&lt;/code&gt; APIは、Node.jsの0.11.3に文書で廃止されました。代わりに &lt;code&gt;tls.Socket&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="56f1c8824e6bac97724ac9136c4d20ffd2f71ff6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecurePair()&lt;/code&gt; method is now deprecated in favor of &lt;code&gt;tls.TLSSocket()&lt;/code&gt;. For example, the code:</source>
          <target state="translated">&lt;code&gt;tls.createSecurePair()&lt;/code&gt; メソッドは、現在の賛成で廃止されました &lt;code&gt;tls.TLSSocket()&lt;/code&gt; 。たとえば、コード：</target>
        </trans-unit>
        <trans-unit id="3bfd9e2e5bf7e913bcaa90224b9ac1d690880f7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls&lt;/code&gt; module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:</source>
          <target state="translated">&lt;code&gt;tls&lt;/code&gt; モジュールは、OpenSSLの上に構築されたトランスポート層セキュリティ（TLS）およびセキュア・ソケット・レイヤー（SSL）プロトコルの実装を提供します。このモジュールには、以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="27a8b91851aa82c6e1d1daa2ba743d969facb149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; property is a string that contains the selected ALPN protocol. When ALPN has no selected protocol, &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; equals &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; のプロパティは、選択したALPNプロトコルを含む文字列です。ALPNにプロトコルが選択されていない場合、 &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a1e3716500e3efcbc06eb8c1971be5b3031aefbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.authorized&lt;/code&gt; property is a &lt;code&gt;boolean&lt;/code&gt; indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If &lt;code&gt;tlsSocket.authorized&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;socket.authorizationError&lt;/code&gt; is set to describe how authorization failed. Depending on the settings of the TLS server, unauthorized connections may still be accepted.</source>
          <target state="translated">&lt;code&gt;tlsSocket.authorized&lt;/code&gt; のプロパティがある &lt;code&gt;boolean&lt;/code&gt; クライアントがサーバー用に提供される認証局のいずれかによって検証されたかどうかを示します。場合 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、そして &lt;code&gt;socket.authorizationError&lt;/code&gt; は、認証が失敗した方法を記述するために設定されています。TLSサーバーの設定によっては、許可されていない接続が受け入れられる場合があります。</target>
        </trans-unit>
        <trans-unit id="c1560315e66506c9f14f682158610897048f54b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.renegotiate()&lt;/code&gt; method initiates a TLS renegotiation process. Upon completion, the &lt;code&gt;callback&lt;/code&gt; function will be passed a single argument that is either an &lt;code&gt;Error&lt;/code&gt; (if the request failed) or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tlsSocket.renegotiate()&lt;/code&gt; メソッドは、TLS再ネゴシエーションプロセスを開始します。完了すると、 &lt;code&gt;callback&lt;/code&gt; 関数には、 &lt;code&gt;Error&lt;/code&gt; （要求が失敗した場合）または &lt;code&gt;null&lt;/code&gt; のいずれかである単一の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="9855f343755bbd2595b4c8293c76e9a18177c3d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.servername&lt;/code&gt; property is a string containing the server name requested via SNI.</source>
          <target state="translated">&lt;code&gt;tlsSocket.servername&lt;/code&gt; のプロパティは、SNIを経由して要求されたサーバー名を含む文字列です。</target>
        </trans-unit>
        <trans-unit id="dcac01a659e106d52ac484f3d471c86b4c378df4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.setMaxSendFragment()&lt;/code&gt; method sets the maximum TLS fragment size. Returns &lt;code&gt;true&lt;/code&gt; if setting the limit succeeded; &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;tlsSocket.setMaxSendFragment()&lt;/code&gt; メソッドは、最大TLSフラグメントサイズを設定します。制限の設定が成功した場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29428f13863882ea8f4f96a9c253ed79502b3724" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toJSON()&lt;/code&gt; method on the &lt;code&gt;URL&lt;/code&gt; object returns the serialized URL. The value returned is equivalent to that of &lt;a href=&quot;#url_url_href&quot;&gt;&lt;code&gt;url.href&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_tostring&quot;&gt;&lt;code&gt;url.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; オブジェクトの &lt;code&gt;toJSON()&lt;/code&gt; メソッドは、シリアル化されたURLを返します。返される値は、&lt;a href=&quot;#url_url_href&quot;&gt; &lt;code&gt;url.href&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_tostring&quot;&gt; &lt;code&gt;url.toString()&lt;/code&gt; &lt;/a&gt;の値と同じです。</target>
        </trans-unit>
        <trans-unit id="b9818ab352d22b2510640724d3e91a12f02f0866" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method on the &lt;code&gt;URL&lt;/code&gt; object returns the serialized URL. The value returned is equivalent to that of &lt;a href=&quot;#url_url_href&quot;&gt;&lt;code&gt;url.href&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_tojson&quot;&gt;&lt;code&gt;url.toJSON()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; オブジェクトの &lt;code&gt;toString()&lt;/code&gt; メソッドは、シリアル化されたURLを返します。返される値は、&lt;a href=&quot;#url_url_href&quot;&gt; &lt;code&gt;url.href&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_tojson&quot;&gt; &lt;code&gt;url.toJSON()&lt;/code&gt; &lt;/a&gt;の値と同等です。</target>
        </trans-unit>
        <trans-unit id="c3ff3398b1379b4f9e70c0f0e2112b898e772d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events.createTracing()&lt;/code&gt; method requires at least one trace event category.</source>
          <target state="translated">&lt;code&gt;trace_events.createTracing()&lt;/code&gt; メソッドは、少なくとも1つのトレースイベントカテゴリを必要とします。</target>
        </trans-unit>
        <trans-unit id="eb5f88aac5c15422dad13cd22ae5517d8aff25af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;trace_events&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="7b1b3b869aeb1da79b5e47ed6a53675c303384d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module could not be loaded because Node.js was compiled with the &lt;code&gt;--without-v8-platform&lt;/code&gt; flag.</source>
          <target state="translated">Node.jsが &lt;code&gt;--without-v8-platform&lt;/code&gt; フラグを使用してコンパイルされているため、 &lt;code&gt;trace_events&lt;/code&gt; モジュールをロードできませんでした。</target>
        </trans-unit>
        <trans-unit id="d662971594b3afbe87ef697171174048eaa66120" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform._flush()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="d2e2e92ce7d02c1bfbe2c3e0c42828de5b57fbd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform._transform()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;transform._transform()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="06b291008924c93d17c8a25ddc24cabe42e20aab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform.push()&lt;/code&gt; method may be called zero or more times to generate output from a single input chunk, depending on how much is to be output as a result of the chunk.</source>
          <target state="translated">&lt;code&gt;transform.push()&lt;/code&gt; メソッドは、チャンクの結果として出力されるどの程度に応じて、単一の入力チャンクからの出力を生成するために、ゼロ回以上呼び出されてもよいです。</target>
        </trans-unit>
        <trans-unit id="1482cb6354978fe69afb35af6b169257783355b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.ReadStream&lt;/code&gt; class is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that represents the readable side of a TTY. In normal circumstances &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; will be the only &lt;code&gt;tty.ReadStream&lt;/code&gt; instance in a Node.js process and there should be no reason to create additional instances.</source>
          <target state="translated">&lt;code&gt;tty.ReadStream&lt;/code&gt; のクラスはのサブクラスである&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; TTYの読み込み可能な側面を表しています。通常の状況では、&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;はNode.jsプロセスの唯一の &lt;code&gt;tty.ReadStream&lt;/code&gt; インスタンスであり、追加のインスタンスを作成する理由はありません。</target>
        </trans-unit>
        <trans-unit id="fea75197a06554fdf7484bfce8f391405a82e45b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.WriteStream&lt;/code&gt; class is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that represents the writable side of a TTY. In normal circumstances, &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; will be the only &lt;code&gt;tty.WriteStream&lt;/code&gt; instances created for a Node.js process and there should be no reason to create additional instances.</source>
          <target state="translated">&lt;code&gt;tty.WriteStream&lt;/code&gt; のクラスはサブクラスで&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; TTYの書き込み可能な側面を表しています。通常の状況では、&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;がNode.jsプロセス用に作成される唯一の &lt;code&gt;tty.WriteStream&lt;/code&gt; インスタンスであり、追加のインスタンスを作成する理由はないはずです。</target>
        </trans-unit>
        <trans-unit id="089ab25de4c5531a8932bd899316bf978f71777c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.isatty()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;fd&lt;/code&gt; is associated with a TTY and &lt;code&gt;false&lt;/code&gt; if it is not, including whenever &lt;code&gt;fd&lt;/code&gt; is not a non-negative integer.</source>
          <target state="translated">&lt;code&gt;tty.isatty()&lt;/code&gt; メソッドの戻り &lt;code&gt;true&lt;/code&gt; 与えられた場合 &lt;code&gt;fd&lt;/code&gt; TTYと関連付けられている &lt;code&gt;false&lt;/code&gt; それがない場合にいつでも含む、 &lt;code&gt;fd&lt;/code&gt; は非負整数でありません。</target>
        </trans-unit>
        <trans-unit id="068c426f71f2a19cdc04cd090bc890bdef7f3df9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty&lt;/code&gt; module provides the &lt;code&gt;tty.ReadStream&lt;/code&gt; and &lt;code&gt;tty.WriteStream&lt;/code&gt; classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:</source>
          <target state="translated">&lt;code&gt;tty&lt;/code&gt; モジュールは提供 &lt;code&gt;tty.ReadStream&lt;/code&gt; と &lt;code&gt;tty.WriteStream&lt;/code&gt; クラスを。ほとんどの場合、このモジュールを直接使用する必要はありません。ただし、次の方法でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="546cf5cc6e4aec10268e918a7bb80559934e24b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument is only used on Windows platforms and can be one of &lt;code&gt;'dir'&lt;/code&gt;, &lt;code&gt;'file'&lt;/code&gt;, or &lt;code&gt;'junction'&lt;/code&gt;. Windows junction points require the destination path to be absolute. When using &lt;code&gt;'junction'&lt;/code&gt;, the &lt;code&gt;target&lt;/code&gt; argument will automatically be normalized to absolute path.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数は、Windowsプラットフォームでのみ使用され、のいずれかになります。 &lt;code&gt;'dir'&lt;/code&gt; 、 &lt;code&gt;'file'&lt;/code&gt; 、または &lt;code&gt;'junction'&lt;/code&gt; 。Windowsジャンクションポイントでは、宛先パスを絶対パスにする必要があります。 &lt;code&gt;'junction'&lt;/code&gt; を使用する場合、 &lt;code&gt;target&lt;/code&gt; 引数は自動的に絶対パスに正規化されます。</target>
        </trans-unit>
        <trans-unit id="b36cf89ae792607998f6c3f6881cfde3bdb33430" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; is a string identifying the type of resource that caused &lt;code&gt;init&lt;/code&gt; to be called. Generally, it will correspond to the name of the resource's constructor.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 生じ、リソースのタイプ識別する文字列であり、 &lt;code&gt;init&lt;/code&gt; が呼び出されるが。通常、これはリソースのコンストラクターの名前に対応します。</target>
        </trans-unit>
        <trans-unit id="b0713047630355050ba416d88406e08da301a3de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.format()&lt;/code&gt; method returns a formatted URL string derived from &lt;code&gt;urlObject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;url.format()&lt;/code&gt; メソッドが由来する形式のURL文字列を返し &lt;code&gt;urlObject&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="55ca44190456823e04f99f6ae22a8f57d60ffc3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.parse()&lt;/code&gt; method takes a URL string, parses it, and returns a URL object.</source>
          <target state="translated">&lt;code&gt;url.parse()&lt;/code&gt; メソッドは、URL文字列を受け取り、それを解析し、URLオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="11718d46d4cfbae5181595bd7c3fbe94462715cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.resolve()&lt;/code&gt; method resolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.</source>
          <target state="translated">&lt;code&gt;url.resolve()&lt;/code&gt; メソッドは、アンカータグのHREFを解決するWebブラウザと同様に、ベースURLにターゲットURLを相対的に解決します。</target>
        </trans-unit>
        <trans-unit id="2a3b4947c1330d3bfc1effd6af4af13f7b8bf1df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; module provides two APIs for working with URLs: a legacy API that is Node.js specific, and a newer API that implements the same &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; used by web browsers.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; のNode.jsの固有のレガシーAPI、および実装と同じことを、新しいAPI：モジュールは、2つのURLを扱うためのAPI提供&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL標準&lt;/a&gt;のWebブラウザで使用します。</target>
        </trans-unit>
        <trans-unit id="821dfbb0ad8f8f3a555df6573ebbf7275fd65916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; module provides utilities for URL resolution and parsing. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; モジュールは、URLの解決や解析のためのユーティリティを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="71ce52dc87ff4abf938e11b26b7ef8b7207b6d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; parameter can now be passed along with a separate &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">これで、 &lt;code&gt;url&lt;/code&gt; パラメータを個別の &lt;code&gt;options&lt;/code&gt; オブジェクトと共に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4c169a8e8d2679d88714d8feee5146867d802475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useColors&lt;/code&gt; boolean option can be specified at construction to instruct the default writer to use ANSI style codes to colorize the output from the &lt;code&gt;util.inspect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;useColors&lt;/code&gt; ブール値のオプションからの出力を色付けするANSIスタイルのコードを使用するデフォルトのライターに指示し、構築時に指定することができます &lt;code&gt;util.inspect()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="2071213609146bc9b4c2fbc006a6de7d9ec04a31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util._extend()&lt;/code&gt; method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.</source>
          <target state="translated">&lt;code&gt;util._extend()&lt;/code&gt; メソッドは、内部のNode.jsモジュールの使用外であることを意図していませんでした。コミュニティはとにかくそれを見つけて使用しました。</target>
        </trans-unit>
        <trans-unit id="ec8f575e1fba436442088c542aab95d0b244c3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.debuglog()&lt;/code&gt; method is used to create a function that conditionally writes debug messages to &lt;code&gt;stderr&lt;/code&gt; based on the existence of the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable. If the &lt;code&gt;section&lt;/code&gt; name appears within the value of that environment variable, then the returned function operates similar to &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;. If not, then the returned function is a no-op.</source>
          <target state="translated">&lt;code&gt;util.debuglog()&lt;/code&gt; メソッドは、条件付きにデバッグメッセージを書き込み機能作成するために使用される &lt;code&gt;stderr&lt;/code&gt; の有無に基づいて &lt;code&gt;NODE_DEBUG&lt;/code&gt; の環境変数を。場合は &lt;code&gt;section&lt;/code&gt; 名は、その環境変数の値内に現れる、そして返される関数は次のように動作し&lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。そうでない場合、返される関数は何もしません。</target>
        </trans-unit>
        <trans-unit id="db7faf5cee157b8c4fc83b2ad07bd0dcc0dd44f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.deprecate()&lt;/code&gt; method wraps &lt;code&gt;fn&lt;/code&gt; (which may be a function or class) in such a way that it is marked as deprecated.</source>
          <target state="translated">&lt;code&gt;util.deprecate()&lt;/code&gt; メソッドは、ラップ &lt;code&gt;fn&lt;/code&gt; 非推奨として、それがマークされているように（関数又はクラスであってもよいです）。</target>
        </trans-unit>
        <trans-unit id="cf1a8d7ed63b25fd7017c632a33bdb344f9c97f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.format()&lt;/code&gt; method returns a formatted string using the first argument as a &lt;code&gt;printf&lt;/code&gt;-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:</source>
          <target state="translated">&lt;code&gt;util.format()&lt;/code&gt; メソッドは、ある第1引数でフォーマットストリングを返し &lt;code&gt;printf&lt;/code&gt; のゼロまたはそれ以上の形式指定子を含むことができるフォーマットストリング様に。各指定子は、対応する引数から変換された値に置き換えられます。サポートされている指定子は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3efb2da17a664e762687da8a1d0e5cfa3ac78852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.inspect()&lt;/code&gt; method returns a string representation of &lt;code&gt;object&lt;/code&gt; that is intended for debugging. The output of &lt;code&gt;util.inspect&lt;/code&gt; may change at any time and should not be depended upon programmatically. Additional &lt;code&gt;options&lt;/code&gt; may be passed that alter the result. &lt;code&gt;util.inspect()&lt;/code&gt; will use the constructor's name and/or &lt;code&gt;@@toStringTag&lt;/code&gt; to make an identifiable tag for an inspected value.</source>
          <target state="translated">&lt;code&gt;util.inspect()&lt;/code&gt; メソッドは、文字列表現を返し &lt;code&gt;object&lt;/code&gt; のデバッグのために意図されています。 &lt;code&gt;util.inspect&lt;/code&gt; の出力はいつでも変更される可能性があり、プログラムで依存すべきではありません。結果を変更する追加の &lt;code&gt;options&lt;/code&gt; を渡すことができます。 &lt;code&gt;util.inspect()&lt;/code&gt; は、コンストラクターの名前や &lt;code&gt;@@toStringTag&lt;/code&gt; を使用して、検査された値の識別可能なタグを作成します。</target>
        </trans-unit>
        <trans-unit id="c9ea59fe3a0c4080140d9df673a1e5787423603d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.log()&lt;/code&gt; method prints the given &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;stdout&lt;/code&gt; with an included timestamp.</source>
          <target state="translated">&lt;code&gt;util.log()&lt;/code&gt; メソッドは、指定された印刷 &lt;code&gt;string&lt;/code&gt; に &lt;code&gt;stdout&lt;/code&gt; 含まタイムスタンプと。</target>
        </trans-unit>
        <trans-unit id="b4480b5c9011c8675aadaf047b35b79505297227" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util&lt;/code&gt; module is primarily designed to support the needs of Node.js' own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;util&lt;/code&gt; のモジュールは主にNode.jsの自身の内部APIのニーズをサポートするように設計されています。ただし、ユーティリティの多くは、アプリケーションやモジュールの開発者にも役立ちます。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ed55dce7d35fbae9a5ace55d3e9058bc7dbc420e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; method can be used to programmatically set V8 command line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing.</source>
          <target state="translated">&lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; メソッドは、プログラムで設定V8コマンド・ライン・フラグを使用することができます。この方法は注意して使用する必要があります。VMの起動後に設定を変更すると、クラッシュやデータ損失などの予期しない動作が発生する可能性があります。またはそれは単に何もしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="eb12b9f59b42f9a78781aeae6fde23e91affcd74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8/*&lt;/code&gt; modules do not have any exports, and if not imported in a specific order would in fact throw errors. As such there are virtually no legitimate use cases for importing them through &lt;code&gt;require()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v8/*&lt;/code&gt; モジュールは任意の輸出を持っている、としていない特定の順序でインポートされていない場合でしょう実際のスローエラーインチ そのため、 &lt;code&gt;require()&lt;/code&gt; を介してそれらをインポートする正当なユースケースは事実上ありません。</target>
        </trans-unit>
        <trans-unit id="42e8f90c8521f98a85d97ecfb9c316de5a897439" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; module exposes APIs that are specific to the version of &lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt; built into the Node.js binary. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;v8&lt;/code&gt; のバージョンに固有のモジュールが公開するAPIの&lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8は、&lt;/a&gt; Node.jsのバイナリに組み込まれています。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e9150ac5d17e860569baf146b36a5690bb0aff13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; property now includes a Node.js specific suffix.</source>
          <target state="translated">&lt;code&gt;v8&lt;/code&gt; プロパティは現在のNode.jsの特定のサフィックスが含まれています。</target>
        </trans-unit>
        <trans-unit id="139ccc74ec513db3084c8d6e65e3c1ebda6b2995" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;value&lt;/code&gt; を &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="ab730178ebe2836e29d19f2ab82c52f4762c6a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbatim&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;verbatim&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0af2d856dfcd7dd69eac4ee3adf4d77a3dc20392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify&lt;/code&gt; object can not be used again after &lt;code&gt;verify.verify()&lt;/code&gt; has been called. Multiple calls to &lt;code&gt;verify.verify()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;verify.verify()&lt;/code&gt; が呼び出された後は、 &lt;code&gt;verify&lt;/code&gt; オブジェクトを再び使用することはできません。 &lt;code&gt;verify.verify()&lt;/code&gt; を複数回呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="97ecc00ca544db7063b1c36bded215825f2053c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.SourceTextModule&lt;/code&gt; class provides a low-level interface for using ECMAScript modules in VM contexts. It is the counterpart of the &lt;code&gt;vm.Script&lt;/code&gt; class that closely mirrors &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s as defined in the ECMAScript specification.</source>
          <target state="translated">&lt;code&gt;vm.SourceTextModule&lt;/code&gt; のクラスは、VMコンテキストでのECMAScriptモジュールを使用するための低レベルのインタフェースを提供します。これは、ECMAScript仕様で定義されている&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;を厳密に反映する &lt;code&gt;vm.Script&lt;/code&gt; クラスの対応物です。</target>
        </trans-unit>
        <trans-unit id="316cf355e3db60036a581e7c99d2d0bf9e7002ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.createContext()&lt;/code&gt; method is primarily useful for creating a single sandbox that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single sandbox representing a window's global object, then run all &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags together within the context of that sandbox.</source>
          <target state="translated">&lt;code&gt;vm.createContext()&lt;/code&gt; メソッドは、複数のスクリプトを実行するために使用することができる単一のサンドボックスを作成するために主に有用です。たとえば、Webブラウザをエミュレートする場合、このメソッドを使用して、ウィンドウのグローバルオブジェクトを表す単一のサンドボックスを作成し、そのサンドボックスのコンテキスト内ですべての &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを一緒に実行できます。</target>
        </trans-unit>
        <trans-unit id="1cd62965c9c05e11b962409555d5994f7ff4e77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInContext()&lt;/code&gt; method compiles &lt;code&gt;code&lt;/code&gt;, runs it within the context of the &lt;code&gt;contextifiedSandbox&lt;/code&gt;, then returns the result. Running code does not have access to the local scope. The &lt;code&gt;contextifiedSandbox&lt;/code&gt; object &lt;em&gt;must&lt;/em&gt; have been previously &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; using the &lt;a href=&quot;#vm_vm_createcontext_sandbox_options&quot;&gt;&lt;code&gt;vm.createContext()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;vm.runInContext()&lt;/code&gt; メソッドは、コンパイル &lt;code&gt;code&lt;/code&gt; のコンテキスト内でそれを実行 &lt;code&gt;contextifiedSandbox&lt;/code&gt; その結果を返します。実行中のコードはローカルスコープにアクセスできません。 &lt;code&gt;contextifiedSandbox&lt;/code&gt; のオブジェクトは、&lt;em&gt;必要があり&lt;/em&gt;、以前にされている&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt;使用&lt;a href=&quot;#vm_vm_createcontext_sandbox_options&quot;&gt; &lt;code&gt;vm.createContext()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="62d126cd1ce5c7f3fa39dc697a697511d07be670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInNewContext()&lt;/code&gt; first contextifies the given &lt;code&gt;sandbox&lt;/code&gt; object (or creates a new &lt;code&gt;sandbox&lt;/code&gt; if passed as &lt;code&gt;undefined&lt;/code&gt;), compiles the &lt;code&gt;code&lt;/code&gt;, runs it within the context of the created context, then returns the result. Running code does not have access to the local scope.</source>
          <target state="translated">&lt;code&gt;vm.runInNewContext()&lt;/code&gt; 最初contextifies所与 &lt;code&gt;sandbox&lt;/code&gt; オブジェクト（または新規作成 &lt;code&gt;sandbox&lt;/code&gt; として渡された場合 &lt;code&gt;undefined&lt;/code&gt; ）、コンパイル &lt;code&gt;code&lt;/code&gt; の結果を返し、その後、作成されたコンテキストのコンテキスト内でそれを実行し、。実行中のコードはローカルスコープにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="8610a6d7f3470d50f371fbbe335752bef43b3dbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm&lt;/code&gt; module provides APIs for compiling and running code within V8 Virtual Machine contexts. &lt;strong&gt;The &lt;code&gt;vm&lt;/code&gt; module is not a security mechanism. Do not use it to run untrusted code&lt;/strong&gt;. The term &quot;sandbox&quot; is used throughout these docs simply to refer to a separate context, and does not confer any security guarantees.</source>
          <target state="translated">&lt;code&gt;vm&lt;/code&gt; モジュールは、V8仮想マシンのコンテキスト内のコードをコンパイルして実行するためのAPIを提供します。&lt;strong&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;モジュールは、セキュリティ・メカニズムではありません。&lt;/strong&gt;&lt;strong&gt;信頼できないコードの実行には使用しないでください&lt;/strong&gt;。「サンドボックス」という用語は、これらのドキュメント全体で単に別のコンテキストを指すために使用されており、セキュリティの保証を与えるものではありません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7c0e915e0cfd3fade1eb273a105095235eaa65a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is necessary when processing data with &lt;code&gt;readable.read()&lt;/code&gt;. Only after &lt;code&gt;readable.read()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; will be emitted.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; と、データを処理する際にループが必要である &lt;code&gt;readable.read()&lt;/code&gt; 。 &lt;code&gt;readable.read()&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; を返した後にのみ、&lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt;が発行されます。</target>
        </trans-unit>
        <trans-unit id="91c664db964a38815c9aa3275cf5c899ae5335ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;windowsHide&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;windowsHide&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d1d677ab19d955f0c42d4fec78bf4b048f05f716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worker&lt;/code&gt; parameter is passed now; see below for details.</source>
          <target state="translated">ここで &lt;code&gt;worker&lt;/code&gt; パラメーターが渡されます。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ced211b65867946e8189c44a339cd943b18be51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worker_threads&lt;/code&gt; module enables the use of threads that execute JavaScript in parallel. To access it:</source>
          <target state="translated">&lt;code&gt;worker_threads&lt;/code&gt; のモジュールは、並列にJavaScriptを実行するスレッドの使用を可能にします。アクセスするには：</target>
        </trans-unit>
        <trans-unit id="b5fc9fe76f26aead960a92945f78d6f11a6c11c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._write()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;writable._write()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="27fe9b62a347651c87f5964623a298ba8e0d3b63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;writable._writev()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="7c6691c92a237bbbd878643214ec8297403742e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method may be implemented in addition to &lt;code&gt;writable._write()&lt;/code&gt; in stream implementations that are capable of processing multiple chunks of data at once. If implemented, the method will be called with all chunks of data currently buffered in the write queue.</source>
          <target state="translated">&lt;code&gt;writable._writev()&lt;/code&gt; メソッドは、他に実装されてもよい &lt;code&gt;writable._write()&lt;/code&gt; 一度に複数のデータチャンクを処理することが可能なストリーム実装で。実装されている場合、メソッドは、現在書き込みキューにバッファーされているすべてのデータチャンクで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="294df34f36d025c8b6233b4ffb2e44e160eeae61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.cork()&lt;/code&gt; method forces all written data to be buffered in memory. The buffered data will be flushed when either the &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;stream.uncork()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; methods are called.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; メソッド軍はすべてのメモリにバッファリングするデータを書き込みました。バッファリングされたデータは、&lt;a href=&quot;#stream_writable_uncork&quot;&gt; &lt;code&gt;stream.uncork()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されるとフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="3cf311be2cf76a9013540e79f17530ebd02d755c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.setDefaultEncoding()&lt;/code&gt; method sets the default &lt;code&gt;encoding&lt;/code&gt; for a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;writable.setDefaultEncoding()&lt;/code&gt; メソッドは、デフォルトの設定 &lt;code&gt;encoding&lt;/code&gt; のための&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="671ed8c8319213450ede72423dbb05201859e81a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.uncork()&lt;/code&gt; method flushes all data buffered since &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;stream.cork()&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="translated">&lt;code&gt;writable.uncork()&lt;/code&gt; メソッドがあるため、バッファのすべてのデータフラッシュ&lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;stream.cork()&lt;/code&gt; &lt;/a&gt;と呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="ae096348e9037ff2e10f68360c0ee59961ba8a2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.write()&lt;/code&gt; method writes some data to the stream, and calls the supplied &lt;code&gt;callback&lt;/code&gt; once the data has been fully handled. If an error occurs, the &lt;code&gt;callback&lt;/code&gt;&lt;em&gt;may or may not&lt;/em&gt; be called with the error as its first argument. To reliably detect write errors, add a listener for the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;writable.write()&lt;/code&gt; メソッドは、ストリームに、いくつかのデータを書き込み、供給されたコール &lt;code&gt;callback&lt;/code&gt; データが完全に処理された後。エラーが発生した場合、 &lt;code&gt;callback&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;最初の引数としてエラーを指定して呼び出される&lt;em&gt;場合&lt;/em&gt;と呼び出され&lt;em&gt;ない場合があり&lt;/em&gt;ます。書き込みエラーを確実に検出するには、 &lt;code&gt;'error'&lt;/code&gt; イベントのリスナーを追加します。</target>
        </trans-unit>
        <trans-unit id="0c114b95c94baec67e1dca89c5c1cbc3b54e1d47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib.bytesWritten&lt;/code&gt; property specifies the number of bytes written to the engine, before the bytes are processed (compressed or decompressed, as appropriate for the derived class).</source>
          <target state="translated">&lt;code&gt;zlib.bytesWritten&lt;/code&gt; のプロパティは、エンジンに書き込まれたバイトの数を指定するバイトが処理される前に（派生クラスに応じて、圧縮又は伸張します）。</target>
        </trans-unit>
        <trans-unit id="f4d9425ffe5e7209df632d44375adca39b3fbaf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module can be used to implement support for the &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;deflate&lt;/code&gt; and &lt;code&gt;br&lt;/code&gt; content-encoding mechanisms defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.2&quot;&gt;HTTP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; モジュールのためのサポートを実装するために使用することができる &lt;code&gt;gzip&lt;/code&gt; 、 &lt;code&gt;deflate&lt;/code&gt; と &lt;code&gt;br&lt;/code&gt; によって定義されるコンテンツコードメカニズム&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.2&quot;&gt;HTTPを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff312da231febfae7bc07450e11dc58ffa83a66e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module provides compression functionality implemented using Gzip and Deflate/Inflate, as well as Brotli. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; モジュールは、圧縮機能は、gzipとデフレート/ふくらませる、ならびにBrotliを使用して実装提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0d3fb2c750dea4c18daf95518433459481d23f29" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&quot;module&quot;&lt;/em&gt; format is returned for an ECMAScript Module, while the &lt;em&gt;&quot;commonjs&quot;&lt;/em&gt; format is used to indicate loading through the legacy CommonJS loader. Additional formats such as &lt;em&gt;&quot;addon&quot;&lt;/em&gt; can be extended in future updates.</source>
          <target state="translated">&lt;em&gt;「モジュール」&lt;/em&gt;つつフォーマットは、ECMAScriptのモジュールのために返される&lt;em&gt;「commonjs」&lt;/em&gt;フォーマットはレガシーCommonJSローダを介してローディングを示すために使用されます。&lt;em&gt;「アドオン」&lt;/em&gt;などの追加のフォーマットは、将来のアップデートで拡張できます。</target>
        </trans-unit>
        <trans-unit id="4b26d60c8c267e33ceec9eb3cb25823659216c18" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;C0 control percent-encode set&lt;/em&gt; includes code points in range U+0000 to U+001F (inclusive) and all code points greater than U+007E.</source>
          <target state="translated">&lt;em&gt;C0制御パーセントエンコードセットは、&lt;/em&gt; U + 001F（含む）とU + 007Eよりも大きいすべてのコードポイントに範囲U + 0000のコードポイントを含みます。</target>
        </trans-unit>
        <trans-unit id="0672d673b74190fd9fba201b783b6f34f40080c2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;fragment percent-encode set&lt;/em&gt; includes the &lt;em&gt;C0 control percent-encode set&lt;/em&gt; and code points U+0020, U+0022, U+003C, U+003E, and U+0060.</source>
          <target state="translated">&lt;em&gt;断片パーセントエンコードセットを&lt;/em&gt;含む&lt;em&gt;C0制御パーセントエンコードセット&lt;/em&gt;、U + 0022、U + 0020 U + 003C、U + 003E、およびU + 0060を、コードポイント。</target>
        </trans-unit>
        <trans-unit id="e22ab329bdd24668cc59f8fef8dc30760c4de96d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;heap&lt;/em&gt; is where objects, strings, and closures are stored. Variables are stored in the &lt;em&gt;stack&lt;/em&gt; and the actual JavaScript code resides in the &lt;em&gt;code segment&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ヒープは&lt;/em&gt;、オブジェクト、文字列、および閉鎖が保存される場所です。変数は&lt;em&gt;スタックに&lt;/em&gt;格納され、実際のJavaScriptコードは&lt;em&gt;コードセグメントにあります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d7375464a38257a226cb87f262dcb3be552b7358" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;path percent-encode set&lt;/em&gt; includes the &lt;em&gt;C0 control percent-encode set&lt;/em&gt; and code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060, U+007B, and U+007D.</source>
          <target state="translated">&lt;em&gt;パスパーセントエンコードセットを&lt;/em&gt;含む&lt;em&gt;C0制御パーセントエンコードセット&lt;/em&gt;とコードポイントU + 0020、U + 0022、U + 0023、U + 003C、U + 003E、U + 003F、U + 0060、U + 007B、およびU + 007D。</target>
        </trans-unit>
        <trans-unit id="e16b65952ade126f6a18c1bc1edf6665c9b2398f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specifier&lt;/em&gt; of an &lt;code&gt;import&lt;/code&gt; statement (the string after the &lt;code&gt;from&lt;/code&gt; keyword) can either be an URL-style relative path like &lt;code&gt;'./file.mjs'&lt;/code&gt; or a package name like &lt;code&gt;'fs'&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;指定&lt;/em&gt;の &lt;code&gt;import&lt;/code&gt; 文の（後の文字列 &lt;code&gt;from&lt;/code&gt; キーワード）は、いずれかのようなURL形式の相対パスになります &lt;code&gt;'./file.mjs'&lt;/code&gt; などのパッケージ名 &lt;code&gt;'fs'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d70f6b9c96199d8fff3d7061feed1cf128c3ca54" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specifier&lt;/em&gt; of an &lt;code&gt;import&lt;/code&gt; statement is the string after the &lt;code&gt;from&lt;/code&gt; keyword, e.g. &lt;code&gt;'path'&lt;/code&gt; in &lt;code&gt;import { sep } from 'path'&lt;/code&gt;. Specifiers are also used in &lt;code&gt;export from&lt;/code&gt; statements, and as the argument to an &lt;code&gt;import()&lt;/code&gt; expression.</source>
          <target state="translated">&lt;em&gt;指定&lt;/em&gt;の &lt;code&gt;import&lt;/code&gt; 文は後の文字列です &lt;code&gt;from&lt;/code&gt; 、キーワード、例えば &lt;code&gt;'path'&lt;/code&gt; で &lt;code&gt;import { sep } from 'path'&lt;/code&gt; 。指定子は、 &lt;code&gt;export from&lt;/code&gt; ステートメントでも、また &lt;code&gt;import()&lt;/code&gt; 式の引数としても使用されます。</target>
        </trans-unit>
        <trans-unit id="6ee6720e4d6848bc402c87158eb6ba5b1413a59b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;userinfo encode set&lt;/em&gt; includes the &lt;em&gt;path percent-encode set&lt;/em&gt; and code points U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D, U+005E, and U+007C.</source>
          <target state="translated">&lt;em&gt;ユーザー情報のエンコード・セットが&lt;/em&gt;含ま&lt;em&gt;パスパーセントエンコードセット&lt;/em&gt;、およびコードポイントU + 002F、U + 003A、U + 003B、U + 003D、U + 0040、U + 005B、U + 005C、U + 005D、U + 005EをおよびU + 007C。</target>
        </trans-unit>
        <trans-unit id="23386f556b00f0799b7c78c24407776a22e27dd3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;userinfo percent-encode set&lt;/em&gt; is used exclusively for username and passwords encoded within the URL. The &lt;em&gt;path percent-encode set&lt;/em&gt; is used for the path of most URLs. The &lt;em&gt;fragment percent-encode set&lt;/em&gt; is used for URL fragments. The &lt;em&gt;C0 control percent-encode set&lt;/em&gt; is used for host and path under certain specific conditions, in addition to all other cases.</source>
          <target state="translated">&lt;em&gt;userinfoをパーセントエンコードセットは、&lt;/em&gt; URL内にエンコードのユーザー名とパスワードのためにのみ使用されます。&lt;em&gt;パスパーセントエンコードセットが&lt;/em&gt;最もURLのパスのために使用されます。&lt;em&gt;フラグメントパーセントエンコードセットは、&lt;/em&gt; URLの断片のために使用されています。&lt;em&gt;C0制御パーセントエンコードセットは、&lt;/em&gt;他のすべての場合に加えて、ある特定の条件下でのホストとパスのために使用されます。</target>
        </trans-unit>
        <trans-unit id="fc483ce66d0abc03fd32e445e705d973f26da1ef" translate="yes" xml:space="preserve">
          <source>The API versions are useful when inspecting the runtime state from within the application, in expectation of self-adjusting the resource consumption, load balancing, monitoring etc.</source>
          <target state="translated">APIのバージョンは、アプリケーション内からランタイムの状態を検査する際に、リソース消費の自己調整、負荷分散、監視などを期待して便利です。</target>
        </trans-unit>
        <trans-unit id="0951fdaa95308bec1dfbfa8d404c92c357929728" translate="yes" xml:space="preserve">
          <source>The API's return value is passed via an out parameter.</source>
          <target state="translated">APIの戻り値はoutパラメータで渡されます。</target>
        </trans-unit>
        <trans-unit id="09062a80a94152f8f1768c599ae619e0e76b8acf" translate="yes" xml:space="preserve">
          <source>The APIs and implementation are subject to change at any time.</source>
          <target state="translated">APIや実装は随時変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="53f0c757b52397f8f07d9a59faa43b0b19cacf07" translate="yes" xml:space="preserve">
          <source>The APIs documented in this section provide a simple interface to get and set properties on arbitrary JavaScript objects represented by &lt;code&gt;napi_value&lt;/code&gt;.</source>
          <target state="translated">このセクションに記載されているAPIは、 &lt;code&gt;napi_value&lt;/code&gt; で表される任意のJavaScriptオブジェクトのプロパティを取得および設定するためのシンプルなインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="7b41c34ea62e101d148225b05038df05cdb06c85" translate="yes" xml:space="preserve">
          <source>The AsyncHooks Sensitive API was never documented and had various minor issues. Use the &lt;code&gt;AsyncResource&lt;/code&gt; API instead. See &lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572&lt;/a&gt;.</source>
          <target state="translated">AsyncHooks Sensitive APIは文書化されておらず、さまざまな小さな問題がありました。代わりに &lt;code&gt;AsyncResource&lt;/code&gt; APIを使用してください。&lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d1b6f5984ae9585871ec63a04fbea85e35a8f15" translate="yes" xml:space="preserve">
          <source>The C++ constructor callback should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See &lt;code&gt;napi_wrap()&lt;/code&gt; for details.</source>
          <target state="translated">C ++コンストラクターコールバックは、実際のクラスコンストラクターを呼び出し、JavaScriptオブジェクトで新しいC ++インスタンスをラップし、ラッパーオブジェクトを返すクラスの静的メソッドである必要があります。詳細については、 &lt;code&gt;napi_wrap()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="75c226dff34c132b4dadda02d210de7f84a216ce" translate="yes" xml:space="preserve">
          <source>The Compatibility API has the goal of providing a similar developer experience of HTTP/1 when using HTTP/2, making it possible to develop applications that support both &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt; and HTTP/2. This API targets only the &lt;strong&gt;public API&lt;/strong&gt; of the &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt;. However many modules use internal methods or state, and those &lt;em&gt;are not supported&lt;/em&gt; as it is a completely different implementation.</source>
          <target state="translated">互換性APIの目的は、HTTP / 2の使用時にHTTP / 1と同様の開発者エクスペリエンスを提供し、&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;とHTTP / 2の両方をサポートするアプリケーションを開発できるようにすることです。このAPI は、&lt;a href=&quot;http&quot;&gt;HTTP / 1の&lt;/a&gt;&lt;strong&gt;パブリックAPI&lt;/strong&gt;のみを対象としています。ただし、多くのモジュールは内部メソッドまたは状態を使用し、それら&lt;em&gt;は&lt;/em&gt;完全に異なる実装である&lt;em&gt;ためサポートさ&lt;/em&gt;れ&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="961d6df9bb778b72464f79d4e4386ab4894e1c10" translate="yes" xml:space="preserve">
          <source>The Core API provides a low-level interface designed specifically around support for HTTP/2 protocol features. It is specifically &lt;em&gt;not&lt;/em&gt; designed for compatibility with the existing &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt; module API. However, the &lt;a href=&quot;#http2_compatibility_api&quot;&gt;Compatibility API&lt;/a&gt; is.</source>
          <target state="translated">Core APIは、HTTP / 2プロトコル機能のサポートを中心に設計された低レベルのインターフェースを提供します。特に既存の&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;モジュールAPI との互換性のために設計されて&lt;em&gt;いません&lt;/em&gt;。ただし、&lt;a href=&quot;#http2_compatibility_api&quot;&gt;互換性API&lt;/a&gt;はそうです。</target>
        </trans-unit>
        <trans-unit id="279de7517da4ff67656c3cc6b5f838ad1ce8305b" translate="yes" xml:space="preserve">
          <source>The Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects for handling binary data. As such, the many of the &lt;code&gt;crypto&lt;/code&gt; defined classes have methods not typically found on other Node.js classes that implement the &lt;a href=&quot;stream&quot;&gt;streams&lt;/a&gt; API (e.g. &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;final()&lt;/code&gt;, or &lt;code&gt;digest()&lt;/code&gt;). Also, many methods accepted and returned &lt;code&gt;'latin1'&lt;/code&gt; encoded strings by default rather than &lt;code&gt;Buffer&lt;/code&gt;s. This default was changed after Node.js v0.8 to use &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects by default instead.</source>
          <target state="translated">暗号化モジュールは、統合されたStream APIの概念が存在する前、およびバイナリデータを処理するための&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;オブジェクトが存在する前にNode.jsに追加されました。そのため、 &lt;code&gt;crypto&lt;/code&gt; 定義されたクラスの多くには、&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt; API を実装する他のNode.jsクラスには通常見られないメソッドがあります（例： &lt;code&gt;update()&lt;/code&gt; 、 &lt;code&gt;final()&lt;/code&gt; 、または &lt;code&gt;digest()&lt;/code&gt; ）。また、多くのメソッドは、デフォルトでは &lt;code&gt;Buffer&lt;/code&gt; ではなく &lt;code&gt;'latin1'&lt;/code&gt; エンコード文字列を受け入れて返しました。このデフォルトはNode.js v0.8の後で変更され、デフォルトで代わりに&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;オブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="1255dfc8cbf2ee8aad0ef2d6ca18a8d1643d8eb7" translate="yes" xml:space="preserve">
          <source>The DH groups of &lt;code&gt;modp1&lt;/code&gt;, &lt;code&gt;modp2&lt;/code&gt; and &lt;code&gt;modp5&lt;/code&gt; have a key size smaller than 2048 bits and are not recommended.</source>
          <target state="translated">&lt;code&gt;modp1&lt;/code&gt; 、 &lt;code&gt;modp2&lt;/code&gt; 、および &lt;code&gt;modp5&lt;/code&gt; のDHグループのキーサイズは2048ビット未満であり、推奨されません。</target>
        </trans-unit>
        <trans-unit id="16029571d08814879fd5ceff7ac0b6026da87458" translate="yes" xml:space="preserve">
          <source>The Extended CONNECT Protocol</source>
          <target state="translated">拡張 CONNECT プロトコル</target>
        </trans-unit>
        <trans-unit id="5b3b2456b76fd5373a47d7c0f25c7408ab474e91" translate="yes" xml:space="preserve">
          <source>The HTTP &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&quot;&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;&lt;/a&gt; header is used within an http request to identify the compression encodings accepted by the client. The &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11&quot;&gt;&lt;code&gt;Content-Encoding&lt;/code&gt;&lt;/a&gt; header is used to identify the compression encodings actually applied to a message.</source>
          <target state="translated">HTTP &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&quot;&gt; &lt;code&gt;Accept-Encoding&lt;/code&gt; &lt;/a&gt;ヘッダーは、HTTPリクエスト内で使用され、クライアントが受け入れる圧縮エンコーディングを識別します。&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11&quot;&gt; &lt;code&gt;Content-Encoding&lt;/code&gt; &lt;/a&gt;ヘッダは、実際にメッセージに適用された圧縮符号化方式を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ed4090b42f4c6ce4fe634a7a6f88509a67714c4c" translate="yes" xml:space="preserve">
          <source>The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses &amp;mdash; the user is able to stream data.</source>
          <target state="translated">Node.jsのHTTPインターフェースは、従来は使用することが困難であったプロトコルの多くの機能をサポートするように設計されています。特に、大きなチャンクエンコードされた可能性のあるメッセージ。インターフェースは、リクエストやレスポンス全体を決してバッファリングしないように注意しています&amp;mdash;ユーザーはデータをストリーミングできます。</target>
        </trans-unit>
        <trans-unit id="772600c21e3faa346b0496ef8be7d5364935abae" translate="yes" xml:space="preserve">
          <source>The HTTP response status message (reason phrase). E.G. &lt;code&gt;OK&lt;/code&gt; or &lt;code&gt;Internal Server Error&lt;/code&gt;.</source>
          <target state="translated">HTTP応答ステータスメッセージ（理由フレーズ）。EG &lt;code&gt;OK&lt;/code&gt; または &lt;code&gt;Internal Server Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40c5a5bee4534201d7b876c219ec7fc5d4463481" translate="yes" xml:space="preserve">
          <source>The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header fields (e.g. &lt;code&gt;':method'&lt;/code&gt;, &lt;code&gt;':path'&lt;/code&gt;, etc).</source>
          <target state="translated">HTTP / 1仕様では、トレーラーがHTTP / 2疑似ヘッダーフィールド（ &lt;code&gt;':method'&lt;/code&gt; 、 &lt;code&gt;':path'&lt;/code&gt; など）を含むことを禁止しています。</target>
        </trans-unit>
        <trans-unit id="135fed06aa5bbc41c44688e5c372775c7bdee37f" translate="yes" xml:space="preserve">
          <source>The HTTP/2 compatibility API is composed of &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2ServerRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2ServerResponse&lt;/code&gt;&lt;/a&gt;. They aim at API compatibility with HTTP/1, but they do not hide the differences between the protocols. As an example, the status message for HTTP codes is ignored.</source>
          <target state="translated">HTTP / 2互換性APIは、&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2ServerRequest&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2ServerResponse&lt;/code&gt; で&lt;/a&gt;構成されています。それらはHTTP / 1とのAPI互換性を目指していますが、プロトコル間の違いを隠していません。例として、HTTPコードのステータスメッセージは無視されます。</target>
        </trans-unit>
        <trans-unit id="162977f5d469e9a6540d7b02728763fc461aff28" translate="yes" xml:space="preserve">
          <source>The HTTP/2 error code used when closing the stream can be retrieved using the &lt;code&gt;http2stream.rstCode&lt;/code&gt; property. If the code is any value other than &lt;code&gt;NGHTTP2_NO_ERROR&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;), an &lt;code&gt;'error'&lt;/code&gt; event will have also been emitted.</source>
          <target state="translated">ストリームを閉じるときに使用されるHTTP / 2エラーコードは、 &lt;code&gt;http2stream.rstCode&lt;/code&gt; プロパティを使用して取得できます。コードが &lt;code&gt;NGHTTP2_NO_ERROR&lt;/code&gt; （ &lt;code&gt;0&lt;/code&gt; ）以外の値の場合、 &lt;code&gt;'error'&lt;/code&gt; イベントも発行されます。</target>
        </trans-unit>
        <trans-unit id="7a1bae8c706dfc594960961ddd5385024803aeda" translate="yes" xml:space="preserve">
          <source>The HTTP/2 implementation applies stricter handling of invalid characters in HTTP header names and values than the HTTP/1 implementation.</source>
          <target state="translated">HTTP/2 の実装では、HTTP/1 の実装よりも HTTP ヘッダ名と値の中の無効な文字の扱いが厳しくなります。</target>
        </trans-unit>
        <trans-unit id="2f96b2b47131be95c297bad382f063d4a1945e24" translate="yes" xml:space="preserve">
          <source>The ID returned from &lt;code&gt;executionAsyncId()&lt;/code&gt; is related to execution timing, not causality (which is covered by &lt;code&gt;triggerAsyncId()&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;executionAsyncId()&lt;/code&gt; から返されるIDは、因果関係（ &lt;code&gt;triggerAsyncId()&lt;/code&gt; でカバーされる）ではなく、実行タイミングに関連しています。</target>
        </trans-unit>
        <trans-unit id="47ac560e8f84993ade1da5a6679e57c4013bc4f7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; タイプについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;セクション6.1.6&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="58a08f1fccd82b78e4fa42d492a99a1e83b02718" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification. Note the complete range of &lt;code&gt;int64_t&lt;/code&gt; cannot be represented with full precision in JavaScript. Integer values outside the range of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt;&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; -(2^53 - 1) - &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; (2^53 - 1) will lose precision.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; タイプについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;セクション6.1.6&lt;/a&gt;で説明されています。 &lt;code&gt;int64_t&lt;/code&gt; の完全な範囲は、JavaScriptでは完全な精度で表現できないことに注意してください。&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt; &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; -&lt;/a&gt;（2 ^ 53-1）&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt;（2 ^ 53-1 ）の範囲外の整数値は、精度を失います。</target>
        </trans-unit>
        <trans-unit id="49efb0950474a63e8a2561d0a785571f7a4d0f11" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Object&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object-type&quot;&gt;Section 6.1.7&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Object&lt;/code&gt; タイプについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object-type&quot;&gt;セクション6.1.7&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="6d58498aa5f597c1ecf0a744aef261db4f31bc92" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;String&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type&quot;&gt;Section 6.1.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScriptの &lt;code&gt;String&lt;/code&gt; 型については、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type&quot;&gt;セクション6.1.4&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="e2d5ab3fbb2a9670eda6b4f6fe619f423b95b3da" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Symbol&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol-objects&quot;&gt;Section 19.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Symbol&lt;/code&gt; タイプは、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol-objects&quot;&gt;セクション19.4&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="8a9e4c46b3f1d21c0585bb00657cd3b4952dbae7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; mechanism &lt;strong&gt;cannot&lt;/strong&gt; be used to intercept errors generated by asynchronous APIs. A common mistake for beginners is to try to use &lt;code&gt;throw&lt;/code&gt; inside an error-first callback:</source>
          <target state="translated">JavaScriptの &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; メカニズム&lt;strong&gt;を&lt;/strong&gt;使用して、非同期APIによって生成されたエラーをインターセプトする&lt;strong&gt;ことはできません&lt;/strong&gt;。初心者によくある間違いは、エラーファーストコールバック内で &lt;code&gt;throw&lt;/code&gt; を使用しようとすることです。</target>
        </trans-unit>
        <trans-unit id="c410bef1bfc9aa5063d237d54175e04472c4cef2" translate="yes" xml:space="preserve">
          <source>The JavaScript constructor function returned from &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; is often saved and used later, to construct new instances of the class from native code, and/or check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, create a persistent reference to it using &lt;a href=&quot;#n_api_napi_create_reference&quot;&gt;&lt;code&gt;napi_create_reference&lt;/code&gt;&lt;/a&gt; and ensure the reference count is kept &amp;gt;= 1.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; &lt;/a&gt;から返されるJavaScriptコンストラクター関数はしばしば保存され、後で使用されて、ネイティブコードからクラスの新しいインスタンスを構築したり、指定された値がクラスのインスタンスであるかどうかを確認したりします。その場合、関数の値がガベージコレクションされないようにするには、&lt;a href=&quot;#n_api_napi_create_reference&quot;&gt; &lt;code&gt;napi_create_reference&lt;/code&gt; &lt;/a&gt;を使用して関数の永続的な参照を作成し、参照カウントが&amp;gt; = 1に保たれるようにします。</target>
        </trans-unit>
        <trans-unit id="657216a379465090b22847c0560ff9e628279283" translate="yes" xml:space="preserve">
          <source>The Legacy URL API is deprecated. Use the WHATWG URL API.</source>
          <target state="translated">Legacy URL API は非推奨です。WHATWG URL API を使用してください。</target>
        </trans-unit>
        <trans-unit id="c9bcb6aef5fbe5e6c4c49d6ca50a7775ad79058d" translate="yes" xml:space="preserve">
          <source>The N-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. A C++ API can be easier to use. To support using C++, the project maintains a C++ wrapper module called &lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;node-addon-api&lt;/a&gt;. This wrapper provides an inlineable C++ API. Binaries built with &lt;code&gt;node-addon-api&lt;/code&gt; will depend on the symbols for the N-API C-based functions exported by Node.js. &lt;code&gt;node-addon-api&lt;/code&gt; is a more efficient way to write code that calls N-API. Take, for example, the following &lt;code&gt;node-addon-api&lt;/code&gt; code. The first section shows the &lt;code&gt;node-addon-api&lt;/code&gt; code and the second section shows what actually gets used in the addon.</source>
          <target state="translated">N-APIはC. APIであり、Node.jsバージョンとさまざまなコンパイラレベルでABIの安定性を保証します。 C ++ APIの方が使いやすい場合があります。 C ++の使用をサポートするために、プロジェクトは&lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;node-addon-api&lt;/a&gt;と呼ばれるC ++ラッパーモジュールを維持します。このラッパーは、インライン化可能なC ++ APIを提供します。 &lt;code&gt;node-addon-api&lt;/code&gt; でビルドされたバイナリは、Node.jsによってエクスポートされたN-API Cベースの関数のシンボルに依存します。 &lt;code&gt;node-addon-api&lt;/code&gt; は、N-APIを呼び出すコードを記述するためのより効率的な方法です。たとえば、次の &lt;code&gt;node-addon-api&lt;/code&gt; コードを見てください。最初のセクションは &lt;code&gt;node-addon-api&lt;/code&gt; コードを示し、2番目のセクションはアドオンで実際に使用されるものを示しています。</target>
        </trans-unit>
        <trans-unit id="7fbeecff23b86e6f00bb89f0d12dd0bfed507713" translate="yes" xml:space="preserve">
          <source>The N-APIs associated strictly with accessing ECMAScript features from native code can be found separately in &lt;code&gt;js_native_api.h&lt;/code&gt; and &lt;code&gt;js_native_api_types.h&lt;/code&gt;. The APIs defined in these headers are included in &lt;code&gt;node_api.h&lt;/code&gt; and &lt;code&gt;node_api_types.h&lt;/code&gt;. The headers are structured in this way in order to allow implementations of N-API outside of Node.js. For those implementations the Node.js specific APIs may not be applicable.</source>
          <target state="translated">ネイティブコードからのECMAScript機能へのアクセスに厳密に関連付けられているN-APIは、 &lt;code&gt;js_native_api.h&lt;/code&gt; および &lt;code&gt;js_native_api_types.h&lt;/code&gt; に個別にあります。これらのヘッダーで定義されているAPIは、 &lt;code&gt;node_api.h&lt;/code&gt; および &lt;code&gt;node_api_types.h&lt;/code&gt; に含まれています。ヘッダーは、Node.jsの外部でN-APIを実装できるように、このように構造化されています。これらの実装では、Node.js固有のAPIは適用されない場合があります。</target>
        </trans-unit>
        <trans-unit id="3bdef6c72992d8c5e5ff5c885a73a68885fd6ad0" translate="yes" xml:space="preserve">
          <source>The Node.js REPL</source>
          <target state="translated">Node.jsのREPL</target>
        </trans-unit>
        <trans-unit id="e3c044365d34cf9a28d8db2d3ac2cd94ca4a34e6" translate="yes" xml:space="preserve">
          <source>The Node.js event loop no longer having any additional work to perform.</source>
          <target state="translated">Node.jsのイベントループでは、追加の作業が不要になりました。</target>
        </trans-unit>
        <trans-unit id="7e65b631311436d7e53c5dbb3d80a7085dab5a90" translate="yes" xml:space="preserve">
          <source>The Node.js project is adding error codes to all of the errors generated internally. The goal is for applications to use these error codes for all error checking. The associated error messages will remain, but will only be meant to be used for logging and display with the expectation that the message can change without SemVer applying. In order to support this model with N-API, both in internal functionality and for module specific functionality (as its good practice), the &lt;code&gt;throw_&lt;/code&gt; and &lt;code&gt;create_&lt;/code&gt; functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is NULL then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be:</source>
          <target state="translated">Node.jsプロジェクトは、内部で生成されたすべてのエラーにエラーコードを追加しています。目標は、アプリケーションがすべてのエラーチェックにこれらのエラーコードを使用することです。関連するエラーメッセージは残りますが、SemVerを適用しなくてもメッセージが変更される可能性があることを想定して、ロギングと表示に使用することのみを目的としています。 N-APIでこのモデルをサポートするために、内部機能とモジュール固有の機能の両方で（その良い習慣として）、 &lt;code&gt;throw_&lt;/code&gt; および &lt;code&gt;create_&lt;/code&gt; 関数は、エラーに追加されるコードの文字列であるオプションのコードパラメーターを取りますオブジェクト。オプションのパラメーターがNULLの場合、コードはエラーに関連付けられません。コードが提供されている場合、エラーに関連付けられている名前も次のように更新されます。</target>
        </trans-unit>
        <trans-unit id="bdcbdbacfe81b80e870cab0c5a70fe82807a94ad" translate="yes" xml:space="preserve">
          <source>The Node.js-specific parts of an addon can be separated from the code that exposes the actual functionality to the JavaScript environment so that the latter may be used with multiple implementations of N-API. In the example below, &lt;code&gt;addon.c&lt;/code&gt; and &lt;code&gt;addon.h&lt;/code&gt; refer only to &lt;code&gt;js_native_api.h&lt;/code&gt;. This ensures that &lt;code&gt;addon.c&lt;/code&gt; can be reused to compile against either the Node.js implementation of N-API or any implementation of N-API outside of Node.js.</source>
          <target state="translated">アドオンのNode.js固有の部分は、実際の機能をJavaScript環境に公開するコードから分離できるため、JavaScript環境をN-APIの複数の実装で使用できます。以下の例では、 &lt;code&gt;addon.c&lt;/code&gt; および &lt;code&gt;addon.h&lt;/code&gt; はjs_native_api.hのみを参照し &lt;code&gt;js_native_api.h&lt;/code&gt; 。これにより、 &lt;code&gt;addon.c&lt;/code&gt; を再利用して、Node.jsのN-API実装またはNode.js外のN-API実装に対してコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="552d0c830ce2aa539ac168b242bbc027a66f4008" translate="yes" xml:space="preserve">
          <source>The OpenSSL command-line interface can be used to generate a CSR for a private key:</source>
          <target state="translated">OpenSSL のコマンドラインインタフェースを使用して、秘密鍵の CSR を生成することができます。</target>
        </trans-unit>
        <trans-unit id="91cfbd995886d282297192748688dbaa4166ed28" translate="yes" xml:space="preserve">
          <source>The OpenSSL function the error originates in.</source>
          <target state="translated">エラーの原因となった OpenSSL 関数。</target>
        </trans-unit>
        <trans-unit id="a1e80bf18d0319ba48b28be867e8b0e1d8c12952" translate="yes" xml:space="preserve">
          <source>The OpenSSL library the error originates in.</source>
          <target state="translated">エラーの原因となった OpenSSL ライブラリです。</target>
        </trans-unit>
        <trans-unit id="8acbb56d9d8d4d4648cc4c93a9173dfb379ab8ef" translate="yes" xml:space="preserve">
          <source>The PBKDF2 algorithm failed for unspecified reasons. OpenSSL does not provide more details and therefore neither does Node.js.</source>
          <target state="translated">PBKDF2 アルゴリズムは、特定できない理由で失敗しました。OpenSSLは詳細を提供していないので、Node.jsも同様です。</target>
        </trans-unit>
        <trans-unit id="5afe86aa9575a5298ab1d62fb451e96c8518364c" translate="yes" xml:space="preserve">
          <source>The Performance Timing API provides an implementation of the &lt;a href=&quot;https://w3c.github.io/performance-timeline/&quot;&gt;W3C Performance Timeline&lt;/a&gt; specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers.</source>
          <target state="translated">Performance Timing APIは、&lt;a href=&quot;https://w3c.github.io/performance-timeline/&quot;&gt;W3C Performance Timeline&lt;/a&gt;仕様の実装を提供します。APIの目的は、高解像度のパフォーマンスメトリックの収集をサポートすることです。これは、最新のWebブラウザーに実装されているものと同じPerformance APIです。</target>
        </trans-unit>
        <trans-unit id="468e3b5bc8a586f299c6cc20a15e70c9d5278376" translate="yes" xml:space="preserve">
          <source>The REPL uses the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module to catch all uncaught exceptions for that REPL session.</source>
          <target state="translated">REPLは&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールを使用して、そのREPLセッションのキャッチされなかったすべての例外をキャッチします。</target>
        </trans-unit>
        <trans-unit id="8c0c176203397da1a1a71fa900815154369f9aaa" translate="yes" xml:space="preserve">
          <source>The TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks.</source>
          <target state="translated">TLS プロトコルでは、クライアントは TLS セッションの特定の側面を再ネゴシエーションすることができます。残念ながら、セッションの再ネゴシエーションはサーバ側のリソースを不釣り合いに多く必要とするため、サービス拒否攻撃の標的となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7ca92e1a8e1a69feb461c9b09be13473fdf946f9" translate="yes" xml:space="preserve">
          <source>The TLS/SSL is a public/private key infrastructure (PKI). For most common cases, each client and server must have a &lt;em&gt;private key&lt;/em&gt;.</source>
          <target state="translated">TLS / SSLは、公開/秘密鍵インフラストラクチャー（PKI）です。最も一般的なケースでは、各クライアントとサーバーに&lt;em&gt;秘密鍵が&lt;/em&gt;必要です。</target>
        </trans-unit>
        <trans-unit id="45b677ccb54927c1003b316f56811247ed5f73cf" translate="yes" xml:space="preserve">
          <source>The URL object has both a &lt;code&gt;toString()&lt;/code&gt; method and &lt;code&gt;href&lt;/code&gt; property that return string serializations of the URL. These are not, however, customizable in any way. The &lt;code&gt;url.format(URL[, options])&lt;/code&gt; method allows for basic customization of the output.</source>
          <target state="translated">URLオブジェクトには、 &lt;code&gt;toString()&lt;/code&gt; メソッドと、URLの文字列シリアル化を返す &lt;code&gt;href&lt;/code&gt; プロパティの両方があります。ただし、これらはカスタマイズできません。 &lt;code&gt;url.format(URL[, options])&lt;/code&gt; メソッドは、出力の基本的なカスタマイズを可能にします。</target>
        </trans-unit>
        <trans-unit id="6734cf0089aff7197648c315082814fcb791c116" translate="yes" xml:space="preserve">
          <source>The URL of the current module, as set in the constructor.</source>
          <target state="translated">コンストラクタで設定した現在のモジュールの URL。</target>
        </trans-unit>
        <trans-unit id="37eb375188b0bcfc1a769a5733533ca6a019e9c3" translate="yes" xml:space="preserve">
          <source>The UTF-16 encoding was used with &lt;a href=&quot;crypto#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest()&lt;/code&gt;&lt;/a&gt;. While the &lt;code&gt;hash.digest()&lt;/code&gt; method does allow an &lt;code&gt;encoding&lt;/code&gt; argument to be passed in, causing the method to return a string rather than a &lt;code&gt;Buffer&lt;/code&gt;, the UTF-16 encoding (e.g. &lt;code&gt;ucs&lt;/code&gt; or &lt;code&gt;utf16le&lt;/code&gt;) is not supported.</source>
          <target state="translated">UTF-16エンコーディングが&lt;a href=&quot;crypto#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest()&lt;/code&gt; で&lt;/a&gt;使用されました。ながら &lt;code&gt;hash.digest()&lt;/code&gt; メソッドを許可し &lt;code&gt;encoding&lt;/code&gt; 引数ではなく、文字列を返すようにする方法を引き起こし、に渡される &lt;code&gt;Buffer&lt;/code&gt; 、UTF-16符号化（例えば、 &lt;code&gt;ucs&lt;/code&gt; 又は &lt;code&gt;utf16le&lt;/code&gt; サポートされていません）。</target>
        </trans-unit>
        <trans-unit id="0707fea87e96404333ec61633fb2b6e0bae25d52" translate="yes" xml:space="preserve">
          <source>The V8 &lt;code&gt;BreakIterator&lt;/code&gt; API was used but the full ICU data set is not installed.</source>
          <target state="translated">V8 &lt;code&gt;BreakIterator&lt;/code&gt; APIが使用されましたが、完全なICUデータセットがインストールされていません。</target>
        </trans-unit>
        <trans-unit id="f32b99c9224cb051847362e060819b2b4c50c079" translate="yes" xml:space="preserve">
          <source>The V8 options available for a version of Node.js may be determined by running &lt;code&gt;node --v8-options&lt;/code&gt;.</source>
          <target state="translated">Node.jsのバージョンで使用できるV8オプションは、 &lt;code&gt;node --v8-options&lt;/code&gt; を実行することで決定できます。</target>
        </trans-unit>
        <trans-unit id="1376e8a42784ef291882a0614dae5e571b33be74" translate="yes" xml:space="preserve">
          <source>The V8 platform used by this instance of Node.js does not support creating Workers. This is caused by lack of embedder support for Workers. In particular, this error will not occur with standard builds of Node.js.</source>
          <target state="translated">このNode.jsのインスタンスで使用されているV8プラットフォームはWorkerの作成をサポートしていません。これは、Worker のエンベッダーのサポートが不足していることが原因です。特にNode.jsの標準ビルドではこのエラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="c7aa4e7f9c86be387463308a7aa43274019989e8" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;TextDecoder&lt;/code&gt; class. See the &lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt;&lt;code&gt;TextDecoder&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;TextDecoder&lt;/code&gt; クラス。&lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt; &lt;code&gt;TextDecoder&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2c77f6c4c5072baf3631c95fcc538d6de133b14d" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;TextEncoder&lt;/code&gt; class. See the &lt;a href=&quot;util#util_class_util_textencoder&quot;&gt;&lt;code&gt;TextEncoder&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;TextEncoder&lt;/code&gt; クラス。&lt;a href=&quot;util#util_class_util_textencoder&quot;&gt; &lt;code&gt;TextEncoder&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8477a4551f71f9abb4cb2cf82ea30bda851328a6" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URL&lt;/code&gt; class. See the &lt;a href=&quot;url#url_class_url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;URL&lt;/code&gt; クラス。&lt;a href=&quot;url#url_class_url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bbd5c13ca2d2f6a88b82622750c83bf478985f68" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; class. See the &lt;a href=&quot;url#url_class_urlsearchparams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; クラス。&lt;a href=&quot;url#url_class_urlsearchparams&quot;&gt; &lt;code&gt;URLSearchParams&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8f9bdac2cd843e3fcae98a8d5e15b498e52ce639" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; interface and the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module have similar purpose, but the purpose of the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module is more general, as it allows the customization of delimiter characters (&lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;). On the other hand, this API is designed purely for URL query strings.</source>
          <target state="translated">WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; のインターフェイスと&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;モジュールは、同様の目的を持っているが、目的の&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;が（区切り文字のカスタマイズを可能にするように、モジュールは、より一般的であり、 &lt;code&gt;&amp;amp;&lt;/code&gt; と &lt;code&gt;=&lt;/code&gt; ）。一方、このAPIは純粋にURLクエリ文字列用に設計されています。</target>
        </trans-unit>
        <trans-unit id="b05ee11c49a49c40741a840c0cf9acf09965de08" translate="yes" xml:space="preserve">
          <source>The WHATWG URL API</source>
          <target state="translated">WHATWG URL API</target>
        </trans-unit>
        <trans-unit id="303b85623f10249b2f174883bd7c66ad4a31337f" translate="yes" xml:space="preserve">
          <source>The WHATWG algorithm defines four &quot;percent-encode sets&quot; that describe ranges of characters that must be percent-encoded:</source>
          <target state="translated">WHATWG アルゴリズムでは、パーセンテージでエンコードする必要がある文字の範囲を記述する 4 つの「パーセンテージ・エンコード・セット」を定義しています。</target>
        </trans-unit>
        <trans-unit id="1d0d078594f6a4548f54d230b92788f44dad0c47" translate="yes" xml:space="preserve">
          <source>The above applies &lt;em&gt;only&lt;/em&gt; to server connections, client connections are not automatically closed by workers, and disconnect does not wait for them to close before exiting.</source>
          <target state="translated">上記はサーバー接続に&lt;em&gt;のみ&lt;/em&gt;適用され、クライアント接続はワーカーによって自動的に閉じられません。また、接続解除はワーカーが閉じるのを待ってから終了します。</target>
        </trans-unit>
        <trans-unit id="ef4541443acbac2ca975fcae7469aa7ccd5761dd" translate="yes" xml:space="preserve">
          <source>The above example spawns a Worker thread for each &lt;code&gt;parse()&lt;/code&gt; call. In actual practice, use a pool of Workers instead for these kinds of tasks. Otherwise, the overhead of creating Workers would likely exceed their benefit.</source>
          <target state="translated">上記の例では、 &lt;code&gt;parse()&lt;/code&gt; 呼び出しごとにワーカースレッドが生成されます。実際には、これらの種類のタスクの代わりにワーカーのプールを使用してください。そうしないと、ワーカーを作成するオーバーヘッドがそのメリットを超える可能性があります。</target>
        </trans-unit>
        <trans-unit id="036ff3fbd8810caec3fac26115b25dea2af31c08" translate="yes" xml:space="preserve">
          <source>The above function &lt;code&gt;do_something_asynchronous()&lt;/code&gt; would perform its asynchronous action and then it would resolve or reject the deferred, thereby concluding the promise and freeing the deferred:</source>
          <target state="translated">上記の関数 &lt;code&gt;do_something_asynchronous()&lt;/code&gt; は非同期アクションを実行してから、遅延オブジェクトを解決または拒否し、それによってpromiseを終了し、遅延オブジェクトを解放します。</target>
        </trans-unit>
        <trans-unit id="1f204e8b1fde824583e61cdcdb79c21b74961dd3" translate="yes" xml:space="preserve">
          <source>The actual &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation used during module instantiation is one that returns the modules linked during linking. Since at that point all modules would have been fully linked already, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation is fully synchronous per specification.</source>
          <target state="translated">モジュールのインスタンス化中に使用される実際の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;実装は、リンク中にリンクされたモジュールを返すものです。その時点ですべてのモジュールがすでに完全にリンクされているため、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;実装は仕様ごとに完全に同期しています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
