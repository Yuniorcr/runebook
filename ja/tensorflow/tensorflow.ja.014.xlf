<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="tensorflow">
    <body>
      <group id="tensorflow">
        <trans-unit id="cc9ac3df4d9cb2097593155d5f433e3d97fd0651" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;t_mul&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; or a Python number. Used to derive the number of iterations in the i-th period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824a21b9e934c5ecf288f966d6eb62ef3930e206" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;table&lt;/code&gt;&lt;/b&gt;: The table to be initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b86dceae7bc3cba4bb403ce31229134c38a764" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;table&lt;/code&gt;&lt;/b&gt;: The table to initialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b395464361796e189e65165a7dd3e1474d483d7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;table_to_config_dict&lt;/code&gt;&lt;/b&gt;: A dictionary mapping features names to instances of the class &lt;code&gt;TableConfig&lt;/code&gt;. Either features_columns or the pair of &lt;code&gt;feature_to_config_dict&lt;/code&gt; and &lt;code&gt;table_to_config_dict&lt;/code&gt; must be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05f69d7417b596e99a4b54d15e616be7eda1462" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/b&gt;: String tag to identify arguments that should be packed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1340f9a09aaff1b38383b484c17ae069d0fdf4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/b&gt;: String. All statistics recorded by the returned transformation will be associated with the given &lt;code&gt;tag&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d053dfe4800e5fb2814d40101151aa3210ce4e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/b&gt;: The tag name for this metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5757871e1645faf2cf684a51456937adc3328b9e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/b&gt;: string tag used to identify the summary (e.g. in TensorBoard), usually generated with &lt;code&gt;tf.summary.summary_scope&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ab076397f36df7fcc077f0eb10984f625c708c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tag_set&lt;/code&gt;&lt;/b&gt;: Set of tags identifying the MetaGraphDef within the SavedModel to analyze. All tags in the tag set must be present. (default set(&quot;serve&quot;))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf440082e3c269da9a7a8bc9d145d988e682ce1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/b&gt;: A tag or sequence of tags identifying the MetaGraph to load. Optional if the SavedModel contains a single MetaGraph, as for those exported from &lt;a href=&quot;load&quot;&gt;&lt;code&gt;tf.saved_model.load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc87129b216fd095b6ea134e2400c28226f3ded" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/b&gt;: Set of string tags to identify the required MetaGraphDef. These should correspond to the tags used when saving the variables using the SavedModel &lt;code&gt;save()&lt;/code&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ecb6219aadf00b04764c5cac8770a4d0b67162" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/b&gt;: Set of tags identifying the MetaGraphDef within the SavedModel to analyze. All tags in the tag set must be present. (default set(SERVING))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff5e2c9e2247a6e386b91eb2a5c93e8621df19d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/b&gt;: The set of tags to annotate the meta graph def with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca1e4d07047e68cdaa69c313c922f5286fab3eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/b&gt;: The set of tags with which to save the meta graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255442ebca5e1b435ec526b2adfcaf255e48843a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tangents&lt;/code&gt;&lt;/b&gt;: A tensor or nested structure of tensors, with the same nesting structure as &lt;code&gt;primals&lt;/code&gt;, with each element being a vector with the same size as the corresponding primal element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bda48d03922e8c4359cc03fe4d1eb25251b66e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: (Optional.) The execution engine to connect to. Defaults to using an in-process engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e4976d299ad4ccf826b43ff00f6a2ab27655de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: (Optional.) The execution engine to connect to. Defaults to using an in-process engine. See &lt;a href=&quot;https://tensorflow.org/deploy/distributed&quot;&gt;Distributed TensorFlow&lt;/a&gt; for more examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e72ab8ec3f631129f88e0fa2543a20c159992c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: A callable object to be executed in the thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4dd3796659cbe2c727fe0eae697b9bf5703dde7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: A callable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a574d76bd840937d1453b35d50872e1d2ae43a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: A target string in which to look for the strings, such as 'The quick brown fox jumped over the lazy dog'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1282b4e17bb77896dabca257e0b7cbb32c982533" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: A tensor of the same shape as &lt;code&gt;output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36903deec671601bce834f9c2236b1280bde6a93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: A tensor with rank 2 or higher and with shape [b, y1, ..., y_n]. &lt;code&gt;target[i,...]&lt;/code&gt; should only depend on &lt;code&gt;source[i,...]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906eafd44bcc89fcb94f1dda3731aa929fe13846" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: A tensor with the same shape as &lt;code&gt;output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39f8918a0f700b0704bd2c1dca2bd9b893a598d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: An integer tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e15283085fef978228d28b354f9b9e92885fd1a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: Optional callable object that will be executed in the thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac730b0b6e8e4a02290c8599de27c7d76da8a8e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: Tensor to be differentiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f043056be4e7113b9c786a73d6feecf0c99bafd1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: The execution engine to connect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4073fc439335e65d7c1c2408394d5a9c12626e0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: The final callable to be wrapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab848eb924684e3b3b78ca8e1cc9f2c21610047" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: The numpy &lt;code&gt;ndarray&lt;/code&gt;, or anything that can be converted into a numpy &lt;code&gt;ndarray&lt;/code&gt; (including Tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe561cce0430b10d63652d1261aa4103edfc424" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: Total number of steps expected, None if unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1042682784dae2159881a41c095d39b743711319" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target&lt;/code&gt;&lt;/b&gt;: a list or nested structure of Tensors or Variables to be differentiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36626ab9f25a2593d47aa3ecbc596a514ffd58e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_column&lt;/code&gt;&lt;/b&gt;: str, name to give the target column &lt;code&gt;y&lt;/code&gt;. This parameter is not used when &lt;code&gt;y&lt;/code&gt; is a &lt;code&gt;DataFrame&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8680c114934d91454d20c3c4c052a2fbac5a73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_device&lt;/code&gt;&lt;/b&gt;: The name of a device to which elements will be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33377cc3b6f59814ef12cba1a91886c7d8d45008" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_dist&lt;/code&gt;&lt;/b&gt;: A floating point type tensor, shaped &lt;code&gt;[num_classes]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e9215cd703fbe7447cc7b32195c12af12ee5d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_height&lt;/code&gt;&lt;/b&gt;: Height of output image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df55570c014438bf6f70d1ba5057ef9342d9c962" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_height&lt;/code&gt;&lt;/b&gt;: Height of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ba43beabb4b9d36578847c29f2c361029bdd67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_height&lt;/code&gt;&lt;/b&gt;: Target height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a8b7066e00a263eb57ea5cb05ce1a9aa09c955" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_ops&lt;/code&gt;&lt;/b&gt;: Deprecated. Please specify &lt;code&gt;target_spec.supported_ops&lt;/code&gt; instead. Set of OpsSet options indicating which converter to use. (default set([OpsSet.TFLITE_BUILTINS]))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1d38c6f4094dbd0d1a9b24e2ce09d359ccd323" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_shape&lt;/code&gt;&lt;/b&gt;: Target shape. Tuple of integers, does not include the samples dimension (batch size).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d756e97919eb5fe86a1a8e83990f71159c51408" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_size&lt;/code&gt;&lt;/b&gt;: tuple of integers, dimensions to resize input images to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce8ddc2afaf681c979ee4fc262186a433a063cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_spec&lt;/code&gt;&lt;/b&gt;: Experimental flag, subject to change. Specification of target device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e143139e568cce5fc4d268cfffc003c1a30be1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_tensors&lt;/code&gt;&lt;/b&gt;: By default, Keras will create placeholders for the model's target, which will be fed with the target data during training. If instead you would like to use your own target tensors (in turn, Keras will not expect external Numpy data for these targets at training time), you can specify them via the &lt;code&gt;target_tensors&lt;/code&gt; argument. It can be a single tensor (for a single-output model), a list of tensors, or a dict mapping output names to target tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef94a47c33a1fb35adefddfceecb9c35cfe3a476" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_width&lt;/code&gt;&lt;/b&gt;: Target width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b019b58c70986ad4e3bdd6dd83863e3a57ff170" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_width&lt;/code&gt;&lt;/b&gt;: Width of output image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b829849e2154966667c874d5e7ae0d5f654b4415" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;target_width&lt;/code&gt;&lt;/b&gt;: Width of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb6822390f44e18ce03ea6af397192a84359fae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;targets&lt;/code&gt;&lt;/b&gt;: A 1D tensor of length &lt;code&gt;batch_size&lt;/code&gt; and type &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3dd32aa81d5bbc8e8548de90433973ff5b90bd1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;targets&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of the same type and shape as &lt;code&gt;log_input&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d16250e66478b7fa8fcaee538889c5572104f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;targets&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. A &lt;code&gt;batch_size&lt;/code&gt; vector of class ids.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138e6717a27e08acb426db2658505ad4a983200c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;targets&lt;/code&gt;&lt;/b&gt;: Deprecated alias for labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509ee8659bf83ca48e13fe44a433a4861b7925f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task&lt;/code&gt;&lt;/b&gt;: int. Optional task index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54aee2e3283bd6d1bb878243f923a9fc07c3378" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: (Integer, optional) Overrides and sets the task id of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a887457757e4844a810d2c1e4d09a56a3b03f403" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: (Integer, optional) Overrides the task index specified in the TF_CONFIG environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e17988defd0830e64dc5db6e40a2f9feaddde6b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: (Optional) Overrides the default auto-slected task index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6bab53615e0b2fc7acf345a70068a935f056ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: (Optional) The index of the TensorFlow task of the machine we want to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805d415c383b14edb4b65895faa27baa3df7ab32" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: (Optional) The index of the TensorFlow task of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67470970ae6e656c109bcf976922d768c1ae2aed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: (Optional, integer) The index of the TensorFlow task of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd27b7697efd65bd49b708fae44e758617ae56dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: TensorFlow task number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49357525d1714717f15268ddc33f10cbdfdb9eb1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: The task index for this particular VM, within the GCE instance group. In particular, every single instance should be assigned a unique ordinal index within an instance group manually so that they can be distinguished from each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddb4be569a07c9f22bad031a09c340443914738" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_id&lt;/code&gt;&lt;/b&gt;: Unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d362bda48a24b6ccf9ae6a992e3088f1467b9550" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_index&lt;/code&gt;&lt;/b&gt;: (Optional.) Specifies the task index of the server in its job. Defaults to the value in &lt;code&gt;server_or_cluster_def&lt;/code&gt;, if specified. Otherwise defaults to 0 if the server's job has only one task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8138ef7e0f134a66bb195586152acc3fd888ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_index&lt;/code&gt;&lt;/b&gt;: A non-negative integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc288f42c859776d11d777830085fdc420494fb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_index&lt;/code&gt;&lt;/b&gt;: The local task index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c654f50aa68f77f108ea1f6d1db1e1a8f71fe5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: (Optional) Overrides the default auto-selected task type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8457a1a24c7bcb7ab542fa907a0d389af3b871ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: (Optional) The type of the TensorFlow task of the machine we want to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a7d722bd6682edfe3022424e6085c246095288" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: (Optional) The type of the TensorFlow task of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8def41c37a5964d11433be802cf18df4f4d647c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: (Optional, string) The type of the TensorFlow task of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2029cbdaaafba124e104b78c52c192eabf1c275" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: (String, optional) Overrides and sets the task_type of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8d83c150c5458a1e9f0dedb6c1ee8e1d2c1677" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: (String, optional) Overrides the task type specified in the TF_CONFIG environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0796910b36dd37ad5218018f4c08bcfd1efc5888" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: Name of the TensorFlow job this GCE instance group of VM instances belong to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacd9ed9aa6398974fd7074f91f07b51259b20a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;task_type&lt;/code&gt;&lt;/b&gt;: Unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b27be06962661c66e5b9b1c0832f6c003945be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tasks_per_node&lt;/code&gt;&lt;/b&gt;: Number of tasks to run on each node, if not set defaults to Slurm's output environment variable SLURM_NTASKS_PER_NODE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1080008c242b6b5133a0b9aa80fc70e816aa5f2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;template&lt;/code&gt;&lt;/b&gt;: A string template to format tensor values into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040330a077e28b7a7378afe1395c53cd771e516f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[..., M, N]&lt;/code&gt;. Let &lt;code&gt;P&lt;/code&gt; be the minimum of &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e7498bfd986fa070b7d3fb54bf72947d1a637b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[..., N, N]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923ec44464fa13dd47326bd22af260db62af66a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[..., N, N]&lt;/code&gt;. Only the lower triangular part of each inner inner matrix is referenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bb876cabd96b46ff76981f51ed22bc6bfba46b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of types &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af9c7e2acbbc23778b5475bf7815e89d48e9867" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e111ddfaf63a2691991e94f560aad4dfbc5f13e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. A Tensor of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9260e4c363350a058747cbfbca623f75936cfa74" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c56823e0aa5fba1a6f202ded3d676de5b0b668d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;. Up to 8-D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4084cb67a24cf605f3cf9e07adc875958d0f77fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Tensor to copy/update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f6e7d455a4e11d59b1cbb512baffec946082f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A Tensor value to broadcast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e8500a2d78345b12150183162c1e354cbaeeee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A TensorProto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7491c956b79af66bdebf9f3a215a386a027c20e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A dense &lt;code&gt;Tensor&lt;/code&gt; to be converted to a &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754a92b2d1f9fd629706eac359960bf212bcc328" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A real numeric Tensor containing a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75faf62ea89f2641d00685e36191e62d5475421" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A tensor instance (potentially sparse).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d607f3c5fa049ed7d7b6ac414c6ee24451a84229" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A tensor instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6b589baa2f5e2507f9b067cb68f00c55678d75" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: A tensor of any type and shape to serialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77992d8b0667b63bd5de4faabd07f3a5dcd9ff70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: An ops.Tensor object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0fd6bcdcef4e4d153173639957bf8567f41617" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: Any &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8543ad52542feb2b8719a37cb92b996aa72b6d0d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: N-D tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2294580b4f54e3b853969f91c76b2890e2ba0a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: Optional existing tensor to wrap into the &lt;code&gt;Input&lt;/code&gt; layer. If set, the layer will not create a placeholder tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22cd35547c75b035a2af139ce2582f8627fc63e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: Tensor or SparseTensor whose name, dtype and shape are used to build the TensorInfo. For SparseTensors, the names of the three constituent Tensors are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740c98ebaa725f89a9565a2525568168cb5ce48a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;Tensor&lt;/code&gt; to convert. Must have rank &lt;code&gt;ragged_rank + 1&lt;/code&gt; or higher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa7420fe9ce1b9be1714f3c35f76a00403b3167" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: The Tensor to be evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04f570f35f1bcc40782c9e9898943db4aa5248d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: The tensor to start from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a12d85fb2f0998ef643ce1304824dd098bf966a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: a Tensor or list of Tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73f0c6e55064a5f4feb2ba92a8795fedf0b3e45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: a string-type Tensor to summarize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b5b48e2b5f1d214c0fbba5ffcb9fb24d243651" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: the Tensor holding the summary data to write or a callable that returns this Tensor. If a callable is passed, it will only be called when a default SummaryWriter exists and the recording condition specified by &lt;code&gt;record_if()&lt;/code&gt; is met.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01aa760c33dbb9f4fc6b12c7e703ce3edcfec459" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: the string Tensor holding one or more serialized &lt;code&gt;Summary&lt;/code&gt; protobufs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1974be185bdd7ac368b297616d73f7e4710a5cef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor&lt;/code&gt;&lt;/b&gt;: the tensor to broadcast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf02670cbfaabe1138fdfaa6aa1ebc1072d3a13a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_array_name&lt;/code&gt;&lt;/b&gt;: (optional) Python string: the name of the TensorArray. This is used when creating the TensorArray handle. If this value is set, handle should be None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea583e72ca732112970c5b2da55da6e203a10a38" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_core_shape&lt;/code&gt;&lt;/b&gt;: If supplied, a list of integers which specifies the intended dense shape to run embedding lookup for this feature on TensorCore. The batch dimension can be left None or -1 to indicate a dynamic shape. Only rank 2 shapes currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6f2d3c7726944e4554ded9cf0342b9e0395105" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_debug_mode&lt;/code&gt;&lt;/b&gt;: Debug mode for tensor values, as a string. The currently supported options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28878e9946eec2637bc10d2fc5da82275893b651" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_dtype&lt;/code&gt;&lt;/b&gt;: Expected data type of &lt;code&gt;inputs&lt;/code&gt; (optional). A value of &lt;code&gt;None&lt;/code&gt; means &quot;infer the input dtype from &lt;code&gt;inputs[0]&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85e61b672627d970c3bdc589f3c793370d3a6f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_dtypes&lt;/code&gt;&lt;/b&gt;: Dump data from only the tensors of which the specified dtypes. This optional argument can be in any of the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97afae2d95c3050ca2f50de2ff1a1e3bcd5d7e8e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_index&lt;/code&gt;&lt;/b&gt;: Tensor index of tensor to get. This value can be gotten from the 'index' field in get_output_details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f429785fee8411fa85446ce43c82a5c805d65ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_index&lt;/code&gt;&lt;/b&gt;: Tensor index of tensor to set. This value can be gotten from the 'index' field in get_input_details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddb1c361fa674db0748bb48e4994eed03d3e121" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_info&lt;/code&gt;&lt;/b&gt;: A TensorInfo proto describing a Tensor or SparseTensor or CompositeTensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279fbdf528d3e394de8460e04410ba69d0206547" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_list&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; objects. Every &lt;code&gt;Tensor&lt;/code&gt; in &lt;code&gt;tensor_list&lt;/code&gt; must have the same size in the first dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9525ebf92bc5f77bdd54b2cc29171e895f399f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_name_in_ckpt&lt;/code&gt;&lt;/b&gt;: Name of the &lt;code&gt;Tensor&lt;/code&gt; in &lt;code&gt;ckpt_to_load_from&lt;/code&gt; from which to restore the column weights. Required if &lt;code&gt;ckpt_to_load_from&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d233cb17d593e59418ec2017add9bca0b64bf95b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensor_size&lt;/code&gt;&lt;/b&gt;: The tensor_shape to resize the input to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f7a49b89274d59f0e689fe119366075ac232e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;dict&lt;/code&gt; that maps string-valued tags to tensors/tensor names, or &lt;code&gt;iterable&lt;/code&gt; of tensors/tensor names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d8de5121c93dc600f52e3a4b716da018c2711a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: A Tensor or a nested list/tuple of Tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c471a5a66463bfc3ae4fe3ecf530c50d1a9d6ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: A dataset element, with each component having the same size in the first dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70621df926b8b7891fe71b3448c57cc0e5b1469" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: A dataset element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736117328e48db7658da7402792d59529e2f9954" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt;s or &lt;code&gt;IndexedSlices&lt;/code&gt;, some entries can be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cbe333d18c0fb3de695446f64ebd6aa15cf716" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: Tensors of input values. Can include &lt;code&gt;None&lt;/code&gt; elements, which will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18100ac27ff9191c54491c80e321f35ed031a00c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: The list or dictionary of tensors to enqueue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bce9beb8f273312d5fdbed558539b7ad5642fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: list of ops to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8013fad584a61084be84526375bb08ddb849f4a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors&lt;/code&gt;&lt;/b&gt;: list of tensors to concatenate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911e81691c2b9a594ea64969f40eb2d900d47322" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tensors_list&lt;/code&gt;&lt;/b&gt;: A list of tuples or dictionaries of tensors to enqueue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d707dca295bbb32d4962bb2a7681e80b67026fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;test_split&lt;/code&gt;&lt;/b&gt;: Fraction of the dataset to be used as test data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88db85f2ee42cc22051aeb63148f3deb453cbc20" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;test_split&lt;/code&gt;&lt;/b&gt;: fraction of the data to reserve as test set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a1b499628fc376d25e97d0091dec548439ec87" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;text&lt;/code&gt;&lt;/b&gt;: str, text to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aaa71bdeb90bb0103538c3a3dbc5f8f6f339268" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tf.DeadlineExceededError&lt;/code&gt;&lt;/b&gt;: if the session is not available after max_wait_secs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3211b41f5939bcdb54abc0cd768905ff18f33043" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tf_random_seed&lt;/code&gt;&lt;/b&gt;: Random seed for TensorFlow initializers. Setting this value allows consistency between reruns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd96d9ac37a99a4c8ca6998886d5dbfc15c2fdf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tf_server_port&lt;/code&gt;&lt;/b&gt;: The port the TensorFlow server is listening on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fbabc17d5c2b237b5e932c74e1e4f79ea2d3d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tf_tensor&lt;/code&gt;&lt;/b&gt;: A Tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d026f7798641dfaf8ec74916f008ba127937d80e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tf_type&lt;/code&gt;&lt;/b&gt;: A tensorflow type (&lt;a href=&quot;../../dtypes#float32&quot;&gt;&lt;code&gt;dtypes.float32&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../dtypes#bool&quot;&gt;&lt;code&gt;dtypes.bool&lt;/code&gt;&lt;/a&gt;, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1497af411a7f0524ce64c1a22b645c819432ed3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tf_type&lt;/code&gt;&lt;/b&gt;: A tensorflow type (&lt;a href=&quot;../dtypes#float32&quot;&gt;&lt;code&gt;dtypes.float32&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../dtypes#bool&quot;&gt;&lt;code&gt;dtypes.bool&lt;/code&gt;&lt;/a&gt;, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5074a1dc9a4ed481c43f7dcdd66ea68d4271d1e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;then_expression&lt;/code&gt;&lt;/b&gt;: either a tensor, or a callable that returns a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdd0435564d2ac44b739d704c8b6e5f7543cbea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;theta&lt;/code&gt;&lt;/b&gt;: Float &amp;gt;= 0. Threshold location of activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32296c3cc4b00a687b364237e59c50a33e948ce5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/b&gt;: A Python thread to join.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416f0b8dd924bf3f74be6f07450efa85e9189ba9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threads&lt;/code&gt;&lt;/b&gt;: List of &lt;code&gt;threading.Threads&lt;/code&gt;. The started threads to join in addition to the registered threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9a6209e5047b7981a7333fe65e8ffeb04cd621" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threads&lt;/code&gt;&lt;/b&gt;: Optional list of threads to join with the coordinator. If &lt;code&gt;None&lt;/code&gt;, defaults to the threads running the standard services, the threads started for &lt;code&gt;QueueRunners&lt;/code&gt;, and the threads started by the &lt;code&gt;loop()&lt;/code&gt; method. To wait on additional threads, pass the list in this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42165f09c1e6bb06414ab56b16f606f4c11d1ac5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresh&lt;/code&gt;&lt;/b&gt;: Deprecated alias for &lt;code&gt;threshold&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2939f3efdcc310b5e14e18cb42ef81873aaa974d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: (Optional) Float representing the threshold for deciding whether prediction values are 1 or 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa3ae256b83cdb90818ba9c48040d28eb6204ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: A 0-D &lt;code&gt;Tensor&lt;/code&gt;. The magnitude threshold that determines if an output value/index pair takes space. Its dtype should match that of the values if they are real; if the latter are complex64/complex128, then the dtype should be float32/float64, correspondingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743f4aa413bd27a7c38ada1703b70b22c1c5a2f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;float&lt;/code&gt; giving the threshold value of the activation function below which values will be damped or set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24663c7d774e5b2113073a4e526ffcda4f3555b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: A scalar threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71973c3b5d3ef8e9af530c54e25f99299e4a9ad6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: An optional 0-D &lt;code&gt;Tensor&lt;/code&gt; (defaults to &lt;code&gt;0&lt;/code&gt;). The magnitude threshold that determines if an output value/index pair takes space. Its dtype should match that of the values if they are real; if the latter are complex64/complex128, then the dtype should be float32/float64, correspondingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723b80f9cbf362d9fbebefe754cbd9cdf6e3699b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: Float. Threshold value for thresholded activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1093a1bd36a6d29cca59f67a85b76e11c038e70a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: Numeric threshold for the given metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b494b5ffd874d8e613ed729e0dca324e068617bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/b&gt;: float. Threshold value for thresholded activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe6e112e89e080c5eb12a76335bb0477fd2afc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) A float value or a python list/tuple of float threshold values in [0, 1]. A threshold is compared with prediction values to determine the truth value of predictions (i.e., above the threshold is &lt;code&gt;true&lt;/code&gt;, below is &lt;code&gt;false&lt;/code&gt;). One metric value is generated for each threshold value. If neither thresholds nor top_k are set, the default is to calculate precision with &lt;code&gt;thresholds=0.5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84c35c3592dff430b67d2d956f830b437142b6e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) A float value or a python list/tuple of float threshold values in [0, 1]. A threshold is compared with prediction values to determine the truth value of predictions (i.e., above the threshold is &lt;code&gt;true&lt;/code&gt;, below is &lt;code&gt;false&lt;/code&gt;). One metric value is generated for each threshold value. If neither thresholds nor top_k are set, the default is to calculate recall with &lt;code&gt;thresholds=0.5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f33df2efdb3a90ef2f99835f94b09be49fd038e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) A list of floating point values to use as the thresholds for discretizing the curve. If set, the &lt;code&gt;num_thresholds&lt;/code&gt; parameter is ignored. Values should be in [0, 1]. Endpoint thresholds equal to {-epsilon, 1+epsilon} for a small positive epsilon value will be automatically included with these to correctly handle predictions equal to exactly 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a950e8dcad5de55ba4622fc1e117b741fc3b37" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to 0.5. A float value or a python list/tuple of float threshold values in [0, 1]. A threshold is compared with prediction values to determine the truth value of predictions (i.e., above the threshold is &lt;code&gt;true&lt;/code&gt;, below is &lt;code&gt;false&lt;/code&gt;). One metric value is generated for each threshold value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a05245cc6019d3cc3801b6cc322985442af1c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: A python list or tuple of float thresholds in &lt;code&gt;[0, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a883c75d3b892b3aae5d36e59a88b014c3ba9a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: An optional list of floating point values to use as the thresholds for discretizing the curve. If set, the &lt;code&gt;num_thresholds&lt;/code&gt; parameter is ignored. Values should be in [0, 1]. Endpoint thresholds equal to {-epsilon, 1+epsilon} for a small positive epsilon value will be automatically included with these to correctly handle predictions equal to exactly 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6593c57ea668aef616d7bd374dde8e76df72cda6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: Iterable of floats in the range &lt;code&gt;(0, 1)&lt;/code&gt;. Accuracy, precision and recall metrics are evaluated for each threshold value. The threshold is applied to the predicted probabilities, i.e. above the threshold is &lt;code&gt;true&lt;/code&gt;, below is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41429d7f3713761c1e6af5018bc2ff90c4d7aa9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/b&gt;: Iterable of floats in the range &lt;code&gt;(0, 1)&lt;/code&gt;. For binary classification metrics such as precision and recall, an eval metric is generated for each threshold value. This threshold is applied to the logistic values to determine the binary classification (i.e., above the threshold is &lt;code&gt;true&lt;/code&gt;, below is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfba293c0ddd7baf7132243b75880018844a007" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;throttle_secs&lt;/code&gt;&lt;/b&gt;: Int. Do not re-evaluate unless the last evaluation was started at least this many seconds ago. Of course, evaluation does not occur if no new checkpoints are available, hence, this is the minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b906840d3e77d3207d3163feba67eba8df77b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;throughput&lt;/code&gt;&lt;/b&gt;: (optional) Throughput (in MB/s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152cfeb6972c76578f85243f85699895bc51fd9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;time_major&lt;/code&gt;&lt;/b&gt;: Boolean. If true, the inputs and outputs will be in shape &lt;code&gt;(timesteps, batch, ...)&lt;/code&gt;, whereas in the False case, it will be &lt;code&gt;(batch, timesteps, ...)&lt;/code&gt;. Using &lt;code&gt;time_major = True&lt;/code&gt; is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5f30af1ef5277600c7c812fcaebc85e98e4334" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;time_major&lt;/code&gt;&lt;/b&gt;: The shape format of the &lt;code&gt;inputs&lt;/code&gt; Tensors. If True, these &lt;code&gt;Tensors&lt;/code&gt; must be shaped &lt;code&gt;[max_time, batch_size, num_classes]&lt;/code&gt;. If False, these &lt;code&gt;Tensors&lt;/code&gt; must be shaped &lt;code&gt;[batch_size, max_time, num_classes]&lt;/code&gt;. Using &lt;code&gt;time_major = True&lt;/code&gt; (default) is a bit more efficient because it avoids transposes at the beginning of the ctc_loss calculation. However, most TensorFlow data is batch-major, so by this function also accepts inputs in batch-major form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b2fc82b9c0b91d173b5e52aebf9a1d5b87b4b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;time_major&lt;/code&gt;&lt;/b&gt;: The shape format of the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; Tensors. If true, these &lt;code&gt;Tensors&lt;/code&gt; must be shaped &lt;code&gt;[max_time, batch_size, depth]&lt;/code&gt;. If false, these &lt;code&gt;Tensors&lt;/code&gt; must be shaped &lt;code&gt;[batch_size, max_time, depth]&lt;/code&gt;. Using &lt;code&gt;time_major = True&lt;/code&gt; is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3919bf567c25126c8925a6e2232610735f8118b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;time_major&lt;/code&gt;&lt;/b&gt;: The shape format of the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; tensors. If True, the inputs and outputs will be in shape &lt;code&gt;(timesteps, batch, ...)&lt;/code&gt;, whereas in the False case, it will be &lt;code&gt;(batch, timesteps, ...)&lt;/code&gt;. Using &lt;code&gt;time_major = True&lt;/code&gt; is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2f36ffbcfd019fa6b968fb600d112a28288f6c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;time_major&lt;/code&gt;&lt;/b&gt;: The shape format of the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; tensors. If True, the inputs and outputs will be in shape &lt;code&gt;[timesteps, batch, feature]&lt;/code&gt;, whereas in the False case, it will be &lt;code&gt;[batch, timesteps, feature]&lt;/code&gt;. Using &lt;code&gt;time_major = True&lt;/code&gt; is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922503a587bd6e90e0615a9e2fdc38cbfe2e5187" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/b&gt;: Float. Sleep for up to that many seconds waiting for should_stop() to become True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e9608520e96f93fb2307b81974e038541c392f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/b&gt;: The maximum number of seconds to wait between checkpoints. If left as &lt;code&gt;None&lt;/code&gt;, then the process will wait indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5f42160ee84f3edaebbbdc7cfb2cf7b8af8c5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/b&gt;: maximum time to wait on &lt;code&gt;thread.join()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9ff2bf2750e3e758b1bcbda5085ec6e959461e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;timeout_fn&lt;/code&gt;&lt;/b&gt;: Optional function to call after a timeout. If the function returns True, then it means that no new checkpoints will be generated and the iterator will exit. The function is called with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98e149bd4f00fb37a1e9e01b587f614a8cc8ed4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;timer_interval_secs&lt;/code&gt;&lt;/b&gt;: Number. Time boundaries at which to call &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3d14294c56a0cf3f7f551885d1a15d96ae4765" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;timer_interval_secs&lt;/code&gt;&lt;/b&gt;: Time boundaries at which to call Run(), or None if it should be called back to back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176fb629ebf3dbfbb1d70656398e7072bf1c14f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;to_file&lt;/code&gt;&lt;/b&gt;: File name of the plot image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b70e8ad7cf99d8190d59cc8fb386f38a737996" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;to_retain&lt;/code&gt;&lt;/b&gt;: A bool vector of length &lt;code&gt;N&lt;/code&gt; with &lt;code&gt;M&lt;/code&gt; true values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d581f72231223091733f5d30f0592f98a3fe8c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tol&lt;/code&gt;&lt;/b&gt;: Threshold below which the singular value is counted as 'zero'. Default value: &lt;code&gt;None&lt;/code&gt; (i.e., &lt;code&gt;eps * max(rows, cols) * max(singular_val)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a0942a2207188f861c07ea212923bdd79acfe4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;top&lt;/code&gt;&lt;/b&gt;: string, a Directory name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0dcee0e3a6cdde1a916777ee5831d831fc76aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;top_k&lt;/code&gt;&lt;/b&gt;: (Optional) Unset by default. An int value specifying the top-k predictions to consider when calculating precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d189f59752a24ea263c3f30829bbe1d82f807f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;top_k&lt;/code&gt;&lt;/b&gt;: (Optional) Unset by default. An int value specifying the top-k predictions to consider when calculating recall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de03d9dad4fb1246831ecff2dafa8edefc043af5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;top_paths&lt;/code&gt;&lt;/b&gt;: An int scalar &amp;gt;= 0, &amp;lt;= beam_width (controls output size).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf79e7d29b3be80f51df1089fabd9394160e002" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;top_paths&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;greedy&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, how many of the most probable paths will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a713f9688bae00cd1732e7ff24d78bff52439038" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;topdown&lt;/code&gt;&lt;/b&gt;: bool, Traverse pre order if True, post order if False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bbc41c87effec9fbb0f896cad6e31335bac56b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;topology&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Topology&lt;/code&gt; object that describes the physical TPU topology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bd124e080998249d9f971449f0fb393a5a9bc1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;total_count&lt;/code&gt;&lt;/b&gt;: Non-negative floating point tensor with shape broadcastable to &lt;code&gt;[N1,..., Nm]&lt;/code&gt; with &lt;code&gt;m &amp;gt;= 0&lt;/code&gt;. Defines this as a batch of &lt;code&gt;N1 x ... x Nm&lt;/code&gt; different Multinomial distributions. Its components should be equal to integer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068a65e397bfcd66297e721fdb54bcb7557f314e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;total_count&lt;/code&gt;&lt;/b&gt;: Non-negative floating point tensor, whose dtype is the same as &lt;code&gt;concentration&lt;/code&gt;. The shape is broadcastable to &lt;code&gt;[N1,..., Nm]&lt;/code&gt; with &lt;code&gt;m &amp;gt;= 0&lt;/code&gt;. Defines this as a batch of &lt;code&gt;N1 x ... x Nm&lt;/code&gt; different Dirichlet multinomial distributions. Its components should be equal to integer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b43e254576746d533692833544c01f043cc1740" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;total_num_replicas&lt;/code&gt;&lt;/b&gt;: Total number of tasks/workers/replicas, could be different from replicas_to_aggregate. If total_num_replicas &amp;gt; replicas_to_aggregate: it is backup_replicas + replicas_to_aggregate. If total_num_replicas &amp;lt; replicas_to_aggregate: Replicas compute multiple batches per update to variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77272f2cbd6ae11068cd16ab40abb0e84fa57bb3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tpu&lt;/code&gt;&lt;/b&gt;: A string corresponding to the TPU to use. If the string is an empty string, the string 'local', or a string that begins with 'grpc://', then it is assumed to not correspond with a Cloud TPU and will instead be passed as the session master and no ClusterSpec propagation will be done. In the future, this may also support a list of strings when multiple Cloud TPUs are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fb2f2a434718f0bbd9016fcc82548de70046e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tpu_cluster_resolver&lt;/code&gt;&lt;/b&gt;: A tf.distribute.cluster_resolver.TPUClusterResolver, which provides information about the TPU cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60216c41f16785326355fc7498f84c0099706e7f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tpu_config&lt;/code&gt;&lt;/b&gt;: the TPUConfig that specifies TPU-specific configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d467709a343ac1bcddaa90bfe7b0265e8aad3b8e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tpu_job_name&lt;/code&gt;&lt;/b&gt;: The name of the TPU job. Typically, this name is auto-inferred within TPUEstimator, however when using ClusterSpec propagation in more esoteric cluster configurations, you may need to specify the job name as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e9ad9dedeeb8dbfa158c30b2ed25f8c9bf9778" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trackable_obj&lt;/code&gt;&lt;/b&gt;: tf.AutoTrackable object associated with &lt;code&gt;funcs&lt;/code&gt;. A reference to this object needs to be maintained so that Variables do not get garbage collected since functions have a weak reference to Variables. This is only required when the tf.AutoTrackable object is not maintained by the user (e.g. &lt;code&gt;from_saved_model&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327a8c3b8935a1881644390c80d493137bd45b95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_batch_size&lt;/code&gt;&lt;/b&gt;: An int representing the global training batch size. TPUEstimator transforms this global batch size to a per-shard batch size, as params['batch_size'], when calling &lt;code&gt;input_fn&lt;/code&gt; and &lt;code&gt;model_fn&lt;/code&gt;. Cannot be &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;use_tpu&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;. Must be divisible by total number of replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12cd839c430e4d96c3dbaf2b4e1e82bf8bd9904" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_distribute&lt;/code&gt;&lt;/b&gt;: An optional instance of &lt;a href=&quot;../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;. If specified, then Estimator will distribute the user's model during training, according to the policy specified by that strategy. Setting &lt;code&gt;experimental_distribute.train_distribute&lt;/code&gt; is preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a993ba283c8a284bebd5751241323b5619ef5d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_in_memory&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;bool&lt;/code&gt;, when true, it assumes the dataset is in memory, i.e., input_fn should return the entire dataset as a single batch, n_batches_per_layer should be set as 1, num_worker_replicas should be 1, and num_ps_replicas should be 0 in &lt;code&gt;tf.Estimator.RunConfig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159c24d068af0ae27792586bd6c9aae133221409" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_op&lt;/code&gt;&lt;/b&gt;: Op for the training step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0501d605de5a8631c3cd401982c04a71729f5c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_op&lt;/code&gt;&lt;/b&gt;: Op or group of ops that trains the model when run. This will not be run automatically when the graph is loaded, instead saved in a SignatureDef accessible through the exported MetaGraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1907db5fbd291bc069393e7722bc5a21963a4d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_op&lt;/code&gt;&lt;/b&gt;: Op or group of opts that trains the model when run. This will not be run automatically when the graph is loaded, instead saved in a SignatureDef accessible through the exported MetaGraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566c5f86da0c10f23dfd6619ccc5cff5dd83387e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_op&lt;/code&gt;&lt;/b&gt;: The op to dequeue a token so the replicas can exit this batch and start the next one. This is executed by each replica.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d3edfbba2a83b6783c47c49ad044491ffe8837" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_op_fn&lt;/code&gt;&lt;/b&gt;: Function that takes a scalar loss &lt;code&gt;Tensor&lt;/code&gt; and returns &lt;code&gt;train_op&lt;/code&gt;. Used if &lt;code&gt;optimizer&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db9c2fb1bf3056919e0bb7e18286d6f04a75727" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_op_fn&lt;/code&gt;&lt;/b&gt;: Function that takes a scalar loss &lt;code&gt;Tensor&lt;/code&gt; and returns an op to optimize the model with the loss in TRAIN mode. Used if &lt;code&gt;optimizer&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;. Exactly one of &lt;code&gt;train_op_fn&lt;/code&gt; and &lt;code&gt;optimizer&lt;/code&gt; must be set in TRAIN mode. By default, it is &lt;code&gt;None&lt;/code&gt; in other modes. If you want to optimize loss yourself, you can pass &lt;code&gt;lambda _: tf.no_op()&lt;/code&gt; and then use &lt;a href=&quot;estimatorspec#loss&quot;&gt;&lt;code&gt;EstimatorSpec.loss&lt;/code&gt;&lt;/a&gt; to compute and apply gradients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056cc957299747277d7daed3cb275705642eb7de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_spec&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;TrainSpec&lt;/code&gt; instance to specify the training specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f8bdbeb6086d8c95ff32fda0a490e0da8115fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;train_step_fn&lt;/code&gt;&lt;/b&gt;: Callable to execute one training step. Called repeatedly as &lt;code&gt;train_step_fn(session, *args **kwargs)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e609683a8eb2a99a5db30d7937b5f3d8262bed2e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, if &lt;code&gt;True&lt;/code&gt; also add variables to the graph collection &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt; (see &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d83c27472be7b2cf1c5751f133b8fc623cf43b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, if &lt;code&gt;True&lt;/code&gt; also add variables to the graph collection &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt; (see tf.Variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0488547a5f9f4b3bbf975ac11b910de0e8689c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, if &lt;code&gt;True&lt;/code&gt; the variables will be marked as trainable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bde6708c535d7de454d208f07c8c9a6c0895f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, if &lt;code&gt;True&lt;/code&gt; the weights of this layer will be marked as trainable (and listed in &lt;code&gt;layer.trainable_weights&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7723d32c6ec47cb59fcd46b34c983124ab59612f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, whether the layer's variables should be trainable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decf6107774d8c0e404ac7e219f9ffb2fc958dd2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, whether the layer's variables will be updated via gradient descent during training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbadc83fcbfe90aea1e90acf0e2b96e5e3ef7de1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Boolean, whether the variable should be part of the layer's &quot;trainable_variables&quot; (e.g. variables, biases) or &quot;non_trainable_variables&quot; (e.g. BatchNorm mean and variance). Note that &lt;code&gt;trainable&lt;/code&gt; cannot be &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;synchronization&lt;/code&gt; is set to &lt;code&gt;ON_READ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52206386a98a18655e5b9c99371f90a10a7790ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt; also add the variable to the graph collection &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt; (see &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0c5b649cdd1c84d359f1e346928683298f2ba2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt; also add the variable to the graph collection &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt; (see &lt;a href=&quot;../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caebc09b88a29ff114d64205dccdacb01ee9458f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, GradientTapes automatically watch uses of this variable. Defaults to &lt;code&gt;True&lt;/code&gt;, unless &lt;code&gt;synchronization&lt;/code&gt; is set to &lt;code&gt;ON_READ&lt;/code&gt;, in which case it defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3695d04648cc83b63bfa7dfb19f8a879fa3d5cbf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, also adds the variable to the graph collection &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt;. This collection is used as the default list of variables to use by the &lt;code&gt;Optimizer&lt;/code&gt; classes. Defaults to &lt;code&gt;True&lt;/code&gt;, unless &lt;code&gt;synchronization&lt;/code&gt; is set to &lt;code&gt;ON_READ&lt;/code&gt;, in which case it defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ecfac4d7fde16f9a26f27b3198728625f79601" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: If True also add all the variables to the graph collection &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0b7dcb16e9bf3e7a9bbc99bcbf61cbb173cfd9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Whether or not the embedding is trainable. Default is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcc9c9a164df421b36e4966acd65d74f314187b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable&lt;/code&gt;&lt;/b&gt;: Whether the layer should be trained (boolean).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4f3e36cacc1c278bd164cf0211719d483bedf4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trainable_variables&lt;/code&gt;&lt;/b&gt;: A list or tuple of &lt;code&gt;Variable&lt;/code&gt; objects to update to minimize &lt;code&gt;loss&lt;/code&gt;. In Tensorflow 1.x, by default these are the list of variables collected in the graph under the key &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt;. As Tensorflow 2.x doesn't have collections and GraphKeys, trainable_variables need to be passed explicitly here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f562eff2ab70d9b6a6bb7cc8083e74ad8c885f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Either a Python boolean, or a TensorFlow boolean scalar tensor (e.g. a placeholder). Whether to return the output in training mode (normalized with statistics of the current batch) or in inference mode (normalized with moving statistics). &lt;strong&gt;NOTE&lt;/strong&gt;: make sure to set this parameter correctly, or else your training/inference will not work properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3288483474480bb093430b8c8013c2fda12862" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Optional scalar tensor (or Python boolean, or Python integer) specifying the learning phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50294c80b028afa27bb2c7d10feeaa8ef99d6c43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode (adding dropout) or in inference mode (doing nothing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e48be944c8e5221bc9bc6309504f43822a4957" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode (adding noise) or in inference mode (doing nothing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6393be05b3c0dec3ab5a3ee8f04743ae05fcbed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d1c10f3cc57afe62929fa172c08df081917fd6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode. Only relevant when &lt;code&gt;dropout&lt;/code&gt; or &lt;code&gt;recurrent_dropout&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6896444532711b20c39efbe27eef08198734cb71" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode. This argument is passed to the cell when calling it. This is for use with cells that use dropout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d426fc5786d8ba73e7f8b34c7bbe242a95269463" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode. This argument is passed to the cell when calling it. This is only relevant if &lt;code&gt;dropout&lt;/code&gt; or &lt;code&gt;recurrent_dropout&lt;/code&gt; are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86e88adc226893ab84c161fbb01f1a152907957" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode. This argument is passed to the cell when calling it. This is only relevant if &lt;code&gt;dropout&lt;/code&gt; or &lt;code&gt;recurrent_dropout&lt;/code&gt; is used (optional, defaults to &lt;code&gt;None&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b260ef9d4c16fb53072d3367881675f354e5f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode. This argument is passed to the cell when calling it. This is only relevant if &lt;code&gt;dropout&lt;/code&gt; or &lt;code&gt;recurrent_dropout&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2764cf2fd20196590035c291df1799f702c26099" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training&lt;/code&gt;&lt;/b&gt;: Python boolean indicating whether the layer should behave in training mode or in inference mode. This argument is passed to the wrapped layer (only if the layer supports this argument).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00366ab78849cbcbdba0d736b3e2a4ba0657c332" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training_chief_hooks&lt;/code&gt;&lt;/b&gt;: Iterable of &lt;code&gt;tf.train.SessionRunHook&lt;/code&gt; objects to run on the chief worker during training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b9987897bed01b84064cf5a23ab49681e2e418" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;training_hooks&lt;/code&gt;&lt;/b&gt;: Iterable of &lt;code&gt;tf.train.SessionRunHook&lt;/code&gt; objects to run on all workers during training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2190a16b98bea944d1f504816a04b1826f2124" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;transformation_func&lt;/code&gt;&lt;/b&gt;: A function that takes one &lt;code&gt;Dataset&lt;/code&gt; argument and returns a &lt;code&gt;Dataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17e886417e78c58a0808e03184edc06d7298c7e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;transpose_a&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1313a36c2b1ac7a15d2d21194c9fd938f844cf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;transpose_a&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is transposed before multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dfd9a01e2e19a6a22d3f7d3973fead215a3ce1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;transpose_b&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7db29a6b765d4a394f4949d57a00e9cffb47368" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;transpose_b&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is transposed before multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064211874a2da1327a89e5cf7c19ea7554b1b477" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;transpose_rhs&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;rhs&lt;/code&gt; is transposed before solving (has no effect if the shape of rhs is [..., M]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fca50d8f35d6e435cb68da20c38ea1f7e95a87" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tree_complexity&lt;/code&gt;&lt;/b&gt;: regularization factor to penalize trees with more leaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d38fe19883155fcc82517cb4655f3292c103e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/b&gt;: Shape &lt;code&gt;[B1,...,Bb, N, N]&lt;/code&gt; with &lt;code&gt;b &amp;gt;= 0&lt;/code&gt;, &lt;code&gt;N &amp;gt;= 0&lt;/code&gt;. The lower triangular part of &lt;code&gt;tril&lt;/code&gt; defines this operator. The strictly upper triangle is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdcf1e03e8c5160494ab7c2b57c0f95ab8ccb4c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;trim_name_regexes&lt;/code&gt;&lt;/b&gt;: list of node name regexes from where to stop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1e457a8c80825ee2a049c79905f4b10ed63678" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;true_classes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int64&lt;/code&gt; and shape &lt;code&gt;[batch_size, num_true]&lt;/code&gt;. The target classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ece4ec998da54561189e0748867fc912c362107" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;true_expected_count&lt;/code&gt;&lt;/b&gt;: A tensor of type &lt;code&gt;float&lt;/code&gt;. Same shape as &lt;code&gt;true_classes&lt;/code&gt;. The expected counts under the sampling distribution of each of &lt;code&gt;true_classes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f60a6a1fe5880a91cb5fbec7ddd662f4abe3e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;true_expected_count&lt;/code&gt;&lt;/b&gt;: A tensor of type &lt;code&gt;float&lt;/code&gt;. Same shape as &lt;code&gt;true_classes&lt;/code&gt;. The expected counts under the sampling distribution of each of &lt;code&gt;true_classes&lt;/code&gt;. All returned values are 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c910bd985b4a2798059fbba010ddcf2e1b82f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;true_fn&lt;/code&gt;&lt;/b&gt;: The callable to be performed if pred is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca32eb7d4861a43f1bcd086e3a3d2504978c48ad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;true_negatives&lt;/code&gt;&lt;/b&gt;: A float &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[len(thresholds)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c29789317d5a0f30eff311f6f27fb0f904e41b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;true_positives&lt;/code&gt;&lt;/b&gt;: A float &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[len(thresholds)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd79ff2131137db2fe91cda8f0c5c1c34032a05" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;truth&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;SparseTensor&lt;/code&gt; containing truth sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cee42a29f5fb6cee9f77e33fff21888fefa224e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;try_recover_truncated&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If true try to recover an image from truncated input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f0f41b53dd4b13fc93ac99a4575e42ed94467e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tuple1&lt;/code&gt;&lt;/b&gt;: The first tuple to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4553d532e6bc3d920cc8b32805732afc1c67040a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tuple2&lt;/code&gt;&lt;/b&gt;: The second tuple to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e313c80053033c3e107ea104d0e54a3224d3876b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;tuples&lt;/code&gt;&lt;/b&gt;: a list of tuples &lt;code&gt;(tensor, value)&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt; should be a Numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a085d1c729def396097efefdbdd8dfa17ba4fceb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;type&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.bfloat16, tf.half, tf.float32, tf.float64, tf.int64, tf.int32, tf.uint8, tf.uint16, tf.uint32, tf.uint64, tf.int8, tf.int16, tf.complex64, tf.complex128, tf.qint8, tf.quint8, tf.qint16, tf.quint16, tf.qint32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa14d7f5a84073057a9dfd152bf9e6965093b69b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;type&lt;/code&gt;&lt;/b&gt;: The DCT type to perform. Must be 1, 2 or 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4f03bddf604e30cc5e73b08cb1d41e2962e461" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;type&lt;/code&gt;&lt;/b&gt;: The IDCT type to perform. Must be 1, 2 or 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81651899ca6adc9508ac71f715a6e5ffffdd396" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;type_enum&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;types_pb2.DataType&lt;/code&gt; enum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c49a1a38d38c3ac6613df560eac04301d2c6e6e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;type_value&lt;/code&gt;&lt;/b&gt;: A value that can be converted to a &lt;a href=&quot;dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; object. This may currently be a &lt;a href=&quot;dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; object, a &lt;a href=&quot;https://www.tensorflow.org/code/tensorflow/core/framework/types.proto&quot;&gt;&lt;code&gt;DataType&lt;/code&gt; enum&lt;/a&gt;, a string type name, or a &lt;code&gt;numpy.dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f02fb5703fbb5dc48d0cc2900474d026a0d4a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;typeobj&lt;/code&gt;&lt;/b&gt;: The data type to call this function on when both values are of the same type in assertEqual().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9ee14ea6db986386f13f869109a0e698d35f28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;types&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;DType&lt;/code&gt; objects. The length of &lt;code&gt;types&lt;/code&gt; must equal the number of tensors in each queue element, except the first priority element. The first tensor in each element is the priority, which must be type int64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6502376b608549266188d58d49187b7cc8f960a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;u&lt;/code&gt;&lt;/b&gt;: Left singular vectors. If &lt;code&gt;full_matrices&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (default) then shape is &lt;code&gt;[..., M, P]&lt;/code&gt;; if &lt;code&gt;full_matrices&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; then shape is &lt;code&gt;[..., M, M]&lt;/code&gt;. Not returned if &lt;code&gt;compute_uv&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6354843959fdae30368121da3bc0ad9eb4e1d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;u&lt;/code&gt;&lt;/b&gt;: Shape &lt;code&gt;[B1,...,Bb, M, K]&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; of same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;base_operator&lt;/code&gt;. This is &lt;code&gt;U&lt;/code&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4509e194132b2bec4914cb3fe781eede4738274" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unconnected_gradients&lt;/code&gt;&lt;/b&gt;: A value which can either hold 'none' or 'zero' and alters the value which will be returned if no JVP was computed for &lt;code&gt;primals&lt;/code&gt;. The possible values and effects are detailed in 'tf.UnconnectedGradients' and it defaults to 'none'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e30ffd1fc280871951d536191a6fca85db122c1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unconnected_gradients&lt;/code&gt;&lt;/b&gt;: Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class &lt;a href=&quot;../../unconnectedgradients&quot;&gt;&lt;code&gt;tf.UnconnectedGradients&lt;/code&gt;&lt;/a&gt; and the default value is &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90aa7634d756ea51b03930756cbb7c8b08c9d60d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unconnected_gradients&lt;/code&gt;&lt;/b&gt;: Optional. Specifies the gradient value returned when the given input tensors are unconnected. Accepted values are constants defined in the class &lt;a href=&quot;unconnectedgradients&quot;&gt;&lt;code&gt;tf.UnconnectedGradients&lt;/code&gt;&lt;/a&gt; and the default value is &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ec9f1e752fe27773fd96a35ef4e0d66a0c0942" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unconnected_gradients&lt;/code&gt;&lt;/b&gt;: a value which can either hold 'none' or 'zero' and alters the value which will be returned if the target and sources are unconnected. The possible values and effects are detailed in 'UnconnectedGradients' and it defaults to 'none'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99cc1abac407fcbb3fe372e91fe43b6fe604118" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unexpected_end&lt;/code&gt;&lt;/b&gt;: str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec25d5923398ed82b387c4290afd78d4b03d229" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unexpected_start&lt;/code&gt;&lt;/b&gt;: str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a19a7aaac4739bbdbd40e77383ec47e415903ad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;uniform_noise&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. indicates if the noise should be generated using a uniform distribution or a Gaussian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024e8929c70c7b9455a66ef418c6f5cee3232683" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;uniform_row_length&lt;/code&gt;&lt;/b&gt;: A scalar integer tensor. Must be nonnegative. The size of the outer axis of &lt;code&gt;values&lt;/code&gt; must be evenly divisible by &lt;code&gt;uniform_row_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f75dbdeda0badc621c1534212a13914868d058" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;uniform_row_length&lt;/code&gt;&lt;/b&gt;: A scalar tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1804b97f95af38e5f2e18feeb8d05e91cd3ec1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unigrams&lt;/code&gt;&lt;/b&gt;: A list of unigram counts or probabilities, one per ID in sequential order. Exactly one of &lt;code&gt;vocab_file&lt;/code&gt; and &lt;code&gt;unigrams&lt;/code&gt; should be passed to this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552087870f15dc02b82bd4333bd9b0b8bd45a8e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/b&gt;: (optional) Unique label indices as computed by ctc_unique_labels(labels). If supplied, enable a faster, memory efficient implementation on TPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997b0ee77251c5ac1ba2708c401a56bd62622be0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;bool&lt;/code&gt;. Determines whether all sampled classes in a batch are unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232bb2950d6004a6f2c89b390f332bab1095109f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;bool&lt;/code&gt;. Ignored. unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41acd96ea7a794dc321ea792b4864f6b95b1e10f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unique_function_id&lt;/code&gt;&lt;/b&gt;: UUID of function that this tracks arguments for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed7edcbd01615fd80c399a333796317d59e1d1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unique_name_&lt;/code&gt;&lt;/b&gt;: When used, it overrides name_ and is not made unique. If a template of the same scope/unique_name already exists and reuse is false, an error is raised. Defaults to None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bc8ad4c7ccc937a3a98b2d9bae9e296d3bad1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt; from: &lt;code&gt;&quot;BYTE&quot;, &quot;UTF8_CHAR&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;BYTE&quot;&lt;/code&gt;. The unit that is counted to compute string length. One of: &lt;code&gt;&quot;BYTE&quot;&lt;/code&gt; (for the number of bytes in each string) or &lt;code&gt;&quot;UTF8_CHAR&quot;&lt;/code&gt; (for the number of UTF-8 encoded Unicode code points in each string). Results are undefined if &lt;code&gt;unit=UTF8_CHAR&lt;/code&gt; and the &lt;code&gt;input&lt;/code&gt; strings do not contain structurally valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d7a308ed9ab629c236043cfdfa060c930e3d7a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt; from: &lt;code&gt;&quot;BYTE&quot;, &quot;UTF8_CHAR&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;BYTE&quot;&lt;/code&gt;. The unit that is used to create the substring. One of: &lt;code&gt;&quot;BYTE&quot;&lt;/code&gt; (for defining position and length by bytes) or &lt;code&gt;&quot;UTF8_CHAR&quot;&lt;/code&gt; (for the UTF-8 encoded Unicode code points). The default is &lt;code&gt;&quot;BYTE&quot;&lt;/code&gt;. Results are undefined if &lt;code&gt;unit=UTF8_CHAR&lt;/code&gt; and the &lt;code&gt;input&lt;/code&gt; strings do not contain structurally valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bfe3996bceeb9ef29e851ff4a3ce5ffa7a39e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit_forget_bias&lt;/code&gt;&lt;/b&gt;: Boolean (default &lt;code&gt;True&lt;/code&gt;). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force &lt;code&gt;bias_initializer=&quot;zeros&quot;&lt;/code&gt;. This is recommended in &lt;a href=&quot;http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf&quot;&gt;Jozefowicz et al.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84803d823458159b78588583fc91ec437a22b31" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit_forget_bias&lt;/code&gt;&lt;/b&gt;: Boolean (default &lt;code&gt;True&lt;/code&gt;). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force &lt;code&gt;bias_initializer=&quot;zeros&quot;&lt;/code&gt;. This is recommended in &lt;a href=&quot;http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf&quot;&gt;Jozefowicz et al.&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfd805d23dd4fc5c846ab3744bf516fa2abe88f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit_forget_bias&lt;/code&gt;&lt;/b&gt;: Boolean. If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force &lt;code&gt;bias_initializer=&quot;zeros&quot;&lt;/code&gt;. This is recommended in &lt;a href=&quot;http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf&quot;&gt;Jozefowicz et al.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa086c53c4099a11f7bfa62935bbec187c7f3509" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit_forget_bias&lt;/code&gt;&lt;/b&gt;: Boolean. If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force &lt;code&gt;bias_initializer=&quot;zeros&quot;&lt;/code&gt;. This is recommended in &lt;a href=&quot;http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf&quot;&gt;Jozefowicz et al.&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a2b9c59f7e940e7d97ea4c1dc2f8b69acf2b84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit_forget_bias&lt;/code&gt;&lt;/b&gt;: Boolean. If True, add 1 to the bias of the forget gate at initialization. Use in combination with &lt;code&gt;bias_initializer=&quot;zeros&quot;&lt;/code&gt;. This is recommended in &lt;a href=&quot;http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf&quot;&gt;Jozefowicz et al.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec7c233f238eb12b010076df3235afb74f27189" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unit_name&lt;/code&gt;&lt;/b&gt;: Display name for step counts (usually &quot;step&quot; or &quot;sample&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882176e69f1842487c48f35f0afd3f5cb7c32866" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: An int indicating the dimension of the logit layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a682cbb5d80e41167283462f924206df8623c7d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: An int indicating the dimension of the logit layer. In the MultiHead case, this should be the sum of all component Heads' logit dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49ab8491f5d6fd6f70e1cb46b58d59474a666e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: An integer, dimensionality of the output space. Default value is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b0e24b91ed38ce6b8c09588f06bd040cf4a8ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: Integer or Long, dimensionality of the output space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e529e62c5eaff9e07f62a61e43124dfeedf58cd2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: Iterable of integer number of hidden units per RNN layer. If set, &lt;code&gt;cell_type&lt;/code&gt; must also be specified and &lt;code&gt;rnn_cell_fn&lt;/code&gt; must be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d7a74255d639d02eb452420d8a56bd6364e3ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: Positive integer, dimensionality of the output space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f17af1fb17b8bf062c8d4e240c2094c591b9ec3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: Positive integer, output dimension without the batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb0e9e6dfee5e23f428b23415f6a94c47648edb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;units&lt;/code&gt;&lt;/b&gt;: Python integer, dimensionality of the output space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3230425276803e8818a11b4ab1ff89505c20ab5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unroll&lt;/code&gt;&lt;/b&gt;: Boolean (default &lt;code&gt;False&lt;/code&gt;). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d0a7d78d56a7003bc5082ac79204b60e985417" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unroll&lt;/code&gt;&lt;/b&gt;: Boolean (default False). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d43180e1e30018d5b047e355ed0d055310407b3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;unroll&lt;/code&gt;&lt;/b&gt;: Whether to unroll the RNN or to use a symbolic &lt;code&gt;while_loop&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690c39b7a8a2ba42f3710c80b07869a5aaa61ffa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;untar&lt;/code&gt;&lt;/b&gt;: Deprecated in favor of 'extract'. boolean, whether the file should be decompressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffb15412ce24d1c66a60fff2bdf88197cb90c9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Operation&lt;/code&gt; that increments variables appropriately, and whose value matches &lt;code&gt;metric&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fcf3655242a5f10eff5f45bd16e2eb04e0fa23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_freq&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;'batch'&lt;/code&gt; or &lt;code&gt;'epoch'&lt;/code&gt; or integer. When using &lt;code&gt;'batch'&lt;/code&gt;, writes the losses and metrics to TensorBoard after each batch. The same applies for &lt;code&gt;'epoch'&lt;/code&gt;. If using an integer, let's say &lt;code&gt;1000&lt;/code&gt;, the callback will write the metrics and losses to TensorBoard every 1000 batches. Note that writing too frequently to TensorBoard can slow down your training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4279ba8be86d4c3537b680134d3445e0a811680c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_freq&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;'batch'&lt;/code&gt; or &lt;code&gt;'epoch'&lt;/code&gt; or integer. When using &lt;code&gt;'batch'&lt;/code&gt;, writes the losses and metrics to TensorBoard after each batch. The same applies for &lt;code&gt;'epoch'&lt;/code&gt;. If using an integer, let's say &lt;code&gt;1000&lt;/code&gt;, the callback will write the metrics and losses to TensorBoard every 1000 samples. Note that writing too frequently to TensorBoard can slow down your training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfc4857f1b650efd24fc8def4f6f02dc59bf9a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Operation&lt;/code&gt; that increments &lt;code&gt;true_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;recall&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e89830ee50b750539f1c85e5efc1c1711e076" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Operation&lt;/code&gt; that increments &lt;code&gt;true_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables appropriately, and whose value matches &lt;code&gt;recall&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da185b518c75b98504f976adb245f463822c0e78" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Operation&lt;/code&gt; that increments &lt;code&gt;true_positives&lt;/code&gt; and &lt;code&gt;false_positives&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;precision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bab34920e4053b0f0dda01857eb110cd583095" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Operation&lt;/code&gt; that increments &lt;code&gt;true_positives&lt;/code&gt; and &lt;code&gt;false_positives&lt;/code&gt; variables appropriately, and whose value matches &lt;code&gt;precision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb31e57bd616d82f71e751d2f83ff2e484569de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that accumulates the error from a batch of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27938be5bdcc25ab2e1687c631c281e78f855b15" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;accuracy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24163d410169a1b5060d80857eaad23443ed2ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;mean_absolute_error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40beee55ac06e549097e56e41e3839d3d0877457" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;mean_relative_error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01365fd2ca9edcac9204e18dd051dfdc3411587b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;mean_squared_error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b722e0a3280c451c059476834069b82e2ad7c596" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;mean_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c330f7d7622e932b0b9f979ddaf9d2bd720d925" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;root_mean_squared_error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b5aff62b3bc8751b19358b8cd19d1b33ac3be7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; variables appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e363ae808f74420996d05a2fac15a346f189149d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;true_positives&lt;/code&gt;, &lt;code&gt;true_negatives&lt;/code&gt;, &lt;code&gt;false_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;auc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73ef36798f734322f6b1be3486060f71fd02354" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;true_positives&lt;/code&gt;, &lt;code&gt;true_negatives&lt;/code&gt;, &lt;code&gt;false_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;sensitivity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08146c909c6f9f4b95e3c69a914213f5a6c172a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;true_positives&lt;/code&gt;, &lt;code&gt;true_negatives&lt;/code&gt;, &lt;code&gt;false_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables appropriately and whose value matches &lt;code&gt;specificity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f470c74283be61d5fc08d0a2993ca39e338223c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;true_positives&lt;/code&gt;, &lt;code&gt;true_negatives&lt;/code&gt;, &lt;code&gt;false_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables that are used in the computation of &lt;code&gt;precision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2565c10881609061da846a3e9e02a648b6fbde" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the &lt;code&gt;true_positives&lt;/code&gt;, &lt;code&gt;true_negatives&lt;/code&gt;, &lt;code&gt;false_positives&lt;/code&gt; and &lt;code&gt;false_negatives&lt;/code&gt; variables that are used in the computation of &lt;code&gt;recall&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aeb9a2bd47dd13e7bdb88a8eb51467690ce9cf4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that increments the confusion matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece13c3f8a84864e7c3b1ee0aca95829ff4893ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that updates the &lt;code&gt;false_negatives&lt;/code&gt; variable and returns its current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2974fd4e74c429d8ec7e4541ec5aca71b1bd23bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that updates the &lt;code&gt;false_positives&lt;/code&gt; variable and returns its current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cc0bd4daff12985ac236fb2cac4b16d15864fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that updates the &lt;code&gt;true_negatives&lt;/code&gt; variable and returns its current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42130cb232a6142d431e418a3a34e14fec38306" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that updates the &lt;code&gt;true_positives&lt;/code&gt; variable and returns its current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823b5788e62c905fb8b269616565ccafc696bb53" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: An operation that updates the accuracy tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad11c30b51b0b0ec6b83436222d7243a027d03e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_op&lt;/code&gt;&lt;/b&gt;: In eager mode, None. In graph mode, an op to update the loss scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fba2c76caa3b757b171f94b10c62cd0fe99ad5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;update_ops&lt;/code&gt;&lt;/b&gt;: A list or tuple of update ops to be run at training time. For example, layers such as BatchNormalization create mean and variance update ops that need to be run at training time. In Tensorflow 1.x, these are thrown into an UPDATE_OPS collection. As Tensorflow 2.x doesn't have collections, update_ops need to be passed explicitly here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783472a89d4e3a45b072ea0cd819a54f1c5ea889" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A Tensor. Must have the same type as ref. A tensor of updated values to add to ref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2652c5ec082138b2866b500f85c11e6076950799" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A tensor of updated values to add to ref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30bef4e933a88888c666fb0c9f58f0b100be38d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A tensor of updated values to multiply to &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1585e9cfe4b436030b74cac5b09e352ab6e7d20c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A tensor of updated values to reduce into &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6ec9f8c8d19fbedda68677b91ecb6ee876513c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A tensor of updated values to store in &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcece273d63f8626d3d1c6afe258ad9c47f2bef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A tensor of updated values to subtract from &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4299ba8056a14c67ccd7134e8a33458ba0e0e0e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;ref&lt;/code&gt;. A tensor of values that &lt;code&gt;ref&lt;/code&gt; is divided by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583e1378d92dbb41e686d8a0701bf2468e7a1ce0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;tensor&lt;/code&gt;. Updates to scatter into output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bfb7ecde5cbf7f87f8ab69ee62073529ac154d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Updates to scatter into output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ca5d8055d5eb47a6eb0545ffaf348cab636343" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: List of update ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2749f9cf31f2ba505cbbc616a712bdea7ec15e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: Tensor of updates to apply to &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedf8965fe748577d46f34c716dfa2e5453bc9bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: The values to be used in the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f632761ce3ad248fa1bc1cc6d59fe0c342338b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates&lt;/code&gt;&lt;/b&gt;: Update op, or list/tuple of update ops, or zero-arg callable that returns an update op. A zero-arg callable should be passed in order to disable running the updates by setting &lt;code&gt;trainable=False&lt;/code&gt; on this Layer, when executing in Eager mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801695e34b927c3f9cc72521a77b6fd2d5c92716" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections &lt;code&gt;update_op&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02643aa9fbf522821a2ae63332f52e9f7549016" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;update_op&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5315b78392fe57331318a9f97724daa4667d04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that the metric update ops should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a00ab3e2eb289551d1f92a8939c2c01e2392d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;updates_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that updates should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251edb37b1fe38ed188db92615de0750b6a969ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper&lt;/code&gt;&lt;/b&gt;: float. Upper bound for the random contrast factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d12502c25f1da12c9446fe1280f18b63e2e1a6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper&lt;/code&gt;&lt;/b&gt;: float. Upper bound for the random saturation factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50551abd1d096c6d240fe603c39957ef6fa746de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/b&gt;: float, max value of the flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1429b25d541ff05833b038493fafbc01afdb2c5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/b&gt;: float, max values of the flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94312d678c5496004d206dd4f4703dfbcfef51cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/b&gt;: int, max value of the flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113838592efbc0807b17a663489711849b27a5a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/b&gt;: int, max values of the flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24afecb02be3acbcac69d7dcb013d145f4dcd6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/b&gt;: upper bound of the range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66294e962d563a25ffa22e7dd63a05a6aedf90e6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;upper_edge_hertz&lt;/code&gt;&lt;/b&gt;: Python float. The desired top edge of the highest frequency band.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe3042c6cf0112f53e09b131571718b039276ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_bias&lt;/code&gt;&lt;/b&gt;: Boolean (default &lt;code&gt;True&lt;/code&gt;), whether the layer uses a bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511cf0e999f313a99ae438baac86917b3e87e5d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_bias&lt;/code&gt;&lt;/b&gt;: Boolean, (default &lt;code&gt;True&lt;/code&gt;), whether the layer uses a bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb71ef1d8ed572236b942d31ce2c653ef3d2c4c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_bias&lt;/code&gt;&lt;/b&gt;: Boolean, whether the layer uses a bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec6a5be50f6dbfe16cc5821b117a1d88d8c7768" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_bias&lt;/code&gt;&lt;/b&gt;: Boolean, whether the layer uses a bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735de9f717df03d6d027c1ec3f0a06aa2b9b6c9f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_bias&lt;/code&gt;&lt;/b&gt;: whether to calculate the bias/intercept for this model. If set to False, no bias/intercept will be used in calculations, e.g., the data is already centered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870897f4322aea708a300af1247cc86980fb8f68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_cudnn_on_gpu&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f2dd05f31082361b8a2980e05012e9fb614182" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_gpu&lt;/code&gt;&lt;/b&gt;: If True, attempt to run as many ops as possible on GPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65eab935620c2e69ecba46b18b938b706fdbd78c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_gradient_accumulation&lt;/code&gt;&lt;/b&gt;: setting this to &lt;code&gt;False&lt;/code&gt; makes embedding gradients calculation less accurate but faster. Please see &lt;code&gt;optimization_parameters.proto&lt;/code&gt; for details. for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2dc67770e1d1109292818a5f00b8d3b5423b92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_image_if_no_bounding_boxes&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. Controls behavior if no bounding boxes supplied. If true, assume an implicit bounding box covering the whole input. If false, raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041922f3f1e5a58b08c1f4d0e668510587a77f86" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. An optional bool. Defaults to True. If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd63e3c38e6a1527ad208abb57effbe2f97c232" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If True, the addition will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025a38155fdd840dca94f171f0c77b8e828e789e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356740aa69b7b8e70905b0d6a0346e0721b51094" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If True, the operation will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849ddf30817a889d3e4062b48f88c7a9c8c0b394" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If True, the subtraction will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fb54296383b8b393bf655bbd29b2ffdc3760f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If True, the update will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d91392e5d12e022f5c2396aad80c380256ab252" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. An optional bool. Defaults to True. If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3600439663d815c26b70431bbb088d3b1792fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. If True, the assignment will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2147ef6ef32147ab3071eb3deea66134f9f99023" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: Bool. If True apply use locks to prevent concurrent updates to variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70c3b002d86bcfc5f6f6b113c3cb27d7b2b6110" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: Boolean indicating whether to lock the writing operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd67354dea9c2bfe3dc19a29c35cd1da378a0733" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt; use locks for update operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e4de95360f60f84405627289650924298f4708" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, use locking during the assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8db7569369cdf15756fe9d4d1b883f84352657" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, use locking during the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1939176ca806977bcbb3af5f8afb1bc8276b58" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: If True use locks for update operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de7a8db4561ba292ef2e86e247ded9608437a41" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_locking&lt;/code&gt;&lt;/b&gt;: If True use locks for update operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4d783beb3ec558f4d2138763dabf742b92ea93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_mini_batch&lt;/code&gt;&lt;/b&gt;: A boolean specifying whether to use the mini-batch k-means algorithm. See explanation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d195eee1c13f4515b6294270cc00c43008002dc0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_multiprocessing&lt;/code&gt;&lt;/b&gt;: Boolean. Used for generator or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; input only. If &lt;code&gt;True&lt;/code&gt;, use process-based threading. If unspecified, &lt;code&gt;use_multiprocessing&lt;/code&gt; will default to &lt;code&gt;False&lt;/code&gt;. Note that because this implementation relies on multiprocessing, you should not pass non-picklable arguments to the generator as they can't be passed easily to children processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5b0139734ba954ba6d10043ccaef04445c54a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_multiprocessing&lt;/code&gt;&lt;/b&gt;: Boolean. Used for generator or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; input only. If &lt;code&gt;True&lt;/code&gt;, use process-based threading. If unspecified, &lt;code&gt;use_multiprocessing&lt;/code&gt; will default to &lt;code&gt;False&lt;/code&gt;. Note that because this implementation relies on multiprocessing, you should not pass non-picklable arguments to the generator as they can't be passed easily to children processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6619562629e1c6db373b72c9400fc049fc323e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_multiprocessing&lt;/code&gt;&lt;/b&gt;: use multiprocessing if True, otherwise threading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecbbed008358b8b085de81191a3aa8da433c1d7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_nesterov&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt; use Nesterov Momentum. See &lt;a href=&quot;http://jmlr.org/proceedings/papers/v28/sutskever13.pdf&quot;&gt;Sutskever et al., 2013&lt;/a&gt;. This implementation always computes gradients at the value of the variable(s) passed to the optimizer. Using Nesterov Momentum makes the variable(s) track the values called &lt;code&gt;theta_t + mu*v_t&lt;/code&gt; in the paper. This implementation is an approximation of the original formula, valid for high values of momentum. It will compute the &quot;adjusted gradient&quot; in NAG by assuming that the new gradient will be estimated by the current average gradient plus the product of momentum and the change in the average gradient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8551b4d0280e8fd25a21ce78c29bd4f7d03cd7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_norm&lt;/code&gt;&lt;/b&gt;: A 0-D (scalar) &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt; (optional). The global norm to use. If not provided, &lt;code&gt;global_norm()&lt;/code&gt; is used to compute the norm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac04a975c2604b4973c6fe757dc044be83d721b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_peepholes&lt;/code&gt;&lt;/b&gt;: bool, set True to enable diagonal/peephole connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4691df823db71931e0d4fe5c4efe43e85927cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_quote_delim&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#bool&quot;&gt;&lt;code&gt;tf.bool&lt;/code&gt;&lt;/a&gt; scalar. If &lt;code&gt;False&lt;/code&gt;, treats double quotation marks as regular characters inside of string fields (ignoring RFC 4180, Section 2, Bullet 5). Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f252a331f224a95a89b8b4c917466668bc0006" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_quote_delim&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#bool&quot;&gt;&lt;code&gt;tf.bool&lt;/code&gt;&lt;/a&gt; scalar. If &lt;code&gt;False&lt;/code&gt;, treats double quotation marks as regular characters inside of string fields (ignoring RFC 4180, Section 2, Bullet 5). Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b896098a6b452db33076fb68b5b517db54cc6e59" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_quote_delim&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. If false, treats double quotation marks as regular characters inside of the string fields (ignoring RFC 4180, Section 2, Bullet 5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e950abd5040f6363f8a42e6ae4ffce210f7f4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_quote_delim&lt;/code&gt;&lt;/b&gt;: An optional bool. Defaults to &lt;code&gt;True&lt;/code&gt;. If false, treats double quotation marks as regular characters inside of the string fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef319293d0b0c9f324a8a66cf17e0b8f62159889" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_resource&lt;/code&gt;&lt;/b&gt;: If False, all variables will be regular Variables. If True, experimental ResourceVariables with well-defined semantics will be used instead. Defaults to False (will later change to True). When eager execution is enabled this argument is always forced to be True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc284dfe140ba86df373a33f6785a236e38d7542" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_resource&lt;/code&gt;&lt;/b&gt;: If False, creates a regular Variable. If true, creates an experimental ResourceVariable instead with well-defined semantics. Defaults to False (will later change to True). When eager execution is enabled this argument is always forced to be True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc5deaa662dd2b2c064b61ed16a926556eabd5a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_resource&lt;/code&gt;&lt;/b&gt;: Whether to use &lt;code&gt;ResourceVariable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee5c2054a2072f36f06438007e527f7aa6d83c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_resource&lt;/code&gt;&lt;/b&gt;: if False, create a normal Variable; if True create an experimental ResourceVariable with well-defined semantics. Defaults to False (will later change to True). When eager execution is enabled this argument is always forced to be True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cc1b36fbda81e0249c28caaf25c60643857d27" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_resource&lt;/code&gt;&lt;/b&gt;: whether to use resource variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f3951bff29a30fff61fc4d7353bd0fc8c704e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_scale&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, will create a scalar variable to scale the attention scores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147d7e4a8010185c3e2080c33f493018153b46c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_scale&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, will create a variable to scale the attention scores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a04b6072a8cde312cf6bbeeeb14de5c0be269d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_sigkill&lt;/code&gt;&lt;/b&gt;: Boolean of whether or not to perform a cleanup pass using SIGKILL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832fa7ac38204710cbc4ec7a3e00d0b8cb8a3463" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;use_tpu&lt;/code&gt;&lt;/b&gt;: A bool indicating whether TPU support is enabled. Currently, - TPU training and evaluation respect this bit, but eval_on_tpu can override execution of eval. See below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233831baf4d88239419ab0e33a7ddc695a181fea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: A 1D variance Tensor with size matching the last dimension of t. This is the second output from tf.nn.moments, or a saved moving average thereof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454bf858de25a13af34d3ca01a030165ae919161" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76340c17383dc39ae6a9b66a4ae94c29053eea3a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1405129581670b3e6949b83585156a7d3358de5f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: A variable allocated within the scope of this &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d080b8ffdbbc5cbae0ece8dff8879433f2e1ddb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: Eigenvectors. Shape is &lt;code&gt;[..., N, N]&lt;/code&gt;. The columns of the inner most matrices contain eigenvectors of the corresponding matrices in &lt;code&gt;tensor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad744e5dd796bc47d4cdb218164fd8bf19868554" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; of same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;u&lt;/code&gt; and shape &lt;code&gt;[B1,...,Bb, N, K]&lt;/code&gt; Defaults to &lt;code&gt;v = u&lt;/code&gt;, in which case the perturbation is symmetric. If &lt;code&gt;M != N&lt;/code&gt;, then &lt;code&gt;v&lt;/code&gt; must be set since the perturbation is not square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dbfc3fee6b1d022724ded877c1c2af55982d8b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;v&lt;/code&gt;&lt;/b&gt;: Right singular vectors. If &lt;code&gt;full_matrices&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (default) then shape is &lt;code&gt;[..., N, P]&lt;/code&gt;. If &lt;code&gt;full_matrices&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; then shape is &lt;code&gt;[..., N, N]&lt;/code&gt;. Not returned if &lt;code&gt;compute_uv&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec00c8d8db54959f8d92958ced08de94da8b698" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;valid_outputs&lt;/code&gt;&lt;/b&gt;: A scalar integer &lt;code&gt;Tensor&lt;/code&gt; denoting how many elements in &lt;code&gt;selected_indices&lt;/code&gt; are valid. Valid elements occur first, then padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef6f595e4b5bcba5f076e35ac4c0b2ea930cdd3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/b&gt;: (Optional.) Boolean indicating whether or not to validate that the input values form a valid RaggedTensor. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb60f3ffee9c52ac572e0433433c15db4e96332" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/b&gt;: If true, then use assertions to check that the arguments form a valid &lt;code&gt;RaggedTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddd5a3772f73b19ade49de2da91032d27ce94eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_args&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt; indicating whether arguments should be checked for correctness. Default value: &lt;code&gt;False&lt;/code&gt; (i.e., don't validate arguments).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d8038adb86d3b044bce7dad90830ba84677f95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_args&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt; indicating whether arguments should be checked for correctness. Note: this function does not verify the implied matrix is actually invertible, even when &lt;code&gt;validate_args=True&lt;/code&gt;. Default value: &lt;code&gt;False&lt;/code&gt; (i.e., don't validate arguments).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda72b29dfca5126dce37f8f308812eb133f5081" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_args&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;, default &lt;code&gt;False&lt;/code&gt;. When &lt;code&gt;True&lt;/code&gt; distribution parameters are checked for validity despite possibly degrading runtime performance. When &lt;code&gt;False&lt;/code&gt; invalid inputs may silently render incorrect outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52830299d5480a2320e677f6094b0829ddf5f261" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_args&lt;/code&gt;&lt;/b&gt;: When &lt;code&gt;True&lt;/code&gt;, additional assertions might be embedded in the graph. Default value: &lt;code&gt;False&lt;/code&gt; (i.e., no graph assertions are added).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bd3fb8321d61cbf48f6b98cf40f965001343b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_indices&lt;/code&gt;&lt;/b&gt;: A boolean value. If &lt;code&gt;True&lt;/code&gt;, indices are checked to make sure they are sorted in lexicographic order and that there are no repeats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4ae471d98073bf7b8d04bef61fdce3ee880cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_indices&lt;/code&gt;&lt;/b&gt;: A boolean value. If True, indices are checked to make sure they are sorted in lexicographic order and that there are no repeats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae58f066ae06875a506bf2b1088e57c67d02dc8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_indices&lt;/code&gt;&lt;/b&gt;: DEPRECATED. If this operation is assigned to CPU, values in &lt;code&gt;indices&lt;/code&gt; are always validated to be within range. If assigned to GPU, out-of-bound indices result in safe but unspecified behavior, which may include raising an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badb1a1370e8e783585dae235cceaa836d8b820f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_indices&lt;/code&gt;&lt;/b&gt;: Deprecated, does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e41ad2c98bf2139b4b80ddf8415c536db15eefd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_indices&lt;/code&gt;&lt;/b&gt;: Whether to validate the order and range of sparse indices in &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f9e2af19f3d330c0b4af241a9c798551d7deed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_indices&lt;/code&gt;&lt;/b&gt;: Whether to validate the order and range of sparse indices in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf65e6c6894d12de6f7a92921e8ee3bcc2d59f28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_shape&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. If true, the operation will validate that the shape of 'value' matches the shape of the Tensor being assigned to. If false, 'ref' will take on the shape of 'value'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9137f8b23376a8d8d753cb552a40d82b490f8fa8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_shape&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;False&lt;/code&gt;, allows the variable to be initialized with a value of unknown shape. If &lt;code&gt;True&lt;/code&gt;, the default, the shape of &lt;code&gt;initial_value&lt;/code&gt; must be known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8509492b5ae8fd58fc71e6e27f68cd36a2f7bb0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validate_shape&lt;/code&gt;&lt;/b&gt;: If False, allows the variable to be initialized with a value of unknown shape. If True, the default, the shape of initial_value must be known. For this to be used the initializer must be a Tensor and not an initializer object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c67ddf3d095a7564495e8577f2526663bbf896" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_data&lt;/code&gt;&lt;/b&gt;: Data on which to evaluate the loss and any model metrics at the end of each epoch. The model will not be trained on this data. &lt;code&gt;validation_data&lt;/code&gt; will override &lt;code&gt;validation_split&lt;/code&gt;. &lt;code&gt;validation_data&lt;/code&gt; could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b792e2d7c46576add93ad320f211bcba2e19d01" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_data&lt;/code&gt;&lt;/b&gt;: Deprecated. Do not use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c997a1b670ce50e0fce22011f27c5e8ecc2b609" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_freq&lt;/code&gt;&lt;/b&gt;: Only relevant if validation data is provided. Integer or &lt;code&gt;collections_abc.Container&lt;/code&gt; instance (e.g. list, tuple, etc.). If an integer, specifies how many training epochs to run before a new validation run is performed, e.g. &lt;code&gt;validation_freq=2&lt;/code&gt; runs validation every 2 epochs. If a Container, specifies the epochs on which to run validation, e.g. &lt;code&gt;validation_freq=[1, 2, 10]&lt;/code&gt; runs validation at the end of the 1st, 2nd, and 10th epochs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d50b3d4e4c6650c082ed3e9c5fecaf0061c8c9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_split&lt;/code&gt;&lt;/b&gt;: Float between 0 and 1. Fraction of the training data to be used as validation data. The model will set apart this fraction of the training data, will not train on it, and will evaluate the loss and any model metrics on this data at the end of each epoch. The validation data is selected from the last samples in the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; data provided, before shuffling. This argument is not supported when &lt;code&gt;x&lt;/code&gt; is a dataset, generator or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decbb26368c4e3fe78c3cb87eac7aaad373db185" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_split&lt;/code&gt;&lt;/b&gt;: Float between 0 and 1. Fraction of the training data to be used as validation data. The model will set apart this fraction of the training data, will not train on it, and will evaluate the loss and any model metrics on this data at the end of each epoch. The validation data is selected from the last samples in the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; data provided, before shuffling. This argument is not supported when &lt;code&gt;x&lt;/code&gt; is a dataset, generator or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c02e847bef4f276c1a0ee738b911fc014759d05" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_split&lt;/code&gt;&lt;/b&gt;: Float. Fraction of images reserved for validation (strictly between 0 and 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196c71263031d6fa5904bcba2b4bf1bd05b38dcf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_steps&lt;/code&gt;&lt;/b&gt;: Only relevant if &lt;code&gt;validation_data&lt;/code&gt; is provided and is a &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; dataset. Total number of steps (batches of samples) to draw before stopping when performing validation at the end of every epoch. If 'validation_steps' is None, validation will run until the &lt;code&gt;validation_data&lt;/code&gt; dataset is exhausted. In the case of a infinite dataset, it will run into a infinite loop. If 'validation_steps' is specified and only part of the dataset will be consumed, the evaluation will start from the beginning of the dataset at each epoch. This ensures that the same validation samples are used every time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d350c415de7ccabb3c6d81f658f1781621c970" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;validation_steps&lt;/code&gt;&lt;/b&gt;: Only relevant if &lt;code&gt;validation_data&lt;/code&gt; is provided and is a &lt;a href=&quot;../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; dataset. Total number of steps (batches of samples) to draw before stopping when performing validation at the end of every epoch. If 'validation_steps' is None, validation will run until the &lt;code&gt;validation_data&lt;/code&gt; dataset is exhausted. In the case of a infinite dataset, it will run into a infinite loop. If 'validation_steps' is specified and only part of the dataset will be consumed, the evaluation will start from the beginning of the dataset at each epoch. This ensures that the same validation samples are used every time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ff2dccc205a4b06f8a9e70798472ef43f7b60b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vals&lt;/code&gt;&lt;/b&gt;: A tensor, a list or tuple of tensors, or a dictionary containing the values to enqueue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9662499a3432094edae7f0c0df62a2975b3f8dc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vals&lt;/code&gt;&lt;/b&gt;: A tensor, a list or tuple of tensors, or a dictionary from which the queue elements are taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e415ede77ee463858d079fa2754be18f9e4b0e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e697ed2492610badf4101b18ac48e2771085f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &quot;per replica&quot; value, e.g. returned by &lt;code&gt;experimental_run_v2&lt;/code&gt; to be combined into a single tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e703df4ce0c12cfb15ab56ead3d2875af1ae9f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 3D &lt;code&gt;Tensor&lt;/code&gt;. Must be of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, or &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb4b0130ae33bb51b0ab666047084159d685457" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 4-D &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[batch, height, width, channels]&lt;/code&gt; and type &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;qint8&lt;/code&gt;, &lt;code&gt;quint8&lt;/code&gt;, or &lt;code&gt;qint32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c85ee2207af3b05ea5b09c16d3ce37962ee9d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 4-D &lt;code&gt;Tensor&lt;/code&gt; of the format specified by &lt;code&gt;data_format&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4328b7bec7fbae6ddb8f590812b1bcc8bacc2a75" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 4-D &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt; and shape &lt;code&gt;[batch, height, width, in_channels]&lt;/code&gt; for &lt;code&gt;NHWC&lt;/code&gt; data format or &lt;code&gt;[batch, in_channels, height, width]&lt;/code&gt; for &lt;code&gt;NCHW&lt;/code&gt; data format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20e849922fdac6001ca11981e943b16083b138e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 4-D &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt;. It needs to be in the default &quot;NHWC&quot; format. Its shape is &lt;code&gt;[batch, in_height, in_width, in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02837464c1d1eced3bd217d3c679cfaae5519a79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 4-D &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt;. It needs to be in the default &lt;code&gt;NHWC&lt;/code&gt; format. Its shape is &lt;code&gt;[batch, in_height, in_width, in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f746e54dd16ac029635ee91997a1a9cab51d1bf9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A 5-D &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt; and shape &lt;code&gt;[batch, depth, height, width, in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bec5e27112fe02d4c3f847f8c1a8551eaf4b736" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;SparseTensor&lt;/code&gt;, &lt;code&gt;SparseTensorValue&lt;/code&gt;, or an object whose type has a registered &lt;code&gt;Tensor&lt;/code&gt; conversion function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb4e2e746c602749346017e45b1556878d6f45a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; with type &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, or &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d480d4daf99ed63f4b4f4e4d43d1c1072e9113" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e039774bec78c407cb56ae639c9da1b13cc11ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. 0-D (scalar). Value to fill the returned tensor. @compatibility(numpy) Equivalent to np.full @end_compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d54a11a403042273b54267abe6a92e63fc24c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. 4-D with shape &lt;code&gt;[batch, height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8c37c0b6ae48f568ddcf7539d6ab5cbee7b661" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. 4-D with shape &lt;code&gt;[batch, in_height, in_width, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c028cd33180c82d5edf3d462618c09096db8cf23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same shape and dtype as &lt;code&gt;ref&lt;/code&gt;. The value to be added to the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a581a6313498aba5639188cdb220f86dfd4bc1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same shape and dtype as &lt;code&gt;ref&lt;/code&gt;. The value to be assigned to the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e8376ab0b77f4671d41223b87008a6bb35c396" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same shape and dtype as &lt;code&gt;ref&lt;/code&gt;. The value to be subtracted to the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e270c7d38e31833c97deb37f4a20f7f7a5fab460" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. The new value for this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294d07714c5586564812c9800d5550be567f9475" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A Python scalar, list or tuple of values, or a N-dimensional numpy array. All elements of the initialized variable will be set to the corresponding value in the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a73c344dc351bcc110baccaef8f00ee96c08aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A Tensor to be shuffled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da895c1f4f26dc72e6583109e0eda0502e6d6d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A constant value (or list)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30573dbce773b3de0edb927f420ebedc5a7623b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A constant value (or list) of output type &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5a16f6ec30c76d2ceb6d0114dc77928480690c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A object that can be converted to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccd19a3aa8f716cbd3877ca937a3ee0b02f6f5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A per-replica value with one value per replica.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf903312c4aeb9caadde97b895fdbddfffe2dd28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A rank &lt;code&gt;R &amp;gt; 0&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; to be unstacked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d808260dd0b8262c1019e8cc72a70212a9b2d5e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A string scalar Tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0053004e2d8eef2588c8be218165b521f776af61" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A tensor of numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bce2931dda7a4c0d6924ef027a758b0410015df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A tensor with the same shape as &lt;code&gt;variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bae4dabe9a591628354f4d5fe4063e3dfedd1d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A value returned by &lt;code&gt;experimental_run()&lt;/code&gt;, &lt;code&gt;experimental_run_v2()&lt;/code&gt;, &lt;code&gt;extended.call_for_each_replica()&lt;/code&gt;, or a variable created in &lt;code&gt;scope&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc0f62f8ec6d484c773443acc42175f108a30ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A value returned by &lt;code&gt;experimental_run_v2()&lt;/code&gt; or a variable created in &lt;code&gt;scope()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5dfb64f8fd81a47188de30d6b30ba1d9ac38e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: A value to wrap. The value must be convertible to &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;CompositeTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7a70d52080d1a056777d8b27f7868c8e5143ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;IndexedSlices&lt;/code&gt;, &lt;code&gt;SparseTensor&lt;/code&gt;, or an object that can be consumed by &lt;code&gt;convert_to_tensor()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e635a9dcb8d269bbdab44b5f59505b4691f974" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: An object whose type has a registered &lt;code&gt;Tensor&lt;/code&gt; conversion function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5864354491c646523f92d046b53c8015ec003a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Input tensor to crop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b759af27f91c81c7cacc4119ae4c286a652392b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Learning phase value, either 0 or 1 (integers). 0 = test, 1 = train</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adf2b076cee2e505222968dc2d12df037f9e1f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Metric tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0337ed5655f7bc180d2ff0e9ebbc7ae0160fa4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: New variable value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726858e972e3c6c7ae4571514139200c8fb21a9f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Numpy array, initial value of the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e847353986176528912924e40f34dc9494b0ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Python boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4e4f668ba9c11a28357c67c4ad370a7f702636" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: String; 'float16', 'float32', or 'float64'. Example: &lt;code&gt;python from keras import backend as K K.floatx() &amp;gt;&amp;gt;&amp;gt; 'float32' K.set_floatx('float16') K.floatx() &amp;gt;&amp;gt;&amp;gt; 'float16'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0479a2a2982b3f781679e028a08882f3ba04a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;Tensor&lt;/code&gt; to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0849a0b4c41834167374a16e59fd3f29b829c7ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: The nested structure of &lt;code&gt;Tensor&lt;/code&gt;s to all-reduce. The structure must be compatible with &lt;a href=&quot;../nest&quot;&gt;&lt;code&gt;tf.nest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f49791f3632dbd1370e7a4f5fe171cc5de66557" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: The new default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb20f4541560a78029856f7c06f3ff4dd24ee6f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: The value to add to the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8471e05d4d9e9b134578bfc8287a0411957f5e0f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: The value to add to the collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b753993a96dc699d4f847466a7fb62dc42246221" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Value of tensor to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b8023fd546411abace16c90ddce330e20d397a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: Value to set the tensor to, as a Numpy array (of the same shape).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941eb6827707f797ee5f3bc149a2915b5ebf5175" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: a float &lt;code&gt;Tensor&lt;/code&gt; giving the predicted values. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cee65339281012b3b586f153a308b739f94a327" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value&lt;/code&gt;&lt;/b&gt;: float. New value of epsilon. Example: &lt;code&gt;python from keras import backend as K K.epsilon() &amp;gt;&amp;gt;&amp;gt; 1e-07 K.set_epsilon(1e-05) K.epsilon() &amp;gt;&amp;gt;&amp;gt; 1e-05&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a49132302dd7394f9ee30a26b9e0b4c63fcfa64" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_destination_pairs&lt;/code&gt;&lt;/b&gt;: A sequence of (value, destinations) pairs. See &lt;code&gt;reduce_to()&lt;/code&gt; for a description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd53e3a707f8977ffad84ead3c69408080c23646" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_destination_pairs&lt;/code&gt;&lt;/b&gt;: a list or a tuple of PerReplica objects (or tensors with device set if there is one device) and destinations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1ac2a37fefc5cc8b883c5587799e85d40c67da" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_destination_pairs&lt;/code&gt;&lt;/b&gt;: an iterable of tuples of PerReplica objects (or tensors with device set if there is one device) and destinations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd005abf69bcad9b387473b81d8f8d6619bb0ed3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_dtype&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;value&lt;/code&gt; data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b800888c394d3101e756794887a529ce2d5b6a68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_dtype&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;values&lt;/code&gt; data type. Used when &lt;code&gt;values&lt;/code&gt; is a python array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b6a63d99184a78c9c25f1b5f6920e1732ba869" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_dtype&lt;/code&gt;&lt;/b&gt;: the type of the value tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944aa48e0bb0ffd5438f9e351d1e5af14958c251" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_index&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. Index of the operation's endpoint that produces this tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841202060290fa673b15dfdf6b750273fd18535b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_index&lt;/code&gt;&lt;/b&gt;: the index that represents information of a line to get the table 'value' values from.'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d83755df59f394e6b7bbfe7e2590bac4ee71e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_key&lt;/code&gt;&lt;/b&gt;: (Optional.) Key for a &lt;code&gt;Feature&lt;/code&gt; in the input &lt;code&gt;Example&lt;/code&gt;, whose parsed &lt;code&gt;Tensor&lt;/code&gt; will be the resulting &lt;a href=&quot;../raggedtensor#flat_values&quot;&gt;&lt;code&gt;RaggedTensor.flat_values&lt;/code&gt;&lt;/a&gt;. If not specified, then it defaults to the key for this &lt;code&gt;RaggedFeature&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fee0d191a616ea62329ac94aa60de0c11fd8226" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_key&lt;/code&gt;&lt;/b&gt;: Name of value feature. The underlying feature's type must be &lt;code&gt;dtype&lt;/code&gt; and its length must always match that of all the &lt;code&gt;index_key&lt;/code&gt;s' features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed3864c042dfafbb25c0a4fa4db67b9d3f26af1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_range&lt;/code&gt;&lt;/b&gt;: Shape [2] &lt;code&gt;Tensor&lt;/code&gt; of same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;values&lt;/code&gt;. values &amp;lt;= value_range[0] will be mapped to hist[0], values &amp;gt;= value_range[1] will be mapped to hist[-1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029fb429c52566b02739ffb365c54935b6948408" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_rowids&lt;/code&gt;&lt;/b&gt;: A 1-D integer tensor with shape &lt;code&gt;[nvals]&lt;/code&gt;, which corresponds one-to-one with &lt;code&gt;values&lt;/code&gt;, and specifies each value's row index. Must be nonnegative, and must be sorted in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b3fd4d506353b67a1eb76efd3fcf279ca91156" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_shape&lt;/code&gt;&lt;/b&gt;: The shape for individual flat values in the &lt;code&gt;RaggedTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3520294702355db82ff18a222ce78700297e1d5b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_structure&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Structure&lt;/code&gt; object representing the structure of the components of this optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4258e5d97bbf36ce4072b9b1a28a4834bef60f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;value_tensor&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; representing the current value of the metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb1c3f809bd95a0a6aede01ddd6e9e03c19e95c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: 1-D or higher numeric &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33541467dd4718cc56ea28f67783d014f3cfd2f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A 1-D string Tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7d8e81cafc8d6e0814b873519c497876b053aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A 1-D tensor of any type and shape &lt;code&gt;[N]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435c34df131bc415c1b41aef268bf4254993d282" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of arbitrary dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4706b5691169a8d3505dc47273659ccaa994d2ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../raggedtensor&quot;&gt;&lt;code&gt;tf.RaggedTensor&lt;/code&gt;&lt;/a&gt;. May not be empty. All &lt;code&gt;values&lt;/code&gt; must have the same rank and the same dtype; but unlike &lt;a href=&quot;../stack&quot;&gt;&lt;code&gt;tf.stack&lt;/code&gt;&lt;/a&gt;, they can have arbitrary dimension sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97c1ebb85cd9246c92d9d3bb11a10316f8ce23b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; objects of type &lt;code&gt;output_types&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaf694e52b3319cf6bcbc4567cec7383c27e3cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; objects or a single &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badbc28e17e7d277e0aaaf9a1244680fa5cf0498" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; objects with the same shape and type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea49c936543efb72432b997e44913ce038396d09" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; objects. List of tensors containing values for the corresponding field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7731a989d9d47235e7a4b9b090805c9182fdcd39" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt;s or &lt;code&gt;float&lt;/code&gt;s or &lt;code&gt;int&lt;/code&gt;s that specifies the values for the intervals defined by &lt;code&gt;boundaries&lt;/code&gt;. It should have one more element than &lt;code&gt;boundaries&lt;/code&gt;, and all elements should have the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06e5ef3e67f31563e92f8bbd69926b1e75f3292" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A list of at least 2 &lt;code&gt;Tensor&lt;/code&gt; objects with the same type. The &lt;code&gt;N&lt;/code&gt; Tensors to concatenate. Their ranks and types must match, and their sizes must match in all dimensions except &lt;code&gt;concat_dim&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e3e2e158bee5968b31ad10160a18109711788c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A numeric &lt;code&gt;Tensor&lt;/code&gt; of arbitrary size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0329e46b6cc3140dd16c6a5d456989cb215d419b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A numpy array of any type and shape; or a RaggedTensorValue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118f591fec5f6bd5968638492659d6041bfabec2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A potentially ragged tensor of any dtype and shape &lt;code&gt;[nvals, ...]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df584325457c3b4104d36639b576720acb63631" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A potentially ragged tensor with shape &lt;code&gt;[nvals, ...]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c82a05d0b9082bd3f2c4f8fa178d92c294908f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: A real numeric &lt;code&gt;Tensor&lt;/code&gt;. Any shape. Values to use to build the histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4eb447060dd2b0ba96a0476a06e7e2539c70308" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: List of tuples: &lt;code&gt;(name, value_for_last_step)&lt;/code&gt;. If &lt;code&gt;name&lt;/code&gt; is in &lt;code&gt;stateful_metrics&lt;/code&gt;, &lt;code&gt;value_for_last_step&lt;/code&gt; will be displayed as-is. Else, an average of the metric over time will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9ba4cb60c01c839b6334c323cfec7676328dc2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: N-D &lt;code&gt;Tensor&lt;/code&gt; containing the search values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6524d2a201f80a1ca1ab3112fb85353fdc8de8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: Numeric &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7629893c0e8fcd8c9c98cb51368021c25557cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: Object to be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94403c1de9281bbeb97f1e575f35e97b9979ea27" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: Optional; passed as &lt;code&gt;values&lt;/code&gt; parameter to name_scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3adcb24fb4f359edfa810249c79f605831f8f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: Per-example value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4aa864af3ec3b710d427c7c4ab14805bcad73fb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;k&lt;/code&gt; largest elements along each last dimensional slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3d2269bff0db41f216a8aa009cf1b9d9ae2a70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: The list of &lt;code&gt;Tensor&lt;/code&gt; arguments that are passed to the op function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6ab5f6d921fdfc44addade2a2d1e960b38d672" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: The tensor for the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fb2befbc844b215b974658152b8153ffc4de98" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: Values to be associated with keys. Must be a tensor of the same shape as &lt;code&gt;keys&lt;/code&gt; and match the table's value type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59f4306995e8b47711fea1399d76b9f00edda9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;values&lt;/code&gt;&lt;/b&gt;: Values to put in the TensorProto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9dd103993ea5e96776617909c4ac86445f4b65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Variable&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b073d612020eeaafcf209b338d355e101739b768" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: A variable passed to &lt;code&gt;minimize()&lt;/code&gt; or &lt;code&gt;apply_gradients()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ede5aa186e0538cdd4a924e7891a640337df278" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;ops.Variable&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc78abfaf47fa7df75ea8ae0e9cef81af075c04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: In the case of variable slice assignment, the Variable object to slice (i.e. tensor is the read-only view of this variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fe1270cbdefea3c3dc8337395cc603f327ff69" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: The variable corresponding to &lt;code&gt;input_&lt;/code&gt; or None</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daca64e31610fe212a5629cb10b7e5417c1a251a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: Variable, possibly mirrored to multiple devices, to operate on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8f2fdd93f90b3f05c1cd9ce1af13ad9bb57a42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var&lt;/code&gt;&lt;/b&gt;: Variance of batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b0b87358c7095f896d0e98c9630f92915db9ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Variable&lt;/code&gt;/&lt;code&gt;SaveableObject&lt;/code&gt;, or a dictionary mapping names to &lt;code&gt;SaveableObject&lt;/code&gt;s. If &lt;code&gt;None&lt;/code&gt;, defaults to the list of all saveable objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9fa1f81d21d73f59bbbf33e9e801562b996583" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: A list of Variable or Tensor objects. The variables and Tensors must be of types bfloat16, float16, float32, or float64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7b308ac1e6a841c1e9c12e2fc5c8c72b086b43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: List of &lt;code&gt;Variable&lt;/code&gt; objects to check. Defaults to the value of &lt;code&gt;global_variables() + local_variables()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bac162aa0124a8356e4b1e886d1f137db9a3f49" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: List of &lt;code&gt;Variable&lt;/code&gt; objects to check. Defaults to the value of &lt;code&gt;global_variables().&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7d2e4da37d64fd0ba6800a38475ae8e8e0cd33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: List of &lt;code&gt;Variable&lt;/code&gt; objects to initialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7d9e164ae482f3d581c719dc86957a11950590" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: Optional list or tuple of &lt;a href=&quot;../../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; to update to minimize &lt;code&gt;loss&lt;/code&gt;. Defaults to the list of variables collected in the graph under the key &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95b9c17df53cbd0c3c686a66e1f3c3c2385b72a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: Optional list or tuple of &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; to update to minimize &lt;code&gt;loss&lt;/code&gt;. Defaults to the list of variables collected in the graph under the key &lt;code&gt;GraphKey.TRAINABLE_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0944eedb8b9864035d91cbb715fe1fc232041903" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: Optional list or tuple of &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; to update to minimize &lt;code&gt;loss&lt;/code&gt;. Defaults to the list of variables collected in the graph under the key &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733a69188fdb6b05e8e63fbdf3525ae04bde3f42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: Optional list or tuple of &lt;code&gt;Variable&lt;/code&gt; objects to update to minimize &lt;code&gt;loss&lt;/code&gt;. Defaults to the list of variables collected in the graph under the key &lt;code&gt;GraphKeys.TRAINABLE_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59e6b7af1f2a7590aaa1a3d2e8b536fa5f47c8d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: The list of variables being optimized, needed with the default &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ebb818d907cc706a5c8100b338df51f94910a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: The list of variables being optimized, needed with the default &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6485a457d77dd51c3ad35dd0b132ca0a7a0185" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_list&lt;/code&gt;&lt;/b&gt;: list or tuple of &lt;code&gt;Variable&lt;/code&gt; objects to update to minimize &lt;code&gt;loss&lt;/code&gt;, or a callable returning the list or tuple of &lt;code&gt;Variable&lt;/code&gt; objects. Use callable when the variable list would otherwise be incomplete before &lt;code&gt;minimize&lt;/code&gt; since the variables are created at the first time &lt;code&gt;loss&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1b35a54be84e644778bbee6da5016747ebebbc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_name_to_prev_var_name&lt;/code&gt;&lt;/b&gt;: [Optional] Dict of variable names (strings) to name of the previously-trained variable in &lt;code&gt;ckpt_to_initialize_from&lt;/code&gt;. If not explicitly provided, the name of the variable is assumed to be same between previous checkpoint and current model. Note that this has no effect on the set of variables that is warm-started, and only controls name mapping (use &lt;code&gt;vars_to_warm_start&lt;/code&gt; for controlling what variables to warm-start).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fca8b272f8cf8a06269dfb674856fb165870cea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_name_to_vocab_info&lt;/code&gt;&lt;/b&gt;: [Optional] Dict of variable names (strings) to &lt;a href=&quot;../../../estimator/vocabinfo&quot;&gt;&lt;code&gt;tf.estimator.VocabInfo&lt;/code&gt;&lt;/a&gt;. The variable names should be &quot;full&quot; variables, not the names of the partitions. If not explicitly provided, the variable is assumed to have no (changes to) vocabulary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e7f806b29808b4ad881b852cab297d13a0bd87" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_name_to_vocab_info&lt;/code&gt;&lt;/b&gt;: [Optional] Dict of variable names (strings) to &lt;a href=&quot;vocabinfo&quot;&gt;&lt;code&gt;tf.estimator.VocabInfo&lt;/code&gt;&lt;/a&gt;. The variable names should be &quot;full&quot; variables, not the names of the partitions. If not explicitly provided, the variable is assumed to have no (changes to) vocabulary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c965a20738df096ec24ed8ea62797c906d2afe1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_offset&lt;/code&gt;&lt;/b&gt;: Offset of this &lt;code&gt;Variable&lt;/code&gt; into the full variable, as a list of int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697bdee001da98fd293f4326e688a286b88b535a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;var_shape&lt;/code&gt;&lt;/b&gt;: Shape of this &lt;code&gt;Variable&lt;/code&gt;, as a list of int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04c4463abbb36df1d2fbd309f74f84f6bcbf1eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variable&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcbb84b21d79620401f887fd3f1a58e7526b857" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variable_averages&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;ExponentialMovingAverage&lt;/code&gt; object, used to maintain moving averages for the variables passed in &lt;code&gt;variables_to_average&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b3793e2413da41354a4e03d3fa6967e16ab454" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variable_creator&lt;/code&gt;&lt;/b&gt;: the passed creator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e39fb288d44a09dd7ce553d56d67230d454dc85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variable_def&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;VariableDef&lt;/code&gt; protocol buffer. If not &lt;code&gt;None&lt;/code&gt;, recreates the Variable object with its contents, referencing the variable's nodes in the graph, which must already exist. The graph is not changed. &lt;code&gt;variable_def&lt;/code&gt; and the other arguments are mutually exclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be3b16501d20d5598fd855ca390d6eb4b089805" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variable_names_blacklist&lt;/code&gt;&lt;/b&gt;: The set of variable names to omit converting to constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50271bd46bd58b500e7758dae27604da141332e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variable_names_whitelist&lt;/code&gt;&lt;/b&gt;: The set of variable names to convert (by default, all variables are converted).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1300c27d3c15ca194cd6238186d8d8fcb25840" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variables&lt;/code&gt;&lt;/b&gt;: List of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a62ae27571d42981bd3eb9c0616400271be7e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variables&lt;/code&gt;&lt;/b&gt;: Tensor or list of tensors to consider constant with respect to any other variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d9a4d4e9e0d7e74621519c10bdc7132e27d366" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variables_to_average&lt;/code&gt;&lt;/b&gt;: a list of variables that need to be averaged. Only needed if variable_averages is passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272c4752aa4568e76d7bbf66c26e8ac908ea675b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/b&gt;: A 1D variance Tensor with size matching the last dimension of t. This is the second output from tf.nn.moments, or a saved moving average thereof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a3c936aae33d141a2ae1a9220a597bfec0be30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of 1 dimension for population variance used for inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60536366e5dcd0080799f2c72450ef052fa2422a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/b&gt;: A variance &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fc6cce675ca83091f3ad476a01474b38c362e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/b&gt;: Alias for v.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef9047f0d2a0f7a35cdf237a0f47b815472e20d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/b&gt;: Floating-point &lt;code&gt;Tensor&lt;/code&gt; with shape identical to &lt;code&gt;batch_shape + event_shape&lt;/code&gt;, i.e., the same shape as &lt;code&gt;self.mean()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a14bdcfcf162f1b7d834d1d44e3c0a1c2da3181" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance_decay&lt;/code&gt;&lt;/b&gt;: decay for the noise's variance. See computation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feececaa3116fb17ff2c143c816a1c0b736c3c38" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance_epsilon&lt;/code&gt;&lt;/b&gt;: A small float number to avoid dividing by 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a234a8c3db7cfbb7dc3e9d3f3dbce4d4718b7f83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variance_ss&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; containing the variance sufficient statistics: the (possibly shifted) squared sum of the data to compute the variance over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74b6fc5217773675a6a095169d4d2ec5cb998a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variant&lt;/code&gt;&lt;/b&gt;: A scalar &lt;a href=&quot;../../../tf#variant&quot;&gt;&lt;code&gt;tf.variant&lt;/code&gt;&lt;/a&gt; tensor representing a dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6798c3d3a77acd5e7a309f0cf0195fd92254337e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variant_tensor&lt;/code&gt;&lt;/b&gt;: A DT_VARIANT tensor that represents the dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c11a4b0ebf15b41f7a452e314ac994530dc319" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;variational_recurrent&lt;/code&gt;&lt;/b&gt;: Python bool. If &lt;code&gt;True&lt;/code&gt;, then the same dropout pattern is applied across all time steps per run call. If this parameter is set, &lt;code&gt;input_size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3222d9f574cd8284b466d3a62911a738123f33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vars_to_warm_start&lt;/code&gt;&lt;/b&gt;: [Optional] One of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f363cda6b6a2f138bfcc9d31a71aa43fece204" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: 0 or 1. Verbosity mode. 0 = silent, 1 = progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858349ad0e22e5d7bbbea654441a419cfc3ce34f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: 0, 1, or 2. Verbosity mode. 0 = silent, 1 = progress bar, 2 = one line per epoch. Note that the progress bar is not particularly useful when logged to a file, so verbose=2 is recommended when not running interactively (eg, in a production environment).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699eeb2a4ca596dd2588a4d95eb30f90bf997382" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: Verbosity mode, 0 (silent), 1 (verbose), 2 (semi-verbose)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afde80bc5fbab5a33a960e63fc89768794180b30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: Verbosity mode, 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c322d0bfc332c7081924b40f2c88dc5f00d24e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: int. 0: quiet, 1: update messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db3b74e1c5cfccaa97c3077fbfd03290b0c3ac7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: verbosity mode, 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06aab68656b96f57ceaa625f40995dec3a0cdf42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/b&gt;: verbosity mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f415a7c09e3bc9b03d1de14c6a5815f90c0b13" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verify_shape&lt;/code&gt;&lt;/b&gt;: Boolean that enables verification of a shape of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788ddb85e4d0a6e1c24360db441b0e0414507d06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;verify_shape&lt;/code&gt;&lt;/b&gt;: Boolean that enables verification of the shape of &lt;code&gt;value&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, the initializer will throw an error if the shape of &lt;code&gt;value&lt;/code&gt; is not compatible with the shape of the initialized tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9303579cd58c9750bd02ba9bb517893e69f38d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vertical_flip&lt;/code&gt;&lt;/b&gt;: Boolean. Randomly flip inputs vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06690db05e705a67fac41b68e1a00b4b78138d9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;virtual_batch_size&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. By default, &lt;code&gt;virtual_batch_size&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, which means batch normalization is performed across the whole batch. When &lt;code&gt;virtual_batch_size&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;, instead perform &quot;Ghost Batch Normalization&quot;, which creates virtual sub-batches which are each normalized separately (with shared gamma, beta, and moving statistics). Must divide the actual batch size during execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a66e93d4fcffd1b7b050e1d243f83e7d59c011" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocab&lt;/code&gt;&lt;/b&gt;: An array of string tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e24938c91c9ab0f32ac6a1a88ba289eca1cb6f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocab_file&lt;/code&gt;&lt;/b&gt;: Each valid line in this file (which should have a CSV-like format) corresponds to a valid word ID. IDs are in sequential order, starting from num_reserved_ids. The last entry in each line is expected to be a value corresponding to the count or relative probability. Exactly one of &lt;code&gt;vocab_file&lt;/code&gt; and &lt;code&gt;unigrams&lt;/code&gt; needs to be passed to this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb27a84b9f7fb7ab2da91475793ee713d1e25d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocab_size&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;int64&lt;/code&gt; Tensor (or Python int) containing the new size of the last dimension, &lt;code&gt;all(0 &amp;lt;= sp_ids.values &amp;lt; vocab_size)&lt;/code&gt;. Or a list thereof with &lt;code&gt;all(0 &amp;lt;= sp_ids[i].values &amp;lt; vocab_size[i])&lt;/code&gt; for all &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed405c3af825eccf16eca6df4db12f76528083a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocab_size&lt;/code&gt;&lt;/b&gt;: A scalar int64 Tensor (or Python int) containing the new size of the last dimension, &lt;code&gt;all(0 &amp;lt;= sp_input.values &amp;lt; vocab_size)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00573a248dfee9a7ec424ec9cd891c5029fc3034" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocab_size&lt;/code&gt;&lt;/b&gt;: The number of elements in the file, if known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372031ee9dcc670196e92fed4068b034208906a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocabulary_file&lt;/code&gt;&lt;/b&gt;: The vocabulary file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efd249bb0a651bf26f1269593e3fe9e322e05d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocabulary_list&lt;/code&gt;&lt;/b&gt;: An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in &lt;code&gt;vocabulary_list&lt;/code&gt;. Must be castable to &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f1856429fbc8a6f46d4892d81080f2ebac59ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;vocabulary_size&lt;/code&gt;&lt;/b&gt;: Number of the elements in the vocabulary. This must be no greater than length of &lt;code&gt;vocabulary_file&lt;/code&gt;, if less than length, later values are ignored. If None, it is set to the length of &lt;code&gt;vocabulary_file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25301c80f55f733b81181b0b6c6d87740b63b2c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;wait_for_checkpoint&lt;/code&gt;&lt;/b&gt;: Whether to wait for checkpoint to become available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05331c384880284b1a4d8a00adce2cfae9184c89" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;wait_for_checkpoint&lt;/code&gt;&lt;/b&gt;: Whether we should wait for the availability of a checkpoint before creating Session. Defaults to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03391148d49ec948c09fdd2869fdfe7722faceb7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;wait_time&lt;/code&gt;&lt;/b&gt;: time to sleep in-between calls to &lt;code&gt;put()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76c7b99f8e07170d0b4ceddca703aad756ac217" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;wait_until_step&lt;/code&gt;&lt;/b&gt;: an &lt;code&gt;int&lt;/code&gt; shows until which global step should we wait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9638252b6971e94aa61052abe57da16463e150a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;wall_time&lt;/code&gt;&lt;/b&gt;: (optional) Median or mean wall time in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cd203004522bd619ecf5733bef46f4cbe338e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;warm_start_from&lt;/code&gt;&lt;/b&gt;: A string filepath to a checkpoint to warm-start from, or a &lt;code&gt;WarmStartSettings&lt;/code&gt; object to fully configure warm-starting. If the string filepath is provided instead of a &lt;code&gt;WarmStartSettings&lt;/code&gt;, then all weights and biases are warm-started, and it is assumed that vocabularies and Tensor names are unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fc27264a7a4d8faef34a8341c30b3a20d31b91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;warm_start_from&lt;/code&gt;&lt;/b&gt;: A string filepath to a checkpoint to warm-start from, or a &lt;code&gt;WarmStartSettings&lt;/code&gt; object to fully configure warm-starting. If the string filepath is provided instead of a &lt;code&gt;WarmStartSettings&lt;/code&gt;, then all weights are warm-started, and it is assumed that vocabularies and Tensor names are unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ff6bd51f1e16343f8f0691a2850381e045a58f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;warm_start_from&lt;/code&gt;&lt;/b&gt;: Optional string filepath to a checkpoint or SavedModel to warm-start from, or a &lt;a href=&quot;../../../../estimator/warmstartsettings&quot;&gt;&lt;code&gt;tf.estimator.WarmStartSettings&lt;/code&gt;&lt;/a&gt; object to fully configure warm-starting. If the string filepath is provided instead of a &lt;code&gt;WarmStartSettings&lt;/code&gt;, then all variables are warm-started, and it is assumed that vocabularies and Tensor names are unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60fdf29ce156e4aa43e243a2623192c4fe7b224" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;warm_start_from&lt;/code&gt;&lt;/b&gt;: Optional string filepath to a checkpoint or SavedModel to warm-start from, or a &lt;a href=&quot;../../../estimator/warmstartsettings&quot;&gt;&lt;code&gt;tf.estimator.WarmStartSettings&lt;/code&gt;&lt;/a&gt; object to fully configure warm-starting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3589517034216555785c0912ed6b2619db461364" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;warm_start_from&lt;/code&gt;&lt;/b&gt;: Optional string filepath to a checkpoint or SavedModel to warm-start from, or a &lt;a href=&quot;warmstartsettings&quot;&gt;&lt;code&gt;tf.estimator.WarmStartSettings&lt;/code&gt;&lt;/a&gt; object to fully configure warm-starting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ae282401c4ebb6f92f5e7e92830bda8f1f9a83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;watch_accessed_variables&lt;/code&gt;&lt;/b&gt;: Boolean controlling whether the tape will automatically &lt;code&gt;watch&lt;/code&gt; any (trainable) variables accessed while the tape is active. Defaults to True meaning gradients can be requested from any result computed in the tape derived from reading a trainable &lt;code&gt;Variable&lt;/code&gt;. If False users must explicitly &lt;code&gt;watch&lt;/code&gt; any &lt;code&gt;Variable&lt;/code&gt;s they want to request gradients from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf5c87c7269333a08f6838dda77a564f7f4a15f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_collections&lt;/code&gt;&lt;/b&gt;: A list of collection names to which the Variable will be added. Note that variables will also be added to collections &lt;code&gt;tf.GraphKeys.GLOBAL_VARIABLES&lt;/code&gt; and &lt;code&gt;ops.GraphKeys.MODEL_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7e71b0245a0a98599bb42051e80ed278bc6294" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_collections&lt;/code&gt;&lt;/b&gt;: A list of collection names to which the Variable will be added. Note that, variables will also be added to collections &lt;code&gt;tf.GraphKeys.GLOBAL_VARIABLES&lt;/code&gt; and &lt;code&gt;ops.GraphKeys.MODEL_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a635099a49ef8958f5a586f639d97e30cbf396" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../../../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045b97431aa11a33c7c87cee5dda1479b695cae8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fd3f0e1aafd765597aea3d228f994c23b8e32e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9e3f023d669be39be4a69eb5c307fb31ba43c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c72c29952625a77f13ec3e13dbefafea8617b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;_NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d02b4fbe60d24190f0c44265f00def6771c2a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example. Per-class weighting is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0740c097b4ae4c14342e9a1d832f8439b9540d2d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It will be multiplied by the loss of the example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6353612a307a3737400efb75394f24b6ed10b100" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;NumericColumn&lt;/code&gt; created by &lt;code&gt;tf.fc_old.numeric_column&lt;/code&gt; defining feature column representing weights. It is used to downweight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e929d83d3ed3fc0bfb77b6b5b9d31da26ca1a11f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;_NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;_NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad729f158c988eb099bb46f26e713c43327d9b98" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;_NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It is used to downweight or boost examples during training. It will be multiplied by the loss of the example. If it is a string, it is used as a key to fetch weight tensor from the &lt;code&gt;features&lt;/code&gt;. If it is a &lt;code&gt;_NumericColumn&lt;/code&gt;, raw tensor is fetched by key &lt;code&gt;weight_column.key&lt;/code&gt;, then weight_column.normalizer_fn is applied on it to get weight tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0cf11b497c671e3d1e0805b4f4bc0a1ce730dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_column&lt;/code&gt;&lt;/b&gt;: A string or a &lt;code&gt;_NumericColumn&lt;/code&gt; created by &lt;a href=&quot;../feature_column/numeric_column&quot;&gt;&lt;code&gt;tf.feature_column.numeric_column&lt;/code&gt;&lt;/a&gt; defining feature column representing weights. It will be multiplied by the loss of the example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765464dea17621363db053c8bb0a2456f8e2b90d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weight_feature_key&lt;/code&gt;&lt;/b&gt;: String key for weight values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19432ad320ce7be927e34652176e0971017f21b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weighted_metrics&lt;/code&gt;&lt;/b&gt;: List of metrics to be evaluated and weighted by sample_weight or class_weight during training and testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdde9e96244b1f117d987a88f0c821a16343ca5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: (Optional.) A list of &lt;code&gt;len(datasets)&lt;/code&gt; floating-point values where &lt;code&gt;weights[i]&lt;/code&gt; represents the probability with which an element should be sampled from &lt;code&gt;datasets[i]&lt;/code&gt;, or a &lt;a href=&quot;../../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; object where each element is such a list. Defaults to a uniform distribution across &lt;code&gt;datasets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd64fd23a6a2e021c3f993eabb25f5665662e190" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: (Optional.) A list of &lt;code&gt;len(datasets)&lt;/code&gt; floating-point values where &lt;code&gt;weights[i]&lt;/code&gt; represents the probability with which an element should be sampled from &lt;code&gt;datasets[i]&lt;/code&gt;, or a &lt;a href=&quot;../dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; object where each element is such a list. Defaults to a uniform distribution across &lt;code&gt;datasets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7a8e7f434d4f19c5ad77f0ab2a0285bb7da39e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; whose rank is either 0, or n-1, where n is the rank of &lt;code&gt;labels&lt;/code&gt;. If the latter, it must be broadcastable to &lt;code&gt;labels&lt;/code&gt; (i.e., all dimensions must be either &lt;code&gt;1&lt;/code&gt;, or the same as the corresponding &lt;code&gt;labels&lt;/code&gt; dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660dc05ac19c3cebd2e5601bb5c9b6da50d01271" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[num_classes, dim]&lt;/code&gt;, or a list of &lt;code&gt;Tensor&lt;/code&gt; objects whose concatenation along dimension 0 has shape [num_classes, dim]. The (possibly-partitioned) class embeddings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d1ebbd23ae3ec7fa61cecba8f5e786e6548e93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[num_classes, dim]&lt;/code&gt;, or a list of &lt;code&gt;Tensor&lt;/code&gt; objects whose concatenation along dimension 0 has shape [num_classes, dim]. The (possibly-sharded) class embeddings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a8c595062f2ef68ca13cf32aa7c1c3c328f804" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt; and shape &lt;code&gt;[num_accidental_hits]&lt;/code&gt;. Each value is &lt;code&gt;-FLOAT_MAX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000aa4b70cc403894de905e51d3603c3e3eb2c08" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; objects with type mutable &lt;code&gt;float32&lt;/code&gt;. a list of vectors where each value is the weight associated with a feature group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c68c2396226fe45534c6b1b63b01c15e1a2fe8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;Tensor&lt;/code&gt; whose shape matches &lt;code&gt;predictions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c8a39d1da2bd22e9e33009cde5c978788f994d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Coefficients for the loss a scalar, a tensor of shape &lt;code&gt;[batch_size]&lt;/code&gt; or a tensor whose shape matches &lt;code&gt;predictions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7914588eeb58c9b4c4ca58132107010bcf4c0910" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Coefficients for the loss. This must be scalar or broadcastable to &lt;code&gt;labels&lt;/code&gt; (i.e. same rank and each dimension is either 1 or the same).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1903395c031b9678308f760b908a5fc5a9c4fb0e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: If non-None, must be the same shape as arr. For each value in &lt;code&gt;arr&lt;/code&gt;, the bin will be incremented by the corresponding weight instead of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f87ed31018d1fcef1fbb9433a88ace6223d056c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; that is broadcastable to loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f315e6e9e5e867a9af975c56e445606661be186" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; whose rank is either 0, or the same rank as &lt;code&gt;labels&lt;/code&gt;, and must be broadcastable to &lt;code&gt;labels&lt;/code&gt; (i.e., all dimensions must be either &lt;code&gt;1&lt;/code&gt;, or the same as the corresponding &lt;code&gt;labels&lt;/code&gt; dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7aea5d732e3d555b25ba7043c12a15afa7a2a43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; whose rank is either 0, or the same rank as &lt;code&gt;labels&lt;/code&gt;, and must be broadcastable to &lt;code&gt;labels&lt;/code&gt; (i.e., all dimensions must be either &lt;code&gt;1&lt;/code&gt;, or the same as the corresponding &lt;code&gt;labels&lt;/code&gt; dimension). Also, dimension &lt;code&gt;dim&lt;/code&gt; must be &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d99c502998245233e404bfe1a6794ef0fefd8d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; whose rank is either 0, or the same rank as &lt;code&gt;labels&lt;/code&gt;, and must be broadcastable to &lt;code&gt;labels&lt;/code&gt; (i.e., all dimensions must be either &lt;code&gt;1&lt;/code&gt;, or the same as the corresponding &lt;code&gt;losses&lt;/code&gt; dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da590f2a78b63b6efa6822d69a04837e19ae72bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; whose rank is either 0, or the same rank as &lt;code&gt;losses&lt;/code&gt;, and must be broadcastable to &lt;code&gt;losses&lt;/code&gt; (i.e., all dimensions must be either &lt;code&gt;1&lt;/code&gt;, or the same as the corresponding &lt;code&gt;losses&lt;/code&gt; dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc0e63e55f31ed04016ce3a1d41e1db12506926" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Tensor&lt;/code&gt; whose rank is either 0, or the same rank as &lt;code&gt;values&lt;/code&gt;, and must be broadcastable to &lt;code&gt;values&lt;/code&gt; (i.e., all dimensions must be either &lt;code&gt;1&lt;/code&gt;, or the same as the corresponding &lt;code&gt;values&lt;/code&gt; dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89465e4d0e4294ae784a2b035829fcfe1324cdeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: a 2D tensor. Dimensions typically: in_units, out_units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8cf3345124d1c01c1b7951b24d0811eb96507a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;weights&lt;/code&gt;&lt;/b&gt;: a list of Numpy arrays. The number of arrays and their shape must match number of the dimensions of the weights of the layer (i.e. it should match the output of &lt;code&gt;get_weights&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbc1a38c6b0777a6ebd420ce6be064b4f920d81" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;whence&lt;/code&gt;&lt;/b&gt;: Valid values for whence are: 0: start of the file (default) 1: relative to the current position of the file 2: relative to the end of file. &lt;code&gt;offset&lt;/code&gt; is usually negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc57d4992aa2830a80ec7ca5cd61433f92d25eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;whole&lt;/code&gt;&lt;/b&gt;: The sequence in which to look for prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afed6cf8cdf6f1f98dfc65d0495b7f326f38aea2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;width&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;. Pad pre-decimal numbers to this width. Applies to both floating point and integer numbers. Only used if width &amp;gt; -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1516f5c6924065a4403eb080708bd725ad3d63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;width&lt;/code&gt;&lt;/b&gt;: Progress bar width on screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91e859e862431e5e3f87b9a25dff9d2af771f7e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;width_factor&lt;/code&gt;&lt;/b&gt;: Positive integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3755be9e5e92beb9dfae45433d6c1d2463d4c350" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;width_shift_range&lt;/code&gt;&lt;/b&gt;: Float, 1-D array-like or int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c75b1c0af88f0eda04feed62ae92952544fc95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;window_bits&lt;/code&gt;&lt;/b&gt;: int or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90391a854d671e1310ccf47da0ffcd3a5dd9e82" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;window_fn&lt;/code&gt;&lt;/b&gt;: A callable that takes a window length and a &lt;code&gt;dtype&lt;/code&gt; keyword argument and returns a &lt;code&gt;[window_length]&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; of samples in the provided datatype. If set to &lt;code&gt;None&lt;/code&gt;, no windowing is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb22fcf19170a387e7a8e4a5d2b2289c7deed3d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;window_length&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;Tensor&lt;/code&gt; indicating the window length to generate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5e4809ed471a2996f1de0c84112882199f9c0c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;window_shape&lt;/code&gt;&lt;/b&gt;: Sequence of N ints &amp;gt;= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cab4c453024d6f7979f0de3868c04a38fe36c41" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;window_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to &lt;code&gt;reduce_func&lt;/code&gt;. Mutually exclusive with &lt;code&gt;window_size_func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d442c81fc4735fd26443d27c2f65d15e64b89b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;window_size_func&lt;/code&gt;&lt;/b&gt;: A function mapping a key to a &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of consecutive elements matching the same key to combine in a single batch, which will be passed to &lt;code&gt;reduce_func&lt;/code&gt;. Mutually exclusive with &lt;code&gt;window_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1dcf83abc1fbd39c5b073467287cdddbfa2138" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;worker_config&lt;/code&gt;&lt;/b&gt;: (optional) &lt;code&gt;tf.ConfigProto&lt;/code&gt; to initialize workers. Can be used to instantiate multiple devices etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8443b9dd3808b01b7f171419843341e0032723" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;worker_device&lt;/code&gt;&lt;/b&gt;: String. Device of the &lt;code&gt;worker&lt;/code&gt; job. If empty no &lt;code&gt;worker&lt;/code&gt; job is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c3ef52ecf277ea7520e0a813cd15e0ca5778f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;workers&lt;/code&gt;&lt;/b&gt;: Integer. Used for generator or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; input only. Maximum number of processes to spin up when using process-based threading. If unspecified, &lt;code&gt;workers&lt;/code&gt; will default to 1. If 0, will execute the generator on the main thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd21200e7c6f602ad6bf77addc026c60c933ea1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;workers&lt;/code&gt;&lt;/b&gt;: Integer. Used for generator or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; input only. Maximum number of processes to spin up when using process-based threading. If unspecified, &lt;code&gt;workers&lt;/code&gt; will default to 1. If 0, will execute the generator on the main thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe6194e25319544414cd87b15d9334ea1a76a62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;workers&lt;/code&gt;&lt;/b&gt;: Number of workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a6c1c0ea8a3055ca7dbea6c88b9275174325b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_callback&lt;/code&gt;&lt;/b&gt;: A function pointer that can be used to write intermediate steps of graph transformation (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa5646d9b675bcb54eec164deeb2138d085b8b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_grads&lt;/code&gt;&lt;/b&gt;: whether to visualize gradient histograms in TensorBoard. &lt;code&gt;histogram_freq&lt;/code&gt; must be greater than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f022def2d4215ce6911f0e01ba6c91cebe4d4ea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_graph&lt;/code&gt;&lt;/b&gt;: whether to visualize the graph in TensorBoard. The log file can become quite large when write_graph is set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2f34bef567a8b2b26ebe48e3d98c656c31ffa0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_images&lt;/code&gt;&lt;/b&gt;: whether to write model weights to visualize as image in TensorBoard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9a964256e3afa17066407183bfb75ab6049aa3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_meta_graph&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Boolean&lt;/code&gt; indicating whether or not to write the meta graph file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594b51548a05cf73650173e44c966ea6da3ae180" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_state&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Boolean&lt;/code&gt; indicating whether or not to write the &lt;code&gt;CheckpointStateProto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca7fb5a7a952323bb6cc4af2a5d9dacad2c2766" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;write_version&lt;/code&gt;&lt;/b&gt;: controls what format to use when saving checkpoints. It also affects certain filepath matching logic. The V2 format is the recommended choice: it is much more optimized than V1 in terms of memory required and latency incurred during restore. Regardless of this flag, the Saver is able to restore from both V2 and V1 checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529a4296d60d906be84eaf3eacfe94870f97e9b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/b&gt;: The &lt;a href=&quot;summarywriter&quot;&gt;&lt;code&gt;tf.summary.SummaryWriter&lt;/code&gt;&lt;/a&gt; resource to flush. The thread default will be used if this parameter is None. Otherwise a &lt;a href=&quot;../no_op&quot;&gt;&lt;code&gt;tf.no_op&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bae07a7c451350aab44b2c7d7769c3d50b7b85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x1&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adfbcc56c7508342cb26ff578fbe72e5d2ce8ad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;x1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f027d76de661fb20dfecc37c08a72453d02c6db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;LinearOperator&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; with compatible shape and same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;self&lt;/code&gt;. See class docstring for definition of compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc57437b27d4d69c0e8a33f5fb9dc65693b6467f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; numerator of numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4dcdffca5fc86cc141695e7022af50d8b7c5bb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; numerator of real numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f57fc358d004b73e8132c5402a30075a195cfeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; to conjugate. Must have numeric or variant type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa56a351fca608cf5672c6816bea85be8ca0cf4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; whose basetype is integer and is not quantized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f90facb3b909822304499673941ad1ce4e2dc28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; with compatible shape and same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;self&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; is treated as a [batch] vector meaning for every set of leading dimensions, the last dimension defines a vector. See class docstring for definition of compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f789d44cedbf5e15151997d83815033a3975e50c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; with same &lt;code&gt;dtype&lt;/code&gt; and shape broadcastable to &lt;code&gt;self.shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6536518d4f76c129e5eba4c568820a43a46fb8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; with type &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76032e684ac80300f15ba43e45708999f9e4e1d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt;, input tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614f0281e9bbe718cdea60ff13dbaa882373827e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06da217cfbfbaba0d86cb6ede6ef97b9d1d7396b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A 0-D scalar &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6385dae597d1a861e299fb2e588cd5adbd5550" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../indexedslices&quot;&gt;&lt;code&gt;tf.IndexedSlices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f668e3e9057b08657994d764338a6c8ce425c039" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbfe4e4b07e59a5745d7f24dfe66be6ab70b9cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, or &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72dbca90263eefde7fc84a0cd8884c91582fe3b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, or &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24b4ebbe98043e0126f67377d719c0b3aedd820" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;&lt;code&gt;complex64&lt;/code&gt; or &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e858ccee43c57f9fec8f86259ed9ef7e32cc952a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;IndexedSlices&lt;/code&gt; to be scaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce351f80de325a1dfca5bc693350f01294b5f18a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;SparseTensor&lt;/code&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt; or &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf5fad6b68e2374d2390d7fec993ebb4c0a7b4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;SparseTensor&lt;/code&gt; or &lt;code&gt;IndexedSlices&lt;/code&gt; of numeric type. It could be &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcc8feb01acfa726ffb35879c532b437df1595b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;SparseTensor&lt;/code&gt; or &lt;code&gt;IndexedSlices&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d504c51f54e151d25c7be96f6efc620cd9baa04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;SparseTensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cd257046a1dd554b8abe219ea04678958c11c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; representing the variable of the polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107e0e7df94bb00e0f66533309eaf6b4798284dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; type bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092c5d317f3d470b85bf9ffbfbd82a23a22dce2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9b6e1f25d4a9addfba16b9d42fa9c7040478af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. 1-D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9cd2cb80875238a77d75511724f145004937bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. 1-D. Values to keep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9f4d76040176e3a8f24e8d780f77e8faf5af30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1c2caff509f8c51a9bee2e2e6f0955e14135cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dc2927789bb9687c9f972c233c3094d6d8701d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b58b82ff3db493a4acfcd8e0f25f79a3faad11f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3c44df3ecbad78084bb6bc06908afc675742b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a3689b2ddf3f098fb9043042703029d1d7c0b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847c6006cf594c4abce61dbc241bda590ad39f0b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340766e85927ad15d9ff5b0c121d3612e7a909ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2816bf8dbf9995c4b282d4d20e4e1dfe46498ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;, &lt;code&gt;qint8&lt;/code&gt;, &lt;code&gt;quint8&lt;/code&gt;, &lt;code&gt;qint32&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa5063cc99e3d6c6546f218afe9d9b3c056cc23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49269d1c6657c40eb96912f944b8c5c368628851" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e7b5216c6299ecbb10bbdfaa0a46ff65ebba2d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1af75a0dcb1a3b365b0c2fb31bccb37fa6bb85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 1-D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f463b0bc8a133e1bce82555c6e053d5a7f86f09" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b085cff25f5b93d810ef882ab055df946b81a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b200163e90f7beba3402b72dc227f53184206f60" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61266660d0d16d333025c5f7477e7d5321ce570" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A Tensor which is of the same type as &lt;code&gt;y&lt;/code&gt;, and may be broadcastable with &lt;code&gt;condition&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475df4609f4112dbf5ee01f6db554aa9f59d2917" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A Tensor which may have the same shape as &lt;code&gt;condition&lt;/code&gt;. If &lt;code&gt;condition&lt;/code&gt; is rank 1, &lt;code&gt;x&lt;/code&gt; may have higher rank, but its first dimension must match the size of &lt;code&gt;condition&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbec4295b4f4071963c8a05584b01332f924c408" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A Tensor with type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, or &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8ef33f7ce60b1a70516975b1caba25bae1f195" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A Tensor with type &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d64ad9916832b64a0b595094e490232ed22b00d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A Variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0632a2181baa8161600faaf3216a1ae7c3d65de1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A candidate tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95667493dd6b8a0fee1e9e68470a4118f2ff7490" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A floating point tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a40f3765ec06a954a5ebb1847b2163cbe1aedf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A python object to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9c20712da8325f4d87cf567e3f447929b4fb4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A rank &lt;code&gt;n + 1&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;, &lt;code&gt;n &amp;gt;= 0&lt;/code&gt; with type &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458ce99741a9331c83ed3eef00f45b49e06d21c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A tensor or variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e58cf9a958ae17ead59418484fae89d36b33893" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A tensor or variable to compute the activation function for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e3fda39af7fd8c3d8396dd4a35603c505cf0ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A tensor or variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50bde8c9fd3e418d28da37a9c05fc6f1f151913" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e5da656770140c3a046ad5ccd131c4c9153004" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: A variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c52ca23258bbe98d00f1ff044ee1edd78c229c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Alias for t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752ae579a389bbd92a511520b16672f080980242" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Float or complex &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996ac47c1594794479c9d10a7ba9f323e3c6c804" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input &lt;code&gt;Tensor&lt;/code&gt; of 4 dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f49bc43ca9a554f40f47514259b694e6d650d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input &lt;code&gt;Tensor&lt;/code&gt; of arbitrary dimensionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310c4104fc6900072dbe91a7ab8d54cae0749333" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input &lt;code&gt;tensor&lt;/code&gt; or &lt;code&gt;variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c606e392cea82cf04b0037b1bb24cb7fb721558c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input Numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1627b52ae18d00003c6f95f47aa091fdb0b6abe4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input data. It could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e174c403d68be2a2a4a8cd29571ce179e611a57a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input samples. It could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba9e4fb62cccdae862a542860eb3574779a75d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input tensor or variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4108f1ae19aa33f5d45d72755e6029a2ae367ae8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Input tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1175e71705f33ccbe68c2b67565801f2654886a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Keras tensor (or variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b4f7b1f999c15a816a46fdc301102625cca3c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Keras tensor or variable with &lt;code&gt;ndim &amp;gt;= 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c92d1834cfaca1a04c910d34d85d448ee1bfb1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Keras variable or Keras tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985774c49f24578a053cc10e7339c337bdc58fda" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Keras variable or tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d95e331f648095a6c677e5b0bd25c925cb27afa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: List of tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3813bdc8df23797e1aaffbc352d843a5f9a84a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Numeric &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346dd46378e651d1a9e442116b3098f7eecc9f44" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Numpy array of input data or tuple. If tuple, the second elements is either another numpy array or a list of numpy arrays, each of which gets passed through as an output without any modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fa8362acd1a0de2f8aee342312a394b7816564" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Numpy array or TensorFlow tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537e2b97d786dd6e9a68d1eb2e4d7422da364fec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Numpy array to normalize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7ea17dc26e3bb26a7198cf93b6d2854600e64b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2363fc2a868e8b34386581ea04f9332876bb02c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1bb26145d440b26d26f1cf3bc0626504113a00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Tensor or variable to resize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2828e144f6adbe2baf602569917d87641067244c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Tensor or variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ddb6001ecdb0502315b035e9320f047926f8ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Tensor to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08463d6904e1b29e0c2c80c328196ac3e8676fbb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Tensor to print.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9037ca10e3361a88c24a17932c19cebded114624" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Tensor to reverse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d43be655026789900063243e210594a89be909" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Tensor to set to a new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c49e87d7b9a567d97000e6da2966c2a687510e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;X&lt;/code&gt; in &lt;code&gt;A @ X = RHS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779e342f5f7fbc40dd49669e99f99d81a25970ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: The local tensor to the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8da4199f9034a079326cfa3684ee3f28e71bf08" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: The original input to &lt;a href=&quot;lu&quot;&gt;&lt;code&gt;tf.linalg.lu&lt;/code&gt;&lt;/a&gt;, i.e., &lt;code&gt;x&lt;/code&gt; as in, &lt;code&gt;lu_reconstruct(*tf.linalg.lu(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712aeefb612642e6d6a1a375d766f5b4c1289fb8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: Variable or tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff340d73a536ed3de2b6ac8fa8483d50f0ce1c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: What to return in test phase (tensor or callable that returns a tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e2ca0239cc3d4ed7ec5ea067874febef271084" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: What to return in train phase (tensor or callable that returns a tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731c0d45c15247678affae0bd0ab1fb68cfe6efe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: a 2D tensor. Dimensions typically: batch, in_units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82aecad8fa207f3106f17f177ed4cca14ab76324" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: a list arguments for the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1a72cea76b9c2d6bca2862b7ab17961d380f70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: a tensor or list of tensors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9b2f29a846930172930e8fd806d135b805a684" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: array-like, shape &lt;code&gt;(n_samples, n_features)&lt;/code&gt; Test samples where &lt;code&gt;n_samples&lt;/code&gt; is the number of samples and &lt;code&gt;n_features&lt;/code&gt; is the number of features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f98229d06bbc6979d1bf6ff0b577a2836c9b9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: array-like, shape &lt;code&gt;(n_samples, n_features)&lt;/code&gt; Training samples where &lt;code&gt;n_samples&lt;/code&gt; is the number of samples and &lt;code&gt;n_features&lt;/code&gt; is the number of features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6587bb7c0cfa9bf94d08d9c14bcd1679f0beec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: input data, as a Numpy array or list of Numpy arrays (if the model has multiple inputs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cb330d6ed6c93b8f11ebfc2df13a87be43c0d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: input tensor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91c434b5c3c964c91060471b6221c860eaf4545" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: input variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d91275a7de222f61cca377f4041b86a436fb9da" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: numpy array object or dict of numpy array objects. If an array, the array will be treated as a single feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2005736bba744b2b20b7635b33a2d9576a5e2b80" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: pandas &lt;code&gt;DataFrame&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10921f90e7a15ed81f56e8a927f7796bd506e10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: tensor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67e21f7fc0bdc8c688c20ef3bb9200ea508b577" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x&lt;/code&gt;&lt;/b&gt;: tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d9d29c0706ebe5568914f15a9f6b238aecf25b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x_density&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;300&lt;/code&gt;. Horizontal pixels per density unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1baa0b5746375a787bec67cdbb4b0e69c60c0097" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x_init_value&lt;/code&gt;&lt;/b&gt;: (optional) a numpy array of the same shape as &quot;x&quot; representing the initial value of x. If x is a list, this should be a list of numpy arrays. If this is none, the function will pick a random tensor as the initial value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1515e53f2dcb478a0bb539877e8d88a83ed902f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;x_shape&lt;/code&gt;&lt;/b&gt;: the dimensions of x as a tuple or an array of ints. If x is a list, then this is the list of shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65184244e7522fa58c41eb7c30796b7bda473cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;xmp_metadata&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt;. Defaults to &lt;code&gt;&quot;&quot;&lt;/code&gt;. If not empty, embed this XMP metadata in the image header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7684e650ac430c30df7c26569012b0e40b4b24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;xs&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or list of tensors to be used for differentiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3923908ab676b6b003844b06f57d924873cf90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; denominator of numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8f07b18357311517b3246367aafc83aeac723a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; denominator of real numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ecd5b5056d8ef65d40314d00391f852ed8ffb9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A 4D Tensor for the normalized, scaled, offsetted x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f79f4df1a16c20aee2b5c770640bdfe5ec65dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../indexedslices&quot;&gt;&lt;code&gt;tf.IndexedSlices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f29e500ab702b9e15c6fea14ecb2488fba78fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bb50bda81daf01a4df9fcf20a69f9cc4aa1db6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, or &lt;code&gt;complex128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49fcdea896169c17d875759b6fa9e6a9ba1ec97" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e1cf3985786e73eb6f3d3f04fd4f8ce5a6586c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; whose dtype is compatible with &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d309f83e19b37bd141250cacb3670690be37363" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Has the same type as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de93854630a0e533e56e64a8dba960c349441ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2941b9882f0eeab4ef245d194124a77d46fe996" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a7dc6dc3c91aa10e32b1f8913dc41f3354dffe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;x&lt;/code&gt;. 1-D. Values to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad9026f88f35e0abee8c72a9e72f614a7ee358c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;tensor&lt;/code&gt; with the same shape and type as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85eda321d9abda5d5dee4689847085664581b4b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: A Tensor which is of the same type as &lt;code&gt;x&lt;/code&gt;, and may be broadcastable with &lt;code&gt;condition&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ebe8f08692f32db55ce4b5a72662112d5e7b64" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Float or complex &lt;code&gt;Tensor&lt;/code&gt;, same &lt;code&gt;dtype&lt;/code&gt; as, and broadcastable to, &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2b79b187205427a0771905f45bcd7de3162471" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Float or complex &lt;code&gt;Tensor&lt;/code&gt;, same dtype as and broadcastable to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb401b2d539f0bcd11554795adc8815403bff30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Keras tensor or variable with &lt;code&gt;ndim &amp;gt;= 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71afbaf0153fdcaf3aa9e0f53730c259a489160d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Numeric &lt;code&gt;Tensor&lt;/code&gt;, same dtype as and broadcastable to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40d8c4f46c5afe36ce395d715b42fb24af299fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Numpy array of targets data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a48268aca64969ba08b41dbb0c5263b4bf95a7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Target data. Like the input data &lt;code&gt;x&lt;/code&gt;, it could be either Numpy array(s) or TensorFlow tensor(s). It should be consistent with &lt;code&gt;x&lt;/code&gt; (you cannot have Numpy inputs and tensor targets, or inversely). If &lt;code&gt;x&lt;/code&gt; is a dataset &lt;code&gt;y&lt;/code&gt; should not be specified (since targets will be obtained from the iterator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0efdb5b90dddba6f7cf57146dee2b27ad1a1dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Target data. Like the input data &lt;code&gt;x&lt;/code&gt;, it could be either Numpy array(s) or TensorFlow tensor(s). It should be consistent with &lt;code&gt;x&lt;/code&gt; (you cannot have Numpy inputs and tensor targets, or inversely). If &lt;code&gt;x&lt;/code&gt; is a dataset, &lt;code&gt;y&lt;/code&gt; should not be specified (since targets will be obtained from the iterator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f804f2f4ceac6984d089ba2c65c761ddd97fe6e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Target data. Like the input data &lt;code&gt;x&lt;/code&gt;, it could be either Numpy array(s) or TensorFlow tensor(s). It should be consistent with &lt;code&gt;x&lt;/code&gt; (you cannot have Numpy inputs and tensor targets, or inversely). If &lt;code&gt;x&lt;/code&gt; is a dataset, generator or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instance, &lt;code&gt;y&lt;/code&gt; should not be specified (since targets will be obtained from the iterator/dataset).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f153924637911ca44e6279571867031e5e2fdb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Target data. Like the input data &lt;code&gt;x&lt;/code&gt;, it could be either Numpy array(s) or TensorFlow tensor(s). It should be consistent with &lt;code&gt;x&lt;/code&gt; (you cannot have Numpy inputs and tensor targets, or inversely). If &lt;code&gt;x&lt;/code&gt; is a dataset, generator or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instance, &lt;code&gt;y&lt;/code&gt; should not be specified (since targets will be obtained from the iterator/dataset).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9742360fb0a328ba35034dc1717c29988b4898f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Target data. Like the input data &lt;code&gt;x&lt;/code&gt;, it could be either Numpy array(s) or TensorFlow tensor(s). It should be consistent with &lt;code&gt;x&lt;/code&gt; (you cannot have Numpy inputs and tensor targets, or inversely). If &lt;code&gt;x&lt;/code&gt; is a dataset, generator, or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instance, &lt;code&gt;y&lt;/code&gt; should not be specified (since targets will be obtained from &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c58deb64ba3b16bb78de0292cd73df73b70c7ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Target data. Like the input data &lt;code&gt;x&lt;/code&gt;, it could be either Numpy array(s) or TensorFlow tensor(s). It should be consistent with &lt;code&gt;x&lt;/code&gt; (you cannot have Numpy inputs and tensor targets, or inversely). If &lt;code&gt;x&lt;/code&gt; is a dataset, generator, or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instance, &lt;code&gt;y&lt;/code&gt; should not be specified (since targets will be obtained from &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59ca9084d55cfaa2347749f67836bd60e779b1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: Tensor or variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04662edb29ce511f32d2c92dfa7484a2408a0ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: a tensor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02484659b97c7524db4009d8127dbeacab9c3ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: array-like, shape &lt;code&gt;(n_samples,)&lt;/code&gt; True labels for &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6f762fc2cdc89145448d4805b557af98def189" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: array-like, shape &lt;code&gt;(n_samples,)&lt;/code&gt; or &lt;code&gt;(n_samples, n_outputs)&lt;/code&gt; True labels for &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72f45e483e6dce9fe1e444c235a628ba94d86ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: class vector to be converted into a matrix (integers from 0 to num_classes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b3705a18d80ccda8873d9e109c8898d79dd30d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: numpy array object or dict of numpy array object. &lt;code&gt;None&lt;/code&gt; if absent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4600a84e928ce923f47b4055875924c7e7ac621" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y&lt;/code&gt;&lt;/b&gt;: pandas &lt;code&gt;Series&lt;/code&gt; object or &lt;code&gt;DataFrame&lt;/code&gt;. &lt;code&gt;None&lt;/code&gt; if absent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b21007656fea7537ac357a1e15ad12616ece1c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_density&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;300&lt;/code&gt;. Vertical pixels per density unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f364cea7b369970fdfa855123005b727a388e116" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_pred&lt;/code&gt;&lt;/b&gt;: Tensor of predicted targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f3b3ba9fa88ae3530e3b07a1052ff1572ccf84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_pred&lt;/code&gt;&lt;/b&gt;: The predicted values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c0ef311cf3cd3d3256cbacf04df595a0e81936" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_pred&lt;/code&gt;&lt;/b&gt;: The predicted values. Each element must be in the range &lt;code&gt;[0, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ebff84f6a0b9b15b9d92f5e6f9b4711ec29e93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_pred&lt;/code&gt;&lt;/b&gt;: The predicted values. shape = &lt;code&gt;[batch_size, d0, .. dN]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4045d10ffd77d896c57d1d387aaa3d051cf07e39" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_pred&lt;/code&gt;&lt;/b&gt;: tensor &lt;code&gt;(samples, time_steps, num_categories)&lt;/code&gt; containing the prediction, or output of the softmax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dfead17816a7d1de33c1053175292bd763f5c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_pred&lt;/code&gt;&lt;/b&gt;: tensor of predicted targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6ef0a45fcb23538011ea3d369eecbdc87ef186" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_shape&lt;/code&gt;&lt;/b&gt;: the dimensions of y as a tuple or an array of ints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c33ac9824592de8d2de5fc4ee0c9ad4f60bb84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: Ground truth values, with the same shape as 'y_pred'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e42f969af1ce9f8501b88331648b0f108a6569" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: Ground truth values. shape = &lt;code&gt;[batch_size, d0, .. dN]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f69676e7fc3f7fed608e88d225246f63c5cda06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: Tensor of true targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74e70406a3d0046d0c9f91258e325ec54ffdc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: The ground truth values, with the same dimensions as &lt;code&gt;y_pred&lt;/code&gt;. Will be cast to &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9482595cb2783a6a49d8cb1ad9e95548117e2d04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: The ground truth values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f3787d495eda0c8f276e68c7fb71e2114731a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: The ground truth values. &lt;code&gt;y_true&lt;/code&gt; values are expected to be -1 or 1. If binary (0 or 1) labels are provided they will be converted to -1 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0117733340ec740882f3861b26fd43496224ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: The ground truth values. &lt;code&gt;y_true&lt;/code&gt; values are expected to be -1 or 1. If binary (0 or 1) labels are provided we will convert them to -1 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de62cc86ae9e9eac3c04b5b327f102ea10b796bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: tensor &lt;code&gt;(samples, max_string_length)&lt;/code&gt; containing the truth labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457688210f6ccdd51ac703675b7d26042bc96acb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;y_true&lt;/code&gt;&lt;/b&gt;: tensor of true targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035e82a71f1811a9a429f95bf0a06ec6f5d6c979" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;yaml_string&lt;/code&gt;&lt;/b&gt;: YAML string encoding a model configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e78ebf8cd76b366f40de735a0926e56a0f1055" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;year&lt;/code&gt;&lt;/b&gt;: A year (e.g., 2018). Must be an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3953a1ef902b48d5bb46e69ef2690504bc5c7396" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;yield_single_examples&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;False&lt;/code&gt;, yields the whole batch as returned by the &lt;code&gt;model_fn&lt;/code&gt; instead of decomposing the batch into individual elements. This is useful if &lt;code&gt;model_fn&lt;/code&gt; returns some tensors whose first dimension is not equal to the batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88061f15142010487abd23d5c04470ee59459ec1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ys&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or list of tensors to be differentiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd111ff8ddd9b16df14a7975a401f23e676bb3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zca_epsilon&lt;/code&gt;&lt;/b&gt;: epsilon for ZCA whitening. Default is 1e-6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c8cce97aaddf5bd213edfd7e4823f466af3be5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zca_whitening&lt;/code&gt;&lt;/b&gt;: Boolean. Apply ZCA whitening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f39c859832d292486c40dbc0fd462c8b18d69c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zero_debias&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, zero debias moving-averages that are initialized with tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f715e9d7a7e08a80e6cff3ffd04f1de9fadd7d97" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zero_output_for_mask&lt;/code&gt;&lt;/b&gt;: Boolean. If True, the output for masked timestep will be zeros, whereas in the False case, output from previous timestep is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5d2bce697bcd80022e10a4583739f2c2904176" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zone&lt;/code&gt;&lt;/b&gt;: Zone of the GCE instance group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cdc53cebdb0fa1a43a1f177cfeac923020fd76" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zone&lt;/code&gt;&lt;/b&gt;: Zone where the TPUs are located. If omitted or empty, we will assume that the zone of the TPU is the same as the zone of the GCE VM, which we will try to discover from the GCE metadata service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbcacbcc9d6b8ebcc9aba498046b8599be5c876" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;zoom_range&lt;/code&gt;&lt;/b&gt;: Float or [lower, upper]. Range for random zoom. If a float, &lt;code&gt;[lower, upper] = [1-zoom_range, 1+zoom_range]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db6016aba80d2c5c7862e3f2ecef82667738e35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;other term&amp;gt; -&amp;gt; bucket_id&lt;/code&gt;, where bucket_id will be between &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;3 + num_oov_buckets - 1&lt;/code&gt;, calculated by: &lt;code&gt;hash(&amp;lt;term&amp;gt;) % num_oov_buckets + vocab_size&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b45335b088864c99e2a8042b2c8681cd9a22611" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;''&lt;/code&gt;: Use a default format based on the number of channels in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a44e1f66a3ce2eb83a39ede46de5b8cb85c765" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'/': 'scope_name/'&lt;/code&gt; - will load all variables in current &lt;code&gt;scope_name&lt;/code&gt; from checkpoint's root (e.g. no scope).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d1784742305561f6be775fa67af07c1cdfd927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'checkpoint_scope_name/': 'scope_name/'&lt;/code&gt; - will load all variables in current &lt;code&gt;scope_name&lt;/code&gt; from &lt;code&gt;checkpoint_scope_name&lt;/code&gt; with matching tensor names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6741fd224edc1a30b95c4e395bc8ab1136bbba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'checkpoint_scope_name/some_other_variable': 'scope_name/variable_name'&lt;/code&gt; - will initialize &lt;code&gt;scope_name/variable_name&lt;/code&gt; variable from &lt;code&gt;checkpoint_scope_name/some_other_variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e6de68d78cd6b30fceb4935ebf32bf029e2a68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'ignore'&lt;/code&gt;: Skip illegal substrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36cff101a0db7032a97cfdb351469aec63ca03f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'replace'&lt;/code&gt;: Replace illegal substrings with &lt;code&gt;replacement_char&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9c3974de30af8393b5b2111452e25ad087b6bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'scope_variable_name': list(variable)&lt;/code&gt; - will initialize list of partitioned variables with tensor 'scope_variable_name' from the checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e67202bfe4a7c2c9f528c59b1b06804e6b3cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'scope_variable_name': variable&lt;/code&gt; - will initialize given &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; object with tensor 'scope_variable_name' from the checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0291e8122db8f996a39605e5bef6e253a1103888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'strict'&lt;/code&gt;: Raise an exception for any illegal substrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d0af2452b75221160507a272f89ca60006b1ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0.2 * x + 0.5&lt;/code&gt; if &lt;code&gt;-2.5 &amp;lt;= x &amp;lt;= 2.5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c1b4066208fb52a9b002160fc815660b3e172d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt; if &lt;code&gt;x &amp;lt; -2.5&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7af2366166b0cb0b6f5c9acc6c1ea6393ca46ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt; is a reserved index that won't be assigned to any word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63696234eb7d2e133852931378a5680e10445b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1&lt;/code&gt; if &lt;code&gt;x &amp;gt; 2.5&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9c2f118638489896affd3a30965c2f07ec82aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1&lt;/code&gt;: large, dense models, &lt;code&gt;2&lt;/code&gt;: small models, &lt;code&gt;3&lt;/code&gt;: large, sparse models,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b9adf974e5c252245e7989d11d22db627317cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2&lt;/code&gt; stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac4cda2c0e8a69ce29bfd76f7f6b22e70d2a887" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;3&lt;/code&gt; stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4dfd5b5359d71df664a969c528041bf708c72d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A B B B B&lt;/code&gt; if &lt;code&gt;merge_repeated=False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c725decff2ae21344504da24c65d3da4a71014d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A B B B&lt;/code&gt; if &lt;code&gt;merge_repeated = False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff10542d11ff47e1197c9c264497be754fa8464" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A B B B&lt;/code&gt; if &lt;code&gt;merge_repeated=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a9248ac76569d659d73a432a140a58d2c80cde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A B&lt;/code&gt; if &lt;code&gt;merge_repeated = True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18af9e65c023fcf59fada1bfedad51f84ca940b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ADD_N&lt;/code&gt;: All of the gradient terms are summed as part of one operation using the &quot;AddN&quot; op (see &lt;a href=&quot;math/add_n&quot;&gt;&lt;code&gt;tf.add_n&lt;/code&gt;&lt;/a&gt;). This method has the property that all gradients must be ready and buffered separately in memory before any aggregation is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087de71eed92d30244fcfdfe80bd5de2f63b2420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AUTO&lt;/code&gt;: Default to runtime's automatic choices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7884bb6abcfc949c26e752ded97a5ee15e1f4989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AUTO&lt;/code&gt;: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to &lt;code&gt;SUM_OVER_BATCH_SIZE&lt;/code&gt;. When used with &lt;a href=&quot;../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;, outside of built-in training loops such as &lt;a href=&quot;../../keras&quot;&gt;&lt;code&gt;tf.keras&lt;/code&gt;&lt;/a&gt;&lt;code&gt;compile&lt;/code&gt; and &lt;code&gt;fit&lt;/code&gt;, we expect reduction value to be &lt;code&gt;SUM&lt;/code&gt; or &lt;code&gt;NONE&lt;/code&gt;. Using &lt;code&gt;AUTO&lt;/code&gt; in that case will raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17a991c0deec1b1876bbddefad61427a1244ceb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AUTO&lt;/code&gt;: Indicates that the synchronization will be determined by the current &lt;code&gt;DistributionStrategy&lt;/code&gt; (eg. With &lt;code&gt;MirroredStrategy&lt;/code&gt; this would be &lt;code&gt;ON_WRITE&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a745993b53bedf7580d6937960494de77b4805e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Beta(x) = prod_j Gamma(x_j) / Gamma(sum_j x_j)&lt;/code&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Beta_function#Multivariate_beta_function&quot;&gt;multivariate beta function&lt;/a&gt;, and,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae3dd69b1ad825f8350c4b99729ea8d9e591330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BlackList&lt;/code&gt;: Ops that are numerically unsafe to execute in float16 and can negatively affect downstream nodes. E.g. &lt;code&gt;Softmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeddbc8feea74d42cc4602e3b62ec386e98c802a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CategoricalColumn&lt;/code&gt;: Will use the transformed tensor produced by this column. Does not support hashed categorical column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15ec29e213a0f90311dda555f773fcac8321dad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Checkpoint&lt;/code&gt; objects have dependencies on the objects passed as keyword arguments to their constructors, and each dependency is given a name that is identical to the name of the keyword argument for which it was created. TensorFlow classes like &lt;code&gt;Layer&lt;/code&gt;s and &lt;code&gt;Optimizer&lt;/code&gt;s will automatically add dependencies on their variables (e.g. &quot;kernel&quot; and &quot;bias&quot; for &lt;a href=&quot;../../../keras/layers/dense&quot;&gt;&lt;code&gt;tf.keras.layers.Dense&lt;/code&gt;&lt;/a&gt;). Inheriting from &lt;a href=&quot;../../../keras/model&quot;&gt;&lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; makes managing dependencies easy in user-defined classes, since &lt;code&gt;Model&lt;/code&gt; hooks into attribute assignment. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9564b0e2d76961bb36823ce53152c073e31364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Checkpoint&lt;/code&gt; objects have dependencies on the objects passed as keyword arguments to their constructors, and each dependency is given a name that is identical to the name of the keyword argument for which it was created. TensorFlow classes like &lt;code&gt;Layer&lt;/code&gt;s and &lt;code&gt;Optimizer&lt;/code&gt;s will automatically add dependencies on their variables (e.g. &quot;kernel&quot; and &quot;bias&quot; for &lt;a href=&quot;../keras/layers/dense&quot;&gt;&lt;code&gt;tf.keras.layers.Dense&lt;/code&gt;&lt;/a&gt;). Inheriting from &lt;a href=&quot;../keras/model&quot;&gt;&lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; makes managing dependencies easy in user-defined classes, since &lt;code&gt;Model&lt;/code&gt; hooks into attribute assignment. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f21f45ad0e3b2ae1904b7282d2eca7dc1a8feda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Checkpoint&lt;/code&gt;'s constructor accepts keyword arguments whose values are types that contain trackable state, such as &lt;a href=&quot;../keras/optimizers/optimizer&quot;&gt;&lt;code&gt;tf.keras.optimizers.Optimizer&lt;/code&gt;&lt;/a&gt; implementations, &lt;a href=&quot;../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;tf.keras.Layer&lt;/code&gt; implementations, or &lt;a href=&quot;../keras/model&quot;&gt;&lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; implementations. It saves these values with a checkpoint, and maintains a &lt;code&gt;save_counter&lt;/code&gt; for numbering checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397d90f4b1e9b9a77d7dcb601f7918f2ccb254bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Checkpoint&lt;/code&gt;'s constructor accepts keyword arguments whose values are types that contain trackable state, such as &lt;a href=&quot;optimizer&quot;&gt;&lt;code&gt;tf.compat.v1.train.Optimizer&lt;/code&gt;&lt;/a&gt; implementations, &lt;a href=&quot;../../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;tf.keras.Layer&lt;/code&gt; implementations, or &lt;a href=&quot;../../../keras/model&quot;&gt;&lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; implementations. It saves these values with a checkpoint, and maintains a &lt;code&gt;save_counter&lt;/code&gt; for numbering checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed074bed541d5b7d866fb86b2b3dc4874eef6efb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheckpointManager&lt;/code&gt; preserves its own state across instantiations (see the &lt;code&gt;__init__&lt;/code&gt; documentation for details). Only one should be active in a particular directory at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d07d313603d7804e9eed68f3dd000f917f5b77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheckpointReader&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f28bc32fc1c155186c6e7f44ba249cb9a04753e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheckpointSaverListener&lt;/code&gt; triggers only in steps when &lt;code&gt;CheckpointSaverHook&lt;/code&gt; is triggered, and provides callbacks at the following points: - before using the session - before each call to &lt;code&gt;Saver.save()&lt;/code&gt; - after each call to &lt;code&gt;Saver.save()&lt;/code&gt; - at the end of session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf207d78ef0567ddd1fd177c8a90d0b8d665fbb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ClearList&lt;/code&gt;: Ops that do not have numerically significant adverse effects. E.g. &lt;code&gt;ArgMax&lt;/code&gt; and &lt;code&gt;Floor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381268de73d5e6718cfbef8047b5cc537e6c99dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DEFAULT&lt;/code&gt;: The system-chosen default aggregation method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1646d808bed60d2a1cbfcd758f38432155ee9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dense&lt;/code&gt; implements the operation: &lt;code&gt;output = activation(dot(input, kernel) + bias)&lt;/code&gt; where &lt;code&gt;activation&lt;/code&gt; is the element-wise activation function passed as the &lt;code&gt;activation&lt;/code&gt; argument, &lt;code&gt;kernel&lt;/code&gt; is a weights matrix created by the layer, and &lt;code&gt;bias&lt;/code&gt; is a bias vector created by the layer (only applicable if &lt;code&gt;use_bias&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23539497c0b982f5f3ac821b1968a4d2b4f30e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DenseColumn&lt;/code&gt; that converts from sparse input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb455e2e7a579fab3c7493444747e1e0a4bb6f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DenseColumn&lt;/code&gt; that converts from sparse, categorical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e20036b78a3c6b4f1be3d183840c5dd5c4e1e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DeviceSpec&lt;/code&gt;s are used throughout TensorFlow to describe where state is stored and computations occur. Using &lt;code&gt;DeviceSpec&lt;/code&gt; allows you to parse device spec strings to verify their validity, merge them or compose them programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4deef2fc6e6ed643ab938706a0cad4f145182d41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dimension&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c178d55b3aaf5f53f65329ad07d7dec4a1a442c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distribution&lt;/code&gt; is a base class for constructing and organizing properties (e.g., mean, variance) of random variables (e.g, Bernoulli, Gaussian).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f0b7262d6909f63275b5cb9ec4e7173a923ad5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVAL&lt;/code&gt;: testing/evaluation mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82334f840f97a00148614074548d077c14ed575c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EXPERIMENTAL_TREE&lt;/code&gt;: Gradient terms are summed in pairs using using the &quot;AddN&quot; op. This method of summing gradients may reduce performance, but it can improve memory utilization because the gradients can be released earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4565b1e0d9942774a52958844a0851f0e02a27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EstimatorSpec&lt;/code&gt; fully defines the model to be run by an &lt;code&gt;Estimator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e4dbdaf0a7bcdd10428d1463c1f6b15b00af2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EstimatorSpec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EstimatorSpec&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="da2dea36e419dd9e3b3b4bc661bc95513732c0aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EvalSpec&lt;/code&gt; combines details of evaluation of the trained model as well as its export. Evaluation consists of computing metrics to judge the performance of the trained model. Export writes out the trained model on to external storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5d24f5098ff0501c14b241e35222cdada3f4af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; protocol buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b2509149357ca2577e4ff8c9991b9141591615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FULLY_REPARAMETERIZED&lt;/code&gt;: Samples from the distribution are fully reparameterized, and straight-through gradients are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd895c08cdb1b4aeb24e8ba968227c813f43ad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileWriter&lt;/code&gt; is not compatible with eager execution. To write TensorBoard summaries under eager execution, use &lt;code&gt;tf.contrib.summary&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55331e4d34d1094e53d426850e0a5d5fd466162a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixedLenFeature&lt;/code&gt; entries with a &lt;code&gt;default_value&lt;/code&gt; and &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt; entries with &lt;code&gt;allow_missing=True&lt;/code&gt; are optional; otherwise, we will fail if that &lt;code&gt;Feature&lt;/code&gt; or &lt;code&gt;FeatureList&lt;/code&gt; is missing from any example in &lt;code&gt;serialized&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5789b0bed9c8f9fa12421ae553bc1489584d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixedLenFeature&lt;/code&gt; entries with a &lt;code&gt;default_value&lt;/code&gt; are optional. With no default value, we will fail if that &lt;code&gt;Feature&lt;/code&gt; is missing from any example in &lt;code&gt;serialized&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e6610152dcc612e1da9405e4471e74b1671b5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ForwardAccumulator&lt;/code&gt; maintains JVPs corresponding primal tensors it is watching, derived from the original &lt;code&gt;primals&lt;/code&gt; specified in the constructor. As soon as a primal tensor is deleted, &lt;code&gt;ForwardAccumulator&lt;/code&gt; deletes the corresponding JVP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38803c2f6e5f78a32bf4b8be8a22e913f8a54005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GLOBAL_VARIABLES&lt;/code&gt;: the default collection of &lt;code&gt;Variable&lt;/code&gt; objects, shared across distributed environment (model variables are subset of these). See &lt;a href=&quot;global_variables&quot;&gt;&lt;code&gt;tf.compat.v1.global_variables&lt;/code&gt;&lt;/a&gt; for more details. Commonly, all &lt;code&gt;TRAINABLE_VARIABLES&lt;/code&gt; variables will be in &lt;code&gt;MODEL_VARIABLES&lt;/code&gt;, and all &lt;code&gt;MODEL_VARIABLES&lt;/code&gt; variables will be in &lt;code&gt;GLOBAL_VARIABLES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfaa43800771ed115d5076a550ecfff2ee8548a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Gamma(x)&lt;/code&gt;), element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c9ecf89fbf8835e12d7965f84a5d417eb52e2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Gamma&lt;/code&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma_function&quot;&gt;gamma function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fef2bc17e0071d8279afa1f27102aff7646704" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GrayList&lt;/code&gt;: Ops that are considered numerically safe for execution in float16 unless downstream from a BlackList Op. E.g. &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;AvgPool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dc8edbef087582af1adb6445b39acad79076ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I[predicate]&lt;/code&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Indicator_function&quot;&gt;indicator function&lt;/a&gt; for &lt;code&gt;predicate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c816e4bc47209b23bb47c252972fa5f76de60b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Input()&lt;/code&gt; is used to instantiate a Keras tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d693ce42d96a76cc03ac864f7fa80f31abb1cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgumentError&lt;/code&gt; if negative values are provided as an input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d46c1a9509036beca1e96623e507ec5b6ba3e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KMeansClustering.COSINE_DISTANCE&lt;/code&gt;: Cosine distance between vectors &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; is defined as \(1 - (u . v) / (||u||_2 ||v||_2)\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafbf0f8a2e6c6463d82d5eefe30da4047228cbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KMeansClustering.KMEANS_PLUS_PLUS_INIT&lt;/code&gt;: Use kmeans++ to choose centers from the first input batch. If the batch size is less than &lt;code&gt;num_clusters&lt;/code&gt;, a TensorFlow runtime error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6056cfd7dc620138decb462e1a40651764dbc3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KMeansClustering.RANDOM_INIT&lt;/code&gt;: Choose centers randomly from an input batch. If the batch size is less than &lt;code&gt;num_clusters&lt;/code&gt; then the entire batch is chosen to be initial cluster centers and the remaining centers are chosen from successive input batches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd821971f0ec47bca655698807b1f7e2794c4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KMeansClustering.SQUARED_EUCLIDEAN_DISTANCE&lt;/code&gt;: Euclidean distance between vectors &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; is defined as \(||u - v||_2\) which is the square root of the sum of the absolute squares of the elements' difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fddf17c85a2a6698b39edbaf575ca9a71127ca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOCAL_VARIABLES&lt;/code&gt;: the subset of &lt;code&gt;Variable&lt;/code&gt; objects that are local to each machine. Usually used for temporarily variables, like counters. Note: use &lt;code&gt;tf.contrib.framework.local_variable&lt;/code&gt; to add to this collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e340fe9146fb8cf952cfc270da2d8947c24e875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LearningRateSchedule&lt;/code&gt;s can be passed in as the learning rate of optimizers in &lt;a href=&quot;../../optimizers&quot;&gt;&lt;code&gt;tf.keras.optimizers&lt;/code&gt;&lt;/a&gt;. They can be serialized and deserialized using &lt;a href=&quot;serialize&quot;&gt;&lt;code&gt;tf.keras.optimizers.schedules.serialize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;deserialize&quot;&gt;&lt;code&gt;tf.keras.optimizers.schedules.deserialize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7a6ef4ca9387c73d6601a7a157c358407f5f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Linear activation function&lt;/code&gt; if input is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5a50e2529ce28e8fcb2d87311b94bbb6268601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] of Householder transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6169483f6f0427e3e35b3dc181587a614e2a51d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] of permutation matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba27049a5843096e34a96e2b59f0d180587b48c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] of toeplitz matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4a2c674a152cef5388620395ea9b07a5bc4946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] square diagonal matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01316bddfd2eec7cf35bdeb17412ab31a8b5b077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] square identity matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b287d172e55c01eda424be10fde0191d5b120f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] square lower triangular matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47c489a07c805cdde954dedda41798454bab48a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a [batch] zero matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2009a250fb7c564e1be32a72833a7766fde20a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a block circulant matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5016f220d1b9d769274ca74e7bc3f1f61fddb01a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a circulant matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7405cd53d9dbeca81166dd012d367d9052dd990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a nested block circulant matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d120becff67004fe00ff8327e46d624e9e3c287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; acting like a scaled [batch] identity matrix &lt;code&gt;A = c I&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4bf514f5f0fb827257aa38a15fe11017c20d8e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; representing inverse of this matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c8aea0f3024e340cb8600afdd8c7e4b0792c12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; representing the adjoint of another operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756c2fb0cc93dcb2654f07eba873fc556cd1ce17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; representing the inverse of another operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34abc127f9d76d1f8de1fa2c75c051a19d55d6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; subclasses should operate on a [batch] matrix with compatible shape. Class docstrings should define what is meant by compatible shape. Some subclasses may not support batching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd247ce36656ad29d31a6b42d7e68e5239b184f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; that wraps a [batch] matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd007a7feecaaae650ebadfcc74cb4bb15561956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; which represents the adjoint of this &lt;code&gt;LinearOperator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc659b6ce3fba2dc8718ff79a47916dfcf7c7d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperator&lt;/code&gt; which represents the lower triangular matrix in the Cholesky decomposition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df9a09d37812b194a7d31ee758f050c119031c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorAdjoint&lt;/code&gt; is initialized with an operator &lt;code&gt;A&lt;/code&gt;. The &lt;code&gt;solve&lt;/code&gt; and &lt;code&gt;matmul&lt;/code&gt; methods effectively flip the &lt;code&gt;adjoint&lt;/code&gt; argument. E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea384ae061474b95d834c72c2e78586bcf00196f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorBlockDiag&lt;/code&gt; is initialized with a list of operators &lt;code&gt;[op_1,...,op_J]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0de5fce8e1238dcffe0932fd832bcf529b28556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorComposition&lt;/code&gt; is initialized with a list of operators &lt;code&gt;[op_1,...,op_J]&lt;/code&gt;. For the &lt;code&gt;matmul&lt;/code&gt; method to be well defined, the composition &lt;code&gt;op_i.matmul(op_{i+1}(x))&lt;/code&gt; must be defined. Other methods have similar constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0da50fb7aa112db0b6c6df4a79824551e266f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorDiag&lt;/code&gt; is initialized with a (batch) vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0c601b97110065e272b80a044e4ff25b6b06c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorFullMatrix&lt;/code&gt; has exactly the same performance as would be achieved by using standard &lt;code&gt;TensorFlow&lt;/code&gt; matrix ops. Intelligent choices are made based on the following initialization hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f8054ec6565064f4a76d992483df4a8e88f48b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorHouseholder&lt;/code&gt; is initialized with a (batch) vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1865262798485f4f2c59b23c55fa5b4bedc43986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorIdentity&lt;/code&gt; is initialized with &lt;code&gt;num_rows&lt;/code&gt;, and a &lt;code&gt;multiplier&lt;/code&gt; (a &lt;code&gt;Tensor&lt;/code&gt;) of shape &lt;code&gt;[B1,...,Bb]&lt;/code&gt;. &lt;code&gt;N&lt;/code&gt; is set to &lt;code&gt;num_rows&lt;/code&gt;, and the &lt;code&gt;multiplier&lt;/code&gt; determines the scale for each batch member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5cb76703df47ee27a927d28d680daed042e9bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorIdentity&lt;/code&gt; is initialized with &lt;code&gt;num_rows&lt;/code&gt;, and optionally &lt;code&gt;batch_shape&lt;/code&gt;, and &lt;code&gt;dtype&lt;/code&gt; arguments. If &lt;code&gt;batch_shape&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, this operator efficiently passes through all arguments. If &lt;code&gt;batch_shape&lt;/code&gt; is provided, broadcasting may occur, which will require making copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8326e6f872dbb50656c51ac4083ef0af530f0e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorInversion&lt;/code&gt; is initialized with an operator &lt;code&gt;A&lt;/code&gt;. The &lt;code&gt;solve&lt;/code&gt; and &lt;code&gt;matmul&lt;/code&gt; methods are effectively swapped. E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebb2266855c2b456723c55ba75e60991b4a2d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorKronecker&lt;/code&gt; is initialized with a list of operators &lt;code&gt;[op_1,...,op_J]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5624f9805397310c1cb49466097ff3f91c33676" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorLowRankUpdate&lt;/code&gt; represents &lt;code&gt;A = L + U D V^H&lt;/code&gt;, where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f093a85dc8a46278cfd2f03edf3ed96d78bdce35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorLowerTriangular&lt;/code&gt; is initialized with a &lt;code&gt;Tensor&lt;/code&gt; having dimensions &lt;code&gt;[B1,...,Bb, N, N]&lt;/code&gt;. The upper triangle of the last two dimensions is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb80522278c568afd9d46a6248cda8eeb5d5c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorPermutation&lt;/code&gt; is initialized with a (batch) vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13af377a8eaac8622cfff8d58f00c624469033b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearOperatorZeros&lt;/code&gt; is initialized with &lt;code&gt;num_rows&lt;/code&gt;, and optionally &lt;code&gt;num_columns,&lt;/code&gt;batch_shape&lt;code&gt;, and&lt;/code&gt;dtype&lt;code&gt;arguments. If&lt;/code&gt;num_columns&lt;code&gt;is&lt;/code&gt;None&lt;code&gt;, then this operator will be initialized as a square matrix. If&lt;/code&gt;batch_shape&lt;code&gt;is&lt;/code&gt;None&lt;code&gt;, this operator efficiently passes through all arguments. If&lt;/code&gt;batch_shape` is provided, broadcasting may occur, which will require making copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f95397ed845115231cb167e4f90aa2744111b50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MEAN&lt;/code&gt;: Scalar &lt;code&gt;SUM&lt;/code&gt; divided by sum of weights. DEPRECATED.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51253ba17e8285ee2716f1c1fe0f9ac192716249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MEAN&lt;/code&gt;: Take the arithmetic mean (&quot;average&quot;) of the updates across replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4faf76778604f24e81c1c41d9f173869bb080b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MEAN&lt;/code&gt;: Take the arithmetic mean (&quot;average&quot;) of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69f826582d0eeb7cd9c38fa3a8f1b53c2e9c2cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MODEL_VARIABLES&lt;/code&gt;: the subset of &lt;code&gt;Variable&lt;/code&gt; objects that are used in the model for inference (feed forward). Note: use &lt;code&gt;tf.contrib.framework.model_variable&lt;/code&gt; to add to this collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1883ef54b9dc84c859799e6319528c3c4b50454e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MOVING_AVERAGE_VARIABLES&lt;/code&gt;: the subset of &lt;code&gt;Variable&lt;/code&gt; objects that will also keep moving averages. See &lt;a href=&quot;moving_average_variables&quot;&gt;&lt;code&gt;tf.compat.v1.moving_average_variables&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72eae347f9a42f2bfece9e7a603f06d99668c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Matrix&lt;/code&gt; is a tensor of shape &lt;code&gt;[..., M, M]&lt;/code&gt; whose inner-most 2 dimensions form square matrices. &lt;code&gt;Rhs&lt;/code&gt; is a tensor of shape &lt;code&gt;[..., M, K]&lt;/code&gt;. The &lt;code&gt;output&lt;/code&gt; is a tensor shape &lt;code&gt;[..., M, K]&lt;/code&gt;. If &lt;code&gt;adjoint&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; then each output matrix satisfies &lt;code&gt;matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]&lt;/code&gt;. If &lt;code&gt;adjoint&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; then each output matrix satisfies &lt;code&gt;adjoint(matrix[..., :, :]) * output[..., :, :] = rhs[..., :, :]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dca992eea836b3a2622d0990a8d5cdb02de6fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MeanTensor&lt;/code&gt; returns a tensor with the same shape of the input tensors. The mean value is updated by keeping local variables &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;. The &lt;code&gt;total&lt;/code&gt; tracks the sum of the weighted values, and &lt;code&gt;count&lt;/code&gt; stores the sum of the weighted counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd862228e69d7c9ebd5adbba8a0d4d7e4e89cd5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Model&lt;/code&gt; groups layers into an object with training and inference features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c05e8b6f7a1e553c8b20f004ed3fff53e6ec5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MonitoredSession&lt;/code&gt; can be created in &lt;code&gt;chief&lt;/code&gt; or &lt;code&gt;worker&lt;/code&gt; modes. &lt;code&gt;SingularMonitoredSession&lt;/code&gt; is always created as &lt;code&gt;chief&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d208d0b059fdf7b2cec251de05cb2ef6127d171" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MonitoredSession&lt;/code&gt; handles &lt;code&gt;AbortedError&lt;/code&gt; and &lt;code&gt;UnavailableError&lt;/code&gt; for distributed settings, but &lt;code&gt;SingularMonitoredSession&lt;/code&gt; does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348adaf1e94dc64ef50a1103a9561b67784d9528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N!&lt;/code&gt; denotes &lt;code&gt;N&lt;/code&gt; factorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9765481c13812f7ef03fd7cfd0bf62ab2732d368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N!&lt;/code&gt; is &lt;code&gt;N&lt;/code&gt; factorial, and,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b36adb0f915a615f6fb554f9ca43cdca2015c44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; is the number of elements in &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77845978e3f85a100eafb3e7e136804fa4ed083c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; is the size of the segment being reduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ec567f42b640ef4d3b0326b21e85ab4ba52422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NCCL&lt;/code&gt;: Use ncclAllReduce for all-reduce, and ring algorithms for all-gather.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb995cc17b82ada6e68f3f82f2eb04effb6fd370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NONE&lt;/code&gt;: Indicates that [None] will be returned if there is no path from x to y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7f5cf6d5264e91adfb2ea620e782a0bc00b41c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NONE&lt;/code&gt;: Indicates that there will only be one copy of the variable, so there is no need to sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc625c70fae6ceeef417cb12054a9e721bd78c24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NONE&lt;/code&gt;: This is the default, giving an error if you use a variable-update operation with multiple replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c3648358204c2c09c503a3451e468548766eb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NONE&lt;/code&gt;: Un-reduced weighted losses with the same shape as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a475332b166a7cfbd8c37b2bba235d24daf2bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NONE&lt;/code&gt;: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like &lt;code&gt;fit&lt;/code&gt;/&lt;code&gt;evaluate&lt;/code&gt;, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3789fa0ef761e033de19a91cea03ddff230d97e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOT_REPARAMETERIZED&lt;/code&gt;: Samples from the distribution are not fully reparameterized, and straight-through gradients are either partially unsupported or are not supported at all. In this case, for purposes of e.g. RL or variational inference, it is generally safest to wrap the sample results in a &lt;code&gt;stop_gradients&lt;/code&gt; call and use policy gradients / surrogate loss instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea4951711b29c3d649ed1af185093ec9dc528d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;None&lt;/code&gt;, in which case only TRAINABLE variables specified in &lt;code&gt;var_name_to_vocab_info&lt;/code&gt; will be warm-started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d356026bffd94f50767c36f88daddf198886370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ONLY_FIRST_REPLICA&lt;/code&gt;: This is for when every replica is performing the same update, but we only want to perform the update once. Used, e.g., for the global step counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8aeeffd38cdb030c59d46cecf811f3a7f5e8861" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ONLY_FIRST_TOWER&lt;/code&gt;: Deprecated alias for &lt;code&gt;ONLY_FIRST_REPLICA&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128475d3e22bc4c3d0fa4f822d772a9aae66e8bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ON_READ&lt;/code&gt;: Indicates that the variable will be aggregated across devices when it is read (eg. when checkpointing or when evaluating an op that uses the variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a7b127d83b4c4b45fd8e24bfc01ee6b572bc55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ON_WRITE&lt;/code&gt;: Indicates that the variable will be updated across devices every time it is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de8decc863d426d6327672f50feb2cc12c1958b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ops&lt;/code&gt; that expect iterables of &lt;code&gt;Tensor&lt;/code&gt; can call this to validate input. Useful since &lt;code&gt;Tensor&lt;/code&gt;, &lt;code&gt;ndarray&lt;/code&gt;, byte/text type are all iterables themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aad4f8b8bbd83a0280d4440e11fcef0191b67d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Optional&lt;/code&gt; can only be used by values that are convertible to &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;CompositeTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a2a55c2e36de9d9c9026acd7b93db532ccdf6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PER_WORKER&lt;/code&gt;: The input function will be called on each worker independently, creating as many input pipelines as number of workers. Replicas will dequeue from the local Dataset on their worker. &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; doesn't manage any state sharing between such separate input pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f10e9b6438ffe9f0e0ab39a181cdce6c12db17b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PREDICT&lt;/code&gt;: predication/inference mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea61bbaaa72eca4ab3c9d1fa2edece250e860cc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;QUEUE_RUNNERS&lt;/code&gt;: the &lt;code&gt;QueueRunner&lt;/code&gt; objects that are used to produce input for a computation. See &lt;a href=&quot;train/start_queue_runners&quot;&gt;&lt;code&gt;tf.compat.v1.train.start_queue_runners&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ce2b4714fdff165a519e66b9363c76b3749a7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REGULARIZATION_LOSSES&lt;/code&gt;: regularization losses collected during graph construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13b285f5e6ba068f951d53e4fe62aefa37d275c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RING&lt;/code&gt;: TensorFlow's ring algorithms for all-reduce and all-gather.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae7fbdb9a01f77ccd3a8a91a3fbeb99c5a3a293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RaggedTensor&lt;/code&gt;s with multiple ragged dimensions can be defined by using a nested &lt;code&gt;RaggedTensor&lt;/code&gt; for the &lt;code&gt;values&lt;/code&gt; tensor. Each nested &lt;code&gt;RaggedTensor&lt;/code&gt; adds a single ragged dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158a510a60c70ce70a7020d81a4bb1a97bab8649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RaggedTensor&lt;/code&gt;s with uniform inner dimensions can be defined by using a multidimensional &lt;code&gt;Tensor&lt;/code&gt; for &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4912ca1cded22bc9712ec8718be630b6d2963b42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RaggedTensor&lt;/code&gt;s with uniform outer dimensions can be defined by using one or more &lt;code&gt;RaggedTensor&lt;/code&gt; with a &lt;code&gt;uniform_row_length&lt;/code&gt; row-partitioning tensor. For example, a &lt;code&gt;RaggedTensor&lt;/code&gt; with shape &lt;code&gt;[2, 2, None]&lt;/code&gt; can be constructed with this method from a &lt;code&gt;RaggedTensor&lt;/code&gt; values with shape &lt;code&gt;[4, None]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4885af7529a00f4fcf2b3345e0ac469071fd3fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SCALED&lt;/code&gt; mode matches the quantization approach used in &lt;code&gt;QuantizeAndDequantize{V2|V3}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8dfef3ac0c3b9c6afbde209ad1d905519e26e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM&lt;/code&gt;: Add all the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af1b2fa34389873a957ecd488c58adb1d0e435e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM&lt;/code&gt;: Add the updates across replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926fa86bb9b4856c544d164b4bf965a77a2247ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM&lt;/code&gt;: Scalar sum of weighted losses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c37a380a9e2aea3957ad7be11c87be42906d53d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUMMARIES&lt;/code&gt;: the summary &lt;code&gt;Tensor&lt;/code&gt; objects that have been created in the graph. See &lt;a href=&quot;summary/merge_all&quot;&gt;&lt;code&gt;tf.compat.v1.summary.merge_all&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892bddafb4ced85d808184763ac6af398c8a797e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM_BY_NONZERO_WEIGHTS&lt;/code&gt;: Same as &lt;code&gt;SUM_OVER_NONZERO_WEIGHTS&lt;/code&gt;. DEPRECATED.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3c153fb3e818a05033c1987078991ca16780fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM_OVER_BATCH_SIZE&lt;/code&gt;: Scalar &lt;code&gt;SUM&lt;/code&gt; divided by number of elements in losses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4f68bb84927e4f918e370feb01bb3821d0d4eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM_OVER_BATCH_SIZE&lt;/code&gt;: Scalar &lt;code&gt;SUM&lt;/code&gt; divided by number of elements in losses. This reduction type is not supported when used with &lt;a href=&quot;../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; outside of built-in training loops like &lt;a href=&quot;../../keras&quot;&gt;&lt;code&gt;tf.keras&lt;/code&gt;&lt;/a&gt;&lt;code&gt;compile&lt;/code&gt;/&lt;code&gt;fit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88dfc1f8491dd303ac0cb407d9be5fd75bca40f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUM_OVER_NONZERO_WEIGHTS&lt;/code&gt;: Scalar &lt;code&gt;SUM&lt;/code&gt; divided by number of non-zero weights. DEPRECATED.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e554590906c6f7f707a1eb89bfc1459ba5e287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sensitivity&lt;/code&gt; measures the proportion of actual positives that are correctly identified as such (tp / (tp + fn)). &lt;code&gt;Specificity&lt;/code&gt; measures the proportion of actual negatives that are correctly identified as such (tn / (tn + fp)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068cadc5210588816ff86d8a2328a528b1c1d554" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sequence&lt;/code&gt; are a safer way to do multiprocessing. This structure guarantees that the network will only train once on each sample per epoch which is not the case with generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caf38149252dbdc0d3aec537d4bc59980a814ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseTensor&lt;/code&gt; format expected by &lt;code&gt;embedding_lookup_sparse&lt;/code&gt;: &lt;code&gt;sp_ids&lt;/code&gt;&lt;code&gt;sp_weights&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fc1cc2989b99092df77cf2888c97fbe5f4fc19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseTensor&lt;/code&gt; format expected by &lt;code&gt;sparse_tensor_dense_matmul&lt;/code&gt;: &lt;code&gt;sp_a&lt;/code&gt; (indices, values):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c659888ca158bdb15be6ace88f3aa8c7e9fc3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SqlDataset&lt;/code&gt; allows a user to read data from the result set of a SQL query. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc6501aa749641c56090dd2ac4b9be146c364e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Supervisor&lt;/code&gt;s are not supported when eager execution is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fd0ce90b6f7a35d8bfce60413ee67c737218d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TPUEstimatorSpec.eval_metrics&lt;/code&gt; is a tuple of &lt;code&gt;metric_fn&lt;/code&gt; and &lt;code&gt;tensors&lt;/code&gt;, where &lt;code&gt;tensors&lt;/code&gt; could be a list of any nested structure of &lt;code&gt;Tensor&lt;/code&gt;s (See &lt;code&gt;TPUEstimatorSpec&lt;/code&gt; for details). &lt;code&gt;metric_fn&lt;/code&gt; takes the &lt;code&gt;tensors&lt;/code&gt; and returns a dict from metric string name to the result of calling a metric function, namely a &lt;code&gt;(metric_tensor, update_op)&lt;/code&gt; tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27401f5e35b8ec50424cd56e865580b2b67c4b2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TRAIN&lt;/code&gt;: training/fitting mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c398fe84de0ab2af96bf7bd3b6f51321fadb3f7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TRAINABLE_VARIABLES&lt;/code&gt;: the subset of &lt;code&gt;Variable&lt;/code&gt; objects that will be trained by an optimizer. See &lt;a href=&quot;trainable_variables&quot;&gt;&lt;code&gt;tf.compat.v1.trainable_variables&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5797e16f15294becc4070d46b8c4b21da3331ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;sample_shape(x) + self.batch_shape&lt;/code&gt; with values of type &lt;code&gt;self.dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f67a2a1b5f2cc88c070a8ce698b6c3f8388c139" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tensor&lt;/code&gt; with &lt;code&gt;dtype&lt;/code&gt;&lt;code&gt;self.dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37b82764dfcd0535195f8c7275d78a0c96f8adf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tensor&lt;/code&gt; with shape &lt;code&gt;[...,N, R]&lt;/code&gt; and same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f14c0a7dfc2c0fa9fda7a41a8cb1e265efbc0b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tensor&lt;/code&gt; with shape &lt;code&gt;[...,N]&lt;/code&gt; and same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94757355b794095fd792cb915edd67613da9dc37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tensor&lt;/code&gt; with shape &lt;code&gt;self.batch_shape&lt;/code&gt; and same &lt;code&gt;dtype&lt;/code&gt; as &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6a38c9d54ab19261c18648a8624d6475ceb254" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tensor&lt;/code&gt; with type &lt;code&gt;dtype&lt;/code&gt; and a 3- or 4-dimensional shape, depending on the file type and the value of the &lt;code&gt;expand_animations&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e58cb76f2072752a26e0d052639439158ce086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TensorShape&lt;/code&gt; of batch dimensions of this &lt;code&gt;LinearOperator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ecc280b432e0edecd8826c3e0d8d425f1b7872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TensorShape&lt;/code&gt; of this &lt;code&gt;LinearOperator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222896ec1cd3a4e8b4a977b786daccb5cea29c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TensorShape&lt;/code&gt;, statically determined, may be undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8033a32169d78c44ffce12c6c9fd5f2bde6241c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TimeDistributed&lt;/code&gt; can be used with arbitrary layers, not just &lt;code&gt;Dense&lt;/code&gt;, for instance with a &lt;code&gt;Conv2D&lt;/code&gt; layer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ceca89ebdee09afa9edfb51c46b5683edc7316" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TrainSpec&lt;/code&gt; determines the input data for the training, as well as the duration. Optional hooks run at various stages of training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c56b19e0e0c6b470237db8c0963c2ad9483e94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a tensor or &quot;tensor-like&quot;, &lt;code&gt;False&lt;/code&gt; if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425676d25ddd889e955cdb41a8a26cbc185571b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if in a cross-replica context (&lt;code&gt;get_replica_context()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;), or &lt;code&gt;False&lt;/code&gt; if in a replica context (&lt;code&gt;get_replica_context()&lt;/code&gt; returns non-&lt;code&gt;None&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f909270dca554a0c0e2589892252e016b09bfc55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the current thread has eager execution enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406309d53c201aca3a422a45b31d0c55c348bb57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="4a1e05c0aef1b769ad8c954c227107b1c092d4ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ValueError&lt;/code&gt; when &lt;code&gt;mixed_precision_global_state.using_default_mixed_precision_policy&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; before &lt;a href=&quot;../../../../train/experimental/enable_mixed_precision_graph_rewrite&quot;&gt;&lt;code&gt;tf.train.experimental.enable_mixed_precision_graph_rewrite()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335d3222574f0c2ce8c0c532986dccc38c63fd5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ValueError&lt;/code&gt; when &lt;code&gt;mixed_precision_global_state.using_default_mixed_precision_policy&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; before &lt;a href=&quot;enable_mixed_precision_graph_rewrite&quot;&gt;&lt;code&gt;tf.train.experimental.enable_mixed_precision_graph_rewrite()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8ae1fa33fea43ecbd43dd9529d03791e6f52ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhiteList&lt;/code&gt;: Ops that are considered numerically safe for execution in float16, and thus are always converted. E.g. &lt;code&gt;Conv2D&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19da47578289f9aa864250d282432f19e4ce6a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Z&lt;/code&gt; is the normalization constant aka the &lt;a href=&quot;https://en.wikipedia.org/wiki/Beta_function#Multivariate_beta_function&quot;&gt;multivariate beta function&lt;/a&gt;, and,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f56a43bd483ddbcbf8d1053854b746dd1e0fdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Z&lt;/code&gt; is the normalization constant, and,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef072d250b59e3aaa3dfad50fdd248b70a82df5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Z&lt;/code&gt; is the normalizing constant, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b23568cf45d951b7b8a06ce075a708bb50c42fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Z&lt;/code&gt; is the normalizing constant, and,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3465562086c4361e2771c270960f1fa1c82dd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ZERO&lt;/code&gt;: Indicates that a zero tensor will be returned in the shape of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d72d3b7d9eb65236b8e12ad2b4d6a2ff5e7306" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[b, d]&lt;/code&gt;&lt;code&gt;[b, h, w, d]&lt;/code&gt; via per-channel floats &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; of shape &lt;code&gt;[d]&lt;/code&gt; to 'outputs' tensor of same shape as &lt;code&gt;inputs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5116b6ef52c36c5b9258636fd414761ad1a96d15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[min; max]&lt;/code&gt; define the clamping range for the &lt;code&gt;inputs&lt;/code&gt; data. &lt;code&gt;inputs&lt;/code&gt; values are quantized into the quantization range (&lt;code&gt;[0; 2^num_bits - 1]&lt;/code&gt; when &lt;code&gt;narrow_range&lt;/code&gt; is false and &lt;code&gt;[1; 2^num_bits - 1]&lt;/code&gt; when it is true) and then de-quantized and output as floats in &lt;code&gt;[min; max]&lt;/code&gt; interval. &lt;code&gt;num_bits&lt;/code&gt; is the bitwidth of the quantization; between 2 and 16, inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15215729f0ac4bec016a4f3ccf47da758d23db2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__init__()&lt;/code&gt;: All state variables should be created in this method by calling &lt;code&gt;self.add_weight()&lt;/code&gt; like: &lt;code&gt;self.var = self.add_weight(...)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d497319800cdceb71cf515a7c6cb3141073ff9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__init__()&lt;/code&gt;: Save configuration in member variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b9627c0ee10120aad488f1aef6bc1e344d669b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; can be arbitrarily nested structures. A layer of a nested structure can be a &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;namedtuple&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3773a206cfadc246bb806505b1aee636050e34b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; must be the same shape; they can either be simple 3-element vectors, or any shape where the innermost dimension is 3. In the latter case, each pair of corresponding 3-element vectors is cross-multiplied independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf5bfb18e0958c09200857866c0a1e85f27efc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;acc.jvp(x)&lt;/code&gt; retrieves &lt;code&gt;acc&lt;/code&gt;'s JVP corresponding to the primal tensor &lt;code&gt;x&lt;/code&gt;. It does not perform any computation. &lt;code&gt;acc.jvp&lt;/code&gt; calls can be repeated as long as &lt;code&gt;acc&lt;/code&gt; is accessible, whether the context manager is active or not. New JVPs are only computed while the context manager is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a367b1614b37824b4cb725406e9e895683c95d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumulate_n&lt;/code&gt; performs the same operation as &lt;a href=&quot;add_n&quot;&gt;&lt;code&gt;tf.math.add_n&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868283c5ff7af281e3bbaee574987af73c7ca5ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;activation&lt;/code&gt; == &lt;code&gt;tanh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d96ca6c8d96f4fad7c63f244a1c8e445f073221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;activity_regularizer&lt;/code&gt;: Regularizer to apply a penalty on the layer's output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd772d5018a62031b97468b73b8330fcde80034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;adjusted_stddev = max(stddev, 1.0/sqrt(N))&lt;/code&gt; is capped away from 0 to protect against division by 0 when handling uniform images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4736297933ac6ee7155e04bef70cd909e4008946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alpha&lt;/code&gt; is the shape parameter describing the distribution(s), and &lt;code&gt;beta&lt;/code&gt; is the inverse scale parameter(s).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
