<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="phalcon">
    <body>
      <group id="phalcon">
        <trans-unit id="22116d670ed08e270d8c37842a6399ff3e53407c" translate="yes" xml:space="preserve">
          <source>Stops the frontend without store any cached content</source>
          <target state="translated">キャッシュされたコンテンツを保存せずにフロントエンドを停止します。</target>
        </trans-unit>
        <trans-unit id="0ef789a3f158e41e77fe32317205bb0b6e67f069" translate="yes" xml:space="preserve">
          <source>Stops the middleware execution avoiding than other middlewares be executed</source>
          <target state="translated">他のミドルウェアよりも実行されないようにミドルウェアの実行を停止します。</target>
        </trans-unit>
        <trans-unit id="4ae73fac483864f9b9b7ec6510194d9e457a7f00" translate="yes" xml:space="preserve">
          <source>Stores a reusable record in the internal list</source>
          <target state="translated">再利用可能なレコードを内部リストに格納します</target>
        </trans-unit>
        <trans-unit id="27870b8d63ad17dca5cc1b760005a78891cc72dd" translate="yes" xml:space="preserve">
          <source>Stores cached content into all backends and stops the frontend</source>
          <target state="translated">キャッシュされたコンテンツをすべてのバックエンドに格納し、フロントエンドを停止する</target>
        </trans-unit>
        <trans-unit id="7c2679018205e0799a9d5ede5f56a375d1b688b8" translate="yes" xml:space="preserve">
          <source>Stores cached content into the APC backend and stops the frontend</source>
          <target state="translated">キャッシュされたコンテンツを APC バックエンドに格納し、フロントエンドを停止します。</target>
        </trans-unit>
        <trans-unit id="cd1ca60db0703b091f4280ca022825d572807db9" translate="yes" xml:space="preserve">
          <source>Stores cached content into the backend and stops the frontend</source>
          <target state="translated">バックエンドにキャッシュされたコンテンツを格納し、フロントエンドを停止します。</target>
        </trans-unit>
        <trans-unit id="2dea636e4b8a0cc14e7316c37ed52f868e286389" translate="yes" xml:space="preserve">
          <source>Stores cached content into the file backend and stops the frontend</source>
          <target state="translated">キャッシュされたコンテンツをファイルバックエンドに格納し、フロントエンドを停止します。</target>
        </trans-unit>
        <trans-unit id="b5f20d5c44b468c5eaca660235aa24ccddc46086" translate="yes" xml:space="preserve">
          <source>Stores content in memory. Data is lost when the request is finished</source>
          <target state="translated">メモリにコンテンツを格納します。リクエストが終了するとデータは失われる</target>
        </trans-unit>
        <trans-unit id="15cc08f8409907be1e4f91e76dab7e8f32ec6a40" translate="yes" xml:space="preserve">
          <source>Stores data in Redis</source>
          <target state="translated">データをRedisに格納</target>
        </trans-unit>
        <trans-unit id="5f2adab9f775b7f66a87e867cae87e172473aab1" translate="yes" xml:space="preserve">
          <source>Stores data in XCache</source>
          <target state="translated">XCacheにデータを格納</target>
        </trans-unit>
        <trans-unit id="97ffc3896709bb1bc2087f8fedea0e3957e9aca9" translate="yes" xml:space="preserve">
          <source>Stores data to Mongo Database</source>
          <target state="translated">Mongo データベースにデータを保存</target>
        </trans-unit>
        <trans-unit id="54ef813fde7dceb993cb9fee2707a208ae31805e" translate="yes" xml:space="preserve">
          <source>Stores data to a memcached server</source>
          <target state="translated">memcachedサーバにデータを保存する</target>
        </trans-unit>
        <trans-unit id="821f939c44272a76a86c9e10dc5a903c82819a03" translate="yes" xml:space="preserve">
          <source>Stores data to local plain files</source>
          <target state="translated">ローカルのプレーンファイルにデータを格納</target>
        </trans-unit>
        <trans-unit id="97e48226d7609cb1c927e3823f35c798295c5448" translate="yes" xml:space="preserve">
          <source>Stores data to the Alternative PHP Cache (APC)</source>
          <target state="translated">データを代替 PHP キャッシュ (APC)に保存します。</target>
        </trans-unit>
        <trans-unit id="c0fb597f50f463f23298295e5edf4246cc871a9c" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in PHP files.</source>
          <target state="translated">モデルのメタデータを PHP ファイルに格納します。</target>
        </trans-unit>
        <trans-unit id="b3f5e27bca280d6c7b036a63f263a9dfed53ef03" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in memory. Data will be erased when the request finishes</source>
          <target state="translated">モデルのメタデータをメモリに格納します。データはリクエストが終了すると消去されます。</target>
        </trans-unit>
        <trans-unit id="410b8605ddf31d7c11b6a99fe3a2d6a344f65cb4" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in session. Data will erased when the session finishes. Meta-data are permanent while the session is active.</source>
          <target state="translated">モデルのメタデータをセッションに格納します。データはセッションが終了すると消去されます。メタデータはセッションがアクティブな間は永久に保存されます。</target>
        </trans-unit>
        <trans-unit id="628e0032ac83b7d413ecab8f0a6fc13e6ad0eda3" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the APC cache. Data will erased if the web server is restarted</source>
          <target state="translated">モデルのメタデータを APC キャッシュに格納します。ウェブサーバを再起動するとデータは消去されます。</target>
        </trans-unit>
        <trans-unit id="6c0caa2d754423d2eff7541716fe0df2a430a92a" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the Memcache.</source>
          <target state="translated">モデルのメタデータを Memcache に格納します。</target>
        </trans-unit>
        <trans-unit id="9fbf4f7616f82636fb774c96a045dff78841ac67" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the Redis.</source>
          <target state="translated">モデルのメタデータをRedisに格納します。</target>
        </trans-unit>
        <trans-unit id="9d76715afae8671a303ba04023bd4fb2045c02a8" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the XCache cache. Data will erased if the web server is restarted</source>
          <target state="translated">モデルのメタデータを XCache キャッシュに格納します。ウェブサーバが再起動されるとデータは消去されます。</target>
        </trans-unit>
        <trans-unit id="b474f0b6044b0ccd35dea616380da348f209e9da" translate="yes" xml:space="preserve">
          <source>Stores the messages in session</source>
          <target state="translated">メッセージをセッションに保存する</target>
        </trans-unit>
        <trans-unit id="35fa959d8b4c871f3aaec786b254843fd2116021" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in APC. This adapter is suitable for production</source>
          <target state="translated">解析されたアノテーションを APC に保存します。このアダプタは、プロダクションでの使用に適しています。</target>
        </trans-unit>
        <trans-unit id="6813e560de298fdee0841704994c7517923fc362" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in files. This adapter is suitable for production</source>
          <target state="translated">解析した注釈をファイルに保存します。このアダプタは、プロダクション用に適しています。</target>
        </trans-unit>
        <trans-unit id="8237773cfa25bf1ba3fb116d89d8410dbe0ede8c" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in memory. This adapter is the suitable development/testing</source>
          <target state="translated">解析されたアノテーションをメモリに保存します。このアダプタは、開発/テストに適した</target>
        </trans-unit>
        <trans-unit id="3141ba9d9f670f757e95aa1f7deefdba345bb829" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations to XCache. This adapter is suitable for production</source>
          <target state="translated">解析したアノテーションを XCache に保存します。このアダプタは、プロダクション用に適しています。</target>
        </trans-unit>
        <trans-unit id="fcc8ee9ff0fd170ce113cd3549956d264ec06f54" translate="yes" xml:space="preserve">
          <source>Storing Related Records</source>
          <target state="translated">関連記録の保存</target>
        </trans-unit>
        <trans-unit id="caa9d9430c4b2cca39a0288a4bb2d666fd0cf68d" translate="yes" xml:space="preserve">
          <source>Storing data in Session</source>
          <target state="translated">セッションに日付を保存する</target>
        </trans-unit>
        <trans-unit id="52778c4502611fe0399cd796754eaf9c6522f765" translate="yes" xml:space="preserve">
          <source>Storing data using models</source>
          <target state="translated">モデルを使ったデータの保存</target>
        </trans-unit>
        <trans-unit id="2c58fe26d4f9ff645b20ee6b6ea9ddf8a1298dc2" translate="yes" xml:space="preserve">
          <source>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods &amp;ldquo;&lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&quot;http://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt;&amp;rdquo;. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;rainbow tables&lt;/a&gt;.</source>
          <target state="translated">プレーンテキストでパスワードを保存することは、セキュリティ上好ましくありません。データベースへのアクセス権を持つユーザーは、すぐにすべてのユーザーアカウントにアクセスできるため、不正なアクティビティに従事できます。これに対処するために、多くのアプリケーションは、使い慣れた一方向ハッシュ方式「&lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt;」と「&lt;a href=&quot;http://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt;」を使用しています。ただし、ハードウェアは日々進化し、より速くなり、これらのアルゴリズムはブルートフォース攻撃に対して脆弱になっています。これらの攻撃は、&lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;レインボーテーブルと&lt;/a&gt;も呼ばれます。</target>
        </trans-unit>
        <trans-unit id="ab4dcedb56a938b1e1a57014ee6255c14c1c6f63" translate="yes" xml:space="preserve">
          <source>Storing/Retrieving data in Session</source>
          <target state="translated">セッションでのデータの保存/取得</target>
        </trans-unit>
        <trans-unit id="7d0ca5bbbfa5e2a24acfc853c016c25aa964363b" translate="yes" xml:space="preserve">
          <source>Strategies based on namespaces/prefixes are faster than the directories strategy</source>
          <target state="translated">名前空間/接頭辞に基づく戦略は、ディレクトリ戦略よりも高速です。</target>
        </trans-unit>
        <trans-unit id="5a3da383da3c790dfba613e05cc8cb31718a93f2" translate="yes" xml:space="preserve">
          <source>Stream Logger</source>
          <target state="translated">ストリームロガー</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="73380655baa7199522367c8dc81cddd93b39709d" translate="yes" xml:space="preserve">
          <source>String representation of the exception</source>
          <target state="translated">例外の文字列表現</target>
        </trans-unit>
        <trans-unit id="4988a588475323fe417945edd9fce105282066ec" translate="yes" xml:space="preserve">
          <source>Strings are automatically escaped using &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO&lt;/a&gt;. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="translated">文字列は&lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO&lt;/a&gt;を使用して自動的にエスケープされます。この関数は接続文字セットを考慮に入れているため、接続パラメーターまたはデータベース構成で正しい文字セットを定義することをお勧めします。間違った文字セットは、データの格納または取得時に望ましくない影響を与えるためです。</target>
        </trans-unit>
        <trans-unit id="f31b334d852b22c74733a70e7260e6cc69dc7e46" translate="yes" xml:space="preserve">
          <source>Strings to be inserted into JavaScript code also must be properly escaped:</source>
          <target state="translated">JavaScript コードに挿入する文字列も適切にエスケープされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="53d55b5ff420c0816955984dd87581fd1e61ee87" translate="yes" xml:space="preserve">
          <source>Strip tags and encode HTML entities, including single and double quotes.</source>
          <target state="translated">タグを剥ぎ取り、シングルクォーテーションやダブルクォーテーションを含むHTMLエンティティをエンコードします。</target>
        </trans-unit>
        <trans-unit id="9482c5d5bfbed584fddcc442794dd8d3d9813064" translate="yes" xml:space="preserve">
          <source>Structure</source>
          <target state="translated">Structure</target>
        </trans-unit>
        <trans-unit id="688931069f0df1b7dcf0babe5808ec7762322394" translate="yes" xml:space="preserve">
          <source>Stylesheets</source>
          <target state="translated">Stylesheets</target>
        </trans-unit>
        <trans-unit id="c26b71ada72dda0caa098081b6d86bfd9925fa6e" translate="yes" xml:space="preserve">
          <source>Subtraction assignment</source>
          <target state="translated">減算の課題</target>
        </trans-unit>
        <trans-unit id="0a9c88c404e840eea584b78c2e43d52616275ada" translate="yes" xml:space="preserve">
          <source>Sum examples:</source>
          <target state="translated">和算の例。</target>
        </trans-unit>
        <trans-unit id="8e213dbbc62f3af9ac6d0d6b2a3e60481eb1e1aa" translate="yes" xml:space="preserve">
          <source>Supported parameter types include the following:</source>
          <target state="translated">サポートされているパラメータの種類には、以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="aab99de5b0e2aa1fe84b089a9be44764807aecd6" translate="yes" xml:space="preserve">
          <source>Syslog Logger</source>
          <target state="translated">シスログロガー</target>
        </trans-unit>
        <trans-unit id="621ec9aeec552c6404f2e8b2fcbf58feeb4b482e" translate="yes" xml:space="preserve">
          <source>TENSILE</source>
          <target state="translated">TENSILE</target>
        </trans-unit>
        <trans-unit id="92db13efcb630c92ecf1220fd763e9d0e237c97e" translate="yes" xml:space="preserve">
          <source>Table name</source>
          <target state="translated">テーブル名</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目次</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="16dddf9b3f7ffb63ab6de9577fd8376b2c68584d" translate="yes" xml:space="preserve">
          <source>Tag Service</source>
          <target state="translated">タグサービス</target>
        </trans-unit>
        <trans-unit id="05bd8a3e039c41ec95edf9ce86a05f8774ec9476" translate="yes" xml:space="preserve">
          <source>Tag::HTML5</source>
          <target state="translated">Tag::HTML5</target>
        </trans-unit>
        <trans-unit id="72368908a60e4e918e3f09acd19ec0d46f9bb494" translate="yes" xml:space="preserve">
          <source>Tag::form</source>
          <target state="translated">Tag::form</target>
        </trans-unit>
        <trans-unit id="1115dbd74d3d5e690eaf4587de1c857fe91944cb" translate="yes" xml:space="preserve">
          <source>Tag::getDI</source>
          <target state="translated">Tag::getDI</target>
        </trans-unit>
        <trans-unit id="7fe14034e30da467e00514aab9e5d1e5ecddea71" translate="yes" xml:space="preserve">
          <source>Tag::image</source>
          <target state="translated">Tag::image</target>
        </trans-unit>
        <trans-unit id="4e1c3a4df8f370f6ce1b0ee3f446c116d6171744" translate="yes" xml:space="preserve">
          <source>Tag::setDI</source>
          <target state="translated">Tag::setDI</target>
        </trans-unit>
        <trans-unit id="f86e8392aea55fea072ab303f4f0e657a02c3cb4" translate="yes" xml:space="preserve">
          <source>Take into consideration the following the next when renaming your columns:</source>
          <target state="translated">カラムの名前を変更する際には、次のことを考慮してください。</target>
        </trans-unit>
        <trans-unit id="18bfaed5b1ce26bdb87c7de7ff4f25a4b55707ea" translate="yes" xml:space="preserve">
          <source>Take the following into consideration when using models in namespaces:</source>
          <target state="translated">名前空間でモデルを使用する場合は、以下の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="29a99a5e779bd4cdcd72ffb92c34393fdfc58bff" translate="yes" xml:space="preserve">
          <source>Taking advantage of relationships</source>
          <target state="translated">人間関係を利用する</target>
        </trans-unit>
        <trans-unit id="d08d6b799a189132167569c9b9575a9c3d1d03fb" translate="yes" xml:space="preserve">
          <source>Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:</source>
          <target state="translated">リクエストの本文に挿入されたJSON文字列としてデータを取り、挿入にはPHQLを使用します。</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="9b211cc3fb0ce80a7b8879374863349b704f60f6" translate="yes" xml:space="preserve">
          <source>Tasks work similar to controllers. Any CLI application needs at least a MainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.</source>
          <target state="translated">タスクはコントローラと似たような働きをします。CLIアプリケーションは少なくともMainTaskとmainActionを必要とし、すべてのタスクはアクションが明示的に与えられていない場合に実行されるmainActionを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="0f0e821c7af95b911b352f7ffcc3d6fdf25fbada" translate="yes" xml:space="preserve">
          <source>Tell Volt if the templates must be compiled in each request or only when they change</source>
          <target state="translated">テンプレートをリクエストごとにコンパイルしなければならないのか、テンプレートが変更されたときだけコンパイルしなければならないのかをVoltに伝える</target>
        </trans-unit>
        <trans-unit id="51f8b618847e77f6c47abb3ec67bfc3fa3b1fb55" translate="yes" xml:space="preserve">
          <source>Tell if the resultset if fresh or an old one cached</source>
          <target state="translated">結果セットが新しいか古いものがキャッシュされているかを伝える</target>
        </trans-unit>
        <trans-unit id="07c68a987a2a82194395446be4e070aa26e043fb" translate="yes" xml:space="preserve">
          <source>Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire</source>
          <target state="translated">すべての登録リスナーから返されたすべてのレスポンスを単一の fire に収集する必要があるかどうかをイベントマネージャに通知します。</target>
        </trans-unit>
        <trans-unit id="c53741f169658ed3efed0bde7907825a325adcc4" translate="yes" xml:space="preserve">
          <source>Tells to the query if only the first row in the resultset must be returned</source>
          <target state="translated">結果セットの最初の行だけを返さなければならないかどうかをクエリに指示します。</target>
        </trans-unit>
        <trans-unit id="9f0f081938b45532b9a06d2fe6ae91a6400ff65f" translate="yes" xml:space="preserve">
          <source>Template &amp;ldquo;layout.volt&amp;rdquo; extends &amp;ldquo;main.volt&amp;rdquo;</source>
          <target state="translated">テンプレート「layout.volt」は「main.volt」を拡張します</target>
        </trans-unit>
        <trans-unit id="83835aacfc22a8fe5f638a1fe70168a059a2eaa0" translate="yes" xml:space="preserve">
          <source>Template Engines</source>
          <target state="translated">テンプレートエンジン</target>
        </trans-unit>
        <trans-unit id="b48e7d23038b00a8503586cf24fabd3575478638" translate="yes" xml:space="preserve">
          <source>Template Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートエンジンは、設計者が複雑な構文を使用せずにビューを作成するのに役立ちます。Phalconには、&lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;と呼ばれる強力で高速なテンプレートエンジンが含まれています。</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="translated">テンプレート継承</target>
        </trans-unit>
        <trans-unit id="710f6e8edf259591cf13929be325362a8d98ae50" translate="yes" xml:space="preserve">
          <source>Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.</source>
          <target state="translated">テンプレートは、共通のビューコードを共有するために使用できるビューです。これらはコントローラレイアウトとして動作するので、レイアウトディレクトリに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd89ca4755469e05cfd31d69efe2d6ca435e3408" translate="yes" xml:space="preserve">
          <source>Templates can be rendered before the layout (using &lt;code&gt;$this-&amp;gt;view-&amp;gt;setTemplateBefore()&lt;/code&gt;) or they can be rendered after the layout (using &lt;code&gt;this-&amp;gt;view-&amp;gt;setTemplateAfter()&lt;/code&gt;). In the following example the template (layouts/common.phtml) is rendered after the main layout (layouts/posts.phtml):</source>
          <target state="translated">テンプレートは、レイアウトの前にレンダリングできます（ &lt;code&gt;$this-&amp;gt;view-&amp;gt;setTemplateBefore()&lt;/code&gt; ）またはレイアウトの後にレンダリングできます（ &lt;code&gt;this-&amp;gt;view-&amp;gt;setTemplateAfter()&lt;/code&gt; を使用）。次の例では、テンプレート（layouts / common.phtml）がメインレイアウト（layouts / posts.phtml）の後にレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="2d395054e7c6d2382fe6d3eb0027da7d8754d6ac" translate="yes" xml:space="preserve">
          <source>Temporarily stores the messages in session, then messages can be printed in the next request</source>
          <target state="translated">メッセージを一時的にセッションに保存し、次のリクエストでメッセージを印刷することができます。</target>
        </trans-unit>
        <trans-unit id="f751f7ff2664c07ccd41030bdac28000de5b50eb" translate="yes" xml:space="preserve">
          <source>Ternary operator. The same as the PHP ternary operator</source>
          <target state="translated">三項演算子。PHP の三項演算子と同じ</target>
        </trans-unit>
        <trans-unit id="640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="translated">Test</target>
        </trans-unit>
        <trans-unit id="187d7f0e42c8896aec49083528a238217cfdec49" translate="yes" xml:space="preserve">
          <source>Testing for LibreSSL</source>
          <target state="translated">LibreSSLのテスト</target>
        </trans-unit>
        <trans-unit id="e267c714edaa7ae77c73ad90e2209e1c15637d60" translate="yes" xml:space="preserve">
          <source>Testing our Application</source>
          <target state="translated">アプリケーションのテスト</target>
        </trans-unit>
        <trans-unit id="d25847938c5e0e592aa242dc61fe4085b0e63aeb" translate="yes" xml:space="preserve">
          <source>Testing your routes</source>
          <target state="translated">ルートのテスト</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="fca3bec5e5be0110636120d1394f6f126524ecb0" translate="yes" xml:space="preserve">
          <source>Tests can be used to test if a variable has a valid expected value. The operator &amp;ldquo;is&amp;rdquo; is used to perform the tests:</source>
          <target state="translated">テストを使用して、変数に有効な期待値があるかどうかをテストできます。演算子「is」は、テストを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="d7863878fdf9bfff5a31254f098f95b0ff954267" translate="yes" xml:space="preserve">
          <source>Text between double quotes or single quotes are handled as strings</source>
          <target state="translated">二重引用符や一重引用符の間のテキストは文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="a59b2b0709cc425881c7593938f321695ffaf092" translate="yes" xml:space="preserve">
          <source>Text::lower</source>
          <target state="translated">Text::lower</target>
        </trans-unit>
        <trans-unit id="c018d2906b3c08f2e733525a27d466d655a442e1" translate="yes" xml:space="preserve">
          <source>Text::upper</source>
          <target state="translated">Text::upper</target>
        </trans-unit>
        <trans-unit id="76bf04f1cd20d76a5d71687ac2e675f8ce2d4908" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, the underlying component of &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt;, it&amp;rsquo;s possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;の基礎となるコンポーネントである&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Dbの&lt;/em&gt;&lt;/a&gt;おかげで、データベース操作のパフォーマンスを分析するためにORMによって生成されたSQLステートメントをプロファイルすることが可能です。これにより、パフォーマンスの問題を診断し、ボトルネックを発見できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2b98bed80b3f36a2aa542bc1fc2e9c1fae99a60" translate="yes" xml:space="preserve">
          <source>Thanks to the hooks points provided by &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt; you can easily adapt your application to any URL schema:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt;によって提供されるフックポイントのおかげで、アプリケーションを任意のURLスキーマに簡単に適合させることができます。</target>
        </trans-unit>
        <trans-unit id="ae1c98ebc213cfb61481f8af68db4b3630761d6e" translate="yes" xml:space="preserve">
          <source>That is the same as:</source>
          <target state="translated">と同じですね。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="cd0ed545c494fce6e80c9d9d9ec09829aaa6bf14" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;_id&amp;rdquo; property is automatically updated with the &lt;a href=&quot;http://www.php.net/manual/en/class.mongoid.php&quot;&gt;MongoId&lt;/a&gt; object created by the driver:</source>
          <target state="translated">「_id」プロパティは、ドライバーによって作成された&lt;a href=&quot;http://www.php.net/manual/en/class.mongoid.php&quot;&gt;MongoId&lt;/a&gt;オブジェクトで自動的に更新されます。</target>
        </trans-unit>
        <trans-unit id="01bceab06c21a4c6198886dc568d5e3ab46c3ece" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;create page&amp;rdquo; allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.</source>
          <target state="translated">「作成ページ」では、製品モデルの検証を適用する製品を作成できます。Phalconは、nullでないフィールドが自動的に検証され、必要な場合は警告を生成します。</target>
        </trans-unit>
        <trans-unit id="9c148d8e93884d309cd23fc3895f5888152fa076" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;get&amp;rdquo; method indicates that the associated HTTP method is GET. The route &lt;code&gt;/say/hello/{name}&lt;/code&gt; also has a parameter &lt;code&gt;{$name}&lt;/code&gt; that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:</source>
          <target state="translated">「get」メソッドは、関連するHTTPメソッドがGETであることを示します。ルート &lt;code&gt;/say/hello/{name}&lt;/code&gt; には、ルートハンドラー（無名関数）に直接渡されるパラメーター &lt;code&gt;{$name}&lt;/code&gt; もあります。ハンドラーは、ルートが一致したときに実行されます。ハンドラーは、PHPユーザーランドの任意の呼び出し可能なアイテムにすることができます。次の例は、さまざまなタイプのハンドラーを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b5ff4b822f5ea91f1310d2c23ac4fa5605ccb4ef" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;notSave&amp;rdquo; event is triggered whenever a &amp;ldquo;creating&amp;rdquo; or &amp;ldquo;updating&amp;rdquo; action fails. We&amp;rsquo;re flashing the validation messages obtaining the &amp;ldquo;flash&amp;rdquo; service from the DI container. By doing this, we don&amp;rsquo;t have to print messages after each saving.</source>
          <target state="translated">「notSave」イベントは、「作成」または「更新」アクションが失敗したときにトリガーされます。DIコンテナーから「フラッシュ」サービスを取得する検証メッセージをフラッシュしています。これにより、保存するたびにメッセージを印刷する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="21d5938c8a72fc8550bee017d569e007c426e698" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;notSaved&amp;rdquo; event is triggered every time that a &amp;ldquo;create&amp;rdquo; or &amp;ldquo;update&amp;rdquo; action fails. So we&amp;rsquo;re flashing the validation messages obtaining the &amp;ldquo;flash&amp;rdquo; service from the DI container. By doing this, we don&amp;rsquo;t have to print messages after each save.</source>
          <target state="translated">「notSaved」イベントは、「作成」または「更新」アクションが失敗するたびにトリガーされます。したがって、DIコンテナーから「フラッシュ」サービスを取得する検証メッセージをフラッシュしています。これにより、保存するたびにメッセージを印刷する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="77ee47a33f445448789241b680893db76e26dfa3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;robots_similar&amp;rdquo; table has the function to define what robots are similar to others:</source>
          <target state="translated">「robots_similar」テーブルには、他のロボットと似ているロボットを定義する機能があります。</target>
        </trans-unit>
        <trans-unit id="ea2b86e4bda0f5783c49938a5dd65ba12505b41c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;search&amp;rdquo; action has two behaviors. When accessed via POST, it performs a search based on the data sent from the form but when accessed via GET it moves the current page in the paginator. To differentiate HTTP methods, we check it using the &lt;a href=&quot;request&quot;&gt;&lt;em&gt;Request&lt;/em&gt;&lt;/a&gt; component:</source>
          <target state="translated">「検索」アクションには2つの動作があります。POSTを介してアクセスすると、フォームから送信されたデータに基づいて検索を実行しますが、GETを介してアクセスすると、ページネーションの現在のページを移動します。HTTPメソッドを区別するために、&lt;a href=&quot;request&quot;&gt;&lt;em&gt;Request&lt;/em&gt;&lt;/a&gt;コンポーネントを使用して確認します。</target>
        </trans-unit>
        <trans-unit id="1fd6f2ce905ee0f83b80c6cd55d49bc9e6be69e4" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;break&amp;rsquo; and &amp;lsquo;continue&amp;rsquo; statements can be used to exit from a loop or force an iteration in the current block:</source>
          <target state="translated">'break'および 'continue'ステートメントを使用して、ループを終了するか、現在のブロックで反復を強制できます。</target>
        </trans-unit>
        <trans-unit id="7499d27ef92b27826affe3e8405eb660574f1381" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;elseif&amp;rsquo; control flow structure can be used together with if to emulate a &amp;lsquo;switch&amp;rsquo; block:</source>
          <target state="translated">'elseif'制御フロー構造は、 'switch'ブロックをエミュレートするifと共に使用できます。</target>
        </trans-unit>
        <trans-unit id="79027116a502e75b3e7ca66a8e8178ad2315a3a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_acl_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Acl\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own ACL adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_acl_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ ACLを\ AdapterInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のACLアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="6fc695aa57ffcffb35d9ed406ed8ef47c4236453" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_annotations_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Annotations\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own annotations adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_annotations_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \注釈\ AdapterInterface&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のアノテーションアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="248a79e8b769c05279c613c3945adbd3c2256768" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_cache_backendinterface&quot;&gt;&lt;em&gt;Phalcon\Cache\BackendInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own backend adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_cache_backendinterface&quot;&gt;&lt;em&gt;Phalcon \キャッシュ\ BackendInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のバックエンドアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="49de24ecb8b52454235e50683c74c5591fa127df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_cache_frontendinterface&quot;&gt;&lt;em&gt;Phalcon\Cache\FrontendInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own frontend adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_cache_frontendinterface&quot;&gt;&lt;em&gt;Phalcon \キャッシュ\ FrontendInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のフロントエンドアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="bc25ef4deef406445a89d074c16b5b0db3672dd7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_db_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Db\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own database adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_db_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ Dbの\ AdapterInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のデータベースアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="8824e2b7e246a51b87e48c5be39a10a091f23929" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_db_dialectinterface&quot;&gt;&lt;em&gt;Phalcon\Db\DialectInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own database dialects or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_db_dialectinterface&quot;&gt;&lt;em&gt;Phalcon \ Dbの\ DialectInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のデータベース方言を作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="008b3684f5fa467ac98159ab816074f7a370ff6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_diinterface&quot;&gt;&lt;em&gt;Phalcon\DiInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_diinterface&quot;&gt;&lt;em&gt;Phalcon \ DiInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、現在の1をPhalconが提供するものを交換し、独自のDIを作成または拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="a13ddac50478c3fca52015f18575edb94fbc33de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_events_managerinterface&quot;&gt;&lt;em&gt;Phalcon\Events\ManagerInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own EventsManager replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_events_managerinterface&quot;&gt;&lt;em&gt;Phalcon \イベント\ ManagerInterfaceの&lt;/em&gt;&lt;/a&gt;インターフェースはPhalconが提供するものを交換し、独自のEventsManagerを作成するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="edc3844ac3db04e78a2efa08615718a6fe9f28f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_filter&quot;&gt;&lt;em&gt;Phalcon\Filter&lt;/em&gt;&lt;/a&gt; component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_filter&quot;&gt;&lt;em&gt;Phalcon \フィルタ&lt;/em&gt;&lt;/a&gt;コンポーネントは、ヘルパーを消毒一般的に使用されるフィルタやデータのセットを提供します。PHPフィルター拡張のオブジェクト指向ラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="01420fd643f8ddfab533a90c23d356dbea80761d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_filterinterface&quot;&gt;&lt;em&gt;Phalcon\FilterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own filtering service replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_filterinterface&quot;&gt;&lt;em&gt;Phalcon \ FilterInterfaceの&lt;/em&gt;&lt;/a&gt;インターフェースはPhalconが提供するものを交換し、独自のフィルタリングサービスを作成するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ee65ba2023052cf456fc6668f9730107fb481cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_image_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Image\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own image adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_image_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \画像\ AdapterInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自の画像アダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="44c4566bcb1677a0e419a1616e34fe09abff0ad7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_logger_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Logger\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own logger adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_logger_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ロガー\ AdapterInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のロガーアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="5db0e924eeefb9ef71e9ef79c1aaa59a1021499c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_logger_formatterinterface&quot;&gt;&lt;em&gt;Phalcon\Logger\FormatterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own logger formatter or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_logger_formatterinterface&quot;&gt;&lt;em&gt;Phalcon \ロガー\ FormatterInterface&lt;/em&gt;&lt;/a&gt;インターフェース、既存のものを独自のロガーフォーマッタを作成または拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="139a2bbf2913924532bcfdaab0e081c6dd7d3134" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_dispatcherinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\DispatcherInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own dispatcher replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_dispatcherinterface&quot;&gt;&lt;em&gt;Phalcon \ MVC \ DispatcherInterfaceの&lt;/em&gt;&lt;/a&gt;インターフェースはPhalconが提供するものを交換し、独自のディスパッチャを作成するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="5c49976e68ee45ed7d4ec3e27a84268f62ef9161" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_routerinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\RouterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own router replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_routerinterface&quot;&gt;&lt;em&gt;Phalcon \ MVC \ RouterInterfaceの&lt;/em&gt;&lt;/a&gt;インターフェースはPhalconが提供するものを交換し、独自のルータを作成するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="fcf451dadaa517d822373c3d935aabf7bdce9fdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_urlinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\UrlInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own URL generator replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_urlinterface&quot;&gt;&lt;em&gt;Phalcon \ MVC \ UrlInterfaceの&lt;/em&gt;&lt;/a&gt;インターフェースはPhalconが提供するものを交換し、独自のURLジェネレータを作成するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5c3fd9626b63b05835e4803e55dd6de0e3d47a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_paginator_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Paginator\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own paginator adapters or extend the existing ones:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_paginator_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ページネータ\ AdapterInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のページネータのアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="89796f9f04a1ddb2276d8ef55876111d13e26967" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_security_random&quot;&gt;&lt;em&gt;Phalcon\Security\Random&lt;/em&gt;&lt;/a&gt; class makes it really easy to generate lots of types of random data.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_security_random&quot;&gt;&lt;em&gt;Phalcon \セキュリティ\ランダムの&lt;/em&gt;&lt;/a&gt;クラスには、それは本当に簡単にランダムなデータの種類の多くを生成することができます。</target>
        </trans-unit>
        <trans-unit id="7c48ba54a9d6e0ed604b72e7fef2e2b80ad96fcb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_session_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Session\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own session adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_session_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \セッション\ AdapterInterfaceの&lt;/em&gt;&lt;/a&gt;インタフェースは、独自のセッションアダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ccbb2db292060343b3570cfd0bc29bb70272a32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_translate_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Translate\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own translate adapters or extend the existing ones:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_translate_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ AdapterInterfaceの\翻訳&lt;/em&gt;&lt;/a&gt;インターフェースは、独自の変換アダプタを作成したり、既存のものを拡張するために実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f9c60d2d1799da10bc8985b7bda1380905ea75f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; (FastCGI Process Manager) is usually used to allow &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; to process PHP files. Nowadays, &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; is bundled with any Unix PHP distribution. Phalcon + &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; provides a powerful set of tools that offer maximum performance for your PHP applications.</source>
          <target state="translated">&lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt;（FastCGIプロセスマネージャ）は通常可能にするために使用され&lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;nginxのは、&lt;/a&gt; PHPファイルを処理します。現在、&lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt;はUnix PHPディストリビューションにバンドルされています。Phalcon + &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt;は、PHPアプリケーションに最大のパフォーマンスを提供する強力なツールセットを提供します。</target>
        </trans-unit>
        <trans-unit id="9c0ebd4185cec6f6fc2d8e775f34f681d31d3dec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.php.net/manual/en/class.collator.php&quot;&gt;Collator&lt;/a&gt; class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:</source>
          <target state="translated">&lt;a href=&quot;http://www.php.net/manual/en/class.collator.php&quot;&gt;Collat​​or&lt;/a&gt;クラスは、適切なロケールに依存ソート順序をサポートする文字列の比較機能を提供します。このクラスの使用法については、以下の例を確認してください。</target>
        </trans-unit>
        <trans-unit id="a9e772f2e18a90221f33af09ccbe01c99e32982f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/phalcon/php-site&quot;&gt;PHP alternative site&lt;/a&gt; is an example of implementing the caching of fragments.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/php-site&quot;&gt;PHPの代替サイトは、&lt;/a&gt;フラグメントのキャッシュを実装する例です。</target>
        </trans-unit>
        <trans-unit id="b1f23ef9c07fd7fb2d94749f844c61009067dd08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;Phalcon Developer Tools&lt;/em&gt;&lt;/a&gt; provides scripts to manage migrations (generation, running and rollback).</source>
          <target state="translated">&lt;a href=&quot;tools&quot;&gt;&lt;em&gt;Phalcon開発ツール&lt;/em&gt;&lt;/a&gt;のマイグレーション（生成、実行してロールバック）を管理するためのスクリプトを提供します。</target>
        </trans-unit>
        <trans-unit id="f0b9efe7eac181ed3392a383d5e1ce5b6c8e6bf8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tutorial-invo&quot;&gt;&lt;em&gt;INVO&lt;/em&gt;&lt;/a&gt; tutorial shows how to take advantage of dispatching events implementing a security filter with &lt;a href=&quot;acl&quot;&gt;&lt;em&gt;Acl&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;tutorial-invo&quot;&gt;&lt;em&gt;INVO&lt;/em&gt;&lt;/a&gt;でセキュリティフィルタを実装するイベントのディスパッチを利用する方法のチュートリアルを示して&lt;a href=&quot;acl&quot;&gt;&lt;em&gt;ACLを&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="31d25365acc53c3c39e27ac49ffb32efe5232ef7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$currentPage&lt;/code&gt; variable controls the page to be displayed. The &lt;code&gt;$paginator-&amp;gt;getPaginate()&lt;/code&gt; returns a &lt;code&gt;$page&lt;/code&gt; object that contains the paginated data. It can be used for generating the pagination:</source>
          <target state="translated">&lt;code&gt;$currentPage&lt;/code&gt; 変数は、ページが表示されるように制御します。 &lt;code&gt;$paginator-&amp;gt;getPaginate()&lt;/code&gt; 返す &lt;code&gt;$page&lt;/code&gt; ページ分割データを格納するオブジェクトを。ページネーションの生成に使用できます。</target>
        </trans-unit>
        <trans-unit id="f451a7a01be383fb6f5d3a78b71d81e282befc52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$page&lt;/code&gt; object also contains navigation data:</source>
          <target state="translated">&lt;code&gt;$page&lt;/code&gt; オブジェクトは、ナビゲーションデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="0d72027df2636f41333c12a2a5328aefa5e420b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$page&lt;/code&gt; object has the following attributes:</source>
          <target state="translated">&lt;code&gt;$page&lt;/code&gt; オブジェクトは、次の属性があります。</target>
        </trans-unit>
        <trans-unit id="9e89feded734eb468077b751566a7bfd7bc9dd9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NONE&lt;/code&gt; constant ignores the original image&amp;rsquo;s ratio. Neither width and height are required. If a dimension is not specified, the original dimension will be used. If the new proportions differ from the original proportions, the image may be distorted and stretched.</source>
          <target state="translated">&lt;code&gt;NONE&lt;/code&gt; の定数は、元の画像の比率を無視します。幅も高さも必要ありません。ディメンションが指定されていない場合は、元のディメンションが使用されます。新しい比率が元の比率と異なる場合、画像が歪んだり引き伸ばされたりすることがあります。</target>
        </trans-unit>
        <trans-unit id="963ebaed1e76b8d66d5f70709513eb0b12801623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Db::query()&lt;/code&gt; returns an instance of &lt;a href=&quot;../api/phalcon_db_result_pdo&quot;&gt;&lt;em&gt;Phalcon\Db\Result\Pdo&lt;/em&gt;&lt;/a&gt;. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.</source>
          <target state="translated">&lt;code&gt;Phalcon\Db::query()&lt;/code&gt; のインスタンスを返します&lt;a href=&quot;../api/phalcon_db_result_pdo&quot;&gt;&lt;em&gt;Phalcon \ Dbの\結果\ PDOを&lt;/em&gt;&lt;/a&gt;。これらのオブジェクトは、返された結果セットに関連するすべての機能をカプセル化します。つまり、トラバース、特定のレコードの検索、カウントなどです。</target>
        </trans-unit>
        <trans-unit id="7c31e3cbbb1ec7bdff29033d6f1c50304601e0ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Collection::delete()&lt;/code&gt; method allows you to delete a document. You can use it as follows:</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Collection::delete()&lt;/code&gt; メソッドを使用して、ドキュメントを削除することができます。次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="8e294d1f17663ff8a329817a651be22765db80a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Collection::save()&lt;/code&gt; method allows you to create/update documents according to whether they already exist in the collection associated with a model. The &lt;code&gt;save()&lt;/code&gt; method is called internally by the create and update methods of &lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon\Mvc\Collection&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Collection::save()&lt;/code&gt; メソッドを使用すると、彼らはすでにモデルに関連付けられたコレクション内に存在するかどうかに応じて/更新文書を作成することができます。 &lt;code&gt;save()&lt;/code&gt; メソッドは、の作成と更新方法によって内部で呼び出され&lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon \ MVC \コレクション&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="378098a63a48af6a9d6c7c649c464195d868701f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Model::delete()&lt;/code&gt; method allows to delete a record. You can use it as follows:</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Model::delete()&lt;/code&gt; メソッドは、レコードを削除することができます。次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="da5d5a58620443cbf7213a635ae112abf46ccf8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; method allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt;. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; メソッドを使用すると、彼らはすでにモデルに関連付けられたテーブルに存在するかどうかに応じて/更新レコードを作成することができます。saveメソッドは、&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;のcreateおよびupdateメソッドによって内部的に呼び出されます。これが期待どおりに機能するためには、エンティティの主キーを適切に定義して、レコードを更新するか作成するかを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ca380c73bb35350a9e4dec6c400d4eda63d04e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Tag::form()&lt;/code&gt; method receives only one parameter for instance, a relative URI to a controller/action in the application.</source>
          <target state="translated">&lt;code&gt;Phalcon\Tag::form()&lt;/code&gt; メソッドは、アプリケーションのコントローラ/アクションに、例えば唯一のパラメーター、相対URIを受信します。</target>
        </trans-unit>
        <trans-unit id="3e0b30339709b1c2cc64d626a0c56b3493311c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SessionController::startAction&lt;/code&gt; function (app/controllers/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:</source>
          <target state="translated">&lt;code&gt;SessionController::startAction&lt;/code&gt; 機能（アプリ/コントローラ/ SessionController.php）は、データベース内の有効なユーザーのチェックなど、フォームに入力されたデータを検証する作業があります。</target>
        </trans-unit>
        <trans-unit id="2969e182118ba9160fd3715be75ef65ba3ebeb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_()&lt;/code&gt; method is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. Hello %name%. These placeholders can be replaced with passed parameters in the &lt;code&gt;_()&lt;/code&gt; method. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:</source>
          <target state="translated">&lt;code&gt;_()&lt;/code&gt; メソッドは、渡されたインデックスに基づいて変換された文字列を返しています。一部の文字列は、計算されたデータ、つまりHello％name％のプレースホルダーを組み込む必要があります。これらのプレースホルダーは、 &lt;code&gt;_()&lt;/code&gt; メソッドで渡されたパラメーターに置き換えることができます。渡されたパラメーターは、キー/値配列の形式です。キーはプレースホルダー名と一致し、値は置き換えられる実際のデータです。</target>
        </trans-unit>
        <trans-unit id="d129377c0bd6815a802ad3db286298e6eb3186ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_getTranslation()&lt;/code&gt; method is available for all actions that require translations. The &lt;code&gt;$t&lt;/code&gt; variable is passed to the views, and with it, we can translate strings in that layer:</source>
          <target state="translated">&lt;code&gt;_getTranslation()&lt;/code&gt; メソッドは、翻訳が必要なすべてのアクションのために利用可能です。 &lt;code&gt;$t&lt;/code&gt; 変数は、ビューに渡され、それを、私たちは、その層内の文字列を翻訳することができます：</target>
        </trans-unit>
        <trans-unit id="fae4d9b0996e71ae01a8407a92cb723bd2ddb1e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add()&lt;/code&gt; method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (/). The regular expression syntax used is the same as the &lt;a href=&quot;http://www.php.net/manual/en/book.pcre.php&quot;&gt;PCRE regular expressions&lt;/a&gt;. Note that, it is not necessary to add regular expression delimiters. All route patterns are case-insensitive.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; メソッドは、必要に応じて事前に定義されたプレースホルダと正規表現修飾子を持つことができるパターンを受信します。すべてのルーティングパターンは、スラッシュ文字（/）で始まる必要があります。使用される正規表現構文は&lt;a href=&quot;http://www.php.net/manual/en/book.pcre.php&quot;&gt;PCRE正規表現&lt;/a&gt;と同じです。正規表現の区切り文字を追加する必要がないことに注意してください。すべてのルートパターンは大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="214ec92b15cc2b9a220ea18d7ff96c41b6c5369d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow()&lt;/code&gt; method designates that a particular role has granted access to a particular resource. The &lt;code&gt;deny()&lt;/code&gt; method does the opposite.</source>
          <target state="translated">&lt;code&gt;allow()&lt;/code&gt; メソッドは、特定の役割は、特定のリソースへのアクセスを許可したことを示しています。 &lt;code&gt;deny()&lt;/code&gt; メソッドは、反対を行います。</target>
        </trans-unit>
        <trans-unit id="602c51283debd0ca3ec78eeb2bf073f357e9f521" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur()&lt;/code&gt; method takes a single parameter - an integer between 0 (no effect) and 100 (very blurry):</source>
          <target state="translated">&lt;code&gt;blur()&lt;/code&gt; メソッドは、単一のパラメータを取る- 0（効果なし）から100（非常にぼやけ）の間の整数。</target>
        </trans-unit>
        <trans-unit id="616853c00129638bdf7764ef5dea80502a276951" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMessages()&lt;/code&gt; method can be overridden in a model to replace/translate the default messages generated automatically by the ORM:</source>
          <target state="translated">&lt;code&gt;getMessages()&lt;/code&gt; メソッドは、ORMによって自動的に生成されるデフォルトのメッセージを翻訳/交換するモデルでオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="9c3d614b069fe50e3463f7360500b1a78853b6c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize()&lt;/code&gt; method is only called if the &amp;lsquo;beforeExecuteRoute&amp;rsquo; event is executed with success. This avoid that application logic in the initializer cannot be executed without authorization.</source>
          <target state="translated">&lt;code&gt;initialize()&lt;/code&gt; 「beforeExecuteRoute」イベントを成功に実行された場合メソッドは呼ばれています。これにより、イニシャライザのアプリケーションロジックを許可なしに実行することができなくなります。</target>
        </trans-unit>
        <trans-unit id="094113803fcd3e519956b1c6037393f8ed966cb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize()&lt;/code&gt; method is only called once during the request, it&amp;rsquo;s intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can use the &lt;code&gt;onConstruct()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;initialize()&lt;/code&gt; メソッドだけ要求時に一度だけ呼び出されるが、アプリケーション内で作成されたモデルのすべてのインスタンスに適用する初期化を行うことを意図しています。作成されたすべてのインスタンスに対して初期化タスクを実行する場合は、 &lt;code&gt;onConstruct()&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="8c841d83372e3b4388a080f64e8e8e8a7e557cb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputJs()&lt;/code&gt; and &lt;code&gt;outputCss()&lt;/code&gt; methods are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:</source>
          <target state="translated">&lt;code&gt;outputJs()&lt;/code&gt; と &lt;code&gt;outputCss()&lt;/code&gt; メソッドは、リソースの各タイプに応じて必要なHTMLコードを生成するために利用可能です。次の方法で、このメソッドをオーバーライドするか、リソースを手動で印刷できます。</target>
        </trans-unit>
        <trans-unit id="c8827777279c34a41f52717e074d92ee380cef7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;partial()&lt;/code&gt; method does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:</source>
          <target state="translated">&lt;code&gt;partial()&lt;/code&gt; メソッドは、意志は、部分の範囲に存在すること変数/パラメータの配列のような第2のパラメータを受け付けません。</target>
        </trans-unit>
        <trans-unit id="4949ea5e5a4562f6aa5f40d56ae930b104e0f3ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pixelate()&lt;/code&gt; method takes a single parameter - the higher the integer, the more pixelated the image becomes:</source>
          <target state="translated">&lt;code&gt;pixelate()&lt;/code&gt; メソッドは、単一のパラメータを取る-整数より高い、より多くのピクセル化イメージは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1757ebefe50f25661654ec55178596b924935115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selectReadConnection()&lt;/code&gt; method is called to choose the right connection, this method intercepts any new query executed:</source>
          <target state="translated">&lt;code&gt;selectReadConnection()&lt;/code&gt; メソッドは、このメソッドをインターセプトは、新しいクエリが実行され、右の接続を選択するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af29239dee3c130d50b965bdc6c999b1487f9634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setVar()&lt;/code&gt; method allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the &lt;code&gt;$postId&lt;/code&gt; parameter to the respective view template.</source>
          <target state="translated">&lt;code&gt;setVar()&lt;/code&gt; メソッドは、彼らがビューテンプレートで使用できるように、私たちはオンデマンドで表示する変数を作成することができます。上記の例は、 &lt;code&gt;$postId&lt;/code&gt; パラメータをそれぞれのビューテンプレートに渡す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a65c782374f2ae72e81cee1da77cd3699008d634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sharpen()&lt;/code&gt; method takes a single parameter - an integer between 0 (no effect) and 100 (very sharp):</source>
          <target state="translated">&lt;code&gt;sharpen()&lt;/code&gt; メソッドは、単一のパラメータを取る- 0の間の整数（効果なし）から100（非常に鋭いです）。</target>
        </trans-unit>
        <trans-unit id="a9ea6012711c89cb795bdf7ffed343307d803854" translate="yes" xml:space="preserve">
          <source>The ACL now have knowledge of the existing controllers and their related actions. Role &amp;ldquo;Users&amp;rdquo; has access to all the resources of both frontend and backend. The role &amp;ldquo;Guests&amp;rdquo; only has access to the public area:</source>
          <target state="translated">これで、ACLは既存のコントローラーとそれらに関連するアクションの知識を持ちます。ロール「ユーザー」は、フロントエンドとバックエンドの両方のすべてのリソースにアクセスできます。「ゲスト」の役割は、パブリックエリアにのみアクセスできます。</target>
        </trans-unit>
        <trans-unit id="20573a1f950447f4fc418663b03aa4e7efb2589d" translate="yes" xml:space="preserve">
          <source>The API consists of the following methods:</source>
          <target state="translated">APIは以下のメソッドで構成されています。</target>
        </trans-unit>
        <trans-unit id="0a5e4009919ae3c60011e43378018ea5a19209ef" translate="yes" xml:space="preserve">
          <source>The Dispatch Loop</source>
          <target state="translated">派遣ループ</target>
        </trans-unit>
        <trans-unit id="bfe1632cbbbd1aeb51120af60301c4e5eea4b59b" translate="yes" xml:space="preserve">
          <source>The IR is converted to valid SQL according to the database system associated to the model</source>
          <target state="translated">IRは、モデルに関連付けられたデータベースシステムに従って、有効なSQLに変換されます。</target>
        </trans-unit>
        <trans-unit id="8f6d5fe3939c4ac95f99ed020a571dcd0ca6c48c" translate="yes" xml:space="preserve">
          <source>The MVC Architecture</source>
          <target state="translated">MVCアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="ee5ee8733bfe4d9dd27fef0440919c5216014a98" translate="yes" xml:space="preserve">
          <source>The ORM also provides Horizontal Sharding facilities, by allowing you to implement a &amp;lsquo;shard&amp;rsquo; selection according to the current query conditions:</source>
          <target state="translated">ORMは、現在のクエリ条件に従って「シャード」選択を実装できるようにすることで、水平シャーディング機能も提供します。</target>
        </trans-unit>
        <trans-unit id="e63769e92de028b2301a820b04302c1ddf23d8aa" translate="yes" xml:space="preserve">
          <source>The ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the &lt;code&gt;save()&lt;/code&gt; method.</source>
          <target state="translated">ORMは自動的に入力をエスケープしてSQLインジェクションを防止するため、リクエストを &lt;code&gt;save()&lt;/code&gt; メソッドに渡すだけで済みます。</target>
        </trans-unit>
        <trans-unit id="3e1abd3779dcdd8a216fdca33a393a42a898748c" translate="yes" xml:space="preserve">
          <source>The ORM automatically validate the not null columns present in the mapped table</source>
          <target state="translated">ORM は、マッピングされたテーブルに存在する null ではないカラムを自動的に検証します。</target>
        </trans-unit>
        <trans-unit id="8f43729f0ddcb7d1f7a386bf25b144028b89dc0a" translate="yes" xml:space="preserve">
          <source>The ORM provides an API to create your own behaviors. A behavior must be a class implementing the &lt;a href=&quot;../api/phalcon_mvc_model_behaviorinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\BehaviorInterface&lt;/em&gt;&lt;/a&gt;. Also, &lt;a href=&quot;../api/phalcon_mvc_model_behavior&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Behavior&lt;/em&gt;&lt;/a&gt; provides most of the methods needed to ease the implementation of behaviors.</source>
          <target state="translated">ORMは、独自の動作を作成するためのAPIを提供します。動作は、&lt;a href=&quot;../api/phalcon_mvc_model_behaviorinterface&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ BehaviorInterfaceを&lt;/em&gt;&lt;/a&gt;実装するクラスである必要があります。また、&lt;a href=&quot;../api/phalcon_mvc_model_behavior&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Behavior&lt;/em&gt;&lt;/a&gt;は、動作の実装を容易にするために必要なメソッドのほとんどを提供します。</target>
        </trans-unit>
        <trans-unit id="72b8f5a7fccc687d1fd8317b210cd603f2999806" translate="yes" xml:space="preserve">
          <source>The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:</source>
          <target state="translated">ORM は独立したカラムマップをサポートしており、開発者はモデル内でテーブル内のカラムとは異なるカラム名を使用することができます。Phalcon は新しいカラム名を認識し、それに応じてデータベース内のそれぞれのカラムと一致するように名前を変更します。これは、データベース内のフィールドの名前を変更する必要がある場合に、コード内のすべてのクエリを気にする必要がないという点で、非常に優れた機能です。モデル内のカラムマップを変更するだけで、あとはすべて解決します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="bff718c5a5a8b130ef20666b4a47aebc3241d3d9" translate="yes" xml:space="preserve">
          <source>The PHPunit helper file</source>
          <target state="translated">PHPunit ヘルパーファイル</target>
        </trans-unit>
        <trans-unit id="bf6dec633862a48857130651309b77c6e67f6972" translate="yes" xml:space="preserve">
          <source>The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system</source>
          <target state="translated">PHQLは解析され、データベースシステムによって実装されたSQLとは独立した中間表現(IR)に変換されます。</target>
        </trans-unit>
        <trans-unit id="cbf50e9263ee70e10f3dafaba154cd39a2429f4d" translate="yes" xml:space="preserve">
          <source>The Phalcon PHP extension is required to run Phalcon Tools. If you haven&amp;rsquo;t installed it yet, please see the &lt;a href=&quot;install&quot;&gt;&lt;em&gt;Installation&lt;/em&gt;&lt;/a&gt; section for instructions.</source>
          <target state="translated">Phalconツールを実行するには、Phalcon PHP拡張が必要です。まだインストールしていない場合は、「&lt;a href=&quot;install&quot;&gt;&lt;em&gt;インストール」&lt;/em&gt;&lt;/a&gt;セクションで手順を確認してください。</target>
        </trans-unit>
        <trans-unit id="cbb8870a54d36c8926d46e328a8cd7f68027e74e" translate="yes" xml:space="preserve">
          <source>The Phalcon extension should appear as part of the output:</source>
          <target state="translated">ファルコン拡張子は出力の一部として表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="3f6059c4243d966e2bd10e6221e3d12686cc894d" translate="yes" xml:space="preserve">
          <source>The Phalcon\Filter component provides a set of commonly needed data filters. It provides object oriented wrappers to the php filter extension. Also allows the developer to define his/her own filters</source>
          <target state="translated">PhalconFilter コンポーネントは、一般的に必要とされるデータフィルタのセットを提供します。これは、php フィルタ拡張モジュールのオブジェクト指向ラッパーを提供します。また、開発者が独自のフィルタを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="4c96474e86551b2bb2ad2874c280f54c99a4dce8" translate="yes" xml:space="preserve">
          <source>The Products controller</source>
          <target state="translated">製品コントローラ</target>
        </trans-unit>
        <trans-unit id="d084942fc15393170283c68aa493d216fc5e9931" translate="yes" xml:space="preserve">
          <source>The Products model</source>
          <target state="translated">製品モデル</target>
        </trans-unit>
        <trans-unit id="7b84d7d242437b8ad059adc6cbe50673a1604d4c" translate="yes" xml:space="preserve">
          <source>The Response component automatically shows the date in GMT timezone as expected in an Expires header.</source>
          <target state="translated">レスポンスコンポーネントは、Expiresヘッダーで予想されるように、GMTタイムゾーンの日付を自動的に表示します。</target>
        </trans-unit>
        <trans-unit id="4dac4842bfd245df80e9e2e906baaca72614e53a" translate="yes" xml:space="preserve">
          <source>The RobotsPart model can be changed to demonstrate this feature:</source>
          <target state="translated">RobotsPartのモデルを変更して、この機能を実演することができます。</target>
        </trans-unit>
        <trans-unit id="88f4f59230105e7ac7590612263649c4a1405188" translate="yes" xml:space="preserve">
          <source>The Search Form</source>
          <target state="translated">検索フォーム</target>
        </trans-unit>
        <trans-unit id="e389ba38a75d52dc02fa2e78aa50c7e886cbeaaf" translate="yes" xml:space="preserve">
          <source>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</source>
          <target state="translated">Voltコンパイラでは、既存のものにさらに関数やテスト、フィルタを追加して拡張することができます。</target>
        </trans-unit>
        <trans-unit id="f908d39a4b7e07929be8bcf4713a26dbf4f0f43a" translate="yes" xml:space="preserve">
          <source>The above auto-loader lacks any kind of security. If a function mistakenly launches the auto-loader and a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:</source>
          <target state="translated">上記のオートローダは何らかのセキュリティを欠いています。関数が誤ってオートローダを起動し、悪意のある文字列がパラメータとして使用された場合、アプリケーションがアクセス可能な任意のファイルを実行することができます。</target>
        </trans-unit>
        <trans-unit id="1afb3126a0d13465741161e97e508446121bdee3" translate="yes" xml:space="preserve">
          <source>The above class implements the method &amp;lsquo;compileFunction&amp;rsquo; which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn&amp;rsquo;t return an string the compilation is done using the default behavior provided by the engine.</source>
          <target state="translated">上記のクラスは、テンプレートで関数呼び出しをコンパイルしようとする前に呼び出されるメソッド 'compileFunction'を実装します。拡張機能の目的は、コンパイルされる関数が、テンプレートから呼び出すことができるPHP関数かどうかを確認することです。拡張機能のイベントは有効なPHPコードを返す必要があります。これは、Voltが生成したものではなく、コンパイルの結果として使用されます。イベントが文字列を返さない場合、エンジンが提供するデフォルトの動作を使用してコンパイルが行われます。</target>
        </trans-unit>
        <trans-unit id="9720c9600f499b56f47dab7827ec2a059d7d9fa3" translate="yes" xml:space="preserve">
          <source>The above code produces the following:</source>
          <target state="translated">上記のコードでは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="641e222caaf8eb49dae693949f9eb22119b80a56" translate="yes" xml:space="preserve">
          <source>The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.</source>
          <target state="translated">上記のコードは、マスタレコード(ロボット)が削除された場合に、参照しているレコード(部品)を全て削除するように設定されています。</target>
        </trans-unit>
        <trans-unit id="998ee14c2c1e8630250397f0b08c5c615346c4b8" translate="yes" xml:space="preserve">
          <source>The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.</source>
          <target state="translated">上記の例では、Memcached バックエンドを使用している場合には、(特に設定の面で)若干の変更があります。</target>
        </trans-unit>
        <trans-unit id="640608739372a9af2b9ee4537a2576930fe25c19" translate="yes" xml:space="preserve">
          <source>The above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.</source>
          <target state="translated">上記の例は学術的な目的のために簡略化したものです。開発者はこれを改良して、任意の種類の依存関係やモデルをアクションに注入してから実行するようにすることができます。</target>
        </trans-unit>
        <trans-unit id="8970b88176bf860cd77533b16c929217f6e1bce8" translate="yes" xml:space="preserve">
          <source>The above example performs a validation using the built-in validator &amp;ldquo;InclusionIn&amp;rdquo;. It checks the value of the field &amp;ldquo;type&amp;rdquo; in a domain list. If the value is not included in the method then the validator will fail and return false.</source>
          <target state="translated">上記の例では、組み込みのバリデーター「InclusionIn」を使用して検証を実行しています。ドメインリストの「type」フィールドの値をチェックします。値がメソッドに含まれていない場合、バリデーターは失敗し、falseを返します。</target>
        </trans-unit>
        <trans-unit id="1cddbdb647c9cf3d91ab7760eb687ea08af15055" translate="yes" xml:space="preserve">
          <source>The above example produces:</source>
          <target state="translated">上記の例では、生成されます。</target>
        </trans-unit>
        <trans-unit id="7baa14afb1f4a2376ce7b38c378d92022ee78db6" translate="yes" xml:space="preserve">
          <source>The above findByRawSql could be used as follows:</source>
          <target state="translated">上記のfindByRawSqlは以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="33e998d267e4b2b372efe4046de348544b11e369" translate="yes" xml:space="preserve">
          <source>The above recommended project structure was generated:</source>
          <target state="translated">以上のような推奨プロジェクトの構成が生成されました。</target>
        </trans-unit>
        <trans-unit id="739f94fc0e64c663df6c8e309d02dc4171ba3d81" translate="yes" xml:space="preserve">
          <source>The adapters available are:</source>
          <target state="translated">使用可能なアダプターは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5dcb2f1b16c2056033a570a80c8b0558d26b28e6" translate="yes" xml:space="preserve">
          <source>The aliases allow us to rename both relationships to solve these problems:</source>
          <target state="translated">エイリアスは、これらの問題を解決するために両方の関係をリネームすることができます。</target>
        </trans-unit>
        <trans-unit id="e2f1609839d5b29f0c21013dd97ccda8358c834f" translate="yes" xml:space="preserve">
          <source>The annotation @Column supports the following parameters:</source>
          <target state="translated">アノテーション @Column は以下のパラメータをサポートしています。</target>
        </trans-unit>
        <trans-unit id="758f73022349b310629caf499314a3f520e72d48" translate="yes" xml:space="preserve">
          <source>The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.</source>
          <target state="translated">アノテーションの読み込み処理は非常に高速ですが、性能上の理由から、アダプタを使用して解析されたアノテーションを保存することをお勧めします。アダプタは処理されたアノテーションをキャッシュしますので、何度もアノテーションをパースする必要はありません。</target>
        </trans-unit>
        <trans-unit id="5c76e8172935d5b329f08c5b299accff8c615d00" translate="yes" xml:space="preserve">
          <source>The annotations are cached only in memory. When the request ends the cache is cleaned reloading the annotations in each request. This adapter is suitable for a development stage</source>
          <target state="translated">アノテーションはメモリ内にのみキャッシュされます。リクエストが終了すると、キャッシュはクリーンアップされ、 各リクエストのアノテーションが再ロードされます。このアダプタは開発段階に適しています。</target>
        </trans-unit>
        <trans-unit id="6489c89aa81d883b6f5e7d30115e951632e6e54c" translate="yes" xml:space="preserve">
          <source>The annotations can be defined in the following way:</source>
          <target state="translated">アノテーションは以下のように定義することができます。</target>
        </trans-unit>
        <trans-unit id="217a0fa6ec74990c9fc55a740b87f1fcd9517720" translate="yes" xml:space="preserve">
          <source>The annotations strategy could be set up this way:</source>
          <target state="translated">アノテーション戦略はこのように設定することができます。</target>
        </trans-unit>
        <trans-unit id="0b1a1d81b44d757bcb9eb9f88e7f4d77325623bd" translate="yes" xml:space="preserve">
          <source>The application is divided into two parts, a frontend, where visitors can sign up the service and a backend where administrative users can manage registered users. Both frontend and backend are combined in a single module.</source>
          <target state="translated">アプリケーションは、訪問者がサービスにサインアップするフロントエンドと、管理者が登録ユーザーを管理するバックエンドの2つの部分に分かれています。フロントエンドとバックエンドの両方を1つのモジュールにまとめています。</target>
        </trans-unit>
        <trans-unit id="a103c5e2df3df30008218b767a0f8bef72a0c5df" translate="yes" xml:space="preserve">
          <source>The application is divided into two parts: a frontend and a backend. The frontend is a public area where visitors can receive information about INVO and request contact information. The backend is an administrative area where registered users can manage their products and customers.</source>
          <target state="translated">アプリケーションは、フロントエンドとバックエンドの2つの部分に分かれています。フロントエンドは、訪問者がINVOに関する情報を受け取ったり、連絡先情報を要求したりできるパブリックエリアです。バックエンドは、登録ユーザーが製品や顧客を管理できる管理エリアです。</target>
        </trans-unit>
        <trans-unit id="27f0e60f6d37271ac41d122aa11b30652511bcfe" translate="yes" xml:space="preserve">
          <source>The array syntax is also allowed to register services:</source>
          <target state="translated">配列構文は、サービスを登録するためにも許可されています。</target>
        </trans-unit>
        <trans-unit id="e9a0d5d2766bf8fe44bf74cc2c452ada5b1b3a13" translate="yes" xml:space="preserve">
          <source>The array-syntax is allowed to easily set/get services in the internal services container:</source>
          <target state="translated">配列構文は、内部サービスコンテナ内のサービスを簡単に設定/取得することができます。</target>
        </trans-unit>
        <trans-unit id="abb8526b44ef24e06e2347eba17fba2e572b137c" translate="yes" xml:space="preserve">
          <source>The associated entity added to the form in the initialization and custom user options are passed to the form constructor:</source>
          <target state="translated">初期化とカスタムユーザーオプションでフォームに追加された関連するエンティティは、フォームのコンストラクタに渡されます。</target>
        </trans-unit>
        <trans-unit id="32e1a1370216ee1811d0355624c36261b1d13de3" translate="yes" xml:space="preserve">
          <source>The associative array passed in &lt;code&gt;Phalcon\Db::createTable()&lt;/code&gt; can have the possible keys:</source>
          <target state="translated">&lt;code&gt;Phalcon\Db::createTable()&lt;/code&gt; 渡される連想配列は、可能なキーを持つことができます：</target>
        </trans-unit>
        <trans-unit id="86d4c1e8b7362f7b37fb25781cecab08320eb2e5" translate="yes" xml:space="preserve">
          <source>The attribute &amp;lsquo;flashSession&amp;rsquo; is how the flash was previously set into the dependency injection container. You need to start the &lt;a href=&quot;session&quot;&gt;&lt;em&gt;session&lt;/em&gt;&lt;/a&gt; first to successfully use the flashSession messenger.</source>
          <target state="translated">属性「flashSession」は、以前に依存関係注入コンテナにフラッシュが設定された方法です。flashSessionメッセンジャーを正常に使用するには、最初に&lt;a href=&quot;session&quot;&gt;&lt;em&gt;セッション&lt;/em&gt;&lt;/a&gt;を開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="d814687055e28b0a1816b4042f54e0cf7b63bb38" translate="yes" xml:space="preserve">
          <source>The autoloader registers a set of directories in which the application will look for the classes that it will eventually need.</source>
          <target state="translated">オートローダーは、アプリケーションが最終的に必要とするクラスを探すディレクトリのセットを登録します。</target>
        </trans-unit>
        <trans-unit id="57392386089b122414f354b2c8a4aab9ebcab9a9" translate="yes" xml:space="preserve">
          <source>The available frontend adapters that are used as interfaces or input sources to the cache are:</source>
          <target state="translated">キャッシュへのインターフェースまたは入力ソースとして使用される利用可能なフロントエンドアダプタは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="54ed46c150718473d8504c434e30cd577b337e90" translate="yes" xml:space="preserve">
          <source>The available options are:</source>
          <target state="translated">利用可能なオプションは</target>
        </trans-unit>
        <trans-unit id="cd780c7581f0647f835fbe37ae0fc02775cf0ed9" translate="yes" xml:space="preserve">
          <source>The available options for generating migrations are:</source>
          <target state="translated">移行を生成するために利用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="492a577b9447713db2560afab6b2ac84e1874693" translate="yes" xml:space="preserve">
          <source>The available query options are:</source>
          <target state="translated">利用可能なクエリオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="43062c2300a1e8a68f6d57cbee5a67f7f9cd70ad" translate="yes" xml:space="preserve">
          <source>The available render levels are:</source>
          <target state="translated">利用可能なレンダーレベルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dcf1b99c8bb38ac468afca8f27e6d74afd3a4c5e" translate="yes" xml:space="preserve">
          <source>The backend adapters available to store cache data are:</source>
          <target state="translated">キャッシュデータを保存するために利用できるバックエンドアダプタは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a34dcd281686b81342de96a0ead185c94fbba819" translate="yes" xml:space="preserve">
          <source>The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren&amp;rsquo;t logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:</source>
          <target state="translated">バックエンドは、登録ユーザーのみがアクセスできるプライベートエリアです。したがって、登録されたユーザーのみがこれらのコントローラーにアクセスできることを確認する必要があります。アプリケーションにログインしていない状態で、たとえば製品コントローラー（プライベート）にアクセスしようとすると、次のような画面が表示されます。</target>
        </trans-unit>
        <trans-unit id="bbc47f6cb36efc8d9ccba4db4548bdedd6989c6f" translate="yes" xml:space="preserve">
          <source>The behavior of this component is based on the PHP&amp;rsquo;s capability of &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;autoloading classes&lt;/a&gt;. If a class that does not yet exist is used in any part of the code, a special handler will try to load it. &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; serves as the special handler for this operation. By loading classes on a need-to-load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;lazy initialization&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントの動作は、PHPの&lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;クラス&lt;/a&gt;のオートロード機能に基づいています。まだ存在しないクラスがコードのいずれかの部分で使用されている場合、特別なハンドラーがそれをロードしようとします。&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;は、この操作の特別なハンドラとして機能します。ロードの必要性に基づいてクラスをロードすることにより、必要なファイルのみが読み取られるため、全体的なパフォーマンスが向上します。この手法は、&lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;遅延初期化&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="9c2d350d8d50d11db8a1ead417f1eb124b2f5e9e" translate="yes" xml:space="preserve">
          <source>The best solution here is to implement background jobs. The web application puts jobs into a queue and which will be processed separately.</source>
          <target state="translated">ここでの最良の解決策は、バックグラウンドジョブを実装することです。ウェブアプリケーションは、ジョブをキューに入れ、それを別々に処理します。</target>
        </trans-unit>
        <trans-unit id="3f7f304234b60ec1a67f38ce4676252110b1cedb" translate="yes" xml:space="preserve">
          <source>The best way to use this guide is to follow each step in turn. You can get the complete code &lt;a href=&quot;https://github.com/phalcon/tutorial&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">このガイドを使用する最良の方法は、各ステップを順番に実行することです。&lt;a href=&quot;https://github.com/phalcon/tutorial&quot;&gt;ここで&lt;/a&gt;完全なコードを取得できます。</target>
        </trans-unit>
        <trans-unit id="3e4b2b54f278b9b747c7d0d271bff5e48ff50235" translate="yes" xml:space="preserve">
          <source>The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.</source>
          <target state="translated">双方向の関係は両方のモデルで関係を構築し、それぞれのモデルは他方の逆の関係を定義しています。</target>
        </trans-unit>
        <trans-unit id="eae0c2b78cdb25e725d441899d1f8fba5aaf5fa7" translate="yes" xml:space="preserve">
          <source>The browser output should remain the same. The &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; static component is automatically created when the action execution has ended. Learn more about &lt;a href=&quot;views&quot;&gt;&lt;em&gt;views usage here&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">ブラウザの出力は同じままである必要があります。&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ MVC \ビューの&lt;/em&gt;&lt;/a&gt;アクションの実行が終了したときの静的コンポーネントが自動的に作成されます。&lt;a href=&quot;views&quot;&gt;&lt;em&gt;ビューの使用&lt;/em&gt;&lt;/a&gt;について詳しくは、&lt;em&gt;こちらを&lt;/em&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b129a27dc5a0498cb8eb1af9902614353c32d2c7" translate="yes" xml:space="preserve">
          <source>The bury command puts a job into the &amp;ldquo;buried&amp;rdquo; state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the &amp;ldquo;kick&amp;rdquo; command.</source>
          <target state="translated">buryコマンドは、ジョブを「埋没」状態にします。埋められたジョブはFIFOリンクリストに入れられ、クライアントが「kick」コマンドでそれらをキックするまで、サーバーによって再度処理されることはありません。</target>
        </trans-unit>
        <trans-unit id="335f0ffe68bcc5fc2746f4bb42dbaa9723a35ed6" translate="yes" xml:space="preserve">
          <source>The caching is done by the &lt;a href=&quot;cache&quot;&gt;&lt;em&gt;Phalcon\Cache&lt;/em&gt;&lt;/a&gt; component via the view component. Learn more about how this integration works in the section &lt;a href=&quot;views&quot;&gt;&lt;em&gt;&amp;ldquo;Caching View Fragments&amp;rdquo;&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">キャッシュは、ビューコンポーネントを介して&lt;a href=&quot;cache&quot;&gt;&lt;em&gt;Phalcon \ Cache&lt;/em&gt;&lt;/a&gt;コンポーネントによって行われます。この統合がどのように機能するかについては、&lt;a href=&quot;views&quot;&gt;&lt;em&gt;「キャッシュビューフラグメント」の&lt;/em&gt;&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ff855939b43755bb953ed6627ef485ac1db5a0e9" translate="yes" xml:space="preserve">
          <source>The caching process is divided into 2 parts:</source>
          <target state="translated">キャッシングの流れは2つに分かれています。</target>
        </trans-unit>
        <trans-unit id="a26592d06aade67b6e4cd592b7700ec609f9454a" translate="yes" xml:space="preserve">
          <source>The cipher is one of the encryption algorithms supported by openssl. You can see a list &lt;a href=&quot;http://www.php.net/manual/en/function.openssl-get-cipher-methods.php&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">暗号は、opensslでサポートされている暗号化アルゴリズムの1つです。&lt;a href=&quot;http://www.php.net/manual/en/function.openssl-get-cipher-methods.php&quot;&gt;ここで&lt;/a&gt;リストを見ることができます</target>
        </trans-unit>
        <trans-unit id="4b092ff6523de7f09bb773159a22676adf4cb05b" translate="yes" xml:space="preserve">
          <source>The class is called &amp;ldquo;ProductsMigration_100&amp;rdquo;. Suffix 100 refers to the version 1.0.0. &lt;code&gt;morphTable()&lt;/code&gt; receives an associative array with 4 possible sections:</source>
          <target state="translated">このクラスは「ProductsMigration_100」と呼ばれます。サフィックス100はバージョン1.0.0を指します。 &lt;code&gt;morphTable()&lt;/code&gt; は、4つの可能なセクションを持つ連想配列を受け取ります。</target>
        </trans-unit>
        <trans-unit id="88009ad71950018345710cfc6b1fb63c7e9f9cda" translate="yes" xml:space="preserve">
          <source>The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.</source>
          <target state="translated">上のコードでは、バリデーションやフィルタ、追加のチェックが欠けていますが、ディスパッチャでの正常な動作の流れを示しています。</target>
        </trans-unit>
        <trans-unit id="a33e8692c452d874d4895193f46dd7917c2c3082" translate="yes" xml:space="preserve">
          <source>The column map is used in the case to get real column name</source>
          <target state="translated">実際のカラム名を取得する場合は、カラムマップを使用します。</target>
        </trans-unit>
        <trans-unit id="d4fbb33db4dfe92b8516d704ce0f4e73bc091263" translate="yes" xml:space="preserve">
          <source>The column&amp;rsquo;s length if any</source>
          <target state="translated">存在する場合、列の長さ</target>
        </trans-unit>
        <trans-unit id="f21c33ab37e48ce86c42f76a057a6e8c4917c18f" translate="yes" xml:space="preserve">
          <source>The column&amp;rsquo;s type (string, integer, decimal, boolean)</source>
          <target state="translated">列のタイプ（文字列、整数、10進数、ブール）</target>
        </trans-unit>
        <trans-unit id="240b986000f547b691054ee0ddf1eb97f650dfa1" translate="yes" xml:space="preserve">
          <source>The command &amp;ldquo;create-controller&amp;rdquo; generates controller skeleton structures. It&amp;rsquo;s important to invoke this command inside a directory that already has a Phalcon project.</source>
          <target state="translated">「create-controller」コマンドは、コントローラーのスケルトン構造を生成します。すでにPhalconプロジェクトがあるディレクトリ内でこのコマンドを呼び出すことが重要です。</target>
        </trans-unit>
        <trans-unit id="22758567a992d04bd6d3bec79b5c5d086494ffe5" translate="yes" xml:space="preserve">
          <source>The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:</source>
          <target state="translated">コンパイルパスは上記のオプションに従って生成されます。もし開発者がコンパイルパスの定義を完全に自由にしたい場合は、匿名関数を使用して生成することができます。以下の例は、コンパイルパスを動的に変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0a2f323cf07e70e7303548eedb3c6cc854c97c55" translate="yes" xml:space="preserve">
          <source>The component &lt;a href=&quot;../api/phalcon_translate&quot;&gt;&lt;em&gt;Phalcon\Translate&lt;/em&gt;&lt;/a&gt; aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user&amp;rsquo;s chosen language supported by the application.</source>
          <target state="translated">コンポーネント&lt;a href=&quot;../api/phalcon_translate&quot;&gt;&lt;em&gt;Phalcon \ Translate&lt;/em&gt;&lt;/a&gt;は、多言語アプリケーションの作成を支援します。このコンポーネントを使用するアプリケーションは、アプリケーションがサポートするユーザーの選択した言語に基づいて、さまざまな言語でコンテンツを表示します。</target>
        </trans-unit>
        <trans-unit id="037f3a0d2dcaf8618f010ebbb25b1032b4480e8f" translate="yes" xml:space="preserve">
          <source>The component can now simply access the service it requires when it needs it, if it does not require a service it is not even initialized, saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.</source>
          <target state="translated">コンポーネントは、必要なときに必要なサービスにアクセスできるようになり、サービスを必要としない場合は初期化もされず、リソースを節約できるようになりました。コンポーネントは高度に分離されるようになりました。例えば、接続の作成方法や動作、その他の側面を置き換えることができ、コンポーネントに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="26cd35b196908d68d844d7d8503bb274711d34a4" translate="yes" xml:space="preserve">
          <source>The controller &amp;lsquo;PostsController&amp;rsquo; might look like this:</source>
          <target state="translated">コントローラ「PostsController」は次のようになります。</target>
        </trans-unit>
        <trans-unit id="62e98a9d7859dd3d36707fa5bfb5a60a1a54d28e" translate="yes" xml:space="preserve">
          <source>The controller classes must have the suffix &amp;ldquo;Controller&amp;rdquo; and controller actions must have the suffix &amp;ldquo;Action&amp;rdquo;. If you access the application from your browser, you should see something like this:</source>
          <target state="translated">コントローラクラスには「Controller」というサフィックスが必要であり、コントローラアクションには「Action」というサフィックスが必要です。ブラウザからアプリケーションにアクセスすると、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="27bc7f79ecc8f708a6973080cbae902f382666c1" translate="yes" xml:space="preserve">
          <source>The controller looks like:</source>
          <target state="translated">コントローラーはこんな感じ。</target>
        </trans-unit>
        <trans-unit id="695080a458c8dc299a21674792e6db9d7d25c88e" translate="yes" xml:space="preserve">
          <source>The controllers provide the &amp;ldquo;flow&amp;rdquo; between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</source>
          <target state="translated">コントローラは、モデルとビューの間の「フロー」を提供します。コントローラーは、Webブラウザーからの着信要求を処理し、モデルにデータを問い合わせ、そのデータをビューに渡して表示します。</target>
        </trans-unit>
        <trans-unit id="a043bde7e802ebf9e0287f39524cf9fa525fbb23" translate="yes" xml:space="preserve">
          <source>The controllers provide the &amp;ldquo;flow&amp;rdquo; between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. &lt;a href=&quot;controllers&quot;&gt;&lt;em&gt;Learn more&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">コントローラは、モデルとビューの間の「フロー」を提供します。コントローラーは、Webブラウザーからの着信要求を処理し、モデルにデータを問い合わせ、そのデータをビューに渡して表示します。&lt;a href=&quot;controllers&quot;&gt;&lt;em&gt;もっと詳しく知る&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8ec1481b94a60e812c15283d7aeaa12db79cc8c" translate="yes" xml:space="preserve">
          <source>The core of all the work of the controller occurs when handle() is invoked:</source>
          <target state="translated">コントローラのすべての作業の中核は、handle()が呼び出されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="translated">ループの現在の繰り返し。(0 インデックス付き)</target>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="translated">ループの現在の繰り返し。(1 インデックス付き)</target>
        </trans-unit>
        <trans-unit id="e27ba8c82917a6694e416f728ca89e006ddad051" translate="yes" xml:space="preserve">
          <source>The current page</source>
          <target state="translated">現在のページ</target>
        </trans-unit>
        <trans-unit id="265fe3c06f41ac0ab4c6a5bf9a0d86a4dde10c06" translate="yes" xml:space="preserve">
          <source>The data added to the session (&lt;code&gt;$this-&amp;gt;session&lt;/code&gt;) are available throughout the application, while persistent (&lt;code&gt;$this-&amp;gt;persistent&lt;/code&gt;) can only be accessed in the scope of the current class.</source>
          <target state="translated">セッションに追加されたデータ（ &lt;code&gt;$this-&amp;gt;session&lt;/code&gt; ）はアプリケーション全体で使用できますが、永続的（ &lt;code&gt;$this-&amp;gt;persistent&lt;/code&gt; ）には現在のクラスのスコープでのみアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e31876e03480aa2decc195335f0bd9132b1635c0" translate="yes" xml:space="preserve">
          <source>The data delete is similar to update. The &amp;ldquo;id&amp;rdquo; passed as parameter indicates what robot must be deleted:</source>
          <target state="translated">データの削除は更新に似ています。パラメータとして渡される「id」は、削除する必要があるロボットを示します。</target>
        </trans-unit>
        <trans-unit id="31af5c90088ff139199cd6f1b57cbc89a1e15aff" translate="yes" xml:space="preserve">
          <source>The data found is bound to the form by passing the model as first parameter. Thanks to this, the user can change any value and then sent it back to the database through to the &amp;ldquo;save&amp;rdquo; action:</source>
          <target state="translated">見つかったデータは、モデルを最初のパラメーターとして渡すことでフォームにバインドされます。これにより、ユーザーは任意の値を変更して、「保存」アクションを介してデータベースに送り返すことができます。</target>
        </trans-unit>
        <trans-unit id="9dac5debd217f13ac2afe1ea766dd5d3fae5c641" translate="yes" xml:space="preserve">
          <source>The data update is similar to insertion. The &amp;ldquo;id&amp;rdquo; passed as parameter indicates what robot must be updated:</source>
          <target state="translated">データの更新は挿入に似ています。パラメータとして渡される「id」は、更新する必要があるロボットを示します。</target>
        </trans-unit>
        <trans-unit id="47b66defe420a397d1f8646e9628469ad4fb127f" translate="yes" xml:space="preserve">
          <source>The default component must be replaced in the service container:</source>
          <target state="translated">デフォルトのコンポーネントは、サービスコンテナ内で置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="d8e9847c195df851fa955bb534e7c7bb655507e5" translate="yes" xml:space="preserve">
          <source>The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.</source>
          <target state="translated">区切り文字は、アプリケーションが現在実行されているデータベースシステムに応じて、有効な区切り文字に動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="8ecf8153b66916aa27a468057e37f66328bf67a0" translate="yes" xml:space="preserve">
          <source>The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the metadata manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.</source>
          <target state="translated">開発者は、メタデータを手動で定義するオプションもあります。このストラテジーは、メタデータマネージャで設定されたストラテジーよりも優先されます。マッピングされたテーブルに追加/変更/削除された新しいカラムは、すべてが適切に動作するように追加/変更/削除されなければなりません。</target>
        </trans-unit>
        <trans-unit id="56fd8a0a0599b40cd24a6a9dc32384edcf560fab" translate="yes" xml:space="preserve">
          <source>The dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.</source>
          <target state="translated">ディスパッチループにより、実行フローを別のコントローラ/アクションに転送することができます。これは、ユーザーが特定のオプションにアクセスできるかどうかを確認したり、ユーザーを他の画面にリダイレクトしたり、単にコードを再利用したりするのに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="acbcc5d4d02d8ab92f318c20169bc48bbb28e29c" translate="yes" xml:space="preserve">
          <source>The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the previous example only one action was executed. Now we&amp;rsquo;ll see how the &lt;code&gt;forward()&lt;/code&gt; method can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.</source>
          <target state="translated">実行するアクションがなくなるまで、ディスパッチャ内でディスパッチループが実行されます。前の例では、1つのアクションのみが実行されました。次に、 &lt;code&gt;forward()&lt;/code&gt; メソッドが、実行を別のコントローラー/アクションに転送することにより、ディスパッチループでより複雑な操作フローを提供する方法を確認します。</target>
        </trans-unit>
        <trans-unit id="76886823153907bf40544494702447e5e1a325cd" translate="yes" xml:space="preserve">
          <source>The dispatcher will look for a &amp;ldquo;PostsController&amp;rdquo; and its action &amp;ldquo;showAction&amp;rdquo;. A simple controller file for this example:</source>
          <target state="translated">ディスパッチャーは、「PostsController」とそのアクション「showAction」を探します。この例の単純なコントローラーファイル：</target>
        </trans-unit>
        <trans-unit id="4ef74f56eabf997798500112d0972ca4617268dc" translate="yes" xml:space="preserve">
          <source>The easier way to make a model react to events is to implement a method with the same name of the event in the model&amp;rsquo;s class:</source>
          <target state="translated">モデルをイベントに反応させる簡単な方法は、モデルのクラスに同じ名前のイベントを持つメソッドを実装することです。</target>
        </trans-unit>
        <trans-unit id="71cbbae88315b0023f0684d64734ca4cfbdf1c29" translate="yes" xml:space="preserve">
          <source>The easiest way to achieve this is by adding a static method to the model that chooses the right cache to be used:</source>
          <target state="translated">これを実現する最も簡単な方法は、使用する適切なキャッシュを選択する静的メソッドをモデルに追加することです。</target>
        </trans-unit>
        <trans-unit id="782c40dc49cc31f80a5496eee22fdcbd14e30824" translate="yes" xml:space="preserve">
          <source>The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.</source>
          <target state="translated">キャッシュに追加された要素は、キーによって一意に識別されます。File バックエンドの場合、キーは実際のファイル名です。キャッシュからデータを取得するためには、一意のキーを使ってキャッシュを呼び出す必要があります。キーが存在しない場合、getメソッドはnullを返します。</target>
        </trans-unit>
        <trans-unit id="375a36e5f73924eaf00aa8d999e1dbf8d1b2eb03" translate="yes" xml:space="preserve">
          <source>The else clause is also supported:</source>
          <target state="translated">else句もサポートしています。</target>
        </trans-unit>
        <trans-unit id="11a863ac19bdc8bc671da5a6a86c18026b14fec4" translate="yes" xml:space="preserve">
          <source>The empty index action gives the clean pass to a view with the form definition (app/views/signup/index.phtml):</source>
          <target state="translated">空のインデックスアクションは、フォーム定義を持つビュー(app/views/signup/index.phtml)にクリーンパスを与えます。</target>
        </trans-unit>
        <trans-unit id="f6da63b6908de3f65ab9afe52a33c6e281276dd2" translate="yes" xml:space="preserve">
          <source>The events manager can collect every response returned by every notified listener. This example explains how it works:</source>
          <target state="translated">イベントマネージャは、通知されたリスナーから返されたすべてのレスポンスを収集することができます。この例では、それがどのように動作するかを説明します。</target>
        </trans-unit>
        <trans-unit id="0044a2250ff99f1838c14513d0181c4b476493f5" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how to define names to route parameters:</source>
          <target state="translated">以下の例は、ルートパラメータに名前を定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="dd7eaf10308a74f9be5c1bd38d199121a992c831" translate="yes" xml:space="preserve">
          <source>The example below shows how to change the log format:</source>
          <target state="translated">以下の例では、ログの形式を変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a87f6f459009a4d8546d700de51d951e839e7c86" translate="yes" xml:space="preserve">
          <source>The example below shows how to create a log and add messages to it:</source>
          <target state="translated">以下の例では、ログを作成し、そこにメッセージを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3d107c5010f6e8c180cccd434fe2d8fce60f9654" translate="yes" xml:space="preserve">
          <source>The example given above performs a validation using the built-in validator &amp;ldquo;InclusionIn&amp;rdquo;. It checks the value of the field &amp;ldquo;type&amp;rdquo; in a domain list. If the value is not included in the method, then the validator will fail and return false.</source>
          <target state="translated">上記の例では、組み込みのバリデーター「InclusionIn」を使用して検証を実行しています。ドメインリストの「type」フィールドの値をチェックします。値がメソッドに含まれていない場合、バリデーターは失敗し、falseを返します。</target>
        </trans-unit>
        <trans-unit id="0d944ebff41e551dc367881730a51e215f7b687e" translate="yes" xml:space="preserve">
          <source>The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:</source>
          <target state="translated">有効期限は、クライアント(ブラウザ)でページをキャッシュする最も簡単で効果的な方法の一つです。現在の日付から始まり、そのページがブラウザのキャッシュに保存される時間を追加します。この日付の有効期限が切れるまで、新しいコンテンツはサーバーから要求されません。</target>
        </trans-unit>
        <trans-unit id="84350c2d6ed57558903fa70dd517a921495b2125" translate="yes" xml:space="preserve">
          <source>The field &amp;ldquo;price&amp;rdquo; is printed by its formatted using a Volt filter:</source>
          <target state="translated">フィールド「price」は、Voltフィルターを使用してフォーマットされて出力されます。</target>
        </trans-unit>
        <trans-unit id="7924fb45026d39b023bc91ded7d7f81fca13465a" translate="yes" xml:space="preserve">
          <source>The field is an auto_increment/serial column</source>
          <target state="translated">フィールドはオートインクリメント/シリアルカラムです。</target>
        </trans-unit>
        <trans-unit id="4040102c2d612c234b07faa096ee296ae2a16509" translate="yes" xml:space="preserve">
          <source>The final output will be the following:</source>
          <target state="translated">最終的な出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4f50e5975bcb7c034434ae156ec3a42bf4c365b4" translate="yes" xml:space="preserve">
          <source>The first &amp;ldquo;handler&amp;rdquo; that we will implement is which by method GET returns all available robots. Let&amp;rsquo;s use PHQL to perform this simple query returning the results as JSON:</source>
          <target state="translated">実装する最初の「ハンドラ」は、メソッドGETが使用可能なすべてのロボットを返すハンドラです。PHQLを使用して、結果をJSONとして返すこの簡単なクエリを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="1117bbb377915135371644cc4e0c10d28e69d569" translate="yes" xml:space="preserve">
          <source>The first example shows how to convert native arrays into &lt;a href=&quot;../api/phalcon_config&quot;&gt;&lt;em&gt;Phalcon\Config&lt;/em&gt;&lt;/a&gt; objects. This option offers the best performance since no files are read during this request.</source>
          <target state="translated">最初の例は、ネイティブ配列を&lt;a href=&quot;../api/phalcon_config&quot;&gt;&lt;em&gt;Phalcon \ Config&lt;/em&gt;&lt;/a&gt;オブジェクトに変換する方法を示しています。このオプションは、このリクエスト中にファイルが読み込まれないため、最高のパフォーマンスを提供します。</target>
        </trans-unit>
        <trans-unit id="d2219d950a500ff3778fc9dcc313112ee94e85ff" translate="yes" xml:space="preserve">
          <source>The first file you need to create is the bootstrap file. This file is very important; since it serves as the base of your application, giving you control of all aspects of it. In this file you can implement initialization of components as well as application behavior.</source>
          <target state="translated">最初に作成する必要があるファイルは、ブートストラップファイルです。このファイルは非常に重要です。このファイルはアプリケーションのベースとなり、アプリケーションのすべての側面を制御することができるので、非常に重要です。このファイルでは、アプリケーションの動作と同様にコンポーネントの初期化を実装することができます。</target>
        </trans-unit>
        <trans-unit id="725475d9c0d5071783fbc7945759bcf370b06c0e" translate="yes" xml:space="preserve">
          <source>The first is create a custom builder, so we can generate a totally customized query:</source>
          <target state="translated">1つ目はカスタムビルダーを作成することで、完全にカスタマイズされたクエリを生成することができます。</target>
        </trans-unit>
        <trans-unit id="3af785d8925068e11b1d45eaf8a8df5f5ab0b2aa" translate="yes" xml:space="preserve">
          <source>The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.</source>
          <target state="translated">1 番目のパラメータは、リレーションシップで使用されるローカル・モデルのフィールドを示し、2 番目のパラメータは参照モデルの名前、3 番目のパラメータは参照モデルのフィールド名を示します。配列を使用して、リレーションシップ内の複数のフィールドを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="31f8c9f176d9fb9f55754c986ba99a409a8adda0" translate="yes" xml:space="preserve">
          <source>The first parameter of the &lt;code&gt;add()&lt;/code&gt; method is the pattern you want to match and, optionally, the second parameter is a set of paths. In this case, if the URI is /admin/users/my-profile, then the &amp;ldquo;users&amp;rdquo; controller with its action &amp;ldquo;profile&amp;rdquo; will be executed. It&amp;rsquo;s important to remember that the router does not execute the controller and action, it only collects this information to inform the correct component (ie. &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt;) that this is the controller/action it should execute.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; メソッドの最初のパラメーターは照合するパターンで、オプションで2番目のパラメーターはパスのセットです。この場合、URIが/ admin / users / my-profileの場合、アクション「プロファイル」を持つ「ユーザー」コントローラーが実行されます。ルーターはコントローラーとアクションを実行しないことを覚えておくことが重要です。ルーターがこの情報を収集するのは、正しいコンポーネント（つまり&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt;）にこれが実行するコントローラー/アクションであることを通知するためだけです。</target>
        </trans-unit>
        <trans-unit id="cde287917aac27b3e22cbb3b304b4b95b633ba88" translate="yes" xml:space="preserve">
          <source>The first part that we find in the bootstrap is registering an autoloader. This will be used to load classes as controllers and models in the application. For example we may register one or more directories of controllers increasing the flexibility of the application. In our example we have used the component &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">ブートストラップで最初に見つかるのは、オートローダーの登録です。これは、アプリケーションのコントローラーおよびモデルとしてクラスをロードするために使用されます。たとえば、コントローラの1つ以上のディレクトリを登録して、アプリケーションの柔軟性を高めることができます。この例では、コンポーネント&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;を使用しました。</target>
        </trans-unit>
        <trans-unit id="a70e98b10b64a7d236cca419dd88c5eba70add4d" translate="yes" xml:space="preserve">
          <source>The first validator has the option &amp;lsquo;cancelOnFail&amp;rsquo; with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.</source>
          <target state="translated">最初のバリデーターのオプションは 'cancelOnFail'で値はtrueであるため、そのバリデーターが失敗した場合、チェーン内の残りのバリデーターは実行されません。</target>
        </trans-unit>
        <trans-unit id="8c192661ae891c40c2c4dc6aa2d23784b81aadec" translate="yes" xml:space="preserve">
          <source>The following HTML is generated:</source>
          <target state="translated">以下のようなHTMLが生成されます。</target>
        </trans-unit>
        <trans-unit id="6a79a5e08d671144eb20ac02ddd2c6c35c70e4e7" translate="yes" xml:space="preserve">
          <source>The following HTML will be produced.</source>
          <target state="translated">以下のようなHTMLが生成されます。</target>
        </trans-unit>
        <trans-unit id="c7b68eee79f7970464df5d16275110a11055a7ca" translate="yes" xml:space="preserve">
          <source>The following HTML will generated:</source>
          <target state="translated">以下のようなHTMLが生成されます。</target>
        </trans-unit>
        <trans-unit id="c37ebf97320060675dab01784957db49ad95ac12" translate="yes" xml:space="preserve">
          <source>The following NoSQL databases are supported:</source>
          <target state="translated">以下のNoSQLデータベースがサポートされています。</target>
        </trans-unit>
        <trans-unit id="36a17f56d5a7eff4dd2c7092e033ba6305566528" translate="yes" xml:space="preserve">
          <source>The following PHP is generated:</source>
          <target state="translated">以下のようなPHPが生成されます。</target>
        </trans-unit>
        <trans-unit id="056ffe62284c716da0acd06843f2f476427886f4" translate="yes" xml:space="preserve">
          <source>The following annotations are supported:</source>
          <target state="translated">以下のアノテーションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="7103263c3de1403ce6e5486157265ec887bd8932" translate="yes" xml:space="preserve">
          <source>The following are examples of custom routes:</source>
          <target state="translated">カスタムルートの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="c476eb1478af5a0ac4719ae3a2656de74d990174" translate="yes" xml:space="preserve">
          <source>The following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the mod_rewrite module allowing to use friendly URLs and the &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;router component&lt;/em&gt;&lt;/a&gt;. Commonly an application has the following structure:</source>
          <target state="translated">以下は、PhalconでApacheをセットアップするために使用できる潜在的な構成です。これらのメモは、mod_rewriteモジュールの設定に主に焦点を当てており、わかりやすいURLと&lt;a href=&quot;routing&quot;&gt;&lt;em&gt;ルーターコンポーネント&lt;/em&gt;&lt;/a&gt;を使用でき&lt;em&gt;ます&lt;/em&gt;。通常、アプリケーションの構造は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="46b684bf814f4fd787f7b792c7356759543c503a" translate="yes" xml:space="preserve">
          <source>The following are potential configurations you can use to setup nginx with Phalcon:</source>
          <target state="translated">Phalcon で nginx を設定する際に使用できる可能性のある設定は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="96bbbbb8367c85dccb708eb013f3f45dae5b3d13" translate="yes" xml:space="preserve">
          <source>The following are the built-in filters provided by this component:</source>
          <target state="translated">以下は、このコンポーネントが提供する組み込みフィルタです。</target>
        </trans-unit>
        <trans-unit id="1a2471eac57641cd6d1feedf39e502784d1dcbe4" translate="yes" xml:space="preserve">
          <source>The following behavior is an example, it implements the Blameable behavior which helps identify the user that is performed operations over a model:</source>
          <target state="translated">以下の動作は例で、モデル上で操作を行ったユーザーを識別するのに役立つBlameable動作を実装しています。</target>
        </trans-unit>
        <trans-unit id="938575ec8e7fa75440eee1b86a632a24fd89a8d7" translate="yes" xml:space="preserve">
          <source>The following built-in behaviors are provided by the framework:</source>
          <target state="translated">以下のビルトインビヘイビアがフレームワークによって提供されています。</target>
        </trans-unit>
        <trans-unit id="1096011c0794f94e3f2405fd01e25c73c8d86476" translate="yes" xml:space="preserve">
          <source>The following built-in functions are available in Volt:</source>
          <target state="translated">Voltには以下のような機能が内蔵されています。</target>
        </trans-unit>
        <trans-unit id="59540566cedd2e58b9d5ddd1accc3f81a5d74db9" translate="yes" xml:space="preserve">
          <source>The following built-in tests are available in Volt:</source>
          <target state="translated">Voltでは、以下のような内蔵テストが可能です。</target>
        </trans-unit>
        <trans-unit id="96828b04cfe484f6490ca9e7f3ee81a83d0e7b79" translate="yes" xml:space="preserve">
          <source>The following code is generated by the script:</source>
          <target state="translated">以下のようなコードがスクリプトで生成されます。</target>
        </trans-unit>
        <trans-unit id="e89ce9c96530816ce65e4ec43b256535c9bb7a06" translate="yes" xml:space="preserve">
          <source>The following comparison operators are available:</source>
          <target state="translated">比較演算子には以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="02d49a4a892062eac28318a072e40c0ef6738c92" translate="yes" xml:space="preserve">
          <source>The following compilation events are available to be implemented in extensions:</source>
          <target state="translated">以下のコンパイルイベントは、拡張機能で実装することができます。</target>
        </trans-unit>
        <trans-unit id="888d47dd60f828aafca5323807c544a7340ab904" translate="yes" xml:space="preserve">
          <source>The following events are available to define custom business rules that can be executed when a delete operation is performed:</source>
          <target state="translated">削除操作が実行されたときに実行されるカスタムビジネスルールを定義するには、以下のイベントを利用できます。</target>
        </trans-unit>
        <trans-unit id="8e6144552c3b65547ee5055192e3963dd1922146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to attach listeners to this component:</source>
          <target state="translated">次の例は、このコンポーネントにリスナーをアタッチする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e2f6ffb0c750c58c9db09200af7e5cfcdc9a230e" translate="yes" xml:space="preserve">
          <source>The following example explains how to create additional validators for this component:</source>
          <target state="translated">次の例では、このコンポーネントのバリデータを追加で作成する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="35c19ec7e65f13d0c065afa15b52977bcef322ea" translate="yes" xml:space="preserve">
          <source>The following example implements &lt;a href=&quot;http://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt; to stop the execution and generate a backtrace:</source>
          <target state="translated">次の例では、&lt;a href=&quot;http://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt;を実装して実行を停止し、バックトレースを生成します。</target>
        </trans-unit>
        <trans-unit id="d9fa4125661936b8ae0faaa2ef9333b634ce57d7" translate="yes" xml:space="preserve">
          <source>The following example implements an event that validates the year cannot be smaller than 0 on update or insert:</source>
          <target state="translated">次の例では、更新時や挿入時に年を0より小さくできないことを検証するイベントを実装しています。</target>
        </trans-unit>
        <trans-unit id="4ed79d99f2a2aa3f62168c130d23ae90f66c1894" translate="yes" xml:space="preserve">
          <source>The following example is a bit lengthy, but it attempts to explain why Phalcon uses service location and dependency injection. First, let&amp;rsquo;s pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.</source>
          <target state="translated">次の例は少し長いですが、Phalconがサービスの場所と依存性の注入を使用する理由を説明しようとしています。まず、SomeComponentというコンポーネントを開発しているとしましょう。これは、現在重要ではないタスクを実行します。私たちのコンポーネントには、データベースへの接続であるいくつかの依存関係があります。</target>
        </trans-unit>
        <trans-unit id="3d4fc6fe3d1daa7b5df27aa839e675ff9a728bc0" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a plugin that clean/repair the HTML produced by the render process using &lt;a href=&quot;http://www.php.net/manual/en/book.tidy.php&quot;&gt;Tidy&lt;/a&gt;:</source>
          <target state="translated">次の例は、&lt;a href=&quot;http://www.php.net/manual/en/book.tidy.php&quot;&gt;Tidy&lt;/a&gt;を使用してレンダリングプロセスによって生成されたHTMLをクリーンアップ/修復するプラグインを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="eea363145d813c8f6f5ba5b208fe99b52e36dac5" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a table:</source>
          <target state="translated">以下の例では、テーブルの作成方法を示しています。</target>
        </trans-unit>
        <trans-unit id="016ee7af4c2c1178ed33fbeeef80097407e78e47" translate="yes" xml:space="preserve">
          <source>The following example shows how to define the metadata manually:</source>
          <target state="translated">次の例では、メタデータを手動で定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="71efad2e6b7be51cc3bf2aa1fe4c0b65f74bfa8e" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a controller that use namespaces:</source>
          <target state="translated">以下の例では、名前空間を使用するコントローラの実装方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d2f8cebee311e0944cc8282a092650a4aefd8928" translate="yes" xml:space="preserve">
          <source>The following example shows how to minify a collection of resources:</source>
          <target state="translated">次の例は、リソースのコレクションをミニマイズする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d43e47ddc225405cc248a3ee3d2cea285dfca6bb" translate="yes" xml:space="preserve">
          <source>The following example shows how to use it:</source>
          <target state="translated">以下の例では、その使い方を紹介しています。</target>
        </trans-unit>
        <trans-unit id="a5567bb1e6209095e27db87f2b146796587de8f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to use operators:</source>
          <target state="translated">以下の例では、演算子の使い方を説明します。</target>
        </trans-unit>
        <trans-unit id="5942e1b1a8541035a9e380c1f55d4da5f5fc297f" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this component in stand-alone mode:</source>
          <target state="translated">次の例では、このコンポーネントをスタンドアロンモードで使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3de69a9ffbce252a9645f5a616b7f8dc1a564784" translate="yes" xml:space="preserve">
          <source>The following example shows how to write a jQuery &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;ajax request&lt;/a&gt; using a URL with the framework conventions. The service &amp;ldquo;url&amp;rdquo; (usually &lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt;) is injected in the view by accessing a property with the same name:</source>
          <target state="translated">次の例は、フレームワークの規則に従ってURLを使用してjQuery &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;ajaxリクエスト&lt;/a&gt;を作成する方法を示しています。同じ名前のプロパティにアクセスすることで、サービスの「url」（通常は&lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Url&lt;/em&gt;&lt;/a&gt;）がビューに挿入されます。</target>
        </trans-unit>
        <trans-unit id="c2d8e80c423e8866859e2fe9a70261b0e8d8044e" translate="yes" xml:space="preserve">
          <source>The following example shows its basic usage:</source>
          <target state="translated">以下の例では、その基本的な使い方を示しています。</target>
        </trans-unit>
        <trans-unit id="7d5f9fcdd984cdd94d67c177a6c833b0cfab8a88" translate="yes" xml:space="preserve">
          <source>The following examples show how to use aggregations in PHQL:</source>
          <target state="translated">以下の例では、PHQLでのアグリゲーションの使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3ced74a6bbe4ef2f27f066f9fe0cb655bf55a495" translate="yes" xml:space="preserve">
          <source>The following examples show the basic use of each adapter:</source>
          <target state="translated">以下の例では、各アダプタの基本的な使い方を紹介します。</target>
        </trans-unit>
        <trans-unit id="08aa594dbd84d098b5621651c51b29acbd6bce12" translate="yes" xml:space="preserve">
          <source>The following file structure is more than enough:</source>
          <target state="translated">以下のファイル構成で十分です。</target>
        </trans-unit>
        <trans-unit id="84946c4972b2747bf1dfff3f55bce9afc794748b" translate="yes" xml:space="preserve">
          <source>The following is the list of available built-in filters in Volt:</source>
          <target state="translated">以下は、Voltで利用可能な組み込みフィルタの一覧です。</target>
        </trans-unit>
        <trans-unit id="1ad06e84018c730b225ae736038842ca2842b3c4" translate="yes" xml:space="preserve">
          <source>The following literals are supported:</source>
          <target state="translated">以下のリテラルがサポートされています。</target>
        </trans-unit>
        <trans-unit id="098d105043969720f5a86e25e7dd4f1b3367ac1e" translate="yes" xml:space="preserve">
          <source>The following middleware events are available:</source>
          <target state="translated">以下のミドルウェアイベントを利用できます。</target>
        </trans-unit>
        <trans-unit id="164b6537d2474a14fef0f85a823ee99233a1f0c1" translate="yes" xml:space="preserve">
          <source>The following operators are available:</source>
          <target state="translated">以下のような演算子があります。</target>
        </trans-unit>
        <trans-unit id="ad24f899602796ce93c81adbcb154217c8eeedfb" translate="yes" xml:space="preserve">
          <source>The following options are available in Volt:</source>
          <target state="translated">Voltには以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="d64a6ebec0366ee471d4004cc231da2091386a0c" translate="yes" xml:space="preserve">
          <source>The following options are available to change the encryption behavior:</source>
          <target state="translated">暗号化の動作を変更するには、以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="65824cd3e175d3ab525e3b266ab8d83c89b948ce" translate="yes" xml:space="preserve">
          <source>The following replacement of &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; lacks of a view component making it suitable for Rest APIs:</source>
          <target state="translated">以下の&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Applicationの&lt;/em&gt;&lt;/a&gt;置換には、&lt;em&gt;REST&lt;/em&gt; APIに適したビューコンポーネントがありません。</target>
        </trans-unit>
        <trans-unit id="62665cb920f4d4ff7e1f14fed3d0ae0d73b428b3" translate="yes" xml:space="preserve">
          <source>The following route</source>
          <target state="translated">以下のルート</target>
        </trans-unit>
        <trans-unit id="f5b64f889ffc2f5de75a44ea60a301ceedc3f2fe" translate="yes" xml:space="preserve">
          <source>The following rules can be used together with Apache to rewrite the URis:</source>
          <target state="translated">以下のルールをApacheと併用することで、URisを書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="ec2bdad2b5d69c3e1d956bda673810b8075735d9" translate="yes" xml:space="preserve">
          <source>The following schema shows 3 tables whose relations will serve us as an example regarding relationships:</source>
          <target state="translated">次のスキーマは、リレーションシップに関する例として役立つ3つのテーブルを示しています。</target>
        </trans-unit>
        <trans-unit id="c17907192fac506ad13748546735f0b6aa231cf6" translate="yes" xml:space="preserve">
          <source>The following screencast explains how it works:</source>
          <target state="translated">以下のスクリーンキャストでは、その仕組みを説明しています。</target>
        </trans-unit>
        <trans-unit id="5a2f49ec85eb7950024bbd531770ef8ed900bf5c" translate="yes" xml:space="preserve">
          <source>The following screencast is a step by step guide to install Phalcon on Windows:</source>
          <target state="translated">次のスクリーンキャストは、WindowsにPhalconをインストールするためのステップバイステップのガイドです。</target>
        </trans-unit>
        <trans-unit id="0729818f552eadea9288f705d3306d8f210601b5" translate="yes" xml:space="preserve">
          <source>The following screencast is a step-by-step guide to install Phalcon on Windows:</source>
          <target state="translated">次のスクリーンキャストは、WindowsにPhalconをインストールするためのステップバイステップのガイドです。</target>
        </trans-unit>
        <trans-unit id="7499af1d7976c6dc21cdf07d251e55035fda0ff6" translate="yes" xml:space="preserve">
          <source>The following screencast shows a Xdebug session with Phalcon:</source>
          <target state="translated">次のスクリーンキャストは Phalcon を使った Xdebug セッションを示しています。</target>
        </trans-unit>
        <trans-unit id="5f640dcd926218c7155e48c1f08fcc6563e5c45b" translate="yes" xml:space="preserve">
          <source>The following simple form (app/views/session/index.volt) requests the login information. We&amp;rsquo;ve removed some HTML code to make the example more concise:</source>
          <target state="translated">次の単純なフォーム（app / views / session / index.volt）は、ログイン情報を要求します。例をより簡潔にするために、いくつかのHTMLコードを削除しました。</target>
        </trans-unit>
        <trans-unit id="9cf04bd229f848b379151a1afc6d846823388f32" translate="yes" xml:space="preserve">
          <source>The form is declared using an object-oriented scheme based on the elements provided by the &lt;a href=&quot;forms&quot;&gt;&lt;em&gt;forms&lt;/em&gt;&lt;/a&gt; component. Every element follows almost the same structure:</source>
          <target state="translated">フォームは、&lt;a href=&quot;forms&quot;&gt;&lt;em&gt;forms&lt;/em&gt;&lt;/a&gt;コンポーネントによって提供される要素に基づくオブジェクト指向のスキームを使用して宣言されます。すべての要素はほぼ同じ構造に従います。</target>
        </trans-unit>
        <trans-unit id="2b6bd48d33ed4aa2020afd5a4279752a5d505408" translate="yes" xml:space="preserve">
          <source>The former is a very simple behavior, but it illustrates how to create a behavior, now let&amp;rsquo;s add this behavior to a model:</source>
          <target state="translated">前者は非常に単純な動作ですが、動作を作成する方法を示しています。次に、この動作をモデルに追加します。</target>
        </trans-unit>
        <trans-unit id="5bd297a0e70eb6e873df2410ed0985738ec86674" translate="yes" xml:space="preserve">
          <source>The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.</source>
          <target state="translated">フレームワーク自体や開発者がサービスを登録することができます。コンポーネントAが動作するためにコンポーネントB (またはそのクラスのインスタンス)を必要とする場合、新しいインスタンスのコンポーネントBを作成するのではなく、コンテナからコンポーネントBを要求することができます。</target>
        </trans-unit>
        <trans-unit id="36cda7152738aec75422ab1d382f9660d8d09ada" translate="yes" xml:space="preserve">
          <source>The frontend must always be &lt;a href=&quot;../api/phalcon_cache_frontend_output&quot;&gt;&lt;em&gt;Phalcon\Cache\Frontend\Output&lt;/em&gt;&lt;/a&gt; and the service &amp;lsquo;viewCache&amp;rsquo; must be registered as always open (not shared) in the services container (DI).</source>
          <target state="translated">フロントエンドは常に&lt;a href=&quot;../api/phalcon_cache_frontend_output&quot;&gt;&lt;em&gt;Phalcon \ Cache \ Frontend \ Output&lt;/em&gt;&lt;/a&gt;である必要があり、サービス 'viewCache'はサービスコンテナー（DI）で常に開いている（共有されていない）として登録されている必要があります。</target>
        </trans-unit>
        <trans-unit id="498c85f259dea9d5fb570f2c0b384b60ef081ca2" translate="yes" xml:space="preserve">
          <source>The function &amp;ldquo;url&amp;rdquo; is available in volt to generate URLs using this component:</source>
          <target state="translated">関数「url」は、このコンポーネントを使用してURLを生成するためにvoltで使用できます。</target>
        </trans-unit>
        <trans-unit id="6962aaad50348f91185bb994dd9b134daf948e99" translate="yes" xml:space="preserve">
          <source>The generated HTML by the request will be:</source>
          <target state="translated">リクエストで生成されたHTMLになります。</target>
        </trans-unit>
        <trans-unit id="1f2ab72292ec548dd9087e02a668a530cb0557a4" translate="yes" xml:space="preserve">
          <source>The generated HTML code displays an anchor (&amp;ldquo;a&amp;rdquo;) HTML tag linking to a new controller:</source>
          <target state="translated">生成されたHTMLコードは、新しいコントローラーにリンクするアンカー（「a」）HTMLタグを表示します。</target>
        </trans-unit>
        <trans-unit id="8888acecfb13dd662e4103fcee00b4dba8d07621" translate="yes" xml:space="preserve">
          <source>The height will automatically be generated to keep the proportions the same; if you specify a height, it will be ignored.</source>
          <target state="translated">高さはプロポーションが同じになるように自動的に生成されますが、高さを指定すると無視されます。</target>
        </trans-unit>
        <trans-unit id="222271409e67871dcbb654a0245b3d55a21b796a" translate="yes" xml:space="preserve">
          <source>The hook events always receive a first parameter that contains contextual information of the event produced (&lt;code&gt;$event&lt;/code&gt;) and a second one that is the object that produced the event itself (&lt;code&gt;$dispatcher&lt;/code&gt;). It is not mandatory that plugins extend the class &lt;a href=&quot;../api/phalcon_mvc_user_plugin&quot;&gt;&lt;em&gt;Phalcon\Mvc\User\Plugin&lt;/em&gt;&lt;/a&gt;, but by doing this they gain easier access to the services available in the application.</source>
          <target state="translated">フックイベントは常に、生成されたイベントのコンテキスト情報（ &lt;code&gt;$event&lt;/code&gt; ）を含む最初のパラメーターと、イベント自体を生成したオブジェクト（ &lt;code&gt;$dispatcher&lt;/code&gt; ）の2番目のパラメーターを受け取ります。プラグインがクラス&lt;a href=&quot;../api/phalcon_mvc_user_plugin&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ User \ Pluginを&lt;/em&gt;&lt;/a&gt;拡張することは必須ではありませんが、これを行うことにより、アプリケーションで利用可能なサービスへのアクセスが容易になります。</target>
        </trans-unit>
        <trans-unit id="e7e69c7bc7e6e699f1567b4aca638e41c418d460" translate="yes" xml:space="preserve">
          <source>The hostname can also be passed as a regular expressions:</source>
          <target state="translated">ホスト名は正規表現として渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="11ceebdbda78b846dd3f17cb24463066d0837432" translate="yes" xml:space="preserve">
          <source>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a &lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;random nonce&lt;/a&gt; (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</source>
          <target state="translated">アイデアは、フォームの値がアプリケーションの外部に送信されるのを防ぐことです。これを修正するには、各フォームで&lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;ランダムなナンス&lt;/a&gt;（トークン）を生成し、セッションにトークンを追加します。次に、フォームにデータが投稿されたら、セッションに保存されているトークンを、形：</target>
        </trans-unit>
        <trans-unit id="6e32ccf8ab7341d89b65a2f3eb4aedfd35830453" translate="yes" xml:space="preserve">
          <source>The idea of creating validators is make them reusable between several models. A validator can also be as simple as:</source>
          <target state="translated">バリデータを作成するアイデアは、複数のモデル間で再利用できるようにすることです。バリデータは次のようなシンプルなものでもよいでしょう。</target>
        </trans-unit>
        <trans-unit id="b66d9a811b39ce12ac4f0a78c8a6e309922a4ee3" translate="yes" xml:space="preserve">
          <source>The implementation of this caching mechanism allows us to gain performance by not executing the helper &lt;code&gt;Phalcon\Tag::linkTo()&lt;/code&gt; call whenever this piece of code is called.</source>
          <target state="translated">このキャッシュメカニズムの実装により、このコードが呼び出されるたびにヘルパーの &lt;code&gt;Phalcon\Tag::linkTo()&lt;/code&gt; 呼び出しを実行しないことで、パフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="869563099e222665ee75ec7b831c5c774d34807a" translate="yes" xml:space="preserve">
          <source>The important part is:</source>
          <target state="translated">大事なのはその部分です。</target>
        </trans-unit>
        <trans-unit id="1007d15259f25bfa736a3cd7fea04682b02c0175" translate="yes" xml:space="preserve">
          <source>The independent column map allow you to:</source>
          <target state="translated">独立したカラムマップを使用すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4080af0e1013534d8f126c625fd12721cffc74fa" translate="yes" xml:space="preserve">
          <source>The index of the Redis database to use</source>
          <target state="translated">使用するRedisデータベースのインデックス</target>
        </trans-unit>
        <trans-unit id="5bcbdf81eda918e42cbfa9c24226b9201a959008" translate="yes" xml:space="preserve">
          <source>The kick command applies only to the currently used tube.</source>
          <target state="translated">キックコマンドは、現在使用しているチューブにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="ea2e0917867ca07d427a644fa2f01da8f1dea851" translate="yes" xml:space="preserve">
          <source>The last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.</source>
          <target state="translated">最後のオプションは、クラス名とそのパスを登録することです。このオートローダは、プロジェクトのフォルダ規則ではパスとクラス名を使ってファイルを簡単に取得できない場合に非常に便利です。これがオートローディングの最速の方法です。しかし、アプリケーションが大きくなればなるほど、より多くのクラス/ファイルをこのオートローダに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7015af822dc3a00792f4a60e43d40f56046c23c" translate="yes" xml:space="preserve">
          <source>The last page in the set of records</source>
          <target state="translated">レコードのセットの最後のページ</target>
        </trans-unit>
        <trans-unit id="ee2118b0047b275c26d109ab538d233a4ffaea11" translate="yes" xml:space="preserve">
          <source>The log generated is below:</source>
          <target state="translated">生成されたログは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="10ac6817f5099c3c8012aeb58f939a27e4d939c8" translate="yes" xml:space="preserve">
          <source>The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.</source>
          <target state="translated">このコンポーネントの緩やかに結合されたデザインにより、フレームワークが提供するバリデータに加えて独自のバリデータを作成することができます。</target>
        </trans-unit>
        <trans-unit id="17387fea085091021c6127cd0a6738dcae08adaa" translate="yes" xml:space="preserve">
          <source>The main method is just called, at this point the application doesn&amp;rsquo;t know if there is some matched route</source>
          <target state="translated">mainメソッドが呼び出されるだけですが、この時点では、一致するルートがあるかどうかはアプリケーションでわかりません</target>
        </trans-unit>
        <trans-unit id="ffa0fb429c966a003cea06335f50f034f15a8485" translate="yes" xml:space="preserve">
          <source>The message itself expected to be logged</source>
          <target state="translated">メッセージ自体がログに記録されることを期待して</target>
        </trans-unit>
        <trans-unit id="4593fb6d0f8cdd7077829b2ca8dc9c0071bdd490" translate="yes" xml:space="preserve">
          <source>The messages are sent to the handlers in the order they were registered.</source>
          <target state="translated">登録された順にハンドラーにメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="fe33b3972c61249c5b200feacf61ba6947506674" translate="yes" xml:space="preserve">
          <source>The meta-data is obtained by reading the column descriptions from the database information schema</source>
          <target state="translated">メタデータは、データベース情報スキーマからカラムの記述を読み取ることで取得します。</target>
        </trans-unit>
        <trans-unit id="aaf23f9f172af4939a80bda83acecad0c00b3037" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;render()&lt;/code&gt; accepts an absolute path to the view file and the view parameters set using &lt;code&gt;$this-&amp;gt;view-&amp;gt;setVar()&lt;/code&gt;. You could read or require it when it&amp;rsquo;s necessary.</source>
          <target state="translated">メソッド &lt;code&gt;render()&lt;/code&gt; は、 &lt;code&gt;$this-&amp;gt;view-&amp;gt;setVar()&lt;/code&gt; を使用して設定されたビューファイルとビューパラメータへの絶対パスを受け入れます。必要なときにそれを読んだり要求したりできます。</target>
        </trans-unit>
        <trans-unit id="3bb11de9c5d33808b6bd974a3ff129c0a6421437" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Parts&amp;rdquo; has many &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">モデル「パーツ」には多くの「ロボットパーツ」があります。</target>
        </trans-unit>
        <trans-unit id="c3919dab3fb9098bb29e1dafc60aa2df00504cb7" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Robots&amp;rdquo; has a relation many-to-many to &amp;ldquo;Parts&amp;rdquo; through &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">モデル「Robots」は、「RobotsParts」を介して「Parts」と多対多の関係にあります。</target>
        </trans-unit>
        <trans-unit id="3c8678d499ec6ba9faf98a5d27ceb929aad11ca4" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Robots&amp;rdquo; has many &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">モデル「Robots」には多くの「RobotsParts」があります。</target>
        </trans-unit>
        <trans-unit id="53c43ba7b0c284cb7944f3b7c0b27039d3d5d755" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;RobotsParts&amp;rdquo; belongs to both &amp;ldquo;Robots&amp;rdquo; and &amp;ldquo;Parts&amp;rdquo; models as a many-to-one relation.</source>
          <target state="translated">モデル「RobotsParts」は、「Robots」モデルと「Parts」モデルの両方に多対1の関係として属しています。</target>
        </trans-unit>
        <trans-unit id="3d6f37701acbe604c98ca7e51f2ffc1a0f6c9798" translate="yes" xml:space="preserve">
          <source>The model RobotParts now maps to &amp;ldquo;toys_robot_parts&amp;rdquo; table. The &lt;code&gt;initialize()&lt;/code&gt; method aids in setting up the model with a custom behavior i.e. a different table.</source>
          <target state="translated">モデルRobotPartsが「toys_robot_parts」テーブルにマップされるようになりました。 &lt;code&gt;initialize()&lt;/code&gt; メソッドは、別のテーブル、すなわち、カスタム動作でモデルを設定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="055fbbd518c555cda60a780d640babcfd88a53db" translate="yes" xml:space="preserve">
          <source>The models with their relations could be implemented as follows:</source>
          <target state="translated">それらの関係を持つモデルは、以下のように実装することができます。</target>
        </trans-unit>
        <trans-unit id="fcfe1b4eb43169359be51314a9e1125f97cd246e" translate="yes" xml:space="preserve">
          <source>The most common place to access the request environment is in an action of a controller. To access the &lt;a href=&quot;../api/phalcon_http_request&quot;&gt;&lt;em&gt;Phalcon\Http\Request&lt;/em&gt;&lt;/a&gt; object from a controller you will need to use the &lt;code&gt;$this-&amp;gt;request&lt;/code&gt; public property of the controller:</source>
          <target state="translated">リクエスト環境にアクセスする最も一般的な場所は、コントローラーのアクションです。コントローラーから&lt;a href=&quot;../api/phalcon_http_request&quot;&gt;&lt;em&gt;Phalcon \ Http \ Request&lt;/em&gt;&lt;/a&gt;オブジェクトにアクセスするには、コントローラーの &lt;code&gt;$this-&amp;gt;request&lt;/code&gt; パブリックプロパティを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dec19fbe9072c91403411b1df4b6d19244827b60" translate="yes" xml:space="preserve">
          <source>The most common situation when inserting unsafe data is between HTML tags:</source>
          <target state="translated">安全でないデータを挿入するときによくあるのは、HTMLタグの間です。</target>
        </trans-unit>
        <trans-unit id="de6d0a13cf598b5775bea988393fc547fa336478" translate="yes" xml:space="preserve">
          <source>The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:</source>
          <target state="translated">データをフィルタリングする最も効率的な方法は、いくつかの検索基準を設定することですが、データベースはより速くデータを返すためにテーブルに設定されたインデックスを使用します。Phalconはさらに、データベースで利用できない任意のリソースを使用してPHPを使用してデータをフィルタリングすることができます。</target>
        </trans-unit>
        <trans-unit id="655ddaeb1e9988b859ff1555e4af29206ae06a20" translate="yes" xml:space="preserve">
          <source>The next example shows how to use the MySQL now() function as a field value.</source>
          <target state="translated">次の例では、MySQL の now()関数をフィールド値として使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="300df99f4a40af8520f4d4ed4496f5f4f8c552d5" translate="yes" xml:space="preserve">
          <source>The next example shows you how to sanitize the action parameters within a controller action:</source>
          <target state="translated">次の例では、コントローラアクション内のアクションパラメータをサニタイズする方法を示します。</target>
        </trans-unit>
        <trans-unit id="74445c083ec02da524f934e7b1118f77c26d3249" translate="yes" xml:space="preserve">
          <source>The next page to the current one</source>
          <target state="translated">現在のものへの次のページ</target>
        </trans-unit>
        <trans-unit id="6889afb145fa237708c104badd5670058c9aaadc" translate="yes" xml:space="preserve">
          <source>The number of items in the source data</source>
          <target state="translated">ソースデータの項目数</target>
        </trans-unit>
        <trans-unit id="29c3835e9086427febe1a418ab3f41b581305542" translate="yes" xml:space="preserve">
          <source>The number of items to iterate</source>
          <target state="translated">反復する項目の数</target>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="translated">ループの終了からの反復回数(インデックスは0)を指定します。</target>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="translated">ループの終了からの反復回数(インデックスは1回</target>
        </trans-unit>
        <trans-unit id="a33c34f4e66cd6c15e09c8c4c91db1004534ed0c" translate="yes" xml:space="preserve">
          <source>The number of pages</source>
          <target state="translated">ページ数</target>
        </trans-unit>
        <trans-unit id="cd82762e9bab3141dcc703011a704f3a1bce813c" translate="yes" xml:space="preserve">
          <source>The operation will result in the following data in the table:</source>
          <target state="translated">この操作により、表のデータは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c44226fc1ccbc6d605ec42320f2e660c616c1d61" translate="yes" xml:space="preserve">
          <source>The opposite effect (avoid page caching) is achieved in this way:</source>
          <target state="translated">このようにして逆の効果(ページキャッシュの回避)が得られます。</target>
        </trans-unit>
        <trans-unit id="e95ef52f5eb685c92410561b4d9dba6efecf75d8" translate="yes" xml:space="preserve">
          <source>The order that the template engines are defined with &lt;code&gt;Phalcon\Mvc\View::registerEngines()&lt;/code&gt; defines the relevance of execution. If &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; finds two views with the same name but different extensions, it will only render the first one.</source>
          <target state="translated">テンプレートエンジンが &lt;code&gt;Phalcon\Mvc\View::registerEngines()&lt;/code&gt; 定義される順序は、実行の関連性を定義します。&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;が同じ名前で拡張子が異なる2つのビューを見つけた場合、最初のビューのみがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="0d9c825d7164f82dca8f22ee53e88a58b646e6d6" translate="yes" xml:space="preserve">
          <source>The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.</source>
          <target state="translated">パーサは、まずパスPHQL文の構文をチェックし、次に文の中間表現を構築し、最後にターゲットRDBMSのそれぞれのSQL方言に変換します。</target>
        </trans-unit>
        <trans-unit id="74337ae4d0d9c7813bad5c0e85d87080041a0182" translate="yes" xml:space="preserve">
          <source>The parser is highly flexible, the following docblock is valid:</source>
          <target state="translated">パーサは柔軟性が高く、以下のdocblockが有効です。</target>
        </trans-unit>
        <trans-unit id="39adb0dc278da7c36d838e17d1aeb0c2a5b1c664" translate="yes" xml:space="preserve">
          <source>The peek commands let the client inspect a job in the system.</source>
          <target state="translated">peek コマンドを使用すると、クライアントはシステム内のジョブを検査することができます。</target>
        </trans-unit>
        <trans-unit id="9c076accb0f967599bc1c727ac0fa185b9f21d61" translate="yes" xml:space="preserve">
          <source>The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</source>
          <target state="translated">gettext()の複数形。いくつかの言語では、カウント数に依存して複数のメッセージに複数の形式があります。</target>
        </trans-unit>
        <trans-unit id="f2ef676ee7e587fe7e492969ca86deccb350cd9a" translate="yes" xml:space="preserve">
          <source>The prefix &amp;ldquo;get&amp;rdquo; is used to &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt; related records. Depending on the type of relation it will use &lt;code&gt;find()&lt;/code&gt; or &lt;code&gt;findFirst()&lt;/code&gt;:</source>
          <target state="translated">接頭辞「get」は、 &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; 関連レコードに使用されます。リレーションのタイプに応じて、 &lt;code&gt;find()&lt;/code&gt; または &lt;code&gt;findFirst()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fdc917719c66e51d0501cc8c3631c511017143ef" translate="yes" xml:space="preserve">
          <source>The previous page to the current one</source>
          <target state="translated">前のページから現在のページへ</target>
        </trans-unit>
        <trans-unit id="9ffd39464e5dda629e4917c6874eb39307098ba9" translate="yes" xml:space="preserve">
          <source>The process of pagination takes place when we need to present big groups of arbitrary data gradually. &lt;code&gt;Phalcon\Paginator&lt;/code&gt; offers a fast and convenient way to split these sets of data into browsable pages.</source>
          <target state="translated">ページ分割のプロセスは、任意のデータの大きなグループを徐々に提示する必要があるときに行われます。 &lt;code&gt;Phalcon\Paginator&lt;/code&gt; は、これらのデータセットをブラウズ可能なページに分割する高速で便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="5c4e9584fd73b0f13cd2b0e07649c16ebb8980fe" translate="yes" xml:space="preserve">
          <source>The produced routes would look like:</source>
          <target state="translated">生成されたルートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="bc4f7a09df206abef1af972172d101ccb163117e" translate="yes" xml:space="preserve">
          <source>The purpose of this component is to intercept the execution of most of the other components of the framework by creating &amp;ldquo;hook points&amp;rdquo;. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.</source>
          <target state="translated">このコンポーネントの目的は、「フックポイント」を作成することにより、フレームワークの他のほとんどのコンポーネントの実行をインターセプトすることです。これらのフックポイントにより、開発者はステータス情報を取得したり、データを操作したり、コンポーネントの処理中に実行フローを変更したりできます。</target>
        </trans-unit>
        <trans-unit id="6427d1f8cee51c53d914db31e6f0a2bf8751f1db" translate="yes" xml:space="preserve">
          <source>The recently added virtual server must appear at the left bar of the screen. In the &amp;lsquo;Behaviors&amp;rsquo; tab you will see a set of default behaviors for this virtual server. Click the &amp;lsquo;Rule Management&amp;rsquo; button. Remove those labeled as &amp;lsquo;Directory /cherokee_themes&amp;rsquo; and &amp;lsquo;Directory /icons&amp;rsquo;:</source>
          <target state="translated">最近追加された仮想サーバーが画面の左側のバーに表示されます。[動作]タブに、この仮想サーバーのデフォルトの動作のセットが表示されます。「ルール管理」ボタンをクリックします。「Directory / cherokee_themes」および「Directory / icons」というラベルの付いたものを削除します。</target>
        </trans-unit>
        <trans-unit id="d4050674ebe892a579201b057237751afd7c12a1" translate="yes" xml:space="preserve">
          <source>The referenced table maybe is on another schema or database. This option allows you to define that.</source>
          <target state="translated">参照されているテーブルは、別のスキーマまたはデータベース上にあるかもしれません。このオプションでは、それを定義することができます。</target>
        </trans-unit>
        <trans-unit id="6c41550b95fee4e286b038e5f683c124d82612cd" translate="yes" xml:space="preserve">
          <source>The release command puts a reserved job back into the ready queue (and marks its state as &amp;ldquo;ready&amp;rdquo;) to be run by any client. It is normally used when the job fails because of a transitory error.</source>
          <target state="translated">releaseコマンドは、予約済みのジョブをレディキューに戻し（その状態を「準備完了」としてマーク）、任意のクライアントで実行できるようにします。通常、一時的なエラーのためにジョブが失敗したときに使用されます。</target>
        </trans-unit>
        <trans-unit id="b3b53263b17bede65278a39c76d8bc83619e518e" translate="yes" xml:space="preserve">
          <source>The request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.</source>
          <target state="translated">リクエストオブジェクトは、ディスパッチャクラスとコントローラクラスの間で渡される単純な値オブジェクトです。これは、HTTP リクエスト環境をパッケージ化します。</target>
        </trans-unit>
        <trans-unit id="07270402619c1e3fcfcd00b2b14b963a2729e06a" translate="yes" xml:space="preserve">
          <source>The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:</source>
          <target state="translated">レスポンスオブジェクトは通常は直接使用されませんが、アクションの実行前に構築されます。</target>
        </trans-unit>
        <trans-unit id="9b0108c2553b456f6b365fb0890c4d0557156382" translate="yes" xml:space="preserve">
          <source>The result in this case is an object &lt;a href=&quot;../api/phalcon_mvc_model_resultset_complex&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Complex&lt;/em&gt;&lt;/a&gt;. This allows access to both complete objects and scalars at once:</source>
          <target state="translated">この場合の結果は、オブジェクト&lt;a href=&quot;../api/phalcon_mvc_model_resultset_complex&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Complex&lt;/em&gt;&lt;/a&gt;です。これにより、完全なオブジェクトとスカラーの両方に一度にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2180157d0c021e7031d14eed7af7fcb68a967448" translate="yes" xml:space="preserve">
          <source>The resulting profile data can be obtained from the listener:</source>
          <target state="translated">結果として得られるプロファイルデータは、リスナーから取得することができます。</target>
        </trans-unit>
        <trans-unit id="84549226db7bc9e7032c1fb58bcf6f049fc2cf71" translate="yes" xml:space="preserve">
          <source>The router allows you to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:</source>
          <target state="translated">ルータでは、ホスト名の制約を設定することができます。これは、特定のルートまたはルートのグループを、ルートがホスト名の制約を満たしている場合にのみマッチするように制限できることを意味します。</target>
        </trans-unit>
        <trans-unit id="2bea01b20fc829fa30ad08c99566f6901cb13fb9" translate="yes" xml:space="preserve">
          <source>The router component allows you to define routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.</source>
          <target state="translated">ルータコンポーネントを使用すると、リクエストを受け取るべきコントローラやハンドラにマップされたルートを定義することができます。ルータは単に URI を解析してこの情報を決定します。ルータには二つのモードがあります。MVC モードとマッチオンリーモードです。最初のモードは MVC アプリケーションを扱うのに最適です。</target>
        </trans-unit>
        <trans-unit id="f3c6f628ff825d3b97c91169c0a1f93c3be5fd97" translate="yes" xml:space="preserve">
          <source>The salt is generated using pseudo-random bytes with the PHP&amp;rsquo;s function &lt;a href=&quot;http://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes&lt;/a&gt; so is required to have the &lt;a href=&quot;http://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt; extension loaded.</source>
          <target state="translated">ソルトは、PHPの関数&lt;a href=&quot;http://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes&lt;/a&gt;で疑似ランダムバイトを使用して生成されるため、&lt;a href=&quot;http://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt;拡張機能をロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="5f77ef71dde823162c77d9b38930f98bed08312b" translate="yes" xml:space="preserve">
          <source>The scaffold generator will build several files in your application, along with some folders. Here&amp;rsquo;s a quick overview of what will be generated:</source>
          <target state="translated">scaffoldジェネレーターは、いくつかのフォルダーと共に、アプリケーション内にいくつかのファイルを構築します。生成されるものの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f2fdc450f693256bf8c5e18edd680e2adbc7df94" translate="yes" xml:space="preserve">
          <source>The screencast below shows how to integrate developer tools with the &lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm IDE&lt;/a&gt;. The configuration steps could be easily adapted to other IDEs for PHP.</source>
          <target state="translated">以下のスクリーンキャストは、&lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm IDE&lt;/a&gt;と開発者ツールを統合する方法を示しています。構成手順は、PHPの他のIDEに簡単に適合させることができます。</target>
        </trans-unit>
        <trans-unit id="b7473aacfc01a21ff682debe2af4ccaab52174a6" translate="yes" xml:space="preserve">
          <source>The searching by name handler would look like:</source>
          <target state="translated">名前ハンドラで検索すると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="db7ee111afbceeca0678b201a7f5d5588c50e683" translate="yes" xml:space="preserve">
          <source>The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (&lt;code&gt;:controller&lt;/code&gt;) is the controller part of the route, the second the action and so on.</source>
          <target state="translated">2番目のパラメーターは、一致したパーツをコントローラー/アクション/パラメーターにバインドする方法を定義します。一致する部分は、括弧（丸括弧）で区切られたプレースホルダーまたはサブパターンです。上記の例では、最初に一致したサブパターン（ &lt;code&gt;:controller&lt;/code&gt; ）がルートのコントローラー部分であり、2番目はアクションなどです。</target>
        </trans-unit>
        <trans-unit id="a9c2c7856caa748d8385441b00891f00fa7d8050" translate="yes" xml:space="preserve">
          <source>The second parameter of &lt;code&gt;addCss()&lt;/code&gt; and &lt;code&gt;addJs()&lt;/code&gt; says whether the resource is local or not (&lt;code&gt;true&lt;/code&gt; is local, &lt;code&gt;false&lt;/code&gt; is remote). By default, the assets manager will assume the resource is local:</source>
          <target state="translated">&lt;code&gt;addCss()&lt;/code&gt; および &lt;code&gt;addJs()&lt;/code&gt; の2番目のパラメーターは、リソースがローカルかどうかを示し &lt;code&gt;true&lt;/code&gt; （trueはローカル、 &lt;code&gt;false&lt;/code&gt; はリモート）。デフォルトでは、資産マネージャーはリソースがローカルであると想定します。</target>
        </trans-unit>
        <trans-unit id="2a640fbf902a77e97a110b0e315a02da4aff6f9d" translate="yes" xml:space="preserve">
          <source>The second part that appears in the bootstrap file (public/index.php) is the autoloader:</source>
          <target state="translated">ブートストラップファイル(public/index.php)に表示される2番目の部分はオートローダーです。</target>
        </trans-unit>
        <trans-unit id="a1d41c9e55b2d9adc4da93b7bcf273e75f15189b" translate="yes" xml:space="preserve">
          <source>The service &amp;ldquo;response&amp;rdquo; (&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon\Http\Response&lt;/em&gt;&lt;/a&gt;) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.</source>
          <target state="translated">サービスの「応答」（&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon \ Http \ Response&lt;/em&gt;&lt;/a&gt;）は、コンストラクターの最初の引数として渡されるように解決されますが、2番目はそのまま渡されるブール値（true）です。</target>
        </trans-unit>
        <trans-unit id="44c8ff2d1e2a37bdcc5a6d555e627a8cd905b245" translate="yes" xml:space="preserve">
          <source>The service can be registered this way:</source>
          <target state="translated">このようにサービスを登録することができます。</target>
        </trans-unit>
        <trans-unit id="f34f8afbb06952201854130020cf7b5d803de79d" translate="yes" xml:space="preserve">
          <source>The session component provides object-oriented wrappers to access session data.</source>
          <target state="translated">セッションコンポーネントは、セッションデータにアクセスするためのオブジェクト指向のラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="45ddc0d19d0ce3e3c88641f9d5c7f19eece5ce72" translate="yes" xml:space="preserve">
          <source>The set of records to be displayed at the current page</source>
          <target state="translated">現在のページに表示するレコードのセット</target>
        </trans-unit>
        <trans-unit id="68ff5f3943b9220b14c20812acb6444f0c203143" translate="yes" xml:space="preserve">
          <source>The simplest way to generate a model is:</source>
          <target state="translated">モデルを生成する一番簡単な方法は</target>
        </trans-unit>
        <trans-unit id="7169a30e6fcac8a96a81d58ce29b3e996a8a69f5" translate="yes" xml:space="preserve">
          <source>The static method &lt;code&gt;query()&lt;/code&gt; returns a &lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Criteria&lt;/em&gt;&lt;/a&gt; object that is friendly with IDE autocompleters.</source>
          <target state="translated">静的メソッド &lt;code&gt;query()&lt;/code&gt; は、IDEオート&lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;コンプリータに対応し&lt;/em&gt;&lt;/a&gt;た&lt;em&gt;Phalcon \ Mvc \ Model \ Criteria&lt;/em&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="206c1870c71eedf927d0d9d9b33b73e5b406e2a4" translate="yes" xml:space="preserve">
          <source>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available &lt;a href=&quot;http://php.net/manual/en/wrappers.php&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">ストリームロガーは、PHPの有効な登録済みストリームにメッセージを書き込みます。ストリームのリストは&lt;a href=&quot;http://php.net/manual/en/wrappers.php&quot;&gt;ここに&lt;/a&gt;あります：</target>
        </trans-unit>
        <trans-unit id="d4e71be2a610859aea39b3283c82ec6f4ed37055" translate="yes" xml:space="preserve">
          <source>The third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It&amp;rsquo;s important to register the directories in relevance order. Remember always add a trailing slash at the end of the paths.</source>
          <target state="translated">3番目のオプションは、クラスを見つけることができるディレクトリを登録することです。Phalconは、クラスと同じ名前のファイルを探して、各フォルダーでかなりの数のファイル統計を実行する必要があるため、このオプションはパフォーマンスの観点からお勧めできません。ディレクトリを適切な順序で登録することが重要です。パスの最後に常にスラッシュを追加することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="68b9e757284ab8063f70b4c319b15587dace100d" translate="yes" xml:space="preserve">
          <source>The tutorial/public/index.php file should look like:</source>
          <target state="translated">tutorial/public/index.phpファイルは以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="2ede9cc265a4ae92b974fd69dbab1a4867da3137" translate="yes" xml:space="preserve">
          <source>The watch command adds the named tube to the watch list for the current connection.</source>
          <target state="translated">watch コマンドは、現在の接続のウォッチリストに名前のついたチューブを追加します。</target>
        </trans-unit>
        <trans-unit id="b7985639cc5dbecebf4f03f7e6fef048f19c2ca1" translate="yes" xml:space="preserve">
          <source>The whole &amp;lsquo;for&amp;rsquo; block provides the following:</source>
          <target state="translated">'for'ブロック全体は、以下を提供します。</target>
        </trans-unit>
        <trans-unit id="ad054c8adc2bb57e38e1fed871bb484f8e840b8f" translate="yes" xml:space="preserve">
          <source>The width will automatically be generated to keep the proportions the same; if you specify a width, it will be ignored.</source>
          <target state="translated">幅はプロポーションが同じになるように自動的に生成されますが、幅を指定した場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="7524e6f72459769b9b36a148116e4951f69cc97e" translate="yes" xml:space="preserve">
          <source>Then access it from a controller or view:</source>
          <target state="translated">その後、コントローラまたはビューからアクセスします。</target>
        </trans-unit>
        <trans-unit id="ff4b6575493df8beb472461b4a1a30b4b13cba67" translate="yes" xml:space="preserve">
          <source>Then add the instance to the application:</source>
          <target state="translated">そして、そのインスタンスをアプリケーションに追加します。</target>
        </trans-unit>
        <trans-unit id="d5b50c70f1fae058a1ee853af6fba5b7ca36dcc5" translate="yes" xml:space="preserve">
          <source>Then at the end of the file save the profiled data:</source>
          <target state="translated">そして、ファイルの最後にプロファイルデータを保存します。</target>
        </trans-unit>
        <trans-unit id="54310a877111d1f2d52c4e8b4553f414f3ecb8ca" translate="yes" xml:space="preserve">
          <source>Then change the definition of the service &amp;lsquo;tag&amp;rsquo;:</source>
          <target state="translated">次に、サービス「タグ」の定義を変更します。</target>
        </trans-unit>
        <trans-unit id="8dc94009acacb8cf175159db42621b363f418a45" translate="yes" xml:space="preserve">
          <source>Then enter the folder where the tools were cloned and execute &amp;rdquo;. ./phalcon.sh&amp;rdquo;, (don&amp;rsquo;t forget the dot at beginning of the command):</source>
          <target state="translated">次に、ツールが複製されたフォルダに移動して、「」を実行します。./phalcon.sh&amp;rdquo;、（コマンドの先頭にあるドットを忘れないでください）：</target>
        </trans-unit>
        <trans-unit id="b3fc331171b0c09fd3e6682cf75f09c17b30f43e" translate="yes" xml:space="preserve">
          <source>Then in a view, these resources can be printed:</source>
          <target state="translated">その後、ビューでは、これらのリソースを印刷することができます。</target>
        </trans-unit>
        <trans-unit id="9916530577ab1f3fb4a0cf919520abb32061a73a" translate="yes" xml:space="preserve">
          <source>Then in the controller&amp;rsquo;s action you can check if the CSRF token is valid:</source>
          <target state="translated">次に、コントローラのアクションで、CSRFトークンが有効かどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="d8af8224d3445163f95feffb675cea7d63e3c93e" translate="yes" xml:space="preserve">
          <source>Then in the file (&amp;rdquo;../app/config/routes.php&amp;rdquo;) return the object resolved:</source>
          <target state="translated">次に、ファイル（「../app/config/routes.php」）で、解決されたオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="05f90620b12254709e2be5034b8872a54136e8d2" translate="yes" xml:space="preserve">
          <source>Then in the views:</source>
          <target state="translated">続いて、景色の中で。</target>
        </trans-unit>
        <trans-unit id="8ab8d8dd4fcc76ea212b51c07a66796abf6ae9c1" translate="yes" xml:space="preserve">
          <source>Then initialize and use your own validator:</source>
          <target state="translated">その後、初期化して独自のバリデータを使用します。</target>
        </trans-unit>
        <trans-unit id="55939291b853bc6f6085968b04fc70c6233a6778" translate="yes" xml:space="preserve">
          <source>Then mount the group in the router:</source>
          <target state="translated">次に、ルータにグループをマウントします。</target>
        </trans-unit>
        <trans-unit id="37e71e3e8c13501ba856fb7dc8ae0ee5425a671f" translate="yes" xml:space="preserve">
          <source>Then once the service is resolved, the &lt;code&gt;$di&lt;/code&gt; will be passed to &lt;code&gt;setDi()&lt;/code&gt; automatically:</source>
          <target state="translated">次に、サービスが解決されると、 &lt;code&gt;$di&lt;/code&gt; が自動的に &lt;code&gt;setDi()&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="9f47aa8758370a6e1b8fd4275d310dc68cc3ed9b" translate="yes" xml:space="preserve">
          <source>Then point your browser to &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; to check if everything is working.</source>
          <target state="translated">次に、ブラウザーで&lt;a href=&quot;http://localhost:8000/&quot;&gt;http：// localhost：8000 /&lt;/a&gt;にアクセスして、すべてが機能しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="538073cd80ef8d06ab958d26036f06c560556c22" translate="yes" xml:space="preserve">
          <source>Then the messages would be printed as follows:</source>
          <target state="translated">そうすると、以下のようにメッセージが印刷されます。</target>
        </trans-unit>
        <trans-unit id="cfda689fa31933494625e59195abe2c32f978d34" translate="yes" xml:space="preserve">
          <source>Then use this class as base class for each &amp;lsquo;Cacheable&amp;rsquo; model:</source>
          <target state="translated">次に、このクラスを各「キャッシュ可能」モデルの基本クラスとして使用します。</target>
        </trans-unit>
        <trans-unit id="afdd124d62510eb32daf08bea2c782a2d3a03c62" translate="yes" xml:space="preserve">
          <source>Then you can use it in your model as follows:</source>
          <target state="translated">そうすると、以下のようにモデルの中で使うことができます。</target>
        </trans-unit>
        <trans-unit id="906b503bfcf6342ec99dbd223196fe688d55cd98" translate="yes" xml:space="preserve">
          <source>Then you can use the console inside of any task. Below is an example of a modified MainTask.php:</source>
          <target state="translated">そうすれば、任意のタスクの内部でコンソールを使用することができます。以下はMainTask.phpを修正した例です。</target>
        </trans-unit>
        <trans-unit id="925b299dd77d3502b2f745f8dcea94babe9c2aee" translate="yes" xml:space="preserve">
          <source>Then you can use the new names naturally in your code:</source>
          <target state="translated">そうすれば、新しい名前をコードの中で自然に使うことができます。</target>
        </trans-unit>
        <trans-unit id="306e0595f3d456f04bafedb0d313c0517b4dead5" translate="yes" xml:space="preserve">
          <source>Then you can use them in &lt;code&gt;isAllowed()&lt;/code&gt; method.</source>
          <target state="translated">次に、それらを &lt;code&gt;isAllowed()&lt;/code&gt; メソッドで使用できます。</target>
        </trans-unit>
        <trans-unit id="c4e7a988c7d7de2760a6805a0929a4d75393523a" translate="yes" xml:space="preserve">
          <source>Then you can validate the form according to the input entered by the user:</source>
          <target state="translated">そして、ユーザーが入力した入力内容に応じてフォームを検証することができます。</target>
        </trans-unit>
        <trans-unit id="3fae2094d2c0056729934905452ddd9be2c5bedd" translate="yes" xml:space="preserve">
          <source>Then, based on the built params we perform the query:</source>
          <target state="translated">そして、構築されたパラメータに基づいてクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="966d7db8462d18e7802b380f599c5e6454d64917" translate="yes" xml:space="preserve">
          <source>Then, for example, in a controller you can use it as follows:</source>
          <target state="translated">そうすると、例えばコントローラでは以下のように使うことができます。</target>
        </trans-unit>
        <trans-unit id="f424f5e6498d52f151311f6044a0f2c82b8b2830" translate="yes" xml:space="preserve">
          <source>Then, in the &lt;code&gt;initialize()&lt;/code&gt; method, we define the connection service for the model:</source>
          <target state="translated">次に、 &lt;code&gt;initialize()&lt;/code&gt; メソッドで、モデルの接続サービスを定義します。</target>
        </trans-unit>
        <trans-unit id="e562fac41f70749489fb3e4d4398e0a303241136" translate="yes" xml:space="preserve">
          <source>Then, in the index.php file we create the following:</source>
          <target state="translated">そして、index.phpファイルの中に以下のように作成します。</target>
        </trans-unit>
        <trans-unit id="ecd1a03c064ef34dca7c1c339895bb65af68fc94" translate="yes" xml:space="preserve">
          <source>Then, using for example the component &lt;a href=&quot;../api/phalcon_mvc_url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt; we can build routes from its name:</source>
          <target state="translated">次に、たとえばコンポーネント&lt;a href=&quot;../api/phalcon_mvc_url&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Url&lt;/em&gt;&lt;/a&gt;を使用して、その名前からルートを構築できます。</target>
        </trans-unit>
        <trans-unit id="59afa63f971fca28362eb60fad0121e70ac908d4" translate="yes" xml:space="preserve">
          <source>Then, we can access that service in several ways:</source>
          <target state="translated">そうすると、そのサービスにはいくつかの方法でアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="7446f447abca3160f234be91641477f3cb442a99" translate="yes" xml:space="preserve">
          <source>Then, we receive the parameters from the form:</source>
          <target state="translated">そして、フォームからパラメータを受け取ります。</target>
        </trans-unit>
        <trans-unit id="31ee64bf8c9cdaf438def702ad0d2c0457d6af04" translate="yes" xml:space="preserve">
          <source>There are adapters available for several template engines on the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine&quot;&gt;Phalcon Incubator&lt;/a&gt;には、いくつかのテンプレートエンジン用のアダプターが用意されています</target>
        </trans-unit>
        <trans-unit id="ff0fc815ad41baab0d8f4f17c8e664735080351e" translate="yes" xml:space="preserve">
          <source>There are four built-in message types supported:</source>
          <target state="translated">サポートされているビルトインメッセージタイプは4種類です。</target>
        </trans-unit>
        <trans-unit id="b5ce5a7204ec525fcfe42f6b5d9ecad0a84c80a9" translate="yes" xml:space="preserve">
          <source>There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.</source>
          <target state="translated">関係性には、1対1、1対多、多対多、多対多の4つのタイプがある。関係は、一方向性または双方向性である場合があり、それぞれが単純なもの(1対1モデル)またはより複雑なもの(モデルの組み合わせ)になります。モデル管理者は、これらの関係のための外部キー制約を管理します。これらの定義は、参照整合性を助け、モデルへの関連レコードの簡単かつ迅速なアクセスを助けます。関係を実装することで、各レコードから関連するモデルのデータに統一的にアクセスすることが容易になります。</target>
        </trans-unit>
        <trans-unit id="e0c161bf5bfe5a3eddbc40c8f4dd28b02cad78e0" translate="yes" xml:space="preserve">
          <source>There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.</source>
          <target state="translated">多くのテンプレートエンジンがありますが、それらを統合したり、独自のテンプレートエンジンを作成したりしたいと思うかもしれません。外部テンプレートエンジンの使用を開始するための最初のステップは、それ用のアダプターを作成することです。</target>
        </trans-unit>
        <trans-unit id="00c569522300977f433a02b96854621ebecc85b5" translate="yes" xml:space="preserve">
          <source>There are many things in the above example that worth detailing. First of all, active items in the current page are traversed using a Volt&amp;rsquo;s &amp;lsquo;for&amp;rsquo;. Volt provides a simpler syntax for a PHP &amp;lsquo;foreach&amp;rsquo;.</source>
          <target state="translated">上記の例には、詳細を説明する価値のあるものがたくさんあります。まず、現在のページのアクティブなアイテムは、ボルトの「for」を使用してトラバースされます。Voltは、PHPの「foreach」に対してより単純な構文を提供します。</target>
        </trans-unit>
        <trans-unit id="c5703657932090b6a77b0095d9951353bc6a78f3" translate="yes" xml:space="preserve">
          <source>There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.</source>
          <target state="translated">コンテナにサービスを登録する方法はたくさんあります。INVOでは、ほとんどのサービスは匿名の関数/クロージャを使用して登録されています。このおかげで、オブジェクトは怠惰な方法でインスタンス化され、アプリケーションが必要とするリソースが削減されます。</target>
        </trans-unit>
        <trans-unit id="49e2cedf2ec8bf8109dad5c71505b481a9d6bed7" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;Phalconインキュベーターに&lt;/a&gt;は、このコンポーネントに使用できるアダプターがさらにあります</target>
        </trans-unit>
        <trans-unit id="54b11530167977d1d7f96e69e502ca767cb35aa4" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter&quot;&gt;Phalconインキュベーターに&lt;/a&gt;は、このコンポーネントに使用できるアダプターがさらにあります</target>
        </trans-unit>
        <trans-unit id="0536e18658f821eeef26b28ce359e0fecad6b1d3" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter&quot;&gt;Phalconインキュベーターに&lt;/a&gt;は、このコンポーネントに使用できるアダプターがさらにあります</target>
        </trans-unit>
        <trans-unit id="00edd0039107929b21b55053efc1f94ae0155d38" translate="yes" xml:space="preserve">
          <source>There are several modes of resizing:</source>
          <target state="translated">サイズ変更にはいくつかのモードがあります。</target>
        </trans-unit>
        <trans-unit id="5ad06d8a760406dd09b1f3b1ead784f16066138a" translate="yes" xml:space="preserve">
          <source>There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.</source>
          <target state="translated">モデルを作成するにはいくつかの方法があります。デフォルトのデータベース接続からすべてのモデルを作成することもできますし、いくつかのモデルを選択的に作成することもできます。モデルは、フィールド表現のためのパブリック属性を持つことができ、セッター/ゲッターを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f90c8e6cb71c2d02568c3a6e7a126a96359d4803" translate="yes" xml:space="preserve">
          <source>There are several ways to find out the best available locale using &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;. One of them is to check the HTTP &amp;ldquo;Accept-Language&amp;rdquo; header:</source>
          <target state="translated">&lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;を使用して最適なロケールを見つける方法はいくつかあります。それらの1つは、HTTPの「Accept-Language」ヘッダーを確認することです。</target>
        </trans-unit>
        <trans-unit id="6aa2c789c4dda9fcddfedb9bc78df76cc093fcfb" translate="yes" xml:space="preserve">
          <source>There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.</source>
          <target state="translated">キャッシュエントリを強制的に無効にする必要がある場合があります(キャッシュデータの更新による)。唯一の要件は、データが保存されているキーを知っていることです。</target>
        </trans-unit>
        <trans-unit id="cc640701d23560bde1c179090af7d1870024608e" translate="yes" xml:space="preserve">
          <source>There is no limit on the &amp;ldquo;forwards&amp;rdquo; you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリケーションで使用できる「転送」に制限はありませんが、循環参照が発生しない限り、アプリケーションは停止します。ディスパッチループによってディスパッチされるアクションが他にない場合、ディスパッチャーは&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;によって管理されるMVCのビューレイヤーを自動的に呼び出し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6fc26e9224d68bfceaf2bf9bb6680286f6717a8b" translate="yes" xml:space="preserve">
          <source>These are detailed instructions on how to install the developer tools on different platforms:</source>
          <target state="translated">これらは、異なるプラットフォームに開発者ツールをインストールする方法についての詳細な説明です。</target>
        </trans-unit>
        <trans-unit id="84b8e8bf4670fde36081b87b5b3a2c0b25ed0072" translate="yes" xml:space="preserve">
          <source>These files are automatically loaded in the &lt;code&gt;register()&lt;/code&gt; method.</source>
          <target state="translated">これらのファイルは、 &lt;code&gt;register()&lt;/code&gt; メソッドに自動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="20db73437c0afcbf8da97c3717848e5d984052b6" translate="yes" xml:space="preserve">
          <source>These methods &amp;ldquo;create&amp;rdquo; and &amp;ldquo;update&amp;rdquo; also accept an array of values as parameter.</source>
          <target state="translated">これらのメソッド「create」および「update」もパラメーターとして値の配列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="fe06e857db4634b6b553dacd43b41024850f0999" translate="yes" xml:space="preserve">
          <source>These objects are more powerful than standard arrays. One of the greatest features of the &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset&lt;/em&gt;&lt;/a&gt; is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.</source>
          <target state="translated">これらのオブジェクトは、標準の配列よりも強力です。&lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset&lt;/em&gt;&lt;/a&gt;の最大の機能の1つは、常にメモリにレコードが1つしかないことです。これは、特に大量のデータを扱う場合のメモリ管理に大きく役立ちます。</target>
        </trans-unit>
        <trans-unit id="99003b4d86374d1db754a8a05fa9b336031a7f0d" translate="yes" xml:space="preserve">
          <source>These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:</source>
          <target state="translated">これらのプレースホルダは、開発者にとって読みやすく、理解しやすい正規表現を書くのに役立ちます。以下のプレースホルダがサポートされています。</target>
        </trans-unit>
        <trans-unit id="04adcf526c1ca679ba020b063572ff500b25d78c" translate="yes" xml:space="preserve">
          <source>These services are &amp;ldquo;shared&amp;rdquo;, which means that we are always accessing the same instance regardless of the place where we invoke them.</source>
          <target state="translated">これらのサービスは「共有」されます。つまり、サービスを呼び出す場所に関係なく、常に同じインスタンスにアクセスします。</target>
        </trans-unit>
        <trans-unit id="b709aa40588ea230a4951ae58ebe0179f7e12ac7" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for Linux.</source>
          <target state="translated">これらの手順では、Phalcon Developer Tools for Linux のインストール手順を説明します。</target>
        </trans-unit>
        <trans-unit id="e153b0cf1ac6d9302550217ce4aabb5398fb1a56" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for OS/X.</source>
          <target state="translated">これらの手順では、Phalcon Developer Tools for OS/Xのインストール手順を説明します。</target>
        </trans-unit>
        <trans-unit id="fc57a74fc589ddda2ae6439a445e5e59506e0d36" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for Windows.</source>
          <target state="translated">これらの手順では、Phalcon Developer Tools for Windows のインストール手順を説明します。</target>
        </trans-unit>
        <trans-unit id="2e43de4e6bb39804486fff9914534c12d071166f" translate="yes" xml:space="preserve">
          <source>These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.</source>
          <target state="translated">これらのツールは、スケルトンコードを生成するための便利なスクリプトを集めたものです。アプリケーションのコアコンポーネントを簡単なコマンドで生成できるので、Phalconを使ったアプリケーションを簡単に開発することができます。</target>
        </trans-unit>
        <trans-unit id="98cdb2149c058a667eabccfb71880ab06044889d" translate="yes" xml:space="preserve">
          <source>These values that don&amp;rsquo;t represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:</source>
          <target state="translated">完全なオブジェクトを表さないこれらの値は、スカラーと呼ばれるものです。PHQLを使用すると、フィールド、関数、リテラル、式など、すべてのタイプのスカラーをクエリできます。</target>
        </trans-unit>
        <trans-unit id="26f3a3cbd1b01bb43f507a531e45d5df16068bee" translate="yes" xml:space="preserve">
          <source>Think if we had to create this object in many parts of our application. In the future, if we do not require any of the dependencies, we need to go through the entire code base to remove the parameter in any constructor or setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:</source>
          <target state="translated">アプリケーションの多くの部分でこのオブジェクトを作成しなければならなかった場合を考えてみてください。将来、依存関係のいずれかを必要としない場合、コードを注入した任意のコンストラクタやセッタのパラメータを削除するために、コードベース全体を通過する必要があります。これを解決するために、コンポーネントを作成するために再びグローバルレジストリに戻ります。しかし、オブジェクトを作成する前に新たな抽象化の層が追加されます。</target>
        </trans-unit>
        <trans-unit id="e0d2d7fef2379d33a3251636b6ac166e493d28ee" translate="yes" xml:space="preserve">
          <source>This action simply pass a form instance of SignUpForm to the view, which itself is rendered to allow the user enter the login details:</source>
          <target state="translated">このアクションは単に SignUpForm のフォームインスタンスをビューに渡し、ユーザーがログイン詳細を入力できるようにレンダリングします。</target>
        </trans-unit>
        <trans-unit id="3c7108bdab1f42e451ee574de6cd54f788d3b726" translate="yes" xml:space="preserve">
          <source>This adapter allows to paginate data using a Phalcon\Mvc\Model resultset as a base.</source>
          <target state="translated">このアダプタでは、Phalcon\Mvc\Model resultsetをベースにして、データをページ化することができます。</target>
        </trans-unit>
        <trans-unit id="f7a676fff406fd66a0774db2362e2d3277e91cbb" translate="yes" xml:space="preserve">
          <source>This adapter is the default. The metadata is cached only during the request. When the request is completed, the metadata are released as part of the normal memory of the request. This adapter is perfect when the application is in development so as to refresh the metadata in each request containing the new and/or modified fields.</source>
          <target state="translated">このアダプタがデフォルトです。メタデータはリクエスト中のみキャッシュされます。リクエストが完了すると、メタデータはリクエストの通常のメモリの一部として解放されます。このアダプタは、アプリケーションが開発中の場合に、 新しいフィールドや変更されたフィールドを含むリクエストのたびに メタデータを更新するのに最適です。</target>
        </trans-unit>
        <trans-unit id="3b8d79fb24893f0b90ee4553a4c7df953b3a7699" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in Redis</source>
          <target state="translated">このアダプタはセッションを Redis に保存します。</target>
        </trans-unit>
        <trans-unit id="a4859dd02fc83e785c7447b63f383157b9f3c4ef" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in libmemcached</source>
          <target state="translated">このアダプタはセッションを libmemcached に保存します。</target>
        </trans-unit>
        <trans-unit id="c8e7b6a5442e53f751446fd561fe4151e4a0d4b9" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in memcache</source>
          <target state="translated">このアダプタは、セッションを memcache に保存します。</target>
        </trans-unit>
        <trans-unit id="0ef9ec927d9d921a283bad925fb5381b3542da3d" translate="yes" xml:space="preserve">
          <source>This adapter stores metadata in the &lt;code&gt;$_SESSION&lt;/code&gt; superglobal. This adapter is recommended only when the application is actually using a small number of models. The metadata are refreshed every time a new session starts. This also requires the use of &lt;code&gt;session_start()&lt;/code&gt; to start the session before using any models.</source>
          <target state="translated">このアダプターは、メタデータを &lt;code&gt;$_SESSION&lt;/code&gt; スーパーグローバルに格納します。このアダプターは、アプリケーションが実際に少数のモデルを使用している場合にのみお勧めします。メタデータは、新しいセッションが開始されるたびに更新されます。また、モデルを使用する前に、 &lt;code&gt;session_start()&lt;/code&gt; を使用してセッションを開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="8c54a77f3d8fb22ad443613f0a0de6e7df15ffeb" translate="yes" xml:space="preserve">
          <source>This adapter uses &lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="translated">このアダプターは、&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;を使用してテーブルのメタデータを格納します。オプションを使用して、メタデータの存続期間を指定できます。これは、アプリケーションが本稼働段階にあるときにメタデータを格納するための最も推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="454247304d2cb37d9698895a5eeaa091f9a09e26" translate="yes" xml:space="preserve">
          <source>This adapter uses plain files to store metadata. By using this adapter the disk-reading is increased but the database access is reduced.</source>
          <target state="translated">このアダプタは、メタデータを格納するためにプレーンファイルを使用します。このアダプタを使用することで、ディスクの読み込みは増加しますが、データベースへのアクセスは減少します。</target>
        </trans-unit>
        <trans-unit id="ac6a633007b292928b94ae4d440788afd472c176" translate="yes" xml:space="preserve">
          <source>This adapter uses the &lt;a href=&quot;http://www.php.net/manual/en/book.apc.php&quot;&gt;Alternative PHP Cache (APC)&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="translated">このアダプターは、&lt;a href=&quot;http://www.php.net/manual/en/book.apc.php&quot;&gt;代替PHPキャッシュ（APC）&lt;/a&gt;を使用してテーブルのメタデータを格納します。オプションを使用して、メタデータの存続期間を指定できます。これは、アプリケーションが本稼働段階にあるときにメタデータを格納するための最も推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="613dcec271cd0bca5d506e9e5dc25022113c0203" translate="yes" xml:space="preserve">
          <source>This adapter uses the base64_encode/base64_decode PHP&amp;rsquo;s functions</source>
          <target state="translated">このアダプターは、base64_encode / base64_decode PHP関数を使用します</target>
        </trans-unit>
        <trans-unit id="8407319adc0108601b3ac31705dcc1fe40f9fe84" translate="yes" xml:space="preserve">
          <source>This adapter uses the json_encode/json_decode PHP&amp;rsquo;s functions</source>
          <target state="translated">このアダプターは、json_encode / json_decode PHPの関数を使用します</target>
        </trans-unit>
        <trans-unit id="a5c7a136f590c470fd4b417f248b5016a7e38a2d" translate="yes" xml:space="preserve">
          <source>This adapter uses the special memcached key &amp;ldquo;_PHCM&amp;rdquo; to store all the keys internally used by the adapter</source>
          <target state="translated">このアダプターは、特別なmemcachedキー「_PHCM」を使用して、アダプターが内部的に使用するすべてのキーを格納します</target>
        </trans-unit>
        <trans-unit id="932f02077c71f103e556b3ed13bfbb7d4a5c2ee6" translate="yes" xml:space="preserve">
          <source>This adapter uses the special redis key &amp;ldquo;_PHCR&amp;rdquo; to store all the keys internally used by the adapter</source>
          <target state="translated">このアダプターは、特別なredisキー「_PHCR」を使用して、アダプターが内部的に使用するすべてのキーを格納します</target>
        </trans-unit>
        <trans-unit id="ae6758c24cff2059f114ae5181e6d8557ad9631c" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to DELETE</source>
          <target state="translated">このアノテーションは、HTTP メソッドの DELETE を制限するルートとしてメソッドをマークします。</target>
        </trans-unit>
        <trans-unit id="3a25e503d16ee8c141af4d667b256e757f7f5b96" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to GET</source>
          <target state="translated">このアノテーションは、HTTP メソッドを GET に制限するルートとしてメソッドをマークします。</target>
        </trans-unit>
        <trans-unit id="3aa9a48bc5c37bcf35ecc290651b8715cdc88076" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to OPTIONS</source>
          <target state="translated">このアノテーションは、HTTP メソッドを OPTIONS に制限するルートとしてメソッドをマークします。</target>
        </trans-unit>
        <trans-unit id="b0c693dfac24ee45df3abc3d716fbbc9b8be74e0" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to POST</source>
          <target state="translated">このアノテーションは、HTTP メソッドを POST に制限するルートとしてメソッドをマークします。</target>
        </trans-unit>
        <trans-unit id="c9a59a6a96069c517edfb611fe9ab09371111ee6" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to PUT</source>
          <target state="translated">このアノテーションは、HTTP メソッドを PUT に制限するルートとしてメソッドをマークします。</target>
        </trans-unit>
        <trans-unit id="5b48a807bc25cb1ae5f659e06c27fd5b00067ae6" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route. This annotation must be placed in a method docblock</source>
          <target state="translated">このアノテーションは、メソッドをルートとしてマークします。このアノテーションは、メソッドの docblock に配置しなければなりません。</target>
        </trans-unit>
        <trans-unit id="46f7e60c29c9ceed4dfe8bf927e3a8c3f7416c80" translate="yes" xml:space="preserve">
          <source>This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt;:</source>
          <target state="translated">このアプローチは問題を解決しますが、注文や条件などの他のパラメーターを追加する場合は、より複雑なメソッドを作成する必要があります。さらに、関連するレコードまたは &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; を使用してデータを取得する場合、このメソッドは機能しません。</target>
        </trans-unit>
        <trans-unit id="e5a39e469e8f6bb6325aef6274da00593959ec2c" translate="yes" xml:space="preserve">
          <source>This backend will store cached content into files in the local server. The available options for this backend are:</source>
          <target state="translated">このバックエンドは、キャッシュされたコンテンツをローカルサーバーのファイルに保存します。このバックエンドで使用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2ed3eb13db1459fed5baf8b485ac81c019356c37" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on Alternative PHP Cache (&lt;a href=&quot;http://php.net/apc&quot;&gt;APC&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">このバックエンドは、キャッシュされたコンテンツを代替PHPキャッシュ（&lt;a href=&quot;http://php.net/apc&quot;&gt;APC&lt;/a&gt;）に格納します。このバックエンドで使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ba5b6d56c377f767a52770c27dde4c262315f70a" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on XCache (&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">このバックエンドは、キャッシュされたコンテンツをXCache（&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;）に格納します。このバックエンドで使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="34bdada41ca5545b1a66be4b2b020b39d65e94ac" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a MongoDB server. The available options for this backend are:</source>
          <target state="translated">このバックエンドは、キャッシュしたコンテンツを MongoDB サーバーに保存します。このバックエンドで使用できるオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cc511a3c0b4431d2627f7457b7b348e9559bb04e" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a Redis server (&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">このバックエンドは、キャッシュされたコンテンツをRedisサーバー（&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;）に保存します。このバックエンドで使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="09e8bd2072de5f7e32b8cdf951e153bb18b0bbe1" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a memcached server. The available options for this backend are:</source>
          <target state="translated">このバックエンドは、キャッシュされたコンテンツを memcached サーバに保存します。このバックエンドで利用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dd5dfa74e5dfced4703c2b625c7a82bc4c7f710f" translate="yes" xml:space="preserve">
          <source>This behavior accepts two options: &amp;lsquo;field&amp;rsquo; and &amp;lsquo;value&amp;rsquo;, &amp;lsquo;field&amp;rsquo; determines what field must be updated and &amp;lsquo;value&amp;rsquo; the value to be deleted. Let&amp;rsquo;s pretend the table &amp;lsquo;users&amp;rsquo; has the following data:</source>
          <target state="translated">この動作は2つのオプションを受け入れます。「フィールド」と「値」、「フィールド」はどのフィールドを更新する必要があるかを決定し、「値」は削除する値を決定します。テーブル 'users'に次のデータがあるとします。</target>
        </trans-unit>
        <trans-unit id="5b222b7ae9dfefc2f2bd6d17faa445d59e3d03b0" translate="yes" xml:space="preserve">
          <source>This behavior can be used in the following way:</source>
          <target state="translated">この動作は、以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="4a19dca43cacc4d2e970fb0da09eb1bd83cd30db" translate="yes" xml:space="preserve">
          <source>This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:</source>
          <target state="translated">このビヘイビアはオプションの配列を受け取ります。第1レベルのキーは、いつカラムを割り当てる必要があるかを示すイベント名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="28d347b4ed48d3a2b8c7ceecd8625d2bd915fba7" translate="yes" xml:space="preserve">
          <source>This being the most common case, the application is installed in any directory under the document root. In this case, we use two .htaccess files, the first one to hide the application code forwarding all requests to the application&amp;rsquo;s document root (public/).</source>
          <target state="translated">これは最も一般的なケースであり、アプリケーションはドキュメントルートの下の任意のディレクトリにインストールされます。この場合、2つの.htaccessファイルを使用します。最初のファイルは、すべての要求をアプリケーションのドキュメントルート（public /）に転送するアプリケーションコードを非表示にします。</target>
        </trans-unit>
        <trans-unit id="9dea2d4f6f2833b4bf4fbd936d0817b6658313b0" translate="yes" xml:space="preserve">
          <source>This chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.</source>
          <target state="translated">この章では、パフォーマンスを向上させるためにキャッシュを実装することが可能なポイントを説明します。フレームワークは、アプリケーションのアーキテクチャに応じて、必要なところにキャッシュを実装するためのツールを提供します。</target>
        </trans-unit>
        <trans-unit id="359602167f12084580340e70d0d185dea0eeb081" translate="yes" xml:space="preserve">
          <source>This class allows to access services in the services container by just only accessing a public property with the same name of a registered service</source>
          <target state="translated">このクラスは、登録されているサービスと同じ名前のパブリックプロパティにアクセスするだけで、サービスコンテナ内のサービスにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="98d85fe07e7cb9ff6790512d5dcde77adfe369a9" translate="yes" xml:space="preserve">
          <source>This class allows to get the installed version of the framework</source>
          <target state="translated">このクラスはフレームワークのインストールされたバージョンを取得します。</target>
        </trans-unit>
        <trans-unit id="78f1581244d0ec60243b5bb84c6ce68674511e1d" translate="yes" xml:space="preserve">
          <source>This class allows to insert/update raw data without quoting or formatting.</source>
          <target state="translated">このクラスでは、引用符や書式を使わずに生データを挿入/更新することができます。</target>
        </trans-unit>
        <trans-unit id="74b9aaa8649940873da1b9bd772f6eb9cdfb0472" translate="yes" xml:space="preserve">
          <source>This class builds instances based on complex definitions</source>
          <target state="translated">このクラスは、複雑な定義に基づいてインスタンスを構築します。</target>
        </trans-unit>
        <trans-unit id="9a8f32e7ed9387cbf3a753073bda2637b2955be4" translate="yes" xml:space="preserve">
          <source>This class defines resource entity and its description</source>
          <target state="translated">リソースの実体とその説明を定義します。</target>
        </trans-unit>
        <trans-unit id="46099886800a795d451a3b96391177e45b3db15e" translate="yes" xml:space="preserve">
          <source>This class defines role entity and its description</source>
          <target state="translated">ロールエンティティとその記述を定義します。</target>
        </trans-unit>
        <trans-unit id="17232dbed8386c9f8d78b0d20c4017f8f28df4d7" translate="yes" xml:space="preserve">
          <source>This class extends the &lt;a href=&quot;../api/phalcon_mvc_user_component&quot;&gt;&lt;em&gt;Phalcon\Mvc\User\Component&lt;/em&gt;&lt;/a&gt;. It is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we are going to register our first user component in the services container:</source>
          <target state="translated">このクラスは&lt;a href=&quot;../api/phalcon_mvc_user_component&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ User \ Componentを&lt;/em&gt;&lt;/a&gt;拡張し&lt;em&gt;ます&lt;/em&gt;。このクラスでコンポーネントを拡張する必要はありませんが、アプリケーションサービスへのアクセスをより迅速に行うのに役立ちます。次に、最初のユーザーコンポーネントをサービスコンテナーに登録します。</target>
        </trans-unit>
        <trans-unit id="a7967b846c882713793b78a5442adefc228d51cb" translate="yes" xml:space="preserve">
          <source>This class identifies each profile in a Phalcon\Db\Profiler</source>
          <target state="translated">このクラスは、Phalconの各プロファイルを識別します。</target>
        </trans-unit>
        <trans-unit id="091f08cb4cf3b07ee8c2f8b05a578e3fd0b0e681" translate="yes" xml:space="preserve">
          <source>This class implements common functionality for backend adapters. A backend cache adapter may extend this class</source>
          <target state="translated">このクラスは、バックエンドアダプタのための共通の機能を実装しています。バックエンドキャッシュアダプタは、このクラス</target>
        </trans-unit>
        <trans-unit id="b9e3627fcf244de7360bead6dfa7616e2eb4870d" translate="yes" xml:space="preserve">
          <source>This class is a bag to manage the cookies A cookies bag is automatically registered as part of the &amp;lsquo;response&amp;rsquo; service in the DI</source>
          <target state="translated">このクラスは、Cookieを管理するためのバッグです。Cookieバッグは、DIの「応答」サービスの一部として自動的に登録されます</target>
        </trans-unit>
        <trans-unit id="716e405825e91f8cc0169ab58e76abbfc8272d47" translate="yes" xml:space="preserve">
          <source>This class is a bag to manage the response headers</source>
          <target state="translated">このクラスは、レスポンスヘッダを管理するためのバッグです。</target>
        </trans-unit>
        <trans-unit id="fcdd9aba9fa6cb2fe70972b68ca2b22b67e5da33" translate="yes" xml:space="preserve">
          <source>This class is only for backward compatibility reasons to use with Phalcon\Mvc\Collection. Otherwise please use the validators provided by Phalcon\Validation.</source>
          <target state="translated">このクラスは、PhalconMvcCollectionと一緒に使用するための下位互換性の理由のためだけです。それ以外の場合は、Phalcon\Validation で提供されるバリデータを使用してください。</target>
        </trans-unit>
        <trans-unit id="39f61ef4f1999b7e3f1cfd948e6983d319f31631" translate="yes" xml:space="preserve">
          <source>This class is used to build the array parameter required by Phalcon\Mvc\Model::find() and Phalcon\Mvc\Model::findFirst() using an object-oriented interface.</source>
          <target state="translated">このクラスは、Phalcon\Mvc\Model::find()及びPhalcon\Mvc\Model::findFirst()によって要求される配列パラメータをオブジェクト指向インタフェースを用いて構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="cba36a0eedc905b6f646a4aa33b823e12a5331af" translate="yes" xml:space="preserve">
          <source>This class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.</source>
          <target state="translated">このクラスは、トランザクションを構成するオブジェクトを管理します。トランザクションは、トランザクションを構成するすべてのオブジェクトに渡される一意の接続を生成します。</target>
        </trans-unit>
        <trans-unit id="d0f9a7183a44f8d969371c4637d1ff1b06b30fd4" translate="yes" xml:space="preserve">
          <source>This class offers contextual information of a fired event in the EventsManager</source>
          <target state="translated">このクラスは、発生したイベントのコンテキスト情報を EventsManager で提供します。</target>
        </trans-unit>
        <trans-unit id="148ea82ff93879fe00b01ec2cbcee467d27bc3af" translate="yes" xml:space="preserve">
          <source>This class partially borrows SecureRandom library from Ruby</source>
          <target state="translated">このクラスはRubyのSecureRandomライブラリを部分的に借用しています。</target>
        </trans-unit>
        <trans-unit id="0e12f8bf99108b5cf596556402bf49c3529703eb" translate="yes" xml:space="preserve">
          <source>This class reads and compiles Volt templates into PHP plain code</source>
          <target state="translated">このクラスは、Volt のテンプレートを読み込んで PHP のプレーンコードにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="26ff527a8cbf00ea3e0fa2de97940526a1b2c2fe" translate="yes" xml:space="preserve">
          <source>This class represents a relationship between two models</source>
          <target state="translated">このクラスは,2つのモデル間の関係を表します.</target>
        </trans-unit>
        <trans-unit id="e6fb8a3c415089544ba83a5d567fe718e5d729af" translate="yes" xml:space="preserve">
          <source>This class represents every route added to the router</source>
          <target state="translated">このクラスは、ルータに追加されたすべてのルートを表します。</target>
        </trans-unit>
        <trans-unit id="ae9b2cb497909d3a27ae689a3268c8734ec22fc0" translate="yes" xml:space="preserve">
          <source>This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails</source>
          <target state="translated">このクラスは、INSERT、UPDATE、DELETEのようなPHQL文によって返されるステータスを表します。このクラスは、失敗した場合に最終的に操作を実行するモデルによって生成されるコンテキスト情報と関連するメッセージを提供します。</target>
        </trans-unit>
        <trans-unit id="0b1ac4270f7af78c43a08eaa98e3022f43189a46" translate="yes" xml:space="preserve">
          <source>This class takes a PHQL intermediate representation and executes it.</source>
          <target state="translated">このクラスはPHQLの中間表現を受け取り、それを実行します。</target>
        </trans-unit>
        <trans-unit id="b9b523d5957a0504d6203583341a6205c3ddfa79" translate="yes" xml:space="preserve">
          <source>This class will be thrown to exit a try/catch block for isolated transactions</source>
          <target state="translated">このクラスは、分離されたトランザクションのトライ/キャッチブロックを終了するためにスローされます。</target>
        </trans-unit>
        <trans-unit id="a65dd3bc941d55b2949f417965c47cd65cf54889" translate="yes" xml:space="preserve">
          <source>This code executes the following SQL in MySQL:</source>
          <target state="translated">このコードは、MySQLで以下のSQLを実行します。</target>
        </trans-unit>
        <trans-unit id="473b5168ccd8ab26f187d274d209118dc3866027" translate="yes" xml:space="preserve">
          <source>This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).</source>
          <target state="translated">このコンポーネントは、パスワードハッシュやクロスサイトリクエストフォージェリ保護 (CSRF)などの一般的なセキュリティタスクの開発を支援します。</target>
        </trans-unit>
        <trans-unit id="9dc8b5d404ce74e95646276c04583f6e773cc076" translate="yes" xml:space="preserve">
          <source>This component allow you to set up a different base URI for static resources in the application:</source>
          <target state="translated">このコンポーネントは、アプリケーション内の静的リソースのために異なるベースURIを設定することを可能にします。</target>
        </trans-unit>
        <trans-unit id="60de99e77ce46a6ce7a566092e127c9ce576a037" translate="yes" xml:space="preserve">
          <source>This component allows Phalcon\Mvc\Collection to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&amp;gt;x or array[x].</source>
          <target state="translated">このコンポーネントにより、Phalcon \ Mvc \ Collectionは、関連付けられたエンティティなしで行を返すことができます。このオブジェクトはArrayAccessインターフェイスを実装して、object-&amp;gt; xまたはarray [x]としてオブジェクトにアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="7fbd64c6ec777f6d87d93bd3120aa1a1bd3b797a" translate="yes" xml:space="preserve">
          <source>This component allows Phalcon\Mvc\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&amp;gt;x or array[x].</source>
          <target state="translated">このコンポーネントを使用すると、Phalcon \ Mvc \ Modelはエンティティが関連付けられていない行を返すことができます。このオブジェクトはArrayAccessインターフェイスを実装して、object-&amp;gt; xまたはarray [x]としてオブジェクトにアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="fb6cd78133f4615eb573574f6630e832ff8f5753" translate="yes" xml:space="preserve">
          <source>This component allows for a lower level database manipulation than using traditional models.</source>
          <target state="translated">このコンポーネントを使用することで、従来のモデルを使用するよりも低レベルのデータベース操作が可能になります。</target>
        </trans-unit>
        <trans-unit id="57955ffda639b9f9495f02aecd4310b55cc311cc" translate="yes" xml:space="preserve">
          <source>This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; and others.</source>
          <target state="translated">このコンポーネントを使用すると、開発者はビューをレンダリングするタイミングとその場所を制御できます。さらに、このコンポーネントは、&lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;などのテンプレートエンジンで利用可能なビューの継承を活用できます。</target>
        </trans-unit>
        <trans-unit id="3f899e2efd4bab87c5eeef75386e8e6b0978a82f" translate="yes" xml:space="preserve">
          <source>This component allows to Phalcon\Mvc\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.</source>
          <target state="translated">このコンポーネントは、PhalconMvc\Model が最小のメモリ消費で大きな結果セットを返すことを可能にします。 結果セットは、標準的な foreach 又は while 文を使用してトラバースすることができます。結果セットがシリアライズされている場合は、全ての行を大きな配列にダンプします。そして unserialize はシリアライズ前と同じように行を取得します。</target>
        </trans-unit>
        <trans-unit id="29aa9758ff123fff9b470dcd7614f188311f779e" translate="yes" xml:space="preserve">
          <source>This component allows to build forms using an object-oriented interface</source>
          <target state="translated">このコンポーネントは、オブジェクト指向のインターフェイスを使用してフォームを構築することができます。</target>
        </trans-unit>
        <trans-unit id="5a7a6de9087fbf1f38ae20c038fd86ec757e7aed" translate="yes" xml:space="preserve">
          <source>This component allows to create CLI applications using Phalcon</source>
          <target state="translated">このコンポーネントを使用すると、Phalcon を使用して CLI アプリケーションを作成することができます。</target>
        </trans-unit>
        <trans-unit id="abb34ff83add7eb77eecb7823a9f33f5e28d432c" translate="yes" xml:space="preserve">
          <source>This component allows to render views without hierarchical levels</source>
          <target state="translated">このコンポーネントでは、階層的なレベルを持たないビューをレンダリングすることができます。</target>
        </trans-unit>
        <trans-unit id="7e9790e5d876bd18b44479d314aaf0ac156fc011" translate="yes" xml:space="preserve">
          <source>This component can be used in a plain HTML+PHP view or in a &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; template.</source>
          <target state="translated">このコンポーネントは、プレーンHTML + PHPビューまたは&lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;テンプレートで使用できます。</target>
        </trans-unit>
        <trans-unit id="ad15f4dbf16e4acdb17f5ad6a44a01c9846b33bc" translate="yes" xml:space="preserve">
          <source>This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.</source>
          <target state="translated">このコンポーネントは、必要とされるすべてのコンポーネントのインスタンス化の背後にあるすべての複雑な操作をカプセル化し、それを他のコンポーネントと統合することで、MVC パターンが希望通りに動作するようにします。</target>
        </trans-unit>
        <trans-unit id="ba5e79ff5cc358b4232729ced529d0a114038be6" translate="yes" xml:space="preserve">
          <source>This component gives you the ability to use this algorithm in a simple way:</source>
          <target state="translated">このコンポーネントは、このアルゴリズムを簡単な方法で使用する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="e7fc3a64877f951d3fa117dfb9258db003e56d03" translate="yes" xml:space="preserve">
          <source>This component helps to load your project classes automatically based on some conventions</source>
          <target state="translated">このコンポーネントは、いくつかの規約に基づいてプロジェクトのクラスを自動的にロードするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e070e940109b44807ff320b67e664c774b3e1c19" translate="yes" xml:space="preserve">
          <source>This component helps to separate session data into &amp;ldquo;namespaces&amp;rdquo;. Working by this way you can easily create groups of session variables into the application</source>
          <target state="translated">このコンポーネントは、セッションデータを「名前空間」に分離するのに役立ちます。この方法で作業すると、セッション変数のグループをアプリケーションに簡単に作成できます</target>
        </trans-unit>
        <trans-unit id="d213cda49c9ae1e533ad6b2e4c659562703f5c2c" translate="yes" xml:space="preserve">
          <source>This component implements a high level abstraction for NoSQL databases which works with documents</source>
          <target state="translated">このコンポーネントは、ドキュメントで動作するNoSQLデータベースのための高レベルの抽象化を実装しています。</target>
        </trans-unit>
        <trans-unit id="5889d45be839fbfe9ad24313fd86f22690a993bf" translate="yes" xml:space="preserve">
          <source>This component is automatically registered in the services container as &amp;lsquo;security&amp;rsquo;, you can re-register it to setup its options:</source>
          <target state="translated">このコンポーネントは「セキュリティ」としてサービスコンテナに自動的に登録されます。再登録してオプションを設定できます。</target>
        </trans-unit>
        <trans-unit id="f5060d4355e0c5d915d79aaf1f0a0ba4ab661096" translate="yes" xml:space="preserve">
          <source>This component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon\Acl&lt;/em&gt;&lt;/a&gt; constructor takes as its first parameter an adapter used to retrieve the information related to the control list. An example using the memory adapter is below:</source>
          <target state="translated">このコンポーネントは、最初はメモリで動作するように設計されています。これにより、リストのあらゆる側面にアクセスする際の使いやすさとスピードが提供されます。&lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon \ ACLをの&lt;/em&gt;&lt;/a&gt;コンストラクタは、その最初のパラメータとして制御リストに関連する情報を取得するために使用されるアダプタを取ります。メモリアダプタを使用した例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="3848a008ccbbe55f15e7c2ac89ed7964356544ae" translate="yes" xml:space="preserve">
          <source>This component is designed to provide a very simple usage:</source>
          <target state="translated">このコンポーネントは、非常にシンプルな使い方ができるように設計されています。</target>
        </trans-unit>
        <trans-unit id="65fd853b534b215347f20e65c96493b242e6a400" translate="yes" xml:space="preserve">
          <source>This component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\Mvc\Model.</source>
          <target state="translated">このコンポーネントは低レベルのデータベース操作を目的としています。より高い抽象度でデータベースと対話したい場合は Phalcon\MvcModel を使用してください。</target>
        </trans-unit>
        <trans-unit id="844c07fb8c8cb6cdfcf04c379ad8a310e96a6605" translate="yes" xml:space="preserve">
          <source>This component makes use of &amp;lsquo;formatters&amp;rsquo; to format messages before sending them to the backend. The formatters available are:</source>
          <target state="translated">このコンポーネントは、「フォーマッター」を使用して、メッセージをバックエンドに送信する前にフォーマットします。利用可能なフォーマッタは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="88a56cd957ec22a13fa9980a15a9f9d41e74dc45" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:</source>
          <target state="translated">このコンポーネントは、アダプタを使用して、解析されたアノテーションや処理されたアノテーションをキャッシュしたり、キャッシュしなかったりすることで、パフォーマンスを向上させたり、開発/テストのための設備を提供したりしています。</target>
        </trans-unit>
        <trans-unit id="56334adc443c140a461831ec9ee7f12d6c794b33" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to define the behavior of the messages after being passed to the Flasher:</source>
          <target state="translated">このコンポーネントは、フラッシャーに渡された後のメッセージの動作を定義するためにアダプタを使用します。</target>
        </trans-unit>
        <trans-unit id="517e14ec7a89f08d1acfe0ef6e14677d02f833f7" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate different sources of data:</source>
          <target state="translated">このコンポーネントは、アダプタを使用してさまざまなデータソースをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="3da0c844f394f08f0a5031cd073730894c94417d" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate specific database system details. Phalcon uses &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; to connect to databases. The following database engines are supported:</source>
          <target state="translated">このコンポーネントは、アダプターを使用して、特定のデータベースシステムの詳細をカプセル化します。Phalconは&lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;を使用してデータベースに接続します。次のデータベースエンジンがサポートされています。</target>
        </trans-unit>
        <trans-unit id="787c5efada82518da613b927b0bccf18456c3001" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate specific image manipulator programs. The following image manipulator programs are supported:</source>
          <target state="translated">このコンポーネントは、アダプタを使用して特定の画像マニピュレータプログラムをカプセル化します。以下のイメージマニピュレータプログラムがサポートされています。</target>
        </trans-unit>
        <trans-unit id="3bfebc589c44d12bc8b6341706a00d9bf5529a03" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to read translation messages from different sources in a unified way.</source>
          <target state="translated">このコンポーネントは、アダプタを使用して、異なるソースからの翻訳メッセージを統一された方法で読み取るようにします。</target>
        </trans-unit>
        <trans-unit id="933b3b7248b648cf06cea9e05a7eb935605cd065" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch backends if necessary. The adapters supported are:</source>
          <target state="translated">このコンポーネントは、ログに記録されたメッセージを保存するためにアダプタを使用します。アダプタを使用することで、必要に応じてバックエンドを簡単に切り替える機能を提供する共通のロギングインターフェースが可能になります。サポートされているアダプタは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bf6a83dfb16de5400201ec766c16294f2a9d4a6d" translate="yes" xml:space="preserve">
          <source>This component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.</source>
          <target state="translated">このコンポーネントはUTF-8でのみ動作します。PREG拡張子はUTF-8をサポートしてコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="4e12c85bfc194575eba8772fe50703d5e960f97b" translate="yes" xml:space="preserve">
          <source>This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:</source>
          <target state="translated">このコンポーネントは、開発者がフォームを登録し、サービスロケータを介してフォームにアクセスするために使用できるフォームマネージャを提供します。</target>
        </trans-unit>
        <trans-unit id="75a4b9f8fdfae59ff4fcfafdb602ccca218d0c49" translate="yes" xml:space="preserve">
          <source>This component provides a set of functions to improve the security in Phalcon applications</source>
          <target state="translated">このコンポーネントは、Phalcon アプリケーションのセキュリティを向上させるための一連の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="2aeb5f841025bc13bd8a61f244b4336c820c30e9" translate="yes" xml:space="preserve">
          <source>This component provides a variant that&amp;rsquo;s integrated with the &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:</source>
          <target state="translated">このコンポーネントは、&lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;注釈&lt;/em&gt;&lt;/a&gt;サービスと統合されたバリアントを提供します。この戦略を使用すると、サービス登録にルートを追加する代わりに、コントローラーに直接ルートを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="2f8ab349e815e292a5085fe67b3765f479307ada" translate="yes" xml:space="preserve">
          <source>This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let&amp;rsquo;s see how to do that integration.</source>
          <target state="translated">このコンポーネントはアダプターを使用します。これらは、Phalconがそれらの外部テンプレートエンジンと統一された方法で通信するのに役立ちます。その統合を行う方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="923658f7cd92c6657709ad391fa808d718c68d4b" translate="yes" xml:space="preserve">
          <source>This component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is &lt;em&gt;app/views&lt;/em&gt; then view component will find automatically for these 3 view files.</source>
          <target state="translated">このコンポーネントはデフォルトでPHP自体をテンプレートエンジンとして使用するため、ビューには.phtml拡張子が必要です。ビューディレクトリが&lt;em&gt;app / viewsの&lt;/em&gt;場合、ビューコンポーネントはこれらの3つのビューファイルを自動的に検索します。</target>
        </trans-unit>
        <trans-unit id="0ba79abaa8bc3f21c6954270a50f4e8887099925" translate="yes" xml:space="preserve">
          <source>This components controls the initialization of models, keeping record of relations between the different models of the application.</source>
          <target state="translated">このコンポーネントは、モデルの初期化を制御し、アプリケーションの異なるモデル間の関係を記録します。</target>
        </trans-unit>
        <trans-unit id="054f6c1a642c815bc404481c4107e391831a950f" translate="yes" xml:space="preserve">
          <source>This components helps in the generation of: URIs, URLs and Paths</source>
          <target state="translated">このコンポーネントは URI、URL、パス</target>
        </trans-unit>
        <trans-unit id="2e0b3a781af669b521cf14a3ce41ea8a0552cb1d" translate="yes" xml:space="preserve">
          <source>This example does not contain a config file, most test cases however, do need one. You can add it to the DI to get the UnitTestCase file.</source>
          <target state="translated">この例には設定ファイルは含まれていませんが、ほとんどのテストケースでは設定ファイルが必要です。これを DI に追加して UnitTestCase ファイルを取得することができます。</target>
        </trans-unit>
        <trans-unit id="6e74ee3d94516279f32e29514cabd9f52556ed4e" translate="yes" xml:space="preserve">
          <source>This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:</source>
          <target state="translated">この例は非常にシンプルで、顧客が照会され、必要に応じて、例えば、その名前を表示するために使用することができます。これは、これらの請求書に対応する顧客を表示するために請求書のセットを取得する場合にも適用されます。</target>
        </trans-unit>
        <trans-unit id="20fbfec333f4c3fae2d3a558a6f47201f7cbb0ad" translate="yes" xml:space="preserve">
          <source>This exception is generated when a model fails to save a record Phalcon\Mvc\Model must be set up to have this behavior</source>
          <target state="translated">この例外は、モデルがレコードを保存するのに失敗したときに生成されます Phalcon\Mvc\Modelは、この動作を持つように設定されなければなりません。</target>
        </trans-unit>
        <trans-unit id="7e2b39c04f77cf35046d6632b65c3e6428170e9e" translate="yes" xml:space="preserve">
          <source>This feature of the cache component, allows the developer to implement a multi-level cache. This new feature is very useful because you can save the same data in several cache locations with different lifetimes, reading first from the one with the faster adapter and ending with the slowest one until the data expires:</source>
          <target state="translated">キャッシュコンポーネントのこの機能により、開発者はマルチレベルキャッシュを実装することができます。この新機能は、同じデータを異なる寿命を持つ複数のキャッシュに保存することができるので、非常に便利です。</target>
        </trans-unit>
        <trans-unit id="ca5fd106e60c429f965ed2e9d8b871253f1d1cdc" translate="yes" xml:space="preserve">
          <source>This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="translated">この関数は接続文字セットを考慮に入れているので、接続パラメータやデータベースサーバーの設定で正しい文字セットを定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="46ed69629e29dcfc8db4ac20cb2f66ebefdb61e4" translate="yes" xml:space="preserve">
          <source>This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the &lt;code&gt;find()/:code:`findFirst()&lt;/code&gt; method to force every query to be cached:</source>
          <target state="translated">これにより、特定のクエリをキャッシュする自由が与えられますが、モデルに対して実行されるすべてのクエリをグローバルにキャッシュしたい場合は、 &lt;code&gt;find()/:code:`findFirst()&lt;/code&gt; メソッドをオーバーライドして、すべてのクエリを強制的にキャッシュできます。</target>
        </trans-unit>
        <trans-unit id="7a64e8b2e52980f676e4d01664bc97e642bf173e" translate="yes" xml:space="preserve">
          <source>This gives you full control on how the cache should be implemented for each model. If this strategy is common to several models you can create a base class for all of them:</source>
          <target state="translated">これにより、各モデルに対してキャッシュがどのように実装されるべきかを完全に制御することができます。この戦略が複数のモデルに共通している場合は、それらすべてのモデルの基底クラスを作成することができます。</target>
        </trans-unit>
        <trans-unit id="95553944413a4c19699e0802809d78c431b5d899" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit the &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt; page in the API for a complete reference.</source>
          <target state="translated">このガイドは、利用可能なヘルパーとその引数の完全なドキュメントを意図したものではありません。完全なリファレンスについては、API の&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;ページにアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="972d5f64e94ba9f517fe3c6f02e96c293557ecb1" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available methods and their arguments. Please visit the &lt;a href=&quot;https://docs.phalconphp.com/en/latest/api/index.html&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt; for a complete reference.</source>
          <target state="translated">このガイドは、使用可能なメソッドとその引数の完全なドキュメントを意図したものではありません。完全なリファレンスについては、&lt;a href=&quot;https://docs.phalconphp.com/en/latest/api/index.html&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="79e598174d7941389a0cec0834ec0d74ff072ff5" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of the &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt; extension. Please visit its the &lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;documentation&lt;/a&gt; of the extension for a reference.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;拡張機能の完全なドキュメントを意図したものではありません。リファレンスについては、拡張機能の&lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="9221f7d158a322a1486f5e0ded6b00336daed2c9" translate="yes" xml:space="preserve">
          <source>This header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:</source>
          <target state="translated">このヘッダーは、提供されたページをキャッシュする安全な方法を提供します。単純に秒単位の時間を指定して、ブラウザにページをキャッシュに保存する時間を伝えなければなりません。</target>
        </trans-unit>
        <trans-unit id="b042172520ee5079c8c8a6e32acda4525f4aaf40" translate="yes" xml:space="preserve">
          <source>This injection type passes the dependencies/arguments to the class constructor. Let&amp;rsquo;s pretend we have the following component:</source>
          <target state="translated">この注入タイプは、依存関係/引数をクラスコンストラクターに渡します。次のコンポーネントがあるとします。</target>
        </trans-unit>
        <trans-unit id="6728335fc949382ab9e6060c37f62eeb2c9f5d57" translate="yes" xml:space="preserve">
          <source>This is a base class for Phalcon\Mvc\Model validators</source>
          <target state="translated">これはPhalconM\vc\Model Validatorsのベースクラスです。</target>
        </trans-unit>
        <trans-unit id="93ac1feb3a735c0aa48e71454ca5b2c62f752765" translate="yes" xml:space="preserve">
          <source>This is a base class for form elements</source>
          <target state="translated">これはフォーム要素の基底クラスです</target>
        </trans-unit>
        <trans-unit id="3b382497354525cfcf087e3a6af2524d9e649105" translate="yes" xml:space="preserve">
          <source>This is a base class for logger formatters</source>
          <target state="translated">これは、ロガーフォーマッタの基底クラスです。</target>
        </trans-unit>
        <trans-unit id="0e879c38c0c253de79cc69d48ffe9cc40331035b" translate="yes" xml:space="preserve">
          <source>This is a base class for validators</source>
          <target state="translated">これはバリデータの基底クラスです。</target>
        </trans-unit>
        <trans-unit id="f04c34626fe098ee852f468631503956c5eeefdd" translate="yes" xml:space="preserve">
          <source>This is a variant of the Phalcon\Flash that immediately outputs any message passed to it</source>
          <target state="translated">これは、渡されたメッセージを即座に出力する Phalcon\Flash の変形版です。</target>
        </trans-unit>
        <trans-unit id="0e5071b40d037749facf654c45ca6003940b48bb" translate="yes" xml:space="preserve">
          <source>This is a variant of the standard Phalcon\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework</source>
          <target state="translated">これは、標準の PhalconDi の変形版です。デフォルトでは、フレームワークによって提供される全てのサービスを自動的に登録します。このおかげで、開発者はフルスタックフレームワークを提供する各サービスを個別に登録する必要がありません。</target>
        </trans-unit>
        <trans-unit id="6ac9406ecaee3c942f18333d21e4e3ef61a978af" translate="yes" xml:space="preserve">
          <source>This is a variant of the standard Phalcon\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications</source>
          <target state="translated">これは、標準の PhalconDi の変形版です。デフォルトでは、フレームワークによって提供される全てのサービスを自動的に登録します。このおかげで、開発者はそれぞれのサービスを個別に登録する必要がありません。このクラスは CLI アプリケーションに特に適しています。</target>
        </trans-unit>
        <trans-unit id="98a4d435692b40ac5a405d35ef669e3f6edc73ca" translate="yes" xml:space="preserve">
          <source>This is a very simple tutorial and as you can see, it&amp;rsquo;s easy to start building an application using Phalcon. The fact that Phalcon is an extension on your web server has not interfered with the ease of development or features available. We invite you to continue reading the manual so that you can discover additional features offered by Phalcon!</source>
          <target state="translated">これは非常にシンプルなチュートリアルであり、ご覧のとおり、Phalconを使用してアプリケーションの構築を開始するのは簡単です。PhalconがWebサーバーの拡張機能であるという事実は、開発の容易さや利用可能な機能を妨げるものではありません。Phalconが提供する追加機能を発見できるように、引き続きマニュアルを読んでください。</target>
        </trans-unit>
        <trans-unit id="f890b6649305471bcdb05fac8b384cf7261d4e16" translate="yes" xml:space="preserve">
          <source>This is an class for binding models into params for handler</source>
          <target state="translated">モデルをハンドラのパラメータにバインドするためのクラスです。</target>
        </trans-unit>
        <trans-unit id="b76f8288491593c4919f5a43a017a463d109a1c7" translate="yes" xml:space="preserve">
          <source>This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">これは、MVCフロー自体、特にコントローラー部分に関連する重要なプロセスです。作業はコントローラーディスパッチャー内で行われます。コントローラファイルが読み込まれ、ロードされ、インスタンス化されます。次に、必要なアクションが実行されます。アクションがフローを別のコントローラー/アクションに転送すると、コントローラーディスパッチャーが再び起動します。これをよりよく説明するために、次の例は&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt;内で実行されるプロセスのおおよその例を示しています。</target>
        </trans-unit>
        <trans-unit id="339ff50b6e1d69f191929ec709b7dc8598d57cf4" translate="yes" xml:space="preserve">
          <source>This is an optional base class for ORM behaviors</source>
          <target state="translated">これは ORM ビヘイビアのためのオプションの基底クラスです。</target>
        </trans-unit>
        <trans-unit id="778f1e2e771c01560c51d970903c4f513a79a17f" translate="yes" xml:space="preserve">
          <source>This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.</source>
          <target state="translated">これもまた、ウェブサイトやアプリケーションに対する一般的な攻撃です。ユーザー登録やコメントの追加などのタスクを実行するように設計されたフォームは、この攻撃に対して脆弱です。</target>
        </trans-unit>
        <trans-unit id="6783275361b83c486657bbfd997dce35c6221009" translate="yes" xml:space="preserve">
          <source>This is different to &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; who&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method uses controllers and actions as parameters:</source>
          <target state="translated">これは、 &lt;code&gt;render()&lt;/code&gt; メソッドがコントローラーとアクションをパラメーターとして使用する&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;とは異なります。</target>
        </trans-unit>
        <trans-unit id="1323ae3621b03444ef40592d920a99e3788e04fe" translate="yes" xml:space="preserve">
          <source>This is exactly the same as:</source>
          <target state="translated">と全く同じです。</target>
        </trans-unit>
        <trans-unit id="3c10453a61f4b28f8a2bea093ecead722ddb3422" translate="yes" xml:space="preserve">
          <source>This is main action it will be shown for every controller or action executed within the application.</source>
          <target state="translated">これは、アプリケーション内で実行されるすべてのコントローラやアクションに対して表示されるメインアクションです。</target>
        </trans-unit>
        <trans-unit id="7dd45a8fe13eb1a6696442a16bf78160319ab740" translate="yes" xml:space="preserve">
          <source>This is the base class for Phalcon\Annotations adapters</source>
          <target state="translated">これはPhalconAnnotationsアダプタのベースクラスです。</target>
        </trans-unit>
        <trans-unit id="c6d15058011c3edbf657f7cd3e13f9d5723f3539" translate="yes" xml:space="preserve">
          <source>This is the base class for Phalcon\Mvc\Dispatcher and Phalcon\Cli\Dispatcher. This class can&amp;rsquo;t be instantiated directly, you can use it to create your own dispatchers.</source>
          <target state="translated">これは、Phalcon \ Mvc \ DispatcherおよびPhalcon \ Cli \ Dispatcherの基本クラスです。このクラスは直接インスタンス化できません。独自のディスパッチャーを作成するために使用できます。</target>
        </trans-unit>
        <trans-unit id="8a63a2f46376f02432dd399a3e626280005d62e1" translate="yes" xml:space="preserve">
          <source>This is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax</source>
          <target state="translated">これは各データベース弁証法の基底クラスです。これは、中間コードをRDBMS関連の構文に変換する共通のメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="ae180daab3cf6681e5f67f27da6605b8d4cf9703" translate="yes" xml:space="preserve">
          <source>This is the view related to the action. It only will be shown when the &amp;ldquo;show&amp;rdquo; action was executed.</source>
          <target state="translated">これは、アクションに関連するビューです。「表示」アクションが実行されたときにのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="078602b533c42e9f995174b49ea32f3c744540cc" translate="yes" xml:space="preserve">
          <source>This is the view related to the controller. It only will be shown for every action executed within the controller &amp;ldquo;posts&amp;rdquo;. All the code implemented in the layout will be reused for all the actions in this controller.</source>
          <target state="translated">これは、コントローラーに関連するビューです。コントローラの「投稿」内で実行されるすべてのアクションに対してのみ表示されます。レイアウトに実装されたすべてのコードは、このコントローラーのすべてのアクションで再利用されます。</target>
        </trans-unit>
        <trans-unit id="296f086b11e18e03d147e09abce9bc0fb136f68f" translate="yes" xml:space="preserve">
          <source>This is typically for an Error 404 page.</source>
          <target state="translated">これは通常、エラー404ページの場合です。</target>
        </trans-unit>
        <trans-unit id="edf2e70e936fea7bc0b55ba78b92471bce9274e7" translate="yes" xml:space="preserve">
          <source>This last code will generate the following HTML:</source>
          <target state="translated">この最後のコードは、以下のようなHTMLを生成します。</target>
        </trans-unit>
        <trans-unit id="074754306382420c872d60c3d848ca5b455c9bc9" translate="yes" xml:space="preserve">
          <source>This logger sends messages in HTTP response headers that are displayed by &lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt;, a &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; extension for Firefox.</source>
          <target state="translated">このロガーは、Firefoxの&lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt;拡張機能である&lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt;によって表示されるHTTP応答ヘッダーでメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="ecbb4085e5d93e6aadd8a622ba3e88ee3598d34b" translate="yes" xml:space="preserve">
          <source>This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.</source>
          <target state="translated">このロガーは、システムロガーにメッセージを送信します。syslog の動作は、オペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="07f8c3d8ddadaa85446a6ec3f2d15b889fa9ff4e" translate="yes" xml:space="preserve">
          <source>This logger uses plain files to log any kind of data. By default all logger files are opened using append mode which opens the files for writing only; placing the file pointer at the end of the file. If the file does not exist, an attempt will be made to create it. You can change this mode by passing additional options to the constructor:</source>
          <target state="translated">このロガーは、プレーン ファイルを使用して、あらゆる種類のデータを記録します。デフォルトでは、すべてのロガー ファイルは、ファイル ポインターをファイルの最後に配置し、書き込み専用にファイルを開くアペンド モードを使用して開かれます。ファイルが存在しない場合、ファイルの作成が試みられます。コンストラクタに追加のオプションを渡すことで、このモードを変更することができます。</target>
        </trans-unit>
        <trans-unit id="ece6527fe732dfda662c3c9afc159c4492b9bf96" translate="yes" xml:space="preserve">
          <source>This marks an attribute as a mapped column</source>
          <target state="translated">これは、属性をマップされたカラムとしてマークします。</target>
        </trans-unit>
        <trans-unit id="6b79b358e48cb0e4ca2449465053985869cedd70" translate="yes" xml:space="preserve">
          <source>This means that when you get a related record you could intercept how the data is obtained by implementing the corresponding method:</source>
          <target state="translated">つまり、関連レコードを取得する際に、対応するメソッドを実装することで、データがどのように取得されているかを傍受することができるということです。</target>
        </trans-unit>
        <trans-unit id="52b125ed0f20b235e80dddbe6339f27a2b991a79" translate="yes" xml:space="preserve">
          <source>This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.</source>
          <target state="translated">この方法は、コントローラから、または上位ビュー層から呼び出して、レンダリング処理を妨害することができる。</target>
        </trans-unit>
        <trans-unit id="02f8002624e6995308ae18f1b73f35a074e2091f" translate="yes" xml:space="preserve">
          <source>This method is automatically called in Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.</source>
          <target state="translated">このメソッドは、PhalconDb\Adapter\Pdo コンストラクタで自動的に呼び出されます。データベース接続を復元する必要がある場合に呼び出します。</target>
        </trans-unit>
        <trans-unit id="6931118845ad954b3b234f2d870b572eaab6aa9c" translate="yes" xml:space="preserve">
          <source>This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.</source>
          <target state="translated">このメソッドは、自動的に呼び出されます。データベース接続を復元する必要がある場合に呼び出します。</target>
        </trans-unit>
        <trans-unit id="2947348e2526cd515fa2fc10b6db7ef47e6c560a" translate="yes" xml:space="preserve">
          <source>This method is defined in the model.</source>
          <target state="translated">この方法はモデルで定義されています。</target>
        </trans-unit>
        <trans-unit id="4a05a1e4b20c32aa5dbffc7c19383275d9d6193c" translate="yes" xml:space="preserve">
          <source>This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:</source>
          <target state="translated">この方法では、依存関係を自由に構築することができますが、依存関係の定義を完全に変更することなく、パラメータの一部を外部から変更することは困難です。</target>
        </trans-unit>
        <trans-unit id="dcdc165c04c56a7d62b6ed6091c0c6f8e98065ae" translate="yes" xml:space="preserve">
          <source>This method receives the notifications from the EventsManager</source>
          <target state="translated">このメソッドは、EventsManagerからの通知を受信します。</target>
        </trans-unit>
        <trans-unit id="c9ae1e3659012aa285d2a7017c27198ec13ab5a4" translate="yes" xml:space="preserve">
          <source>This method scales the images using liquid rescaling method. Only support Imagick</source>
          <target state="translated">このメソッドは、リキッドリスケーリング法を用いて画像を拡大縮小します。Imagick のみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="cee14822dc1453334bbb996683bbb2049f35d4d1" translate="yes" xml:space="preserve">
          <source>This method verifies which values are different from &amp;ldquo;&amp;rdquo; (empty string) and null and takes them into account to create the search criteria:</source>
          <target state="translated">このメソッドは、 &quot;&quot;（空の文字列）およびnullと異なる値を確認し、それらを考慮して検索条件を作成します。</target>
        </trans-unit>
        <trans-unit id="75984b880e523cf39008dc85797a72f99c41d7b0" translate="yes" xml:space="preserve">
          <source>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.</source>
          <target state="translated">ディストリビューションを変更するか、安定版から夜間ビルドに変更したい場合を除き、これは一度だけ行う必要があります。</target>
        </trans-unit>
        <trans-unit id="6ae575ddc4f0bfa38ad163525c2b97cfef09164b" translate="yes" xml:space="preserve">
          <source>This part of the application is implemented in the component &amp;ldquo;Elements&amp;rdquo; (app/library/Elements.php).</source>
          <target state="translated">アプリケーションのこの部分は、「要素」コンポーネント（app / library / Elements.php）に実装されています。</target>
        </trans-unit>
        <trans-unit id="b1d291fd2c806a8d9fd93db189578bd0167ef86e" translate="yes" xml:space="preserve">
          <source>This piece of code can be run using:</source>
          <target state="translated">このコードは、以下のようにして実行することができます。</target>
        </trans-unit>
        <trans-unit id="2a2b77307f40f6e987fe950b380d6677090d841d" translate="yes" xml:space="preserve">
          <source>This produces the following HTML:</source>
          <target state="translated">これにより、以下のようなHTMLが生成されます。</target>
        </trans-unit>
        <trans-unit id="b3ab1502b876ba83255b3b2c9b07616d49384d2e" translate="yes" xml:space="preserve">
          <source>This project follows a quite similar structure to INVO. Once you open the application in your browser &lt;a href=&quot;http://localhost/vokuro&quot;&gt;http://localhost/vokuro&lt;/a&gt; you&amp;rsquo;ll see something like this:</source>
          <target state="translated">このプロジェクトは、INVOと非常によく似た構造に従います。ブラウザ&lt;a href=&quot;http://localhost/vokuro&quot;&gt;http：// localhost / vokuroで&lt;/a&gt;アプリケーションを開くと、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="c93c53294bff863df933975dd1ebe66004332145" translate="yes" xml:space="preserve">
          <source>This project uses &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; to load controllers, models, forms, etc. within the project and &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt; to load the project&amp;rsquo;s dependencies. So, the first thing you have to do before execute V&amp;ouml;kur&amp;oacute; is install its dependencies via &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt;. Assuming you have it correctly installed, type the following command in the console:</source>
          <target state="translated">このプロジェクトは&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;を使用して、プロジェクト内のコントローラー、モデル、フォームなどをロードし、&lt;a href=&quot;https://getcomposer.org/&quot;&gt;コンポーザー&lt;/a&gt;を使用してプロジェクトの依存関係をロードします。したがって、V&amp;ouml;kur&amp;oacute;を実行する前に最初に行う必要があるのは、&lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt;を介して依存関係をインストールすることです。正しくインストールされていると仮定して、コンソールで次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="2ae7ca43916d1f0a39c0210ee8dde6d270108192" translate="yes" xml:space="preserve">
          <source>This strategy doesn&amp;rsquo;t require any customization and is implicitly used by all the metadata adapters.</source>
          <target state="translated">この戦略はカスタマイズを必要とせず、すべてのメタデータアダプターによって暗黙的に使用されます。</target>
        </trans-unit>
        <trans-unit id="ddf179c5fca66ac15d0e269e9aebed60899b4dca" translate="yes" xml:space="preserve">
          <source>This strategy makes use of &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; to describe the columns in a model:</source>
          <target state="translated">この戦略では、&lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;アノテーション&lt;/em&gt;&lt;/a&gt;を使用してモデルの列を記述します。</target>
        </trans-unit>
        <trans-unit id="bf4e7cf28dc691044b305d6a74c9ab85db126264" translate="yes" xml:space="preserve">
          <source>This tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.</source>
          <target state="translated">このツールは、HTMLのパース、Javascriptの評価、CSSのスタイリングなど、ページ全体のレンダリングに使用されるリアルタイムの情報を取得するのに役立つので、非常に便利です。</target>
        </trans-unit>
        <trans-unit id="51d91aa8bb94455aa75c06c78ccbbe5e7f0ebf53" translate="yes" xml:space="preserve">
          <source>This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:</source>
          <target state="translated">この型はオブジェクトを想定しています。objectは既にオブジェクトであるため、解決する必要がないという事実のため、これは本当の意味での依存性注入ではないと言えるかもしれませんが、返される依存性が常に同じオブジェクト/値であるように強制したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="08ce1d12f02317c0340961a8e92f785e297101be" translate="yes" xml:space="preserve">
          <source>This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:</source>
          <target state="translated">この型は、有効なクラス名を期待しており、指定されたクラスのオブジェクトを返します。この型の定義では、クラスのコンストラクタの引数やパラメータを指定することはできません。</target>
        </trans-unit>
        <trans-unit id="815e82d39f7d6cfb40291ffc06b6a0f3fe8a2163" translate="yes" xml:space="preserve">
          <source>This validator is only for use with Phalcon\Mvc\Collection. If you are using Phalcon\Mvc\Model, please use the validators provided by Phalcon\Validation.</source>
          <target state="translated">このバリデータは、Phalcon\Mvc\Collectionでのみ使用できます。PhalconMvc\Modelをご利用の方は、Phalcon\Validationで提供されているバリデータをご利用下さい。</target>
        </trans-unit>
        <trans-unit id="acadb8380f8ddb1bcaff63d4c4c224151325499d" translate="yes" xml:space="preserve">
          <source>This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:</source>
          <target state="translated">この操作方法では、イベント、仮想外部キー、バリデーションが更新プロセスの一部を占めることができます。要約すると、以下のようなコードになります。</target>
        </trans-unit>
        <trans-unit id="667044c3f38d6fb8b5c0033c27c1b397807e2452" translate="yes" xml:space="preserve">
          <source>This way of working gives us many advantages:</source>
          <target state="translated">このような働き方をすることで、多くのメリットを得ることができます。</target>
        </trans-unit>
        <trans-unit id="9700195cde7a1ce0a408f387bf9c7e181ebaa429" translate="yes" xml:space="preserve">
          <source>This way, you can use it in controllers or views:</source>
          <target state="translated">このように、コントローラやビューで使用することができます。</target>
        </trans-unit>
        <trans-unit id="9be5aceae203ac8ec7bc64d329ab7c76b584dc37" translate="yes" xml:space="preserve">
          <source>This will generate the following select tag with the value &amp;ldquo;Blue&amp;rdquo; selected:</source>
          <target state="translated">これにより、値「Blue」が選択された次の選択タグが生成されます。</target>
        </trans-unit>
        <trans-unit id="e87a39e80ea5b673fdf20b0ead9826f21f51d475" translate="yes" xml:space="preserve">
          <source>This will ignore globally these fields on each INSERT/UPDATE operation on the whole application. If you want to ignore different attributes on different INSERT/UPDATE operations, you can specify the second parameter (boolean) - true for replacement. Forcing a default value can be done in the following way:</source>
          <target state="translated">これは、アプリケーション全体の各 INSERT/UPDATE 操作でこれらのフィールドをグローバルに無視します。異なるINSERT/UPDATE操作で異なる属性を無視したい場合は、2番目のパラメータ(boolean)-置換のためのtrueを指定することができます。デフォルト値を強制することは、以下の方法で行うことができます。</target>
        </trans-unit>
        <trans-unit id="33afe4cb861f5adc6e23901850b6e0127addcc7e" translate="yes" xml:space="preserve">
          <source>This will run any tests under the tests/ directory.</source>
          <target state="translated">これは、tests/ディレクトリの下にあるすべてのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="38554087b78ad00628f8a20a1d4196f43fc2e046" translate="yes" xml:space="preserve">
          <source>Though Phalcon\Registry exposes methods like __get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-&amp;gt;__get(&amp;ldquo;property&amp;rdquo;) is several times slower than $registry-&amp;gt;property.</source>
          <target state="translated">Phalcon \ Registryは__get（）、offsetGet（）、count（）などのメソッドを公開していますが、これらを手動で呼び出すことはお勧めしません（これらのメソッドは、主にレジストリが実装するインターフェイスと一致させるために存在します）：$ registry-&amp;gt; __ get（&amp;ldquo; property &amp;rdquo;）は$ registry-&amp;gt; propertyより数倍遅いです。</target>
        </trans-unit>
        <trans-unit id="9b933484e92a6c129a7a30257877978f9a07f527" translate="yes" xml:space="preserve">
          <source>Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:</source>
          <target state="translated">Phalcon のドキュメントのチュートリアルや例を通して、例外をキャッチしている共通の要素があります。これはtry/catchブロックです。</target>
        </trans-unit>
        <trans-unit id="d861c62f98b923688b9b92b880ed671374f9cc39" translate="yes" xml:space="preserve">
          <source>Throughout this first tutorial, we&amp;rsquo;ll walk you through the creation of an application with a simple registration form from the ground up. We will also explain the basic aspects of the framework&amp;rsquo;s behavior. If you are interested in automatic code generation tools for Phalcon, you can check our &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;developer tools&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">この最初のチュートリアルでは、最初から簡単な登録フォームを使用してアプリケーションを作成する方法を順を追って説明します。また、フレームワークの動作の基本的な側面についても説明します。Phalconの自動コード生成ツールに興味がある場合は、&lt;a href=&quot;tools&quot;&gt;&lt;em&gt;開発者向けツールを&lt;/em&gt;&lt;/a&gt;確認でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b92f659e297c6345e69b64c0a5a5095ad7190920" translate="yes" xml:space="preserve">
          <source>Throws an exception when a notice or warning is raised</source>
          <target state="translated">通知や警告が発生した場合に例外をスローします。</target>
        </trans-unit>
        <trans-unit id="991e3e0d8e45ec64cbd223820ae67ab323e7e15c" translate="yes" xml:space="preserve">
          <source>Throws an internal exception</source>
          <target state="translated">内部例外をスローします。</target>
        </trans-unit>
        <trans-unit id="bfdba0dc305bd8fbe4070ad66a0462ef37429197" translate="yes" xml:space="preserve">
          <source>Time to run &amp;ndash; is an integer number of seconds to allow a worker to run this job. This time is counted from the moment a worker reserves this job.</source>
          <target state="translated">実行時間&amp;ndash;ワーカーがこのジョブを実行できるようにする秒数の整数です。この時間は、ワーカーがこのジョブを予約した瞬間からカウントされます。</target>
        </trans-unit>
        <trans-unit id="0153174ca6dc4520c8728a194d64aa96dc40ff58" translate="yes" xml:space="preserve">
          <source>Timestamp when the profile ended</source>
          <target state="translated">プロファイル終了時のタイムスタンプ</target>
        </trans-unit>
        <trans-unit id="6d6c67d0e04f994ae9a15b2fbe4df0fd9a9c290f" translate="yes" xml:space="preserve">
          <source>Timestamp when the profile started</source>
          <target state="translated">プロファイルが開始されたタイムスタンプ</target>
        </trans-unit>
        <trans-unit id="c4669833bdb680864e7acb55854a917be661e229" translate="yes" xml:space="preserve">
          <source>Timestampable</source>
          <target state="translated">Timestampable</target>
        </trans-unit>
        <trans-unit id="d0fbecf7432369f3f03b530b6b74f3bf2bdd65df" translate="yes" xml:space="preserve">
          <source>To access the HTTP method data &lt;code&gt;$app&lt;/code&gt; needs to be passed into the closure:</source>
          <target state="translated">HTTPメソッドデータにアクセスするには、 &lt;code&gt;$app&lt;/code&gt; クロージャーに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9e9bfab430386c08104d376189546534e47eb163" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as &lt;a href=&quot;http://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt;. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="translated">可能な限り最高のパフォーマンスを達成するために、Phalconは&lt;a href=&quot;http://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt;と同じテクノロジーを使用するパーサーを提供しています。このテクノロジーは、メモリフットプリントが非常に小さく、スレッドセーフでもある小さなメモリ内パーサーを提供します。</target>
        </trans-unit>
        <trans-unit id="069086dbb55fca04911b0b00d044f3c85dd00855" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="translated">可能な限り最高のパフォーマンスを実現するために、SQLiteと同じ技術を使用したパーサーを書きました。この技術は、スレッドセーフでもある、非常に低いメモリフットプリントを持つ小さなインメモリパーサーを提供します。</target>
        </trans-unit>
        <trans-unit id="3ed61dee08e97fd9d1741370edf92e999a9932db" translate="yes" xml:space="preserve">
          <source>To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:</source>
          <target state="translated">これを実現するためには、各キャッシュをキーで一意に識別する必要があります。まず、ビューにデータを表示するための計算/問い合わせを行うために、キャッシュが存在しないか、期限切れになっているかを確認します。</target>
        </trans-unit>
        <trans-unit id="61f390cd27026bd98be4f873e3ffe482f28f1559" translate="yes" xml:space="preserve">
          <source>To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:</source>
          <target state="translated">これを実現するためには、PHQL パーサによって生成された中間表現 (IR)をインターセプトして、キャッシュをカスタマイズする必要があります。</target>
        </trans-unit>
        <trans-unit id="652e27c6907eaf79df10671621f0e8bd2d4cdbeb" translate="yes" xml:space="preserve">
          <source>To add the repository to our distribution:</source>
          <target state="translated">ディストリビューションにリポジトリを追加するには</target>
        </trans-unit>
        <trans-unit id="c1e15a0b91e12bbff2dc2ba730b25e90ba6fb4bd" translate="yes" xml:space="preserve">
          <source>To add the repository to your distribution:</source>
          <target state="translated">ディストリビューションにリポジトリを追加するには</target>
        </trans-unit>
        <trans-unit id="3ca468880d9950f2aa78f05dc9e22b0ce9a5aa49" translate="yes" xml:space="preserve">
          <source>To avoid these or most sophisticated attacks, &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; removes invalid characters from the class name, reducing the possibility of being attacked.</source>
          <target state="translated">これらまたは最も高度な攻撃を回避するために、&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;はクラス名から無効な文字を削除し、攻撃される可能性を減らします。</target>
        </trans-unit>
        <trans-unit id="dd1b0bc6ff61abfee71c3315a15ff80e063f7232" translate="yes" xml:space="preserve">
          <source>To better explain how PHQL works consider the following example. We have two models &amp;ldquo;Cars&amp;rdquo; and &amp;ldquo;Brands&amp;rdquo;:</source>
          <target state="translated">PHQLの仕組みをよりよく説明するために、次の例を検討してください。「Cars」と「Brands」の2つのモデルがあります。</target>
        </trans-unit>
        <trans-unit id="5f0715ec3acdb5a6d1e2b8e7f86f09e7521e364c" translate="yes" xml:space="preserve">
          <source>To call a &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt; helper, you only need to call an uncamelized version of the method:</source>
          <target state="translated">呼び出すには&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \タグ&lt;/em&gt;&lt;/a&gt;ヘルパーを、あなただけの方法のuncamelizedバージョンを呼び出す必要があります：</target>
        </trans-unit>
        <trans-unit id="25ed8e96931eea81d59de969d56332ea08cf02c5" translate="yes" xml:space="preserve">
          <source>To check if an expression is contained into other expressions &lt;code&gt;if &quot;a&quot; in &quot;abc&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;if &quot;a&quot; in &quot;abc&quot;&lt;/code&gt; がある場合、式が他の式に含まれているかどうかを確認するには</target>
        </trans-unit>
        <trans-unit id="bdfb9be0c6a2e6b9a99c146e3abe0618cb59f95e" translate="yes" xml:space="preserve">
          <source>To create a connection it&amp;rsquo;s necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:</source>
          <target state="translated">接続を作成するには、アダプタクラスをインスタンス化する必要があります。接続パラメータを持つ配列のみが必要です。以下の例は、必須パラメーターとオプションパラメーターの両方を渡す接続を作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e4ed4f5ba84743da9ac7abae431a014f1ad76e8a" translate="yes" xml:space="preserve">
          <source>To enable it, add the following to your bootstrap:</source>
          <target state="translated">有効にするには、以下をブートストラップに追加します。</target>
        </trans-unit>
        <trans-unit id="cea533b0a305a7d4f6e4c0395758b6368d6cc799" translate="yes" xml:space="preserve">
          <source>To enter the system, users must have a valid username and password. Users are stored in the table &amp;ldquo;users&amp;rdquo; in the database &amp;ldquo;invo&amp;rdquo;.</source>
          <target state="translated">システムに入るには、ユーザーは有効なユーザー名とパスワードを持っている必要があります。ユーザーは、データベース「invo」のテーブル「users」に格納されます。</target>
        </trans-unit>
        <trans-unit id="ec772510098b0aa9f1025e9dc4191dc11ed08d97" translate="yes" xml:space="preserve">
          <source>To explain better how aliases work, let&amp;rsquo;s check the following example:</source>
          <target state="translated">エイリアスの機能をよりよく説明するために、次の例を確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="44fd6ca866d0fbe1d929e905d0150fff173013d6" translate="yes" xml:space="preserve">
          <source>To finish the detailed explanation of INVO we are going to explain how to customize INVO adding UI elements and changing the title according to the controller executed.</source>
          <target state="translated">INVOの詳しい説明を終えるにあたり、実行されたコントローラーに合わせてUI要素を追加したり、タイトルを変更したりと、INVOをカスタマイズする方法を説明していきます。</target>
        </trans-unit>
        <trans-unit id="37600b957d7219dde1b26a326d28f6079f329b7e" translate="yes" xml:space="preserve">
          <source>To generate the tag we use the class &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;. This is a utility class that allows us to build HTML tags with framework conventions in mind. As this class is a also a service registered in the DI we use &lt;code&gt;$this-&amp;gt;tag&lt;/code&gt; to access it.</source>
          <target state="translated">タグを生成するには、クラス&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;を使用します。これは、フレームワークの規則を考慮してHTMLタグを作成できるユーティリティクラスです。このクラスもDIに登録されたサービスなので、 &lt;code&gt;$this-&amp;gt;tag&lt;/code&gt; を使用してアクセスします。</target>
        </trans-unit>
        <trans-unit id="26182241982e97dc8a2e1d412852ce1179b93a93" translate="yes" xml:space="preserve">
          <source>To help you build the unit tests, we made a few abstract classes you can use to bootstrap the unit tests themselves. These files exist in the Phalcon incubator @ &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;https://github.com/phalcon/incubator&lt;/a&gt;.</source>
          <target state="translated">単体テストの作成を支援するために、単体テスト自体をブートストラップするために使用できるいくつかの抽象クラスを作成しました。これらのファイルは、Phalconインキュベーター@ &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;https://github.com/phalcon/incubatorにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dab8089343f48252917bb494c56a038c1827e91a" translate="yes" xml:space="preserve">
          <source>To illustrate how this component works and why it is important, consider the following example:</source>
          <target state="translated">このコンポーネントがどのように動作し、なぜ重要なのかを説明するために、次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="0af1c8a3a4a64f306d82abb89897a4be3109465f" translate="yes" xml:space="preserve">
          <source>To improve performance &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon\Acl&lt;/em&gt;&lt;/a&gt; instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:</source>
          <target state="translated">パフォーマンスを向上させるために、&lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon \ Acl&lt;/em&gt;&lt;/a&gt;インスタンスをシリアル化してAPC、セッション、テキストファイル、またはデータベーステーブルに保存できるため、リスト全体を再定義する必要なく、自由にロードできます。これは次のように行うことができます。</target>
        </trans-unit>
        <trans-unit id="ac03ae219ca9a5cf8bf8aa2ae18c9dbf846fa529" translate="yes" xml:space="preserve">
          <source>To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:</source>
          <target state="translated">行の挿入、更新、削除を行うには、生のSQLを使用するか、クラスが提供するプリセット関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="d074982dd1c4e6eff4099cb5a1f534c92acb86f5" translate="yes" xml:space="preserve">
          <source>To install Phalcon:</source>
          <target state="translated">ファルコンをインストールするには</target>
        </trans-unit>
        <trans-unit id="20d0e2d61b095d45c795e18704dbc2d1ad796495" translate="yes" xml:space="preserve">
          <source>To make a model to react to an event, we must to implement a method with the same name of the event:</source>
          <target state="translated">イベントに反応するモデルを作るためには、イベントと同じ名前のメソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="e66563d54c2e30d266f168e610fd11be9a14db63" translate="yes" xml:space="preserve">
          <source>To render a view it&amp;rsquo;s necessary to call the render method explicitly indicating the relative path to the view you want to display:</source>
          <target state="translated">ビューをレンダリングするには、表示するビューへの相対パスを明示的に示すrenderメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="3759350713699f06bd6061541884a99f500d7252" translate="yes" xml:space="preserve">
          <source>To run any unit tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.</source>
          <target state="translated">ユニットテストを実行するには、ユニットテストを定義する必要があります。オートローダーは適切なファイルが読み込まれるようにしてくれるので、必要なのはファイルを作成するだけで、phpunitがテストを実行してくれます。</target>
        </trans-unit>
        <trans-unit id="c3a808c1883119f9963bc0c3a60407ef0b07581f" translate="yes" xml:space="preserve">
          <source>To solve this problem we can use hash algorithms as &lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;. Why bcrypt? Thanks to its &amp;ldquo;&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;Eksblowfish&lt;/a&gt;&amp;rdquo; key setup algorithm we can make the password encryption as &amp;ldquo;slow&amp;rdquo; as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.</source>
          <target state="translated">この問題を解決するには、ハッシュアルゴリズムを&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;として使用できます。なぜbcryptなのか？ 「&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;Eksblowfish&lt;/a&gt;」キーセットアップアルゴリズムのおかげで、パスワードの暗号化を必要なだけ「低速」にすることができます。アルゴリズムが遅いと、ハッシュの背後にある実際のパスワードを計算するプロセスが不可能ではないにしても非常に困難になります。これにより、レインボーテーブルを使用した攻撃から長期間保護されます。</target>
        </trans-unit>
        <trans-unit id="d4de767dac285a80a7f9c1a40d22809f9260736a" translate="yes" xml:space="preserve">
          <source>To solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:</source>
          <target state="translated">これを解決するために、依存関係を使用する前に外部から注入するセッターを作成しました。今のところ、これで解決できそうです。</target>
        </trans-unit>
        <trans-unit id="f87bd9bada571af7b99001f7df34d00cd912435c" translate="yes" xml:space="preserve">
          <source>To speed up development &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; helps you to query fields and constraints from tables related to models. To achieve this, &lt;a href=&quot;../api/phalcon_mvc_model_metadata&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\MetaData&lt;/em&gt;&lt;/a&gt; is available to manage and cache table metadata.</source>
          <target state="translated">開発をスピードアップするには、&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;を使用すると、モデルに関連するテーブルからフィールドと制約をクエリできます。これを実現するために、&lt;a href=&quot;../api/phalcon_mvc_model_metadata&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ MetaData&lt;/em&gt;&lt;/a&gt;を使用して、テーブルのメタデータを管理およびキャッシュできます。</target>
        </trans-unit>
        <trans-unit id="e8f1f0940482506aaea0b6bf788a727888ef5681" translate="yes" xml:space="preserve">
          <source>To start the server type:</source>
          <target state="translated">サーバータイプを起動するには</target>
        </trans-unit>
        <trans-unit id="3837251fa7d6aba69ab40fa0c93d4708f77f0e23" translate="yes" xml:space="preserve">
          <source>To tell &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:</source>
          <target state="translated">トリガーまたはデフォルトによる値の割り当てをデータベースシステムに委任するために、レコードの作成または更新、あるいはその&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;両方&lt;/em&gt;&lt;/a&gt;で常に一部のフィールドを省略している&lt;em&gt;Phalcon \ Mvc \ Modelに&lt;/em&gt;指示するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="780c36acfac49dfb61b51f062fc2264e4540f8c9" translate="yes" xml:space="preserve">
          <source>To use phalcon on Windows you can &lt;a href=&quot;http://phalconphp.com/en/download&quot;&gt;download&lt;/a&gt; a DLL library. Edit your php.ini file and then append at the end:</source>
          <target state="translated">Windowsでphalconを使用するには、DLLライブラリを&lt;a href=&quot;http://phalconphp.com/en/download&quot;&gt;ダウンロード&lt;/a&gt;できます。php.iniファイルを編集して、最後に追加します。</target>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="11382adf7f930e1cf6c7df6759438407fceeedaa" translate="yes" xml:space="preserve">
          <source>Transactions and Nested Transactions</source>
          <target state="translated">トランザクションと入れ子になったトランザクション</target>
        </trans-unit>
        <trans-unit id="eefb3f32b18a981f2ae957a4043235e6142bfadf" translate="yes" xml:space="preserve">
          <source>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\Transaction\Manager.</source>
          <target state="translated">トランザクションは、SQL 文が 1 つのアトミックアクションとして成功した場合にのみ永続的なものとなる保護ブロックです。Phalcon\Transaction は Phalcon_Model_Base と一緒に使用することを意図しています。Phalcon Transactions は Phalcon\TransactionManager を使用して作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="32fe84f033c5e32cdf533a9e92bdf935b55b1b54" translate="yes" xml:space="preserve">
          <source>Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a &lt;code&gt;commit()&lt;/code&gt; or &lt;code&gt;rollback()&lt;/code&gt; is performed. You can use the service container to create the global transaction manager for the entire application:</source>
          <target state="translated">トランザクションは、トランザクションオブジェクトがどこで取得されても再利用されます。新しいトランザクションは、 &lt;code&gt;commit()&lt;/code&gt; または &lt;code&gt;rollback()&lt;/code&gt; が実行されたときにのみ生成されます。サービスコンテナーを使用して、アプリケーション全体のグローバルトランザクションマネージャーを作成できます。</target>
        </trans-unit>
        <trans-unit id="c654ef6c72dbf4416e10195dc7cdaae5b75be077" translate="yes" xml:space="preserve">
          <source>Transactions can be used to delete many records in a consistent way:</source>
          <target state="translated">トランザクションを使用することで、多くのレコードを一貫して削除することができます。</target>
        </trans-unit>
        <trans-unit id="8d472fa3c1df986be8ef5ba049cfc4415ffad880" translate="yes" xml:space="preserve">
          <source>Transactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.</source>
          <target state="translated">Phalcon のトランザクションでは、正常に実行された場合にはすべての操作をコミットしたり、何か問題が発生した場合にはすべての操作をロールバックしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="b90f50d9020aeb9c40c81caeea9b6a601a228d86" translate="yes" xml:space="preserve">
          <source>Transfer values from the controller to views</source>
          <target state="translated">コントローラからビューへの値の転送</target>
        </trans-unit>
        <trans-unit id="64e165805cfe4500c1caa1fc8d4ee87bde4c2e4a" translate="yes" xml:space="preserve">
          <source>Transform an intermediate representation of a schema/table into a database system valid expression</source>
          <target state="translated">スキーマ/テーブルの中間表現をデータベースシステムの有効な表現に変換する</target>
        </trans-unit>
        <trans-unit id="d823923fdb814280eb08288d0aa9d27921cf2539" translate="yes" xml:space="preserve">
          <source>Transforms an intermediate representation for an expression into a database system valid expression</source>
          <target state="translated">式の中間表現をデータベースシステムで有効な式に変換します。</target>
        </trans-unit>
        <trans-unit id="2be17aa181d8226bfad83ce993e838fa79dcce4d" translate="yes" xml:space="preserve">
          <source>Translate</source>
          <target state="translated">Translate</target>
        </trans-unit>
        <trans-unit id="906c7e761305e15578a705d785d9ff1566f2d194" translate="yes" xml:space="preserve">
          <source>Translates a number to a special release If Special release = 1 this function will return ALPHA</source>
          <target state="translated">数値を特殊リリースに変換する 特殊リリース=1 の場合、この関数は ALPHA を返します。</target>
        </trans-unit>
        <trans-unit id="450f4444d95c81537e0426d2f725e75300dd547d" translate="yes" xml:space="preserve">
          <source>Translation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:</source>
          <target state="translated">翻訳文字列はファイルに格納されます。これらのファイルの構造は、使用するアダプタによって異なります。Phalcon では、翻訳文字列を自由に整理することができます。簡単な構造は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8c7c31764c79068f7f5e6babe81f624dce0688f8" translate="yes" xml:space="preserve">
          <source>Transliteration</source>
          <target state="translated">Transliteration</target>
        </trans-unit>
        <trans-unit id="d918d2176a004c85265664657907beec1ca4a4f6" translate="yes" xml:space="preserve">
          <source>Traverses a collection and generate its HTML</source>
          <target state="translated">コレクションを通過し、そのHTMLを生成します。</target>
        </trans-unit>
        <trans-unit id="ab0d264989633be7d8ffc51a35e0abfdbaef9b76" translate="yes" xml:space="preserve">
          <source>Traverses a collection calling the callback to generate its HTML</source>
          <target state="translated">コールバックを呼び出して HTML を生成するコレクションをトラバースします。</target>
        </trans-unit>
        <trans-unit id="7e63a2afc929c94b6241ae1575a1bc1d9a6ca4ee" translate="yes" xml:space="preserve">
          <source>Traverses a statement list compiling each of its nodes</source>
          <target state="translated">各ノードをコンパイルしたステートメントリストをトラバースします.</target>
        </trans-unit>
        <trans-unit id="63b038591b30891f280d2f38cf327459577ec09f" translate="yes" xml:space="preserve">
          <source>Treat the arguments independently and unresolved:</source>
          <target state="translated">論点を独立して未解決のものとして扱う。</target>
        </trans-unit>
        <trans-unit id="5885444e4c987798290ed05fb3fbda2b638caedc" translate="yes" xml:space="preserve">
          <source>Tries to render the view with every engine registered in the component</source>
          <target state="translated">コンポーネントに登録されているすべてのエンジンでビューのレンダリングを試みます。</target>
        </trans-unit>
        <trans-unit id="933f5e3506fb96ccd72bc34a478e861ce00143b4" translate="yes" xml:space="preserve">
          <source>Triggered</source>
          <target state="translated">Triggered</target>
        </trans-unit>
        <trans-unit id="cb532357ecb4f237ed7ad5704db288fb36739070" translate="yes" xml:space="preserve">
          <source>Triggered after checking if a role/resource has access</source>
          <target state="translated">ロール/リソースがアクセス権を持っているかどうかを確認した後にトリガされます。</target>
        </trans-unit>
        <trans-unit id="ddc074a6066aa034e429f20d6684b6907ebedf21" translate="yes" xml:space="preserve">
          <source>Triggered after completing the render process</source>
          <target state="translated">レンダリング処理が完了した後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="ef7191df075dca57e229be26493b539be0c59836" translate="yes" xml:space="preserve">
          <source>Triggered after completing the whole process in a successful way</source>
          <target state="translated">成功した方法で全体のプロセスを完了した後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="da0c02b71dd7addf6c8125c706da276c9a14806c" translate="yes" xml:space="preserve">
          <source>Triggered after finish the autoloading process. If this event is launched the autoloader didn&amp;rsquo;t find the class file</source>
          <target state="translated">自動読み込みプロセスの終了後にトリガーされます。このイベントが起動された場合、オートローダーはクラスファイルを見つけられませんでした</target>
        </trans-unit>
        <trans-unit id="5b8bcbcfd6928a897747cd31eafb5720e109411e" translate="yes" xml:space="preserve">
          <source>Triggered after models are bound but before executing the handler</source>
          <target state="translated">モデルがバインドされた後、ハンドラを実行する前にトリガーされる</target>
        </trans-unit>
        <trans-unit id="2f588bd3f7eb4dc44168006f616e08ccef7f0567" translate="yes" xml:space="preserve">
          <source>Triggered after rendering an existing view</source>
          <target state="translated">既存のビューをレンダリングした後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="c125835be686d247c0e309735c44fb50c3932e7a" translate="yes" xml:space="preserve">
          <source>Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it.</source>
          <target state="translated">サービスを解決した後にトリガーされます。リスナーは、サービス名、インスタンス、それに渡されたパラメータを受け取ります。</target>
        </trans-unit>
        <trans-unit id="68d6b219812dfe17b7402de245c6cd0115be9a15" translate="yes" xml:space="preserve">
          <source>Triggered after running the handler</source>
          <target state="translated">ハンドラを実行した後にトリガーされる</target>
        </trans-unit>
        <trans-unit id="6eea1c309b23bf41243acf5d09ba88a0e3721697" translate="yes" xml:space="preserve">
          <source>Triggered before checking if a role/resource has access</source>
          <target state="translated">ロール/リソースがアクセスできるかどうかをチェックする前にトリガされます。</target>
        </trans-unit>
        <trans-unit id="463819417be76d27e79733f311be07b509c55c58" translate="yes" xml:space="preserve">
          <source>Triggered before rendering an existing view</source>
          <target state="translated">既存のビューをレンダリングする前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="03dd7642b124e313e097b36cd1231a0927d88664" translate="yes" xml:space="preserve">
          <source>Triggered before resolve service. Listeners receive the service name and the parameters passed to it.</source>
          <target state="translated">サービスを解決する前にトリガーされます。リスナーは、サービス名とそれに渡されたパラメータを受け取ります。</target>
        </trans-unit>
        <trans-unit id="316a6e8892c4e8a052ef398b52bf1476ba61a16d" translate="yes" xml:space="preserve">
          <source>Triggered before starting the autoloading process</source>
          <target state="translated">オートロードプロセスを開始する前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="eb4930b4d128cd593fd565aba31010c65561a28b" translate="yes" xml:space="preserve">
          <source>Triggered before starting the render process</source>
          <target state="translated">レンダリング処理を開始する前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="abda0d70fa203e32d24672c60e2db3d7c68ee25e" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any expression. This allows the developer to override any statement</source>
          <target state="translated">任意の式をコンパイルしようとする前にトリガーされます。これにより、開発者は</target>
        </trans-unit>
        <trans-unit id="b551575f8bb798bc59fd5bda1189480cc37c9834" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any expression. This allows the developer to override operators</source>
          <target state="translated">任意の式をコンパイルしようとする前にトリガーされます。これにより、開発者は演算子</target>
        </trans-unit>
        <trans-unit id="5b7b52275cabcbbeef1d32e08691463283bd3515" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any filter call in a template</source>
          <target state="translated">テンプレート内のフィルタ呼び出しをコンパイルしようとする前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="7120c27cd819fac6d9729f0766a0d805cba9b000" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any function call in a template</source>
          <target state="translated">テンプレート内の関数呼び出しをコンパイルしようとする前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="15821d6dbce6d0d3dce5bdfc1d582ecc5c72a79d" translate="yes" xml:space="preserve">
          <source>Triggered on</source>
          <target state="translated">でトリガーされています。</target>
        </trans-unit>
        <trans-unit id="86158daf77d46f3064a253b5096894a5da9e9ad9" translate="yes" xml:space="preserve">
          <source>Triggered when a view was not found</source>
          <target state="translated">ビューが見つからなかった場合にトリガーされる</target>
        </trans-unit>
        <trans-unit id="a17f09938b6a70e08ba804e25b680f46936a9e44" translate="yes" xml:space="preserve">
          <source>Triggered when any data manipulation operation fails</source>
          <target state="translated">データ操作に失敗した場合にトリガされます。</target>
        </trans-unit>
        <trans-unit id="ebac15dcf9d12aeaad72ea91260a4b8b387dc5f8" translate="yes" xml:space="preserve">
          <source>Triggered when any of the defined routes match the requested URI</source>
          <target state="translated">定義されたルートのいずれかがリクエストされたURIにマッチしたときにトリガーされる</target>
        </trans-unit>
        <trans-unit id="14f53ce50fecd9b8172350af491801536ba2f381" translate="yes" xml:space="preserve">
          <source>Triggered when the INSERT or UPDATE operation fails for any reason</source>
          <target state="translated">何らかの理由で INSERT または UPDATE 操作に失敗した場合にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="9b310f8f6f3620d1b0599a693bf6b084fd2f6f4f" translate="yes" xml:space="preserve">
          <source>Triggered when the insert/update operation fails for any reason</source>
          <target state="translated">何らかの理由で挿入/更新操作に失敗した場合にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="6978a39c72ef60d66c8de3a0885b4f00340f4175" translate="yes" xml:space="preserve">
          <source>Triggered when the loader locate a class</source>
          <target state="translated">ローダがクラスを見つけたときにトリガーされます。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="7299bc9384c3f4b3f3652390b548749c6885c25c" translate="yes" xml:space="preserve">
          <source>True if in the first iteration.</source>
          <target state="translated">最初の繰り返しであれば真。</target>
        </trans-unit>
        <trans-unit id="f1fe047289f785e6662e651c035e055c87b5ca6a" translate="yes" xml:space="preserve">
          <source>True if in the last iteration.</source>
          <target state="translated">最後の繰り返しであれば真。</target>
        </trans-unit>
        <trans-unit id="3dc59609dd3b6d112601a11d076b32f731529ba7" translate="yes" xml:space="preserve">
          <source>True if the column is part of the table&amp;rsquo;s primary key</source>
          <target state="translated">列がテーブルの主キーの一部である場合はtrue</target>
        </trans-unit>
        <trans-unit id="6fb354bb8e96930923aff8e141cd43ee49d9c6a2" translate="yes" xml:space="preserve">
          <source>Try to check if the query must invoke a finder</source>
          <target state="translated">クエリがファインダーを呼び出さなければならないかどうかを確認してみます。</target>
        </trans-unit>
        <trans-unit id="eea5e79911964297e4d474c87aa35daa44e85929" translate="yes" xml:space="preserve">
          <source>Try to insert a new robot with the name of an existing robot:</source>
          <target state="translated">既存のロボットの名前で新しいロボットを挿入してみてください。</target>
        </trans-unit>
        <trans-unit id="0bcfcbd28dd4d293b288a30b5f9bf248ab9e7e76" translate="yes" xml:space="preserve">
          <source>Tutorial 1: Let&amp;rsquo;s learn by example</source>
          <target state="translated">チュートリアル1：例で学ぼう</target>
        </trans-unit>
        <trans-unit id="bc30ce024db531465a1b512702d1c7b0e9dd6015" translate="yes" xml:space="preserve">
          <source>Tutorial 1: Let’s learn by example</source>
          <target state="translated">チュートリアル1:例題で学ぼう</target>
        </trans-unit>
        <trans-unit id="41d7d729359e8d2124aecc3beee907c89fbde35c" translate="yes" xml:space="preserve">
          <source>Tutorial 2: Introducing INVO</source>
          <target state="translated">チュートリアル2:INVOの紹介</target>
        </trans-unit>
        <trans-unit id="0d58a4c1b9fa5fc405f671db9d666c62ff6006bd" translate="yes" xml:space="preserve">
          <source>Tutorial 3: Securing INVO</source>
          <target state="translated">チュートリアル3:INVOの確保</target>
        </trans-unit>
        <trans-unit id="7b34231465746b24f0905ad161aa97dbae4cad3c" translate="yes" xml:space="preserve">
          <source>Tutorial 4: Working with the CRUD</source>
          <target state="translated">チュートリアル4:CRUDでの作業</target>
        </trans-unit>
        <trans-unit id="565b204cc47bf9fec203e9f8af249ce01c3ba71a" translate="yes" xml:space="preserve">
          <source>Tutorial 5: Customizing INVO</source>
          <target state="translated">チュートリアル5:INVOのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="80e3f9aa01ad61cc355e997b00dba9b949d74204" translate="yes" xml:space="preserve">
          <source>Tutorial 6: V&amp;ouml;kur&amp;oacute;</source>
          <target state="translated">チュートリアル6：V&amp;ouml;kur&amp;oacute;</target>
        </trans-unit>
        <trans-unit id="db5f91c5a1448ec10b2b240cadee156ec8f9f590" translate="yes" xml:space="preserve">
          <source>Tutorial 6: Vökuró</source>
          <target state="translated">チュートリアル6:Vökuró</target>
        </trans-unit>
        <trans-unit id="ee559adbaa46bb061d9d4857d2c19a1b792786a7" translate="yes" xml:space="preserve">
          <source>Tutorial 7: Creating a Simple REST API</source>
          <target state="translated">チュートリアル 7:シンプルなREST APIの作成</target>
        </trans-unit>
        <trans-unit id="92e88e7ca29accd87dcda0f6b5cf5bc3a5c00fc1" translate="yes" xml:space="preserve">
          <source>Tutorial: Creating a custom model&amp;rsquo;s initializer with Annotations</source>
          <target state="translated">チュートリアル：アノテーションを使用したカスタムモデルの初期化子の作成</target>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="c2a42d00a3f5c47212f19ff3175d697f781dd834" translate="yes" xml:space="preserve">
          <source>Type &amp;ldquo;cmd&amp;rdquo; and press enter to open the windows command line utility:</source>
          <target state="translated">「cmd」と入力してEnterキーを押し、Windowsコマンドラインユーティリティを開きます。</target>
        </trans-unit>
        <trans-unit id="aa5e0677877c45f227bd2eedf1da83f98bb56e28" translate="yes" xml:space="preserve">
          <source>Type of database system the adapter is used for</source>
          <target state="translated">アダプタが使用するデータベース・システムの種類</target>
        </trans-unit>
        <trans-unit id="a32cb32d39ea4758b2c6279930b4310caaa1cbc1" translate="yes" xml:space="preserve">
          <source>Type the command &amp;ldquo;phalcon&amp;rdquo; and you will see something like this:</source>
          <target state="translated">コマンド「phalcon」を入力すると、次のようなものが表示されます。</target>
        </trans-unit>
        <trans-unit id="b600f85412140a288e08bc6707a8b41cef4cd646" translate="yes" xml:space="preserve">
          <source>Type the commands &amp;ldquo;php -v&amp;rdquo; and &amp;ldquo;phalcon&amp;rdquo; and you will see something like this:</source>
          <target state="translated">コマンド「php -v」と「phalcon」を入力すると、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="4c1566366121eae749da1b5a1f9ef2fadf786bee" translate="yes" xml:space="preserve">
          <source>Types of Annotations</source>
          <target state="translated">アノテーションの種類</target>
        </trans-unit>
        <trans-unit id="7716c3cb2d711937c0af826c81ad7af1398f4fa5" translate="yes" xml:space="preserve">
          <source>Types of Built-in Filters</source>
          <target state="translated">内蔵フィルタの種類</target>
        </trans-unit>
        <trans-unit id="425948cb3f22f2449521275f5180922bb3aa4d60" translate="yes" xml:space="preserve">
          <source>URI Sources</source>
          <target state="translated">URIソース</target>
        </trans-unit>
        <trans-unit id="dff72e92309dedc2a99a90045b42933818b2cc70" translate="yes" xml:space="preserve">
          <source>URI_SOURCE_GET_URL</source>
          <target state="translated">URI_SOURCE_GET_URL</target>
        </trans-unit>
        <trans-unit id="396ef204b69c681c236a224dddf27607ce4a2958" translate="yes" xml:space="preserve">
          <source>URI_SOURCE_SERVER_REQUEST_URI</source>
          <target state="translated">URI_SOURCE_SERVER_REQUEST_URI</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="377515a0f4469bcb66cd5573148e14b0426064fd" translate="yes" xml:space="preserve">
          <source>URL Generator Service</source>
          <target state="translated">URL作成サービス</target>
        </trans-unit>
        <trans-unit id="3b601fefed4b7cf12498641f8b3d5ce9a4864fcc" translate="yes" xml:space="preserve">
          <source>URL Prefixes</source>
          <target state="translated">URLの接頭辞</target>
        </trans-unit>
        <trans-unit id="f91fe8205b19d940a2c9481737ee7712afbd9375" translate="yes" xml:space="preserve">
          <source>Ultimately, it is responsible for doing 3 things:</source>
          <target state="translated">最終的には、3つのことをする責任があります。</target>
        </trans-unit>
        <trans-unit id="f1e86724baf521ff59137620d71a2956ed26fae2" translate="yes" xml:space="preserve">
          <source>Uncamelize strings which are camelized</source>
          <target state="translated">カメル化された文字列をアンメル化する</target>
        </trans-unit>
        <trans-unit id="5781388802e2bc107ab685cd34e1d2c1c7561bb3" translate="yes" xml:space="preserve">
          <source>Underscores in property names can be problematic when using getters and setters.</source>
          <target state="translated">プロパティ名のアンダースコアは、ゲッターやセッターを使用する際に問題になることがあります。</target>
        </trans-unit>
        <trans-unit id="4a67c5244cefc33e87dea708e27782496a777bb4" translate="yes" xml:space="preserve">
          <source>Understanding Documents To Objects</source>
          <target state="translated">ドキュメントからオブジェクトへの理解</target>
        </trans-unit>
        <trans-unit id="3aa537405b51e95e49cb04ce1fadbb6c73e49a40" translate="yes" xml:space="preserve">
          <source>Understanding How Phalcon Applications Work</source>
          <target state="translated">ファルコンアプリケーションの仕組みを理解する</target>
        </trans-unit>
        <trans-unit id="96a75e6d29f841d597f8c948a2332be0c5fb0305" translate="yes" xml:space="preserve">
          <source>Understanding Records To Objects</source>
          <target state="translated">レコードからオブジェクトへの理解</target>
        </trans-unit>
        <trans-unit id="68022da377986d04179b6302a6ce30be10770d8a" translate="yes" xml:space="preserve">
          <source>Unidirectional relations are those that are generated in relation to one another but not vice versa.</source>
          <target state="translated">一方向関係とは、互いに関連して発生するものであって、その逆ではない。</target>
        </trans-unit>
        <trans-unit id="5ea25cce3dd2352dc10b35e014056ebf6560c42b" translate="yes" xml:space="preserve">
          <source>Unidirectional relationships</source>
          <target state="translated">一方向性の関係</target>
        </trans-unit>
        <trans-unit id="e6bb9b2dc1ab73cf360b066ecb8c25cc770b4619" translate="yes" xml:space="preserve">
          <source>Uniqueness method used for collection</source>
          <target state="translated">コレクションに使用されている一意性の方法</target>
        </trans-unit>
        <trans-unit id="60067126f8023f4d7d68d87f2b2dd9438eaaf8cf" translate="yes" xml:space="preserve">
          <source>Uniqueness method used for model</source>
          <target state="translated">モデルに使用されている一意性の方法</target>
        </trans-unit>
        <trans-unit id="81a4be7e010cb6daabd6b2dab1722b9ed0372269" translate="yes" xml:space="preserve">
          <source>Unit testing</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="b13d52a947b3f3a8aea0d0276de9a6481f708103" translate="yes" xml:space="preserve">
          <source>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</source>
          <target state="translated">他のテンプレートエンジンとは異なり、コンパイルされたテンプレートを実行するためにVolt自体を必要としません。テンプレートがコンパイルされれば、Voltに依存することはありません。パフォーマンスの独立性を考慮して、VoltはPHPテンプレートのコンパイラとしてのみ機能します。</target>
        </trans-unit>
        <trans-unit id="74ac9561943638bab40b0aa8bdfbd2a88c47148b" translate="yes" xml:space="preserve">
          <source>Unregister the autoload method</source>
          <target state="translated">オートロードメソッドの登録を解除する</target>
        </trans-unit>
        <trans-unit id="ea95c362ff67ab8c924f97cd7ecb71f06f5fe592" translate="yes" xml:space="preserve">
          <source>Unserializes data after retrieval</source>
          <target state="translated">検索後のデータをアンシリアライズ</target>
        </trans-unit>
        <trans-unit id="857792f695e7bde398ffc51e5e12af3943ac4b5c" translate="yes" xml:space="preserve">
          <source>Unserializes the object from a serialized string</source>
          <target state="translated">シリアライズされた文字列からオブジェクトをアンシリアライズします。</target>
        </trans-unit>
        <trans-unit id="95925d3396a398448a83c913598afdfedbb94de6" translate="yes" xml:space="preserve">
          <source>Unserializing a resultset will allow to only works on the rows present in the saved state</source>
          <target state="translated">結果セットをアンシリアライズすることで、保存された状態の行のみを対象とすることができます。</target>
        </trans-unit>
        <trans-unit id="47875f85fa1e698444f636e3f262c3907e6c06d2" translate="yes" xml:space="preserve">
          <source>Unsets a translation from the dictionary</source>
          <target state="translated">辞書の翻訳を解除します。</target>
        </trans-unit>
        <trans-unit id="36f19a6803d9477e4829957222ba60ff2a20f9f6" translate="yes" xml:space="preserve">
          <source>Unsets an attribute using the array-syntax</source>
          <target state="translated">配列構文を使って属性を設定解除する</target>
        </trans-unit>
        <trans-unit id="b4dce3f7a140aaa9e38c3e7e125655d63445b450" translate="yes" xml:space="preserve">
          <source>Unsets an element in the registry</source>
          <target state="translated">レジストリの要素の設定を解除します。</target>
        </trans-unit>
        <trans-unit id="440359ee6a87bfb84c2e8fee1dd0114cb9f51428" translate="yes" xml:space="preserve">
          <source>Updates a model instance. If the instance doesn&amp;rsquo;t exist in the persistence it will throw an exception Returning true on success or false otherwise.</source>
          <target state="translated">モデルインスタンスを更新します。インスタンスが永続化に存在しない場合、成功するとtrueを返し、そうでなければfalseを返す例外をスローします。</target>
        </trans-unit>
        <trans-unit id="7102580ad22989761580fc11a70361a123ee0b25" translate="yes" xml:space="preserve">
          <source>Updates data on a table using custom RBDM SQL syntax</source>
          <target state="translated">カスタムRBDM SQL構文を使用してテーブルのデータを更新します。</target>
        </trans-unit>
        <trans-unit id="54cb61830bd584c0a66ab46fd07027989ccc4c26" translate="yes" xml:space="preserve">
          <source>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</source>
          <target state="translated">カスタムRBDM SQL構文を使用してテーブル上のデータを更新する もう一つの、より便利な構文</target>
        </trans-unit>
        <trans-unit id="793ec242bb2241e46a7f74dadfc66be0fa720540" translate="yes" xml:space="preserve">
          <source>Updates every record in the resultset</source>
          <target state="translated">結果セットのすべてのレコードを更新します</target>
        </trans-unit>
        <trans-unit id="aff2b2c772edbef0443c8309e624b6d176624b96" translate="yes" xml:space="preserve">
          <source>Updates robots based on primary key</source>
          <target state="translated">主なキーに基づいてロボットを更新</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">Updating</target>
        </trans-unit>
        <trans-unit id="dd8ce06e479993fd7940ea48abaafb1c49415931" translate="yes" xml:space="preserve">
          <source>Updating Data</source>
          <target state="translated">データの更新</target>
        </trans-unit>
        <trans-unit id="acde98b288df53ae73a7100ffb565427414530ea" translate="yes" xml:space="preserve">
          <source>Updating related records</source>
          <target state="translated">関連レコードの更新</target>
        </trans-unit>
        <trans-unit id="dc00a9bd433cb0364ba445dbc4d88b4f5eb76c2d" translate="yes" xml:space="preserve">
          <source>Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.</source>
          <target state="translated">行の更新は、行の挿入と非常によく似ています。ご存知のように、レコードを更新する命令はUPDATEです。レコードが更新されると、各行に対して更新操作に関連したイベントが実行されます。</target>
        </trans-unit>
        <trans-unit id="943e26649b772824ba55708d2fd502f15bc84dd0" translate="yes" xml:space="preserve">
          <source>Uploading Files</source>
          <target state="translated">ファイルのアップロード</target>
        </trans-unit>
        <trans-unit id="50af22368c133d885a1686402ab432dd4db6298b" translate="yes" xml:space="preserve">
          <source>Uppercase string with message type</source>
          <target state="translated">メッセージタイプの大文字文字列</target>
        </trans-unit>
        <trans-unit id="41985785bf31a8a5e3923d6e3fc7a220a9e5f874" translate="yes" xml:space="preserve">
          <source>Uppercases a string, this function makes use of the mbstring extension if available</source>
          <target state="translated">文字列を大文字にします。この関数は、利用可能な場合は mbstring 拡張モジュールを利用します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="14d7a6351adcc22650767cc1f7ee198ae2b1ccac" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;../api/phalcon_mvc_model_query_builder&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Query\Builder&lt;/em&gt;&lt;/a&gt; object as source data</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_model_query_builder&quot;&gt;&lt;em&gt;Phalcon \ MVC \モデル\クエリー\ Builderの&lt;/em&gt;&lt;/a&gt;ソースデータとしてオブジェクトを</target>
        </trans-unit>
        <trans-unit id="6fc00fcce2b4941974d4ca3ecaaa8a854bad9a0a" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset&lt;/em&gt;&lt;/a&gt; object as source data. Since PDO doesn&amp;rsquo;t support scrollable cursors this adapter shouldn&amp;rsquo;t be used to paginate a large number of records</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon \ MVC \モデル\結果セットの&lt;/em&gt;&lt;/a&gt;ソースデータとしてオブジェクトを。PDOはスクロール可能なカーソルをサポートしていないため、このアダプターを使用して多数のレコードをページ分割することはできません。</target>
        </trans-unit>
        <trans-unit id="b70ab34d7572569f24f105a5f5a9bda8a7fc019a" translate="yes" xml:space="preserve">
          <source>Use a PHP Bytecode Cache</source>
          <target state="translated">バイトコードキャッシュPHPを使用する</target>
        </trans-unit>
        <trans-unit id="10a6eee5ae64882fdfe1c7009b211d6d743ee383" translate="yes" xml:space="preserve">
          <source>Use a PHP array as source data</source>
          <target state="translated">PHP の配列をソースデータとして使用する</target>
        </trans-unit>
        <trans-unit id="758cccbfcc842d3be58defb02b33adf3ec049acc" translate="yes" xml:space="preserve">
          <source>Use a recent PHP version</source>
          <target state="translated">最近のPHPのバージョンを使用する</target>
        </trans-unit>
        <trans-unit id="c669639dd7c3641f2a1d3929fa9376fd9f67fdd4" translate="yes" xml:space="preserve">
          <source>Use an autoload strategy that takes into account the namespaces, for example with &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">たとえば&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;で、名前空間を考慮したオートロード戦略を使用します。</target>
        </trans-unit>
        <trans-unit id="b1e98c12f27064aebc399e12c8fffe5317a655b3" translate="yes" xml:space="preserve">
          <source>Use the standard &amp;rdquo;.phtml&amp;rdquo; extension:</source>
          <target state="translated">標準の「.phtml」拡張子を使用します。</target>
        </trans-unit>
        <trans-unit id="d7e52f13f173bfcb186b02d736c570c9e14f61f6" translate="yes" xml:space="preserve">
          <source>User Components</source>
          <target state="translated">ユーザーコンポーネント</target>
        </trans-unit>
        <trans-unit id="d344f36624c7db42ecd83caaa46d642e7b352960" translate="yes" xml:space="preserve">
          <source>Uses INI files to store settings. Internally the adapter uses the PHP function parse_ini_file.</source>
          <target state="translated">INI ファイルを使用して設定を保存します。アダプタの内部では、PHP の関数 parse_ini_file を使用します。</target>
        </trans-unit>
        <trans-unit id="1588d242d5ad8402d0e51acefc3161494a00ce89" translate="yes" xml:space="preserve">
          <source>Uses JSON files to store settings.</source>
          <target state="translated">JSONファイルを使用して設定を保存します。</target>
        </trans-unit>
        <trans-unit id="cf25bb876cb3f454b7c9486dfc8c4dd22c87f27d" translate="yes" xml:space="preserve">
          <source>Uses PHP arrays to store the messages. This is the best option in terms of performance.</source>
          <target state="translated">PHP の配列を使用してメッセージを保存します。これはパフォーマンスの面では最良のオプションです。</target>
        </trans-unit>
        <trans-unit id="b886b3130f808eb47b6196131fb759b63124809c" translate="yes" xml:space="preserve">
          <source>Uses PHP multidimensional arrays to store settings. This adapter offers the best performance.</source>
          <target state="translated">PHP の多次元配列を使用して設定を保存します。このアダプタは最高のパフォーマンスを提供します。</target>
        </trans-unit>
        <trans-unit id="cdf24a6eeb448005fc6c86e216ef8eae5711c446" translate="yes" xml:space="preserve">
          <source>Uses YAML files to store settings.</source>
          <target state="translated">設定を保存するためにYAMLファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="3e5fab69483d85d0637c6b3177fec6952dd950a4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ MVC \ビューを&lt;/em&gt;&lt;/a&gt;スタンドアロンモードでは、以下に示すことができます。</target>
        </trans-unit>
        <trans-unit id="34e75d1ef6d457a1ed2a410e96c6436c782214af" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; you can pass variables from the controller to the views. In the above example, four variables were passed to the view: &lt;code&gt;show_navigation&lt;/code&gt;, &lt;code&gt;menu&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;を使用すると、コントローラーからビューに変数を渡すことができます。上記の例では、4つの変数がビューに渡されました： &lt;code&gt;show_navigation&lt;/code&gt; 、 &lt;code&gt;menu&lt;/code&gt; 、 &lt;code&gt;title&lt;/code&gt; 、および &lt;code&gt;post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fefcd1d46ecea495272355aafbd32b2de35ad2b3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\View\Simple&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_view_simple&quot;&gt;&lt;em&gt;Phalcon \ MVC \ビュー\シンプルな&lt;/em&gt;&lt;/a&gt;スタンドアローンモードでは、以下に示すことができます。</target>
        </trans-unit>
        <trans-unit id="fa2bd1e51e64b7795a575f7a12e3a2784f1c72a5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://en.wikipedia.org/wiki/CURL&quot;&gt;curl&lt;/a&gt; we&amp;rsquo;ll test every route in our application verifying its proper operation.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/CURL&quot;&gt;curl&lt;/a&gt;を使用して、アプリケーションのすべてのルートをテストし、適切に動作することを確認します。</target>
        </trans-unit>
        <trans-unit id="b2f23878b1d7e5dcc33c15971b656330b14432f4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;models&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">スタンドアロンモードで&lt;a href=&quot;models&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;を使用する方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="57605863f91d6afc1bcf7d1ffdafe1bacf4a048c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$_GET['_url']&lt;/code&gt; as source of URIs:</source>
          <target state="translated">使用して &lt;code&gt;$_GET['_url']&lt;/code&gt; URIのソースとして：</target>
        </trans-unit>
        <trans-unit id="b50f09cafe370a77b4903e3455e1be35fbff36b2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$_SERVER['REQUEST_URI']&lt;/code&gt; as source of URIs:</source>
          <target state="translated">URIのソースとして &lt;code&gt;$_SERVER['REQUEST_URI']&lt;/code&gt; を使用：</target>
        </trans-unit>
        <trans-unit id="d1bab01d60a9e89a547752c6962b5e54e2601a39" translate="yes" xml:space="preserve">
          <source>Using Controllers</source>
          <target state="translated">コントローラの使用</target>
        </trans-unit>
        <trans-unit id="351aabc33d8513008e93393f1cc8419e0425c928" translate="yes" xml:space="preserve">
          <source>Using Controllers as Handlers</source>
          <target state="translated">コントローラをハンドラとして使用する</target>
        </trans-unit>
        <trans-unit id="588c359296585ea708ddd4793d4f606e3909661c" translate="yes" xml:space="preserve">
          <source>Using PHP Built-in webserver</source>
          <target state="translated">PHPを使用する 組み込みのウェブサーバ</target>
        </trans-unit>
        <trans-unit id="dd4669ca9c2fe5d3bc7226103f94706530f82eb9" translate="yes" xml:space="preserve">
          <source>Using Partials</source>
          <target state="translated">パーシャルの使用</target>
        </trans-unit>
        <trans-unit id="3069441f79ae6a7f25e785c04b30c78d241bd59e" translate="yes" xml:space="preserve">
          <source>Using Raw SQL</source>
          <target state="translated">生のSQLを使用する</target>
        </trans-unit>
        <trans-unit id="2dfdff9babf39b8c5711494190419fd6967d2d2b" translate="yes" xml:space="preserve">
          <source>Using Services From The DI</source>
          <target state="translated">DIのサービスを利用する</target>
        </trans-unit>
        <trans-unit id="589d42f04f1518dc454ae79b971f929c57733d04" translate="yes" xml:space="preserve">
          <source>Using Services as Controllers</source>
          <target state="translated">サービスをコントローラとして使用する</target>
        </trans-unit>
        <trans-unit id="58cef50934545f6b19bfc272e4732512274db4c0" translate="yes" xml:space="preserve">
          <source>Using Tag Helpers</source>
          <target state="translated">タグヘルパーの使用</target>
        </trans-unit>
        <trans-unit id="2bdcb486fee8f928e6c7e37223e07b0f33283cc7" translate="yes" xml:space="preserve">
          <source>Using Templates</source>
          <target state="translated">テンプレートの使用</target>
        </trans-unit>
        <trans-unit id="0947a90a8e69f702eacc627176e66b602d4b3c69" translate="yes" xml:space="preserve">
          <source>Using Traits as behaviors</source>
          <target state="translated">形質を行動として使う</target>
        </trans-unit>
        <trans-unit id="56a90897779592deadbdbc99979f674bd92a7405" translate="yes" xml:space="preserve">
          <source>Using Views</source>
          <target state="translated">ビューの使用</target>
        </trans-unit>
        <trans-unit id="c418f8ec32d68ec2f2f60f97430872d34b4dbeb1" translate="yes" xml:space="preserve">
          <source>Using Volt in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">スタンドアロンモードでのVoltの使用方法は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6f8449787a74e1ce921d54d058cc629ca224812a" translate="yes" xml:space="preserve">
          <source>Using XDebug</source>
          <target state="translated">XDebugの使用</target>
        </trans-unit>
        <trans-unit id="7c05453f03bd0dc68f7fbd0c40b5627017c7c2e3" translate="yes" xml:space="preserve">
          <source>Using a custom Events Manager</source>
          <target state="translated">カスタムイベントマネージャの使用</target>
        </trans-unit>
        <trans-unit id="436ca32c9faf4089e26c447e696ab5b1a773be61" translate="yes" xml:space="preserve">
          <source>Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application will use.</source>
          <target state="translated">別のテンプレートエンジンを使用する場合、通常、ユーザーのために最終的な出力を生成するために外部のPHPライブラリを使用して複雑なテキスト解析を行う必要があります。これは通常、アプリケーションが使用するリソースの数を増やすことになります。</target>
        </trans-unit>
        <trans-unit id="c7786b422ff512cc03b04a2554ab449d72d57da1" translate="yes" xml:space="preserve">
          <source>Using a tool like &lt;a href=&quot;https://github.com/jokkedk/webgrind/&quot;&gt;Webgrind&lt;/a&gt; you can see which functions/methods are slower than others:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jokkedk/webgrind/&quot;&gt;Webgrindの&lt;/a&gt;ようなツールを使用すると、どの関数/メソッドが他よりも遅いかを確認できます。</target>
        </trans-unit>
        <trans-unit id="1c01ee9c01b6017148f9cb829ad4a6913dc10054" translate="yes" xml:space="preserve">
          <source>Using conversors</source>
          <target state="translated">会話者を使う</target>
        </trans-unit>
        <trans-unit id="e57549a4bc19901d6e510959e1c7ccc2964ad81d" translate="yes" xml:space="preserve">
          <source>Using high-level abstraction components such as &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt; to access a database, it is difficult to understand which statements are sent to the database system. &lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon\Logger&lt;/em&gt;&lt;/a&gt; interacts with &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, providing logging capabilities on the database abstraction layer.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;などの高レベルの抽象化コンポーネントを使用してデータベースにアクセスする場合、どのステートメントがデータベースシステムに送信されるかを理解することは困難です。&lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon \ Logger&lt;/em&gt;&lt;/a&gt;は&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;と対話し、データベース抽象化レイヤーにロギング機能を提供します。</target>
        </trans-unit>
        <trans-unit id="1d128ac661df982402abb983ac231b97884e8528" translate="yes" xml:space="preserve">
          <source>Using namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:</source>
          <target state="translated">名前空間を使用することは、適切なコントローラをロードする際にいくつかの意味を持ちます。フレームワークの動作を名前空間に合わせて調整するには、以下のタスクの 1 つまたはすべてを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a5ba25655351e4366f72db55501f7260dc5ded1" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; it&amp;rsquo;s possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn&amp;rsquo;t found:</source>
          <target state="translated">&lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt;を使用すると、コントローラー/アクションの組み合わせが見つからなかったときにディスパッチャーが例外をスローする前にフックポイントを挿入することができます。</target>
        </trans-unit>
        <trans-unit id="e022cbde3f76b6597bcb2be152ca8342512bf0f7" translate="yes" xml:space="preserve">
          <source>Using the unique name, forms can be accessed in any part of the application:</source>
          <target state="translated">固有の名前を使用すると、アプリケーションの任意の部分でフォームにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="6acdb6f02a643c7fdd2ddfd8357c54babe5d3c7c" translate="yes" xml:space="preserve">
          <source>Using this class as entity, allows the form to take the default values from it:</source>
          <target state="translated">このクラスをエンティティとして使うことで、フォームがデフォルト値を取ることができます。</target>
        </trans-unit>
        <trans-unit id="d060595ac9b24a27c2c469c945f6d549ce922240" translate="yes" xml:space="preserve">
          <source>Usually the Flash Messaging service is requested from the services container. If you&amp;rsquo;re using &lt;a href=&quot;../api/phalcon_di_factorydefault&quot;&gt;&lt;em&gt;Phalcon\Di\FactoryDefault&lt;/em&gt;&lt;/a&gt; then &lt;a href=&quot;../api/phalcon_flash_direct&quot;&gt;&lt;em&gt;Phalcon\Flash\Direct&lt;/em&gt;&lt;/a&gt; is automatically registered as &amp;ldquo;flash&amp;rdquo; service and &lt;a href=&quot;../api/phalcon_flash_session&quot;&gt;&lt;em&gt;Phalcon\Flash\Session&lt;/em&gt;&lt;/a&gt; is automatically registered as &amp;ldquo;flashSession&amp;rdquo; service. You can also manually register it:</source>
          <target state="translated">通常、Flashメッセージングサービスはサービスコンテナから要求されます。&lt;a href=&quot;../api/phalcon_di_factorydefault&quot;&gt;&lt;em&gt;Phalcon \ Di \ FactoryDe​​fault&lt;/em&gt;&lt;/a&gt;を使用している場合、&lt;a href=&quot;../api/phalcon_flash_direct&quot;&gt;&lt;em&gt;Phalcon \ Flash \ Direct&lt;/em&gt;&lt;/a&gt;は自動的に「flash」サービスとして登録され、&lt;a href=&quot;../api/phalcon_flash_session&quot;&gt;&lt;em&gt;Phalcon \ Flash \ Session&lt;/em&gt;&lt;/a&gt;は自動的に「flashSession」サービスとして登録されます。手動で登録することもできます：</target>
        </trans-unit>
        <trans-unit id="afd552a9fc7485f6bcb11d28c84e40b2740ea1bd" translate="yes" xml:space="preserve">
          <source>Usually, this component must be registered in the Dependency Injector container, so you can set up it there:</source>
          <target state="translated">通常、このコンポーネントはDependency Injectorコンテナに登録する必要があるので、そこに設定します。</target>
        </trans-unit>
        <trans-unit id="7235465090646f5304f0a22a72a273472cdd6ff4" translate="yes" xml:space="preserve">
          <source>Utility to normalize a string&amp;rsquo;s encoding to UTF-32.</source>
          <target state="translated">文字列のエンコーディングをUTF-32に正規化するユーティリティ。</target>
        </trans-unit>
        <trans-unit id="e18f42d3097ac4903fde0081de3efaa3b3e02188" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute; is another sample application you can use to learn more about Phalcon. V&amp;ouml;kur&amp;oacute; is a small website that shows how to implement a security features and management of users and permissions. You can clone its code from &lt;a href=&quot;https://github.com/phalcon/vokuro&quot;&gt;Github&lt;/a&gt;.</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;は、Phalconについてさらに学ぶために使用できる別のサンプルアプリケーションです。V&amp;ouml;kur&amp;oacute;は、セキュリティ機能とユーザーと権限の管理を実装する方法を示す小さなWebサイトです。&lt;a href=&quot;https://github.com/phalcon/vokuro&quot;&gt;Github&lt;/a&gt;からコードのクローンを作成できます。</target>
        </trans-unit>
        <trans-unit id="03557dc8a5e878b3d82989cd0d208e8c15ff9291" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute; sends emails to confirm the sign up of registered users using Swift, the composer.json looks like:</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;は、Swiftを使用して登録ユーザーのサインアップを確認するメールを送信します。composer.jsonは次のようになります。</target>
        </trans-unit>
        <trans-unit id="48740c2e0eba7a4489cd530438565f589a7f9f78" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute;: Security, Authentication, Authorization and more</source>
          <target state="translated">説明：セキュリティ、認証、承認など</target>
        </trans-unit>
        <trans-unit id="7672694253ca92e0dce69184fdeec37f709db3c3" translate="yes" xml:space="preserve">
          <source>VERSION_MAJOR</source>
          <target state="translated">VERSION_MAJOR</target>
        </trans-unit>
        <trans-unit id="9f4043bc6087635a4144a1b9e9481b30e44b62ee" translate="yes" xml:space="preserve">
          <source>VERSION_MEDIUM</source>
          <target state="translated">VERSION_MEDIUM</target>
        </trans-unit>
        <trans-unit id="3225bf508a5f7898b6242e8edb4d3664899f1c67" translate="yes" xml:space="preserve">
          <source>VERSION_MINOR</source>
          <target state="translated">VERSION_MINOR</target>
        </trans-unit>
        <trans-unit id="ca59e520f4a9c68edf021711bd307d285c599494" translate="yes" xml:space="preserve">
          <source>VERSION_SPECIAL</source>
          <target state="translated">VERSION_SPECIAL</target>
        </trans-unit>
        <trans-unit id="ddc72638e6da7c773007a44ac58c1b250f69f173" translate="yes" xml:space="preserve">
          <source>VERSION_SPECIAL_NUMBER</source>
          <target state="translated">VERSION_SPECIAL_NUMBER</target>
        </trans-unit>
        <trans-unit id="433bc92f0786ed6903790ac07a5aa6aac6fcf35c" translate="yes" xml:space="preserve">
          <source>VERTICAL</source>
          <target state="translated">VERTICAL</target>
        </trans-unit>
        <trans-unit id="648dd0d84cb56188904dc8a7f1b1f05dd0288f21" translate="yes" xml:space="preserve">
          <source>Validate a set of data according to a set of rules</source>
          <target state="translated">一連のデータを一連のルールに従って検証する</target>
        </trans-unit>
        <trans-unit id="2f1b38e434103e4cd88b17cf35e500d1dbf27b52" translate="yes" xml:space="preserve">
          <source>Validates that a field or a combination of a set of fields are not present more than once in the existing records of the related table</source>
          <target state="translated">フィールドまたはフィールドの組み合わせが、関連するテーブルの既存のレコードに複数回存在しないことを検証します。</target>
        </trans-unit>
        <trans-unit id="09954265ae786532ceffb5502e9f1cc0152b31a1" translate="yes" xml:space="preserve">
          <source>Validates that a string has the specified maximum and minimum constraints The test is passed if for a string&amp;rsquo;s length L, min&amp;lt;=L&amp;lt;=max, i.e. L must be at least min, and at most max.</source>
          <target state="translated">文字列に指定された最大および最小の制約があることを検証します。文字列の長さがL、min &amp;lt;= L &amp;lt;= maxの場合、つまりLは少なくともmin、最大でmaxでなければならない場合、テストは合格です。</target>
        </trans-unit>
        <trans-unit id="49467d80d7d2350ce8b5a3a3b2f5ece88e0c45a4" translate="yes" xml:space="preserve">
          <source>Validates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum&amp;lt;=x&amp;lt;=maximum.</source>
          <target state="translated">値が2つの値の包括的範囲内にあることを検証します。値xの場合、最小値&amp;lt;= x &amp;lt;=最大値の場合、テストに合格します。</target>
        </trans-unit>
        <trans-unit id="be6f99a44675c56da59d2c2c8387de6f19cb7040" translate="yes" xml:space="preserve">
          <source>Validates that a value is ipv4 address in valid range</source>
          <target state="translated">値が有効範囲内の ipv4 アドレスであることを検証します。</target>
        </trans-unit>
        <trans-unit id="c31bf4a8ab5e77008ba24f8d78ce48fa187b74cd" translate="yes" xml:space="preserve">
          <source>Validates that a value is not null or empty string</source>
          <target state="translated">値がNULLや空文字列ではないことを検証します。</target>
        </trans-unit>
        <trans-unit id="eb86e39b625cc355f8fd303e616b77bfc6e3b88b" translate="yes" xml:space="preserve">
          <source>Validates the form</source>
          <target state="translated">フォームを検証する</target>
        </trans-unit>
        <trans-unit id="3f025ac4cddf2343fd061b333fd0f1bd45353a90" translate="yes" xml:space="preserve">
          <source>Validating Data Integrity</source>
          <target state="translated">データの整合性を検証する</target>
        </trans-unit>
        <trans-unit id="8bb20ec2ad79ee9bedf554ba015b63a8388aec1e" translate="yes" xml:space="preserve">
          <source>Validating Models</source>
          <target state="translated">モデルの検証</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="7c3ffd6c63c688ef2084a3c36c96682569d2dcbb" translate="yes" xml:space="preserve">
          <source>Validation Events</source>
          <target state="translated">バリデーションイベント</target>
        </trans-unit>
        <trans-unit id="900aacdde971f44b1426d3b6340bd08cbd3b4dd7" translate="yes" xml:space="preserve">
          <source>Validation Events and Events Manager</source>
          <target state="translated">バリデーションイベントとイベントマネージャー</target>
        </trans-unit>
        <trans-unit id="7e557e2d327fddfa102d879d6bdc30443e867e89" translate="yes" xml:space="preserve">
          <source>Validation Failed Events</source>
          <target state="translated">検証失敗イベント</target>
        </trans-unit>
        <trans-unit id="5366680967ce29b04fb76e3e149a5470eb6ac85c" translate="yes" xml:space="preserve">
          <source>Validation Messages</source>
          <target state="translated">バリデーションメッセージ</target>
        </trans-unit>
        <trans-unit id="ce98834f2a88e04569c9daef3bce486b573f341b" translate="yes" xml:space="preserve">
          <source>Validation chains can be initialized in a direct manner by just adding validators to the &lt;a href=&quot;../api/phalcon_validation&quot;&gt;&lt;em&gt;Phalcon\Validation&lt;/em&gt;&lt;/a&gt; object. You can put your validations in a separate file for better re-use code and organization:</source>
          <target state="translated">検証チェーンは、&lt;a href=&quot;../api/phalcon_validation&quot;&gt;&lt;em&gt;Phalcon \ Validation&lt;/em&gt;&lt;/a&gt;オブジェクトにバリデーターを追加するだけで直接初期化できます。検証を別のファイルに入れて、コードと構成を再利用しやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="dd3cabda743ab6483370dceda59fb215daccbbe9" translate="yes" xml:space="preserve">
          <source>Validation::add</source>
          <target state="translated">Validation::add</target>
        </trans-unit>
        <trans-unit id="6c9b30a09c38d59d9bf0bf1bc804e012aac46126" translate="yes" xml:space="preserve">
          <source>Validation::bind</source>
          <target state="translated">Validation::bind</target>
        </trans-unit>
        <trans-unit id="9c063eb19cc440d0c9caa2de461fcd34e7cd3684" translate="yes" xml:space="preserve">
          <source>Validation::rule</source>
          <target state="translated">Validation::rule</target>
        </trans-unit>
        <trans-unit id="3e84ed0cd5c796ba2eb4714c69cc8ec35372caf0" translate="yes" xml:space="preserve">
          <source>Validation::rules</source>
          <target state="translated">Validation::rules</target>
        </trans-unit>
        <trans-unit id="159641a1957efa3a36a65b6c5b7c0b7488185b43" translate="yes" xml:space="preserve">
          <source>ValidationInterface</source>
          <target state="translated">ValidationInterface</target>
        </trans-unit>
        <trans-unit id="dd59033aa12ada554a1c25f8851bc3d6e3a2d956" translate="yes" xml:space="preserve">
          <source>ValidationInterface::add</source>
          <target state="translated">ValidationInterface::add</target>
        </trans-unit>
        <trans-unit id="f1f23d405e2387721e5f18e46aa204eb202c56f5" translate="yes" xml:space="preserve">
          <source>ValidationInterface::bind</source>
          <target state="translated">ValidationInterface::bind</target>
        </trans-unit>
        <trans-unit id="eee63c67f859d993f0b4ee2656290d3d2500f2de" translate="yes" xml:space="preserve">
          <source>ValidationInterface::rule</source>
          <target state="translated">ValidationInterface::rule</target>
        </trans-unit>
        <trans-unit id="fba406979e79121cd8379fa33a77da57f9b29c70" translate="yes" xml:space="preserve">
          <source>ValidationInterface::rules</source>
          <target state="translated">ValidationInterface::rules</target>
        </trans-unit>
        <trans-unit id="fde59d48335d49f417fc33cd95a5a3142c134b76" translate="yes" xml:space="preserve">
          <source>Validator for constructor</source>
          <target state="translated">コンストラクタのバリデータ</target>
        </trans-unit>
        <trans-unit id="762f13c2259b5fbab6d8f1bdbab081fc48bc558f" translate="yes" xml:space="preserve">
          <source>Validators</source>
          <target state="translated">Validators</target>
        </trans-unit>
        <trans-unit id="55c30890de2d7c85ab7e07ceb6f8a58a307aee46" translate="yes" xml:space="preserve">
          <source>Validators are executed in the same order as they were registered.</source>
          <target state="translated">バリデータは登録された順番で実行されます。</target>
        </trans-unit>
        <trans-unit id="8b7671b4544a1d24b546c8a61c280ac36052cdff" translate="yes" xml:space="preserve">
          <source>Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:</source>
          <target state="translated">直接または属性の配列を介して代入された値は、関連する属性のデータ型に応じてエスケープ/サニタイズされます。そのため、SQL インジェクションの可能性を心配することなく、安全ではない配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="cf664dcb3f96e917eac3ac7c908c6636e242c5e9" translate="yes" xml:space="preserve">
          <source>Variables can be formatted or modified using filters. The pipe operator &lt;code&gt;|&lt;/code&gt; is used to apply filters to variables:</source>
          <target state="translated">変数は、フィルターを使用してフォーマットまたは変更できます。パイプ演算子 &lt;code&gt;|&lt;/code&gt; 変数にフィルターを適用するために使用されます：</target>
        </trans-unit>
        <trans-unit id="a1a41d011bab75f71a15cbcbb3d94b28d344505e" translate="yes" xml:space="preserve">
          <source>Variables may be changed in a template using the instruction &amp;ldquo;set&amp;rdquo;:</source>
          <target state="translated">変数は、「set」命令を使用してテンプレートで変更できます。</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="04ffb3231e59562188fc8f108c230ac222d9437a" translate="yes" xml:space="preserve">
          <source>Version::get</source>
          <target state="translated">Version::get</target>
        </trans-unit>
        <trans-unit id="8940b448766b16ed73688efb8b28b7702b7a9386" translate="yes" xml:space="preserve">
          <source>Version::getId</source>
          <target state="translated">Version::getId</target>
        </trans-unit>
        <trans-unit id="a77e6decaadbd6c9dba17ef5c3aebc35f9567bb7" translate="yes" xml:space="preserve">
          <source>View Events</source>
          <target state="translated">イベントを見る</target>
        </trans-unit>
        <trans-unit id="da3633a5062991c64406645f3085c2afb88d974c" translate="yes" xml:space="preserve">
          <source>View Helpers (Tags)</source>
          <target state="translated">ヘルパーを見る (タグ)</target>
        </trans-unit>
        <trans-unit id="df87007ce55fe78b1319363d1af1e25cfbe4e64f" translate="yes" xml:space="preserve">
          <source>View Integration</source>
          <target state="translated">統合を見る</target>
        </trans-unit>
        <trans-unit id="92bb86680269cfc3c05ec1efe0677acb8488357d" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;edit&amp;rdquo;</source>
          <target state="translated">アクション「編集」のビュー</target>
        </trans-unit>
        <trans-unit id="5d481a1e5f54e5121d29b7fa23c21e33f56b69a8" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;new&amp;rdquo;</source>
          <target state="translated">「新しい」アクションのビュー</target>
        </trans-unit>
        <trans-unit id="d0a26a1d1073393d8537e46bde795d21d124d33c" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;search&amp;rdquo;</source>
          <target state="translated">アクション「検索」の表示</target>
        </trans-unit>
        <trans-unit id="80332c88172f9213f51a820b8882d3d3adbdd3c6" translate="yes" xml:space="preserve">
          <source>Viewing the form in your browser will show something like this:</source>
          <target state="translated">ブラウザでフォームを表示すると、このように表示されます。</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="d6f947482b9450eb74d3204d5cc2058bdc206164" translate="yes" xml:space="preserve">
          <source>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.</source>
          <target state="translated">ビューはアプリケーションのユーザーインターフェースを表します。ビューは多くの場合、データの表示のみに関連するタスクを実行する PHP コードが埋め込まれた HTML ファイルです。ビューは、アプリケーションからのリクエストを行うために使用されるウェブブラウザや他のツールにデータを提供する仕事を扱います。</target>
        </trans-unit>
        <trans-unit id="863c19a1bce484a4a2cbf9c819cfda6fee47b454" translate="yes" xml:space="preserve">
          <source>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. &lt;a href=&quot;views&quot;&gt;&lt;em&gt;Learn more&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">ビューは、アプリケーションのユーザーインターフェイスを表します。ビューは多くの場合、データの表示のみに関連するタスクを実行する、埋め込まれたPHPコードを含むHTMLファイルです。ビューは、アプリケーションからのリクエストに使用されるWebブラウザーまたはその他のツールにデータを提供するジョブを処理します。&lt;a href=&quot;views&quot;&gt;&lt;em&gt;もっと詳しく知る&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d3bdc9e0aa545f3d7ed337c515034b08b1f93e9" translate="yes" xml:space="preserve">
          <source>Virtual Foreign Keys</source>
          <target state="translated">バーチャル・フォーリンキー</target>
        </trans-unit>
        <trans-unit id="80e002ac7b12d3f2cdf65aa829a437c692675c0a" translate="yes" xml:space="preserve">
          <source>Virtual Hosts</source>
          <target state="translated">バーチャルホスト</target>
        </trans-unit>
        <trans-unit id="47c87dcdeab336547b1440686574aa3e94242f2f" translate="yes" xml:space="preserve">
          <source>Volt Syntax:</source>
          <target state="translated">ボルトの構文。</target>
        </trans-unit>
        <trans-unit id="d44c73bc03848019950b28084d702fd40073a3de" translate="yes" xml:space="preserve">
          <source>Volt extensions must be in registered in the compiler making them available in compile time:</source>
          <target state="translated">Voltの拡張機能は、コンパイル時に利用できるように、コンパイラに登録しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="718b4897f7ab62cfcc4c95d9ec69a8961addcade" translate="yes" xml:space="preserve">
          <source>Volt function</source>
          <target state="translated">ボルト機能</target>
        </trans-unit>
        <trans-unit id="171f261607f9e9ed2076709b44a8a1c1314dfbee" translate="yes" xml:space="preserve">
          <source>Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.</source>
          <target state="translated">Voltは、PHP用にC言語で書かれた超高速でデザイナーフレンドリーなテンプレート言語です。簡単な方法でビューを書くためのヘルパーのセットを提供します。Volt は Phalcon の他のコンポーネントと高度に統合されており、アプリケーションのスタンドアロンコンポーネントとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="7fbe6d43364c9af50b25f30e7cdab05c17cf4306" translate="yes" xml:space="preserve">
          <source>Volt is highly integrated with &lt;a href=&quot;tags&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;, so it&amp;rsquo;s easy to use the helpers provided by that component in a Volt template:</source>
          <target state="translated">Voltは&lt;a href=&quot;tags&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;と高度に統合されているため、Voltテンプレートでそのコンポーネントによって提供されるヘルパーを簡単に使用できます。</target>
        </trans-unit>
        <trans-unit id="1f1573239882775081ffcf6a2a75112153b9c1fb" translate="yes" xml:space="preserve">
          <source>Volt is inspired by &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt;, originally created by &lt;a href=&quot;https://github.com/mitsuhiko&quot;&gt;Armin Ronacher&lt;/a&gt;. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt&amp;rsquo;s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.</source>
          <target state="translated">Voltは、元々は&lt;a href=&quot;https://github.com/mitsuhiko&quot;&gt;Armin Ronacher&lt;/a&gt;によって作成された&lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt;に触発されました。したがって、多くの開発者は、類似のテンプレートエンジンで使用していたものと同じ構文を使用して、おなじみの領域にいます。Voltの構文と機能はより多くの要素で強化されており、もちろん開発者がPhalconでの作業中に慣れているパフォーマンスで強化されています。</target>
        </trans-unit>
        <trans-unit id="c09c8ea2c5624bedf366e6757e65b13e9d3933a2" translate="yes" xml:space="preserve">
          <source>Volt provides a basic set of expression support, including literals and common operators.</source>
          <target state="translated">Voltは、リテラルや共通演算子などの基本的な式のサポートセットを提供しています。</target>
        </trans-unit>
        <trans-unit id="fa8efd625bffd44725937e19994cc3fd3db8aa11" translate="yes" xml:space="preserve">
          <source>Volt provides a set of basic but powerful control structures for use in templates:</source>
          <target state="translated">Voltは、テンプレートで使用するための基本的でありながら強力な制御構造のセットを提供します。</target>
        </trans-unit>
        <trans-unit id="d2d6b19d64ebb1ed52ab54681fe12b5d0345c985" translate="yes" xml:space="preserve">
          <source>Volt replaces the directory separators / and \ by this separator in order to create a single file in the compiled directory</source>
          <target state="translated">Voltでは、コンパイルされたディレクトリに1つのファイルを作成するために、ディレクトリのセパレータである/と、このセパレータを置き換えています。</target>
        </trans-unit>
        <trans-unit id="99d6de0808fa5b25bcd868554b81132c038cf55c" translate="yes" xml:space="preserve">
          <source>Volt syntax for above example:</source>
          <target state="translated">上記の例では、ボルトの構文を使用します。</target>
        </trans-unit>
        <trans-unit id="b442d8d2ab0e3968889e9050bcd7b9f4d113f740" translate="yes" xml:space="preserve">
          <source>Volt syntax:</source>
          <target state="translated">ボルトの構文。</target>
        </trans-unit>
        <trans-unit id="7c62a74f4f15525b20a0882d892436c503cafb70" translate="yes" xml:space="preserve">
          <source>Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:</source>
          <target state="translated">Voltのビューは純粋なPHPコードにコンパイルされているので、基本的にはPHPコードを手動で書く手間を省くことができます。</target>
        </trans-unit>
        <trans-unit id="abea67996538f26cdbb8b3c042969e4610100054" translate="yes" xml:space="preserve">
          <source>Volt: Template Engine</source>
          <target state="translated">Volt.テンプレートエンジン</target>
        </trans-unit>
        <trans-unit id="eed413c23de930642a8830a5163813faffd163f7" translate="yes" xml:space="preserve">
          <source>WAMP has both 32 and 64 bit versions. From the download section, you can choose the Phalcon for Windows accordingly to your desired architecture.</source>
          <target state="translated">WAMPには32ビット版と64ビット版があります。ダウンロードセクションから、ご希望のアーキテクチャに合わせてWindows用のファルコンを選択することができます。</target>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="2ab399961fd26c807a88e24b93a90dbd5e9c4828" translate="yes" xml:space="preserve">
          <source>Warning! If $whereCondition is string it not escaped.</source>
          <target state="translated">警告! whereCondition が文字列の場合はエスケープされません。</target>
        </trans-unit>
        <trans-unit id="a6a4c8779b4638d9db523ac724e341adbb438987" translate="yes" xml:space="preserve">
          <source>We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resultset of type &lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Simple&lt;/em&gt;&lt;/a&gt;. However, each element is a standard object that only contain the two columns that were requested.</source>
          <target state="translated">テーブル内の一部のフィールドのみを要求しているため、それらをオブジェクト全体と見なすことはできません。そのため、返されるオブジェクトは、依然として&lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Simple&lt;/em&gt;&lt;/a&gt;タイプの結果セットです。ただし、各要素は、要求された2つの列のみを含む標準オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="6dc5e527ad908d431aff76e1e3057d93353909f5" translate="yes" xml:space="preserve">
          <source>We can easily replace a component with one created by ourselves or a third party.</source>
          <target state="translated">自社または第三者が作成したコンポーネントを簡単に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="8487fa49fd46d5d4890fbd5cf7f033823e6fcc8e" translate="yes" xml:space="preserve">
          <source>We can get global instances of components in a structured and unified way.</source>
          <target state="translated">構造化された統一された方法でコンポーネントのグローバルインスタンスを取得することができます。</target>
        </trans-unit>
        <trans-unit id="b35a97299e7e593f88ee7e9eed86ceb8f1055da0" translate="yes" xml:space="preserve">
          <source>We can then run the following command:</source>
          <target state="translated">そして、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="64a4453fce2d2e5a038b3d755131f48af305ef87" translate="yes" xml:space="preserve">
          <source>We designed this component based on the &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;XSS (Cross Site Scripting) Prevention Cheat Sheet&lt;/a&gt; created by the &lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントは、&lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP&lt;/a&gt;によって作成された&lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;XSS（クロスサイトスクリプティング）防止チートシートに&lt;/a&gt;基づいて設計されました。</target>
        </trans-unit>
        <trans-unit id="4ca3d01eb07dbc10b588c408884a252d0fabe687" translate="yes" xml:space="preserve">
          <source>We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.</source>
          <target state="translated">オブジェクトの初期化を完全に制御できるので、コンポーネントに渡す前に必要に応じてこれらのオブジェクトを設定することができます。</target>
        </trans-unit>
        <trans-unit id="60032c772215d295fdf6747b75f8a69b36eb8141" translate="yes" xml:space="preserve">
          <source>We have seen how Phalcon lets you create forms and bind data from a database in a structured way. In next chapter, we will see how to add custom HTML elements like a menu.</source>
          <target state="translated">これまで Phalcon を使ってフォームを作成し、データベースから構造化された方法でデータをバインドする方法を見てきました。次の章では、メニューのようなカスタム HTML 要素を追加する方法を見ていきます。</target>
        </trans-unit>
        <trans-unit id="fdc8023ffd1ed509710069e501840ef11718420a" translate="yes" xml:space="preserve">
          <source>We have three properties to work with here: &lt;code&gt;$id&lt;/code&gt;, &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$price&lt;/code&gt;. So, let&amp;rsquo;s say you want to retrieve the first record in the table with the name &amp;lsquo;Terminator&amp;rsquo;. This could be written like:</source>
          <target state="translated">ここで使用する3つのプロパティがあります： &lt;code&gt;$id&lt;/code&gt; 、 &lt;code&gt;$name&lt;/code&gt; および &lt;code&gt;$price&lt;/code&gt; 。したがって、 'Terminator'という名前のテーブルの最初のレコードを取得するとします。これは次のように書くことができます：</target>
        </trans-unit>
        <trans-unit id="ba53ea8a96bc92a21ee78e4d19c66857d5d2fd21" translate="yes" xml:space="preserve">
          <source>We have to cast values manually because parse_ini_file() has a poor implementation.</source>
          <target state="translated">parse_ini_file()の実装が悪いので、値を手動でキャストしなければなりません。</target>
        </trans-unit>
        <trans-unit id="101f02e76e3961165c981bdd2dee708e7ce0e9f2" translate="yes" xml:space="preserve">
          <source>We highly recommend use at least XDebug 2.2.3 for a better compatibility with Phalcon</source>
          <target state="translated">Phalconとの互換性を高めるために、少なくともXDebug 2.2.3以上の使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="e5ab3ec73b979fb665134e5eb25bfa72a9866b15" translate="yes" xml:space="preserve">
          <source>We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; allows us to intercept the events produced by a component, routing the events to listeners.</source>
          <target state="translated">これで、アプリケーションで使用されるDispatcherを完全に制御できます。フレームワーク内の多くのコンポーネントは、内部の操作フローを変更できるようにするイベントをトリガーします。Dependency Injectorコンポーネントはコンポーネントの接着剤として機能するため、&lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt;と呼ばれる新しいコンポーネントを使用すると、コンポーネントによって生成されたイベントをインターセプトして、イベントをリスナーにルーティングできます。</target>
        </trans-unit>
        <trans-unit id="b478404bc66a4a86803031b387b99ce4dc40508c" translate="yes" xml:space="preserve">
          <source>We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.</source>
          <target state="translated">ビジネスロジックの実装が公開されるのを防ぐために、検証メソッドは保護されていると宣言することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4ae108358e5e7ca2b27a24c918f0fe4f40f9b800" translate="yes" xml:space="preserve">
          <source>We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:</source>
          <target state="translated">ハッシュ化されたパスワードをデフォルトの作業係数で保存しました。作業係数を高くすると、パスワードの暗号化が遅くなるため、パスワードの脆弱性が低くなります。パスワードが正しいかどうかは、以下のように確認することができます。</target>
        </trans-unit>
        <trans-unit id="00f6e189471a0234ca8d48b9c3b67aa322762e6e" translate="yes" xml:space="preserve">
          <source>We then instantiate the Users class, which corresponds to a User record. The class public properties map to the fields of the record in the users table. Setting the relevant values in the new record and calling &lt;code&gt;save()&lt;/code&gt; will store the data in the database for that record. The &lt;code&gt;save()&lt;/code&gt; method returns a boolean value which indicates whether the storing of the data was successful or not.</source>
          <target state="translated">次に、Userレコードに対応するUsersクラスをインスタンス化します。クラスのパブリックプロパティは、usersテーブルのレコードのフィールドにマップされます。新しいレコードに関連する値を設定して &lt;code&gt;save()&lt;/code&gt; を呼び出すと、そのレコードのデータベースにデータが保存されます。 &lt;code&gt;save()&lt;/code&gt; メソッドは、データの格納が成功したか否かを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="213afb66383780cdfcaced5e887cbfa83be867f9" translate="yes" xml:space="preserve">
          <source>We will discuss this file in depth later.</source>
          <target state="translated">このファイルについては後ほど詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="a12d67b5faebe21420c30ef4dc2ffc828ae1c90e" translate="yes" xml:space="preserve">
          <source>Web Interface to Tools</source>
          <target state="translated">ツールのWebインタフェース</target>
        </trans-unit>
        <trans-unit id="1394e7b6f6a882f83b939bd25fe6045be3137ede" translate="yes" xml:space="preserve">
          <source>Websites and web applications are vulnerable to &lt;a href=&quot;https://www.owasp.org/index.php/XSS&quot;&gt;XSS&lt;/a&gt; attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. &lt;a href=&quot;../api/phalcon_escaper&quot;&gt;&lt;em&gt;Phalcon\Escaper&lt;/em&gt;&lt;/a&gt; provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.</source>
          <target state="translated">WebサイトおよびWebアプリケーションは&lt;a href=&quot;https://www.owasp.org/index.php/XSS&quot;&gt;XSS&lt;/a&gt;攻撃に対して脆弱であり、PHPはエスケープ機能を提供しますが、状況によっては十分/適切ではありません。&lt;a href=&quot;../api/phalcon_escaper&quot;&gt;&lt;em&gt;Phalcon \ Escaper&lt;/em&gt;&lt;/a&gt;はコンテキストエスケープを提供し、Zephirで記述されているため、さまざまな種類のテキストをエスケープするときにオーバーヘッドを最小限に抑えることができます。</target>
        </trans-unit>
        <trans-unit id="5a879434c5b881453fe7cc36b00a5e77e2a4d03e" translate="yes" xml:space="preserve">
          <source>Welcome to Phalcon framework. Our mission is to give you an advanced tool for developing the faster web sites and applications with PHP.</source>
          <target state="translated">Phalcon フレームワークへようこそ。私たちの使命は、PHPを使ってより高速なWebサイトやアプリケーションを開発するための高度なツールを提供することです。</target>
        </trans-unit>
        <trans-unit id="48b2a0860f516f17b913a9ef7e464c196ffe7efc" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; according to the module to be executed.</source>
          <target state="translated">とき&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ MVC \アプリケーションが&lt;/em&gt;&lt;/a&gt;登録されたモジュールを持って、常にすべての一致したルートが有効なモジュールを返すことが必要です。登録された各モジュールには、モジュール自体をセットアップする機能を提供する関連クラスがあります。各モジュールクラス定義は、registerAutoloaders（）およびregisterServices（）という2つのメソッドを実装する必要があります。これらは、実行されるモジュールに応じて、&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Application&lt;/em&gt;&lt;/a&gt;によって&lt;em&gt;呼び出さ&lt;/em&gt;れます。</target>
        </trans-unit>
        <trans-unit id="ed7590ad45bfe779b48c989fb4557ae448739d9b" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name &amp;ldquo;modelsCache&amp;rdquo;.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;が結果セットをキャッシュするサービスを必要とするとき、それはDependency Injector Containerに「modelsCache」という規則名でそれを要求します。</target>
        </trans-unit>
        <trans-unit id="66da09db49599d47b2fdd910d705bdfe6e56fc56" translate="yes" xml:space="preserve">
          <source>When a &amp;ldquo;beforeException&amp;rdquo; is triggered then other plugin is notified:</source>
          <target state="translated">「beforeException」がトリガーされると、他のプラグインに通知されます。</target>
        </trans-unit>
        <trans-unit id="81450a68f459508d0308b3b4bda5d83d41491d30" translate="yes" xml:space="preserve">
          <source>When a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.</source>
          <target state="translated">キャッシュされた結果セットを無効にする必要がある場合は、以前に指定したキーを使用してキャッシュから削除することができます。</target>
        </trans-unit>
        <trans-unit id="93ff54f94640ed8d5a8514b8abd3b2ea4030551c" translate="yes" xml:space="preserve">
          <source>When a defined route matches the requested URI then the application executes the corresponding handler.</source>
          <target state="translated">定義されたルートがリクエストされたURIにマッチした場合、アプリケーションは対応するハンドラを実行します。</target>
        </trans-unit>
        <trans-unit id="1b7fab5e643427d626439833c19237ade0fe0a86" translate="yes" xml:space="preserve">
          <source>When a migration is generated a set of classes are created to describe how your database is structured at that particular moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.</source>
          <target state="translated">マイグレーションが生成されると、その瞬間にデータベースがどのように構造化されているかを記述するクラスのセットが作成されます。これらのクラスは、リモートデータベース上のスキーマ構造を同期させるために使用され、 アプリケーションが実装する新しい変更に対応できるようにデータベースを設定します。移行は、プレーンな PHP を使用してこれらの変換を記述します。</target>
        </trans-unit>
        <trans-unit id="7a117e8f0284043f8f2ed5e4d374f96be60d6401" translate="yes" xml:space="preserve">
          <source>When a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.</source>
          <target state="translated">マイグレーションが生成されると、移行の異なるステップとそれらのステートメントの実行時間を説明するための指示がコンソールに表示されます。最後に、マイグレーションのバージョンが生成されます。</target>
        </trans-unit>
        <trans-unit id="79b9e95b09c0e01026c813f47087d535012422f4" translate="yes" xml:space="preserve">
          <source>When a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data is committed to the database.</source>
          <target state="translated">プロセスが複数のデータベース操作を実行する場合、データの整合性を維持するためには、各ステップが正常に完了していることが重要な場合があります。トランザクションは、データがデータベースにコミットされる前に、すべてのデータベース操作が正常に実行されたことを保証する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="83d8481043d76b2ee30a0021395065329e166852" translate="yes" xml:space="preserve">
          <source>When a project is generated using developer tools. A configuration file can be found in &lt;em&gt;app/config/config.ini&lt;/em&gt; To generate models or scaffold, you will need to change the settings used to connect to your database.</source>
          <target state="translated">開発者ツールを使用してプロジェクトが生成されたとき。構成ファイルは&lt;em&gt;app / config / config.ini&lt;/em&gt;にあります。モデルまたは足場を生成するには、データベースへの接続に使用される設定を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="9abdb8793956c91fcef548daf7794e4b7abb4207" translate="yes" xml:space="preserve">
          <source>When a record is deleted the events related to the delete operation will be executed for each row:</source>
          <target state="translated">レコードが削除されると、削除操作に関連したイベントが各行で実行されます。</target>
        </trans-unit>
        <trans-unit id="53ac2eb71b16d6a3bcdf3374ba548256b038323a" translate="yes" xml:space="preserve">
          <source>When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt; in the target model according to the following table:</source>
          <target state="translated">関連レコードが照会されると、ORMは内部的に適切な条件を構築し、次の表に従ってターゲットモデルで &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; を使用して必要なレコードを取得します。</target>
        </trans-unit>
        <trans-unit id="f9f91827fe3aea528053a947e385c41b4eaea2e1" translate="yes" xml:space="preserve">
          <source>When a route provides named parameters you can receive them in a controller, a view or any other component that extends &lt;a href=&quot;../api/phalcon_di_injectable&quot;&gt;&lt;em&gt;Phalcon\Di\Injectable&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">ルートが名前付きパラメーターを提供する場合、コントローラー、ビュー、または&lt;a href=&quot;../api/phalcon_di_injectable&quot;&gt;&lt;em&gt;Phalcon \ Di \ Injectable&lt;/em&gt;&lt;/a&gt;を拡張するその他のコンポーネントでそれらを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="f3f639dd02c2fae8127af70190790d7e33b38a37" translate="yes" xml:space="preserve">
          <source>When a user tries to access a route that is not defined, the micro application will try to execute the &amp;ldquo;Not-Found&amp;rdquo; handler. An example of that behavior is below:</source>
          <target state="translated">ユーザーが定義されていないルートにアクセスしようとすると、マイクロアプリケーションは「Not-Found」ハンドラーを実行しようとします。その動作の例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="e1302708d125a1d1494fdf0afece1a9b8d85b82b" translate="yes" xml:space="preserve">
          <source>When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:</source>
          <target state="translated">この機能を有効にすると、アプリケーションは永続性から得られた元の値を追跡するために、より多くのメモリを消費します。この機能を有効にしたモデルでは、どのフィールドが変更されたかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="a66a8ba1457958d3970a66adcdd6ef1bf026312c" translate="yes" xml:space="preserve">
          <source>When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the &lt;code&gt;save()&lt;/code&gt; call with &lt;code&gt;create()&lt;/code&gt; or &lt;code&gt;update()&lt;/code&gt;:</source>
          <target state="translated">アプリケーションに多くの競争がある場合、レコードの作成を期待できますが、実際には更新されます。これは、 &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; を使用してレコードをデータベースに永続化した場合に発生する可能性があります。レコードが確実に作成または更新されるようにしたい場合は、 &lt;code&gt;create()&lt;/code&gt; または &lt;code&gt;update()&lt;/code&gt; を使用して &lt;code&gt;save()&lt;/code&gt; 呼び出しを変更できます。</target>
        </trans-unit>
        <trans-unit id="1dce8aec9f5e9e2f5c14631c397228ef7b01d92e" translate="yes" xml:space="preserve">
          <source>When an event called &amp;ldquo;beforeExecuteRoute&amp;rdquo; is triggered the following plugin will be notified:</source>
          <target state="translated">「beforeExecuteRoute」というイベントがトリガーされると、次のプラグインが通知されます。</target>
        </trans-unit>
        <trans-unit id="f70ccec20c61618e4e1059449b34ddbd092cd739" translate="yes" xml:space="preserve">
          <source>When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.</source>
          <target state="translated">挿入、更新、削除が実行されると、モデルは、上の表にリストされたイベント名を持つメソッドがあるかどうかを検証します。</target>
        </trans-unit>
        <trans-unit id="8a072b22e0402fdb6130f12448bff9fd168f10d0" translate="yes" xml:space="preserve">
          <source>When attaching event listeners to the events manager, you can use &amp;ldquo;component&amp;rdquo; to catch all events from that component (eg. &amp;ldquo;db&amp;rdquo; to catch all of the &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt; events) or &amp;ldquo;component:event&amp;rdquo; to target a specific event (eg. &amp;ldquo;db:afterQuery&amp;rdquo;).</source>
          <target state="translated">イベントリスナーにイベントマネージャーをアタッチする場合、「コンポーネント」を使用してそのコンポーネントからすべてのイベントをキャッチできます（たとえば、「db」はすべての&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;イベントをキャッチします）または「component：event」を使用して特定のイベント（例：「db：afterQuery」）。</target>
        </trans-unit>
        <trans-unit id="1892e9d28f351af1945cddeee3b22114cd4f49fe" translate="yes" xml:space="preserve">
          <source>When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:</source>
          <target state="translated">リスナーをアタッチするときに、特定の優先度を設定することができます。この機能を使用して、リスナーを呼び出す順番を指定してアタッチすることができます。</target>
        </trans-unit>
        <trans-unit id="d37edcdc619066b9f070f376210d8a9941305f88" translate="yes" xml:space="preserve">
          <source>When binding parameters, you can use this parameter to define additional casting to the bound parameters increasing even more the security</source>
          <target state="translated">パラメータをバインドする際に、このパラメータを使用してバインドされたパラメータへの追加キャストを定義することで、セキュリティをさらに高めることができます。</target>
        </trans-unit>
        <trans-unit id="f06239b7fc2b18c290b17b16d4892ed94c895d10" translate="yes" xml:space="preserve">
          <source>When browsing the recently generated controller, you will see a search form and a link to create a new Product:</source>
          <target state="translated">最近生成されたコントローラを閲覧すると、検索フォームと新しい製品を作成するためのリンクが表示されます。</target>
        </trans-unit>
        <trans-unit id="a6e0a4658eedab23d0867226d7a45d482a0d8d30" translate="yes" xml:space="preserve">
          <source>When calling macros, parameters can be passed by name:</source>
          <target state="translated">マクロを呼び出す際には、パラメータを名前で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="21f0698fa823f2a978b92186f1f463b65748f407" translate="yes" xml:space="preserve">
          <source>When explicitly defining the relationships between models, it is easy to find related records for a particular record.</source>
          <target state="translated">モデル間の関係を明示的に定義すると、特定のレコードの関連レコードを見つけやすくなります。</target>
        </trans-unit>
        <trans-unit id="22c911d1707a940ee40464d719df6c336ec9b9d8" translate="yes" xml:space="preserve">
          <source>When saving as a JPEG, you can also specify the quality as the second parameter:</source>
          <target state="translated">JPEGとして保存する場合は、2番目のパラメータとして品質を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="b2fa5992497a5378fbf0aca298da9fc880a29cd6" translate="yes" xml:space="preserve">
          <source>When saving, we&amp;rsquo;ll know whether the data conforms to the business rules and validations implemented in the form ProductsForm form (app/forms/ProductsForm.php):</source>
          <target state="translated">保存するときに、データがフォームのProductsFormフォーム（app / forms / ProductsForm.php）に実装されているビジネスルールと検証に準拠しているかどうかがわかります。</target>
        </trans-unit>
        <trans-unit id="fdec3e2bb77fc0eda5c7d6a940def6bab66d3c82" translate="yes" xml:space="preserve">
          <source>When the View component needs to cache something it will request a cache service from the services container. The service name convention for this service is &amp;ldquo;viewCache&amp;rdquo;:</source>
          <target state="translated">Viewコンポーネントが何かをキャッシュする必要がある場合、サービスコンテナからキャッシュサービスをリクエストします。このサービスのサービス名の規則は「viewCache」です。</target>
        </trans-unit>
        <trans-unit id="98be2cd9ceb8d75498179e0406327155d6cc8ea9" translate="yes" xml:space="preserve">
          <source>When the form is submitted, the &amp;ldquo;search&amp;rdquo; action is executed in the controller performing the search based on the data entered by the user.</source>
          <target state="translated">フォームが送信されると、ユーザーが入力したデータに基づいて検索を実行するコントローラーで「検索」アクションが実行されます。</target>
        </trans-unit>
        <trans-unit id="273b9e868727ea4d0c70e72e4d7a7b664816675d" translate="yes" xml:space="preserve">
          <source>When the joined model has a many-to-many relation to the &amp;lsquo;from&amp;rsquo; model, the intermediate model is implicitly added to the generated query:</source>
          <target state="translated">結合されたモデルに「from」モデルとの多対多の関係がある場合、中間モデルが暗黙的に生成されたクエリに追加されます。</target>
        </trans-unit>
        <trans-unit id="c72ca045b0c87407ac0c63ae0f1b4fff2846d5d7" translate="yes" xml:space="preserve">
          <source>When to implement cache?</source>
          <target state="translated">キャッシュを実装するタイミングは?</target>
        </trans-unit>
        <trans-unit id="51b53d6eeffdd56febef427d67e5b5901bc92fd1" translate="yes" xml:space="preserve">
          <source>When using high-level abstraction components such as &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; to access a database, it is difficult to understand which statements are finally sent to the database system. &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; is supported internally by &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;. &lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon\Logger&lt;/em&gt;&lt;/a&gt; interacts with &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;などの高レベルの抽象化コンポーネントを使用してデータベースにアクセスする場合、最終的にデータベースシステムに送信されるステートメントを理解することは困難です。&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;は、&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;によって内部的にサポートされています。&lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon \ Logger&lt;/em&gt;&lt;/a&gt;は&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;と対話して、データベース抽象化レイヤーにロギング機能を提供し、SQLステートメントの発生を記録できるようにします。</target>
        </trans-unit>
        <trans-unit id="9099f7b9508534d2195e522e1a7c638c11ded441" translate="yes" xml:space="preserve">
          <source>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case &amp;ldquo;1&amp;rdquo; or &amp;ldquo;2&amp;rdquo; are considered strings and not numbers, so the placeholder could not be successfully replaced.</source>
          <target state="translated">数値のプレースホルダーを使用する場合は、整数（1または2）として定義する必要があります。この場合、「1」または「2」は数字ではなく文字列と見なされるため、プレースホルダーを正常に置き換えることができません。</target>
        </trans-unit>
        <trans-unit id="eecf2112ef106256653a842d086b063145e5f399" translate="yes" xml:space="preserve">
          <source>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case &amp;ldquo;1&amp;rdquo; or &amp;ldquo;2&amp;rdquo; are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter data are automatically escaped using &lt;a href=&quot;http://www.php.net/manual/en/pdo.quote.php&quot;&gt;PDO Quote&lt;/a&gt;.</source>
          <target state="translated">数値のプレースホルダーを使用する場合は、整数（1または2）として定義する必要があります。この場合、「1」または「2」は数字ではなく文字列と見なされるため、プレースホルダーを正常に置き換えることができません。アダプタを使用すると、データは&lt;a href=&quot;http://www.php.net/manual/en/pdo.quote.php&quot;&gt;PDO Quote&lt;/a&gt;を使用して自動的にエスケープされます。</target>
        </trans-unit>
        <trans-unit id="02bceea3a6b0fe66bc77ea9213c2e1006343c9e2" translate="yes" xml:space="preserve">
          <source>When using views, caching can be used to prevent controllers from needing to generate view data on each request.</source>
          <target state="translated">ビューを使用する場合、キャッシュを使用して、コントローラが各リクエストでビューデータを生成する必要がないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="828151ae998ddcd95f506ef6e3053bea94e46e26" translate="yes" xml:space="preserve">
          <source>When validations are organized in classes, you can implement the &lt;code&gt;beforeValidation()&lt;/code&gt; and &lt;code&gt;afterValidation()&lt;/code&gt; methods to perform additional checks, filters, clean-up, etc. If the &lt;code&gt;beforeValidation()&lt;/code&gt; method returns false the validation is automatically cancelled:</source>
          <target state="translated">検証がクラスで編成されている場合、 &lt;code&gt;beforeValidation()&lt;/code&gt; および &lt;code&gt;afterValidation()&lt;/code&gt; メソッドを実装して、追加のチェック、フィルター、クリーンアップなどを実行できます &lt;code&gt;beforeValidation()&lt;/code&gt; メソッドがfalseを返す場合、検証は自動的にキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="24dd4c7e19bec284cf1e635f7f52f8f127abf6a7" translate="yes" xml:space="preserve">
          <source>When we do not define a key to the cache, the component automatically creates one using an &lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;MD5&lt;/a&gt; hash of the name of the controller and view currently being rendered in the format of &amp;ldquo;controller/view&amp;rdquo;. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.</source>
          <target state="translated">キャッシュへのキーを定義しない場合、コンポーネントは、「コントローラー/ビュー」の形式で現在レンダリングされているコントローラーとビューの名前の&lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;MD5&lt;/a&gt;ハッシュを使用してキーを自動的に作成します。各ビューに関連付けられたキャッシュを簡単に識別できるように、各アクションのキーを定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="931532183d0626b70f06de9bcaab71671d7e94da" translate="yes" xml:space="preserve">
          <source>When you add a route using simply &lt;code&gt;add()&lt;/code&gt;, the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:</source>
          <target state="translated">単に &lt;code&gt;add()&lt;/code&gt; を使用してルートを追加すると、そのルートはすべてのHTTPメソッドで有効になります。ルートを特定のメソッドに制限できる場合があります。これは、RESTfulアプリケーションを作成するときに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4f8e1fdc9785ec989884c7f57773e6313bc1ee0e" translate="yes" xml:space="preserve">
          <source>When you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:</source>
          <target state="translated">あるオプションと別のオプションの間をブラウズすると、タイトルが動的に変化し、現在作業している場所を示していることがわかります。これは各コントローラのイニシャライザで実現されています。</target>
        </trans-unit>
        <trans-unit id="f7e3eb525f2bbab45c87a529b6dda380398bcae0" translate="yes" xml:space="preserve">
          <source>When you request a service to the service container, if it can&amp;rsquo;t find out a service with the same name it&amp;rsquo;ll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:</source>
          <target state="translated">サービスコンテナーにサービスを要求すると、同じ名前のサービスが見つからない場合は、同じ名前のクラスをロードしようとします。この動作により、サービスをその名前で登録するだけで、任意のクラスを別のクラスに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="34667f95a0339c56cd8154cf50e3440321a73cfd" translate="yes" xml:space="preserve">
          <source>When your application is accessed without any route, the &amp;lsquo;/&amp;rsquo; route is used to determine what paths must be used to show the initial page in your website/application:</source>
          <target state="translated">ルートなしでアプリケーションにアクセスする場合、「/」ルートを使用して、Webサイト/アプリケーションの最初のページを表示するために使用する必要があるパスを決定します。</target>
        </trans-unit>
        <trans-unit id="1606eca12141234961e1df0b106114b4df560613" translate="yes" xml:space="preserve">
          <source>Whenever forms are implemented as classes, the callbacks: &lt;code&gt;beforeValidation()&lt;/code&gt; and &lt;code&gt;afterValidation()&lt;/code&gt; can be implemented in the form&amp;rsquo;s class to perform pre-validations and post-validations:</source>
          <target state="translated">フォームがクラスとして実装されている場合は常に、コールバック： &lt;code&gt;beforeValidation()&lt;/code&gt; および &lt;code&gt;afterValidation()&lt;/code&gt; をフォームのクラスに実装して、事前検証と事後検証を実行できます。</target>
        </trans-unit>
        <trans-unit id="2a38b806ff1b3ec2d27698282e6b051b898d6aaf" translate="yes" xml:space="preserve">
          <source>Whether Phalcon must check if exists differences between the template file and its compiled path</source>
          <target state="translated">テンプレートファイルとコンパイルされたパスの間に差分が存在するかどうかをPhalconがチェックするかどうか</target>
        </trans-unit>
        <trans-unit id="bd3de0c7aee8353bf60f998b53e1a2e1f3a03c86" translate="yes" xml:space="preserve">
          <source>Whether automatic rendering is enabled</source>
          <target state="translated">自動レンダリングが有効かどうか</target>
        </trans-unit>
        <trans-unit id="b7d114908a004134a3b37a72f5bd703bf94a8cb8" translate="yes" xml:space="preserve">
          <source>Whether you&amp;rsquo;re using PHP 5.3 or &amp;gt;= 5.4 you can create arrays by enclosing a list of values in square brackets:</source>
          <target state="translated">PHP 5.3または&amp;gt; = 5.4のどちらを使用していても、値のリストを角括弧で囲むことで配列を作成できます。</target>
        </trans-unit>
        <trans-unit id="29569e76fa063671e1b8a375c0f45fe0a204829c" translate="yes" xml:space="preserve">
          <source>Which in PHP is the same as:</source>
          <target state="translated">PHPでいうところの</target>
        </trans-unit>
        <trans-unit id="64637b75ea59137e99115ec01ab0bd538357587c" translate="yes" xml:space="preserve">
          <source>Which is always true no matter what the login stored in the database is.</source>
          <target state="translated">これは、データベースに保存されているログインが何であっても、常に真です。</target>
        </trans-unit>
        <trans-unit id="62c2db48d1e343de6e5ce709ea8a8676a24609fa" translate="yes" xml:space="preserve">
          <source>Which means, the local attribute &amp;ldquo;product_types_id&amp;rdquo; in &amp;ldquo;Products&amp;rdquo; has an one-to-many relation to the &amp;ldquo;ProductTypes&amp;rdquo; model in its attribute &amp;ldquo;id&amp;rdquo;. By defining this relationship we can access the name of the product type by using:</source>
          <target state="translated">つまり、「Products」のローカル属性「product_types_id」は、属性「id」の「ProductTypes」モデルと1対多の関係にあります。この関係を定義することにより、次を使用して製品タイプの名前にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="62c5f4811908a48931ab40201b42105cd044fe2b" translate="yes" xml:space="preserve">
          <source>Which produces the following:</source>
          <target state="translated">どちらが次のようなものを生み出します。</target>
        </trans-unit>
        <trans-unit id="3631991286d3139c1de9a41ef4982f8e5d886ce2" translate="yes" xml:space="preserve">
          <source>Which produces:</source>
          <target state="translated">どっちが産むんだ?</target>
        </trans-unit>
        <trans-unit id="de703a0d0791b6ae1c5272f119f8f1791f8c7326" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;findFirst()&lt;/code&gt; returns directly an instance of the called class (when there is data to be returned), the &lt;code&gt;find()&lt;/code&gt; method returns a &lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Simple&lt;/em&gt;&lt;/a&gt;. This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.</source>
          <target state="translated">しばらく &lt;code&gt;findFirst()&lt;/code&gt; を返すと呼ばれるクラスのインスタンスを直接、（返されるデータがある場合） &lt;code&gt;find()&lt;/code&gt; メソッドが返す&lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon \ MVC \モデル\結果セット\シンプルに&lt;/em&gt;&lt;/a&gt;。これは、トラバース、特定のレコードの検索、カウントなど、結果セットが持つすべての機能をカプセル化するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="331840c0871c992edf687856e384f05f57fa492d" translate="yes" xml:space="preserve">
          <source>While a transaction is active, the transaction manager will always return the same transaction across the application.</source>
          <target state="translated">トランザクションがアクティブな間は、トランザクションマネージャは常にアプリケーション全体で同じトランザクションを返します。</target>
        </trans-unit>
        <trans-unit id="f7f185ab98fab28518c0e3c431d9cbc97a4e3dc4" translate="yes" xml:space="preserve">
          <source>While you can find more sophisticated PHP extensions to address queueing in your applications like &lt;a href=&quot;http://pecl.php.net/package/amqp&quot;&gt;RabbitMQ&lt;/a&gt;; Phalcon provides a client for &lt;a href=&quot;http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/&quot;&gt;Beanstalk&lt;/a&gt;, a job queueing backend inspired by &lt;a href=&quot;http://memcached.org/&quot;&gt;Memcache&lt;/a&gt;. It&amp;rsquo;s simple, lightweight, and completely specialized for job queueing.</source>
          <target state="translated">&lt;a href=&quot;http://pecl.php.net/package/amqp&quot;&gt;RabbitMQの&lt;/a&gt;ようなアプリケーションのキューイングに対処するためのより洗練されたPHP拡張機能を見つけることができますが、Phalconは、&lt;a href=&quot;http://memcached.org/&quot;&gt;Memcacheに&lt;/a&gt;触発されたジョブキューバックエンドである&lt;a href=&quot;http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/&quot;&gt;Beanstalkの&lt;/a&gt;クライアントを提供します。シンプルで軽量で、ジョブキューイングに完全に特化しています。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="b150eb9ffcffc7f979e49a9779092b9119236b54" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon\Http\Response&lt;/em&gt;&lt;/a&gt; you can also execute HTTP redirections:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon \のHttp \レスポンス&lt;/em&gt;&lt;/a&gt;あなたはまた、HTTPリダイレクトを実行することができます。</target>
        </trans-unit>
        <trans-unit id="12aee04efa3f16cc579e0fcefad279d543b4450e" translate="yes" xml:space="preserve">
          <source>With PHQL it&amp;rsquo;s possible to insert data using the familiar INSERT statement:</source>
          <target state="translated">PHQLでは、使い慣れたINSERTステートメントを使用してデータを挿入できます。</target>
        </trans-unit>
        <trans-unit id="9ae89758dcd28a96539b17005927284fa9fca0b0" translate="yes" xml:space="preserve">
          <source>With Phalcon you can create &amp;ldquo;Micro-Framework like&amp;rdquo; applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to implement small applications, APIs and prototypes in a practical way.</source>
          <target state="translated">Phalconを使用すると、「マイクロフレームワークのような」アプリケーションを作成できます。これにより、PHPアプリケーションを作成するために最小限のコードを書くだけで済みます。マイクロアプリケーションは、小さなアプリケーション、API、プロトタイプを実用的な方法で実装するのに適しています。</target>
        </trans-unit>
        <trans-unit id="2dd3e303a2830f06ede5a5e28fc32f5a2ebebc3e" translate="yes" xml:space="preserve">
          <source>With Phalcon you can create &amp;ldquo;Micro-Framework like&amp;rdquo; applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to small applications, APIs and prototypes in a practical way.</source>
          <target state="translated">Phalconを使用すると、「マイクロフレームワークのような」アプリケーションを作成できます。これにより、PHPアプリケーションを作成するために最小限のコードを書くだけで済みます。マイクロアプリケーションは、小規模なアプリケーション、API、プロトタイプに実用的に適しています。</target>
        </trans-unit>
        <trans-unit id="c1394c3e92839dc7281bd2db9b88733ef982e3b1" translate="yes" xml:space="preserve">
          <source>With Volt it&amp;rsquo;s easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:</source>
          <target state="translated">Voltを使用すると、キャッシュビューのフラグメントを簡単に作成できます。このキャッシュによりパフォーマンスが向上し、ビューが表示されるたびにブロックのコンテンツがPHPによって実行されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="9ab515e1617e9e326951ad81fcd2bba9133648a8" translate="yes" xml:space="preserve">
          <source>With extensions the developer has more flexibility to extend the template engine, and override the compilation of a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.</source>
          <target state="translated">拡張機能を使用すると、開発者はテンプレートエンジンを拡張したり、特定の命令のコンパイルをオーバーライドしたり、式や演算子の動作を変更したり、関数/フィルタを追加したりと、より柔軟に対応することができます。</target>
        </trans-unit>
        <trans-unit id="92017a806c5172f20bdafbc8c56b626f811a509e" translate="yes" xml:space="preserve">
          <source>With it, we can load classes using various strategies but for this example we have chosen to locate classes based on predefined directories:</source>
          <target state="translated">これを使って、様々な戦略を使ってクラスをロードすることができますが、この例では定義済みのディレクトリに基づいてクラスを見つけることにしました。</target>
        </trans-unit>
        <trans-unit id="fc3f927e511cb6838afcbd0beadc2e8452ec2fa5" translate="yes" xml:space="preserve">
          <source>With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define &lt;em&gt;blocks&lt;/em&gt; than can be overridden by a child template. Let&amp;rsquo;s pretend that we have the following base template:</source>
          <target state="translated">テンプレートの継承を使用すると、他のテンプレートで拡張できる基本テンプレートを作成して、コードを再利用できます。基本テンプレートは、子テンプレートで上書きできる&lt;em&gt;ブロックを&lt;/em&gt;定義します。次の基本テンプレートがあるとします。</target>
        </trans-unit>
        <trans-unit id="e8b35e26f5beb22e6df9b1d2a9d5e63af83045d8" translate="yes" xml:space="preserve">
          <source>With the above events can also define business rules in the models:</source>
          <target state="translated">上記のイベントでもモデルのビジネスルールを定義することができます。</target>
        </trans-unit>
        <trans-unit id="fdba615370ea766f79fec6393be6063d846819c0" translate="yes" xml:space="preserve">
          <source>With the aliasing we can get the related records easily:</source>
          <target state="translated">エイリアスを使用して、我々は簡単に関連するレコードを取得することができます。</target>
        </trans-unit>
        <trans-unit id="3b9b2f7fc46cfd267a2407ec3b4d02af4cee9f26" translate="yes" xml:space="preserve">
          <source>With the correct database parameters, our models are ready to work and interact with the rest of the application.</source>
          <target state="translated">正しいデータベースパラメータがあれば、私たちのモデルは動作し、アプリケーションの残りの部分と相互作用する準備ができています。</target>
        </trans-unit>
        <trans-unit id="571f13ccb674431d92ad5e4ca0266d2737454c6b" translate="yes" xml:space="preserve">
          <source>With the help of &lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Criteria&lt;/em&gt;&lt;/a&gt;, we can create the search conditions intelligently based on the data types and values sent from the form:</source>
          <target state="translated">助けを借りて&lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon \ MVC \モデル\基準&lt;/em&gt;&lt;/a&gt;、我々はインテリジェントフォームから送信されたデータ型と値に基づいて検索条件を作成することができます。</target>
        </trans-unit>
        <trans-unit id="6bb74d931f0e201329dc454c44084cc0fd611a2b" translate="yes" xml:space="preserve">
          <source>With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute.</source>
          <target state="translated">この属性を持つ列は自動的にオートインクリメント整数で埋められます。この属性を持つことができるのは、テーブル内の一つのカラムだけです。</target>
        </trans-unit>
        <trans-unit id="bca183d5ff03edbab0f9b54bf38dcc0ae4c9f229" translate="yes" xml:space="preserve">
          <source>With this component you can load files from other projects or vendors, this autoloader is &lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt; and &lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4.md&quot;&gt;PSR-4&lt;/a&gt; compliant.</source>
          <target state="translated">このコンポーネントを使用すると、他のプロジェクトまたはベンダーからファイルをロードできます。このオートローダーは&lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt;および&lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4.md&quot;&gt;PSR-4に&lt;/a&gt;準拠しています。</target>
        </trans-unit>
        <trans-unit id="59c33bb3490b69b2f0875fb0be78e0c4548b8c58" translate="yes" xml:space="preserve">
          <source>With this component you can run various types of MVC structures:</source>
          <target state="translated">このコンポーネントを使用すると、様々なタイプのMVC構造を実行することができます。</target>
        </trans-unit>
        <trans-unit id="65047449eb33f65b77689b66f45e12c90886be9c" translate="yes" xml:space="preserve">
          <source>With this option, &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; reads the latest available data, setting exclusive locks on each row it reads</source>
          <target state="translated">このオプションを使用すると、&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;は利用可能な最新のデータを読み取り、読み取った各行に排他ロックを設定します</target>
        </trans-unit>
        <trans-unit id="92525f41f347b8ad687f3969a45f0cf0fb479dc9" translate="yes" xml:space="preserve">
          <source>With this option, &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; reads the latest available data, setting shared locks on each row it reads</source>
          <target state="translated">このオプションを使用すると、&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;は利用可能な最新のデータを読み取り、読み取った各行に共有ロックを設定します</target>
        </trans-unit>
        <trans-unit id="92bf7ef7eee904f2e84abe225b76f4c9f60f0717" translate="yes" xml:space="preserve">
          <source>Without precautions mass assignment could allow attackers to set any database column&amp;rsquo;s value. Only use this feature if you want to permit a user to insert/update every column in the model, even if those fields are not in the submitted form.</source>
          <target state="translated">予防策を講じないと、大量割り当てにより、攻撃者がデータベースの列の値を設定できる可能性があります。これらのフィールドが送信されたフォームにない場合でも、ユーザーがモデルのすべての列を挿入/更新できるようにする場合にのみ、この機能を使用します。</target>
        </trans-unit>
        <trans-unit id="37fe0177d606cfa59a4d93ee1d2bad664a844cdf" translate="yes" xml:space="preserve">
          <source>Working with Headers</source>
          <target state="translated">ヘッダーを使った作業</target>
        </trans-unit>
        <trans-unit id="8c84ada7a717287fe901f3bfb7ddb5cf18ca4b52" translate="yes" xml:space="preserve">
          <source>Working with Models</source>
          <target state="translated">モデルを使った作業</target>
        </trans-unit>
        <trans-unit id="fd17756158efb6178fb9a1acbd538178df3fe877" translate="yes" xml:space="preserve">
          <source>Working with Models (Advanced)</source>
          <target state="translated">モデルを使った作業 (上級編)</target>
        </trans-unit>
        <trans-unit id="2e75b91a6f60621dd5a0eded58a02477b1eca721" translate="yes" xml:space="preserve">
          <source>Working with Namespaces</source>
          <target state="translated">名前空間を使用した作業</target>
        </trans-unit>
        <trans-unit id="fb1c38649c98ffe87ba118a08aca2a91c6784f10" translate="yes" xml:space="preserve">
          <source>Working with Responses</source>
          <target state="translated">レスポンスを使った作業</target>
        </trans-unit>
        <trans-unit id="3c4a52354dd70484dde6a923fb77add43ecd69ca" translate="yes" xml:space="preserve">
          <source>Working with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:</source>
          <target state="translated">トランザクションでの作業はPDOと同様にサポートされています。トランザクション内のデータ操作を実行すると、多くの場合、ほとんどのデータベースシステム上でのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="a517b8972e98c5f7adba281ad2953a061afad91c" translate="yes" xml:space="preserve">
          <source>Write applications using your own conventions</source>
          <target state="translated">独自の規約を使ってアプリケーションを書く</target>
        </trans-unit>
        <trans-unit id="836d04846c01e01379bf603269db22ee38f2873a" translate="yes" xml:space="preserve">
          <source>Writes an attribute value by its name</source>
          <target state="translated">属性値を名前を付けて書き込みます。</target>
        </trans-unit>
        <trans-unit id="062dc9589e27c09b89acf3ae037a02dc25024c51" translate="yes" xml:space="preserve">
          <source>Writes data to the socket. Performs a connection if none is available</source>
          <target state="translated">ソケットにデータを書き込みます。接続ができない場合は、接続を実行します。</target>
        </trans-unit>
        <trans-unit id="50842e02142d8a91c92cb804adf228035e04887c" translate="yes" xml:space="preserve">
          <source>Writes meta-data for certain model using a MODEL_* constant</source>
          <target state="translated">MODEL_*定数を使用して、特定のモデルのメタデータを書き込みます。</target>
        </trans-unit>
        <trans-unit id="3be275e88f204322412720a3337406b5ff8a075d" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to APC</source>
          <target state="translated">解析されたアノテーションを APC に書き込む</target>
        </trans-unit>
        <trans-unit id="7e2a1df7a4bcc8ab4123d1ce42a0895cc3b8a750" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to XCache</source>
          <target state="translated">解析されたアノテーションを XCache に書き込みます。</target>
        </trans-unit>
        <trans-unit id="ef182e395b91120238d05beedb86f74808d61f62" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to files</source>
          <target state="translated">解析されたアノテーションをファイルに書き込む</target>
        </trans-unit>
        <trans-unit id="26abb6ffa31c55b38e96d2a83b54732a712c3a05" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to memory</source>
          <target state="translated">解析されたアノテーションをメモリに書き込む</target>
        </trans-unit>
        <trans-unit id="44ce4593952ee58144509a16b320c7e7afc45b32" translate="yes" xml:space="preserve">
          <source>Writes the log to the file itself</source>
          <target state="translated">ログをファイル自体に書き込む</target>
        </trans-unit>
        <trans-unit id="0582f5f68c7721bd461ab1efa01979b2ff0a5f81" translate="yes" xml:space="preserve">
          <source>Writes the log to the stream itself</source>
          <target state="translated">ストリーム自体にログを書き込む</target>
        </trans-unit>
        <trans-unit id="c2120fd43f7ca0c179ba2da9ddc3a4edda59defb" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to $_SESSION</source>
          <target state="translated">メタデータを $_SESSION に書き込みます。</target>
        </trans-unit>
        <trans-unit id="7627f86e35255d21b31efe2c1ba2d12810c4cc47" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to APC</source>
          <target state="translated">メタデータをAPCに書き込む</target>
        </trans-unit>
        <trans-unit id="ff08857312de067edc5ed687a8407106d077ccb5" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to files</source>
          <target state="translated">メタデータをファイルに書き込む</target>
        </trans-unit>
        <trans-unit id="de1e61413fcea62f007afad4ffbaca8157a51bdc" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to temporal memory</source>
          <target state="translated">メタデータをテンポラリメモリに書き込む</target>
        </trans-unit>
        <trans-unit id="0722f28a63e893b49c8f44e0627f865ec8af24f7" translate="yes" xml:space="preserve">
          <source>Writes the metadata to Memcache</source>
          <target state="translated">メタデータをMemcacheに書き込む</target>
        </trans-unit>
        <trans-unit id="63e44ab7d41bfd2ca4d7a3cf3098053d54c5ec56" translate="yes" xml:space="preserve">
          <source>Writes the metadata to Redis</source>
          <target state="translated">メタデータをRedisに書き込む</target>
        </trans-unit>
        <trans-unit id="aaaa237864f82f7bf4f80a7ca3f2564027408745" translate="yes" xml:space="preserve">
          <source>Writes the metadata to XCache</source>
          <target state="translated">メタデータをXCacheに書き込みます。</target>
        </trans-unit>
        <trans-unit id="9219890d4f87c407bc45c311d4a444948868d9ed" translate="yes" xml:space="preserve">
          <source>Writing Migrations</source>
          <target state="translated">移行の記述</target>
        </trans-unit>
        <trans-unit id="9a0b840a58215e14e46da70d6a476cbd645ffa98" translate="yes" xml:space="preserve">
          <source>Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;, which in turn offers view helpers to generate HTML markup.</source>
          <target state="translated">HTMLマークアップの作成と保守は、命名規則と考慮に入れなければならない多数の属性のため、すぐに退屈な作業になる可能性があります。Phalconは&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tagを&lt;/em&gt;&lt;/a&gt;提供することでこの複雑さに対処します&lt;em&gt;。Phalcon\ Tagは&lt;/em&gt;、HTMLマークアップを生成するビューヘルパーを提供します。</target>
        </trans-unit>
        <trans-unit id="903531ec8049bd12e60cb7af94a1e6b9912eee88" translate="yes" xml:space="preserve">
          <source>Writing proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.</source>
          <target state="translated">適切なテストを書くことは、より良いソフトウェアを書くのに役立ちます。適切なテストケースを設定すれば、ほとんどの機能的なバグを排除し、より良いソフトウェアを維持することができます。</target>
        </trans-unit>
        <trans-unit id="649794435dcda7b54370c60849e79139c2b220ff" translate="yes" xml:space="preserve">
          <source>XAMPP is always releasing 32 bit versions of Apache and PHP. You will need to download the x86 version of Phalcon for Windows from the download section.</source>
          <target state="translated">XAMPPは常にApacheとPHPの32ビット版をリリースしています。Phalcon for Windowsのx86版をダウンロードセクションからダウンロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="cc093308deea83fd2aeaa3af8cbd83fe96fd0d08" translate="yes" xml:space="preserve">
          <source>XCache</source>
          <target state="translated">XCache</target>
        </trans-unit>
        <trans-unit id="3a6f1b4093fa70ccee926f4bbe00ed450305de6c" translate="yes" xml:space="preserve">
          <source>XCache Backend Options</source>
          <target state="translated">XCache バックエンド オプション</target>
        </trans-unit>
        <trans-unit id="b35e5f7ba4a7c37d8a2ae3d634058efc3b3a617a" translate="yes" xml:space="preserve">
          <source>XCode</source>
          <target state="translated">XCode</target>
        </trans-unit>
        <trans-unit id="e52fc4f86a5c0add8ff97f5b705fb94972f63b77" translate="yes" xml:space="preserve">
          <source>XHTML 1.0 Frameset</source>
          <target state="translated">XHTML 1.0 フレームセット</target>
        </trans-unit>
        <trans-unit id="b01425e5f9319514d337f3d865afaabab7c357fd" translate="yes" xml:space="preserve">
          <source>XHTML 1.0 Strict</source>
          <target state="translated">XHTML 1.0 厳格</target>
        </trans-unit>
        <trans-unit id="bf19195a1f391c057de833f7d9ff8facbdd4b827" translate="yes" xml:space="preserve">
          <source>XHTML 1.0 Transitional</source>
          <target state="translated">XHTML 1.0 暫定版</target>
        </trans-unit>
        <trans-unit id="fde3e74e5ca9a39d0634e83ec34394d9d6034656" translate="yes" xml:space="preserve">
          <source>XHTML 1.1</source>
          <target state="translated">XHTML 1.1</target>
        </trans-unit>
        <trans-unit id="a0048077fbb7a26bc7816e856de6f4e35f56d09b" translate="yes" xml:space="preserve">
          <source>XHTML 2.0</source>
          <target state="translated">XHTML2.</target>
        </trans-unit>
        <trans-unit id="a5b23d6fc7ce7d7571a890f116dcceaefab3b83c" translate="yes" xml:space="preserve">
          <source>XHTML 5</source>
          <target state="translated">XHTML 5</target>
        </trans-unit>
        <trans-unit id="b8f0a77cb55fa4c63d43c1fbfc0d0be409630b1e" translate="yes" xml:space="preserve">
          <source>XHTML10_FRAMESET</source>
          <target state="translated">XHTML10_FRAMESET</target>
        </trans-unit>
        <trans-unit id="315afe7220ca2781fc95d4633d84b9bd7531dae4" translate="yes" xml:space="preserve">
          <source>XHTML10_STRICT</source>
          <target state="translated">XHTML10_STRICT</target>
        </trans-unit>
        <trans-unit id="3de06fc60e3450108ee5ad9375cf5c87b4c1a357" translate="yes" xml:space="preserve">
          <source>XHTML10_TRANSITIONAL</source>
          <target state="translated">XHTML10_TRANSITIONAL</target>
        </trans-unit>
        <trans-unit id="65f40dc271253cbbd4c7b589f20970dbcb38aaaa" translate="yes" xml:space="preserve">
          <source>XHTML11</source>
          <target state="translated">XHTML11</target>
        </trans-unit>
        <trans-unit id="593f24d0aa4d3ef04ca75325d134a134eb97cf82" translate="yes" xml:space="preserve">
          <source>XHTML20</source>
          <target state="translated">XHTML20</target>
        </trans-unit>
        <trans-unit id="23de615f0189ee5a69173344d9cc40519804ba3d" translate="yes" xml:space="preserve">
          <source>XHTML5</source>
          <target state="translated">XHTML5</target>
        </trans-unit>
        <trans-unit id="aa569942278f615a6b3fd0fb262d5b661ff27759" translate="yes" xml:space="preserve">
          <source>Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the &lt;a href=&quot;http://xdebug.org/docs&quot;&gt;XDebug documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Xdebugは、Phalconを使用したアプリケーションの実行に関するデバッグおよびトレース情報を取得するいくつかの方法を提供します。詳細については、&lt;a href=&quot;http://xdebug.org/docs&quot;&gt;XDebugのドキュメント&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="6deeea2ec4a85675e737b739eada89c02e1cf8b1" translate="yes" xml:space="preserve">
          <source>Xhprof provides a built-in HTML viewer to analyze the profiled data:</source>
          <target state="translated">Xhprofは、プロファイリングされたデータを解析するためのHTMLビューアを内蔵しています。</target>
        </trans-unit>
        <trans-unit id="8fff039853f5c2bbb8a28d056b579c7dcb7d137f" translate="yes" xml:space="preserve">
          <source>YES</source>
          <target state="translated">YES</target>
        </trans-unit>
        <trans-unit id="5128e0f852026daee6c173fef45d8de1506f0606" translate="yes" xml:space="preserve">
          <source>YES (already stopped)</source>
          <target state="translated">はい(停止済み)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
