<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="jsdoc">
    <body>
      <group id="jsdoc">
        <trans-unit id="681784548ee26a8429685ab82f020dea30b41f8c" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2017 the contributors to the JSDoc 3 documentation project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68ab730d006c417479d13759c5367de8968b2f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-abstract&quot;&gt;@abstract&lt;/a&gt; (synonyms: @virtual)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88efa7ad6ad2be466c30c00aca73ad742f0a09cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-augments&quot;&gt;@augments&lt;/a&gt; (synonyms: @extends)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ae16e5f59b73276c0017a41df0410004aef9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-class&quot;&gt;@class&lt;/a&gt; (synonyms: @constructor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011dff7e09f2bc4a42ab5e02db98c3da0f25cb13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-constant&quot;&gt;@constant&lt;/a&gt; (synonyms: @const)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00812a9ed4635cd74e14882f26e5836e79ef9de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-default&quot;&gt;@default&lt;/a&gt; (synonyms: @defaultvalue)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d037ec551719fbfc794a84a7c3fe4803528b5122" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-description&quot;&gt;&lt;code&gt;@description&lt;/code&gt;&lt;/a&gt; (including untagged descriptions at the start of a JSDoc comment)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20aa9bfad0fbff06bce5b9e0874115a399439e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-description&quot;&gt;@description&lt;/a&gt; (synonyms: @desc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d92e68aaf8f3d2f9990a1814742ba083787a4a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-external&quot;&gt;@external&lt;/a&gt; (synonyms: @host)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4c91783a5eedb7f5fd7d3803e1b21e1586c79d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-file&quot;&gt;@file&lt;/a&gt; (synonyms: @fileoverview, @overview)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058ec8f22b1818467c1c66418c11294daf793ef9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-fires&quot;&gt;@fires&lt;/a&gt; (synonyms: @emits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7770f28980c8eb7029bb6e0b4f60ae8f5e0157" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-function&quot;&gt;@function&lt;/a&gt; (synonyms: @func, @method)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786b8c1e734c1fe20a267628621c73b967466c5a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-inline-link&quot;&gt;Inline &lt;code&gt;{@link}&lt;/code&gt; tags&lt;/a&gt; are rendered in plain text (&lt;code&gt;templates.cleverLinks&lt;/code&gt;, &lt;code&gt;templates.monospaceLinks&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfefe62b232ea0a3894654b8c02f437e5ad735a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-inline-link&quot;&gt;{@link}&lt;/a&gt; (synonyms: {@linkcode}, {@linkplain})</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2563ac70d47748b110b4ad39f794e7a6fc425f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-member&quot;&gt;@member&lt;/a&gt; (synonyms: @var)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230a50196e250799eabbc4e89e5a5eaa9af96377" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-param&quot;&gt;@param&lt;/a&gt; (synonyms: @arg, @argument)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9bf1d00a6a39e9fae198ac5bd587fe879dff8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-property&quot;&gt;@property&lt;/a&gt; (synonyms: @prop)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faf502668122058e3f3137dcd753f884c3c28e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-returns&quot;&gt;@returns&lt;/a&gt; (synonyms: @return)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3b76698c71a3d467bf24bad644a4fd931f71cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-throws&quot;&gt;@throws&lt;/a&gt; (synonyms: @exception)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e4050f3a991b97158fa229aedf6f7f7ae91bc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags-yields&quot;&gt;@yields&lt;/a&gt; (synonyms: @yield)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67266e5d8f9f5d6c8d99d201c3e2a1ec1d874d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-P&lt;/code&gt;, &lt;code&gt;--package&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b681f42727096ef7be0631c0226d0ae5f4a4db49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-R&lt;/code&gt;, &lt;code&gt;--readme&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f2fbc1514b908557bce8a705a5c027749f5f64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-T&lt;/code&gt;, &lt;code&gt;--test&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3034c4fe31a05dc0f0e76a1b21e1bee86307549c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-X&lt;/code&gt;, &lt;code&gt;--explain&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af31a47351203509347cefac800842fd93e91fcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--access &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85db6a5ef1cf6186b87791b4044ea30c54a8fdf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--configure &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840352a132d3d02f52bdb6f54e8fd226851332cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--destination &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c34a21f1b4b32bad5cf12c250b67bd789028396" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--encoding &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e245af5917e5b31a395ca66ac323795a9a17904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bfdb628893d970b052fb81761e50085a5ededc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;--private&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff97caa972ab7071f094a8195ab75dfdb8d7cba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--query &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a11165da220c7d7e5bfdbf325fb0c11ac83b75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;--recurse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6133f58b590e798c2f418ed12a410fc12ec523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--template &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f0bb40d3f8f8aa92963f928fa22fe78fd29df4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u &amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;--tutorials &amp;lt;value&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841b508fd635e875034c77d3e653179728b7033e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;--version&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b215524b44d68151d438b1c486eb8f8b8f833f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.markdown&lt;/code&gt; (converted from Markdown to HTML)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec797b9e22ed67bb366a3ca44a1d34cbebd65670" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.md&lt;/code&gt; (converted from Markdown to HTML)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a79e529e87b035cb4ec4fb9f4dcf6e872906b51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.xml&lt;/code&gt; (treated as HTML)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab3774f005d0a037690612c13f1c5e9b4b7b71d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@access package&lt;/code&gt; is the same as &lt;code&gt;@package&lt;/code&gt;. This option is available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0891cbc0ac07b8d3c6768ff7cedc4d1c94ba3803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@access private&lt;/code&gt; is the same as &lt;code&gt;@private&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f0d92184682658068c847876a5c89676242cb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@access protected&lt;/code&gt; is the same as &lt;code&gt;@protected&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac57998f2e59abc81eca78808712c89d530fb440" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@access public&lt;/code&gt; is the same as &lt;code&gt;@public&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7896bc21451a732ac25eebbe787bcec54d112e4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;astnode&lt;/code&gt;: The symbol's node from the abstract syntax tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad1408d9aaad91263566eaac0f0585fefd06d14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;canHaveName (boolean)&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the tag text can include a name (such as &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;@param {string} name - Description&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5616bed9abb47fff6b526718976dfcf8176b26ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;canHaveType (boolean)&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the tag text can include a type expression (such as &lt;code&gt;{string}&lt;/code&gt; in &lt;code&gt;@param {string} name - Description&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8851b3eaca80350d99016260aff1555592c0192c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;children&lt;/code&gt;: The children of the tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f652e20b978d8b03cc45c24eed80a6b2cdf4eeef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closure&lt;/code&gt;: &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags&quot;&gt;Closure Compiler tags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbffa281d6edcdf95540e45a29960c7deab55ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;code&lt;/code&gt;: Object with detailed information about the code. This object usually contains &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;node&lt;/code&gt; properties. The object might also have &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;paramnames&lt;/code&gt;, or &lt;code&gt;funcscope&lt;/code&gt; properties depending on the symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c291671339aa9895b48fb637a4b8419ab7a3bdd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;columnno&lt;/code&gt;: The column number on which the comment was found. Available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9cb0a887fa2b610b0b5a1d8cd2b5371300278f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;columnno&lt;/code&gt;: The column number on which the symbol was found. Available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f8f01560fb2f6b817c3e4dcf99f711c68584fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;comment&lt;/code&gt;: The text of the JSDoc comment, or an empty string if the symbol is undocumented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a04d90285e9636103e28b754d44baea317987db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;comment&lt;/code&gt;: The text of the JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adf63495d35372e332094a45ecf0aa7fd6d8646" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;comment&lt;/code&gt;: The text of the comment associated with the symbol, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabce97e11de360ca310ae43d961983936d551d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentSourceName&lt;/code&gt;: The name of the file being parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1d986e80f83c2e6cf6180111d8b93ccd50d861" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultvalue&lt;/code&gt;: The default value for a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b03981615dc1e109697263675c69526fd80974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defineTag(title, opts)&lt;/code&gt;: Used to define tags. The first parameter is the name of the tag (for example, &lt;code&gt;param&lt;/code&gt; or &lt;code&gt;overview&lt;/code&gt;). The second is an object containing options for the tag. You can include any of the following options; the default value for each option is &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d05ae33c89735a760236dd57b40b2e888708a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt;: A description of the symbol being documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a36eb8ce258ee9e9c0510f7447803a3ce53b2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doclet&lt;/code&gt;: The new doclet that was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e699d10bc752b426032e7ce096fe385aee13fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doclets&lt;/code&gt;: An array of doclet objects. See the &lt;a href=&quot;#event-newdoclet&quot;&gt;&lt;code&gt;newDoclet&lt;/code&gt; event&lt;/a&gt; for details about the properties that each doclet can contain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0037bcfa0b7594d96bc47d8874d0b2e613937f7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doclets&lt;/code&gt;: An array of doclet objects. See the &lt;a href=&quot;#event-newdoclet&quot;&gt;&lt;code&gt;newDoclet&lt;/code&gt; event&lt;/a&gt; for details about the properties that each doclet can contain. Available in JSDoc 3.2.1 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ec0e97166ca7fdabb6e7314a9a8e2dddbffc67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: The event. If the node is one that the parser handles, the event object will already be populated with the same things described in the &lt;code&gt;symbolFound&lt;/code&gt; event above. Otherwise, it will be an empty object on which to set various properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef17635d04b06efbb746d44a02abd6409250ae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt;: The name of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900cff252e6cf656eeebaae148fa800f8ad5ad22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt;: The unique ID of the symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6257beb3a8996a5cec20cb21d4ccc07117141c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isNamespace (boolean)&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the tag should be applied to the doclet's longname as a namespace. For example, the &lt;code&gt;@module&lt;/code&gt; tag sets this option to &lt;code&gt;true&lt;/code&gt;, and using the tag &lt;code&gt;@module myModuleName&lt;/code&gt; results in the longname &lt;code&gt;module:myModuleName&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc25354eabb74cc164375d8e387ab1c977f03191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isNamespace(tagName)&lt;/code&gt;: Returns &lt;code&gt;true&lt;/code&gt; if the tag is applied to a doclet's longname as a namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0623a0a9c3d83f98b1ec5f832430a54aa1f41d5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsdoc&lt;/code&gt;: Core JSDoc tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72a74b5818597820bae5e0dc802985b19299f03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kind&lt;/code&gt;: The kind of symbol being documented (for example, &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebfff246b969ca335e353b9226b6d388411581f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineno&lt;/code&gt;: The line number on which the comment was found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ba140266dd346dce599ce7381ec212436a8f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineno&lt;/code&gt;: The line number on which the symbol was found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb925aff3da18e47d381bd975c28c2373f64da0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logger.error&lt;/code&gt;: Report an error from which the plugin can recover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b30ab3c0ca42a959c0ce24c03db2363e738054" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logger.fatal&lt;/code&gt;: Report an error that should cause JSDoc to stop running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d94e9a6dd7089702dae30a693d4c339f91090b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logger.warn&lt;/code&gt;: Warn the user about a possible problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573e00d3a769b2c38180caf077d1408dafeb5627" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;longname&lt;/code&gt;: The fully qualified name, including memberof info (for example, &lt;code&gt;MyClass#myMethod&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c052edfad5af326aa3ec156075c426ac89e72fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookUp(tagName)&lt;/code&gt;: Retrieve a tag object by name. Returns the tag object, including its options, or &lt;code&gt;false&lt;/code&gt; if the tag is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638dafc2bed20ca1814c8c671353a323cd6c67be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memberof&lt;/code&gt;: The module, namespace, or class that this symbol belongs to (for example, &lt;code&gt;MyClass&lt;/code&gt;), or an empty string if the symbol does not have a parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af25c5a0a8e8a501d979fecb159d06bf930db0ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta&lt;/code&gt;: Object that describes how the doclet relates to the source file (for example, the location within the source file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4e44cae6567684135ad5a324104d446aa1e49d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; (default): Use this value for most types of JavaScript files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f36287ce79ca7535aa5304e8929d096e6578e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mustHaveValue (boolean)&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the tag must have a value (such as &lt;code&gt;TheName&lt;/code&gt; in &lt;code&gt;@name TheName&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e58bf4c0407da0407a84599d38bdb49720aa84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mustNotHaveDescription (boolean)&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the tag may have a value but must not have a description (such as &lt;code&gt;TheDescription&lt;/code&gt; in &lt;code&gt;@tag {typeExpr} TheDescription&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e2d2ee0496c0f2600d461fbeaeb3001f3ff0c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mustNotHaveValue (boolean)&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the tag must not have a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b4ffc5bb9517cd015621577d4b63048717a594" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myProject/_private/a.js&lt;/code&gt; (from &lt;code&gt;source.include&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b0c66c562cb111463bbf387a5f6df1414710ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myProject/a.js&lt;/code&gt; (from &lt;code&gt;source.include&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28f70d5e49f1b8c957945f39473f64a7f09aac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myProject/c.js&lt;/code&gt; (from the command line)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4072bd6f431b070a33889e81f24a0983f0f7ba51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myProject/lib/a.js&lt;/code&gt;, &lt;code&gt;myProject/lib/ignore.js&lt;/code&gt;, &lt;code&gt;myProject/lib/d.txt&lt;/code&gt; (from &lt;code&gt;source.include&lt;/code&gt; and using the &lt;code&gt;-r&lt;/code&gt; option)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dcd133b46d4c9d0d5269049ce104ff17264006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: The short name for the symbol (for example, &lt;code&gt;myMethod&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103b6d2a134da4f8293d1dbe9029e21cbe3119ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt;: The AST node. AST nodes are JavaScript objects that use the format defined by the &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree spec&lt;/a&gt;. You can use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; to see the AST that will be created for your source code. As of version 3.5.0, JSDoc uses the current version of the &lt;a href=&quot;https://github.com/babel/babylon&quot;&gt;Babylon&lt;/a&gt; parser with all plugins enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ec066b5008cc390247255da00b1a1a13585c4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalise(tagName)&lt;/code&gt;: Returns the canonical name of a tag. For example, the &lt;code&gt;@const&lt;/code&gt; tag is a synonym for &lt;code&gt;@constant&lt;/code&gt;; as a result, if you call &lt;code&gt;normalise('const')&lt;/code&gt;, it returns the string &lt;code&gt;constant&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be612387b6a75b7999956ce558b17e68673dc310" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalize(tagName)&lt;/code&gt;: Synonym for &lt;code&gt;normalise&lt;/code&gt;. Available in JSDoc 3.3.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378a8432208bddcd33021e8808f564641fb2e197" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onTagged (function)&lt;/code&gt;: A callback function executed when the tag is found. The function is passed two parameters: the doclet and the tag object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482f97dcb5ee8c9952c07b6e16c20a57c103c4a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params&lt;/code&gt;: Object containing the list of parameters to a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8c606240039d848d7000b49f09394d5e6c423a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parser&lt;/code&gt;: The JSDoc parser instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0912502a684102c331176a00dc3f6053860863ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt;: An array containing the numeric index of the first and last characters in the source file that are associated with the symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a850653594aefa2528d752b2689b58abf4b2a51d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt;: The scope of the symbol within its parent (for example, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;instance&lt;/code&gt;, or &lt;code&gt;inner&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f5e33dbbf934c104f5e7d1b9bd37797482aa59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;script&lt;/code&gt;: Use this value if JSDoc logs errors such as &lt;code&gt;Delete of an unqualified identifier in
strict mode&lt;/code&gt; when it parses your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff12e07ece3a915e0c33a5e189f7f466effa91e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source.exclude&lt;/code&gt;: An optional array of paths that JSDoc should ignore. In JSDoc 3.3.0 and later, this array may include subdirectories of the paths in &lt;code&gt;source.include&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d174bef39f46deda5559cd6147f242ca88c20990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source.excludePattern&lt;/code&gt;: An optional string, interpreted as a regular expression. If present, any file matching this regular expression will be ignored. By default, this option is set so that files beginning with an underscore (or anything under a directory beginning with an underscore) is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd9a3827dd94c8256f23cc098d89bbf03176223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source.include&lt;/code&gt;: An optional array of paths that contain files for which JSDoc should generate documentation. The paths given to JSDoc on the command line are combined with these paths. You can use the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-r&lt;/code&gt; command-line option&lt;/a&gt; to recurse into subdirectories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a978e9ca1ba63161941bf4ddc6443ab07410793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source.includePattern&lt;/code&gt;: An optional string, interpreted as a regular expression. If present, all filenames must match this regular expression to be processed by JSDoc. By default, this option is set to &quot;.+\.js(doc|x)?$&quot;, meaning that only files with the extensions &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsdoc&lt;/code&gt;, and &lt;code&gt;.jsx&lt;/code&gt; will be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c7287c76cf2d7880fa1aedeac742e7363871a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt;: The contents of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98c0c5c4d8c6f493f266a2cb44ab59013a4e519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sourcefiles&lt;/code&gt;: An array of paths to source files that were parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbe4686263774c82b853f3df872ba9cdb48ca12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sourcefiles&lt;/code&gt;: An array of paths to source files that will be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97449e21a9bcf3f9fd965dfb71f6316b9c7ff04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tags&lt;/code&gt;: Object containing a list of tags that JSDoc did not recognize. Only available if &lt;code&gt;allowUnknownTags&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in JSDoc's configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b90c66f09e6d8ac9d78dfa22876a70feb4f385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templates.cleverLinks&lt;/code&gt;: When set to &lt;code&gt;true&lt;/code&gt;, links to URLs use normal text, and links to code use a monospace font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a96f3ae84b5b06bac6df18834641882b4182bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templates.default.staticFiles.exclude&lt;/code&gt;: An array of paths that should &lt;em&gt;not&lt;/em&gt; be copied to the output directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26af8d248fcc596d946a79f1784175c577b7a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templates.default.staticFiles.excludePattern&lt;/code&gt;: A regular expression indicating which files to skip. If this property is not defined, nothing will be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824e9ab17e17dfc8ac34d2d5a9123e35510cd152" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templates.default.staticFiles.include&lt;/code&gt;: An array of paths whose contents should be copied to the output directory. Subdirectories will be copied as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e55bd815bdcb29da79dac6626c1a6d2c91aad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templates.default.staticFiles.includePattern&lt;/code&gt;: A regular expression indicating which files to copy. If this property is not defined, all files will be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce44989462af6ba8908cdf7f37b9181b539a3576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templates.monospaceLinks&lt;/code&gt;: When set to &lt;code&gt;true&lt;/code&gt;, all links use a monospace font, except for links created with the &lt;code&gt;{@linkplain}&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99b1ac9178fb0837e05a61ee41a2fb812e39061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt;: The title to display in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d866c3ccdaa2a0d54fd50bc795fe826fc32919e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;: Object containing details about the symbol's type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c7ae6abccdf661f33f72c266b58c0a218418b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undocumented&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; if the symbol did not have a JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc54ee56d10535499b19d975612401115915c875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{@linkcode}&lt;/code&gt;: Forces the link's text to use a monospace font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527165326839aa1c6dc780846631e1c5b9e1578c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{@linkplain}&lt;/code&gt;: Forces the link's text to appear as normal text, without a monospace font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647d67f4a3f838c49e375111f0550c4181d0d6f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Block tags&lt;/strong&gt;, which are at the top level of a JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c850eb7145b4756880dbd737abee7b0cf72f031" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inline tags&lt;/strong&gt;, which are within the text of a block tag or a description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65533f1d1f30284bd4537bde332c46d7fc523ece" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Although the default JSDoc template renders all of these tags correctly, other templates may not recognize the &lt;code&gt;{@linkcode}&lt;/code&gt; and &lt;code&gt;{@linkplain}&lt;/code&gt; tags. In addition, other templates may ignore the configuration options for link rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faeac15fdaf7b35c5bda473857a7876ce15a14d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Do not use the &lt;code&gt;jsdoc/util/error&lt;/code&gt; module to report errors. This module is deprecated and will be removed in a future version of JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3909e9992aaa4f79cf5158f990da6177dc2703" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Full support for Google Closure Compiler-style type expressions is available in JSDoc 3.2 and later. Earlier versions of JSDoc included partial support for Closure Compiler type expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306bdef8a088c2c014180e3d6b93079001aabe12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: JSDoc 3 uses @event doclets to document the content of an event. In contrast, JSDoc Toolkit 2 used @event doclets to identify a function that can be fired when an event of the same name occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5fa04a83a0feead3aac717ba82b6f026e35ce9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This event is fired in JSDoc 3.2 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e3c801e3650796497a4cbe05b3506fdf3af2d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This event is fired in JSDoc 3.2.1 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988c20a84911249f8fdaf0e01299269be4f12495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When you enable the Markdown plugin, be sure to include a leading asterisk on each line of your JSDoc comments. If you omit the leading asterisks, JSDoc's parser may remove asterisks that are used for Markdown formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582bbbf8f3cdcab1864173a0b32df76a60944193" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You should only add the &lt;code&gt;@external&lt;/code&gt; tag to the highest-level symbol that is defined outside of your project. See &quot;&lt;a href=&quot;#nested-external-symbol&quot;&gt;Documenting a nested external symbol&lt;/a&gt;&quot; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2b92bd4a7c3df63645efb7bf4383d132b03e2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: By using the @name tag, you are telling JSDoc to &lt;em&gt;ignore the surrounding code&lt;/em&gt; and treat your documentation comment in isolation. In many cases, it is best to use the &lt;a href=&quot;tags-alias&quot;&gt;@alias tag&lt;/a&gt; instead, which changes a symbol's name in the documentation but preserves other information about the symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5151af4b3a91f16c8cfa47a2c8cc670b1a3a70a2" translate="yes" xml:space="preserve">
          <source>@abstract</source>
          <target state="translated">@abstract</target>
        </trans-unit>
        <trans-unit id="b77007a10a1a389ca1f902b10c034aeff85e4c68" translate="yes" xml:space="preserve">
          <source>@access</source>
          <target state="translated">@access</target>
        </trans-unit>
        <trans-unit id="641fd386bb9641dc255805bff7b0071f873060cc" translate="yes" xml:space="preserve">
          <source>@alias</source>
          <target state="translated">@alias</target>
        </trans-unit>
        <trans-unit id="3b7c965e962f36eb0e6c472eea82392cdc514ade" translate="yes" xml:space="preserve">
          <source>@async</source>
          <target state="translated">@async</target>
        </trans-unit>
        <trans-unit id="728cb09dd6653e7cd1b2a16a4c864e6fa91f840f" translate="yes" xml:space="preserve">
          <source>@augments</source>
          <target state="translated">@augments</target>
        </trans-unit>
        <trans-unit id="b08cced4776283da785202f5e6d9dd80b243deaf" translate="yes" xml:space="preserve">
          <source>@author</source>
          <target state="translated">@author</target>
        </trans-unit>
        <trans-unit id="a22faabb6bffc8aa8711057be494eb02929f65af" translate="yes" xml:space="preserve">
          <source>@borrows</source>
          <target state="translated">@borrows</target>
        </trans-unit>
        <trans-unit id="a92b3cf9a16a7f8c877ba581a2cd5a6e832bba51" translate="yes" xml:space="preserve">
          <source>@callback</source>
          <target state="translated">@callback</target>
        </trans-unit>
        <trans-unit id="be486a6491233ed439a99d3b414624f9231d45de" translate="yes" xml:space="preserve">
          <source>@class</source>
          <target state="translated">@class</target>
        </trans-unit>
        <trans-unit id="c3a2b2b50d840012c9aa02cfefb6aaaf07dd6532" translate="yes" xml:space="preserve">
          <source>@classdesc</source>
          <target state="translated">@classdesc</target>
        </trans-unit>
        <trans-unit id="8c5aad3d8a68ed12987e3830dfc44c28c433b36a" translate="yes" xml:space="preserve">
          <source>@constant</source>
          <target state="translated">@constant</target>
        </trans-unit>
        <trans-unit id="5de54d840096861d169024daeea88db96a050eb9" translate="yes" xml:space="preserve">
          <source>@constructs</source>
          <target state="translated">@constructs</target>
        </trans-unit>
        <trans-unit id="5875f38819552f3440a0986e4c08c7ad936f04e2" translate="yes" xml:space="preserve">
          <source>@copyright</source>
          <target state="translated">@copyright</target>
        </trans-unit>
        <trans-unit id="53c7d47871c70622693d8244781f9728a0c93a29" translate="yes" xml:space="preserve">
          <source>@default</source>
          <target state="translated">@default</target>
        </trans-unit>
        <trans-unit id="c08752e551e2e2ba935d7cf167052d0eed1ec746" translate="yes" xml:space="preserve">
          <source>@deprecated</source>
          <target state="translated">@deprecated</target>
        </trans-unit>
        <trans-unit id="67804b0e5ab88b80eb1b3b9bdfab67ff95508cf3" translate="yes" xml:space="preserve">
          <source>@description</source>
          <target state="translated">@description</target>
        </trans-unit>
        <trans-unit id="e8e63ba2c1ed651018928c4e4e0d3af8ce30f781" translate="yes" xml:space="preserve">
          <source>@enum</source>
          <target state="translated">@enum</target>
        </trans-unit>
        <trans-unit id="e081ec909e89d2a42c3c8a1e408f54a4f3b0fc37" translate="yes" xml:space="preserve">
          <source>@event</source>
          <target state="translated">@event</target>
        </trans-unit>
        <trans-unit id="d9cbda34fcb1655f6eac22b4d8800b2f74463f70" translate="yes" xml:space="preserve">
          <source>@example</source>
          <target state="translated">@example</target>
        </trans-unit>
        <trans-unit id="d31a81beea9a19d2c66daf0ce2a8ba5c041c664a" translate="yes" xml:space="preserve">
          <source>@exports</source>
          <target state="translated">@exports</target>
        </trans-unit>
        <trans-unit id="ebc30fe4f6f3968334467a7ea26213cb5ce49bb4" translate="yes" xml:space="preserve">
          <source>@external</source>
          <target state="translated">@external</target>
        </trans-unit>
        <trans-unit id="ce818f22de8894f56bb2f4b068df493f961fe864" translate="yes" xml:space="preserve">
          <source>@file</source>
          <target state="translated">@file</target>
        </trans-unit>
        <trans-unit id="5919458a244ad64319ca6d0352a218264fcedd3a" translate="yes" xml:space="preserve">
          <source>@fires</source>
          <target state="translated">@fires</target>
        </trans-unit>
        <trans-unit id="db03425959b005474abd611af6ef5e3662b26739" translate="yes" xml:space="preserve">
          <source>@function</source>
          <target state="translated">@function</target>
        </trans-unit>
        <trans-unit id="1ba6547be53d177fc8678efd3ac2715c9cab33b2" translate="yes" xml:space="preserve">
          <source>@generator</source>
          <target state="translated">@generator</target>
        </trans-unit>
        <trans-unit id="594ec55361968837c5fb431d571da186fa312a6a" translate="yes" xml:space="preserve">
          <source>@global</source>
          <target state="translated">@global</target>
        </trans-unit>
        <trans-unit id="9f231db120fbc815513ae39ab0783a8cb73ad1c2" translate="yes" xml:space="preserve">
          <source>@hideconstructor</source>
          <target state="translated">@hideconstructor</target>
        </trans-unit>
        <trans-unit id="ad19718c0f7608bec8954fd6ca9114099f5028a7" translate="yes" xml:space="preserve">
          <source>@hideconstructor tag with ES2015 class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc477497158dfacf23399df88bcab7ed57b5c96" translate="yes" xml:space="preserve">
          <source>@hideconstructor tag with pre-ES2015 class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f95a7ca0de60e3f53a2322821cd2027b7a73c73" translate="yes" xml:space="preserve">
          <source>@ignore</source>
          <target state="translated">@ignore</target>
        </trans-unit>
        <trans-unit id="a15e5fb48f89a88964f17f63bdbc04833f3a77cb" translate="yes" xml:space="preserve">
          <source>@implements</source>
          <target state="translated">@implements</target>
        </trans-unit>
        <trans-unit id="31744890403d428d7181fe1e1a793a91df1ab6ee" translate="yes" xml:space="preserve">
          <source>@inheritdoc</source>
          <target state="translated">@inheritdoc</target>
        </trans-unit>
        <trans-unit id="aa69590349d2754f1bf422e830f53bac2ad93f4a" translate="yes" xml:space="preserve">
          <source>@inner</source>
          <target state="translated">@inner</target>
        </trans-unit>
        <trans-unit id="005e824203f617ecc443920abb198e56b8cd0e80" translate="yes" xml:space="preserve">
          <source>@instance</source>
          <target state="translated">@instance</target>
        </trans-unit>
        <trans-unit id="67180107f7963c5649cae727f5f76a878c82259b" translate="yes" xml:space="preserve">
          <source>@interface</source>
          <target state="translated">@interface</target>
        </trans-unit>
        <trans-unit id="28e5f6cfc87844943549bdbb1d8077a8d5aac981" translate="yes" xml:space="preserve">
          <source>@kind</source>
          <target state="translated">@kind</target>
        </trans-unit>
        <trans-unit id="7913bc8e743185b75147047d8c9d8c209abebd68" translate="yes" xml:space="preserve">
          <source>@lends</source>
          <target state="translated">@lends</target>
        </trans-unit>
        <trans-unit id="6c7dd52f0345fdcbfcca896911a5e0447f9c5101" translate="yes" xml:space="preserve">
          <source>@license</source>
          <target state="translated">@license</target>
        </trans-unit>
        <trans-unit id="f38728af883df0cf79b353bb57a03ebf113ca77c" translate="yes" xml:space="preserve">
          <source>@listens</source>
          <target state="translated">@listens</target>
        </trans-unit>
        <trans-unit id="2814019bec2f9b2df1beb75a4f81cfcef8a49788" translate="yes" xml:space="preserve">
          <source>@member</source>
          <target state="translated">@member</target>
        </trans-unit>
        <trans-unit id="29c1549663b9fc06671d606d049a15641ba20812" translate="yes" xml:space="preserve">
          <source>@memberof</source>
          <target state="translated">@memberof</target>
        </trans-unit>
        <trans-unit id="4d5991660eb7fb336c6839622ceb4375755b09bb" translate="yes" xml:space="preserve">
          <source>@mixes</source>
          <target state="translated">@mixes</target>
        </trans-unit>
        <trans-unit id="4977549b85c2de13e3e29cf1d33aa5556514a430" translate="yes" xml:space="preserve">
          <source>@mixin</source>
          <target state="translated">@mixin</target>
        </trans-unit>
        <trans-unit id="5a1c38144fc2005c1a83fddd8f25a5225f5d70ab" translate="yes" xml:space="preserve">
          <source>@module</source>
          <target state="translated">@module</target>
        </trans-unit>
        <trans-unit id="44b3bbc8409d452f5de5ac6c9599354633b9b626" translate="yes" xml:space="preserve">
          <source>@name</source>
          <target state="translated">@name</target>
        </trans-unit>
        <trans-unit id="ad73b83d17653b81be058b2768f4b994c15c9b7e" translate="yes" xml:space="preserve">
          <source>@namespace</source>
          <target state="translated">@namespace</target>
        </trans-unit>
        <trans-unit id="fb47d77414befb3167152dd6d1ec657d576ef9aa" translate="yes" xml:space="preserve">
          <source>@override</source>
          <target state="translated">@override</target>
        </trans-unit>
        <trans-unit id="3ef063f16c242caf8312e5876d46916d9151c82d" translate="yes" xml:space="preserve">
          <source>@package</source>
          <target state="translated">@package</target>
        </trans-unit>
        <trans-unit id="52234a98a069f129df7d7bce319b65950b55026f" translate="yes" xml:space="preserve">
          <source>@param</source>
          <target state="translated">@param</target>
        </trans-unit>
        <trans-unit id="33d328364d90e0bc3478d1f661cbda816c85c200" translate="yes" xml:space="preserve">
          <source>@private</source>
          <target state="translated">@private</target>
        </trans-unit>
        <trans-unit id="b9a48e047ffd2adf9903a054a92da67984d6fa99" translate="yes" xml:space="preserve">
          <source>@property</source>
          <target state="translated">@property</target>
        </trans-unit>
        <trans-unit id="e60374ed65d2561ac11b0ea818245e628695f184" translate="yes" xml:space="preserve">
          <source>@protected</source>
          <target state="translated">@protected</target>
        </trans-unit>
        <trans-unit id="d182c40cfb84cc6490ad69284a2782b3f8680933" translate="yes" xml:space="preserve">
          <source>@public</source>
          <target state="translated">@public</target>
        </trans-unit>
        <trans-unit id="5d042f1f94738e82cc1b0c5c008cece383beaa30" translate="yes" xml:space="preserve">
          <source>@readonly</source>
          <target state="translated">@readonly</target>
        </trans-unit>
        <trans-unit id="2eecd823a7ca0fb7891bca567711b65be2e71039" translate="yes" xml:space="preserve">
          <source>@requires</source>
          <target state="translated">@requires</target>
        </trans-unit>
        <trans-unit id="a0f9b24536fb10a3dc00738efc10d868727cbd1b" translate="yes" xml:space="preserve">
          <source>@returns</source>
          <target state="translated">@returns</target>
        </trans-unit>
        <trans-unit id="d09bd12b4d821dfd1e05d293ec130b5e99ce78df" translate="yes" xml:space="preserve">
          <source>@see</source>
          <target state="translated">@see</target>
        </trans-unit>
        <trans-unit id="d8db7fe1238eb30342003258f2f42fe32da1742d" translate="yes" xml:space="preserve">
          <source>@since</source>
          <target state="translated">@since</target>
        </trans-unit>
        <trans-unit id="151387036f429960867face2abcd91f32770c4e2" translate="yes" xml:space="preserve">
          <source>@static</source>
          <target state="translated">@static</target>
        </trans-unit>
        <trans-unit id="88c4745849ba7e1c15d67e909df0ae45537e7cb3" translate="yes" xml:space="preserve">
          <source>@summary</source>
          <target state="translated">@summary</target>
        </trans-unit>
        <trans-unit id="03da06c9209b09503db3a9265498ed958a8f7ba3" translate="yes" xml:space="preserve">
          <source>@this</source>
          <target state="translated">@this</target>
        </trans-unit>
        <trans-unit id="8e125027cc3850178e83d67119d4b96860b0f14d" translate="yes" xml:space="preserve">
          <source>@throws</source>
          <target state="translated">@throws</target>
        </trans-unit>
        <trans-unit id="92c615b73b535344bac5a8b54a2c8d82dd382ad3" translate="yes" xml:space="preserve">
          <source>@todo</source>
          <target state="translated">@todo</target>
        </trans-unit>
        <trans-unit id="ec11ef0b313be140bc008a5bbd459c898f3cece1" translate="yes" xml:space="preserve">
          <source>@tutorial</source>
          <target state="translated">@tutorial</target>
        </trans-unit>
        <trans-unit id="91ad18f5e79d07a4444442e822b29d69e0bb1b7d" translate="yes" xml:space="preserve">
          <source>@tutorial block tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f551162ff90e09c3300a9e2b0509e4d6b602fdb1" translate="yes" xml:space="preserve">
          <source>@type</source>
          <target state="translated">@type</target>
        </trans-unit>
        <trans-unit id="1d10f8e703235d21b439e52bc4a46631fa64e528" translate="yes" xml:space="preserve">
          <source>@typedef</source>
          <target state="translated">@typedef</target>
        </trans-unit>
        <trans-unit id="5f4fdc4d927f52151c6ff43493a0ccd7b951fe93" translate="yes" xml:space="preserve">
          <source>@variation</source>
          <target state="translated">@variation</target>
        </trans-unit>
        <trans-unit id="e28993689a283dcf7949333e2b184e123a9eea8c" translate="yes" xml:space="preserve">
          <source>@version</source>
          <target state="translated">@version</target>
        </trans-unit>
        <trans-unit id="fc548a79a104bc7f952f6b8a041f449d99e36dbb" translate="yes" xml:space="preserve">
          <source>@yields</source>
          <target state="translated">@yields</target>
        </trans-unit>
        <trans-unit id="efaf646bd43c0dd43255910b354a77a7ee719012" translate="yes" xml:space="preserve">
          <source>@yields tag with a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922b952c6be99fb537a6951a41904701a587a5da" translate="yes" xml:space="preserve">
          <source>@yields tag with a type and description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73138731cd5701a739797ecac6f71159624ebf8" translate="yes" xml:space="preserve">
          <source>A CommonJS module that exports a single configuration object. This format is supported in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eee4e4de2cc4a290f29750daa65efcc4f47ae58" translate="yes" xml:space="preserve">
          <source>A JSON file. In JSDoc 3.3.0 and later, this file may include comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577f162c333648d9d96c2473a0cfee531bbb2753" translate="yes" xml:space="preserve">
          <source>A doclet with both a constructor function description and a class description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207072dd80c9fa1e7e470a0703042e47574714b1" translate="yes" xml:space="preserve">
          <source>A function that constructs Person instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a0789bfc68a28ed6f82549b685ea5e8956aae6" translate="yes" xml:space="preserve">
          <source>A guide to using namepaths with JSDoc 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa53b14e94653f66abcf8b31ed4a685aee8f25d" translate="yes" xml:space="preserve">
          <source>A mixin provides functionality that is intended to be added to other objects. If desired, you can use the @mixin tag to indicate that an object is a mixin. You can then add the @mixes tag to objects that use the mixin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8399ba8208e69b1fbb1e614b0275b435daf3c0" translate="yes" xml:space="preserve">
          <source>A module that is distributed under the Apache License 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eee79ac14791a78737a714442ac3276dac07da3" translate="yes" xml:space="preserve">
          <source>A namespace with defaults and nested default properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f54374518f9cbc79b2ffea07ae31f85a6fd5b5" translate="yes" xml:space="preserve">
          <source>A number or null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44894765c747dbec35f5d3b70d75002ea48018c" translate="yes" xml:space="preserve">
          <source>A number, but never null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc38323915b8de19298d2abec336983b7762b2a" translate="yes" xml:space="preserve">
          <source>A numeric enum, representing three states</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a45dc21774837129dfc226c4220fa392c91946" translate="yes" xml:space="preserve">
          <source>A query string to parse and store in the global variable &lt;code&gt;env.opts.query&lt;/code&gt;. Example: &lt;code&gt;foo=bar&amp;amp;baz=true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d27471d7c6a0c3ddfe5af7b3378827ebe6387a" translate="yes" xml:space="preserve">
          <source>A quick-start to documenting JavaScript with JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ae7bd901df885318a6713857ae90b34573fa4c" translate="yes" xml:space="preserve">
          <source>A shorter version of the full description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c865533ed5fe94787152a61c49e4f8d23fb6408" translate="yes" xml:space="preserve">
          <source>A standalone JSDoc comment with the complete MIT license</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08440427e6d8830a5a7bfd227ffb4c5f3cdea7c" translate="yes" xml:space="preserve">
          <source>A string constant representing the color red</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8b269b4b9ed654ef579feb807f238b43909b52" translate="yes" xml:space="preserve">
          <source>A tag's &lt;code&gt;onTagged&lt;/code&gt; callback can modify the contents of the doclet or tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47041ef499af063a20e4829af787d577105da6de" translate="yes" xml:space="preserve">
          <source>A top-level object whose properties are all tutorial objects, with child tutorials listed by name in an array. For example, if &lt;code&gt;tutorial1&lt;/code&gt; has two children, &lt;code&gt;childA&lt;/code&gt; and &lt;code&gt;childB&lt;/code&gt;, and &lt;code&gt;tutorial2&lt;/code&gt; is at the same level as &lt;code&gt;tutorial1&lt;/code&gt; and has no children:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190bd1131c46300d3defdf08a203dc1e24c53633" translate="yes" xml:space="preserve">
          <source>A tree of objects, with child tutorials defined in the &lt;code&gt;children&lt;/code&gt; property of their parent. For example, if &lt;code&gt;tutorial1&lt;/code&gt; has two children, &lt;code&gt;childA&lt;/code&gt; and &lt;code&gt;childB&lt;/code&gt;, and &lt;code&gt;tutorial2&lt;/code&gt; is at the same level as &lt;code&gt;tutorial1&lt;/code&gt; and has no children:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bc7514751aad8f4c10a80d5318df85ec2b71b3" translate="yes" xml:space="preserve">
          <source>A type definition with required and optional property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b075c4e5261ad2873cb3e76574f094d03af6ca" translate="yes" xml:space="preserve">
          <source>A type expression can include the JSDoc namepath to a symbol (for example, &lt;code&gt;myNamespace.MyClass&lt;/code&gt;); a built-in JavaScript type (for example, &lt;code&gt;string&lt;/code&gt;); or a combination of these. You can use any &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#type-expressions&quot;&gt;Google Closure Compiler type expression&lt;/a&gt;, as well as several other formats that are specific to JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4facf42c95d8052e3a3041a5a85e2a653865bb" translate="yes" xml:space="preserve">
          <source>AMD Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc0ab63719d148d8694b382addd0681d80f5f62" translate="yes" xml:space="preserve">
          <source>AMD module that exports a constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858a846617861d553038a5961166dd8ef2ff5080" translate="yes" xml:space="preserve">
          <source>AMD module that exports an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c97fc7d4a1c5ef3ec695ad31368911aa4a76c7d" translate="yes" xml:space="preserve">
          <source>AMD module that exports an object literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547276b606e0355353a6c3f82988a81d5aa17bfe" translate="yes" xml:space="preserve">
          <source>About JSDoc plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7c6da6ce0b0882213233a3e440008d4a07b072" translate="yes" xml:space="preserve">
          <source>About command-line arguments to JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6229116bf4209fcb8fece00a7132ec77774658a" translate="yes" xml:space="preserve">
          <source>Above is an example of a namespace with &quot;unusual&quot; characters in its member names (the hash character, dashes, even quotes). To refer to these you just need quote the names: chat.&quot;#channel&quot;, chat.&quot;#channel&quot;.&quot;op:announce-motd&quot;, and so on. Internal quotes in names should be escaped with backslashes: chat.&quot;#channel&quot;.&quot;say-\&quot;hello\&quot;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c51740d91ef98f72d2b69bcc6cf23a2b5b61fb6" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@implements&lt;/code&gt; tag to the top-level symbol that implements the interface (for example, a constructor function). You do not need to add the &lt;code&gt;@implements&lt;/code&gt; tag to each member of the implementation (for example, the implementation's instance methods).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40623ce1df1b38fa6bcf6ec513e6d8910da96f3f" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@interface&lt;/code&gt; tag to the top-level symbol for the interface (for example, a constructor function). You do not need to add the &lt;code&gt;@interface&lt;/code&gt; tag to each member of the interface (for example, the interface's instance methods).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0a6d6374d0118d29d651c5e1060bdc59406a85" translate="yes" xml:space="preserve">
          <source>Adding ID attributes to headings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e55ad3caafe26cb4a35a781f82eeec14a51b25" translate="yes" xml:space="preserve">
          <source>Adding a description is simple&amp;mdash;just type the description you want in the documentation comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1481a0904869c37da3ae9148140c8744bd7a30" translate="yes" xml:space="preserve">
          <source>Adding a plugin to JSDoc's configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd299a696970aee678b477cab49d4da8ff266578" translate="yes" xml:space="preserve">
          <source>Adding documentation comments to your code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569b00ffa5a7411d237a48a7a4c6e067fc746c7b" translate="yes" xml:space="preserve">
          <source>Adding more information with tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e86bad6f916cc9a24384b18dca23b6f7b44808c" translate="yes" xml:space="preserve">
          <source>Adding tags to the tag dictionary is a mid-level way to affect documentation generation. Before a &lt;code&gt;newDoclet&lt;/code&gt; event is triggered, JSDoc comment blocks are parsed to determine the description and any JSDoc tags that may be present. When a tag is found, if it has been defined in the tag dictionary, it is given a chance to modify the doclet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b508bbb950cce71dde1ec7358d84bc3bb94a4bf" translate="yes" xml:space="preserve">
          <source>Adding tutorials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321345cacfb7b276d64b6fc9a4302428a261695d" translate="yes" xml:space="preserve">
          <source>Adding tutorials to your API documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d2d382b3df2dbd6801fb1d0de2ec0bb141d431" translate="yes" xml:space="preserve">
          <source>Additionally, one may provide the path to a &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown file&lt;/a&gt; (ending in &quot;.md&quot;) or a file named &quot;README&quot;, and this will be added to the documentation on the front page. See &lt;a href=&quot;about-including-readme&quot;&gt;these instructions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e5ecc653ccf74690a1d41f4f15593d0b63606a" translate="yes" xml:space="preserve">
          <source>All remaining files after these four steps are processed by JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c49da6cbcf8eba0069ed61464b3169f70212111" translate="yes" xml:space="preserve">
          <source>Allows a parameter to be repeated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10958e252ea18a8cc9a3c03d25feb2423efc924b" translate="yes" xml:space="preserve">
          <source>Allows any type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7b63beabd6794da078b4f82e3ea3d44d1d4ab9" translate="yes" xml:space="preserve">
          <source>Allows one type OR another type (type union)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04b0fbdf3f807e36363094854f998fd4c88faad" translate="yes" xml:space="preserve">
          <source>An array of MyClass instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443c22cf8af67d58eabfabcc5811dfb1a03a65d4" translate="yes" xml:space="preserve">
          <source>An enum is similar a collection of properties, except that an enum is documented in its own doc comment, whereas properties are documented within the doc comment of their container. Often this tag is used with @readonly, as an enum typically represents a collection of constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57b410b6999c0ac283f4bd6251dca279b28e904" translate="yes" xml:space="preserve">
          <source>An event-handler plugin can stop later plugins from running by setting a &lt;code&gt;stopPropagation&lt;/code&gt; property on the event object (&lt;code&gt;e.stopPropagation = true&lt;/code&gt;). A plugin can stop the event from firing by setting a &lt;code&gt;preventDefault&lt;/code&gt; property (&lt;code&gt;e.preventDefault = true&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0ed0c6226d747529f259949047872e9bce9c01" translate="yes" xml:space="preserve">
          <source>An object called 'myObj' with properties 'a' (a number), 'b' (a string) and 'c' (any type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dd669075ac5a1f4d1ed35f3429fd14adf6127e" translate="yes" xml:space="preserve">
          <source>An object with string keys and number values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdce58a11d8f7b402ca379dbe3dd84976113224" translate="yes" xml:space="preserve">
          <source>An optional parameter (using Google Closure Compiler syntax)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bfb9f36e5ad202a418528363684ae2e1c411f9" translate="yes" xml:space="preserve">
          <source>An optional parameter (using JSDoc syntax)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3585f88d2484d0640b1ed6f73a17878b12a050d" translate="yes" xml:space="preserve">
          <source>An optional parameter and default value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6969d6aaece4432c35fe616457c8e2d1a1efee" translate="yes" xml:space="preserve">
          <source>An optional parameter foo with default value 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44c0bd4b1c50196f6368b60ac97c92d1667ff06" translate="yes" xml:space="preserve">
          <source>An optional parameter named foo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972a8b4485e29427c5b0cef154309bc63a7e1ee8" translate="yes" xml:space="preserve">
          <source>Another solution is to move the method's JSDoc comment so it comes immediately before &lt;code&gt;exports.wash&lt;/code&gt;. This change allows JSDoc to detect that &lt;code&gt;wash&lt;/code&gt; is exported by the module &lt;code&gt;my/shirt&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053195062258f35369ddec1ad9c2223f9bd5d8ae" translate="yes" xml:space="preserve">
          <source>Any file starting with an underscore, or in a directory starting with an underscore, will be ignored (&lt;code&gt;source.excludePattern&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cf9d276f6ef7acb18c8c9d0139eb0bd90cee30" translate="yes" xml:space="preserve">
          <source>Arrays and objects (type applications and record types)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a2fbbf8040fd2b5b844442238b28afde7cf0d4" translate="yes" xml:space="preserve">
          <source>As an example, suppose you have the following file structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5594ac1f672e84a29613c7295cf2d2f0ffca55" translate="yes" xml:space="preserve">
          <source>As shown below, a class has places for two descriptions, one applies to the function itself, while the other applies to the class in general.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319d1f9fb0517a370c2cb806170f6bdbc967a5ee" translate="yes" xml:space="preserve">
          <source>As with event-handler plugins, a node-visitor plugin can stop later plugins from running by setting a &lt;code&gt;stopPropagation&lt;/code&gt; property on the event object (&lt;code&gt;e.stopPropagation = true&lt;/code&gt;). A plugin can stop the event from firing by setting a &lt;code&gt;preventDefault&lt;/code&gt; property (&lt;code&gt;e.preventDefault = true&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f3c56b1088c17a54a35ec4e47251587c428047" translate="yes" xml:space="preserve">
          <source>Assignment to module.exports followed by property definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6558fdc44caf3a0056c2ee3f1b6e63a666c40a8c" translate="yes" xml:space="preserve">
          <source>Assume this encoding when reading all source files. Defaults to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa40df0a602a4aa005a58ffa735ac6e6b67cc82" translate="yes" xml:space="preserve">
          <source>At its most basic level, JSDoc is used like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc62cf5298113dee943ea5a407c6a1fbfa83d4c8" translate="yes" xml:space="preserve">
          <source>At the highest level, a plugin may register handlers for specific named events that JSDoc fires. JSDoc will pass an event object to the handler. Your plugin module should export a &lt;code&gt;handlers&lt;/code&gt; object that contains your handler, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3290f04146fa69790a26e69638020afc1ed8205f" translate="yes" xml:space="preserve">
          <source>At the lowest level, plugin authors can process each node in the abstract syntax tree (AST) by defining a node visitor that will visit each node. By using a node-visitor plugin, you can modify comments and trigger parser events for any arbitrary piece of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88afdcf1cd55f64796e63dd5c86e8cf73156fabd" translate="yes" xml:space="preserve">
          <source>Authoring JSDoc 3 Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebca628c68653d93d891beb76110bf5724b6bb18" translate="yes" xml:space="preserve">
          <source>Basic @module use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ab141c936fb30092a9bf7b54bdbc17420686bf" translate="yes" xml:space="preserve">
          <source>Basic Syntax Examples of Namepaths in JSDoc 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9edbc0d70af4258d44706815be4ecc356a2777" translate="yes" xml:space="preserve">
          <source>Below is an example of a &lt;code&gt;newDoclet&lt;/code&gt; handler that shouts the descriptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0794b116f37ed564fc2a6f651ffe0a9d0a2885b0" translate="yes" xml:space="preserve">
          <source>Below is an example that adds a virtual comment for a function to the source so that it will get parsed and added to the documentation. This might be done to document methods that will be available to users, but might not appear in the source code being documented, such as methods provided by an external superclass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70af3238de42da66beb5f354425347f373dca837" translate="yes" xml:space="preserve">
          <source>Block Tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d759ea624a24cf985ea52fa75c67381e6ccaeb" translate="yes" xml:space="preserve">
          <source>Block and inline tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee983b2cf31e523f76a1471124b55d40601c5b4" translate="yes" xml:space="preserve">
          <source>Block and inline tags in JSDoc comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3488653b5fea95b35307ab304e6366d62e979b8e" translate="yes" xml:space="preserve">
          <source>Block tags always begin with an at sign (&lt;code&gt;@&lt;/code&gt;). Each block tag must be followed by a line break, with the exception of the last block tag in a JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d84c2e25ef70426e516e72899bf8cf2e769bd66" translate="yes" xml:space="preserve">
          <source>Block tags usually provide detailed information about your code, such as the parameters that a function accepts. Inline tags usually link to other parts of the documentation, similar to the anchor tag (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) in HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b255c35264093f96b76a59bb1e0457dc3d04892" translate="yes" xml:space="preserve">
          <source>Both standard JSDoc tags and &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags&quot;&gt;Closure Compiler tags&lt;/a&gt; are enabled ( &lt;code&gt;tags.dictionaries&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08635edb28c12fa4b6482d5e234442dda85ed11b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;{@link}&lt;/code&gt; generates standard HTML anchor tags. However, you may prefer to render certain links in a monospace font, or to specify the format of individual links. You can use the following synonyms for the &lt;code&gt;{@link}&lt;/code&gt; tag to control the formatting of links:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325cd84ed143e7b441f627edea78e25ef925fdc4" translate="yes" xml:space="preserve">
          <source>By default, JSDoc looks for Markdown-formatted text in the following JSDoc tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5c1532d99ad0493a4a0c7071e08222c3b49b43" translate="yes" xml:space="preserve">
          <source>By default, JSDoc treats all symbols as public, so using this tag does not normally affect the generated documentation. However, you may prefer to use the &lt;code&gt;@public&lt;/code&gt; tag explicitly so it is clear to others that you intended to make the symbol public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7491c86d0c6682765013bef9080de9e05461ad64" translate="yes" xml:space="preserve">
          <source>By default, JSDoc uses the built-in &quot;default&quot; template to turn the documentation into HTML. You can edit this template to suit your own needs or create an entirely new template if that is what you prefer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08042eb6eab561b25909615af4a2fc88cc9c8a07" translate="yes" xml:space="preserve">
          <source>By default, JSDoc uses the filename as the tutorial's title, and all tutorials are at the same level. You can use a JSON file to provide a title for each tutorial and indicates how the tutorials should be sorted and grouped in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218b0625c358e3093ee7cf11842d5395af23a134" translate="yes" xml:space="preserve">
          <source>By default, JSDoc's default template always shows the current date in the footer of the generated documentation. In JSDoc 3.3.0 and later, you can omit the current date by setting the option &lt;code&gt;templates.default.includeDate&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f13d7ddcf6caf1f93500d70ecc4b557d65b73d" translate="yes" xml:space="preserve">
          <source>By default, JSDoc's default template generates pretty-printed versions of your source files. It also links to these pretty-printed files in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c62dab9079366a112f4cbb68f0091a3b5d40309" translate="yes" xml:space="preserve">
          <source>By default, JSDoc's default template shows a shortened version of each symbol's name in the navigation column. For example, the symbol &lt;code&gt;my.namespace.MyClass&lt;/code&gt; would be displayed simply as &lt;code&gt;MyClass&lt;/code&gt;. To show the complete longname instead, set the option &lt;code&gt;templates.default.useLongnameInNav&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. This option is available in JSDoc 3.4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb6379a817239e87b4b863d3ffa585163b8827e" translate="yes" xml:space="preserve">
          <source>By default, both dictionaries are enabled. Also, by default, the &lt;code&gt;jsdoc&lt;/code&gt; dictionary is listed first; as a result, if the &lt;code&gt;jsdoc&lt;/code&gt; dictionary handles a tag differently than the &lt;code&gt;closure&lt;/code&gt; dictionary, the &lt;code&gt;jsdoc&lt;/code&gt; version of the tag takes precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f5b85df52a264b363c6fb56aab8e0434ce7e47" translate="yes" xml:space="preserve">
          <source>By default, symbols marked with the &lt;code&gt;@package&lt;/code&gt; tag will appear in your documentation. In JSDoc 3.3.0 and later, you can use the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-a/--access&lt;/code&gt; command-line option&lt;/a&gt; to change this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17c41966e534d2124b306f2dfac11dca6ec313c" translate="yes" xml:space="preserve">
          <source>By default, symbols marked with the &lt;code&gt;@protected&lt;/code&gt; tag will appear in your documentation. In JSDoc 3.3.0 and later, you can use the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-a/--access&lt;/code&gt; command-line option&lt;/a&gt; to change this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720ba9e084ea3125a0c82e5b1ec5b20855964c95" translate="yes" xml:space="preserve">
          <source>By default, the @memberof tag documents member symbols as static members. For inner and instance members, you can use scoping punctuation after the namepath, or you can add the &lt;a href=&quot;tags-inner&quot;&gt;@inner&lt;/a&gt; or &lt;a href=&quot;tags-instance&quot;&gt;@instance&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f637c85ae6ef1ae9963624c820990f2a960832f" translate="yes" xml:space="preserve">
          <source>By default, the Markdown plugin does not add an &lt;code&gt;id&lt;/code&gt; attribute to each HTML heading. To automatically add &lt;code&gt;id&lt;/code&gt; attributes based on the heading's text, set your JSDoc configuration file's &lt;code&gt;markdown.idInHeadings&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;. This property is available in JSDoc 3.4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca3f94965eb69e58a63261002c3baf60a05873d" translate="yes" xml:space="preserve">
          <source>By default, the Markdown plugin does not hard-wrap text at line breaks. This is because it's normal for a JSDoc comment to be wrapped across multiple lines. If you prefer to hard-wrap text at line breaks, set your JSDoc configuration file's &lt;code&gt;markdown.hardwrap&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;. This property is available in JSDoc 3.4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c71252ff5885938ef7f0311166ac040613f3ca" translate="yes" xml:space="preserve">
          <source>By default, the Markdown plugin only processes &lt;a href=&quot;#default-tags&quot;&gt;specific JSDoc tags&lt;/a&gt; for Markdown text. You can handle Markdown text in other tags by adding a &lt;code&gt;markdown.tags&lt;/code&gt; property to your JSDoc configuration file. The &lt;code&gt;markdown.tags&lt;/code&gt; property contains an array of the additional doclet properties that can contain Markdown text. (In most cases, the name of the doclet property is the same as the tag name. However, some tags are stored differently; for example, the &lt;code&gt;@param&lt;/code&gt; tag is stored in a doclet's &lt;code&gt;params&lt;/code&gt; property. If you're not sure how a tag's text is stored in a doclet, run JSDoc with the &lt;code&gt;-X/--explain&lt;/code&gt; tag, which prints each doclet to the console.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b608f2e0f306c63886dea71b88befab1ae88026d" translate="yes" xml:space="preserve">
          <source>By default, the example above produces output similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75dc5b702a84431c6f670390fb854580e33510ae" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;source.include&lt;/code&gt; and &lt;code&gt;opts&lt;/code&gt; options, you can put almost all of the arguments to JSDoc in a configuration file, so that the command line reduces to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5acf0252fbb09bb30a0a6801aeb72468ab865430" translate="yes" xml:space="preserve">
          <source>By using the @description tag, you can place the description anywhere in the JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f9a377a5245adf1c0c727ef509b19ea04d764a" translate="yes" xml:space="preserve">
          <source>Callback functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="d8a4e4e4159e5fe29f8134b6c6524d4a90d91ef1" translate="yes" xml:space="preserve">
          <source>Class that inherits from a parent class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccd02cc75b5cc0905393228f0d0ec0b824f2707" translate="yes" xml:space="preserve">
          <source>Class with &lt;code&gt;@ignore&lt;/code&gt; tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd7278538cd67d55f6f7beaf13d7034f1d0d0db" translate="yes" xml:space="preserve">
          <source>Command-line arguments to JSDoc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f02b16969d7b7084371ccd650bd2018ea72d2d" translate="yes" xml:space="preserve">
          <source>CommonJS Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1efaad8380b9fdd001ec7997fec2202ae956850" translate="yes" xml:space="preserve">
          <source>CommonJS module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c260523cce7024c568723eadc7d10eeac51161b4" translate="yes" xml:space="preserve">
          <source>Configuration file formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b720a86ce9b495dfc6575d624eaaa769c1821f36" translate="yes" xml:space="preserve">
          <source>Configuring JSDoc with a configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c4cf8ab67becbb12e390708f63b7cd95d920c3" translate="yes" xml:space="preserve">
          <source>Configuring JSDoc&amp;#x27;s default template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b21ffef2ab57a92c6b0caf7338f69bdb07b391" translate="yes" xml:space="preserve">
          <source>Configuring JSDoc's default template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafe7f9e4e1e91b60b5e7ffe43af89a4cf75745e" translate="yes" xml:space="preserve">
          <source>Configuring plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e89329a2fc795b7ed330eb9a0f0aabe3b4aae4" translate="yes" xml:space="preserve">
          <source>Configuring tags and tag dictionaries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600776823294a147442e83809951da20cd39b973" translate="yes" xml:space="preserve">
          <source>Configuring templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be3cc3cd6270abc45485a93b65723313e7884d8" translate="yes" xml:space="preserve">
          <source>Configuring titles, order, and hierarchy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8842e111369017437c38d78e83194aa7f5a6295" translate="yes" xml:space="preserve">
          <source>Conflicting @kind statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0daf82730120bfb58e7343c9965459ca0b5ab9" translate="yes" xml:space="preserve">
          <source>Constructor assigned to 'module.exports'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b017e5b4b89d6ff684844a26fb098545f160cf" translate="yes" xml:space="preserve">
          <source>Contribute</source>
          <target state="translated">Contribute</target>
        </trans-unit>
        <trans-unit id="7e90d058aa1fc081b62dc9cd76d3c285b7adea15" translate="yes" xml:space="preserve">
          <source>Contribute to JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d96c635363e853ca4a72335f03b45c41b6cbbe" translate="yes" xml:space="preserve">
          <source>Contribute to the JSDoc documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec9c4bd6ec0ad9cbe76a6b3021ff2709fa97328" translate="yes" xml:space="preserve">
          <source>Converting Markdown in 'foo' and 'bar' tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361293e06486aa47f3df0cfe645b376a4a1e3cd3" translate="yes" xml:space="preserve">
          <source>Converting Markdown in additional JSDoc tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfaa5f3bc0478c6d42434784f53c8086d484531c" translate="yes" xml:space="preserve">
          <source>Copying a directory of images to the output directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9882ef043bc5ff788af5e9ddb20f9f3b47662e19" translate="yes" xml:space="preserve">
          <source>Copying static files to the output directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8967f2f4c19dd13e14f567cd7446884a3bb4a334" translate="yes" xml:space="preserve">
          <source>Create a JavaScript module to contain your plugin code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c057d2a2df13091998b8e2a8a4d736f2797cdb" translate="yes" xml:space="preserve">
          <source>Creating and Enabling a Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94dca1d410e2e5ede7ed90448b1c04690f5b4720" translate="yes" xml:space="preserve">
          <source>Default configuration options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9d95056b76ae7949998164d07437c2dc6fee91" translate="yes" xml:space="preserve">
          <source>Defining a tag synonym</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563fff1662d259c80557006af5961f82fcd37d85" translate="yes" xml:space="preserve">
          <source>Defining a visitor for abstract syntax tree nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8a6bc69f2575e47234926bad14b7a67d38521c" translate="yes" xml:space="preserve">
          <source>Defining an onTagged callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e72e5dd3bb2963f27a85af220f418ce7159827c" translate="yes" xml:space="preserve">
          <source>Defining event handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce45b83b8c01cc8429cd709b7a1ecfc68c1bcaa6" translate="yes" xml:space="preserve">
          <source>Defining exported symbols as a member of 'module.exports' or 'exports'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4abada43c09690a3aba10edad63bd6944984da9" translate="yes" xml:space="preserve">
          <source>Defining exported symbols as a member of 'this'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d319a6f6306f5d43089e51d587240da2566bda9" translate="yes" xml:space="preserve">
          <source>Defining tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50af3b68484f97ad230d872d2a2297c68aca710e" translate="yes" xml:space="preserve">
          <source>Derived module names if none is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82139bae2700fad9ff48ee895939dcdf1ac51cc" translate="yes" xml:space="preserve">
          <source>Describe a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed567851f6f85e8509d45f60c7407b589909d77a" translate="yes" xml:space="preserve">
          <source>Describe a function or method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2c465a3c5d59b544a420133d770e9107dbf3cd" translate="yes" xml:space="preserve">
          <source>Describe a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5150751e7b5efcfb4c0f13be82020a01f0f1bd25" translate="yes" xml:space="preserve">
          <source>Describe the events this method may fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf8e08f752b5a11bca41148c8a0350cfa45997a" translate="yes" xml:space="preserve">
          <source>Describe what errors could be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a4ec90055c69256024a44c478bb911d2ca7b91" translate="yes" xml:space="preserve">
          <source>Describing a symbol with the @description tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84a2291469f23105cc872268d9b77436926fe93" translate="yes" xml:space="preserve">
          <source>Describing a symbol without the @description tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="91642d2eab8e58a8b1a0854ec43ea37591f67a7d" translate="yes" xml:space="preserve">
          <source>Directory in which JSDoc should search for tutorials. If omitted, no tutorial pages will be generated. See the &lt;a href=&quot;about-tutorials&quot;&gt;tutorial instructions&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437cee46793bc29a6c52ef862e0e131d22ab8146" translate="yes" xml:space="preserve">
          <source>Display information about JSDoc's command-line options, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471ae3774649721b7a3995af7a9d69af207b1cc2" translate="yes" xml:space="preserve">
          <source>Displays JSDoc's version number, then exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e011a1571bc7d47dd7d273e896641b02ea392920" translate="yes" xml:space="preserve">
          <source>Distinguish different objects with the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e9141e5bcaa3cef9ffd121844796df9ac6af1d" translate="yes" xml:space="preserve">
          <source>Document a JavaScript module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daae8123418c9a8d7d3112e0b58b21fe9880bdcb" translate="yes" xml:space="preserve">
          <source>Document a callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f7ad77d0bf55b2565d5fc1bf3299b6a8118bc1" translate="yes" xml:space="preserve">
          <source>Document a callback using the &lt;a href=&quot;tags-callback&quot;&gt;@callback&lt;/a&gt; tag. The syntax is identical to the @typedef tag, except that a callback's type is always &quot;function.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e2c8b1fb429607071ed92dc0e7a8de2b41cd2f" translate="yes" xml:space="preserve">
          <source>Document a collection of related properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c008d2b0fa771175469110088dcffeede0dbdf90" translate="yes" xml:space="preserve">
          <source>Document a custom type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29aa5a43e1471bff7da06e13939f3e850b6b03f4" translate="yes" xml:space="preserve">
          <source>Document a global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014c78afe2ce134174385b843983700dcf9badaa" translate="yes" xml:space="preserve">
          <source>Document a member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6133e8b3f402927aedfe8438bee25da2c68a08" translate="yes" xml:space="preserve">
          <source>Document a mixin object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cb52341aeed8cd9db21037a1828e857b472302" translate="yes" xml:space="preserve">
          <source>Document a namespace object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88c16a0fc343d7be35567a78491f0acee2deb80" translate="yes" xml:space="preserve">
          <source>Document a property of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fac8547abbe4bc9c0bc3ee32099dbaee07bd6f8" translate="yes" xml:space="preserve">
          <source>Document a static member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ffc3502d7844b7083dc09978721d877812f13c" translate="yes" xml:space="preserve">
          <source>Document an event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154954d8a13b750d7f042ca53c1ae8445a473b85" translate="yes" xml:space="preserve">
          <source>Document an inner object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabc5df5d96ce2aa8e51b3c46389d526efd5c823" translate="yes" xml:space="preserve">
          <source>Document an inner variable as a global</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585e2df7f873a52994c6cdb39c3d8f570136a32c" translate="yes" xml:space="preserve">
          <source>Document an instance member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1071f59b82af76ef91870673d5e50e54deb80d9" translate="yes" xml:space="preserve">
          <source>Document an object as a constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5a2fde7b5313f15a2c15173b2cd541d634ed52" translate="yes" xml:space="preserve">
          <source>Document properties on an object literal as if they belonged to a symbol with a given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7f3a556bec4275af93caacd658354832a7c48f" translate="yes" xml:space="preserve">
          <source>Document some copyright information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015e977226f7325e22d34f18948fb684942bf18b" translate="yes" xml:space="preserve">
          <source>Document tasks to be completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033566d2cc92190879895b39f5a4d5eab33e58c0" translate="yes" xml:space="preserve">
          <source>Document that the old function has been deprecated since version 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72310ad55faeb07f91d473a66e510245ae48c45b" translate="yes" xml:space="preserve">
          <source>Document that this is no longer the preferred way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8e0a81c5e7633efd74b72fe74de166175b5513" translate="yes" xml:space="preserve">
          <source>Document the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b5f262960676965a8db9f6cbc48cf43d87aead" translate="yes" xml:space="preserve">
          <source>Document the name of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308625ed61314ed79a2dc2fae71bcce4fda6c7a6" translate="yes" xml:space="preserve">
          <source>Document the number value of a constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7085a48023e0d139e04ed5b5d0ad1c2b2ef4421b" translate="yes" xml:space="preserve">
          <source>Document the parameter to a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ad20f87c7cc825498046895054d0e34367bbd6" translate="yes" xml:space="preserve">
          <source>Document the return value of a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8069d4cdceaecb8fe79413dcc293a511bacbf4" translate="yes" xml:space="preserve">
          <source>Document the type of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbfc6a353550b351d83829c6b181e32192c2cc4" translate="yes" xml:space="preserve">
          <source>Document the value yielded by a generator function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe54dab33cb7fff6dbf0077d896174fd5ac6b104" translate="yes" xml:space="preserve">
          <source>Documented as instance methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ef0c6b2a1c0b4e3bc2a32767e19dd811ecb084" translate="yes" xml:space="preserve">
          <source>Documented as static methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0172f87b87d4f910ad488c894b458dd7858193c6" translate="yes" xml:space="preserve">
          <source>Documented with a constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00db72ff98fab5bab88c88e0388f2f603dee612" translate="yes" xml:space="preserve">
          <source>Documenting a class-specific callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcc23856df9a2e73117b27eba190057564ab20c" translate="yes" xml:space="preserve">
          <source>Documenting a class/subclass relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7200df04a21c5a85af16ea9c56822a4f3e2d26" translate="yes" xml:space="preserve">
          <source>Documenting a destructuring parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f8539b6a3d94b3d5ff491effd918c0f93ba60b" translate="yes" xml:space="preserve">
          <source>Documenting a function call as an event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9a4be32eb0a60cb3b5b6ddc2c0ddc9f9cddb14" translate="yes" xml:space="preserve">
          <source>Documenting a global callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223bb6640aa80eee9a627f9b7ca3702049a8c1ec" translate="yes" xml:space="preserve">
          <source>Documenting a nested external symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a662c46849be1d87bc2c36e0de26720820798b84" translate="yes" xml:space="preserve">
          <source>Documenting a parameter's properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2934aa1abc6386f09cdfd3d76bfee5c5b85cd22c" translate="yes" xml:space="preserve">
          <source>Documenting a simple class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e61d047a37fefda3f6ae7eafa08b93c93ff0dc" translate="yes" xml:space="preserve">
          <source>Documenting a type with properties 'id', 'name', 'age'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883658ca0eb9ccf4cb71e3a0000e8656113cdee5" translate="yes" xml:space="preserve">
          <source>Documenting an event and its listener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8934d8386bc6bd17a2f628ca4d7481af2dcf3009" translate="yes" xml:space="preserve">
          <source>Documenting examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954dabaf813fc4eb5b902a40af23d35254038ec7" translate="yes" xml:space="preserve">
          <source>Documenting examples with a caption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f896b64409fc466903b771f6c2f925468506882" translate="yes" xml:space="preserve">
          <source>Documenting external namespaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f60c9d285d9615d9494c3156372d3ce05c5f544" translate="yes" xml:space="preserve">
          <source>Documenting methods added to built-in classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f606488b029198c16d5c153d0a47f69a1e848f" translate="yes" xml:space="preserve">
          <source>Documenting properties of values in an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a6970c4ed4d2d64e61ac17989c57f61eeade96" translate="yes" xml:space="preserve">
          <source>Documenting the author of an item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63b6d748619aa5e1f7aa4081856491195c7f0a8" translate="yes" xml:space="preserve">
          <source>Documenting values exported by a module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440e3c46d1281346cf6555fe34426f8c7c4d8708" translate="yes" xml:space="preserve">
          <source>Documents the version number of an item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ede06dcea0275c2e504a331b5bce7098030c36" translate="yes" xml:space="preserve">
          <source>Documents the version of an item. The text following the @version tag will be used to denote the version of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089bcfe12ef1c310da4d9141d9286628b7b21013" translate="yes" xml:space="preserve">
          <source>Dump all doclets to the console in JSON format, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca500fa76b5c00aead323dfbd8bd12a33af6086d" translate="yes" xml:space="preserve">
          <source>Duplicate the documentation for trstr as util.trim</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96dd2485b132281011f92394f799807bf6764f0b" translate="yes" xml:space="preserve">
          <source>ES 2015 Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090f80723b8e8f9c175ec7bf18ce55ecedc4a9e6" translate="yes" xml:space="preserve">
          <source>ES 2015 Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67471db08787e0d0b897d83efe00fcbb74db28f" translate="yes" xml:space="preserve">
          <source>ES 2015 class expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a124bd60f1affde59282922a5adfd714c877909a" translate="yes" xml:space="preserve">
          <source>Each type is specified by providing a type expression, using one of the formats described below. Where appropriate, JSDoc will automatically create links to the documentation for other symbols. For example, &lt;code&gt;@type {MyClass}&lt;/code&gt; will link to the MyClass documentation if that symbol has been documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20e4c35ff792aa650833bfe38b7ca6d13baa4a5" translate="yes" xml:space="preserve">
          <source>Enable Markdown support in JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7c7d7041ec20132db83038fc8a4137d8525896" translate="yes" xml:space="preserve">
          <source>Enabling the Markdown plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c874625e9b4c4789838bc2475c5fa96b872d071" translate="yes" xml:space="preserve">
          <source>Event Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd43b3ecd017b5a4e2a8b97332c529e24d265d9" translate="yes" xml:space="preserve">
          <source>Event-handler plugin for 'newDoclet' events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d0cf1d88915ea0428a34f4c64ab21290fe000c" translate="yes" xml:space="preserve">
          <source>Event: beforeParse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e38056b47a709c90f77dc6e04b799d79d09597" translate="yes" xml:space="preserve">
          <source>Event: fileBegin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269f49239eea93a2c673d4def954b5728db3bbf8" translate="yes" xml:space="preserve">
          <source>Event: fileComplete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe2cd6ed2f25225886856faff09788a3ff0e2d8" translate="yes" xml:space="preserve">
          <source>Event: jsdocCommentFound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04388701431345f90be5251c3238261677e8848" translate="yes" xml:space="preserve">
          <source>Event: newDoclet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9174197b7d98b39e0893cfb3ecf461dc4710c8" translate="yes" xml:space="preserve">
          <source>Event: parseBegin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2ee193193ef867935c057a5f6c14b4aad2b29a" translate="yes" xml:space="preserve">
          <source>Event: parseComplete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2885948e5b257b4afd650fb5a3e9dea03bc06e41" translate="yes" xml:space="preserve">
          <source>Event: processingComplete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4affc129e64509faade55f896f11d18014f4e03" translate="yes" xml:space="preserve">
          <source>Event: symbolFound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="d7ab19d35ccd97901b284521116336912de39403" translate="yes" xml:space="preserve">
          <source>Example class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41385c4f87eab7b2a3100b4474ef592857f5923c" translate="yes" xml:space="preserve">
          <source>Example of a @mixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="0243f47fde152fee360d097fe3d5cd2f4e29c3bc" translate="yes" xml:space="preserve">
          <source>Examples can also be captioned using &lt;code&gt;&amp;lt;caption&amp;gt;&amp;lt;/caption&amp;gt;&lt;/code&gt; after the @example tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1563c4180498445b22ba49f143c89f839de3ab90" translate="yes" xml:space="preserve">
          <source>Excluding the 'author' tag from Markdown processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83164c269a4780d6a8156c0330d5418447bbb76d" translate="yes" xml:space="preserve">
          <source>Excluding the default tags from Markdown processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa1b7d4bdcaf5fec4d2362ad57713c063668f42" translate="yes" xml:space="preserve">
          <source>Exported values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc260f3c5076444112170e3fb2cd435916344f31" translate="yes" xml:space="preserve">
          <source>Extending an ES 2015 class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e81dcf516637876d30c13dc70400f76f82b2239" translate="yes" xml:space="preserve">
          <source>Extending an external.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8697ed801ffac2e2f84566d86d8e5dc5b864af" translate="yes" xml:space="preserve">
          <source>Extending classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6715c0f487d02b72ff765e4f8b102035c3aa7455" translate="yes" xml:space="preserve">
          <source>File description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148a2617b4477b3ab58aa3443197ce8abb62d455" translate="yes" xml:space="preserve">
          <source>For ES2015 classes, use this tag in the JSDoc comment for your constructor. If your class does not have an explicit constructor, use this tag in the JSDoc comment for the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704c7b26ed82de050095008301dc3cc6e2e3cff2" translate="yes" xml:space="preserve">
          <source>For a more comprehensive example of a JSON configuration file, see the file &lt;a href=&quot;https://github.com/jsdoc3/jsdoc/blob/master/conf.json.EXAMPLE&quot;&gt;&lt;code&gt;conf.json.EXAMPLE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bf6d283f52ae066ec02501afe4678939fd29c0" translate="yes" xml:space="preserve">
          <source>For each file found in Step 1, if the regular expression &lt;code&gt;source.includePattern&lt;/code&gt; is present, the filename must match it, or it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcebfcee9aa1c28e7ca6b6843678a053f2686cbe" translate="yes" xml:space="preserve">
          <source>For each file left from Step 2, if the regular expression &lt;code&gt;source.excludePattern&lt;/code&gt; is present, any filename matching this regular expression is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526d5b3aacbe4f248038bc6a8371a64503fea0ab" translate="yes" xml:space="preserve">
          <source>For each file left from Step 3, if the file's path is in &lt;code&gt;source.exclude&lt;/code&gt;, it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbdd2544ebec7df9c1d4149ae580da7ce9ad210" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; tags accept values that are stored in a doclet's &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; properties, you could enable Markdown processing of these tags by adding the following settings to your JSDoc configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4b4a2d6a59660da75960338b3e59c1f45b324c" translate="yes" xml:space="preserve">
          <source>For example, if your plugin is defined in the &lt;code&gt;plugins/shout.js&lt;/code&gt; file in the current working directory, you would add the string &lt;code&gt;plugins/shout&lt;/code&gt; to the &lt;code&gt;plugins&lt;/code&gt; array in your JSDoc configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72f71e804cb2937167ab75a25b74b7786b0d740" translate="yes" xml:space="preserve">
          <source>For example, the following JSON configuration file will enable the Markdown plugin, which converts Markdown-formatted text to HTML, and the &quot;summarize&quot; plugin, which autogenerates a summary for each doclet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab927df685d7c6a12805cd747f5a8c4196ef56cf" translate="yes" xml:space="preserve">
          <source>For example, to exclude the &lt;code&gt;author&lt;/code&gt; tag from Markdown processing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258eea8d6b20114f99f52f3867bb998f6544ce49" translate="yes" xml:space="preserve">
          <source>For example, to extend the &lt;code&gt;Point&lt;/code&gt; class shown above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d14581ef8aa1ae2f58dfd8ef3f8dc45f41f6dd" translate="yes" xml:space="preserve">
          <source>For instance members of a class, use the syntax &quot;@memberof ClassName.prototype&quot; or &quot;@memberof ClassName#&quot;. Alternatively, you can combine &quot;@memberof ClassName&quot; with the &quot;@instance&quot; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c1cad8ea961f7ff745c4981a91192edfc6c277" translate="yes" xml:space="preserve">
          <source>For members that are defined within an object literal, you can use the @alias tag as an alternative to the &lt;a href=&quot;tags-lends&quot;&gt;@lends&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb1a701dacd9fc379187e0cc926a6411d1f2fa7" translate="yes" xml:space="preserve">
          <source>For most JSDoc templates, including the default template, the &lt;code&gt;@ignore&lt;/code&gt; tag has the following effects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b76f9e577ea7ef2a5283adfbde2a9cfe626677" translate="yes" xml:space="preserve">
          <source>For objects that have a known set of properties, you can use Closure Compiler's syntax for documenting record types. You can document each property individually, which enables you to provide more detailed information about each property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520ec23c0fca2cbcd7ce76fe8f06946b3d59173e" translate="yes" xml:space="preserve">
          <source>For pre-ES2015 classes, use this tag in combination with the &lt;a href=&quot;tags-class&quot;&gt;&lt;code&gt;@class&lt;/code&gt; or &lt;code&gt;@constructor&lt;/code&gt; tag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945d1820e51522f9e5b56da9462746d7c6df45b2" translate="yes" xml:space="preserve">
          <source>For value types (strings, numbers, and booleans) assigned to &lt;code&gt;module.exports&lt;/code&gt;, you must document the exported value's type by using the &lt;a href=&quot;tags-type&quot;&gt;&lt;code&gt;@type&lt;/code&gt; tag&lt;/a&gt; in the same JSDoc comment as the &lt;code&gt;@module&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2290896ecf6383c7a3ce85956a7c7881ed28051" translate="yes" xml:space="preserve">
          <source>Fork me on GitHub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13020fe89dfaf34b9c49762d44a33a9396863462" translate="yes" xml:space="preserve">
          <source>Function assigned to 'module.exports'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f9eecf1c8b83a848d6e8826b319796aa56060e" translate="yes" xml:space="preserve">
          <source>Function that returns a constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd384d6ee06ffeffc5fcb20a43a057e53233045" translate="yes" xml:space="preserve">
          <source>Function that returns an object literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6b187cb712aea01d664073342a8d470d648423" translate="yes" xml:space="preserve">
          <source>Function that returns another function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9409fccede63a13e56d65410dfc1b980481373a7" translate="yes" xml:space="preserve">
          <source>Generate documentation for files in the &lt;code&gt;./src&lt;/code&gt; directory, using the configuration file &lt;code&gt;/path/to/my/conf.json&lt;/code&gt;, and save the output in the &lt;code&gt;./docs&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892fcf21305b25a51c4babf96d38268d23591c9e" translate="yes" xml:space="preserve">
          <source>Generating a website</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f8f5104a200ae993d5bafd641ae11225891191" translate="yes" xml:space="preserve">
          <source>Generating pretty-printed source files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545e236f738275d323870e5a018a2e75c535d307" translate="yes" xml:space="preserve">
          <source>Getting Started with JSDoc 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c43117774fec9087e5e2d8272412ca42dbba3c6" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;source.include&lt;/code&gt; and the paths given on the command line, JSDoc starts off with these files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90663d62ecd6a2358b60ec694775ae1a4b3f9c4" translate="yes" xml:space="preserve">
          <source>Hard-wrapping text at line breaks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761604444c18b688316dc720518dc6082cf8100c" translate="yes" xml:space="preserve">
          <source>Here is an example of using @var, a synonym of @member, to document a (virtual) variable 'foo'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43f941f4a707fdced1cfe377cd3294ea7fbfa45" translate="yes" xml:space="preserve">
          <source>Here's why:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74418d62ebaf2babd186834a4c7109ec3848a36" translate="yes" xml:space="preserve">
          <source>How to add JSDoc comments to AMD and RequireJS modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dd77a0b4022c6a60e28ff858d4dd9679425088" translate="yes" xml:space="preserve">
          <source>How to add JSDoc comments to CommonJS and Node.js modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdea9afba1f7cca75701bced90bc02c6de9119a" translate="yes" xml:space="preserve">
          <source>How to add JSDoc comments to ECMAScript 2015 classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82204aa4a655c5c8e5c508652cf6b85ae32ec76" translate="yes" xml:space="preserve">
          <source>How to add JSDoc comments to ECMAScript 2015 modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71507ee7c76a7a1bd8092917fbaeb59d70b8544b" translate="yes" xml:space="preserve">
          <source>How to configure JSDoc using a configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce7b1bbb186c278541032cc480f93d913063f5b" translate="yes" xml:space="preserve">
          <source>How to configure the output from JSDoc's default template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618fad3ae855049356db9ad1bbc1884a1b5453b6" translate="yes" xml:space="preserve">
          <source>How to create and use JSDoc plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd47b25ea91173d1cd017c6111ee1eecb4c05f96" translate="yes" xml:space="preserve">
          <source>How to include a README file in your documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4393c1622cb91802b1772a2904196225161be1" translate="yes" xml:space="preserve">
          <source>How to show package details in your documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19e9384f5550f22b04906214d2528c568cef5d6" translate="yes" xml:space="preserve">
          <source>Identifies an external class, namespace, or module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31c6d4e9b8c1df406595b1c23011c25febd7a27" translate="yes" xml:space="preserve">
          <source>Identify the author of an item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902deaf1c0f8e22b210083d6a714fee13e1de544" translate="yes" xml:space="preserve">
          <source>Identify the license that applies to this code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e34d0d06ec4916ef302ee4916404c46d227ab0" translate="yes" xml:space="preserve">
          <source>Identify the member that is exported by a JavaScript module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5a81d262294c71ee4e4f0ad2b5d84f46123a86" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templates.cleverLinks&lt;/code&gt; is true, &lt;code&gt;templates.monospaceLinks&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97d2dc17445080b1ca407a658ff0a4364ec0337" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templates.cleverLinks&lt;/code&gt; is true, &lt;code&gt;{@link asdf}&lt;/code&gt; will be rendered in normal font if &lt;code&gt;asdf&lt;/code&gt; is a URL, and monospace otherwise. For example, &lt;code&gt;{@link http://github.com}&lt;/code&gt; will render in plain text, but &lt;code&gt;{@link MyNamespace.myFunction}&lt;/code&gt; will be in monospace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3eda7ceb826b3d481004c1c18640b09a41d1e7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templates.monospaceLinks&lt;/code&gt; is true, all link text from the &lt;a href=&quot;tags-inline-link&quot;&gt;inline &lt;code&gt;{@link}&lt;/code&gt; tag&lt;/a&gt; will be rendered in monospace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ef1a321490201f7a9dbdf91c03a78986dcb004" translate="yes" xml:space="preserve">
          <source>If JSDoc determines that a type expression is invalid, it will display an error and stop running. You can turn this error into a warning by running JSDoc with the &lt;code&gt;--lenient&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9878704c6410d0335fc3953d9089d8864cb6ddd6" translate="yes" xml:space="preserve">
          <source>If a @namespace includes a symbol whose name has unusual characters, you must enclose the symbol's name in double quotes. If the symbol's name already contains one or more double quotes, escape the double quotes with a leading backslash (\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62900c5bfa1c581e3a5b6e8f80a0624208927c13" translate="yes" xml:space="preserve">
          <source>If a module assigns an object literal to &lt;code&gt;module.exports&lt;/code&gt;. JSDoc automatically recognizes that the module exports only this value. In addition, JSDoc automatically sets the correct longname for each property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25c061fd313b8062c336362f28b351dab803f74" translate="yes" xml:space="preserve">
          <source>If a namespace is defined by a symbol other than an object literal, you can include a type expression along with the @namespace tag. If the @namespace tag includes a type, it must also include a name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa232fe8d6eaae31d5b4e45c26a58cbafa99138" translate="yes" xml:space="preserve">
          <source>If a parameter accepts a callback function, you can use the &lt;a href=&quot;tags-callback&quot;&gt;&lt;code&gt;@callback&lt;/code&gt; tag&lt;/a&gt; to define a callback type, then include the callback type in the &lt;code&gt;@param&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cf171d6f95990d039ba96239989c6fe9c841db" translate="yes" xml:space="preserve">
          <source>If a parameter is destructured without an explicit name, you can give the object an appropriate one and document its properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad79f1170a89d87aad1ab87e902e1aee573906e" translate="yes" xml:space="preserve">
          <source>If a parameter is expected to have a specific property, you can document that property by providing an additional &lt;code&gt;@param&lt;/code&gt; tag. For example, if an &lt;code&gt;employee&lt;/code&gt; parameter is expected to have &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;department&lt;/code&gt; properties, you can document it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8263b6169cbc87f901c996162603c4ce75fd8c66" translate="yes" xml:space="preserve">
          <source>If all of these tutorials are defined, and the title of the &lt;code&gt;gettingstarted&lt;/code&gt; tutorial is &quot;Getting Started,&quot; the example above produces output similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2467cdfc808c7b67b772462ba6327ba099d604da" translate="yes" xml:space="preserve">
          <source>If recursion is enabled with the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-r&lt;/code&gt; command-line flag&lt;/a&gt;, JSDoc will search for files 10 levels deep (&lt;code&gt;recurseDepth&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d52fc43f6c9d4dffe36bbd034a15a817cb4753" translate="yes" xml:space="preserve">
          <source>If the configuration property &lt;code&gt;templates.cleverLinks&lt;/code&gt; were set to &lt;code&gt;true&lt;/code&gt;, the example above would produce the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821bbc7b042db6ee66fb651fd4f406f4a60fb1af" translate="yes" xml:space="preserve">
          <source>If the module name is not provided, it is derived from the module's path and filename. For example, suppose I have a file &lt;code&gt;test.js&lt;/code&gt;, located in the &lt;code&gt;src&lt;/code&gt; directory, that contains the block comment &lt;code&gt;/** @module */&lt;/code&gt;. Here are some scenarios for running JSDoc and the resulting module names for test.js:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335a6f476d770599c1998e749e9da5370e286d29" translate="yes" xml:space="preserve">
          <source>If the module object is passed into the function that defines your module, you can document the module by adding an &lt;a href=&quot;tags-exports&quot;&gt;&lt;code&gt;@exports&lt;/code&gt; tag&lt;/a&gt; to the function parameter. This pattern is supported in JSDoc 3.3.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0464f2aaee82568f926ebe0edf6b3be68471ac" translate="yes" xml:space="preserve">
          <source>If there's both a description at the beginning of a JSDoc comment and a description provided with the @description tag, the description specified with the @description will override the description at the beginning of the comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25b81d05e8760d4f85663dc26604d52786baa13" translate="yes" xml:space="preserve">
          <source>If you are documenting a generator function, use the &lt;a href=&quot;tags-yields&quot;&gt;&lt;code&gt;@yields&lt;/code&gt; tag&lt;/a&gt; instead of this tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9721f789d4f59316be72a286044e28d4e835ee75" translate="yes" xml:space="preserve">
          <source>If you are documenting a regular function, use the &lt;a href=&quot;tags-returns&quot;&gt;&lt;code&gt;@returns&lt;/code&gt; tag&lt;/a&gt; instead of this tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a120796084deb99340c044863588c6d9cc647a" translate="yes" xml:space="preserve">
          <source>If you are using JSDoc with a Closure Compiler project, and you want to avoid using tags that Closure Compiler does not recognize, change the &lt;code&gt;tags.dictionaries&lt;/code&gt; setting to &lt;code&gt;[&quot;closure&quot;]&lt;/code&gt;. You can also change this setting to &lt;code&gt;[&quot;closure&quot;,&quot;jsdoc&quot;]&lt;/code&gt; if you want to allow core JSDoc tags, but you want to ensure that Closure Compiler-specific tags are interpreted as Closure Compiler would interpret them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d354d52d0b99ab8b0604d4ff8d6f006a4c4ddaae" translate="yes" xml:space="preserve">
          <source>If you are using JSDoc's default template, the &lt;code&gt;README&lt;/code&gt; file's contents will be rendered in HTML in the generated documentation's &lt;code&gt;index.html&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90246987d6f317138ba88b1d64d46758177934d4" translate="yes" xml:space="preserve">
          <source>If you are using the JSDoc tag dictionary (enabled by default), you can also define an interface with virtual comments, rather than by writing code for the interface. See &quot;&lt;a href=&quot;#virtual-comments&quot;&gt;Virtual comments that define an interface&lt;/a&gt;&quot; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e265546592d06fea664c540bce7fd5060d35979" translate="yes" xml:space="preserve">
          <source>If you assign a function to &lt;code&gt;module.exports&lt;/code&gt;, JSDoc will automatically set the correct longname for the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52998adb12afa34c6892c6f93a28e5b741c5aa76" translate="yes" xml:space="preserve">
          <source>If you declare your module object in a function's &lt;code&gt;return&lt;/code&gt; statement, you can use a standalone comment with a &lt;a href=&quot;tags-module&quot;&gt;&lt;code&gt;@module&lt;/code&gt; tag&lt;/a&gt; to document the module. You can then add an &lt;a href=&quot;tags-alias&quot;&gt;&lt;code&gt;@alias&lt;/code&gt; tag&lt;/a&gt; to tell JSDoc that the module object has the same longname as the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe33603ab3ef27abdd2ee718dd8df4d8f7b1bd65" translate="yes" xml:space="preserve">
          <source>If you define more than one AMD module in a single JavaScript file, use the &lt;a href=&quot;tags-exports&quot;&gt;&lt;code&gt;@exports&lt;/code&gt; tag&lt;/a&gt; to document each module object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172a4a3360ce4a03c4cdf05d260e9163184ad4cf" translate="yes" xml:space="preserve">
          <source>If you define your AMD module as a function that returns an object literal, use the &lt;a href=&quot;tags-exports&quot;&gt;&lt;code&gt;@exports&lt;/code&gt; tag&lt;/a&gt; to document the module's name. JSDoc will automatically detect that the object's properties are members of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54025f22ad689b6e4e80046f01def28ad5161570" translate="yes" xml:space="preserve">
          <source>If you define your module as a function that exports another function, such as a constructor, you can use a standalone comment with a &lt;a href=&quot;tags-module&quot;&gt;&lt;code&gt;@module&lt;/code&gt; tag&lt;/a&gt; to document the module. You can then use an &lt;a href=&quot;tags-alias&quot;&gt;&lt;code&gt;@alias&lt;/code&gt; tag&lt;/a&gt; to tell JSDoc that the function uses the same longname as the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53184f66ee50d6cb96e438ada8d1ad8b02d21ff1" translate="yes" xml:space="preserve">
          <source>If you describe a symbol at the very beginning of a JSDoc comment, before using any block tags, you may omit the @description tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03358c19834102e0cb7386a3bcb79db3c1ca29a6" translate="yes" xml:space="preserve">
          <source>If you do not document one of the symbols in the implementation, JSDoc will automatically use the interface's documentation for that symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08f2f73a5f5db1fe9df97454e310bc940cdcd11" translate="yes" xml:space="preserve">
          <source>If you do not specify a configuration file, JSDoc uses the following configuration options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db09d745a842fa45ab68c2bb3aa3e0bc021a506d" translate="yes" xml:space="preserve">
          <source>If you include a &lt;a href=&quot;tags-tutorial&quot;&gt;&lt;code&gt;@tutorial&lt;/code&gt; block tag&lt;/a&gt; in a JSDoc comment, the generated documentation will include a link to the tutorial you specify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497d9d4be58483339689661140da763430ca099c" translate="yes" xml:space="preserve">
          <source>If you need to link to a namepath or a URL, use the &lt;a href=&quot;tags-inline-link&quot;&gt;&lt;code&gt;{@link}&lt;/code&gt; inline tag&lt;/a&gt; instead of the &lt;code&gt;{@tutorial}&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4c012a074676d36b58b7ab81b2a02c5a9866d5" translate="yes" xml:space="preserve">
          <source>If you need to link to a tutorial, use the &lt;a href=&quot;tags-inline-tutorial&quot;&gt;&lt;code&gt;{@tutorial}&lt;/code&gt; inline tag&lt;/a&gt; instead of the &lt;code&gt;{@link}&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5424b5d5e669578d224e12a57ab4d83cf2be10eb" translate="yes" xml:space="preserve">
          <source>If you provide a description, you can make the JSDoc comment more readable by inserting a hyphen before the description. Be sure to include a space before and after the hyphen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2916b6a683aaf393eea86309ceadd01b65d807" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;jsdoc myProject/c.js -c /path/to/my/conf.json -r&lt;/code&gt; from the file containing the &lt;code&gt;myProject&lt;/code&gt; folder, JSDoc will generate documentation for the following files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d23ef45c6f574d8f42a112c420ef5a18109a5f" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;@exports&lt;/code&gt; or &lt;code&gt;@module&lt;/code&gt; tag without a value, JSDoc will try to guess the correct module identifier based on the filepath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c594e464f62f98c9953896c85d7a664b607eed7e" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;@ignore&lt;/code&gt; tag with the &lt;code&gt;@class&lt;/code&gt; or &lt;code&gt;@module&lt;/code&gt; tag, the entire class or module will be omitted from the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be81c316d41e0d32c2f1dd5aa509f34d866159d7" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;@ignore&lt;/code&gt; tag with the &lt;code&gt;@namespace&lt;/code&gt; tag, you must also add the &lt;code&gt;@ignore&lt;/code&gt; tag to any child classes and namespaces. Otherwise, your documentation will show the child classes and namespaces, but with incomplete names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca9a770fa14e0c7cbbf1dade9284f4062877924" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;@module&lt;/code&gt; tag without a value, JSDoc will try to guess the correct module identifier based on the filepath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6b5b64237b9cf5fc17595c62ffff98bcdc6c9f" translate="yes" xml:space="preserve">
          <source>If you want a callback to be displayed with the type definitions for a specific class, you can give the callback a namepath indicating that it is an inner function of that class. You can also define a global callback type that is referenced from multiple classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd60221bf340fd9c108731c622b4f29ec168b0ef" translate="yes" xml:space="preserve">
          <source>If you're documenting CommonJS or Node.js modules, see &lt;a href=&quot;howto-commonjs-modules&quot;&gt;CommonJS Modules&lt;/a&gt; for instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5484cdecd7684c5e244244334f1aedb3feaaa9b0" translate="yes" xml:space="preserve">
          <source>If your JSDoc comment includes the &lt;a href=&quot;tags-inheritdoc&quot;&gt;&lt;code&gt;@inheritdoc&lt;/code&gt; tag&lt;/a&gt;, you do not need to include the &lt;code&gt;@override&lt;/code&gt; tag. The presence of the &lt;code&gt;@inheritdoc&lt;/code&gt; tag implies the presence of the &lt;code&gt;@override&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a31c595fedb81f4a5ecd01af621a49f92130f5" translate="yes" xml:space="preserve">
          <source>If your module exports an object named anything other than &quot;exports&quot; or &quot;module.exports&quot;, use the @exports tag to indicate what is being exported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b93b36cbe68ecc4f730db8983ca86d937cd6b1" translate="yes" xml:space="preserve">
          <source>If your module exports symbols that are not directly assigned to &lt;code&gt;module.exports&lt;/code&gt;, you can use the &lt;a href=&quot;tags-exports&quot;&gt;&lt;code&gt;@exports&lt;/code&gt; tag&lt;/a&gt; in place of the &lt;code&gt;@module&lt;/code&gt; tag. The &lt;code&gt;@exports&lt;/code&gt; tag tells JSDoc that a symbol represents the value exported by a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70eef038676c8c6b5641486bca77f9c5de9f237" translate="yes" xml:space="preserve">
          <source>If your plugin needs to report an error, use one of the following methods in the &lt;code&gt;jsdoc/util/logger&lt;/code&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed04fc5cc6b4d4ebaee38fa5ac4f9ae02e2ee1c" translate="yes" xml:space="preserve">
          <source>If your static files directory contains the file &lt;code&gt;./myproject/static/img/screen.png&lt;/code&gt;, you can display the image in your docs by using the HTML tag &lt;code&gt;&amp;lt;img src=&quot;img/screen.png&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288ddf0cb142bbe2a72c42f71c30992a44c25b52" translate="yes" xml:space="preserve">
          <source>In JSDoc 3, the &lt;code&gt;@public&lt;/code&gt; tag does &lt;em&gt;not&lt;/em&gt; affect a symbol's scope. Use the &lt;a href=&quot;tags-instance&quot;&gt;&lt;code&gt;@instance&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tags-static&quot;&gt;&lt;code&gt;@static&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;tags-global&quot;&gt;&lt;code&gt;@global&lt;/code&gt;&lt;/a&gt; tags to change a symbol's scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38dbd0a60972652a78e6c1594adfe05429ee4769" translate="yes" xml:space="preserve">
          <source>In JSDoc 3.2.0 and later, you can use the following formats for the JSON file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2817a1db5d328e6e7b0a398ff09bb87b9ffffc2" translate="yes" xml:space="preserve">
          <source>In JSDoc 3.3.0 and later, &lt;code&gt;&amp;lt;moduleName&amp;gt;&lt;/code&gt; may include the &lt;code&gt;module:&lt;/code&gt; prefix. In previous versions, you must omit this prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01d65dcd1e6db28402e1adf3282a69ac8033071" translate="yes" xml:space="preserve">
          <source>In JSDoc 3.3.0 and later, if a symbol inherits from multiple parents, and both parents have identically named members, JSDoc uses the documentation from the last parent that is listed in the JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf434a29770022a38e72fecea32d188c980080c6" translate="yes" xml:space="preserve">
          <source>In a Node.js module, you can assign a value directly to &lt;code&gt;module.exports&lt;/code&gt;. This section explains how to document different types of values when they are assigned to &lt;code&gt;module.exports&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce7aefca80329e96858f2a5bbe1ff717c47111d" translate="yes" xml:space="preserve">
          <source>In addition, suppose your &lt;code&gt;conf.json&lt;/code&gt; file looks like this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a01c8d68b9244ccdd010f5513a53d52ebd15bbb" translate="yes" xml:space="preserve">
          <source>In general, you do not need to use this tag, because JSDoc automatically detects asynchronous functions and identifies them in the generated documentation. However, if you are writing a virtual comment for an asynchronous function that does not appear in your code, you can use this tag to tell JSDoc that the function is asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db262d85f0e254cdc3b69a308bc0ef204b926380" translate="yes" xml:space="preserve">
          <source>In general, you do not need to use this tag, because JSDoc automatically detects generator functions and identifies them in the generated documentation. However, if you are writing a virtual comment for a generator function that does not appear in your code, you can use this tag to tell JSDoc that the function is a generator function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9f04134ac4f536a5673546875198a807cd28ac" translate="yes" xml:space="preserve">
          <source>In many cases, you can include a type expression as part of another tag, rather than including a separate @type tag in your JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2776430d6cfc72921d70fa0f4cf10608c617e20b" translate="yes" xml:space="preserve">
          <source>In modules where you are using the special &quot;exports&quot; object, the @exports tag is never needed. JSDoc automatically recognizes that this object's members are being exported. Similarly, JSDoc automatically recognizes the special &quot;module.exports&quot; property in Node.js modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493c1ea4bbf985fdbac90dec2bae2da261ec58a4" translate="yes" xml:space="preserve">
          <source>In most cases, your CommonJS or Node.js module should include a standalone JSDoc comment that contains a &lt;a href=&quot;tags-module&quot;&gt;&lt;code&gt;@module&lt;/code&gt; tag&lt;/a&gt;. The &lt;code&gt;@module&lt;/code&gt; tag's value should be the module identifier that's passed to the &lt;code&gt;require()&lt;/code&gt; function. For example, if users load the module by calling &lt;code&gt;require('my/shirt')&lt;/code&gt;, your JSDoc comment would contain the tag &lt;code&gt;@module my/shirt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bc4c9d6c2cacfeaadaf1e9d40c4a4773556959" translate="yes" xml:space="preserve">
          <source>In some cases, an exported symbol may be assigned to a local variable before it's added to the &lt;code&gt;exports&lt;/code&gt; object. For example, if your module exports a &lt;code&gt;wash&lt;/code&gt; method, and the module itself often calls the &lt;code&gt;wash&lt;/code&gt; method, you might write the module as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f41c89fcda5d14ab3573110e8cf70ac8517056a" translate="yes" xml:space="preserve">
          <source>In the above example, we use @inner to force a member of a namespace to be documented as an inner member (by default, it would be a static member). This means that &lt;code&gt;foo&lt;/code&gt; now has the longname &lt;code&gt;MyNamespace~foo&lt;/code&gt; instead of &lt;code&gt;MyNamespace.foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a97fc4f42a065cbfcf241e6c530015eb8ea27b4" translate="yes" xml:space="preserve">
          <source>In the case of tags with conflicting kinds (for example, using both @module, which sets the kind to &quot;module&quot;, and &quot;@kind constant&quot; which sets the kind to &quot;constant&quot;), the last tag determines the kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c726f5c46c242d8630f1cfbf9192cc84d9c23bba" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;@param&lt;/code&gt; is a block tag, and &lt;code&gt;{@link}&lt;/code&gt; is an inline tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2779d20f6e639e8650e09740205faedc9d07553" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;Documents&lt;/code&gt; and &lt;code&gt;Documents.Newspaper&lt;/code&gt; appear in the generated documentation, but not &lt;code&gt;Documents.Diary&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7368f339cc2e1201742b2b16708af3151d62823b" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;Jacket&lt;/code&gt; and &lt;code&gt;Jacket#color&lt;/code&gt; will not appear in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa4c56709d9ffcc01a8d8845721f5ef0b899175" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;Clothes&lt;/code&gt; namespace contains a &lt;code&gt;Jacket&lt;/code&gt; class. The &lt;code&gt;@ignore&lt;/code&gt; tag must be added to both &lt;code&gt;Clothes&lt;/code&gt; and &lt;code&gt;Clothes.Jacket&lt;/code&gt;. &lt;code&gt;Clothes&lt;/code&gt;, &lt;code&gt;Clothes.Jacket&lt;/code&gt;, and &lt;code&gt;Clothes.Jacket#color&lt;/code&gt; will not appear in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f898750943b801d81e66d3920628f6471513fc5" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;Color&lt;/code&gt; function represents an interface that other classes can implement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93054724e78baa804fbc80ef051d627635fcde27" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;Duck&lt;/code&gt; class inherits from both the &lt;code&gt;Flyable&lt;/code&gt; and &lt;code&gt;Bird&lt;/code&gt; classes, both of which define a &lt;code&gt;takeOff&lt;/code&gt; method. Because the documentation for &lt;code&gt;Duck&lt;/code&gt; lists &lt;code&gt;@augments Bird&lt;/code&gt; last, JSDoc automatically documents &lt;code&gt;Duck#takeOff&lt;/code&gt; using the comment from &lt;code&gt;Bird#takeOff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb870a3a82b00e40755e06a35342dd09086787f" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;Duck&lt;/code&gt; class is defined as a subclass of &lt;code&gt;Animal&lt;/code&gt;. &lt;code&gt;Duck&lt;/code&gt; instances have the same properties as &lt;code&gt;Animal&lt;/code&gt; instances, as well as a &lt;code&gt;speak&lt;/code&gt; method that is unique to &lt;code&gt;Duck&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe7b3dde6bdf214ba02f131f51e417593e1f0e7" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;TransparentColor&lt;/code&gt; class implements the &lt;code&gt;Color&lt;/code&gt; interface and adds a &lt;code&gt;TransparentColor#rgba&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f57131f8408a9c0b093f0b54de132b61ec66935" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;hammer&lt;/code&gt; function would normally be documented as a global function. That's because, in fact, it is a global function, but it is also a member of the &lt;code&gt;Tools&lt;/code&gt; namespace, and that's how you wish to document it. The solution is to add a @memberof tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a048f9188b7d702a1cf031e2979a0c2718aacd" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;my/shirt&lt;/code&gt; module exports the methods &lt;code&gt;button&lt;/code&gt; and &lt;code&gt;unbutton&lt;/code&gt;. JSDoc will automatically detect that the module exports these methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef11f26c8bcbd0b9a5e7116a4088843b5d4a75f" translate="yes" xml:space="preserve">
          <source>In the following example, the @alias tag tells JSDoc to treat the anonymous function as if it were the constructor for the class &quot;trackr.CookieManager&quot;. Within the function, JSDoc interprets the &lt;code&gt;this&lt;/code&gt; keyword relative to trackr.CookieManager, so the &quot;value&quot; method has the namepath &quot;trackr.CookieManager#value&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c89ab247696019c53b2a7c7c90ca28b18a09bc" translate="yes" xml:space="preserve">
          <source>In the following example, the @this tag causes &quot;this.name&quot; to be documented as &quot;Greeter#name&quot; rather than a global symbol called &quot;name&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aeb713a06af95e7a3f1d85183801f026197d1d" translate="yes" xml:space="preserve">
          <source>In the following example, the Book class is documented as a static member, &quot;module:bookshelf.Book&quot;, with one instance member, &quot;module:bookshelf.Book#title&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6a48d33722c87e906a3e285270b5c5a3d7e71f" translate="yes" xml:space="preserve">
          <source>In the following example, the class &lt;code&gt;EncryptedRequest&lt;/code&gt; is documented as a subclass of the built-in class &lt;code&gt;XMLHttpRequest&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2faf7525e1188ca38623dc2263001292dec0167" translate="yes" xml:space="preserve">
          <source>In the following example, the documentation for &lt;code&gt;MyClass&lt;/code&gt; will link to the tutorials that have the identifiers &lt;code&gt;tutorial-1&lt;/code&gt; and &lt;code&gt;tutorial-2&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d80a7b64c2ae0c15257a94bb9c14cf019a9eaa4" translate="yes" xml:space="preserve">
          <source>In the following example, the instance member &lt;code&gt;Thingy#_bar&lt;/code&gt; appears in the generated documentation, but with an annotation indicating that it is package-private:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b68477c138991025921c03e764c10a5281917c0" translate="yes" xml:space="preserve">
          <source>In the following example, the instance member &lt;code&gt;Thingy#_bar&lt;/code&gt; appears in the generated documentation, but with an annotation indicating that it is protected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9481a0c92d734d108ac373c47d7b72e14cf7de04" translate="yes" xml:space="preserve">
          <source>In the following example, the two functions have the namepaths &quot;module:color/mixer.blend&quot; and &quot;module:color/mixer.darken&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ed8f635a350af88f3d9345b3b286516b5ae429" translate="yes" xml:space="preserve">
          <source>In the source paths to your JavaScript files, include the path to a &lt;code&gt;package.json&lt;/code&gt; file. JSDoc will use the first &lt;code&gt;package.json&lt;/code&gt; file that it finds in your source paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ab9977c49e5a6b3df1c34ee8493e6ef068713c" translate="yes" xml:space="preserve">
          <source>In the source paths to your JavaScript files, include the path to a Markdown file named &lt;code&gt;README.md&lt;/code&gt;. JSDoc will use the first &lt;code&gt;README.md&lt;/code&gt; file that it finds in your source paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6e98e9dc4e542fd5eb0052d9497959967d5f29" translate="yes" xml:space="preserve">
          <source>In this case, JSDoc will &lt;em&gt;not&lt;/em&gt; automatically document &lt;code&gt;wash&lt;/code&gt; as an exported method, because the JSDoc comment appears immediately before the local variable &lt;code&gt;wash&lt;/code&gt; rather than &lt;code&gt;exports.wash&lt;/code&gt;. One solution is to add an &lt;a href=&quot;tags-alias&quot;&gt;&lt;code&gt;@alias&lt;/code&gt; tag&lt;/a&gt; that defines the correct longname for the method. In this case, the method is a static member of the module &lt;code&gt;my/shirt&lt;/code&gt;, so the correct longname is &lt;code&gt;module:my/shirt.wash&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fef4f704b0d24265cbe1cf0a4a8e417dcbfdf45" translate="yes" xml:space="preserve">
          <source>In this case, to refer to the method named &quot;consider,&quot; you would use the following namepath: &lt;code&gt;Person#Idea#consider&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e8b010b1f719fd893021e14d8ea77577e85b24" translate="yes" xml:space="preserve">
          <source>In this example a constant is documented. The value of the constant is &lt;code&gt;0xff0000&lt;/code&gt;. By adding the @default tag this value is automatically added to the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d79146cd7dfd1fdde1e00eb116beb8173094c69" translate="yes" xml:space="preserve">
          <source>In this example there exists documentation for the &quot;trstr&quot; function, but &quot;util.trim&quot; is just a reference to that same function by a different name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ad54a8b171c31ace1c6e79157c48a6098b6aa2" translate="yes" xml:space="preserve">
          <source>In this example we are documenting a string constant. Note that although the code is using the &lt;code&gt;const&lt;/code&gt; keyword, this is not required by JSDoc. If your JavaScript host environment doesn't yet support constant declarations, the @const documentation can just as effectively be used on &lt;code&gt;var&lt;/code&gt; declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a148b9d40173d5a7d733e76f221b1240076c00" translate="yes" xml:space="preserve">
          <source>In this example we have a namespace named &quot;config.&quot; We want all the information about the defaults property, including its nested values, to appear on the same page with the documentation for config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f520a92eed8859307d05b5b5a2b814e5df945ea2" translate="yes" xml:space="preserve">
          <source>In this example, we want to use a helper function to make a class named &lt;code&gt;Person&lt;/code&gt;, along with instance methods named &lt;code&gt;initialize&lt;/code&gt; and &lt;code&gt;say&lt;/code&gt;. This is similar to how some popular frameworks handle class creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a7ffb9e4745cb5df84e247d1dcd786561b0f2b" translate="yes" xml:space="preserve">
          <source>In tutorial files, you can use the &lt;a href=&quot;tags-inline-link&quot;&gt;&lt;code&gt;{@link}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;tags-inline-tutorial&quot;&gt;&lt;code&gt;{@tutorial}&lt;/code&gt;&lt;/a&gt; inline tags to link to other parts of the documentation. JSDoc will automatically resolve the links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e7b585812898db8a27a681cdf153cefd290e5e" translate="yes" xml:space="preserve">
          <source>Include symbols marked with the &lt;a href=&quot;tags-private&quot;&gt;&lt;code&gt;@private&lt;/code&gt; tag&lt;/a&gt; in the generated documentation. By default, private symbols are not included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b800e7da053ec27dd788f81bd5d614b876abc6" translate="yes" xml:space="preserve">
          <source>Include that module in the &lt;code&gt;plugins&lt;/code&gt; array of &lt;a href=&quot;about-configuring-jsdoc&quot;&gt;JSDoc's configuration file&lt;/a&gt;. You can specify an absolute or relative path. If you use a relative path, JSDoc searches for the plugin in the current working directory; the directory where the configuration file is located; and the JSDoc directory, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd4b8bf3b45d98d86faccd75de080f1ad7220b3" translate="yes" xml:space="preserve">
          <source>Including a Package File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709bb2ef25d357c8756ac1356498a7f3844dcf7c" translate="yes" xml:space="preserve">
          <source>Including a README File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bb153b0637c84fb042e1780354640fd15eac7c" translate="yes" xml:space="preserve">
          <source>Including a README file in your source paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f51498c17540d5046e47dddf877b5b0d3af1c8b" translate="yes" xml:space="preserve">
          <source>Including a package file in your source paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b159614aa21e98331a062e79dbb6426b71db185d" translate="yes" xml:space="preserve">
          <source>Incorporating command-line options into the configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7aa4cc326f47843ad01bd3d6666dd97748a51c" translate="yes" xml:space="preserve">
          <source>Indicate that a function is a generator function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106c47f10d2e14290a0b5eea2a205b9d947d88d1" translate="yes" xml:space="preserve">
          <source>Indicate that a function is asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89cc486e642f33cf240252bb8f6bd29f58d7472" translate="yes" xml:space="preserve">
          <source>Indicate that a symbol inherits from, and adds to, a parent symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf232c65fe58caec5817b34c023eb69d7fe5d97" translate="yes" xml:space="preserve">
          <source>Indicate that a symbol overrides its parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52a7dad487a35bf7981270bea9d87fb5ab316df" translate="yes" xml:space="preserve">
          <source>Indicate that a symbol should inherit its parent's documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4ca1a2f14dedec70d980cf3705801b7c07f3d8" translate="yes" xml:space="preserve">
          <source>Indicate that the constructor should not be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694e67a691232b69df345af27a85a814be8f542c" translate="yes" xml:space="preserve">
          <source>Indicates that the function accepts a variable number of parameters, and specifies a type for the parameters. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d2d8e707cf69e23f87d63790afdc96928757ed" translate="yes" xml:space="preserve">
          <source>Indicates that the parameter is optional. When using JSDoc's syntax for optional parameters, you can also indicate the value that will be used if a parameter is omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297e307b43b081e7fc8e7dcb80e8cff559bfc90d" translate="yes" xml:space="preserve">
          <source>Indicates that the value is of the specified type, but cannot be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7606566f80864942b37026510c012dd5eef0851" translate="yes" xml:space="preserve">
          <source>Inheriting documentation without the &lt;code&gt;@inheritdoc&lt;/code&gt; tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a47580607f7c1cb4828ca163359cb3b0e3e565" translate="yes" xml:space="preserve">
          <source>Inline Tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc51a7c261b215ccaf849397f167cec0277ec42c" translate="yes" xml:space="preserve">
          <source>Inline tag used within a block tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce9da66d1b1394b79cce19c8e547590b2354515" translate="yes" xml:space="preserve">
          <source>Inline tags also begin with an at sign. However, inline tags and their text must be enclosed in curly braces (&lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;). The &lt;code&gt;{&lt;/code&gt; denotes the start of the inline tag, and the &lt;code&gt;}&lt;/code&gt; denotes the end of the inline tag. If your tag's text includes a closing curly brace (&lt;code&gt;}&lt;/code&gt;), you must escape it with a leading backslash (&lt;code&gt;\&lt;/code&gt;). You do not need to use a line break after inline tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e199db3ccbf125a5fcb83766c88610789acfb621" translate="yes" xml:space="preserve">
          <source>Insert a link to an included tutorial file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237db43aa0138ecb189a6f05db0cba9e69a710a7" translate="yes" xml:space="preserve">
          <source>It's easiest to document symbols that are directly assigned to a property of the &lt;code&gt;exports&lt;/code&gt; object. JSDoc will automatically recognize that the module exports these symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb066eaad6fec2a6a994996f176b5cede7d0c117" translate="yes" xml:space="preserve">
          <source>JSDoc</source>
          <target state="translated">JSDoc</target>
        </trans-unit>
        <trans-unit id="9b9616b1903881edf9665ffb78594fada5d844bb" translate="yes" xml:space="preserve">
          <source>JSDoc 3 is an API documentation generator for JavaScript, similar to Javadoc or phpDocumentor. You add documentation comments directly to your source code, right alongside the code itself. The JSDoc tool will scan your source code and generate an HTML documentation website for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ee2827ce772d82a8b40169948fa5778f392ed7" translate="yes" xml:space="preserve">
          <source>JSDoc 3 makes it easy to document classes that follow the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-class-definitions&quot;&gt;ECMAScript 2015 specification&lt;/a&gt;. You don't need to use tags such as &lt;code&gt;@class&lt;/code&gt; and &lt;code&gt;@constructor&lt;/code&gt; with ES 2015 classes&amp;mdash;JSDoc automatically identifies classes and their constructors simply by parsing your code. ES 2015 classes are supported in JSDoc 3.4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c04767fe05199bc302c7f8867ff2a93b17b13a" translate="yes" xml:space="preserve">
          <source>JSDoc 3 makes it possible to document modules that follow the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;ECMAScript 2015 specification&lt;/a&gt;. ES 2015 modules are supported in JSDoc 3.4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1fb1db5a97503349c0c7fc65575aa8787ef857" translate="yes" xml:space="preserve">
          <source>JSDoc 3 makes it possible to document modules that use the &lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/AMD.md&quot;&gt;Asynchronous Module Definition (AMD) API&lt;/a&gt;, which is implemented by libraries such as &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;. This page explains how to document an AMD module for JSDoc, based on the coding conventions that your module uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f96c5728743303e3332c7780c9d1236079d5d0" translate="yes" xml:space="preserve">
          <source>JSDoc 3's plugin system offers extensive control over the parsing process. A plugin can affect the parse results by doing any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37ca1153d39991ed7de0665d8d4f308c2fad4f7" translate="yes" xml:space="preserve">
          <source>JSDoc Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e48cec8f45e1e795abbddc56fef7408acb1584" translate="yes" xml:space="preserve">
          <source>JSDoc allows you to include tutorials alongside your API documentation. You can use this feature to provide detailed instructions for using your API, such as a &quot;getting started&quot; guide or a step-by-step process for implementing a feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2985df83b88e687c76255deabf44b98f53183203" translate="yes" xml:space="preserve">
          <source>JSDoc allows you to use unrecognized tags (&lt;code&gt;tags.allowUnknownTags&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12030ea9a24e2bccda952d14aae90ecb5c04eea" translate="yes" xml:space="preserve">
          <source>JSDoc also searches for JSON files that contain information about the titles, ordering, and hierarchy of your tutorials, as discussed in the following section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26f0c2aa159d4a02da919ef1113729b2db2e63d" translate="yes" xml:space="preserve">
          <source>JSDoc applies &lt;code&gt;source.exclude&lt;/code&gt;, which removes &lt;code&gt;myProject/lib/ignore.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456ff982026a5f2516249817791e589936db144d" translate="yes" xml:space="preserve">
          <source>JSDoc applies &lt;code&gt;source.excludePattern&lt;/code&gt;, which removes &lt;code&gt;myProject/_private/a.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3850508158fe9b5d6950c3a1f0d30ff1d5ac61a3" translate="yes" xml:space="preserve">
          <source>JSDoc applies &lt;code&gt;source.includePattern&lt;/code&gt;, leaving us with all of the above files &lt;em&gt;except&lt;/em&gt;&lt;code&gt;myProject/lib/d.txt&lt;/code&gt;, which does not end in &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsdoc&lt;/code&gt;, or &lt;code&gt;.jsx&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9275b7545e559926c50a9fb136d118a81eef8e4f" translate="yes" xml:space="preserve">
          <source>JSDoc assigns an identifier to each tutorial. The identifier is the filename without its extension. For example, the identifier for &lt;code&gt;/path/to/tutorials/overview.md&lt;/code&gt; is &lt;code&gt;overview&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fa76f1034d5e63cb14274e9b7a3c75a04e4f53" translate="yes" xml:space="preserve">
          <source>JSDoc automatically prepends the namespace &lt;code&gt;event:&lt;/code&gt; to each event's name. In general, you must include this namespace when you link to the event in another doclet. (The @fires tag is a notable exception; it allows you to omit the namespace.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20f86c318545b5dcaf2d4428d95b93ff2203525" translate="yes" xml:space="preserve">
          <source>JSDoc comment immediately before exports.wash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dbe6d0a361323ab8410df797dc7ea6b8d1017a" translate="yes" xml:space="preserve">
          <source>JSDoc comments should generally be placed immediately before the code being documented. Each comment must start with a &lt;code&gt;/**&lt;/code&gt; sequence in order to be recognized by the JSDoc parser. Comments beginning with &lt;code&gt;/*&lt;/code&gt;, &lt;code&gt;/***&lt;/code&gt;, or more than 3 stars will be ignored. This is a feature to allow you to suppress parsing of comment blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd814c6eb19efdd2da405326917528538eb2f9b" translate="yes" xml:space="preserve">
          <source>JSDoc does not attempt to process the module that is being included. If you want the module to be included in the documentation, you must include the module in the list of JavaScript files to process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd81f430bf4d5832d0f4da1f0e5ce1564bd0f1f6" translate="yes" xml:space="preserve">
          <source>JSDoc executes plugins in the order that they are listed in the configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529fae6dfcac6633600679c77573334325a517f8" translate="yes" xml:space="preserve">
          <source>JSDoc fires events in the same order as the underlying code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d3c1d7fa06b64579dbd3987e244320fcc5e061" translate="yes" xml:space="preserve">
          <source>JSDoc includes a Markdown plugin that automatically converts Markdown-formatted text to HTML. You can use this plugin with any JSDoc template. In JSDoc 3.2.2 and later, the Markdown plugin uses the &lt;a href=&quot;https://github.com/chjj/marked&quot;&gt;marked Markdown parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a905698938e2649fa5e693b44b29807598119602" translate="yes" xml:space="preserve">
          <source>JSDoc project on GitHub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cb3cc952cba1ad1f5492b6b1a3c24e37726edb" translate="yes" xml:space="preserve">
          <source>JSDoc searches the tutorials directory for files with the following extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b92dd01e0ac27c1c92f846dcc5669d8851814e1" translate="yes" xml:space="preserve">
          <source>JSDoc supports Closure Compiler's syntax for defining array and object types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e241c272b3cc70e5c6af65ea35dac79264cb7e0" translate="yes" xml:space="preserve">
          <source>JSDoc supports a number of command-line options, many of which have both long and short forms. Alternatively, the command-line options may be &lt;a href=&quot;about-configuring-jsdoc&quot;&gt;specified in a configuration file&lt;/a&gt; given to JSDoc. The command-line options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5886dc3de4ea8b551393aebf0e4eb66cb82f64dd" translate="yes" xml:space="preserve">
          <source>JSDoc supports code that uses &lt;a href=&quot;howto-es2015-modules&quot;&gt;ES2015 modules&lt;/a&gt; (&lt;code&gt;sourceType&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e894d45e5d433a1d4edd6bf2f62a069d5ed0ba" translate="yes" xml:space="preserve">
          <source>JSDoc supports two different kinds of tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd8c3218316e089eac973ae7b8305eb2923ff91" translate="yes" xml:space="preserve">
          <source>JSDoc's default template automatically copies a few static files, such as CSS stylesheets, to the output directory. In JSDoc 3.3.0 and later, you can tell the default template to copy additional static files to the output directory. For example, you might want to copy a directory of images to the output directory so you can display these images in your documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13ef7a95590baf466352684ce311e4b9689091f" translate="yes" xml:space="preserve">
          <source>JSDoc's default template provides several options that you can use to customize the appearance and content of generated documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909bf4f61c1e6e5a5c772b2613fbb1d26ab00522" translate="yes" xml:space="preserve">
          <source>JSDoc's purpose is to document the API of your JavaScript application or library. It is assumed that you will want to document things like modules, namespaces, classes, methods, method parameters, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99453864e0a4e322724d83dec490733133bb1626" translate="yes" xml:space="preserve">
          <source>JSDoc: AMD Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef91f1be80223e54cda68b05347d43154a44ede6" translate="yes" xml:space="preserve">
          <source>JSDoc: Block and inline tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4913427f45469a2a8ac3dd0231b29d516b6e1b45" translate="yes" xml:space="preserve">
          <source>JSDoc: CommonJS Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256a46426396ad0df92d7efd4a67e782e72c049f" translate="yes" xml:space="preserve">
          <source>JSDoc: ES 2015 Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efd6abebf720f1e1dd7781f9e86a2d7eae0d9ae" translate="yes" xml:space="preserve">
          <source>JSDoc: ES 2015 Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6541406bddcce88766babc8ce96b7387b92d108a" translate="yes" xml:space="preserve">
          <source>JSDoc: Including a Package File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fcb547b92f5fa372c79fe228999408368a95cb" translate="yes" xml:space="preserve">
          <source>JSDoc: Including a README File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46727f262c300f66234a9a5d77fec164b76d2f5a" translate="yes" xml:space="preserve">
          <source>JSDoc: Tutorials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3b4846dc39e3193bb746dbea5c9e860402a1c4" translate="yes" xml:space="preserve">
          <source>JSDoc: Using the Markdown plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96365a1abcb8a5a863325fba213c3b8dedc0b5a" translate="yes" xml:space="preserve">
          <source>JSON configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8934c2e8cb08962179cb0a1f1836d2433368969d" translate="yes" xml:space="preserve">
          <source>JSON configuration file that enables the Markdown plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bed3c80fd1448325ed324dd49c1779d5cd03d6" translate="yes" xml:space="preserve">
          <source>JSON configuration file with command-line options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52f0c1eff6ade6e73b8b121aad130ae8c77c3b8" translate="yes" xml:space="preserve">
          <source>JSON configuration file with plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68c3e0ae856daf36f87d0d27290f2e127cd3487" translate="yes" xml:space="preserve">
          <source>JavaScript configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="0d44aafd7ba8206b88fea24bfabc2b0ee494bc54" translate="yes" xml:space="preserve">
          <source>License information for JSDoc 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d05a85e0ee31a873e2f15997f3ffa7b057cefff" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce86c6907177d7da4aec3bad95bb140f725fe763" translate="yes" xml:space="preserve">
          <source>Link formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa02da304b84f5c8bc4fd3f61968750862f75d40" translate="yes" xml:space="preserve">
          <source>Link to a module (e.g. within a &lt;a href=&quot;tags-inline-link&quot;&gt;@link&lt;/a&gt; or &lt;a href=&quot;tags-see&quot;&gt;@see&lt;/a&gt; tag) using &quot;module:moduleName&quot;. For example, &quot;@module foo/bar&quot; can be linked to using &quot;{@link module:foo/bar}&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1019df17b46f5b491944986886461a7652b35c" translate="yes" xml:space="preserve">
          <source>Link to a tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fb2a66a57cf75dd11fc3656f51d19c94a4b531" translate="yes" xml:space="preserve">
          <source>Link to another item in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149e61cdbaeb62e621dc98754f186734200c507c" translate="yes" xml:space="preserve">
          <source>Linking to tutorials from API documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c994a029d7c91b6c466c422dee9b91f82613968e" translate="yes" xml:space="preserve">
          <source>List the events that a symbol listens for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663f9ab7460e115d32627bb98329d7f29b7822d6" translate="yes" xml:space="preserve">
          <source>Log detailed information to the console as JSDoc runs. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bc567cf37175bf17947bc71d285f83331d949b" translate="yes" xml:space="preserve">
          <source>Log information that can help debug issues in JSDoc itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7365744c7955fd551a5083ee0d405cd038b03e06" translate="yes" xml:space="preserve">
          <source>Longname defined in an @alias tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb86ba00d08d54bf32273579b5b602375c1e3f18" translate="yes" xml:space="preserve">
          <source>Making things happen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d475c3417a46880147c2580e8eb4e6e0ecba7b73" translate="yes" xml:space="preserve">
          <source>Method assigned to a local variable and added to the exports object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105a2f4e33425c0b921dad7623ab630a94b209b3" translate="yes" xml:space="preserve">
          <source>Method that fires a 'drain' event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed7e5ae257c7a9be6182a920b72dec6acd5e7f8" translate="yes" xml:space="preserve">
          <source>Method that overrides a parent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729f1ac728eb787e4f1c16682e4591427fd1863d" translate="yes" xml:space="preserve">
          <source>Methods added to the exports object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84df8dcdaf2850d838058f205ceeb43f3a7646a2" translate="yes" xml:space="preserve">
          <source>Module declared in a return statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316891a54e7f648568559d752bd456084b9a66ff" translate="yes" xml:space="preserve">
          <source>Module identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2eca207c7f2f596bd6a52ae98475b79d9d9a2d6" translate="yes" xml:space="preserve">
          <source>Module object passed to a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5ac0d6b6a286922f16a43a7384964c0d466d4c" translate="yes" xml:space="preserve">
          <source>More tags can be used to add more information. See the &lt;a href=&quot;index#block-tags&quot;&gt;home page&lt;/a&gt; for a complete list of tags that are recognized by JSDoc 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b8151a9e13314558ab75dd1fd5d1aa3e72da8a" translate="yes" xml:space="preserve">
          <source>More usefully, you can use the @instance tag to override the scope that JSDoc infers. For example, you can indicate that a static member is used as an instance member:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93486689dc3d4eb52b2d21dc97e23f04cccd2b42" translate="yes" xml:space="preserve">
          <source>Most JSDoc tags are block tags. In general, when this site refers to &quot;JSDoc tags,&quot; we really mean &quot;block tags.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8f0713758210bc6c2d1e350a3b56717f33ceae" translate="yes" xml:space="preserve">
          <source>Multiple AMD modules defined in one file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74d14ad4cb8940576fc6407a7d49bfa9f01672f" translate="yes" xml:space="preserve">
          <source>Multiple block tags separated by line breaks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c0f78b334a7ee7758d2d29642373232535d053" translate="yes" xml:space="preserve">
          <source>Multiple inheritance with duplicated method names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2c44503f5790dada0a2cc7490adfea2fe7bb0a" translate="yes" xml:space="preserve">
          <source>Multiple modules defined in one file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c14e9280d98b4e344297089d962264ab2d628cb" translate="yes" xml:space="preserve">
          <source>Multiple types (type union)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bc491216708b1c569450d40fd6c704430bebb4" translate="yes" xml:space="preserve">
          <source>Multiple types and repeatable parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449294d66e04577302af49f59fb18a3fe8ab4d82" translate="yes" xml:space="preserve">
          <source>Name and type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224e65ba6e2e165c50c5fe87cd2cd10ddd478249" translate="yes" xml:space="preserve">
          <source>Name only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf3ee66717d25fb1d996e69fd3953c6fcd0c167" translate="yes" xml:space="preserve">
          <source>Name, type, and description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169e6eee49c06f89b46c01e7f60aafe0ddb363de" translate="yes" xml:space="preserve">
          <source>Name, type, and description, with a hyphen before the description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505d2f632b921fb9eb9c69b22b364092d713d30e" translate="yes" xml:space="preserve">
          <source>Namepaths in JSDoc 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477eeeeba32a976239af279be062874e786c4d4a" translate="yes" xml:space="preserve">
          <source>Namepaths of objects with special characters in the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82140fd333a877e7feaf86246bb168bd63d21d5" translate="yes" xml:space="preserve">
          <source>Names, types, and descriptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57bac80b328ce09e4b4f188d91ed5b67f0fc1bb4" translate="yes" xml:space="preserve">
          <source>Namespace with child class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffe72e54be7a1eda844efb47489a30f08594da2" translate="yes" xml:space="preserve">
          <source>No plugins are loaded (&lt;code&gt;plugins&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2606bd2463167caab49e5c2d3919f9d29e7441a" translate="yes" xml:space="preserve">
          <source>Node Visitors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f26822aa0516b6884dcaedfa0e2a3a4424bbae" translate="yes" xml:space="preserve">
          <source>Node.js module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4bca227fa505df1b04c68717384b8a0a8d2534" translate="yes" xml:space="preserve">
          <source>Non-nullable type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a76ee2828c59cb0fcaaf9c4db5a23e9e0268cc" translate="yes" xml:space="preserve">
          <source>Normally JSDoc templates would create an entire new page to display information about each level of a nested namespace hierarchy. Sometimes what you really want is to just list all the properties, including nested properties, all together on the same page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25d6b55848251b5d892687cb9c915fea72bb431" translate="yes" xml:space="preserve">
          <source>Note that a doclet may have multiple examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be1805125f94c3f08ad6fc5a0579fa793f74259" translate="yes" xml:space="preserve">
          <source>Note that a doclet's &lt;em&gt;access level&lt;/em&gt; is different from its &lt;em&gt;scope&lt;/em&gt;. For example, if &lt;code&gt;Parent&lt;/code&gt; has an inner variable named &lt;code&gt;child&lt;/code&gt; that is documented as &lt;code&gt;@public&lt;/code&gt;, the &lt;code&gt;child&lt;/code&gt; variable will still be treated as an inner variable with the namepath &lt;code&gt;Parent~child&lt;/code&gt;. In other words, the &lt;code&gt;child&lt;/code&gt; variable will have an inner scope, even though the variable is public. To change a doclet's scope, use the &lt;a href=&quot;tags-instance&quot;&gt;&lt;code&gt;@instance&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tags-static&quot;&gt;&lt;code&gt;@static&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;tags-global&quot;&gt;&lt;code&gt;@global&lt;/code&gt;&lt;/a&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613627d72bd9a7daed79c22c0b5c86e109c2fb59" translate="yes" xml:space="preserve">
          <source>Note that if a constructor has an instance member that is also a constructor, you can simply chain the namepaths together to form a longer namepath:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6695dcc2abe1bfd9007d3c3d9ae6ae1da9ebf0" translate="yes" xml:space="preserve">
          <source>Note that in the above we could have used &quot;@function MyNamespace~myFunction&quot; instead of the @memberof and @inner tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cede5b7b35e6934663cbffafa4e30402359e7f0" translate="yes" xml:space="preserve">
          <source>Note that property tags must be used in doc comments for the thing that they are properties of, a namespace or a class for example. This tag is intended for simple collections of static properties, it does not allow you to provide @examples or similar complex information for each property, just the type, name and description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42fc2f55cdb83d06cb77c764d52c9e14bbb8883" translate="yes" xml:space="preserve">
          <source>Note that the example provides the type in a @type tag. This is optional. Also the optional @default tag is used here too, this will automatically add whatever the assigned value is (for example 'FF0000') to the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124025d8566c3e0da0b03f5c13e4d4b514891f93" translate="yes" xml:space="preserve">
          <source>Note: If you provide a type, you &lt;em&gt;must&lt;/em&gt; also provide a name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c815d5dc5c85f8db5e34a6b5d0c16c2561fd8363" translate="yes" xml:space="preserve">
          <source>Now the functions named &lt;code&gt;initialize&lt;/code&gt; and &lt;code&gt;say&lt;/code&gt; will be documented, but they appear as static methods of the &lt;code&gt;Person&lt;/code&gt; class. That is possibly what you meant, but in this case we want &lt;code&gt;initialize&lt;/code&gt; and &lt;code&gt;say&lt;/code&gt; to belong to the instances of the &lt;code&gt;Person&lt;/code&gt; class. So we change things slightly by lending the methods to the class's prototype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05121258ee389502cdd57071f09c82d0ed4c3372" translate="yes" xml:space="preserve">
          <source>Now we add a FormButton class and call a &quot;mix&quot; function that mixes all of the Eventful functions into FormButton, so that FormButton can also fire events and have listeners. We use the @mixes tag to indicate that FormButton mixes the Eventful functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18653c32ed5efc4fbec04d0d7b8d07221285c509" translate="yes" xml:space="preserve">
          <source>Nullable type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5516eae07f3bdd54eee77c0eba150be09b2e4b45" translate="yes" xml:space="preserve">
          <source>Object literal assigned to 'module.exports'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6339fa1a69e023dae67340d1fd19f8feb040d06d" translate="yes" xml:space="preserve">
          <source>Object literal assigned to a local variable and module.exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f34bfafd80c720e1ced9e8b13b481527c80fb1d" translate="yes" xml:space="preserve">
          <source>Object literal assigned to module.exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1b2bf06bcf150a9351e7fd2284df86bf941a5c" translate="yes" xml:space="preserve">
          <source>Omit a symbol from the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b57e7392016f8d8a7be4bd0c4cb961544b2dd0a" translate="yes" xml:space="preserve">
          <source>Once you define a callback, you can use it in the same way as a custom type defined with the @typedef tag. In particular, you can use the callback's name as a type name. This allows you to indicate that a function parameter should contain a certain type of callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed155335789ebf6062125667fe34619e0505303" translate="yes" xml:space="preserve">
          <source>Once you have used the @event tag to define a specific type of event, you can use the @fires tag to indicate that a method can fire that event. You can also use the @listens tag to indicate that a symbol listens for the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa9de2cc6ab63ff0985924a40a22429e7f28c97" translate="yes" xml:space="preserve">
          <source>Once your code is commented, you can use the JSDoc 3 tool to generate an HTML website from your source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436664c0d4db8053c92674dd7ecfbf9850aa04e6" translate="yes" xml:space="preserve">
          <source>One final step: Our class framework uses the loaned &lt;code&gt;initialize&lt;/code&gt; function to construct &lt;code&gt;Person&lt;/code&gt; instances, but a &lt;code&gt;Person&lt;/code&gt; instance does not have its own &lt;code&gt;initialize&lt;/code&gt; method. The solution is to add the &lt;code&gt;@constructs&lt;/code&gt; tag to the loaned function. Remember to remove the &lt;code&gt;@class&lt;/code&gt; tag as well, or else two classes will be documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfa613cdbe955a375099e3f84277a2940953132" translate="yes" xml:space="preserve">
          <source>Only display symbols with the given &lt;code&gt;access&lt;/code&gt; property: &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;all&lt;/code&gt; for all access levels. By default, all except &lt;code&gt;private&lt;/code&gt; symbols are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084bf1073d9d0e8e1a37e84ce59e2799b95c0872" translate="yes" xml:space="preserve">
          <source>Only files ending in &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsdoc&lt;/code&gt;, and &lt;code&gt;.jsx&lt;/code&gt; will be processed (&lt;code&gt;source.includePattern&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176e1ffa5494f367d4af63df4726732851486924" translate="yes" xml:space="preserve">
          <source>Only run tests whose names contain &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="bc127d54e9c5b4a0fcc74a3e59f0fcd194de1ccb" translate="yes" xml:space="preserve">
          <source>Optional parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bed6004dba7525213f00f9a383407280b1ea784" translate="yes" xml:space="preserve">
          <source>Optional parameters and default values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c399f64263e582d2aeb59e4ee0e8aa94411495eb" translate="yes" xml:space="preserve">
          <source>Output for {@link} tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe1c9460f31ec3ad73051378b6ace2c5df6ced" translate="yes" xml:space="preserve">
          <source>Output with clever links enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a68b6dab79315daad5e6273909c744bcbb92d89" translate="yes" xml:space="preserve">
          <source>Overriding the default template's layout file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="e912b331bc59cd94d80d4784d8c674ebf37fe9e9" translate="yes" xml:space="preserve">
          <source>Overview of block and inline JSDoc tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9f2152df3a4cfd965c31a74ecef90148e1a3e8" translate="yes" xml:space="preserve">
          <source>Package files contain information that can be useful for your project's documentation, such as the project's name and version number. JSDoc can automatically use information from your project's &lt;code&gt;package.json&lt;/code&gt; file when it generates documentation. For example, the default template shows the project's name and version number in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcddaeecffc5fed8ed2e78bf4ef4e8c2c4b85a90" translate="yes" xml:space="preserve">
          <source>Parameters that accept a callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa91b2ac08cb24009fc81f5178ec421230c19344" translate="yes" xml:space="preserve">
          <source>Parameters with properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5e6fe7b600d4b7d93c3bbc3d5495680d006f68" translate="yes" xml:space="preserve">
          <source>Parent class with abstract method, and child class that implements the method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="e81b1b44f44654e2a79b48d5eac3494eced1c2c5" translate="yes" xml:space="preserve">
          <source>Plugins can define a node visitor by exporting an &lt;code&gt;astNodeVisitor&lt;/code&gt; object that contains a &lt;code&gt;visitNode&lt;/code&gt; function, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3854944044814e82e6549a48b4a41ec231d3034b" translate="yes" xml:space="preserve">
          <source>Plugins can define tags by exporting a &lt;code&gt;defineTags&lt;/code&gt; function. That function will be passed a dictionary that can be used to define tags, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91939f85b6e1218ff4e7cf1d2bb367cab819027" translate="yes" xml:space="preserve">
          <source>Private members are not shown in the generated output unless JSDoc is run with the &lt;code&gt;-p/--private&lt;/code&gt; command-line option. In JSDoc 3.3.0 and later, you can also use the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-a/--access&lt;/code&gt; command-line option&lt;/a&gt; to change this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57bccb8f380305b104f391f6f85a09012f9656f" translate="yes" xml:space="preserve">
          <source>Properties added to 'this'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfe8b972cf9c84897d9aed22cefed06f4a7c49e" translate="yes" xml:space="preserve">
          <source>Properties added to a module's 'this' object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71ce846f971b226c495543b93800137a55701d9" translate="yes" xml:space="preserve">
          <source>Properties of the 'exports' object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7b9baeadce1d2b66becdb0690f6681559c5e34" translate="yes" xml:space="preserve">
          <source>Provide an example of how to use a documented item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5ed37eb7db6140a6c206e9a12f0b9533918750" translate="yes" xml:space="preserve">
          <source>Provide an example of how to use a documented item. The text that follows this tag will be displayed as highlighted code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa98cdef42aef3cefb66a035630545e6b27499e" translate="yes" xml:space="preserve">
          <source>Providing link text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b671df880abd5496216bcd2bd463c492992138ce" translate="yes" xml:space="preserve">
          <source>Recurse into subdirectories when scanning for source files and tutorials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8132a2dec67fe2e6262956fd897575b52d4c580d" translate="yes" xml:space="preserve">
          <source>Refer to some other documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181a415a001731a3644f9a3c789b0b3e252ecdb0" translate="yes" xml:space="preserve">
          <source>Related Links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b807c4444939a1353dfcb7c6af0c89b79d0917b9" translate="yes" xml:space="preserve">
          <source>Reporting Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af99c2fcb41a40ef34a5b65d33010fed6f69550c" translate="yes" xml:space="preserve">
          <source>Reporting a non-fatal error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffda6f70e2105cca005ce69166109a973c3fae79" translate="yes" xml:space="preserve">
          <source>Return value with a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7b04d56219af16d192d14c53a6f5364dffc7d7" translate="yes" xml:space="preserve">
          <source>Return value with a type and description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1cca840516e73652a464dfd2ec8dad919597f7" translate="yes" xml:space="preserve">
          <source>Return value with multiple types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5be85024e6bc4ce4bbb0c694124adec45e69289" translate="yes" xml:space="preserve">
          <source>Returns a promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88fa9addd7145d3a86735dcce324330fbce995f" translate="yes" xml:space="preserve">
          <source>Run JSDoc with the &lt;code&gt;-P/--package&lt;/code&gt; command-line option, specifying the path to your &lt;code&gt;package.json&lt;/code&gt; file. This option is available in JSDoc 3.3.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed82548a3d453ce74e048990995e20fae426edb9" translate="yes" xml:space="preserve">
          <source>Run JSDoc with the &lt;code&gt;-R/--readme&lt;/code&gt; command-line option, specifying the path to your &lt;code&gt;README&lt;/code&gt; file. This option is available in JSDoc 3.3.0 and later. The &lt;code&gt;README&lt;/code&gt; file may have any name and extension, but it must be in Markdown format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163754172a765f38ed3b853a136f8be7a74e445b" translate="yes" xml:space="preserve">
          <source>Run JSDoc's test suite, and print the results to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ca9450345a8415bc0421e353cc612b2d996888" translate="yes" xml:space="preserve">
          <source>Run all JSDoc tests whose names include the word &lt;code&gt;tag&lt;/code&gt;, and log information about each test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c419f48a2e898b4578117fb04b026710c45da7" translate="yes" xml:space="preserve">
          <source>Running the documentation generator on the command line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029bc2ff25c39751692ca8efd52eec4ff8163e97" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;howto-commonjs-modules&quot;&gt;Documenting JavaScript Modules&lt;/a&gt; for further examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68989567f3cbc591bb389ca26f5a033b8082bd73" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;about-plugins&quot;&gt;plugin reference&lt;/a&gt; for further information, and look in &lt;a href=&quot;https://github.com/jsdoc3/jsdoc/tree/master/plugins&quot;&gt;JSDoc's &lt;code&gt;plugins&lt;/code&gt; directory&lt;/a&gt; for the plugins built into JSDoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf337b9e325517175f461175037ce7ab6bc4c74" translate="yes" xml:space="preserve">
          <source>Showing longnames in the navigation column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603fe80aeab7e0fa11fb1ebb2fda1ae0ab2f5b48" translate="yes" xml:space="preserve">
          <source>Showing the current date in the page footer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5edb9a40542d979144f8002f47a473a53d5f02" translate="yes" xml:space="preserve">
          <source>Similarly, the namepath for each member of the module will start with &lt;code&gt;module:&lt;/code&gt;, followed by the module name. For example, if your &lt;code&gt;my/pants&lt;/code&gt; module exports a &lt;code&gt;Jeans&lt;/code&gt; class, and &lt;code&gt;Jeans&lt;/code&gt; has an instance method named &lt;code&gt;hem&lt;/code&gt;, the instance method's longname is &lt;code&gt;module:my/pants.Jeans#hem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fb7cd0171313ecbdb814e5f2c213984f56e135" translate="yes" xml:space="preserve">
          <source>Similarly, the namepath for each member of the module will start with &lt;code&gt;module:&lt;/code&gt;, followed by the module name. For example, if your &lt;code&gt;my/pants&lt;/code&gt; module exports a &lt;code&gt;Jeans&lt;/code&gt; constructor, and &lt;code&gt;Jeans&lt;/code&gt; has an instance method named &lt;code&gt;hem&lt;/code&gt;, the instance method's longname is &lt;code&gt;module:my/pants.Jeans#hem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16405b37a52a6c0770c2f0de700005891e5773f8" translate="yes" xml:space="preserve">
          <source>Simple ES 2015 class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e87fe7332199855d25f4c5ec7375c414758235" translate="yes" xml:space="preserve">
          <source>Some JavaScript processing tools, such as Google's Closure Compiler, will automatically preserve any JSDoc comment that includes a &lt;code&gt;@license&lt;/code&gt; tag. If you are using one of these tools, you may wish to add a standalone JSDoc comment that includes the &lt;code&gt;@license&lt;/code&gt; tag, along with the entire text of the license, so that the license text will be included in generated JavaScript files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5a88da45591087a58d273e2f451af26671d131" translate="yes" xml:space="preserve">
          <source>Sometimes your code may include multiple symbols with the same longname. For example, you might have both a global class and a top-level namespace called &lt;code&gt;Widget&lt;/code&gt;. In cases such as these, what does &quot;{@link Widget}&quot; or &quot;@memberof Widget&quot; mean? The global namespace, or the global class?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f4f8df38560be86ff17043f5e0cdb8790a2de2" translate="yes" xml:space="preserve">
          <source>Special &quot;JSDoc tags&quot; can be used to give more information. For example, if the function is a constructor for a class, you can indicate this by adding a &lt;code&gt;@constructor&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcabe6102e59642118cdba6f1ab56b1e328e8590" translate="yes" xml:space="preserve">
          <source>Special cases: modules, externals and events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373bc4d54f9c08d9ee6f9aa58532b4acba42fa81" translate="yes" xml:space="preserve">
          <source>Specifies the name of a symbol. If you have documented the symbol, JSDoc creates a link to the documentation for that symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa0e2114f3f85adbf24efb8a18917b2aaabe258" translate="yes" xml:space="preserve">
          <source>Specify the access level of this member (private, package-private, public, or protected).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351cff9972cc1ea80f5243c26c3dfcbc0c81417b" translate="yes" xml:space="preserve">
          <source>Specifying input files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa3f4e325c1fd7d710adc937f03f7b936f9e2fa" translate="yes" xml:space="preserve">
          <source>Specifying recursion depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0067152c665d8aacc7d33fa3dec877cc547c49" translate="yes" xml:space="preserve">
          <source>Specifying the source type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d1c5cf503587bcfacde61c5c920d2960ab972a" translate="yes" xml:space="preserve">
          <source>Start with all paths given on the command line and in &lt;code&gt;source.include&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85daaeb3d7014caccaea2e13a0e959a4a9a2b3f8" translate="yes" xml:space="preserve">
          <source>String assigned to module.exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81097d72ffe7cbe7fd897b147764b30f8bcd1bb3" translate="yes" xml:space="preserve">
          <source>String, number, or boolean assigned to 'module.exports'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40733cf83de3edade67aa54c8332424298ae27c2" translate="yes" xml:space="preserve">
          <source>Suppose you are using a class framework that expects you to pass in a constructor function when you define a class. You can use the @alias tag to tell JSDoc how the class will be exposed in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2c3f5e682e007c5d3acde9d5f0cb607bc80801" translate="yes" xml:space="preserve">
          <source>Symbol name (name expression)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275759b40ff138e8fc8084351de98f0273666e8a" translate="yes" xml:space="preserve">
          <source>Synonyms</source>
          <target state="translated">Synonyms</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="81b08f26e2d68214bb4f1a772ea8cdfa473815a1" translate="yes" xml:space="preserve">
          <source>Syntax examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f37d3d943c37917535fa1e67267e2ba74c3b366" translate="yes" xml:space="preserve">
          <source>Tag Definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b78387430e7439514d3f792277789be357933ed6" translate="yes" xml:space="preserve">
          <source>The &quot;forced&quot; @memberof tag, @memberof!, forces the object to be documented as belonging to a specific parent even if it appears to have a different parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32164f099815704610d806be3857bb9d01924bae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-P/--package&lt;/code&gt; command-line option takes precedence over your source paths. If you use the &lt;code&gt;-P/--package&lt;/code&gt; command-line option, JSDoc will ignore any &lt;code&gt;package.json&lt;/code&gt; files in your source paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e28806fc3000f8808f9f3c763cdb05e5db0413" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-R/--readme&lt;/code&gt; command-line option takes precedence over your source paths. If you use the &lt;code&gt;-R/--readme&lt;/code&gt; command-line option, JSDoc will ignore any &lt;code&gt;README.md&lt;/code&gt; files in your source paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a103c823352e118bce6e1598d29422773eb229" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@access&lt;/code&gt; tag specifies the access level of a member. You can use the &lt;code&gt;@access&lt;/code&gt; tag as a synonym for other tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95caa47db63880f5d2bd26a38b315183a5a3d77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@async&lt;/code&gt; tag indicates that a function is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;asynchronous&lt;/a&gt;, meaning that it was declared using the syntax &lt;code&gt;async function foo() {}&lt;/code&gt;. Do not use this tag for other types of asynchronous functions, such as functions that provide a callback. This tag is available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd43c21c1e9f741d5968688c810c380521e2ce8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@augments&lt;/code&gt; or&lt;code&gt;@extends&lt;/code&gt; tag indicates that a symbol inherits from, and potentially adds to, a parent symbol. You can use this tag to document both class-based and prototype-based inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9e1c26caa8c2c1d7b68512f9b24a8426878a25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@external&lt;/code&gt; tag identifies a class, namespace, or module that is defined outside of the current package. By using this tag, you can document your package's extensions to the external symbol, or you can provide information about the external symbol to your package's users. You can also refer to the external symbol's namepath in any other JSDoc tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18db0d15534f1e04f1d1579c85da65617e9ddade" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@generator&lt;/code&gt; tag indicates that a function is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;generator function&lt;/a&gt;, meaning that it was declared using the syntax &lt;code&gt;function* foo() {}&lt;/code&gt;. This tag is available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8254d813f573aec57f71d0614c5c17c257a53e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@hideconstructor&lt;/code&gt; tag tells JSDoc that the generated documentation should not display the constructor for a class. This tag is available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d87b5bf46d80bc218fd74f3b09c03cbba1f85b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ignore&lt;/code&gt; tag indicates that a symbol in your code should never appear in the documentation. This tag takes precedence over all others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf26c52678a5534a140b0e61900c9227dbc97bc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@implements&lt;/code&gt; tag indicates that a symbol implements an interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c902a64de87456f17131ba7abe896936bddb39a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@inheritdoc&lt;/code&gt; tag indicates that a symbol should inherit its documentation from its parent class. Any other tags that you include in the JSDoc comment will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffdc3d0e9a9cb58d0a9bf1885f12d2ece0c9947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@interface&lt;/code&gt; tag marks a symbol as an interface that other symbols can implement. For example, your code might define a parent class whose methods and properties are stubbed out. You can add the &lt;code&gt;@interface&lt;/code&gt; tag to the parent class to indicate that child classes must implement the parent class' methods and properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e3151e2465034ebbc7e89200f3c76f67f35ce8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@lends&lt;/code&gt; tag allows you to document all the members of an object literal as if they were members of a symbol with the given name. You might want to do this if you are passing an object literal into a function that creates a named class from its members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d035c52608405ab200bcd9e30e16a46c1c2b85c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@license&lt;/code&gt; tag identifies the software license that applies to any portion of your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b43312f02b64dca0ae34090a088ae69f691260e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@listens&lt;/code&gt; tag indicates that a symbol listens for the specified event. Use the &lt;a href=&quot;tags-event&quot;&gt;&lt;code&gt;@event tag&lt;/code&gt;&lt;/a&gt; to document the event's content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb85feba2b2056ee282778f3cde8dfc58d764fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@override&lt;/code&gt; tag indicates that a symbol overrides a symbol with the same name in a parent class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97593bd81533bf003d154f777bc87396007a78d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@package&lt;/code&gt; tag is equivalent to &lt;code&gt;@access package&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd7dff3f1335c46298db6178da96fe9bb4e0068" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@package&lt;/code&gt; tag marks a symbol as package-private. Typically, this tag indicates that a symbol is available only to code in the same directory as the source file for this symbol. This tag is available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd70c4d7fc3a5bf12eaba798fc823dd1f81d1d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@param&lt;/code&gt; tag provides the name, type, and description of a function parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86e5b6661d6f8d4431b8c956aa0ea2dc2ebf02c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@param&lt;/code&gt; tag requires you to specify the name of the parameter you are documenting. You can also include the parameter's type, enclosed in curly brackets, and a description of the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030312d82013a5eb3552fa6c40ce54f7e0d86bf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@private&lt;/code&gt; tag is equivalent to &lt;code&gt;@access private&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36947f27f01fb8bc874ec0c10dff6c5b4ee6041" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@private&lt;/code&gt; tag is not inherited by child members. For example, if the &lt;code&gt;@private&lt;/code&gt; tag is added to a namespace, members of the namespace can still appear in the generated output; because the namespace is private, the members' namepath will not include the namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ca22c377e10f7ae86c55300d951d13b35f14ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@private&lt;/code&gt; tag marks a symbol as private, or not meant for general use. Private members are not shown in the generated output unless JSDoc is run with the &lt;code&gt;-p/--private&lt;/code&gt; command-line option. In JSDoc 3.3.0 and later, you can also use the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-a/--access&lt;/code&gt; command-line option&lt;/a&gt; to change this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ac0f45ea9e0cf1237756a96572cad1a0be5974" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@protected&lt;/code&gt; tag is equivalent to &lt;code&gt;@access protected&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632835bd41ff063f50d0229f307834e7116d40d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@protected&lt;/code&gt; tag marks a symbol as protected. Typically, this tag indicates that a symbol is only available, or should only be used, within the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1c6c2d5de838891a2956e0db557a76d8e1b2e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@public&lt;/code&gt; tag indicates that a symbol should be documented as if it were public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e228ad35a36d6969d66f46b664aaa71251612b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@returns&lt;/code&gt; tag documents the value that a function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134ca4d6bd1b13891576b0b3d12eb1d4f130842b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@tutorial&lt;/code&gt; tag inserts a link to a tutorial file that is provided as part of the documentation. See the &lt;a href=&quot;about-tutorials&quot;&gt;tutorials overview&lt;/a&gt; for instructions on creating tutorials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bfe38e8766036e39a201c1985a0f4715234955" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@yields&lt;/code&gt; tag documents the value that is yielded by a generator function. This tag is available in JSDoc 3.5.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0721b4b170d57f7f3ecd3398d0cf2e0405c83a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;README.md&lt;/code&gt; file to include in the generated documentation. Defaults to the first &lt;code&gt;README.md&lt;/code&gt; file found in the source paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe7490d732238d1f81bfe2512cdc0c4e16685f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeParse&lt;/code&gt; event is fired before parsing has begun. Plugins can use this method to modify the source code that will be parsed. For instance, your plugin could add a JSDoc comment, or it could remove preprocessing tags that are not valid JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa4b35e957bf76b8c7cbc99ec01acd58ab80029" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defineTag&lt;/code&gt; method returns a &lt;code&gt;Tag&lt;/code&gt; object, which has a &lt;code&gt;synonym&lt;/code&gt; method that can be used to declare a synonym for the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec2d456baed97415a283662ad9985a64101d421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fileBegin&lt;/code&gt; event is fired when the parser is about to parse a file. Your plugin can use this event to trigger per-file initialization if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0384a654039aaf013b8f102e9257960c847b68a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fileComplete&lt;/code&gt; event is fired when the parser has finished parsing a file. Your plugin could use this event to trigger per-file cleanup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c125535fe01d09f91a704f34c75ef7ded4c1db25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jsdocCommentFound&lt;/code&gt; event is fired whenever a JSDoc comment is found. The comment may or may not be associated with any code. You might use this event to modify the contents of a comment before it is processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8269436f92e88475a52bf645352b3ecd0ae0dbcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newDoclet&lt;/code&gt; event is the highest-level event. It is fired when a new doclet has been created. This means that a JSDoc comment or a symbol has been processed, and the actual doclet that will be passed to the template has been created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039cf984f141f6fff3725a17b378a423ea0fa8f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt; file must use &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npm's package format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70afddbb286254afd9908fb5b4c4547a372126e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt; file that contains the project name, version, and other details. Defaults to the first &lt;code&gt;package.json&lt;/code&gt; file found in the source paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a9b7384c37fec0ab791f8cff866d98c66f9af6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseBegin&lt;/code&gt; event is fired before JSDoc starts loading and parsing the source files. Your plugin can control which files JSDoc will parse by modifying the event's contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0878f74ab7cbe2e3dc851349ea86b64931ff3bef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseComplete&lt;/code&gt; event is fired after JSDoc has parsed all of the specified source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4eadb19804384b3be6badc1205164ecc41be34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;processingComplete&lt;/code&gt; event is fired after JSDoc updates the parse results to reflect inherited and borrowed symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75bec0a9bf2227fd2b98141362a687c1a7a216e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recurseDepth&lt;/code&gt; option controls how many levels deep JSDoc will recursively search for source files and tutorials. This option is available in JSDoc 3.5.0 and later. This option is used only if you also specify the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-r&lt;/code&gt; command-line flag&lt;/a&gt;, which tells JSDoc to recursively search for input files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eb0e2e6e4daa70a175ec02e5c65125eb340e13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; set of options, in combination with paths given to JSDoc on the command line, determines the set of input files that JSDoc uses to generate documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a95da6a9bff2e8dc8d0644d0c51829e6d77a256" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType&lt;/code&gt; option affects how JSDoc parses your JavaScript files. This option is available in JSDoc 3.5.0 and later. This option accepts the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416fa8a8395380070bc8005cbb1500687bc6f426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;symbolFound&lt;/code&gt; event is fired when the parser comes across a symbol in the code that may need to be documented. For example, the parser fires a &lt;code&gt;symbolFound&lt;/code&gt; event for each variable, function, and object literal in a source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42099ea65952703bb3c409fa9b9c7f065472926a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tags.allowUnknownTags&lt;/code&gt; property affects how JSDoc handles unrecognized tags. If you set this option to &lt;code&gt;false&lt;/code&gt;, and JSDoc finds a tag that it does not recognize (for example, &lt;code&gt;@foo&lt;/code&gt;), JSDoc logs a warning. By default, this option is set to &lt;code&gt;true&lt;/code&gt;. In JSDoc 3.4.1 and later, you can also set this property to an array of tag names that JSDoc should allow (for example, &lt;code&gt;[&quot;foo&quot;,&quot;bar&quot;]&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3431984b4fc28d637f4d0e73d027173d92ba62b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tags.dictionaries&lt;/code&gt; property controls which tags JSDoc recognizes, as well as how JSDoc interprets the tags that it recognizes. In JSDoc 3.3.0 and later, there are two built-in tag dictionaries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba95b9a46c709bd720ed51cbf966dd913a47b949" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{@link}&lt;/code&gt; inline tag creates a link to the namepath or URL that you specify. When you use the &lt;code&gt;{@link}&lt;/code&gt; tag, you can also provide link text, using one of several different formats. If you don't provide any link text, JSDoc uses the namepath or URL as the link text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b3eebc83d8ae27b20e642a91cd9f238192d6d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{@tutorial}&lt;/code&gt; inline tag creates a link to the tutorial identifier that you specify. When you use the &lt;code&gt;{@tutorial}&lt;/code&gt; tag, you can also provide link text, using one of several different formats. If you don't provide any link text, JSDoc uses the tutorial's title as the link text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127cd7fbce70f65e97925c59ccf5c203ba8abfe3" translate="yes" xml:space="preserve">
          <source>The @abstract tag identifies members that must be implemented (or overridden) by objects that inherit the member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320be1b8466628331ea46f2a84b6fb902e039b39" translate="yes" xml:space="preserve">
          <source>The @alias tag causes JSDoc to treat all references to a member as if the member had a different name. This tag is especially useful if you define a class within an inner function; in this case, you can use the @alias tag to tell JSDoc how the class is exposed in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b08dbbd26b2d117690dc3f019f44fca2defffe" translate="yes" xml:space="preserve">
          <source>The @alias tag tells JSDoc to pretend that Member A is actually named Member B. For example, when JSDoc processes the following code, it recognizes that &lt;code&gt;foo&lt;/code&gt; is a function, then renames &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt; in the documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7be4ee6996fb3d71aae38d68fb8e00cd626785" translate="yes" xml:space="preserve">
          <source>The @author tag identifies the author of an item. In JSDoc 3.2 and later, if the author's name is followed by an email address enclosed in angle brackets, the default template will convert the email address to a &lt;code&gt;mailto:&lt;/code&gt; link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbeab041d5b9e501c8497c741e23f876d096ccc" translate="yes" xml:space="preserve">
          <source>The @borrows tag allows you to add documentation for another symbol to your documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631e4bca5e2bb5d9020797f69b08e52d11be0b24" translate="yes" xml:space="preserve">
          <source>The @callback tag provides information about a callback function that can be passed to other functions, including the callback's parameters and return value. You can include any of the tags that you can provide for a @method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab8d0a5c0858f0004de9a82a61406cd859c8f62" translate="yes" xml:space="preserve">
          <source>The @class tag marks a function as being a constructor, meant to be called with the new keyword to return an instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9476950c86432fdbcb88a863d390c57968c8cc2" translate="yes" xml:space="preserve">
          <source>The @classdesc tag is used to provide a description for a class, separate from the constructor function's description. Use the @classdesc tag in combination with the &lt;a href=&quot;tags-class&quot;&gt;@class (or @constructor) tag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b74c32203d62c0c553af92e9bb472eb93bb2ab" translate="yes" xml:space="preserve">
          <source>The @constant tag is used to mark the documentation as belonging to a symbol that is a constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c78792267648b72939c0843269a0e49cca5ecc" translate="yes" xml:space="preserve">
          <source>The @copyright tag is used to document copyright information in a file overview comment. Use this tag in combination with the &lt;a href=&quot;tags-file&quot;&gt;@file tag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35f5128ed9f2b1c4a494363c025ac990d9b4e84" translate="yes" xml:space="preserve">
          <source>The @default tag allows you to document the assigned value of a symbol. You can supply this tag with a value yourself or you can allow JSDoc to automatically document the value from the source code -- only possible when the documented symbol is being assigned a single, simple value that is either: a string, a number, a boolean or null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7061172a35226e4d344487c18a9a679ce13252" translate="yes" xml:space="preserve">
          <source>The @deprecated tag marks a symbol in your code as being deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3c23ab7b9ed98acf3a255b1d35620f9432eef1" translate="yes" xml:space="preserve">
          <source>The @description tag allows you to provide a general description of the symbol you are documenting. The description may include HTML markup. It may also include Markdown formatting if the &lt;a href=&quot;plugins-markdown&quot;&gt;Markdown plugin&lt;/a&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49b79bb8ea87275f4539e55025d1a0d332b1087" translate="yes" xml:space="preserve">
          <source>The @enum tag documents a collection of static properties whose values are all of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd2a5846b795fc01fb4528d8e18fac1642d4c83" translate="yes" xml:space="preserve">
          <source>The @event tag allows you to document an event that can be fired. A typical event is represented by an object with a defined set of properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b2922a9f382b02eded096434c9623f1d0e6ae1" translate="yes" xml:space="preserve">
          <source>The @file tag provides a description for a file. Use the tag in a JSDoc comment at the beginning of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3ceeeca7a65106895979887b20cdd93dae690e" translate="yes" xml:space="preserve">
          <source>The @fires tag indicates that a method can fire a specified type of event when it is called. Use the &lt;a href=&quot;tags-event&quot;&gt;@event tag&lt;/a&gt; to document the event's content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1564559ffc912ea1953b4f12e577b2ff869cd6e8" translate="yes" xml:space="preserve">
          <source>The @global tag specifies that a symbol should appear in the documentation as a &lt;em&gt;global&lt;/em&gt; symbol. JSDoc ignores the symbol's actual scope within the source file. This tag is especially useful for symbols that are defined locally, then assigned to a global symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cb9e6298ba703b8d71494d568bef5b306d50b3" translate="yes" xml:space="preserve">
          <source>The @kind tag is used to document what &lt;em&gt;kind&lt;/em&gt; of symbol is being documented (for example, a class or a module). The &lt;em&gt;kind&lt;/em&gt; of symbol differs from a symbol's &lt;em&gt;type&lt;/em&gt; (for example, string or boolean).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d52780773e420c958d2b192de416bb077dec02" translate="yes" xml:space="preserve">
          <source>The @member tag identifies any member that does not have a more specialized kind, such as &quot;class&quot;, &quot;function&quot;, or &quot;constant&quot;. A member can optionally have a type as well as a name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6716e6af6325cef88853ca7ec321450424ee1afb" translate="yes" xml:space="preserve">
          <source>The @memberof tag identifies a member symbol that belongs to a parent symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18b9e00d427961361bcb439d352a2406897cbae" translate="yes" xml:space="preserve">
          <source>The @mixes tag indicates that the current object mixes in all the members from &lt;code&gt;OtherObjectPath&lt;/code&gt;, which is a &lt;a href=&quot;tags-mixin&quot;&gt;@mixin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b2b74b8b930fe7cf912e0195ac8b6e46d04147" translate="yes" xml:space="preserve">
          <source>The @module tag marks the current file as being its own module. All symbols in the file are assumed to be members of the module unless documented otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb3cb7781fddcad4b5ee77a3b894f1cde4980fc" translate="yes" xml:space="preserve">
          <source>The @name tag forces JSDoc to associate the remainder of the JSDoc comment with the given name, ignoring all surrounding code. This tag is best used in &quot;virtual comments&quot; for symbols that are not readily visible in the code, such as methods that are generated at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d63abec07ea7e772c740db227eb83d29c33a2d5" translate="yes" xml:space="preserve">
          <source>The @namespace tag indicates that an object creates a namespace for its members. You can also write a virtual JSDoc comment that defines a namespace used by your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0b5ce2000e9dcc9252880fc44675a7f2ce0798" translate="yes" xml:space="preserve">
          <source>The @property tag is a way to easily document a list of static properties of a class, namespace or other object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4092fcac51d89f51ed9089dd80fc940ae7ed1e35" translate="yes" xml:space="preserve">
          <source>The @readonly tag indicates that a symbol is intended to be read-only. Note this is for the purpose of documentation only - JSDoc won't check whether you've &lt;em&gt;actually&lt;/em&gt; treated the symbol as read-only in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7fbf7bd669ce0501a147654b265300489d2287" translate="yes" xml:space="preserve">
          <source>The @requires tag allows you to document that a module is needed to use this code. A JSDoc comment can have multiple @require tags. The module name can be specified as &quot;moduleName&quot; or &quot;module:moduleName&quot;; both forms will be interpreted as modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c1f02debf21ce88be5294b5d0f076266043eb2" translate="yes" xml:space="preserve">
          <source>The @see tag allows you to refer to another symbol or resource that may be related to the one being documented. You can provide either a symbol's namepath or free-form text. If you provide a namepath, JSDoc's default template automatically converts the namepath to a link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47262c63b865c43ff8a534bf905b08dd0e850717" translate="yes" xml:space="preserve">
          <source>The @since tag indicates that a class, method, or other symbol was added in a specific version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd117ae46920d18384424cb07d65ea2fead9a668" translate="yes" xml:space="preserve">
          <source>The @static tag indicates that a symbol is contained within a parent and can be accessed without instantiating the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80080394477982931a37acf441126eafee7952a" translate="yes" xml:space="preserve">
          <source>The @summary tag is a shorter version of the full description. It can be added to any doclet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a70ae08042c0d98dae41de9c69768b7479679a4" translate="yes" xml:space="preserve">
          <source>The @this tag indicates what the &lt;code&gt;this&lt;/code&gt; keyword refers to when used within another symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4784bb7b5526178bdf0b067833c98c186beb074" translate="yes" xml:space="preserve">
          <source>The @throws tag allows you to document an error that a function might throw. You can include the @throws tag more than once in a single JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2fb0bda277be9f524ccb107f9449cd47d2804c" translate="yes" xml:space="preserve">
          <source>The @todo tag allows you to document tasks to be completed for some part of your code. You can use the @todo tag more than once in a single JSDoc comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d68fc4dff03ebc9d949812655ab06ff799f7373" translate="yes" xml:space="preserve">
          <source>The @type tag allows you to provide a type expression identifying the type of value that a symbol may contain, or the type of value returned by a function. You can also include type expressions with many other JSDoc tags, such as the &lt;a href=&quot;tags-param&quot;&gt;@param tag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44f5f25f635e2bdea0e0c54e88008696ae59cb5" translate="yes" xml:space="preserve">
          <source>The @typedef tag is useful for documenting custom types, particularly if you wish to refer to them repeatedly. These types can then be used within other tags expecting a type, such as &lt;a href=&quot;tags-type&quot;&gt;@type&lt;/a&gt; or &lt;a href=&quot;tags-param&quot;&gt;@param&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fa3e54429bfa63fb98f042e515e3739c689943" translate="yes" xml:space="preserve">
          <source>The Dictionary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569e662241317b1ed652fd813e8086925c754b20" translate="yes" xml:space="preserve">
          <source>The JSON file must use the extension &lt;code&gt;.json&lt;/code&gt;. In the JSON file, you can use the tutorial identifiers to provide two properties for each tutorial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328d3664a368602fc6f5252e28799fab50ddd1d3" translate="yes" xml:space="preserve">
          <source>The above example is equivalent to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e456d8ac46ffe3a52b855e000850b4f0cd9234" translate="yes" xml:space="preserve">
          <source>The default template uses a file named &lt;code&gt;layout.tmpl&lt;/code&gt; to specify the header and footer for each page in the generated documentation. In particular, this file defines which CSS and JavaScript files are loaded for each page. In JSDoc 3.3.0 and later, you can specify your own &lt;code&gt;layout.tmpl&lt;/code&gt; file to use, which allows you to load your own custom CSS and JavaScript files in addition to, or instead of, the standard files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a2004790917c3712021819f8a97f2feee6ef7a" translate="yes" xml:space="preserve">
          <source>The dictionary provides the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac30e15f41a9779d5c31c2d85ea1022d95360033" translate="yes" xml:space="preserve">
          <source>The doclet's properties can vary depending on the comment or symbol that the doclet represents. Some common properties you're likely to see include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ffcad7087acb95eab732d16b2b9735083a381c" translate="yes" xml:space="preserve">
          <source>The event object contains the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8134875995688a52ad8c0dad19f96c9644e6130" translate="yes" xml:space="preserve">
          <source>The example below shows: an &lt;em&gt;instance&lt;/em&gt; method named &quot;say,&quot; an &lt;em&gt;inner&lt;/em&gt; function also named &quot;say,&quot; and a &lt;em&gt;static&lt;/em&gt; method also named &quot;say.&quot; These are three distinct methods that all exist independently of one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3280c95d7fbd6946173131d910ecc41d42bcc0" translate="yes" xml:space="preserve">
          <source>The following example documents a new &lt;code&gt;starfairy&lt;/code&gt; function added to the external namespace &lt;code&gt;&quot;jQuery.fn&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f82f51d1c0459e1dc917502160fa69346812fc" translate="yes" xml:space="preserve">
          <source>The following example forces a module's inner member to be documented as a static member:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c317803289044fba6c1f9c2656a81b789ca21a" translate="yes" xml:space="preserve">
          <source>The following example gets us closer to what we want:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935136636a19626cbe2ddd045f6f2ebb63c18c21" translate="yes" xml:space="preserve">
          <source>The following example has the same effect as writing &quot;@function MyNamespace.myFunction&quot; and omitting the @memberof and @static tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a50783f9fbc58390637323f9eb49569c03856e" translate="yes" xml:space="preserve">
          <source>The following example is a longhand way of writing &quot;@function MyNamespace#myFunction&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b604ea25a32308c09e27783ced13ed40d8e085e0" translate="yes" xml:space="preserve">
          <source>The following example shows a virtual comment that uses the &lt;code&gt;@async&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a03800598af6e51d790d52a73a8bfd2eb5ad67b" translate="yes" xml:space="preserve">
          <source>The following example shows a virtual comment that uses the &lt;code&gt;@generator&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44db3c6664f1d8a2944f5ee5fc08397b205d5972" translate="yes" xml:space="preserve">
          <source>The following example shows all of the ways to provide link text for the &lt;code&gt;{@link}&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310f37cc353203bde69d285c528348ce66303ef1" translate="yes" xml:space="preserve">
          <source>The following example shows all of the ways to provide link text for the &lt;code&gt;{@tutorial}&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1a2ec3f373a59eab2db1ae0ecd80442d22a346" translate="yes" xml:space="preserve">
          <source>The following example shows how a class can indicate that it inherits documentation from its parent class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4455942730d0809d2ee0fc66d3d786b8037219c9" translate="yes" xml:space="preserve">
          <source>The following example shows how to document a simple class with a constructor, two instance methods, and one static method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6150930f3e610c09edc77ac0009a8dcbd8c6ac" translate="yes" xml:space="preserve">
          <source>The following example shows how to document an event named &lt;code&gt;module:hurler~event:snowball&lt;/code&gt;, as well as a method named &lt;code&gt;module:playground/monitor.reportThrowage&lt;/code&gt; that listens for the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7729bddb70c14eafd16ea8f3c479ef4a076512c5" translate="yes" xml:space="preserve">
          <source>The following example shows how to document different kinds of exported values in an ES 2015 module. In most cases, you can simply add a JSDoc comment to the &lt;code&gt;export&lt;/code&gt; statement that defines the exported value. If you are exporting a value under another name, you can document the exported value within its &lt;code&gt;export&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703276bd08251a2b2891adc672f240f6faedcf8d" translate="yes" xml:space="preserve">
          <source>The following example shows how to document the built-in &lt;code&gt;String&lt;/code&gt; object as an external, along with the new instance method &lt;code&gt;external:String#rot13&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b6cb1b7bd08b4e89acdd00747854c3daa5726e" translate="yes" xml:space="preserve">
          <source>The following example shows how to indicate that a method overrides a method in its parent class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a560d28e63af7a62511d93d49276b95048a01b5f" translate="yes" xml:space="preserve">
          <source>The following example shows how to indicate that a property is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078e994a404fbf98963f9aea1f1c07423d743206" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the @name tag to document a function that JSDoc would not normally recognize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae2a90dea99e604a280a48d9fe20b231375086d" translate="yes" xml:space="preserve">
          <source>The following example shows the namepaths that are used for symbols in a module. The first symbol is a module-private, or &quot;inner,&quot; variable--it can be only accessed within the module. The second symbol is a static function that is exported by the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da156ebaad3a119761494772db70edc4e9d81f7f" translate="yes" xml:space="preserve">
          <source>The following example uses the @variation tag to distinguish between the Widget class and the Widget namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f20bec54736b78a160c39dcb36480bfc49c2c8" translate="yes" xml:space="preserve">
          <source>The following example uses the forced @memberof tag, &quot;@memberof!&quot;, to document a property of an object (Data#point) that is an instance member of a class (Data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a5cec1812991a9834fd92546634dd3e7e97317" translate="yes" xml:space="preserve">
          <source>The following example uses virtual comments, rather than code, to define the &lt;code&gt;Color&lt;/code&gt; interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479ba720383290c581b00a2e6b4b5ae27b6db65e" translate="yes" xml:space="preserve">
          <source>The following examples show a simple configuration file that enables JSDoc's &lt;a href=&quot;plugins-markdown&quot;&gt;Markdown plugin&lt;/a&gt;. JSDoc's configuration options are explained in detail in the following sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7e5752ea33b51952294b97ad618271bc7a0179" translate="yes" xml:space="preserve">
          <source>The following examples show how to document an event in the &lt;code&gt;Hurl&lt;/code&gt; class called &lt;code&gt;snowball&lt;/code&gt;. The event contains an object with a single property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721411093f570682cc85e0c966e4c5cd96654e58" translate="yes" xml:space="preserve">
          <source>The following examples show how to include names, types, and descriptions in a &lt;code&gt;@param&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a1871de85c471b304dc16865ba8eb8486495c5" translate="yes" xml:space="preserve">
          <source>The following examples show how to indicate that a parameter is optional and has a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf72da4fbb50dc88c424225d0d5bcb2120d4543" translate="yes" xml:space="preserve">
          <source>The following examples show how to use type expressions to indicate that a parameter can accept multiple types (or any type), and that a parameter can be provided more than once. See the &lt;a href=&quot;tags-type&quot;&gt;&lt;code&gt;@type&lt;/code&gt; tag documentation&lt;/a&gt; for details about the type expressions that JSDoc supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9cf63d3837c504916ca40c97cdc6032658d377" translate="yes" xml:space="preserve">
          <source>The function is called on each node with the following parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76051346968bb2c5af7e9a350474d1d5d3d20a63" translate="yes" xml:space="preserve">
          <source>The functionality of the @classdesc tag in JSDoc 3 duplicates that of the @class in previous versions. As of version 3, the syntax and functionality of the @class tag now exactly matches the @constructor tag, and the @classdesc tag more explicitly communicates its purpose: to document a class's description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee920e76c0a42e582c01d7e84315e789f40e87c" translate="yes" xml:space="preserve">
          <source>The namepath for an external symbol always uses the prefix &lt;code&gt;external:&lt;/code&gt; (for example, &lt;code&gt;{@link external:Foo}&lt;/code&gt; or &lt;code&gt;@augments external:Foo&lt;/code&gt;). However, you can omit this prefix from the &lt;code&gt;@external&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef421b1e1abf5f410d63d433c88084645703dc7e" translate="yes" xml:space="preserve">
          <source>The options in &lt;code&gt;tags&lt;/code&gt; control which JSDoc tags are allowed and how each tag is interpreted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6ba6dda52c59a837d612b9896cb56984cfa7d7" translate="yes" xml:space="preserve">
          <source>The options in &lt;code&gt;templates&lt;/code&gt; affect the appearance and content of generated documentation. Third-party templates may not implement all of these options. See &lt;a href=&quot;about-configuring-default-template&quot;&gt;Configuring JSDoc's Default Template&lt;/a&gt; for additional options that the default template supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3fc490c54d80ff65fff767fad92b8adeda148c" translate="yes" xml:space="preserve">
          <source>The parameter type can be a built-in JavaScript type, such as &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt;, or a &lt;a href=&quot;about-namepaths&quot;&gt;JSDoc namepath&lt;/a&gt; to another symbol in your code. If you have written documentation for the symbol at that namepath, JSDoc will automatically link to the documentation for that symbol. You can also use a type expression to indicate, for example, that a parameter is not nullable or can accept any type; see the &lt;a href=&quot;tags-type&quot;&gt;&lt;code&gt;@type&lt;/code&gt; tag documentation&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726fc27c43b322158b337e5039fd9398c36893ce" translate="yes" xml:space="preserve">
          <source>The path to a JSDoc &lt;a href=&quot;about-configuring-jsdoc&quot;&gt;configuration file&lt;/a&gt;. Defaults to &lt;code&gt;conf.json&lt;/code&gt; or &lt;code&gt;conf.json.EXAMPLE&lt;/code&gt; in the directory where JSDoc is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa8fc6b65d736336efae562f96b17320bccfdc2" translate="yes" xml:space="preserve">
          <source>The path to the output folder for the generated documentation. For JSDoc's built-in Haruki template, use &lt;code&gt;console&lt;/code&gt; to dump data to the console. Defaults to &lt;code&gt;./out&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f5615ae08ac429345d2a6fa1c75284f45b3e80" translate="yes" xml:space="preserve">
          <source>The path to the template to use for generating output. Defaults to &lt;code&gt;templates/default&lt;/code&gt;, JSDoc's built-in default template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50589a48bb049872d2aaa64866d05ddca6aae74a" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;@inheritdoc&lt;/code&gt; tag implies the presence of the &lt;a href=&quot;tags-override&quot;&gt;&lt;code&gt;@override&lt;/code&gt; tag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b159e4f46be2369c1fcd825f9bb78c8f0743af" translate="yes" xml:space="preserve">
          <source>The primary reasons to implement a node visitor are to be able to document things that aren't normally documented (like function calls that create classes) or to auto generate documentation for code that isn't documented. For instance, a plugin might look for calls to a &lt;code&gt;_trigger&lt;/code&gt; method since it knows that means an event is fired and then generate documentation for the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9e66316bfdc9e0e4452e9af3b80967619e961a" translate="yes" xml:space="preserve">
          <source>The same pattern works for constructor functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00dfb19a7b2077c82a905868953ad0aa2485d7c" translate="yes" xml:space="preserve">
          <source>The simplest documentation is just a description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f03822fab069dd9333cbc36c8fcf5b737af741" translate="yes" xml:space="preserve">
          <source>There are multiple ways to link to a tutorial from your API documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b079ca9b876d86f97e8afbf516092c1f42fb7a" translate="yes" xml:space="preserve">
          <source>There are some special cases with namepaths: &lt;a href=&quot;tags-module&quot;&gt;@module&lt;/a&gt; names are prefixed by &quot;module:&quot;, &lt;a href=&quot;tags-external&quot;&gt;@external&lt;/a&gt; names are prefixed by &quot;external:&quot;, and &lt;a href=&quot;tags-event&quot;&gt;@event&lt;/a&gt; names are prefixed by &quot;event:&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a51ffb866d847db07efd939666fd62b99dcf836" translate="yes" xml:space="preserve">
          <source>There are two steps required to create and enable a new JSDoc plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ffca12e82455bb6f7175e5b4a33174d64ac503" translate="yes" xml:space="preserve">
          <source>There are two ways to incorporate a &lt;code&gt;README&lt;/code&gt; file into your documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675cf2fd05ee924fb460da50ed843544544d4cf5" translate="yes" xml:space="preserve">
          <source>There are two ways to incorporate a &lt;code&gt;package.json&lt;/code&gt; file into your documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed6ecfaaae57fac4a4d38c1d3dcfddc61f41453" translate="yes" xml:space="preserve">
          <source>These options and others are explained in the following sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c806b6d1d2b543265d20df9a599be9c12630b2a" translate="yes" xml:space="preserve">
          <source>These options are interpreted in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62dbe457cb09f6a2a3a3e495849de33bdb23fa57" translate="yes" xml:space="preserve">
          <source>This can be a number or a boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d601dd349057a6da72d5d00ddc44f41ea69da3" translate="yes" xml:space="preserve">
          <source>This chaining can be used with any combination of the connecting symbols: &lt;code&gt;# . ~&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f665c596b215d15e8ad4304628f88ad670e6d22c" translate="yes" xml:space="preserve">
          <source>This command will create a directory named &lt;code&gt;out/&lt;/code&gt; in the current working directory. Within that directory, you will find the generated HTML pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896fdb094357960778d9928999980d9526f17017" translate="yes" xml:space="preserve">
          <source>This example defines a more complex type, an object with several properties, and sets its namepath so it will be displayed along with the class that uses the type. Because the type definition is not actually exposed by the class, it is customary to document the type definition as an inner member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39662e46fa83fffc8b77c28bb1c3e134d60c5fa1" translate="yes" xml:space="preserve">
          <source>This example defines a union type for parameters that can contain either numbers or strings that represent numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e329920ef69124dfbf0e109614a0187d2ce0fd0" translate="yes" xml:space="preserve">
          <source>This file requires a JavaScript module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ef5add1ecf6d6ed9ac7c5df8363a1e528ac502" translate="yes" xml:space="preserve">
          <source>This function accepts a variable number of numeric parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f549b3e5a6ef3aea7e7378c61264414cd66f9f" translate="yes" xml:space="preserve">
          <source>This function is intended to be called with the &quot;new&quot; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a514a549a3bbe9d821cd6e9211e7fa138762fc9" translate="yes" xml:space="preserve">
          <source>This function member will be the constructor for the previous class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d244993e20d3d189ad54294bd70adbea7b0a9f" translate="yes" xml:space="preserve">
          <source>This indicates that the type is either the specified type, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6264d3e92446e27c59ab3c899ee1c04e715019" translate="yes" xml:space="preserve">
          <source>This marks an object as being a function, even though it may not appear to be one to the parser. It sets the doclet's &lt;a href=&quot;tags-kind&quot;&gt;@kind&lt;/a&gt; to 'function'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b00a47192a93998918e61792a0001a49e34758" translate="yes" xml:space="preserve">
          <source>This means a value can have one of several types, with the entire list of types enclosed in parentheses and separated by &lt;code&gt;|&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91841d75e767a08d26a9cbfb4237550b49254a5" translate="yes" xml:space="preserve">
          <source>This means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0458606257008ad686b85f087f94274f5172363f" translate="yes" xml:space="preserve">
          <source>This member must be implemented (or overridden) by the inheritor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13dd21e8a184070ade3b756c193edec70cd1ed87" translate="yes" xml:space="preserve">
          <source>This object mixes in all the members from another object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c532251bab4cdbf0d3a23b574db033887fed0df2" translate="yes" xml:space="preserve">
          <source>This object uses something from another object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4f0795773f44d4225fee2531dcfeb972a2a475" translate="yes" xml:space="preserve">
          <source>This page explains how to document CommonJS and Node.js modules that use several different coding conventions. If you're documenting Asynchronous Module Definition (AMD) modules (also known as &quot;RequireJS modules&quot;), see &lt;a href=&quot;howto-amd-modules&quot;&gt;AMD Modules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd847cc165f45ca09b744537ba581ad27eef082" translate="yes" xml:space="preserve">
          <source>This shows how to document an object that represents a value with three possible states. Note that the enum members can have optional descriptions added if you wish. Also you can override the type, as is shown with &quot;MAYBE&quot; -- by default enum members will be documented with the same type as the enum itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87777bce1979f3a2dad5e9f2920683c40e800b17" translate="yes" xml:space="preserve">
          <source>This symbol belongs to a parent symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec4f89ad294492461f6bf3e5852f30529a85bb1" translate="yes" xml:space="preserve">
          <source>This symbol implements an interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77520c15978e7814483e6efcb0372469272f915b" translate="yes" xml:space="preserve">
          <source>This symbol is an interface that others can implement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ed275e92fccb9e06506468deaa45c43f92a059" translate="yes" xml:space="preserve">
          <source>This symbol is meant to be package-private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0c05d4fcd60bfa90b2ff64e8d210542913d01b" translate="yes" xml:space="preserve">
          <source>This symbol is meant to be private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9866d15f8752df626a13a4e3715a48cbeaecaf" translate="yes" xml:space="preserve">
          <source>This symbol is meant to be protected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbaa6ba28e12c8f904e2a80b49a1210cff6744e" translate="yes" xml:space="preserve">
          <source>This symbol is meant to be public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de895235ae1c2e6b24375e69c040e0c7e5bf5c51" translate="yes" xml:space="preserve">
          <source>This symbol is meant to be read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8eb5bea71b3d531aeab329797e104b7fca344f" translate="yes" xml:space="preserve">
          <source>This tag is provided for compatibility with &lt;a href=&quot;https://developers.google.com/closure/compiler/&quot;&gt;Closure Compiler&lt;/a&gt;. By default, JSDoc automatically identifies symbols that override a parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdfd2d424d2e1641e87858b244f965d4f70eabb" translate="yes" xml:space="preserve">
          <source>This tag is provided for compatibility with &lt;a href=&quot;https://developers.google.com/closure/compiler/&quot;&gt;Closure Compiler&lt;/a&gt;. By default, if you do not add a JSDoc comment to a symbol, the symbol will inherit documentation from its parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548bb2a1b0a8347287f86786d8fbdcc370a0efb8" translate="yes" xml:space="preserve">
          <source>This tag would be useful if you had more than one way to reference a function, but you didn't want to duplicate the same documentation in two places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afc913f22ccdca8af070601072a285cc4a8c28a" translate="yes" xml:space="preserve">
          <source>To add tutorials to your API documentation, run JSDoc with the &lt;code&gt;--tutorials&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt; option, and provide a directory that JSDoc should search for tutorials. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e76944ac92b9826ef4a8a2024c3c612f0690361" translate="yes" xml:space="preserve">
          <source>To copy additional static files to the output directory, use the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63a28f0cec88a444e054c3ef6faf5ed456cdff4" translate="yes" xml:space="preserve">
          <source>To copy all of the static files in &lt;code&gt;./myproject/static&lt;/code&gt; to the output directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1269413fa08d7f5f9dd14c2872ac3f89b5d759d" translate="yes" xml:space="preserve">
          <source>To customize JSDoc's behavior, you can provide a configuration file to JSDoc in one of the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bb261659604ee814007bfc61163ded9618249c" translate="yes" xml:space="preserve">
          <source>To disable pretty-printed files, set the option &lt;code&gt;templates.default.outputSourceFiles&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. Using this option also removes links to your source files from the documentation. This option is available in JSDoc 3.3.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42675e00e7e1c0abef4fdf050dd39d608504dea" translate="yes" xml:space="preserve">
          <source>To enable plugins, add their paths (relative to the JSDoc folder) into the &lt;code&gt;plugins&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22bbccfbb485b12d7bf1119201dc0864c5bea1e" translate="yes" xml:space="preserve">
          <source>To enable the Markdown plugin, add the string &lt;code&gt;plugins/markdown&lt;/code&gt; to the &lt;code&gt;plugins&lt;/code&gt; array in your &lt;a href=&quot;about-configuring-jsdoc&quot;&gt;JSDoc configuration file&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7d97474398dee947d01f873fd7aba9603e5bbc" translate="yes" xml:space="preserve">
          <source>To help you document &lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.1&quot;&gt;CommonJS modules&lt;/a&gt;, JSDoc 3 understands many of the conventions used in the CommonJS specification (for example, adding properties to the &lt;code&gt;exports&lt;/code&gt; object). In addition, JSDoc recognizes the conventions of &lt;a href=&quot;http://nodejs.org/api/modules.html&quot;&gt;Node.js modules&lt;/a&gt;, which extend the CommonJS standard (for example, assigning a value to &lt;code&gt;module.exports&lt;/code&gt;). Depending on the coding conventions you follow, you may need to provide some additional tags to help JSDoc understand your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78aec908689edc4a23426bdd7ae70594424c43d1" translate="yes" xml:space="preserve">
          <source>To make things happen, the &lt;code&gt;visitNode&lt;/code&gt; function should modify properties of the event parameter. In general the goal is to construct a comment and then get an event to fire. After the parser lets all of the node visitors have a look at the node, it looks to see if the event object has a &lt;code&gt;comment&lt;/code&gt; property and an &lt;code&gt;event&lt;/code&gt; property. If it has both, the event named in the event property is fired. The event is usually &lt;code&gt;symbolFound&lt;/code&gt; or &lt;code&gt;jsdocCommentFound&lt;/code&gt;, but theoretically, a plugin could define its own events and handle them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4f9e1fb916ce846ce22d367e53c3dce4b72757" translate="yes" xml:space="preserve">
          <source>To prevent the Markdown plugin from processing any of the &lt;a href=&quot;#default-tags&quot;&gt;default JSDoc tags&lt;/a&gt;, add a &lt;code&gt;markdown.excludeTags&lt;/code&gt; property to your JSDoc configuration file. The &lt;code&gt;markdown.excludeTags&lt;/code&gt; property contains an array of the default tags that should not be processed for Markdown text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef816d668f4b7126ab216fa515a15126204741aa" translate="yes" xml:space="preserve">
          <source>To run JSDoc with a configuration file, use the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-c&lt;/code&gt; command-line option&lt;/a&gt; (for example, &lt;code&gt;jsdoc -c /path/to/conf.json&lt;/code&gt; or &lt;code&gt;jsdoc -c /path/to/conf.js&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e48bed85d1d58c59f9eec4673b7427f37b01b72" translate="yes" xml:space="preserve">
          <source>To see the doclets that JSDoc generates for your code, run JSDoc with the &lt;a href=&quot;about-commandline&quot;&gt;&lt;code&gt;-X&lt;/code&gt; command-line option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f450068e5a66ea17eb1e6987dc792c3e4e87bc86" translate="yes" xml:space="preserve">
          <source>To start, we document a mixin with the &lt;a href=&quot;tags-mixin&quot;&gt;@mixin&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa616edb9e0f8887ebaed76ed9c0763c568dd1b" translate="yes" xml:space="preserve">
          <source>To use these options, you must &lt;a href=&quot;about-configuring-jsdoc&quot;&gt;create a configuration file&lt;/a&gt; for JSDoc and set the appropriate options in the configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6441f62ac68ccac393440f97b75bfe19ce466a8" translate="yes" xml:space="preserve">
          <source>To use this feature, set the option &lt;code&gt;templates.default.layoutFile&lt;/code&gt; to the path to your customized layout file. Relative paths are resolved against the current working directory; the path to the configuration file; and the JSDoc directory, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a60679b7185919ca60cb17cbf3a41a2533d200" translate="yes" xml:space="preserve">
          <source>Treat a member as if it had a different name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f3c8345d871dd0f58310883d36da7bba03b9d9" translate="yes" xml:space="preserve">
          <source>Treat errors as fatal errors, and treat warnings as errors. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="67921ac307a0edfd915b53407b84c8c0457981a2" translate="yes" xml:space="preserve">
          <source>Type definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968d0a0e35a7c87beef6b032ef93e6e33873b9eb" translate="yes" xml:space="preserve">
          <source>Type expressions can accompany many tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8affe505da3fa8bb25b5d5f2ff94fac6348a60d3" translate="yes" xml:space="preserve">
          <source>Type name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4b69c0c856c2984407ce6b5fb0c096b9370216" translate="yes" xml:space="preserve">
          <source>Use JSDoc project on GitHub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855c8dd27069fd480920eff59dac26de081d8550" translate="yes" xml:space="preserve">
          <source>Use a JSDoc tag to describe your code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a57064d5933d70a879da597c08861d145fce77a" translate="yes" xml:space="preserve">
          <source>Use a documentation tag to describe your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9731e85dff4f764a812d02a957433c94b289eb8" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;tags-callback&quot;&gt;@callback&lt;/a&gt; tag to document the type of callback functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f399e3df7967968c0c9e142f4bc823cfc5584d" translate="yes" xml:space="preserve">
          <source>Use the @exports tag when documenting JavaScript modules that export anything other than the &quot;exports&quot; object or the &quot;module.exports&quot; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8c467249b986a9397c048e6cab674f0546fea9" translate="yes" xml:space="preserve">
          <source>Use the @global tag to specify that a symbol should be documented as global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c672a14794ca846fc04bcc799ea4850190f638" translate="yes" xml:space="preserve">
          <source>Use the following text to describe the entire class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532dfbc536ed534c426195283bbcbd76c23ad01c" translate="yes" xml:space="preserve">
          <source>Using @access as a synonym for other tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb116c73fcbe6f73ed028f0740295c2e39f9b82" translate="yes" xml:space="preserve">
          <source>Using @alias for an object literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be37055a158a6b0a20746e56c6799bef93d98a53" translate="yes" xml:space="preserve">
          <source>Using @alias for static members of a namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8433425ba823bd1cd364e0814557794826772db" translate="yes" xml:space="preserve">
          <source>Using @alias with an anonymous constructor function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d575950114ba5ad45f63c77bc7772f1408a970c" translate="yes" xml:space="preserve">
          <source>Using @function to mark a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a9fe09b60ea1de11d7791096111e3c76f2206a" translate="yes" xml:space="preserve">
          <source>Using @function with a name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b211cc636e42e3dc59c9af71b77f26f1e13b1a1" translate="yes" xml:space="preserve">
          <source>Using @inner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ab613bb8c3e160340701231f2e7947407f6f8f" translate="yes" xml:space="preserve">
          <source>Using @inner to make a virtual doclet an inner member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763b9c08b1d073e19ec1141035805878f490da99" translate="yes" xml:space="preserve">
          <source>Using @inner will override a doclet's default scope (unless it is in the global scope, in which case it will remain global).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935d61760bd091e6cc61045cde7372063b7411c8" translate="yes" xml:space="preserve">
          <source>Using @instance to identify an instance member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd8439fb18ef6008193a20d87a0714826bc8e28" translate="yes" xml:space="preserve">
          <source>Using @instance to make a virtual doclet an instance member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d2b163fe2b7161935cc5e5f1b5c99fc5af33c7" translate="yes" xml:space="preserve">
          <source>Using @instance will override a doclet's default scope (unless it is in the global scope, in which case it will remain global).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7c714c0fc1087218003ca575b55a7dab68efad" translate="yes" xml:space="preserve">
          <source>Using @kind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b412fcf851d8ff1a153a92fd853e44de9ee225" translate="yes" xml:space="preserve">
          <source>Using @member with Data#point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdf7b83af30c290119cd97528c953dcba5339b3" translate="yes" xml:space="preserve">
          <source>Using @memberof</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4baf363ce6b126bf9f807e228a933e6b7c1e1d7" translate="yes" xml:space="preserve">
          <source>Using @memberof with a class prototype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ad86cd7e051d94832308f4ccaae5c66900486c" translate="yes" xml:space="preserve">
          <source>Using @memberof! for object properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf6a53e794463182d9a98309af815b583cc0145" translate="yes" xml:space="preserve">
          <source>Using @mixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b983632eef4bfd7485b3b6ea09c33bc9b5e839d" translate="yes" xml:space="preserve">
          <source>Using @static in a virtual comment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a572b4c42e111fac22949b9ee7cb3464f2d4f0c0" translate="yes" xml:space="preserve">
          <source>Using @static to override the default scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9365d614a71ee18255480376e713bce2bdd9eb" translate="yes" xml:space="preserve">
          <source>Using @typedef to document a complex type for a class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7c19eeeb6703f6d1b206d38ca112c68627d32e" translate="yes" xml:space="preserve">
          <source>Using @var to document a virtual member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfc30c6c58f3febdcfd170bfbcdee97e18a6ab1" translate="yes" xml:space="preserve">
          <source>Using a named doclet to document an event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c35a1e9711b62fabcf643a031eb2c7df4a2718" translate="yes" xml:space="preserve">
          <source>Using namepaths with JSDoc 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae793e32584d411b04e5392828b30b01035cbb0" translate="yes" xml:space="preserve">
          <source>Using the -P/--package option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b700a127b855de576267e20a4f74318e780c1fd" translate="yes" xml:space="preserve">
          <source>Using the -R/--readme option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7832251d2b69aa92eaedd73dafbeb919e70ba7c2" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@tutorial&lt;/code&gt; block tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55fe8a1c061f9c2c6605307bdd29ae9b1f467b1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;{@tutorial}&lt;/code&gt; inline tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c7c8c6c7356609dbc4aeb514a534cfaea4754b" translate="yes" xml:space="preserve">
          <source>Using the @constructs tag with @lends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57014bb41e30664ec31d871aa79eb8d1a57ad671" translate="yes" xml:space="preserve">
          <source>Using the @implements tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb78fdbec5686cbad8e85909d039cee82865a02" translate="yes" xml:space="preserve">
          <source>Using the @inner tag will mark a symbol as an inner member of its parent symbol. This means it can be referred to by &quot;Parent~Child&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662b5442055015dd3200c457a8b616265591e5e1" translate="yes" xml:space="preserve">
          <source>Using the @instance tag will mark a symbol as an instance member of its parent symbol. This means it can be referred to by &quot;Parent#Child&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa25188b94f2bd5ea1ad4b143d7a84b95215425" translate="yes" xml:space="preserve">
          <source>Using the @interface tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e297e50e0ea97e3c4bd206fe2eac5bcbc565e41" translate="yes" xml:space="preserve">
          <source>Using the @mixes tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7288dd3523bd0c988f7d1c368bd6a41525314255" translate="yes" xml:space="preserve">
          <source>Using the @name tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643e0ef7ecaa4c5f968a953262e02d7e5db100e1" translate="yes" xml:space="preserve">
          <source>Using the @namespace tag for virtual comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2315fc2b0505b510ae6caa8ff942a7a0d8170672" translate="yes" xml:space="preserve">
          <source>Using the @namespace tag with an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9003fc151e18aec556f58537ca2401c52df80925" translate="yes" xml:space="preserve">
          <source>Using the @namespace tag with unusual member names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec8d63533011cebbc943692a0de17165e3489c3" translate="yes" xml:space="preserve">
          <source>Using the @package tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784ce72857824137e10c5f772c27f3763be21505" translate="yes" xml:space="preserve">
          <source>Using the @private tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570816558fca13ca96fa173f848e9761982d04f2" translate="yes" xml:space="preserve">
          <source>Using the @protected tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1859aeb81b1b7e2cb85015953c9b168af3faf6d" translate="yes" xml:space="preserve">
          <source>Using the @public tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de373418ae87415b72a040c9b56f7478983bc70" translate="yes" xml:space="preserve">
          <source>Using the @readonly tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fae3c8f9f82d22187ee541fac1afc856cc9db92" translate="yes" xml:space="preserve">
          <source>Using the @readonly tag with a getter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6aed4a3eb52530a31295c958eb04c4c34cffa0" translate="yes" xml:space="preserve">
          <source>Using the @requires tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd75211e3d63d807d3798fecea021c7d3d7792f0" translate="yes" xml:space="preserve">
          <source>Using the @see tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec55abf5ae6e57f1b502711df1ece5cd75864ae" translate="yes" xml:space="preserve">
          <source>Using the @since tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3f4d9df06e655c8db7f74641dd45732b970d4f" translate="yes" xml:space="preserve">
          <source>Using the @static tag will override a symbol's default scope, with one exception: Symbols in global scope will remain global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93218aa5fa2ef54e86bb683e8d9af2a6b43c1a0d" translate="yes" xml:space="preserve">
          <source>Using the @throws tag with a description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e27c0a6965f8ebe741a531bc1697e96c48aa3b4" translate="yes" xml:space="preserve">
          <source>Using the @throws tag with a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231aaa0af3fc24b20228b1ac582a8a9ce6328590" translate="yes" xml:space="preserve">
          <source>Using the @throws tag with a type and description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5228f6b712c3cb16e6cfc43e64e2085c0f0f2a14" translate="yes" xml:space="preserve">
          <source>Using the @todo tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9cfea5e23e8fe89799e9ba3a949d87ae679819" translate="yes" xml:space="preserve">
          <source>Using the @tutorial tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8fdc2dec16c7f0ed42a80aab7900702eefb9ef" translate="yes" xml:space="preserve">
          <source>Using the @typedef tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6370fdae8da38cccd5b6ba8b80517bcb72098c85" translate="yes" xml:space="preserve">
          <source>Using the @variation tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d0bb67a5250993f4f09c42507bec726860841a" translate="yes" xml:space="preserve">
          <source>Using the @version tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0359faa47b92b2f1f6fb615c34496dcbdc110b05" translate="yes" xml:space="preserve">
          <source>Using the Markdown plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e72f0935a9ae420d33f79aece9047c2dfd5de44" translate="yes" xml:space="preserve">
          <source>Using these methods creates a better user experience than simply throwing an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7fbd41d89d6689345740f8603bdf877838e00c" translate="yes" xml:space="preserve">
          <source>Usually you do not need the @kind tag, because the symbol's kind is determined by other tags in the doclet. For example, using the @class tag automatically implies &quot;@kind class&quot;, and using the @namespace tag implies &quot;@kind namespace&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74d7cf88e6c9e93df0a81153652d1ebe6ccb925" translate="yes" xml:space="preserve">
          <source>Values assigned to 'module.exports'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f91df3d6a9b5afcadcd935c608f62219a05fbe" translate="yes" xml:space="preserve">
          <source>Values assigned to 'module.exports' and local variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046a2cb37107784dd14b1ca7e1ce81169d26b5a5" translate="yes" xml:space="preserve">
          <source>Values assigned to local variables</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
