<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="e752ec513dfa2b9020c4b9b1d77dff65842791cc" translate="yes" xml:space="preserve">
          <source>The decorator can also be applied to test case classes:</source>
          <target state="translated">デコレータはテストケースクラスにも適用できます。</target>
        </trans-unit>
        <trans-unit id="08078900b7b084a713be574d3ec48dde029f0fc7" translate="yes" xml:space="preserve">
          <source>The decorator may also take an iterable of permissions, in which case the user must have all of the permissions in order to access the view.</source>
          <target state="translated">デコレータはパーミッションのイテレータブルを取ることもできます。</target>
        </trans-unit>
        <trans-unit id="3e6984e25abb466ab3b70b1883295bf7fdad1ae1" translate="yes" xml:space="preserve">
          <source>The decorator method</source>
          <target state="translated">デコレータメソッド</target>
        </trans-unit>
        <trans-unit id="7c5f3a4a1d212f664f326057c0ab4ff2bbfd5f34" translate="yes" xml:space="preserve">
          <source>The decorator sets the &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers on the response if they are not already set by the view and if the request&amp;rsquo;s method is safe (&lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ETag&lt;/code&gt; ヘッダーと &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーがビューによってまだ設定されておらず、リクエストのメソッドが安全（ &lt;code&gt;GET&lt;/code&gt; または &lt;code&gt;HEAD&lt;/code&gt; ）である場合、デコレーターはヘッダーを設定します。</target>
        </trans-unit>
        <trans-unit id="dc20f9a0cf41d79aff3ab5d9ba049b34d9983d7f" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.cache&quot;&gt;&lt;code&gt;django.views.decorators.cache&lt;/code&gt;&lt;/a&gt; control server and client-side caching.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.cache&quot;&gt; &lt;code&gt;django.views.decorators.cache&lt;/code&gt; &lt;/a&gt;のデコレータは、サーバーとクライアント側のキャッシュを制御します。</target>
        </trans-unit>
        <trans-unit id="714400a88cce911b942d02df934f863e07f4e572" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.gzip&quot;&gt;&lt;code&gt;django.views.decorators.gzip&lt;/code&gt;&lt;/a&gt; control content compression on a per-view basis.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.gzip&quot;&gt; &lt;code&gt;django.views.decorators.gzip&lt;/code&gt; &lt;/a&gt;のデコレータは、ビュー単位でコンテンツの圧縮を制御します。</target>
        </trans-unit>
        <trans-unit id="4b9631a95e4f5290b1d40c2f36db35dff973e6be" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.http&quot;&gt;&lt;code&gt;django.views.decorators.http&lt;/code&gt;&lt;/a&gt; can be used to restrict access to views based on the request method. These decorators will return a &lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt;&lt;code&gt;django.http.HttpResponseNotAllowed&lt;/code&gt;&lt;/a&gt; if the conditions are not met.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.http&quot;&gt; &lt;code&gt;django.views.decorators.http&lt;/code&gt; &lt;/a&gt;のデコレータを使用すると、リクエストメソッドに基づいてビューへのアクセスを制限できます。これらのデコレータは、条件が満たされない場合、&lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt; &lt;code&gt;django.http.HttpResponseNotAllowed&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="172b895ce751cf6b71596b006bab1637b49f0e3a" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.vary&quot;&gt;&lt;code&gt;django.views.decorators.vary&lt;/code&gt;&lt;/a&gt; can be used to control caching based on specific request headers.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.vary&quot;&gt; &lt;code&gt;django.views.decorators.vary&lt;/code&gt; &lt;/a&gt;のデコレーターを使用すると、特定のリクエストヘッダーに基づいてキャッシュを制御できます。</target>
        </trans-unit>
        <trans-unit id="d956dc320ba4030b6695d4e49373953768a303f7" translate="yes" xml:space="preserve">
          <source>The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See &lt;code&gt;django.db.backends.BaseDatabaseFeatures&lt;/code&gt; class for a full list of database features that can be used as a basis for skipping tests.</source>
          <target state="translated">デコレータは文字列識別子を使用してデータベース機能を記述します。この文字列は、データベース接続機能クラスの属性に対応しています。テストをスキップするための基礎として使用できるデータベース機能の完全なリストについては、 &lt;code&gt;django.db.backends.BaseDatabaseFeatures&lt;/code&gt; クラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="caaa132833461901a9846628e798fe735598a186" translate="yes" xml:space="preserve">
          <source>The decorators will process a request in the order they are passed to the decorator. In the example, &lt;code&gt;never_cache()&lt;/code&gt; will process the request before &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">デコレータは、デコレータに渡された順序でリクエストを処理します。この例では、 &lt;code&gt;never_cache()&lt;/code&gt; は &lt;code&gt;login_required()&lt;/code&gt; の前にリクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="e9b3340f0a94e2fad729899fe10f241ec56afb5c" translate="yes" xml:space="preserve">
          <source>The default 404 view will pass two variables to the template: &lt;code&gt;request_path&lt;/code&gt;, which is the URL that resulted in the error, and &lt;code&gt;exception&lt;/code&gt;, which is a useful representation of the exception that triggered the view (e.g. containing any message passed to a specific &lt;code&gt;Http404&lt;/code&gt; instance).</source>
          <target state="translated">デフォルトの404ビューは2つの変数をテンプレートに渡します： &lt;code&gt;request_path&lt;/code&gt; （エラーの原因となったURL）と &lt;code&gt;exception&lt;/code&gt; （ビューをトリガーした例外の有用な表現です（例：特定の &lt;code&gt;Http404&lt;/code&gt; インスタンスに渡されたメッセージを含む））。</target>
        </trans-unit>
        <trans-unit id="8bb62d8434d62bd532ee0e74706ef31f9611e1c2" translate="yes" xml:space="preserve">
          <source>The default 500 view passes no variables to the &lt;code&gt;500.html&lt;/code&gt; template and is rendered with an empty &lt;code&gt;Context&lt;/code&gt; to lessen the chance of additional errors.</source>
          <target state="translated">デフォルトの500ビューは &lt;code&gt;500.html&lt;/code&gt; テンプレートに変数を渡さず、追加のエラーの可能性を減らすために空の &lt;code&gt;Context&lt;/code&gt; レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="e0ec6d270d2168d34503a29c66d65f1c626916d8" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#message-storage-backends&quot;&gt;storage backend&lt;/a&gt; relies on &lt;a href=&quot;../../topics/http/sessions&quot;&gt;sessions&lt;/a&gt;. That&amp;rsquo;s why &lt;code&gt;SessionMiddleware&lt;/code&gt; must be enabled and appear before &lt;code&gt;MessageMiddleware&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;#message-storage-backends&quot;&gt;ストレージバックエンド&lt;/a&gt;は&lt;a href=&quot;../../topics/http/sessions&quot;&gt;セッションに&lt;/a&gt;依存しています。そのため、&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; &lt;code&gt;MessageMiddleware&lt;/code&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; を有効にしてMessageMiddlewareの前に表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb25ca2a947cbc95f00df63677130dcc43190eba" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;startapp&lt;/code&gt;&lt;/a&gt; template creates a &lt;code&gt;tests.py&lt;/code&gt; file in the new application. This might be fine if you only have a few tests, but as your test suite grows you&amp;rsquo;ll likely want to restructure it into a tests package so you can split your tests into different submodules such as &lt;code&gt;test_models.py&lt;/code&gt;, &lt;code&gt;test_views.py&lt;/code&gt;, &lt;code&gt;test_forms.py&lt;/code&gt;, etc. Feel free to pick whatever organizational scheme you like.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;startapp&lt;/code&gt; &lt;/a&gt;テンプレートは、新しいアプリケーションに &lt;code&gt;tests.py&lt;/code&gt; ファイルを作成します。テストが2、3しかない場合は問題ないかもしれませんが、テストスイートが大きくなるにつれて、テストパッケージに再構成して、テストを &lt;code&gt;test_models.py&lt;/code&gt; 、 &lt;code&gt;test_views.py&lt;/code&gt; 、 &lt;code&gt;test_forms.py&lt;/code&gt; などの異なるサブモジュールに分割できるようにする必要があります。.pyなど。好きな編成スキームを自由に選択してください。</target>
        </trans-unit>
        <trans-unit id="226a066fd07ef456b5e140695c147458d6199d9c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; created by &lt;code&gt;django-admin startproject&lt;/code&gt; already contains all the settings required to enable message functionality:</source>
          <target state="translated">&lt;code&gt;django-admin startproject&lt;/code&gt; によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; には、メッセージ機能を有効にするために必要なすべての設定がすでに含まれています。</target>
        </trans-unit>
        <trans-unit id="15f5a864456675c86842be47238862e39ece8708" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N = True&lt;/code&gt;&lt;/a&gt; for convenience. Note, however, that to enable number formatting with thousand separators it is necessary to set &lt;a href=&quot;../../ref/settings#std:setting-USE_THOUSAND_SEPARATOR&quot;&gt;&lt;code&gt;USE_THOUSAND_SEPARATOR
= True&lt;/code&gt;&lt;/a&gt; in your settings file. Alternatively, you could use &lt;a href=&quot;../../ref/contrib/humanize#std:templatefilter-intcomma&quot;&gt;&lt;code&gt;intcomma&lt;/code&gt;&lt;/a&gt; to format numbers in your template.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N = True&lt;/code&gt; &lt;/a&gt;が含まれています。ただし、桁区切り記号を使用した数値フォーマットを有効にするには、設定ファイルで&lt;a href=&quot;../../ref/settings#std:setting-USE_THOUSAND_SEPARATOR&quot;&gt; &lt;code&gt;USE_THOUSAND_SEPARATOR = True&lt;/code&gt; &lt;/a&gt;を設定する必要があることに注意してください。または、&lt;a href=&quot;../../ref/contrib/humanize#std:templatefilter-intcomma&quot;&gt; &lt;code&gt;intcomma&lt;/code&gt; &lt;/a&gt;を使用して、テンプレートの数値をフォーマットすることもできます。</target>
        </trans-unit>
        <trans-unit id="552172d0157c475ea333dec0a0e79e817476d4b4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = True&lt;/code&gt;&lt;/a&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt;が含まれています。</target>
        </trans-unit>
        <trans-unit id="37a44e663a84cee319df8611835c25940c7f1a11" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; creates a unique &lt;code&gt;SECRET_KEY&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルは、便宜のために一意の &lt;code&gt;SECRET_KEY&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="13e8676c1b362fc1c1df84307e6fc7596047aa40" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_I18N = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上 &lt;code&gt;USE_I18N = True&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="229eaf04c4eefe874751764332b6248ddc79504c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_L10N = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上 &lt;code&gt;USE_L10N = True&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="7b3298edc8e3436e091673198431668d349b4fe1" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; sets &lt;code&gt;'APP_DIRS': True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルは &lt;code&gt;'APP_DIRS': True&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="896ebcb2f4a8b98bbc238bbcf9ec87231d75feca" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; sets &lt;code&gt;DEBUG = True&lt;/code&gt; for convenience.</source>
          <target state="translated">デフォルト &lt;code&gt;settings.py&lt;/code&gt; で作成されたファイル&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;設定します &lt;code&gt;DEBUG = True&lt;/code&gt; 便宜上。</target>
        </trans-unit>
        <trans-unit id="37f3c2b38e6100940f63032627821effc91e9578" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_TZ = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上 &lt;code&gt;USE_TZ = True&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="38003d532df52d6f49eaaaa73790217a0dd7ee5b" translate="yes" xml:space="preserve">
          <source>The default HTML &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;widget&lt;/a&gt; to use when rendering a form field (e.g. &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">フォームフィールドをレンダリングするときに使用するデフォルトのHTML &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;ウィジェット&lt;/a&gt;（例： &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="850c5f08bbd2469484fab8a1bbbdda4342749d52" translate="yes" xml:space="preserve">
          <source>The default can&amp;rsquo;t be a mutable object (model instance, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable. For example, if you want to specify a default &lt;code&gt;dict&lt;/code&gt; for &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt;, use a function:</source>
          <target state="translated">そのオブジェクトの同じインスタンスへの参照がすべての新しいモデルインスタンスのデフォルト値として使用されるため、デフォルトを変更可能なオブジェクト（モデルインスタンス、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; など）にすることはできません。代わりに、必要なデフォルトを呼び出し可能オブジェクトでラップします。デフォルト指定する場合たとえば、 &lt;code&gt;dict&lt;/code&gt; のため&lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; を&lt;/a&gt;、関数を使用します：</target>
        </trans-unit>
        <trans-unit id="c1e6e73cc63d50d83c075b1833c565029c9c3c78" translate="yes" xml:space="preserve">
          <source>The default center latitude and longitude are &lt;code&gt;47&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;, respectively, which is a location in eastern France.</source>
          <target state="translated">デフォルトの中心緯度と経度はそれぞれ &lt;code&gt;47&lt;/code&gt; と &lt;code&gt;5&lt;/code&gt; で、これはフランス東部の場所です。</target>
        </trans-unit>
        <trans-unit id="6dc6b98a5ad4b8a3aea09cf719d80efb10089162" translate="yes" xml:space="preserve">
          <source>The default center latitude.</source>
          <target state="translated">デフォルトの中心緯度。</target>
        </trans-unit>
        <trans-unit id="1a8bca6211de0327a68eaeb1c2bdb33a548d22de" translate="yes" xml:space="preserve">
          <source>The default center longitude.</source>
          <target state="translated">デフォルトの中心経度。</target>
        </trans-unit>
        <trans-unit id="47b75fca13bb5c5601d76c121b6fe2672e66398e" translate="yes" xml:space="preserve">
          <source>The default configuration is purposefully kept to a minimum. If a template is rendered with a request (e.g. when using &lt;a href=&quot;http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;Jinja2&lt;/code&gt; backend adds the globals &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;csrf_input&lt;/code&gt;, and &lt;code&gt;csrf_token&lt;/code&gt; to the context. Apart from that, this backend doesn&amp;rsquo;t create a Django-flavored environment. It doesn&amp;rsquo;t know about Django filters and tags. In order to use Django-specific APIs, you must configure them into the environment.</source>
          <target state="translated">デフォルトの設定は意図的に最小限に抑えられています。テンプレートは（使用例要求でレンダリングされている場合は&lt;a href=&quot;http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;）、 &lt;code&gt;Jinja2&lt;/code&gt; ののバックエンドは、グローバルの追加 &lt;code&gt;request&lt;/code&gt; 、 &lt;code&gt;csrf_input&lt;/code&gt; 、および &lt;code&gt;csrf_token&lt;/code&gt; コンテキストにします。それとは別に、このバックエンドはDjango風味の環境を作成しません。Djangoのフィルターとタグについては認識していません。Django固有のAPIを使用するには、それらを環境に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="79b75456b9d762f8c2dce9b2ae3e8175ad3db27a" translate="yes" xml:space="preserve">
          <source>The default depends on the values of &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトは&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; の&lt;/a&gt;値に依存します。</target>
        </trans-unit>
        <trans-unit id="b30049a48d9bb824be0c46391448413b534fbed5" translate="yes" xml:space="preserve">
          <source>The default error views in Django should suffice for most Web applications, but can easily be overridden if you need any custom behavior. Specify the handlers as seen below in your URLconf (setting them anywhere else will have no effect).</source>
          <target state="translated">Django のデフォルトのエラービューは、ほとんどのウェブアプリケーションでは十分ですが、カスタムの動作が必要な場合は簡単にオーバーライドすることができます。URLconf で以下のようにハンドラを指定してください (これ以外の場所に設定しても何の効果もありません)。</target>
        </trans-unit>
        <trans-unit id="bc4edfe7e2ec1bdac8450e6279fde98b4ec2a703" translate="yes" xml:space="preserve">
          <source>The default field types, as described in the &lt;a href=&quot;#field-types&quot;&gt;Field types&lt;/a&gt; table above, are sensible defaults. If you have a &lt;code&gt;DateField&lt;/code&gt; in your model, chances are you&amp;rsquo;d want that to be represented as a &lt;code&gt;DateField&lt;/code&gt; in your form. But &lt;code&gt;ModelForm&lt;/code&gt; gives you the flexibility of changing the form field for a given model.</source>
          <target state="translated">上記の&lt;a href=&quot;#field-types&quot;&gt;フィールドタイプの&lt;/a&gt;表で説明したデフォルトのフィールドタイプは、実用的なデフォルトです。モデルに &lt;code&gt;DateField&lt;/code&gt; がある場合、それをフォームで &lt;code&gt;DateField&lt;/code&gt; として表現したい場合があります。ただし、 &lt;code&gt;ModelForm&lt;/code&gt; を使用すると、特定のモデルのフォームフィールドを柔軟に変更できます。</target>
        </trans-unit>
        <trans-unit id="c4dd4f7c52db0ae0c51192809cd83268e43fe87b" translate="yes" xml:space="preserve">
          <source>The default for &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;のデフォルトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="134d94e39ec3e6ff60738a50fa838e784c29d613" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is &lt;a href=&quot;../forms/widgets#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../forms/widgets#django.forms.NullBooleanSelect&quot;&gt;&lt;code&gt;NullBooleanSelect&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; の&lt;/a&gt;場合は&lt;a href=&quot;../forms/widgets#django.forms.NullBooleanSelect&quot;&gt; &lt;code&gt;NullBooleanSelect&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ea631760ea98aac69af2b8f8a5256ac828ece9ff" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.ClearableFileInput&quot;&gt;&lt;code&gt;ClearableFileInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.ClearableFileInput&quot;&gt; &lt;code&gt;ClearableFileInput&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="60986cff79bf6fc8ec851ab689e96aed367f661f" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.NumberInput&quot;&gt;&lt;code&gt;NumberInput&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;../forms/fields#django.forms.Field.localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; or &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットがある&lt;a href=&quot;../forms/widgets#django.forms.NumberInput&quot;&gt; &lt;code&gt;NumberInput&lt;/code&gt; &lt;/a&gt;とき&lt;a href=&quot;../forms/fields#django.forms.Field.localize&quot;&gt; &lt;code&gt;localize&lt;/code&gt; &lt;/a&gt;ある &lt;code&gt;False&lt;/code&gt; か&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;そう。</target>
        </trans-unit>
        <trans-unit id="e3c6af63e65166181cbe2139ee4e69e1190626df" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7a60df51dd0ba10657107a46e39c3e7110ad412a" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin adds a JavaScript calendar, and a shortcut for &amp;ldquo;Today&amp;rdquo;. Includes an additional &lt;code&gt;invalid_date&lt;/code&gt; error message key.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。管理者は、JavaScriptカレンダーと「今日」のショートカットを追加します。追加の &lt;code&gt;invalid_date&lt;/code&gt; エラーメッセージキーが含まれます。</target>
        </trans-unit>
        <trans-unit id="2d825bc2343fa63f1211b4871b61308789330e5f" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin adds some JavaScript shortcuts.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。管理者はいくつかのJavaScriptショートカットを追加します。</target>
        </trans-unit>
        <trans-unit id="bfc82f92434f002c14f9510457820cb464b1af98" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a single &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin uses two separate &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets with JavaScript shortcuts.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは、単一の&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。管理者は、JavaScriptショートカットを備えた2つの個別の&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;ウィジェットを使用します。</target>
        </trans-unit>
        <trans-unit id="e86b7b71b97eebfe17f27f711177ed2196a4552a" translate="yes" xml:space="preserve">
          <source>The default formatting to use for date fields on Django admin change-list pages &amp;ndash; and, possibly, by other parts of the system &amp;ndash; in cases when only the month and day are displayed.</source>
          <target state="translated">月と日のみが表示される場合に、Django管理変更リストページの日付フィールドに使用するデフォルトのフォーマット。</target>
        </trans-unit>
        <trans-unit id="f8c844f89ae57f68995ba3177973743e029db9ed" translate="yes" xml:space="preserve">
          <source>The default formatting to use for date fields on Django admin change-list pages &amp;ndash; and, possibly, by other parts of the system &amp;ndash; in cases when only the year and month are displayed.</source>
          <target state="translated">年と月のみが表示される場合に、Djangoの管理者変更リストページの日付フィールドに使用するデフォルトのフォーマット。</target>
        </trans-unit>
        <trans-unit id="c3abe881263ad300827e24f23977ffeaa8fc68f5" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying date fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">システムの任意の部分で日付フィールドを表示するために使用するデフォルトのフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定の形式が優先され、代わりに適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3b1b9178088242aa17794380e14db4ddb84579a8" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying datetime fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">システムの任意の部分で日時フィールドを表示するために使用するデフォルトのフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定の形式が優先され、代わりに適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3d9a445a36c674f2a2409abce5d97ada17179d05" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying time fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">システムの任意の部分で時間フィールドを表示するために使用するデフォルトのフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定の形式が優先され、代わりに適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="cf5da289a6cdbe86004e0c35417963f837bd6560" translate="yes" xml:space="preserve">
          <source>The default ignored pattern list, &lt;code&gt;['CVS', '.*', '*~']&lt;/code&gt;, can be customized in a more persistent way than providing the &lt;code&gt;--ignore&lt;/code&gt; command option at each &lt;code&gt;collectstatic&lt;/code&gt; invocation. Provide a custom &lt;a href=&quot;../applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class, override the &lt;code&gt;ignore_patterns&lt;/code&gt; attribute of this class and replace &lt;code&gt;'django.contrib.staticfiles'&lt;/code&gt; with that class path in your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">デフォルト無視パターンリスト、 &lt;code&gt;['CVS', '.*', '*~']&lt;/code&gt; 、提供するよりも、永続的な方法でカスタマイズすることができ &lt;code&gt;--ignore&lt;/code&gt; それぞれのコマンドのオプション &lt;code&gt;collectstatic&lt;/code&gt; 呼び出しを。カスタム&lt;a href=&quot;../applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;クラスを提供し、このクラスの &lt;code&gt;ignore_patterns&lt;/code&gt; 属性をオーバーライドし、&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定で &lt;code&gt;'django.contrib.staticfiles'&lt;/code&gt; django.contrib.staticfiles 」をそのクラスパスに置き換えます。</target>
        </trans-unit>
        <trans-unit id="751eb81534ea3e24ef129517bef3e624542317ac" translate="yes" xml:space="preserve">
          <source>The default implementation for &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; simply redirects to the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.success_url&quot;&gt;&lt;code&gt;success_url&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_valid&quot;&gt; &lt;code&gt;form_valid()&lt;/code&gt; &lt;/a&gt;のデフォルト実装は、単に&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.success_url&quot;&gt; &lt;code&gt;success_url&lt;/code&gt; に&lt;/a&gt;リダイレクトします。</target>
        </trans-unit>
        <trans-unit id="58945866a1fad1e48b9997b0f3764ac1a493332d" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt; returns a list of values corresponding to each &lt;code&gt;Widget&lt;/code&gt;. This is appropriate when using a &lt;code&gt;MultiWidget&lt;/code&gt; with a &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;. But since we want to use this widget with a &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, which takes a single value, we have overridden this method. The implementation here combines the data from the subwidgets into a string in the format that &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; expects.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt; &lt;code&gt;value_from_datadict()&lt;/code&gt; &lt;/a&gt;のデフォルト実装は、各 &lt;code&gt;Widget&lt;/code&gt; に対応する値のリストを返します。これは、&lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;MultiWidget&lt;/code&gt; を使用する場合に適しています。しかし、このウィジェットを単一の値を取る&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;で使用したいので、このメソッドをオーバーライドしました。ここでの実装は、サブウィジェットからのデータを、&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; が&lt;/a&gt;予期する形式の文字列に結合します。</target>
        </trans-unit>
        <trans-unit id="0e767237a959c092f8fb6cc3a53857fa0dfee41b" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; with a list of allowed methods in plain text.</source>
          <target state="translated">デフォルトの実装は、許可されたメソッドのリストをプレーンテキストで含む &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f02a775b38d24ae9223d3fc4cbfc7456c1b2afc8" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;True&lt;/code&gt; if the user has either the &amp;ldquo;change&amp;rdquo; or &amp;ldquo;view&amp;rdquo; permission.</source>
          <target state="translated">ユーザーが「変更」または「表示」権限を持っている場合、デフォルトの実装は &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c5230cab4e521089f99bf954f4c5e6041635c9ad" translate="yes" xml:space="preserve">
          <source>The default implementation searches the fields named in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;ModelAdmin.search_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトの実装では、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;ModelAdmin.search_fields&lt;/code&gt; で&lt;/a&gt;指定されたフィールドを検索します。</target>
        </trans-unit>
        <trans-unit id="f761f121dfbd8beab8561f6c419883ce3457de3c" translate="yes" xml:space="preserve">
          <source>The default implementation uses &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; as a starting string and performs expansion of &lt;code&gt;%&lt;/code&gt; named parameters in that string using the named groups captured in the URL.</source>
          <target state="translated">デフォルトの実装が使用するには、&lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;の先頭の文字列とを行い、拡張として、 &lt;code&gt;%&lt;/code&gt; URLでキャプチャという名前のグループを使用して、その文字列内の名前付きパラメータ。</target>
        </trans-unit>
        <trans-unit id="462cb49a1d90ebd40612f2de40befbba0909941d" translate="yes" xml:space="preserve">
          <source>The default implementation uses &lt;a href=&quot;https://docs.python.org/3/library/os.path.html#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt; operations. Override this method if that&amp;rsquo;s not appropriate for your storage.</source>
          <target state="translated">デフォルトの実装では&lt;a href=&quot;https://docs.python.org/3/library/os.path.html#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt;操作を使用します。ストレージに適さない場合は、このメソッドをオーバーライドしてください。</target>
        </trans-unit>
        <trans-unit id="8ead0d1970988ee507b431d44d59913400158913" translate="yes" xml:space="preserve">
          <source>The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a &lt;code&gt;GET&lt;/code&gt; will be delegated to &lt;code&gt;get()&lt;/code&gt;, a &lt;code&gt;POST&lt;/code&gt; to &lt;code&gt;post()&lt;/code&gt;, and so on.</source>
          <target state="translated">デフォルトの実装では、HTTPメソッドを検査し、HTTPメソッドと一致するメソッドへの委任を試みます。 &lt;code&gt;GET&lt;/code&gt; をするために委任されます &lt;code&gt;get()&lt;/code&gt; は、 &lt;code&gt;POST&lt;/code&gt; への &lt;code&gt;post()&lt;/code&gt; など。</target>
        </trans-unit>
        <trans-unit id="1e9ec0e76f3af8986236ea7172214f311eaea0a5" translate="yes" xml:space="preserve">
          <source>The default is 64*2&lt;sup&gt;10&lt;/sup&gt; bytes, or 64 KB.</source>
          <target state="translated">デフォルトは64 * 2 &lt;sup&gt;10&lt;/sup&gt;バイト、つまり64 KBです。</target>
        </trans-unit>
        <trans-unit id="7b37abbc68ff24b36fc22e95104b39de87e18b06" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c97f000fcb621b26c4ca76aed228db965cece3de" translate="yes" xml:space="preserve">
          <source>The default manager on a class is either the one chosen with &lt;a href=&quot;../../ref/models/options#django.db.models.Options.default_manager_name&quot;&gt;&lt;code&gt;Meta.default_manager_name&lt;/code&gt;&lt;/a&gt;, or the first manager declared on the model, or the default manager of the first parent model.</source>
          <target state="translated">クラスのデフォルトマネージャーは、&lt;a href=&quot;../../ref/models/options#django.db.models.Options.default_manager_name&quot;&gt; &lt;code&gt;Meta.default_manager_name&lt;/code&gt; &lt;/a&gt;で選択されたもの、モデルで宣言された最初のマネージャー、または最初の親モデルのデフォルトマネージャーのいずれかです。</target>
        </trans-unit>
        <trans-unit id="983962411dff41cd368f5b7bbf421e536db1acf1" translate="yes" xml:space="preserve">
          <source>The default map zoom is &lt;code&gt;12&lt;/code&gt;.</source>
          <target state="translated">デフォルトのマップズームは &lt;code&gt;12&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7d4e743387931bcb102440b718b5c19ee9c15f17" translate="yes" xml:space="preserve">
          <source>The default number of seconds to cache a page for the &lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;cache middleware&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;キャッシュミドルウェアの&lt;/a&gt;ページをキャッシュするデフォルトの秒数。</target>
        </trans-unit>
        <trans-unit id="e154f587263da05e8c0f5967db25f769f3bbd0c8" translate="yes" xml:space="preserve">
          <source>The default of &lt;code&gt;show_full_result_count=True&lt;/code&gt; generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows.</source>
          <target state="translated">デフォルトの &lt;code&gt;show_full_result_count=True&lt;/code&gt; は、テーブルに完全なカウントを実行するクエリを生成します。これは、テーブルに多数の行が含まれている場合、負荷が高くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="16c7754ef944bfa9abfbac63064b61db060480eb" translate="yes" xml:space="preserve">
          <source>The default ordering for the object, for use when obtaining lists of objects:</source>
          <target state="translated">オブジェクトのリストを取得する際に使用する、オブジェクトのデフォルトの順序。</target>
        </trans-unit>
        <trans-unit id="238163c4cb91e826d6996578b9872f96ffb9a648" translate="yes" xml:space="preserve">
          <source>The default password change views included with Django, &lt;a href=&quot;#django.contrib.auth.views.PasswordChangeView&quot;&gt;&lt;code&gt;PasswordChangeView&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;user_change_password&lt;/code&gt; view in the &lt;a href=&quot;index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; admin, update the session with the new password hash so that a user changing their own password won&amp;rsquo;t log themselves out. If you have a custom password change view and wish to have similar behavior, use the &lt;a href=&quot;#django.contrib.auth.update_session_auth_hash&quot;&gt;&lt;code&gt;update_session_auth_hash()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ジャンゴ、に含まれるデフォルトのパスワードの変更を望む&lt;a href=&quot;#django.contrib.auth.views.PasswordChangeView&quot;&gt; &lt;code&gt;PasswordChangeView&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;user_change_password&lt;/code&gt; の中ビュー&lt;a href=&quot;index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; の&lt;/a&gt;自分のパスワードを変更し、ユーザーが自分でログアウトしないように管理者は、新しいパスワードのハッシュとのセッションを更新します。カスタムパスワード変更ビューがあり、同様の動作が必要な場合は、&lt;a href=&quot;#django.contrib.auth.update_session_auth_hash&quot;&gt; &lt;code&gt;update_session_auth_hash()&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6f5fb4f1958be3d81c7def22a5a87c6baf5e9f41" translate="yes" xml:space="preserve">
          <source>The default password hasher is rather slow by design. If you&amp;rsquo;re authenticating many users in your tests, you may want to use a custom settings file and set the &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting to a faster hashing algorithm:</source>
          <target state="translated">デフォルトのパスワードハッシャーは、設計上、かなり低速です。テストで多くのユーザーを認証する場合は、カスタム設定ファイルを使用して、&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;設定をより高速なハッシュアルゴリズムに設定できます。</target>
        </trans-unit>
        <trans-unit id="da45cf62bc7d278f65e85a2fb4a8777e81153cc7" translate="yes" xml:space="preserve">
          <source>The default resampling algorithm is &lt;code&gt;NearestNeighbour&lt;/code&gt; but can be changed using the &lt;code&gt;resampling&lt;/code&gt; argument. The default maximum allowed error for resampling is 0.0 and can be changed using the &lt;code&gt;max_error&lt;/code&gt; argument. Consult the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt; documentation for detail on those arguments.</source>
          <target state="translated">デフォルトのリサンプリングアルゴリズムは &lt;code&gt;NearestNeighbour&lt;/code&gt; ですが、 &lt;code&gt;resampling&lt;/code&gt; 引数を使用して変更できます。リサンプリングのデフォルトの最大許容エラーは0.0で、 &lt;code&gt;max_error&lt;/code&gt; 引数を使用して変更できます。これらの引数の詳細については、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt; &lt;code&gt;warp&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7cb2f0905f6675e362944d6915dabba14930728d" translate="yes" xml:space="preserve">
          <source>The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances.</source>
          <target state="translated">外部キーと多対多のリレーションのデフォルトのシリアライズ戦略は、リレーション内のオブジェクトの主キーの値をシリアライズすることです。この方法はほとんどのオブジェクトでうまく動作しますが、状況によっては困難な場合があります。</target>
        </trans-unit>
        <trans-unit id="1a236475813a0e546786080257d84264c4b37364" translate="yes" xml:space="preserve">
          <source>The default spatial reference system for geometry fields is WGS84 (meaning the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRID&quot;&gt;SRID&lt;/a&gt; is 4326) &amp;ndash; in other words, the field coordinates are in longitude, latitude pairs in units of degrees. To use a different coordinate system, set the SRID of the geometry field with the &lt;code&gt;srid&lt;/code&gt; argument. Use an integer representing the coordinate system&amp;rsquo;s EPSG code.</source>
          <target state="translated">ジオメトリフィールドのデフォルトの空間参照系はWGS84（&lt;a href=&quot;https://en.wikipedia.org/wiki/SRID&quot;&gt;SRID&lt;/a&gt;が4326を意味する）です。つまり、フィールド座標は経度と緯度のペアであり、度単位です。別の座標系を使用するには、 &lt;code&gt;srid&lt;/code&gt; 引数を使用してジオメトリフィールドのSRIDを設定します。座標系のEPSGコードを表す整数を使用します。</target>
        </trans-unit>
        <trans-unit id="f2964cc9737c87c70cfb2ca809b7da585353cdd0" translate="yes" xml:space="preserve">
          <source>The default starting point for a frame is &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; which is the first row of the partition. The end point is always explicitly included in the SQL generated by the ORM and is by default &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt;. The default frame includes all rows from the partition to the last row in the set.</source>
          <target state="translated">フレームのデフォルトの開始点は、パーティションの最初の行である &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; です。エンドポイントは常にORMによって生成されたSQLに明示的に含まれ、デフォルトでは &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt; です。デフォルトのフレームには、パーティションからセットの最後の行までのすべての行が含まれます。</target>
        </trans-unit>
        <trans-unit id="e264add06e3e7aafd31761cac5cd121ec1ebd13f" translate="yes" xml:space="preserve">
          <source>The default test database names are created by prepending &lt;code&gt;test_&lt;/code&gt; to the value of each &lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;. When using SQLite, the tests will use an in-memory database by default (i.e., the database will be created in memory, bypassing the filesystem entirely!). The &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; offers a number of settings to configure your test database. For example, if you want to use a different database name, specify &lt;a href=&quot;../../ref/settings#std:setting-TEST_NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary for any given database in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトのテストデータベース名は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;の各&lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;の値に &lt;code&gt;test_&lt;/code&gt; を付加することによって作成されます。 SQLiteを使用する場合、テストはデフォルトでメモリ内データベースを使用します（つまり、データベースはメモリ内に作成され、ファイルシステムを完全にバイパスします！）。&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;辞書には、テストデータベースを構成するためのいくつかの設定があります。たとえば、別のデータベース名を使用する場合は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; の&lt;/a&gt;任意のデータベースの&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;辞書で&lt;a href=&quot;../../ref/settings#std:setting-TEST_NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="aa3fea3a2cb7fbdc787868fa2bf10548a411c3b7" translate="yes" xml:space="preserve">
          <source>The default timeout of &lt;code&gt;Watchman&lt;/code&gt; client is 5 seconds. You can change it by setting the &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;Watchman&lt;/code&gt; クライアントのデフォルトのタイムアウトは5秒です。 &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; 環境変数を設定することにより、これを変更できます。</target>
        </trans-unit>
        <trans-unit id="daa3eede9d94a26c4d7f936a6141140eeabde446" translate="yes" xml:space="preserve">
          <source>The default value for the X-Frame-Options header used by &lt;a href=&quot;middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt;&lt;code&gt;XFrameOptionsMiddleware&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;clickjacking&quot;&gt;clickjacking protection&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt; &lt;code&gt;XFrameOptionsMiddleware&lt;/code&gt; &lt;/a&gt;によって使用されるX-Frame-Optionsヘッダーのデフォルト値。&lt;a href=&quot;clickjacking&quot;&gt;クリックジャッキング保護の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3ad19aea01ce3b34c3122ad6567cba185a95789f" translate="yes" xml:space="preserve">
          <source>The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created.</source>
          <target state="translated">フィールドのデフォルト値。これは値か呼び出し可能なオブジェクトになります。呼び出し可能な場合は、新しいオブジェクトが作成されるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="59eac11be59113cb531c77947d459e7720915510" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;0&lt;/code&gt;, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a positive number of seconds. For unlimited persistent connections, set it to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は &lt;code&gt;0&lt;/code&gt; で、各リクエストの最後にデータベース接続を閉じるという履歴的な動作を保持します。永続的な接続を有効にするには、&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt;を正の秒数に設定します。無制限の持続接続の場合は、 &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b64688fe542c602b65e6e7331dbb04c49fa93838" translate="yes" xml:space="preserve">
          <source>The default value is used when new model instances are created and a value isn&amp;rsquo;t provided for the field. When the field is a primary key, the default is also used when the field is set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は、新しいモデルインスタンスが作成され、フィールドに値が指定されていない場合に使用されます。フィールドが主キーの場合、フィールドが[ &lt;code&gt;None&lt;/code&gt; 設定されているときにもデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="69ec1abd98185eb6970143dce73b5d12c517b2f4" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;BooleanField&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; when &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;Field.default&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t defined.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;Field.default&lt;/code&gt; &lt;/a&gt;が定義されていない場合、 &lt;code&gt;BooleanField&lt;/code&gt; のデフォルト値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="382174f1bda042f076ce960d46e0b453db42cf82" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;chunk_size&lt;/code&gt;, 2000, comes from &lt;a href=&quot;https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it&quot;&gt;a calculation on the psycopg mailing list&lt;/a&gt;:</source>
          <target state="translated">デフォルト値の &lt;code&gt;chunk_size&lt;/code&gt; 、2000は、から来ている&lt;a href=&quot;https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it&quot;&gt;psycopgメーリングリストの計算&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7ca1bec9400ccbbb70ceb6a6128928f0a3fbc600" translate="yes" xml:space="preserve">
          <source>The default value of the &lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt;&lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt;&lt;/a&gt; setting was changed from &lt;code&gt;SAMEORIGIN&lt;/code&gt; to &lt;code&gt;DENY&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt; &lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt; &lt;/a&gt;設定のデフォルト値が &lt;code&gt;SAMEORIGIN&lt;/code&gt; から &lt;code&gt;DENY&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="1209fb884dca8125f9f250e873dad008e7674864" translate="yes" xml:space="preserve">
          <source>The default values of these attributes are probably fine for you. If you determine that the password hash is too fast or too slow, you can tweak it as follows:</source>
          <target state="translated">これらの属性のデフォルト値は、おそらくあなたにとっては問題ありません。パスワードハッシュが速すぎたり遅すぎたりすると判断した場合は、以下のように微調整することができます。</target>
        </trans-unit>
        <trans-unit id="05656151b4b0dfce0903d02dc2521c2ec32bcb69" translate="yes" xml:space="preserve">
          <source>The default version number for cache keys generated by the Django server.</source>
          <target state="translated">Django サーバが生成するキャッシュキーのデフォルトのバージョン番号。</target>
        </trans-unit>
        <trans-unit id="78fb24ffc76652e03018f1dd8a29e38a6634044f" translate="yes" xml:space="preserve">
          <source>The default will find files stored in the &lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; setting (using &lt;code&gt;django.contrib.staticfiles.finders.FileSystemFinder&lt;/code&gt;) and in a &lt;code&gt;static&lt;/code&gt; subdirectory of each app (using &lt;code&gt;django.contrib.staticfiles.finders.AppDirectoriesFinder&lt;/code&gt;). If multiple files with the same name are present, the first file that is found will be used.</source>
          <target state="translated">デフォルトでは、ファイルに保存されているでしょう&lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt;（使用して設定 &lt;code&gt;django.contrib.staticfiles.finders.FileSystemFinder&lt;/code&gt; を）とで &lt;code&gt;static&lt;/code&gt; （使用して、各アプリのサブディレクトリ &lt;code&gt;django.contrib.staticfiles.finders.AppDirectoriesFinder&lt;/code&gt; を）。同じ名前のファイルが複数存在する場合は、最初に見つかったファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="a64c65d5d530fbd477a00f355fb236632c2638fb" translate="yes" xml:space="preserve">
          <source>The default zoom level to use. Defaults to 4.</source>
          <target state="translated">使用するデフォルトのズームレベル。デフォルトは 4 です。</target>
        </trans-unit>
        <trans-unit id="377992fed2cb82d9664407c3569240cb12925a70" translate="yes" xml:space="preserve">
          <source>The default, output 2D WKB.</source>
          <target state="translated">デフォルトでは、2DのWKBを出力します。</target>
        </trans-unit>
        <trans-unit id="1caf832ac267c397b03a907aedb144b4eaa0408e" translate="yes" xml:space="preserve">
          <source>The delete method, conveniently, is named &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;. This method immediately deletes the object and returns the number of objects deleted and a dictionary with the number of deletions per object type. Example:</source>
          <target state="translated">deleteメソッドの名前は、便利なことに&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;です。このメソッドは、オブジェクトをすぐに削除し、削除されたオブジェクトの数と、オブジェクトタイプごとの削除数を含む辞書を返します。例：</target>
        </trans-unit>
        <trans-unit id="beb30204d16e9db23c951318108a0ecb67ef44cb" translate="yes" xml:space="preserve">
          <source>The description can be of the form:</source>
          <target state="translated">説明文は形式にすることができます。</target>
        </trans-unit>
        <trans-unit id="0d7adcb559f5a853b9e8a2d1c69d315b8258e572" translate="yes" xml:space="preserve">
          <source>The detailed description of the modification. In the case of an edit, for example, the message contains a list of the edited fields. The Django admin site formats this content as a JSON structure, so that &lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt;&lt;code&gt;get_change_message()&lt;/code&gt;&lt;/a&gt; can recompose a message translated in the current user language. Custom code might set this as a plain string though. You are advised to use the &lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt;&lt;code&gt;get_change_message()&lt;/code&gt;&lt;/a&gt; method to retrieve this value instead of accessing it directly.</source>
          <target state="translated">変更の詳細な説明。たとえば、編集の場合、メッセージには編集されたフィールドのリストが含まれます。Django管理サイトは、このコンテンツをJSON構造としてフォーマットするため、&lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt; &lt;code&gt;get_change_message()&lt;/code&gt; &lt;/a&gt;は現在のユーザー言語に翻訳されたメッセージを再構成できます。カスタムコードはこれをプレーンな文字列として設定するかもしれません。この値に直接アクセスする代わりに、&lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt; &lt;code&gt;get_change_message()&lt;/code&gt; &lt;/a&gt;メソッドを使用してこの値を取得することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="85044ff6d8ec6add8fcd586dc1308888d31cb228" translate="yes" xml:space="preserve">
          <source>The development process</source>
          <target state="translated">開発プロセス</target>
        </trans-unit>
        <trans-unit id="37d50d4b3c28889858e66e29eb1b78542a0508a0" translate="yes" xml:space="preserve">
          <source>The development server</source>
          <target state="translated">開発サーバー</target>
        </trans-unit>
        <trans-unit id="cfd3b8bf265c1a3f4338f7de1430c957570dea3e" translate="yes" xml:space="preserve">
          <source>The development server automatically reloads Python code for each request as needed. You don&amp;rsquo;t need to restart the server for code changes to take effect. However, some actions like adding files don&amp;rsquo;t trigger a restart, so you&amp;rsquo;ll have to restart the server in these cases.</source>
          <target state="translated">開発サーバーは、必要に応じてリクエストごとにPythonコードを自動的に再読み込みします。コードの変更を有効にするためにサーバーを再起動する必要はありません。ただし、ファイルの追加などの一部のアクションでは再起動はトリガーされないため、このような場合はサーバーを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="69d40d41fd2c7119854b55dbde3aff7f9dc4a8a6" translate="yes" xml:space="preserve">
          <source>The development server automatically reloads Python code for each request, as needed. You don&amp;rsquo;t need to restart the server for code changes to take effect. However, some actions like adding files don&amp;rsquo;t trigger a restart, so you&amp;rsquo;ll have to restart the server in these cases.</source>
          <target state="translated">開発サーバーは、必要に応じて、リクエストごとにPythonコードを自動的に再読み込みします。コードの変更を有効にするためにサーバーを再起動する必要はありません。ただし、ファイルの追加などの一部のアクションでは再起動はトリガーされないため、このような場合はサーバーを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2e2c61a3bbc35c05fcee6ff83b301d727f6625e" translate="yes" xml:space="preserve">
          <source>The development server creates a new thread for each request it handles, negating the effect of persistent connections. Don&amp;rsquo;t enable them during development.</source>
          <target state="translated">開発サーバーは、処理するリクエストごとに新しいスレッドを作成し、永続的な接続の影響を無効にします。開発中は有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="65a8a705f321727b308c87b6df994fe9d93e089d" translate="yes" xml:space="preserve">
          <source>The difference between these two is merely the template used to render them.</source>
          <target state="translated">この2つの違いは、単にレンダリングに使用されるテンプレートに過ぎません。</target>
        </trans-unit>
        <trans-unit id="0af504d1f47d3dc1755fe98c77ffbaa71f21426a" translate="yes" xml:space="preserve">
          <source>The difference comes in &amp;ldquo;reverse&amp;rdquo; queries. The related model in a one-to-one relationship also has access to a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; object, but that &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; represents a single object, rather than a collection of objects:</source>
          <target state="translated">違いは、「リバース」クエリにあります。1対1の関係にある関連モデルも&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;オブジェクトにアクセスできますが、その&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;はオブジェクトのコレクションではなく単一のオブジェクトを表します。</target>
        </trans-unit>
        <trans-unit id="aeea901ff7490fa90553479447d7a51e8ae76e53" translate="yes" xml:space="preserve">
          <source>The difference here is that &lt;code&gt;do_current_time()&lt;/code&gt; grabs the format string and the variable name, passing both to &lt;code&gt;CurrentTimeNode3&lt;/code&gt;.</source>
          <target state="translated">ここでの違いは、 &lt;code&gt;do_current_time()&lt;/code&gt; がフォーマット文字列と変数名を取得し、両方を &lt;code&gt;CurrentTimeNode3&lt;/code&gt; に渡すことです。</target>
        </trans-unit>
        <trans-unit id="23e00239d3cd39f9bedf6ce6f53d58fb2c97897d" translate="yes" xml:space="preserve">
          <source>The different model field types (&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin.</source>
          <target state="translated">さまざまなモデルフィールドタイプ（&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;）は、適切なHTML入力ウィジェットに対応しています。各タイプのフィールドは、Django管理でそれ自体を表示する方法を認識しています。</target>
        </trans-unit>
        <trans-unit id="5a27e6d484146d270b4af242adf6d6837ab3c613" translate="yes" xml:space="preserve">
          <source>The directories listed in &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; have the highest precedence, with the ones appearing first having higher precedence than the ones appearing later.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; に&lt;/a&gt;リストされているディレクトリの優先順位が最も高く、最初に表示されるディレクトリが後に表示されるディレクトリよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="f7c245d673aa06edd0292f66414c88ff2123f718" translate="yes" xml:space="preserve">
          <source>The directory path should be absolute &amp;ndash; that is, it should start at the root of your filesystem. It doesn&amp;rsquo;t matter whether you put a slash at the end of the setting.</source>
          <target state="translated">ディレクトリパスは絶対パスにする必要があります。つまり、ファイルシステムのルートから開始する必要があります。設定の最後にスラッシュを付けるかどうかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="b0c013069880559208deaffa6c2dbdd225ff8eea" translate="yes" xml:space="preserve">
          <source>The directory to store data to (typically files larger than &lt;a href=&quot;#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE&quot;&gt;&lt;code&gt;FILE_UPLOAD_MAX_MEMORY_SIZE&lt;/code&gt;&lt;/a&gt;) temporarily while uploading files. If &lt;code&gt;None&lt;/code&gt;, Django will use the standard temporary directory for the operating system. For example, this will default to &lt;code&gt;/tmp&lt;/code&gt; on *nix-style operating systems.</source>
          <target state="translated">ファイルのアップロード中にデータを一時的に保存するディレクトリ（通常は&lt;a href=&quot;#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE&quot;&gt; &lt;code&gt;FILE_UPLOAD_MAX_MEMORY_SIZE&lt;/code&gt; &lt;/a&gt;より大きいファイル）。 &lt;code&gt;None&lt;/code&gt; の場合、Djangoはオペレーティングシステムの標準の一時ディレクトリを使用します。たとえば、* nixスタイルのオペレーティングシステムでは、これはデフォルトで &lt;code&gt;/tmp&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="efe6c9d9a26f4b893a41fdd2ad38e95aa63558d5" translate="yes" xml:space="preserve">
          <source>The directory used by the &lt;a href=&quot;../topics/email#topic-email-file-backend&quot;&gt;file email backend&lt;/a&gt; to store output files.</source>
          <target state="translated">出力ファイルを格納するために&lt;a href=&quot;../topics/email#topic-email-file-backend&quot;&gt;ファイル電子メールバックエンド&lt;/a&gt;によって使用されるディレクトリ。</target>
        </trans-unit>
        <trans-unit id="e16e14dcb79a4952dfb0ecb7dfccc157d53819e1" translate="yes" xml:space="preserve">
          <source>The distinction between &lt;a href=&quot;../../ref/forms/api#ref-forms-api-bound-unbound&quot;&gt;Bound and unbound forms&lt;/a&gt; is important:</source>
          <target state="translated">&lt;a href=&quot;../../ref/forms/api#ref-forms-api-bound-unbound&quot;&gt;バインドされたフォームとバインドされていないフォーム&lt;/a&gt;の違いは重要です。</target>
        </trans-unit>
        <trans-unit id="d0ba4fee1656fe57462feb575961e9a008b70b5c" translate="yes" xml:space="preserve">
          <source>The domain to be used when setting the CSRF cookie. This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection. It should be set to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain.</source>
          <target state="translated">CSRF Coo​​kieを設定するときに使用されるドメイン。これは、クロスサブドメインのリクエストを通常のクロスサイトリクエストの偽造防止から簡単に除外できるようにするのに役立ちます。 &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; などの文字列に設定して、あるサブドメインのフォームからのPOSTリクエストが別のサブドメインから提供されるビューで受け入れられるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="f6fa4e11ee0c7e669d33883c4844543c8422b769" translate="yes" xml:space="preserve">
          <source>The domain to use for session cookies. Set this to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; for cross-domain cookies, or use &lt;code&gt;None&lt;/code&gt; for a standard domain cookie.</source>
          <target state="translated">セッションCookieに使用するドメイン。クロスドメインCookieの場合は &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; などの文字列に設定し、標準ドメインCookieの場合は &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="68346906ed672a3e709eb8f536ba1f940cc1a0e8" translate="yes" xml:space="preserve">
          <source>The domain to use for the language cookie. Set this to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; for cross-domain cookies, or use &lt;code&gt;None&lt;/code&gt; for a standard domain cookie.</source>
          <target state="translated">言語Cookieに使用するドメイン。クロスドメインCookieの場合は &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; などの文字列に設定し、標準ドメインCookieの場合は &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5c99e78398396ac3dd4367988dfe7298ad65d032" translate="yes" xml:space="preserve">
          <source>The dotted paths of logger names define a hierarchy. The &lt;code&gt;project.interesting&lt;/code&gt; logger is considered to be a parent of the &lt;code&gt;project.interesting.stuff&lt;/code&gt; logger; the &lt;code&gt;project&lt;/code&gt; logger is a parent of the &lt;code&gt;project.interesting&lt;/code&gt; logger.</source>
          <target state="translated">ロガー名の点線のパスは階層を定義します。 &lt;code&gt;project.interesting&lt;/code&gt; ロガーは親のように考えられている &lt;code&gt;project.interesting.stuff&lt;/code&gt; のロガー。 &lt;code&gt;project&lt;/code&gt; ロガーはの親である &lt;code&gt;project.interesting&lt;/code&gt; のロガー。</target>
        </trans-unit>
        <trans-unit id="5e13710149427fbf66cfeca797b8aff6be0c4f4b" translate="yes" xml:space="preserve">
          <source>The dynamic link will not appear if the number of currently displayed forms exceeds &lt;code&gt;max_num&lt;/code&gt;, or if the user does not have JavaScript enabled.</source>
          <target state="translated">現在表示されているフォームの数が &lt;code&gt;max_num&lt;/code&gt; を超えている場合、またはユーザーがJavaScriptを有効にしていない場合、ダイナミックリンクは表示されません。</target>
        </trans-unit>
        <trans-unit id="0d55a3c97d629d07660c6f636bfc19000aac89ef" translate="yes" xml:space="preserve">
          <source>The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.</source>
          <target state="translated">この問題を解決する最も簡単な方法は、ビューコードの中でデータが表示方法に応じて順序付けされていることを確認することです。</target>
        </trans-unit>
        <trans-unit id="aefa18e20124a245a37ca6a166c5d0fa5833b82b" translate="yes" xml:space="preserve">
          <source>The easiest way to configure email for local development is to use the &lt;a href=&quot;#topic-email-console-backend&quot;&gt;console&lt;/a&gt; email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail.</source>
          <target state="translated">ローカル開発用に電子メールを構成する最も簡単な方法は、&lt;a href=&quot;#topic-email-console-backend&quot;&gt;コンソールの&lt;/a&gt;電子メールバックエンドを使用することです。このバックエンドはすべてのメールをstdoutにリダイレクトし、メールの内容を検査できるようにします。</target>
        </trans-unit>
        <trans-unit id="b18bdad619333227fb015706761f59c6e7dce1e9" translate="yes" xml:space="preserve">
          <source>The easiest way to construct a compliant custom user model is to inherit from &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; provides the core implementation of a user model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:</source>
          <target state="translated">準拠したカスタムユーザーモデルを構築する最も簡単な方法は、&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;から継承することです。&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;は、ハッシュされたパスワードやトークン化されたパスワードのリセットなど、ユーザーモデルのコア実装を提供します。次に、いくつかの主要な実装の詳細を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="102bc6398625e356db3cd3d1071a8edf4afe2996" translate="yes" xml:space="preserve">
          <source>The easiest way to define assets is as a static definition. Using this method, the declaration is an inner &lt;code&gt;Media&lt;/code&gt; class. The properties of the inner class define the requirements.</source>
          <target state="translated">アセットを定義する最も簡単な方法は、静的な定義です。このメソッドを使用すると、宣言は内部 &lt;code&gt;Media&lt;/code&gt; クラスになります。内部クラスのプロパティは要件を定義します。</target>
        </trans-unit>
        <trans-unit id="db27be8a72981483eaa7cc9cc5a678cbb34ecd8b" translate="yes" xml:space="preserve">
          <source>The easiest way to explain actions is by example, so let&amp;rsquo;s dive in.</source>
          <target state="translated">アクションを説明する最も簡単な方法は例ですので、詳しく見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="bbbcd95919fd1ecf2e067b0fc6797a2e498acd03" translate="yes" xml:space="preserve">
          <source>The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain &amp;lsquo;sticky&amp;rsquo; to their original database (i.e., an object retrieved from the &lt;code&gt;foo&lt;/code&gt; database will be saved on the same database). The default routing scheme ensures that if a database isn&amp;rsquo;t specified, all queries fall back to the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">複数のデータベースを使用する最も簡単な方法は、データベースルーティングスキームを設定することです。デフォルトのルーティングスキームは、オブジェクトが元のデータベースに対して「スティッキー」であることを保証します（つまり、 &lt;code&gt;foo&lt;/code&gt; データベースから取得されたオブジェクトは同じデータベースに保存されます）。デフォルトのルーティング方式では、データベースが指定されていない場合、すべてのクエリが &lt;code&gt;default&lt;/code&gt; データベースにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="5dc09f982934c220e0648dd7dc1424777a9b07ff" translate="yes" xml:space="preserve">
          <source>The email address that error messages come from, such as those sent to &lt;a href=&quot;#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージの送信元のメールアドレス（&lt;a href=&quot;#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; に&lt;/a&gt;送信されたメールアドレスなど）。</target>
        </trans-unit>
        <trans-unit id="b2aa2cff626dddc91132ca31ab8a805481ff856c" translate="yes" xml:space="preserve">
          <source>The email backend class has the following methods:</source>
          <target state="translated">メールバックエンドクラスには以下のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="4d71c5b436fb244d32f220ecce35712f91163ed6" translate="yes" xml:space="preserve">
          <source>The equality method is defined such that instances with the same primary key value and the same concrete class are considered equal, except that instances with a primary key value of &lt;code&gt;None&lt;/code&gt; aren&amp;rsquo;t equal to anything except themselves. For proxy models, concrete class is defined as the model&amp;rsquo;s first non-proxy parent; for all other models it&amp;rsquo;s simply the model&amp;rsquo;s class.</source>
          <target state="translated">等価メソッドは、主キーの値が &lt;code&gt;None&lt;/code&gt; のインスタンスはそれ以外のインスタンスと等しくないことを除いて、同じ主キーの値と同じ具象クラスを持つインスタンスは等しいと見なされるように定義されています。プロキシモデルの場合、具象クラスはモデルの最初の非プロキシ親として定義されます。他のすべてのモデルでは、それは単にモデルのクラスです。</target>
        </trans-unit>
        <trans-unit id="9ebf4117d2b8a093f5d8b0d1ee0394b967c0414e" translate="yes" xml:space="preserve">
          <source>The equivalent calculation in Python is:</source>
          <target state="translated">Pythonでの等価計算は</target>
        </trans-unit>
        <trans-unit id="5efbfe2be254c3accd765a74009d40714d479343" translate="yes" xml:space="preserve">
          <source>The error code used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;invalid&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーコード。デフォルトは &lt;code&gt;&quot;invalid&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1b5adb27a8996cdfa0262e0146f124cdf9dba05a" translate="yes" xml:space="preserve">
          <source>The error code used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;null_characters_not_allowed&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーコード。デフォルトは &lt;code&gt;&quot;null_characters_not_allowed&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="24202a6a3b9947bb61029f3e19e5678ab0a3296e" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Enter a valid email address&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーメッセージ。デフォルトは &lt;code&gt;&quot;Enter a valid email address&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="79cc7e5b6a815e9ec647851b99499ab73ff67c57" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Enter a valid value&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーメッセージ。デフォルトは &lt;code&gt;&quot;Enter a valid value&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="057fab28e3430ed0f7b4a055703ab67be3eb226b" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Null characters are not allowed.&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーメッセージ。デフォルトは &lt;code&gt;&quot;Null characters are not allowed.&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61a770a7f28e3325a45dcd70e8e1fa45b0d96d7e" translate="yes" xml:space="preserve">
          <source>The error page, however, is not very friendly, so you may want to provide your own view for handling this condition. To do this, set the &lt;a href=&quot;settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt;&lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ただし、エラーページはあまり友好的ではないため、この状態を処理するための独自のビューを提供することができます。これを行うには、&lt;a href=&quot;settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt; &lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt; &lt;/a&gt;設定を設定します。</target>
        </trans-unit>
        <trans-unit id="8d65d9525c27d19f320d6dc01f0885b38569c7fc" translate="yes" xml:space="preserve">
          <source>The event is fired using the &lt;a href=&quot;index#contrib-admin-jquery&quot;&gt;django.jQuery namespace&lt;/a&gt;.</source>
          <target state="translated">イベントは&lt;a href=&quot;index#contrib-admin-jquery&quot;&gt;django.jQuery名前空間&lt;/a&gt;を使用して発生します。</target>
        </trans-unit>
        <trans-unit id="1b539ba0434b08941170f2cd1f818a49da908b66" translate="yes" xml:space="preserve">
          <source>The exact URLs that will match are slightly more constrained. For example, the year 10000 will no longer match since the year integers are constrained to be exactly four digits long.</source>
          <target state="translated">一致する正確な URL は少し制約があります。例えば、年の整数は正確に4桁の長さに制限されているため、10000年はもはや一致しません。</target>
        </trans-unit>
        <trans-unit id="b4dbb4fcb65cef76c61031d37fb2287e26d8f480" translate="yes" xml:space="preserve">
          <source>The exact output will vary depending on the database you are using. The example above is generated for PostgreSQL.</source>
          <target state="translated">正確な出力は、使用しているデータベースによって異なります。上の例はPostgreSQL用に生成されています。</target>
        </trans-unit>
        <trans-unit id="6244d10392df2eaaeb16d3a53c4aefd2551507e9" translate="yes" xml:space="preserve">
          <source>The exact type of the return value depends on the backend that loaded the template. Each backend has its own &lt;code&gt;Template&lt;/code&gt; class.</source>
          <target state="translated">戻り値の正確なタイプは、テンプレートをロードしたバックエンドによって異なります。各バックエンドには独自の &lt;code&gt;Template&lt;/code&gt; クラスがあります。</target>
        </trans-unit>
        <trans-unit id="d258cbef311d29cf54b7972437f615ede5dab5c9" translate="yes" xml:space="preserve">
          <source>The example above is merely illustrative.</source>
          <target state="translated">上記の例はあくまでも例示に過ぎません。</target>
        </trans-unit>
        <trans-unit id="09ae48bd2b690b219baf1e4df51329cbdd48516f" translate="yes" xml:space="preserve">
          <source>The example above shows a full &lt;code&gt;from_db()&lt;/code&gt; implementation to clarify how that is done. In this case it would of course be possible to use &lt;code&gt;super()&lt;/code&gt; call in the &lt;code&gt;from_db()&lt;/code&gt; method.</source>
          <target state="translated">上記の例は、それがどのように行われるかを明確にするために、完全な &lt;code&gt;from_db()&lt;/code&gt; 実装を示しています。この場合はもちろん、 &lt;code&gt;from_db()&lt;/code&gt; メソッドで &lt;code&gt;super()&lt;/code&gt; 呼び出しを使用することができます。</target>
        </trans-unit>
        <trans-unit id="01d04d9726b7a687dfcd3e1f1be1c2f02aa93f43" translate="yes" xml:space="preserve">
          <source>The example above shows the &lt;code&gt;make_published&lt;/code&gt; action defined as a function. That&amp;rsquo;s perfectly fine, but it&amp;rsquo;s not perfect from a code design point of view: since the action is tightly coupled to the &lt;code&gt;Article&lt;/code&gt; object, it makes sense to hook the action to the &lt;code&gt;ArticleAdmin&lt;/code&gt; object itself.</source>
          <target state="translated">上記の例は、関数として定義された &lt;code&gt;make_published&lt;/code&gt; アクションを示しています。これは完全に問題ありませんが、コード設計の観点からは完全ではありません。アクションは &lt;code&gt;Article&lt;/code&gt; オブジェクトに密結合されているため、 &lt;code&gt;ArticleAdmin&lt;/code&gt; オブジェクト自体にアクションをフックすることは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="70fd6fd83f7a6415e49b18c6e810e778afba736b" translate="yes" xml:space="preserve">
          <source>The example below shows a custom database-backed session engine that includes an additional database column to store an account ID (thus providing an option to query the database for all active sessions for an account):</source>
          <target state="translated">以下の例は、アカウントIDを格納するための追加のデータベースカラムを含む、データベースをバックにしたカスタムセッションエンジンを示しています(これにより、アカウントのすべてのアクティブなセッションについてデータベースにクエリを実行するオプションが提供されます)。</target>
        </trans-unit>
        <trans-unit id="70d2d5dcaec3c018f486ad3a35bf450d09973557" translate="yes" xml:space="preserve">
          <source>The example output is from the cities data source, loaded above, which evidently contains one layer, called &lt;code&gt;&quot;cities&quot;&lt;/code&gt;, which contains three point features. For simplicity, the examples below assume that you&amp;rsquo;ve stored that layer in the variable &lt;code&gt;layer&lt;/code&gt;:</source>
          <target state="translated">出力例は、上記でロードされた都市データソースからのもので、明らかに3つのポイントフィーチャを含む &lt;code&gt;&quot;cities&quot;&lt;/code&gt; と呼ばれる1つのレイヤーが含まれています。簡単にするために、以下の例では、そのレイヤーを変数 &lt;code&gt;layer&lt;/code&gt; 格納していると想定しています。</target>
        </trans-unit>
        <trans-unit id="6691f770da4c54ad86e364f335c9b091bbf02a5d" translate="yes" xml:space="preserve">
          <source>The examples below assume you are using function-based views. If you are working with class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">以下の例では、関数ベースのビューを使用していると想定しています。クラスベースのビューを使用している場合は、「&lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;クラスベースのビューの装飾&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3acd75e8ac886e7361e65f7b3411b9fa504b1b4" translate="yes" xml:space="preserve">
          <source>The examples below show the SQL equivalent for the lookups in the different types of raster support. The same pattern applies to all spatial lookups.</source>
          <target state="translated">以下の例では、ラスタサポートの異なるタイプのルックアップのSQLと同等のものを示しています。すべての空間ルックアップに同じパターンが適用されます。</target>
        </trans-unit>
        <trans-unit id="0381bb676822bd2c1fc32593d3eafed41c0ed3d5" translate="yes" xml:space="preserve">
          <source>The examples in the previous section have hard-coded the fact that the view is cached, because &lt;code&gt;cache_page&lt;/code&gt; alters the &lt;code&gt;my_view&lt;/code&gt; function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves.</source>
          <target state="translated">前のセクションの例では、 &lt;code&gt;my_view&lt;/code&gt; 関数を &lt;code&gt;cache_page&lt;/code&gt; 変更するため、ビューがキャッシュされるという事実をハードコーディングしています。このアプローチは、ビューをキャッシュシステムに結合しますが、いくつかの理由で理想的ではありません。たとえば、キャッシュのない別のサイトでビュー関数を再利用したり、キャッシュせずにビューを使用したいユーザーにビューを配布したりできます。これらの問題の解決策は、ビュー関数自体の横ではなく、URLconfでビューごとのキャッシュを指定することです。</target>
        </trans-unit>
        <trans-unit id="dc504c1e75f70f01937775c1721634f5639b416b" translate="yes" xml:space="preserve">
          <source>The examples in this section are designed to show how to force Django to execute a subquery. In some cases it may be possible to write an equivalent queryset that performs the same task more clearly or efficiently.</source>
          <target state="translated">この節の例は、Django にサブクエリを強制的に実行させる方法を示すためのものです。場合によっては、同じタスクをより明確に、あるいは効率的に実行する同等のクエリーセットを書くことができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e3ba78a8e40dda280647c05bf08b8f045ba77f2b" translate="yes" xml:space="preserve">
          <source>The examples in this section import the &lt;code&gt;SessionStore&lt;/code&gt; object directly from the &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; backend. In your own code, you should consider importing &lt;code&gt;SessionStore&lt;/code&gt; from the session engine designated by &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt;&lt;/a&gt;, as below:</source>
          <target state="translated">このセクションの例では、 &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; バックエンドから直接 &lt;code&gt;SessionStore&lt;/code&gt; オブジェクトをインポートします。独自のコードでは、以下のように、&lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt; &lt;code&gt;SESSION_ENGINE&lt;/code&gt; &lt;/a&gt;で指定されたセッションエンジンから &lt;code&gt;SessionStore&lt;/code&gt; をインポートすることを検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="e35dffac0488c2561c931a83c6fe1cf1d8a50419" translate="yes" xml:space="preserve">
          <source>The exception raised when an error occurs in a call to the underlying &lt;code&gt;geoip2&lt;/code&gt; library.</source>
          <target state="translated">基礎となる &lt;code&gt;geoip2&lt;/code&gt; ライブラリの呼び出しでエラーが発生したときに発生する例外。</target>
        </trans-unit>
        <trans-unit id="cda3c2363ac6d38861a1a8d767657d0f57cada68" translate="yes" xml:space="preserve">
          <source>The extension of class-based views isn&amp;rsquo;t limited to using mixins. You can also use decorators. Since class-based views aren&amp;rsquo;t functions, decorating them works differently depending on if you&amp;rsquo;re using &lt;code&gt;as_view()&lt;/code&gt; or creating a subclass.</source>
          <target state="translated">クラスベースのビューの拡張は、ミックスインの使用に限定されません。デコレータを使用することもできます。クラスベースのビューは関数ではないため、 &lt;code&gt;as_view()&lt;/code&gt; を使用しているか、サブクラスを作成しているかによって、装飾の動作は異なります。</target>
        </trans-unit>
        <trans-unit id="f0757fbf21f596c81165c37d3764eb4cbc8188fc" translate="yes" xml:space="preserve">
          <source>The failure messages given by most of these assertion methods can be customized with the &lt;code&gt;msg_prefix&lt;/code&gt; argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of a failure in your test suite.</source>
          <target state="translated">これらのアサーションメソッドのほとんどによって提供される失敗メッセージは、 &lt;code&gt;msg_prefix&lt;/code&gt; 引数を使用してカスタマイズできます。この文字列は、アサーションによって生成された失敗メッセージの前に付けられます。これにより、テストスイートの場所と失敗の原因を特定するのに役立つ詳細情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="227e5834572c4e194e4fc54218042f6fd22390e4" translate="yes" xml:space="preserve">
          <source>The fastest, most efficient type of cache supported natively by Django, &lt;a href=&quot;https://memcached.org/&quot;&gt;Memcached&lt;/a&gt; is an entirely memory-based cache server, originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive. It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance.</source>
          <target state="translated">&lt;a href=&quot;https://memcached.org/&quot;&gt;Memcached&lt;/a&gt;は、Djangoによってネイティブでサポートされている最速で最も効率的なタイプのキャッシュです。完全にメモリベースのキャッシュサーバーで、もともとはLiveJournal.comで高負荷を処理するために開発され、その後Danga Interactiveによってオープンソース化されました。FacebookやWikipediaなどのサイトで使用され、データベースアクセスを減らし、サイトのパフォーマンスを劇的に向上させます。</target>
        </trans-unit>
        <trans-unit id="b74b1508edbbb23e6a3000370c6cd096da1fa665" translate="yes" xml:space="preserve">
          <source>The field allows choosing from files inside a certain directory. It takes five extra arguments; only &lt;code&gt;path&lt;/code&gt; is required:</source>
          <target state="translated">このフィールドでは、特定のディレクトリ内のファイルから選択できます。5つの追加の引数が必要です。 &lt;code&gt;path&lt;/code&gt; のみが必要です：</target>
        </trans-unit>
        <trans-unit id="8261a27fdaafb3905c5f94eeccc1746f11d92091" translate="yes" xml:space="preserve">
          <source>The field does not support escaping of the delimiter, so be careful in cases where the delimiter is a valid character in the underlying field. The delimiter does not need to be only one character.</source>
          <target state="translated">このフィールドはデリミタのエスケープをサポートしていないので、デリミタがその下のフィールドで有効な文字である場合には注意が必要です。区切り文字は1文字だけである必要はありません。</target>
        </trans-unit>
        <trans-unit id="4541fd11f662c194c72fa461738a7803380d24f9" translate="yes" xml:space="preserve">
          <source>The field is only automatically updated when calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;. The field isn&amp;rsquo;t updated when making updates to other fields in other ways such as &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;QuerySet.update()&lt;/code&gt;&lt;/a&gt;, though you can specify a custom value for the field in an update like that.</source>
          <target state="translated">このフィールドは、&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; を&lt;/a&gt;呼び出したときにのみ自動的に更新されます。&lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;QuerySet.update()&lt;/code&gt; &lt;/a&gt;などの他の方法で他のフィールドを更新する場合、フィールドは更新されませんが、そのような更新でフィールドのカスタム値を指定できます。</target>
        </trans-unit>
        <trans-unit id="38b4adec7d5052603bed698a4b8c5e5c3538d594" translate="yes" xml:space="preserve">
          <source>The field lookups that equate to &lt;code&gt;LIKE&lt;/code&gt; SQL statements (&lt;code&gt;iexact&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;icontains&lt;/code&gt;, &lt;code&gt;startswith&lt;/code&gt;, &lt;code&gt;istartswith&lt;/code&gt;, &lt;code&gt;endswith&lt;/code&gt; and &lt;code&gt;iendswith&lt;/code&gt;) will automatically escape the two special characters used in &lt;code&gt;LIKE&lt;/code&gt; statements &amp;ndash; the percent sign and the underscore. (In a &lt;code&gt;LIKE&lt;/code&gt; statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)</source>
          <target state="translated">&lt;code&gt;LIKE&lt;/code&gt; SQLステートメントと同等のフィールド検索（ &lt;code&gt;iexact&lt;/code&gt; 、 &lt;code&gt;contains&lt;/code&gt; 、 &lt;code&gt;icontains&lt;/code&gt; 、 &lt;code&gt;startswith&lt;/code&gt; 、 &lt;code&gt;istartswith&lt;/code&gt; 、 &lt;code&gt;endswith&lt;/code&gt; 、および &lt;code&gt;iendswith&lt;/code&gt; ）は、 &lt;code&gt;LIKE&lt;/code&gt; ステートメントで使用される2つの特殊文字（パーセント記号とアンダースコア）を自動的にエスケープします。 （ &lt;code&gt;LIKE&lt;/code&gt; ステートメントでは、パーセント記号は複数文字のワイルドカードを示し、下線は単一文字のワイルドカードを示します。）</target>
        </trans-unit>
        <trans-unit id="1e41ee0c4c4e7718ea727f9a22cab41c7b40064f" translate="yes" xml:space="preserve">
          <source>The field names in &lt;code&gt;list_display&lt;/code&gt; will also appear as CSS classes in the HTML output, in the form of &lt;code&gt;column-&amp;lt;field_name&amp;gt;&lt;/code&gt; on each &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element. This can be used to set column widths in a CSS file for example.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; のフィールド名は、各 &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;column-&amp;lt;field_name&amp;gt;&lt;/code&gt; の形式で、HTML出力のCSSクラスとしても表示されます。これは、たとえばCSSファイルで列幅を設定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d716dce5bada681604a2c53c84250caf27b95a35" translate="yes" xml:space="preserve">
          <source>The field on the current object instance that can be used to determine the name of a candidate template. If either &lt;code&gt;template_name_field&lt;/code&gt; itself or the value of the &lt;code&gt;template_name_field&lt;/code&gt; on the current object instance is &lt;code&gt;None&lt;/code&gt;, the object will not be used for a candidate template name.</source>
          <target state="translated">候補テンプレートの名前を決定するために使用できる現在のオブジェクトインスタンスのフィールド。いずれかの場合 &lt;code&gt;template_name_field&lt;/code&gt; 自体またはの値 &lt;code&gt;template_name_field&lt;/code&gt; 現在のオブジェクトのインスタンスにはありません &lt;code&gt;None&lt;/code&gt; 、対象物は、候補テンプレート名に使用されることはありません。</target>
        </trans-unit>
        <trans-unit id="630d8b8702ce27d6f8645d1b86436f4a7464e445" translate="yes" xml:space="preserve">
          <source>The field on the related object that the relation is to. By default, Django uses the primary key of the related object. If you reference a different field, that field must have &lt;code&gt;unique=True&lt;/code&gt;.</source>
          <target state="translated">関係が関連する関連オブジェクトのフィールド。デフォルトでは、Djangoは関連オブジェクトの主キーを使用します。別のフィールドを参照する場合、そのフィールドには &lt;code&gt;unique=True&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="9e76cec744d379f4dcccb2ad310314d26fd8d60e" translate="yes" xml:space="preserve">
          <source>The field specified in a lookup has to be the name of a model field. There&amp;rsquo;s one exception though, in case of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; you can specify the field name suffixed with &lt;code&gt;_id&lt;/code&gt;. In this case, the value parameter is expected to contain the raw value of the foreign model&amp;rsquo;s primary key. For example:</source>
          <target state="translated">ルックアップで指定されるフィールドは、モデルフィールドの名前である必要があります。ただし、例外が1つあります&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;場合は、 &lt;code&gt;_id&lt;/code&gt; のサフィックスが付いたフィールド名を指定できます。この場合、valueパラメーターには、外部モデルの主キーの未加工の値が含まれていると想定されます。例えば：</target>
        </trans-unit>
        <trans-unit id="4175f90a0443952f19ac0063efac9cb36b524f33" translate="yes" xml:space="preserve">
          <source>The field&amp;rsquo;s label wrapped in the appropriate HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag. This includes the form&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. For example, the default &lt;code&gt;label_suffix&lt;/code&gt; is a colon:</source>
          <target state="translated">適切なHTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグでラップされたフィールドのラベル。これには、フォームの&lt;a href=&quot;../../ref/forms/api#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; が&lt;/a&gt;含まれます。たとえば、デフォルトの &lt;code&gt;label_suffix&lt;/code&gt; はコロンです。</target>
        </trans-unit>
        <trans-unit id="448005ac819f6d743923e91d627be3453197eb30" translate="yes" xml:space="preserve">
          <source>The field&amp;rsquo;s maximum allowable length is defined by &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;. This does two things. It puts a &lt;code&gt;maxlength=&quot;100&quot;&lt;/code&gt; on the HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; (so the browser should prevent the user from entering more than that number of characters in the first place). It also means that when Django receives the form back from the browser, it will validate the length of the data.</source>
          <target state="translated">フィールドの最大許容長は&lt;a href=&quot;../../ref/forms/fields#django.forms.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;によって定義されます。これは2つのことを行います。これは、HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に &lt;code&gt;maxlength=&quot;100&quot;&lt;/code&gt; を配置します（そのため、ブラウザーは、ユーザーがそもそもその数を超える文字を入力できないようにする必要があります）。また、Djangoがブラウザからフォームを受信すると、データの長さを検証します。</target>
        </trans-unit>
        <trans-unit id="cf3875fec24fc1333090caee45483067dc8d3dbb" translate="yes" xml:space="preserve">
          <source>The field-specific output honors the form object&amp;rsquo;s &lt;code&gt;auto_id&lt;/code&gt; setting:</source>
          <target state="translated">フィールド固有の出力は、フォームオブジェクトの &lt;code&gt;auto_id&lt;/code&gt; 設定に従います。</target>
        </trans-unit>
        <trans-unit id="ddb5416909036f134c988459a65406a38acce804" translate="yes" xml:space="preserve">
          <source>The fields to include can be specified using the &lt;code&gt;fields&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; keyword arguments, or the corresponding attributes on the &lt;code&gt;ModelForm&lt;/code&gt; inner &lt;code&gt;Meta&lt;/code&gt; class. Please see the &lt;code&gt;ModelForm&lt;/code&gt;&lt;a href=&quot;#modelforms-selecting-fields&quot;&gt;Selecting the fields to use&lt;/a&gt; documentation.</source>
          <target state="translated">含めるフィールドを使用して指定することができます &lt;code&gt;fields&lt;/code&gt; し、 &lt;code&gt;exclude&lt;/code&gt; キーワード引数、または上の対応する属性 &lt;code&gt;ModelForm&lt;/code&gt; 内部 &lt;code&gt;Meta&lt;/code&gt; クラスを。ドキュメント&lt;a href=&quot;#modelforms-selecting-fields&quot;&gt;を使用するには&lt;/a&gt;、 &lt;code&gt;ModelForm&lt;/code&gt; フィールドの選択を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6b9074b6e7d23d0ad5da439d0ade59f87da165a" translate="yes" xml:space="preserve">
          <source>The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_FILE_PATH&quot;&gt;&lt;code&gt;EMAIL_FILE_PATH&lt;/code&gt;&lt;/a&gt; setting or from the &lt;code&gt;file_path&lt;/code&gt; keyword when creating a connection with &lt;a href=&quot;#django.core.mail.get_connection&quot;&gt;&lt;code&gt;get_connection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルバックエンドはメールをファイルに書き込みます。このバックエンドで開かれる新しいセッションごとに新しいファイルが作成されます。ファイルが書き込まれるディレクトリは、&lt;a href=&quot;../ref/settings#std:setting-EMAIL_FILE_PATH&quot;&gt; &lt;code&gt;EMAIL_FILE_PATH&lt;/code&gt; &lt;/a&gt;設定から、または&lt;a href=&quot;#django.core.mail.get_connection&quot;&gt; &lt;code&gt;get_connection()&lt;/code&gt; で&lt;/a&gt;接続を作成するときに &lt;code&gt;file_path&lt;/code&gt; キーワードから取得されます。</target>
        </trans-unit>
        <trans-unit id="d4163f6ace1ca1417ecbd010ee4e813eba341221" translate="yes" xml:space="preserve">
          <source>The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved.</source>
          <target state="translated">このファイルはモデルをデータベースに保存する際の一部として保存されるため、モデルが保存されるまでは、ディスク上で使用される実際のファイル名に頼ることはできません。</target>
        </trans-unit>
        <trans-unit id="41f33b596b6e1ec2465b3f2736843f4c41a196a5" translate="yes" xml:space="preserve">
          <source>The file storage engine to use when collecting static files with the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理コマンドで静的ファイルを収集するときに使用するファイルストレージエンジン。</target>
        </trans-unit>
        <trans-unit id="035804f436f66d4afdd615a6e4e8aa06c1c2c140" translate="yes" xml:space="preserve">
          <source>The file system permissions that the directory will receive when it is saved. Defaults to &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存時にディレクトリが受け取るファイルシステムのアクセス許可。デフォルトは&lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c25797eed4c376aabbae73535692d312a1639d96" translate="yes" xml:space="preserve">
          <source>The file system permissions that the file will receive when it is saved. Defaults to &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存時にファイルが受け取るファイルシステムのアクセス許可。デフォルトは&lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6c74283db4d94eff6e28ffec0fc60afe81c7dfa3" translate="yes" xml:space="preserve">
          <source>The file will be closed automatically, so don&amp;rsquo;t open it with a context manager.</source>
          <target state="translated">ファイルは自動的に閉じられるため、コンテキストマネージャで開かないでください。</target>
        </trans-unit>
        <trans-unit id="0b4c94442b294eae671b5179401a9e9dedbbf050" translate="yes" xml:space="preserve">
          <source>The file-based backend serializes and stores each cache value as a separate file. To use this backend set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.core.cache.backends.filebased.FileBasedCache&quot;&lt;/code&gt; and &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt; to a suitable directory. For example, to store cached data in &lt;code&gt;/var/tmp/django_cache&lt;/code&gt;, use this setting:</source>
          <target state="translated">ファイルベースのバックエンドは、各キャッシュ値をシリアル化して個別のファイルとして保存します。このバックエンドを使用するには、&lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt; &lt;code&gt;BACKEND&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;&quot;django.core.cache.backends.filebased.FileBasedCache&quot;&lt;/code&gt; django.core.cache.backends.filebased.FileBasedCache &quot;に設定し、&lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt;を適切なディレクトリに設定します。たとえば、キャッシュされたデータを &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; に保存するには、次の設定を使用します。</target>
        </trans-unit>
        <trans-unit id="4e75cf716c59afe86365331aee1878ffc6c24382" translate="yes" xml:space="preserve">
          <source>The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path.</source>
          <target state="translated">元々与えられていたファイル名。これは、最終的な宛先パスを決定する際に考慮されることもあれば、考慮されないこともあります。</target>
        </trans-unit>
        <trans-unit id="c7080193b49ff0446e5e91ef03b953c27eb57654" translate="yes" xml:space="preserve">
          <source>The filter returns &lt;code&gt;0&lt;/code&gt; for an undefined variable.</source>
          <target state="translated">フィルターは、未定義の変数に対して &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3d3221c79e9c5f913b1c25c6eb2dd053b109e50e" translate="yes" xml:space="preserve">
          <source>The final query does the inversion (&lt;code&gt;27&lt;/code&gt; to &lt;code&gt;-27&lt;/code&gt;) directly in the database. The reason for doing this is that if the &lt;code&gt;self.rhs&lt;/code&gt; is something else than a plain integer value (for example an &lt;code&gt;F()&lt;/code&gt; reference) we can&amp;rsquo;t do the transformations in Python.</source>
          <target state="translated">最後のクエリは、データベースで直接反転（ &lt;code&gt;27&lt;/code&gt; から &lt;code&gt;-27&lt;/code&gt; ）を実行します。これを行う理由は、 &lt;code&gt;self.rhs&lt;/code&gt; が通常の整数値（たとえば、 &lt;code&gt;F()&lt;/code&gt; 参照）以外の場合、Pythonで変換を実行できないためです。</target>
        </trans-unit>
        <trans-unit id="7c7ca685cf1726772feb729af332bf567c40b4c5" translate="yes" xml:space="preserve">
          <source>The final step in setting up your virtual environment is to activate it:</source>
          <target state="translated">仮想環境を設定する最後のステップは、仮想環境を有効化することです。</target>
        </trans-unit>
        <trans-unit id="895d5d8ba62111caffdbf5c689da962e53c48cdb" translate="yes" xml:space="preserve">
          <source>The final step is to enter your password. You will be asked to enter your password twice, the second time as a confirmation of the first.</source>
          <target state="translated">最後はパスワードの入力です。パスワードの入力を2回求められますが、2回目は1回目の確認として、2回目はパスワードの入力を求められます。</target>
        </trans-unit>
        <trans-unit id="26c7aa22741db0888336489a775e113abc6e5017" translate="yes" xml:space="preserve">
          <source>The first argument is a &lt;a href=&quot;../../topics/http/urls#naming-url-patterns&quot;&gt;URL pattern name&lt;/a&gt;. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax:</source>
          <target state="translated">最初の引数は&lt;a href=&quot;../../topics/http/urls#naming-url-patterns&quot;&gt;URLパターン名&lt;/a&gt;です。引用符付きのリテラルまたはその他のコンテキスト変数を使用できます。追加の引数はオプションであり、URLの引数として使用されるスペースで区切られた値である必要があります。上記の例は、位置引数を渡すことを示しています。または、キーワード構文を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="aacf6fd5691502e26079ea4443424e381b2c587d" translate="yes" xml:space="preserve">
          <source>The first argument of &lt;code&gt;MigrationWriter.register_serializer()&lt;/code&gt; is a type or iterable of types that should use the serializer.</source>
          <target state="translated">&lt;code&gt;MigrationWriter.register_serializer()&lt;/code&gt; の最初の引数は、シリアライザを使用する必要がある型または反復可能な型です。</target>
        </trans-unit>
        <trans-unit id="5d0bd8d670ec9fbf10f7f2947c26e1dc1ad83639" translate="yes" xml:space="preserve">
          <source>The first argument to the constructor is required &amp;ndash; the path to redirect to. This can be a fully qualified URL (e.g. &lt;code&gt;'https://www.yahoo.com/search/'&lt;/code&gt;), an absolute path with no domain (e.g. &lt;code&gt;'/search/'&lt;/code&gt;), or even a relative path (e.g. &lt;code&gt;'search/'&lt;/code&gt;). In that last case, the client browser will reconstruct the full URL itself according to the current path. See &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for other optional constructor arguments. Note that this returns an HTTP status code 302.</source>
          <target state="translated">コンストラクターの最初の引数は必須です&amp;ndash;リダイレクト先のパス。これは完全修飾URL（例： &lt;code&gt;'https://www.yahoo.com/search/'&lt;/code&gt; ）、ドメインのない絶対パス（例： &lt;code&gt;'/search/'&lt;/code&gt; ）、または相対パス（例： &lt;code&gt;'search/'&lt;/code&gt; ）。最後のケースでは、クライアントブラウザは現在のパスに従って完全なURL自体を再構築します。その他のオプションのコンストラクタ引数については、&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;を参照してください。これはHTTPステータスコード302を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="47a3396d450783ab28ffa716e55c53cf2e330e39" translate="yes" xml:space="preserve">
          <source>The first bit in the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; line is the base URL path you want to serve your application at (&lt;code&gt;/&lt;/code&gt; indicates the root url), and the second is the location of a &amp;ldquo;WSGI file&amp;rdquo; &amp;ndash; see below &amp;ndash; on your system, usually inside of your project package (&lt;code&gt;mysite&lt;/code&gt; in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file.</source>
          <target state="translated">&lt;code&gt;WSGIScriptAlias&lt;/code&gt; 行の最初のビットは、アプリケーションを提供するベースURLパスです（ &lt;code&gt;/&lt;/code&gt; はルートURLを示します）。2番目のビットは、「WSGIファイル」の場所です。プロジェクトパッケージ（この例では &lt;code&gt;mysite&lt;/code&gt; ）。これは、そのファイルで定義されたWSGIアプリケーションを使用して、指定されたURLの下でリクエストを処理するようにApacheに指示します。</target>
        </trans-unit>
        <trans-unit id="c4793a0d9ffadbbd52ba70700ae977d5a3072dfa" translate="yes" xml:space="preserve">
          <source>The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the &lt;code&gt;Hand&lt;/code&gt; class in our example.</source>
          <target state="translated">最初のクラスは、ユーザーが操作するPythonオブジェクトです。彼らはそれをモデル属性に割り当て、それらを表示する目的でそれから読み取ります。これは、この例では &lt;code&gt;Hand&lt;/code&gt; クラスです。</target>
        </trans-unit>
        <trans-unit id="c60b8b5e1f640009f89a0558d3d9c8beda00fdc0" translate="yes" xml:space="preserve">
          <source>The first decorator doesn&amp;rsquo;t know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The &lt;code&gt;condition&lt;/code&gt; decorator uses both callback functions simultaneously to work out the right action to take.</source>
          <target state="translated">最初のデコレータは2番目のデコレータについて何も認識しておらず、2番目のデコレータが別の方法で決定したとしても、応答は変更されないと答える場合があります。 &lt;code&gt;condition&lt;/code&gt; デコレータは取るために正しい行動を動作するように同時に両方のコールバック関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="35cc855bb31940c21fb4d0fbf57cd5cd7a4e7137" translate="yes" xml:space="preserve">
          <source>The first defense against CSRF attacks is to ensure that GET requests (and other &amp;lsquo;safe&amp;rsquo; methods, as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt;) are side effect free. Requests via &amp;lsquo;unsafe&amp;rsquo; methods, such as POST, PUT, and DELETE, can then be protected by following the steps below.</source>
          <target state="translated">CSRF攻撃に対する最初の防御策は、GETリクエスト（および&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231＃section-4.2.1で&lt;/strong&gt;&lt;/a&gt;定義され&lt;strong&gt;ている&lt;/strong&gt;他の「安全な」メソッド）に副作用がないことを確認することです。POST、PUT、DELETEなどの「安全でない」メソッドを介したリクエストは、以下の手順に従って保護できます。</target>
        </trans-unit>
        <trans-unit id="8edd716d888141d95a121f4f265c937c657c24a4" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the actual value to be set on the model, and the second element is the human-readable name. For example:</source>
          <target state="translated">各タプルの最初の要素はモデルに設定される実際の値で、2番目の要素は人間が読める名前です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="66298df4913a918317ded3e216893558da214ecb" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the &lt;code&gt;unknown&lt;/code&gt; option in this example).</source>
          <target state="translated">各タプルの最初の要素は、グループに適用する名前です。2番目の要素は2タプルの反復可能で、各2タプルにはオプションの値と人間が読める名前が含まれています。グループ化されたオプションは、単一のリスト内でグループ化されていないオプションと組み合わせることができます（この例では &lt;code&gt;unknown&lt;/code&gt; オプションなど）。</target>
        </trans-unit>
        <trans-unit id="65be4df7d03179170f14cf237e2177f6c9b3d953" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the value that will be stored in the database. The second element is displayed by the field&amp;rsquo;s form widget.</source>
          <target state="translated">各タプルの最初の要素は、データベースに格納される値です。2番目の要素は、フィールドのフォームウィジェットによって表示されます。</target>
        </trans-unit>
        <trans-unit id="01cc055b3073ebaf706ad95e612b19ff24acdce3" translate="yes" xml:space="preserve">
          <source>The first element of each tuple in &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; is the title of the fieldset. Here&amp;rsquo;s what our form looks like now:</source>
          <target state="translated">&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt;の各タプルの最初の要素は、フィールドセットのタイトルです。フォームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="893cf1f3905d1bba0b3c66da2bd40a36666ba533" translate="yes" xml:space="preserve">
          <source>The first is the standard Python way of subclassing and overriding attributes and methods in the subclass. So that if your parent class had an attribute &lt;code&gt;greeting&lt;/code&gt; like this:</source>
          <target state="translated">1つ目は、サブクラスの属性とメソッドをサブクラス化してオーバーライドする標準的なPythonの方法です。したがって、親クラスに次のような属性の &lt;code&gt;greeting&lt;/code&gt; がある場合：</target>
        </trans-unit>
        <trans-unit id="97243a4154bcf38eec0dcd770c2c093897849746" translate="yes" xml:space="preserve">
          <source>The first iteration produces HTML that refers to class &lt;code&gt;row1&lt;/code&gt;, the second to &lt;code&gt;row2&lt;/code&gt;, the third to &lt;code&gt;row1&lt;/code&gt; again, and so on for each iteration of the loop.</source>
          <target state="translated">最初の反復では、クラスを指すHTML生成 &lt;code&gt;row1&lt;/code&gt; 、第2 &lt;code&gt;row2&lt;/code&gt; 、第3 &lt;code&gt;row1&lt;/code&gt; ループの各反復のために再度、等を。</target>
        </trans-unit>
        <trans-unit id="e8d8c7f5c523b475b062636295d7f8b034bdc905" translate="yes" xml:space="preserve">
          <source>The first one is the usage we&amp;rsquo;ve been discussing in the previous sections. The second one is what is known as &lt;em&gt;reverse resolution of URLs&lt;/em&gt;, &lt;em&gt;reverse URL matching&lt;/em&gt;, &lt;em&gt;reverse URL lookup&lt;/em&gt;, or simply &lt;em&gt;URL reversing&lt;/em&gt;.</source>
          <target state="translated">1つ目は、前のセクションで説明した使用法です。2つ目は&lt;em&gt;、URLの逆解決&lt;/em&gt;、&lt;em&gt;逆URLマッチング&lt;/em&gt;、&lt;em&gt;逆URLルックアップ&lt;/em&gt;、または単に&lt;em&gt;URL逆転&lt;/em&gt;と呼ばれるものです。</target>
        </trans-unit>
        <trans-unit id="49b581f6ea38bccdb9c24f4a993f4f33893e5dc8" translate="yes" xml:space="preserve">
          <source>The first option is to roll back the entire transaction. For example:</source>
          <target state="translated">最初のオプションは、トランザクション全体をロールバックすることです。例えば</target>
        </trans-unit>
        <trans-unit id="7b2f5ff0a043fddbb6e2fd41755c4546361f62a5" translate="yes" xml:space="preserve">
          <source>The first option to do so is to add the hosts to your settings file. For example, the test suite for docs.djangoproject.com includes the following:</source>
          <target state="translated">そのための最初のオプションは、設定ファイルにホストを追加することです。例えば、docs.djangoproject.com のテストスイートには、以下のようなものが含まれています。</target>
        </trans-unit>
        <trans-unit id="90239cd9cfb1ec6714d55686d931b04d4cbfa512" translate="yes" xml:space="preserve">
          <source>The first parameter can take three forms: a string representing a file path, a dictionary with values defining a new raster, or a bytes object representing a raster file.</source>
          <target state="translated">最初のパラメータは、ファイルパスを表す文字列、新しいラスタを定義する値を持つ辞書、ラスタファイルを表すバイトオブジェクトの3つの形式を取ることができます。</target>
        </trans-unit>
        <trans-unit id="92ec3dcecb261013fdca063af558824fb0f4468e" translate="yes" xml:space="preserve">
          <source>The first parameter, &lt;code&gt;data&lt;/code&gt;, should be a &lt;code&gt;dict&lt;/code&gt; instance. If the &lt;code&gt;safe&lt;/code&gt; parameter is set to &lt;code&gt;False&lt;/code&gt; (see below) it can be any JSON-serializable object.</source>
          <target state="translated">最初のパラメーター &lt;code&gt;data&lt;/code&gt; は &lt;code&gt;dict&lt;/code&gt; インスタンスでなければなりません。 &lt;code&gt;safe&lt;/code&gt; パラメータが &lt;code&gt;False&lt;/code&gt; （以下を参照）に設定されている場合、任意のJSONシリアル化可能オブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="7bb4f019dc7831708e5af533eef9bd70821b86c5" translate="yes" xml:space="preserve">
          <source>The first query asks for the average rating of all a publisher&amp;rsquo;s books for publisher&amp;rsquo;s that have at least one book with a rating exceeding 3.0. The second query asks for the average of a publisher&amp;rsquo;s book&amp;rsquo;s ratings for only those ratings exceeding 3.0.</source>
          <target state="translated">最初のクエリは、評価が3.0を超える書籍が少なくとも1冊ある出版社のすべての出版社の本の平均評価を要求します。2番目のクエリは、3.0を超える評価のみに対する出版社の本の評価の平均を求めます。</target>
        </trans-unit>
        <trans-unit id="053d07bf69e6e09e648c0c4e1ae628f5afd4936e" translate="yes" xml:space="preserve">
          <source>The first step &lt;code&gt;full_clean()&lt;/code&gt; performs is to clean each individual field.</source>
          <target state="translated">&lt;code&gt;full_clean()&lt;/code&gt; が実行する最初のステップは、個々のフィールドをクリーンアップすることです。</target>
        </trans-unit>
        <trans-unit id="5a822f06f42c65b3dd06d798e0659cde397841bd" translate="yes" xml:space="preserve">
          <source>The first step in displaying this intermediate model in the admin is to define an inline class for the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">管理でこの中間モデルを表示する最初のステップは、 &lt;code&gt;Membership&lt;/code&gt; モデルのインラインクラスを定義することです。</target>
        </trans-unit>
        <trans-unit id="a2fe99ac174181e80dcc066068a1954b0b7fc707" translate="yes" xml:space="preserve">
          <source>The first step is to add &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = True&lt;/code&gt;&lt;/a&gt; to your settings file. At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary.</source>
          <target state="translated">最初のステップは、&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt;を設定ファイルに追加することです。この時点で、ほとんどのことはうまくいくはずです。コードで単純な日時オブジェクトを作成すると、Djangoは必要に応じてそれらを認識させます。</target>
        </trans-unit>
        <trans-unit id="5b43c96b6c6b5067fe128e9fb080167e2c1437e8" translate="yes" xml:space="preserve">
          <source>The first step is to create a &lt;a href=&quot;index#term-message-file&quot;&gt;message file&lt;/a&gt; for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a &lt;code&gt;.po&lt;/code&gt; file extension.</source>
          <target state="translated">最初のステップは、新しい言語の&lt;a href=&quot;index#term-message-file&quot;&gt;メッセージファイル&lt;/a&gt;を作成することです。メッセージファイルは、単一の言語を表すプレーンテキストファイルであり、使用可能なすべての翻訳文字列と、それらを特定の言語でどのように表現するかを含みます。メッセージファイルのファイル拡張子は &lt;code&gt;.po&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0458bb2ba643653473bb694c0904556d9a528344" translate="yes" xml:space="preserve">
          <source>The first step to contributing to Django is to get a copy of the source code. First, &lt;a href=&quot;https://github.com/django/django/fork&quot;&gt;fork Django on GitHub&lt;/a&gt;. Then, from the command line, use the &lt;code&gt;cd&lt;/code&gt; command to navigate to the directory where you&amp;rsquo;ll want your local copy of Django to live.</source>
          <target state="translated">Djangoに貢献するための最初のステップは、ソースコードのコピーを入手することです。まず、&lt;a href=&quot;https://github.com/django/django/fork&quot;&gt;GitHubでDjangoをフォークします&lt;/a&gt;。次に、コマンドラインから &lt;code&gt;cd&lt;/code&gt; コマンドを使用して、Djangoのローカルコピーを保存するディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="8ae8d67f65acd52dbb066631338392f1a23fc452" translate="yes" xml:space="preserve">
          <source>The first step to using more than one database with Django is to tell Django about the database servers you&amp;rsquo;ll be using. This is done using the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">Djangoで複数のデータベースを使用する最初のステップは、使用するデータベースサーバーについてDjangoに伝えることです。これは&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;設定を使用して行われます。この設定は、Django全体で特定のデータベースを参照する方法であるデータベースエイリアスを、その特定の接続の設定の辞書にマップします。内部辞書の設定は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;ドキュメントで完全に説明されています。</target>
        </trans-unit>
        <trans-unit id="44d5bd896e8ca28673de91b965ab96d0c88f5adc" translate="yes" xml:space="preserve">
          <source>The fixtures that are named can include directory components. These directories will be included in the search path. For example:</source>
          <target state="translated">名前が付けられたフィクスチャは、ディレクトリ・コンポーネントを含むことができます。これらのディレクトリは、検索パスに含まれます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6c9b843427d6189b66a1ac36bd8f3b19833f6092" translate="yes" xml:space="preserve">
          <source>The flags used when compiling the regular expression string &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt; is a pre-compiled regular expression, and &lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; is overridden, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">正規表現文字列&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; を&lt;/a&gt;コンパイルするときに使用されるフラグ。場合は&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;、プリコンパイル済みの正規表現で、&lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt;上書きされ、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;発生します。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6e33d92dd2768ab4c50afbc85edfa029aa2f7dda" translate="yes" xml:space="preserve">
          <source>The flatpages app</source>
          <target state="translated">フラットページアプリ</target>
        </trans-unit>
        <trans-unit id="37429ca8988aa9e21619e03578a3aa7629602021" translate="yes" xml:space="preserve">
          <source>The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the &lt;a href=&quot;sites#hooking-into-current-site-from-views&quot;&gt;current site&lt;/a&gt;.</source>
          <target state="translated">フラットページアプリには、&lt;a href=&quot;sites#hooking-into-current-site-from-views&quot;&gt;現在のサイトで&lt;/a&gt;利用可能なすべてのフラットページを反復処理できるテンプレートタグが用意されています。</target>
        </trans-unit>
        <trans-unit id="b762ecc852af7e088e75baf74cdbc6ac96db8aa4" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../../utils#django.utils.feedgenerator.SyndicationFeed&quot;&gt;&lt;code&gt;django.utils.feedgenerator.SyndicationFeed&lt;/code&gt;&lt;/a&gt; subclasses are available:</source>
          <target state="translated">次の&lt;a href=&quot;../../utils#django.utils.feedgenerator.SyndicationFeed&quot;&gt; &lt;code&gt;django.utils.feedgenerator.SyndicationFeed&lt;/code&gt; &lt;/a&gt;サブクラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="d0e5c1877f90f95248f71d31f5912958212979ae" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuerySet&lt;/code&gt; methods evaluate the &lt;code&gt;QuerySet&lt;/code&gt; and return something &lt;em&gt;other than&lt;/em&gt; a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">以下の &lt;code&gt;QuerySet&lt;/code&gt; 方法は、評価 &lt;code&gt;QuerySet&lt;/code&gt; とリターンの何か&lt;em&gt;以外の&lt;/em&gt; &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="284c34d68eec06943f4a3d9de8968921766e55bb" translate="yes" xml:space="preserve">
          <source>The following are PostgreSQL specific &lt;a href=&quot;../../models/indexes&quot;&gt;indexes&lt;/a&gt; available from the &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; module.</source>
          <target state="translated">以下は、 &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; モジュールから利用可能なPostgreSQL固有の&lt;a href=&quot;../../models/indexes&quot;&gt;インデックス&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0b6966c34b02d72f9151d4120d3fb9804d013c97" translate="yes" xml:space="preserve">
          <source>The following are all legal:</source>
          <target state="translated">以下はすべて合法です。</target>
        </trans-unit>
        <trans-unit id="fb8617e614581813861e27bbbd803b31ff1f311d" translate="yes" xml:space="preserve">
          <source>The following are equivalent:</source>
          <target state="translated">以下はこれに相当する。</target>
        </trans-unit>
        <trans-unit id="81542627868a9ffb56db58c11315f765372b892a" translate="yes" xml:space="preserve">
          <source>The following are the arguments and keywords that may be used during instantiation of &lt;code&gt;LayerMapping&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;LayerMapping&lt;/code&gt; オブジェクトのインスタンス化中に使用できる引数とキーワードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ed47360c7d12e10b6c68d9808683c52ed8588691" translate="yes" xml:space="preserve">
          <source>The following arguments are available to all field types. All are optional.</source>
          <target state="translated">以下の引数は、すべてのフィールドタイプで利用可能です。すべてオプションです。</target>
        </trans-unit>
        <trans-unit id="8a9bf51cbaea32fba407af879b808987c8179d02" translate="yes" xml:space="preserve">
          <source>The following attributes and methods are available on any subclass of &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の属性とメソッドは、&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; の&lt;/a&gt;サブクラスで使用できます。</target>
        </trans-unit>
        <trans-unit id="bc16b93aaf25c86c2e5a47839f6ba6772f8aac39" translate="yes" xml:space="preserve">
          <source>The following backends are available in &lt;a href=&quot;#module-django.contrib.auth.backends&quot;&gt;&lt;code&gt;django.contrib.auth.backends&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下のバックエンドはで利用可能です&lt;a href=&quot;#module-django.contrib.auth.backends&quot;&gt; &lt;code&gt;django.contrib.auth.backends&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="27b33dc3dd8b00095e48bdd2946d661302f48b4a" translate="yes" xml:space="preserve">
          <source>The following checklist includes settings that:</source>
          <target state="translated">以下のチェックリストには、そのような設定が含まれています。</target>
        </trans-unit>
        <trans-unit id="9df85d7bdd1888612b2cf87af0d7ed96d4b077c2" translate="yes" xml:space="preserve">
          <source>The following checks are performed on &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; model fields:</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt;モデルフィールドに対して実行されます。</target>
        </trans-unit>
        <trans-unit id="d0a68f6fed3620bb3281f44c1e52da9151a8c4a5" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered as an inline on a &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; に&lt;/a&gt;インラインとして登録されている&lt;a href=&quot;contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; &lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="dc64c4f3803d970a42f815f585a9ef9266262cca" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; (or subclass) that is registered with the admin site:</source>
          <target state="translated">以下のチェックは、管理サイトに登録されているすべての&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;（またはサブクラス）で実行されます。</target>
        </trans-unit>
        <trans-unit id="fbc7a26eae3e54b89174c26b5546d6603116cb76" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered with the admin site:</source>
          <target state="translated">次のチェックは、管理サイトに登録されているすべての&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="798b247d43f522a878f43ca529351c16150eece7" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered as an inline on a &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; に&lt;/a&gt;インラインとして登録されている&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; &lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="772c831459e6cb84678eef9556aba5363139c510" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any model using a &lt;a href=&quot;contrib/sites#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/sites#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;を使用して任意のモデルで実行されます。</target>
        </trans-unit>
        <trans-unit id="62c287734cdd195293b9a229ff93208bf14d1920" translate="yes" xml:space="preserve">
          <source>The following checks are performed on the default &lt;a href=&quot;contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下のチェックは、デフォルトの&lt;a href=&quot;contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; で&lt;/a&gt;実行されます。</target>
        </trans-unit>
        <trans-unit id="9e37df7b44137276890a046f659bfb8ba9033c28" translate="yes" xml:space="preserve">
          <source>The following checks are performed on your URL configuration:</source>
          <target state="translated">以下のチェックは、URLの設定に対して行われます。</target>
        </trans-unit>
        <trans-unit id="b5e6a7bd9233bcb085b33c0911616d7cb121f331" translate="yes" xml:space="preserve">
          <source>The following checks are performed on your translation configuration:</source>
          <target state="translated">以下のチェックは、翻訳設定に対して行われます。</target>
        </trans-unit>
        <trans-unit id="2bc9c3b0e242eeb9303878e26142dbdb14ab08bd" translate="yes" xml:space="preserve">
          <source>The following checks are performed when a model contains a &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">モデルが含まれている場合は、以下のチェックが実行され&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; を&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="718dd25af97d4c416215d47f19360e01f976892e" translate="yes" xml:space="preserve">
          <source>The following checks are run if you use the &lt;a href=&quot;django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check --deploy&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">&lt;a href=&quot;django-admin#cmdoption-check-deploy&quot;&gt; &lt;code&gt;check --deploy&lt;/code&gt; &lt;/a&gt;オプションを使用すると、次のチェックが実行されます。</target>
        </trans-unit>
        <trans-unit id="169f8332f02f69fac3ca8c2910b09ef347510ade" translate="yes" xml:space="preserve">
          <source>The following checks verify that &lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; is correctly configured:</source>
          <target state="translated">次のチェックでは、&lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;が正しく構成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="ab28cab160996c2304c7c158d04a89bc438663c7" translate="yes" xml:space="preserve">
          <source>The following checks verify that your &lt;a href=&quot;settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting is correctly configured:</source>
          <target state="translated">次のチェックでは、&lt;a href=&quot;settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;設定が正しく構成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="658ec03bf20f39893ff07a0a1a0182adf9c190fa" translate="yes" xml:space="preserve">
          <source>The following checks verify that your &lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting is correctly configured:</source>
          <target state="translated">次のチェックでは、&lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定が正しく構成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="cb1871103b4735e9f911dab6f3e2f7b9126ed436" translate="yes" xml:space="preserve">
          <source>The following code will let you examine the OGR types (e.g. integer or string) associated with each of the fields:</source>
          <target state="translated">以下のコードでは、各フィールドに関連付けられたOGR型(整数や文字列など)を調べることができます。</target>
        </trans-unit>
        <trans-unit id="b97899d26792490f17732aac0bbd906bcd3df4f3" translate="yes" xml:space="preserve">
          <source>The following decorators in &lt;a href=&quot;#module-django.views.decorators.http&quot;&gt;&lt;code&gt;django.views.decorators.http&lt;/code&gt;&lt;/a&gt; can be used to control caching behavior on particular views.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.http&quot;&gt; &lt;code&gt;django.views.decorators.http&lt;/code&gt; &lt;/a&gt;の以下のデコレータを使用して、特定のビューのキャッシュ動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="9d3874885283eeb637d618d85b95b428ce844660" translate="yes" xml:space="preserve">
          <source>The following distance lookups are available:</source>
          <target state="translated">以下の距離ルックアップが可能です。</target>
        </trans-unit>
        <trans-unit id="511fb6f7d86146e81a24b7522fc492bf7dd8eb25" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of savepoints:</source>
          <target state="translated">次の例は、savepoints の使用を示しています。</target>
        </trans-unit>
        <trans-unit id="c94672d77becd10e86518f53b48e4b0ab433ece0" translate="yes" xml:space="preserve">
          <source>The following example gets all published objects from &lt;code&gt;MyModel&lt;/code&gt;:</source>
          <target state="translated">次の例では、公開されているすべてのオブジェクトを &lt;code&gt;MyModel&lt;/code&gt; から取得します。</target>
        </trans-unit>
        <trans-unit id="5ab8189d4a7cb9d8d6126d8824341ddfe2eef07b" translate="yes" xml:space="preserve">
          <source>The following example gets the object with the primary key of 1 from &lt;code&gt;MyModel&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;MyModel&lt;/code&gt; から主キーが1のオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="2f109d2e9c17671da9abe438aa5081ff23c0cfc7" translate="yes" xml:space="preserve">
          <source>The following example renders the template &lt;code&gt;myapp/index.html&lt;/code&gt; with the MIME type &lt;em&gt;application/xhtml+xml&lt;/em&gt;:</source>
          <target state="translated">次の例では、テンプレート &lt;code&gt;myapp/index.html&lt;/code&gt; をMIMEタイプ&lt;em&gt;application / xhtml + xmlで&lt;/em&gt;レンダリングし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a613041ed60555fc2269d1cc2da4bb4bdaef377e" translate="yes" xml:space="preserve">
          <source>The following example restricts overlapping reservations in the same room, not taking canceled reservations into account:</source>
          <target state="translated">以下の例では、キャンセルされた予約を考慮せず、同室での重複予約を制限しています。</target>
        </trans-unit>
        <trans-unit id="5ae77351bd437b3ba442b7b1ed3f17c0d69fd5f2" translate="yes" xml:space="preserve">
          <source>The following example shows how rasters can be created from different input sources (using the sample data from the GeoDjango tests; see also the &lt;a href=&quot;#gdal-sample-data&quot;&gt;Sample Data&lt;/a&gt; section).</source>
          <target state="translated">次の例は、さまざまな入力ソースからラスタを作成する方法を示しています（GeoDjangoテストのサンプルデータを使用。&lt;a href=&quot;#gdal-sample-data&quot;&gt;サンプルデータの&lt;/a&gt;セクションも参照してください）。</target>
        </trans-unit>
        <trans-unit id="c6b0d211561de68fb072b86d7bf28643ec23a1c6" translate="yes" xml:space="preserve">
          <source>The following example shows how to exclude some conventional URLs that browsers and crawlers often request:</source>
          <target state="translated">以下の例では、ブラウザやクローラーがよく要求する従来のURLを除外する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d17b7184c9d112ad10af3bbd154bc9a225b3dc3b" translate="yes" xml:space="preserve">
          <source>The following example uses some of the options available for the &lt;a href=&quot;https://gdal.org/drivers/raster/gtiff.html&quot;&gt;GTiff driver&lt;/a&gt;. The result is a compressed signed byte raster with an internal tiling scheme. The internal tiles have a block size of 23 by 23:</source>
          <target state="translated">次の例では、&lt;a href=&quot;https://gdal.org/drivers/raster/gtiff.html&quot;&gt;GTiffドライバーで&lt;/a&gt;使用できるオプションの一部を使用しています。結果は、内部タイルスキーマを持つ圧縮された符号付きバイトラスタです。内部タイルのブロックサイズは23 x 23です。</target>
        </trans-unit>
        <trans-unit id="02aa7661af1a2fa0eb1f55c6693585884acd7e85" translate="yes" xml:space="preserve">
          <source>The following example, which uses &lt;code&gt;myapp_defaults&lt;/code&gt; as a positional argument, is equivalent:</source>
          <target state="translated">&lt;code&gt;myapp_defaults&lt;/code&gt; を位置引数として使用する次の例は同等です。</target>
        </trans-unit>
        <trans-unit id="a7f4a8147d9020a9a80678a5a04a8331e9fd9b42" translate="yes" xml:space="preserve">
          <source>The following example:</source>
          <target state="translated">次のような例です。</target>
        </trans-unit>
        <trans-unit id="dbdcc10d5462ba46d9b6fc2e25ec7724d00ed9d4" translate="yes" xml:space="preserve">
          <source>The following examples are valid tests and don&amp;rsquo;t raise any &lt;code&gt;AssertionError&lt;/code&gt;:</source>
          <target state="translated">次の例は有効なテストであり、 &lt;code&gt;AssertionError&lt;/code&gt; を発生させません。</target>
        </trans-unit>
        <trans-unit id="ef65fe69e1f9b55d1642608283978e9fd4dd6a5c" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the difference between plain lookups and &lt;code&gt;select_related()&lt;/code&gt; lookups. Here&amp;rsquo;s standard lookup:</source>
          <target state="translated">次の例は、プレーンルックアップと &lt;code&gt;select_related()&lt;/code&gt; ルックアップの違いを示しています。標準の検索は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a4092fa174e7a8f36074dda217b59427b9e0598b" translate="yes" xml:space="preserve">
          <source>The following forms are compatible with any subclass of &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の形式は、&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; の&lt;/a&gt;サブクラスと互換性があります。</target>
        </trans-unit>
        <trans-unit id="adf4225ac1727ac53e1866d9bd7ebf9585a592aa" translate="yes" xml:space="preserve">
          <source>The following forms make assumptions about the user model and can be used as-is if those assumptions are met:</source>
          <target state="translated">以下のフォームでは、ユーザーモデルに関する前提条件を設定しており、その前提条件が満たされていれば、そのまま使用することができます。</target>
        </trans-unit>
        <trans-unit id="03fd4939a7e630a5b2c4080424d25186843fae49" translate="yes" xml:space="preserve">
          <source>The following inner options that may be required for more complex configurations are available:</source>
          <target state="translated">より複雑な構成の場合には、以下のようなインナーオプションが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ce44bfd694d584e192c872881f893ed40f5892ce" translate="yes" xml:space="preserve">
          <source>The following input formats, along with their corresponding Python types, are accepted:</source>
          <target state="translated">以下の入力フォーマットと、それに対応するPythonの型が受け入れられます。</target>
        </trans-unit>
        <trans-unit id="c5ed210269141c795e27b30d64a358ba08aee37b" translate="yes" xml:space="preserve">
          <source>The following is a unit test using the request factory:</source>
          <target state="translated">以下は、リクエストファクトリーを利用したユニットテストです。</target>
        </trans-unit>
        <trans-unit id="aa12bb2e2e2d43123308a3bfa9526910ae0ff4eb" translate="yes" xml:space="preserve">
          <source>The following is a unit test using the test client:</source>
          <target state="translated">以下はテストクライアントを使ったユニットテストです。</target>
        </trans-unit>
        <trans-unit id="fda8551c0b3bcb17fa6179ad9c7500759423e393" translate="yes" xml:space="preserve">
          <source>The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two databases &amp;ndash; a default PostgreSQL database and a MySQL database called &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">以下は、デフォルトのPostgreSQLデータベースと &lt;code&gt;users&lt;/code&gt; という名前のMySQLデータベースの2つのデータベースを定義する &lt;code&gt;settings.py&lt;/code&gt; スニペットの例です。</target>
        </trans-unit>
        <trans-unit id="b293ec95f949c27628bace57f66b95d58a3bc865" translate="yes" xml:space="preserve">
          <source>The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下は最低限のものを含む全体のDjangoのテストスイートを実行するために使用することができ、空間バックエンド、と設定ファイルの例です&lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; を&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="155b13a7d360ac7ab41723483431b48699c1a83a" translate="yes" xml:space="preserve">
          <source>The following keys in the &lt;code&gt;TEST&lt;/code&gt; dictionary are available:</source>
          <target state="translated">&lt;code&gt;TEST&lt;/code&gt; ディクショナリの次のキーを使用できます。</target>
        </trans-unit>
        <trans-unit id="8db9385dcb2867000b18aa9ba73c14c9c95225ae" translate="yes" xml:space="preserve">
          <source>The following mixins are used to construct Django&amp;rsquo;s editing views:</source>
          <target state="translated">以下のミックスインは、Djangoの編集ビューを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="56bf33227ffc3fd9440f7918633d861bffc08d69" translate="yes" xml:space="preserve">
          <source>The following options are available for all backends.</source>
          <target state="translated">以下のオプションは、すべてのバックエンドで利用可能です。</target>
        </trans-unit>
        <trans-unit id="bfc330e8533debea8bfca9a1ee07bf2cd57313b0" translate="yes" xml:space="preserve">
          <source>The following path converters are available by default:</source>
          <target state="translated">デフォルトでは以下のパスコンバータが利用可能です。</target>
        </trans-unit>
        <trans-unit id="37a9d07a5ce6b19cdb03447182319609657d2303" translate="yes" xml:space="preserve">
          <source>The following special markup can be used in your docstrings to easily create hyperlinks to other components:</source>
          <target state="translated">以下の特別なマークアップをdocstringsで使用すると、他のコンポーネントへのハイパーリンクを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="ce2e60220c58a5237c89916e6739ef4fb408e2f9" translate="yes" xml:space="preserve">
          <source>The following steps install &lt;code&gt;django-polls&lt;/code&gt; as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don&amp;rsquo;t have administrator access as well as preventing the package from affecting system services and other users of the machine.</source>
          <target state="translated">次の手順では、 &lt;code&gt;django-polls&lt;/code&gt; をユーザーライブラリとしてインストールします。ユーザーごとのインストールには、システム全体にパッケージをインストールするよりも多くの利点があります。たとえば、管理者アクセス権がないシステムで使用できることや、パッケージがシステムサービスやマシンの他のユーザーに影響を与えないようにすることなどです。</target>
        </trans-unit>
        <trans-unit id="3de0e27c71a643c0167b9228ad10d92581ce566d" translate="yes" xml:space="preserve">
          <source>The following table describes all keys that can be set in the &lt;code&gt;ds_input&lt;/code&gt; dictionary.</source>
          <target state="translated">次の表は、 &lt;code&gt;ds_input&lt;/code&gt; 辞書で設定できるすべてのキーを示しています。</target>
        </trans-unit>
        <trans-unit id="77ddba8f9221d107fb82a68bc44f1d2ec652ddc1" translate="yes" xml:space="preserve">
          <source>The following table explains the calculation for the percentile rank of a row:</source>
          <target state="translated">列のパーセンタイル順位の計算について説明します。</target>
        </trans-unit>
        <trans-unit id="9954c85322fc76aa8231c73793448b604300eff4" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what GIS-specific aggregate functions are available on each spatial backend. Please note that MySQL does not support any of these aggregates, and is thus excluded from the table.</source>
          <target state="translated">以下の表は、各空間バックエンドで利用可能な GIS 固有の集約機能の概要を示しています。MySQL はこれらのアグリゲートをサポートしていないため、この表からは除外されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8ed03a7e1d29f617e97e3e2081eac463d8dc91b6" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what geography-specific database functions are available on each spatial backend.</source>
          <target state="translated">以下の表に、各空間バックエンドで利用可能な地理固有のデータベース機能の概要を示す。</target>
        </trans-unit>
        <trans-unit id="87a5dfe0372fbe7b676b68991bb037492b90fea7" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what spatial lookups are available for each spatial database backend. The PostGIS Raster (PGRaster) lookups are divided into the three categories described in the &lt;a href=&quot;#spatial-lookup-raster&quot;&gt;raster lookup details&lt;/a&gt;: native support &lt;code&gt;N&lt;/code&gt;, bilateral native support &lt;code&gt;B&lt;/code&gt;, and geometry conversion support &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">次の表に、各空間データベースバックエンドで使用できる空間ルックアップの概要を示します。PostGISラスター（PGRaster）ルックアップは、&lt;a href=&quot;#spatial-lookup-raster&quot;&gt;ラスタールックアップの詳細で&lt;/a&gt;説明されている3つのカテゴリ（ネイティブサポート &lt;code&gt;N&lt;/code&gt; 、バイラテラルネイティブサポート &lt;code&gt;B&lt;/code&gt; 、およびジオメトリ変換サポート &lt;code&gt;C&lt;/code&gt; ）に分かれています。</target>
        </trans-unit>
        <trans-unit id="17cb4e80e675b29c99328366acbf87f2bdc32c9b" translate="yes" xml:space="preserve">
          <source>The following three classes provide much of the functionality needed to create Django views. You may think of them as &lt;em&gt;parent&lt;/em&gt; views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views.</source>
          <target state="translated">次の3つのクラスは、Djangoビューの作成に必要な機能の多くを提供します。あなたはそれらを&lt;em&gt;親&lt;/em&gt;ビューと考えるかもしれません、それは彼ら自身によって使用されるか、または継承されることができます。それらはプロジェクトに必要なすべての機能を提供しない場合があります。その場合、MixinsとGenericクラスベースのビューがあります。</target>
        </trans-unit>
        <trans-unit id="163b5f6afc0ffb26d1ffc866c1f722351d96ab02" translate="yes" xml:space="preserve">
          <source>The following views are described on this page and provide a foundation for editing content:</source>
          <target state="translated">このページでは、以下のような見解を述べており、内容を編集するための基礎となる。</target>
        </trans-unit>
        <trans-unit id="3022ab1485812abddb1a35eb1aa77b23ad3cf6ee" translate="yes" xml:space="preserve">
          <source>The for loop sets a number of variables available within the loop:</source>
          <target state="translated">forループは、ループ内で利用可能な変数の数を設定します。</target>
        </trans-unit>
        <trans-unit id="6793037035443cca7f0f9bdde895bd5877949c0a" translate="yes" xml:space="preserve">
          <source>The foreign key relationship is made explicit by a &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint. Don&amp;rsquo;t worry about the &lt;code&gt;DEFERRABLE&lt;/code&gt; parts; it&amp;rsquo;s telling PostgreSQL to not enforce the foreign key until the end of the transaction.</source>
          <target state="translated">外部キーの関係は、 &lt;code&gt;FOREIGN KEY&lt;/code&gt; 制約によって明示的にされます。 &lt;code&gt;DEFERRABLE&lt;/code&gt; パーツについて心配する必要はありません。トランザクションが終了するまで外部キーを強制しないようにPostgreSQLに指示しています。</target>
        </trans-unit>
        <trans-unit id="c0ba7b5548e8a098c637d857954895946ddd63ea" translate="yes" xml:space="preserve">
          <source>The form &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance from the form class that this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; wraps.</source>
          <target state="translated">この&lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt;がラップするフォームクラスのフォーム&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="1534a6bb0f89c8d9e2ed69373d2903181c1f6689" translate="yes" xml:space="preserve">
          <source>The form class to instantiate.</source>
          <target state="translated">インスタンス化するフォームクラス。</target>
        </trans-unit>
        <trans-unit id="b7be3637d68371b077e5ccddff05d872e662bae7" translate="yes" xml:space="preserve">
          <source>The form field class can be specified via the &lt;code&gt;form_class&lt;/code&gt; and &lt;code&gt;choices_form_class&lt;/code&gt; arguments; the latter is used if the field has choices specified, the former otherwise. If these arguments are not provided, &lt;a href=&quot;../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/forms/fields#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">フォームフィールドクラスは、 &lt;code&gt;form_class&lt;/code&gt; および &lt;code&gt;choices_form_class&lt;/code&gt; 引数を介して指定できます。後者は、フィールドに選択項目が指定されている場合に使用され、前者はそれ以外の場合に使用されます。これらの引数が提供されない場合、&lt;a href=&quot;../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../ref/forms/fields#django.forms.TypedChoiceField&quot;&gt; &lt;code&gt;TypedChoiceField&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="fa18bf982492fb4c002335a36b723ed98a5b1694" translate="yes" xml:space="preserve">
          <source>The form field class to use. Should be a subclass of &lt;a href=&quot;#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField&quot;&gt;&lt;code&gt;django.contrib.postgres.forms.BaseRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用するフォームフィールドクラス。&lt;a href=&quot;#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField&quot;&gt; &lt;code&gt;django.contrib.postgres.forms.BaseRangeField&lt;/code&gt; の&lt;/a&gt;サブクラスである必要があります。</target>
        </trans-unit>
        <trans-unit id="583c83c1cdf33703c4ff871f465e82072c61716f" translate="yes" xml:space="preserve">
          <source>The form field to use.</source>
          <target state="translated">使用するフォームフィールドです。</target>
        </trans-unit>
        <trans-unit id="99b3e54d8c3f892d70c3092d0e22b4adc50df480" translate="yes" xml:space="preserve">
          <source>The form field&amp;rsquo;s &lt;code&gt;help_text&lt;/code&gt; is set to the &lt;code&gt;help_text&lt;/code&gt; of the model field.</source>
          <target state="translated">フォームフィールドの &lt;code&gt;help_text&lt;/code&gt; は、モデルフィールドの &lt;code&gt;help_text&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="3831999900df601e13b4cc2b4d2801cb5e7b6676" translate="yes" xml:space="preserve">
          <source>The form field&amp;rsquo;s &lt;code&gt;label&lt;/code&gt; is set to the &lt;code&gt;verbose_name&lt;/code&gt; of the model field, with the first character capitalized.</source>
          <target state="translated">フォームフィールドの &lt;code&gt;label&lt;/code&gt; は、モデルフィールドの &lt;code&gt;verbose_name&lt;/code&gt; に設定され、最初の文字が大文字になります。</target>
        </trans-unit>
        <trans-unit id="61e26b1e4a05cc19e5e8fffbd68fa4a669f5a318" translate="yes" xml:space="preserve">
          <source>The form is automatically generated from the &lt;code&gt;Question&lt;/code&gt; model.</source>
          <target state="translated">フォームは &lt;code&gt;Question&lt;/code&gt; モデルから自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="b0384cc268ee77b3dff51bad13c22bf1aa965a02" translate="yes" xml:space="preserve">
          <source>The form rendering API</source>
          <target state="translated">フォームレンダリングAPI</target>
        </trans-unit>
        <trans-unit id="f574edc6f8e7cec3302c146e9cbb412039ad54eb" translate="yes" xml:space="preserve">
          <source>The form rendering process can be customized at several levels:</source>
          <target state="translated">フォームレンダリングプロセスは、いくつかのレベルでカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="a672d2e53a1a3d13a6ab486384ed5366c7b44352" translate="yes" xml:space="preserve">
          <source>The form subclass&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method can perform validation that requires access to multiple form fields. This is where you might put in checks such as &amp;ldquo;if field &lt;code&gt;A&lt;/code&gt; is supplied, field &lt;code&gt;B&lt;/code&gt; must contain a valid email address&amp;rdquo;. This method can return a completely different dictionary if it wishes, which will be used as the &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">フォームサブクラスの &lt;code&gt;clean()&lt;/code&gt; メソッドは、複数のフォームフィールドへのアクセスを必要とする検証を実行できます。ここで、「フィールド &lt;code&gt;A&lt;/code&gt; が指定されている場合、フィールド &lt;code&gt;B&lt;/code&gt; には有効なメールアドレスが含まれている必要がある」などのチェックを行うことができます。このメソッドは、必要に応じて完全に異なるディクショナリを返すことができます。これは、 &lt;code&gt;cleaned_data&lt;/code&gt; として使用されます。</target>
        </trans-unit>
        <trans-unit id="f5b4becd0d7d40a52a4b429db7292b68ea7f044f" translate="yes" xml:space="preserve">
          <source>The form&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute will tell you whether a form has data bound to it or not.</source>
          <target state="translated">フォームの&lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt;属性は、フォームにデータがバインドされているかどうかを通知します。</target>
        </trans-unit>
        <trans-unit id="e950b68fbdaf523aa7382e18b51c8a8cef51b3e5" translate="yes" xml:space="preserve">
          <source>The format in which this field&amp;rsquo;s initial value will be displayed.</source>
          <target state="translated">このフィールドの初期値が表示される形式。</target>
        </trans-unit>
        <trans-unit id="8b91cfbe0bdb4e0fd3f4c62f0a068f0cc91d0411" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;credentials&lt;/code&gt; argument depends on which &lt;a href=&quot;../auth/customizing#authentication-backends&quot;&gt;authentication backend&lt;/a&gt; you&amp;rsquo;re using (which is configured by your &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting). If you&amp;rsquo;re using the standard authentication backend provided by Django (&lt;code&gt;ModelBackend&lt;/code&gt;), &lt;code&gt;credentials&lt;/code&gt; should be the user&amp;rsquo;s username and password, provided as keyword arguments:</source>
          <target state="translated">&lt;code&gt;credentials&lt;/code&gt; 引数のフォーマットは、使用している&lt;a href=&quot;../auth/customizing#authentication-backends&quot;&gt;認証バックエンド&lt;/a&gt;（&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;設定で構成されている）によって異なります。Djangoが提供する標準の認証バックエンド（ &lt;code&gt;ModelBackend&lt;/code&gt; ）を使用している場合、 &lt;code&gt;credentials&lt;/code&gt; は、ユーザーのユーザー名とパスワードであり、キーワード引数として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="807e401f2ad8a08cbbac05cb7a265a5161065192" translate="yes" xml:space="preserve">
          <source>The format passed can also be one of the predefined ones &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt;&lt;code&gt;DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;. The predefined formats may vary depending on the current locale and if &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt; is enabled, e.g.:</source>
          <target state="translated">渡されるフォーマットは、事前定義された&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt; &lt;code&gt;DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt; の&lt;/a&gt;いずれかです。事前定義されたフォーマットは、現在のロケールによって、および&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;フォーマットのローカリゼーション&lt;/a&gt;が有効になっているかどうかによって異なります。例：</target>
        </trans-unit>
        <trans-unit id="951d43a269abf1da9010e4a3a479d4e95cf3e53a" translate="yes" xml:space="preserve">
          <source>The format passed can be one of the predefined ones &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt;&lt;code&gt;DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale.</source>
          <target state="translated">渡されるフォーマットは、事前定義された&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt; &lt;code&gt;DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt; &lt;/a&gt;いずれか、または上の表に示されているフォーマット指定子を使用するカスタムフォーマットです。事前定義されたフォーマットは、現在のロケールによって異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f066dbb865224cf294eed21302203dfe4cfd60fd" translate="yes" xml:space="preserve">
          <source>The formatting here is a bit simpler than with XML. The whole collection is just represented as an array and the objects are represented by JSON objects with three properties: &amp;ldquo;pk&amp;rdquo;, &amp;ldquo;model&amp;rdquo; and &amp;ldquo;fields&amp;rdquo;. &amp;ldquo;fields&amp;rdquo; is again an object containing each field&amp;rsquo;s name and value as property and property-value respectively.</source>
          <target state="translated">ここでのフォーマットは、XMLよりも少し単純です。コレクション全体は配列として表され、オブジェクトは「pk」、「model」、「fields」という3つのプロパティを持つJSONオブジェクトによって表されます。&amp;ldquo; fields&amp;rdquo;も、各フィールドの名前と値をそれぞれプロパティとプロパティ値として含むオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="9d586c1fb6a5074b5116ac82f29c5ec23f4cd5ce" translate="yes" xml:space="preserve">
          <source>The formatting string &lt;code&gt;'&quot;%Y-%m-%d %I:%M %p&quot;'&lt;/code&gt;. The return value from &lt;code&gt;split_contents()&lt;/code&gt; will include the leading and trailing quotes for string literals like this.</source>
          <target state="translated">フォーマット文字列 &lt;code&gt;'&quot;%Y-%m-%d %I:%M %p&quot;'&lt;/code&gt; 。 &lt;code&gt;split_contents()&lt;/code&gt; からの戻り値には、このような文字列リテラルの前後の引用符が含まれます。</target>
        </trans-unit>
        <trans-unit id="091f61dfdc46efca63677e49711c3d2d58217566" translate="yes" xml:space="preserve">
          <source>The formatting system is disabled by default. To enable it, it&amp;rsquo;s necessary to set &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N = True&lt;/code&gt;&lt;/a&gt; in your settings file.</source>
          <target state="translated">デフォルトでは、フォーマットシステムは無効になっています。これを有効にするには、設定ファイルで&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N = True&lt;/code&gt; &lt;/a&gt;に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef40a81d231b49fec1bb734bf46666ee33684758" translate="yes" xml:space="preserve">
          <source>The formset &lt;code&gt;clean&lt;/code&gt; method is called after all the &lt;code&gt;Form.clean&lt;/code&gt; methods have been called. The errors will be found using the &lt;code&gt;non_form_errors()&lt;/code&gt; method on the formset.</source>
          <target state="translated">formset &lt;code&gt;clean&lt;/code&gt; メソッドは、すべての &lt;code&gt;Form.clean&lt;/code&gt; メソッドが呼び出された後に呼び出されます。エラーは &lt;code&gt;non_form_errors()&lt;/code&gt; メソッドを使用して検出されます。</target>
        </trans-unit>
        <trans-unit id="4f08dd43eaf586c981739bb266dbdd204bdb5c7b" translate="yes" xml:space="preserve">
          <source>The framework also supports more complex feeds, via arguments.</source>
          <target state="translated">フレームワークは引数を介して、より複雑なフィードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="bd84135d1e1d25338f18a04a1803130b52cbc283" translate="yes" xml:space="preserve">
          <source>The framework is flexible and allows you to write functions that perform any other kind of check you may require. The following is an example stub check function:</source>
          <target state="translated">このフレームワークは柔軟性があり、必要に応じて他の種類のチェックを行う関数を書くことができます。以下はスタブチェック関数の例です。</target>
        </trans-unit>
        <trans-unit id="d7eca4abbb429fc35f394aa077d5c08f35e91bc2" translate="yes" xml:space="preserve">
          <source>The full Python path of the WSGI application object that Django&amp;rsquo;s built-in servers (e.g. &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt;) will use. The &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; management command will create a standard &lt;code&gt;wsgi.py&lt;/code&gt; file with an &lt;code&gt;application&lt;/code&gt; callable in it, and point this setting to that &lt;code&gt;application&lt;/code&gt;.</source>
          <target state="translated">Djangoの組み込みサーバー（&lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; など&lt;/a&gt;）が使用するWSGIアプリケーションオブジェクトの完全なPythonパス。&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;管理コマンドは、標準が作成されます &lt;code&gt;wsgi.py&lt;/code&gt; を持つファイル &lt;code&gt;application&lt;/code&gt; 、それで呼び出し可能にし、それにこの設定を指し &lt;code&gt;application&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="588b867bdf3639f979cc4fb9e70120dbc5a2e050" translate="yes" xml:space="preserve">
          <source>The full documentation for &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig format&lt;/a&gt; is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here are several examples.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig形式&lt;/a&gt;の完全なドキュメントは、構成辞書のロギングに関する最良の情報源です。ただし、可能なことを理解していただくために、いくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="ecb568036e6cb6bf57a247e9a736a4031dccbe19" translate="yes" xml:space="preserve">
          <source>The full list of hashers included in Django is:</source>
          <target state="translated">Django に含まれるハッシャーの完全なリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9564ebd548a987b4d37c857948ea4148889346c2" translate="yes" xml:space="preserve">
          <source>The full list of known directives can be found in the &lt;a href=&quot;https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml&quot;&gt;IANA registry&lt;/a&gt; (note that not all of them apply to responses).</source>
          <target state="translated">既知のディレクティブの完全なリストは、&lt;a href=&quot;https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml&quot;&gt;IANAレジストリにあります&lt;/a&gt;（それらすべてが応答に適用されるわけではないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="74fc1b13507793faaecffa2677ac4fb4d3c020f2" translate="yes" xml:space="preserve">
          <source>The full name of a template to use as defined by a string. Not defining a &lt;code&gt;template_name&lt;/code&gt; will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;django.core.exceptions.ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">文字列で定義された、使用するテンプレートの完全な名前。 &lt;code&gt;template_name&lt;/code&gt; を定義しないと、&lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;django.core.exceptions.ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="282a1cace02e8551ef4b6aa7ed546a316ad9259c" translate="yes" xml:space="preserve">
          <source>The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used. See the &lt;a href=&quot;../templates#template-loading&quot;&gt;template loading documentation&lt;/a&gt; for more information on how templates are found.</source>
          <target state="translated">使用するテンプレートの完全な名前またはテンプレート名のシーケンス。シーケンスが指定されている場合、存在する最初のテンプレートが使用されます。&lt;a href=&quot;../templates#template-loading&quot;&gt;テンプレートの&lt;/a&gt;検索方法の詳細については、テンプレートの読み込みに関するドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="be2f6fa485a5cbe314811ad48f8b60866792a2c8" translate="yes" xml:space="preserve">
          <source>The fully qualified domain name associated with the website. For example, &lt;code&gt;www.example.com&lt;/code&gt;.</source>
          <target state="translated">Webサイトに関連付けられた完全修飾ドメイン名。たとえば、 &lt;code&gt;www.example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f59c338fdbc478e21de6ac9b4ae49b88ce0d6dcf" translate="yes" xml:space="preserve">
          <source>The function for registering a converter for use in &lt;a href=&quot;#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;route&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;route&lt;/code&gt; で使用するコンバーターを登録するための関数。</target>
        </trans-unit>
        <trans-unit id="fb7eb0e34047e0db0288d374417d8af377ec403d" translate="yes" xml:space="preserve">
          <source>The function must return a list of messages. If no problems are found as a result of the check, the check function must return an empty list.</source>
          <target state="translated">この関数はメッセージのリストを返さなければなりません。チェックの結果、問題が見つからなかった場合、チェック関数は空のリストを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="c90057f940a2f81ee80c2b8670ebe400cb6cec2e" translate="yes" xml:space="preserve">
          <source>The function returns a &lt;code&gt;CurrentTimeNode&lt;/code&gt; with everything the node needs to know about this tag. In this case, it passes the argument &amp;ndash; &lt;code&gt;&quot;%Y-%m-%d %I:%M %p&quot;&lt;/code&gt;. The leading and trailing quotes from the template tag are removed in &lt;code&gt;format_string[1:-1]&lt;/code&gt;.</source>
          <target state="translated">この関数は、ノードがこのタグについて知る必要があるすべてのものを含む &lt;code&gt;CurrentTimeNode&lt;/code&gt; を返します。この場合、引数 &lt;code&gt;&quot;%Y-%m-%d %I:%M %p&quot;&lt;/code&gt; 渡します。テンプレートタグの先頭と末尾の引用符は、 &lt;code&gt;format_string[1:-1]&lt;/code&gt; 削除されます。</target>
        </trans-unit>
        <trans-unit id="eb7f14311c6859368ceb4f35ff9b61602e4345d0" translate="yes" xml:space="preserve">
          <source>The function you pass in will be called immediately after a hypothetical database write made where &lt;code&gt;on_commit()&lt;/code&gt; is called would be successfully committed.</source>
          <target state="translated">渡した関数は、 &lt;code&gt;on_commit()&lt;/code&gt; が呼び出された仮想データベース書き込みが正常にコミットされた直後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c6b98e770683bc89d9ec646af0f2c97a7347e16e" translate="yes" xml:space="preserve">
          <source>The functions defined in this module share the following properties:</source>
          <target state="translated">このモジュールで定義されている関数は、以下のプロパティを共有しています。</target>
        </trans-unit>
        <trans-unit id="c2710636be401ecc13a26e3bd4fbc1f235086f82" translate="yes" xml:space="preserve">
          <source>The functions documented on this page allow users to access geographic database functions to be used in annotations, aggregations, or filters in Django.</source>
          <target state="translated">このページに記載されている機能は、Django のアノテーション、集計、フィルタで使用する地理データベースの機能にアクセスするためのものです。</target>
        </trans-unit>
        <trans-unit id="af9082b19280b9d875a00f016656f474042e54b7" translate="yes" xml:space="preserve">
          <source>The general rules are:</source>
          <target state="translated">一般的なルールは</target>
        </trans-unit>
        <trans-unit id="c4b513220803b7b0034ba6c52e1af721f2fb5098" translate="yes" xml:space="preserve">
          <source>The general structure of geographic lookups is described below. A complete reference can be found in the &lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;spatial lookup reference&lt;/a&gt;.</source>
          <target state="translated">地理的ルックアップの一般的な構造を以下に説明します。完全な参照は、&lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;空間ルックアップ参照にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6c670a462552b45fbf82a4cda1f203ea59d36eac" translate="yes" xml:space="preserve">
          <source>The general usage of the command goes as follows:</source>
          <target state="translated">コマンドの一般的な使い方は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1b87d14170e903819192aed3d30ac0f90d04374c" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;Form&lt;/code&gt; class will have a form field for every model field specified, in the order specified in the &lt;code&gt;fields&lt;/code&gt; attribute.</source>
          <target state="translated">生成された &lt;code&gt;Form&lt;/code&gt; クラスには、 &lt;code&gt;fields&lt;/code&gt; 属性で指定された順序で、指定されたすべてのモデルフィールドのフォームフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="ebf227c2c996952dff43f13dd885130cdc09b054" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;DetailView&lt;/code&gt; class, of course, wouldn&amp;rsquo;t know anything about this field, but once again we could easily write a custom view to keep that field updated.</source>
          <target state="translated">もちろん、汎用の &lt;code&gt;DetailView&lt;/code&gt; クラスはこのフィールドについて何も知りませんが、このフィールドを更新し続けるためのカスタムビューを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="e41332eadaef4d72de9aa71ff598ebf6d3d1eeab" translate="yes" xml:space="preserve">
          <source>The geographic model, &lt;em&gt;not&lt;/em&gt; an instance.</source>
          <target state="translated">インスタンスで&lt;em&gt;はなく&lt;/em&gt;地理モデル。</target>
        </trans-unit>
        <trans-unit id="f5ab5d582c0f5f70e87126bf15fc71ebc8ece26d" translate="yes" xml:space="preserve">
          <source>The geography type provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). &lt;a href=&quot;#fngeography&quot; id=&quot;id17&quot;&gt;[6]&lt;/a&gt; Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data. Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units. In other words, when &lt;code&gt;ST_Distance&lt;/code&gt; is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84).</source>
          <target state="translated">geography型は、地理座標（例：WGS84経度/緯度）で表される空間フィーチャのネイティブサポートを提供します。&lt;a href=&quot;#fngeography&quot; id=&quot;id17&quot;&gt;[6]&lt;/a&gt;ジオメトリタイプで使用される平面とは異なり、ジオグラフィタイプはデータの球形表現を使用します。 geography列で実行される距離および測定操作は、自動的に大円弧計算を使用し、線形単位を返します。つまり、 &lt;code&gt;ST_Distance&lt;/code&gt; が2つの地域で呼び出されると、メートル単位の値が返されます（WGS84のジオメトリ列で呼び出された場合の度数とは対照的）。</target>
        </trans-unit>
        <trans-unit id="c57f23c04b673000485170d8d9bbff6823bba98c" translate="yes" xml:space="preserve">
          <source>The geospatial libraries required for a GeoDjango installation depends on the spatial database used. The following lists the library requirements, supported versions, and any notes for each of the supported database backends:</source>
          <target state="translated">GeoDjango のインストールに必要な地理空間ライブラリは、使用する空間データベースによって異なります。以下に、ライブラリの要件、サポートされているバージョン、サポートされているデータベースのバックエンドごとの注意事項を示します。</target>
        </trans-unit>
        <trans-unit id="1c9844a4155b9b448b9a51486d7b6f2807a8360e" translate="yes" xml:space="preserve">
          <source>The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is &lt;em&gt;always&lt;/em&gt; done (even if no arguments are passed in), any &lt;code&gt;&quot;%&quot;&lt;/code&gt; characters in the URL must be written as &lt;code&gt;&quot;%%&quot;&lt;/code&gt; so that Python will convert them to a single percent sign on output.</source>
          <target state="translated">指定されたURLには、辞書形式の文字列フォーマットが含まれている場合があります。これは、URLにキャプチャされたパラメータに対して補間されます。キーワードの補間は&lt;em&gt;常に&lt;/em&gt;行われるため（引数が渡されない場合でも）、URL内の &lt;code&gt;&quot;%&quot;&lt;/code&gt; 文字は &lt;code&gt;&quot;%%&quot;&lt;/code&gt; として記述し、Pythonが出力でそれらを単一のパーセント記号に変換するようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="fc191bf0febd09414996d702a9c62c8f107ede80" translate="yes" xml:space="preserve">
          <source>The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience.</source>
          <target state="translated">国際化とローカリゼーションの目標は、単一のウェブアプリケーションがオーディエンスに合わせた言語とフォーマットでコンテンツを提供できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="3048dc287034bf6cbc1205d1df0a759f2123e8cf" translate="yes" xml:space="preserve">
          <source>The goal of this document is to give you enough technical specifics to understand how Django works, but this isn&amp;rsquo;t intended to be a tutorial or reference &amp;ndash; but we&amp;rsquo;ve got both! When you&amp;rsquo;re ready to start a project, you can &lt;a href=&quot;tutorial01&quot;&gt;start with the tutorial&lt;/a&gt; or &lt;a href=&quot;../topics/index&quot;&gt;dive right into more detailed documentation&lt;/a&gt;.</source>
          <target state="translated">このドキュメントの目的は、Djangoがどのように機能するかを理解するのに十分な技術的詳細を提供することですが、これはチュートリアルやリファレンスを意図したものではありません。プロジェクトを開始する準備ができたら&lt;a href=&quot;tutorial01&quot;&gt;、チュートリアルから始める&lt;/a&gt;か&lt;a href=&quot;../topics/index&quot;&gt;、より詳細なドキュメントに飛び込む&lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="959e340bc8a6ce504a6fa2603d39631b162d857f" translate="yes" xml:space="preserve">
          <source>The golden rule of Web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected.</source>
          <target state="translated">ウェブアプリケーションのセキュリティの黄金律は、信頼されていないソースからのデータを決して信用しないことです。時には、信頼されていない媒体にデータを渡すことが有用な場合もあります。暗号署名された値を信頼されていないチャネルに渡すことで、改ざんが検出されるという安全性を確保することができます。</target>
        </trans-unit>
        <trans-unit id="2822ec0cce63f0494fd71f05e6618c21dc97532e" translate="yes" xml:space="preserve">
          <source>The handler class &amp;ndash; e.g. &lt;code&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; &amp;ndash; that handled the request.</source>
          <target state="translated">リクエストを処理したハンドラクラス（例： &lt;code&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="06f81b72f6c93ee4ace28197d9b6617d49e82e8b" translate="yes" xml:space="preserve">
          <source>The handler class, as above.</source>
          <target state="translated">上記のようなハンドラクラスです。</target>
        </trans-unit>
        <trans-unit id="488883d229389a6aee790c55f7009e741dbfe9a7" translate="yes" xml:space="preserve">
          <source>The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket.</source>
          <target state="translated">ハンドラは、ロガーの各メッセージに何が起こるかを決定するエンジンです。画面へのメッセージの書き込み、ファイルへの書き込み、ネットワークソケットへの書き込みなど、特定のロギング動作を記述します。</target>
        </trans-unit>
        <trans-unit id="14fa348067bababa21e545f935d5b8a24c49bb5e" translate="yes" xml:space="preserve">
          <source>The handler should return an &lt;code&gt;UploadedFile&lt;/code&gt; object that will be stored in &lt;code&gt;request.FILES&lt;/code&gt;. Handlers may also return &lt;code&gt;None&lt;/code&gt; to indicate that the &lt;code&gt;UploadedFile&lt;/code&gt; object should come from subsequent upload handlers.</source>
          <target state="translated">ハンドラーは、 &lt;code&gt;request.FILES&lt;/code&gt; に格納される &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトを返す必要があります。ハンドラーは &lt;code&gt;None&lt;/code&gt; を返し、 &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトが後続のアップロードハンドラーから取得されることを示す場合もあります。</target>
        </trans-unit>
        <trans-unit id="1b3fd8a933d2fa2497aaa96bb37795dd4c3f6cff" translate="yes" xml:space="preserve">
          <source>The headers sent via &lt;code&gt;**extra&lt;/code&gt; should follow &lt;a href=&quot;https://www.w3.org/CGI/&quot;&gt;CGI&lt;/a&gt; specification. For example, emulating a different &amp;ldquo;Host&amp;rdquo; header as sent in the HTTP request from the browser to the server should be passed as &lt;code&gt;HTTP_HOST&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;**extra&lt;/code&gt; 経由で送信されるヘッダーは、&lt;a href=&quot;https://www.w3.org/CGI/&quot;&gt;CGI&lt;/a&gt;仕様に従う必要があります。たとえば、ブラウザーからサーバーへのHTTPリクエストで送信される別の「Host」ヘッダーをエミュレートするには、 &lt;code&gt;HTTP_HOST&lt;/code&gt; として渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e6413e6097f1a28ecc70877c02a1bcacdde6b6a6" translate="yes" xml:space="preserve">
          <source>The headers you pass to &lt;code&gt;vary_on_headers&lt;/code&gt; are not case sensitive; &lt;code&gt;&quot;User-Agent&quot;&lt;/code&gt; is the same thing as &lt;code&gt;&quot;user-agent&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vary_on_headers&lt;/code&gt; に渡すヘッダーは大文字と小文字を区別しません。 &lt;code&gt;&quot;User-Agent&quot;&lt;/code&gt; は &lt;code&gt;&quot;user-agent&quot;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="279004f79673f28183163fa42dab5e85a0b670aa" translate="yes" xml:space="preserve">
          <source>The height of the band in pixels (Y-axis).</source>
          <target state="translated">バンドの高さをピクセル単位(Y軸)で表示します。</target>
        </trans-unit>
        <trans-unit id="df9d7b5469e23f9d6713c72b23f1eeec489b3c5f" translate="yes" xml:space="preserve">
          <source>The height of the source in pixels (Y-axis).</source>
          <target state="translated">ピクセル単位のソースの高さ(Y軸)。</target>
        </trans-unit>
        <trans-unit id="38b2861a27cfa38862983e658978a491a364c2ae" translate="yes" xml:space="preserve">
          <source>The help texts and any errors from password validators are always returned in the order they are listed in &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ヘルプテキストとパスワードバリデータからのエラーは常に、&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; に&lt;/a&gt;リストされている順序で返されます。</target>
        </trans-unit>
        <trans-unit id="4bc95354bdedb2bcc92a4ff72aa7b2c44670198e" translate="yes" xml:space="preserve">
          <source>The high-level feed-generating framework is supplied by the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. To create a feed, write a &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class and point to an instance of it in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="translated">高レベルのフィード生成フレームワークは&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスによって提供されます。フィードを作成するには、&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスを記述し、&lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;でそのインスタンスをポイントします。</target>
        </trans-unit>
        <trans-unit id="526b72f11a55f7c9d3fc861332686ce93c3ede70" translate="yes" xml:space="preserve">
          <source>The high-level framework</source>
          <target state="translated">高レベルフレームワーク</target>
        </trans-unit>
        <trans-unit id="906f6ac47d9f1e1dac6594aed6295ab440c7f48d" translate="yes" xml:space="preserve">
          <source>The hints received by the database router can be used to decide which database should receive a given request.</source>
          <target state="translated">データベースルータが受信したヒントは、与えられたリクエストをどのデータベースが受信すべきかを決定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="cd46fe4bd9ca3bc6fa098435eab462a49cd92f51" translate="yes" xml:space="preserve">
          <source>The host to use for sending email.</source>
          <target state="translated">メール送信に使用するホスト。</target>
        </trans-unit>
        <trans-unit id="79af06a2f9e9099fc33866f54328f8b8a35bd6d6" translate="yes" xml:space="preserve">
          <source>The human-readable name of the content type. This is taken from the &lt;a href=&quot;../models/fields#django.db.models.Field.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; attribute of the model.</source>
          <target state="translated">人間が読めるコンテンツタイプの名前。これは、モデルの&lt;a href=&quot;../models/fields#django.db.models.Field.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt;属性から取得されます。</target>
        </trans-unit>
        <trans-unit id="a12444918c81a571d3935f2f92a06c2901301347" translate="yes" xml:space="preserve">
          <source>The idea behind &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (&lt;code&gt;polls/urls.py&lt;/code&gt;), they can be placed under &amp;ldquo;/polls/&amp;rdquo;, or under &amp;ldquo;/fun_polls/&amp;rdquo;, or under &amp;ldquo;/content/polls/&amp;rdquo;, or any other path root, and the app will still work.</source>
          <target state="translated">&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; の&lt;/a&gt;背後にある考え方は、URLのプラグアンドプレイを簡単にすることです。投票は独自のURLconf（ &lt;code&gt;polls/urls.py&lt;/code&gt; ）にあるため、「/ polls /」、「/ fun_polls /」、「/ content / polls /」、またはその他のパスルートの下に配置できます。アプリは引き続き機能します。</target>
        </trans-unit>
        <trans-unit id="827f5d73a940731ae9ae899cc29fe8b76a857dcf" translate="yes" xml:space="preserve">
          <source>The idea here is to pass a list of items to your template, and have the template output the commas in a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop.</source>
          <target state="translated">ここでの考え方は、アイテムのリストをテンプレートに渡し、テンプレートに&lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ループでコンマを出力させることです。</target>
        </trans-unit>
        <trans-unit id="686b249314782c8f2e3e69ba4fac0bc6cf47e3c1" translate="yes" xml:space="preserve">
          <source>The implementation is:</source>
          <target state="translated">実装されています。</target>
        </trans-unit>
        <trans-unit id="1ce6a8179ec02fab89045ffdb995d78cf0aa55a7" translate="yes" xml:space="preserve">
          <source>The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all &lt;code&gt;User&lt;/code&gt; objects are in the &lt;code&gt;other&lt;/code&gt; database). If your usage of multiple databases is more complex, your &lt;code&gt;ModelAdmin&lt;/code&gt; will need to reflect that strategy.</source>
          <target state="translated">ここで提供される実装は、指定されたタイプのすべてのオブジェクトが特定のデータベースに格納されるマルチデータベース戦略を実装します（たとえば、すべての &lt;code&gt;User&lt;/code&gt; オブジェクトは &lt;code&gt;other&lt;/code&gt; データベースにあります）。複数のデータベースの使用がより複雑な場合、 &lt;code&gt;ModelAdmin&lt;/code&gt; はその戦略を反映する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfbef63857d84ecfe1d5db5997858631f5311bba" translate="yes" xml:space="preserve">
          <source>The import path of the field (e.g. &lt;code&gt;&quot;django.db.models.IntegerField&quot;&lt;/code&gt;). This should be the most portable version, so less specific may be better.</source>
          <target state="translated">フィールドのインポートパス（例： &lt;code&gt;&quot;django.db.models.IntegerField&quot;&lt;/code&gt; ）。これは最も移植性の高いバージョンであるため、具体性を低くする方が良い場合があります。</target>
        </trans-unit>
        <trans-unit id="903c7ec940f2bdc805e28cb4d1ce4a26a3cb1692" translate="yes" xml:space="preserve">
          <source>The important part here is the default ordering on the &lt;code&gt;name&lt;/code&gt; field. If you want to count how many times each distinct &lt;code&gt;data&lt;/code&gt; value appears, you might try this:</source>
          <target state="translated">ここで重要な部分は、 &lt;code&gt;name&lt;/code&gt; フィールドのデフォルトの順序です。個別の &lt;code&gt;data&lt;/code&gt; 値が出現する回数を数えたい場合は、これを試してみてください。</target>
        </trans-unit>
        <trans-unit id="f1dd0d68e1e337919314bda6d0e58cab51e8e98a" translate="yes" xml:space="preserve">
          <source>The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you &lt;strong&gt;should&lt;/strong&gt; use the same functions, so that the same values are returned every time.</source>
          <target state="translated">この例が示す重要なことは、同じ関数を使用して、すべての状況でETagおよび最終変更値を計算できることです。実際、同じ関数&lt;strong&gt;を&lt;/strong&gt;使用して、毎回同じ値が返されるようにする&lt;strong&gt;必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="27651fe7a7b1b9a60be00d387e3d436d308ffeab" translate="yes" xml:space="preserve">
          <source>The index of the layer to use from the Data Source (defaults to 0)</source>
          <target state="translated">データソースから使用するレイヤーのインデックス (デフォルトは 0)</target>
        </trans-unit>
        <trans-unit id="0505f906184c235c944c51abdcad4e4eee24921f" translate="yes" xml:space="preserve">
          <source>The index type of the constraint. Accepted values are &lt;code&gt;GIST&lt;/code&gt; or &lt;code&gt;SPGIST&lt;/code&gt;. Matching is case insensitive. If not provided, the default index type is &lt;code&gt;GIST&lt;/code&gt;.</source>
          <target state="translated">制約のインデックスタイプ。受け入れられる値は &lt;code&gt;GIST&lt;/code&gt; または &lt;code&gt;SPGIST&lt;/code&gt; です。マッチングでは大文字と小文字は区別されません。指定しない場合、デフォルトのインデックスタイプは &lt;code&gt;GIST&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="70e18b0c6e76404c1a43fa1188b2263602d7d0d7" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;filter(...)&lt;/code&gt; limits the subquery to the relevant parameters. &lt;code&gt;order_by()&lt;/code&gt; removes the default &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; (if any) on the &lt;code&gt;Comment&lt;/code&gt; model. &lt;code&gt;values('post')&lt;/code&gt; aggregates comments by &lt;code&gt;Post&lt;/code&gt;. Finally, &lt;code&gt;annotate(...)&lt;/code&gt; performs the aggregation. The order in which these queryset methods are applied is important. In this case, since the subquery must be limited to a single column, &lt;code&gt;values('total')&lt;/code&gt; is required.</source>
          <target state="translated">最初の &lt;code&gt;filter(...)&lt;/code&gt; は、サブクエリを関連パラメーターに制限します。 &lt;code&gt;order_by()&lt;/code&gt; は、 &lt;code&gt;Comment&lt;/code&gt; モデルのデフォルトの&lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt;（存在する場合）を削除します。 &lt;code&gt;values('post')&lt;/code&gt; は、 &lt;code&gt;Post&lt;/code&gt; によってコメントを集計します。最後に、 &lt;code&gt;annotate(...)&lt;/code&gt; が集計を実行します。これらのクエリセットメソッドが適用される順序は重要です。この場合、サブクエリは単一の列に限定する必要があるため、 &lt;code&gt;values('total')&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="4ae99aa0813c630c9763127e39bb49d8fbf92833" translate="yes" xml:space="preserve">
          <source>The initial serialization is usually very quick, but if you wish to exclude some apps from this process (and speed up test runs slightly), you may add those apps to &lt;a href=&quot;../../ref/settings#std:setting-TEST_NON_SERIALIZED_APPS&quot;&gt;&lt;code&gt;TEST_NON_SERIALIZED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、最初のシリアライゼーションは非常に高速ですが、このプロセスから一部のアプリを除外する場合（およびテストの実行をわずかに高速化する場合）、それらのアプリを&lt;a href=&quot;../../ref/settings#std:setting-TEST_NON_SERIALIZED_APPS&quot;&gt; &lt;code&gt;TEST_NON_SERIALIZED_APPS&lt;/code&gt; に&lt;/a&gt;追加できます。</target>
        </trans-unit>
        <trans-unit id="13f07b685c2d3fff938a316a1d8464961248d48e" translate="yes" xml:space="preserve">
          <source>The initial size of the DATAFILE.</source>
          <target state="translated">DATAFILEの初期サイズ。</target>
        </trans-unit>
        <trans-unit id="c7d913fd12d44256d53ae890b7cac955386e9677" translate="yes" xml:space="preserve">
          <source>The initial size of the DATAFILE_TMP.</source>
          <target state="translated">DATAFILE_TMPの初期サイズ。</target>
        </trans-unit>
        <trans-unit id="3fc11f804e222ff16131d5dcfe4115f55181b7d4" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;mysite/&lt;/code&gt; directory is the actual Python package for your project. Its name is the Python package name you&amp;rsquo;ll need to use to import anything inside it (e.g. &lt;code&gt;mysite.urls&lt;/code&gt;).</source>
          <target state="translated">内部の &lt;code&gt;mysite/&lt;/code&gt; ディレクトリは、プロジェクトの実際のPythonパッケージです。その名前は、その中にあるものをインポートするために使用する必要があるPythonパッケージ名です（例： &lt;code&gt;mysite.urls&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c3bd6a8f3a4add21ea334f3824942aa42870857c" translate="yes" xml:space="preserve">
          <source>The input doesn&amp;rsquo;t have to be a valid phone number. This will happily convert any string.</source>
          <target state="translated">入力は有効な電話番号である必要はありません。これはどんな文字列でも喜んで変換します。</target>
        </trans-unit>
        <trans-unit id="cc7d3dfc213be45fd0dda91957def3ef413d4078" translate="yes" xml:space="preserve">
          <source>The installed version of Django is now pointing at your local copy by installing in editable mode. You will immediately see any changes you make to it, which is of great help when writing your first patch.</source>
          <target state="translated">インストールされたバージョンの Django は、編集可能モードでインストールすることで、ローカルコピーを指すようになりました。これは最初のパッチを書くときに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3a54b2fb77ad1e2ace8e7aaa85c67e06d561a039" translate="yes" xml:space="preserve">
          <source>The instance namespace can be specified using the &lt;code&gt;namespace&lt;/code&gt; argument to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;. If the instance namespace is not specified, it will default to the included URLconf&amp;rsquo;s application namespace. This means it will also be the default instance for that namespace.</source>
          <target state="translated">インスタンスの名前空間は、&lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;namespace&lt;/code&gt; 引数を使用して指定できます。インスタンスの名前空間が指定されていない場合は、デフォルトで含まれているURLconfのアプリケーションの名前空間になります。つまり、その名前空間のデフォルトのインスタンスにもなります。</target>
        </trans-unit>
        <trans-unit id="327fc239e67b05332c729a1a6dcff3532f21a85b" translate="yes" xml:space="preserve">
          <source>The instance namespace for the URL pattern that matches the URL.</source>
          <target state="translated">URL に一致する URL パターンのインスタンス名前空間。</target>
        </trans-unit>
        <trans-unit id="b2396f9d13fca925ee1620e3dd75069cd1233334" translate="yes" xml:space="preserve">
          <source>The instance whose many-to-many relation is updated. This can be an instance of the &lt;code&gt;sender&lt;/code&gt;, or of the class the &lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; is related to.</source>
          <target state="translated">多対多の関係が更新されるインスタンス。これは、 &lt;code&gt;sender&lt;/code&gt; のインスタンス、または&lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;が関連するクラスのインスタンスにすることができます。</target>
        </trans-unit>
        <trans-unit id="a8c670fd72acff36aba31ee0e3d8973bff0bb2ea" translate="yes" xml:space="preserve">
          <source>The intermediate model class describing the &lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. This class is automatically created when a many-to-many field is defined; you can access it using the &lt;code&gt;through&lt;/code&gt; attribute on the many-to-many field.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;を説明する中間モデルクラス。このクラスは、多対多フィールドが定義されると自動的に作成されます。多対多フィールドの &lt;code&gt;through&lt;/code&gt; 属性を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a71d4f70fe7354d87df60818a9458133da88cbae" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;mpoly&lt;/code&gt; for the geometry field is &lt;code&gt;MULTIPOLYGON&lt;/code&gt;, the geometry type GeoDjango will import the field as. Even simple polygons in the shapefile will automatically be converted into collections prior to insertion into the database.</source>
          <target state="translated">ジオメトリフィールドの主な &lt;code&gt;mpoly&lt;/code&gt; は &lt;code&gt;MULTIPOLYGON&lt;/code&gt; です。ジオメトリタイプGeoDjangoはフィールドをインポートします。シェープファイル内の単純なポリゴンであっても、データベースに挿入する前に自動的にコレクションに変換されます。</target>
        </trans-unit>
        <trans-unit id="0d253cebe603f112f3f895dbf0509c3a56678625" translate="yes" xml:space="preserve">
          <source>The key concept of deploying with WSGI is the &lt;code&gt;application&lt;/code&gt; callable which the application server uses to communicate with your code. It&amp;rsquo;s commonly provided as an object named &lt;code&gt;application&lt;/code&gt; in a Python module accessible to the server.</source>
          <target state="translated">WSGIを使用したデプロイの主要な概念は、アプリケーションサーバーがコードとの通信に使用する &lt;code&gt;application&lt;/code&gt; 呼び出し可能です。一般に、サーバーにアクセスできるPythonモジュールの &lt;code&gt;application&lt;/code&gt; というオブジェクトとして提供されます。</target>
        </trans-unit>
        <trans-unit id="15d36ae477bf2ee387a5946d0eaa1e5e135fd1f7" translate="yes" xml:space="preserve">
          <source>The key for specifying which layer in the OGR &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the &lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt;. When inspecting databases, &lt;code&gt;layer&lt;/code&gt; is generally the table name you want to inspect.</source>
          <target state="translated">OGR &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;ソースで使用するレイヤーを指定するためのキー。デフォルトは0（最初のレイヤー）です。&lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; の&lt;/a&gt;整数または文字列識別子の場合があります。データベースを検査する場合、 &lt;code&gt;layer&lt;/code&gt; は通常、検査するテーブル名です。</target>
        </trans-unit>
        <trans-unit id="a1cd4510ad3a9d41263e923beb980ac31840cbb5" translate="yes" xml:space="preserve">
          <source>The key part to making this work is that when class-based views are called, various useful things are stored on &lt;code&gt;self&lt;/code&gt;; as well as the request (&lt;code&gt;self.request&lt;/code&gt;) this includes the positional (&lt;code&gt;self.args&lt;/code&gt;) and name-based (&lt;code&gt;self.kwargs&lt;/code&gt;) arguments captured according to the URLconf.</source>
          <target state="translated">この作業を行うための重要な部分は、クラスベースのビューが呼び出されると、さまざまな便利なものが &lt;code&gt;self&lt;/code&gt; に格納されることです。リクエスト（ &lt;code&gt;self.request&lt;/code&gt; ）だけでなく、URLconfに従ってキャプチャされた位置（ &lt;code&gt;self.args&lt;/code&gt; ）および名前ベース（ &lt;code&gt;self.kwargs&lt;/code&gt; ）の引数も含まれます。</target>
        </trans-unit>
        <trans-unit id="a3d2fd9865dee37e77f38260ea4a731c3c0639fe" translate="yes" xml:space="preserve">
          <source>The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django&amp;rsquo;s &lt;a href=&quot;../ref/request-response#django.http.FileResponse&quot;&gt;&lt;code&gt;FileResponse&lt;/code&gt;&lt;/a&gt; objects accept file-like objects.</source>
          <target state="translated">DjangoでPDFを動的に生成するための鍵は、ReportLab APIがファイルのようなオブジェクトに作用し、Djangoの&lt;a href=&quot;../ref/request-response#django.http.FileResponse&quot;&gt; &lt;code&gt;FileResponse&lt;/code&gt; &lt;/a&gt;オブジェクトがファイルのようなオブジェクトを受け入れることです。</target>
        </trans-unit>
        <trans-unit id="3b9a1387c8bd1a7371a4b2f433f8d17fd0bce075" translate="yes" xml:space="preserve">
          <source>The key-value pairs in the &lt;code&gt;data&lt;/code&gt; dictionary are used to create a GET data payload. For example:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; ディクショナリのキーと値のペアは、GETデータペイロードの作成に使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="c4929a8af44414d79cea8a1d7d30194782aa3382" translate="yes" xml:space="preserve">
          <source>The key-value pairs in the &lt;code&gt;data&lt;/code&gt; dictionary are used to submit POST data. For example:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; ディクショナリのキーと値のペアは、POSTデータの送信に使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="c9e59d34409d92156ac5184a2597b2e4eef66a0a" translate="yes" xml:space="preserve">
          <source>The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: &amp;lsquo;all&amp;rsquo;, &amp;lsquo;aural&amp;rsquo;, &amp;lsquo;braille&amp;rsquo;, &amp;lsquo;embossed&amp;rsquo;, &amp;lsquo;handheld&amp;rsquo;, &amp;lsquo;print&amp;rsquo;, &amp;lsquo;projection&amp;rsquo;, &amp;lsquo;screen&amp;rsquo;, &amp;lsquo;tty&amp;rsquo; and &amp;lsquo;tv&amp;rsquo;. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options &amp;ndash; one for the screen, and one for print:</source>
          <target state="translated">辞書のキーは出力メディアタイプです。これらは、メディア宣言のCSSファイルで受け入れられるものと同じタイプです：「all」、「aural」、「braille」、「embossed」、「handheld」、「print」、「projection」、「screen」、「tty」、「テレビ'。メディアタイプごとに異なるスタイルシートが必要な場合は、出力メディアごとにCSSファイルのリストを提供します。次の例は、2つのCSSオプションを提供します。1つは画面用で、もう1つは印刷用です。</target>
        </trans-unit>
        <trans-unit id="d723eb23edab6a34537328903d64215a5b5e7e57" translate="yes" xml:space="preserve">
          <source>The keys of the dict correspond to the month number (1-indexed) and the values are the displayed months:</source>
          <target state="translated">dictのキーは月番号(1インデックス)に対応し、値は表示されている月になります。</target>
        </trans-unit>
        <trans-unit id="dca7ffd65cac777a2f1f4df5638eef586c3cc716" translate="yes" xml:space="preserve">
          <source>The keyword arguments are made up of any named parts matched by the path expression that are provided, overridden by any arguments specified in the optional &lt;code&gt;kwargs&lt;/code&gt; argument to &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーワード引数は、提供されたパス式と一致する名前付きの部分で構成され、&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;django.urls.path()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt;のオプションの &lt;code&gt;kwargs&lt;/code&gt; 引数で指定された引数によってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="57f5e78e547c562b097f2832efdfa9bae4d73fe8" translate="yes" xml:space="preserve">
          <source>The keyword arguments are the names of the fields you&amp;rsquo;ve defined on your model. Note that instantiating a model in no way touches your database; for that, you need to &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーワード引数は、モデルで定義したフィールドの名前です。モデルをインスタンス化してもデータベースには影響しません。そのためには、&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2e4838421587a20985c74aae54a1df8aff83e90" translate="yes" xml:space="preserve">
          <source>The keyword arguments that would be passed to the view function, as parsed from the URL.</source>
          <target state="translated">ビュー関数に渡されるキーワード引数。</target>
        </trans-unit>
        <trans-unit id="397a7d054950e21b2c7e46349a34bdf7f4e621ef" translate="yes" xml:space="preserve">
          <source>The label of the field, e.g. &lt;code&gt;Email address&lt;/code&gt;.</source>
          <target state="translated">フィールドのラベル（例： &lt;code&gt;Email address&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23a2270c0c4fc0cd596055a1c5939ce8d8462b41" translate="yes" xml:space="preserve">
          <source>The last common pattern we&amp;rsquo;ll look at involves doing some extra work before or after calling the generic view.</source>
          <target state="translated">私たちが見る最後の一般的なパターンは、ジェネリックビューを呼び出す前または後に追加の作業を行うことを含みます。</target>
        </trans-unit>
        <trans-unit id="cd1af09749ab1a2fb64ffdab10d00f5c2ac04360" translate="yes" xml:space="preserve">
          <source>The last method in this example is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-property&quot;&gt;property&lt;/a&gt;.</source>
          <target state="translated">この例の最後のメソッドは&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-property&quot;&gt;プロパティ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ee094e288a920d1ee6d1e8f907851b28dc57dc5f" translate="yes" xml:space="preserve">
          <source>The last of these cases is the most interesting, because it&amp;rsquo;s what makes it possible for users not just to read a website, but to send information back to it too.</source>
          <target state="translated">これらの最後のケースは、ユーザーがWebサイトを読むだけでなく、情報を送信することも可能にするため、最も興味深いものです。</target>
        </trans-unit>
        <trans-unit id="3c9a607eff5b49e4627ffebd90e96258eb1f5054" translate="yes" xml:space="preserve">
          <source>The last step in setting up the Django admin is to hook your &lt;code&gt;AdminSite&lt;/code&gt; instance into your URLconf. Do this by pointing a given URL at the &lt;code&gt;AdminSite.urls&lt;/code&gt; method. It is not necessary to use &lt;a href=&quot;../../urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django管理者を設定する最後のステップは、 &lt;code&gt;AdminSite&lt;/code&gt; インスタンスをURLconfにフックすることです。これを行うには、 &lt;code&gt;AdminSite.urls&lt;/code&gt; メソッドで特定のURLをポイントします。&lt;a href=&quot;../../urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;を使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d2b39229a26808356444c79fae35166f8fac202c" translate="yes" xml:space="preserve">
          <source>The left-hand side - what is being looked up. The object must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;.</source>
          <target state="translated">左側-調べているもの。オブジェクトは&lt;a href=&quot;#query-expression&quot;&gt;クエリ式APIに&lt;/a&gt;従う必要があります。</target>
        </trans-unit>
        <trans-unit id="d0b77bd202a2e7aa818b9d2498b8971016e1fea3" translate="yes" xml:space="preserve">
          <source>The left-hand side - what is being transformed. It must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;.</source>
          <target state="translated">左側-変換されているもの。&lt;a href=&quot;#query-expression&quot;&gt;クエリ式APIに&lt;/a&gt;従う必要があります。</target>
        </trans-unit>
        <trans-unit id="2e3e8209a61aabc0a2a2ada2ecd908ce92ea854c" translate="yes" xml:space="preserve">
          <source>The length of the filename will not exceed &lt;code&gt;max_length&lt;/code&gt;, if provided. If a free unique filename cannot be found, a &lt;a href=&quot;../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousFileOperation&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">ファイル名の長さが指定されている場合、 &lt;code&gt;max_length&lt;/code&gt; を超えることはありません。無料の一意のファイル名が見つからない場合、&lt;a href=&quot;../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousFileOperation&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="8b61eb79e635aa3b16fc954aa02d7e91c66a6f94" translate="yes" xml:space="preserve">
          <source>The length of the filename will not exceed &lt;code&gt;max_length&lt;/code&gt;, if provided. If a free unique filename cannot be found, a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousFileOperation&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">ファイル名の長さが指定されている場合、 &lt;code&gt;max_length&lt;/code&gt; を超えることはありません。無料の一意のファイル名が見つからない場合、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousFileOperation&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="29278f4b394cdd3103ff91f8f8824b4ed2e41d8c" translate="yes" xml:space="preserve">
          <source>The lifetime of a database connection, in seconds. Use &lt;code&gt;0&lt;/code&gt; to close database connections at the end of each request &amp;mdash; Django&amp;rsquo;s historical behavior &amp;mdash; and &lt;code&gt;None&lt;/code&gt; for unlimited persistent connections.</source>
          <target state="translated">データベース接続の存続時間（秒単位）。各リクエストの最後でデータベース接続を閉じるには &lt;code&gt;0&lt;/code&gt; を使用します&amp;mdash; Djangoの歴史的な動作&amp;mdash; 無制限の永続的な接続では &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8002094dcdaed13967e206ea6c596a8581f87cef" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;{% if emails %}&lt;/code&gt; causes &lt;code&gt;QuerySet.__bool__()&lt;/code&gt; to be called, which causes the &lt;code&gt;user.emails.all()&lt;/code&gt; query to be run on the database, and at the least the first line to be turned into an ORM object. If there aren&amp;rsquo;t any results, it will return False, otherwise True.</source>
          <target state="translated">ライン &lt;code&gt;{% if emails %}&lt;/code&gt; せる &lt;code&gt;QuerySet.__bool__()&lt;/code&gt; 原因となる、と呼ばれて &lt;code&gt;user.emails.all()&lt;/code&gt; データベース上で実行されるクエリ、およびORMオブジェクトに点灯する少なくとも最初の行を。結果がない場合はFalseを返し、それ以外の場合はTrueを返します。</target>
        </trans-unit>
        <trans-unit id="1c0db0e2def9d1c60a37ee6be71cd32841316f4f" translate="yes" xml:space="preserve">
          <source>The list contains &lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;language codes&lt;/a&gt; for languages that are written right-to-left.</source>
          <target state="translated">リストには、右から左に書かれる言語の&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;言語コード&lt;/a&gt;が含まれています。</target>
        </trans-unit>
        <trans-unit id="3cba6b90fba80dd32a8751dcf84005a9eb6cb044" translate="yes" xml:space="preserve">
          <source>The list has a CSS class of &lt;code&gt;errorlist&lt;/code&gt; to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them:</source>
          <target state="translated">リストには、 &lt;code&gt;errorlist&lt;/code&gt; リストのCSSクラスがあり、外観をスタイル設定できます。エラーの表示をさらにカスタマイズしたい場合は、それらをループすることで実行できます。</target>
        </trans-unit>
        <trans-unit id="04a3a7512be2cac93b8b7366f0b94b5e1cc643c2" translate="yes" xml:space="preserve">
          <source>The list is a list of two-tuples in the format (&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;language code&lt;/a&gt;, &lt;code&gt;language name&lt;/code&gt;) &amp;ndash; for example, &lt;code&gt;('ja', 'Japanese')&lt;/code&gt;. This specifies which languages are available for language selection. See &lt;a href=&quot;../topics/i18n/index&quot;&gt;Internationalization and localization&lt;/a&gt;.</source>
          <target state="translated">リストは、 &lt;code&gt;('ja', 'Japanese')&lt;/code&gt; （&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;言語コード&lt;/a&gt;、 &lt;code&gt;language name&lt;/code&gt; ）という形式の2つのタプルのリストです。これは、言語選択に使用できる言語を指定します。&lt;a href=&quot;../topics/i18n/index&quot;&gt;国際化とローカリゼーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2473789b229bfa49a064e7682e7d17ab1a5ef564" translate="yes" xml:space="preserve">
          <source>The list is assumed to be in the proper format. For example, if &lt;code&gt;var&lt;/code&gt; contains &lt;code&gt;['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]&lt;/code&gt;, then &lt;code&gt;{{ var|unordered_list }}&lt;/code&gt; would return:</source>
          <target state="translated">リストは適切な形式であると見なされます。たとえば、 &lt;code&gt;var&lt;/code&gt; に &lt;code&gt;['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]&lt;/code&gt; 場合、 &lt;code&gt;{{ var|unordered_list }}&lt;/code&gt; は次を返します：</target>
        </trans-unit>
        <trans-unit id="5042ef027214a35401db2a04269eeae1dcdfa277" translate="yes" xml:space="preserve">
          <source>The list of HTTP method names that this view will accept.</source>
          <target state="translated">このビューが受け入れるHTTPメソッド名のリスト。</target>
        </trans-unit>
        <trans-unit id="ee0db22a92a601e8f0023ddb845b78e9fd77ffb7" translate="yes" xml:space="preserve">
          <source>The list of authentication backends to use is specified in the &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path.</source>
          <target state="translated">使用する認証バックエンドのリストは、&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;設定で指定されています。これは、認証方法を知っているPythonクラスを指すPythonパス名のリストである必要があります。これらのクラスは、Pythonパスのどこにでも置くことができます。</target>
        </trans-unit>
        <trans-unit id="7fa0e4449c48fd3fa3fb75ca38f7c6c879924afd" translate="yes" xml:space="preserve">
          <source>The list of fields that should be used to validate the field&amp;rsquo;s value (in the order in which they are provided).</source>
          <target state="translated">フィールドの値を検証するために使用する必要があるフィールドのリスト（提供された順序で）。</target>
        </trans-unit>
        <trans-unit id="5ce66ece9f717e1a77559246ccf1c6f1bcff631e" translate="yes" xml:space="preserve">
          <source>The list of finder backends that know how to find static files in various locations.</source>
          <target state="translated">様々な場所にある静的ファイルを見つける方法を知っているファインダーバックエンドの一覧です。</target>
        </trans-unit>
        <trans-unit id="1a5bbf66f2e405780ce14c2a3669f31d8ee1ecbd" translate="yes" xml:space="preserve">
          <source>The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key.</source>
          <target state="translated">キャッシュキー生成に使用するヘッダのリストは、ページ自体と同じキャッシュに格納されます。キャッシュがいくつかのデータをキャッシュから取り出してエージングする場合、これは Vary ヘッダを取得するためにレスポンスを一度ビルドしなければならないことを意味し、キャッシュキーに使用するヘッダのリストを取得しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="8df774fc40bf98740c1da86656bf921f29444310" translate="yes" xml:space="preserve">
          <source>The list of individual namespace components in the full application namespace for the URL pattern that matches the URL. For example, if the &lt;code&gt;app_name&lt;/code&gt; is &lt;code&gt;'foo:bar'&lt;/code&gt;, then &lt;code&gt;app_names&lt;/code&gt; will be &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">URLに一致するURLパターンの完全なアプリケーション名前空間の個々の名前空間コンポーネントのリスト。たとえば、 &lt;code&gt;app_name&lt;/code&gt; ある &lt;code&gt;'foo:bar'&lt;/code&gt; 、そして &lt;code&gt;app_names&lt;/code&gt; になります &lt;code&gt;['foo', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1f5b46e9e868a322fe41d3784408ab749a0239d" translate="yes" xml:space="preserve">
          <source>The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is &lt;code&gt;foo:bar&lt;/code&gt;, then namespaces will be &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">URLと一致するURLパターンの完全なインスタンス名前空間の個々の名前空間コンポーネントのリスト。名前空間がある場合、すなわち、 &lt;code&gt;foo:bar&lt;/code&gt; 、そして名前空間になります &lt;code&gt;['foo', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="352db1efbcfe1d21434a452de49b5bf6c094c19f" translate="yes" xml:space="preserve">
          <source>The list of objects on this page.</source>
          <target state="translated">このページのオブジェクトの一覧です。</target>
        </trans-unit>
        <trans-unit id="38c466c9ad4dc792c07b153c84ee1b4a51f84a21" translate="yes" xml:space="preserve">
          <source>The list of polls shows polls that aren&amp;rsquo;t published yet (i.e. those that have a &lt;code&gt;pub_date&lt;/code&gt; in the future). Let&amp;rsquo;s fix that.</source>
          <target state="translated">世論調査のリストには、まだ公開されていない世論調査（つまり、将来 &lt;code&gt;pub_date&lt;/code&gt; を持つ世論調査）が表示されます。修正しましょう。</target>
        </trans-unit>
        <trans-unit id="d32b0449e83211999f9608ac231c68d8ee1aeeeb" translate="yes" xml:space="preserve">
          <source>The list of routers that will be used to determine which database to use when performing a database query.</source>
          <target state="translated">データベースクエリを実行する際に、どのデータベースを使用するかを決定するために使用されるルータのリスト。</target>
        </trans-unit>
        <trans-unit id="d84dcd1f5e2293f80dda03ec41a237b17534de0c" translate="yes" xml:space="preserve">
          <source>The list of validators that are used to check the strength of user&amp;rsquo;s passwords. See &lt;a href=&quot;../topics/auth/passwords#password-validation&quot;&gt;Password validation&lt;/a&gt; for more details. By default, no validation is performed and all passwords are accepted.</source>
          <target state="translated">ユーザーのパスワードの強度をチェックするために使用されるバリデーターのリスト。詳細については、&lt;a href=&quot;../topics/auth/passwords#password-validation&quot;&gt;パスワードの検証&lt;/a&gt;を参照してください。デフォルトでは、検証は行われず、すべてのパスワードが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="be41c13b237df7e153278422285c9b3aae3b4560" translate="yes" xml:space="preserve">
          <source>The live server listens on &lt;code&gt;localhost&lt;/code&gt; and binds to port 0 which uses a free port assigned by the operating system. The server&amp;rsquo;s URL can be accessed with &lt;code&gt;self.live_server_url&lt;/code&gt; during the tests.</source>
          <target state="translated">ライブサーバーは &lt;code&gt;localhost&lt;/code&gt; でリッスンし、オペレーティングシステムによって割り当てられた空きポートを使用するポート0にバインドします。サーバーのURLは、テスト中に &lt;code&gt;self.live_server_url&lt;/code&gt; でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4f48b0167209c5587b0fe04291a526c08c33524f" translate="yes" xml:space="preserve">
          <source>The local filesystem path where the file can be opened using Python&amp;rsquo;s standard &lt;code&gt;open()&lt;/code&gt;. For storage systems that aren&amp;rsquo;t accessible from the local filesystem, this will raise &lt;code&gt;NotImplementedError&lt;/code&gt; instead.</source>
          <target state="translated">Pythonの標準 &lt;code&gt;open()&lt;/code&gt; を使用してファイルを開くことができるローカルファイルシステムパス。ローカルファイルシステムからアクセスできないストレージシステムの場合は、代わりに &lt;code&gt;NotImplementedError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="7a1061cdc3e5384fbeb5f9f675cd2e59f22fddb4" translate="yes" xml:space="preserve">
          <source>The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or an identifying name for a local memory cache. e.g.:</source>
          <target state="translated">使用するキャッシュの場所を指定します。これは、ファイルシステムキャッシュのディレクトリ、memcache サーバのホストとポート、あるいはローカルメモリキャッシュの識別名となります。</target>
        </trans-unit>
        <trans-unit id="d7e2ca0e60211a0cb354f673482c031189a40c08" translate="yes" xml:space="preserve">
          <source>The logger instance contains an entry method for each of the default log levels:</source>
          <target state="translated">ロガー インスタンスには、既定のログ レベルのそれぞれのエントリ メソッドが含まれます。</target>
        </trans-unit>
        <trans-unit id="a659c101e4877f63bce98cd3fb9fc2c0f7f25ac1" translate="yes" xml:space="preserve">
          <source>The logic here is that if you change the URL structure of your objects, even for something small like correcting a spelling error, you don&amp;rsquo;t want to have to track down every place that the URL might be created. Specify it once, in &lt;code&gt;get_absolute_url()&lt;/code&gt; and have all your other code call that one place.</source>
          <target state="translated">ここでのロジックは、オブジェクトのURL構造を変更する場合、つづりの誤りを訂正するような小さなことでも、URLが作成される可能性のあるすべての場所を追跡する必要はないということです。 &lt;code&gt;get_absolute_url()&lt;/code&gt; で一度指定して、他のすべてのコードで1つの場所を呼び出すようにします。</target>
        </trans-unit>
        <trans-unit id="687128deb38f53e7b71652784c2690bc5851ee61" translate="yes" xml:space="preserve">
          <source>The lookup API has two components: a &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt;&lt;code&gt;RegisterLookupMixin&lt;/code&gt;&lt;/a&gt; class that registers lookups, and the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;, a set of methods that a class has to implement to be registrable as a lookup.</source>
          <target state="translated">ルックアップAPIには2つのコンポーネントがあります。1つはルックアップを登録する&lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt; &lt;code&gt;RegisterLookupMixin&lt;/code&gt; &lt;/a&gt;クラス、もう1つはクラスがルックアップとして登録できるようにクラスが実装する必要がある一連のメソッドである&lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0276269b885cef976968811b2edeaa225cfd17d5" translate="yes" xml:space="preserve">
          <source>The lookup key &amp;mdash; &lt;code&gt;'django'&lt;/code&gt; in this example &amp;mdash; is the engine&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ルックアップキー（この例では &lt;code&gt;'django'&lt;/code&gt; ）はエンジンの&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4d740394561eb705a4868cc313d2df0c5ae0ff98" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt; in the above function definitions) should be in the format described in &lt;a href=&quot;#field-lookups&quot;&gt;Field lookups&lt;/a&gt; below.</source>
          <target state="translated">ルックアップパラメータ（上記の関数定義では &lt;code&gt;**kwargs&lt;/code&gt; ）は、以下の&lt;a href=&quot;#field-lookups&quot;&gt;フィールドルックアップで&lt;/a&gt;説明されている形式である必要があります。</target>
        </trans-unit>
        <trans-unit id="c1aa2d8b25c68a3972c459d52d5d1df4453e745e" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt;) should be in the format described in &lt;a href=&quot;#id4&quot;&gt;Field lookups&lt;/a&gt; below. Multiple parameters are joined via &lt;code&gt;AND&lt;/code&gt; in the underlying SQL statement, and the whole thing is enclosed in a &lt;code&gt;NOT()&lt;/code&gt;.</source>
          <target state="translated">ルックアップパラメータ（ &lt;code&gt;**kwargs&lt;/code&gt; ）は、以下の&lt;a href=&quot;#id4&quot;&gt;フィールドルックアップで&lt;/a&gt;説明されている形式である必要があります。基になるSQLステートメントで複数のパラメーターが &lt;code&gt;AND&lt;/code&gt; を介して結合され、全体が &lt;code&gt;NOT()&lt;/code&gt; で囲まれています。</target>
        </trans-unit>
        <trans-unit id="8624505a11a1f96bc7dedf399ff95d5f7f44e9a7" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt;) should be in the format described in &lt;a href=&quot;#id4&quot;&gt;Field lookups&lt;/a&gt; below. Multiple parameters are joined via &lt;code&gt;AND&lt;/code&gt; in the underlying SQL statement.</source>
          <target state="translated">ルックアップパラメータ（ &lt;code&gt;**kwargs&lt;/code&gt; ）は、以下の&lt;a href=&quot;#id4&quot;&gt;フィールドルックアップで&lt;/a&gt;説明されている形式である必要があります。複数のパラメーターは、基になるSQLステートメントで &lt;code&gt;AND&lt;/code&gt; を介して結合されます。</target>
        </trans-unit>
        <trans-unit id="9c54a4c642c9e6f0c9ae93e6eab22d2b4de903fd" translate="yes" xml:space="preserve">
          <source>The low level APIs are only useful if you&amp;rsquo;re implementing your own transaction management.</source>
          <target state="translated">低レベルAPIは、独自のトランザクション管理を実装する場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="526a0d5ca4718e8069fe06342982ba02ef02340b" translate="yes" xml:space="preserve">
          <source>The low level APIs for savepoints are only usable inside a transaction ie. inside an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">セーブポイントの低レベルAPIは、トランザクション内でのみ使用できます。内部&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロック。</target>
        </trans-unit>
        <trans-unit id="b0ca2d43ff9da88d8e9a9e84a1dde1af555645e3" translate="yes" xml:space="preserve">
          <source>The low-level cache API</source>
          <target state="translated">低レベルのキャッシュ API</target>
        </trans-unit>
        <trans-unit id="3e4ac3cef9202e0612f4766b7c338a2d2967c8d9" translate="yes" xml:space="preserve">
          <source>The low-level framework</source>
          <target state="translated">低レベルフレームワーク</target>
        </trans-unit>
        <trans-unit id="a2521b2e894f8fd863f1d83feddb4c441a705c60" translate="yes" xml:space="preserve">
          <source>The low-level render API</source>
          <target state="translated">低レベルのレンダー API</target>
        </trans-unit>
        <trans-unit id="9a130d432120892a195d3e0022cff8a6aafc70ad" translate="yes" xml:space="preserve">
          <source>The lower-left coordinate, as a tuple.</source>
          <target state="translated">タプルとしての左下座標。</target>
        </trans-unit>
        <trans-unit id="cc7f347ba6ea37d89eb064fb060fa13066ba1124" translate="yes" xml:space="preserve">
          <source>The main benefit of using &lt;a href=&quot;expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt; is that you can set &lt;code&gt;output_field&lt;/code&gt; if needed. The main downside is that if you refer to some table alias of the queryset in the raw SQL, then it is possible that Django might change that alias (for example, when the queryset is used as a subquery in yet another query).</source>
          <target state="translated">&lt;a href=&quot;expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt;を使用する主な利点は、必要に応じて &lt;code&gt;output_field&lt;/code&gt; を設定できることです。主な欠点は、生のSQLでクエリセットのテーブルエイリアスを参照する場合、Djangoがそのエイリアスを変更する可能性があることです（たとえば、クエリセットがさらに別のクエリでサブクエリとして使用される場合）。</target>
        </trans-unit>
        <trans-unit id="029d2026069ff1a0dc50a63a4caae4c10a9f46a3" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; is that &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; opens a connection to the mail server each time it&amp;rsquo;s executed, while &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; uses a single connection for all of its messages. This makes &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; slightly more efficient.</source>
          <target state="translated">&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;の主な違いは、&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;が実行されるたびにメールサーバーへの接続を開くのに対して、&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;はすべてのメッセージに対して単一の接続を使用することです。これにより、&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; が&lt;/a&gt;少し効率的になります。</target>
        </trans-unit>
        <trans-unit id="ee849a007c2cc0544bfee8bbc54e8a9c99cb790d" translate="yes" xml:space="preserve">
          <source>The main drawbacks of &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt; are that it doesn&amp;rsquo;t support transactions or enforce foreign-key constraints.</source>
          <target state="translated">&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt;の主な欠点は、トランザクションをサポートしていないか、外部キーの制約を適用できないことです。</target>
        </trans-unit>
        <trans-unit id="b716970f259f9a6cd2b19a9671b50a7df6b1fc2e" translate="yes" xml:space="preserve">
          <source>The main solution to these problems is the following &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view, which generates a JavaScript code library with functions that mimic the &lt;code&gt;gettext&lt;/code&gt; interface, plus an array of translation strings.</source>
          <target state="translated">これらの問題の主な解決策は、次の &lt;code&gt;JavaScriptCatalog&lt;/code&gt; ビューです。このビューは、 &lt;code&gt;gettext&lt;/code&gt; インターフェースを模倣する関数と翻訳文字列の配列を含むJavaScriptコードライブラリを生成します。</target>
        </trans-unit>
        <trans-unit id="f336b635d846500908b16d31047dfb778ce719ad" translate="yes" xml:space="preserve">
          <source>The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering &lt;code&gt;{{ my_formset.management_form }}&lt;/code&gt; (substituting the name of your formset as appropriate).</source>
          <target state="translated">管理フォームは、フォームセット自体の属性として使用できます。テンプレートに &lt;code&gt;{{ my_formset.management_form }}&lt;/code&gt; レンダリングする場合、{{my_formset.management_form}}をレンダリングすることで（必要に応じてフォームセットの名前を置き換えて）すべての管理データを含めることができます。</target>
        </trans-unit>
        <trans-unit id="975428386ba20246f9798d41d057f93b042f465c" translate="yes" xml:space="preserve">
          <source>The master class-based base view. All other class-based views inherit from this base class. It isn&amp;rsquo;t strictly a generic view and thus can also be imported from &lt;code&gt;django.views&lt;/code&gt;.</source>
          <target state="translated">マスタークラスベースのベースビュー。他のすべてのクラスベースのビューは、この基本クラスを継承します。これは厳密には汎用的なビューではないため、 &lt;code&gt;django.views&lt;/code&gt; からインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="77d55017d73e6f752fb81670f8b49fb4a767c01e" translate="yes" xml:space="preserve">
          <source>The master router is used by Django&amp;rsquo;s database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current &lt;code&gt;_state.db&lt;/code&gt; of the hint instance. If a hint instance wasn&amp;rsquo;t provided, or the instance doesn&amp;rsquo;t currently have database state, the master router will allocate the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">マスタールーターは、Djangoのデータベース操作でデータベースの使用を割り当てるために使用されます。クエリは、使用するデータベースを知る必要があるときはいつでも、マスタールーターを呼び出し、モデルとヒント（利用可能な場合）を提供します。Djangoは、データベースの提案が見つかるまで、各ルーターを順番に試します。提案が見つからない場合は、ヒントインスタンスの現在の &lt;code&gt;_state.db&lt;/code&gt; を試します。ヒントインスタンスが提供されなかった場合、またはインスタンスに現在データベースの状態がない場合、マスタールーターは &lt;code&gt;default&lt;/code&gt; データベースを割り当てます。</target>
        </trans-unit>
        <trans-unit id="620f9f971ca7545e2e1072b17b40e60ee0cb0c8d" translate="yes" xml:space="preserve">
          <source>The match mode for &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;の一致モード。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f1e513aead5b12255955659b8cf2b80be1b6b580" translate="yes" xml:space="preserve">
          <source>The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django&amp;rsquo;s validation using &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドの最大長（文字数）。max_lengthはデータベースレベルで適用され、Djangoの検証では&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="037bd1a1440adda1a291120295b62497fe60ae9e" translate="yes" xml:space="preserve">
          <source>The maximum length (in characters) of the field. The maximum length is enforced in Django&amp;rsquo;s validation using &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドの最大長（文字数）。最大長は、&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;を使用したDjangoの検証で適用されます。</target>
        </trans-unit>
        <trans-unit id="3f6963c8f2a731388e55b8dfecc905f73dd376bc" translate="yes" xml:space="preserve">
          <source>The maximum number of decimal places permitted.</source>
          <target state="translated">許容される小数点以下の最大桁数。</target>
        </trans-unit>
        <trans-unit id="ec30906753aab508c52a426c8da02b4a98b905f8" translate="yes" xml:space="preserve">
          <source>The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value.</source>
          <target state="translated">値の中で許容される最大桁数(小数点以下の桁数に小数点以下の桁数を加えたもので、先頭のゼロを取り除いたもの)。</target>
        </trans-unit>
        <trans-unit id="7a22f82bc47caf7130f3beae0f8f8e382172fe51" translate="yes" xml:space="preserve">
          <source>The maximum number of digits allowed in the number. Note that this number must be greater than or equal to &lt;code&gt;decimal_places&lt;/code&gt;.</source>
          <target state="translated">数値で許可される最大桁数。この数は &lt;code&gt;decimal_places&lt;/code&gt; 以上でなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c167eb262474d9d7649cc6b34d6aa61157de151d" translate="yes" xml:space="preserve">
          <source>The maximum number of parameters that may be received via GET or POST before a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;TooManyFields&lt;/code&gt;) is raised. You can set this to &lt;code&gt;None&lt;/code&gt; to disable the check. Applications that are expected to receive an unusually large number of form fields should tune this setting.</source>
          <target state="translated">&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;TooManyFields&lt;/code&gt; ）が発生する前にGETまたはPOSTを介して受信できるパラメーターの最大数。これを「 &lt;code&gt;None&lt;/code&gt; に設定して、チェックを無効にすることができます。非常に多くのフォームフィールドを受け取ることが予想されるアプリケーションでは、この設定を調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="682cb5709db5299d33be45387c00d3db6138f770" translate="yes" xml:space="preserve">
          <source>The maximum pixel value of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドの最大ピクセル値（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="6d57b41141db2056397f4308084ace5a47400304" translate="yes" xml:space="preserve">
          <source>The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See &lt;a href=&quot;../topics/files&quot;&gt;Managing files&lt;/a&gt; for details.</source>
          <target state="translated">アップロードがファイルシステムにストリーミングされる前の最大サイズ（バイト単位）。詳細については、&lt;a href=&quot;../topics/files&quot;&gt;ファイルの管理&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a98e6ed2d92323b4e4a1333e3d67c09094b6976" translate="yes" xml:space="preserve">
          <source>The maximum size in bytes that a request body may be before a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;RequestDataTooBig&lt;/code&gt;) is raised. The check is done when accessing &lt;code&gt;request.body&lt;/code&gt; or &lt;code&gt;request.POST&lt;/code&gt; and is calculated against the total request size excluding any file upload data. You can set this to &lt;code&gt;None&lt;/code&gt; to disable the check. Applications that are expected to receive unusually large form posts should tune this setting.</source>
          <target state="translated">&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;RequestDataTooBig&lt;/code&gt; ）が発生する前のリクエストボディの最大サイズ（バイト単位）。チェックは、 &lt;code&gt;request.body&lt;/code&gt; または &lt;code&gt;request.POST&lt;/code&gt; にアクセスするときに行われ、ファイルアップロードデータを除いたリクエストの合計サイズに対して計算されます。これを「 &lt;code&gt;None&lt;/code&gt; に設定して、チェックを無効にすることができます。異常に大きなフォームの投稿を受け取ることが予想されるアプリケーションでは、この設定を調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="1874b9e490548adb53b57fe2086e057e8651752c" translate="yes" xml:space="preserve">
          <source>The maximum size that the DATAFILE is allowed to grow to.</source>
          <target state="translated">DATAFILEが成長することが許される最大サイズ。</target>
        </trans-unit>
        <trans-unit id="7a59a68017db3ce10acbaf32799a35c947e9f15b" translate="yes" xml:space="preserve">
          <source>The maximum size that the DATAFILE_TMP is allowed to grow to.</source>
          <target state="translated">DATAFILE_TMP が成長することができる最大サイズ。</target>
        </trans-unit>
        <trans-unit id="fd1fc8f8d716647e7a02404093fe6dca1f7e22bc" translate="yes" xml:space="preserve">
          <source>The mean of all pixel values of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドのすべてのピクセル値の平均（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="c2bb72583b48a36e3f3b76cffb04451146899512" translate="yes" xml:space="preserve">
          <source>The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed).</source>
          <target state="translated">メッセージは、ストレージインスタンスが反復処理されたときにクリアされるようにマークされています(レスポンスが処理されたときにクリアされます)。</target>
        </trans-unit>
        <trans-unit id="679921afb83b3374dbeb1f6690418b9b230e09d7" translate="yes" xml:space="preserve">
          <source>The messages framework</source>
          <target state="translated">メッセージフレームワーク</target>
        </trans-unit>
        <trans-unit id="bcaf4e14ba9ce595c2d57efd12477862d5fbecfc" translate="yes" xml:space="preserve">
          <source>The messages framework can use different backends to store temporary messages.</source>
          <target state="translated">messages フレームワークは一時的なメッセージを保存するために異なるバックエンドを使うことができます。</target>
        </trans-unit>
        <trans-unit id="946da20094bf98a1fbc1a7e70434b878af7c1ec5" translate="yes" xml:space="preserve">
          <source>The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates.</source>
          <target state="translated">メッセージフレームワークは、Python のロギングモジュールに似た設定可能なレベルアーキテクチャに基づいています。メッセージレベルでは、タイプ別にメッセージをグループ化して、ビューやテンプレートの中でフィルタリングしたり、異なる表示をしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="abc5ff0981a223de9d7ebc8dbe2c56ed3a022401" translate="yes" xml:space="preserve">
          <source>The metadata of this band. The functionality is identical to &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.metadata&quot;&gt;&lt;code&gt;GDALRaster.metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このバンドのメタデータ。機能は&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.metadata&quot;&gt; &lt;code&gt;GDALRaster.metadata&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="05c7d47a95b26a5b7b622a8b38916086f695d65f" translate="yes" xml:space="preserve">
          <source>The metadata of this raster, represented as a nested dictionary. The first-level key is the metadata domain. The second-level contains the metadata item names and values from each domain.</source>
          <target state="translated">このラスタのメタデータは、入れ子になった辞書として表現されます。第1レベルのキーはメタデータのドメインです。第2レベルには、各ドメインのメタデータ項目名と値が格納されています。</target>
        </trans-unit>
        <trans-unit id="7da5ce0b0d9eb842fded76cda2aa56ff0449f389" translate="yes" xml:space="preserve">
          <source>The method doesn&amp;rsquo;t need to verify that the template exists at a given path, but it should ensure the path is valid. For instance, the filesystem loader makes sure the path lies under a valid template directory.</source>
          <target state="translated">メソッドは、テンプレートが特定のパスに存在することを確認する必要はありませんが、パスが有効であることを確認する必要があります。たとえば、ファイルシステムローダーは、パスが有効なテンプレートディレクトリの下にあることを確認します。</target>
        </trans-unit>
        <trans-unit id="2d4e0bb3536d92174306b64eb9b3f91b660fca55" translate="yes" xml:space="preserve">
          <source>The method that is used when creating the hashed name of a file. Needs to return a hash for the given file name and content. By default it calculates a MD5 hash from the content&amp;rsquo;s chunks as mentioned above. Feel free to override this method to use your own hashing algorithm.</source>
          <target state="translated">ファイルのハッシュ化された名前を作成するときに使用される方法。指定されたファイル名とコンテンツのハッシュを返す必要があります。デフォルトでは、前述のようにコンテンツのチャンクからMD5ハッシュを計算します。このメソッドをオーバーライドして、独自のハッシュアルゴリズムを使用してください。</target>
        </trans-unit>
        <trans-unit id="e02ff96a70373150944fa3cf71734857d0e73b34" translate="yes" xml:space="preserve">
          <source>The method&amp;rsquo;s result affects whether or not a field in a model form &lt;a href=&quot;../../topics/forms/modelforms#topics-modelform-save&quot;&gt;falls back to its default&lt;/a&gt;.</source>
          <target state="translated">メソッドの結果は、モデルフォームのフィールドが&lt;a href=&quot;../../topics/forms/modelforms#topics-modelform-save&quot;&gt;デフォルトに戻る&lt;/a&gt;かどうかに影響します。</target>
        </trans-unit>
        <trans-unit id="2b9e9d922de37731b658ab20d1cffacd6cb0024c" translate="yes" xml:space="preserve">
          <source>The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site.</source>
          <target state="translated">このミドルウェアは、サードパーティのサイトでページをフレームで包む必要がないサイトや、サイトの一部だけをフレームで包む必要があるサイトに強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="501246c391913f153cfb889b8189b3100c025574" translate="yes" xml:space="preserve">
          <source>The middleware only gets activated for 404s &amp;ndash; not for 500s or responses of any other status code.</source>
          <target state="translated">ミドルウェアは404でのみアクティブ化されます。500や他のステータスコードの応答ではアクティブ化されません。</target>
        </trans-unit>
        <trans-unit id="f71b0623a74c63465319f60222a670ec071a2028" translate="yes" xml:space="preserve">
          <source>The middleware will only add a trailing slash and redirect (by looking at the &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; setting) if the resulting URL refers to a valid flatpage. Redirects are permanent (301 status code).</source>
          <target state="translated">結果のURLが有効なフラットページを参照している場合、ミドルウェアは末尾のスラッシュとリダイレクト（&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt;設定を確認することによって）のみを追加します。リダイレクトは永続的です（301ステータスコード）。</target>
        </trans-unit>
        <trans-unit id="c20fbe3e7feb8c8f6800c64fcd3427aa71102dbd" translate="yes" xml:space="preserve">
          <source>The migration files for each app live in a &amp;ldquo;migrations&amp;rdquo; directory inside of that app, and are designed to be committed to, and distributed as part of, its codebase. You should be making them once on your development machine and then running the same migrations on your colleagues&amp;rsquo; machines, your staging machines, and eventually your production machines.</source>
          <target state="translated">各アプリの移行ファイルは、そのアプリ内の「migrations」ディレクトリにあり、そのコードベースにコミットされ、その一部として配布されるように設計されています。開発マシンで一度作成してから、同僚のマシン、ステージングマシン、そして最終的には本番マシンで同じ移行を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="2149c96c766867703d83ae08713e6f458df2b430" translate="yes" xml:space="preserve">
          <source>The migration plan that is going to be used for the migration run. While the plan is not public API, this allows for the rare cases when it is necessary to know the plan. A plan is a list of two-tuples with the first item being the instance of a migration class and the second item showing if the migration was rolled back (&lt;code&gt;True&lt;/code&gt;) or applied (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">移行の実行に使用される予定の移行計画。計画はパブリックAPIではありませんが、これにより、計画を知る必要があるまれなケースが可能になります。プランは2タプルのリストで、最初の項目は移行クラスのインスタンスで、2番目の項目は移行がロールバックされたか（ &lt;code&gt;True&lt;/code&gt; ）、適用されたか（ &lt;code&gt;False&lt;/code&gt; ）を示します。</target>
        </trans-unit>
        <trans-unit id="12a8e64c1a85376f2269b1de4266fc493270fecd" translate="yes" xml:space="preserve">
          <source>The migration plan that was used for the migration run. While the plan is not public API, this allows for the rare cases when it is necessary to know the plan. A plan is a list of two-tuples with the first item being the instance of a migration class and the second item showing if the migration was rolled back (&lt;code&gt;True&lt;/code&gt;) or applied (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">移行の実行に使用された移行計画。計画はパブリックAPIではありませんが、これにより、計画を知る必要があるまれなケースが可能になります。プランは2タプルのリストで、最初の項目は移行クラスのインスタンスで、2番目の項目は移行がロールバックされたか（ &lt;code&gt;True&lt;/code&gt; ）、適用されたか（ &lt;code&gt;False&lt;/code&gt; ）を示します。</target>
        </trans-unit>
        <trans-unit id="0251ce19e6e1513662181aba489dd0c06a5da39d" translate="yes" xml:space="preserve">
          <source>The migrations system will maintain backwards-compatibility according to the same policy as the rest of Django, so migration files generated on Django X.Y should run unchanged on Django X.Y+1. The migrations system does not promise forwards-compatibility, however. New features may be added, and migration files generated with newer versions of Django may not work on older versions.</source>
          <target state="translated">移行システムは Django の他の部分と同じポリシーに従って後方互換性を維持しますので、Django X.Y で生成された移行ファイルは Django X.Y+1 でも変更されずに実行されます。しかし、移行システムは前方互換性を約束するものではありません。新しい機能が追加されるかもしれませんし、新しいバージョンの Django で生成されたマイグレーションファイルは古いバージョンでは動作しないかもしれません。</target>
        </trans-unit>
        <trans-unit id="04d66b29b059dd9530bfc58fdebce59ae171833c" translate="yes" xml:space="preserve">
          <source>The minimal validation requirements, used in Django&amp;rsquo;s admin and in automatically-generated forms.</source>
          <target state="translated">Djangoの管理と自動生成フォームで使用される最小限の検証要件。</target>
        </trans-unit>
        <trans-unit id="1df48ef6226a94c112197d2f533e7ea705cedf6e" translate="yes" xml:space="preserve">
          <source>The minimum number of days a password reset link is valid for. Depending on when the link is generated, it will be valid for up to a day longer.</source>
          <target state="translated">パスワード リセット リンクが有効な日数の最小値です。リンクが生成された時期にもよりますが、最大で1日長く有効になります。</target>
        </trans-unit>
        <trans-unit id="e313352f5e679e2d560c6a24206ddca8e84ac7e7" translate="yes" xml:space="preserve">
          <source>The minimum pixel value of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドの最小ピクセル値（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="aaed376ec9d4dae9a50bea944365a91b33edcf17" translate="yes" xml:space="preserve">
          <source>The minimum recorded level can be set per request via the &lt;code&gt;set_level&lt;/code&gt; method:</source>
          <target state="translated">記録される最小レベルは、 &lt;code&gt;set_level&lt;/code&gt; メソッドを介してリクエストごとに設定できます。</target>
        </trans-unit>
        <trans-unit id="ed8df49b558cefc42176a09c3feb3114d44b1599" translate="yes" xml:space="preserve">
          <source>The minimum similarity of a rejected password can be set on a scale of 0 to 1 with the &lt;code&gt;max_similarity&lt;/code&gt; parameter. A setting of 0 rejects all passwords, whereas a setting of 1 rejects only passwords that are identical to an attribute&amp;rsquo;s value.</source>
          <target state="translated">拒否されたパスワードの最小類似性は、 &lt;code&gt;max_similarity&lt;/code&gt; パラメーターを使用して0から1のスケールで設定できます。0に設定するとすべてのパスワードが拒否され、1に設定すると属性の値と同一のパスワードのみが拒否されます。</target>
        </trans-unit>
        <trans-unit id="c115df3ebc9de1ceafe0429af5996f777e5d691a" translate="yes" xml:space="preserve">
          <source>The minimum version of the &lt;code&gt;gettext&lt;/code&gt; utilities supported is 0.15.</source>
          <target state="translated">サポートされる &lt;code&gt;gettext&lt;/code&gt; ユーティリティの最小バージョンは0.15です。</target>
        </trans-unit>
        <trans-unit id="e04e85acc7a22de54af4c3ba1a506517688b06af" translate="yes" xml:space="preserve">
          <source>The mixin provides an &lt;code&gt;__init__()&lt;/code&gt; method that accepts an optional &lt;code&gt;get_response&lt;/code&gt; argument and stores it in &lt;code&gt;self.get_response&lt;/code&gt;.</source>
          <target state="translated">mixinは、オプションの &lt;code&gt;get_response&lt;/code&gt; 引数を受け入れ、それを &lt;code&gt;self.get_response&lt;/code&gt; に格納する &lt;code&gt;__init__()&lt;/code&gt; メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="c8ce5e8bdfce92d988b4e5a30c0273642da4536c" translate="yes" xml:space="preserve">
          <source>The mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/access-control-mechanisms.html&quot;&gt;access control mechanisms documentation&lt;/a&gt; provides additional details and information about alternative methods of authentication.</source>
          <target state="translated">mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/access-control-mechanisms.html&quot;&gt;アクセス制御メカニズムのドキュメントに&lt;/a&gt;は、認証の代替方法に関する詳細と情報が記載されています。</target>
        </trans-unit>
        <trans-unit id="094b414163518a144ddd7d6e4e4a3893eb28aa55" translate="yes" xml:space="preserve">
          <source>The model &lt;code&gt;_meta&lt;/code&gt; API is at the core of the Django ORM. It enables other parts of the system such as lookups, queries, forms, and the admin to understand the capabilities of each model. The API is accessible through the &lt;code&gt;_meta&lt;/code&gt; attribute of each model class, which is an instance of an &lt;code&gt;django.db.models.options.Options&lt;/code&gt; object.</source>
          <target state="translated">model &lt;code&gt;_meta&lt;/code&gt; APIはDjango ORMの中核です。これにより、ルックアップ、クエリ、フォーム、管理者など、システムの他の部分が各モデルの機能を理解できるようになります。APIは &lt;code&gt;django.db.models.options.Options&lt;/code&gt; オブジェクトのインスタンスである各モデルクラスの &lt;code&gt;_meta&lt;/code&gt; 属性を通じてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4501983b1bda78a361bf2bab7ec3fbdf3470f6bc" translate="yes" xml:space="preserve">
          <source>The model class that just had an instance created.</source>
          <target state="translated">インスタンスを作成したばかりのモデルクラス。</target>
        </trans-unit>
        <trans-unit id="0e8e5b4a403023823b15e07666e1a54622375582" translate="yes" xml:space="preserve">
          <source>The model class which was just prepared.</source>
          <target state="translated">用意したばかりのモデルクラス。</target>
        </trans-unit>
        <trans-unit id="ddfb44a6f87415cb74c8189d43146202fff99692" translate="yes" xml:space="preserve">
          <source>The model class.</source>
          <target state="translated">モデルクラスです。</target>
        </trans-unit>
        <trans-unit id="78acc1600cd85ddf009d300696e3cd6fec16f262" translate="yes" xml:space="preserve">
          <source>The model field class to use.</source>
          <target state="translated">使用するモデルフィールドクラス。</target>
        </trans-unit>
        <trans-unit id="1e3d4f4592baad1751f54ba7ffbbcf37038c2615" translate="yes" xml:space="preserve">
          <source>The model layer</source>
          <target state="translated">モデル層</target>
        </trans-unit>
        <trans-unit id="05ea240599304250578e893321e4b253ba2ec6fe" translate="yes" xml:space="preserve">
          <source>The model name used in this setting should be all lowercase, regardless of the case of the actual model class name.</source>
          <target state="translated">この設定で使用するモデル名は、実際のモデルクラス名の大文字・小文字にかかわらず、すべて小文字である必要があります。</target>
        </trans-unit>
        <trans-unit id="fbc461ddb972315567096edb23fec8328a226003" translate="yes" xml:space="preserve">
          <source>The model save process also has some subtleties; see the sections below.</source>
          <target state="translated">モデルの保存処理にもいくつかの微妙な点があります。</target>
        </trans-unit>
        <trans-unit id="d8053d22db4c6d941e399872f7f604bf33b87492" translate="yes" xml:space="preserve">
          <source>The model that this view will display data for. Specifying &lt;code&gt;model
= Foo&lt;/code&gt; is effectively the same as specifying &lt;code&gt;queryset =
Foo.objects.all()&lt;/code&gt;, where &lt;code&gt;objects&lt;/code&gt; stands for &lt;code&gt;Foo&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#default-managers&quot;&gt;default manager&lt;/a&gt;.</source>
          <target state="translated">このビューがデータを表示するモデル。特定 &lt;code&gt;model = Foo&lt;/code&gt; 効果的に指定するのと同じである &lt;code&gt;queryset = Foo.objects.all()&lt;/code&gt; 、ここで、 &lt;code&gt;objects&lt;/code&gt; を表し &lt;code&gt;Foo&lt;/code&gt; の&lt;a href=&quot;../../topics/db/managers#default-managers&quot;&gt;デフォルト・マネージャ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1def7a086dc7e6ef4fc0558b744537d4de33fb5" translate="yes" xml:space="preserve">
          <source>The model to use to represent a User. See &lt;a href=&quot;../topics/auth/customizing#auth-custom-user&quot;&gt;Substituting a custom User model&lt;/a&gt;.</source>
          <target state="translated">ユーザーを表すために使用するモデル。&lt;a href=&quot;../topics/auth/customizing#auth-custom-user&quot;&gt;カスタムユーザーモデルの置換を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fc307cde0ae0d6de22cf7f623771cc5b5bbae6da" translate="yes" xml:space="preserve">
          <source>The model which the inline is using. This is required.</source>
          <target state="translated">インラインが使用しているモデル。これは必須です。</target>
        </trans-unit>
        <trans-unit id="bc0d0043169b7c7d60fd944b4757985c1bae1133" translate="yes" xml:space="preserve">
          <source>The model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method will be called before any uniqueness checks are made. See &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;Validating objects&lt;/a&gt; for more information on the model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; hook.</source>
          <target state="translated">モデルの &lt;code&gt;clean()&lt;/code&gt; メソッドは、一意性チェックが行われる前に呼び出されます。モデルの &lt;code&gt;clean()&lt;/code&gt; フックの詳細については、&lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;オブジェクトの検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0a75830961803123e6e36c02e863420d3ad5a35f" translate="yes" xml:space="preserve">
          <source>The model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method will not be called, and the &lt;code&gt;pre_save&lt;/code&gt; and &lt;code&gt;post_save&lt;/code&gt; signals will not be sent.</source>
          <target state="translated">モデルの &lt;code&gt;save()&lt;/code&gt; メソッドは呼び出されず、 &lt;code&gt;pre_save&lt;/code&gt; および &lt;code&gt;post_save&lt;/code&gt; 信号は送信されません。</target>
        </trans-unit>
        <trans-unit id="2eedc03fa70b854f71fd82b6827c0841a1473ce0" translate="yes" xml:space="preserve">
          <source>The moral here is that if you are using &lt;code&gt;distinct()&lt;/code&gt; be careful about ordering by related models. Similarly, when using &lt;code&gt;distinct()&lt;/code&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; together, be careful when ordering by fields not in the &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">ここでの教訓は、 &lt;code&gt;distinct()&lt;/code&gt; を使用している場合、関連モデルによる順序付けに注意することです。同様に、 &lt;code&gt;distinct()&lt;/code&gt; と&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; を&lt;/a&gt;一緒に使用する場合は、&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;コールではないフィールドで順序付けするときに注意してください。</target>
        </trans-unit>
        <trans-unit id="48c675d5043f6c3d4aae4ca0ea0f61d6c38aac55" translate="yes" xml:space="preserve">
          <source>The most common place to specify custom template tags and filters is inside a Django app. If they relate to an existing app, it makes sense to bundle them there; otherwise, they can be added to a new app. When a Django app is added to &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, any tags it defines in the conventional location described below are automatically made available to load within templates.</source>
          <target state="translated">カスタムテンプレートタグとフィルターを指定する最も一般的な場所は、Djangoアプリ内です。それらが既存のアプリに関連している場合、それらをそこにバンドルすることは理にかなっています。それ以外の場合は、新しいアプリに追加できます。Djangoアプリが&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;に追加されると、以下で説明する従来の場所で定義されているタグはすべて、テンプレート内でロードできるようになります。</target>
        </trans-unit>
        <trans-unit id="bef975184f8e317bf6782bf294b1f22d7c6b0904" translate="yes" xml:space="preserve">
          <source>The most common solution is to properly configure your &lt;a href=&quot;index#libsettings&quot;&gt;Library environment settings&lt;/a&gt;&lt;em&gt;or&lt;/em&gt; set &lt;a href=&quot;#geoslibrarypath&quot;&gt;GEOS_LIBRARY_PATH&lt;/a&gt; in your settings.</source>
          <target state="translated">最も一般的な解決策は、&lt;a href=&quot;index#libsettings&quot;&gt;ライブラリ環境設定&lt;/a&gt;を適切に構成する&lt;em&gt;か、&lt;/em&gt;設定に&lt;a href=&quot;#geoslibrarypath&quot;&gt;GEOS_LIBRARY_PATH&lt;/a&gt;を設定することです。</target>
        </trans-unit>
        <trans-unit id="9413ed3849f2b96d296bced76096f62dd8d3bff7" translate="yes" xml:space="preserve">
          <source>The most common transformation this cannot do is transforming a &lt;code&gt;ManyToManyField&lt;/code&gt; into a normal Field or vice-versa; Django cannot do this without losing data, and so it will refuse to do it. Instead, &lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field&quot;&gt;&lt;code&gt;remove_field()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field&quot;&gt;&lt;code&gt;add_field()&lt;/code&gt;&lt;/a&gt; should be called separately.</source>
          <target state="translated">これで実行できない最も一般的な変換は、 &lt;code&gt;ManyToManyField&lt;/code&gt; を通常のFieldに変換すること、またはその逆です。Djangoはデータを失うことなくこれを行うことができないため、それを拒否します。代わりに、&lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field&quot;&gt; &lt;code&gt;remove_field()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field&quot;&gt; &lt;code&gt;add_field()&lt;/code&gt; &lt;/a&gt;を別々に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="6871e2460dcc11bf73ec697d41104e7bf8e9f9ab" translate="yes" xml:space="preserve">
          <source>The most common use case is to pass a &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt;, as shown above. However, you can also pass a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="translated">最も一般的な使用例は、上記のように&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt;を渡すことです。ただし、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;インスタンスを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="a7e69a7c6f372ddb58c9461e3bc1ab0d8ab051db" translate="yes" xml:space="preserve">
          <source>The most common use for this option is when you want to associate &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;extra data with a many-to-many relationship&lt;/a&gt;.</source>
          <target state="translated">このオプションの最も一般的な用途は、&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;追加のデータを多対多の関係&lt;/a&gt;に関連付けたい場合です。</target>
        </trans-unit>
        <trans-unit id="49cd2b2b45a028209da4b23b5b49f8cf17035ca7" translate="yes" xml:space="preserve">
          <source>The most direct way to create users is to use the included &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt;&lt;code&gt;create_user()&lt;/code&gt;&lt;/a&gt; helper function:</source>
          <target state="translated">ユーザーを作成する最も直接的な方法は、含まれている&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt; &lt;code&gt;create_user()&lt;/code&gt; &lt;/a&gt;ヘルパー関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="bc20b7fc72d882052ee9067ed856631cfdb7de35" translate="yes" xml:space="preserve">
          <source>The most direct way to use generic views is to create them directly in your URLconf. If you&amp;rsquo;re only changing a few attributes on a class-based view, you can pass them into the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; method call itself:</source>
          <target state="translated">汎用ビューを使用する最も直接的な方法は、URLconfで直接作成することです。クラスベースのビューのいくつかの属性のみを変更する場合は、それらを&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;メソッド呼び出し自体に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="12de5658e8a30f241f87c363b37668f4b99dd892" translate="yes" xml:space="preserve">
          <source>The most efficient method of finding whether a model with a unique field (e.g. &lt;code&gt;primary_key&lt;/code&gt;) is a member of a &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">一意のフィールド（ &lt;code&gt;primary_key&lt;/code&gt; など）を持つモデルが&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; の&lt;/a&gt;メンバーであるかどうかを確認する最も効率的な方法は、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="144a79174396e3fefc8c2075717b173830a22026" translate="yes" xml:space="preserve">
          <source>The most important attribute of a model is the &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s the interface through which database query operations are provided to Django models and is used to &lt;a href=&quot;queries#retrieving-objects&quot;&gt;retrieve the instances&lt;/a&gt; from the database. If no custom &lt;code&gt;Manager&lt;/code&gt; is defined, the default name is &lt;a href=&quot;../../ref/models/class#django.db.models.Model.objects&quot;&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/a&gt;. Managers are only accessible via model classes, not the model instances.</source>
          <target state="translated">モデルの最も重要な属性は&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;です。これは、Djangoモデルにデータベースクエリ操作を提供するためのインターフェースであり、データベースから&lt;a href=&quot;queries#retrieving-objects&quot;&gt;インスタンス&lt;/a&gt;を取得するために使用されます。カスタム &lt;code&gt;Manager&lt;/code&gt; が定義されていない場合、デフォルトの名前は&lt;a href=&quot;../../ref/models/class#django.db.models.Model.objects&quot;&gt; &lt;code&gt;objects&lt;/code&gt; です&lt;/a&gt;。マネージャーには、モデルインスタンスではなく、モデルクラスを介してのみアクセスできます。</target>
        </trans-unit>
        <trans-unit id="954778b3768124b1c738d606ea826def4b1e867d" translate="yes" xml:space="preserve">
          <source>The most important entry in &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;'environment'&lt;/code&gt;. It&amp;rsquo;s a dotted Python path to a callable returning a Jinja2 environment. It defaults to &lt;code&gt;'jinja2.Environment'&lt;/code&gt;. Django invokes that callable and passes other options as keyword arguments. Furthermore, Django adds defaults that differ from Jinja2&amp;rsquo;s for a few options:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;の最も重要なエントリは &lt;code&gt;'environment'&lt;/code&gt; です。これは、Jinja2環境を返す呼び出し可能オブジェクトへの点線のPythonパスです。デフォルトは &lt;code&gt;'jinja2.Environment'&lt;/code&gt; です。Djangoはその呼び出し可能オブジェクトを呼び出し、他のオプションをキーワード引数として渡します。さらに、Djangoはいくつかのオプションについて、Jinja2とは異なるデフォルトを追加します。</target>
        </trans-unit>
        <trans-unit id="f28c701dac93ef930556fffde2698802bee6cb88" translate="yes" xml:space="preserve">
          <source>The most important part of a model &amp;ndash; and the only required part of a model &amp;ndash; is the list of database fields it defines. Fields are specified by class attributes. Be careful not to choose field names that conflict with the &lt;a href=&quot;../../ref/models/instances&quot;&gt;models API&lt;/a&gt; like &lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, or &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">モデルの最も重要な部分-モデルの唯一の必須部分-は、モデルが定義するデータベースフィールドのリストです。フィールドはクラス属性によって指定されます。 &lt;code&gt;clean&lt;/code&gt; 、 &lt;code&gt;save&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; など、&lt;a href=&quot;../../ref/models/instances&quot;&gt;モデルAPI&lt;/a&gt;と競合するフィールド名を選択しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="b41ce9db625a2a4ed9a8a9294c595850ba7421c1" translate="yes" xml:space="preserve">
          <source>The most likely example is user-uploaded content in &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; by appending something like this to your URLconf:</source>
          <target state="translated">最も可能性の高い例は、&lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; に&lt;/a&gt;ユーザーがアップロードしたコンテンツです。 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; は静的アセットを対象としており、ユーザーがアップロードしたファイルの組み込み処理はありませんが、次のようなものをURLconfに追加することにより、Djangoに&lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; を&lt;/a&gt;提供させることができます。</target>
        </trans-unit>
        <trans-unit id="ae124b720c5a2eb7fa0098254a579572cf5a32b3" translate="yes" xml:space="preserve">
          <source>The most powerful &amp;ndash; and thus the most complex &amp;ndash; part of Django&amp;rsquo;s template engine is template inheritance. Template inheritance allows you to build a base &amp;ldquo;skeleton&amp;rdquo; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="translated">Djangoのテンプレートエンジンの最も強力な（したがって最も複雑な）部分は、テンプレートの継承です。テンプレートの継承により、サイトのすべての一般的な要素を含み、子テンプレートがオーバーライドできる&lt;strong&gt;ブロック&lt;/strong&gt;を定義する基本的な「スケルトン」テンプレートを構築できます。</target>
        </trans-unit>
        <trans-unit id="5277ee5619415435eebafd0e15ea3fa5a54fb13c" translate="yes" xml:space="preserve">
          <source>The most straightforward way of creating a fixture is to use the &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;manage.py dumpdata&lt;/code&gt;&lt;/a&gt; command. This assumes you already have some data in your database. See the &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata
documentation&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">フィクスチャを作成する最も簡単な方法は、&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;manage.py dumpdata&lt;/code&gt; &lt;/a&gt;コマンドを使用することです。これは、データベースにデータがすでにあることを前提としています。詳細については、&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata documentation&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e74ba7b39aa4607d8a6b5cb0835d9fc9b1454747" translate="yes" xml:space="preserve">
          <source>The naive way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that&amp;rsquo;s inefficient for site producers, and it&amp;rsquo;s redundant to store multiple copies of the same story in the database.</source>
          <target state="translated">問題を解決する素朴な方法は、サイトプロデューサーに同じストーリーを2回公開するよう要求することです。しかし、これはサイトプロデューサーにとって非効率的であり、同じストーリーの複数のコピーをデータベースに保存するのは冗長です。</target>
        </trans-unit>
        <trans-unit id="63a9b61ba166b49f916b91caaa26e694bed94aa4" translate="yes" xml:space="preserve">
          <source>The name is a string such as &lt;code&gt;'admin/index.html'&lt;/code&gt;.</source>
          <target state="translated">名前は、 &lt;code&gt;'admin/index.html'&lt;/code&gt; などの文字列です。</target>
        </trans-unit>
        <trans-unit id="bffef68592e45f6e79a62f676bb29704f37e4a7b" translate="yes" xml:space="preserve">
          <source>The name of a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createdatabase.html&quot;&gt;template&lt;/a&gt; (e.g. &lt;code&gt;'template0'&lt;/code&gt;) from which to create the test database.</source>
          <target state="translated">テストデータベースを作成する&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createdatabase.html&quot;&gt;テンプレート&lt;/a&gt;の名前（例： &lt;code&gt;'template0'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="73db5f782a0e845e926942e03c0db06b329731ce" translate="yes" xml:space="preserve">
          <source>The name of a field or a list of field names in the model, typically &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;. This specifies the default field(s) to use in your model &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;querysets#django.db.models.query.QuerySet.latest&quot;&gt;&lt;code&gt;latest()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;querysets#django.db.models.query.QuerySet.earliest&quot;&gt;&lt;code&gt;earliest()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">モデル内のフィールドの名前またはフィールド名のリスト。通常は、&lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;です。これは、Model &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;querysets#django.db.models.query.QuerySet.latest&quot;&gt; &lt;code&gt;latest()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;querysets#django.db.models.query.QuerySet.earliest&quot;&gt; &lt;code&gt;earliest()&lt;/code&gt; &lt;/a&gt;メソッドで使用するデフォルトのフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="99813423c36c5de6363e829435c1c005826c1ac0" translate="yes" xml:space="preserve">
          <source>The name of a model field. For example:</source>
          <target state="translated">モデルフィールドの名前。例えば</target>
        </trans-unit>
        <trans-unit id="4bef0a75d3131deecd15088ae419c948bbf90d70" translate="yes" xml:space="preserve">
          <source>The name of database to use when running the test suite.</source>
          <target state="translated">テストスイートを実行する際に使用するデータベースの名前。</target>
        </trans-unit>
        <trans-unit id="821a67938d763e080243d0f1a307785a2ef1fc17" translate="yes" xml:space="preserve">
          <source>The name of each &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance (e.g. &lt;code&gt;question_text&lt;/code&gt; or &lt;code&gt;pub_date&lt;/code&gt;) is the field&amp;rsquo;s name, in machine-friendly format. You&amp;rsquo;ll use this value in your Python code, and your database will use it as the column name.</source>
          <target state="translated">各&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;インスタンスの名前（ &lt;code&gt;question_text&lt;/code&gt; や &lt;code&gt;pub_date&lt;/code&gt; など）は、マシンフレンドリーな形式のフィールドの名前です。この値はPythonコードで使用し、データベースはこの値を列名として使用します。</target>
        </trans-unit>
        <trans-unit id="36a3902c3d36603d4e9d4186d116f22eadc68eb8" translate="yes" xml:space="preserve">
          <source>The name of each header is stylized with title-casing (e.g. &lt;code&gt;User-Agent&lt;/code&gt;) when it&amp;rsquo;s displayed. You can access headers case-insensitively:</source>
          <target state="translated">各ヘッダーの名前は、表示されるときにタイトルの大文字小文字（例： &lt;code&gt;User-Agent&lt;/code&gt; ）で様式化されます。大文字と小文字を区別せずにヘッダーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="541812330d87ae0dea0e63f087e7740f5d38bac6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; foreign key field on the model. Defaults to &lt;code&gt;content_type&lt;/code&gt;.</source>
          <target state="translated">モデルの&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;外部キーフィールドの名前。デフォルトは &lt;code&gt;content_type&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="163de951a33070879f29f487b060a87d84befeed" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this field&amp;rsquo;s index, if this field is indexed. The default is the project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt;&lt;/a&gt; setting, if set, or the &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; of the model, if any. If the backend doesn&amp;rsquo;t support tablespaces for indexes, this option is ignored.</source>
          <target state="translated">このフィールドにインデックスが付けられている場合、このフィールドのインデックスに使用する&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;データベーステーブルスペース&lt;/a&gt;の名前。デフォルトは、プロジェクトの&lt;a href=&quot;../settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt; &lt;/a&gt;設定（設定されている場合）、またはモデルの&lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; &lt;/a&gt;（存在する場合）です。バックエンドがインデックスのテーブルスペースをサポートしていない場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="402103ec15a6bbfbcb151e22bc58a7c81df55268" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this index. For single field indexes, if &lt;code&gt;db_tablespace&lt;/code&gt; isn&amp;rsquo;t provided, the index is created in the &lt;code&gt;db_tablespace&lt;/code&gt; of the field.</source>
          <target state="translated">このインデックスに使用する&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;データベーステーブルスペース&lt;/a&gt;の名前。単一フィールドインデックスの場合、 &lt;code&gt;db_tablespace&lt;/code&gt; を指定しないと、フィールドの &lt;code&gt;db_tablespace&lt;/code&gt; にインデックスが作成されます。</target>
        </trans-unit>
        <trans-unit id="2a8ea4f8d8b85b44e880d9d4b5b69b4fbf35a23b" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this model. The default is the project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-DEFAULT_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_TABLESPACE&lt;/code&gt;&lt;/a&gt; setting, if set. If the backend doesn&amp;rsquo;t support tablespaces, this option is ignored.</source>
          <target state="translated">このモデルに使用する&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;データベーステーブルスペース&lt;/a&gt;の名前。デフォルトは、設定されている場合、プロジェクトの&lt;a href=&quot;../settings#std:setting-DEFAULT_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_TABLESPACE&lt;/code&gt; &lt;/a&gt;設定です。バックエンドがテーブルスペースをサポートしていない場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="6b38e2c8875e8a0addbc32359b5bf513eda7259e" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;DateField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt; in the &lt;code&gt;QuerySet&lt;/code&gt;&amp;rsquo;s model that the date-based archive should use to determine the list of objects to display on the page.</source>
          <target state="translated">ページに表示するオブジェクトのリストを決定するために日付ベースのアーカイブが使用する、 &lt;code&gt;QuerySet&lt;/code&gt; のモデル内の &lt;code&gt;DateField&lt;/code&gt; または &lt;code&gt;DateTimeField&lt;/code&gt; の名前。</target>
        </trans-unit>
        <trans-unit id="531037582b1e0a89a3cd4e790160806c1e292558" translate="yes" xml:space="preserve">
          <source>The name of the GDAL driver used to handle the input file. For &lt;code&gt;GDALRaster&lt;/code&gt;s created from a file, the driver type is detected automatically. The creation of rasters from scratch is an in-memory raster by default (&lt;code&gt;'MEM'&lt;/code&gt;), but can be altered as needed. For instance, use &lt;code&gt;GTiff&lt;/code&gt; for a &lt;code&gt;GeoTiff&lt;/code&gt; file. For a list of file types, see also the &lt;a href=&quot;https://gdal.org/drivers/raster/&quot;&gt;GDAL Raster Formats&lt;/a&gt; list.</source>
          <target state="translated">入力ファイルの処理に使用されるGDALドライバーの名前。 &lt;code&gt;GDALRaster&lt;/code&gt; のファイルから作成され、ドライバの種類が自動的に検出されました。ゼロからのラスタの作成は、デフォルトではメモリ内ラスタ（ &lt;code&gt;'MEM'&lt;/code&gt; ）ですが、必要に応じて変更できます。たとえば、 &lt;code&gt;GeoTiff&lt;/code&gt; ファイルには &lt;code&gt;GTiff&lt;/code&gt; を使用します。ファイルタイプのリストについては、&lt;a href=&quot;https://gdal.org/drivers/raster/&quot;&gt;GDALラスタ形式の&lt;/a&gt;リストもご覧ください。</target>
        </trans-unit>
        <trans-unit id="fd6d34b4a1da491460b73de06a8cb204420bb6f9" translate="yes" xml:space="preserve">
          <source>The name of the GeoIP city data file. Defaults to &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt;. Setting this keyword overrides the &lt;a href=&quot;#std:setting-GEOIP_CITY&quot;&gt;&lt;code&gt;GEOIP_CITY&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIP都市データファイルの名前。デフォルトは &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt; です。このキーワードを設定すると、&lt;a href=&quot;#std:setting-GEOIP_CITY&quot;&gt; &lt;code&gt;GEOIP_CITY&lt;/code&gt; &lt;/a&gt;設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="71bdecdd5ebfb290dd390f6482054ddafd78957a" translate="yes" xml:space="preserve">
          <source>The name of the GeoIP country data file. Defaults to &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt;. Setting this keyword overrides the &lt;a href=&quot;#std:setting-GEOIP_COUNTRY&quot;&gt;&lt;code&gt;GEOIP_COUNTRY&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIP国データファイルの名前。デフォルトは &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt; です。このキーワードを設定すると、&lt;a href=&quot;#std:setting-GEOIP_COUNTRY&quot;&gt; &lt;code&gt;GEOIP_COUNTRY&lt;/code&gt; &lt;/a&gt;設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="ccbea55b7888687d19090671fa7254a789f06402" translate="yes" xml:space="preserve">
          <source>The name of the URL pattern that matches the URL.</source>
          <target state="translated">URL に一致する URL パターンの名前です。</target>
        </trans-unit>
        <trans-unit id="15004a76b9d384968d294c42ac068cb83f63de2a" translate="yes" xml:space="preserve">
          <source>The name of the URL pattern to redirect to. Reversing will be done using the same args and kwargs as are passed in for this view.</source>
          <target state="translated">リダイレクト先の URL パターンの名前。反転は、このビューに渡されたものと同じ args と kwargs を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="06a14ff5827d2f5bf31a21760de21f63ef318f5b" translate="yes" xml:space="preserve">
          <source>The name of the URLConf keyword argument that contains the primary key. By default, &lt;code&gt;pk_url_kwarg&lt;/code&gt; is &lt;code&gt;'pk'&lt;/code&gt;.</source>
          <target state="translated">主キーを含むURLConfキーワード引数の名前。デフォルトでは、 &lt;code&gt;pk_url_kwarg&lt;/code&gt; は &lt;code&gt;'pk'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="754927d5c9420d8afbde45c1c9504b6d7dd977ff" translate="yes" xml:space="preserve">
          <source>The name of the URLConf keyword argument that contains the slug. By default, &lt;code&gt;slug_url_kwarg&lt;/code&gt; is &lt;code&gt;'slug'&lt;/code&gt;.</source>
          <target state="translated">slugを含むURLConfキーワード引数の名前。デフォルトでは、 &lt;code&gt;slug_url_kwarg&lt;/code&gt; は &lt;code&gt;'slug'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="04c0334bbc33a2d3f0ebbc2ddb18b2e2caaaabee" translate="yes" xml:space="preserve">
          <source>The name of the application the model is part of. This is taken from the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt; attribute of the model, and includes only the &lt;em&gt;last&lt;/em&gt; part of the application&amp;rsquo;s Python import path; &lt;code&gt;django.contrib.contenttypes&lt;/code&gt;, for example, becomes an &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;contenttypes&lt;/code&gt;.</source>
          <target state="translated">モデルが属するアプリケーションの名前。これはモデルの&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt;属性から取得され、アプリケーションのPythonインポートパスの&lt;em&gt;最後の&lt;/em&gt;部分のみが含まれます。 &lt;code&gt;django.contrib.contenttypes&lt;/code&gt; 、例えば、なり&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;contenttypes&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="cd9b5efa3f472b01fb89ebca97a7fbff7271ba1c" translate="yes" xml:space="preserve">
          <source>The name of the class to use for starting the test suite. See &lt;a href=&quot;../topics/testing/advanced#other-testing-frameworks&quot;&gt;Using different testing frameworks&lt;/a&gt;.</source>
          <target state="translated">テストスイートの開始に使用するクラスの名前。&lt;a href=&quot;../topics/testing/advanced#other-testing-frameworks&quot;&gt;さまざまなテストフレームワークの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="56384b66fea60ec1b78196984b095a03fc903da6" translate="yes" xml:space="preserve">
          <source>The name of the constraint.</source>
          <target state="translated">制約の名前。</target>
        </trans-unit>
        <trans-unit id="3f1cd57a734b57109d10e40c5ba2dfa0d2ec2029" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for sessions. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application).</source>
          <target state="translated">セッションに使用するCookieの名前。これは、（アプリケーション内の他のCookie名とは異なる限り）何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="2c2454fe0834e666c008fbb3242b0a089904fcf7" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for the CSRF authentication token. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application). See &lt;a href=&quot;csrf&quot;&gt;Cross Site Request Forgery protection&lt;/a&gt;.</source>
          <target state="translated">CSRF認証トークンに使用するCookieの名前。これは、（アプリケーション内の他のCookie名とは異なる限り）何でもかまいません。&lt;a href=&quot;csrf&quot;&gt;クロスサイトリクエストフォージェリ保護を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab067d40b58c66b558a08c0d7a1bab9bc86750ce" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for the language cookie. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application). See &lt;a href=&quot;../topics/i18n/index&quot;&gt;Internationalization and localization&lt;/a&gt;.</source>
          <target state="translated">言語Cookieに使用するCookieの名前。これは、（アプリケーション内の他のCookie名とは異なる限り）何でもかまいません。&lt;a href=&quot;../topics/i18n/index&quot;&gt;国際化とローカリゼーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4e2afa5ff44dad3f7138732191e180eca493f5c2" translate="yes" xml:space="preserve">
          <source>The name of the cookie used is set by the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting. (The default name is &lt;code&gt;django_language&lt;/code&gt;.)</source>
          <target state="translated">使用されるCookieの名前は、&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定によって設定されます。（デフォルト名は &lt;code&gt;django_language&lt;/code&gt; です。）</target>
        </trans-unit>
        <trans-unit id="75bf8a6d67711f96e59407ae3331311ffcb65020" translate="yes" xml:space="preserve">
          <source>The name of the currently activated virtual environment is displayed on the command line to help you keep track of which one you are using. Anything you install through &lt;code&gt;pip&lt;/code&gt; while this name is displayed will be installed in that virtual environment, isolated from other environments and system-wide packages.</source>
          <target state="translated">現在アクティブ化されている仮想環境の名前がコマンドラインに表示され、使用している仮想環境を追跡しやすくなります。この名前が表示されている間に &lt;code&gt;pip&lt;/code&gt; を使用してインストールしたものはすべて、その仮想環境にインストールされ、他の環境やシステム全体のパッケージから分離されます。</target>
        </trans-unit>
        <trans-unit id="1dfdfbaf4a63e8ebbcc9e7a8622df6e43aaca29c" translate="yes" xml:space="preserve">
          <source>The name of the database column to use for this field. If this isn&amp;rsquo;t given, Django will use the field&amp;rsquo;s name.</source>
          <target state="translated">このフィールドに使用するデータベース列の名前。これを指定しない場合、Djangoはフィールドの名前を使用します。</target>
        </trans-unit>
        <trans-unit id="97d0ed14deca2d0aca3bba2a828e1eaac1812b7a" translate="yes" xml:space="preserve">
          <source>The name of the database table to use for the model:</source>
          <target state="translated">モデルに使用するデータベーステーブルの名前です。</target>
        </trans-unit>
        <trans-unit id="7d8966b66925869e03e0d1ea54565dbcf8e8794d" translate="yes" xml:space="preserve">
          <source>The name of the database to use. For SQLite, it&amp;rsquo;s the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. &lt;code&gt;C:/homes/user/mysite/sqlite3.db&lt;/code&gt;).</source>
          <target state="translated">使用するデータベースの名前。SQLiteの場合、データベースファイルへの完全パスです。パスを指定するときは、Windowsでも常にスラッシュを使用してください（例： &lt;code&gt;C:/homes/user/mysite/sqlite3.db&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="516d215a122250a87d1f8054709549ccc4cc6d88" translate="yes" xml:space="preserve">
          <source>The name of the datafile to use for the TBLSPACE. If not provided, Django will use &lt;code&gt;TBLSPACE + '.dbf'&lt;/code&gt;.</source>
          <target state="translated">TBLSPACEに使用するデータファイルの名前。指定しない場合、Djangoは &lt;code&gt;TBLSPACE + '.dbf'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4d8155776d6b1dff31611c64371681f80d747b13" translate="yes" xml:space="preserve">
          <source>The name of the datafile to use for the TBLSPACE_TMP. If not provided, Django will use &lt;code&gt;TBLSPACE_TMP + '.dbf'&lt;/code&gt;.</source>
          <target state="translated">TBLSPACE_TMPに使用するデータファイルの名前。指定しない場合、Djangoは &lt;code&gt;TBLSPACE_TMP + '.dbf'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c0fc93c1c94efdc38d552835c495513303bfde56" translate="yes" xml:space="preserve">
          <source>The name of the field on the model that contains the slug. By default, &lt;code&gt;slug_field&lt;/code&gt; is &lt;code&gt;'slug'&lt;/code&gt;.</source>
          <target state="translated">スラグを含むモデルのフィールドの名前。デフォルトでは、 &lt;code&gt;slug_field&lt;/code&gt; は &lt;code&gt;'slug'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f19427a4ffcc78e34af4812f089e3cd61bdba7d" translate="yes" xml:space="preserve">
          <source>The name of the field on the model.</source>
          <target state="translated">モデル上のフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="51daf9f1cf77252d9fe3869bbef8ccf11d71eecc" translate="yes" xml:space="preserve">
          <source>The name of the field on which you&amp;rsquo;d like to filter the relation.</source>
          <target state="translated">リレーションをフィルタリングするフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="9b7ef3aac9281ae093d53c4653571818cb5adf25" translate="yes" xml:space="preserve">
          <source>The name of the field that will be used in the input element&amp;rsquo;s name field. This takes the form prefix into account, if it has been set.</source>
          <target state="translated">入力要素の名前フィールドで使用されるフィールドの名前。設定されている場合、これはフォームのプレフィックスを考慮に入れます。</target>
        </trans-unit>
        <trans-unit id="115286c4bd3dac1e66ff95e3e000a885893df909" translate="yes" xml:space="preserve">
          <source>The name of the file including the relative path from &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;からの相対パスを含むファイルの名前。</target>
        </trans-unit>
        <trans-unit id="e940e12da996dba1c5a77dcb9bab26a0b08caa82" translate="yes" xml:space="preserve">
          <source>The name of the file including the relative path from the root of the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; of the associated &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関連する&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt;のルートからの相対パスを含むファイルの名前。</target>
        </trans-unit>
        <trans-unit id="fcf8ac830b40ec427f998831897f6e458d8d70ba" translate="yes" xml:space="preserve">
          <source>The name of the filter &amp;ndash; a string.</source>
          <target state="translated">フィルターの名前&amp;ndash;文字列。</target>
        </trans-unit>
        <trans-unit id="a17c3bce19075d6cc8afe07b3a0fb6ddc56df9a2" translate="yes" xml:space="preserve">
          <source>The name of the foreign key on the model. In most cases this will be dealt with automatically, but &lt;code&gt;fk_name&lt;/code&gt; must be specified explicitly if there are more than one foreign key to the same parent model.</source>
          <target state="translated">モデルの外部キーの名前。ほとんどの場合、これは自動的に処理されますが、同じ親モデルに複数の外部キーがある場合は、 &lt;code&gt;fk_name&lt;/code&gt; を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5272d82f31e5fd503167bca4c31dace6f8d8d35a" translate="yes" xml:space="preserve">
          <source>The name of the index. If &lt;code&gt;name&lt;/code&gt; isn&amp;rsquo;t provided Django will auto-generate a name. For compatibility with different databases, index names cannot be longer than 30 characters and shouldn&amp;rsquo;t start with a number (0-9) or underscore (_).</source>
          <target state="translated">インデックスの名前。場合は &lt;code&gt;name&lt;/code&gt; 提供されていないDjangoは名前を自動生成します。異なるデータベースとの互換性のために、インデックス名は30文字を超えることはできず、数字（0-9）またはアンダースコア（_）で始めることはできません。</target>
        </trans-unit>
        <trans-unit id="943f67bf2cfa14fc1c956a8a429c303503414952" translate="yes" xml:space="preserve">
          <source>The name of the integer field that represents the ID of the related object. Defaults to &lt;code&gt;object_id&lt;/code&gt;.</source>
          <target state="translated">関連オブジェクトのIDを表す整数フィールドの名前。デフォルトは &lt;code&gt;object_id&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6b2d68da7681b2cb85527bdf028c461473593353" translate="yes" xml:space="preserve">
          <source>The name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string &lt;code&gt;&quot;__&quot;&lt;/code&gt;.</source>
          <target state="translated">クエリ式の解析で識別するために使用されるルックアップの名前。文字列 &lt;code&gt;&quot;__&quot;&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="befe7c84676f3dceaf4694f7b689936182bd347e" translate="yes" xml:space="preserve">
          <source>The name of the manager to use for the model&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#django.db.models.Model._default_manager&quot;&gt;&lt;code&gt;_default_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モデルの&lt;a href=&quot;../../topics/db/managers#django.db.models.Model._default_manager&quot;&gt; &lt;code&gt;_default_manager&lt;/code&gt; &lt;/a&gt;に使用するマネージャーの名前。</target>
        </trans-unit>
        <trans-unit id="d19869d8eedfb447efa1bfdccad12838895e8641" translate="yes" xml:space="preserve">
          <source>The name of the model class.</source>
          <target state="translated">モデルクラスの名前です。</target>
        </trans-unit>
        <trans-unit id="2380daaa2a5a9de1ae9bca34a18cbbe85e366f80" translate="yes" xml:space="preserve">
          <source>The name of the module used for authentication.</source>
          <target state="translated">認証に使用するモジュールの名前です。</target>
        </trans-unit>
        <trans-unit id="be359ddce77b7393fb923e492c37559bd98994bd" translate="yes" xml:space="preserve">
          <source>The name of the request header used for CSRF authentication.</source>
          <target state="translated">CSRF 認証に使用するリクエストヘッダーの名前。</target>
        </trans-unit>
        <trans-unit id="e341c5d335b81eb57e7ffc160a61ac3e1291b516" translate="yes" xml:space="preserve">
          <source>The name of the setting.</source>
          <target state="translated">設定の名前です。</target>
        </trans-unit>
        <trans-unit id="a6d4ed4a83958cb774c3ac1373e389717199b189" translate="yes" xml:space="preserve">
          <source>The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if &lt;code&gt;sitemap.xml&lt;/code&gt; lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at &lt;code&gt;/content/sitemap.xml&lt;/code&gt;, it may only reference URLs that begin with &lt;code&gt;/content/&lt;/code&gt;.</source>
          <target state="translated">サイトマップファイルの名前は重要ではありませんが、場所は重要です。検索エンジンは、現在のURLレベル以下のサイトマップ内のリンクのみをインデックスに登録します。たとえば、 &lt;code&gt;sitemap.xml&lt;/code&gt; がルートディレクトリにある場合、サイト内の任意のURLを参照する可能性があります。ただし、サイトマップが &lt;code&gt;/content/sitemap.xml&lt;/code&gt; にある場合は、 &lt;code&gt;/content/&lt;/code&gt; で始まるURLのみを参照する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d47e18fed83e0647ac5466b931bee36494e757ba" translate="yes" xml:space="preserve">
          <source>The name of the source which is equivalent to the input file path or the name provided upon instantiation.</source>
          <target state="translated">入力ファイルのパスまたはインスタンス化時に指定された名前と同等のソース名。</target>
        </trans-unit>
        <trans-unit id="3e9dbd9e9fbe18372a96d41f916e0d75153d57c8" translate="yes" xml:space="preserve">
          <source>The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself.</source>
          <target state="translated">多対多のデータを格納するために作成するテーブルの名前。これが指定されていない場合、Django はリレーションシップを定義するモデルのテーブル名とフィールド自体の名前に基づいたデフォルトの名前を想定します。</target>
        </trans-unit>
        <trans-unit id="ea6d6389de793166a085f00581dd68187aec6087" translate="yes" xml:space="preserve">
          <source>The name of the table, &lt;code&gt;myapp_person&lt;/code&gt;, is automatically derived from some model metadata but can be overridden. See &lt;a href=&quot;../../ref/models/options#table-names&quot;&gt;Table names&lt;/a&gt; for more details.</source>
          <target state="translated">テーブルの名前 &lt;code&gt;myapp_person&lt;/code&gt; は、一部のモデルメタデータから自動的に取得されますが、オーバーライドできます。詳細については、&lt;a href=&quot;../../ref/models/options#table-names&quot;&gt;テーブル名&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="64458b1dc8e18b2d121802fc760359372e20bf02" translate="yes" xml:space="preserve">
          <source>The name of the tablespace that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER&lt;/code&gt;.</source>
          <target state="translated">テストの実行時に使用されるテーブルスペースの名前。指定しない場合、Djangoは &lt;code&gt;'test_' + USER&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fd3f139ecacad629770ed1798918c7edc8d69e3e" translate="yes" xml:space="preserve">
          <source>The name of the template or templates that are used for that view.</source>
          <target state="translated">そのビューで使用されるテンプレートまたはテンプレートの名前です。</target>
        </trans-unit>
        <trans-unit id="b189c9f24c53dc250c421f02c83ab4c15811cdf5" translate="yes" xml:space="preserve">
          <source>The name of the template tag &amp;ndash; a string. If this is left out, the name of the compilation function will be used.</source>
          <target state="translated">テンプレートタグの名前&amp;ndash;文字列。これを省略すると、コンパイル関数の名前が使用されます。</target>
        </trans-unit>
        <trans-unit id="9c839d8407c27a86056fa592e95135425afae6d1" translate="yes" xml:space="preserve">
          <source>The name of the template to be rendered. Accepts a backend-dependent template object (such as those returned by &lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;), the name of a template, or a list of template names.</source>
          <target state="translated">レンダリングされるテンプレートの名前。バックエンドに依存するテンプレートオブジェクト（&lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;によって返されるものなど）、テンプレートの名前、またはテンプレート名のリストを受け入れます。</target>
        </trans-unit>
        <trans-unit id="db092b96cd10dd009a9b2068643f0e4bbf124a87" translate="yes" xml:space="preserve">
          <source>The name of the template to load and render. If it&amp;rsquo;s a list of template names, Django uses &lt;a href=&quot;#django.template.loader.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; to find the template.</source>
          <target state="translated">ロードしてレンダリングするテンプレートの名前。それは、テンプレート名のリストだ場合、Djangoは使用しています&lt;a href=&quot;#django.template.loader.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;代わりに、&lt;a href=&quot;#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;テンプレートを検索します。</target>
        </trans-unit>
        <trans-unit id="737c0a1a6064c300d765b99ff02207d02b841895" translate="yes" xml:space="preserve">
          <source>The name of the temporary tablespace that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER + '_temp'&lt;/code&gt;.</source>
          <target state="translated">テストの実行時に使用される一時テーブルスペースの名前。指定しない場合、Djangoは &lt;code&gt;'test_' + USER + '_temp'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bdd22a08dce1e2aa1f23da79907b34dfd4a75476" translate="yes" xml:space="preserve">
          <source>The name of the uploaded file (e.g. &lt;code&gt;my_file.txt&lt;/code&gt;).</source>
          <target state="translated">アップロードされたファイルの名前（例： &lt;code&gt;my_file.txt&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="692f0414be004838f86345bcc951e3ccca921a62" translate="yes" xml:space="preserve">
          <source>The name of the view that matches the URL, including the namespace if there is one.</source>
          <target state="translated">URLにマッチするビューの名前(名前空間がある場合はその名前を含む)。</target>
        </trans-unit>
        <trans-unit id="c2e349d6af9c3a29d56bc36e87d927a3c9e454d0" translate="yes" xml:space="preserve">
          <source>The name of this field in the form:</source>
          <target state="translated">フォーム内のこのフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="489e5dd5c95e55c141e772c0467fe6b88042386c" translate="yes" xml:space="preserve">
          <source>The name of this lookup, used to identify it on parsing query expressions. It cannot contain the string &lt;code&gt;&quot;__&quot;&lt;/code&gt;.</source>
          <target state="translated">このルックアップの名前は、クエリ式の解析時にそれを識別するために使用されます。文字列 &lt;code&gt;&quot;__&quot;&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="2e6661c9c866874e38ba2ad4ad7106f9846c235f" translate="yes" xml:space="preserve">
          <source>The name or description of the band, if any.</source>
          <target state="translated">バンド名や説明文がある場合は、それを記載します。</target>
        </trans-unit>
        <trans-unit id="a5c0b9bd80f9f5122dab4271eb7475c4a6fe368d" translate="yes" xml:space="preserve">
          <source>The name that will be used by default for the relation from a related object back to this one. The default is &lt;code&gt;&amp;lt;model_name&amp;gt;_set&lt;/code&gt;.</source>
          <target state="translated">関連オブジェクトからこのオブジェクトへのリレーションにデフォルトで使用される名前。デフォルトは &lt;code&gt;&amp;lt;model_name&amp;gt;_set&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9d604c0cca246c9cb2d010f998bd1dfcef585f81" translate="yes" xml:space="preserve">
          <source>The name that will be used in the widget&amp;rsquo;s HTML &lt;code&gt;name&lt;/code&gt; attribute. It takes the form &lt;a href=&quot;#django.forms.Form.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; into account.</source>
          <target state="translated">ウィジェットのHTML &lt;code&gt;name&lt;/code&gt; 属性で使用される名前。フォームの&lt;a href=&quot;#django.forms.Form.prefix&quot;&gt; &lt;code&gt;prefix&lt;/code&gt; &lt;/a&gt;が考慮されます。</target>
        </trans-unit>
        <trans-unit id="b7f9f93b9b008117bc8f38248c11bc6566bcfd0e" translate="yes" xml:space="preserve">
          <source>The name to use for the relation from the related object back to this one. It&amp;rsquo;s also the default value for &lt;a href=&quot;#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; (the name to use for the reverse filter name from the target model). See the &lt;a href=&quot;../../topics/db/queries#backwards-related-objects&quot;&gt;related objects documentation&lt;/a&gt; for a full explanation and example. Note that you must set this value when defining relations on &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract models&lt;/a&gt;; and when you do so &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;some special syntax&lt;/a&gt; is available.</source>
          <target state="translated">関連オブジェクトからこのオブジェクトへのリレーションに使用する名前。また、&lt;a href=&quot;#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;（ターゲットモデルの逆フィルター名に使用する名前）のデフォルト値でもあります。完全な説明と例については、&lt;a href=&quot;../../topics/db/queries#backwards-related-objects&quot;&gt;関連オブジェクトのドキュメント&lt;/a&gt;を参照してください。&lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;抽象モデルで&lt;/a&gt;関係を定義するときは、この値を設定する必要があることに注意してください。そうすると、&lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;いくつかの特別な構文&lt;/a&gt;が利用可能になります。</target>
        </trans-unit>
        <trans-unit id="76f23af4881ae86e69f080255f6058aa873af330" translate="yes" xml:space="preserve">
          <source>The name to use for the reverse filter name from the target model. It defaults to the value of &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;options#django.db.models.Options.default_related_name&quot;&gt;&lt;code&gt;default_related_name&lt;/code&gt;&lt;/a&gt; if set, otherwise it defaults to the name of the model:</source>
          <target state="translated">ターゲットモデルからの逆フィルター名に使用する名前。設定されている場合は、デフォルトで&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;options#django.db.models.Options.default_related_name&quot;&gt; &lt;code&gt;default_related_name&lt;/code&gt; の&lt;/a&gt;値になり、そうでない場合はデフォルトでモデルの名前になります。</target>
        </trans-unit>
        <trans-unit id="4d24e9bc1d06786ffe5eaadf43320d55583ce49c" translate="yes" xml:space="preserve">
          <source>The names of the &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL operator classes&lt;/a&gt; to use for this index. If you require a custom operator class, you must provide one for each field in the index.</source>
          <target state="translated">このインデックスに使用する&lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL演算子クラス&lt;/a&gt;の名前。カスタム演算子クラスが必要な場合は、インデックスのフィールドごとに1つ指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8da5fbd9581cdc66ce8a3dcff91495d1cec3201f" translate="yes" xml:space="preserve">
          <source>The namespace package actually has only a single location (i.e. is not spread across more than one directory.)</source>
          <target state="translated">名前空間パッケージは実際には単一の場所にしか存在しません (つまり、複数のディレクトリに分散していません)。</target>
        </trans-unit>
        <trans-unit id="d936c1aaff3b7c9c426c2ca0e9aa56c63b373007" translate="yes" xml:space="preserve">
          <source>The natural key for a &lt;code&gt;Book&lt;/code&gt; is a combination of its name and its author. This means that &lt;code&gt;Person&lt;/code&gt; must be serialized before &lt;code&gt;Book&lt;/code&gt;. To define this dependency, we add one extra line:</source>
          <target state="translated">本の自然な鍵は、 &lt;code&gt;Book&lt;/code&gt; 名前と著者の組み合わせです。つまり、 &lt;code&gt;Person&lt;/code&gt; は &lt;code&gt;Book&lt;/code&gt; の前にシリアル化する必要があります。この依存関係を定義するには、1行追加します。</target>
        </trans-unit>
        <trans-unit id="2ec556005d5c4c0ea67142f569c1ad37bf2f6b4b" translate="yes" xml:space="preserve">
          <source>The need for the &lt;code&gt;as_data()&lt;/code&gt; method is due to backwards compatibility. Previously &lt;code&gt;ValidationError&lt;/code&gt; instances were lost as soon as their &lt;strong&gt;rendered&lt;/strong&gt; error messages were added to the &lt;code&gt;Form.errors&lt;/code&gt; dictionary. Ideally &lt;code&gt;Form.errors&lt;/code&gt; would have stored &lt;code&gt;ValidationError&lt;/code&gt; instances and methods with an &lt;code&gt;as_&lt;/code&gt; prefix could render them, but it had to be done the other way around in order not to break code that expects rendered error messages in &lt;code&gt;Form.errors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;as_data()&lt;/code&gt; メソッドが必要なのは、下位互換性のためです。以前は、&lt;strong&gt;レンダリングされた&lt;/strong&gt;エラーメッセージが &lt;code&gt;Form.errors&lt;/code&gt; ディクショナリに追加&lt;strong&gt;さ&lt;/strong&gt;れるとすぐに、 &lt;code&gt;ValidationError&lt;/code&gt; インスタンスが失われました。理想的には、 &lt;code&gt;Form.errors&lt;/code&gt; は &lt;code&gt;ValidationError&lt;/code&gt; インスタンスを格納し、 &lt;code&gt;as_&lt;/code&gt; プレフィックス付きのメソッドでそれらをレンダリングできますが、 &lt;code&gt;Form.errors&lt;/code&gt; でレンダリングされたエラーメッセージを予期するコードを壊さないようにするために、逆の方法で行う必要がありました。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf2ab30425084e7ceacc50c0aca0b93bfbe61ba" translate="yes" xml:space="preserve">
          <source>The negative sign in &lt;code&gt;'-expire_date'&lt;/code&gt; means to sort &lt;code&gt;expire_date&lt;/code&gt; in &lt;em&gt;descending&lt;/em&gt; order. Since &lt;code&gt;latest()&lt;/code&gt; gets the last result, the &lt;code&gt;Entry&lt;/code&gt; with the earliest &lt;code&gt;expire_date&lt;/code&gt; is selected.</source>
          <target state="translated">&lt;code&gt;'-expire_date'&lt;/code&gt; の負符号は、 &lt;code&gt;expire_date&lt;/code&gt; を&lt;em&gt;降順&lt;/em&gt;にソートすることを意味します。以来 &lt;code&gt;latest()&lt;/code&gt; 最後の結果を取得し、 &lt;code&gt;Entry&lt;/code&gt; 早いと &lt;code&gt;expire_date&lt;/code&gt; 選択されています。</target>
        </trans-unit>
        <trans-unit id="af6a1992a04eb2938a5d3e68814007a9b6fcc00a" translate="yes" xml:space="preserve">
          <source>The new concept here: The view raises the &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; exception if a question with the requested ID doesn&amp;rsquo;t exist.</source>
          <target state="translated">ここでの新しい概念：要求されたIDの質問が存在しない場合、ビューは&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="a7b5c7266de3c578046f6d8c2709fa4aaabb30f2" translate="yes" xml:space="preserve">
          <source>The new custom command can be called using &lt;code&gt;python manage.py closepoll
&amp;lt;poll_ids&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">新しいカスタムコマンドは、 &lt;code&gt;python manage.py closepoll &amp;lt;poll_ids&amp;gt;&lt;/code&gt; を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4d9d733433b3c01c8b298774186e815b2898aeaa" translate="yes" xml:space="preserve">
          <source>The new ordering of tests may reveal unexpected dependencies on test case ordering. This is the case with doctests that relied on state left in the database by a given &lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; test, they must be updated to be able to run independently.</source>
          <target state="translated">テストの新しい順序付けにより、テストケースの順序付けに対する予期しない依存関係が明らかになる場合があります。これは、特定の&lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;テストによってデータベースに残された状態に依存するdoctestの場合であり、独立して実行できるように更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8cd245d7c1883dc95dcd9278028e5ae1db797c0" translate="yes" xml:space="preserve">
          <source>The newer &lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt;&lt;code&gt;indexes&lt;/code&gt;&lt;/a&gt; option provides more functionality than &lt;code&gt;index_together&lt;/code&gt;. &lt;code&gt;index_together&lt;/code&gt; may be deprecated in the future.</source>
          <target state="translated">新しい&lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt; &lt;code&gt;indexes&lt;/code&gt; &lt;/a&gt;オプションは、 &lt;code&gt;index_together&lt;/code&gt; よりも多くの機能を提供します。 &lt;code&gt;index_together&lt;/code&gt; は将来廃止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="99e0f68f9a465dd5381f9e22fd48ae61826bd070" translate="yes" xml:space="preserve">
          <source>The next example is more advanced; it does a subquery to give each resulting &lt;code&gt;Blog&lt;/code&gt; object an &lt;code&gt;entry_count&lt;/code&gt; attribute, an integer count of associated &lt;code&gt;Entry&lt;/code&gt; objects:</source>
          <target state="translated">次の例はより高度です。結果の各 &lt;code&gt;Blog&lt;/code&gt; オブジェクトに &lt;code&gt;entry_count&lt;/code&gt; 属性、関連する &lt;code&gt;Entry&lt;/code&gt; オブジェクトの整数カウントを与えるためにサブクエリを実行します：</target>
        </trans-unit>
        <trans-unit id="ce6b33d35f1566e3a74e19d2aea4cd6acefd7b28" translate="yes" xml:space="preserve">
          <source>The next example shows the usage of statistical aggregate functions. The underlying math will be not described (you can read about this, for example, at &lt;a href=&quot;https://en.wikipedia.org/wiki/Regression_analysis&quot;&gt;wikipedia&lt;/a&gt;):</source>
          <target state="translated">次の例は、統計集計関数の使用法を示しています。基礎となる数学については説明しません（これについては、例えば、&lt;a href=&quot;https://en.wikipedia.org/wiki/Regression_analysis&quot;&gt;ウィキペディアで&lt;/a&gt;読むことができます）。</target>
        </trans-unit>
        <trans-unit id="e14c54221552102a85ce433336891d5493a9c4c3" translate="yes" xml:space="preserve">
          <source>The next few sections describe a couple of common ways advanced users may want to modify this setting.</source>
          <target state="translated">次のセクションでは、上級者がこの設定を変更する一般的な方法をいくつか説明します。</target>
        </trans-unit>
        <trans-unit id="828efe97e4e160671bd8de2059dad8573dff24d3" translate="yes" xml:space="preserve">
          <source>The next step is to point the root URLconf at the &lt;code&gt;polls.urls&lt;/code&gt; module. In &lt;code&gt;mysite/urls.py&lt;/code&gt;, add an import for &lt;code&gt;django.urls.include&lt;/code&gt; and insert an &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;urlpatterns&lt;/code&gt; list, so you have:</source>
          <target state="translated">次のステップは、 &lt;code&gt;polls.urls&lt;/code&gt; モジュールでルートURLconfをポイントすることです。で &lt;code&gt;mysite/urls.py&lt;/code&gt; 、のインポートを追加 &lt;code&gt;django.urls.include&lt;/code&gt; を挿入&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;urlpatterns&lt;/code&gt; のあなたが持っているので、リスト：</target>
        </trans-unit>
        <trans-unit id="55407ce42ace76171ba4356c8a83e24c70d2b092" translate="yes" xml:space="preserve">
          <source>The next steps are for you to &lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;download Django&lt;/a&gt;, read &lt;a href=&quot;tutorial01&quot;&gt;the tutorial&lt;/a&gt; and join &lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;the community&lt;/a&gt;. Thanks for your interest!</source>
          <target state="translated">次のステップは、&lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;Django&lt;/a&gt;をダウンロードし&lt;a href=&quot;tutorial01&quot;&gt;、チュートリアル&lt;/a&gt;を読んで&lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;、コミュニティに&lt;/a&gt;参加することです。関心をお寄せいただきありがとうございます。</target>
        </trans-unit>
        <trans-unit id="b331b66099d3bb9b909d08656c6ca6ec0260e35f" translate="yes" xml:space="preserve">
          <source>The notation to use a &lt;code&gt;Transform&lt;/code&gt; in a lookup expression is &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transformation&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;date__year&lt;/code&gt;).</source>
          <target state="translated">検索式で &lt;code&gt;Transform&lt;/code&gt; を使用する表記は、 &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transformation&amp;gt;&lt;/code&gt; （例： &lt;code&gt;date__year&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3fc93828bd60e8b69b385a482cfa174bbd405403" translate="yes" xml:space="preserve">
          <source>The notation to use a lookup in an expression is &lt;code&gt;&amp;lt;lhs&amp;gt;__&amp;lt;lookup_name&amp;gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">式でルックアップを使用する表記は、 &lt;code&gt;&amp;lt;lhs&amp;gt;__&amp;lt;lookup_name&amp;gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="13682a7aacefbe7b282e2b6bf69b24d557af9e50" translate="yes" xml:space="preserve">
          <source>The number of decimal places to store with the number.</source>
          <target state="translated">数字と一緒に格納する小数点以下の桁数です。</target>
        </trans-unit>
        <trans-unit id="00c59dfddf64ff7f7efb2a30b5234d67dba743c6" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0-indexed)</source>
          <target state="translated">ループの終了からの反復回数(インデックスは0</target>
        </trans-unit>
        <trans-unit id="66c416e66d2fe43d99293bca74ef6b14e3036e51" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1-indexed)</source>
          <target state="translated">ループの終了からの反復回数(1インデックス</target>
        </trans-unit>
        <trans-unit id="4fe342071d44857b960cd507f4be351d570cc91e" translate="yes" xml:space="preserve">
          <source>The number of request parameters is correlated to the amount of time needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don&amp;rsquo;t typically perform deep request inspection, it&amp;rsquo;s not possible to perform a similar check at that level.</source>
          <target state="translated">要求パラメーターの数は、要求を処理し、GETおよびPOST辞書にデータを取り込むのに必要な時間と相関しています。チェックしないままにしておくと、大きなリクエストがサービス拒否攻撃のベクトルとして使用される可能性があります。Webサーバーは通常、詳細な要求検査を実行しないため、そのレベルで同様のチェックを実行することはできません。</target>
        </trans-unit>
        <trans-unit id="546d5c180752491cf696f9bc101df2930192df31" translate="yes" xml:space="preserve">
          <source>The number of seconds before a cache entry is considered stale. If the value of this settings is &lt;code&gt;None&lt;/code&gt;, cache entries will not expire.</source>
          <target state="translated">キャッシュエントリが古くなったと見なされるまでの秒数。この設定の値が &lt;code&gt;None&lt;/code&gt; の場合、キャッシュエントリは期限切れになりません。</target>
        </trans-unit>
        <trans-unit id="d1457f2a74a27329cebb1009ea40b2e349137787" translate="yes" xml:space="preserve">
          <source>The number of subtle interactions between &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; is already testing our ability to manage things. It&amp;rsquo;s unlikely you&amp;rsquo;d want to write this kind of class yourself.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; の&lt;/a&gt;間の微妙な相互作用の数は、すでに物事を管理する能力をテストしています。この種のクラスを自分で書きたいとは思わないでしょう。</target>
        </trans-unit>
        <trans-unit id="aee54169fbe489f4be8a2932eda638f26f68a734" translate="yes" xml:space="preserve">
          <source>The numeric mode (i.e. &lt;code&gt;0o644&lt;/code&gt;) to set newly uploaded files to. For more information about what these modes mean, see the documentation for &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.chmod&quot;&gt;&lt;code&gt;os.chmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">新しくアップロードされたファイルに設定する数値モード（つまり &lt;code&gt;0o644&lt;/code&gt; ）。これらのモードの意味の詳細については、&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.chmod&quot;&gt; &lt;code&gt;os.chmod()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b7ad979907d146b501a20d10b822273d1806b93c" translate="yes" xml:space="preserve">
          <source>The numeric mode to apply to directories created in the process of uploading files.</source>
          <target state="translated">ファイルをアップロードする過程で作成されたディレクトリに適用する数値モード。</target>
        </trans-unit>
        <trans-unit id="22b988dfd0f6161a0a5adc49ca1bcc5714bc4ab5" translate="yes" xml:space="preserve">
          <source>The object &lt;code&gt;django.db.connection&lt;/code&gt; represents the default database connection. To use the database connection, call &lt;code&gt;connection.cursor()&lt;/code&gt; to get a cursor object. Then, call &lt;code&gt;cursor.execute(sql, [params])&lt;/code&gt; to execute the SQL and &lt;code&gt;cursor.fetchone()&lt;/code&gt; or &lt;code&gt;cursor.fetchall()&lt;/code&gt; to return the resulting rows.</source>
          <target state="translated">オブジェクト &lt;code&gt;django.db.connection&lt;/code&gt; はデフォルトのデータベース接続を表します。データベース接続を使用するには、 &lt;code&gt;connection.cursor()&lt;/code&gt; を呼び出してカーソルオブジェクトを取得します。次に、 &lt;code&gt;cursor.execute(sql, [params])&lt;/code&gt; を呼び出してSQLを実行し、 &lt;code&gt;cursor.fetchone()&lt;/code&gt; または &lt;code&gt;cursor.fetchall()&lt;/code&gt; を実行して結果の行を返します。</target>
        </trans-unit>
        <trans-unit id="e00bf3a0502c4dc9197752dccc5c2a67f4930049" translate="yes" xml:space="preserve">
          <source>The object`s &lt;code&gt;repr()&lt;/code&gt; after the modification.</source>
          <target state="translated">変更後のオブジェクトの &lt;code&gt;repr()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f9892589134caf81b0b3fc3e3efbcd0baaac0a5" translate="yes" xml:space="preserve">
          <source>The objects in the changelist page can be filtered with lookups from the URL&amp;rsquo;s query string. This is how &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; works, for example. The lookups are similar to what&amp;rsquo;s used in &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;QuerySet.filter()&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;user__email=user@example.com&lt;/code&gt;). Since the lookups in the query string can be manipulated by the user, they must be sanitized to prevent unauthorized data exposure.</source>
          <target state="translated">チェンジリストページのオブジェクトは、URLのクエリ文字列からのルックアップでフィルタリングできます。これは、たとえば&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; の&lt;/a&gt;動作方法です。ルックアップは &lt;code&gt;user__email=user@example.com&lt;/code&gt; &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;QuerySet.filter()&lt;/code&gt; &lt;/a&gt;使用されるものと似ています（例：user__email=user@example.com）。クエリ文字列内のルックアップはユーザーが操作できるため、不正なデータの漏えいを防ぐためにサニタイズする必要があります。</target>
        </trans-unit>
        <trans-unit id="891fc8ec3b599241bbcff2dce045076385cc7d5b" translate="yes" xml:space="preserve">
          <source>The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see &lt;a href=&quot;#explicitly-specifying-auto-primary-key-values&quot;&gt;Explicitly specifying auto-primary-key values&lt;/a&gt; above and &lt;a href=&quot;#forcing-an-insert-or-update&quot;&gt;Forcing an INSERT or UPDATE&lt;/a&gt; below.</source>
          <target state="translated">ここで1つ問題があるのは、新しいオブジェクトを保存するときに、主キー値が未使用であることが保証できない場合は、主キー値を明示的に指定しないように注意する必要があることです。このニュアンスの詳細については、上記の&lt;a href=&quot;#explicitly-specifying-auto-primary-key-values&quot;&gt;自動主キー値の明示的な指定&lt;/a&gt;および下記の&lt;a href=&quot;#forcing-an-insert-or-update&quot;&gt;INSERTまたはUPDATEの強制を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="757c851014b010cea5120b811277066509e78ba7" translate="yes" xml:space="preserve">
          <source>The one potential gotcha is that &lt;a href=&quot;#django.db.models.FilePathField.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; applies to the base filename, not the full path. So, this example:</source>
          <target state="translated">潜在的な問題の1つは、&lt;a href=&quot;#django.db.models.FilePathField.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;が完全なパスではなくベースファイル名に適用されることです。したがって、この例：</target>
        </trans-unit>
        <trans-unit id="e8c61e286aa56beddb1fc2ccb35f397cdd75e322" translate="yes" xml:space="preserve">
          <source>The only caveat is that prior to PostgreSQL 11, adding columns with default values causes a full rewrite of the table, for a time proportional to its size. For this reason, it&amp;rsquo;s recommended you always create new columns with &lt;code&gt;null=True&lt;/code&gt;, as this way they will be added immediately.</source>
          <target state="translated">唯一の注意点は、PostgreSQL 11より前のバージョンでは、デフォルト値の列を追加すると、テーブルのサイズに比例した時間でテーブルが完全に書き直されることです。このため、常に &lt;code&gt;null=True&lt;/code&gt; で新しい列を作成することをお勧めします。これにより、列がすぐに追加されます。</target>
        </trans-unit>
        <trans-unit id="c9c8b224a20d235aa17fd7c10c62c76504526c9a" translate="yes" xml:space="preserve">
          <source>The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models.</source>
          <target state="translated">あなたがしなければならない唯一の決定は、親モデルをそれ自体のモデル(独自のデータベーステーブルを持つ)にしたいのか、それとも親が子モデルを通してのみ見える共通の情報の保持者に過ぎないのか、ということです。</target>
        </trans-unit>
        <trans-unit id="2e679d2a9d1e0da3e526b09c8d435d169042d55c" translate="yes" xml:space="preserve">
          <source>The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code &amp;ndash; such as the &lt;code&gt;content_type='text/csv'&lt;/code&gt; &amp;ndash; is the same.</source>
          <target state="translated">この例と前の例の唯一の違いは、この例ではCSVモジュールの代わりにテンプレートの読み込みを使用していることです。 &lt;code&gt;content_type='text/csv'&lt;/code&gt; などのコードの残りの部分は同じです。</target>
        </trans-unit>
        <trans-unit id="ccb259ef09ebc29f938af14253599fa5fc48577f" translate="yes" xml:space="preserve">
          <source>The only exceptions are variables that are already marked as &amp;ldquo;safe&amp;rdquo; from escaping, either by the code that populated the variable, or because it has had the &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filters applied.</source>
          <target state="translated">唯一の例外は、変数にデータを入力したコードによって、または&lt;a href=&quot;#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt;フィルターまたは&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;フィルターが適用されているために、エスケープから「安全」と既にマークされている変数です。</target>
        </trans-unit>
        <trans-unit id="e121fdae28d92727bd6e8181e283ab3198bfde73" translate="yes" xml:space="preserve">
          <source>The only exceptions that are not visible to the test client are &lt;a href=&quot;../http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check &lt;code&gt;response.status_code&lt;/code&gt; in your test.</source>
          <target state="translated">テストクライアントに表示されない唯一の例外は、&lt;a href=&quot;../http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;です。Djangoはこれらの例外を内部でキャッチし、適切なHTTP応答コードに変換します。これらの場合、テストで &lt;code&gt;response.status_code&lt;/code&gt; を確認できます。</target>
        </trans-unit>
        <trans-unit id="a6ca94ec80dbdad447c4b8efa0935510294065af" translate="yes" xml:space="preserve">
          <source>The only new concept here is the &lt;code&gt;self.nodelist.render(context)&lt;/code&gt; in &lt;code&gt;UpperNode.render()&lt;/code&gt;.</source>
          <target state="translated">ここでの唯一の新しい概念である &lt;code&gt;self.nodelist.render(context)&lt;/code&gt; で &lt;code&gt;UpperNode.render()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c109e1873867f26e06020a7b1a915ae80add5d2a" translate="yes" xml:space="preserve">
          <source>The only parameter that is set differently from the source raster is the name. The default value of the raster name is the name of the source raster appended with &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt;. For file-based rasters it is recommended to provide the file path of the target raster.</source>
          <target state="translated">ソースラスタとは別に設定される唯一のパラメータは名前です。ラスタ名のデフォルト値は、 &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt; 追加されたソースラスタの名前です。ファイルベースのラスターの場合、ターゲットラスターのファイルパスを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3eb902536903cadc270686a49f3f13cd76621106" translate="yes" xml:space="preserve">
          <source>The only place you should assign to settings is in a settings file.</source>
          <target state="translated">設定に割り当てるべき場所は、設定ファイルの中だけです。</target>
        </trans-unit>
        <trans-unit id="082d8cd7773874714658bc00d84f5caf59366dcc" translate="yes" xml:space="preserve">
          <source>The only thing this does is create those extra permissions when you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt; (the function that creates permissions is connected to the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal). Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (changing the status of tasks or closing tasks.) Continuing the above example, the following checks if a user may close tasks:</source>
          <target state="translated">これが行う唯一のことは、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt;を実行したときに追加の権限を作成することです（権限を作成する関数は&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt;シグナルに接続されています）。このコードは、ユーザーがアプリケーションが提供する機能にアクセスしようとするときに、これらの権限の値をチェックする役割を果たします（タスクのステータスの変更またはタスクの終了）。 ：</target>
        </trans-unit>
        <trans-unit id="994e6a000e80d66476b990aec150bb90898dd1a3" translate="yes" xml:space="preserve">
          <source>The operations are the key; they are a set of declarative instructions which tell Django what schema changes need to be made. Django scans them and builds an in-memory representation of all of the schema changes to all apps, and uses this to generate the SQL which makes the schema changes.</source>
          <target state="translated">宣言的な命令のセットであり、どのようなスキーマ変更が必要かを Django に伝えるためのものです。Django はそれらをスキャンして、すべてのアプリのスキーマ変更のインメモリ表現を構築し、スキーマ変更を行う SQL を生成するためにこれを使用します。</target>
        </trans-unit>
        <trans-unit id="59b2d4ff04a59fad81f4bdd78bf742f2968f4426" translate="yes" xml:space="preserve">
          <source>The option (&lt;code&gt;delete&lt;/code&gt; in our example) is available in the options dict parameter of the handle method. See the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; Python documentation for more about &lt;code&gt;add_argument&lt;/code&gt; usage.</source>
          <target state="translated">オプション（この例では &lt;code&gt;delete&lt;/code&gt; ）は、handleメソッドのoptions dictパラメータで使用できます。 &lt;code&gt;add_argument&lt;/code&gt; の使用方法の詳細については、&lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt; Pythonのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="46085a876254f9e93b8e417a3b34efa0b18250c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;elidable&lt;/code&gt; argument determines whether or not the operation will be removed (elided) when &lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;squashing migrations&lt;/a&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;elidable&lt;/code&gt; 引数は、migrationsを押しつぶすときに操作が削除（除外）されるかどうかを決定し&lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae878dfc21edd876de0c4de4b1e1d4f302abd27c" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; parameter allows you to specify a non-standard encoding of the strings in the source. This is typically useful when you obtain &lt;code&gt;DjangoUnicodeDecodeError&lt;/code&gt; exceptions while reading field values.</source>
          <target state="translated">オプションの &lt;code&gt;encoding&lt;/code&gt; パラメータを使用すると、ソース内の文字列の非標準エンコーディングを指定できます。これは通常、フィールド値の読み取り中に &lt;code&gt;DjangoUnicodeDecodeError&lt;/code&gt; 例外を取得する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3ca3aa3cff8cfc19f317122bb903f43713b45ad7" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;exclude&lt;/code&gt; argument can be used to provide a list of field names that can be excluded from validation and cleaning. &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; uses this argument to exclude fields that aren&amp;rsquo;t present on your form from being validated since any errors raised could not be corrected by the user.</source>
          <target state="translated">オプションの &lt;code&gt;exclude&lt;/code&gt; 引数を使用して、検証とクリーニングから除外できるフィールド名のリストを提供できます。発生したエラーはユーザーが修正できなかったため、&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;はこの引数を使用して、フォームに存在しないフィールドを検証から除外します。</target>
        </trans-unit>
        <trans-unit id="de1b3ebb8898e95c67f73c1ce55c5514432de02b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;hints&lt;/code&gt; argument will be passed as &lt;code&gt;**hints&lt;/code&gt; to the &lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of database routers to assist them in making a routing decision. See &lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;Hints&lt;/a&gt; for more details on database hints.</source>
          <target state="translated">オプションの &lt;code&gt;hints&lt;/code&gt; 引数は、として渡されます &lt;code&gt;**hints&lt;/code&gt; に&lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;ルーティング決定を行う際に、それらを支援するために、データベースのルーターの方法。データベースのヒントの詳細については、&lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;ヒント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="81a6dbd25930957894307486eacb1dd37f8db26b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;hints&lt;/code&gt; argument will be passed as &lt;code&gt;**hints&lt;/code&gt; to the &lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of database routers to assist them in making routing decisions. See &lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;Hints&lt;/a&gt; for more details on database hints.</source>
          <target state="translated">オプションの &lt;code&gt;hints&lt;/code&gt; 引数は、として渡されます &lt;code&gt;**hints&lt;/code&gt; に&lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;ルーティング決定を行う際に、それらを支援するために、データベースのルーターの方法。データベースのヒントの詳細については、&lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;ヒント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="24f6613b59b288906159fdb528e498f08daa631a" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;salt&lt;/code&gt; argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the &lt;code&gt;max_age&lt;/code&gt; argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than &lt;code&gt;max_age&lt;/code&gt; seconds.</source>
          <target state="translated">オプションの &lt;code&gt;salt&lt;/code&gt; 引数を使用して、秘密鍵へのブルートフォース攻撃に対する追加の保護を提供できます。指定されている場合、 &lt;code&gt;max_age&lt;/code&gt; 引数は、Cookie値に添付されている署名付きタイムスタンプと照合され、Cookieが &lt;code&gt;max_age&lt;/code&gt; 秒よりも古くないことを確認します。</target>
        </trans-unit>
        <trans-unit id="3e0beb39d35735253ce3024401bfaa5342ed782f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;save&lt;/code&gt; argument controls whether or not the model instance is saved after the file associated with this field has been deleted. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;save&lt;/code&gt; 引数は、このフィールドに関連付けられたファイルが削除された後にモデルインスタンスを保存するかどうかを制御します。デフォルトは &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7e395df4be2b5acaec77be07da175d627106ae22" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;skip&lt;/code&gt; argument is a list of origins to ignore when extending templates. This allow templates to extend other templates of the same name. It also used to avoid recursion errors.</source>
          <target state="translated">オプションの &lt;code&gt;skip&lt;/code&gt; 引数は、テンプレートを拡張するときに無視するオリジンのリストです。これにより、テンプレートは同じ名前の他のテンプレートを拡張できます。再帰エラーを回避するためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="dbec13ae4d38c99ea3eaf390fec6dbd0d46a405c" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;auto_now_add&lt;/code&gt;, &lt;code&gt;auto_now&lt;/code&gt;, and &lt;code&gt;default&lt;/code&gt; are mutually exclusive. Any combination of these options will result in an error.</source>
          <target state="translated">オプション &lt;code&gt;auto_now_add&lt;/code&gt; 、 &lt;code&gt;auto_now&lt;/code&gt; 、および &lt;code&gt;default&lt;/code&gt; は相互に排他的です。これらのオプションを組み合わせると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5d4f557111c3d758e5f38590ca4f0403259c181e" translate="yes" xml:space="preserve">
          <source>The order in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters because a middleware can depend on other middleware. For instance, &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; stores the authenticated user in the session; therefore, it must run after &lt;a href=&quot;../../ref/middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt;&lt;code&gt;SessionMiddleware&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../../ref/middleware#middleware-ordering&quot;&gt;Middleware ordering&lt;/a&gt; for some common hints about ordering of Django middleware classes.</source>
          <target state="translated">ミドルウェアは他のミドルウェアに依存する可能性があるため、&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;の順序は重要です。たとえば、&lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt;は認証されたユーザーをセッションに格納します。したがって、&lt;a href=&quot;../../ref/middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; の&lt;/a&gt;後に実行する必要があります。Djangoミドルウェアクラスの順序に関する一般的なヒントについては、&lt;a href=&quot;../../ref/middleware#middleware-ordering&quot;&gt;ミドルウェアの順序&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bf6c603db3c6bcb6e0cdce02b8261d81d20af0bb" translate="yes" xml:space="preserve">
          <source>The order in which assets are inserted into the DOM is often important. For example, you may have a script that depends on jQuery. Therefore, combining &lt;code&gt;Media&lt;/code&gt; objects attempts to preserve the relative order in which assets are defined in each &lt;code&gt;Media&lt;/code&gt; class.</source>
          <target state="translated">多くの場合、アセットがDOMに挿入される順序は重要です。たとえば、jQueryに依存するスクリプトがあるとします。したがって、 &lt;code&gt;Media&lt;/code&gt; オブジェクトを組み合わせると、各 &lt;code&gt;Media&lt;/code&gt; クラスでアセットが定義される相対的な順序が維持されます。</target>
        </trans-unit>
        <trans-unit id="e1925eb506b801bc393ff892c8be28e0c8894df9" translate="yes" xml:space="preserve">
          <source>The order in which fields are added to the deferred set does not matter. Calling &lt;code&gt;defer()&lt;/code&gt; with a field name that has already been deferred is harmless (the field will still be deferred).</source>
          <target state="translated">フィールドが据え置きセットに追加される順序は重要ではありません。既に延期されているフィールド名を指定して &lt;code&gt;defer()&lt;/code&gt; を呼び出しても問題はありません（フィールドは引き続き延期されます）。</target>
        </trans-unit>
        <trans-unit id="91b05ba78c4e0ad277b8d18abd2c3f37d8c4c5b8" translate="yes" xml:space="preserve">
          <source>The order in which routers are processed is significant. Routers will be queried in the order they are listed in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; setting. In this example, the &lt;code&gt;AuthRouter&lt;/code&gt; is processed before the &lt;code&gt;PrimaryReplicaRouter&lt;/code&gt;, and as a result, decisions concerning the models in &lt;code&gt;auth&lt;/code&gt; are processed before any other decision is made. If the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; setting listed the two routers in the other order, &lt;code&gt;PrimaryReplicaRouter.allow_migrate()&lt;/code&gt; would be processed first. The catch-all nature of the PrimaryReplicaRouter implementation would mean that all models would be available on all databases.</source>
          <target state="translated">ルーターが処理される順序は重要です。ルーターは、&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;設定にリストされている順序で照会されます。この例では、 &lt;code&gt;AuthRouter&lt;/code&gt; は、前に処理され &lt;code&gt;PrimaryReplicaRouter&lt;/code&gt; 、その結果、中のモデルに関する決定 &lt;code&gt;auth&lt;/code&gt; 、他の決定がなされる前に処理されます。&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;設定に2つのルーターが逆の順序でリストされている場合、 &lt;code&gt;PrimaryReplicaRouter.allow_migrate()&lt;/code&gt; が最初に処理されます。 PrimaryReplicaRouter実装のすべての性質は、すべてのモデルがすべてのデータベースで使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="21797a53c5c3f090cf4e3abea4b784de459e747a" translate="yes" xml:space="preserve">
          <source>The order of &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;の順序が重要であるため、同じユーザー名とパスワードが複数のバックエンドで有効な場合、Djangoは最初に一致した場所で処理を停止します。</target>
        </trans-unit>
        <trans-unit id="22cdfae8dbc9bd47788fb40bf4bacd41605d32e8" translate="yes" xml:space="preserve">
          <source>The order of &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; is significant! For example, if you want to customize the Django admin, you might choose to override the standard &lt;code&gt;admin/base_site.html&lt;/code&gt; template, from &lt;code&gt;django.contrib.admin&lt;/code&gt;, with your own &lt;code&gt;admin/base_site.html&lt;/code&gt; in &lt;code&gt;myproject.polls&lt;/code&gt;. You must then make sure that your &lt;code&gt;myproject.polls&lt;/code&gt; comes &lt;em&gt;before&lt;/em&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, otherwise &lt;code&gt;django.contrib.admin&lt;/code&gt;&amp;rsquo;s will be loaded first and yours will be ignored.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;の順序は重要です！あなたはDjangoの管理者をカスタマイズしたい場合たとえば、あなたは標準上書きすることを選択するかもしれません &lt;code&gt;admin/base_site.html&lt;/code&gt; から、テンプレートを &lt;code&gt;django.contrib.admin&lt;/code&gt; ご自身で、 &lt;code&gt;admin/base_site.html&lt;/code&gt; で &lt;code&gt;myproject.polls&lt;/code&gt; 。次に、あなたのことを確認する必要があります &lt;code&gt;myproject.polls&lt;/code&gt; が来る&lt;em&gt;前に&lt;/em&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; に&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;そうでない場合は、 &lt;code&gt;django.contrib.admin&lt;/code&gt; sが最初にロードされ、あなたが無視されます」。</target>
        </trans-unit>
        <trans-unit id="a1068ec95eaa283b6039de7f96e36b6cc7116c6d" translate="yes" xml:space="preserve">
          <source>The order of &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;select_related()&lt;/code&gt; chaining isn&amp;rsquo;t important. These querysets are equivalent:</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; と &lt;code&gt;select_related()&lt;/code&gt; の連鎖の順序は重要ではありません。これらのクエリセットは同等です：</target>
        </trans-unit>
        <trans-unit id="5499d8f59b9f5c13285991f2b461a09bd23ce9e8" translate="yes" xml:space="preserve">
          <source>The order of a &lt;code&gt;Question&lt;/code&gt; object&amp;rsquo;s related &lt;code&gt;Answer&lt;/code&gt; objects can be set by passing in a list of &lt;code&gt;Answer&lt;/code&gt; primary keys:</source>
          <target state="translated">&lt;code&gt;Question&lt;/code&gt; オブジェクトの関連する &lt;code&gt;Answer&lt;/code&gt; オブジェクトの順序は、 &lt;code&gt;Answer&lt;/code&gt; 主キーのリストを渡すことで設定できます。</target>
        </trans-unit>
        <trans-unit id="bc04f4694d1052f69aed771a1d1c7d7ca59ef7c2" translate="yes" xml:space="preserve">
          <source>The order of fields in your query doesn&amp;rsquo;t matter. In other words, both of the following queries work identically:</source>
          <target state="translated">クエリ内のフィールドの順序は重要ではありません。つまり、次のクエリはどちらも同じように機能します。</target>
        </trans-unit>
        <trans-unit id="3bcf47b56cab432271bc226d6a899e7e79d541cc" translate="yes" xml:space="preserve">
          <source>The ordering of attributes of an HTML element is not significant.</source>
          <target state="translated">HTML要素の属性の順序は重要ではありません。</target>
        </trans-unit>
        <trans-unit id="c1727d38a54d75600eb696ce3889db4987a1853b" translate="yes" xml:space="preserve">
          <source>The ordering of lookups matters.</source>
          <target state="translated">ルックアップの順序が重要です。</target>
        </trans-unit>
        <trans-unit id="90d54bfcd3086dd384ceebe47f26905291a11d5a" translate="yes" xml:space="preserve">
          <source>The original use case for adding context processors for Jinja2 involved:</source>
          <target state="translated">Jinja2 のコンテキストプロセッサを追加するための元々のユースケースは、これに関係していました。</target>
        </trans-unit>
        <trans-unit id="d4147c68696bbf722f232d0a404cbe34a2e44464" translate="yes" xml:space="preserve">
          <source>The outer &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; container receives the &lt;code&gt;id&lt;/code&gt; attribute of the widget, if defined, or &lt;a href=&quot;api#django.forms.BoundField.auto_id&quot;&gt;&lt;code&gt;BoundField.auto_id&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">外側の &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; コンテナーは、ウィジェットの &lt;code&gt;id&lt;/code&gt; 属性（定義されている場合）、または&lt;a href=&quot;api#django.forms.BoundField.auto_id&quot;&gt; &lt;code&gt;BoundField.auto_id&lt;/code&gt; を受け取り&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="29161efdb3eaeebb42eedab86571ec7318d50ea3" translate="yes" xml:space="preserve">
          <source>The outer &lt;code&gt;mysite/&lt;/code&gt; root directory is a container for your project. Its name doesn&amp;rsquo;t matter to Django; you can rename it to anything you like.</source>
          <target state="translated">外側の &lt;code&gt;mysite/&lt;/code&gt; ルートディレクトリは、プロジェクトのコンテナです。その名前はDjangoにとって重要ではありません。好きな名前に変更できます。</target>
        </trans-unit>
        <trans-unit id="54de0cbdb7d9dca88c045cd6e8c593237a2d897b" translate="yes" xml:space="preserve">
          <source>The output differs significantly between databases.</source>
          <target state="translated">データベースによって出力が大きく異なります。</target>
        </trans-unit>
        <trans-unit id="7429b7db31a2412511c59b97a99a3ef5a9ef65fc" translate="yes" xml:space="preserve">
          <source>The output follows the schema described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0440&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 440&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">出力は、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0440&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 440で&lt;/strong&gt;&lt;/a&gt;説明されているスキーマに従います。</target>
        </trans-unit>
        <trans-unit id="59fc36f20bf8cf921717983a500874059b86e078" translate="yes" xml:space="preserve">
          <source>The output from template tags is &lt;strong&gt;not&lt;/strong&gt; automatically run through the auto-escaping filters (with the exception of &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt;&lt;code&gt;simple_tag()&lt;/code&gt;&lt;/a&gt; as described above). However, there are still a couple of things you should keep in mind when writing a template tag.</source>
          <target state="translated">テンプレートタグからの出力は、自動エスケープフィルターを介して自動的には実行され&lt;strong&gt;ません&lt;/strong&gt;&lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt; &lt;code&gt;simple_tag()&lt;/code&gt; &lt;/a&gt;上記のsimple_tag（）を除く）。ただし、テンプレートタグを作成する際に注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b69917dae85959287bc248cef681c58dd12476f2" translate="yes" xml:space="preserve">
          <source>The output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations.</source>
          <target state="translated">このプロパティからの出力には、PostGISがEWKT表現でサポートしている3dm、3dz、および4d情報は含まれていません。</target>
        </trans-unit>
        <trans-unit id="bb0119774032b67a3035083d18e903e43f8ca2c4" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;dumpdata&lt;/code&gt; can be used as input for &lt;a href=&quot;#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">出力 &lt;code&gt;dumpdata&lt;/code&gt; のはのための入力として使用することができる&lt;a href=&quot;#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; の&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19df519925d5e30f2dc8454d1801f7e49d27a0fb" translate="yes" xml:space="preserve">
          <source>The output uses HTML5 syntax, targeting &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;. For example, it uses boolean attributes such as &lt;code&gt;checked&lt;/code&gt; rather than the XHTML style of &lt;code&gt;checked='checked'&lt;/code&gt;.</source>
          <target state="translated">出力はHTML5構文を使用し、 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; をターゲットにします。たとえば、 &lt;code&gt;checked='checked'&lt;/code&gt; の XHTMLスタイルではなく、 &lt;code&gt;checked&lt;/code&gt; などのブール属性を使用します。</target>
        </trans-unit>
        <trans-unit id="63b6b98eefb452725af559bb477e5a59f84f7005" translate="yes" xml:space="preserve">
          <source>The package &lt;code&gt;django.shortcuts&lt;/code&gt; collects helper functions and classes that &amp;ldquo;span&amp;rdquo; multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience&amp;rsquo;s sake.</source>
          <target state="translated">パッケージ &lt;code&gt;django.shortcuts&lt;/code&gt; は、MVCの複数のレベルにまたがるヘルパー関数とクラスを収集します。言い換えると、これらの関数/クラスは、便宜上制御された結合を導入します。</target>
        </trans-unit>
        <trans-unit id="08ff1ee3e031110a607cd2a310c72e63027d79ab" translate="yes" xml:space="preserve">
          <source>The page shown after a user has been emailed a link to reset their password. This view is called by default if the &lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt;&lt;code&gt;PasswordResetView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have an explicit &lt;code&gt;success_url&lt;/code&gt; URL set.</source>
          <target state="translated">ユーザーにパスワードをリセットするためのリンクが電子メールで送信された後に表示されるページ。このビューは、&lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt; &lt;code&gt;PasswordResetView&lt;/code&gt; に&lt;/a&gt;明示的な &lt;code&gt;success_url&lt;/code&gt; URLが設定されていない場合にデフォルトで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f442cc6e3cc19b929680f225edb1921a4974e320" translate="yes" xml:space="preserve">
          <source>The page shown after a user has changed their password.</source>
          <target state="translated">ユーザーがパスワードを変更した後に表示されるページです。</target>
        </trans-unit>
        <trans-unit id="c574ad0f3c6e85b72cff9d91ccad42ce0a72262b" translate="yes" xml:space="preserve">
          <source>The paginator class to be used for pagination. By default, &lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt; is used. If the custom paginator class doesn&amp;rsquo;t have the same constructor interface as &lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt;, you will also need to provide an implementation for &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt;&lt;code&gt;ModelAdmin.get_paginator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ページネーションに使用されるページネータークラス。デフォルトでは、&lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;が使用されます。カスタムページネータクラスが同じコンストラクタインタフェースがない場合は&lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; を&lt;/a&gt;、あなたはまたのための実装を提供する必要があります&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt; &lt;code&gt;ModelAdmin.get_paginator()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17531609b8ff85573cd6f907f89f88527fa66751" translate="yes" xml:space="preserve">
          <source>The paginator class to be used for pagination. By default, &lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt; is used. If the custom paginator class doesn&amp;rsquo;t have the same constructor interface as &lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt;, you will also need to provide an implementation for &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.get_paginator&quot;&gt;&lt;code&gt;get_paginator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ページネーションに使用されるページネータークラス。デフォルトでは、&lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;が使用されます。カスタムページネータクラスが同じコンストラクタインタフェースがない場合は&lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; を&lt;/a&gt;、あなたはまたのために実装する必要があります&lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.get_paginator&quot;&gt; &lt;code&gt;get_paginator()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3260006f18bf145f7c736a90674ea43e024f7cef" translate="yes" xml:space="preserve">
          <source>The parameters sent to the wrappers are:</source>
          <target state="translated">ラッパーに送られるパラメータは</target>
        </trans-unit>
        <trans-unit id="182f189d1c0069ab822d40cc4da3ea09d1194926" translate="yes" xml:space="preserve">
          <source>The parser for this function should grab the parameter and create a &lt;code&gt;Node&lt;/code&gt; object:</source>
          <target state="translated">この関数のパーサーは、パラメーターを取得して &lt;code&gt;Node&lt;/code&gt; オブジェクトを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3a527b4d3e34dc895b2592b2d4fa50c5a205421" translate="yes" xml:space="preserve">
          <source>The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It&amp;rsquo;s low-level because that&amp;rsquo;s fastest.</source>
          <target state="translated">解析は非常に低レベルです。Django開発者は、EBNF文法などの手法を使用して、この解析システムの上に小さなフレームワークを書く実験をしましたが、それらの実験により、テンプレートエンジンが遅くなりすぎました。最速なので低レベルです。</target>
        </trans-unit>
        <trans-unit id="487ff88151bdf1b239d84c46424e5d25e63751bb" translate="yes" xml:space="preserve">
          <source>The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will generate a random password.</source>
          <target state="translated">テストを実行する際に使用する Oracle データベースに接続する際に使用するパスワード。省略した場合、Django はランダムなパスワードを生成します。</target>
        </trans-unit>
        <trans-unit id="2705988536efaa4735e5b504118d175f097cee40" translate="yes" xml:space="preserve">
          <source>The password to use when connecting to the database. Not used with SQLite.</source>
          <target state="translated">データベースに接続する際に使用するパスワード。SQLiteでは使用しません。</target>
        </trans-unit>
        <trans-unit id="f1c9798e593e20270823fbd0a0ca388a237e5744" translate="yes" xml:space="preserve">
          <source>The path is where the new environment will be saved on your computer.</source>
          <target state="translated">パスは、新しい環境がコンピュータに保存される場所です。</target>
        </trans-unit>
        <trans-unit id="7c7fae6591624c2d122651744ec9edacd201c516" translate="yes" xml:space="preserve">
          <source>The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path.</source>
          <target state="translated">CSRF クッキーに設定されたパス。これは Django インストールの URL パスと一致するか、そのパスの親でなければなりません。</target>
        </trans-unit>
        <trans-unit id="30aa703152662bba86a65b974b1ae65ae56fa6ea" translate="yes" xml:space="preserve">
          <source>The path set on the language cookie. This should either match the URL path of your Django installation or be a parent of that path.</source>
          <target state="translated">言語クッキーに設定されたパス。これは Django インストールの URL パスと一致するか、そのパスの親でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3df2836510931320c2b34c1d3ecefc0bda16ed72" translate="yes" xml:space="preserve">
          <source>The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path.</source>
          <target state="translated">セッションクッキーに設定されたパス。これは Django インストールの URL パスと一致するか、そのパスの親でなければなりません。</target>
        </trans-unit>
        <trans-unit id="edf9850e4063fa4f015e6b00c7535e8feecd98f4" translate="yes" xml:space="preserve">
          <source>The path to the OGR-supported data source file (e.g., a shapefile). Also accepts &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;django.contrib.gis.gdal.DataSource&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">OGRがサポートするデータソースファイル（シェープファイルなど）へのパス。&lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;django.contrib.gis.gdal.DataSource&lt;/code&gt; &lt;/a&gt;インスタンスも受け入れます。</target>
        </trans-unit>
        <trans-unit id="c5e0080aadc181c662eeb97d03dc759ed6f22623" translate="yes" xml:space="preserve">
          <source>The path to the shapefile is not absolute &amp;ndash; in other words, if you move the &lt;code&gt;world&lt;/code&gt; application (with &lt;code&gt;data&lt;/code&gt; subdirectory) to a different location, the script will still work.</source>
          <target state="translated">シェープファイルへのパスは絶対パスではありません。つまり、（ &lt;code&gt;data&lt;/code&gt; サブディレクトリを含む） &lt;code&gt;world&lt;/code&gt; アプリケーションを別の場所に移動しても、スクリプトは機能します。</target>
        </trans-unit>
        <trans-unit id="27875ff60b116b6807ef4e8715b7783696957eff" translate="yes" xml:space="preserve">
          <source>The path to the template as returned by the template loader. For loaders that read from the file system, this is the full path to the template.</source>
          <target state="translated">テンプレートローダーが返すテンプレートへのパス。ファイルシステムから読み込むローダーの場合、これはテンプレートへのフルパスです。</target>
        </trans-unit>
        <trans-unit id="cb2bc852dfbb65b00f5ca8102d8cb8d30d60d2d7" translate="yes" xml:space="preserve">
          <source>The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as &lt;code&gt;values()&lt;/code&gt;), but it doesn&amp;rsquo;t really matter. This is your chance to really flaunt your individualism.</source>
          <target state="translated">Djangoを作成した人々は、SQLに影響するすべてのメソッドを最初に置き、その後に（オプションで）出力に影響を与えるメソッド（ &lt;code&gt;values()&lt;/code&gt; など）を置くことを好みますが、それは本当に重要ではありません。これはあなたの個性を誇示するチャンスです。</target>
        </trans-unit>
        <trans-unit id="879b1ac686a10b4dfebaba971e1e117cc6a8da3e" translate="yes" xml:space="preserve">
          <source>The per-site cache</source>
          <target state="translated">サイトごとのキャッシュ</target>
        </trans-unit>
        <trans-unit id="9a71bbff13c1062726eaad14b03135b5ca7b2831" translate="yes" xml:space="preserve">
          <source>The per-view cache</source>
          <target state="translated">ビューごとのキャッシュ</target>
        </trans-unit>
        <trans-unit id="e1399dc0275fa78c29f3d3ed6f3faaabe018817a" translate="yes" xml:space="preserve">
          <source>The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the &lt;code&gt;my_view&lt;/code&gt; example, if your URLconf looks like this:</source>
          <target state="translated">サイトごとのキャッシュと同様に、ビューごとのキャッシュはURLからキーオフされます。複数のURLが同じビューを指している場合、各URLは個別にキャッシュされます。 &lt;code&gt;my_view&lt;/code&gt; の例を続けます。URLconfが次のようになっている場合：</target>
        </trans-unit>
        <trans-unit id="3ac37a791d273073222002613539ce45ef65fcc4" translate="yes" xml:space="preserve">
          <source>The permission can then be assigned to a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; via its &lt;code&gt;user_permissions&lt;/code&gt; attribute or to a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; via its &lt;code&gt;permissions&lt;/code&gt; attribute.</source>
          <target state="translated">アクセス許可は、 &lt;code&gt;user_permissions&lt;/code&gt; 属性を介して&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;割り当てるか、 &lt;code&gt;permissions&lt;/code&gt; 属性を介して&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt;割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="d80ecaf5fed83bbf4bcc8f812f2286c97df69b30" translate="yes" xml:space="preserve">
          <source>The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants.</source>
          <target state="translated">ユーザーに与えられるパーミッションは、すべてのバックエンドが返すパーミッションのスーパーセットになります。つまり、Django はあるバックエンドが付与したパーミッションをユーザーに付与します。</target>
        </trans-unit>
        <trans-unit id="3f8c4a5c551da92aeea3e86f12798d01622663dd" translate="yes" xml:space="preserve">
          <source>The philosophy here is that your site is edited by a staff, or a client, or maybe just you &amp;ndash; and you don&amp;rsquo;t want to have to deal with creating backend interfaces only to manage content.</source>
          <target state="translated">ここでの哲学は、サイトはスタッフ、クライアント、またはおそらくあなただけによって編集され、コンテンツを管理するためだけにバックエンドインターフェースの作成に対処する必要がないことです。</target>
        </trans-unit>
        <trans-unit id="b16b71c6bbd0362e0b09053ab436a7e7fb15d36c" translate="yes" xml:space="preserve">
          <source>The plural name for the object:</source>
          <target state="translated">オブジェクトの複数形の名前です。</target>
        </trans-unit>
        <trans-unit id="64c8b0c8e17e206c38101e02c2a14524dacde157" translate="yes" xml:space="preserve">
          <source>The police beat feeds could be accessible via URLs like this:</source>
          <target state="translated">警察のビートのフィードは、このようなURLからアクセスできる可能性があります。</target>
        </trans-unit>
        <trans-unit id="eee7f514e199049047b97112ad8dbf2b39e41662" translate="yes" xml:space="preserve">
          <source>The polls application is fairly undiscriminating: it will publish any question, including ones whose &lt;code&gt;pub_date&lt;/code&gt; field lies in the future. We should improve this. Setting a &lt;code&gt;pub_date&lt;/code&gt; in the future should mean that the Question is published at that moment, but invisible until then.</source>
          <target state="translated">投票アプリケーションはかなり無差別です： &lt;code&gt;pub_date&lt;/code&gt; フィールドが将来的に存在するものを含むすべての質問を公開します。これを改善する必要があります。 &lt;code&gt;pub_date&lt;/code&gt; を将来設定すると、質問はその時点で公開されますが、それまでは表示されません。</target>
        </trans-unit>
        <trans-unit id="84f92f101a4b194e2f608b9a7df9eb5783933e11" translate="yes" xml:space="preserve">
          <source>The populated variable (in the example above, &lt;code&gt;total&lt;/code&gt;) is only available between the &lt;code&gt;{% with %}&lt;/code&gt; and &lt;code&gt;{% endwith %}&lt;/code&gt; tags.</source>
          <target state="translated">（上記の例に移入可変 &lt;code&gt;total&lt;/code&gt; ）との間でしか入手できない &lt;code&gt;{% with %}&lt;/code&gt; と &lt;code&gt;{% endwith %}&lt;/code&gt; タグ。</target>
        </trans-unit>
        <trans-unit id="e72422708d649e0b6436d32c86bb443780b65207" translate="yes" xml:space="preserve">
          <source>The port to use when connecting to the database. An empty string means the default port. Not used with SQLite.</source>
          <target state="translated">データベースに接続する際に使用するポート。空の文字列はデフォルトのポートを意味します。SQLiteでは使用されません。</target>
        </trans-unit>
        <trans-unit id="9419a955b6cf01968f0617da8750156ef83bcda1" translate="yes" xml:space="preserve">
          <source>The possible values for &lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; are found in &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt;の可能な値は&lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; にあり&lt;/a&gt;ます：</target>
        </trans-unit>
        <trans-unit id="291725821d8623d6c1f75f2f5130e7805431be00" translate="yes" xml:space="preserve">
          <source>The postmortem appears when &lt;a href=&quot;#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt; is raised. It lists the template engines and loaders that were used when trying to find a given template. For example, if two Django engines are configured, the postmortem will appear like:</source>
          <target state="translated">&lt;a href=&quot;#django.template.TemplateDoesNotExist&quot;&gt; &lt;code&gt;TemplateDoesNotExist&lt;/code&gt; &lt;/a&gt;が発生すると、事後分析が表示されます。特定のテンプレートを見つけようとしたときに使用されたテンプレートエンジンとローダーが一覧表示されます。たとえば、2つのDjangoエンジンが構成されている場合、事後分析は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6df9f5a4a4639499d415569145adafa647ab022d" translate="yes" xml:space="preserve">
          <source>The precedence of translations is such that the packages appearing later in the &lt;code&gt;packages&lt;/code&gt; argument have higher precedence than the ones appearing at the beginning. This is important in the case of clashing translations for the same literal.</source>
          <target state="translated">翻訳の優先順位は、 &lt;code&gt;packages&lt;/code&gt; 引数の後半に表示されるパッケージが、最初に表示されるパッケージよりも優先されるようになっています。これは、同じリテラルの翻訳が競合する場合に重要です。</target>
        </trans-unit>
        <trans-unit id="2c6033b4d2a19cc09db3f260666261632084c7bc" translate="yes" xml:space="preserve">
          <source>The preferred way to write tests in Django is using the &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module built-in to the Python standard library. This is covered in detail in the &lt;a href=&quot;overview&quot;&gt;Writing and running tests&lt;/a&gt; document.</source>
          <target state="translated">Djangoでテストを記述する好ましい方法は、Python標準ライブラリに組み込まれている&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;モジュールを使用することです。これについては、&lt;a href=&quot;overview&quot;&gt;テストの&lt;/a&gt;作成と実行のドキュメントで詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="a8da9919e5cd83b087be392e07b42dfe1a6f5719" translate="yes" xml:space="preserve">
          <source>The prefix can also be specified on the form class:</source>
          <target state="translated">プレフィックスはフォームクラスでも指定できます。</target>
        </trans-unit>
        <trans-unit id="1fba29e877a1a3ec872c95f6e2ddc0a201e7ca85" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;admin_password_reset&lt;/code&gt; named URL will cause a &amp;ldquo;forgotten your password?&amp;rdquo; link to appear on the default admin log-in page under the password box.</source>
          <target state="translated">URLという名前の &lt;code&gt;admin_password_reset&lt;/code&gt; が存在すると、「パスワードを忘れましたか？」パスワードボックスの下のデフォルトの管理者ログインページに表示されるリンク。</target>
        </trans-unit>
        <trans-unit id="e4992a2da237e7aa20459589fd96d8aec9298182" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% blocktrans with book|title as book_t and author|title as author_t %}&lt;/code&gt;</source>
          <target state="translated">以前のより詳細な形式は引き続きサポートされています： &lt;code&gt;{% blocktrans with book|title as book_t and author|title as author_t %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f89a845448636f3980b0124ba642a64c603e25a8" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% with business.employees.count as total %}&lt;/code&gt;</source>
          <target state="translated">以前のより詳細な形式は引き続きサポートされています： &lt;code&gt;{% with business.employees.count as total %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5428b5309178ff934e90e2596239ae9332278ea3" translate="yes" xml:space="preserve">
          <source>The previous points are written from the point of view of a single developer maintaining an application. Complex applications will be maintained by teams. Tests guarantee that colleagues don&amp;rsquo;t inadvertently break your code (and that you don&amp;rsquo;t break theirs without knowing). If you want to make a living as a Django programmer, you must be good at writing tests!</source>
          <target state="translated">これまでのポイントは、アプリケーションを保守する単一の開発者の観点から書かれています。複雑なアプリケーションはチームによって維持されます。テストは、同僚があなたのコードをうっかり壊したりしないことを保証します（そしてあなたが知らないうちに彼らを壊さないことを保証します）。Djangoプログラマーとして生計を立てるには、テストを書くのが得意でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bbdb577ec02ea1c36ada373d61b80bc484867ff0" translate="yes" xml:space="preserve">
          <source>The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features.</source>
          <target state="translated">前のセクションでは、フォームのバリデーションが一般的にどのように動作するかを説明しました。それぞれの機能が実際に使われているのを見ることで、物事を配置するのが簡単になることがありますので、ここでは前の機能のそれぞれを使った一連の小さな例を紹介します。</target>
        </trans-unit>
        <trans-unit id="c67ffbae80b072e6bef52fb33e2d87aa94f87bfe" translate="yes" xml:space="preserve">
          <source>The primary attributes of the default user are:</source>
          <target state="translated">デフォルトユーザーの主な属性は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="93a41cfbdcb8ddb875e99ee3bc06940e24ac3283" translate="yes" xml:space="preserve">
          <source>The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one.</source>
          <target state="translated">主キー・フィールドは読み取り専用です。既存のオブジェクトの主キーの値を変更してから保存すると、古いオブジェクトと一緒に新しいオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="5325a72bfaed361f9e6e6ba96380c89cbda9730c" translate="yes" xml:space="preserve">
          <source>The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one. For example:</source>
          <target state="translated">主キー・フィールドは読み取り専用です。既存のオブジェクトの主キーの値を変更して保存すると、古いオブジェクトと一緒に新しいオブジェクトが作成されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9ca647f14fb3bd00cc3bce6133eeb9123bb96ad9" translate="yes" xml:space="preserve">
          <source>The primary piece of information we have available to get a URL is an identification (e.g. the name) of the view in charge of handling it. Other pieces of information that necessarily must participate in the lookup of the right URL are the types (positional, keyword) and values of the view arguments.</source>
          <target state="translated">URLを取得するために利用できる主な情報は、それを処理するビューの識別情報(名前など)です。正しいURLの検索に参加しなければならない他の情報は、ビューの引数のタイプ(位置情報、キーワード)と値です。</target>
        </trans-unit>
        <trans-unit id="51c172625ce24d8f73d90f9b4091917412db8100" translate="yes" xml:space="preserve">
          <source>The primary task of a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; object is to validate data. With a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance, call the &lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt; method to run validation and return a boolean designating whether the data was valid:</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;オブジェクトの主なタスクは、データを検証することです。バインドされた&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスで、&lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して検証を実行し、データが有効かどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="a0283ada3aa002159af800fae9008fc484cc6639" translate="yes" xml:space="preserve">
          <source>The primary/replica (referred to as master/slave by some databases) configuration described is also flawed &amp;ndash; it doesn&amp;rsquo;t provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the replicas). It also doesn&amp;rsquo;t consider the interaction of transactions with the database utilization strategy.</source>
          <target state="translated">説明されているプラ​​イマリ/レプリカ（一部のデータベースではマスター/スレーブと呼ばれる）構成にも欠陥があります。レプリケーションラグを処理するためのソリューションは提供されません（つまり、書き込みがに伝播するのに時間がかかるため、クエリの不整合が発生します）レプリカ）。また、トランザクションとデータベース使用戦略との相互作用についても考慮されていません。</target>
        </trans-unit>
        <trans-unit id="48a78b655ec8852eae9602a405057000a5fe43f5" translate="yes" xml:space="preserve">
          <source>The problem with function-based generic views is that while they covered the simple cases well, there was no way to extend or customize them beyond some configuration options, limiting their usefulness in many real-world applications.</source>
          <target state="translated">関数ベースの汎用ビューの問題点は、単純なケースを十分にカバーしていたものの、設定オプションを超えて拡張したりカスタマイズしたりする方法がなく、多くの実世界のアプリケーションでの有用性が制限されていたことです。</target>
        </trans-unit>
        <trans-unit id="9788c3aa616f092ea3ce6e521eff09ea8fb6f136" translate="yes" xml:space="preserve">
          <source>The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the &lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; functions in the &lt;code&gt;polls.urls&lt;/code&gt; module, you can remove a reliance on specific URL paths defined in your url configurations by using the &lt;code&gt;{% url %}&lt;/code&gt; template tag:</source>
          <target state="translated">このハードコーディングされた密結合アプローチの問題は、多数のテンプレートを含むプロジェクトでURLを変更することが困難になることです。ただし、 &lt;code&gt;polls.urls&lt;/code&gt; モジュールの&lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;関数でname引数を定義したので、 &lt;code&gt;{% url %}&lt;/code&gt; テンプレートタグを使用して、url構成で定義された特定のURLパスへの依存を削除できます。</target>
        </trans-unit>
        <trans-unit id="bcd3d259158fddca611b2e8c88a43fbfd4d14af3" translate="yes" xml:space="preserve">
          <source>The problem with this is that every time &lt;code&gt;Pizza.__str__()&lt;/code&gt; asks for &lt;code&gt;self.toppings.all()&lt;/code&gt; it has to query the database, so &lt;code&gt;Pizza.objects.all()&lt;/code&gt; will run a query on the Toppings table for &lt;strong&gt;every&lt;/strong&gt; item in the Pizza &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">これに伴う問題は、毎回ということである &lt;code&gt;Pizza.__str__()&lt;/code&gt; を要求 &lt;code&gt;self.toppings.all()&lt;/code&gt; それはので、データベースを照会する必要があります &lt;code&gt;Pizza.objects.all()&lt;/code&gt; のためのトッピングテーブルにクエリを実行します&lt;strong&gt;、すべて&lt;/strong&gt;のアイテムPizza &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ece63ed4cc7dfa356db9e8e5e0cbc71116a2e60" translate="yes" xml:space="preserve">
          <source>The process can be made robust, &lt;a href=&quot;expressions#avoiding-race-conditions-using-f&quot;&gt;avoiding a race condition&lt;/a&gt;, as well as slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; for performing this kind of relative update. Using &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt;, the previous example is expressed as:</source>
          <target state="translated">プロセスは、新しい値の明示的な割り当てとしてではなく、元のフィールド値に関連する更新を表現することにより&lt;a href=&quot;expressions#avoiding-race-conditions-using-f&quot;&gt;、競合状態を回避しながら&lt;/a&gt;堅牢になり、わずかに速くなります。Djangoは、この種の相対更新を実行&lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;ためのF式を提供しています。&lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;を使用すると、前の例は次のように表されます。</target>
        </trans-unit>
        <trans-unit id="eb4a9b8d06947d804b9cc9c1b2a90a205c3d5923" translate="yes" xml:space="preserve">
          <source>The properties in this section export the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object into a different. This output may be in the form of a string, buffer, or even another object.</source>
          <target state="translated">このセクションのプロパティは、&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトを別のオブジェクトにエクスポートします。この出力は、文字列、バッファ、または別のオブジェクトの形式である場合があります。</target>
        </trans-unit>
        <trans-unit id="d58935e6bdb4d68d6470f9fbc5547de1501ac444" translate="yes" xml:space="preserve">
          <source>The prototype of &lt;code&gt;create_superuser()&lt;/code&gt; should accept the username field, plus all required fields as arguments. For example, if your user model uses &lt;code&gt;email&lt;/code&gt; as the username field, and has &lt;code&gt;date_of_birth&lt;/code&gt; as a required field, then &lt;code&gt;create_superuser&lt;/code&gt; should be defined as:</source>
          <target state="translated">&lt;code&gt;create_superuser()&lt;/code&gt; のプロトタイプは、ユーザー名フィールドと、すべての必須フィールドを引数として受け入れる必要があります。たとえば、ユーザーモデルがユーザー名フィールドとして &lt;code&gt;email&lt;/code&gt; を使用し、必須フィールドとして &lt;code&gt;date_of_birth&lt;/code&gt; がある場合、 &lt;code&gt;create_superuser&lt;/code&gt; は次のように定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="c715291f9737999ffd47c857d85e18872da10a4e" translate="yes" xml:space="preserve">
          <source>The prototype of &lt;code&gt;create_user()&lt;/code&gt; should accept the username field, plus all required fields as arguments. For example, if your user model uses &lt;code&gt;email&lt;/code&gt; as the username field, and has &lt;code&gt;date_of_birth&lt;/code&gt; as a required field, then &lt;code&gt;create_user&lt;/code&gt; should be defined as:</source>
          <target state="translated">&lt;code&gt;create_user()&lt;/code&gt; のプロトタイプは、usernameフィールドと、すべての必須フィールドを引数として受け入れる必要があります。ユーザーモデルが使用されている場合たとえば、 &lt;code&gt;email&lt;/code&gt; ユーザ名フィールドとして、そして持っている &lt;code&gt;date_of_birth&lt;/code&gt; 必須フィールドとして、そして &lt;code&gt;create_user&lt;/code&gt; のように定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="b3f54182b42bee8873a1b07061e5e9400b5da1b1" translate="yes" xml:space="preserve">
          <source>The psycopg2 range type to use.</source>
          <target state="translated">使用するpsycopg2の範囲タイプ。</target>
        </trans-unit>
        <trans-unit id="453af653fdbdd85c1584b0f1f47eeb827399814f" translate="yes" xml:space="preserve">
          <source>The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it&amp;rsquo;s very helpful if you want to apply &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;far future Expires headers&lt;/a&gt; to the deployed files to speed up the load time for subsequent page visits.</source>
          <target state="translated">このストレージの目的は、一部のページがまだそれらのファイルを参照している場合に備えて、古いファイルを提供し続けることです。たとえば、それらはユーザーまたはサードパーティのプロキシサーバーによってキャッシュされているためです。さらに、デプロイされたファイルに&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;遠い将来のExpiresヘッダー&lt;/a&gt;を適用して、後続のページアクセスの読み込み時間を短縮する場合にも非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b392afc1f2be2d1890dc368343bb9fdbd1e9dc60" translate="yes" xml:space="preserve">
          <source>The query expression API is a common set of methods that classes define to be usable in query expressions to translate themselves into SQL expressions. Direct field references, aggregates, and &lt;code&gt;Transform&lt;/code&gt; are examples that follow this API. A class is said to follow the query expression API when it implements the following methods:</source>
          <target state="translated">クエリ式APIは、クラスがクエリ式で使用できるように定義された共通のメソッドセットであり、SQL式に変換されます。直接フィールド参照、集計、および &lt;code&gt;Transform&lt;/code&gt; は、このAPIに続く例です。クラスは、次のメソッドを実装するときにクエリ式APIに従うと言います。</target>
        </trans-unit>
        <trans-unit id="69aa5afd60c62356efa1fdfe9666e44434a5c49e" translate="yes" xml:space="preserve">
          <source>The quotes around the argument (if any) have already been stripped away, so we receive a plain string.</source>
          <target state="translated">引数の周りの引用符(もしあれば)はすでに取り除かれているので、プレーンな文字列を受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="876dbc968e75532af0aff1e56f77151583fc2b20" translate="yes" xml:space="preserve">
          <source>The raster lookup syntax is similar to the syntax for geometries. The only difference is that a band index can be specified as additional input. If no band index is specified, the first band is used by default (index &lt;code&gt;0&lt;/code&gt;). In that case the syntax is identical to the syntax for geometry lookups.</source>
          <target state="translated">ラスタールックアップの構文は、ジオメトリの構文に似ています。唯一の違いは、バンドインデックスを追加の入力として指定できることです。バンドインデックスが指定されていない場合、最初のバンドがデフォルトで使用されます（インデックス &lt;code&gt;0&lt;/code&gt; ）。その場合、構文はジオメトリルックアップの構文と同じです。</target>
        </trans-unit>
        <trans-unit id="e8a847db8ae3747fac86c506dd71091110845347" translate="yes" xml:space="preserve">
          <source>The rationale behind &amp;ldquo;decompression&amp;rdquo; is that it is necessary to &amp;ldquo;split&amp;rdquo; the combined value of the form field into the values for each widget.</source>
          <target state="translated">「解凍」の背後にある理論的根拠は、フォームフィールドの結合された値を各ウィジェットの値に「分割」する必要があることです。</target>
        </trans-unit>
        <trans-unit id="35e408a5a782fccccfa07b119894937fe134fc3a" translate="yes" xml:space="preserve">
          <source>The raw HTTP request body as a bytestring. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;HttpRequest.POST&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バイト文字列としての生のHTTPリクエスト本文。これは、バイナリイメージ、XMLペイロードなど、従来のHTMLフォームとは異なる方法でデータを処理するのに役立ちます。従来のフォームデータを処理するには、&lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;HttpRequest.POST&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="715b3f9f429fb6e754020e59b8eed7539f00d149" translate="yes" xml:space="preserve">
          <source>The raw way</source>
          <target state="translated">生の方法</target>
        </trans-unit>
        <trans-unit id="f67046a869c69b3aaf280909110bbc953bfe86c8" translate="yes" xml:space="preserve">
          <source>The raw way to limit access to pages is to check &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;request.user.is_authenticated&lt;/code&gt;&lt;/a&gt; and either redirect to a login page:</source>
          <target state="translated">ページへのアクセスを制限する生の方法は、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;request.user.is_authenticated&lt;/code&gt; &lt;/a&gt;を確認して、ログインページにリダイレクトすることです。</target>
        </trans-unit>
        <trans-unit id="6c75648934376200140f4bf005288e7564bac759" translate="yes" xml:space="preserve">
          <source>The read/write mode for the file.</source>
          <target state="translated">ファイルの読み書きモードです。</target>
        </trans-unit>
        <trans-unit id="4c01eb817eec09ca50e33a8ba47b282978d394e4" translate="yes" xml:space="preserve">
          <source>The reader I/O classes return a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance from the WKB and/or WKT input given to their &lt;code&gt;read(geom)&lt;/code&gt; method.</source>
          <target state="translated">リーダーI / Oクラスは、 &lt;code&gt;read(geom)&lt;/code&gt; メソッドに渡されたWKBおよび/またはWKT入力から&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="85c204af2beee9e3ef134d6fbae39e718ebd4b51" translate="yes" xml:space="preserve">
          <source>The reason &lt;code&gt;is_safe&lt;/code&gt; is necessary is because there are plenty of normal string operations that will turn a &lt;code&gt;SafeData&lt;/code&gt; object back into a normal &lt;code&gt;str&lt;/code&gt; object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed.</source>
          <target state="translated">&lt;code&gt;is_safe&lt;/code&gt; が必要な理由は、 &lt;code&gt;SafeData&lt;/code&gt; オブジェクトを通常の &lt;code&gt;str&lt;/code&gt; オブジェクトに戻す多くの通常の文字列操作があり、それらすべてをキャッチしようとするのではなく、非常に困難であるため、Djangoはフィルターの後に損傷を修復します完了しました。</target>
        </trans-unit>
        <trans-unit id="214c03080cb7d8763e33ff5ad80d6a091a171ef5" translate="yes" xml:space="preserve">
          <source>The reason for setting a long-lived expiration time is to avoid problems in the case of a user closing a browser or bookmarking a page and then loading that page from a browser cache. Without persistent cookies, the form submission would fail in this case.</source>
          <target state="translated">有効期限を長く設定しているのは、ユーザーがブラウザを閉じたり、ブックマークしたページをブックマークした後、ブラウザのキャッシュからそのページを読み込んだ場合の問題を回避するためです。永続的なクッキーがないと、このような場合にフォームの送信に失敗してしまいます。</target>
        </trans-unit>
        <trans-unit id="544d10f483ba2b0003f8a634b4abb234daea28b0" translate="yes" xml:space="preserve">
          <source>The reason for this is that Django&amp;rsquo;s test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django&amp;rsquo;s template system in memory) only happens during test running.</source>
          <target state="translated">その理由は、Djangoのテストランナーは、特定のビューによって読み込まれたテンプレートを判別するために、少し黒魔術を実行するためです。この黒魔術（本質的にはメモリ内のDjangoのテンプレートシステムのパッチ）は、テスト実行中にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="4fb4e101909f33b9d9683c0bc9a13be5e852255a" translate="yes" xml:space="preserve">
          <source>The reason that there are separate commands to make and apply migrations is because you&amp;rsquo;ll commit migrations to your version control system and ship them with your app; they not only make your development easier, they&amp;rsquo;re also usable by other developers and in production.</source>
          <target state="translated">移行を作成して適用するための個別のコマンドがあるのは、バージョン管理システムへの移行をコミットして、アプリに同梱するためです。開発を容易にするだけでなく、他の開発者や運用環境でも使用できます。</target>
        </trans-unit>
        <trans-unit id="6aaa561d9d1c6329693a83ed1044922212be0503" translate="yes" xml:space="preserve">
          <source>The recommended convention is to put the configuration class in a submodule of the application called &lt;code&gt;apps&lt;/code&gt;. However, this isn&amp;rsquo;t enforced by Django.</source>
          <target state="translated">推奨される規則は、構成クラスを &lt;code&gt;apps&lt;/code&gt; というアプリケーションのサブモジュールに配置することです。ただし、これはDjangoによって強制されていません。</target>
        </trans-unit>
        <trans-unit id="990ccf22fd7f716d0acf3fd1f32ff37692812367" translate="yes" xml:space="preserve">
          <source>The recommended source for the token is the &lt;code&gt;csrftoken&lt;/code&gt; cookie, which will be set if you&amp;rsquo;ve enabled CSRF protection for your views as outlined above.</source>
          <target state="translated">トークンの推奨ソースは &lt;code&gt;csrftoken&lt;/code&gt; Cookieで、上記のようにビューのCSRF保護を有効にした場合に設定されます。</target>
        </trans-unit>
        <trans-unit id="16c822e8d8ae8d31baa6ead02b9bb62819a6873e" translate="yes" xml:space="preserve">
          <source>The recommended way to create a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; is by calling the factory methods of the &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;#django.template.Engine.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.template.Engine.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.template.Engine.from_string&quot;&gt;&lt;code&gt;from_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;を作成するための推奨される方法は、&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを呼び出すことです：&lt;a href=&quot;#django.template.Engine.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.template.Engine.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.template.Engine.from_string&quot;&gt; &lt;code&gt;from_string()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b96f4fcdecba3ec643634ed634b76d2f2457d5fc" translate="yes" xml:space="preserve">
          <source>The redirects app</source>
          <target state="translated">リダイレクトアプリ</target>
        </trans-unit>
        <trans-unit id="798326dfff453527671b17b23eacb15ecc84f6dc" translate="yes" xml:space="preserve">
          <source>The reference documentation for Django&amp;rsquo;s &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;class-based view mixins&lt;/a&gt; will help you in understanding which attributes and methods are likely to cause conflict between different classes and mixins.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;クラスベースのビュー&lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;クラスベースのビューのミックスイン&lt;/a&gt;のリファレンスドキュメントは、どのクラスとミックスイン間で競合が発生する可能性がある属性とメソッドかを理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a916639d3eb5baeb04f3b7117c968ba3dee4820f" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to search for within the provided &lt;code&gt;value&lt;/code&gt;, or a pre-compiled regular expression. By default, raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;#django.core.validators.RegexValidator.message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.validators.RegexValidator.code&quot;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt; if a match is not found. That standard behavior can be reversed by setting &lt;a href=&quot;#django.core.validators.RegexValidator.inverse_match&quot;&gt;&lt;code&gt;inverse_match&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;, in which case the &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; is raised when a match &lt;strong&gt;is&lt;/strong&gt; found. By default, matches any string (including an empty string).</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; 内で検索する正規表現パターン、または事前にコンパイルされた正規表現。デフォルトでは、一致が見つからない場合、&lt;a href=&quot;#django.core.validators.RegexValidator.message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.core.validators.RegexValidator.code&quot;&gt; &lt;code&gt;code&lt;/code&gt; &lt;/a&gt;を含む&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; が発生&lt;/a&gt;します。その標準的な動作は、&lt;a href=&quot;#django.core.validators.RegexValidator.inverse_match&quot;&gt; &lt;code&gt;inverse_match&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;True&lt;/code&gt; に設定することで元に戻すことができます。その場合、一致&lt;strong&gt;が&lt;/strong&gt;見つかったときに&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;が発生します。デフォルトでは、任意の文字列（空の文字列を含む）に一致します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d3851865f3b041bc8b2d98b3cdfc230892028d7" translate="yes" xml:space="preserve">
          <source>The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python&amp;rsquo;s &lt;code&gt;re&lt;/code&gt; module.</source>
          <target state="translated">正規表現の構文は、使用中のデータベースバックエンドの構文です。組み込みの正規表現サポートがないSQLiteの場合、この機能は（Python）ユーザー定義REGEXP関数によって提供されるため、正規表現構文はPythonの &lt;code&gt;re&lt;/code&gt; モジュールの構文です。</target>
        </trans-unit>
        <trans-unit id="f2ce188f8603a02ad0bd740618f7d5b4f732f2bc" translate="yes" xml:space="preserve">
          <source>The related objects also get two methods, &lt;code&gt;get_next_in_order()&lt;/code&gt; and &lt;code&gt;get_previous_in_order()&lt;/code&gt;, which can be used to access those objects in their proper order. Assuming the &lt;code&gt;Answer&lt;/code&gt; objects are ordered by &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">関連オブジェクトは、 &lt;code&gt;get_next_in_order()&lt;/code&gt; および &lt;code&gt;get_previous_in_order()&lt;/code&gt; という 2つのメソッドも取得します。これらのメソッドを使用して、これらのオブジェクトに適切な順序でアクセスできます。 &lt;code&gt;Answer&lt;/code&gt; オブジェクトが &lt;code&gt;id&lt;/code&gt; 順に並べられていると仮定します。</target>
        </trans-unit>
        <trans-unit id="a8d686cac36b66df729071ab421f1d91b4f484b3" translate="yes" xml:space="preserve">
          <source>The relation on the related object back to this object doesn&amp;rsquo;t exist by default. Setting &lt;code&gt;related_query_name&lt;/code&gt; creates a relation from the related object back to this one. This allows querying and filtering from the related object.</source>
          <target state="translated">このオブジェクトに戻る関連オブジェクトの関係は、デフォルトでは存在しません。 &lt;code&gt;related_query_name&lt;/code&gt; を設定すると、関連オブジェクトからこのオブジェクトへのリレーションが作成されます。これにより、関連オブジェクトからのクエリとフィルタリングが可能になります。</target>
        </trans-unit>
        <trans-unit id="395def1e7858b0c903e1ef9c53671f055576daec" translate="yes" xml:space="preserve">
          <source>The relationship and history of generic views, class-based views, and class-based generic views</source>
          <target state="translated">ジェネリックビュー、クラスベースビュー、クラスベースジェネリックビューの関係性と歴史</target>
        </trans-unit>
        <trans-unit id="d259b62b15cf44ff7b234cf0f2bd1e1e29ef3766" translate="yes" xml:space="preserve">
          <source>The relative path to the template as passed into the template loader.</source>
          <target state="translated">テンプレートローダーに渡されるテンプレートへの相対パス。</target>
        </trans-unit>
        <trans-unit id="628dc1e654293b04802554bd23fc97503b48e57f" translate="yes" xml:space="preserve">
          <source>The reloading happens from the database the instance was loaded from, or from the default database if the instance wasn&amp;rsquo;t loaded from the database. The &lt;code&gt;using&lt;/code&gt; argument can be used to force the database used for reloading.</source>
          <target state="translated">再読み込みは、インスタンスが読み込まれたデータベースから、またはインスタンスがデータベースから読み込まれなかった場合はデフォルトのデータベースから行われます。 &lt;code&gt;using&lt;/code&gt; 引数は、リロードのために使用されるデータベースを強制的に使用することができます。</target>
        </trans-unit>
        <trans-unit id="3649420c1724d433283ebf8ec0159bd2d21fff30" translate="yes" xml:space="preserve">
          <source>The remaining specialized &lt;a href=&quot;#django.test.TransactionTestCase.assertQuerysetEqual&quot;&gt;&lt;code&gt;assert*&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">残りの特殊な&lt;a href=&quot;#django.test.TransactionTestCase.assertQuerysetEqual&quot;&gt; &lt;code&gt;assert*&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="d4105885a155f0684f2efd564da42822f281117c" translate="yes" xml:space="preserve">
          <source>The rendering of form templates is controlled by a customizable renderer class. A custom renderer can be specified by updating the &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt;&lt;code&gt;FORM_RENDERER&lt;/code&gt;&lt;/a&gt; setting. It defaults to &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt;&lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;.</source>
          <target state="translated">フォームテンプレートのレンダリングは、カスタマイズ可能なレンダラークラスによって制御されます。&lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt; &lt;code&gt;FORM_RENDERER&lt;/code&gt; &lt;/a&gt;設定を更新することにより、カスタムレンダラーを指定できます。デフォルトは &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt; &lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f00d332bd8e835bb0d9f29f5a435c37b52b2bd4a" translate="yes" xml:space="preserve">
          <source>The rendering process</source>
          <target state="translated">レンダリングプロセス</target>
        </trans-unit>
        <trans-unit id="2b74e08a4e356bf4a91fa743c425960507371130" translate="yes" xml:space="preserve">
          <source>The request (the browser) hasn&amp;rsquo;t sent an &lt;code&gt;Accept-Encoding&lt;/code&gt; header containing &lt;code&gt;gzip&lt;/code&gt;.</source>
          <target state="translated">リクエスト（ブラウザ）が &lt;code&gt;gzip&lt;/code&gt; を含む &lt;code&gt;Accept-Encoding&lt;/code&gt; ヘッダーを送信していません。</target>
        </trans-unit>
        <trans-unit id="87b9aefcbd820112e09338669560b1cdc27b0434" translate="yes" xml:space="preserve">
          <source>The request data that stimulated the response.</source>
          <target state="translated">レスポンスを刺激したリクエストデータ。</target>
        </trans-unit>
        <trans-unit id="aca14c4668cd5b5621f25092a67f3965992fab48" translate="yes" xml:space="preserve">
          <source>The request factory</source>
          <target state="translated">依頼工場</target>
        </trans-unit>
        <trans-unit id="d1f172fd54fab5fdf8cf9450d6c69da0daaf2b30" translate="yes" xml:space="preserve">
          <source>The request object used to generate this response.</source>
          <target state="translated">このレスポンスを生成するために使用されるリクエストオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8b1495313a0a791fb27607d327e80fe685f6a312" translate="yes" xml:space="preserve">
          <source>The required method &lt;a href=&quot;#django.forms.MultiWidget.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; breaks up a &lt;code&gt;datetime.date&lt;/code&gt; value into the day, month, and year values corresponding to each widget. If an invalid date was selected, such as the non-existent 30th February, the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; passes this method a string instead, so that needs parsing. The final &lt;code&gt;return&lt;/code&gt; handles when &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, meaning we don&amp;rsquo;t have any defaults for our subwidgets.</source>
          <target state="translated">必要なメソッド&lt;a href=&quot;#django.forms.MultiWidget.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;datetime.date&lt;/code&gt; 値を各ウィジェットに対応する日、月、年の値に分解します。存在しない2月30日など、無効な日付が選択された場合、&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;は代わりにこのメソッドに文字列を渡すため、解析が必要になります。最終的な &lt;code&gt;return&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; は、値が &lt;code&gt;None&lt;/code&gt; の場合に処理されます。つまり、サブウィジェットのデフォルトはありません。</target>
        </trans-unit>
        <trans-unit id="5955d10e9af56c8f4dc87bad1ae31f82927bdbcb" translate="yes" xml:space="preserve">
          <source>The resampling algorithm used for warping can be specified with the &lt;code&gt;resampling&lt;/code&gt; argument. The default is &lt;code&gt;NearestNeighbor&lt;/code&gt;, and the other allowed values are &lt;code&gt;Bilinear&lt;/code&gt;, &lt;code&gt;Cubic&lt;/code&gt;, &lt;code&gt;CubicSpline&lt;/code&gt;, &lt;code&gt;Lanczos&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, and &lt;code&gt;Mode&lt;/code&gt;.</source>
          <target state="translated">ワーピングに使用されるリサンプリングアルゴリズムは、 &lt;code&gt;resampling&lt;/code&gt; 引数で指定できます。デフォルトは &lt;code&gt;NearestNeighbor&lt;/code&gt; で、その他の許容値は、 &lt;code&gt;Bilinear&lt;/code&gt; 、 &lt;code&gt;Cubic&lt;/code&gt; 、 &lt;code&gt;CubicSpline&lt;/code&gt; 、 &lt;code&gt;Lanczos&lt;/code&gt; 、 &lt;code&gt;Average&lt;/code&gt; 、および &lt;code&gt;Mode&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cf2cec9af0d52f9fcaa5a85cdd4d838ace8e7b3b" translate="yes" xml:space="preserve">
          <source>The response class to be returned by &lt;code&gt;render_to_response&lt;/code&gt; method. Default is &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;. The template and context of &lt;code&gt;TemplateResponse&lt;/code&gt; instances can be altered later (e.g. in &lt;a href=&quot;../../topics/http/middleware#template-response-middleware&quot;&gt;template response middleware&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;render_to_response&lt;/code&gt; メソッドによって返される応答クラス。デフォルトは&lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;TemplateResponse&lt;/code&gt; インスタンスのテンプレートとコンテキストは後で変更できます（例：&lt;a href=&quot;../../topics/http/middleware#template-response-middleware&quot;&gt;テンプレート応答ミドルウェア&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a4670161441f4fe196b94864edd9d000edb7a23c" translate="yes" xml:space="preserve">
          <source>The response format is as follows:</source>
          <target state="translated">応答形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d7a537914ffe8060b589033071bf0b85a4cceb6e" translate="yes" xml:space="preserve">
          <source>The response gets a special MIME type, &lt;em&gt;text/csv&lt;/em&gt;. This tells browsers that the document is a CSV file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which will result in ugly, scary gobbledygook in the browser window.</source>
          <target state="translated">応答は特別なMIMEタイプである&lt;em&gt;text / csvを&lt;/em&gt;取得し&lt;em&gt;ます&lt;/em&gt;。これは、ドキュメントがHTMLファイルではなくCSVファイルであることをブラウザに通知します。これをオフにしておくと、ブラウザーはおそらく出力をHTMLとして解釈するため、ブラウザーウィンドウに醜くて恐ろしいゴブルディゴークが表示されます。</target>
        </trans-unit>
        <trans-unit id="88e8fd0f065cc28fd8a941930557ccba8eef9e64" translate="yes" xml:space="preserve">
          <source>The response gets an additional &lt;code&gt;Content-Disposition&lt;/code&gt; header, which contains the name of the CSV file. This filename is arbitrary; call it whatever you want. It&amp;rsquo;ll be used by browsers in the &amp;ldquo;Save as&amp;hellip;&amp;rdquo; dialog, etc.</source>
          <target state="translated">応答は、CSVファイルの名前を含む追加の &lt;code&gt;Content-Disposition&lt;/code&gt; ヘッダーを取得します。このファイル名は任意です。好きなように呼んでください。[名前を付けて保存]ダイアログなどのブラウザで使用されます。</target>
        </trans-unit>
        <trans-unit id="20d9a12f39752374cd8ca0ae5722416047afa081" translate="yes" xml:space="preserve">
          <source>The response has already set the &lt;code&gt;Content-Encoding&lt;/code&gt; header.</source>
          <target state="translated">応答は既に &lt;code&gt;Content-Encoding&lt;/code&gt; ヘッダーを設定しています。</target>
        </trans-unit>
        <trans-unit id="d088dab9aa5e290bd218d9e46e9510b5a370c8db" translate="yes" xml:space="preserve">
          <source>The response will automatically set the MIME type &lt;em&gt;application/pdf&lt;/em&gt; based on the filename extension. This tells browsers that the document is a PDF file, rather than an HTML file or a generic &lt;code&gt;application/octet-stream&lt;/code&gt; binary content.</source>
          <target state="translated">応答では、ファイル名拡張子に基づいてMIMEタイプ&lt;em&gt;application / pdf&lt;/em&gt;が自動的に設定されます。これは、ドキュメントがHTMLファイルや一般的な &lt;code&gt;application/octet-stream&lt;/code&gt; バイナリコンテンツではなくPDFファイルであることをブラウザに伝えます。</target>
        </trans-unit>
        <trans-unit id="2e428b0f11924508a88f262351963fccf091b6c5" translate="yes" xml:space="preserve">
          <source>The result above will be ordered by &lt;code&gt;pub_date&lt;/code&gt; descending, then by &lt;code&gt;headline&lt;/code&gt; ascending. The negative sign in front of &lt;code&gt;&quot;-pub_date&quot;&lt;/code&gt; indicates &lt;em&gt;descending&lt;/em&gt; order. Ascending order is implied. To order randomly, use &lt;code&gt;&quot;?&quot;&lt;/code&gt;, like so:</source>
          <target state="translated">上記の結果は、 &lt;code&gt;pub_date&lt;/code&gt; の降順、次に &lt;code&gt;headline&lt;/code&gt; 昇順の順に並べられます。 &lt;code&gt;&quot;-pub_date&quot;&lt;/code&gt; 前の負符号は&lt;em&gt;降順を&lt;/em&gt;示します。昇順を意味します。ランダムに並べるには &lt;code&gt;&quot;?&quot;&lt;/code&gt; 、 そのようです：</target>
        </trans-unit>
        <trans-unit id="3538f23694ada4bbb6f9528816858d186a1b8b5c" translate="yes" xml:space="preserve">
          <source>The result obeys the following contract:</source>
          <target state="translated">結果は以下の契約に従う。</target>
        </trans-unit>
        <trans-unit id="c14e6d591ac1c8b97d9f4c9fd6aea23af150fa40" translate="yes" xml:space="preserve">
          <source>The result of a &lt;code&gt;gettext_lazy()&lt;/code&gt; call can be used wherever you would use a string (a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object) in other Django code, but it may not work with arbitrary Python code. For example, the following won&amp;rsquo;t work because the &lt;a href=&quot;https://pypi.org/project/requests/&quot;&gt;requests&lt;/a&gt; library doesn&amp;rsquo;t handle &lt;code&gt;gettext_lazy&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;gettext_lazy()&lt;/code&gt; 呼び出しの結果は、他のDjangoコードで文字列（&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;オブジェクト）を使用する場所ならどこでも使用できますが、任意のPythonコードでは機能しない可能性があります。たとえば、&lt;a href=&quot;https://pypi.org/project/requests/&quot;&gt;リクエスト&lt;/a&gt;ライブラリが &lt;code&gt;gettext_lazy&lt;/code&gt; オブジェクトを処理しないため、次のコードは機能しません。</target>
        </trans-unit>
        <trans-unit id="7e7830179f43052d618c32acfea5c89d8c4fe2d6" translate="yes" xml:space="preserve">
          <source>The result of refining a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is itself a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, so it&amp;rsquo;s possible to chain refinements together. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;を改良した結果は、それ自体が&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;であるため、改良を連鎖させることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="ac9654f7b6ea693576218903d8e129485c97271c" translate="yes" xml:space="preserve">
          <source>The result of the underlying &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.size&quot;&gt;&lt;code&gt;Storage.size()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">基になる&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.size&quot;&gt; &lt;code&gt;Storage.size()&lt;/code&gt; &lt;/a&gt;メソッドの結果。</target>
        </trans-unit>
        <trans-unit id="0e3d6cea04a2cfcbbe2aeef0076ec48f7c2afd31" translate="yes" xml:space="preserve">
          <source>The resulting SQL of the above example would be:</source>
          <target state="translated">上記の例の結果のSQLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6188e80a07d82c2b94db9d423143039cc16f0659" translate="yes" xml:space="preserve">
          <source>The resulting data can be accessed in JavaScript like this:</source>
          <target state="translated">結果のデータは、このようにJavaScriptでアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="0947bc3770f747599e991dec0f778f2763925658" translate="yes" xml:space="preserve">
          <source>The return value of the &lt;code&gt;call_command()&lt;/code&gt; function is the same as the return value of the &lt;code&gt;handle()&lt;/code&gt; method of the command.</source>
          <target state="translated">戻り値 &lt;code&gt;call_command()&lt;/code&gt; 関数の戻り値と同じである &lt;code&gt;handle()&lt;/code&gt; コマンドの方法。</target>
        </trans-unit>
        <trans-unit id="3af0a38e6adad5be9bbb174e2b2e9f885c843b3f" translate="yes" xml:space="preserve">
          <source>The return value of this method replaces the existing value in &lt;code&gt;cleaned_data&lt;/code&gt;, so it must be the field&amp;rsquo;s value from &lt;code&gt;cleaned_data&lt;/code&gt; (even if this method didn&amp;rsquo;t change it) or a new cleaned value.</source>
          <target state="translated">このメソッドの戻り値は、既存の値が置き換え &lt;code&gt;cleaned_data&lt;/code&gt; をので、からフィールドの値でなければなりません &lt;code&gt;cleaned_data&lt;/code&gt; （この方法は、それを変更しなかった場合でも）、または新しい掃除値。</target>
        </trans-unit>
        <trans-unit id="93e2f040a9a63e3a0e45c70d06ff09c108767c11" translate="yes" xml:space="preserve">
          <source>The return value will be the number of successfully delivered messages (which can be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; since it can only send one message).</source>
          <target state="translated">戻り値は、正常に配信されたメッセージの数になります（1つのメッセージしか送信できないため、 &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;1&lt;/code&gt; になる場合があります）。</target>
        </trans-unit>
        <trans-unit id="91ddd3d7a5351aa57493513cc55ee1befe42c9a0" translate="yes" xml:space="preserve">
          <source>The return value will be the number of successfully delivered messages.</source>
          <target state="translated">戻り値は、正常に配信されたメッセージの数になります。</target>
        </trans-unit>
        <trans-unit id="28f60b84cb824b48c98f4e41bbf07ed96ebbfa63" translate="yes" xml:space="preserve">
          <source>The returned ranges are strictly greater than the passed range. In other words, the all the points in the returned range are greater than all those in the passed range.</source>
          <target state="translated">返された範囲は、渡された範囲よりも厳密に大きくなります。言い換えれば、返された範囲のすべての点が、渡された範囲のすべての点よりも大きいということです。</target>
        </trans-unit>
        <trans-unit id="1b9185c4933c6310716ebc4a440ef9a643c8787d" translate="yes" xml:space="preserve">
          <source>The returned ranges are strictly less than the passed range. In other words, all the points in the returned range are less than all those in the passed range.</source>
          <target state="translated">返された範囲は、渡された範囲よりも厳密には小さい。つまり、返された範囲のすべての点が、渡された範囲のすべての点よりも小さくなります。</target>
        </trans-unit>
        <trans-unit id="a5389891829ba1d74991c292d8bbf5d732122dee" translate="yes" xml:space="preserve">
          <source>The returned ranges do not contain any points greater than the passed range, that is the upper bound of the returned range is at most the upper bound of the passed range.</source>
          <target state="translated">返された範囲には、渡された範囲よりも大きい点が含まれていない、つまり、返された範囲の上界は、最大でも渡された範囲の上界です。</target>
        </trans-unit>
        <trans-unit id="2d1a674c47980282cee37557270e2c208377b77f" translate="yes" xml:space="preserve">
          <source>The returned ranges do not contain any points less than the passed range, that is the lower bound of the returned range is at least the lower bound of the passed range.</source>
          <target state="translated">返された範囲は、渡された範囲よりも小さい点を含まない、つまり、返された範囲の下界は、少なくとも渡された範囲の下界である。</target>
        </trans-unit>
        <trans-unit id="e2ffdb7d0ff2e146d12e60ab281a0e4ccdf8c087" translate="yes" xml:space="preserve">
          <source>The returned ranges share a bound with the passed range.</source>
          <target state="translated">返される範囲は、渡された範囲とバウンドを共有します。</target>
        </trans-unit>
        <trans-unit id="b314ccbc42377f9f4d0e6c927dde27486cde1172" translate="yes" xml:space="preserve">
          <source>The returned view has &lt;code&gt;view_class&lt;/code&gt; and &lt;code&gt;view_initkwargs&lt;/code&gt; attributes.</source>
          <target state="translated">返されたビューがあり &lt;code&gt;view_class&lt;/code&gt; と &lt;code&gt;view_initkwargs&lt;/code&gt; 属性を。</target>
        </trans-unit>
        <trans-unit id="833fca1f313944a2f60c7f8c3995dc0ff4e9b274" translate="yes" xml:space="preserve">
          <source>The reverse name of the &lt;code&gt;common.ChildA.m2m&lt;/code&gt; field will be &lt;code&gt;common_childa_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;common_childas&lt;/code&gt;. The reverse name of the &lt;code&gt;common.ChildB.m2m&lt;/code&gt; field will be &lt;code&gt;common_childb_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;common_childbs&lt;/code&gt;. Finally, the reverse name of the &lt;code&gt;rare.ChildB.m2m&lt;/code&gt; field will be &lt;code&gt;rare_childb_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;rare_childbs&lt;/code&gt;. It&amp;rsquo;s up to you how you use the &lt;code&gt;'%(class)s'&lt;/code&gt; and &lt;code&gt;'%(app_label)s'&lt;/code&gt; portion to construct your related name or related query name but if you forget to use it, Django will raise errors when you perform system checks (or run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;common.ChildA.m2m&lt;/code&gt; フィールドの逆の名前は &lt;code&gt;common_childa_related&lt;/code&gt; になり、逆のクエリ名は &lt;code&gt;common_childas&lt;/code&gt; になります。 &lt;code&gt;common.ChildB.m2m&lt;/code&gt; フィールドの逆の名前は &lt;code&gt;common_childb_related&lt;/code&gt; になり、逆のクエリ名は &lt;code&gt;common_childbs&lt;/code&gt; になります。最後に、 &lt;code&gt;rare.ChildB.m2m&lt;/code&gt; フィールドの逆の名前は &lt;code&gt;rare_childb_related&lt;/code&gt; になり、逆のクエリ名は &lt;code&gt;rare_childbs&lt;/code&gt; になります。 &lt;code&gt;'%(class)s'&lt;/code&gt; と &lt;code&gt;'%(app_label)s'&lt;/code&gt; の使い方はあなた次第です関連する名前または関連するクエリ名を作成する部分ですが、使用を忘れた場合、システムチェックを実行&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;（またはmigrateを実行する）と、Djangoによってエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fae6307173a40526569fc75b21329c07eb4d27bb" translate="yes" xml:space="preserve">
          <source>The right-hand side - what &lt;code&gt;lhs&lt;/code&gt; is being compared against. It can be a plain value, or something that compiles into SQL, typically an &lt;code&gt;F()&lt;/code&gt; object or a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">右側 &lt;code&gt;lhs&lt;/code&gt; 比較対象。プレーンな値でも、SQLにコンパイルされるものでもよく、通常は &lt;code&gt;F()&lt;/code&gt; オブジェクトまたは &lt;code&gt;QuerySet&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2eab55fb4d3686d02dfd4cea51948a189eed2720" translate="yes" xml:space="preserve">
          <source>The root directory of one of your Django apps.</source>
          <target state="translated">Django アプリのルートディレクトリ。</target>
        </trans-unit>
        <trans-unit id="20e5e766f6f7e052ab181f9154fd81864a8095a6" translate="yes" xml:space="preserve">
          <source>The root directory of your Django project (the one that contains &lt;code&gt;manage.py&lt;/code&gt;).</source>
          <target state="translated">Djangoプロジェクト（ &lt;code&gt;manage.py&lt;/code&gt; を含むプロジェクト）のルートディレクトリ。</target>
        </trans-unit>
        <trans-unit id="ca093a763edb27f597a68348671afc2524db0619" translate="yes" xml:space="preserve">
          <source>The route of the matching URL pattern.</source>
          <target state="translated">マッチングしたURLパターンのルート。</target>
        </trans-unit>
        <trans-unit id="cd1950a7fb4d436e01762b44823625a3c7a38b2e" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;closepoll&lt;/code&gt; could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options can be added in the &lt;a href=&quot;#django.core.management.BaseCommand.add_arguments&quot;&gt;&lt;code&gt;add_arguments()&lt;/code&gt;&lt;/a&gt; method like this:</source>
          <target state="translated">同じ &lt;code&gt;closepoll&lt;/code&gt; を簡単に変更して、追加のコマンドラインオプションを受け入れることで、特定の投票を閉じるのではなく削除することができます。これらのカスタムオプションは、&lt;a href=&quot;#django.core.management.BaseCommand.add_arguments&quot;&gt; &lt;code&gt;add_arguments()&lt;/code&gt; &lt;/a&gt;ようにadd_arguments（）メソッドで追加できます。</target>
        </trans-unit>
        <trans-unit id="8c9e104769a1a674a48a3fda24b00b9032252d95" translate="yes" xml:space="preserve">
          <source>The same field can&amp;rsquo;t be listed in both &lt;code&gt;list_editable&lt;/code&gt; and &lt;code&gt;list_display_links&lt;/code&gt; &amp;ndash; a field can&amp;rsquo;t be both a form and a link.</source>
          <target state="translated">同じフィールドを &lt;code&gt;list_editable&lt;/code&gt; と &lt;code&gt;list_display_links&lt;/code&gt; の両方にリストすることはできません。フィールドをフォームとリンクの両方にすることはできません。</target>
        </trans-unit>
        <trans-unit id="5e37b2bef8ba580cd5ab541b71879acdd872421b" translate="yes" xml:space="preserve">
          <source>The same incremental upgrade approach is recommended when upgrading from one LTS to the next.</source>
          <target state="translated">あるLTSから次のLTSにアップグレードする際には、同じインクリメンタル・アップグレード・アプローチを推奨します。</target>
        </trans-unit>
        <trans-unit id="b3b3bfbf9c27c76140be97fd31d3c9815706e4c4" translate="yes" xml:space="preserve">
          <source>The same issue can be triggered by using a reserved sequence in filter arguments:</source>
          <target state="translated">同じ問題は、フィルタの引数で予約済みのシーケンスを使用することで発生します。</target>
        </trans-unit>
        <trans-unit id="7d49bcf4db128a11dcf3ae24d922d2857a14a5ed" translate="yes" xml:space="preserve">
          <source>The same rules apply to the &lt;code&gt;aggregate()&lt;/code&gt; clause. If you wanted to know the lowest and highest price of any book that is available for sale in any of the stores, you could use the aggregate:</source>
          <target state="translated">同じルールが &lt;code&gt;aggregate()&lt;/code&gt; 句にも適用されます。いずれかのストアで販売されている本の最低価格と最高価格を知りたい場合は、次の集計を使用できます。</target>
        </trans-unit>
        <trans-unit id="d00e6744dfe65784353ae5af25539be2f599e326" translate="yes" xml:space="preserve">
          <source>The same template context is used for subject template. Subject must be single line plain text string.</source>
          <target state="translated">件名テンプレートには、同じテンプレートコンテキストが使用されます。件名は一行のプレーンテキスト文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="58bcd3c2076a780cd37416681b0a01638fc523aa" translate="yes" xml:space="preserve">
          <source>The same type of situation arises with a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. For example, if an &lt;code&gt;Entry&lt;/code&gt; has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;tags&lt;/code&gt;, we might want to find entries linked to tags called &lt;em&gt;&amp;ldquo;music&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;bands&amp;rdquo;&lt;/em&gt; or we might want an entry that contains a tag with a name of &lt;em&gt;&amp;ldquo;music&amp;rdquo;&lt;/em&gt; and a status of &lt;em&gt;&amp;ldquo;public&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; でも&lt;/a&gt;同じタイプの状況が発生します。たとえば、 &lt;code&gt;Entry&lt;/code&gt; 持っている&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;と呼ばれる &lt;code&gt;tags&lt;/code&gt; 、我々はと呼ばれるタグにリンクされているエントリ検索したいかもしれません&lt;em&gt;「音楽」&lt;/em&gt;と&lt;em&gt;「バンド」&lt;/em&gt;または、我々はの名前のタグを含むエントリたいかもしれません&lt;em&gt;「音楽」&lt;/em&gt;とステータスのを&lt;em&gt;「公開」&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2a6911035402212023ff113841a3af05f4fc2e13" translate="yes" xml:space="preserve">
          <source>The same values can be retrieved by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt; (indices 0 and 3), &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; (indices 1 and 5) and &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.skew&quot;&gt;&lt;code&gt;skew&lt;/code&gt;&lt;/a&gt; (indices 2 and 4) properties.</source>
          <target state="translated">同じ値は、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt; &lt;code&gt;origin&lt;/code&gt; &lt;/a&gt;（インデックス0および3）、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt; &lt;code&gt;scale&lt;/code&gt; &lt;/a&gt;（インデックス1および5）、および&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.skew&quot;&gt; &lt;code&gt;skew&lt;/code&gt; &lt;/a&gt;（インデックス2および4）プロパティにアクセスして取得できます。</target>
        </trans-unit>
        <trans-unit id="24a51372eb1af2fbbb9e2958f4112559e5cf0c7d" translate="yes" xml:space="preserve">
          <source>The scope of the variable created by the &lt;code&gt;as var&lt;/code&gt; syntax is the &lt;code&gt;{% block %}&lt;/code&gt; in which the &lt;code&gt;{% url %}&lt;/code&gt; tag appears.</source>
          <target state="translated">作成された変数の範囲 &lt;code&gt;as var&lt;/code&gt; 構文は &lt;code&gt;{% block %}&lt;/code&gt; に &lt;code&gt;{% url %}&lt;/code&gt; タグが現れます。</target>
        </trans-unit>
        <trans-unit id="d71fa59563ec81dc34bbf9805ee87b55f530b868" translate="yes" xml:space="preserve">
          <source>The script runs over your project source tree or your application source tree and pulls out all strings marked for translation (see &lt;a href=&quot;#how-django-discovers-translations&quot;&gt;How Django discovers translations&lt;/a&gt; and be sure &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; is configured correctly). It creates (or updates) a message file in the directory &lt;code&gt;locale/LANG/LC_MESSAGES&lt;/code&gt;. In the &lt;code&gt;de&lt;/code&gt; example, the file will be &lt;code&gt;locale/de/LC_MESSAGES/django.po&lt;/code&gt;.</source>
          <target state="translated">スクリプトはプロジェクトソースツリーまたはアプリケーションソースツリーで実行され、翻訳対象としてマークされたすべての文字列を引き出します（&lt;a href=&quot;#how-django-discovers-translations&quot;&gt;Djangoが翻訳&lt;/a&gt;を検出する方法を参照し、&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; &lt;/a&gt;が正しく構成されていることを確認してください）。これは、ディレクトリ &lt;code&gt;locale/LANG/LC_MESSAGES&lt;/code&gt; にメッセージファイルを作成（または更新）します。 &lt;code&gt;de&lt;/code&gt; 例えば、ファイルがあろう &lt;code&gt;locale/de/LC_MESSAGES/django.po&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d4ce0747b4bb3734054c4649bc904ba315d5e3" translate="yes" xml:space="preserve">
          <source>The script should be run from one of two places:</source>
          <target state="translated">スクリプトは2つの場所のいずれかから実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a96260ec28837c3111286a3e6202d9d45a94842" translate="yes" xml:space="preserve">
          <source>The second approach for reporting validation errors might involve assigning the error message to one of the fields. In this case, let&amp;rsquo;s assign an error message to both the &amp;ldquo;subject&amp;rdquo; and &amp;ldquo;cc_myself&amp;rdquo; rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We&amp;rsquo;re showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this:</source>
          <target state="translated">検証エラーを報告するための2番目のアプローチでは、フィールドの1つにエラーメッセージを割り当てる必要があります。この場合、フォーム表示の「subject」行と「cc_myself」行の両方にエラーメッセージを割り当てましょう。フォーム出力の混乱を招く可能性があるため、実際にこれを行う場合は注意してください。ここでは何が可能かを示し、特定の状況で何が効果的に機能するかについては、あなたとデザイナーに任せています。新しいコード（前のサンプルを置き換える）は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5f7d92f7e7b0791391ff1e74b29a6f88aa82af72" translate="yes" xml:space="preserve">
          <source>The second approach is to use the &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; methods on the email backend to manually control the connection. &lt;code&gt;send_messages()&lt;/code&gt; will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example:</source>
          <target state="translated">2番目のアプローチは、電子メールのバックエンドで &lt;code&gt;open()&lt;/code&gt; および &lt;code&gt;close()&lt;/code&gt; メソッドを使用して、接続を手動で制御することです。 &lt;code&gt;send_messages()&lt;/code&gt; は、すでに開いている接続を手動で開いたり閉じたりしないので、接続を手動で開いた場合、いつ接続を閉じるかを制御できます。例えば：</target>
        </trans-unit>
        <trans-unit id="2e3efc24c7fd20fc9df2c7d1b679b41d5aefd2f2" translate="yes" xml:space="preserve">
          <source>The second argument of &lt;code&gt;add_error()&lt;/code&gt; can be a string, or preferably an instance of &lt;code&gt;ValidationError&lt;/code&gt;. See &lt;a href=&quot;#raising-validation-error&quot;&gt;Raising ValidationError&lt;/a&gt; for more details. Note that &lt;code&gt;add_error()&lt;/code&gt; automatically removes the field from &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_error()&lt;/code&gt; の2番目の引数は、文字列、またはできれば &lt;code&gt;ValidationError&lt;/code&gt; のインスタンスにすることができます。詳細については、&lt;a href=&quot;#raising-validation-error&quot;&gt;ValidationErrorの発生&lt;/a&gt;を参照してください。 &lt;code&gt;add_error()&lt;/code&gt; は自動的に &lt;code&gt;cleaned_data&lt;/code&gt; からフィールドを削除することに注意してください。</target>
        </trans-unit>
        <trans-unit id="9231b4a9c11e46f633fc4359e4166a94d7495997" translate="yes" xml:space="preserve">
          <source>The second class is the &lt;code&gt;Field&lt;/code&gt; subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form.</source>
          <target state="translated">2番目のクラスは &lt;code&gt;Field&lt;/code&gt; サブクラスです。これは、最初のクラスを永続ストレージ形式とPython形式の間で相互に変換する方法を知っているクラスです。</target>
        </trans-unit>
        <trans-unit id="2749519ed6cc287c189a583a5dbe03565b43c2dc" translate="yes" xml:space="preserve">
          <source>The second difference is that it automatically populates the context with a few variables, according to the engine&amp;rsquo;s &lt;code&gt;context_processors&lt;/code&gt; configuration option.</source>
          <target state="translated">2つ目の違いは、エンジンの &lt;code&gt;context_processors&lt;/code&gt; 構成オプションに従って、いくつかの変数がコンテキストに自動的に入力されることです。</target>
        </trans-unit>
        <trans-unit id="04cdab600ff6d492b9c85e51f9ea616f0ecc41ea" translate="yes" xml:space="preserve">
          <source>The second option is to use the &lt;code&gt;force_insert&lt;/code&gt; option to &lt;code&gt;save()&lt;/code&gt; to ensure that Django does an SQL &lt;code&gt;INSERT&lt;/code&gt;:</source>
          <target state="translated">2番目のオプションは、Djangoが確実にSQL &lt;code&gt;INSERT&lt;/code&gt; を実行できるように、 &lt;code&gt;save()&lt;/code&gt; に &lt;code&gt;force_insert&lt;/code&gt; オプションを使用することです。</target>
        </trans-unit>
        <trans-unit id="f7c129f254ad0e20b2d394de09d8d68668947ea7" translate="yes" xml:space="preserve">
          <source>The second query counts the number of books that have a rating exceeding 3.0 for each publisher. The filter precedes the annotation, so the filter constrains the objects considered when calculating the annotation.</source>
          <target state="translated">2 番目のクエリでは、各出版社の評価が 3.0 を超えている本の数をカウントします。フィルタはアノテーションの前にあるので、フィルタはアノテーションを計算する際に考慮されるオブジェクトを制限します。</target>
        </trans-unit>
        <trans-unit id="4df0824d3dfaf3a260f6082684e83bd9c7d628eb" translate="yes" xml:space="preserve">
          <source>The second step &lt;code&gt;full_clean()&lt;/code&gt; performs is to call &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt;&lt;code&gt;Model.clean()&lt;/code&gt;&lt;/a&gt;. This method should be overridden to perform custom validation on your model.</source>
          <target state="translated">&lt;code&gt;full_clean()&lt;/code&gt; が実行する2番目のステップは、Model.clean（）を呼び出すこと&lt;a href=&quot;#django.db.models.Model.clean&quot;&gt; &lt;code&gt;Model.clean()&lt;/code&gt; &lt;/a&gt;。モデルでカスタム検証を実行するには、このメソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="27e39d0116ed446f2f74eabf5549557d2e7504d9" translate="yes" xml:space="preserve">
          <source>The second step in writing custom tags is to define a &lt;code&gt;Node&lt;/code&gt; subclass that has a &lt;code&gt;render()&lt;/code&gt; method.</source>
          <target state="translated">カスタムタグを記述する2番目のステップは、 &lt;code&gt;render()&lt;/code&gt; メソッドを持つ &lt;code&gt;Node&lt;/code&gt; サブクラスを定義することです。</target>
        </trans-unit>
        <trans-unit id="8740e528ce3da4e64daa6a15895436729c3f000a" translate="yes" xml:space="preserve">
          <source>The second task of a &lt;code&gt;Form&lt;/code&gt; object is to render itself as HTML. To do so, &lt;code&gt;print&lt;/code&gt; it:</source>
          <target state="translated">&lt;code&gt;Form&lt;/code&gt; オブジェクトの2番目のタスクは、それ自体をHTMLとしてレンダリングすることです。そのためには、それを &lt;code&gt;print&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e5e9f3d06888362216211128b4689f633ad87855" translate="yes" xml:space="preserve">
          <source>The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;). For example:</source>
          <target state="translated">Djangoがサポートする2番目のタイプのモデル継承は、階層内の各モデルがそれ自体でモデルである場合です。各モデルは独自のデータベーステーブルに対応しており、個別にクエリを実行して作成できます。継承関係により、（自動的に作成された&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; を&lt;/a&gt;介して）子モデルと各親の間にリンクが導入されます。例えば：</target>
        </trans-unit>
        <trans-unit id="b87b4139b16c9ea6b22776990536a398a56e2ddf" translate="yes" xml:space="preserve">
          <source>The second way to generate summary values is to generate an independent summary for each object in a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">サマリー値を生成する2番目の方法は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; の&lt;/a&gt;各オブジェクトの独立したサマリーを生成することです。たとえば、本のリストを取得する場合、各本に何人の著者が寄稿したかを知りたい場合があります。各本は著者と多対多の関係にあります。 &lt;code&gt;QuerySet&lt;/code&gt; の本ごとにこの関係を要約します。</target>
        </trans-unit>
        <trans-unit id="955ce0b833e3fe1408d6ab1ea4e01cbfd029953d" translate="yes" xml:space="preserve">
          <source>The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the &lt;code&gt;template_name&lt;/code&gt;) or methods (such as &lt;code&gt;get_context_data&lt;/code&gt;) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, &lt;code&gt;about.html&lt;/code&gt;. Django has a generic view to do this - &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; - so we can subclass it, and override the template name:</source>
          <target state="translated">ジェネリックビューを使用する2番目のより強力な方法は、既存のビューから継承し、サブクラスの属性（ &lt;code&gt;template_name&lt;/code&gt; など）またはメソッド（ &lt;code&gt;get_context_data&lt;/code&gt; など）をオーバーライドして、新しい値またはメソッドを提供することです。たとえば、 &lt;code&gt;about.html&lt;/code&gt; という 1つのテンプレートのみを表示するビューを考えてみます。Djangoはこれを行うための一般的な見解を持っている- &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; -我々はそれをサブクラス化し、テンプレート名を上書きすることができるように：</target>
        </trans-unit>
        <trans-unit id="ae200081256a76cf9fa5d93cdf773354b4227fa5" translate="yes" xml:space="preserve">
          <source>The secret key is used for:</source>
          <target state="translated">秘密鍵を使用しています。</target>
        </trans-unit>
        <trans-unit id="1535f99b602c999783ef5365870bcf6a80a77c17" translate="yes" xml:space="preserve">
          <source>The security checks do not make your site secure. They do not audit code, do intrusion detection, or do anything particularly complex. Rather, they help perform an automated, low-hanging-fruit checklist, that can help you to improve your site&amp;rsquo;s security.</source>
          <target state="translated">セキュリティチェックは、サイトを安全にしません。コードの監査、侵入検知、特に複雑な処理は行いません。むしろ、サイトのセキュリティを向上させるのに役立つ自動化された、簡単なフルーツチェックリストの実行に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9a8c017152815689248540519b1703662bd2cf98" translate="yes" xml:space="preserve">
          <source>The security loggers will receive messages on any occurrence of &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; and other security-related errors. There is a sub-logger for each subtype of security error, including all &lt;code&gt;SuspiciousOperation&lt;/code&gt;s. The level of the log event depends on where the exception is handled. Most occurrences are logged as a warning, while any &lt;code&gt;SuspiciousOperation&lt;/code&gt; that reaches the WSGI handler will be logged as an error. For example, when an HTTP &lt;code&gt;Host&lt;/code&gt; header is included in a request from a client that does not match &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt;, Django will return a 400 response, and an error message will be logged to the &lt;code&gt;django.security.DisallowedHost&lt;/code&gt; logger.</source>
          <target state="translated">セキュリティロガーは、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;およびその他のセキュリティ関連のエラーが発生するとメッセージを受け取ります。すべての &lt;code&gt;SuspiciousOperation&lt;/code&gt; を含む、セキュリティエラーのサブタイプごとにサブロガーがあります。ログイベントのレベルは、例外が処理される場所によって異なります。ほとんどの発生は警告としてログに記録されますが、WSGIハンドラーに到達した &lt;code&gt;SuspiciousOperation&lt;/code&gt; はエラーとしてログに記録されます。たとえば、&lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;に一致しないクライアントからのリクエストにHTTP &lt;code&gt;Host&lt;/code&gt; ヘッダーが含まれている場合、Djangoは400応答を返し、エラーメッセージが &lt;code&gt;django.security.DisallowedHost&lt;/code&gt; ロガーに記録されます。</target>
        </trans-unit>
        <trans-unit id="9e0f12c094c690a80b16f07d67de5edaf7d7b072" translate="yes" xml:space="preserve">
          <source>The session dictionary accepts any &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; serializable value when using &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; or any picklable Python object when using &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">セッションディクショナリは、&lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; &lt;/a&gt;を使用する場合は&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; の&lt;/a&gt;シリアル化可能な値、またはPickleSerializer を使用する場合はピクル可能なPythonオブジェクトを&lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt;ます。詳細については、&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="e35922e630f20249ec9042c300948fc643cab60b" translate="yes" xml:space="preserve">
          <source>The session is not saved if the response&amp;rsquo;s status code is 500.</source>
          <target state="translated">応答のステータスコードが500の場合、セッションは保存されません。</target>
        </trans-unit>
        <trans-unit id="2f0eea75fa7d331e2abf0ff67f1b00aad0282a57" translate="yes" xml:space="preserve">
          <source>The set of fields to update as passed to &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;update_fields&lt;/code&gt; wasn&amp;rsquo;t passed to &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; に&lt;/a&gt;渡されたときに更新するフィールドのセット、または &lt;code&gt;update_fields&lt;/code&gt; が &lt;code&gt;save()&lt;/code&gt; に渡されなかった場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23f815aca7be18e5c46a756945c0068e9aa45f3a" translate="yes" xml:space="preserve">
          <source>The setting must be the &lt;em&gt;full&lt;/em&gt; path to the &lt;strong&gt;C&lt;/strong&gt; shared library; in other words you want to use &lt;code&gt;libgeos_c.so&lt;/code&gt;, not &lt;code&gt;libgeos.so&lt;/code&gt;.</source>
          <target state="translated">設定がなければなりません&lt;em&gt;完全な&lt;/em&gt;パス&lt;strong&gt;C&lt;/strong&gt;共有ライブラリ。つまり、 &lt;code&gt;libgeos_c.so&lt;/code&gt; ではなく &lt;code&gt;libgeos.so&lt;/code&gt; を使用したいということです。</target>
        </trans-unit>
        <trans-unit id="43f0cb37adadfa231abd3204173b3559513b6ab8" translate="yes" xml:space="preserve">
          <source>The settings below have sensible defaults, and shouldn&amp;rsquo;t require manual setting.</source>
          <target state="translated">以下の設定には適切なデフォルトがあり、手動で設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="fbba6b5893b691a78597afda71719076c4e2f3d5" translate="yes" xml:space="preserve">
          <source>The settings file contains some settings that are only consulted during initialization of Django internals. If you change them with &lt;code&gt;override_settings&lt;/code&gt;, the setting is changed if you access it via the &lt;code&gt;django.conf.settings&lt;/code&gt; module, however, Django&amp;rsquo;s internals access it differently. Effectively, using &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; with these settings is probably not going to do what you expect it to do.</source>
          <target state="translated">設定ファイルには、Django内部の初期化中にのみ参照されるいくつかの設定が含まれています。 &lt;code&gt;override_settings&lt;/code&gt; でこれらを変更した場合、 &lt;code&gt;django.conf.settings&lt;/code&gt; モジュールを介してアクセスすると設定が変更されますが、Djangoの内部からはアクセス方法が異なります。事実上、これらの設定で&lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#django.test.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt;を使用しても、期待どおりに動作しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e4994867007b999256756ccbe1e325955a4f469" translate="yes" xml:space="preserve">
          <source>The settings handler.</source>
          <target state="translated">設定ハンドラです。</target>
        </trans-unit>
        <trans-unit id="d96ddc86f7a01e9214faf44f5f94c2acc7bd4806" translate="yes" xml:space="preserve">
          <source>The settings module to compare the current settings against. Leave empty to compare against Django&amp;rsquo;s default settings.</source>
          <target state="translated">現在の設定と比較する設定モジュール。空のままにすると、Djangoのデフォルト設定と比較されます。</target>
        </trans-unit>
        <trans-unit id="daff59a2d84f51417b786ed3d47e6c6c70db8d2e" translate="yes" xml:space="preserve">
          <source>The severity of the message. Use one of the predefined values: &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;CRITICAL&lt;/code&gt;. If the level is greater or equal to &lt;code&gt;ERROR&lt;/code&gt;, then Django will prevent management commands from executing. Messages with level lower than &lt;code&gt;ERROR&lt;/code&gt; (i.e. warnings) are reported to the console, but can be silenced.</source>
          <target state="translated">メッセージの重大度。事前定義された値のいずれかを使用します： &lt;code&gt;DEBUG&lt;/code&gt; 、 &lt;code&gt;INFO&lt;/code&gt; 、 &lt;code&gt;WARNING&lt;/code&gt; 、 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;CRITICAL&lt;/code&gt; 。レベルが &lt;code&gt;ERROR&lt;/code&gt; 以上の場合、Djangoは管理コマンドの実行を防止します。 &lt;code&gt;ERROR&lt;/code&gt; より低いレベルのメッセージ（つまり、警告）はコンソールに報告されますが、非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="c9a42097105f3fe23943b9e54d772efc8700f873" translate="yes" xml:space="preserve">
          <source>The shortcut view (&lt;code&gt;django.contrib.contenttypes.views.shortcut&lt;/code&gt;) uses the domain of the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object when calculating an object&amp;rsquo;s URL.</source>
          <target state="translated">ショートカットビュー（ &lt;code&gt;django.contrib.contenttypes.views.shortcut&lt;/code&gt; ）は、オブジェクトのURLを計算するときに現在の&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;オブジェクトのドメインを使用します。</target>
        </trans-unit>
        <trans-unit id="a0367a435210eefa6ee3034f3399ebd2c9293c85" translate="yes" xml:space="preserve">
          <source>The signature is appended to the end of the string, following the colon. You can retrieve the original value using the &lt;code&gt;unsign&lt;/code&gt; method:</source>
          <target state="translated">署名は、コロンの後の文字列の最後に追加されます。 &lt;code&gt;unsign&lt;/code&gt; メソッドを使用して元の値を取得できます。</target>
        </trans-unit>
        <trans-unit id="50ccadf7df70403760c5d064c7884bb59385dc50" translate="yes" xml:space="preserve">
          <source>The similar template tag &lt;a href=&quot;../templates/builtins#std:templatetag-get_media_prefix&quot;&gt;&lt;code&gt;get_media_prefix&lt;/code&gt;&lt;/a&gt; which works like &lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt;&lt;code&gt;get_static_prefix&lt;/code&gt;&lt;/a&gt; but uses &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../templates/builtins#std:templatetag-get_media_prefix&quot;&gt; &lt;code&gt;get_media_prefix&lt;/code&gt; &lt;/a&gt;と同様に&lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt; &lt;code&gt;get_static_prefix&lt;/code&gt; &lt;/a&gt;が、&lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; を&lt;/a&gt;使用する同様のテンプレートタグget_media_prefix。</target>
        </trans-unit>
        <trans-unit id="6abe52c0ed7e3ab6a23d1047f985e8d596334cc9" translate="yes" xml:space="preserve">
          <source>The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following:</source>
          <target state="translated">最もシンプルな設定ファイルは、SQLiteを使用した単一データベースのセットアップ用です。これは、以下のように設定することができます。</target>
        </trans-unit>
        <trans-unit id="5ace5d761f4959bafdaa5e3113f1ce313de02fef" translate="yes" xml:space="preserve">
          <source>The simplest way to retrieve objects from a table is to get all of them. To do this, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">テーブルからオブジェクトを取得する最も簡単な方法は、それらすべてを取得することです。これを行うには、&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="52b16d4e7b314498be9f2952398e668adf29cd4e" translate="yes" xml:space="preserve">
          <source>The sitemap framework</source>
          <target state="translated">サイトマップフレームワーク</target>
        </trans-unit>
        <trans-unit id="11295cffc86f5ad19f00a1782ed37fd95420afb6" translate="yes" xml:space="preserve">
          <source>The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your &lt;code&gt;sitemaps&lt;/code&gt; dictionary. The only differences in usage are:</source>
          <target state="translated">サイトマップフレームワークには、 &lt;code&gt;sitemaps&lt;/code&gt; ディクショナリで定義されているセクションごとに1つずつ、個々のサイトマップファイルを参照するサイトマップインデックスを作成する機能もあります。使用法の唯一の違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3858d967f8980cf6e61e8ec128647b2f1879c701" translate="yes" xml:space="preserve">
          <source>The sitemap framework provides a convenience class for a common case:</source>
          <target state="translated">サイトマップフレームワークでは、よくあるケースの便利なクラスを提供しています。</target>
        </trans-unit>
        <trans-unit id="ef72e72951e66bb8c2edbac6e948311578859341" translate="yes" xml:space="preserve">
          <source>The sitemap view takes an extra, required argument: &lt;code&gt;{'sitemaps': sitemaps}&lt;/code&gt;. &lt;code&gt;sitemaps&lt;/code&gt; should be a dictionary that maps a short section label (e.g., &lt;code&gt;blog&lt;/code&gt; or &lt;code&gt;news&lt;/code&gt;) to its &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class (e.g., &lt;code&gt;BlogSitemap&lt;/code&gt; or &lt;code&gt;NewsSitemap&lt;/code&gt;). It may also map to an &lt;em&gt;instance&lt;/em&gt; of a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class (e.g., &lt;code&gt;BlogSitemap(some_var)&lt;/code&gt;).</source>
          <target state="translated">サイトマップビューは、追加の必須引数 &lt;code&gt;{'sitemaps': sitemaps}&lt;/code&gt; 取ります。 &lt;code&gt;sitemaps&lt;/code&gt; 短いセクションのラベル（例えば、マッピングした辞書でなければなりません &lt;code&gt;blog&lt;/code&gt; や &lt;code&gt;news&lt;/code&gt; そのために）&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;クラス（例えば、 &lt;code&gt;BlogSitemap&lt;/code&gt; または &lt;code&gt;NewsSitemap&lt;/code&gt; ）。また、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;クラスの&lt;em&gt;インスタンス&lt;/em&gt;（例： &lt;code&gt;BlogSitemap(some_var)&lt;/code&gt; ）にマップする場合もあり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="621dc9b224a288114cf11d09756159474c159f60" translate="yes" xml:space="preserve">
          <source>The sites framework</source>
          <target state="translated">サイトの枠組み</target>
        </trans-unit>
        <trans-unit id="ac304e3cb27724e325b549a253fc46d5fd5f134d" translate="yes" xml:space="preserve">
          <source>The sites framework is mainly based on this model:</source>
          <target state="translated">サイトの枠組みは主にこのモデルに基づいています。</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">ファイルのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="a191f66f2ff3d662e45b49c5c86e72633c70ad4b" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the uploaded file.</source>
          <target state="translated">アップロードされたファイルのサイズ (バイト単位)。</target>
        </trans-unit>
        <trans-unit id="92141737ed37f235c75582be194bce228f33b6fa" translate="yes" xml:space="preserve">
          <source>The smallest convex polygon that contains this geometry, as a new &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt;&lt;code&gt;OGRGeometry&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt; &lt;code&gt;OGRGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトとして、このジオメトリを含む最小の凸多角形。</target>
        </trans-unit>
        <trans-unit id="1ac6e1b126807dd40652d6347d761ec0ecdc46f7" translate="yes" xml:space="preserve">
          <source>The solution is to indicate a page&amp;rsquo;s cache should be &amp;ldquo;private.&amp;rdquo; To do this in Django, use the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; view decorator. Example:</source>
          <target state="translated">解決策は、ページのキャッシュが「プライベート」であることを示すことです。Djangoでこれを行うには、&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;ビューデコレータを使用します。例：</target>
        </trans-unit>
        <trans-unit id="8b59d72e0e3ebbc25fb8e2359b6df20989ed4f7d" translate="yes" xml:space="preserve">
          <source>The source for Django&amp;rsquo;s own &lt;code&gt;ImageField&lt;/code&gt; (in &lt;code&gt;django/db/models/fields/files.py&lt;/code&gt;) is a great example of how to subclass &lt;code&gt;FileField&lt;/code&gt; to support a particular type of file, as it incorporates all of the techniques described above.</source>
          <target state="translated">Django自身の &lt;code&gt;ImageField&lt;/code&gt; （ &lt;code&gt;django/db/models/fields/files.py&lt;/code&gt; 内）のソースは、 &lt;code&gt;FileField&lt;/code&gt; をサブクラス化して特定のタイプのファイルをサポートする方法の優れた例です。</target>
        </trans-unit>
        <trans-unit id="91d9e632ff2a71021b352596571ac121915320b7" translate="yes" xml:space="preserve">
          <source>The source of the language information is the &lt;code&gt;django.conf.locale&lt;/code&gt; module. Similar access to this information is available for template code. See below.</source>
          <target state="translated">言語情報のソースは &lt;code&gt;django.conf.locale&lt;/code&gt; モジュールです。この情報への同様のアクセスは、テンプレートコードで利用できます。下記参照。</target>
        </trans-unit>
        <trans-unit id="9f746499367e42aad9a8ada8bd6243a605585610" translate="yes" xml:space="preserve">
          <source>The spatial lookups in this section are available for &lt;a href=&quot;model-api#django.contrib.gis.db.models.GeometryField&quot;&gt;&lt;code&gt;GeometryField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;model-api#django.contrib.gis.db.models.RasterField&quot;&gt;&lt;code&gt;RasterField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このセクションの空間ルックアップは、&lt;a href=&quot;model-api#django.contrib.gis.db.models.GeometryField&quot;&gt; &lt;code&gt;GeometryField&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;model-api#django.contrib.gis.db.models.RasterField&quot;&gt; &lt;code&gt;RasterField&lt;/code&gt; で&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="ade382e0e188f8e963669b6d9a567b326638dea5" translate="yes" xml:space="preserve">
          <source>The spatial reference system of the raster, as a &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; instance. The SRS can be changed by setting it to an other &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; or providing any input that is accepted by the &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;インスタンスとしての、ラスターの空間参照系。SRSを変更するには、SRSを他の&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; に&lt;/a&gt;設定するか、&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;コンストラクターが受け入れる入力を提供します。</target>
        </trans-unit>
        <trans-unit id="5f344776c834916f1ca5bb889c884ef362eeb5de" translate="yes" xml:space="preserve">
          <source>The standard &lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt;&lt;code&gt;django.contrib.auth.logout()&lt;/code&gt;&lt;/a&gt; function actually does a bit more than this to prevent inadvertent data leakage. It calls the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt;. We are using this example as a demonstration of how to work with session objects, not as a full &lt;code&gt;logout()&lt;/code&gt; implementation.</source>
          <target state="translated">標準の&lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt; &lt;code&gt;django.contrib.auth.logout()&lt;/code&gt; &lt;/a&gt;関数は、不注意によるデータ漏洩を防ぐために、実際にはこれよりも少し多く機能します。 &lt;code&gt;request.session&lt;/code&gt; の&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。この例は、完全な &lt;code&gt;logout()&lt;/code&gt; 実装としてではなく、セッションオブジェクトの操作方法のデモンストレーションとして使用しています。</target>
        </trans-unit>
        <trans-unit id="9420c2daed09e06f0a2e7efc640e408af5f27e29" translate="yes" xml:space="preserve">
          <source>The standard deviation of all pixel values of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドのすべてのピクセル値の標準偏差（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="52c907cfa056aa62789f972666a5ed08a998ff7c" translate="yes" xml:space="preserve">
          <source>The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the &lt;code&gt;staticfiles&lt;/code&gt; app ships with a &lt;strong&gt;quick and dirty helper view&lt;/strong&gt; that you can use to serve files locally in development.</source>
          <target state="translated">静的ファイルツールは主に、静的ファイルを本番環境に正常にデプロイするのに役立つように設計されています。これは通常、個別の専用の静的ファイルサーバーを意味します。これは、ローカルで開発するときに混乱を招くオーバーヘッドが多くなります。したがって、 &lt;code&gt;staticfiles&lt;/code&gt; アプリには、開発中にローカルでファイルを提供するために使用できる&lt;strong&gt;迅速でダーティなヘルパービュー&lt;/strong&gt;が付属しています。</target>
        </trans-unit>
        <trans-unit id="a25e531104e722dff8c461ee3f81b419d117e103" translate="yes" xml:space="preserve">
          <source>The staticfiles app</source>
          <target state="translated">staticfiles アプリ</target>
        </trans-unit>
        <trans-unit id="f6dbb8774da05789a335009679c573a34c5db592" translate="yes" xml:space="preserve">
          <source>The statistics can also be retrieved directly by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.min&quot;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.max&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.mean&quot;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.std&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">統計は、&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.min&quot;&gt; &lt;code&gt;min&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.max&quot;&gt; &lt;code&gt;max&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.mean&quot;&gt; &lt;code&gt;mean&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.std&quot;&gt; &lt;code&gt;std&lt;/code&gt; &lt;/a&gt;プロパティにアクセスして直接取得することもできます。</target>
        </trans-unit>
        <trans-unit id="747de47b831a27772126bd5ae7a678d87db52af7" translate="yes" xml:space="preserve">
          <source>The status code for the response. Defaults to &lt;code&gt;200&lt;/code&gt;.</source>
          <target state="translated">応答のステータスコード。デフォルトは &lt;code&gt;200&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0088397db0db666ae508388378a792dcf8d5ba0f" translate="yes" xml:space="preserve">
          <source>The steps in this guide have been tested with Windows 7, 8, and 10. In other versions, the steps would be similar. You will need to be familiar with using the Windows command prompt.</source>
          <target state="translated">このガイドの手順は、Windows 7、8、10でテストされています。他のバージョンでも手順は同様です。Windowsのコマンドプロンプトの使い方に慣れている必要があります。</target>
        </trans-unit>
        <trans-unit id="af80f94c1622d98a6374dfee9bf21cb2568e354b" translate="yes" xml:space="preserve">
          <source>The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method). The regular expressions used to find those paths (&lt;code&gt;django.contrib.staticfiles.storage.HashedFilesMixin.patterns&lt;/code&gt;) by default covers the &lt;a href=&quot;https://www.w3.org/TR/CSS2/cascade.html#at-import&quot;&gt;@import&lt;/a&gt; rule and &lt;a href=&quot;https://www.w3.org/TR/CSS2/syndata.html#uri&quot;&gt;url()&lt;/a&gt; statement of &lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;Cascading Style Sheets&lt;/a&gt;. For example, the &lt;code&gt;'css/styles.css'&lt;/code&gt; file with the content</source>
          <target state="translated">ストレージバックエンドは、他の保存済みファイルと一致する保存済みファイルで見つかったパスを、キャッシュされたコピーのパスで自動的に置き換えます（&lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt;メソッドを使用）。それらのパスを見つけるために使用される正規表現（ &lt;code&gt;django.contrib.staticfiles.storage.HashedFilesMixin.patterns&lt;/code&gt; ）は、デフォルトで&lt;a href=&quot;https://www.w3.org/TR/CSS2/cascade.html#at-import&quot;&gt;@import&lt;/a&gt;ルールと&lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;カスケードスタイルシートの&lt;/a&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/syndata.html#uri&quot;&gt;url（）&lt;/a&gt;ステートメントをカバーしています。たとえば、コンテンツを含む &lt;code&gt;'css/styles.css'&lt;/code&gt; ファイル</target>
        </trans-unit>
        <trans-unit id="60d9065af769a80b59202a2967aa7ef73e6aa333" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'blog_entry.date_updated'&lt;/code&gt; (without the surrounding quotes).</source>
          <target state="translated">文字列 &lt;code&gt;'blog_entry.date_updated'&lt;/code&gt; （前後の引用符なし）。</target>
        </trans-unit>
        <trans-unit id="3296d09e657b722396695063524cf10089799fe9" translate="yes" xml:space="preserve">
          <source>The string domain is &lt;code&gt;django&lt;/code&gt; or &lt;code&gt;djangojs&lt;/code&gt;. This string domain is used to differentiate between different programs that store their data in a common message-file library (usually &lt;code&gt;/usr/share/locale/&lt;/code&gt;). The &lt;code&gt;django&lt;/code&gt; domain is used for Python and template translation strings and is loaded into the global translation catalogs. The &lt;code&gt;djangojs&lt;/code&gt; domain is only used for JavaScript translation catalogs to make sure that those are as small as possible.</source>
          <target state="translated">文字列ドメインは &lt;code&gt;django&lt;/code&gt; または &lt;code&gt;djangojs&lt;/code&gt; です。この文字列ドメインは、共通のメッセージファイルライブラリ（通常は &lt;code&gt;/usr/share/locale/&lt;/code&gt; ）にデータを格納するさまざまなプログラムを区別するために使用されます。 &lt;code&gt;django&lt;/code&gt; ドメインは、Pythonとテンプレート翻訳文字列に使用され、グローバルな翻訳カタログにロードされます。 &lt;code&gt;djangojs&lt;/code&gt; ドメインは、唯一の確実ものはできる限り小さくしていることを確認するために、JavaScriptの翻訳カタログに使用されます。</target>
        </trans-unit>
        <trans-unit id="57a7cc85efc659dfc1730ee676ec740259ffab4c" translate="yes" xml:space="preserve">
          <source>The string returned by &lt;code&gt;reverse()&lt;/code&gt; is already &lt;a href=&quot;unicode#uri-and-iri-handling&quot;&gt;urlquoted&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;reverse()&lt;/code&gt; が返す文字列はすでに&lt;a href=&quot;unicode#uri-and-iri-handling&quot;&gt;urlquotedされてい&lt;/a&gt;ます。例えば：</target>
        </trans-unit>
        <trans-unit id="94e40b5fcbc4cb11fb4796da2a9bf8789e509af7" translate="yes" xml:space="preserve">
          <source>The string to use for displaying empty values in the admin site&amp;rsquo;s change list. Defaults to a dash. The value can also be overridden on a per &lt;code&gt;ModelAdmin&lt;/code&gt; basis and on a custom field within a &lt;code&gt;ModelAdmin&lt;/code&gt; by setting an &lt;code&gt;empty_value_display&lt;/code&gt; attribute on the field. See &lt;a href=&quot;#django.contrib.admin.ModelAdmin.empty_value_display&quot;&gt;&lt;code&gt;ModelAdmin.empty_value_display&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">管理サイトの変更リストに空の値を表示するために使用する文字列。デフォルトはダッシュです。フィールドに &lt;code&gt;empty_value_display&lt;/code&gt; 属性を設定することにより、 &lt;code&gt;ModelAdmin&lt;/code&gt; ごとに、および &lt;code&gt;ModelAdmin&lt;/code&gt; 内のカスタムフィールドで値をオーバーライドすることもできます。例については、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.empty_value_display&quot;&gt; &lt;code&gt;ModelAdmin.empty_value_display&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="90ef6c770931b884ac66544a723cb07028aea43b" translate="yes" xml:space="preserve">
          <source>The string you return from &lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; contain only ASCII characters (required by the URI specification, &lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html#section-2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2396#section-2&lt;/strong&gt;&lt;/a&gt;) and be URL-encoded, if necessary.</source>
          <target state="translated">あなたがから戻った文字列 &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;strong&gt;なければなりません&lt;/strong&gt; ASCII文字のみが含まれている（URIの仕様により、必要な&lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html#section-2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2396＃セクション-2 &lt;/strong&gt;&lt;/a&gt;）及び必要に応じて、URLエンコードされたこと。</target>
        </trans-unit>
        <trans-unit id="33c0de55f0449938f6519c8e1864b1e4bb1b0444" translate="yes" xml:space="preserve">
          <source>The strings you pass to &lt;code&gt;_()&lt;/code&gt; or &lt;code&gt;gettext()&lt;/code&gt; can take placeholders, specified with Python&amp;rsquo;s standard named-string interpolation syntax. Example:</source>
          <target state="translated">&lt;code&gt;_()&lt;/code&gt; または &lt;code&gt;gettext()&lt;/code&gt; に渡す文字列は、Pythonの標準の名前付き文字列補間構文で指定されたプレースホルダーを取ることができます。例：</target>
        </trans-unit>
        <trans-unit id="c4b293319b691537487b9bbd102053e5ed42c71f" translate="yes" xml:space="preserve">
          <source>The structure of &lt;code&gt;validator_config&lt;/code&gt; is identical to the structure of &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;. The return value of this function can be passed into the &lt;code&gt;password_validators&lt;/code&gt; parameter of the functions listed above.</source>
          <target state="translated">構造 &lt;code&gt;validator_config&lt;/code&gt; はの構造と同じである&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt;。この関数の戻り値は、上記の関数の &lt;code&gt;password_validators&lt;/code&gt; パラメータに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a0c818242667572561c2f757d7bf6ecd891b50a4" translate="yes" xml:space="preserve">
          <source>The subclasses are all defined as transforms, but they aren&amp;rsquo;t registered with any fields, because the obvious lookup names are already reserved by the &lt;code&gt;Extract&lt;/code&gt; subclasses.</source>
          <target state="translated">サブクラスはすべて変換として定義されていますが、明らかなルックアップ名が &lt;code&gt;Extract&lt;/code&gt; サブクラスによってすでに予約されているため、それらはどのフィールドにも登録されていません。</target>
        </trans-unit>
        <trans-unit id="14c5e420f5ca625864309aed3f85309853005af3" translate="yes" xml:space="preserve">
          <source>The suffix to append to the auto-generated candidate template name. Default suffix is &lt;code&gt;_detail&lt;/code&gt;.</source>
          <target state="translated">自動生成された候補テンプレート名に追加するサフィックス。デフォルトのサフィックスは &lt;code&gt;_detail&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0f1e2de32b68bf30a5bf2bab67a9c0bb7bad82e" translate="yes" xml:space="preserve">
          <source>The suffix to append to the auto-generated candidate template name. Default suffix is &lt;code&gt;_list&lt;/code&gt;.</source>
          <target state="translated">自動生成された候補テンプレート名に追加するサフィックス。デフォルトのサフィックスは &lt;code&gt;_list&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ee3dfc166fa26fee5916d1c5f0def15e1852ec13" translate="yes" xml:space="preserve">
          <source>The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not.</source>
          <target state="translated">パーミッションシステムでの匿名ユーザのサポートにより、匿名ユーザが何かをするためのパーミッションを持っているのに対して、非アクティブな認証ユーザはパーミッションを持っていないというシナリオが可能になりました。</target>
        </trans-unit>
        <trans-unit id="83d88239e2a2444a5a10ea7df5a124e18d42aca4" translate="yes" xml:space="preserve">
          <source>The syndication feed framework</source>
          <target state="translated">シンジケーションフィードフレームワーク</target>
        </trans-unit>
        <trans-unit id="eef3f1e313c0f13706c2d073f7a8b1f4ea08e558" translate="yes" xml:space="preserve">
          <source>The syntax for these annotations is identical to that used for the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.aggregate&quot;&gt;&lt;code&gt;aggregate()&lt;/code&gt;&lt;/a&gt; clause. Each argument to &lt;code&gt;annotate()&lt;/code&gt; describes an aggregate that is to be calculated. For example, to annotate books with the number of authors:</source>
          <target state="translated">これらの注釈の構文は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.aggregate&quot;&gt; &lt;code&gt;aggregate()&lt;/code&gt; &lt;/a&gt;句で使用される構文と同じです。 &lt;code&gt;annotate()&lt;/code&gt; の各引数は、計算される集計を記述します。たとえば、著者に著者の数で注釈を付けるには：</target>
        </trans-unit>
        <trans-unit id="0379bf652cddc975359eaa855da5137eb0b19458" translate="yes" xml:space="preserve">
          <source>The syntax of the Django template language involves four constructs.</source>
          <target state="translated">Django テンプレート言語の構文には 4 つの構文があります。</target>
        </trans-unit>
        <trans-unit id="d4504813048b000910bf4b6bbbe32178d46295d9" translate="yes" xml:space="preserve">
          <source>The system check framework is a set of static checks for validating Django projects. It detects common problems and provides hints for how to fix them. The framework is extensible so you can easily add your own checks.</source>
          <target state="translated">システムチェックフレームワークは、Django プロジェクトを検証するための静的なチェックのセットです。一般的な問題を検出し、それらを修正するためのヒントを提供します。このフレームワークは拡張可能なので、独自のチェックを簡単に追加することができます。</target>
        </trans-unit>
        <trans-unit id="dbc6e6a2dc8b61ce9943917d2fe3c920967c30a1" translate="yes" xml:space="preserve">
          <source>The system check framework performs many different types of checks that are &lt;a href=&quot;checks#system-check-builtin-tags&quot;&gt;categorized with tags&lt;/a&gt;. You can use these tags to restrict the checks performed to just those in a particular category. For example, to perform only models and compatibility checks, run:</source>
          <target state="translated">システムチェックフレームワークは&lt;a href=&quot;checks#system-check-builtin-tags&quot;&gt;、タグで分類された&lt;/a&gt;さまざまな種類のチェックを実行します。これらのタグを使用して、実行されるチェックを特定のカテゴリのチェックのみに制限できます。たとえば、モデルと互換性チェックのみを実行するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="27b2d92f213b6416484a2f33029cdd7e87f9ba03" translate="yes" xml:space="preserve">
          <source>The system only parses your raw template code once &amp;ndash; when you create the &lt;code&gt;Template&lt;/code&gt; object. From then on, it&amp;rsquo;s stored internally as a tree structure for performance.</source>
          <target state="translated">システムは、 &lt;code&gt;Template&lt;/code&gt; オブジェクトを作成するときに、生のテンプレートコードを1回だけ解析します。それ以降、パフォーマンスのためにツリー構造として内部に保存されます。</target>
        </trans-unit>
        <trans-unit id="05d2bd73761258f70fd689595b2d5c524f939ea3" translate="yes" xml:space="preserve">
          <source>The tag name &lt;code&gt;format_time&lt;/code&gt;.</source>
          <target state="translated">タグ名 &lt;code&gt;format_time&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87c98cdec407269913a37379692f0119d00836f4" translate="yes" xml:space="preserve">
          <source>The template</source>
          <target state="translated">テンプレート</target>
        </trans-unit>
        <trans-unit id="0603523d939d16f0d9861b7054ab274e11aca8b9" translate="yes" xml:space="preserve">
          <source>The template &lt;code&gt;Context&lt;/code&gt; instance that was used to render the template that produced the response content.</source>
          <target state="translated">応答コンテンツを生成するテンプレートをレンダリングするために使用されたテンプレート &lt;code&gt;Context&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="c5d4a2c2f425fe6eafdd8114b0a3e5e8c08d215d" translate="yes" xml:space="preserve">
          <source>The template backend instance from which the exception originated.</source>
          <target state="translated">例外が発生したテンプレート・バックエンドのインスタンス。</target>
        </trans-unit>
        <trans-unit id="3014343ddc6025c0a4c0650fc31e970e927227e8" translate="yes" xml:space="preserve">
          <source>The template backend to use. The built-in template backends are:</source>
          <target state="translated">使用するテンプレートバックエンド。組み込みのテンプレートバックエンドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d8c1234193ad60193b58d88d9bf278c4853403d8" translate="yes" xml:space="preserve">
          <source>The template context of all class-based generic views include a &lt;code&gt;view&lt;/code&gt; variable that points to the &lt;code&gt;View&lt;/code&gt; instance.</source>
          <target state="translated">すべてのクラスベースの汎用ビューのテンプレートコンテキストには、 &lt;code&gt;View&lt;/code&gt; インスタンスを指す &lt;code&gt;view&lt;/code&gt; 変数が含まれています。</target>
        </trans-unit>
        <trans-unit id="6a33e6f489580319d634f5534876d31401bbc7d5" translate="yes" xml:space="preserve">
          <source>The template layer</source>
          <target state="translated">テンプレートレイヤー</target>
        </trans-unit>
        <trans-unit id="866a68a6ac786e14339c6c9b326e9e8ea777f5ba" translate="yes" xml:space="preserve">
          <source>The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:</source>
          <target state="translated">テンプレートレイヤーは、ユーザーに提示する情報をレンダリングするためのデザイナーフレンドリーな構文を提供します。この構文がデザイナーによってどのように使用され、プログラマーによってどのように拡張されるかを学びます。</target>
        </trans-unit>
        <trans-unit id="e4afb1a9f1dbf211d7ed7f39b78242e41ef444ee" translate="yes" xml:space="preserve">
          <source>The template loader first looks for templates in the &lt;code&gt;DIRS&lt;/code&gt; directory. When the views in the &lt;code&gt;blog&lt;/code&gt; app ask for the &lt;code&gt;blog/post.html&lt;/code&gt; and &lt;code&gt;blog/list.html&lt;/code&gt; templates, the loader will return the files you just created.</source>
          <target state="translated">テンプレートローダーは、 &lt;code&gt;DIRS&lt;/code&gt; ディレクトリでテンプレートを探します。 &lt;code&gt;blog&lt;/code&gt; アプリのビューが &lt;code&gt;blog/post.html&lt;/code&gt; および &lt;code&gt;blog/list.html&lt;/code&gt; テンプレートを要求すると、ローダーは先ほど作成したファイルを返します。</target>
        </trans-unit>
        <trans-unit id="b49efe4f225fa59e53712110a0c7d2fcfa42ae5e" translate="yes" xml:space="preserve">
          <source>The template loader instance that constructed this &lt;code&gt;Origin&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Origin&lt;/code&gt; を構築したテンプレートローダーインスタンス。</target>
        </trans-unit>
        <trans-unit id="8ab85789d5407187c79a6cdea2e002debd13c9b5" translate="yes" xml:space="preserve">
          <source>The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes.</source>
          <target state="translated">テンプレート名は、変数かハードコードされた(引用符で囲まれた)文字列のいずれかで、シングルクォーテーションまたはダブルクォーテーションで指定します。</target>
        </trans-unit>
        <trans-unit id="7d48a9ba0de096c9bfb6c7ce9ffbcbd438b4007d" translate="yes" xml:space="preserve">
          <source>The template system isn&amp;rsquo;t safe against untrusted template authors. For example, a site shouldn&amp;rsquo;t allow its users to provide their own templates, since template authors can do things like perform XSS attacks and access properties of template variables that may contain sensitive information.</source>
          <target state="translated">テンプレートシステムは、信頼できないテンプレートの作成者に対して安全ではありません。たとえば、テンプレートの作成者はXSS攻撃を実行したり、機密情報が含まれている可能性のあるテンプレート変数のプロパティにアクセスしたりできるため、サイトではユーザーが独自のテンプレートを提供できないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c98260d6327d8f1120b0c56511538089fbbdf965" translate="yes" xml:space="preserve">
          <source>The template system uses dot-lookup syntax to access variable attributes. In the example of &lt;code&gt;{{ question.question_text }}&lt;/code&gt;, first Django does a dictionary lookup on the object &lt;code&gt;question&lt;/code&gt;. Failing that, it tries an attribute lookup &amp;ndash; which works, in this case. If attribute lookup had failed, it would&amp;rsquo;ve tried a list-index lookup.</source>
          <target state="translated">テンプレートシステムは、ドットルックアップ構文を使用して変数属性にアクセスします。 &lt;code&gt;{{ question.question_text }}&lt;/code&gt; の例では、最初にDjangoがオブジェクトの &lt;code&gt;question&lt;/code&gt; 辞書検索を行います。それが失敗した場合は、属性の検索を試みます-この場合は機能します。属性の検索が失敗した場合は、リストインデックスの検索を試みました。</target>
        </trans-unit>
        <trans-unit id="420014ab3ce944164753199bf59a7e1a4231c32e" translate="yes" xml:space="preserve">
          <source>The template system uses the first lookup type that works. It&amp;rsquo;s short-circuit logic. Here are a few examples:</source>
          <target state="translated">テンプレートシステムは、機能する最初の検索タイプを使用します。それは短絡論理です。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="2435df0bf5cbd2d824542395abc83aab528b3f74" translate="yes" xml:space="preserve">
          <source>The template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works.</source>
          <target state="translated">テンプレートシステムは、コンパイルとレンダリングの2段階のプロセスで動作します。カスタムテンプレートタグを定義するには、コンパイルとレンダリングの方法を指定します。</target>
        </trans-unit>
        <trans-unit id="da5ff6194094201794368aba3429c037c65e91d2" translate="yes" xml:space="preserve">
          <source>The template tag will output the string &lt;code&gt;/clients/client/123/&lt;/code&gt;.</source>
          <target state="translated">テンプレートタグは文字列 &lt;code&gt;/clients/client/123/&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="d2f72233c038aef222f7387c49d03e80d4b892b3" translate="yes" xml:space="preserve">
          <source>The template to customize is &lt;code&gt;admin/index.html&lt;/code&gt;. (Do the same as with &lt;code&gt;admin/base_site.html&lt;/code&gt; in the previous section &amp;ndash; copy it from the default directory to your custom template directory). Edit the file, and you&amp;rsquo;ll see it uses a template variable called &lt;code&gt;app_list&lt;/code&gt;. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best.</source>
          <target state="translated">カスタマイズするテンプレートは &lt;code&gt;admin/index.html&lt;/code&gt; です。（前のセクションの &lt;code&gt;admin/base_site.html&lt;/code&gt; と同じようにします。デフォルトのディレクトリからカスタムテンプレートディレクトリにコピーします）。ファイルを編集すると、 &lt;code&gt;app_list&lt;/code&gt; というテンプレート変数が使用されていることがわかります。この変数には、インストールされているすべてのDjangoアプリが含まれています。これを使用する代わりに、オブジェクト固有の管理ページへのリンクを、あなたが最善だと思う方法でハードコードすることができます。</target>
        </trans-unit>
        <trans-unit id="59513e3f745db68379079c908f6ea78957e13876" translate="yes" xml:space="preserve">
          <source>The template used to render the inline on the page.</source>
          <target state="translated">ページのインラインをレンダリングするために使用されるテンプレートです。</target>
        </trans-unit>
        <trans-unit id="c30e31e258f8031120b13df3b1446595293a79cf" translate="yes" xml:space="preserve">
          <source>The template used to render the map widget.</source>
          <target state="translated">マップ ウィジェットのレンダリングに使用されるテンプレート。</target>
        </trans-unit>
        <trans-unit id="dd2a16b1e5704d7f6d1d57161727756f051bdd76" translate="yes" xml:space="preserve">
          <source>The term &lt;strong&gt;application&lt;/strong&gt; describes a Python package that provides some set of features. Applications &lt;a href=&quot;../intro/reusable-apps&quot;&gt;may be reused&lt;/a&gt; in various projects.</source>
          <target state="translated">&lt;strong&gt;アプリケーション&lt;/strong&gt;という用語は、いくつかの機能セットを提供するPythonパッケージを表します。アプリケーション&lt;a href=&quot;../intro/reusable-apps&quot;&gt;は&lt;/a&gt;さまざまなプロジェクトで再利用できます。</target>
        </trans-unit>
        <trans-unit id="41f52e128f63852524fd0e93b7b85919a73346cf" translate="yes" xml:space="preserve">
          <source>The term &lt;strong&gt;project&lt;/strong&gt; describes a Django web application. The project Python package is defined primarily by a settings module, but it usually contains other things. For example, when you run &lt;code&gt;django-admin startproject mysite&lt;/code&gt; you&amp;rsquo;ll get a &lt;code&gt;mysite&lt;/code&gt; project directory that contains a &lt;code&gt;mysite&lt;/code&gt; Python package with &lt;code&gt;settings.py&lt;/code&gt;, &lt;code&gt;urls.py&lt;/code&gt;, &lt;code&gt;asgi.py&lt;/code&gt; and &lt;code&gt;wsgi.py&lt;/code&gt;. The project package is often extended to include things like fixtures, CSS, and templates which aren&amp;rsquo;t tied to a particular application.</source>
          <target state="translated">&lt;strong&gt;プロジェクト&lt;/strong&gt;という用語は、Django Webアプリケーションを表します。プロジェクトPythonパッケージは主に設定モジュールによって定義されますが、通常は他のものが含まれています。たとえば、 &lt;code&gt;django-admin startproject mysite&lt;/code&gt; を実行すると、 &lt;code&gt;settings.py&lt;/code&gt; 、 &lt;code&gt;urls.py&lt;/code&gt; 、 &lt;code&gt;asgi.py&lt;/code&gt; 、 &lt;code&gt;wsgi.py&lt;/code&gt; を含む &lt;code&gt;mysite&lt;/code&gt; Pythonパッケージを含む &lt;code&gt;mysite&lt;/code&gt; プロジェクトディレクトリが取得されます。多くの場合、プロジェクトパッケージは、特定のアプリケーションに関連付けられていないフィクスチャ、CSS、テンプレートなどを含むように拡張されます。</target>
        </trans-unit>
        <trans-unit id="81e046bdc21e5b84f8c7331c494a17bd41fbed61" translate="yes" xml:space="preserve">
          <source>The test client</source>
          <target state="translated">テストクライアント</target>
        </trans-unit>
        <trans-unit id="e3b979f527b2b425b72a8eb0a4e95a3075f24a90" translate="yes" xml:space="preserve">
          <source>The test client does &lt;em&gt;not&lt;/em&gt; require the Web server to be running. In fact, it will run just fine with no Web server running at all! That&amp;rsquo;s because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly.</source>
          <target state="translated">テストクライアントでは、Webサーバーが実行されている必要はありませ&lt;em&gt;ん&lt;/em&gt;。実際、Webサーバーがまったく実行されていなくても問題なく実行されます。これは、HTTPのオーバーヘッドを回避し、Djangoフレームワークを直接処理するためです。これにより、単体テストをすばやく実行できます。</target>
        </trans-unit>
        <trans-unit id="7edfa2238cd385f19f4cdbaedc7031b5044917de" translate="yes" xml:space="preserve">
          <source>The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically.</source>
          <target state="translated">テストクライアントはダミーの Web ブラウザとして動作する Python クラスで、ビューをテストしたり、Django で動くアプリケーションとプログラムで対話したりすることができます。</target>
        </trans-unit>
        <trans-unit id="260f5d26017a499091b3f05fda847c924083d35c" translate="yes" xml:space="preserve">
          <source>The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as &lt;a href=&quot;https://docs.python.org/3/library/urllib.html#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストクライアントは、Djangoプロジェクトを利用していないWebページを取得できません。他のWebページを取得する必要がある場合は、&lt;a href=&quot;https://docs.python.org/3/library/urllib.html#module-urllib&quot;&gt; &lt;code&gt;urllib&lt;/code&gt; &lt;/a&gt;などのPython標準ライブラリモジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="be2d8fcf9f14d12f773d1f8dc3cc233c87658ea6" translate="yes" xml:space="preserve">
          <source>The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; requests.</source>
          <target state="translated">テストクライアントはステートフルです。応答がCookieを返す場合、そのCookieはテストクライアントに保存され、後続のすべての &lt;code&gt;get()&lt;/code&gt; および &lt;code&gt;post()&lt;/code&gt; 要求とともに送信されます。</target>
        </trans-unit>
        <trans-unit id="42c2425e0b5925babc301314d02604b18e55e326" translate="yes" xml:space="preserve">
          <source>The test client that was used to make the request that resulted in the response.</source>
          <target state="translated">レスポンスが得られるリクエストを行うために使用されたテストクライアント。</target>
        </trans-unit>
        <trans-unit id="ae899e0841724c832514fc8f24d72956660cf1e8" translate="yes" xml:space="preserve">
          <source>The test database</source>
          <target state="translated">テストデータベース</target>
        </trans-unit>
        <trans-unit id="3a54f357ce1f20e1a383aa24fbd2fb3ab89dab80" translate="yes" xml:space="preserve">
          <source>The test informs us which test failed and even the line on which the failure occurred.</source>
          <target state="translated">どのテストで失敗したのか、失敗したラインまで教えてくれます。</target>
        </trans-unit>
        <trans-unit id="c97f852e959a0c3a42d10d8016db6b34eab8249f" translate="yes" xml:space="preserve">
          <source>The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don&amp;rsquo;t worry &amp;ndash; this has no effect on any other email senders outside of Django, such as your machine&amp;rsquo;s mail server, if you&amp;rsquo;re running one.)</source>
          <target state="translated">テストランナーは、通常のメールバックエンドをテストバックエンドに透過的に置き換えることでこれを実現します。（心配しないでください。マシンのメールサーバーなど、Djangoの外部の他の電子メール送信者には影響しません。）</target>
        </trans-unit>
        <trans-unit id="5f4b3bdb73e61dea1dcf6f8ac003ea00f5d817cd" translate="yes" xml:space="preserve">
          <source>The text label for each field &amp;ndash; e.g. &lt;code&gt;'Subject:'&lt;/code&gt;, &lt;code&gt;'Message:'&lt;/code&gt; and &lt;code&gt;'Cc myself:'&lt;/code&gt; is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Again, note these are merely sensible defaults; you can also specify labels manually.</source>
          <target state="translated">各フィールドのテキストラベル-たとえば、 &lt;code&gt;'Subject:'&lt;/code&gt; 、 &lt;code&gt;'Message:'&lt;/code&gt; 、 &lt;code&gt;'Cc myself:'&lt;/code&gt; は、すべての下線をスペースに変換し、最初の文字を大文字にすることによってフィールド名から生成されます。繰り返しますが、これらは単に適切なデフォルトであることに注意してください。ラベルを手動で指定することもできます。</target>
        </trans-unit>
        <trans-unit id="3e151bae08e477066ce46b1c509c1cdb097aeac8" translate="yes" xml:space="preserve">
          <source>The text to put at the end of each admin page&amp;rsquo;s &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; (a string). By default, this is &amp;ldquo;Django site admin&amp;rdquo;.</source>
          <target state="translated">各管理ページの &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; の最後に置くテキスト（文字列）。デフォルトでは、これは「Djangoサイト管理者」です。</target>
        </trans-unit>
        <trans-unit id="d87188fdf43052a4b4c59e2e840bff83afd8910d" translate="yes" xml:space="preserve">
          <source>The text to put at the top of each admin page, as an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; (a string). By default, this is &amp;ldquo;Django administration&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; （文字列）として各管理ページの上部に配置するテキスト。デフォルトでは、これは「Django管理」です。</target>
        </trans-unit>
        <trans-unit id="21f2d45cfc405073ae61fbf1f41314d2aed2b577" translate="yes" xml:space="preserve">
          <source>The text to put at the top of the admin index page (a string). By default, this is &amp;ldquo;Site administration&amp;rdquo;.</source>
          <target state="translated">管理索引ページの上部に配置するテキスト（文字列）。デフォルトでは、これは「サイト管理」です。</target>
        </trans-unit>
        <trans-unit id="887b9e6b01f4daa315577f659e9db8c8d14d226e" translate="yes" xml:space="preserve">
          <source>The textual representation of the modified object&amp;rsquo;s primary key.</source>
          <target state="translated">変更されたオブジェクトの主キーのテキスト表現。</target>
        </trans-unit>
        <trans-unit id="f177d17d1e1992fb5f13c75889ee51fde2e42340" translate="yes" xml:space="preserve">
          <source>The toolkit of base classes and mixins that Django uses to build class-based generic views are built for maximum flexibility, and as such have many hooks in the form of default method implementations and attributes that you are unlikely to be concerned with in the simplest use cases. For example, instead of limiting you to a class-based attribute for &lt;code&gt;form_class&lt;/code&gt;, the implementation uses a &lt;code&gt;get_form&lt;/code&gt; method, which calls a &lt;code&gt;get_form_class&lt;/code&gt; method, which in its default implementation returns the &lt;code&gt;form_class&lt;/code&gt; attribute of the class. This gives you several options for specifying what form to use, from an attribute, to a fully dynamic, callable hook. These options seem to add hollow complexity for simple situations, but without them, more advanced designs would be limited.</source>
          <target state="translated">Djangoがクラスベースのジェネリックビューを構築するために使用するベースクラスとミックスインのツールキットは、最大限の柔軟性を実現するように構築されているため、デフォルトのメソッド実装と属性の形で多くのフックがあり、最も簡単な使用では関係がないと思われます。ケース。たとえば、 &lt;code&gt;form_class&lt;/code&gt; のクラスベースの属性に制限する代わりに、実装は &lt;code&gt;get_form&lt;/code&gt; メソッドを使用します。このメソッドは、デフォルトの実装で &lt;code&gt;form_class&lt;/code&gt; を返す &lt;code&gt;get_form_class&lt;/code&gt; メソッドを呼び出します。クラスの属性。これにより、属性から完全に動的な呼び出し可能なフックまで、使用するフォームを指定するためのいくつかのオプションが提供されます。これらのオプションは、単純な状況では中空の複雑さを追加するように見えますが、これらがないと、より高度な設計が制限されます。</target>
        </trans-unit>
        <trans-unit id="481ac5714230893da2f1bf5f0ce185f96d0ee8b5" translate="yes" xml:space="preserve">
          <source>The topic guide on &lt;a href=&quot;queries&quot;&gt;Django&amp;rsquo;s database-abstraction API&lt;/a&gt; described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or &lt;em&gt;aggregating&lt;/em&gt; a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries.</source>
          <target state="translated">&lt;a href=&quot;queries&quot;&gt;Djangoのデータベース抽象化API&lt;/a&gt;に関するトピックガイドでは、個々のオブジェクトを作成、取得、更新、削除するDjangoクエリを使用する方法について説明しました。ただし、場合によっては、オブジェクトのコレクションを要約または&lt;em&gt;集約&lt;/em&gt;することによって派生した値を取得する必要があります。このトピックガイドでは、Djangoクエリを使用して集計値を生成および返す方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4c4fea87a0bc41c145e253afd7a395f84ed6d233" translate="yes" xml:space="preserve">
          <source>The total number of objects, across all pages.</source>
          <target state="translated">全ページにわたるオブジェクトの総数。</target>
        </trans-unit>
        <trans-unit id="e3e632ef0caaea6df46cd9a9b8d8297678f1e789" translate="yes" xml:space="preserve">
          <source>The total number of pages.</source>
          <target state="translated">総ページ数です。</target>
        </trans-unit>
        <trans-unit id="5e21ac84038dc47b937cfac50696ff70df886f49" translate="yes" xml:space="preserve">
          <source>The total number of pixels in this band. Is equal to &lt;code&gt;width * height&lt;/code&gt;.</source>
          <target state="translated">このバンドのピクセルの総数。 &lt;code&gt;width * height&lt;/code&gt; 等しい。</target>
        </trans-unit>
        <trans-unit id="cc487e6952abd1f9be3b8fa57f1b6b5c1d35cf6c" translate="yes" xml:space="preserve">
          <source>The tracebacks are present on the &lt;code&gt;__traceback__&lt;/code&gt; attribute of the errors returned when calling &lt;code&gt;send_robust()&lt;/code&gt;.</source>
          <target state="translated">トレースバックは、 &lt;code&gt;send_robust()&lt;/code&gt; を呼び出したときに返されるエラーの &lt;code&gt;__traceback__&lt;/code&gt; 属性に存在します。</target>
        </trans-unit>
        <trans-unit id="afdc746ca47557d9d1aee4cd7a9b607f845bcbc6" translate="yes" xml:space="preserve">
          <source>The translation catalogs for JavaScript should be kept as small as possible.</source>
          <target state="translated">JavaScriptの翻訳カタログはできるだけ小さくしておきましょう。</target>
        </trans-unit>
        <trans-unit id="239e37f00ec5c27960e75b0c84e61e77f59702f7" translate="yes" xml:space="preserve">
          <source>The translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt;&lt;code&gt;JavaScriptCatalog&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">JavaScriptアセットに含まれるリテラルの翻訳は、類似しているが同一ではないアルゴリズムに従って検索されます。詳細については、&lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt; &lt;code&gt;JavaScriptCatalog&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d822fc1471c8616621bbd3b05485664a68d6a953" translate="yes" xml:space="preserve">
          <source>The tricky thing here is that there&amp;rsquo;s really no such thing as a &amp;ldquo;page load,&amp;rdquo; especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, checking for the presence of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; in the response might not necessarily be appropriate for all use cases. Please refer to the &lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt; and &lt;a href=&quot;https://www.seleniumhq.org/docs/04_webdriver_advanced.html#explicit-waits&quot;&gt;Selenium documentation&lt;/a&gt; for more information.</source>
          <target state="translated">ここでトリッキーなことは、特にサーバーが初期ドキュメントを生成した後に動的にHTMLを生成する最新のWebアプリでは、「ページの読み込み」などのものが実際にはないことです。したがって、応答に &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; が存在するかどうかを確認することは、必ずしもすべてのユースケースに適しているとは限りません。詳細については、&lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt;および&lt;a href=&quot;https://www.seleniumhq.org/docs/04_webdriver_advanced.html#explicit-waits&quot;&gt;Seleniumのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f90beec2a7d95089997ab3cb32ad5b86a4aa5f2" translate="yes" xml:space="preserve">
          <source>The tutorial project has just one app, &lt;code&gt;polls&lt;/code&gt;. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the &lt;code&gt;polls&lt;/code&gt; app has a &lt;code&gt;detail&lt;/code&gt; view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the &lt;code&gt;{% url %}&lt;/code&gt; template tag?</source>
          <target state="translated">チュートリアルプロジェクトには、1つのアプリ &lt;code&gt;polls&lt;/code&gt; しかありません。実際のDjangoプロジェクトでは、5、10、20以上のアプリが存在する可能性があります。Djangoはそれらの間でどのようにURL名を区別しますか？たとえば、 &lt;code&gt;polls&lt;/code&gt; アプリには &lt;code&gt;detail&lt;/code&gt; ビューがあるため、ブログ用の同じプロジェクトのアプリがある場合があります。 &lt;code&gt;{% url %}&lt;/code&gt; テンプレートタグを使用するときに、DjangoがURLに対して作成するアプリビューを認識するようにするにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="58d7d2fc32c675eb57959cccbf0d46f6386fd5e2" translate="yes" xml:space="preserve">
          <source>The two SQL statements are functionally equivalent but the more explicit &lt;code&gt;FILTER&lt;/code&gt; may perform better.</source>
          <target state="translated">2つのSQLステートメントは機能的に同等ですが、より明示的な &lt;code&gt;FILTER&lt;/code&gt; の方がパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="674a863c89f1969cb1f6b9aa463bab50cb15db53" translate="yes" xml:space="preserve">
          <source>The two following generic class-based views are designed to display data. On many projects they are typically the most commonly used views.</source>
          <target state="translated">以下の 2 つの一般的なクラスベースのビューは、データを表示するために設計されています。多くのプロジェクトでは、これらのビューが一般的に最もよく使われています。</target>
        </trans-unit>
        <trans-unit id="b863eb1cd06b7e0eda33ebca4adf007c3ddcb435" translate="yes" xml:space="preserve">
          <source>The two functions, to compute the ETag and the last modified time, will be passed the incoming &lt;code&gt;request&lt;/code&gt; object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed &lt;code&gt;last_modified_func&lt;/code&gt; should return a standard datetime value specifying the last time the resource was modified, or &lt;code&gt;None&lt;/code&gt; if the resource doesn&amp;rsquo;t exist. The function passed to the &lt;code&gt;etag&lt;/code&gt; decorator should return a string representing the &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt; for the resource, or &lt;code&gt;None&lt;/code&gt; if it doesn&amp;rsquo;t exist.</source>
          <target state="translated">ETagと最終変更時刻を計算する2つの関数には、ラップするのに役立つビュー関数として、受信 &lt;code&gt;request&lt;/code&gt; オブジェクトと同じパラメーターが同じ順序で渡されます。 &lt;code&gt;last_modified_func&lt;/code&gt; に渡された関数は、リソースが最後に変更された時刻を指定する標準の日時値を返すか、リソースが存在しない場合は &lt;code&gt;None&lt;/code&gt; を返します。 &lt;code&gt;etag&lt;/code&gt; デコレータに渡される関数は、リソースの&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt;を表す文字列を返すか、存在しない場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc39b0594e7a35bb326c7f9d74277e40e3701521" translate="yes" xml:space="preserve">
          <source>The two-tuples are in the format &lt;code&gt;(name, field_options)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is a string representing the title of the fieldset and &lt;code&gt;field_options&lt;/code&gt; is a dictionary of information about the fieldset, including a list of fields to be displayed in it.</source>
          <target state="translated">2つのタプルの形式は &lt;code&gt;(name, field_options)&lt;/code&gt; 。ここで、 &lt;code&gt;name&lt;/code&gt; はフィールドセットのタイトルを表す文字列で、 &lt;code&gt;field_options&lt;/code&gt; はフィールドセットに関する情報のディクショナリで、フィールドセットに表示されるフィールドのリストも含まれます。</target>
        </trans-unit>
        <trans-unit id="23a7b566b24b2453b30ea223bd752e68d45709d6" translate="yes" xml:space="preserve">
          <source>The type of action logged: &lt;code&gt;ADDITION&lt;/code&gt;, &lt;code&gt;CHANGE&lt;/code&gt;, &lt;code&gt;DELETION&lt;/code&gt;.</source>
          <target state="translated">ログに記録されたアクションのタイプ： &lt;code&gt;ADDITION&lt;/code&gt; 、 &lt;code&gt;CHANGE&lt;/code&gt; 、 &lt;code&gt;DELETION&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4095ba777cd566193c49b37bf9444d663c178942" translate="yes" xml:space="preserve">
          <source>The type of filter displayed depends on the type of field you&amp;rsquo;re filtering on. Because &lt;code&gt;pub_date&lt;/code&gt; is a &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, Django knows to give appropriate filter options: &amp;ldquo;Any date&amp;rdquo;, &amp;ldquo;Today&amp;rdquo;, &amp;ldquo;Past 7 days&amp;rdquo;, &amp;ldquo;This month&amp;rdquo;, &amp;ldquo;This year&amp;rdquo;.</source>
          <target state="translated">表示されるフィルターのタイプは、フィルタリングするフィールドのタイプによって異なります。 &lt;code&gt;pub_date&lt;/code&gt; は&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;であるため、Django は「任意の日付」、「今日」、「過去7日間」、「今月」、「今年」などの適切なフィルターオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="b8cbbb3eb69fad73343b1cf903d7db0fb0d52de0" translate="yes" xml:space="preserve">
          <source>The type of raster support is listed for all lookups in the &lt;a href=&quot;#spatial-lookup-compatibility&quot;&gt;compatibility table&lt;/a&gt;. Lookups involving rasters are currently only available for the PostGIS backend.</source>
          <target state="translated">ラスターサポートのタイプは、&lt;a href=&quot;#spatial-lookup-compatibility&quot;&gt;互換性テーブルの&lt;/a&gt;すべてのルックアップにリストされています。ラスタを含むルックアップは現在、PostGISバックエンドでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e669aa32f58e6dad279fd73bb0ded65171dc36f8" translate="yes" xml:space="preserve">
          <source>The uWSGI docs offer a &lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;tutorial&lt;/a&gt; covering Django, nginx, and uWSGI (one possible deployment setup of many). The docs below are focused on how to integrate Django with uWSGI.</source>
          <target state="translated">uWSGIドキュメントは、Django、nginx、およびuWSGI（多くの1つの可能なデプロイメントセットアップ）をカバーする&lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;チュートリアル&lt;/a&gt;を提供します。以下のドキュメントは、DjangoをuWSGIと統合する方法に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="675f9e8c48e417fc0bb62998fd4589a3c32ca0ea" translate="yes" xml:space="preserve">
          <source>The uWSGI wiki describes several &lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/Install.html&quot;&gt;installation procedures&lt;/a&gt;. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:</source>
          <target state="translated">uWSGI wikiには、いくつかの&lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/Install.html&quot;&gt;インストール手順が&lt;/a&gt;記載されています。Pythonパッケージマネージャーであるpipを使用すると、単一のコマンドで任意のuWSGIバージョンをインストールできます。例えば：</target>
        </trans-unit>
        <trans-unit id="de2f854319ec9170ef19d843cc3c65d72047a46c" translate="yes" xml:space="preserve">
          <source>The underlying &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; that this class wraps.</source>
          <target state="translated">このクラスがラップする基になる&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e73d577a9e8c04eba9424f78c1e81e0a00a03ffe" translate="yes" xml:space="preserve">
          <source>The underscore character (&lt;code&gt;_&lt;/code&gt;) is used to represent &amp;ldquo;the previous result&amp;rdquo; in Python&amp;rsquo;s interactive shell and doctest tests. Installing a global &lt;code&gt;_()&lt;/code&gt; function causes interference. Explicitly importing &lt;code&gt;gettext()&lt;/code&gt; as &lt;code&gt;_()&lt;/code&gt; avoids this problem.</source>
          <target state="translated">下線文字（ &lt;code&gt;_&lt;/code&gt; ）は、Pythonの対話型シェルおよびdoctestテストで「前の結果」を表すために使用されます。グローバル &lt;code&gt;_()&lt;/code&gt; 関数をインストールすると、干渉が発生します。 &lt;code&gt;gettext()&lt;/code&gt; を &lt;code&gt;_()&lt;/code&gt; （）として明示的にインポートすると、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="c4c88b795ccf4b5b6da5f19eb483255d93a00694" translate="yes" xml:space="preserve">
          <source>The unittest library provides the &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt;&lt;code&gt;@skipIf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipUnless&quot;&gt;&lt;code&gt;@skipUnless&lt;/code&gt;&lt;/a&gt; decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt; &lt;code&gt;@skipIf&lt;/code&gt; &lt;/a&gt;ライブラリには@skipIfおよび&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipUnless&quot;&gt; &lt;code&gt;@skipUnless&lt;/code&gt; &lt;/a&gt;デコレータがあり、特定の条件下でテストが失敗することが事前にわかっている場合は、テストをスキップできます。</target>
        </trans-unit>
        <trans-unit id="274bc5c1adbaedf49290dd1ff8edc4f885dbb54d" translate="yes" xml:space="preserve">
          <source>The uploaded file&amp;rsquo;s relative URL can be obtained using the &lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; attribute. Internally, this calls the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.url&quot;&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/a&gt; method of the underlying &lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">アップロードされたファイルの相対URLは、&lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;属性を使用して取得できます。内部的には、これは基になる&lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt;クラスの&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.url&quot;&gt; &lt;code&gt;url()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ee75a7871a7d992c449384f1855eb9ba34439252" translate="yes" xml:space="preserve">
          <source>The upper-right coordinate, as a tuple.</source>
          <target state="translated">タプルとしての右上座標。</target>
        </trans-unit>
        <trans-unit id="c1a74184d8276fe24835484131ee8f29d921ba12" translate="yes" xml:space="preserve">
          <source>The url to redirect to when the nominated object has been successfully deleted.</source>
          <target state="translated">指名されたオブジェクトが正常に削除されたときにリダイレクトするURL。</target>
        </trans-unit>
        <trans-unit id="d39ce41ce67366d315ddf13bef1b3bc991191815" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;https://docs.python.org/3/library/enum.html#enum.unique&quot;&gt;&lt;code&gt;enum.unique()&lt;/code&gt;&lt;/a&gt; is enforced to ensure that values cannot be defined multiple times. This is unlikely to be expected in choices for a field.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/enum.html#enum.unique&quot;&gt; &lt;code&gt;enum.unique()&lt;/code&gt; &lt;/a&gt;の使用は、値が複数回定義されないようにするために強制されます。これは、フィールドの選択で期待されることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="3dc90c99fc2aa8ef655a7b4fedee59604000d447" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;WSGIApplicationGroup %{GLOBAL}&lt;/code&gt; in the configurations below presumes that your Apache instance is running only one Django application. If you are running more than one Django application, please refer to the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/configuration-guidelines.html#defining-application-groups&quot;&gt;Defining Application Groups&lt;/a&gt; section of the mod_wsgi docs for more information about this setting.</source>
          <target state="translated">以下の構成で &lt;code&gt;WSGIApplicationGroup %{GLOBAL}&lt;/code&gt; を使用する場合、Apacheインスタンスで実行されているDjangoアプリケーションは1つだけであると想定しています。複数のDjangoアプリケーションを実行している場合、この設定の詳細については、mod_wsgiドキュメントの「&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/configuration-guidelines.html#defining-application-groups&quot;&gt;アプリケーショングループ&lt;/a&gt;の定義」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ce9aa55ad527455a19f1fb5dee0cc5f1881171d" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;pk&lt;/code&gt; isn&amp;rsquo;t limited to &lt;code&gt;__exact&lt;/code&gt; queries &amp;ndash; any query term can be combined with &lt;code&gt;pk&lt;/code&gt; to perform a query on the primary key of a model:</source>
          <target state="translated">&lt;code&gt;pk&lt;/code&gt; の使用は &lt;code&gt;__exact&lt;/code&gt; クエリに限定されません。任意のクエリ用語を &lt;code&gt;pk&lt;/code&gt; と組み合わせて、モデルの主キーに対してクエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="273126119ad197e589386b39eb3b14737967b48f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;{{ emails|length }}&lt;/code&gt; calls &lt;code&gt;QuerySet.__len__()&lt;/code&gt;, filling out the rest of the cache without doing another query.</source>
          <target state="translated">&lt;code&gt;{{ emails|length }}&lt;/code&gt; 使用すると、 &lt;code&gt;QuerySet.__len__()&lt;/code&gt; 呼び出され、別のクエリを実行せずに残りのキャッシュが埋められます。</target>
        </trans-unit>
        <trans-unit id="0b30ef555288d169dbdc087902f82ddc584ac1d8" translate="yes" xml:space="preserve">
          <source>The use-case for this is when you want to display an &amp;ldquo;empty&amp;rdquo; form in which a field is initialized to a particular value. For example:</source>
          <target state="translated">この使用例は、フィールドが特定の値に初期化される「空の」フォームを表示する場合です。例えば：</target>
        </trans-unit>
        <trans-unit id="f98ac9915db27d519b4f31d99e5b73b80632ede9" translate="yes" xml:space="preserve">
          <source>The user (an &lt;a href=&quot;../../settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; instance) who performed the action.</source>
          <target state="translated">アクションを実行したユーザー（&lt;a href=&quot;../../settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;インスタンス）。</target>
        </trans-unit>
        <trans-unit id="ba7924d79d72323d07424923c90fc0caf870b08f" translate="yes" xml:space="preserve">
          <source>The user instance that just logged in.</source>
          <target state="translated">今ログインしたばかりのユーザーインスタンス。</target>
        </trans-unit>
        <trans-unit id="1d2a706cbc9d7c33b8053d9f20b4de1e3f730d1e" translate="yes" xml:space="preserve">
          <source>The user instance that just logged out or &lt;code&gt;None&lt;/code&gt; if the user was not authenticated.</source>
          <target state="translated">ログアウトしたばかりのユーザーインスタンス、またはユーザーが認証されなかった場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcef0c145350d4039e3d9fa5184930eb7093fb5a" translate="yes" xml:space="preserve">
          <source>The user model and its manager will delegate permission lookup functions (&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions&quot;&gt;&lt;code&gt;get_user_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions&quot;&gt;&lt;code&gt;get_group_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions&quot;&gt;&lt;code&gt;get_all_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;has_module_perms()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm&quot;&gt;&lt;code&gt;with_perm()&lt;/code&gt;&lt;/a&gt;) to any authentication backend that implements these functions.</source>
          <target state="translated">ユーザーモデルとそのマネージャーは、権限検索関数（&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions&quot;&gt; &lt;code&gt;get_user_permissions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions&quot;&gt; &lt;code&gt;get_group_permissions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions&quot;&gt; &lt;code&gt;get_all_permissions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;has_module_perms()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm&quot;&gt; &lt;code&gt;with_perm()&lt;/code&gt; &lt;/a&gt;）を、これらの関数を実装する認証バックエンドに委任します。</target>
        </trans-unit>
        <trans-unit id="2a13affe6b8e618bcf30d16ab31afddb530fe513" translate="yes" xml:space="preserve">
          <source>The user will have its &lt;code&gt;backend&lt;/code&gt; attribute set to the value of the &lt;code&gt;backend&lt;/code&gt; argument (which should be a dotted Python path string), or to &lt;code&gt;settings.AUTHENTICATION_BACKENDS[0]&lt;/code&gt; if a value isn&amp;rsquo;t provided. The &lt;a href=&quot;../auth/default#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; function called by &lt;a href=&quot;#django.test.Client.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; normally annotates the user like this.</source>
          <target state="translated">ユーザーの &lt;code&gt;backend&lt;/code&gt; 属性は、 &lt;code&gt;backend&lt;/code&gt; 引数の値（ドット付きのPythonパス文字列である必要があります）に &lt;code&gt;settings.AUTHENTICATION_BACKENDS[0]&lt;/code&gt; れます。値が指定されていない場合は、settings.AUTHENTICATION_BACKENDS [0]に設定されます。&lt;a href=&quot;../auth/default#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt;によって呼び出される関数&lt;a href=&quot;#django.test.Client.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;通常、このようなユーザーに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="f40dbf0ccf66035c9ac922cb2bd495a35c214797" translate="yes" xml:space="preserve">
          <source>The username and email address for the new account can be supplied by using the &lt;code&gt;--username&lt;/code&gt; and &lt;code&gt;--email&lt;/code&gt; arguments on the command line. If either of those is not supplied, &lt;code&gt;createsuperuser&lt;/code&gt; will prompt for it when running interactively.</source>
          <target state="translated">コマンドラインで &lt;code&gt;--username&lt;/code&gt; および &lt;code&gt;--email&lt;/code&gt; 引数を使用して、新しいアカウントのユーザー名と電子メールアドレスを指定できます。これらのいずれかが指定されていない場合、インタラクティブに実行するときに &lt;code&gt;createsuperuser&lt;/code&gt; がプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="def789175ec6313f4c3b4e21168ca6e1c1853404" translate="yes" xml:space="preserve">
          <source>The username passed as &lt;code&gt;remote_user&lt;/code&gt; is considered trusted. This method returns the user object with the given username, creating a new user object if &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt;&lt;code&gt;create_unknown_user&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remote_user&lt;/code&gt; として渡されたユーザー名は信頼できると見なされます。このメソッドは、指定されたユーザー名のユーザーオブジェクトを返し、&lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt; &lt;code&gt;create_unknown_user&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合に新しいユーザーオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="431f8cbfd1a96932abb875994c21572b89cffecb" translate="yes" xml:space="preserve">
          <source>The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER&lt;/code&gt;.</source>
          <target state="translated">テストの実行時に使用されるOracleデータベースに接続するときに使用するユーザー名。指定しない場合、Djangoは &lt;code&gt;'test_' + USER&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7786d2e6c321e6d912e2620304b49b99c56b85c5" translate="yes" xml:space="preserve">
          <source>The username to use when connecting to the database. Not used with SQLite.</source>
          <target state="translated">データベースに接続する際に使用するユーザー名。SQLiteでは使用しません。</target>
        </trans-unit>
        <trans-unit id="6c4203696b84799bcc5ae72ef84b0ea6971ab83a" translate="yes" xml:space="preserve">
          <source>The validation routines will only get called once, regardless of how many times you access &lt;a href=&quot;#django.forms.Form.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; or call &lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt;. This means that if validation has side effects, those side effects will only be triggered once.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form.errors&quot;&gt; &lt;code&gt;errors&lt;/code&gt; &lt;/a&gt;アクセスした回数や&lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; を&lt;/a&gt;呼び出した回数に関係なく、検証ルーチンは一度だけ呼び出されます。つまり、検証に副作用がある場合、それらの副作用は1回だけトリガーされます。</target>
        </trans-unit>
        <trans-unit id="66b0cda61ff3b53e944fdfc3dfe655c60cfbb3cd" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;form&lt;/code&gt; defaults to &lt;code&gt;ModelForm&lt;/code&gt;. This is what is passed through to &lt;a href=&quot;../../forms/models#django.forms.models.inlineformset_factory&quot;&gt;&lt;code&gt;inlineformset_factory()&lt;/code&gt;&lt;/a&gt; when creating the formset for this inline.</source>
          <target state="translated">&lt;code&gt;form&lt;/code&gt; の値のデフォルトは &lt;code&gt;ModelForm&lt;/code&gt; です。これは、このインラインの&lt;a href=&quot;../../forms/models#django.forms.models.inlineformset_factory&quot;&gt; &lt;code&gt;inlineformset_factory()&lt;/code&gt; &lt;/a&gt;作成するときにinlineformset_factory（）に渡されるものです。</target>
        </trans-unit>
        <trans-unit id="d49f07aa3764eb2da4ea4ec37d326aa1676d45df" translate="yes" xml:space="preserve">
          <source>The value for each argument is retrieved from the matching setting if the argument is &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">引数が &lt;code&gt;None&lt;/code&gt; の場合、各引数の値は一致する設定から取得されます。</target>
        </trans-unit>
        <trans-unit id="0a04c5a63b28da01c0855cf722eca4bd4c04656f" translate="yes" xml:space="preserve">
          <source>The value included in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header, including the MIME type specification and the character set encoding. If &lt;code&gt;content_type&lt;/code&gt; is specified, then its value is used. Otherwise, &lt;code&gt;'text/html'&lt;/code&gt; is used.</source>
          <target state="translated">HTTP &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーに含まれる値。MIMEタイプの仕様や文字セットのエンコーディングなど。場合 &lt;code&gt;content_type&lt;/code&gt; 指定され、その値が使用されます。それ以外の場合は、 &lt;code&gt;'text/html'&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="3a8e770a05f9768e242a5e28fa732ed6e3510a68" translate="yes" xml:space="preserve">
          <source>The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on.</source>
          <target state="translated">値は0から6までの整数で、0は日曜日、1は月曜日などを意味します。</target>
        </trans-unit>
        <trans-unit id="732620917b72ac261f1791ce97d334780ab692d8" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t respected inside of a &lt;code&gt;{% localize %}&lt;/code&gt; block.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;の値は、 &lt;code&gt;{% localize %}&lt;/code&gt; ブロック内では考慮されません。</target>
        </trans-unit>
        <trans-unit id="67ea8feda5a567ef52cb79677f9ed3e5be4f8be9" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t respected inside of a &lt;code&gt;{% localtime %}&lt;/code&gt; block.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;の値は、 &lt;code&gt;{% localtime %}&lt;/code&gt; ブロック内では考慮されません。</target>
        </trans-unit>
        <trans-unit id="7b2c3507ccaa77494d0b0708dd391ba906e88b13" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; should be in Python path syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt;. Note that the settings module should be on the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;.</source>
          <target state="translated">値 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; は Pythonのパス構文、たとえばにする必要があります &lt;code&gt;mysite.settings&lt;/code&gt; 。設定モジュールはPython &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;インポート検索パス&lt;/a&gt;上にある必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="89558af8db81c21a3e4543d219a78efd19b542c6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;config&lt;/code&gt; could also be stored in another column:</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; の値は、別の列に格納することもできます。</target>
        </trans-unit>
        <trans-unit id="1d081816f701eb655ca492d6b62c0caff4611c02" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.DayMixin.day&quot;&gt;&lt;code&gt;DayMixin.day&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.DayMixin.day&quot;&gt; &lt;code&gt;DayMixin.day&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="71d1660d6f9a19e7fbfbf739d0aef9d2eeacf611" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.MonthMixin.month&quot;&gt;&lt;code&gt;MonthMixin.month&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.MonthMixin.month&quot;&gt; &lt;code&gt;MonthMixin.month&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="226f4609720f49cd94be18a77a87223bedbd64c9" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.WeekMixin.week&quot;&gt;&lt;code&gt;WeekMixin.week&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.WeekMixin.week&quot;&gt; &lt;code&gt;WeekMixin.week&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="08c239bdeb144dcf81c89832bb248fb6ac315e1f" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.YearMixin.year&quot;&gt;&lt;code&gt;YearMixin.year&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.YearMixin.year&quot;&gt; &lt;code&gt;YearMixin.year&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="280929d455ba7974dc4c9661e146db91c8f2a5b6" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the CSRF cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">CSRF Coo​​kieの&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイト要求で送信されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="05f34ea833177727bf66769518bb78b95201dae9" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the language cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">言語Cookieの&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイト要求で送信されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="8910bb7b1c422d259507f49f930d79d5324246cc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the session cookie. This flag prevents the cookie from being sent in cross-site requests thus preventing CSRF attacks and making some methods of stealing session cookie impossible.</source>
          <target state="translated">セッションCookieの&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイトリクエストで送信されるのを防ぎ、CSRF攻撃を防ぎ、セッションCookieを盗むいくつかの方法を不可能にします。</target>
        </trans-unit>
        <trans-unit id="298e4586be06aa27d7f12e849b88b0f636afc6fe" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;day&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;day&lt;/code&gt; 引数の値。</target>
        </trans-unit>
        <trans-unit id="e64d941a32f80a7ae6df42e669a81245de42c7ba" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;day&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;day&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="62a6bb78ee5bb993b75f246347d0150e154db741" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;month&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;month&lt;/code&gt; 引数の値。</target>
        </trans-unit>
        <trans-unit id="aa12055332e36b7c6f2f35340de617e28e1e6481" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;month&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;month&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="6e5e7cee85906d927aea0475bdea4b6eedbf92a5" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;week&lt;/code&gt; argument captured in the URL pattern</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;week&lt;/code&gt; 引数の値</target>
        </trans-unit>
        <trans-unit id="0bfcc66cd6d3f68a5eca0a763fb4c503b7085fb3" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;week&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;week&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="524a33c93271d5afc33c2152361848b96ac3a3f0" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;year&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;year&lt;/code&gt; 引数の値。</target>
        </trans-unit>
        <trans-unit id="d560a643bb27590bcc2dec6cd5677cd787623e54" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;year&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="f7f4f12279eeae08cedfa7a9e14d1167e6d447be" translate="yes" xml:space="preserve">
          <source>The value of the argument &amp;ndash; this can have a default value, or be left out altogether.</source>
          <target state="translated">引数の値&amp;ndash;これにはデフォルト値を設定するか、完全に省略することができます。</target>
        </trans-unit>
        <trans-unit id="ec6ac746f0b25b7b4f2cc036d47940cd2ec2aef9" translate="yes" xml:space="preserve">
          <source>The value of the field. e.g &lt;code&gt;someone@example.com&lt;/code&gt;.</source>
          <target state="translated">フィールドの値。例： &lt;code&gt;someone@example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41b7516665c8b906dc40cf4c31049dcdc5069769" translate="yes" xml:space="preserve">
          <source>The value of the maximum X coordinate.</source>
          <target state="translated">最大X座標の値です。</target>
        </trans-unit>
        <trans-unit id="09c836cc6cf9cc8692f0d479cf06744b298bfe32" translate="yes" xml:space="preserve">
          <source>The value of the maximum Y coordinate.</source>
          <target state="translated">Y座標の最大値です。</target>
        </trans-unit>
        <trans-unit id="58bafdea94b9df2b451f5c666b3595a08835e5b7" translate="yes" xml:space="preserve">
          <source>The value of the minimum X coordinate.</source>
          <target state="translated">最小のX座標の値。</target>
        </trans-unit>
        <trans-unit id="e4e8025b92622c3296781e38fbecc4454c93dfc8" translate="yes" xml:space="preserve">
          <source>The value of the minimum Y coordinate.</source>
          <target state="translated">Y座標の最小値。</target>
        </trans-unit>
        <trans-unit id="3ef01c3485565b0704310aa95c017927c8e1f354" translate="yes" xml:space="preserve">
          <source>The value of the setting after the change. For settings that initially don&amp;rsquo;t exist, in the &amp;ldquo;teardown&amp;rdquo; phase, &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">変更後の設定値。最初は存在しない設定の「ティアダウン」フェーズでは、 &lt;code&gt;value&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="880fff0eb8eb665abc6dd4c5caf39caf9fa905ce" translate="yes" xml:space="preserve">
          <source>The value of the variable (input) &amp;ndash; not necessarily a string.</source>
          <target state="translated">変数の値（入力）&amp;ndash;必ずしも文字列ではありません。</target>
        </trans-unit>
        <trans-unit id="2000cde189dcec991f2548f4c0308723287567b2" translate="yes" xml:space="preserve">
          <source>The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field, a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object, or a &lt;code&gt;query expression &amp;lt;ref/models/expressions&amp;gt;&lt;/code&gt;). To pass a band index to the lookup, use a 3-tuple where the second entry is the band index.</source>
          <target state="translated">距離ルックアップに渡される値はタプルです。最初の2つの値は必須であり、距離を計算するためのジオメトリと距離値（フィールド単位の数値、&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクト、または &lt;code&gt;query expression &amp;lt;ref/models/expressions&amp;gt;&lt;/code&gt; ）です。バンドインデックスをルックアップに渡すには、3番目のタプルを使用します。2番目のエントリはバンドインデックスです。</target>
        </trans-unit>
        <trans-unit id="53f85ce3d67bb4f844e2ebff980ba70358c2cb64" translate="yes" xml:space="preserve">
          <source>The value should be either a boolean, a list or a tuple. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">値はブール値、リスト、またはタプルのいずれかである必要があります。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="73f4b3072b3ddf1bb6604896db5d3d4360c70e89" translate="yes" xml:space="preserve">
          <source>The value to use to represent &amp;ldquo;empty&amp;rdquo;. Defaults to an empty string.</source>
          <target state="translated">「空」を表すために使用する値。デフォルトは空の文字列です。</target>
        </trans-unit>
        <trans-unit id="84b9912d356e5407f1a60cc39f2fc002afd5a8ad" translate="yes" xml:space="preserve">
          <source>The value to use to represent &amp;ldquo;empty.&amp;rdquo; Defaults to the empty string; &lt;code&gt;None&lt;/code&gt; is another common choice here. Note that this value will not be coerced by the function given in the &lt;code&gt;coerce&lt;/code&gt; argument, so choose it accordingly.</source>
          <target state="translated">「空」を表すために使用する値。デフォルトは空の文字列です。ここではもう1つの一般的な選択肢はあり &lt;code&gt;None&lt;/code&gt; 。この値は、 &lt;code&gt;coerce&lt;/code&gt; 引数で指定された関数によって強制されないため、それに応じて選択してください。</target>
        </trans-unit>
        <trans-unit id="e726e8fcaf5eb9f16edc0e0f0220e474bb57dbda" translate="yes" xml:space="preserve">
          <source>The values are (type, value, traceback), the same as returned by Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;. Their meanings are:</source>
          <target state="translated">値は（type、value、traceback）で、Pythonの&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt;によって返されるものと同じです。それらの意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1491d5d79613a9dd1811dabfb20ea96097749151" translate="yes" xml:space="preserve">
          <source>The values from the &lt;code&gt;extra&lt;/code&gt; keywords arguments passed to &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;, etc. have precedence over the defaults passed to the class constructor.</source>
          <target state="translated">&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.test.Client.post&quot;&gt; &lt;code&gt;post()&lt;/code&gt; &lt;/a&gt;などに渡される &lt;code&gt;extra&lt;/code&gt; キーワード引数からの値は、クラスコンストラクターに渡されるデフォルトよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="98af89f29d056c33c0562b51657d7354cb3eeec8" translate="yes" xml:space="preserve">
          <source>The values in the dictionary are not case-sensitive and are automatically converted to the correct string format upon creation.</source>
          <target state="translated">辞書内の値は大文字小文字を区別せず、作成時に自動的に正しい文字列形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="3c149f927e02325eb3ee1fc1e3083ba72003ab17" translate="yes" xml:space="preserve">
          <source>The values in the dictionary should be a tuple/list of file names. See &lt;a href=&quot;#form-asset-paths&quot;&gt;the section on paths&lt;/a&gt; for details of how to specify paths to these files.</source>
          <target state="translated">辞書の値は、ファイル名のタプル/リストである必要があります。これらのファイルへのパスを指定する方法の詳細については、&lt;a href=&quot;#form-asset-paths&quot;&gt;パス&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bacff239831855e997d75de7d53cc0a1355cc1af" translate="yes" xml:space="preserve">
          <source>The values of a model&amp;rsquo;s fields won&amp;rsquo;t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values.</source>
          <target state="translated">トランザクションのロールバックが発生しても、モデルのフィールドの値は元に戻りません。これにより、手動で元のフィールド値を復元しない限り、モデルの状態が不整合になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f0feca5eeb791aec15a7643b653585ab49aca48f" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;sitemaps&lt;/code&gt; is a list of absolute URLs to each of the sitemaps.</source>
          <target state="translated">変数 &lt;code&gt;sitemaps&lt;/code&gt; は、各サイトマップへの絶対URLのリストです。</target>
        </trans-unit>
        <trans-unit id="dba44adf72bdf4c5f6ac791d193ebb5f0b8c5fc2" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;urlset&lt;/code&gt; is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">変数 &lt;code&gt;urlset&lt;/code&gt; は、サイトマップに表示されるURLのリストです。各URLは、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;クラスで定義されている属性を公開します。</target>
        </trans-unit>
        <trans-unit id="727dceea2caf913539f0780046c92d2b9e3f6d6b" translate="yes" xml:space="preserve">
          <source>The variable may also be any object with a &lt;code&gt;render()&lt;/code&gt; method that accepts a context. This allows you to reference a compiled &lt;code&gt;Template&lt;/code&gt; in your context.</source>
          <target state="translated">変数は、コンテキストを受け入れる &lt;code&gt;render()&lt;/code&gt; メソッドを持つ任意のオブジェクトにすることもできます。これにより、コンパイルされた &lt;code&gt;Template&lt;/code&gt; をコンテキストで参照できます。</target>
        </trans-unit>
        <trans-unit id="301a88295c3faec78f34621840e7333d9530c29c" translate="yes" xml:space="preserve">
          <source>The variables are:</source>
          <target state="translated">変数は</target>
        </trans-unit>
        <trans-unit id="246f1c0ac6bbda7965cd9c30be5df3fd2b48f634" translate="yes" xml:space="preserve">
          <source>The various JavaScript/JSON i18n views generate the catalog from &lt;code&gt;.mo&lt;/code&gt; files on every request. Since its output is constant, at least for a given version of a site, it&amp;rsquo;s a good candidate for caching.</source>
          <target state="translated">さまざまなJavaScript / JSON i18nビューは、リクエストごとに &lt;code&gt;.mo&lt;/code&gt; ファイルからカタログを生成します。その出力は一定であるため、少なくともサイトの特定のバージョンでは、キャッシングの候補として適しています。</target>
        </trans-unit>
        <trans-unit id="5962a25a8a29bda3527775c49bc4db85e6de9af3" translate="yes" xml:space="preserve">
          <source>The version of a specific key can be incremented and decremented using the &lt;code&gt;incr_version()&lt;/code&gt; and &lt;code&gt;decr_version()&lt;/code&gt; methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example:</source>
          <target state="translated">特定のキーのバージョンは、 &lt;code&gt;incr_version()&lt;/code&gt; および &lt;code&gt;decr_version()&lt;/code&gt; メソッドを使用して増分および減分できます。これにより、特定のキーを新しいバージョンにバンプすることができ、他のキーは影響を受けません。前の例を続けます。</target>
        </trans-unit>
        <trans-unit id="a9a808e51693db0366361c7aad4e5f6449d32f9f" translate="yes" xml:space="preserve">
          <source>The view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8224ed55eaa958cf4e74c21a59ae030d99fa1c" translate="yes" xml:space="preserve">
          <source>The view can be constructed using a &lt;code&gt;FormView&lt;/code&gt;:</source>
          <target state="translated">ビューは &lt;code&gt;FormView&lt;/code&gt; を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="901e3fe2be7e0720c39df3979063c7a7927565a8" translate="yes" xml:space="preserve">
          <source>The view expects to be called via the &lt;code&gt;POST&lt;/code&gt; method, with a &lt;code&gt;language&lt;/code&gt; parameter set in request. If session support is enabled, the view saves the language choice in the user&amp;rsquo;s session. It also saves the language choice in a cookie that is named &lt;code&gt;django_language&lt;/code&gt; by default. (The name can be changed through the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting.)</source>
          <target state="translated">ビューは、リクエストに &lt;code&gt;language&lt;/code&gt; パラメータを設定して、 &lt;code&gt;POST&lt;/code&gt; メソッドを介して呼び出されることを想定しています。セッションサポートが有効になっている場合、ビューはユーザーのセッションで言語の選択を保存します。また、デフォルトで &lt;code&gt;django_language&lt;/code&gt; という名前のcookieに言語の選択を保存します。（名前は&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定で変更できます。）</target>
        </trans-unit>
        <trans-unit id="bc4114d1cc31dcb339e09a01279d11c64f6f337a" translate="yes" xml:space="preserve">
          <source>The view function that would be used to serve the URL</source>
          <target state="translated">URL を提供するために使用されるビュー関数</target>
        </trans-unit>
        <trans-unit id="bb60be86939f6b2b36e2ed2727e150b67f9e8568" translate="yes" xml:space="preserve">
          <source>The view layer</source>
          <target state="translated">ビュー層</target>
        </trans-unit>
        <trans-unit id="dc8fc1b1fb7137f588c8acafb0a93b392b4df02b" translate="yes" xml:space="preserve">
          <source>The view returns an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object that contains the generated response. Each view function is responsible for returning an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object. (There are exceptions, but we&amp;rsquo;ll get to those later.)</source>
          <target state="translated">ビューは、生成された応答を含む&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。各ビュー関数は、&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。（例外もありますが、後で説明します）。</target>
        </trans-unit>
        <trans-unit id="94116e5f81191c215cce003dde4b658a52f20312" translate="yes" xml:space="preserve">
          <source>The views have optional arguments you can use to alter the behavior of the view. For example, if you want to change the template name a view uses, you can provide the &lt;code&gt;template_name&lt;/code&gt; argument. A way to do this is to provide keyword arguments in the URLconf, these will be passed on to the view. For example:</source>
          <target state="translated">ビューには、ビューの動作を変更するために使用できるオプションの引数があります。たとえば、ビューが使用するテンプレート名を変更する場合は、 &lt;code&gt;template_name&lt;/code&gt; 引数を指定できます。これを行う方法は、URLconfにキーワード引数を提供することです。これらはビューに渡されます。例えば：</target>
        </trans-unit>
        <trans-unit id="f376d289850fd07bafee76662dcd32e58c48cce0" translate="yes" xml:space="preserve">
          <source>The views provide a URL name for easier reference. See &lt;a href=&quot;../http/urls&quot;&gt;the URL documentation&lt;/a&gt; for details on using named URL patterns.</source>
          <target state="translated">ビューは、参照しやすいようにURL名を提供します。名前付きURLパターンの使用の詳細について&lt;a href=&quot;../http/urls&quot;&gt;は、URLのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe3f76fd9e00713b8425105073c566d748f4bc69" translate="yes" xml:space="preserve">
          <source>The views to use for these cases are specified by four variables. Their default values should suffice for most projects, but further customization is possible by overriding their default values.</source>
          <target state="translated">これらのケースで使用するビューは、4 つの変数で指定します。ほとんどのプロジェクトではこれらのデフォルト値で十分ですが、デフォルト値をオーバーライドすることでさらにカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="6a785f499bc3a631f2bf7b4b1e252762b9891777" translate="yes" xml:space="preserve">
          <source>The virtual environment will be activated automatically and you&amp;rsquo;ll see &amp;ldquo;(myproject)&amp;rdquo; next to the command prompt to designate that. If you start a new command prompt, you&amp;rsquo;ll need to activate the environment again using:</source>
          <target state="translated">仮想環境が自動的にアクティブになり、コマンドプロンプトの横に「（myproject）」と表示され、それを指定します。新しいコマンドプロンプトを開始する場合は、次のコマンドを使用して環境を再度アクティブにする必要があります。</target>
        </trans-unit>
        <trans-unit id="da1995eb6a0ae021fe94bdbab28494fbefd06f36" translate="yes" xml:space="preserve">
          <source>The warnings and errors raised by system checks must be instances of &lt;code&gt;CheckMessage&lt;/code&gt;. An instance encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.</source>
          <target state="translated">システムチェックによって生成される警告とエラーは、 &lt;code&gt;CheckMessage&lt;/code&gt; のインスタンスである必要があります。インスタンスは、報告可能な単一のエラーまたは警告をカプセル化します。また、メッセージに適用可能なコンテキストとヒント、およびフィルタリングの目的で使用される一意の識別子も提供します。</target>
        </trans-unit>
        <trans-unit id="13523debf05e9958026aea88f8499b35346f566f" translate="yes" xml:space="preserve">
          <source>The warnings and errors raised by the check method must be instances of &lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt;&lt;code&gt;CheckMessage&lt;/code&gt;&lt;/a&gt;. An instance of &lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt;&lt;code&gt;CheckMessage&lt;/code&gt;&lt;/a&gt; encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.</source>
          <target state="translated">checkメソッドによって生成される警告とエラーは、&lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt; &lt;code&gt;CheckMessage&lt;/code&gt; の&lt;/a&gt;インスタンスでなければなりません。&lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt; &lt;code&gt;CheckMessage&lt;/code&gt; &lt;/a&gt;のインスタンスは、報告可能な単一のエラーまたは警告をカプセル化します。また、メッセージに適用可能なコンテキストとヒント、およびフィルタリングの目的で使用される一意の識別子も提供します。</target>
        </trans-unit>
        <trans-unit id="047a01eda675ea876705a7edddee40d2096e3731" translate="yes" xml:space="preserve">
          <source>The warping parameters can be specified through the &lt;code&gt;ds_input&lt;/code&gt; argument. The use of &lt;code&gt;ds_input&lt;/code&gt; is analogous to the corresponding argument of the class constructor. It is a dictionary with the characteristics of the target raster. Allowed dictionary key values are width, height, SRID, origin, scale, skew, datatype, driver, and name (filename).</source>
          <target state="translated">ワーピングパラメータは、 &lt;code&gt;ds_input&lt;/code&gt; 引数で指定できます。 &lt;code&gt;ds_input&lt;/code&gt; の使用は、クラスコンストラクターの対応する引数に似ています。ターゲットラスタの特性を持つ辞書です。使用できるディクショナリキーの値は、幅、高さ、SRID、原点、スケール、スキュー、データ型、ドライバー、および名前（ファイル名）です。</target>
        </trans-unit>
        <trans-unit id="6630d921dcfe349d2ca90ef848c6ae4f290882a5" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;Manager&lt;/code&gt; classes work is documented in &lt;a href=&quot;queries&quot;&gt;Making queries&lt;/a&gt;; this document specifically touches on model options that customize &lt;code&gt;Manager&lt;/code&gt; behavior.</source>
          <target state="translated">道 &lt;code&gt;Manager&lt;/code&gt; クラスの仕事をして文書化され&lt;a href=&quot;queries&quot;&gt;たクエリを作ります&lt;/a&gt;。このドキュメントでは、特に &lt;code&gt;Manager&lt;/code&gt; の動作をカスタマイズするモデルオプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="3ff303e576b39fa9a0f7513fb6d078850cc8dfe3" translate="yes" xml:space="preserve">
          <source>The way this works is by looking up the URL definition as specified in the &lt;code&gt;polls.urls&lt;/code&gt; module. You can see exactly where the URL name of &amp;lsquo;detail&amp;rsquo; is defined below:</source>
          <target state="translated">これが機能する方法は、 &lt;code&gt;polls.urls&lt;/code&gt; モジュールで指定されたURL定義を検索することです。「detail」のURL名が定義されている場所を以下で正確に確認できます。</target>
        </trans-unit>
        <trans-unit id="b5f886c535546dbaab7c6c4368e56d690af59622" translate="yes" xml:space="preserve">
          <source>The weight should be one of the following letters: D, C, B, A. By default, these weights refer to the numbers &lt;code&gt;0.1&lt;/code&gt;, &lt;code&gt;0.2&lt;/code&gt;, &lt;code&gt;0.4&lt;/code&gt;, and &lt;code&gt;1.0&lt;/code&gt;, respectively. If you wish to weight them differently, pass a list of four floats to &lt;a href=&quot;#django.contrib.postgres.search.SearchRank&quot;&gt;&lt;code&gt;SearchRank&lt;/code&gt;&lt;/a&gt; as &lt;code&gt;weights&lt;/code&gt; in the same order above:</source>
          <target state="translated">重量が次の文字のいずれかでなければならない：D、C、B、A.デフォルトで、これらの重みは、番号を参照 &lt;code&gt;0.1&lt;/code&gt; 、 &lt;code&gt;0.2&lt;/code&gt; 、 &lt;code&gt;0.4&lt;/code&gt; 、及び &lt;code&gt;1.0&lt;/code&gt; それぞれ。それらに異なる重み付けをしたい場合は、4つのフロートのリストを上記と同じ順序で &lt;code&gt;weights&lt;/code&gt; として&lt;a href=&quot;#django.contrib.postgres.search.SearchRank&quot;&gt; &lt;code&gt;SearchRank&lt;/code&gt; に渡し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cd275e6cd3bed6cfda09f5e2dad5f6e610c08076" translate="yes" xml:space="preserve">
          <source>The whole collection of objects that is either serialized or deserialized is represented by a &lt;code&gt;&amp;lt;django-objects&amp;gt;&lt;/code&gt;-tag which contains multiple &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;-elements. Each such object has two attributes: &amp;ldquo;pk&amp;rdquo; and &amp;ldquo;model&amp;rdquo;, the latter being represented by the name of the app (&amp;ldquo;sessions&amp;rdquo;) and the lowercase name of the model (&amp;ldquo;session&amp;rdquo;) separated by a dot.</source>
          <target state="translated">シリアル化または非シリアル化されたオブジェクトのコレクション全体は、複数の &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; 要素を含む &lt;code&gt;&amp;lt;django-objects&amp;gt;&lt;/code&gt; -tag によって表されます。このような各オブジェクトには、「pk」と「モデル」という2つの属性があり、後者はアプリの名前（「セッション」）とモデルの小文字の名前（「セッション」）で区切られて表されます。</target>
        </trans-unit>
        <trans-unit id="6ecf4ea4678d42a25524f691d392b104faeda828" translate="yes" xml:space="preserve">
          <source>The whole form, when rendered for the first time, will look like:</source>
          <target state="translated">フォーム全体を初めてレンダリングすると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="77c4876350e3b5c9852f7f08b842197cd4b16ed7" translate="yes" xml:space="preserve">
          <source>The width of the band in pixels (X-axis).</source>
          <target state="translated">バンドの幅をピクセル単位(X軸)で指定します。</target>
        </trans-unit>
        <trans-unit id="e89e99d483419238a22e5d2768e54ae1d1baf073" translate="yes" xml:space="preserve">
          <source>The width of the source in pixels (X-axis).</source>
          <target state="translated">ソースの幅をピクセル単位(X軸)で指定します。</target>
        </trans-unit>
        <trans-unit id="e0fab4bf20d39d12dca2ad89d59b567377b1bd60" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;random&lt;/code&gt;, which if given, does not use the common paragraph (&amp;ldquo;Lorem ipsum dolor sit amet&amp;hellip;&amp;rdquo;) when generating text.</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; という単語は、指定された場合、テキストの生成時に共通の段落（「Lorem ipsum dolor sit amet&amp;hellip;」）を使用しません。</target>
        </trans-unit>
        <trans-unit id="2f4536762ff69418e6398c76291185956bd7e114" translate="yes" xml:space="preserve">
          <source>The words &amp;ldquo;internationalization&amp;rdquo; and &amp;ldquo;localization&amp;rdquo; often cause confusion; here&amp;rsquo;s a simplified definition:</source>
          <target state="translated">「国際化」と「ローカリゼーション」という言葉はしばしば混乱を引き起こします。ここに簡略化した定義があります：</target>
        </trans-unit>
        <trans-unit id="b619314b82e6bd5516e142f0b55738fb6a7a0d42" translate="yes" xml:space="preserve">
          <source>The work that needs to be done</source>
          <target state="translated">やるべきことは</target>
        </trans-unit>
        <trans-unit id="e9eda613d1e3d08ad5e50e3d1b17ad7cddaed19d" translate="yes" xml:space="preserve">
          <source>The world borders ZIP file contains a set of data files collectively known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Shapefile&quot;&gt;ESRI Shapefile&lt;/a&gt;, one of the most popular geospatial data formats. When unzipped, the world borders dataset includes files with the following extensions:</source>
          <target state="translated">世界の国境のZIPファイルには、&lt;a href=&quot;https://en.wikipedia.org/wiki/Shapefile&quot;&gt;ESRI Shapefile&lt;/a&gt;と総称される一連のデータファイルが含まれています。これは、最も一般的な地理空間データ形式の1つです。解凍すると、世界の国境データセットには次の拡張子を持つファイルが含まれます。</target>
        </trans-unit>
        <trans-unit id="bb808a0f4ccc3c226424f786d27cd223cda25037" translate="yes" xml:space="preserve">
          <source>The world borders data is available in this &lt;a href=&quot;https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip&quot;&gt;zip file&lt;/a&gt;. Create a &lt;code&gt;data&lt;/code&gt; directory in the &lt;code&gt;world&lt;/code&gt; application, download the world borders data, and unzip. On GNU/Linux platforms, use the following commands:</source>
          <target state="translated">世界の国境データは、この&lt;a href=&quot;https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip&quot;&gt;zipファイルで&lt;/a&gt;入手できます。 &lt;code&gt;world&lt;/code&gt; アプリケーションで &lt;code&gt;data&lt;/code&gt; ディレクトリを作成し、世界の国境データをダウンロードして、解凍します。GNU / Linuxプラットフォームでは、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="18d9f4d4b960979287f9de53c1cb361b8dbc797b" translate="yes" xml:space="preserve">
          <source>The wrappers are modeled after &lt;a href=&quot;../http/middleware&quot;&gt;middleware&lt;/a&gt; &amp;ndash; they are callables which take another callable as one of their arguments. They call that callable to invoke the (possibly wrapped) database query, and they can do what they want around that call. They are, however, created and installed by user code, and so don&amp;rsquo;t need a separate factory like middleware do.</source>
          <target state="translated">ラッパーは&lt;a href=&quot;../http/middleware&quot;&gt;ミドルウェアに&lt;/a&gt;基づいてモデル化されています。これらは、引数の1つとして別の呼び出し可能オブジェクトを使用する呼び出し可能オブジェクトです。彼らはそのcallableを呼び出して（おそらくラップされた）データベースクエリを呼び出し、その呼び出しの周りに必要なことを実行できます。ただし、これらはユーザーコードによって作成およびインストールされるため、ミドルウェアのように別個のファクトリを必要としません。</target>
        </trans-unit>
        <trans-unit id="b3b0fcbba295caf61bae168615e5bc75c064fb11" translate="yes" xml:space="preserve">
          <source>The year has an offset of +11:00 because the result transitioned into daylight saving time.</source>
          <target state="translated">結果がサマータイムに移行したため、年は+11:00のオフセットがあります。</target>
        </trans-unit>
        <trans-unit id="69d875fb99f9a1cf88fdf06c2a42dbb8d5880a19" translate="yes" xml:space="preserve">
          <source>The “sites” framework</source>
          <target state="translated">サイト」のフレームワーク</target>
        </trans-unit>
        <trans-unit id="b73acd4db8ef3e3c4621cc7bcd8969756a73f7bd" translate="yes" xml:space="preserve">
          <source>Their main use is to add common data shared by all templates to the context without repeating code in every view.</source>
          <target state="translated">彼らの主な用途は、すべてのビューでコードを繰り返すことなく、すべてのテンプレートで共有されている共通のデータをコンテキストに追加することです。</target>
        </trans-unit>
        <trans-unit id="7613f0c9cbe1da79dea8d1b08fe598652f58fc9c" translate="yes" xml:space="preserve">
          <source>Then Django attempts to import the &lt;code&gt;models&lt;/code&gt; submodule of each application, if there is one.</source>
          <target state="translated">次に、Djangoは、各アプリケーションの &lt;code&gt;models&lt;/code&gt; サブモジュール（存在する場合）をインポートしようとします。</target>
        </trans-unit>
        <trans-unit id="8cdffc32c937624675ba2e46e26a4737411084f8" translate="yes" xml:space="preserve">
          <source>Then any other &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; tests (including doctests) that may alter the database without restoring it to its original state are run.</source>
          <target state="translated">次に、データベースを元の状態に復元せずに変更する可能性のある他の&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;テスト（doctestを含む）が実行されます。</target>
        </trans-unit>
        <trans-unit id="502a52fb85029d1c8ff0b4c968afcaa60bc804c3" translate="yes" xml:space="preserve">
          <source>Then create a virtual environment for your project:</source>
          <target state="translated">次に、プロジェクト用の仮想環境を作成します。</target>
        </trans-unit>
        <trans-unit id="efbef5324e350d325d36775bc5ec708051767ad1" translate="yes" xml:space="preserve">
          <source>Then display the differences between your current copy of Django (with your changes) and the revision that you initially checked out earlier in the tutorial with:</source>
          <target state="translated">そして、あなたの現在の Django のコピー (あなたの変更を含む)と、チュートリアルで最初にチェックアウトしたリビジョンとの違いを表示してください。</target>
        </trans-unit>
        <trans-unit id="cf59a657d29a960b8c6ff2299d16b9a8954ce898" translate="yes" xml:space="preserve">
          <source>Then distance queries may be performed as follows:</source>
          <target state="translated">次に、距離クエリは以下のように実行されてもよい。</target>
        </trans-unit>
        <trans-unit id="518a996ac80772a95c380d44a6264f6172fa96b5" translate="yes" xml:space="preserve">
          <source>Then either:</source>
          <target state="translated">ならば、どっちでもいい。</target>
        </trans-unit>
        <trans-unit id="8d5637ef3657a8dd9ff5ca6f7935fab614661684" translate="yes" xml:space="preserve">
          <source>Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (&amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo;) and must be provided after the positional arguments. For example:</source>
          <target state="translated">次に、テンプレートで、スペースで区切られた任意の数の引数をテンプレートタグに渡すことができます。Pythonと同様に、キーワード引数の値は等号（「 &lt;code&gt;=&lt;/code&gt; 」）を使用して設定され、位置引数の後に指定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="a5d2af8626419ec977c25f8d2966a5f28f7995f5" translate="yes" xml:space="preserve">
          <source>Then override the &lt;code&gt;post&lt;/code&gt; method of your &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; subclass to handle multiple file uploads:</source>
          <target state="translated">次に、&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;サブクラスの &lt;code&gt;post&lt;/code&gt; メソッドをオーバーライドして、複数のファイルのアップロードを処理します。</target>
        </trans-unit>
        <trans-unit id="821e0dad9b3ce9a76c464bf4ab6ee9319e18072c" translate="yes" xml:space="preserve">
          <source>Then set the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;'path.to.MyStaticFilesStorage'&lt;/code&gt;.</source>
          <target state="translated">次に、&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;設定を &lt;code&gt;'path.to.MyStaticFilesStorage'&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c497ab6c8915be66ef6b4fc84aaecefe40f1bdd1" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;AuthorInterest&lt;/code&gt; is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, but we have to bring in &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; so we can find the author we&amp;rsquo;re talking about, and we have to remember to set &lt;code&gt;template_name&lt;/code&gt; to ensure that form errors will render the same template as &lt;code&gt;AuthorDisplay&lt;/code&gt; is using on &lt;code&gt;GET&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;AuthorInterest&lt;/code&gt; は&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;ですが、&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;者を見つけるためにSingleObjectMixinを取り込む必要があります。また、フォームエラーが &lt;code&gt;AuthorDisplay&lt;/code&gt; が &lt;code&gt;GET&lt;/code&gt; で使用しているのと同じテンプレートをレンダリングするように、 &lt;code&gt;template_name&lt;/code&gt; を設定することを忘れないでください。：</target>
        </trans-unit>
        <trans-unit id="7d5ba97fa64a9e045a1200cd0038f182a8f96a1a" translate="yes" xml:space="preserve">
          <source>Then the solution is to increase the value of the &lt;code&gt;max_allowed_packet&lt;/code&gt; setting in your MySQL configuration. For example, the default value may be something low like one megabyte &amp;ndash; the setting may be modified in MySQL&amp;rsquo;s configuration file (&lt;code&gt;my.cnf&lt;/code&gt;) in the &lt;code&gt;[mysqld]&lt;/code&gt; section:</source>
          <target state="translated">次に、解決策は、MySQL構成の &lt;code&gt;max_allowed_packet&lt;/code&gt; 設定の値を増やすことです。たとえば、デフォルト値は1メガバイトのように小さい場合があります。設定は、 &lt;code&gt;[mysqld]&lt;/code&gt; セクションのMySQLの構成ファイル（ &lt;code&gt;my.cnf&lt;/code&gt; ）で変更できます。</target>
        </trans-unit>
        <trans-unit id="7ce5bc805c0da4a5d29a030956b60f9f7e177a95" translate="yes" xml:space="preserve">
          <source>Then we can use &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and friends to do the actual work. Notice how we&amp;rsquo;re just configuring the generic class-based views here; we don&amp;rsquo;t have to write any logic ourselves:</source>
          <target state="translated">次に、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;とフレンドを使用して実際の作業を行うことができます。ここで、一般的なクラスベースのビューを構成していることに注目してください。自分でロジックを記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ac322a79d9728d55382596eed7ca0b6c576e0b42" translate="yes" xml:space="preserve">
          <source>Then we need to add this new view into our URLconf. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; is a class, not a function, so we point the URL to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; class method instead, which provides a function-like entry to class-based views:</source>
          <target state="translated">次に、この新しいビューをURLconfに追加する必要があります。&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;は関数ではなくクラスであるため、代わりに&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;クラスメソッドへのURLをポイントします。これにより、クラスベースのビューに関数のようなエントリが提供されます。</target>
        </trans-unit>
        <trans-unit id="5f0d290c1e4ac103aa0c383ed2483d9abcc72288" translate="yes" xml:space="preserve">
          <source>Then we&amp;rsquo;d write our new view &amp;ndash; &lt;code&gt;get_object&lt;/code&gt; is the method that retrieves the object &amp;ndash; so we override it and wrap the call:</source>
          <target state="translated">次に、新しいビューを記述します &lt;code&gt;get_object&lt;/code&gt; はオブジェクトを取得するメソッドです。そのため、それをオーバーライドして呼び出しをラップします。</target>
        </trans-unit>
        <trans-unit id="d5554ed3752b4200d515044ce6d7c75db0de7b6f" translate="yes" xml:space="preserve">
          <source>Then when you create your inline formset, pass in the optional argument &lt;code&gt;formset&lt;/code&gt;:</source>
          <target state="translated">次に、インラインformsetを作成するときに、オプションの引数 &lt;code&gt;formset&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="343c7250fda77c83c03efcd07fba0430ab3db162" translate="yes" xml:space="preserve">
          <source>Then you can choose which tests to run. For example, to run only fast tests:</source>
          <target state="translated">そして、実行するテストを選択することができます。例えば、高速なテストだけを実行するには</target>
        </trans-unit>
        <trans-unit id="ac05008cd958b2f6030c8064248e03e3a23ed979" translate="yes" xml:space="preserve">
          <source>Then you could use the following constructs in Jinja2 templates:</source>
          <target state="translated">そうすると、Jinja2のテンプレートで以下のような構成を使うことができます。</target>
        </trans-unit>
        <trans-unit id="0df1f81e0f1c638996941de19f9d6ce39f0cd09a" translate="yes" xml:space="preserve">
          <source>Then, add a &lt;code&gt;LiveServerTestCase&lt;/code&gt;-based test to your app&amp;rsquo;s tests module (for example: &lt;code&gt;myapp/tests.py&lt;/code&gt;). For this example, we&amp;rsquo;ll assume you&amp;rsquo;re using the &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; app and want to have static files served during the execution of your tests similar to what we get at development time with &lt;code&gt;DEBUG=True&lt;/code&gt;, i.e. without having to collect them using &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;. We&amp;rsquo;ll use the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt; subclass which provides that functionality. Replace it with &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; if you don&amp;rsquo;t need that.</source>
          <target state="translated">次に、 &lt;code&gt;LiveServerTestCase&lt;/code&gt; ベースのテストをアプリのテストモジュールに追加します（例： &lt;code&gt;myapp/tests.py&lt;/code&gt; ）。この例では、&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt;アプリを使用していて、テストの実行中に、開発時に &lt;code&gt;DEBUG=True&lt;/code&gt; を使用&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;た場合と同じように、つまり、staticstaticを使用して収集する必要がない静的ファイルを提供したいとします。その機能を提供する&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt; &lt;code&gt;StaticLiveServerTestCase&lt;/code&gt; &lt;/a&gt;サブクラスを使用します。不要な場合は、 &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="6b8fae564640dfbcd26a65f5a5829a26b29b5e07" translate="yes" xml:space="preserve">
          <source>Then, add the following required settings to your Django settings file:</source>
          <target state="translated">そして、以下の必要な設定をDjangoの設定ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="b3f78984be334ee45163950bb1bce463c55d08f8" translate="yes" xml:space="preserve">
          <source>Then, add to your stylesheet (&lt;code&gt;polls/static/polls/style.css&lt;/code&gt;):</source>
          <target state="translated">次に、スタイルシートに追加します（ &lt;code&gt;polls/static/polls/style.css&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="102a55bf8aed728efb3a35fad86d28040c8675ee" translate="yes" xml:space="preserve">
          <source>Then, all other Django-based tests (test cases based on &lt;a href=&quot;tools#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;, including &lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt;) are run with no particular ordering guaranteed nor enforced among them.</source>
          <target state="translated">次に、他のすべてのDjangoベースのテスト（&lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;を含む&lt;a href=&quot;tools#django.test.SimpleTestCase&quot;&gt; &lt;code&gt;SimpleTestCase&lt;/code&gt; &lt;/a&gt;に基づくテストケース）が実行され、それらの間で特定の順序が保証または適用されません。</target>
        </trans-unit>
        <trans-unit id="a5014bb8db4f2317d93680c7f45a1d9c21eac754" translate="yes" xml:space="preserve">
          <source>Then, all the named fixtures are installed. In this example, Django will install any JSON fixture named &lt;code&gt;mammals&lt;/code&gt;, followed by any fixture named &lt;code&gt;birds&lt;/code&gt;. See the &lt;a href=&quot;../../ref/django-admin#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; documentation for more details on defining and installing fixtures.</source>
          <target state="translated">次に、指定されたすべてのフィクスチャがインストールされます。この例では、Djangoは &lt;code&gt;mammals&lt;/code&gt; という名前のJSONフィクスチャをインストールし、その後に &lt;code&gt;birds&lt;/code&gt; という名前のフィクスチャをインストールします。フィクスチャの定義とインストールの詳細については、&lt;a href=&quot;../../ref/django-admin#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="74e1fac30320b143b022b34f80b9e398b40dceb0" translate="yes" xml:space="preserve">
          <source>Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:</source>
          <target state="translated">そして、そのカスタムタグを使いたいときはいつでも、そのライブラリをロードして、引数なしで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b0007cf87d64dd11382da88f432342f078f704b8" translate="yes" xml:space="preserve">
          <source>Then, create the template &lt;code&gt;my_template_name.txt&lt;/code&gt;, with this template code:</source>
          <target state="translated">次に、このテンプレートコードを使用して、テンプレート &lt;code&gt;my_template_name.txt&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c6dfd5133cdcd2319a7314b1af10cdd7c87c9c63" translate="yes" xml:space="preserve">
          <source>Then, edit the file and replace &lt;code&gt;{{ site_header|default:_('Django administration') }}&lt;/code&gt; (including the curly braces) with your own site&amp;rsquo;s name as you see fit. You should end up with a section of code like:</source>
          <target state="translated">Then, edit the file and replace &lt;code&gt;{{ site_header|default:_('Django administration') }}&lt;/code&gt; (including the curly braces) with your own site&amp;rsquo;s name as you see fit. You should end up with a section of code like:</target>
        </trans-unit>
        <trans-unit id="991367037470f8675cab7f6aa189140cd7f90dee" translate="yes" xml:space="preserve">
          <source>Then, it looks for and uses if it exists a &lt;code&gt;locale&lt;/code&gt; directory in each of the installed apps listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. The ones appearing first have higher precedence than the ones appearing later.</source>
          <target state="translated">次に、&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;リストされているインストール済みアプリのそれぞれに &lt;code&gt;locale&lt;/code&gt; ディレクトリが存在するかどうかを検索して使用します。最初に表示されるものは、後で表示されるものよりも優先順位が高くなります。</target>
        </trans-unit>
        <trans-unit id="6317db8091ecc8ccfbc2928cd068941f4355f082" translate="yes" xml:space="preserve">
          <source>Then, open up the file; it should look something like this:</source>
          <target state="translated">次に、ファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="b9f12e2b9930bfb78344baa7531604b32101213f" translate="yes" xml:space="preserve">
          <source>Then, pass your &lt;code&gt;BaseAuthorFormSet&lt;/code&gt; class to the factory function:</source>
          <target state="translated">次に、 &lt;code&gt;BaseAuthorFormSet&lt;/code&gt; クラスをファクトリ関数に渡します。</target>
        </trans-unit>
        <trans-unit id="d67744644efd26e6ce1181a26664d4ce860f2c4d" translate="yes" xml:space="preserve">
          <source>Then, pass your model form to the factory function:</source>
          <target state="translated">そして、モデルフォームをファクトリー関数に渡します。</target>
        </trans-unit>
        <trans-unit id="85485b5bd858245e323a74f9ab2b04b152bb9a9b" translate="yes" xml:space="preserve">
          <source>Then, to leverage this in your migrations, do the following:</source>
          <target state="translated">そして、これをマイグレーションで活用するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="83e5488000bfc60bf294db9f2716de673b753dd9" translate="yes" xml:space="preserve">
          <source>Then, to register this custom user model with Django&amp;rsquo;s admin, the following code would be required in the app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">次に、このカスタムユーザーモデルをDjangoの管理者に登録するには、アプリの &lt;code&gt;admin.py&lt;/code&gt; ファイルに次のコードが必要です。</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="03e03cc321b5b6d9559b081ba99edb7ddf892e7d" translate="yes" xml:space="preserve">
          <source>There are &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=48875&quot;&gt;known issues&lt;/a&gt; in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the &lt;a href=&quot;models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="translated">ある&lt;a href=&quot;https://bugs.mysql.com/bug.php?id=48875&quot;&gt;既知の問題&lt;/a&gt;特定のSQL文は、一定の条件の下で実行されたときに、テーブル名の場合は、変更されることがありますのMySQLのも、最新バージョンでは。この動作から発生する可能性のある問題を回避するために、可能であれば小文字のテーブル名を使用することをお勧めします。 Djangoはモデルからテーブル名を自動生成するときに小文字のテーブル名を使用するため、&lt;a href=&quot;models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt;パラメータを介してテーブル名をオーバーライドする場合、これは主に考慮事項です。</target>
        </trans-unit>
        <trans-unit id="04b75c61ec9baf5aabbeaca16361184e7040c82f" translate="yes" xml:space="preserve">
          <source>There are a couple of notable things going on. First, &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; isn&amp;rsquo;t calling &lt;code&gt;process_lhs()&lt;/code&gt;. Instead it skips the transformation of the &lt;code&gt;lhs&lt;/code&gt; done by &lt;code&gt;AbsoluteValue&lt;/code&gt; and uses the original &lt;code&gt;lhs&lt;/code&gt;. That is, we want to get &lt;code&gt;&quot;experiments&quot;.&quot;change&quot;&lt;/code&gt; not &lt;code&gt;ABS(&quot;experiments&quot;.&quot;change&quot;)&lt;/code&gt;. Referring directly to &lt;code&gt;self.lhs.lhs&lt;/code&gt; is safe as &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; can be accessed only from the &lt;code&gt;AbsoluteValue&lt;/code&gt; lookup, that is the &lt;code&gt;lhs&lt;/code&gt; is always an instance of &lt;code&gt;AbsoluteValue&lt;/code&gt;.</source>
          <target state="translated">いくつかの注目すべきことが進行中です。まず、 &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; が &lt;code&gt;process_lhs()&lt;/code&gt; を呼び出していません。代わりに、 &lt;code&gt;AbsoluteValue&lt;/code&gt; によって行われる &lt;code&gt;lhs&lt;/code&gt; の変換をスキップし、元の &lt;code&gt;lhs&lt;/code&gt; を使用します。つまり、 &lt;code&gt;ABS(&quot;experiments&quot;.&quot;change&quot;)&lt;/code&gt; &lt;code&gt;&quot;experiments&quot;.&quot;change&quot;&lt;/code&gt; なく、&quot;experiments&quot;。 &quot;change&quot;を取得する必要があります。直接参照 &lt;code&gt;self.lhs.lhs&lt;/code&gt; するように安全である &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; はからのみアクセスすることができる &lt;code&gt;AbsoluteValue&lt;/code&gt; であるルックアップ、 &lt;code&gt;lhs&lt;/code&gt; 常にのインスタンスである &lt;code&gt;AbsoluteValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb953915ffbd104c695705a592a46d68f3ef2b39" translate="yes" xml:space="preserve">
          <source>There are a couple of options, and you may use any combination of them together:</source>
          <target state="translated">いくつかの選択肢があり、任意の組み合わせを一緒に使用することができます。</target>
        </trans-unit>
        <trans-unit id="121a33293b10ada586c2e4b5754a225a451b7da6" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note, however.</source>
          <target state="translated">ただし、注意すべき点はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="731a3d5cd5ff4039694cb924c720d645ebbd8e3f" translate="yes" xml:space="preserve">
          <source>There are a few functions in &lt;code&gt;django.contrib.auth.password_validation&lt;/code&gt; that you can call from your own forms or other code to integrate password validation. This can be useful if you use custom forms for password setting, or if you have API calls that allow passwords to be set, for example.</source>
          <target state="translated">&lt;code&gt;django.contrib.auth.password_validation&lt;/code&gt; には、独自のフォームや他のコードから呼び出してパスワード検証を統合できるいくつかの関数があります。これは、パスワード設定にカスタムフォームを使用する場合や、たとえばパスワードの設定を許可するAPI呼び出しがある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="c8d0a38a5ac631e82cb27b704ccf2fa8a951bf4d" translate="yes" xml:space="preserve">
          <source>There are a few other helpers outside of the &lt;a href=&quot;#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; app to work with static files:</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt;アプリ以外にも、静的ファイルを操作するヘルパーがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="386424d5f4079becf6d133836bac41414fc383a7" translate="yes" xml:space="preserve">
          <source>There are a few other methods and attributes available on &lt;code&gt;UploadedFile&lt;/code&gt; objects; see &lt;a href=&quot;../../ref/files/uploads#django.core.files.uploadedfile.UploadedFile&quot;&gt;&lt;code&gt;UploadedFile&lt;/code&gt;&lt;/a&gt; for a complete reference.</source>
          <target state="translated">&lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトで使用できる他のいくつかのメソッドと属性があります。完全なリファレンスについては&lt;a href=&quot;../../ref/files/uploads#django.core.files.uploadedfile.UploadedFile&quot;&gt; &lt;code&gt;UploadedFile&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b20fdd0663aa959be618e8605e33bd6a99ce8d3c" translate="yes" xml:space="preserve">
          <source>There are a few restrictions on the intermediate model:</source>
          <target state="translated">中間モデルにはいくつかの制約があります。</target>
        </trans-unit>
        <trans-unit id="8ad305b3c6b245efb4e16125a98bf9cbdba76d76" translate="yes" xml:space="preserve">
          <source>There are a few settings which control Django&amp;rsquo;s file upload behavior. See &lt;a href=&quot;../../ref/settings#file-upload-settings&quot;&gt;File Upload Settings&lt;/a&gt; for details.</source>
          <target state="translated">Djangoのファイルアップロード動作を制御する設定がいくつかあります。詳細については、&lt;a href=&quot;../../ref/settings#file-upload-settings&quot;&gt;ファイルのアップロード設定&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4e0f843549ffbd0e46b24f96a7dee9b3678f8848" translate="yes" xml:space="preserve">
          <source>There are a number of custom lookups and transforms for &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt;. We will use the following example model:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; に&lt;/a&gt;は、多数のカスタム検索と変換があります。次のサンプルモデルを使用します。</target>
        </trans-unit>
        <trans-unit id="00d8108092f7f1fa9cee59beb2088dc32ed6ae5c" translate="yes" xml:space="preserve">
          <source>There are a number of custom lookups and transforms for range fields. They are available on all the above fields, but we will use the following example model:</source>
          <target state="translated">範囲フィールドには、多数のカスタムルックアップとトランスフォームがあります。これらは上記のすべてのフィールドで利用できますが、以下の例のモデルを使用します。</target>
        </trans-unit>
        <trans-unit id="87b4ac75bf5a1dbf81d6ae6f9252c6978b312484" translate="yes" xml:space="preserve">
          <source>There are a number of free services that will analyze and report on the performance of your site&amp;rsquo;s pages from the perspective of a remote HTTP client, in effect simulating the experience of an actual user.</source>
          <target state="translated">リモートHTTPクライアントの観点からサイトのページのパフォーマンスを分析して報告する多くの無料サービスがあり、実際に実際のユーザーのエクスペリエンスをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="b1b17eafe5de2d1ae75237122f28ee93b1cb3a59" translate="yes" xml:space="preserve">
          <source>There are a number of functions to use in a &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expression for computing the rank of elements or the &lt;a href=&quot;#django.db.models.functions.Ntile&quot;&gt;&lt;code&gt;Ntile&lt;/code&gt;&lt;/a&gt; of some rows.</source>
          <target state="translated">要素のランクまたは一部の行の&lt;a href=&quot;#django.db.models.functions.Ntile&quot;&gt; &lt;code&gt;Ntile&lt;/code&gt; &lt;/a&gt;を計算するために、&lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt;式で使用するいくつかの関数があります。</target>
        </trans-unit>
        <trans-unit id="c0759129393d1e4adb6fede723af7e2e3dd13e86" translate="yes" xml:space="preserve">
          <source>There are a variety of techniques and tools that can help get your code running more efficiently - faster, and using fewer system resources.</source>
          <target state="translated">コードをより効率的に実行するための様々なテクニックやツールがあります-より速く、より少ないシステムリソースを使用しています。</target>
        </trans-unit>
        <trans-unit id="ba3254d467d0968aeb0dacc8b00212e7fcbf3246" translate="yes" xml:space="preserve">
          <source>There are additional options available for Geometry fields. All the following options are optional.</source>
          <target state="translated">ジオメトリフィールドには、その他にもオプションがあります。以下のオプションはすべてオプションです。</target>
        </trans-unit>
        <trans-unit id="67d1e490be9044c5f767856617ff952784c76fee" translate="yes" xml:space="preserve">
          <source>There are also a number of &lt;a href=&quot;#third-party-notes&quot;&gt;database backends provided by third parties&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#third-party-notes&quot;&gt;サードパーティが提供するデータベースバックエンド&lt;/a&gt;も多数あります。</target>
        </trans-unit>
        <trans-unit id="7733319a183b2ee7a3a47058a440e107178b649c" translate="yes" xml:space="preserve">
          <source>There are also mixins involved in the generic edit views (&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, and the model-specific views &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.DeleteView&quot;&gt;&lt;code&gt;DeleteView&lt;/code&gt;&lt;/a&gt;), and in the date-based generic views. These are covered in the &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;mixin reference documentation&lt;/a&gt;.</source>
          <target state="translated">一般的な編集ビュー（&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;、およびモデル固有のビュー&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.DeleteView&quot;&gt; &lt;code&gt;DeleteView&lt;/code&gt; &lt;/a&gt;）、および日付ベースの一般的なビューには、ミックスインも含まれています。これらは、&lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;ミックスインリファレンスドキュメントで説明されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="73b2f2b9ac2904460e5497a84584103e8ab333cf" translate="yes" xml:space="preserve">
          <source>There are also more specialized &lt;code&gt;Operation&lt;/code&gt; objects which are for things like &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migrations&lt;/a&gt; and for advanced manual database manipulation. You can also write your own &lt;code&gt;Operation&lt;/code&gt; classes if you want to encapsulate a custom change you commonly make.</source>
          <target state="translated">また、&lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;データ移行&lt;/a&gt;や高度な手動データベース操作などのための、より特化した &lt;code&gt;Operation&lt;/code&gt; オブジェクトもあります。通常行うカスタム変更をカプセル化する場合は、独自の &lt;code&gt;Operation&lt;/code&gt; クラスを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="4ac5aa2bab85a8f18fd4efe916be287503958a99" translate="yes" xml:space="preserve">
          <source>There are also several paid-for services that perform a similar analysis, including some that are Django-aware and can integrate with your codebase to profile its performance far more comprehensively.</source>
          <target state="translated">また、同様の分析を行う有料のサービスもいくつかあり、その中には Django を意識したものや、コードベースと統合してパフォーマンスをより包括的にプロファイル化できるものもあります。</target>
        </trans-unit>
        <trans-unit id="6a54fd245d9a51c76dba8315fff5ff4f7b82a346" translate="yes" xml:space="preserve">
          <source>There are also shortcuts to make creating messages with common levels easier. When using these classes you can omit the &lt;code&gt;level&lt;/code&gt; argument because it is implied by the class name.</source>
          <target state="translated">一般的なレベルのメッセージを簡単に作成するためのショートカットもあります。これらのクラスを使用する場合、 &lt;code&gt;level&lt;/code&gt; 名はクラス名に含まれるため、省略できます。</target>
        </trans-unit>
        <trans-unit id="5760de18cd4d5787da36c2d619fa8bc63c3bab39" translate="yes" xml:space="preserve">
          <source>There are also some filters available for convenience:</source>
          <target state="translated">便利なフィルターもいくつか用意されています。</target>
        </trans-unit>
        <trans-unit id="f4f52d7538b08c4512077ec4f0de3a634ca2114c" translate="yes" xml:space="preserve">
          <source>There are cases when &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form.</source>
          <target state="translated">ビューが実行される前に &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; が実行されなかった可能性がある場合（404および500ハンドラーなど）がありますが、フォームにCSRFトークンが必要です。</target>
        </trans-unit>
        <trans-unit id="e261a626c16d3a9f7d6292e32002bd7c73699094" translate="yes" xml:space="preserve">
          <source>There are different methods to implement these views in your project. The easiest way is to include the provided URLconf in &lt;code&gt;django.contrib.auth.urls&lt;/code&gt; in your own URLconf, for example:</source>
          <target state="translated">これらのビューをプロジェクトに実装する方法はいくつかあります。最も簡単な方法は、提供のURLconfを含めることです &lt;code&gt;django.contrib.auth.urls&lt;/code&gt; 例えば、あなた自身のURLconfで：</target>
        </trans-unit>
        <trans-unit id="fba4a4e75d1df7b5e57f01418bced5773b17e19d" translate="yes" xml:space="preserve">
          <source>There are five range field types, corresponding to the built-in range types in PostgreSQL. These fields are used to store a range of values; for example the start and end timestamps of an event, or the range of ages an activity is suitable for.</source>
          <target state="translated">5つの範囲フィールド型があり、PostgreSQLの組み込み範囲型に対応しています。これらのフィールドは値の範囲を格納するために使用されます。例えば、イベントの開始と終了のタイムスタンプや、アクティビティに適した年齢の範囲などです。</target>
        </trans-unit>
        <trans-unit id="a9b9fb85e3e9211029bf261389ce28a69c628512" translate="yes" xml:space="preserve">
          <source>There are four types of values that can be used in &lt;code&gt;list_display&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; で使用できる値には4つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="1f98148510509194e859c01be9e11e92768de57c" translate="yes" xml:space="preserve">
          <source>There are many alternatives for using searching software, some of the most prominent are &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic&lt;/a&gt; and &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;. These are full document-based search solutions. To use them with data from Django models, you&amp;rsquo;ll need a layer which translates your data into a textual document, including back-references to the database ids. When a search using the engine returns a certain document, you can then look it up in the database. There are a variety of third-party libraries which are designed to help with this process.</source>
          <target state="translated">検索ソフトウェアを使用する方法は数多くありますが、最も目立つのは&lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic&lt;/a&gt;と&lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;です。これらは完全なドキュメントベースの検索ソリューションです。Djangoモデルのデータでそれらを使用するには、データをデータベースのIDへの後方参照を含むテキストドキュメントに変換するレイヤーが必要です。エンジンを使用した検索で特定のドキュメントが返された場合、データベースでそれを検索できます。このプロセスを支援するために設計されたさまざまなサードパーティライブラリがあります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
